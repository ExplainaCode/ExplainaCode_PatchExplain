record_number,buggy_code,fixed_code,code_similarity
31001,"@Override public void handle(IOContext context) throws IOException {
  QueryHandlerContext ctx=localContext.get(context);
  if (ctx == null) {
    localContext.set(context,ctx=new QueryHandlerContext(context.channel.getFd(),context.getServerConfiguration().getDbCyclesBeforeCancel()));
  }
  ChunkedResponse r=context.chunkedResponse();
  if (ctx.parseUrl(r,context.request)) {
    ctx.compileQuery(r,factory,cacheMisses,cacheHits);
    resume(context);
  }
}","@Override public void handle(IOContext context) throws IOException {
  QueryHandlerContext ctx=localContext.get(context);
  if (ctx == null) {
    localContext.set(context,ctx=new QueryHandlerContext(context.getFd(),context.getServerConfiguration().getDbCyclesBeforeCancel()));
  }
  ChunkedResponse r=context.chunkedResponse();
  if (ctx.parseUrl(r,context.request)) {
    ctx.compileQuery(r,factory,cacheMisses,cacheHits);
    resume(context);
  }
}",0.9912087912087912
31002,"public static void main(String[] args) throws Exception {
  System.err.printf(""String_Node_Str"",getVersion());
  if (args.length < 1) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (Os.type == Os._32Bit) {
    System.err.println(""String_Node_Str"");
    return;
  }
  final CharSequenceObjHashMap<String> optHash=hashArgs(args);
  String dir=optHash.get(""String_Node_Str"");
  extractSite(dir,optHash.get(""String_Node_Str"") != null);
  File conf=new File(dir,""String_Node_Str"");
  if (!conf.exists()) {
    System.err.println(""String_Node_Str"" + conf);
    return;
  }
  final ServerConfiguration configuration=new ServerConfiguration(conf);
  configureLoggers(configuration);
  final SimpleUrlMatcher matcher=new SimpleUrlMatcher();
  final Factory factory=new Factory(configuration.getDbPath().getAbsolutePath(),configuration.getDbPoolIdleTimeout(),configuration.getDbReaderPoolSize());
  matcher.put(""String_Node_Str"",new ImportHandler(configuration,factory));
  matcher.put(""String_Node_Str"",new QueryHandler(factory,configuration));
  matcher.put(""String_Node_Str"",new CsvHandler(factory,configuration));
  matcher.put(""String_Node_Str"",new ExistenceCheckHandler(factory));
  matcher.setDefaultHandler(new StaticContentHandler(configuration));
  StringBuilder welcome=Misc.getThreadLocalBuilder();
  final HttpServer server=new HttpServer(configuration,matcher);
  server.getJobs().addAll(LogFactory.INSTANCE.getJobs());
  factory.exportJobs(server.getJobs());
  if (!server.start(configuration.getHttpQueueDepth())) {
    welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
    welcome.append(""String_Node_Str"");
    System.err.println(welcome);
    System.out.println(new Date() + ""String_Node_Str"");
  }
 else {
    welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
    if (configuration.getSslConfig().isSecure()) {
      welcome.append(""String_Node_Str"");
    }
 else {
      welcome.append(""String_Node_Str"");
    }
    System.err.println(welcome);
    System.out.println(new Date() + ""String_Node_Str"");
    if (Os.type != Os.WINDOWS && optHash.get(""String_Node_Str"") == null) {
      Signal.handle(new Signal(""String_Node_Str""),new SignalHandler(){
        public void handle(        Signal signal){
        }
      }
);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      public void run(){
        System.out.println(new Date() + ""String_Node_Str"");
        server.halt();
        factory.close();
      }
    }
));
  }
}","public static void main(String[] args) throws Exception {
  System.err.printf(""String_Node_Str"",getVersion());
  if (args.length < 1) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (Os.type == Os._32Bit) {
    System.err.println(""String_Node_Str"");
    return;
  }
  final CharSequenceObjHashMap<String> optHash=hashArgs(args);
  String dir=optHash.get(""String_Node_Str"");
  extractSite(dir,optHash.get(""String_Node_Str"") != null);
  File conf=new File(dir,""String_Node_Str"");
  if (!conf.exists()) {
    System.err.println(""String_Node_Str"" + conf);
    return;
  }
  final ServerConfiguration configuration=new ServerConfiguration(conf);
  configureLoggers(configuration);
  final Factory factory=new Factory(configuration.getDbPath().getAbsolutePath(),configuration.getDbPoolIdleTimeout(),configuration.getDbReaderPoolSize());
  final FactoryEventLogger factoryEventLogger=new FactoryEventLogger(factory,10000000,5000,MilliClock.INSTANCE);
  final SimpleUrlMatcher matcher=new SimpleUrlMatcher();
  matcher.put(""String_Node_Str"",new ImportHandler(configuration,factory));
  matcher.put(""String_Node_Str"",new QueryHandler(factory,configuration));
  matcher.put(""String_Node_Str"",new CsvHandler(factory,configuration));
  matcher.put(""String_Node_Str"",new ExistenceCheckHandler(factory));
  matcher.setDefaultHandler(new StaticContentHandler(configuration));
  final HttpServer server=new HttpServer(configuration,matcher);
  ObjHashSet<Job> jobs=server.getJobs();
  jobs.addAll(LogFactory.INSTANCE.getJobs());
  jobs.add(factoryEventLogger);
  factory.exportJobs(jobs);
  StringBuilder welcome=Misc.getThreadLocalBuilder();
  if (!server.start(configuration.getHttpQueueDepth())) {
    welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
    welcome.append(""String_Node_Str"");
    System.err.println(welcome);
    System.out.println(new Date() + ""String_Node_Str"");
  }
 else {
    welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
    if (configuration.getSslConfig().isSecure()) {
      welcome.append(""String_Node_Str"");
    }
 else {
      welcome.append(""String_Node_Str"");
    }
    System.err.println(welcome);
    System.out.println(new Date() + ""String_Node_Str"");
    if (Os.type != Os.WINDOWS && optHash.get(""String_Node_Str"") == null) {
      Signal.handle(new Signal(""String_Node_Str""),new SignalHandler(){
        public void handle(        Signal signal){
        }
      }
);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      public void run(){
        System.out.println(new Date() + ""String_Node_Str"");
        server.halt();
        factoryEventLogger.close();
        factory.close();
      }
    }
));
  }
}",0.7529498525073747
31003,"public void run(){
  System.out.println(new Date() + ""String_Node_Str"");
  server.halt();
  factory.close();
}","public void run(){
  System.out.println(new Date() + ""String_Node_Str"");
  server.halt();
  factoryEventLogger.close();
  factory.close();
}",0.88
31004,"@Override public boolean canClose(Journal journal){
  String name=journal.getName();
  if (journal instanceof R) {
    Entry e=entries.get(name);
    if (e == null) {
      LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
      return true;
    }
    long thread=Thread.currentThread().getId();
    R r=(R)journal;
    if (Unsafe.arrayGetVolatile(r.entry.allocations,r.index) != UNALLOCATED) {
      if (closed == TRUE) {
        Unsafe.arrayPut(r.entry.readers,r.index,null);
        return true;
      }
      Unsafe.arrayPut(r.entry.releaseTimes,r.index,System.currentTimeMillis());
      Unsafe.arrayPutOrdered(r.entry.allocations,r.index,UNALLOCATED);
      LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$('\'').$();
      return false;
    }
    LOG.error().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(r.entry.index).$(',').$(r.index).$();
  }
 else {
    LOG.error().$(""String_Node_Str"").$(name).$();
  }
  return true;
}","@Override public boolean canClose(Journal journal){
  String name=journal.getName();
  if (journal instanceof R) {
    Entry e=entries.get(name);
    if (e == null) {
      LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
      return true;
    }
    long thread=Thread.currentThread().getId();
    R r=(R)journal;
    if (Unsafe.arrayGetVolatile(r.entry.allocations,r.index) != FactoryConstants.UNALLOCATED) {
      if (closed == TRUE) {
        Unsafe.arrayPut(r.entry.readers,r.index,null);
        return true;
      }
      Unsafe.arrayPut(r.entry.releaseTimes,r.index,System.currentTimeMillis());
      Unsafe.arrayPutOrdered(r.entry.allocations,r.index,FactoryConstants.UNALLOCATED);
      LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(r.entry.index).$(',').$(r.index).$(')').$();
      return false;
    }
    LOG.error().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(r.entry.index).$(',').$(r.index).$();
  }
 else {
    LOG.error().$(""String_Node_Str"").$(name).$();
  }
  return true;
}",0.9568515884305356
31005,"public Entry(int index){
  this.index=index;
  Arrays.fill(allocations,UNALLOCATED);
  Arrays.fill(releaseTimes,System.currentTimeMillis());
}","public Entry(int index){
  this.index=index;
  Arrays.fill(allocations,FactoryConstants.UNALLOCATED);
  Arrays.fill(releaseTimes,System.currentTimeMillis());
}",0.9435215946843852
31006,"public void unlock(String name){
  Entry e=entries.get(name);
  if (e == null) {
    return;
  }
  long thread=Thread.currentThread().getId();
  if (e.lockOwner == thread) {
    entries.remove(name);
  }
}","public void unlock(String name){
  Entry e=entries.get(name);
  if (e == null) {
    LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
    return;
  }
  long thread=Thread.currentThread().getId();
  if (e.lockOwner == thread) {
    entries.remove(name);
  }
  LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
}",0.7481751824817519
31007,"public int getBusyCount(){
  int count=0;
  for (  Map.Entry<String,Entry> me : entries.entrySet()) {
    Entry e=me.getValue();
    do {
      for (int i=0; i < ENTRY_SIZE; i++) {
        if (Unsafe.arrayGetVolatile(e.allocations,i) != UNALLOCATED && Unsafe.arrayGet(e.readers,i) != null) {
          count++;
        }
      }
      e=e.next;
    }
 while (e != null);
  }
  return count;
}","public int getBusyCount(){
  int count=0;
  for (  Map.Entry<String,Entry> me : entries.entrySet()) {
    Entry e=me.getValue();
    do {
      for (int i=0; i < ENTRY_SIZE; i++) {
        if (Unsafe.arrayGetVolatile(e.allocations,i) != FactoryConstants.UNALLOCATED && Unsafe.arrayGet(e.readers,i) != null) {
          count++;
        }
      }
      e=e.next;
    }
 while (e != null);
  }
  return count;
}",0.978776529338327
31008,"@SuppressWarnings(""String_Node_Str"") <T>Journal<T> reader(JournalMetadata<T> metadata) throws JournalException {
  if (closed == TRUE) {
    LOG.info().$(""String_Node_Str"");
    throw FactoryClosedException.INSTANCE;
  }
  String name=metadata.getName();
  Entry e=entries.get(name);
  long thread=Thread.currentThread().getId();
  if (e == null) {
    LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$('\'').$();
    e=new Entry(0);
    Entry other=entries.putIfAbsent(name,e);
    if (other != null) {
      e=other;
      LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$('\'').$();
    }
 else {
      if (getConfiguration().exists(name) != JournalConfiguration.EXISTS) {
        LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
        throw JournalDoesNotExistException.INSTANCE;
      }
      LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$('\'').$();
    }
  }
  long lockOwner=e.lockOwner;
  if (lockOwner != UNLOCKED) {
    LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(lockOwner).$();
    throw JournalLockedException.INSTANCE;
  }
  do {
    for (int i=0; i < ENTRY_SIZE; i++) {
      if (Unsafe.cas(e.allocations,i,UNALLOCATED,thread)) {
        R r=Unsafe.arrayGet(e.readers,i);
        if (r == null) {
          LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.index).$(',').$(i).$();
          r=new R(e,i,metadata,new File(getConfiguration().getJournalBase(),metadata.getName()));
          if (closed == TRUE) {
            return r;
          }
          Unsafe.arrayPut(e.readers,i,r);
          r.setCloseInterceptor(this);
        }
 else {
          LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.index).$(',').$(i).$();
          r.refresh();
        }
        if (closed == TRUE) {
          Unsafe.arrayPut(e.readers,i,null);
          r.setCloseInterceptor(null);
        }
        return r;
      }
    }
    LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(e.index + 1).$();
    if (Unsafe.getUnsafe().compareAndSwapInt(e,NEXT_STATUS,0,1)) {
      LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(e.index + 1).$();
      e.next=new Entry(e.index + 1);
    }
    e=e.next;
  }
 while (e != null && e.index < maxSegments);
  LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(this.maxSegments).$(')').$();
  throw FactoryFullException.INSTANCE;
}","@SuppressWarnings(""String_Node_Str"") <T>Journal<T> reader(JournalMetadata<T> metadata) throws JournalException {
  if (closed == TRUE) {
    LOG.info().$(""String_Node_Str"");
    throw FactoryClosedException.INSTANCE;
  }
  String name=metadata.getName();
  Entry e=entries.get(name);
  long thread=Thread.currentThread().getId();
  if (e == null) {
    LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$('\'').$();
    e=new Entry(0);
    Entry other=entries.putIfAbsent(name,e);
    if (other != null) {
      e=other;
      LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$('\'').$();
    }
 else {
      if (getConfiguration().exists(name) != JournalConfiguration.EXISTS) {
        LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
        throw JournalDoesNotExistException.INSTANCE;
      }
      LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$('\'').$();
    }
  }
  long lockOwner=e.lockOwner;
  if (lockOwner != UNLOCKED) {
    LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(lockOwner).$();
    throw JournalLockedException.INSTANCE;
  }
  do {
    for (int i=0; i < ENTRY_SIZE; i++) {
      if (Unsafe.cas(e.allocations,i,FactoryConstants.UNALLOCATED,thread)) {
        R r=Unsafe.arrayGet(e.readers,i);
        if (r == null) {
          LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.index).$(',').$(i).$(')').$();
          r=new R(e,i,metadata,new File(getConfiguration().getJournalBase(),metadata.getName()));
          if (closed == TRUE) {
            return r;
          }
          Unsafe.arrayPut(e.readers,i,r);
          r.setCloseInterceptor(this);
        }
 else {
          LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.index).$(',').$(i).$();
          r.refresh();
        }
        if (closed == TRUE) {
          Unsafe.arrayPut(e.readers,i,null);
          r.setCloseInterceptor(null);
        }
        return r;
      }
    }
    LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(e.index + 1).$();
    if (Unsafe.getUnsafe().compareAndSwapInt(e,NEXT_STATUS,0,1)) {
      LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(e.index + 1).$();
      e.next=new Entry(e.index + 1);
    }
    e=e.next;
  }
 while (e != null && e.index < maxSegments);
  LOG.info().$(""String_Node_Str"").$(thread).$(""String_Node_Str"").$(this.maxSegments).$(')').$();
  throw FactoryFullException.INSTANCE;
}",0.9952625345440188
31009,"@Override protected boolean releaseAll(long deadline){
  long thread=Thread.currentThread().getId();
  boolean removed=false;
  R r;
  for (  Map.Entry<String,Entry> me : entries.entrySet()) {
    Entry e=me.getValue();
    do {
      for (int i=0; i < ENTRY_SIZE; i++) {
        if (deadline > Unsafe.arrayGetVolatile(e.releaseTimes,i) && (r=Unsafe.arrayGet(e.readers,i)) != null) {
          if (Unsafe.cas(e.allocations,i,UNALLOCATED,thread)) {
            if (deadline > Unsafe.arrayGet(e.releaseTimes,i)) {
              removed=true;
              r.setCloseInterceptor(null);
              try {
                r.close();
                LOG.info().$(""String_Node_Str"").$(r.getName()).$(""String_Node_Str"").$();
              }
 catch (              Throwable e1) {
                LOG.error().$(""String_Node_Str"").$(r.getName()).$(""String_Node_Str"").$(e1.getMessage()).$();
              }
              Unsafe.arrayPut(e.readers,i,null);
            }
            Unsafe.arrayPutOrdered(e.allocations,i,UNALLOCATED);
          }
        }
      }
      e=e.next;
    }
 while (e != null);
  }
  return removed;
}","@Override protected boolean releaseAll(long deadline){
  long thread=Thread.currentThread().getId();
  boolean removed=false;
  int closeReason=deadline < Long.MAX_VALUE ? FactoryConstants.CR_IDLE : FactoryConstants.CR_POOL_CLOSE;
  for (  Map.Entry<String,Entry> me : entries.entrySet()) {
    Entry e=me.getValue();
    do {
      for (int i=0; i < ENTRY_SIZE; i++) {
        if (deadline > Unsafe.arrayGetVolatile(e.releaseTimes,i) && Unsafe.arrayGet(e.readers,i) != null) {
          if (Unsafe.cas(e.allocations,i,FactoryConstants.UNALLOCATED,thread)) {
            if (deadline > Unsafe.arrayGet(e.releaseTimes,i)) {
              removed=true;
              closeReader(e,i,closeReason);
            }
            Unsafe.arrayPutOrdered(e.allocations,i,FactoryConstants.UNALLOCATED);
          }
        }
      }
      e=e.next;
    }
 while (e != null);
  }
  return removed;
}",0.7194818136522172
31010,"public void lock(String name) throws JournalException {
  Entry e=entries.get(name);
  if (e == null) {
    return;
  }
  long thread=Thread.currentThread().getId();
  if (Unsafe.getUnsafe().compareAndSwapLong(e,LOCK_OWNER,UNLOCKED,thread) || Unsafe.getUnsafe().compareAndSwapLong(e,LOCK_OWNER,thread,thread)) {
    do {
      for (int i=0; i < ENTRY_SIZE; i++) {
        if (Unsafe.cas(e.allocations,i,UNALLOCATED,thread)) {
          R r=Unsafe.arrayGet(e.readers,i);
          if (r != null) {
            r.setCloseInterceptor(null);
            r.close();
            Unsafe.arrayPut(e.readers,i,null);
          }
        }
 else         if (Unsafe.arrayGet(e.readers,i) != null) {
          throw RetryLockException.INSTANCE;
        }
      }
      e=e.next;
    }
 while (e != null);
  }
 else {
    LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.lockOwner).$();
    throw JournalLockedException.INSTANCE;
  }
}","public void lock(String name) throws JournalException {
  Entry e=entries.get(name);
  if (e == null) {
    LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
    return;
  }
  long thread=Thread.currentThread().getId();
  if (Unsafe.getUnsafe().compareAndSwapLong(e,LOCK_OWNER,UNLOCKED,thread) || Unsafe.getUnsafe().compareAndSwapLong(e,LOCK_OWNER,thread,thread)) {
    do {
      for (int i=0; i < ENTRY_SIZE; i++) {
        if (Unsafe.cas(e.allocations,i,FactoryConstants.UNALLOCATED,thread)) {
          closeReader(e,i,FactoryConstants.CR_NAME_LOCK);
        }
 else         if (Unsafe.arrayGet(e.allocations,i) != thread || Unsafe.arrayGet(e.readers,i) != null) {
          LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.lockOwner).$();
          throw RetryLockException.INSTANCE;
        }
      }
      e=e.next;
    }
 while (e != null);
  }
 else {
    LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.lockOwner).$();
    throw JournalLockedException.INSTANCE;
  }
  LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
}",0.7374631268436578
31011,"private JournalWriter checkAndReturn(long thread,Entry e,String name,JournalMetadata<?> metadata) throws JournalException {
  JournalMetadata wm=e.writer.getMetadata();
  if (metadata.isCompatible(wm,false)) {
    if (metadata.getModelClass() != null && wm.getModelClass() == null) {
      closeWriter(thread,name,e,FactoryEventListener.EV_CLOSE,FactoryEventListener.EV_CLOSE_EX);
      createWriter(thread,name,e,metadata);
    }
 else {
      notifyListener(thread,name,FactoryEventListener.EV_GET);
    }
    return e.writer;
  }
  JournalMetadataException ex=new JournalMetadataException(wm,metadata);
  notifyListener(thread,name,FactoryEventListener.EV_INCOMPATIBLE);
  if (closed) {
    closeWriter(thread,name,e,FactoryEventListener.EV_CLOSE,FactoryEventListener.EV_CLOSE_EX);
  }
  e.owner=-1L;
  throw ex;
}","private JournalWriter checkAndReturn(long thread,Entry e,String name,JournalMetadata<?> metadata) throws JournalException {
  JournalMetadata wm=e.writer.getMetadata();
  if (metadata.isCompatible(wm,false)) {
    if (metadata.getModelClass() != null && wm.getModelClass() == null) {
      closeWriter(thread,name,e,FactoryEventListener.EV_CLOSE,FactoryEventListener.EV_CLOSE_EX,FactoryConstants.CR_REOPEN);
      createWriter(thread,name,e,metadata);
    }
 else {
      notifyListener(thread,name,FactoryEventListener.EV_GET);
    }
    return e.writer;
  }
  JournalMetadataException ex=new JournalMetadataException(wm,metadata);
  notifyListener(thread,name,FactoryEventListener.EV_INCOMPATIBLE);
  if (closed) {
    closeWriter(thread,name,e,FactoryEventListener.EV_CLOSE,FactoryEventListener.EV_CLOSE_EX,FactoryConstants.CR_POOL_CLOSE);
  }
  e.owner=-1L;
  throw ex;
}",0.9657210401891252
31012,"private void notifyListener(long thread,String name,int event){
  if (eventListener != null) {
    eventListener.onEvent(FactoryEventListener.SRC_WRITER,thread,name,event);
  }
}","private void notifyListener(long thread,String name,short event){
  if (eventListener != null) {
    eventListener.onEvent(FactoryEventListener.SRC_WRITER,thread,name,event);
  }
}",0.9832402234636872
31013,"@Override protected boolean releaseAll(long deadline){
  long threadId=Thread.currentThread().getId();
  boolean removed=false;
  notifyListener(threadId,null,FactoryEventListener.EV_RELEASE_ALL);
  Iterator<Map.Entry<String,Entry>> iterator=entries.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Entry> me=iterator.next();
    Entry e=me.getValue();
    if ((deadline > e.lastReleaseTime && e.owner == -1)) {
      if (Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,threadId)) {
        closeWriter(threadId,me.getKey(),e,FactoryEventListener.EV_EXPIRE,FactoryEventListener.EV_EXPIRE_EX);
        iterator.remove();
        removed=true;
        Unsafe.getUnsafe().putOrderedLong(e,ENTRY_OWNER,-1L);
      }
    }
 else     if (e.ex != null) {
      LOG.info().$(""String_Node_Str"").$(me.getKey()).$('\'').$();
      iterator.remove();
      removed=true;
    }
  }
  return removed;
}","@Override protected boolean releaseAll(long deadline){
  long threadId=Thread.currentThread().getId();
  boolean removed=false;
  final int reason=deadline == Long.MAX_VALUE ? FactoryConstants.CR_POOL_CLOSE : FactoryConstants.CR_IDLE;
  Iterator<Map.Entry<String,Entry>> iterator=entries.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Entry> me=iterator.next();
    Entry e=me.getValue();
    if ((deadline > e.lastReleaseTime && e.owner == -1)) {
      if (Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,threadId)) {
        closeWriter(threadId,me.getKey(),e,FactoryEventListener.EV_EXPIRE,FactoryEventListener.EV_EXPIRE_EX,reason);
        iterator.remove();
        removed=true;
        Unsafe.getUnsafe().putOrderedLong(e,ENTRY_OWNER,-1L);
      }
    }
 else     if (e.ex != null) {
      LOG.info().$(""String_Node_Str"").$(me.getKey()).$('\'').$();
      iterator.remove();
      removed=true;
    }
  }
  return removed;
}",0.9094759131815776
31014,"private void closeWriter(long thread,String name,Entry e,int ev,int evex){
  LOG.info().$(""String_Node_Str"").$(name).$('\'').$();
  JournalWriter w=e.writer;
  if (w != null) {
    w.setCloseInterceptor(null);
    try {
      w.close();
      e.writer=null;
      notifyListener(thread,name,ev);
    }
 catch (    Throwable e1) {
      notifyListener(thread,name,evex);
      LOG.error().$(""String_Node_Str"").$(w.getName()).$(""String_Node_Str"").$(e1.getMessage()).$();
    }
  }
}","private void closeWriter(long thread,String name,Entry e,short ev,short evex,int reason){
  JournalWriter w=e.writer;
  if (w != null) {
    w.setCloseInterceptor(null);
    try {
      w.close();
      e.writer=null;
      LOG.info().$(""String_Node_Str"").$(name).$('\'').$(FactoryConstants.closeReasonText(reason)).$();
      notifyListener(thread,name,ev);
    }
 catch (    Throwable e1) {
      notifyListener(thread,name,evex);
      LOG.error().$(""String_Node_Str"").$(w.getName()).$(""String_Node_Str"").$(e1.getMessage()).$();
    }
  }
}",0.6803519061583577
31015,"public void lock(String name) throws JournalException {
  if (closed) {
    LOG.info().$(""String_Node_Str"").$();
    throw FactoryClosedException.INSTANCE;
  }
  long thread=Thread.currentThread().getId();
  Entry e=entries.get(name);
  if (e == null) {
    e=new Entry();
    if (entries.putIfAbsent(name,e) == null) {
      notifyListener(thread,name,FactoryEventListener.EV_LOCK_SUCCESS);
      e.locked=true;
      return;
    }
 else {
      e=entries.get(name);
    }
  }
  if (e != null) {
    if ((Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,thread) || Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,thread,thread))) {
      LOG.info().$(""String_Node_Str"").$(e.owner).$(""String_Node_Str"").$(name).$();
      closeWriter(thread,name,e,FactoryEventListener.EV_LOCK_CLOSE,FactoryEventListener.EV_LOCK_CLOSE_EX);
      e.locked=true;
      notifyListener(thread,name,FactoryEventListener.EV_LOCK_SUCCESS);
      return;
    }
 else {
      LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.owner).$();
    }
  }
  notifyListener(thread,name,FactoryEventListener.EV_LOCK_BUSY);
  throw WriterBusyException.INSTANCE;
}","public void lock(String name) throws JournalException {
  if (closed) {
    LOG.info().$(""String_Node_Str"").$();
    throw FactoryClosedException.INSTANCE;
  }
  long thread=Thread.currentThread().getId();
  Entry e=entries.get(name);
  if (e == null) {
    e=new Entry();
    if (entries.putIfAbsent(name,e) == null) {
      notifyListener(thread,name,FactoryEventListener.EV_LOCK_SUCCESS);
      e.locked=true;
      return;
    }
 else {
      e=entries.get(name);
    }
  }
  if (e != null) {
    if ((Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,thread) || Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,thread,thread))) {
      LOG.info().$(""String_Node_Str"").$(e.owner).$(""String_Node_Str"").$(name).$();
      closeWriter(thread,name,e,FactoryEventListener.EV_LOCK_CLOSE,FactoryEventListener.EV_LOCK_CLOSE_EX,FactoryConstants.CR_NAME_LOCK);
      e.locked=true;
      notifyListener(thread,name,FactoryEventListener.EV_LOCK_SUCCESS);
      return;
    }
 else {
      LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.owner).$();
    }
  }
  notifyListener(thread,name,FactoryEventListener.EV_LOCK_BUSY);
  throw WriterBusyException.INSTANCE;
}",0.9871575342465754
31016,"public static long parseTime24(CharSequence seq,int lo,int lim) throws NumericException {
  int p=lo;
  if (p + 2 > lim) {
    throw NumericException.INSTANCE;
  }
  int hour=Numbers.parseInt(seq,p,p+=2);
  int sec=0;
  int min=0;
  int mil=0;
  checkRange(hour,0,23);
  if (p < lim && seq.charAt(p) == ':') {
    checkChar(seq,p++,lim,':');
    if (p + 2 > lim) {
      throw NumericException.INSTANCE;
    }
    min=Numbers.parseInt(seq,p,p+=2);
    checkRange(min,0,59);
    if (p < lim && seq.charAt(p) == ':') {
      checkChar(seq,p++,lim,':');
      if (p + 2 > lim) {
        throw NumericException.INSTANCE;
      }
      sec=Numbers.parseInt(seq,p,p+=2);
      checkRange(sec,0,59);
      if (p < lim && seq.charAt(p) == '.') {
        if (p + 4 > lim) {
          throw NumericException.INSTANCE;
        }
        mil=Numbers.parseInt(seq,++p,p+=3);
        checkRange(mil,0,999);
      }
    }
  }
  if (p < lim) {
    checkChar(seq,p,lim,'Z');
  }
  return hour * HOUR_MILLIS + min * MINUTE_MILLIS + sec * SECOND_MILLIS + mil;
}","public static long parseTime24(CharSequence seq) throws NumericException {
  int lim=seq.length();
  int p=0;
  if (p + 2 > lim) {
    throw NumericException.INSTANCE;
  }
  int hour=Numbers.parseInt(seq,p,p+=2);
  int sec=0;
  int min=0;
  int mil=0;
  checkRange(hour,0,23);
  if (p < lim && seq.charAt(p) == ':') {
    checkChar(seq,p++,lim,':');
    if (p + 2 > lim) {
      throw NumericException.INSTANCE;
    }
    min=Numbers.parseInt(seq,p,p+=2);
    checkRange(min,0,59);
    if (p < lim && seq.charAt(p) == ':') {
      checkChar(seq,p++,lim,':');
      if (p + 2 > lim) {
        throw NumericException.INSTANCE;
      }
      sec=Numbers.parseInt(seq,p,p+=2);
      checkRange(sec,0,59);
      if (p < lim && seq.charAt(p) == '.') {
        if (p + 4 > lim) {
          throw NumericException.INSTANCE;
        }
        mil=Numbers.parseInt(seq,++p,p+=3);
        checkRange(mil,0,999);
      }
    }
  }
  if (p < lim) {
    checkChar(seq,p,lim,'Z');
  }
  return hour * HOUR_MILLIS + min * MINUTE_MILLIS + sec * SECOND_MILLIS + mil;
}",0.9780114722753346
31017,"private static long parseDateTimeFmt3(CharSequence seq,int lo,int lim) throws NumericException {
  int p=lo;
  int day=int0(seq,p,p+=2,lim);
  checkChar(seq,p++,lim,'/');
  int month=int0(seq,p,p+=2,lim);
  checkRange(month,1,12);
  checkChar(seq,p++,lim,'/');
  int year=int0(seq,p,p + 4,lim);
  boolean l=isLeapYear(year);
  checkRange(day,1,getDaysPerMonth(month,l));
  return yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS;
}","public static long parseDateTimeFmt3(CharSequence seq) throws NumericException {
  int lim=seq.length();
  int p=0;
  int day=int0(seq,p,p+=2,lim);
  checkChar(seq,p++,lim,'/');
  int month=int0(seq,p,p+=2,lim);
  checkRange(month,1,12);
  checkChar(seq,p++,lim,'/');
  int year=int0(seq,p,p + 4,lim);
  boolean l=isLeapYear(year);
  checkRange(day,1,getDaysPerMonth(month,l));
  return yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS;
}",0.9378407851690296
31018,"public SSOCredentialProvider(String serviceName){
  if (Os.type != Os.WINDOWS) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.serviceName=serviceName;
}","public SSOCredentialProvider(String serviceName){
  this.serviceName=serviceName;
}",0.6587301587301587
31019,"@Override public byte[] createToken() throws Exception {
  return Os.generateKerberosToken(serviceName);
}","@Override public byte[] createToken() throws Exception {
  if (Os.type != Os.WINDOWS) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return Os.generateKerberosToken(serviceName);
}",0.7114093959731543
31020,"@Override public boolean canClose(Journal journal){
  String name=journal.getName();
  Entry e=entries.get(name);
  if (e != null) {
    long threadId=Thread.currentThread().getId();
    if (Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,threadId,-1L)) {
      if (closed) {
        if (Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,threadId)) {
          LOG.info().$(""String_Node_Str"").$(name).$('\'').$();
          e.writer=null;
          return true;
        }
      }
      LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
      e.lastReleaseTime=System.currentTimeMillis();
    }
 else {
      LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.owner).$();
    }
  }
 else {
    LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
    return true;
  }
  return false;
}","@Override public boolean canClose(Journal journal){
  String name=journal.getName();
  Entry e=entries.get(name);
  if (e != null) {
    long threadId=Thread.currentThread().getId();
    if (Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,threadId,-1L)) {
      if (closed) {
        if (Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,threadId)) {
          LOG.info().$(""String_Node_Str"").$(name).$('\'').$();
          e.writer.setCloseInterceptor(null);
          e.writer=null;
          return true;
        }
      }
      LOG.info().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
      e.lastReleaseTime=System.currentTimeMillis();
    }
 else {
      LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$(e.owner).$();
    }
  }
 else {
    LOG.error().$(""String_Node_Str"").$(name).$(""String_Node_Str"").$();
    journal.setCloseInterceptor(null);
    return true;
  }
  return false;
}",0.9517867271695972
31021,"private boolean releaseAll(long deadline){
  long threadId=Thread.currentThread().getId();
  boolean removed=false;
  LOG.info().$(""String_Node_Str"").$();
  Iterator<Map.Entry<String,Entry>> iterator=entries.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Entry> me=iterator.next();
    Entry e=me.getValue();
    if ((deadline > e.lastReleaseTime && e.owner == -1)) {
      if (Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,threadId)) {
        LOG.info().$(""String_Node_Str"").$(me.getKey()).$('\'').$();
        e.writer.setCloseInterceptor(null);
        try {
          e.writer.close();
        }
 catch (        Throwable e1) {
          LOG.error().$(""String_Node_Str"").$(e.writer.getName()).$(""String_Node_Str"").$(e1.getMessage()).$();
        }
        iterator.remove();
        removed=true;
        Unsafe.getUnsafe().putOrderedLong(e,ENTRY_OWNER,-1L);
      }
    }
 else     if (e.allocationFailure) {
      LOG.info().$(""String_Node_Str"").$(me.getKey()).$('\'').$();
      iterator.remove();
      removed=true;
    }
  }
  return removed;
}","private boolean releaseAll(long deadline){
  long threadId=Thread.currentThread().getId();
  boolean removed=false;
  Iterator<Map.Entry<String,Entry>> iterator=entries.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Entry> me=iterator.next();
    Entry e=me.getValue();
    if ((deadline > e.lastReleaseTime && e.owner == -1)) {
      if (Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,threadId)) {
        LOG.info().$(""String_Node_Str"").$(me.getKey()).$('\'').$();
        e.writer.setCloseInterceptor(null);
        try {
          e.writer.close();
        }
 catch (        Throwable e1) {
          LOG.error().$(""String_Node_Str"").$(e.writer.getName()).$(""String_Node_Str"").$(e1.getMessage()).$();
        }
        iterator.remove();
        removed=true;
        Unsafe.getUnsafe().putOrderedLong(e,ENTRY_OWNER,-1L);
      }
    }
 else     if (e.allocationFailure) {
      LOG.info().$(""String_Node_Str"").$(me.getKey()).$('\'').$();
      iterator.remove();
      removed=true;
    }
  }
  return removed;
}",0.9818351187703772
31022,"@Override @SuppressWarnings(""String_Node_Str"") public <T>JournalWriter<T> writer(JournalMetadata<T> metadata) throws JournalException {
  if (closed) {
    LOG.info().$(""String_Node_Str"").$();
    return null;
  }
  final String path=metadata.getKey().getName();
  Entry e=entries.get(path);
  if (e == null) {
    e=new Entry();
    if (entries.putIfAbsent(path,e) == null) {
      try {
        e.writer=super.writer(metadata);
        if (!closed) {
          e.writer.setCloseInterceptor(this);
        }
        LOG.info().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$(e.owner).$();
        return e.writer;
      }
 catch (      JournalException ex) {
        LOG.error().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$(e.owner).$(""String_Node_Str"").$(ex).$();
        e.allocationFailure=true;
        return null;
      }
    }
 else {
      LOG.info().$(""String_Node_Str"").$(e.owner).$(""String_Node_Str"").$(path).$('\'').$();
      e=null;
    }
  }
  if (e == null) {
    e=entries.get(path);
  }
  long threadId=Thread.currentThread().getId();
  if (e != null && Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,threadId)) {
    LOG.debug().$(""String_Node_Str"").$(e.owner).$(""String_Node_Str"").$(path).$();
    if (closed) {
      e.writer.setCloseInterceptor(null);
    }
    return e.writer;
  }
 else {
    if (e == null) {
      LOG.error().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$();
    }
 else {
      if (e.owner == threadId) {
        if (e.allocationFailure) {
          return null;
        }
        if (closed) {
          LOG.info().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$();
          e.writer.setCloseInterceptor(null);
        }
        return e.writer;
      }
      LOG.error().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$(e.owner).$();
    }
  }
  return null;
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>JournalWriter<T> writer(JournalMetadata<T> metadata) throws JournalException {
  if (closed) {
    LOG.info().$(""String_Node_Str"").$();
    return null;
  }
  final String path=metadata.getKey().getName();
  Entry e=entries.get(path);
  if (e == null) {
    e=new Entry();
    if (entries.putIfAbsent(path,e) == null) {
      try {
        e.writer=super.writer(metadata);
        if (!closed) {
          e.writer.setCloseInterceptor(this);
        }
        LOG.info().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$(e.owner).$();
        return e.writer;
      }
 catch (      JournalException ex) {
        LOG.error().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$(e.owner).$(""String_Node_Str"").$(ex).$();
        e.allocationFailure=true;
        return null;
      }
    }
 else {
      LOG.info().$(""String_Node_Str"").$(e.owner).$(""String_Node_Str"").$(path).$('\'').$();
      e=entries.get(path);
    }
  }
  long threadId=Thread.currentThread().getId();
  if (e != null && Unsafe.getUnsafe().compareAndSwapLong(e,ENTRY_OWNER,-1L,threadId)) {
    LOG.debug().$(""String_Node_Str"").$(e.owner).$(""String_Node_Str"").$(path).$();
    if (closed) {
      e.writer.setCloseInterceptor(null);
    }
    return e.writer;
  }
 else {
    if (e == null) {
      LOG.error().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$();
    }
 else {
      if (e.owner == threadId) {
        if (e.allocationFailure) {
          return null;
        }
        if (closed) {
          LOG.info().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$();
          e.writer.setCloseInterceptor(null);
        }
        return e.writer;
      }
      LOG.error().$(""String_Node_Str"").$(path).$(""String_Node_Str"").$(e.owner).$();
    }
  }
  return null;
}",0.9810699588477366
31023,"@Test public void testOneThreadGetRelease() throws Exception {
  JournalStructure s=new JournalStructure(""String_Node_Str"").$date(""String_Node_Str"").$();
  CachingWriterFactory wf=theFactory.getCachingWriterFactory();
  JournalWriter x;
  JournalWriter y;
  x=wf.writer(s);
  try {
    Assert.assertEquals(0,wf.countFreeWriters());
    Assert.assertNotNull(x);
    Assert.assertTrue(x.isOpen());
    Assert.assertTrue(x == wf.writer(s));
  }
  finally {
    x.close();
  }
  Assert.assertEquals(1,wf.countFreeWriters());
  y=wf.writer(s);
  try {
    Assert.assertNotNull(y);
    Assert.assertTrue(y.isOpen());
    Assert.assertTrue(y == x);
  }
  finally {
    y.close();
  }
  Assert.assertEquals(1,wf.countFreeWriters());
}","@Test public void testOneThreadGetRelease() throws Exception {
  final JournalMetadata<?> m=theFactory.getConfiguration().buildWithRootLocation(new JournalStructure(""String_Node_Str"").$date(""String_Node_Str"").$());
  CachingWriterFactory wf=theFactory.getCachingWriterFactory();
  JournalWriter x;
  JournalWriter y;
  x=wf.writer(m);
  try {
    Assert.assertEquals(0,wf.countFreeWriters());
    Assert.assertNotNull(x);
    Assert.assertTrue(x.isOpen());
    Assert.assertTrue(x == wf.writer(m));
  }
  finally {
    x.close();
  }
  Assert.assertEquals(1,wf.countFreeWriters());
  y=wf.writer(m);
  try {
    Assert.assertNotNull(y);
    Assert.assertTrue(y.isOpen());
    Assert.assertTrue(y == x);
  }
  finally {
    y.close();
  }
  Assert.assertEquals(1,wf.countFreeWriters());
}",0.9411764705882352
31024,"@Test public void testTwoThreadsRaceToAllocate() throws Exception {
  final JournalStructure s=new JournalStructure(""String_Node_Str"").$date(""String_Node_Str"").$();
  final CachingWriterFactory wf=theFactory.getCachingWriterFactory();
  int n=2;
  final CyclicBarrier barrier=new CyclicBarrier(n);
  final CountDownLatch halt=new CountDownLatch(n);
  final AtomicInteger errors=new AtomicInteger();
  final AtomicInteger writerCount=new AtomicInteger();
  for (int i=0; i < n; i++) {
    new Thread(){
      @Override public void run(){
        try {
          barrier.await();
          try (JournalWriter w=wf.writer(s)){
            if (w != null) {
              writerCount.incrementAndGet();
            }
          }
         }
 catch (        Exception e) {
          e.printStackTrace();
          errors.incrementAndGet();
        }
 finally {
          halt.countDown();
        }
      }
    }
.start();
  }
  halt.await();
  Assert.assertEquals(0,errors.get());
  Assert.assertEquals(1,wf.countFreeWriters());
}","@Test public void testTwoThreadsRaceToAllocate() throws Exception {
  final JournalMetadata<?> m=theFactory.getConfiguration().buildWithRootLocation(new JournalStructure(""String_Node_Str"").$date(""String_Node_Str"").$());
  final CachingWriterFactory wf=theFactory.getCachingWriterFactory();
  int n=2;
  final CyclicBarrier barrier=new CyclicBarrier(n);
  final CountDownLatch halt=new CountDownLatch(n);
  final AtomicInteger errors=new AtomicInteger();
  final AtomicInteger writerCount=new AtomicInteger();
  for (int i=0; i < n; i++) {
    new Thread(){
      @Override public void run(){
        try {
          barrier.await();
          try (JournalWriter w=wf.writer(m)){
            if (w != null) {
              writerCount.incrementAndGet();
            }
          }
         }
 catch (        Exception e) {
          e.printStackTrace();
          errors.incrementAndGet();
        }
 finally {
          halt.countDown();
        }
      }
    }
.start();
  }
  halt.await();
  Assert.assertEquals(0,errors.get());
  Assert.assertEquals(1,wf.countFreeWriters());
}",0.9624346172135044
31025,"@Test @Ignore public void testAllocateAndClear() throws Exception {
  final JournalStructure s=new JournalStructure(""String_Node_Str"").$date(""String_Node_Str"").$();
  final CachingWriterFactory wf=theFactory.getCachingWriterFactory();
  int n=2;
  final CyclicBarrier barrier=new CyclicBarrier(n);
  final CountDownLatch halt=new CountDownLatch(n);
  final AtomicInteger errors=new AtomicInteger();
  final AtomicInteger writerCount=new AtomicInteger();
  new Thread(){
    @Override public void run(){
      try {
        for (int i=0; i < 1000; i++) {
          try (JournalWriter w=wf.writer(s)){
            if (w != null) {
              writerCount.incrementAndGet();
            }
          }
           if (i == 3) {
            barrier.await();
          }
          LockSupport.parkNanos(100L);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        errors.incrementAndGet();
      }
 finally {
        halt.countDown();
      }
    }
  }
.start();
  new Thread(){
    @Override public void run(){
      try {
        barrier.await();
        for (int i=0; i < 1000; i++) {
          wf.run();
          LockSupport.parkNanos(10L);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        errors.incrementAndGet();
      }
 finally {
        halt.countDown();
      }
    }
  }
.start();
  halt.await();
  Assert.assertEquals(0,errors.get());
  Assert.assertEquals(1,wf.countFreeWriters());
}","@Test public void testAllocateAndClear() throws Exception {
  final JournalMetadata<?> m=theFactory.getConfiguration().buildWithRootLocation(new JournalStructure(""String_Node_Str"").$date(""String_Node_Str"").$());
  final CachingWriterFactory wf=theFactory.getCachingWriterFactory();
  int n=2;
  final CyclicBarrier barrier=new CyclicBarrier(n);
  final CountDownLatch halt=new CountDownLatch(n);
  final AtomicInteger errors=new AtomicInteger();
  final AtomicInteger writerCount=new AtomicInteger();
  new Thread(){
    @Override public void run(){
      try {
        for (int i=0; i < 1000; i++) {
          try (JournalWriter w=wf.writer(m)){
            if (w != null) {
              writerCount.incrementAndGet();
            }
          }
           if (i == 1) {
            barrier.await();
          }
          LockSupport.parkNanos(10L);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        errors.incrementAndGet();
      }
 finally {
        halt.countDown();
      }
    }
  }
.start();
  new Thread(){
    @Override public void run(){
      try {
        barrier.await();
        for (int i=0; i < 1000; i++) {
          wf.run();
          LockSupport.parkNanos(10L);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        errors.incrementAndGet();
      }
 finally {
        halt.countDown();
      }
    }
  }
.start();
  halt.await();
  Assert.assertTrue(writerCount.get() > 0);
  Assert.assertEquals(0,errors.get());
  Assert.assertEquals(1,wf.countFreeWriters());
}",0.95542248835662
31026,"@Override public void run(){
  try {
    barrier.await();
    try (JournalWriter w=wf.writer(s)){
      if (w != null) {
        writerCount.incrementAndGet();
      }
    }
   }
 catch (  Exception e) {
    e.printStackTrace();
    errors.incrementAndGet();
  }
 finally {
    halt.countDown();
  }
}","@Override public void run(){
  try {
    barrier.await();
    try (JournalWriter w=wf.writer(m)){
      if (w != null) {
        writerCount.incrementAndGet();
      }
    }
   }
 catch (  Exception e) {
    e.printStackTrace();
    errors.incrementAndGet();
  }
 finally {
    halt.countDown();
  }
}",0.9966777408637874
31027,"public long getTxn(){
  return txLog.getCurrentTxn();
}","public long getTxn(){
  if (isOpen()) {
    return txLog.getCurrentTxn();
  }
  throw new IllegalStateException(""String_Node_Str"");
}",0.5851063829787234
31028,"private void handshake() throws IOException {
  if (handshakeStatus == SSLEngineResult.HandshakeStatus.FINISHED) {
    return;
  }
  engine.beginHandshake();
  while (handshakeStatus != SSLEngineResult.HandshakeStatus.FINISHED) {
switch (handshakeStatus) {
case NOT_HANDSHAKING:
      throw new IOException(""String_Node_Str"");
case NEED_WRAP:
    outBuf.clear();
  swapBuf.clear();
try {
  handshakeStatus=engine.wrap(swapBuf,outBuf).getHandshakeStatus();
}
 catch (SSLException e) {
  LOG.error().$(""String_Node_Str"").$(e.getMessage()).$();
  closureOnException();
  throw e;
}
outBuf.flip();
socketChannel.write(outBuf);
break;
case NEED_UNWRAP:
if (!inData || !inBuf.hasRemaining()) {
inBuf.clear();
socketChannel.read(inBuf);
inBuf.flip();
inData=true;
}
try {
SSLEngineResult res=engine.unwrap(inBuf,swapBuf);
handshakeStatus=res.getHandshakeStatus();
switch (res.getStatus()) {
case BUFFER_UNDERFLOW:
inBuf.compact();
socketChannel.read(inBuf);
inBuf.flip();
break;
case BUFFER_OVERFLOW:
throw new IOException(""String_Node_Str"");
case OK:
break;
case CLOSED:
throw new IOException(""String_Node_Str"");
default :
break;
}
}
 catch (SSLException e) {
LOG.error().$(""String_Node_Str"").$(e.getMessage()).$();
throw e;
}
break;
case NEED_TASK:
Runnable task;
while ((task=engine.getDelegatedTask()) != null) {
task.run();
}
handshakeStatus=engine.getHandshakeStatus();
break;
default :
throw new JournalRuntimeException(""String_Node_Str"",handshakeStatus);
}
}
inBuf.clear();
swapBuf.position(swapBuf.limit());
LOG.info().$(""String_Node_Str"").$(client ? ""String_Node_Str"" : ""String_Node_Str"").$();
}","private void handshake() throws IOException {
  if (handshakeStatus == SSLEngineResult.HandshakeStatus.FINISHED) {
    return;
  }
  engine.beginHandshake();
  while (handshakeStatus != SSLEngineResult.HandshakeStatus.FINISHED) {
switch (handshakeStatus) {
case NOT_HANDSHAKING:
      throw new IOException(""String_Node_Str"");
case NEED_WRAP:
    outBuf.clear();
  swapBuf.clear();
try {
  handshakeStatus=engine.wrap(swapBuf,outBuf).getHandshakeStatus();
}
 catch (SSLException e) {
  LOG.error().$(""String_Node_Str"").$(e.getMessage()).$();
  closureOnException();
  socketChannel.close();
  throw e;
}
outBuf.flip();
socketChannel.write(outBuf);
break;
case NEED_UNWRAP:
if (!inData || !inBuf.hasRemaining()) {
inBuf.clear();
socketChannel.read(inBuf);
inBuf.flip();
inData=true;
}
try {
SSLEngineResult res=engine.unwrap(inBuf,swapBuf);
handshakeStatus=res.getHandshakeStatus();
switch (res.getStatus()) {
case BUFFER_UNDERFLOW:
inBuf.compact();
socketChannel.read(inBuf);
inBuf.flip();
break;
case BUFFER_OVERFLOW:
throw new IOException(""String_Node_Str"");
case OK:
break;
case CLOSED:
throw new IOException(""String_Node_Str"");
default :
break;
}
}
 catch (SSLException e) {
LOG.error().$(""String_Node_Str"").$(e.getMessage()).$();
handshakeStatus=SSLEngineResult.HandshakeStatus.FINISHED;
socketChannel.close();
throw e;
}
break;
case NEED_TASK:
Runnable task;
while ((task=engine.getDelegatedTask()) != null) {
task.run();
}
handshakeStatus=engine.getHandshakeStatus();
break;
default :
throw new JournalRuntimeException(""String_Node_Str"",handshakeStatus);
}
}
inBuf.clear();
swapBuf.position(swapBuf.limit());
LOG.info().$(""String_Node_Str"").$(client ? ""String_Node_Str"" : ""String_Node_Str"").$();
}",0.9678982434887948
31029,"@Override @SuppressWarnings(""String_Node_Str"") public void goPassive(ServerNode activeNode){
  if (activeNode.getId() != lastActive) {
    lastActive=activeNode.getId();
    haltClient();
    clientConfig.clearNodes();
    clientConfig.addNode(activeNode);
    client=new JournalClient(clientConfig,factory);
    LOG.info().$(thisNode.toString()).$(""String_Node_Str"").$();
    for (int i=0, sz=writers.size(); i < sz; i++) {
      JournalWriter w=writers.get(i);
      client.subscribe(w.getKey(),w,null);
    }
    try {
      client.start();
      client.setDisconnectCallback(new JournalClient.DisconnectCallback(){
        @Override public void onDisconnect(        int disconnectReason){
switch (disconnectReason) {
case JournalClient.DISCONNECT_INCOMPATIBLE_JOURNAL:
case JournalClient.DISCONNECT_CLIENT_HALT:
            halt();
          break;
default :
        if (running.get()) {
          server.joinCluster(statusListener);
        }
      break;
  }
}
}
);
if (listener != null) {
listener.goPassive(activeNode);
}
}
 catch (JournalNetworkException e) {
LOG.error().$(""String_Node_Str"").$(e).$();
haltClient();
server.joinCluster(statusListener);
}
}
}","@Override @SuppressWarnings(""String_Node_Str"") public void goPassive(ServerNode activeNode){
  if (activeNode.getId() != lastActive) {
    lastActive=activeNode.getId();
    haltClient();
    clientConfig.clearNodes();
    clientConfig.addNode(activeNode);
    client=new JournalClient(clientConfig,factory,null,clientCallback);
    LOG.info().$(thisNode.toString()).$(""String_Node_Str"").$();
    for (int i=0, sz=writers.size(); i < sz; i++) {
      JournalWriter w=writers.get(i);
      client.subscribe(w.getKey(),w,null);
    }
    client.start();
    if (listener != null) {
      listener.goPassive(activeNode);
    }
  }
}",0.6425389755011136
31030,"@SuppressWarnings(""String_Node_Str"") @Override public Journal reader(JournalMetadata metadata) throws JournalException {
  return new Journal(metadata,metadata.getKey());
}","@Override public <T>Journal<T> reader(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  return new Journal<>(metadata,key);
}",0.7453416149068323
31031,"@SuppressWarnings(""String_Node_Str"") @Override public Journal reader(JournalMetadata metadata) throws JournalException {
  JournalKey key=metadata.getKey();
  String name=key.path();
  Journal result=readers.get(name);
  if (result == null) {
    if (getConfiguration().exists(name) != JournalConfiguration.EXISTS) {
      LOG.error().$(""String_Node_Str"").$(name).$();
      throw JournalDoesNotExistException.INSTANCE;
    }
    result=new Journal<>(metadata,key);
    result.setCloseListener(this);
    readers.put(name,result);
    journalList.add(result);
  }
  return result;
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>Journal<T> reader(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  String name=key.path();
  Journal result=readers.get(name);
  if (result == null) {
    if (getConfiguration().exists(name) != JournalConfiguration.EXISTS) {
      LOG.error().$(""String_Node_Str"").$(name).$();
      throw JournalDoesNotExistException.INSTANCE;
    }
    result=new Journal<>(metadata,key);
    result.setCloseListener(this);
    readers.put(name,result);
    journalList.add(result);
  }
  return result;
}",0.8536796536796537
31032,Journal reader(JournalMetadata metadata) throws JournalException ;,"<T>Journal<T> reader(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException ;",0.8301886792452831
31033,"@SuppressWarnings(""String_Node_Str"") @Override public Journal reader(JournalMetadata metadata) throws JournalException {
  Journal reader=new Journal(metadata,metadata.getKey());
  journals.add(reader);
  reader.setCloseListener(this);
  return reader;
}","@Override public <T>Journal<T> reader(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  Journal<T> reader=new Journal<>(metadata,key);
  journals.add(reader);
  reader.setCloseListener(this);
  return reader;
}",0.6503067484662577
31034,"@Override public JournalBulkReader bulkReader(String location) throws JournalException {
  return bulkReader(new JournalKey<>(location));
}","@Override public <T>JournalBulkReader<T> bulkReader(JournalKey<T> key) throws JournalException {
  return new JournalBulkReader<>(getOrCreateMetadata(key),key);
}",0.717607973421927
31035,"@Override @SuppressWarnings(""String_Node_Str"") public <T>Journal<T> reader(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  String name=key.path();
  Journal result=readers.get(name);
  if (result == null) {
    if (getConfiguration().exists(name) != JournalConfiguration.EXISTS) {
      LOG.error().$(""String_Node_Str"").$(name).$();
      throw JournalDoesNotExistException.INSTANCE;
    }
    result=new Journal<>(metadata,key);
    result.setCloseListener(this);
    readers.put(name,result);
    journalList.add(result);
  }
  return result;
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>Journal<T> reader(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  String name=key.path();
  Journal result=readers.get(name);
  if (result == null) {
    if (getConfiguration().exists(name) != JournalConfiguration.EXISTS) {
      LOG.error().$(""String_Node_Str"").$(name).$();
      throw JournalDoesNotExistException.INSTANCE;
    }
    result=super.reader(metadata,key);
    result.setCloseListener(this);
    readers.put(name,result);
    journalList.add(result);
  }
  return result;
}",0.9781659388646288
31036,"@Override @SuppressWarnings(""String_Node_Str"") public <T>JournalBulkReader<T> bulkReader(JournalKey<T> key) throws JournalException {
  String name=key.path();
  checkBlocked(name);
  JournalBulkReader<T> result=bulkReaders.get(name);
  if (result == null) {
    result=new JournalBulkReader<>(getOrCreateMetadata(key),key);
    result.setCloseListener(this);
    bulkReaders.put(name,result);
    journalList.add(result);
  }
  return result;
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>JournalBulkReader<T> bulkReader(JournalKey<T> key) throws JournalException {
  String name=key.path();
  checkBlocked(name);
  JournalBulkReader<T> result=bulkReaders.get(name);
  if (result == null) {
    result=super.bulkReader(key);
    result.setCloseListener(this);
    bulkReaders.put(name,result);
    journalList.add(result);
  }
  return result;
}",0.7272727272727273
31037,"@Override public <T>JournalWriter<T> writer(MetadataBuilder<T> b) throws JournalException {
  JournalMetadata<T> metadata=getConfiguration().buildWithRootLocation(b);
  return new JournalWriter<>(metadata,metadata.getKey());
}","@Override public <T>JournalWriter<T> writer(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  return new JournalWriter<>(metadata,key);
}",0.6597938144329897
31038,<T>JournalWriter<T> writer(MetadataBuilder<T> metadata) throws JournalException ;,"<T>JournalWriter<T> writer(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException ;",0.8222222222222222
31039,"public <T>JournalWriter<T> writer(MetadataBuilder<T> b) throws JournalException {
  JournalWriter<T> writer=super.writer(b);
  journals.add(writer);
  writer.setCloseListener(this);
  return writer;
}","@Override public <T>JournalWriter<T> writer(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  JournalWriter<T> writer=super.writer(metadata,key);
  journals.add(writer);
  writer.setCloseListener(this);
  return writer;
}",0.8385650224215246
31040,"@Override public <T>JournalWriter<T> bulkWriter(JournalMetadata<T> metadata) throws JournalException {
  JournalWriter<T> writer=super.bulkWriter(metadata);
  journals.add(writer);
  writer.setCloseListener(this);
  return writer;
}","@Override public <T>JournalBulkWriter<T> bulkWriter(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  JournalBulkWriter<T> writer=super.bulkWriter(metadata,key);
  journals.add(writer);
  writer.setCloseListener(this);
  return writer;
}",0.9392712550607288
31041,"public void closeJournal(CharSequence name){
  Journal j=readers.get(name);
  if (j != null) {
    j.setCloseListener(null);
    j.close();
    readers.remove(name);
  }
  j=bulkReaders.get(name);
  if (j != null) {
    j.setCloseListener(null);
    j.close();
    bulkReaders.remove(name);
  }
  metadata.remove(name);
}","public void closeJournal(CharSequence name){
  Journal j=readers.get(name);
  if (j != null) {
    j.setCloseListener(null);
    j.close();
    readers.remove(name);
  }
  j=bulkReaders.get(name);
  if (j != null) {
    j.setCloseListener(null);
    j.close();
    bulkReaders.remove(name);
  }
}",0.959481361426256
31042,"@Override public void close(){
  if (pool != null) {
    if (!inPool) {
      inPool=true;
      pool.release(this);
    }
  }
 else {
    if (closed.compareAndSet(false,true)) {
      for (int i=0, sz=journalList.size(); i < sz; i++) {
        Journal journal=journalList.getQuick(i);
        journal.setCloseListener(null);
        if (journal.isOpen()) {
          journal.close();
        }
      }
      readers.clear();
      bulkReaders.clear();
    }
  }
}","@Override public void close(){
  if (pool != null) {
    if (!inPool) {
      inPool=true;
      pool.release(this);
    }
  }
 else {
    if (closed.compareAndSet(false,true)) {
      reset();
    }
  }
}",0.5620328849028401
31043,"public JournalCachingFactory(JournalConfiguration configuration,JournalFactoryPool pool){
  super(configuration);
  this.pool=pool;
}","JournalCachingFactory(JournalConfiguration configuration,JournalFactoryPool pool){
  super(configuration);
  this.pool=pool;
}",0.972972972972973
31044,"void release(final JournalCachingFactory factory){
  if (running.get() && openCount.get() < capacity) {
    factory.expireOpenFiles();
    pool.push(factory);
    return;
  }
  openCount.decrementAndGet();
  factory.clearPool();
  factory.close();
}","void release(final JournalCachingFactory factory){
  if (running.get() && openCount.get() <= capacity) {
    factory.expireOpenFiles();
    pool.push(factory);
    return;
  }
  openCount.decrementAndGet();
  factory.clearPool();
  factory.close();
}",0.997995991983968
31045,"public long getTxn(){
  if (isOpen()) {
    return txLog.getCurrentTxn();
  }
  throw new IllegalStateException(""String_Node_Str"");
}","public long getTxn(){
}",0.2948717948717949
31046,"public void notifyTxError(){
  if (txListener != null) {
    try {
      txListener.onError();
    }
 catch (    Throwable e) {
      LOG.error().$(""String_Node_Str"").$(e).$();
    }
  }
}","public void notifyTxError(int event){
  if (txListener != null) {
    try {
      txListener.onError(event);
    }
 catch (    Throwable e) {
      LOG.error().$(""String_Node_Str"").$(e).$();
    }
  }
}",0.964102564102564
31047,"private void rollback0(long address,boolean writeDiscard) throws JournalException {
  if (address == -1L) {
    notifyTxError();
    throw new IncompatibleJournalException(""String_Node_Str"",this.getLocation());
  }
  txLog.read(address,tx);
  if (tx.address == 0) {
    throw new JournalException(""String_Node_Str"");
  }
  if (writeDiscard) {
    LOG.info().$(""String_Node_Str"").$(metadata.getLocation()).$(""String_Node_Str"").$(tx.txn).$(""String_Node_Str"").$ts(tx.timestamp).$();
    writeDiscardFile(tx.journalMaxRowID);
  }
  rollbackPartitions(tx);
  Partition<T> lag=getIrregularPartition();
  if (tx.lagName != null && tx.lagName.length() > 0 && (lag == null || !tx.lagName.equals(lag.getName()))) {
    Partition<T> newLag=createTempPartition(tx.lagName);
    setIrregularPartition(newLag);
    newLag.applyTx(tx.lagSize,tx.lagIndexPointers);
  }
 else   if (lag != null && tx.lagName == null) {
    removeIrregularPartitionInternal();
  }
 else   if (lag != null) {
    lag.truncate(tx.lagSize);
  }
  if (tx.symbolTableSizes.length == 0) {
    for (int i=0, sz=getSymbolTableCount(); i < sz; i++) {
      getSymbolTable(i).truncate();
    }
  }
 else {
    for (int i=0, sz=getSymbolTableCount(); i < sz; i++) {
      getSymbolTable(i).truncate(tx.symbolTableSizes[i]);
    }
  }
  appendTimestampLo=-1;
  appendTimestampHi=-1;
  appendPartition=null;
  txLog.writeTxAddress(tx.address);
  txActive=false;
}","private void rollback0(long address,boolean writeDiscard) throws JournalException {
  if (address == -1L) {
    notifyTxError(JournalEvents.EVT_JNL_UNKNOWN_TRANSACTION);
    throw new IncompatibleJournalException(""String_Node_Str"",this.getLocation());
  }
  txLog.read(address,tx);
  if (tx.address == 0) {
    throw new JournalException(""String_Node_Str"");
  }
  if (writeDiscard) {
    LOG.info().$(""String_Node_Str"").$(metadata.getLocation()).$(""String_Node_Str"").$(tx.txn).$(""String_Node_Str"").$ts(tx.timestamp).$();
    writeDiscardFile(tx.journalMaxRowID);
  }
  rollbackPartitions(tx);
  Partition<T> lag=getIrregularPartition();
  if (tx.lagName != null && tx.lagName.length() > 0 && (lag == null || !tx.lagName.equals(lag.getName()))) {
    Partition<T> newLag=createTempPartition(tx.lagName);
    setIrregularPartition(newLag);
    newLag.applyTx(tx.lagSize,tx.lagIndexPointers);
  }
 else   if (lag != null && tx.lagName == null) {
    removeIrregularPartitionInternal();
  }
 else   if (lag != null) {
    lag.truncate(tx.lagSize);
  }
  if (tx.symbolTableSizes.length == 0) {
    for (int i=0, sz=getSymbolTableCount(); i < sz; i++) {
      getSymbolTable(i).truncate();
    }
  }
 else {
    for (int i=0, sz=getSymbolTableCount(); i < sz; i++) {
      getSymbolTable(i).truncate(tx.symbolTableSizes[i]);
    }
  }
  appendTimestampLo=-1;
  appendTimestampHi=-1;
  appendPartition=null;
  txLog.writeTxAddress(tx.address);
  txActive=false;
}",0.9857192615813304
31048,"@SuppressWarnings(""String_Node_Str"") @Override public Journal reader(JournalMetadata metadata) throws JournalException {
  JournalKey key=metadata.getKey();
  String name=key.derivedLocation();
  Journal result=readers.get(name);
  if (result == null) {
    if (getConfiguration().exists(name) != JournalConfiguration.EXISTS) {
      throw new JournalException(""String_Node_Str"");
    }
    result=new Journal<>(metadata,key);
    result.setCloseListener(this);
    readers.put(name,result);
    journalList.add(result);
  }
  return result;
}","@SuppressWarnings(""String_Node_Str"") @Override public Journal reader(JournalMetadata metadata) throws JournalException {
  JournalKey key=metadata.getKey();
  String name=key.path();
  Journal result=readers.get(name);
  if (result == null) {
    if (getConfiguration().exists(name) != JournalConfiguration.EXISTS) {
      throw new JournalException(""String_Node_Str"");
    }
    result=new Journal<>(metadata,key);
    result.setCloseListener(this);
    readers.put(name,result);
    journalList.add(result);
  }
  return result;
}",0.9823255813953488
31049,"@Override @SuppressWarnings(""String_Node_Str"") public <T>JournalMetadata<T> getOrCreateMetadata(JournalKey<T> key) throws JournalException {
  String name=key.derivedLocation();
  JournalMetadata m=metadata.get(name);
  if (m == null) {
    m=super.getOrCreateMetadata(key);
    metadata.put(name,m);
  }
  return m;
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>JournalMetadata<T> getOrCreateMetadata(JournalKey<T> key) throws JournalException {
  String name=key.path();
  JournalMetadata m=metadata.get(name);
  if (m == null) {
    m=super.getOrCreateMetadata(key);
    metadata.put(name,m);
  }
  return m;
}",0.9696
31050,"@Override @SuppressWarnings(""String_Node_Str"") public <T>JournalBulkReader<T> bulkReader(JournalKey<T> key) throws JournalException {
  String name=key.derivedLocation();
  checkBlocked(name);
  JournalBulkReader<T> result=bulkReaders.get(name);
  if (result == null) {
    result=new JournalBulkReader<>(getOrCreateMetadata(key),key);
    result.setCloseListener(this);
    bulkReaders.put(name,result);
    journalList.add(result);
  }
  return result;
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>JournalBulkReader<T> bulkReader(JournalKey<T> key) throws JournalException {
  String name=key.path();
  checkBlocked(name);
  JournalBulkReader<T> result=bulkReaders.get(name);
  if (result == null) {
    result=new JournalBulkReader<>(getOrCreateMetadata(key),key);
    result.setCloseListener(this);
    bulkReaders.put(name,result);
    journalList.add(result);
  }
  return result;
}",0.978912319644839
31051,"@Override public void onEvent(int evt){
switch (evt) {
case JournalClient.EVT_INCOMPATIBLE_JOURNAL:
case JournalClient.EVT_CLIENT_HALT:
case JournalClient.EVT_AUTH_CONFIG_ERROR:
case JournalClient.EVT_CLIENT_EXCEPTION:
    halt();
  break;
case JournalClient.EVT_SERVER_ERROR:
if (running.get()) {
  server.joinCluster(statusListener);
}
break;
default :
break;
}
}","@Override public void onEvent(int evt){
switch (evt) {
case JournalClientEvents.EVT_INCOMPATIBLE_JOURNAL:
case JournalClientEvents.EVT_CLIENT_HALT:
case JournalClientEvents.EVT_AUTH_CONFIG_ERROR:
case JournalClientEvents.EVT_CLIENT_EXCEPTION:
    halt();
  break;
case JournalClientEvents.EVT_SERVER_ERROR:
if (running.get()) {
  server.joinCluster(statusListener);
}
break;
default :
break;
}
}",0.9605263157894736
31052,"public boolean isRunning() throws JournalNetworkException {
  long cursor=subscriptionSubSequence.next();
  if (cursor < 0) {
    return true;
  }
  long available=subscriptionSubSequence.available();
  while (cursor < available) {
    SubscriptionHolder holder=subscriptionQueue.get(cursor++);
    if (holder.type == MSG_HALT) {
      return false;
    }
  }
  return true;
}","public boolean isRunning(){
  long cursor=subscriptionSubSequence.next();
  if (cursor < 0) {
    return true;
  }
  long available=subscriptionSubSequence.available();
  while (cursor < available) {
    SubscriptionHolder holder=subscriptionQueue.get(cursor++);
    if (holder.type == MSG_HALT) {
      return false;
    }
  }
  return true;
}",0.9555555555555556
31053,"private void subscribeOne(int index,SubscriptionHolder holder,String loc,boolean newSubscription) throws JournalNetworkException {
  if (newSubscription) {
    SubscriptionHolder sub=new SubscriptionHolder();
    sub.local=holder.local;
    sub.remote=holder.remote;
    sub.listener=holder.listener;
    sub.writer=holder.writer;
    subscriptions.add(sub);
  }
  JournalWriter writer=writers.getQuiet(index);
  try {
    commandProducer.write(channel,Command.ADD_KEY_CMD);
    setKeyRequestProducer.write(channel,new IndexedJournalKey(index,holder.remote));
    checkAck();
    JournalMetadata metadata;
    File file=Files.makeTempFile();
    try {
      try (HugeBufferConsumer h=new HugeBufferConsumer(file)){
        h.read(channel);
        metadata=new JournalMetadata(h.getHb());
      }
 catch (      JournalException e) {
        throw new JournalNetworkException(e);
      }
    }
  finally {
      Files.delete(file);
    }
    boolean validate=true;
    if (writer == null) {
      if (holder.writer == null) {
        try {
          writer=factory.writer(new JournalStructure(metadata).location(loc));
        }
 catch (        JournalException e) {
          LOG.error().$(""String_Node_Str"").$(e).$();
          unsubscribe(index,null,holder,JournalEvents.EVT_JNL_INCOMPATIBLE);
          return;
        }
        writersToClose.add(writer);
        validate=false;
      }
 else {
        writer=holder.writer;
      }
      writer.disableCommitOnClose();
      statusSentList.extendAndSet(index,0);
      deltaConsumers.extendAndSet(index,new JournalDeltaConsumer(writer));
      writers.extendAndSet(index,writer);
      writer.setJournalListener(holder.listener);
    }
 else {
      statusSentList.setQuick(index,0);
    }
    if (validate && !metadata.isCompatible(writer.getMetadata(),false)) {
      LOG.error().$(""String_Node_Str"").$(holder.local.path()).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
      unsubscribe(index,writer,holder,JournalEvents.EVT_JNL_INCOMPATIBLE);
      return;
    }
    commandProducer.write(channel,Command.DELTA_REQUEST_CMD);
    journalClientStateProducer.write(channel,new IndexedJournal(index,writer));
    checkAck();
    statusSentList.setQuick(index,1);
    if (holder.listener != null) {
      holder.listener.onEvent(JournalEvents.EVT_JNL_SUBSCRIBED);
    }
    LOG.info().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
  }
 catch (  JournalNetworkException e) {
    LOG.error().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
    unsubscribe(index,writer,holder,JournalEvents.EVT_JNL_SERVER_ERROR);
  }
}","private void subscribeOne(int index,SubscriptionHolder holder,String loc,boolean newSubscription){
  if (newSubscription) {
    SubscriptionHolder sub=new SubscriptionHolder();
    sub.local=holder.local;
    sub.remote=holder.remote;
    sub.listener=holder.listener;
    sub.writer=holder.writer;
    subscriptions.add(sub);
  }
  JournalWriter writer=writers.getQuiet(index);
  try {
    commandProducer.write(channel,Command.ADD_KEY_CMD);
    setKeyRequestProducer.write(channel,new IndexedJournalKey(index,holder.remote));
    checkAck();
    JournalMetadata metadata;
    File file=Files.makeTempFile();
    try {
      try (HugeBufferConsumer h=new HugeBufferConsumer(file)){
        h.read(channel);
        metadata=new JournalMetadata(h.getHb());
      }
 catch (      JournalException e) {
        throw new JournalNetworkException(e);
      }
    }
  finally {
      Files.delete(file);
    }
    boolean validate=true;
    if (writer == null) {
      if (holder.writer == null) {
        try {
          writer=factory.writer(new JournalStructure(metadata).location(loc));
        }
 catch (        JournalException e) {
          LOG.error().$(""String_Node_Str"").$(e).$();
          unsubscribe(index,null,holder,JournalEvents.EVT_JNL_INCOMPATIBLE);
          return;
        }
        writersToClose.add(writer);
        validate=false;
      }
 else {
        writer=holder.writer;
      }
      writer.disableCommitOnClose();
      statusSentList.extendAndSet(index,0);
      deltaConsumers.extendAndSet(index,new JournalDeltaConsumer(writer));
      writers.extendAndSet(index,writer);
      writer.setJournalListener(holder.listener);
    }
 else {
      statusSentList.setQuick(index,0);
    }
    if (validate && !metadata.isCompatible(writer.getMetadata(),false)) {
      LOG.error().$(""String_Node_Str"").$(holder.local.path()).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
      unsubscribe(index,writer,holder,JournalEvents.EVT_JNL_INCOMPATIBLE);
      return;
    }
    commandProducer.write(channel,Command.DELTA_REQUEST_CMD);
    journalClientStateProducer.write(channel,new IndexedJournal(index,writer));
    checkAck();
    statusSentList.setQuick(index,1);
    if (holder.listener != null) {
      holder.listener.onEvent(JournalEvents.EVT_JNL_SUBSCRIBED);
    }
    LOG.info().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
  }
 catch (  JournalNetworkException e) {
    LOG.error().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
    unsubscribe(index,writer,holder,JournalEvents.EVT_JNL_SERVER_ERROR);
  }
}",0.9940387481371088
31054,"private void resubscribe() throws JournalNetworkException {
  for (int i=0, n=subscriptions.size(); i < n; i++) {
    SubscriptionHolder h=subscriptions.get(i);
    subscribeOne(i,h,h.local.path(),false);
  }
}","private void resubscribe(){
  for (int i=0, n=subscriptions.size(); i < n; i++) {
    SubscriptionHolder h=subscriptions.get(i);
    subscribeOne(i,h,h.local.path(),false);
  }
}",0.9175257731958762
31055,"private byte[] getToken() throws JournalNetworkException, AuthenticationProviderException {
  try {
    return credentialProvider.createToken();
  }
 catch (  Throwable e) {
    LOG.error().$(""String_Node_Str"").$(e).$();
    throw new AuthenticationProviderException();
  }
}","private byte[] getToken() throws AuthenticationProviderException {
  try {
    return credentialProvider.createToken();
  }
 catch (  Throwable e) {
    LOG.error().$(""String_Node_Str"").$(e).$();
    throw new AuthenticationProviderException();
  }
}",0.9523809523809524
31056,"public boolean processSubscriptionQueue() throws JournalNetworkException {
  long cursor=subscriptionSubSequence.next();
  if (cursor < 0) {
    return true;
  }
  long available=subscriptionSubSequence.available();
  int i=writers.size();
  while (cursor < available) {
    SubscriptionHolder holder=subscriptionQueue.get(cursor++);
switch (holder.type) {
case MSG_SUBSCRIBE:
      String loc=holder.local.path();
    if (subscribedJournals.add(loc)) {
      subscribeOne(i++,holder,loc,true);
    }
 else {
      if (holder.listener != null) {
        holder.listener.onEvent(JournalEvents.EVT_JNL_ALREADY_SUBSCRIBED);
      }
      LOG.error().$(""String_Node_Str"").$(loc).$();
    }
  break;
case MSG_UNSUBSCRIBE:
break;
case MSG_HALT:
return false;
default :
LOG.error().$(""String_Node_Str"").$(holder.type).$();
break;
}
}
subscriptionSubSequence.done(available - 1);
return true;
}","public boolean processSubscriptionQueue(){
  long cursor=subscriptionSubSequence.next();
  if (cursor < 0) {
    return true;
  }
  long available=subscriptionSubSequence.available();
  int i=writers.size();
  while (cursor < available) {
    SubscriptionHolder holder=subscriptionQueue.get(cursor++);
switch (holder.type) {
case MSG_SUBSCRIBE:
      String loc=holder.local.path();
    if (subscribedJournals.add(loc)) {
      subscribeOne(i++,holder,loc,true);
    }
 else {
      if (holder.listener != null) {
        holder.listener.onEvent(JournalEvents.EVT_JNL_ALREADY_SUBSCRIBED);
      }
      LOG.error().$(""String_Node_Str"").$(loc).$();
    }
  break;
case MSG_UNSUBSCRIBE:
break;
case MSG_HALT:
return false;
default :
LOG.error().$(""String_Node_Str"").$(holder.type).$();
break;
}
}
subscriptionSubSequence.done(available - 1);
return true;
}",0.9816091954022989
31057,"private void removeClientKey(ByteChannel channel) throws JournalNetworkException {
  setKeyRequestConsumer.read(channel);
  IndexedJournalKey indexedKey=setKeyRequestConsumer.getValue();
  LOG.debug().$(socketAddress).$(""String_Node_Str"").$(indexedKey.getIndex()).$();
  JournalKey<?> readerKey=indexedKey.getKey();
  int index=indexedKey.getIndex();
  IndexedJournalKey augmentedReaderKey=server.getWriterIndex0(readerKey);
  if (augmentedReaderKey == null) {
    error(channel,""String_Node_Str"" + readerKey);
  }
 else {
    writerToReaderMap.put(augmentedReaderKey.getIndex(),JOURNAL_INDEX_NOT_FOUND);
    readerToWriterMap.extendAndSet(index,JOURNAL_INDEX_NOT_FOUND);
    try {
      removeReader(index);
      clientStates.setQuick(index,null);
      ok(channel);
    }
 catch (    JournalException e) {
      error(channel,""String_Node_Str"" + readerKey,e);
    }
  }
}","private void removeClientKey(ByteChannel channel) throws JournalNetworkException {
  setKeyRequestConsumer.read(channel);
  IndexedJournalKey indexedKey=setKeyRequestConsumer.getValue();
  LOG.debug().$(socketAddress).$(""String_Node_Str"").$(indexedKey.getIndex()).$();
  JournalKey<?> readerKey=indexedKey.getKey();
  int index=indexedKey.getIndex();
  IndexedJournalKey augmentedReaderKey=server.getWriterIndex0(readerKey);
  if (augmentedReaderKey == null) {
    error(channel,""String_Node_Str"" + readerKey);
  }
 else {
    writerToReaderMap.put(augmentedReaderKey.getIndex(),JOURNAL_INDEX_NOT_FOUND);
    readerToWriterMap.extendAndSet(index,JOURNAL_INDEX_NOT_FOUND);
    removeReader(index);
    clientStates.setQuick(index,null);
    ok(channel);
  }
}",0.928921568627451
31058,"private void removeReader(int index) throws JournalException {
  Journal journal=readers.getQuiet(index);
  if (journal != null) {
    journal.close();
    if (index < readers.size()) {
      readers.setQuick(index,null);
    }
  }
  JournalDeltaProducer producer=producers.getQuiet(index);
  if (producer != null) {
    producer.free();
    if (index < producers.size()) {
      producers.setQuick(index,null);
    }
  }
}","private void removeReader(int index){
  Journal journal=readers.getQuiet(index);
  if (journal != null) {
    journal.close();
    if (index < readers.size()) {
      readers.setQuick(index,null);
    }
  }
  JournalDeltaProducer producer=producers.getQuiet(index);
  if (producer != null) {
    producer.free();
    if (index < producers.size()) {
      producers.setQuick(index,null);
    }
  }
}",0.969549330085262
31059,"@Override public CharSequence getFlyweightStr(int col){
  long readAddress=addressOf(col);
  final int len=Unsafe.getUnsafe().getInt(readAddress);
  if (len < 0)   return null;
  return Unsafe.arrayGet(csA,col).of(readAddress + 4,readAddress + 4 + len * 2);
}","@Override public CharSequence getFlyweightStr(int col){
}",0.360759493670886
31060,"public RecordListRecord(RecordMetadata metadata,MemoryPages mem){
  this.mem=mem;
  offsets=new int[metadata.getColumnCount()];
  csA=new DirectCharSequence[offsets.length];
  csB=new DirectCharSequence[offsets.length];
  int varColIndex=0;
  for (int i=0; i < offsets.length; i++) {
    int ct=metadata.getColumnQuick(i).getType();
    int size=ColumnType.sizeOf(ct);
    if (size != 0) {
      offsets[i]=fixedSize;
      fixedSize+=size;
    }
 else {
      offsets[i]=-(varColIndex++);
      csA[i]=new DirectCharSequence();
      csB[i]=new DirectCharSequence();
    }
  }
  fixedSize=((fixedSize + 7) >> 3) << 3;
  headerSize=varColIndex * 8;
}","public RecordListRecord(RecordMetadata metadata,MemoryPages mem){
  this.mem=mem;
  offsets=new int[metadata.getColumnCount()];
  DirectCharSequence[] csA=null;
  DirectCharSequence[] csB=null;
  int varColIndex=0;
  for (int i=0; i < offsets.length; i++) {
    int ct=metadata.getColumnQuick(i).getType();
    int size=ColumnType.sizeOf(ct);
    if (size != 0) {
      offsets[i]=fixedSize;
      fixedSize+=size;
    }
 else {
      offsets[i]=-(varColIndex++);
      if (csA == null) {
        csA=new DirectCharSequence[offsets.length];
        csB=new DirectCharSequence[offsets.length];
      }
      csA[i]=new DirectCharSequence();
      csB[i]=new DirectCharSequence();
    }
  }
  this.csA=csA;
  this.csB=csB;
  fixedSize=((fixedSize + 7) >> 3) << 3;
  headerSize=varColIndex * 8;
}",0.8024948024948025
31061,"@Override public IntList newInstance(){
  return new IntList();
}","@Override public ObjList<RecordColumnMetadata> newInstance(){
  return new ObjList<>();
}",0.7662337662337663
31062,"public static int compare(CharSequence l,CharSequence r){
  if (l == r) {
    return 0;
  }
  if (l == null) {
    return -1;
  }
  if (r == null) {
    return 1;
  }
  int ll=l.length();
  int rl=r.length();
  if (ll < rl) {
    return -1;
  }
  if (ll > rl) {
    return 1;
  }
  for (int i=0, n=ll < rl ? ll : rl; i < n; i++) {
    int k=l.charAt(i) - r.charAt(i);
    if (k != 0) {
      return k;
    }
  }
  return 0;
}","public static int compare(CharSequence l,CharSequence r){
  if (l == r) {
    return 0;
  }
  if (l == null) {
    return -1;
  }
  if (r == null) {
    return 1;
  }
  int ll=l.length();
  int rl=r.length();
  for (int i=0, n=ll < rl ? ll : rl; i < n; i++) {
    int k=l.charAt(i) - r.charAt(i);
    if (k != 0) {
      return k;
    }
  }
  if (ll < rl) {
    return -1;
  }
  if (ll > rl) {
    return 1;
  }
  return 0;
}",0.6658823529411765
31063,"@Override public CharSequence getFlyweightStrB(int col){
  long readAddress=addressOf(col);
  final int len=Unsafe.getUnsafe().getInt(readAddress);
  if (len < 0)   return null;
  return csB.of(readAddress + 4,readAddress + 4 + len * 2);
}","@Override public CharSequence getFlyweightStrB(int col){
  long readAddress=addressOf(col);
  final int len=Unsafe.getUnsafe().getInt(readAddress);
  if (len < 0)   return null;
  return Unsafe.arrayGet(csB,col).of(readAddress + 4,readAddress + 4 + len * 2);
}",0.9579158316633266
31064,"@Override public CharSequence getFlyweightStr(int col){
  long readAddress=addressOf(col);
  final int len=Unsafe.getUnsafe().getInt(readAddress);
  if (len < 0)   return null;
  return csA.of(readAddress + 4,readAddress + 4 + len * 2);
}","@Override public CharSequence getFlyweightStr(int col){
  long readAddress=addressOf(col);
  final int len=Unsafe.getUnsafe().getInt(readAddress);
  if (len < 0)   return null;
  return Unsafe.arrayGet(csA,col).of(readAddress + 4,readAddress + 4 + len * 2);
}",0.9456740442655936
31065,"public RecordListRecord(RecordMetadata metadata,MemoryPages mem){
  this.mem=mem;
  offsets=new int[metadata.getColumnCount()];
  int varColIndex=0;
  for (int i=0; i < offsets.length; i++) {
    int ct=metadata.getColumnQuick(i).getType();
    int size=ColumnType.sizeOf(ct);
    if (size != 0) {
      offsets[i]=fixedSize;
      fixedSize+=size;
    }
 else {
      offsets[i]=-(varColIndex++);
    }
  }
  fixedSize=((fixedSize + 7) >> 3) << 3;
  headerSize=varColIndex * 8;
}","public RecordListRecord(RecordMetadata metadata,MemoryPages mem){
  this.mem=mem;
  offsets=new int[metadata.getColumnCount()];
  csA=new DirectCharSequence[offsets.length];
  csB=new DirectCharSequence[offsets.length];
  int varColIndex=0;
  for (int i=0; i < offsets.length; i++) {
    int ct=metadata.getColumnQuick(i).getType();
    int size=ColumnType.sizeOf(ct);
    if (size != 0) {
      offsets[i]=fixedSize;
      fixedSize+=size;
    }
 else {
      offsets[i]=-(varColIndex++);
      csA[i]=new DirectCharSequence();
      csB[i]=new DirectCharSequence();
    }
  }
  fixedSize=((fixedSize + 7) >> 3) << 3;
  headerSize=varColIndex * 8;
}",0.8495575221238938
31066,"public AggregatedRecordSource(RecordSource recordSource,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,int pageSize,RecordKeyCopierCompiler compiler){
  int keyColumnsSize=keyColumns.size();
  IntList keyIndices=new IntList(keyColumnsSize);
  this.aggregators=aggregators;
  RecordMetadata rm=recordSource.getMetadata();
  for (int i=0; i < keyColumnsSize; i++) {
    keyIndices.add(rm.getColumnIndex(keyColumns.get(i)));
  }
  this.copier=compiler.compile(rm,keyIndices);
  ObjList<MapRecordValueInterceptor> interceptors=null;
  ObjList<RecordColumnMetadata> columns=AggregationUtils.TL_COLUMNS.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      if (interceptors == null) {
        interceptors=new ObjList<>();
      }
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.interceptors=interceptors;
  this.metadata=new DirectMapMetadata(rm,keyColumns,columns);
  this.storageFacade=new DirectMapStorageFacade(columns.size(),keyIndices);
  this.map=new DirectMap(pageSize,keyColumnsSize,AggregationUtils.toThreadLocalTypes(columns));
  this.recordSource=recordSource;
  this.record=new DirectMapRecord(storageFacade);
}","public AggregatedRecordSource(RecordSource recordSource,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,int pageSize,RecordKeyCopierCompiler compiler){
  int keyColumnsSize=keyColumns.size();
  IntList keyIndices=new IntList(keyColumnsSize);
  this.aggregators=aggregators;
  RecordMetadata rm=recordSource.getMetadata();
  for (int i=0; i < keyColumnsSize; i++) {
    keyIndices.add(rm.getColumnIndex(keyColumns.get(i)));
  }
  this.copier=compiler.compile(rm,keyIndices);
  ObjList<MapRecordValueInterceptor> interceptors=null;
  ObjList<RecordColumnMetadata> columns=AggregationUtils.TL_COLUMNS.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      if (interceptors == null) {
        interceptors=new ObjList<>();
      }
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.interceptors=interceptors;
  this.metadata=new DirectMapMetadata(rm,keyColumns,columns);
  this.storageFacade=new DirectMapStorageFacade(columns.size(),keyIndices);
  this.map=new DirectMap(pageSize,tlMetadataTypeResolver.get().of(rm,keyIndices),tlVirtualColumnTypeResolver.get().of(columns));
  this.recordSource=recordSource;
  this.record=new DirectMapRecord(storageFacade);
}",0.956551963851234
31067,"public ResampledRecordSource(RecordSource recordSource,int timestampColumnIndex,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,TimestampSampler sampler,int pageSize,RecordKeyCopierCompiler compiler){
  int keyColumnsSize=keyColumns.size();
  IntList keyIndices=new IntList(keyColumnsSize);
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  RecordMetadata rm=recordSource.getMetadata();
  this.tsIndex=timestampColumnIndex;
  keyCols.add(rm.getColumnName(tsIndex));
  for (int i=0; i < keyColumnsSize; i++) {
    keyCols.add(keyColumns.get(i));
    int index=rm.getColumnIndex(keyColumns.get(i));
    if (index != tsIndex) {
      keyIndices.add(index);
    }
  }
  this.aggregators=aggregators;
  this.sampler=sampler;
  this.copier=compiler.compile(rm,keyIndices);
  ObjList<MapRecordValueInterceptor> interceptors=null;
  ObjList<RecordColumnMetadata> columns=AggregationUtils.TL_COLUMNS.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      if (interceptors == null) {
        interceptors=new ObjList<>();
      }
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.interceptors=interceptors;
  this.storageFacade=new DirectMapStorageFacade(columns.size() + 1,keyIndices);
  this.metadata=new DirectMapMetadata(rm,keyCols,columns);
  this.record=new DirectMapRecord(this.storageFacade);
  this.map=new DirectMap(pageSize,keyCols.size(),AggregationUtils.toThreadLocalTypes(columns));
  this.recordSource=recordSource;
}","public ResampledRecordSource(RecordSource recordSource,int timestampColumnIndex,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,TimestampSampler sampler,int pageSize,RecordKeyCopierCompiler compiler){
  int keyColumnsSize=keyColumns.size();
  IntList keyIndices=new IntList(keyColumnsSize);
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  RecordMetadata rm=recordSource.getMetadata();
  this.tsIndex=timestampColumnIndex;
  keyCols.add(rm.getColumnName(tsIndex));
  for (int i=0; i < keyColumnsSize; i++) {
    keyCols.add(keyColumns.get(i));
    int index=rm.getColumnIndex(keyColumns.get(i));
    if (index != tsIndex) {
      keyIndices.add(index);
    }
  }
  this.aggregators=aggregators;
  this.sampler=sampler;
  this.copier=compiler.compile(rm,keyIndices);
  ObjList<MapRecordValueInterceptor> interceptors=null;
  ObjList<RecordColumnMetadata> columns=AggregationUtils.TL_COLUMNS.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      if (interceptors == null) {
        interceptors=new ObjList<>();
      }
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.interceptors=interceptors;
  this.storageFacade=new DirectMapStorageFacade(columns.size() + 1,keyIndices);
  this.metadata=new DirectMapMetadata(rm,keyCols,columns);
  this.record=new DirectMapRecord(this.storageFacade);
  this.map=new DirectMap(pageSize,tlMetadataTypeResolver.get().of(rm,keyCols),tlAggregationTypeResolver.get().of(columns));
  this.recordSource=recordSource;
}",0.966589861751152
31068,"public AbstractOrderedAnalyticFunction(int pageSize,VirtualColumn valueColumn){
  this.map=new DirectMap(pageSize,1,MapUtils.ROWID_MAP_VALUES);
  this.valueColumn=valueColumn;
}","public AbstractOrderedAnalyticFunction(int pageSize,VirtualColumn valueColumn){
  this.map=new DirectMap(pageSize,LongResolver.INSTANCE,LongResolver.INSTANCE);
  this.valueColumn=valueColumn;
}",0.8432432432432433
31069,"public AbstractRankOrderedAnalyticFunction(int pageSize,String name){
  super(name);
  this.map=new DirectMap(pageSize,1,MapUtils.ROWID_MAP_VALUES);
}","public AbstractRankOrderedAnalyticFunction(int pageSize,String name){
  super(name);
  this.map=new DirectMap(pageSize,LongResolver.INSTANCE,LongResolver.INSTANCE);
}",0.8164556962025317
31070,"public DenseRankOPAnalyticFunction(int pageSize,String name,ObjList<VirtualColumn> partitionBy){
  super(pageSize,name);
  this.partitionMap=new DirectMap(pageSize,1,MapUtils.ROWID_MAP_VALUES);
  this.partitionBy=partitionBy;
}","public DenseRankOPAnalyticFunction(int pageSize,String name,ObjList<VirtualColumn> partitionBy){
  super(pageSize,name);
  this.partitionMap=new DirectMap(pageSize,tlPartitionByTypeResolver.get().of(partitionBy),LongResolver.INSTANCE);
  this.partitionBy=partitionBy;
}",0.8225806451612904
31071,"public DenseRankPartitionedAnalyticFunction(int pageSize,String name,ObjList<VirtualColumn> partitionBy){
  super(name);
  this.partitionBy=partitionBy;
  this.map=new DirectMap(pageSize,partitionBy.size(),MapUtils.toTypeList(ColumnType.LONG));
}","public DenseRankPartitionedAnalyticFunction(int pageSize,String name,ObjList<VirtualColumn> partitionBy){
  super(name);
  this.partitionBy=partitionBy;
  this.map=new DirectMap(pageSize,tlPartitionByTypeResolver.get().of(partitionBy),LongResolver.INSTANCE);
}",0.7786561264822134
31072,"public NextOrderedPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  super(pageSize,valueColumn);
  this.prevMap=new DirectMap(pageSize,1,MapUtils.ROWID_MAP_VALUES);
  this.partitionBy=partitionBy;
}","public NextOrderedPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  super(pageSize,valueColumn);
  this.prevMap=new DirectMap(pageSize,tlPartitionByTypeResolver.get().of(partitionBy),LongResolver.INSTANCE);
  this.partitionBy=partitionBy;
}",0.84
31073,"public NextPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  super(pageSize,valueColumn);
  this.partitionBy=partitionBy;
  this.map=new DirectMap(pageSize,partitionBy.size(),MapUtils.toTypeList(ColumnType.LONG));
}","public NextPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  super(pageSize,valueColumn);
  this.partitionBy=partitionBy;
  this.map=new DirectMap(pageSize,tlPartitionByTypeResolver.get().of(partitionBy),LongResolver.INSTANCE);
}",0.802158273381295
31074,"public PrevOrderedPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  super(pageSize,valueColumn);
  this.prevMap=new DirectMap(pageSize,1,MapUtils.ROWID_MAP_VALUES);
  this.partitionBy=partitionBy;
}","public PrevOrderedPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  super(pageSize,valueColumn);
  this.prevMap=new DirectMap(pageSize,tlPartitionByTypeResolver.get().of(partitionBy),LongResolver.INSTANCE);
  this.partitionBy=partitionBy;
}",0.84
31075,"public PrevPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  super(valueColumn);
  this.partitionBy=partitionBy;
  this.map=new DirectMap(pageSize,partitionBy.size(),MapUtils.toTypeList(valueColumn.getType()));
}","public PrevPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  super(valueColumn);
  this.partitionBy=partitionBy;
  this.map=new DirectMap(pageSize,tlPartitionByTypeResolver.get().of(partitionBy),tlVirtualColumnResolver.get().of(valueColumn));
}",0.7535211267605634
31076,"public PrevStrPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  this.partitionBy=partitionBy;
  this.valueColumn=valueColumn;
  this.map=new DirectMap(pageSize,partitionBy.size(),MapUtils.toTypeList(ColumnType.LONG,ColumnType.BYTE));
}","public PrevStrPartitionedAnalyticFunction(int pageSize,ObjList<VirtualColumn> partitionBy,VirtualColumn valueColumn){
  this.partitionBy=partitionBy;
  this.valueColumn=valueColumn;
  this.map=new DirectMap(pageSize,tlPartitionByTypeResolver.get().of(partitionBy),LongByteResolver.INSTANCE);
}",0.7808219178082192
31077,"@Test public void testClientWithoutAuthProvider() throws Exception {
  JournalServer server=new JournalServer(new ServerConfig(){
{
      setHeartbeatFrequency(TimeUnit.MILLISECONDS.toMillis(500));
      setEnableMultiCast(false);
    }
  }
,factory,new AuthorizationHandler(){
    @Override public boolean isAuthorized(    byte[] token,    ObjList<JournalKey> requestedKeys){
      return ""String_Node_Str"".equals(new String(token));
    }
  }
);
  server.start();
  try {
    final CountDownLatch error=new CountDownLatch(1);
    JournalClient client=new JournalClient(local,factory,null,new JournalClient.Callback(){
      @Override public void onEvent(      int evt){
        if (evt == JournalClient.EVT_AUTH_CONFIG_ERROR) {
          error.countDown();
        }
      }
    }
);
    client.start();
    Assert.assertTrue(error.await(5,TimeUnit.SECONDS));
    Assert.assertFalse(client.isRunning());
  }
  finally {
    server.halt();
  }
}","@Test public void testClientWithoutAuthProvider() throws Exception {
  JournalServer server=new JournalServer(new ServerConfig(){
{
      setHeartbeatFrequency(TimeUnit.MILLISECONDS.toMillis(500));
      setEnableMultiCast(false);
    }
  }
,factory,new AuthorizationHandler(){
    @Override public boolean isAuthorized(    byte[] token,    ObjList<JournalKey> requestedKeys){
      return ""String_Node_Str"".equals(new String(token));
    }
  }
);
  server.start();
  try {
    final AtomicInteger authErrors=new AtomicInteger();
    final CountDownLatch error=new CountDownLatch(1);
    JournalClient client=new JournalClient(local,factory,null,new JournalClient.Callback(){
      @Override public void onEvent(      int evt){
switch (evt) {
case JournalClient.EVT_AUTH_CONFIG_ERROR:
          authErrors.incrementAndGet();
        break;
case JournalClient.EVT_TERMINATED:
      error.countDown();
    break;
default :
  break;
}
}
}
);
client.start();
Assert.assertTrue(error.await(5,TimeUnit.SECONDS));
Assert.assertFalse(client.isRunning());
}
  finally {
server.halt();
}
}",0.831604938271605
31078,"public Journal(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  this.metadata=metadata;
  this.key=key;
  this.location=new File(metadata.getLocation());
  this.txLog=new TxLog(location,getMode(),metadata.getTxCountHint());
  this.open=true;
  this.timestampOffset=getMetadata().getTimestampMetadata() == null ? -1 : getMetadata().getTimestampMetadata().offset;
  this.inactiveColumns=new BitSet(metadata.getColumnCount());
  configure();
}","public Journal(JournalMetadata<T> metadata,JournalKey<T> key) throws JournalException {
  this.metadata=metadata;
  this.key=key;
  this.location=new File(metadata.getLocation());
  this.txLog=new TxLog(location,getMode(),metadata.getTxCountHint());
  this.open=true;
  this.timestampOffset=getMetadata().getTimestampMetadata() == null ? -1 : getMetadata().getTimestampMetadata().offset;
  this.inactiveColumns=new BitSet(metadata.getColumnCount());
  this.openFileTtl=metadata.getOpenFileTTL();
  this.expireRecheckInterval=(long)(this.openFileTtl * 0.1);
  configure();
}",0.8970163618864293
31079,"public void refresh(){
  for (int i=0, sz=journalList.size(); i < sz; i++) {
    journalList.get(i).refresh();
  }
}","public void refresh(){
  for (int i=0, sz=journalList.size(); i < sz; i++) {
    journalList.getQuick(i).refresh();
  }
}",0.978902953586498
31080,"@Override public void close(){
  if (pool != null) {
    if (!inPool) {
      inPool=true;
      pool.release(this);
    }
  }
 else {
    if (closed.compareAndSet(false,true)) {
      for (int i=0, sz=journalList.size(); i < sz; i++) {
        Journal journal=journalList.get(i);
        journal.setCloseListener(null);
        if (journal.isOpen()) {
          journal.close();
        }
      }
      readers.clear();
      bulkReaders.clear();
    }
  }
}","@Override public void close(){
  if (pool != null) {
    if (!inPool) {
      inPool=true;
      pool.release(this);
    }
  }
 else {
    if (closed.compareAndSet(false,true)) {
      for (int i=0, sz=journalList.size(); i < sz; i++) {
        Journal journal=journalList.getQuick(i);
        journal.setCloseListener(null);
        if (journal.isOpen()) {
          journal.close();
        }
      }
      readers.clear();
      bulkReaders.clear();
    }
  }
}",0.9945828819068256
31081,"void expireOpenFiles(){
  for (int i=0, sz=journalList.size(); i < sz; i++) {
    journalList.get(i).expireOpenFiles();
  }
}","void expireOpenFiles(){
  for (int i=0, sz=journalList.size(); i < sz; i++) {
    journalList.getQuick(i).expireOpenFiles0();
  }
}",0.9765625
31082,"private void subscribeOne(int index,SubscriptionHolder holder,String loc,boolean newSubscription) throws JournalNetworkException {
  if (newSubscription) {
    SubscriptionHolder sub=new SubscriptionHolder();
    sub.local=holder.local;
    sub.remote=holder.remote;
    sub.listener=holder.listener;
    sub.writer=holder.writer;
    subscriptions.add(sub);
  }
  JournalWriter writer=writers.getQuiet(index);
  try {
    commandProducer.write(channel,Command.ADD_KEY_CMD);
    setKeyRequestProducer.write(channel,new IndexedJournalKey(index,holder.remote));
    checkAck();
    JournalMetadata metadata;
    File file=Files.makeTempFile();
    try {
      try (HugeBufferConsumer h=new HugeBufferConsumer(file)){
        h.read(channel);
        metadata=new JournalMetadata(h.getHb());
      }
 catch (      JournalException e) {
        throw new JournalNetworkException(e);
      }
    }
  finally {
      Files.delete(file);
    }
    boolean validate=true;
    if (writer == null) {
      if (holder.writer == null) {
        try {
          writer=factory.writer(new JournalStructure(metadata).location(loc));
        }
 catch (        JournalException e) {
          LOG.error().$(""String_Node_Str"").$(e).$();
          unsubscribe(index,null,holder,JournalEvents.EVT_JNL_INCOMPATIBLE);
          return;
        }
        writersToClose.add(writer);
        validate=false;
      }
 else {
        writer=holder.writer;
      }
      statusSentList.extendAndSet(index,0);
      deltaConsumers.extendAndSet(index,new JournalDeltaConsumer(writer.setCommitOnClose(false)));
      writers.extendAndSet(index,writer);
      writer.setJournalListener(holder.listener);
    }
 else {
      statusSentList.setQuick(index,0);
    }
    if (validate && !metadata.isCompatible(writer.getMetadata(),false)) {
      LOG.error().$(""String_Node_Str"").$(holder.local.path()).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
      unsubscribe(index,writer,holder,JournalEvents.EVT_JNL_INCOMPATIBLE);
      return;
    }
    commandProducer.write(channel,Command.DELTA_REQUEST_CMD);
    journalClientStateProducer.write(channel,new IndexedJournal(index,writer));
    checkAck();
    statusSentList.setQuick(index,1);
    if (holder.listener != null) {
      holder.listener.onEvent(JournalEvents.EVT_JNL_SUBSCRIBED);
    }
    LOG.info().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
  }
 catch (  JournalNetworkException e) {
    LOG.error().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
    unsubscribe(index,writer,holder,JournalEvents.EVT_JNL_SERVER_ERROR);
  }
}","private void subscribeOne(int index,SubscriptionHolder holder,String loc,boolean newSubscription) throws JournalNetworkException {
  if (newSubscription) {
    SubscriptionHolder sub=new SubscriptionHolder();
    sub.local=holder.local;
    sub.remote=holder.remote;
    sub.listener=holder.listener;
    sub.writer=holder.writer;
    subscriptions.add(sub);
  }
  JournalWriter writer=writers.getQuiet(index);
  try {
    commandProducer.write(channel,Command.ADD_KEY_CMD);
    setKeyRequestProducer.write(channel,new IndexedJournalKey(index,holder.remote));
    checkAck();
    JournalMetadata metadata;
    File file=Files.makeTempFile();
    try {
      try (HugeBufferConsumer h=new HugeBufferConsumer(file)){
        h.read(channel);
        metadata=new JournalMetadata(h.getHb());
      }
 catch (      JournalException e) {
        throw new JournalNetworkException(e);
      }
    }
  finally {
      Files.delete(file);
    }
    boolean validate=true;
    if (writer == null) {
      if (holder.writer == null) {
        try {
          writer=factory.writer(new JournalStructure(metadata).location(loc));
        }
 catch (        JournalException e) {
          LOG.error().$(""String_Node_Str"").$(e).$();
          unsubscribe(index,null,holder,JournalEvents.EVT_JNL_INCOMPATIBLE);
          return;
        }
        writersToClose.add(writer);
        validate=false;
      }
 else {
        writer=holder.writer;
      }
      writer.disableCommitOnClose();
      statusSentList.extendAndSet(index,0);
      deltaConsumers.extendAndSet(index,new JournalDeltaConsumer(writer));
      writers.extendAndSet(index,writer);
      writer.setJournalListener(holder.listener);
    }
 else {
      statusSentList.setQuick(index,0);
    }
    if (validate && !metadata.isCompatible(writer.getMetadata(),false)) {
      LOG.error().$(""String_Node_Str"").$(holder.local.path()).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
      unsubscribe(index,writer,holder,JournalEvents.EVT_JNL_INCOMPATIBLE);
      return;
    }
    commandProducer.write(channel,Command.DELTA_REQUEST_CMD);
    journalClientStateProducer.write(channel,new IndexedJournal(index,writer));
    checkAck();
    statusSentList.setQuick(index,1);
    if (holder.listener != null) {
      holder.listener.onEvent(JournalEvents.EVT_JNL_SUBSCRIBED);
    }
    LOG.info().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
  }
 catch (  JournalNetworkException e) {
    LOG.error().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(holder.remote.path()).$(""String_Node_Str"").$();
    unsubscribe(index,writer,holder,JournalEvents.EVT_JNL_SERVER_ERROR);
  }
}",0.9886764432894004
31083,"public void configure(long txn,long txPin) throws JournalException {
  String loc=journal.getKey().getId();
  LOG.debug().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(txn).$(""String_Node_Str"").$(txPin).$('}').$();
  journalServerState.reset();
  journal.refresh();
  long thisTxn=journal.getTxn();
  long thisTxnPin=journal.getTxPin();
  if (thisTxn < txn) {
    LOG.info().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(""String_Node_Str"").$(txn).$(""String_Node_Str"").$(txPin).$('}').$();
    journalServerState.setTxn(-1);
  }
 else   if (thisTxn == txn) {
    if (thisTxnPin != txPin) {
      LOG.info().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(""String_Node_Str"").$(txn).$(""String_Node_Str"").$(txPin).$('}').$();
      journalServerState.setTxn(-1);
    }
  }
 else   if (thisTxn > txn) {
    Tx tx=journal.find(txn,txPin);
    if (tx == null) {
      LOG.info().$(""String_Node_Str"").$(loc).$(""String_Node_Str"").$(""String_Node_Str"").$(txn).$(""String_Node_Str"").$(txPin).$('}').$();
      journalServerState.setTxn(-1);
    }
 else {
      journalServerState.setTxn(thisTxn);
      journalServerState.setTxPin(thisTxnPin);
      configure0(tx);
    }
  }
}","public void configure(long txn,long txPin) throws JournalException {
  journalServerState.reset();
  journal.refresh();
  long thisTxn=journal.getTxn();
  long thisTxnPin=journal.getTxPin();
  if (thisTxn < txn) {
    LOG.info().$(""String_Node_Str"").$(journal.getKey().path()).$(""String_Node_Str"").$(""String_Node_Str"").$(txn).$(""String_Node_Str"").$(txPin).$('}').$();
    journalServerState.setTxn(-1);
  }
 else   if (thisTxn == txn) {
    if (thisTxnPin != txPin) {
      LOG.info().$(""String_Node_Str"").$(journal.getKey().path()).$(""String_Node_Str"").$(""String_Node_Str"").$(txn).$(""String_Node_Str"").$(txPin).$('}').$();
      journalServerState.setTxn(-1);
    }
  }
 else   if (thisTxn > txn) {
    Tx tx=journal.find(txn,txPin);
    if (tx == null) {
      LOG.info().$(""String_Node_Str"").$(journal.getKey().path()).$(""String_Node_Str"").$(""String_Node_Str"").$(txn).$(""String_Node_Str"").$(txPin).$('}').$();
      journalServerState.setTxn(-1);
    }
 else {
      journalServerState.setTxn(thisTxn);
      journalServerState.setTxPin(thisTxnPin);
      configure0(tx);
    }
  }
}",0.4984533804684047
31084,"@Override public void write(WritableByteChannel channel) throws JournalNetworkException {
  journalServerStateProducer.write(channel,journalServerState);
  if (journalSymbolTableProducer.hasContent()) {
    journalSymbolTableProducer.write(channel);
  }
  for (int i=0, sz=partitionDeltaProducers.size(); i < sz; i++) {
    partitionDeltaProducers.getQuick(i).write(channel);
  }
  if (lagPartitionDeltaProducer != null && lagPartitionDeltaProducer.hasContent()) {
    lagPartitionDeltaProducer.write(channel);
  }
  journalServerState.reset();
  journal.expireOpenFiles();
}","@Override public void write(WritableByteChannel channel) throws JournalNetworkException {
  journalServerStateProducer.write(channel,journalServerState);
  if (journalSymbolTableProducer.hasContent()) {
    journalSymbolTableProducer.write(channel);
  }
  for (int i=0, sz=partitionDeltaProducers.size(); i < sz; i++) {
    partitionDeltaProducers.getQuick(i).write(channel);
  }
  if (lagPartitionDeltaProducer != null && lagPartitionDeltaProducer.hasContent()) {
    lagPartitionDeltaProducer.write(channel);
  }
  journalServerState.reset();
  journal.expireOpenFiles0();
}",0.9991311902693312
31085,"@Test public void testRecovery() throws Exception {
  long ts;
  try (JournalWriter<Quote> w=factory.writer(Quote.class)){
    w.setCommitOnClose(false);
    Assert.assertFalse(w.isCommitOnClose());
    TestUtils.generateQuoteData(w,10000,new Interval(""String_Node_Str"",""String_Node_Str""));
    ts=w.getMaxTimestamp();
    TestUtils.generateQuoteData(w,10000,new Interval(""String_Node_Str"",""String_Node_Str""),false);
    Assert.assertTrue(w.getMaxTimestamp() > ts);
  }
   try (Journal<Quote> w=factory.reader(Quote.class)){
    Assert.assertEquals(ts,w.getMaxTimestamp());
    Assert.assertEquals(10000,w.size());
  }
   try (JournalWriter<Quote> w=factory.writer(Quote.class)){
    w.setCommitOnClose(false);
    Assert.assertEquals(ts,w.getMaxTimestamp());
    Assert.assertEquals(10000,w.size());
  }
 }","@Test public void testRecovery() throws Exception {
  long ts;
  try (JournalWriter<Quote> w=factory.writer(Quote.class)){
    w.disableCommitOnClose();
    Assert.assertFalse(w.isCommitOnClose());
    TestUtils.generateQuoteData(w,10000,new Interval(""String_Node_Str"",""String_Node_Str""));
    ts=w.getMaxTimestamp();
    TestUtils.generateQuoteData(w,10000,new Interval(""String_Node_Str"",""String_Node_Str""),false);
    Assert.assertTrue(w.getMaxTimestamp() > ts);
  }
   try (Journal<Quote> w=factory.reader(Quote.class)){
    Assert.assertEquals(ts,w.getMaxTimestamp());
    Assert.assertEquals(10000,w.size());
  }
   try (JournalWriter<Quote> w=factory.writer(Quote.class)){
    w.disableCommitOnClose();
    Assert.assertEquals(ts,w.getMaxTimestamp());
    Assert.assertEquals(10000,w.size());
  }
 }",0.9813895781637716
31086,"@Test public void testLagRecovery() throws Exception {
  JournalWriter<Quote> origin=factory.writer(Quote.class,""String_Node_Str"");
  TestUtils.generateQuoteData(origin,100000,new Interval(""String_Node_Str"",""String_Node_Str""));
  try (Journal<Quote> r=factory.reader(Quote.class,""String_Node_Str"")){
    Assert.assertEquals(100000,r.size());
  }
   long ts;
  try (JournalWriter<Quote> w=factory.writer(Quote.class)){
    w.setCommitOnClose(false);
    w.append(origin.query().all().asResultSet().subset(0,15000));
    w.mergeAppend(origin.query().all().asResultSet().subset(15000,17000));
    w.commit();
    ts=w.getMaxTimestamp();
    w.mergeAppend(origin.query().all().asResultSet().subset(16000,27000));
    w.mergeAppend(origin.query().all().asResultSet().subset(23000,37000));
    Assert.assertTrue(ts < w.getMaxTimestamp());
    Assert.assertEquals(37672,w.size());
  }
   try (Journal<Quote> w=factory.reader(Quote.class)){
    Assert.assertEquals(ts,w.getMaxTimestamp());
    Assert.assertEquals(17000,w.size());
  }
   try (JournalWriter<Quote> w=factory.writer(Quote.class)){
    Assert.assertEquals(ts,w.getMaxTimestamp());
    Assert.assertEquals(17000,w.size());
  }
 }","@Test public void testLagRecovery() throws Exception {
  JournalWriter<Quote> origin=factory.writer(Quote.class,""String_Node_Str"");
  TestUtils.generateQuoteData(origin,100000,new Interval(""String_Node_Str"",""String_Node_Str""));
  try (Journal<Quote> r=factory.reader(Quote.class,""String_Node_Str"")){
    Assert.assertEquals(100000,r.size());
  }
   long ts;
  try (JournalWriter<Quote> w=factory.writer(Quote.class)){
    w.disableCommitOnClose();
    w.append(origin.query().all().asResultSet().subset(0,15000));
    w.mergeAppend(origin.query().all().asResultSet().subset(15000,17000));
    w.commit();
    ts=w.getMaxTimestamp();
    w.mergeAppend(origin.query().all().asResultSet().subset(16000,27000));
    w.mergeAppend(origin.query().all().asResultSet().subset(23000,37000));
    Assert.assertTrue(ts < w.getMaxTimestamp());
    Assert.assertEquals(37672,w.size());
  }
   try (Journal<Quote> w=factory.reader(Quote.class)){
    Assert.assertEquals(ts,w.getMaxTimestamp());
    Assert.assertEquals(17000,w.size());
  }
   try (JournalWriter<Quote> w=factory.writer(Quote.class)){
    Assert.assertEquals(ts,w.getMaxTimestamp());
    Assert.assertEquals(17000,w.size());
  }
 }",0.9936628643852978
31087,"private boolean analyzeNotListOfValues(String column,RecordMetadata m,ExprNode node){
  RecordColumnMetadata meta=m.getColumn(column);
switch (meta.getType()) {
case ColumnType.SYMBOL:
case ColumnType.STRING:
case ColumnType.LONG:
case ColumnType.INT:
    if (meta.isIndexed() && (preferredKeyColumn == null || preferredKeyColumn.equals(column))) {
      keyExclNodes.add(node);
    }
  break;
default :
break;
}
return false;
}","private boolean analyzeNotListOfValues(String column,RecordMetadata m,ExprNode notNode){
  RecordColumnMetadata meta=m.getColumn(column);
switch (meta.getType()) {
case ColumnType.SYMBOL:
case ColumnType.STRING:
case ColumnType.LONG:
case ColumnType.INT:
    if (meta.isIndexed() && (preferredKeyColumn == null || preferredKeyColumn.equals(column))) {
      keyExclNodes.add(notNode);
    }
  break;
default :
break;
}
return false;
}",0.9930394431554525
31088,"private boolean analyzeNotIn(AliasTranslator translator,IntrinsicModel model,ExprNode notNode,RecordMetadata m) throws ParserException {
  ExprNode node=notNode.rhs;
  if (node.paramCount < 2) {
    throw QueryError.$(node.position,""String_Node_Str"");
  }
  ExprNode col=node.paramCount < 3 ? node.lhs : node.args.getLast();
  if (col.type != ExprNode.LITERAL) {
    throw QueryError.$(col.position,""String_Node_Str"");
  }
  String column=translator.translateAlias(col.token).toString();
  if (m.getColumnIndexQuiet(column) == -1) {
    throw QueryError.invalidColumn(col.position,col.token);
  }
  boolean ok=analyzeNotInInterval(model,col,node) || analyzeNotListOfValues(column,m,node);
  if (ok) {
    notNode.intrinsicValue=IntrinsicValue.TRUE;
  }
  return ok;
}","private boolean analyzeNotIn(AliasTranslator translator,IntrinsicModel model,ExprNode notNode,RecordMetadata m) throws ParserException {
  ExprNode node=notNode.rhs;
  if (node.paramCount < 2) {
    throw QueryError.$(node.position,""String_Node_Str"");
  }
  ExprNode col=node.paramCount < 3 ? node.lhs : node.args.getLast();
  if (col.type != ExprNode.LITERAL) {
    throw QueryError.$(col.position,""String_Node_Str"");
  }
  String column=translator.translateAlias(col.token).toString();
  if (m.getColumnIndexQuiet(column) == -1) {
    throw QueryError.invalidColumn(col.position,col.token);
  }
  boolean ok=analyzeNotInInterval(model,col,node) || analyzeNotListOfValues(column,m,notNode);
  if (ok) {
    notNode.intrinsicValue=IntrinsicValue.TRUE;
  }
  return ok;
}",0.9980481457384516
31089,"private void applyKeyExclusions(AliasTranslator translator,IntrinsicModel model){
  if (model.keyColumn != null && keyExclNodes.size() > 0) {
    for (int i=0, n=keyExclNodes.size(); i < n; i++) {
      ExprNode node=keyExclNodes.getQuick(i);
      ExprNode col;
      ExprNode val;
      if (node.lhs.type == ExprNode.LITERAL) {
        col=node.lhs;
        val=node.rhs;
      }
 else {
        col=node.rhs;
        val=node.lhs;
      }
      final String column=translator.translateAlias(col.token).toString();
      if (column.equals(model.keyColumn)) {
        String value=Chars.equals(""String_Node_Str"",val.token) ? null : Chars.stripQuotes(val.token);
        int index=model.keyValues.remove(value);
        if (index > -1) {
          model.keyValuePositions.removeIndex(index);
        }
        node.intrinsicValue=IntrinsicValue.TRUE;
        if (model.keyValues.size() == 0) {
          model.intrinsicValue=IntrinsicValue.FALSE;
          break;
        }
      }
    }
  }
  keyExclNodes.clear();
}","private void applyKeyExclusions(AliasTranslator translator,IntrinsicModel model){
  if (model.keyColumn != null && keyExclNodes.size() > 0) {
    OUT:     for (int i=0, n=keyExclNodes.size(); i < n; i++) {
      ExprNode parent=keyExclNodes.getQuick(i);
      ExprNode node=""String_Node_Str"".equals(parent.token) ? parent.rhs : parent;
      if (node.paramCount == 2) {
        ExprNode col;
        ExprNode val;
        if (node.lhs.type == ExprNode.LITERAL) {
          col=node.lhs;
          val=node.rhs;
        }
 else {
          col=node.rhs;
          val=node.lhs;
        }
        final String column=translator.translateAlias(col.token).toString();
        if (column.equals(model.keyColumn)) {
          model.excludeValue(val);
          parent.intrinsicValue=IntrinsicValue.TRUE;
          if (model.intrinsicValue == IntrinsicValue.FALSE) {
            break;
          }
        }
      }
      if (node.paramCount > 2) {
        ExprNode col=node.args.getQuick(node.paramCount - 1);
        final String column=translator.translateAlias(col.token).toString();
        if (column.equals(model.keyColumn)) {
          for (int j=node.paramCount - 2; j > -1; j--) {
            ExprNode val=node.args.getQuick(j);
            model.excludeValue(val);
            if (model.intrinsicValue == IntrinsicValue.FALSE) {
              break OUT;
            }
          }
          parent.intrinsicValue=IntrinsicValue.TRUE;
        }
      }
    }
  }
  keyExclNodes.clear();
}",0.5688073394495413
31090,"private boolean analyzeNotEquals(IntrinsicModel model,ExprNode node) throws ParserException {
  checkNodeValid(node);
  if (Chars.equals(node.lhs.token,node.rhs.token)) {
    model.intrinsicValue=IntrinsicValue.FALSE;
  }
  ExprNode a=node.lhs;
  ExprNode b=node.rhs;
  if (a.type == ExprNode.LITERAL && b.type == ExprNode.CONSTANT && isTimestamp(a)) {
    CharSequence seq=quoteEraser.ofQuoted(b.token);
    model.subtractIntervals(seq,0,seq.length(),b.position);
    node.intrinsicValue=IntrinsicValue.TRUE;
    return true;
  }
  return false;
}","private boolean analyzeNotEquals(AliasTranslator translator,IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
  checkNodeValid(node);
  return analyzeNotEquals0(translator,model,node,node.lhs,node.rhs,m) || analyzeNotEquals0(translator,model,node,node.rhs,node.lhs,m);
}",0.3120567375886525
31091,"private boolean removeAndIntrinsics(AliasTranslator translator,IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
switch (node.token) {
case ""String_Node_Str"":
    return analyzeIn(translator,model,node,m);
case ""String_Node_Str"":
  return analyzeGreater(model,node,1);
case ""String_Node_Str"":
return analyzeGreater(model,node,0);
case ""String_Node_Str"":
return analyzeLess(model,node,1);
case ""String_Node_Str"":
return analyzeLess(model,node,0);
case ""String_Node_Str"":
return analyzeEquals(translator,model,node,m);
case ""String_Node_Str"":
return analyzeNotEquals(model,node);
default :
return false;
}
}","private boolean removeAndIntrinsics(AliasTranslator translator,IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
switch (node.token) {
case ""String_Node_Str"":
    return analyzeIn(translator,model,node,m);
case ""String_Node_Str"":
  return analyzeGreater(model,node,1);
case ""String_Node_Str"":
return analyzeGreater(model,node,0);
case ""String_Node_Str"":
return analyzeLess(model,node,1);
case ""String_Node_Str"":
return analyzeLess(model,node,0);
case ""String_Node_Str"":
return analyzeEquals(translator,model,node,m);
case ""String_Node_Str"":
return analyzeNotEquals(translator,model,node,m);
default :
return false;
}
}",0.9741985926505082
31092,"IntrinsicModel extract(AliasTranslator translator,ExprNode node,RecordMetadata m,String preferredKeyColumn,int timestampIndex) throws ParserException {
  this.stack.clear();
  this.keyNodes.clear();
  this.timestamp=timestampIndex < 0 ? null : m.getColumnName(timestampIndex);
  this.preferredKeyColumn=preferredKeyColumn;
  IntrinsicModel model=models.next();
  if (removeAndIntrinsics(translator,model,node,m)) {
    return model;
  }
  ExprNode root=node;
  while (!stack.isEmpty() || node != null) {
    if (node != null) {
switch (node.token) {
case ""String_Node_Str"":
        if (!removeAndIntrinsics(translator,model,node.rhs,m)) {
          stack.push(node.rhs);
        }
      node=removeAndIntrinsics(translator,model,node.lhs,m) ? null : node.lhs;
    break;
default :
  node=stack.poll();
break;
}
}
 else {
node=stack.poll();
}
}
model.filter=collapseIntrinsicNodes(root);
return model;
}","IntrinsicModel extract(AliasTranslator translator,ExprNode node,RecordMetadata m,String preferredKeyColumn,int timestampIndex) throws ParserException {
  this.stack.clear();
  this.keyNodes.clear();
  this.timestamp=timestampIndex < 0 ? null : m.getColumnName(timestampIndex);
  this.preferredKeyColumn=preferredKeyColumn;
  IntrinsicModel model=models.next();
  if (removeAndIntrinsics(translator,model,node,m)) {
    return model;
  }
  ExprNode root=node;
  while (!stack.isEmpty() || node != null) {
    if (node != null) {
switch (node.token) {
case ""String_Node_Str"":
        if (!removeAndIntrinsics(translator,model,node.rhs,m)) {
          stack.push(node.rhs);
        }
      node=removeAndIntrinsics(translator,model,node.lhs,m) ? null : node.lhs;
    break;
default :
  node=stack.poll();
break;
}
}
 else {
node=stack.poll();
}
}
applyKeyExclusions(translator,model);
model.filter=collapseIntrinsicNodes(root);
return model;
}",0.979370249728556
31093,"public boolean remove(CharSequence key){
  if (key == null) {
    if (hasNull) {
      hasNull=false;
      list.remove(null);
      free++;
      return true;
    }
    return false;
  }
  int index=idx(key);
  if (Unsafe.arrayGet(keys,index) == null) {
    return false;
  }
  if (eq(index,key)) {
    removeAt(index);
    return true;
  }
  index=probe(key,index);
  if (index < 0) {
    return false;
  }
  removeAt(index);
  return true;
}","public int remove(CharSequence key){
  if (key == null) {
    if (hasNull) {
      hasNull=false;
      int index=list.remove(null);
      free++;
      return index;
    }
    return -1;
  }
  int index=idx(key);
  if (Unsafe.arrayGet(keys,index) == null) {
    return -1;
  }
  if (eq(index,key)) {
    return removeAt(index);
  }
  index=probe(key,index);
  if (index < 0) {
    return -1;
  }
  return removeAt(index);
}",0.8271889400921659
31094,"private void removeAt(int index){
  list.remove(Unsafe.arrayGet(keys,index));
  free++;
  rehash();
}","private int removeAt(int index){
  int result=list.remove(Unsafe.arrayGet(keys,index));
  free++;
  rehash();
  return result;
}",0.8558951965065502
31095,"@Override @SuppressWarnings(""String_Node_Str"") public boolean remove(Object key){
  if (list.remove(key)) {
    int index=idx((T)key);
    if (key.equals(Unsafe.arrayGet(keys,index))) {
      Unsafe.arrayPut(keys,index,noEntryValue);
      free++;
      return true;
    }
    return probeRemove(key,index);
  }
  return false;
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean remove(Object key){
  if (list.remove(key) > -1) {
    int index=idx((T)key);
    if (key.equals(Unsafe.arrayGet(keys,index))) {
      Unsafe.arrayPut(keys,index,noEntryValue);
      free++;
      return true;
    }
    return probeRemove(key,index);
  }
  return false;
}",0.9924585218702866
31096,"@Test public void testNullHandling() throws Exception {
  Rnd rnd=new Rnd();
  CharSequenceHashSet set=new CharSequenceHashSet();
  int n=1000;
  for (int i=0; i < n; i++) {
    set.add(next(rnd));
  }
  Assert.assertFalse(set.contains(null));
  Assert.assertTrue(set.add(null));
  Assert.assertEquals(n + 1,set.size());
  Assert.assertFalse(set.add(null));
  Assert.assertEquals(n + 1,set.size());
  Assert.assertTrue(set.contains(null));
  Assert.assertTrue(set.remove(null));
  Assert.assertEquals(n,set.size());
  Assert.assertFalse(set.remove(null));
  Assert.assertEquals(n,set.size());
}","@Test public void testNullHandling() throws Exception {
  Rnd rnd=new Rnd();
  CharSequenceHashSet set=new CharSequenceHashSet();
  int n=1000;
  for (int i=0; i < n; i++) {
    set.add(next(rnd));
  }
  Assert.assertFalse(set.contains(null));
  Assert.assertTrue(set.add(null));
  Assert.assertEquals(n + 1,set.size());
  Assert.assertFalse(set.add(null));
  Assert.assertEquals(n + 1,set.size());
  Assert.assertTrue(set.contains(null));
  Assert.assertTrue(set.remove(null) > -1);
  Assert.assertEquals(n,set.size());
  Assert.assertTrue(set.remove(null) == -1);
  Assert.assertEquals(n,set.size());
}",0.9849749582637728
31097,"@Test public void testStress() throws Exception {
  Rnd rnd=new Rnd();
  CharSequenceHashSet set=new CharSequenceHashSet();
  int n=10000;
  for (int i=0; i < n; i++) {
    set.add(next(rnd));
  }
  Assert.assertEquals(n,set.size());
  HashSet<String> check=new HashSet<>();
  for (int i=0, m=set.size(); i < m; i++) {
    check.add(set.get(i).toString());
  }
  Assert.assertEquals(n,check.size());
  Rnd rnd2=new Rnd();
  for (int i=0; i < n; i++) {
    Assert.assertTrue(""String_Node_Str"" + i,set.contains(next(rnd2)));
  }
  Assert.assertEquals(n,set.size());
  Rnd rnd3=new Rnd();
  for (int i=0; i < n; i++) {
    Assert.assertFalse(""String_Node_Str"" + i,set.add(next(rnd3)));
  }
  Assert.assertEquals(n,set.size());
  for (int i=0; i < n; i++) {
    Assert.assertFalse(""String_Node_Str"" + i,set.remove(next(rnd)));
  }
  Rnd rnd4=new Rnd();
  for (int i=0; i < n; i++) {
    Assert.assertTrue(""String_Node_Str"" + i,set.remove(next(rnd4)));
  }
  Assert.assertEquals(0,set.size());
}","@Test public void testStress() throws Exception {
  Rnd rnd=new Rnd();
  CharSequenceHashSet set=new CharSequenceHashSet();
  int n=10000;
  for (int i=0; i < n; i++) {
    set.add(next(rnd));
  }
  Assert.assertEquals(n,set.size());
  HashSet<String> check=new HashSet<>();
  for (int i=0, m=set.size(); i < m; i++) {
    check.add(set.get(i).toString());
  }
  Assert.assertEquals(n,check.size());
  Rnd rnd2=new Rnd();
  for (int i=0; i < n; i++) {
    Assert.assertTrue(""String_Node_Str"" + i,set.contains(next(rnd2)));
  }
  Assert.assertEquals(n,set.size());
  Rnd rnd3=new Rnd();
  for (int i=0; i < n; i++) {
    Assert.assertFalse(""String_Node_Str"" + i,set.add(next(rnd3)));
  }
  Assert.assertEquals(n,set.size());
  for (int i=0; i < n; i++) {
    Assert.assertTrue(""String_Node_Str"" + i,set.remove(next(rnd)) == -1);
  }
  Rnd rnd4=new Rnd();
  for (int i=0; i < n; i++) {
    Assert.assertTrue(""String_Node_Str"" + i,set.remove(next(rnd4)) > -1);
  }
  Assert.assertEquals(0,set.size());
}",0.9909547738693468
31098,"private DateGreaterThanStrOperator(int position){
  super(ColumnType.BOOLEAN,position);
}","private DateGreaterThanStrOperator(int position){
  super(position);
}",0.8805031446540881
31099,"@Override public boolean getBool(Record rec){
  int r=rhs.getInt(rec);
  return lhs.getInt(rec) > r && r > Integer.MIN_VALUE;
}","@Override public boolean getBool(Record rec){
  int r=rhs.getInt(rec);
  return lhs.getInt(rec) > r && r > Numbers.INT_NaN;
}",0.9206349206349206
31100,"private StrGreaterThanDateOperator(int position){
  super(ColumnType.BOOLEAN,position);
}","private StrGreaterThanDateOperator(int position){
  super(position);
}",0.8805031446540881
31101,"public CharSequence translateAlias(CharSequence column){
  QueryColumn referent=aliasToColumnMap.get(column);
  if (referent != null && !(referent instanceof AnalyticColumn) && referent.getAst().type == ExprNode.LITERAL) {
    return referent.getAst().token;
  }
 else {
    return column;
  }
}","@Override public CharSequence translateAlias(CharSequence column){
  QueryColumn referent=aliasToColumnMap.get(column);
  if (referent != null && !(referent instanceof AnalyticColumn) && referent.getAst().type == ExprNode.LITERAL) {
    return referent.getAst().token;
  }
 else {
    return column;
  }
}",0.9833333333333332
31102,"private RecordSource filter(QueryModel model,RecordSource rs) throws ParserException {
  try {
    if (model.getWhereClause() == null) {
      return rs;
    }
    RecordMetadata m=rs.getMetadata();
    if (model.getAlias() != null) {
      m.setAlias(model.getAlias().token);
    }
    IntrinsicModel im=queryFilterAnalyser.extract(model.getWhereClause(),m,null,getTimestampIndexQuiet(model.getTimestamp(),m));
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      return new NoOpJournalRecordSource(rs);
    }
    if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
      rs=new IntervalRecordSource(rs,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
    }
    if (im.intervalSource != null) {
      rs=new IntervalRecordSource(rs,im.intervalSource);
    }
    if (im.filter != null) {
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,im.filter,m);
      if (vc.isConstant()) {
        if (vc.getBool(null)) {
          return rs;
        }
 else {
          return new NoOpJournalRecordSource(rs);
        }
      }
      return new FilteredRecordSource(rs,vc,im.filter);
    }
 else {
      return rs;
    }
  }
 catch (  ParserException e) {
    Misc.free(rs);
    throw e;
  }
}","private RecordSource filter(QueryModel model,RecordSource rs) throws ParserException {
  try {
    if (model.getWhereClause() == null) {
      return rs;
    }
    RecordMetadata m=rs.getMetadata();
    if (model.getAlias() != null) {
      m.setAlias(model.getAlias().token);
    }
    IntrinsicModel im=queryFilterAnalyser.extract(model,model.getWhereClause(),m,null,getTimestampIndexQuiet(model.getTimestamp(),m));
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      return new NoOpJournalRecordSource(rs);
    }
    if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
      rs=new IntervalRecordSource(rs,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
    }
    if (im.intervalSource != null) {
      rs=new IntervalRecordSource(rs,im.intervalSource);
    }
    if (im.filter != null) {
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,im.filter,m);
      if (vc.isConstant()) {
        if (vc.getBool(null)) {
          return rs;
        }
 else {
          return new NoOpJournalRecordSource(rs);
        }
      }
      return new FilteredRecordSource(rs,vc,im.filter);
    }
 else {
      return rs;
    }
  }
 catch (  ParserException e) {
    Misc.free(rs);
    throw e;
  }
}",0.997609561752988
31103,"@SuppressWarnings(""String_Node_Str"") private RecordSource compileJournal0(QueryModel model,JournalReaderFactory factory) throws ParserException {
  applyLimit(model);
  RecordMetadata metadata=model.getMetadata();
  JournalMetadata journalMetadata;
  if (metadata == null) {
    metadata=model.collectJournalMetadata(factory);
  }
  if (metadata instanceof JournalMetadata) {
    journalMetadata=(JournalMetadata)metadata;
  }
 else {
    throw QueryError.$(0,""String_Node_Str"");
  }
  if (model.getAlias() != null) {
    journalMetadata.setAlias(model.getAlias().token);
  }
 else {
    journalMetadata.setAlias(QueryModel.stripMarker(model.getJournalName().token));
  }
  PartitionSource ps=new JournalPartitionSource(journalMetadata,true);
  RowSource rs=null;
  String latestByCol=null;
  RecordColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.LITERAL) {
      throw QueryError.$(latestByNode.position,""String_Node_Str"");
    }
    int colIndex=journalMetadata.getColumnIndexQuiet(latestByNode.token);
    if (colIndex == -1) {
      throw QueryError.invalidColumn(latestByNode.position,latestByNode.token);
    }
    latestByMetadata=journalMetadata.getColumnQuick(colIndex);
    int type=latestByMetadata.getType();
    if (type != ColumnType.SYMBOL && type != ColumnType.STRING && type != ColumnType.INT && type != ColumnType.LONG) {
      throw QueryError.position(latestByNode.position).$(""String_Node_Str"").$(ColumnType.nameOf(type)).$();
    }
    if (!latestByMetadata.isIndexed()) {
      throw QueryError.position(latestByNode.position).$(""String_Node_Str"").$();
    }
    latestByCol=latestByNode.token;
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=queryFilterAnalyser.extract(where,journalMetadata,latestByCol,getTimestampIndexQuiet(model.getTimestamp(),journalMetadata));
    VirtualColumn filter=im.filter != null ? virtualColumnBuilder.createVirtualColumn(model,im.filter,journalMetadata) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw QueryError.$(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(journalMetadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (journalMetadata.getColumn(im.keyColumn).getType()) {
case ColumnType.SYMBOL:
            rs=buildRowSourceForSym(im);
          break;
case ColumnType.STRING:
        rs=buildRowSourceForStr(im);
      break;
case ColumnType.INT:
    rs=buildRowSourceForInt(im);
  break;
case ColumnType.LONG:
rs=buildRowSourceForLong(im);
break;
default :
break;
}
}
if (filter != null) {
rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
if (im.keyColumn != null && im.keyValuesIsLambda) {
int lambdaColIndex;
RecordSource lambda=compileSourceInternal(factory,im.keyValues.get(0));
RecordMetadata m=lambda.getMetadata();
switch (m.getColumnCount()) {
case 0:
Misc.free(lambda);
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
case 1:
lambdaColIndex=0;
break;
default :
lambdaColIndex=m.getColumnIndexQuiet(latestByCol);
if (lambdaColIndex == -1) {
Misc.free(lambda);
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
break;
}
int lambdaColType=m.getColumn(lambdaColIndex).getType();
mutableSig.setParamCount(2).setName(""String_Node_Str"").paramType(0,latestByMetadata.getType(),true).paramType(1,lambdaColType,false);
LatestByLambdaRowSourceFactory fact=LAMBDA_ROW_SOURCE_FACTORIES.get(mutableSig);
if (fact != null) {
rs=fact.newInstance(latestByCol,lambda,lambdaColIndex,filter);
}
 else {
Misc.free(lambda);
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
}
 else {
switch (latestByMetadata.getType()) {
case ColumnType.SYMBOL:
if (im.keyColumn != null) {
rs=new KvIndexSymListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
rs=new KvIndexSymAllHeadRowSource(latestByCol,filter);
}
break;
case ColumnType.STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
Misc.free(rs);
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
case ColumnType.LONG:
if (im.keyColumn != null) {
rs=new KvIndexLongListHeadRowSource(latestByCol,toLongHashSet(im),filter);
}
 else {
Misc.free(rs);
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
case ColumnType.INT:
if (im.keyColumn != null) {
rs=new KvIndexIntListHeadRowSource(latestByCol,toIntHashSet(im),filter);
}
 else {
Misc.free(rs);
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
default :
break;
}
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.getType()) {
case ColumnType.SYMBOL:
rs=new KvIndexSymAllHeadRowSource(latestByCol,null);
break;
default :
Misc.free(rs);
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
}
if (rs == null && model.getColumns().size() == 1) {
QueryColumn qc=model.getColumns().getQuick(0);
if (""String_Node_Str"".equals(qc.getAst().token) && qc.getAst().paramCount == 0) {
model.getOrderBy().clear();
model.getColumns().clear();
return new CountRecordSource(qc.getAlias() == null ? ""String_Node_Str"" : qc.getAlias(),ps);
}
}
RecordSource recordSource=new JournalRecordSource(ps,rs == null ? new AllRowSource() : rs);
if (QueryModel.hasMarker(model.getJournalName().token)) {
return new NoRowIdRecordSource().of(recordSource);
}
return recordSource;
}","@SuppressWarnings(""String_Node_Str"") private RecordSource compileJournal0(QueryModel model,JournalReaderFactory factory) throws ParserException {
  applyLimit(model);
  RecordMetadata metadata=model.getMetadata();
  JournalMetadata journalMetadata;
  if (metadata == null) {
    metadata=model.collectJournalMetadata(factory);
  }
  if (metadata instanceof JournalMetadata) {
    journalMetadata=(JournalMetadata)metadata;
  }
 else {
    throw QueryError.$(0,""String_Node_Str"");
  }
  if (model.getAlias() != null) {
    journalMetadata.setAlias(model.getAlias().token);
  }
 else {
    journalMetadata.setAlias(QueryModel.stripMarker(model.getJournalName().token));
  }
  PartitionSource ps=new JournalPartitionSource(journalMetadata,true);
  RowSource rs=null;
  String latestByCol=null;
  RecordColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.LITERAL) {
      throw QueryError.$(latestByNode.position,""String_Node_Str"");
    }
    latestByCol=model.translateAlias(latestByNode.token).toString();
    int colIndex=journalMetadata.getColumnIndexQuiet(latestByCol);
    if (colIndex == -1) {
      throw QueryError.invalidColumn(latestByNode.position,latestByNode.token);
    }
    latestByMetadata=journalMetadata.getColumnQuick(colIndex);
    int type=latestByMetadata.getType();
    if (type != ColumnType.SYMBOL && type != ColumnType.STRING && type != ColumnType.INT && type != ColumnType.LONG) {
      throw QueryError.position(latestByNode.position).$(""String_Node_Str"").$(ColumnType.nameOf(type)).$();
    }
    if (!latestByMetadata.isIndexed()) {
      throw QueryError.position(latestByNode.position).$(""String_Node_Str"").$();
    }
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=queryFilterAnalyser.extract(model,where,journalMetadata,latestByCol,getTimestampIndexQuiet(model.getTimestamp(),journalMetadata));
    VirtualColumn filter=im.filter != null ? virtualColumnBuilder.createVirtualColumn(model,im.filter,journalMetadata) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw QueryError.$(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(journalMetadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (journalMetadata.getColumn(im.keyColumn).getType()) {
case ColumnType.SYMBOL:
            rs=buildRowSourceForSym(im);
          break;
case ColumnType.STRING:
        rs=buildRowSourceForStr(im);
      break;
case ColumnType.INT:
    rs=buildRowSourceForInt(im);
  break;
case ColumnType.LONG:
rs=buildRowSourceForLong(im);
break;
default :
break;
}
}
if (filter != null) {
rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
if (im.keyColumn != null && im.keyValuesIsLambda) {
int lambdaColIndex;
RecordSource lambda=compileSourceInternal(factory,im.keyValues.get(0));
RecordMetadata m=lambda.getMetadata();
switch (m.getColumnCount()) {
case 0:
Misc.free(lambda);
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
case 1:
lambdaColIndex=0;
break;
default :
lambdaColIndex=m.getColumnIndexQuiet(latestByCol);
if (lambdaColIndex == -1) {
Misc.free(lambda);
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
break;
}
int lambdaColType=m.getColumn(lambdaColIndex).getType();
mutableSig.setParamCount(2).setName(""String_Node_Str"").paramType(0,latestByMetadata.getType(),true).paramType(1,lambdaColType,false);
LatestByLambdaRowSourceFactory fact=LAMBDA_ROW_SOURCE_FACTORIES.get(mutableSig);
if (fact != null) {
rs=fact.newInstance(latestByCol,lambda,lambdaColIndex,filter);
}
 else {
Misc.free(lambda);
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
}
 else {
switch (latestByMetadata.getType()) {
case ColumnType.SYMBOL:
if (im.keyColumn != null) {
rs=new KvIndexSymListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
rs=new KvIndexSymAllHeadRowSource(latestByCol,filter);
}
break;
case ColumnType.STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
Misc.free(rs);
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
case ColumnType.LONG:
if (im.keyColumn != null) {
rs=new KvIndexLongListHeadRowSource(latestByCol,toLongHashSet(im),filter);
}
 else {
Misc.free(rs);
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
case ColumnType.INT:
if (im.keyColumn != null) {
rs=new KvIndexIntListHeadRowSource(latestByCol,toIntHashSet(im),filter);
}
 else {
Misc.free(rs);
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
default :
break;
}
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.getType()) {
case ColumnType.SYMBOL:
rs=new KvIndexSymAllHeadRowSource(latestByCol,null);
break;
default :
Misc.free(rs);
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
}
if (rs == null && model.getColumns().size() == 1) {
QueryColumn qc=model.getColumns().getQuick(0);
if (""String_Node_Str"".equals(qc.getAst().token) && qc.getAst().paramCount == 0) {
model.getOrderBy().clear();
model.getColumns().clear();
return new CountRecordSource(qc.getAlias() == null ? ""String_Node_Str"" : qc.getAlias(),ps);
}
}
RecordSource recordSource=new JournalRecordSource(ps,rs == null ? new AllRowSource() : rs);
if (QueryModel.hasMarker(model.getJournalName().token)) {
return new NoRowIdRecordSource().of(recordSource);
}
return recordSource;
}",0.9899854627685348
31104,"private boolean analyzeEquals(IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
  checkNodeValid(node);
  return analyzeEquals0(model,node,node.lhs,node.rhs,m) || analyzeEquals0(model,node,node.rhs,node.lhs,m);
}","private boolean analyzeEquals(AliasTranslator translator,IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
  checkNodeValid(node);
  return analyzeEquals0(translator,model,node,node.lhs,node.rhs,m) || analyzeEquals0(translator,model,node,node.rhs,node.lhs,m);
}",0.9073724007561436
31105,"private boolean analyzeIn(IntrinsicModel model,ExprNode node,RecordMetadata metadata) throws ParserException {
  if (node.paramCount < 2) {
    throw QueryError.$(node.position,""String_Node_Str"");
  }
  ExprNode col=node.paramCount < 3 ? node.lhs : node.args.getLast();
  if (col.type != ExprNode.LITERAL) {
    throw QueryError.$(col.position,""String_Node_Str"");
  }
  if (metadata.getColumnIndexQuiet(col.token) == -1) {
    throw QueryError.invalidColumn(col.position,col.token);
  }
  return analyzeInInterval(model,col,node) || analyzeListOfValues(model,col.token,metadata,node) || analyzeInLambda(model,col.token,metadata,node);
}","private boolean analyzeIn(AliasTranslator translator,IntrinsicModel model,ExprNode node,RecordMetadata metadata) throws ParserException {
  if (node.paramCount < 2) {
    throw QueryError.$(node.position,""String_Node_Str"");
  }
  ExprNode col=node.paramCount < 3 ? node.lhs : node.args.getLast();
  if (col.type != ExprNode.LITERAL) {
    throw QueryError.$(col.position,""String_Node_Str"");
  }
  String column=translator.translateAlias(col.token).toString();
  if (metadata.getColumnIndexQuiet(column) == -1) {
    throw QueryError.invalidColumn(col.position,col.token);
  }
  return analyzeInInterval(model,col,node) || analyzeListOfValues(model,column,metadata,node) || analyzeInLambda(model,column,metadata,node);
}",0.9166051660516604
31106,"private boolean removeAndIntrinsics(IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
switch (node.token) {
case ""String_Node_Str"":
    return analyzeIn(model,node,m);
case ""String_Node_Str"":
  return analyzeGreater(model,node,1);
case ""String_Node_Str"":
return analyzeGreater(model,node,0);
case ""String_Node_Str"":
return analyzeLess(model,node,1);
case ""String_Node_Str"":
return analyzeLess(model,node,0);
case ""String_Node_Str"":
return analyzeEquals(model,node,m);
case ""String_Node_Str"":
return analyzeNotEquals(model,node);
default :
return false;
}
}","private boolean removeAndIntrinsics(AliasTranslator translator,IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
switch (node.token) {
case ""String_Node_Str"":
    return analyzeIn(translator,model,node,m);
case ""String_Node_Str"":
  return analyzeGreater(model,node,1);
case ""String_Node_Str"":
return analyzeGreater(model,node,0);
case ""String_Node_Str"":
return analyzeLess(model,node,1);
case ""String_Node_Str"":
return analyzeLess(model,node,0);
case ""String_Node_Str"":
return analyzeEquals(translator,model,node,m);
case ""String_Node_Str"":
return analyzeNotEquals(model,node);
default :
return false;
}
}",0.9597370583401807
31107,"private boolean analyzeEquals0(IntrinsicModel model,ExprNode node,ExprNode a,ExprNode b,RecordMetadata m) throws ParserException {
  if (Chars.equals(a.token,b.token)) {
    node.intrinsicValue=IntrinsicValue.TRUE;
    return true;
  }
  if (a.type == ExprNode.LITERAL && b.type == ExprNode.CONSTANT) {
    if (isTimestamp(a)) {
      boolean reversible=parseInterval(model,quoteEraser.ofQuoted(b.token),b.position);
      node.intrinsicValue=IntrinsicValue.TRUE;
      if (reversible) {
        timestampNodes.add(node);
      }
      return true;
    }
 else {
      if (m.getColumnIndexQuiet(a.token) == -1) {
        throw QueryError.invalidColumn(a.position,a.token);
      }
      RecordColumnMetadata meta=m.getColumn(a.token);
switch (meta.getType()) {
case ColumnType.SYMBOL:
case ColumnType.STRING:
case ColumnType.LONG:
case ColumnType.INT:
        if (meta.isIndexed()) {
          if (preferredKeyColumn != null && !preferredKeyColumn.equals(a.token)) {
            return false;
          }
          boolean newColumn=true;
          if (model.keyColumn != null && (newColumn=!model.keyColumn.equals(a.token)) && meta.getBucketCount() <= m.getColumn(model.keyColumn).getBucketCount()) {
            return false;
          }
          String value=Chars.equals(""String_Node_Str"",b.token) ? null : Chars.stripQuotes(b.token);
          if (newColumn) {
            model.keyColumn=a.token;
            model.keyValues.clear();
            model.keyValuePositions.clear();
            model.keyValues.add(value);
            model.keyValuePositions.add(b.position);
            for (int n=0, k=keyNodes.size(); n < k; n++) {
              keyNodes.getQuick(n).intrinsicValue=IntrinsicValue.UNDEFINED;
            }
            keyNodes.clear();
          }
 else {
            if (model.keyValues.contains(value)) {
              model.keyValues.clear();
              model.keyValuePositions.clear();
              model.keyValues.add(value);
              model.keyValuePositions.add(b.position);
            }
 else {
              model.intrinsicValue=IntrinsicValue.FALSE;
              return false;
            }
          }
          keyNodes.add(node);
          node.intrinsicValue=IntrinsicValue.TRUE;
          return true;
        }
default :
      return false;
  }
}
}
return false;
}","private boolean analyzeEquals0(AliasTranslator translator,IntrinsicModel model,ExprNode node,ExprNode a,ExprNode b,RecordMetadata m) throws ParserException {
  if (Chars.equals(a.token,b.token)) {
    node.intrinsicValue=IntrinsicValue.TRUE;
    return true;
  }
  if (a.type == ExprNode.LITERAL && b.type == ExprNode.CONSTANT) {
    if (isTimestamp(a)) {
      boolean reversible=parseInterval(model,quoteEraser.ofQuoted(b.token),b.position);
      node.intrinsicValue=IntrinsicValue.TRUE;
      if (reversible) {
        timestampNodes.add(node);
      }
      return true;
    }
 else {
      String column=translator.translateAlias(a.token).toString();
      int index=m.getColumnIndexQuiet(column);
      if (index == -1) {
        throw QueryError.invalidColumn(a.position,a.token);
      }
      RecordColumnMetadata meta=m.getColumn(index);
switch (meta.getType()) {
case ColumnType.SYMBOL:
case ColumnType.STRING:
case ColumnType.LONG:
case ColumnType.INT:
        if (meta.isIndexed()) {
          if (preferredKeyColumn != null && !preferredKeyColumn.equals(column)) {
            return false;
          }
          boolean newColumn=true;
          if (model.keyColumn != null && (newColumn=!model.keyColumn.equals(column)) && meta.getBucketCount() <= m.getColumn(model.keyColumn).getBucketCount()) {
            return false;
          }
          String value=Chars.equals(""String_Node_Str"",b.token) ? null : Chars.stripQuotes(b.token);
          if (newColumn) {
            model.keyColumn=column;
            model.keyValues.clear();
            model.keyValuePositions.clear();
            model.keyValues.add(value);
            model.keyValuePositions.add(b.position);
            for (int n=0, k=keyNodes.size(); n < k; n++) {
              keyNodes.getQuick(n).intrinsicValue=IntrinsicValue.UNDEFINED;
            }
            keyNodes.clear();
          }
 else {
            if (model.keyValues.contains(value)) {
              model.keyValues.clear();
              model.keyValuePositions.clear();
              model.keyValues.add(value);
              model.keyValuePositions.add(b.position);
            }
 else {
              model.intrinsicValue=IntrinsicValue.FALSE;
              return false;
            }
          }
          keyNodes.add(node);
          node.intrinsicValue=IntrinsicValue.TRUE;
          return true;
        }
default :
      return false;
  }
}
}
return false;
}",0.9609292502639916
31108,"IntrinsicModel extract(ExprNode node,RecordMetadata m,String preferredKeyColumn,int timestampIndex) throws ParserException {
  this.stack.clear();
  this.keyNodes.clear();
  this.timestampNodes.clear();
  this.timestamp=timestampIndex < 0 ? null : m.getColumnName(timestampIndex);
  this.preferredKeyColumn=preferredKeyColumn;
  IntrinsicModel model=models.next();
  if (removeAndIntrinsics(model,node,m)) {
    return model;
  }
  ExprNode root=node;
  while (!stack.isEmpty() || node != null) {
    if (node != null) {
switch (node.token) {
case ""String_Node_Str"":
        if (!removeAndIntrinsics(model,node.rhs,m)) {
          stack.push(node.rhs);
        }
      node=removeAndIntrinsics(model,node.lhs,m) ? null : node.lhs;
    break;
default :
  node=stack.poll();
break;
}
}
 else {
node=stack.poll();
}
}
model.filter=collapseIntrinsicNodes(root);
return model;
}","IntrinsicModel extract(AliasTranslator translator,ExprNode node,RecordMetadata m,String preferredKeyColumn,int timestampIndex) throws ParserException {
  this.stack.clear();
  this.keyNodes.clear();
  this.timestampNodes.clear();
  this.timestamp=timestampIndex < 0 ? null : m.getColumnName(timestampIndex);
  this.preferredKeyColumn=preferredKeyColumn;
  IntrinsicModel model=models.next();
  if (removeAndIntrinsics(translator,model,node,m)) {
    return model;
  }
  ExprNode root=node;
  while (!stack.isEmpty() || node != null) {
    if (node != null) {
switch (node.token) {
case ""String_Node_Str"":
        if (!removeAndIntrinsics(translator,model,node.rhs,m)) {
          stack.push(node.rhs);
        }
      node=removeAndIntrinsics(translator,model,node.lhs,m) ? null : node.lhs;
    break;
default :
  node=stack.poll();
break;
}
}
 else {
node=stack.poll();
}
}
model.filter=collapseIntrinsicNodes(root);
return model;
}",0.9667774086378738
31109,"private IntrinsicModel modelOf(CharSequence seq,String preferredColumn) throws ParserException {
  lexer.setContent(seq);
  p.parseExpr(lexer,ast);
  return e.extract(ast.poll(),w.getMetadata(),preferredColumn,w.getMetadata().getTimestampIndex());
}","private IntrinsicModel modelOf(CharSequence seq,String preferredColumn) throws ParserException {
  lexer.setContent(seq);
  p.parseExpr(lexer,ast);
  return e.extract(new AliasTranslator(){
    @Override public CharSequence translateAlias(    CharSequence column){
      return column;
    }
  }
,ast.poll(),w.getMetadata(),preferredColumn,w.getMetadata().getTimestampIndex());
}",0.7579617834394905
31110,"private void applyKeyExclusions(AliasTranslator translator,IntrinsicModel model){
  if (model.keyColumn != null && keyExclNodes.size() > 0) {
    for (int i=0, n=keyExclNodes.size(); i < n; i++) {
      ExprNode node=keyExclNodes.getQuick(i);
      ExprNode col;
      ExprNode val;
      if (node.lhs.type == ExprNode.LITERAL) {
        col=node.lhs;
        val=node.rhs;
      }
 else {
        col=node.rhs;
        val=node.lhs;
      }
      final String column=translator.translateAlias(col.token).toString();
      if (column.equals(model.keyColumn)) {
        String value=Chars.equals(""String_Node_Str"",val.token) ? null : Chars.stripQuotes(val.token);
        int index=model.keyValues.remove(value);
        if (index > -1) {
          model.keyValuePositions.removeIndex(index);
        }
        node.intrinsicValue=IntrinsicValue.TRUE;
      }
    }
  }
  keyExclNodes.clear();
}","private void applyKeyExclusions(AliasTranslator translator,IntrinsicModel model){
  if (model.keyColumn != null && keyExclNodes.size() > 0) {
    for (int i=0, n=keyExclNodes.size(); i < n; i++) {
      ExprNode node=keyExclNodes.getQuick(i);
      ExprNode col;
      ExprNode val;
      if (node.lhs.type == ExprNode.LITERAL) {
        col=node.lhs;
        val=node.rhs;
      }
 else {
        col=node.rhs;
        val=node.lhs;
      }
      final String column=translator.translateAlias(col.token).toString();
      if (column.equals(model.keyColumn)) {
        String value=Chars.equals(""String_Node_Str"",val.token) ? null : Chars.stripQuotes(val.token);
        int index=model.keyValues.remove(value);
        if (index > -1) {
          model.keyValuePositions.removeIndex(index);
        }
        node.intrinsicValue=IntrinsicValue.TRUE;
        if (model.keyValues.size() == 0) {
          model.intrinsicValue=IntrinsicValue.FALSE;
          break;
        }
      }
    }
  }
  keyExclNodes.clear();
}",0.93563579277865
31111,"@Test public void testOr() throws Exception {
  modelOf(""String_Node_Str"");
}","@Test public void testOr() throws Exception {
  IntrinsicModel m=modelOf(""String_Node_Str"");
  Assert.assertEquals(IntrinsicValue.UNDEFINED,m.intrinsicValue);
  assertFilter(m,""String_Node_Str"");
}",0.5620437956204379
31112,"public static VirtualColumnFactory<Function> find(Signature sig,ObjList<VirtualColumn> args){
  final VirtualColumn vc;
  if (sig.paramCount == 2 && (vc=args.getQuick(1)).isConstant()) {
switch (sig.paramTypes.getQuick(1)) {
case ColumnType.DOUBLE:
      double d=vc.getDouble(null);
    if (d != d) {
      int columnType=sig.paramTypes.getQuick(0);
      if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
          return DoubleEqualsNanOperator.FACTORY;
case ColumnType.INT:
        return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
      return LongEqualsNaNOperator.FACTORY;
default :
    break;
}
}
 else if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (columnType) {
case ColumnType.DOUBLE:
  return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
case ColumnType.STRING:
if (vc.getFlyweightStr(null) == null) {
int columnType=sig.paramTypes.getQuick(0);
if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongEqualsNaNOperator.FACTORY;
default :
break;
}
}
 else if (Chars.equals(sig.name,""String_Node_Str"")) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrNotEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
default :
break;
}
}
VirtualColumnFactory<Function> factory=factories.get(sig);
if (factory != null) {
return factory;
}
 else {
if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (sig.paramTypes.getQuick(0)) {
case ColumnType.STRING:
return StrInOperator.FACTORY;
case ColumnType.SYMBOL:
return SymInOperator.FACTORY;
case ColumnType.INT:
case ColumnType.BYTE:
case ColumnType.SHORT:
return IntInOperator.FACTORY;
case ColumnType.LONG:
return LongInOperator.FACTORY;
default :
break;
}
}
}
return null;
}","public static VirtualColumnFactory<Function> find(Signature sig,ObjList<VirtualColumn> args){
  final VirtualColumn vc;
  if (sig.paramCount == 2 && (vc=args.getQuick(1)).isConstant()) {
switch (sig.paramTypes.getQuick(1)) {
case ColumnType.DOUBLE:
      double d=vc.getDouble(null);
    if (d != d) {
      int columnType=sig.paramTypes.getQuick(0);
      if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
          return DoubleEqualsNanOperator.FACTORY;
case ColumnType.INT:
        return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
      return LongEqualsNaNOperator.FACTORY;
default :
    break;
}
}
 else if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (columnType) {
case ColumnType.DOUBLE:
  return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
case ColumnType.STRING:
if (vc.getFlyweightStr(null) == null) {
int columnType=sig.paramTypes.getQuick(0);
if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongEqualsNaNOperator.FACTORY;
default :
break;
}
}
 else if (Chars.equals(sig.name,""String_Node_Str"")) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrNotEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
default :
break;
}
}
VirtualColumnFactory<Function> factory=factories.get(sig);
if (factory != null) {
return factory;
}
 else {
if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (sig.paramTypes.getQuick(0)) {
case ColumnType.STRING:
return StrInOperator.FACTORY;
case ColumnType.SYMBOL:
return SymInOperator.FACTORY;
case ColumnType.INT:
case ColumnType.BYTE:
case ColumnType.SHORT:
return IntInOperator.FACTORY;
case ColumnType.LONG:
return LongInOperator.FACTORY;
case ColumnType.DATE:
if (sig.paramCount < 3) {
return null;
}
return DateInOperator.FACTORY;
default :
break;
}
}
}
return null;
}",0.9802271771140092
31113,"@Override public void prepareFor(Record record){
  DirectMapValues values=MapUtils.getMapValues(map,record,partitionBy);
  final CharSequence str=valueColumn.getFlyweightStr(record);
  if (values.isNew()) {
    nextNull=true;
    store(str,values);
  }
 else {
    nextNull=false;
    long ptr=values.getLong(0);
    int len=values.getInt(1);
    copyToBuffer(ptr);
    if (toByteLen(str.length()) > len) {
      Unsafe.free(ptr,len);
      store(str,values);
    }
 else {
      Chars.put(ptr,str);
    }
  }
}","@Override public void prepareFor(Record record){
  DirectMapValues values=MapUtils.getMapValues(map,record,partitionBy);
  final CharSequence str=valueColumn.getFlyweightStr(record);
  if (values.isNew()) {
    nextNull=true;
    if (str == null) {
      allocAndStoreNull(values);
    }
 else {
      allocAndStore(str,values);
    }
  }
 else {
    nextNull=false;
    long ptr=values.getLong(0);
    int len=values.getInt(1);
    copyToBuffer(ptr);
    if (str == null) {
      Unsafe.getUnsafe().putInt(ptr,VariableColumn.NULL_LEN);
    }
 else     if (toByteLen(str.length()) > len) {
      Unsafe.free(ptr,len);
      allocAndStore(str,values);
    }
 else {
      Chars.put(ptr,str);
    }
  }
}",0.8392415498763397
31114,"private void copyToBuffer(long ptr){
  int l=toByteLen(Unsafe.getUnsafe().getInt(ptr));
  if (l > bufPtrLen) {
    if (bufPtr != 0) {
      Unsafe.free(bufPtr,bufPtrLen);
    }
    bufPtrLen=Numbers.ceilPow2(l);
    bufPtr=Unsafe.malloc(bufPtrLen);
    cs.of(bufPtr + 4,bufPtr + bufPtrLen);
  }
 else {
    cs.of(bufPtr + 4,bufPtr + l);
  }
  Unsafe.getUnsafe().copyMemory(ptr,bufPtr,l);
}","private void copyToBuffer(long ptr){
  int l=Unsafe.getUnsafe().getInt(ptr);
  if (l == VariableColumn.NULL_LEN) {
    nextNull=true;
    return;
  }
  l=toByteLen(l);
  if (l > bufPtrLen) {
    if (bufPtr != 0) {
      Unsafe.free(bufPtr,bufPtrLen);
    }
    bufPtrLen=Numbers.ceilPow2(l);
    bufPtr=Unsafe.malloc(bufPtrLen);
    cs.of(bufPtr + 4,bufPtr + bufPtrLen);
  }
 else {
    cs.of(bufPtr + 4,bufPtr + l);
  }
  Unsafe.getUnsafe().copyMemory(ptr,bufPtr,l);
}",0.8368298368298368
31115,"@Test @Ignore public void testPrevWithNull() throws Exception {
  assertThat(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testPrevWithNull() throws Exception {
  assertThat(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"");
}",0.3679727427597956
31116,"public static VirtualColumnFactory<Function> find(Signature sig,ObjList<VirtualColumn> args){
  final VirtualColumn vc;
  if (sig.paramCount == 2 && (vc=args.getQuick(1)).isConstant()) {
switch (sig.paramTypes.getQuick(1)) {
case ColumnType.DOUBLE:
      double d=vc.getDouble(null);
    if (d != d) {
      int columnType=sig.paramTypes.getQuick(0);
      if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
          return DoubleEqualsNanOperator.FACTORY;
case ColumnType.INT:
        return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
      return LongEqualsNaNOperator.FACTORY;
default :
    break;
}
}
 else if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (columnType) {
case ColumnType.DOUBLE:
  return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
case ColumnType.STRING:
if (vc.getFlyweightStr(null) == null) {
int columnType=sig.paramTypes.getQuick(0);
if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongEqualsNaNOperator.FACTORY;
default :
break;
}
}
 else if (Chars.equals(sig.name,""String_Node_Str"")) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrNotEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
default :
break;
}
}
VirtualColumnFactory<Function> factory=factories.get(sig);
if (factory != null) {
return factory;
}
 else {
if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (sig.paramTypes.getQuick(0)) {
case ColumnType.STRING:
return StrInOperator.FACTORY;
case ColumnType.SYMBOL:
return SymInOperator.FACTORY;
case ColumnType.INT:
case ColumnType.BYTE:
case ColumnType.SHORT:
return IntInOperator.FACTORY;
case ColumnType.LONG:
return LongInOperator.FACTORY;
case ColumnType.DATE:
if (sig.paramCount < 3) {
return null;
}
return DateInOperator.FACTORY;
default :
break;
}
}
}
return null;
}","public static VirtualColumnFactory<Function> find(Signature sig,ObjList<VirtualColumn> args){
  final VirtualColumn vc;
  if (sig.paramCount == 2 && (vc=args.getQuick(1)).isConstant()) {
switch (sig.paramTypes.getQuick(1)) {
case ColumnType.DOUBLE:
      double d=vc.getDouble(null);
    if (d != d) {
      int columnType=sig.paramTypes.getQuick(0);
      if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
          return DoubleEqualNanOperator.FACTORY;
case ColumnType.INT:
        return IntEqualNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
      return LongEqualNaNOperator.FACTORY;
default :
    break;
}
}
 else if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (columnType) {
case ColumnType.DOUBLE:
  return DoubleNotEqualNanOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualNaNOperator.FACTORY;
default :
break;
}
}
}
break;
case ColumnType.STRING:
if (vc.getFlyweightStr(null) == null) {
int columnType=sig.paramTypes.getQuick(0);
if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleEqualNanOperator.FACTORY;
case ColumnType.STRING:
return StrEqualNullOperator.FACTORY;
case ColumnType.INT:
return IntEqualNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongEqualNaNOperator.FACTORY;
default :
break;
}
}
 else if (Chars.equals(sig.name,""String_Node_Str"")) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleNotEqualNanOperator.FACTORY;
case ColumnType.STRING:
return StrNotEqualNullOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualNaNOperator.FACTORY;
default :
break;
}
}
}
break;
default :
break;
}
}
VirtualColumnFactory<Function> factory=factories.get(sig);
if (factory != null) {
return factory;
}
 else {
if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (sig.paramTypes.getQuick(0)) {
case ColumnType.STRING:
return StrInOperator.FACTORY;
case ColumnType.SYMBOL:
return SymInOperator.FACTORY;
case ColumnType.INT:
case ColumnType.BYTE:
case ColumnType.SHORT:
return IntInOperator.FACTORY;
case ColumnType.LONG:
return LongInOperator.FACTORY;
case ColumnType.DATE:
if (sig.paramCount < 3) {
return null;
}
return DateInOperator.FACTORY;
default :
break;
}
}
}
return null;
}",0.9971038477451386
31117,"public void subtractIntervals(CharSequence seq,int lo,int lim,int position) throws ParserException {
  LongList temp=shuffleTemp();
  temp.clear();
  IntervalCompiler.parseIntervalEx(seq,lo,lim,position,temp);
  final LongList dest=shuffleDest();
  dest.clear();
  if (this.intervals == null) {
    IntervalCompiler.subtract(INFINITE_INTERVAL,temp,dest);
  }
 else {
    IntervalCompiler.subtract(temp,this.intervals,dest);
  }
  this.intervals=dest;
  if (this.intervals.size() == 0) {
    intrinsicValue=IntrinsicValue.FALSE;
  }
}","private void subtractIntervals(LongList temp){
  final LongList dest=shuffleDest();
  dest.clear();
  if (this.intervals == null) {
    IntervalCompiler.subtract(INFINITE_INTERVAL,temp,dest);
  }
 else {
    IntervalCompiler.subtract(temp,this.intervals,dest);
  }
  this.intervals=dest;
  if (this.intervals.size() == 0) {
    intrinsicValue=IntrinsicValue.FALSE;
  }
}",0.7264673311184939
31118,"private RecordSource compile(QueryModel model,JournalReaderFactory factory) throws ParserException {
  optimiseOrderBy(model,ORDER_BY_UNKNOWN);
  optimiseSubQueries(model,factory);
  createOrderHash(model);
  return compileNoOptimise(model,factory);
}","private RecordSource compile(QueryModel model,JournalReaderFactory factory) throws ParserException {
  optimiseInvertedBooleans(model);
  optimiseOrderBy(model,ORDER_BY_UNKNOWN);
  optimiseSubQueries(model,factory);
  createOrderHash(model);
  return compileNoOptimise(model,factory);
}",0.9348230912476724
31119,"private boolean analyzeGreater(IntrinsicModel model,ExprNode node,int inc) throws ParserException {
  checkNodeValid(node);
  if (Chars.equals(node.lhs.token,node.rhs.token)) {
    model.intrinsicValue=IntrinsicValue.FALSE;
    return false;
  }
  if (timestamp == null) {
    return false;
  }
  if (node.lhs.type == ExprNode.LITERAL && node.lhs.token.equals(timestamp)) {
    if (node.rhs.type != ExprNode.CONSTANT) {
      return false;
    }
    try {
      model.intersectIntervals(Dates.tryParse(quoteEraser.ofQuoted(node.rhs.token)) + inc,Long.MAX_VALUE);
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.rhs.position,""String_Node_Str"");
    }
  }
  if (node.rhs.type == ExprNode.LITERAL && node.rhs.token.equals(timestamp)) {
    if (node.lhs.type != ExprNode.CONSTANT) {
      return false;
    }
    try {
      model.intersectIntervals(Long.MIN_VALUE,Dates.tryParse(quoteEraser.ofQuoted(node.lhs.token)) - inc);
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.lhs.position,""String_Node_Str"");
    }
  }
  return false;
}","private boolean analyzeGreater(IntrinsicModel model,ExprNode node,int increment) throws ParserException {
  checkNodeValid(node);
  if (Chars.equals(node.lhs.token,node.rhs.token)) {
    model.intrinsicValue=IntrinsicValue.FALSE;
    return false;
  }
  if (timestamp == null) {
    return false;
  }
  if (node.lhs.type == ExprNode.LITERAL && node.lhs.token.equals(timestamp)) {
    if (node.rhs.type != ExprNode.CONSTANT) {
      return false;
    }
    try {
      model.intersectIntervals(Dates.tryParse(quoteEraser.ofQuoted(node.rhs.token)) + increment,Long.MAX_VALUE);
      node.intrinsicValue=IntrinsicValue.TRUE;
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.rhs.position,""String_Node_Str"");
    }
  }
  if (node.rhs.type == ExprNode.LITERAL && node.rhs.token.equals(timestamp)) {
    if (node.lhs.type != ExprNode.CONSTANT) {
      return false;
    }
    try {
      model.intersectIntervals(Long.MIN_VALUE,Dates.tryParse(quoteEraser.ofQuoted(node.lhs.token)) - increment);
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.lhs.position,""String_Node_Str"");
    }
  }
  return false;
}",0.9716033202271734
31120,"private boolean removeAndIntrinsics(AliasTranslator translator,IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
switch (node.token) {
case ""String_Node_Str"":
    return analyzeIn(translator,model,node,m);
case ""String_Node_Str"":
  return analyzeGreater(model,node,1);
case ""String_Node_Str"":
return analyzeGreater(model,node,0);
case ""String_Node_Str"":
return analyzeLess(model,node,1);
case ""String_Node_Str"":
return analyzeLess(model,node,0);
case ""String_Node_Str"":
return analyzeEquals(translator,model,node,m);
case ""String_Node_Str"":
return analyzeNotEquals(translator,model,node,m);
default :
return false;
}
}","private boolean removeAndIntrinsics(AliasTranslator translator,IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
switch (node.token) {
case ""String_Node_Str"":
    return analyzeIn(translator,model,node,m);
case ""String_Node_Str"":
  return analyzeGreater(model,node,1);
case ""String_Node_Str"":
return analyzeGreater(model,node,0);
case ""String_Node_Str"":
return analyzeLess(model,node,1);
case ""String_Node_Str"":
return analyzeLess(model,node,0);
case ""String_Node_Str"":
return analyzeEquals(translator,model,node,m);
case ""String_Node_Str"":
return analyzeNotEquals(translator,model,node,m);
case ""String_Node_Str"":
return ""String_Node_Str"".equals(node.rhs.token) && analyzeNotIn(translator,model,node,m);
default :
return false;
}
}",0.918918918918919
31121,"private VirtualColumn processConstantExpression(Function f){
switch (f.getType()) {
case ColumnType.INT:
    return new IntConstant(f.getInt(null),f.getPosition());
case ColumnType.DOUBLE:
  return new DoubleConstant(f.getDouble(null),f.getPosition());
case ColumnType.BOOLEAN:
return new BooleanConstant(f.getBool(null),f.getPosition());
case ColumnType.STRING:
CharSequence cs=f.getStr(null);
return cs == null ? new NullConstant(f.getPosition()) : new StrConstant(cs.toString(),f.getPosition());
case ColumnType.LONG:
return new LongConstant(f.getLong(null),f.getPosition());
default :
return f;
}
}","private VirtualColumn processConstantExpression(Function f){
switch (f.getType()) {
case ColumnType.INT:
    return new IntConstant(f.getInt(null),f.getPosition());
case ColumnType.DOUBLE:
  return new DoubleConstant(f.getDouble(null),f.getPosition());
case ColumnType.FLOAT:
return new FloatConstant(f.getFloat(null),f.getPosition());
case ColumnType.BOOLEAN:
return new BooleanConstant(f.getBool(null),f.getPosition());
case ColumnType.STRING:
CharSequence cs=f.getStr(null);
return cs == null ? new NullConstant(f.getPosition()) : new StrConstant(cs.toString(),f.getPosition());
case ColumnType.LONG:
return new LongConstant(f.getLong(null),f.getPosition());
case ColumnType.DATE:
return new DateConstant(f.getDate(null),f.getPosition());
default :
return f;
}
}",0.880760790051207
31122,"private static void addMonthInterval(int period,int count,LongList out){
  int k=out.size();
  long lo=out.getQuick(k - 2);
  long hi=out.getQuick(k - 1);
  for (int i=0, n=count - 1; i < n; i++) {
    lo=Dates.addMonths(lo,period);
    hi=Dates.addMonths(hi,period);
    out.add(lo);
    out.add(hi);
  }
}","private static void addMonthInterval(int period,int count,LongList out){
  int k=out.size();
  long lo=out.getQuick(k - 2);
  long hi=out.getQuick(k - 1);
  for (int i=0, n=count - 1; i < n; i++) {
    lo=Dates.addMonths(lo,period);
    hi=Dates.addMonths(hi,period);
    append(out,lo,hi);
  }
}",0.9353233830845772
31123,"private static void parseRange(CharSequence seq,int lo,int p,int lim,int position,LongList out) throws ParserException {
  char type=seq.charAt(lim - 1);
  int period;
  try {
    period=Numbers.parseInt(seq,p + 1,lim - 1);
  }
 catch (  NumericException e) {
    throw QueryError.$(position,""String_Node_Str"");
  }
  try {
    Dates.parseInterval(seq,lo,p,out);
    int n=out.size();
    out.setQuick(n - 1,Dates.addPeriod(out.getQuick(n - 1),type,period));
    return;
  }
 catch (  NumericException ignore) {
  }
  try {
    long loMillis=Dates.tryParse(seq,lo,p - 1);
    out.add(loMillis);
    out.add(Dates.addPeriod(loMillis,type,period));
  }
 catch (  NumericException e) {
    throw QueryError.$(position,""String_Node_Str"");
  }
}","private static void parseRange(CharSequence seq,int lo,int p,int lim,int position,LongList out) throws ParserException {
  char type=seq.charAt(lim - 1);
  int period;
  try {
    period=Numbers.parseInt(seq,p + 1,lim - 1);
  }
 catch (  NumericException e) {
    throw QueryError.$(position,""String_Node_Str"");
  }
  try {
    Dates.parseInterval(seq,lo,p,out);
    int n=out.size();
    out.setQuick(n - 1,Dates.addPeriod(out.getQuick(n - 1),type,period));
    return;
  }
 catch (  NumericException ignore) {
  }
  try {
    long loMillis=Dates.tryParse(seq,lo,p - 1);
    append(out,loMillis,Dates.addPeriod(loMillis,type,period));
  }
 catch (  NumericException e) {
    throw QueryError.$(position,""String_Node_Str"");
  }
}",0.9761742682096664
31124,"/** 
 * Performs set subtraction on two lists of intervals. Subtracts b from a, e.g. result = a - b. Both sets are expected to be ordered chronologically.
 * @param a list of intervals
 * @param b list of intervals
 * @return result of subtraction
 */
public static ObjList<Interval> subtract(ObjList<Interval> a,ObjList<Interval> b){
  ObjList<Interval> out=new ObjList<>();
  int indexA=0;
  int indexB=0;
  final int sizeA=a.size();
  final int sizeB=b.size();
  Interval intervalA=null;
  Interval intervalB=null;
  while (true) {
    if (intervalA == null && indexA < sizeA) {
      intervalA=a.getQuick(indexA++);
    }
    if (intervalB == null && indexB < sizeB) {
      intervalB=b.getQuick(indexB++);
    }
    if (intervalA != null && intervalB == null) {
      append(out,intervalA);
      intervalA=null;
      continue;
    }
    if (intervalA == null) {
      break;
    }
    if (intervalA.getHi() < intervalB.getLo()) {
      append(out,intervalA);
      intervalA=null;
    }
 else     if (intervalA.getLo() > intervalB.getHi()) {
      intervalB=null;
    }
 else {
      if (intervalA.getLo() < intervalB.getLo()) {
        append(out,new Interval(intervalA.getLo(),intervalB.getLo()));
      }
      if (intervalA.getHi() > intervalB.getHi()) {
        intervalA=new Interval(intervalB.getHi(),intervalA.getHi());
        intervalB=null;
      }
 else {
        intervalA=null;
      }
    }
  }
  return out;
}","/** 
 * Performs set subtraction on two lists of intervals. Subtracts b from a, e.g. result = a - b. Both sets are expected to be ordered chronologically.
 * @param a   list of intervals
 * @param b   list of intervals
 * @param out result of subtraction
 */
public static void subtract(LongList a,LongList b,LongList out){
  final int sizeA=a.size() / 2;
  final int sizeB=b.size() / 2;
  int intervalA=0;
  int intervalB=0;
  boolean fetchA=true;
  if (intervalA < sizeA) {
    long aLo=getIntervalLo(a,intervalA);
    long aHi=getIntervalHi(a,intervalA);
    while (intervalA < sizeA) {
      if (fetchA) {
        aLo=getIntervalLo(a,intervalA);
        aHi=getIntervalHi(a,intervalA);
        fetchA=true;
      }
      if (intervalB == sizeB) {
        append(out,aLo,aHi);
        intervalA++;
        continue;
      }
      long bLo=getIntervalLo(b,intervalB);
      long bHi=getIntervalHi(b,intervalB);
      if (aHi < bLo) {
        append(out,aLo,aHi);
        intervalA++;
      }
 else       if (aLo > bHi) {
        intervalB++;
      }
 else {
        if (aLo < bLo) {
          append(out,aLo,bLo - 1);
        }
        if (aHi > bHi) {
          aLo=bHi + 1;
          fetchA=false;
          intervalB++;
        }
 else {
          intervalA++;
        }
      }
    }
  }
}",0.308030803080308
31125,"private static void addMillisInterval(long period,int count,LongList out){
  int k=out.size();
  long lo=out.getQuick(k - 2);
  long hi=out.getQuick(k - 1);
  for (int i=0, n=count - 1; i < n; i++) {
    lo+=period;
    hi+=period;
    out.add(lo);
    out.add(hi);
  }
}","private static void addMillisInterval(long period,int count,LongList out){
  int k=out.size();
  long lo=out.getQuick(k - 2);
  long hi=out.getQuick(k - 1);
  for (int i=0, n=count - 1; i < n; i++) {
    lo+=period;
    hi+=period;
    append(out,lo,hi);
  }
}",0.9265536723163842
31126,"private static void addYearIntervals(int period,int count,LongList out){
  int k=out.size();
  long lo=out.getQuick(k - 2);
  long hi=out.getQuick(k - 1);
  for (int i=0, n=count - 1; i < n; i++) {
    lo=Dates.addYear(lo,period);
    hi=Dates.addYear(hi,period);
    out.add(lo);
    out.add(hi);
  }
}","private static void addYearIntervals(int period,int count,LongList out){
  int k=out.size();
  long lo=out.getQuick(k - 2);
  long hi=out.getQuick(k - 1);
  for (int i=0, n=count - 1; i < n; i++) {
    lo=Dates.addYear(lo,period);
    hi=Dates.addYear(hi,period);
    append(out,lo,hi);
  }
}",0.934453781512605
31127,"public static void parseIntervalEx(CharSequence seq,int lo,int lim,int position,LongList out) throws ParserException {
  int pos[]=new int[3];
  int p=-1;
  for (int i=lo; i < lim; i++) {
    if (seq.charAt(i) == ';') {
      if (p > 1) {
        throw QueryError.$(position,""String_Node_Str"");
      }
      pos[++p]=i;
    }
  }
switch (p) {
case -1:
    try {
      Dates.parseInterval(seq,lo,lim,out);
      break;
    }
 catch (    NumericException ignore) {
    }
  try {
    long millis=Dates.tryParse(seq,lo,lim);
    out.add(millis);
    out.add(millis);
    break;
  }
 catch (  NumericException e) {
    throw QueryError.$(position,""String_Node_Str"");
  }
case 0:
parseRange(seq,lo,pos[0],lim,position,out);
break;
case 2:
int period;
try {
period=Numbers.parseInt(seq,pos[1] + 1,pos[2] - 1);
}
 catch (NumericException e) {
throw QueryError.$(position,""String_Node_Str"");
}
int count;
try {
count=Numbers.parseInt(seq,pos[2] + 1,seq.length());
}
 catch (NumericException e) {
throw QueryError.$(position,""String_Node_Str"");
}
parseRange(seq,lo,pos[0],pos[1],position,out);
char type=seq.charAt(pos[2] - 1);
switch (type) {
case 'y':
addYearIntervals(period,count,out);
break;
case 'M':
addMonthInterval(period,count,out);
break;
case 'h':
addMillisInterval(period * Dates.HOUR_MILLIS,count,out);
break;
case 'm':
addMillisInterval(period * Dates.MINUTE_MILLIS,count,out);
break;
case 's':
addMillisInterval(period * Dates.SECOND_MILLIS,count,out);
break;
case 'd':
addMillisInterval(period * Dates.DAY_MILLIS,count,out);
break;
default :
throw QueryError.$(position,""String_Node_Str"" + type + ""String_Node_Str""+ (p - 1));
}
break;
default :
throw QueryError.$(position,""String_Node_Str"");
}
}","public static void parseIntervalEx(CharSequence seq,int lo,int lim,int position,LongList out) throws ParserException {
  int pos[]=new int[3];
  int p=-1;
  for (int i=lo; i < lim; i++) {
    if (seq.charAt(i) == ';') {
      if (p > 1) {
        throw QueryError.$(position,""String_Node_Str"");
      }
      pos[++p]=i;
    }
  }
switch (p) {
case -1:
    try {
      Dates.parseInterval(seq,lo,lim,out);
      break;
    }
 catch (    NumericException ignore) {
    }
  try {
    long millis=Dates.tryParse(seq,lo,lim);
    append(out,millis,millis);
    break;
  }
 catch (  NumericException e) {
    throw QueryError.$(position,""String_Node_Str"");
  }
case 0:
parseRange(seq,lo,pos[0],lim,position,out);
break;
case 2:
int period;
try {
period=Numbers.parseInt(seq,pos[1] + 1,pos[2] - 1);
}
 catch (NumericException e) {
throw QueryError.$(position,""String_Node_Str"");
}
int count;
try {
count=Numbers.parseInt(seq,pos[2] + 1,seq.length());
}
 catch (NumericException e) {
throw QueryError.$(position,""String_Node_Str"");
}
parseRange(seq,lo,pos[0],pos[1],position,out);
char type=seq.charAt(pos[2] - 1);
switch (type) {
case 'y':
addYearIntervals(period,count,out);
break;
case 'M':
addMonthInterval(period,count,out);
break;
case 'h':
addMillisInterval(period * Dates.HOUR_MILLIS,count,out);
break;
case 'm':
addMillisInterval(period * Dates.MINUTE_MILLIS,count,out);
break;
case 's':
addMillisInterval(period * Dates.SECOND_MILLIS,count,out);
break;
case 'd':
addMillisInterval(period * Dates.DAY_MILLIS,count,out);
break;
default :
throw QueryError.$(position,""String_Node_Str"" + type + ""String_Node_Str""+ (p - 1));
}
break;
default :
throw QueryError.$(position,""String_Node_Str"");
}
}",0.9896967912864292
31128,"private CharSequence getSymbol(char c){
  List<CharSequence> l=symbols.get(c);
  if (l == null) {
    return null;
  }
  for (int i=0, sz=l.size(); i < sz; i++) {
    CharSequence txt=l.get(i);
    boolean match=(txt.length() - 2) < (_len - _pos);
    if (match) {
      for (int k=1; k < txt.length(); k++) {
        if (content.charAt(_pos + (k - 1)) != txt.charAt(k)) {
          match=false;
          break;
        }
      }
    }
    if (match) {
      return txt;
    }
  }
  return null;
}","private CharSequence getSymbol(char c){
  List<CharSequence> l=symbols.get(c);
  if (l == null) {
    return null;
  }
  for (int i=0, sz=l.size(); i < sz; i++) {
    CharSequence txt=l.get(i);
    int n=txt.length();
    boolean match=(n - 2) < (_len - _pos);
    if (match) {
      for (int k=1; k < n; k++) {
        if (content.charAt(_pos + (k - 1)) != txt.charAt(k)) {
          match=false;
          break;
        }
      }
    }
    if (match) {
      return txt;
    }
  }
  return null;
}",0.9498997995991983
31129,"public boolean add(CharSequence key){
  if (insertKey(key)) {
    list.add(key);
    if (free == 0) {
      rehash();
    }
    return true;
  }
  return false;
}","public boolean add(CharSequence key){
  if (key == null) {
    if (hasNull) {
      return false;
    }
    hasNull=true;
    list.add(null);
    free--;
    return true;
  }
  if (insertKey(key)) {
    if (free == 0) {
      resize();
    }
    return true;
  }
  return false;
}",0.4117647058823529
31130,"public final void clear(){
  free=capacity;
  Arrays.fill(keys,null);
  list.clear();
}","public final void clear(){
  free=capacity;
  Arrays.fill(keys,null);
  list.clear();
  hasNull=false;
}",0.9109947643979056
31131,"@SuppressWarnings({""String_Node_Str""}) private void rehash(){
  int newCapacity=keys.length << 1;
  mask=newCapacity - 1;
  free=capacity=(int)(newCapacity * loadFactor);
  CharSequence[] oldKeys=keys;
  this.keys=new CharSequence[newCapacity];
  Arrays.fill(keys,null);
  for (int i=oldKeys.length; i-- > 0; ) {
    if (Unsafe.arrayGet(oldKeys,i) != null) {
      insertKey(Unsafe.arrayGet(oldKeys,i));
    }
  }
}","private void rehash(){
}",0.1093394077448747
31132,"public boolean contains(CharSequence value){
  int index=idx(value);
  return Unsafe.arrayGet(keys,index) != null && (value == Unsafe.arrayGet(keys,index) || Chars.equals(value,Unsafe.arrayGet(keys,index)) || probeContains(value,index));
}","public boolean contains(CharSequence key){
  if (key == null) {
    return hasNull;
  }
  int index=idx(key);
  return Unsafe.arrayGet(keys,index) != null && (eq(index,key) || probe(key,index) > -1);
}",0.4818181818181818
31133,"private boolean insertKey(CharSequence key){
  int index=idx(key);
  if (Unsafe.arrayGet(keys,index) == null) {
    Unsafe.arrayPut(keys,index,key);
    free--;
    return true;
  }
 else {
    return !(key == Unsafe.arrayGet(keys,index) || Chars.equals(key,Unsafe.arrayGet(keys,index))) && probeInsert(key,index);
  }
}","private boolean insertKey(CharSequence key){
  int index=idx(key);
  if (Unsafe.arrayGet(keys,index) == null) {
    String sk=key.toString();
    Unsafe.arrayPut(keys,index,sk);
    list.add(sk);
    free--;
    return true;
  }
 else {
    if (eq(index,key)) {
      return false;
    }
    int next=probe(key,index);
    if (next < 0) {
      String sk=key.toString();
      Unsafe.arrayPut(keys,-next - 1,sk);
      list.add(sk);
      free--;
      return true;
    }
    return false;
  }
}",0.498159509202454
31134,"private static long parseDateTime(CharSequence seq,int lo,int lim) throws NumericException {
  int p=lo;
  if (p + 4 > lim) {
    throw NumericException.INSTANCE;
  }
  int year=Numbers.parseInt(seq,p,p+=4);
  checkChar(seq,p++,lim,'-');
  if (p + 2 > lim) {
    throw NumericException.INSTANCE;
  }
  int month=Numbers.parseInt(seq,p,p+=2);
  checkRange(month,1,12);
  checkChar(seq,p++,lim,'-');
  if (p + 2 > lim) {
    throw NumericException.INSTANCE;
  }
  boolean l=isLeapYear(year);
  int day=Numbers.parseInt(seq,p,p+=2);
  checkRange(day,1,getDaysPerMonth(month,l));
  checkChar(seq,p++,lim,'T');
  if (p + 2 > lim) {
    throw NumericException.INSTANCE;
  }
  int hour=Numbers.parseInt(seq,p,p+=2);
  checkRange(hour,0,23);
  checkChar(seq,p++,lim,':');
  if (p + 2 > lim) {
    throw NumericException.INSTANCE;
  }
  int min=Numbers.parseInt(seq,p,p+=2);
  checkRange(min,0,59);
  checkChar(seq,p++,lim,':');
  if (p + 2 > lim) {
    throw NumericException.INSTANCE;
  }
  int sec=Numbers.parseInt(seq,p,p+=2);
  checkRange(sec,0,59);
  int mil=0;
  if (p < lim && seq.charAt(p) == '.') {
    if (p + 4 > lim) {
      throw NumericException.INSTANCE;
    }
    mil=Numbers.parseInt(seq,++p,p+=3);
    checkRange(mil,0,999);
  }
  if (p < lim) {
    checkChar(seq,p,lim,'Z');
  }
  return yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS + sec * SECOND_MILLIS + mil;
}","private static long parseDateTime(CharSequence seq,int lo,int lim) throws NumericException {
  int p=lo;
  if (lim - p < 20) {
    throw NumericException.INSTANCE;
  }
  int year=Numbers.parseInt(seq,p,p+=4);
  checkChar(seq,p++,lim,'-');
  int month=Numbers.parseInt(seq,p,p+=2);
  checkRange(month,1,12);
  checkChar(seq,p++,lim,'-');
  boolean l=isLeapYear(year);
  int day=Numbers.parseInt(seq,p,p+=2);
  checkRange(day,1,getDaysPerMonth(month,l));
  checkChar(seq,p++,lim,'T');
  int hour=Numbers.parseInt(seq,p,p+=2);
  checkRange(hour,0,23);
  checkChar(seq,p++,lim,':');
  int min=Numbers.parseInt(seq,p,p+=2);
  checkRange(min,0,59);
  checkChar(seq,p++,lim,':');
  int sec=Numbers.parseInt(seq,p,p+=2);
  checkRange(sec,0,59);
  int mil=0;
  if (p < lim && seq.charAt(p) == '.') {
    if (p + 4 > lim) {
      throw NumericException.INSTANCE;
    }
    mil=Numbers.parseInt(seq,++p,p+=3);
    checkRange(mil,0,999);
  }
  if (p < lim) {
    checkChar(seq,p,lim,'Z');
  }
  return yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS + sec * SECOND_MILLIS + mil;
}",0.8709802402169702
31135,"public static Interval parseInterval(CharSequence seq,final int pos,int lim) throws NumericException {
  int len=lim - pos - 1;
  int p=pos;
  int year=Numbers.parseInt(seq,p,p+=4);
  boolean l=isLeapYear(year);
  if (p < len) {
    checkChar(seq,p++,lim,'-');
    int month=Numbers.parseInt(seq,p,p+=2);
    checkRange(month,1,12);
    if (p < len) {
      checkChar(seq,p++,lim,'-');
      int day=Numbers.parseInt(seq,p,p+=2);
      checkRange(day,1,getDaysPerMonth(month,l));
      if (p < len) {
        checkChar(seq,p++,lim,'T');
        int hour=Numbers.parseInt(seq,p,p+=2);
        checkRange(hour,0,23);
        if (p < len) {
          checkChar(seq,p++,lim,':');
          int min=Numbers.parseInt(seq,p,p+=2);
          checkRange(min,0,59);
          if (p < len) {
            checkChar(seq,p++,lim,':');
            int sec=Numbers.parseInt(seq,p,p+=2);
            checkRange(sec,0,59);
            if (p < len) {
              throw NumericException.INSTANCE;
            }
 else {
              return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS + sec * SECOND_MILLIS,yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS + sec * SECOND_MILLIS + 999);
            }
          }
 else {
            return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS,yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
          }
        }
 else {
          return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS,yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + 59 * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
        }
      }
 else {
        return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS,yearMillis(year,l) + monthOfYearMillis(month,l) + +(day - 1) * DAY_MILLIS + 23 * HOUR_MILLIS + 59 * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
      }
    }
 else {
      return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l),yearMillis(year,l) + monthOfYearMillis(month,l) + (DAYS_PER_MONTH[month - 1] - 1) * DAY_MILLIS + 23 * HOUR_MILLIS + 59 * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
    }
  }
 else {
    return new Interval(yearMillis(year,l) + monthOfYearMillis(1,l),yearMillis(year,l) + monthOfYearMillis(12,l) + (DAYS_PER_MONTH[11] - 1) * DAY_MILLIS + 23 * HOUR_MILLIS + 59 * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
  }
}","public static Interval parseInterval(CharSequence seq,final int pos,int lim) throws NumericException {
  int len=lim - pos - 1;
  int p=pos;
  int year=Numbers.parseInt(seq,p,p+=4);
  boolean l=isLeapYear(year);
  if (checkLen(p,len)) {
    checkChar(seq,p++,lim,'-');
    int month=Numbers.parseInt(seq,p,p+=2);
    checkRange(month,1,12);
    if (checkLen(p,len)) {
      checkChar(seq,p++,lim,'-');
      int day=Numbers.parseInt(seq,p,p+=2);
      checkRange(day,1,getDaysPerMonth(month,l));
      if (checkLen(p,len)) {
        checkChar(seq,p++,lim,'T');
        int hour=Numbers.parseInt(seq,p,p+=2);
        checkRange(hour,0,23);
        if (checkLen(p,len)) {
          checkChar(seq,p++,lim,':');
          int min=Numbers.parseInt(seq,p,p+=2);
          checkRange(min,0,59);
          if (checkLen(p,len)) {
            checkChar(seq,p++,lim,':');
            int sec=Numbers.parseInt(seq,p,p+=2);
            checkRange(sec,0,59);
            if (p < len) {
              throw NumericException.INSTANCE;
            }
 else {
              return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS + sec * SECOND_MILLIS,yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS + sec * SECOND_MILLIS + 999);
            }
          }
 else {
            return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS,yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + min * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
          }
        }
 else {
          return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS,yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS + hour * HOUR_MILLIS + 59 * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
        }
      }
 else {
        return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS,yearMillis(year,l) + monthOfYearMillis(month,l) + +(day - 1) * DAY_MILLIS + 23 * HOUR_MILLIS + 59 * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
      }
    }
 else {
      return new Interval(yearMillis(year,l) + monthOfYearMillis(month,l),yearMillis(year,l) + monthOfYearMillis(month,l) + (DAYS_PER_MONTH[month - 1] - 1) * DAY_MILLIS + 23 * HOUR_MILLIS + 59 * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
    }
  }
 else {
    return new Interval(yearMillis(year,l) + monthOfYearMillis(1,l),yearMillis(year,l) + monthOfYearMillis(12,l) + (DAYS_PER_MONTH[11] - 1) * DAY_MILLIS + 23 * HOUR_MILLIS + 59 * MINUTE_MILLIS + 59 * SECOND_MILLIS + 999);
  }
}",0.9799196787148594
31136,"private static void append0(CharSink sink,int val){
  if (val < 10) {
    sink.put('0');
  }
  Numbers.append(sink,val);
}","private static void append0(CharSink sink,int val){
  if (Math.abs(val) < 10) {
    sink.put('0');
  }
  Numbers.append(sink,val);
}",0.9606299212598424
31137,"private static void append0000(CharSink sink,int val){
  if (val < 10) {
    sink.put('0').put('0').put('0');
  }
 else   if (val < 100) {
    sink.put('0').put('0');
  }
 else   if (val < 1000) {
    sink.put('0');
  }
  Numbers.append(sink,val);
}","private static void append0000(CharSink sink,int val){
  int v=Math.abs(val);
  if (v < 10) {
    sink.put('0').put('0').put('0');
  }
 else   if (v < 100) {
    sink.put('0').put('0');
  }
 else   if (v < 1000) {
    sink.put('0');
  }
  Numbers.append(sink,val);
}",0.9436893203883496
31138,"private static void append00(CharSink sink,int val){
  if (val < 10) {
    sink.put('0').put('0');
  }
 else   if (val < 100) {
    sink.put('0');
  }
  Numbers.append(sink,val);
}","private static void append00(CharSink sink,int val){
  int v=Math.abs(val);
  if (v < 10) {
    sink.put('0').put('0');
  }
 else   if (v < 100) {
    sink.put('0');
  }
  Numbers.append(sink,val);
}",0.9287598944591028
31139,"@SuppressWarnings(""String_Node_Str"") private static float parseFloat(CharSequence sequence,int lo,int lim) throws NumericException {
  int p=lo;
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  if (negative) {
    p++;
  }
  if (p >= lim) {
    throw NumericException.INSTANCE;
  }
switch (sequence.charAt(p)) {
case 'N':
    return parseFloatConst(sequence,p,lim,NaN,Float.NaN);
case 'I':
  return parseFloatConst(sequence,p,lim,INFINITY,negative ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY);
default :
break;
}
int val=0;
int dp=-1;
int dpe=lim;
int exp=0;
out: for (int i=p; i < lim; i++) {
int c=sequence.charAt(i);
switch (c) {
case '.':
dp=i;
continue;
case 'E':
case 'e':
exp=parseInt(sequence,i + 1,lim);
if (dpe == lim) {
dpe=i;
}
break out;
default :
if (c < '0' || c > '9') {
throw NumericException.INSTANCE;
}
if (val <= INT_OVERFLOW_MAX) {
val=(val << 3) + (val << 1) + (c - '0');
}
 else if (dpe == lim) {
dpe=i;
}
break;
}
}
exp=dp == -1 ? exp : exp - (dpe - dp - 1);
if (exp > 38) {
exp=38;
}
 else if (exp < -38) {
exp=-38;
}
if (exp > 0) {
return (negative ? -val : val) * pow10f[exp];
}
 else {
return (negative ? -val : val) / pow10f[-exp];
}
}","@SuppressWarnings(""String_Node_Str"") private static float parseFloat(CharSequence sequence,int lo,int lim) throws NumericException {
  int p=lo;
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  if (negative) {
    p++;
  }
  if (p >= lim) {
    throw NumericException.INSTANCE;
  }
switch (sequence.charAt(p)) {
case 'N':
    return parseFloatConst(sequence,p,lim,NaN,Float.NaN);
case 'I':
  return parseFloatConst(sequence,p,lim,INFINITY,negative ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY);
default :
break;
}
int val=0;
int dp=-1;
int dpe=lim;
int exp=0;
out: for (int i=p; i < lim; i++) {
int c=sequence.charAt(i);
switch (c) {
case '.':
dp=i;
continue;
case 'E':
case 'e':
exp=parseInt(sequence,i + 1,lim);
if (dpe == lim) {
dpe=i;
}
break out;
case 'F':
case 'f':
if (i + 1 < lim) {
throw NumericException.INSTANCE;
}
if (dpe == lim) {
dpe=i;
}
break out;
default :
if (c < '0' || c > '9') {
throw NumericException.INSTANCE;
}
if (val <= INT_OVERFLOW_MAX) {
val=(val << 3) + (val << 1) + (c - '0');
}
 else if (dpe == lim) {
dpe=i;
}
break;
}
}
exp=dp == -1 ? exp : exp - (dpe - dp - 1);
if (exp > 38) {
exp=38;
}
 else if (exp < -38) {
exp=-38;
}
if (exp > 0) {
return (negative ? -val : val) * pow10f[exp];
}
 else {
return (negative ? -val : val) / pow10f[-exp];
}
}",0.9564541213063764
31140,"private static int parseInt0(CharSequence sequence,final int p,int lim) throws NumericException {
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  int i=p;
  if (negative) {
    i++;
  }
  if (i >= lim) {
    throw NumericException.INSTANCE;
  }
  int val=0;
  for (; i < lim; i++) {
    int c=sequence.charAt(i);
    if (c < '0' || c > '9') {
      throw NumericException.INSTANCE;
    }
    int r=(val << 3) + (val << 1) - (c - '0');
    if (r > val) {
      throw NumericException.INSTANCE;
    }
    val=r;
  }
  if (val == Integer.MIN_VALUE && !negative) {
    throw NumericException.INSTANCE;
  }
  return negative ? val : -val;
}","private static int parseInt0(CharSequence sequence,final int p,int lim) throws NumericException {
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  int i=p;
  if (negative) {
    i++;
  }
  if (i >= lim) {
    throw NumericException.INSTANCE;
  }
  int val=0;
  for (; i < lim; i++) {
    char c=sequence.charAt(i);
    if (c < '0' || c > '9') {
      throw NumericException.INSTANCE;
    }
    int r=(val << 3) + (val << 1) - (c - '0');
    if (r > val) {
      throw NumericException.INSTANCE;
    }
    val=r;
  }
  if (val == Integer.MIN_VALUE && !negative) {
    throw NumericException.INSTANCE;
  }
  return negative ? val : -val;
}",0.9949604031677466
31141,"@SuppressWarnings(""String_Node_Str"") private static double parseDouble(CharSequence sequence,final int p,int lim) throws NumericException {
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  int i=p;
  if (negative) {
    i++;
  }
  if (i >= lim) {
    throw NumericException.INSTANCE;
  }
switch (sequence.charAt(i)) {
case 'N':
    return parseConst(sequence,i,lim,NaN,Double.NaN);
case 'I':
  return parseConst(sequence,i,lim,INFINITY,negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
default :
break;
}
long val=0;
int dp=-1;
int dpe=lim;
int exp=0;
out: for (; i < lim; i++) {
int c=sequence.charAt(i);
switch (c) {
case '.':
dp=i;
continue;
case 'E':
case 'e':
exp=parseInt(sequence,i + 1,lim);
if (dpe == lim) {
dpe=i;
}
break out;
default :
if (c < '0' || c > '9') {
throw NumericException.INSTANCE;
}
if (val <= LONG_OVERFLOW_MAX) {
val=(val << 3) + (val << 1) + (c - '0');
}
 else if (dpe == lim) {
dpe=i;
}
break;
}
}
exp=dp == -1 ? exp : exp - (dpe - dp - 1);
if (exp > 308) {
exp=308;
}
 else if (exp < -308) {
exp=-308;
}
if (exp > 0) {
return (negative ? -val : val) * pow10d[exp];
}
 else {
return (negative ? -val : val) / pow10d[-exp];
}
}","@SuppressWarnings(""String_Node_Str"") private static double parseDouble(CharSequence sequence,final int p,int lim) throws NumericException {
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  int i=p;
  if (negative) {
    i++;
  }
  if (i >= lim) {
    throw NumericException.INSTANCE;
  }
switch (sequence.charAt(i)) {
case 'N':
    return parseConst(sequence,i,lim,NaN,Double.NaN);
case 'I':
  return parseConst(sequence,i,lim,INFINITY,negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
default :
break;
}
long val=0;
int dp=-1;
int dpe=lim;
int exp=0;
out: for (; i < lim; i++) {
int c=sequence.charAt(i);
switch (c) {
case '.':
dp=i;
continue;
case 'E':
case 'e':
exp=parseInt(sequence,i + 1,lim);
if (dpe == lim) {
dpe=i;
}
break out;
case 'D':
case 'd':
if (i + 1 < lim) {
throw NumericException.INSTANCE;
}
if (dpe == lim) {
dpe=i;
}
break out;
default :
if (c < '0' || c > '9') {
throw NumericException.INSTANCE;
}
if (val <= LONG_OVERFLOW_MAX) {
val=(val << 3) + (val << 1) + (c - '0');
}
 else if (dpe == lim) {
dpe=i;
}
break;
}
}
exp=dp == -1 ? exp : exp - (dpe - dp - 1);
if (exp > 308) {
exp=308;
}
 else if (exp < -308) {
exp=-308;
}
if (exp > 0) {
return (negative ? -val : val) * pow10d[exp];
}
 else {
return (negative ? -val : val) / pow10d[-exp];
}
}",0.956386292834891
31142,"private static long parseLong0(CharSequence sequence,final int p,int lim) throws NumericException {
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  int i=p;
  if (negative) {
    i++;
  }
  if (i >= lim) {
    throw NumericException.INSTANCE;
  }
  long val=0;
  for (; i < lim; i++) {
    int c=sequence.charAt(i);
    if (c < '0' || c > '9') {
      throw NumericException.INSTANCE;
    }
    long r=(val << 3) + (val << 1) - (c - '0');
    if (r > val) {
      throw NumericException.INSTANCE;
    }
    val=r;
  }
  if (val == Long.MIN_VALUE && !negative) {
    throw NumericException.INSTANCE;
  }
  return negative ? val : -val;
}","private static long parseLong0(CharSequence sequence,final int p,int lim) throws NumericException {
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  int i=p;
  if (negative) {
    i++;
  }
  if (i >= lim) {
    throw NumericException.INSTANCE;
  }
  long val=0;
  for (; i < lim; i++) {
    int c=sequence.charAt(i);
    if (c == 'L' || c == 'l') {
      if (i + 1 < lim) {
        throw NumericException.INSTANCE;
      }
      break;
    }
    if (c < '0' || c > '9') {
      throw NumericException.INSTANCE;
    }
    long r=(val << 3) + (val << 1) - (c - '0');
    if (r > val) {
      throw NumericException.INSTANCE;
    }
    val=r;
  }
  if (val == Long.MIN_VALUE && !negative) {
    throw NumericException.INSTANCE;
  }
  return negative ? val : -val;
}",0.9174917491749176
31143,"public VirtualColumnRecordSource(RecordSource delegate,ObjList<VirtualColumn> virtualColumns){
  this.delegate=delegate;
  RecordMetadata dm=delegate.getMetadata();
  this.metadata=new VirtualRecordMetadata(dm,virtualColumns);
  this.record=new VirtualRecord(dm.getColumnCount(),virtualColumns,delegate.getRecord());
  this.virtualColumnStorageFacade=VirtualColumnStorageFacade.INSTANCE;
  this.storageFacade=new SplitRecordStorageFacade(dm.getColumnCount());
}","public VirtualColumnRecordSource(RecordSource delegate,ObjList<VirtualColumn> virtualColumns){
  this.delegate=delegate;
  this.virtualColumns=virtualColumns;
  RecordMetadata dm=delegate.getMetadata();
  this.metadata=new VirtualRecordMetadata(dm,virtualColumns);
  this.record=new VirtualRecord(dm.getColumnCount(),virtualColumns,delegate.getRecord());
  this.virtualColumnStorageFacade=new VirtualColumnStorageFacade();
  this.storageFacade=new SplitRecordStorageFacade(dm.getColumnCount());
}",0.9446185997910136
31144,"@Override public SymbolTable getSymbolTable(int index){
  return null;
}","@Override public SymbolTable getSymbolTable(int index){
  return virtualColumns.getQuick(index).getSymbolTable();
}",0.7700534759358288
31145,"@Override public long getLong(Record rec){
  try {
    CharSequence s=value.getFlyweightStr(rec);
    return s == null ? 0 : Dates.parseTime24(s);
  }
 catch (  NumericException ignore) {
    return 0;
  }
}","@Override public long getLong(Record rec){
  try {
    CharSequence s=value.getFlyweightStr(rec);
    return s == null ? Long.MIN_VALUE : Dates.parseTime24(s);
  }
 catch (  NumericException ignore) {
    return 0;
  }
}",0.9648711943793912
31146,"@Test public void testAndArgCheck2() throws Exception {
  try {
    assertThat(""String_Node_Str"",""String_Node_Str"");
    Assert.fail();
  }
 catch (  ParserException e) {
    Assert.assertEquals(67,QueryError.getPosition());
  }
}","@Test public void testAndArgCheck2() throws Exception {
  try {
    expectFailure(""String_Node_Str"");
  }
 catch (  ParserException e) {
    Assert.assertEquals(67,QueryError.getPosition());
  }
}",0.8685446009389671
31147,"@Test public void testOrArgCheck() throws Exception {
  try {
    assertThat(""String_Node_Str"",""String_Node_Str"");
    Assert.fail();
  }
 catch (  ParserException e) {
    Assert.assertEquals(44,QueryError.getPosition());
  }
}","@Test public void testOrArgCheck() throws Exception {
  try {
    expectFailure(""String_Node_Str"");
  }
 catch (  ParserException e) {
    Assert.assertEquals(44,QueryError.getPosition());
  }
}",0.8672985781990521
31148,"@Test public void testOrArgCheck2() throws Exception {
  try {
    assertThat(""String_Node_Str"",""String_Node_Str"");
    Assert.fail();
  }
 catch (  ParserException e) {
    Assert.assertEquals(67,QueryError.getPosition());
  }
}","@Test public void testOrArgCheck2() throws Exception {
  try {
    expectFailure(""String_Node_Str"");
  }
 catch (  ParserException e) {
    Assert.assertEquals(67,QueryError.getPosition());
  }
}",0.8679245283018868
31149,"@Test public void testAndArgCheck() throws Exception {
  try {
    assertThat(""String_Node_Str"",""String_Node_Str"");
    Assert.fail();
  }
 catch (  ParserException e) {
    Assert.assertEquals(44,QueryError.getPosition());
  }
}","@Test public void testAndArgCheck() throws Exception {
  try {
    expectFailure(""String_Node_Str"");
  }
 catch (  ParserException e) {
    Assert.assertEquals(44,QueryError.getPosition());
  }
}",0.8679245283018868
31150,"@Override public void putNull(int index){
switch (meta[index].type) {
case ColumnType.STRING:
    putNullStr(index);
  break;
case ColumnType.SYMBOL:
putSymbol0(index,null);
break;
case ColumnType.INT:
putInt0(index,Integer.MIN_VALUE);
break;
case ColumnType.FLOAT:
putFloat(index,Float.NaN);
break;
case ColumnType.DOUBLE:
putDouble(index,Double.NaN);
break;
case ColumnType.LONG:
putLong(index,Long.MIN_VALUE);
break;
case ColumnType.BINARY:
putBin0(index,null);
break;
case ColumnType.DATE:
putDate(index,Long.MIN_VALUE);
break;
default :
fixCol(index).putNull();
break;
}
}","@Override public void putNull(int index){
switch (meta[index].type) {
case ColumnType.STRING:
    putNullStr(index);
  break;
case ColumnType.SYMBOL:
putSymbol0(index,null);
break;
case ColumnType.INT:
putInt0(index,Integer.MIN_VALUE);
break;
case ColumnType.FLOAT:
putFloat(index,Float.NaN);
break;
case ColumnType.DOUBLE:
putDouble(index,Double.NaN);
break;
case ColumnType.LONG:
putLong(index,Numbers.LONG_NaN);
break;
case ColumnType.BINARY:
putBin0(index,null);
break;
case ColumnType.DATE:
putDate(index,Numbers.LONG_NaN);
break;
default :
fixCol(index).putNull();
break;
}
}",0.9516407599309152
31151,"public void setLhs(VirtualColumn lhs){
  this.lhs=lhs;
}","public void setLhs(VirtualColumn lhs) throws ParserException {
  this.lhs=lhs;
}",0.8235294117647058
31152,"private static void binSig(String name,VirtualColumnFactory<Function> doubleFactory,VirtualColumnFactory<Function> longFactory,VirtualColumnFactory<Function> intFactory,VirtualColumnFactory<Function> strFactory){
  binSig(name,ColumnType.DOUBLE,ColumnType.PARAMETER,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.INT,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.LONG,doubleFactory);
  binSig(name,ColumnType.INT,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.INT,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.LONG,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.LONG,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.PARAMETER,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.LONG,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.INT,doubleFactory);
  binSig(name,ColumnType.LONG,ColumnType.PARAMETER,longFactory);
  binSig(name,ColumnType.LONG,ColumnType.LONG,longFactory);
  binSig(name,ColumnType.LONG,ColumnType.INT,longFactory);
  binSig(name,ColumnType.INT,ColumnType.LONG,longFactory);
  binSig(name,ColumnType.INT,ColumnType.PARAMETER,intFactory);
  binSig(name,ColumnType.INT,ColumnType.INT,intFactory);
  binSig(name,ColumnType.PARAMETER,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.PARAMETER,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.PARAMETER,ColumnType.LONG,longFactory);
  binSig(name,ColumnType.PARAMETER,ColumnType.INT,intFactory);
  if (strFactory != null) {
    binSig(name,ColumnType.STRING,ColumnType.STRING,strFactory);
    binSig(name,ColumnType.PARAMETER,ColumnType.STRING,strFactory);
    binSig(name,ColumnType.STRING,ColumnType.PARAMETER,strFactory);
  }
}","private static void binSig(String name,VirtualColumnFactory<Function> doubleFactory,VirtualColumnFactory<Function> longFactory,VirtualColumnFactory<Function> intFactory,VirtualColumnFactory<Function> strFactory){
  binSig(name,ColumnType.DOUBLE,ColumnType.PARAMETER,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.INT,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.LONG,doubleFactory);
  binSig(name,ColumnType.INT,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.INT,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.LONG,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.LONG,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.PARAMETER,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.LONG,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.INT,doubleFactory);
  binSig(name,ColumnType.LONG,ColumnType.PARAMETER,longFactory);
  binSig(name,ColumnType.LONG,ColumnType.LONG,longFactory);
  binSig(name,ColumnType.LONG,ColumnType.INT,longFactory);
  binSig(name,ColumnType.INT,ColumnType.LONG,longFactory);
  binSig(name,ColumnType.INT,ColumnType.PARAMETER,intFactory);
  binSig(name,ColumnType.INT,ColumnType.INT,intFactory);
  binSig(name,ColumnType.PARAMETER,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.PARAMETER,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.PARAMETER,ColumnType.LONG,longFactory);
  binSig(name,ColumnType.PARAMETER,ColumnType.INT,intFactory);
  binSig(name,ColumnType.SHORT,ColumnType.INT,intFactory);
  binSig(name,ColumnType.INT,ColumnType.SHORT,intFactory);
  binSig(name,ColumnType.SHORT,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.SHORT,doubleFactory);
  binSig(name,ColumnType.SHORT,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.SHORT,doubleFactory);
  binSig(name,ColumnType.SHORT,ColumnType.LONG,longFactory);
  binSig(name,ColumnType.LONG,ColumnType.SHORT,longFactory);
  binSig(name,ColumnType.BYTE,ColumnType.INT,intFactory);
  binSig(name,ColumnType.INT,ColumnType.BYTE,intFactory);
  binSig(name,ColumnType.BYTE,ColumnType.DOUBLE,doubleFactory);
  binSig(name,ColumnType.DOUBLE,ColumnType.BYTE,doubleFactory);
  binSig(name,ColumnType.BYTE,ColumnType.FLOAT,doubleFactory);
  binSig(name,ColumnType.FLOAT,ColumnType.BYTE,doubleFactory);
  binSig(name,ColumnType.BYTE,ColumnType.LONG,longFactory);
  binSig(name,ColumnType.LONG,ColumnType.BYTE,longFactory);
  binSig(name,ColumnType.BYTE,ColumnType.SHORT,intFactory);
  binSig(name,ColumnType.SHORT,ColumnType.BYTE,intFactory);
  if (strFactory != null) {
    binSig(name,ColumnType.STRING,ColumnType.STRING,strFactory);
    binSig(name,ColumnType.PARAMETER,ColumnType.STRING,strFactory);
    binSig(name,ColumnType.STRING,ColumnType.PARAMETER,strFactory);
  }
}",0.7810276679841898
31153,"private void optimiseInvertedBooleans(QueryModel model){
  ExprNode where=model.getWhereClause();
  if (where != null) {
    model.setWhereClause(optimiseInvertedBooleans(where,false));
  }
  if (model.getNestedModel() != null) {
    optimiseInvertedBooleans(model.getNestedModel());
  }
  ObjList<QueryModel> joinModels=model.getJoinModels();
  for (int i=0, n=joinModels.size(); i < n; i++) {
    QueryModel m=joinModels.getQuick(i);
    if (m != model) {
      optimiseInvertedBooleans(joinModels.getQuick(i));
    }
  }
}","private void optimiseInvertedBooleans(QueryModel model) throws ParserException {
  ExprNode where=model.getWhereClause();
  if (where != null) {
    model.setWhereClause(optimiseInvertedBooleans(where,false));
  }
  if (model.getNestedModel() != null) {
    optimiseInvertedBooleans(model.getNestedModel());
  }
  ObjList<QueryModel> joinModels=model.getJoinModels();
  for (int i=0, n=joinModels.size(); i < n; i++) {
    QueryModel m=joinModels.getQuick(i);
    if (m != model) {
      optimiseInvertedBooleans(joinModels.getQuick(i));
    }
  }
}",0.9776536312849162
31154,"public static void formatHTTP(CharSink sink,long millis){
  int y=getYear(millis);
  boolean l=isLeapYear(y);
  int m=getMonthOfYear(millis,y,l);
  sink.put(DAYS_OF_WEEK[getDayOfWeek(millis) - 1]).put(""String_Node_Str"").put(getDayOfMonth(millis,y,m,l)).put(' ').put(MONTHS_OF_YEAR[m - 1]).put(' ').put(y).put(' ').put(getHourOfDay(millis)).put(':').put(getMinuteOfHour(millis)).put(':').put(getSecondOfMinute(millis)).put(' ').put(""String_Node_Str"");
}","public static void formatHTTP(CharSink sink,long millis){
  int y=getYear(millis);
  boolean l=isLeapYear(y);
  int m=getMonthOfYear(millis,y,l);
  sink.put(DAYS_OF_WEEK[getDayOfWeek(millis) - 1]).put(""String_Node_Str"").put(getDayOfMonth(millis,y,m,l)).put(' ').put(MONTHS_OF_YEAR[m - 1]).put(' ');
  append0000(sink,y);
  sink.put(' ');
  append0(sink,getHourOfDay(millis));
  sink.put(':');
  append0(sink,getMinuteOfHour(millis));
  sink.put(':');
  append0(sink,getSecondOfMinute(millis));
  sink.put(' ').put(""String_Node_Str"");
}",0.8530901722391084
31155,"public void addColumn(QueryColumn column){
  columns.add(column);
}","public void addColumn(QueryColumn column){
  columns.add(column);
  if (column.getAlias() != null) {
    aliasToColumnMap.put(column.getAlias(),column);
  }
}",0.5955555555555555
31156,"public void clear(){
  columns.clear();
  joinModels.clear();
  joinModels.add(this);
  sampleBy=null;
  orderBy.clear();
  orderByDirection.clear();
  dependencies.clear();
  parsedWhere.clear();
  whereClause=null;
  nestedModel=null;
  journalName=null;
  alias=null;
  latestBy=null;
  recordSource=null;
  metadata=null;
  joinCriteria=null;
  joinType=JOIN_INNER;
  orderedJoinModels1.clear();
  orderedJoinModels2.clear();
  parsedWhereConsts.clear();
  aliasIndexes.clear();
  postJoinWhereClause=null;
  context=null;
  orderedJoinModels=orderedJoinModels2;
  limitHi=null;
  limitLo=null;
  limitHiVc=null;
  limitLoVc=null;
  columnNameHistogram.clear();
  parameterMap.clear();
  timestamp=null;
  exprNodeStack.clear();
  journalMetadata=null;
  joinColumns.clear();
  withClauses.clear();
}","public void clear(){
  columns.clear();
  aliasToColumnMap.clear();
  joinModels.clear();
  joinModels.add(this);
  sampleBy=null;
  orderBy.clear();
  orderByDirection.clear();
  dependencies.clear();
  parsedWhere.clear();
  whereClause=null;
  nestedModel=null;
  journalName=null;
  alias=null;
  latestBy=null;
  recordSource=null;
  metadata=null;
  joinCriteria=null;
  joinType=JOIN_INNER;
  orderedJoinModels1.clear();
  orderedJoinModels2.clear();
  parsedWhereConsts.clear();
  aliasIndexes.clear();
  postJoinWhereClause=null;
  context=null;
  orderedJoinModels=orderedJoinModels2;
  limitHi=null;
  limitLo=null;
  limitHiVc=null;
  limitLoVc=null;
  columnNameHistogram.clear();
  parameterMap.clear();
  timestamp=null;
  exprNodeStack.clear();
  journalMetadata=null;
  joinColumns.clear();
  withClauses.clear();
}",0.982885085574572
31157,"private int resolveJournalIndex(QueryModel parent,@Transient CharSequence alias,CharSequence column,int position) throws ParserException {
  ObjList<QueryModel> joinModels=parent.getJoinModels();
  int index=-1;
  if (alias == null) {
    for (int i=0, n=joinModels.size(); i < n; i++) {
      RecordMetadata m=joinModels.getQuick(i).getMetadata();
      if (m.getColumnIndexQuiet(column) == -1) {
        continue;
      }
      if (index > -1) {
        throw QueryError.ambiguousColumn(position);
      }
      index=i;
    }
    if (index == -1) {
      throw QueryError.invalidColumn(position,column);
    }
    return index;
  }
 else {
    index=parent.getAliasIndex(alias);
    if (index == -1) {
      throw QueryError.$(position,""String_Node_Str"");
    }
    RecordMetadata m=joinModels.getQuick(index).getMetadata();
    if (m.getColumnIndexQuiet(column) == -1) {
      throw QueryError.invalidColumn(position,column);
    }
    return index;
  }
}","private int resolveJournalIndex(QueryModel parent,@Transient CharSequence alias,CharSequence col,int position) throws ParserException {
  CharSequence column=parent.translateAlias(col);
  ObjList<QueryModel> joinModels=parent.getJoinModels();
  int index=-1;
  if (alias == null) {
    for (int i=0, n=joinModels.size(); i < n; i++) {
      RecordMetadata m=joinModels.getQuick(i).getMetadata();
      if (m.getColumnIndexQuiet(column) == -1) {
        continue;
      }
      if (index > -1) {
        throw QueryError.ambiguousColumn(position);
      }
      index=i;
    }
    if (index == -1) {
      throw QueryError.invalidColumn(position,column);
    }
    return index;
  }
 else {
    index=parent.getAliasIndex(alias);
    if (index == -1) {
      throw QueryError.$(position,""String_Node_Str"");
    }
    RecordMetadata m=joinModels.getQuick(index).getMetadata();
    if (m.getColumnIndexQuiet(column) == -1) {
      throw QueryError.invalidColumn(position,column);
    }
    return index;
  }
}",0.973027989821883
31158,"@Override public void visit(ExprNode node) throws ParserException {
switch (node.type) {
case ExprNode.LITERAL:
    int dot=node.token.indexOf('.');
  CharSequence name=extractColumnName(node.token,dot);
indexes.add(resolveJournalIndex(parent,dot == -1 ? null : csPool.next().of(node.token,0,dot),name,node.position));
names.add(name);
break;
case ExprNode.CONSTANT:
if (nullConstants.contains(node.token)) {
nullCount++;
}
break;
default :
break;
}
}","@Override public void visit(ExprNode node) throws ParserException {
switch (node.type) {
case ExprNode.LITERAL:
    int dot=node.token.indexOf('.');
  CharSequence name=extractColumnName(node.token,dot);
indexes.add(resolveJournalIndex(parent,dot == -1 ? null : csPool.next().of(node.token,0,dot),name,node.position));
if (names != null) {
names.add(name);
}
break;
case ExprNode.CONSTANT:
if (nullConstants.contains(node.token)) {
nullCount++;
}
break;
default :
break;
}
}",0.9405405405405406
31159,"private VirtualColumn lookupColumn(ExprNode node) throws ParserException {
  try {
    if (columnNameHistogram.get(node.token) > 0) {
      throw QueryError.ambiguousColumn(node.position);
    }
    int index=metadata.getColumnIndex(node.token);
switch (metadata.getColumnQuick(index).getType()) {
case ColumnType.DOUBLE:
      return new DoubleRecordSourceColumn(index,node.position);
case ColumnType.INT:
    return new IntRecordSourceColumn(index,node.position);
case ColumnType.LONG:
  return new LongRecordSourceColumn(index,node.position);
case ColumnType.STRING:
return new StrRecordSourceColumn(index,node.position);
case ColumnType.SYMBOL:
return new SymRecordSourceColumn(index,node.position);
case ColumnType.BYTE:
return new ByteRecordSourceColumn(index,node.position);
case ColumnType.FLOAT:
return new FloatRecordSourceColumn(index,node.position);
case ColumnType.BOOLEAN:
return new BoolRecordSourceColumn(index,node.position);
case ColumnType.SHORT:
return new ShortRecordSourceColumn(index,node.position);
case ColumnType.BINARY:
return new BinaryRecordSourceColumn(index,node.position);
case ColumnType.DATE:
return new DateRecordSourceColumn(index,node.position);
default :
throw QueryError.$(node.position,""String_Node_Str"");
}
}
 catch (NoSuchColumnException e) {
throw QueryError.invalidColumn(node.position,node.token);
}
}","private VirtualColumn lookupColumn(ExprNode node) throws ParserException {
  CharSequence column=model.translateAlias(node.token);
  try {
    if (columnNameHistogram.get(column) > 0) {
      throw QueryError.ambiguousColumn(node.position);
    }
    int index=metadata.getColumnIndex(column);
switch (metadata.getColumnQuick(index).getType()) {
case ColumnType.DOUBLE:
      return new DoubleRecordSourceColumn(index,node.position);
case ColumnType.INT:
    return new IntRecordSourceColumn(index,node.position);
case ColumnType.LONG:
  return new LongRecordSourceColumn(index,node.position);
case ColumnType.STRING:
return new StrRecordSourceColumn(index,node.position);
case ColumnType.SYMBOL:
return new SymRecordSourceColumn(index,node.position);
case ColumnType.BYTE:
return new ByteRecordSourceColumn(index,node.position);
case ColumnType.FLOAT:
return new FloatRecordSourceColumn(index,node.position);
case ColumnType.BOOLEAN:
return new BoolRecordSourceColumn(index,node.position);
case ColumnType.SHORT:
return new ShortRecordSourceColumn(index,node.position);
case ColumnType.BINARY:
return new BinaryRecordSourceColumn(index,node.position);
case ColumnType.DATE:
return new DateRecordSourceColumn(index,node.position);
default :
throw QueryError.$(node.position,""String_Node_Str"");
}
}
 catch (NoSuchColumnException e) {
throw QueryError.invalidColumn(node.position,column);
}
}",0.9641812865497076
31160,"VirtualColumn createVirtualColumn(QueryModel model,ExprNode node,RecordMetadata metadata) throws ParserException {
  this.columnNameHistogram=model.getColumnNameHistogram();
  this.parameterMap=model.getParameterMap();
  this.metadata=metadata;
  algo.traverse(node,this);
  return stack.poll();
}","VirtualColumn createVirtualColumn(QueryModel model,ExprNode node,RecordMetadata metadata) throws ParserException {
  this.columnNameHistogram=model.getColumnNameHistogram();
  this.parameterMap=model.getParameterMap();
  this.model=model;
  this.metadata=metadata;
  algo.traverse(node,this);
  return stack.poll();
}",0.9446254071661238
31161,"private int getTimestampIndexQuiet(ExprNode node,RecordMetadata m) throws ParserException {
  if (node != null) {
    if (node.type != ExprNode.LITERAL) {
      throw QueryError.position(node.position).$(""String_Node_Str"").$();
    }
    int index=m.getColumnIndexQuiet(node.token);
    if (index == -1) {
      throw QueryError.position(node.position).$(""String_Node_Str"").$(node.token).$();
    }
    return index;
  }
 else {
    int index=m.getTimestampIndex();
    if (index > -1) {
      return index;
    }
    for (int i=0, n=m.getColumnCount(); i < n; i++) {
      if (m.getColumnQuick(i).getType() == ColumnType.DATE) {
        if (index == -1) {
          index=i;
        }
 else {
          return -2;
        }
      }
    }
    return index;
  }
}","private int getTimestampIndexQuiet(ExprNode node,RecordMetadata m) throws ParserException {
  if (node != null) {
    if (node.type != ExprNode.LITERAL) {
      throw QueryError.position(node.position).$(""String_Node_Str"").$();
    }
    int index=m.getColumnIndexQuiet(node.token);
    if (index == -1) {
      throw QueryError.position(node.position).$(""String_Node_Str"").$(node.token).$();
    }
    return index;
  }
 else {
    return m.getTimestampIndex();
  }
}",0.7495934959349594
31162,"public static VirtualColumnFactory<Function> find(Signature sig,ObjList<VirtualColumn> args){
  final VirtualColumn vc;
  if (sig.paramCount == 2 && (vc=args.getQuick(1)).isConstant()) {
switch (sig.paramTypes.getQuick(1)) {
case ColumnType.DOUBLE:
      double d=vc.getDouble(null);
    if (d != d) {
      int columnType=sig.paramTypes.getQuick(0);
      if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
          return DoubleEqualsNanOperator.FACTORY;
case ColumnType.INT:
        return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
      return LongEqualsNaNOperator.FACTORY;
default :
    break;
}
}
 else if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (columnType) {
case ColumnType.DOUBLE:
  return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
case ColumnType.STRING:
if (vc.getFlyweightStr(null) == null) {
int columnType=sig.paramTypes.getQuick(0);
if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongEqualsNaNOperator.FACTORY;
default :
break;
}
}
 else if (Chars.equals(sig.name,""String_Node_Str"")) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrNotEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
default :
break;
}
}
VirtualColumnFactory<Function> factory=factories.get(sig);
if (factory != null) {
return factory;
}
 else {
if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (sig.paramTypes.getQuick(0)) {
case ColumnType.STRING:
return StrInOperator.FACTORY;
case ColumnType.SYMBOL:
return SymInOperator.FACTORY;
default :
break;
}
}
}
return null;
}","public static VirtualColumnFactory<Function> find(Signature sig,ObjList<VirtualColumn> args){
  final VirtualColumn vc;
  if (sig.paramCount == 2 && (vc=args.getQuick(1)).isConstant()) {
switch (sig.paramTypes.getQuick(1)) {
case ColumnType.DOUBLE:
      double d=vc.getDouble(null);
    if (d != d) {
      int columnType=sig.paramTypes.getQuick(0);
      if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
          return DoubleEqualsNanOperator.FACTORY;
case ColumnType.INT:
        return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
      return LongEqualsNaNOperator.FACTORY;
default :
    break;
}
}
 else if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (columnType) {
case ColumnType.DOUBLE:
  return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
case ColumnType.STRING:
if (vc.getFlyweightStr(null) == null) {
int columnType=sig.paramTypes.getQuick(0);
if (Chars.equals(sig.name,'=')) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongEqualsNaNOperator.FACTORY;
default :
break;
}
}
 else if (Chars.equals(sig.name,""String_Node_Str"")) {
switch (columnType) {
case ColumnType.DOUBLE:
return DoubleNotEqualsNanOperator.FACTORY;
case ColumnType.STRING:
return StrNotEqualsNullOperator.FACTORY;
case ColumnType.INT:
return IntNotEqualsNaNOperator.FACTORY;
case ColumnType.LONG:
case ColumnType.DATE:
return LongNotEqualsNaNOperator.FACTORY;
default :
break;
}
}
}
break;
default :
break;
}
}
VirtualColumnFactory<Function> factory=factories.get(sig);
if (factory != null) {
return factory;
}
 else {
if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (sig.paramTypes.getQuick(0)) {
case ColumnType.STRING:
return StrInOperator.FACTORY;
case ColumnType.SYMBOL:
return SymInOperator.FACTORY;
case ColumnType.INT:
case ColumnType.BYTE:
case ColumnType.SHORT:
return IntInOperator.FACTORY;
case ColumnType.LONG:
return LongInOperator.FACTORY;
default :
break;
}
}
}
return null;
}",0.9669696297938372
31163,"@Override public void setArg(int pos,VirtualColumn arg) throws ParserException {
  if (pos == 0) {
    lhs=arg;
  }
 else {
    set.add(arg.getStr(null).toString());
  }
}","@Override public void setArg(int pos,VirtualColumn arg) throws ParserException {
  if (pos == 0) {
    lhs=arg;
  }
 else {
    assertConstant(arg);
switch (arg.getType()) {
case ColumnType.STRING:
      CharSequence cs=arg.getFlyweightStr(null);
    set.add(cs == null ? null : cs.toString());
  break;
default :
typeError(arg.getPosition(),ColumnType.STRING);
break;
}
}
}",0.4807339449541284
31164,"@Override public void prepare(StorageFacade facade){
  lhs.prepare(facade);
  SymbolTable tab=lhs.getSymbolTable();
  for (int i=0, n=values.size(); i < n; i++) {
    int k=tab.getQuick(values.get(i));
    if (k > -1) {
      set.add(k);
    }
  }
}","@Override public void prepare(StorageFacade facade){
  lhs.prepare(facade);
  SymbolTable tab=lhs.getSymbolTable();
  for (int i=0, n=values.size(); i < n; i++) {
    set.add(tab.getQuick(values.get(i)));
  }
}",0.7538126361655774
31165,"@Override public void setArg(int pos,VirtualColumn arg) throws ParserException {
  if (pos == 0) {
    lhs=arg;
  }
 else {
    values.add(arg.getStr(null).toString());
  }
}","@Override public void setArg(int pos,VirtualColumn arg) throws ParserException {
  if (pos == 0) {
    lhs=arg;
  }
 else {
    assertConstant(arg);
switch (arg.getType()) {
case ColumnType.STRING:
      CharSequence cs=arg.getFlyweightStr(null);
    values.add(cs == null ? null : cs.toString());
  break;
default :
typeError(arg.getPosition(),ColumnType.STRING);
break;
}
}
}",0.515426497277677
31166,"@Override public int getStrLen(Record rec){
  return getFlyweightStr(rec).length();
}","@Override public int getStrLen(Record rec){
  CharSequence cs=getFlyweightStr(rec);
  return cs == null ? -1 : cs.length();
}",0.7904761904761904
31167,"@Override public void setRhs(VirtualColumn rhs) throws ParserException {
  super.setRhs(rhs);
  CharSequence intervalStr=rhs.getFlyweightStr(null);
  IntervalCompiler.parseIntervalEx(intervalStr,0,intervalStr.length(),rhs.getPosition(),intervals);
  intervalCount=intervals.size() / 2;
}","@Override public void setRhs(VirtualColumn rhs) throws ParserException {
  super.setRhs(rhs);
  CharSequence intervalStr=rhs.getFlyweightStr(null);
  if (intervalStr != null) {
    IntervalCompiler.parseIntervalEx(intervalStr,0,intervalStr.length(),rhs.getPosition(),intervals);
  }
  intervalCount=intervals.size() / 2;
}",0.942528735632184
31168,"@Override public int getStrLen(Record rec){
  return getFlyweightStr(rec).length();
}","@Override public int getStrLen(Record rec){
  CharSequence cs=getFlyweightStr(rec);
  return cs == null ? -1 : cs.length();
}",0.7904761904761904
31169,"@SuppressWarnings(""String_Node_Str"") public void parseExpr(Lexer lexer,ExprListener listener) throws ParserException {
  opStack.clear();
  paramCountStack.clear();
  int paramCount=0;
  int braceCount=0;
  ExprNode node;
  CharSequence tok;
  char thisChar=0, prevChar;
  int prevBranch;
  int thisBranch=BRANCH_NONE;
  OUT:   while ((tok=lexer.optionTok()) != null) {
    prevChar=thisChar;
    thisChar=tok.charAt(0);
    prevBranch=thisBranch;
switch (thisChar) {
case ',':
      thisBranch=BRANCH_COMMA;
    if (prevChar == ',') {
      throw QueryError.$(lexer.position(),""String_Node_Str"");
    }
  if (braceCount == 0) {
    lexer.unparse();
    break OUT;
  }
while ((node=opStack.poll()) != null && node.token.charAt(0) != '(') {
  listener.onNode(node);
}
if (node != null) {
opStack.push(node);
}
paramCount++;
break;
case '(':
thisBranch=BRANCH_LEFT_BRACE;
braceCount++;
paramCountStack.push(paramCount);
paramCount=0;
opStack.push(exprNodePool.next().of(ExprNode.CONTROL,""String_Node_Str"",Integer.MAX_VALUE,lexer.position()));
break;
case ')':
if (prevChar == ',') {
throw QueryError.$(lexer.position(),""String_Node_Str"");
}
if (braceCount == 0) {
lexer.unparse();
break OUT;
}
thisBranch=BRANCH_RIGHT_BRACE;
braceCount--;
while ((node=opStack.poll()) != null && node.token.charAt(0) != '(') {
listener.onNode(node);
}
if ((node=opStack.peek()) != null && (node.type == ExprNode.LITERAL || (node.type == ExprNode.SET_OPERATION))) {
node.paramCount=(prevChar == '(' ? 0 : paramCount + 1) + (node.paramCount == 2 ? 1 : 0);
node.type=ExprNode.FUNCTION;
listener.onNode(node);
opStack.poll();
if (paramCountStack.notEmpty()) {
paramCount=paramCountStack.pop();
}
}
break;
case '`':
thisBranch=BRANCH_LAMBDA;
listener.onNode(exprNodePool.next().of(ExprNode.LAMBDA,tok.toString(),0,lexer.position()));
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case '""':
case '\'':
case 'N':
case 'n':
if ((thisChar != 'N' && thisChar != 'n') || Chars.equals(""String_Node_Str"",tok) || Chars.equals(""String_Node_Str"",tok)) {
thisBranch=BRANCH_CONSTANT;
listener.onNode(exprNodePool.next().of(ExprNode.CONSTANT,tok.toString(),0,lexer.position()));
break;
}
default :
ExprOperator op;
if ((op=ExprOperator.opMap.get(tok)) != null) {
thisBranch=BRANCH_OPERATOR;
int operatorType=op.type;
switch (thisChar) {
case '-':
switch (prevBranch) {
case BRANCH_OPERATOR:
case BRANCH_COMMA:
case BRANCH_NONE:
operatorType=ExprOperator.UNARY;
break;
default :
break;
}
break;
default :
break;
}
ExprNode other;
while ((other=opStack.peek()) != null) {
boolean greaterPrecedence=(op.leftAssociative && op.precedence >= other.precedence) || (!op.leftAssociative && op.precedence > other.precedence);
if (greaterPrecedence && (operatorType != ExprOperator.UNARY || (operatorType == ExprOperator.UNARY && other.paramCount == 1))) {
listener.onNode(other);
opStack.poll();
}
 else {
break;
}
}
node=exprNodePool.next().of(op.type == ExprOperator.SET ? ExprNode.SET_OPERATION : ExprNode.OPERATION,op.token,op.precedence,lexer.position());
switch (operatorType) {
case ExprOperator.UNARY:
node.paramCount=1;
break;
default :
node.paramCount=2;
break;
}
opStack.push(node);
}
 else if (!nonLiteralBranches.contains(thisBranch)) {
thisBranch=BRANCH_LITERAL;
opStack.push(exprNodePool.next().of(ExprNode.LITERAL,Chars.toString(tok),Integer.MIN_VALUE,lexer.position()));
}
 else {
lexer.unparse();
break OUT;
}
}
}
while ((node=opStack.poll()) != null) {
if (node.token.charAt(0) == '(') {
throw QueryError.$(node.position,""String_Node_Str"");
}
listener.onNode(node);
}
}","@SuppressWarnings(""String_Node_Str"") public void parseExpr(Lexer lexer,ExprListener listener) throws ParserException {
  opStack.clear();
  paramCountStack.clear();
  int paramCount=0;
  int braceCount=0;
  ExprNode node;
  CharSequence tok;
  char thisChar=0, prevChar;
  int prevBranch;
  int thisBranch=BRANCH_NONE;
  OUT:   while ((tok=lexer.optionTok()) != null) {
    prevChar=thisChar;
    thisChar=tok.charAt(0);
    prevBranch=thisBranch;
switch (thisChar) {
case ',':
      thisBranch=BRANCH_COMMA;
    if (prevChar == ',') {
      throw QueryError.$(lexer.position(),""String_Node_Str"");
    }
  if (braceCount == 0) {
    lexer.unparse();
    break OUT;
  }
while ((node=opStack.poll()) != null && node.token.charAt(0) != '(') {
  listener.onNode(node);
}
if (node != null) {
opStack.push(node);
}
paramCount++;
break;
case '(':
thisBranch=BRANCH_LEFT_BRACE;
braceCount++;
paramCountStack.push(paramCount);
paramCount=0;
opStack.push(exprNodePool.next().of(ExprNode.CONTROL,""String_Node_Str"",Integer.MAX_VALUE,lexer.position()));
break;
case ')':
if (prevChar == ',') {
throw QueryError.$(lexer.position(),""String_Node_Str"");
}
if (braceCount == 0) {
lexer.unparse();
break OUT;
}
thisBranch=BRANCH_RIGHT_BRACE;
braceCount--;
while ((node=opStack.poll()) != null && node.token.charAt(0) != '(') {
listener.onNode(node);
}
if ((node=opStack.peek()) != null && (node.type == ExprNode.LITERAL || (node.type == ExprNode.SET_OPERATION))) {
node.paramCount=(prevChar == '(' ? 0 : paramCount + 1) + (node.paramCount == 2 ? 1 : 0);
node.type=ExprNode.FUNCTION;
listener.onNode(node);
opStack.poll();
if (paramCountStack.notEmpty()) {
paramCount=paramCountStack.pop();
}
}
break;
case '`':
thisBranch=BRANCH_LAMBDA;
listener.onNode(exprNodePool.next().of(ExprNode.LAMBDA,tok.toString(),0,lexer.position()));
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case '""':
case '\'':
case 'N':
case 'n':
if ((thisChar != 'N' && thisChar != 'n') || Chars.equals(""String_Node_Str"",tok) || Chars.equals(""String_Node_Str"",tok)) {
thisBranch=BRANCH_CONSTANT;
listener.onNode(exprNodePool.next().of(ExprNode.CONSTANT,tok.toString(),0,lexer.position()));
break;
}
default :
ExprOperator op;
if ((op=ExprOperator.opMap.get(tok)) != null) {
thisBranch=BRANCH_OPERATOR;
int operatorType=op.type;
switch (thisChar) {
case '-':
switch (prevBranch) {
case BRANCH_OPERATOR:
case BRANCH_LEFT_BRACE:
case BRANCH_COMMA:
case BRANCH_NONE:
operatorType=ExprOperator.UNARY;
break;
default :
break;
}
break;
default :
break;
}
ExprNode other;
while ((other=opStack.peek()) != null) {
boolean greaterPrecedence=(op.leftAssociative && op.precedence >= other.precedence) || (!op.leftAssociative && op.precedence > other.precedence);
if (greaterPrecedence && (operatorType != ExprOperator.UNARY || (operatorType == ExprOperator.UNARY && other.paramCount == 1))) {
listener.onNode(other);
opStack.poll();
}
 else {
break;
}
}
node=exprNodePool.next().of(op.type == ExprOperator.SET ? ExprNode.SET_OPERATION : ExprNode.OPERATION,op.token,op.precedence,lexer.position());
switch (operatorType) {
case ExprOperator.UNARY:
node.paramCount=1;
break;
default :
node.paramCount=2;
break;
}
opStack.push(node);
}
 else if (!nonLiteralBranches.contains(thisBranch)) {
thisBranch=BRANCH_LITERAL;
opStack.push(exprNodePool.next().of(ExprNode.LITERAL,Chars.toString(tok),Integer.MIN_VALUE,lexer.position()));
}
 else {
lexer.unparse();
break OUT;
}
}
}
while ((node=opStack.poll()) != null) {
if (node.token.charAt(0) == '(') {
throw QueryError.$(node.position,""String_Node_Str"");
}
listener.onNode(node);
}
}",0.9966786603930252
31170,"@SuppressWarnings(""String_Node_Str"") private IntHashSet(int initialCapacity,double loadFactor){
  if (loadFactor <= 0d || loadFactor >= 1d) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.list=new IntList(initialCapacity);
  int capacity=Math.max(initialCapacity,(int)(initialCapacity / loadFactor));
  this.loadFactor=loadFactor;
  keys=new int[capacity < MIN_INITIAL_CAPACITY ? MIN_INITIAL_CAPACITY : Numbers.ceilPow2(capacity)];
  mask=keys.length - 1;
  free=this.capacity=initialCapacity;
  clear();
}","@SuppressWarnings(""String_Node_Str"") public IntHashSet(int initialCapacity,double loadFactor,int noEntryValue){
  this.noEntryValue=noEntryValue;
  if (loadFactor <= 0d || loadFactor >= 1d) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.list=new IntList(initialCapacity);
  int capacity=Math.max(initialCapacity,(int)(initialCapacity / loadFactor));
  this.loadFactor=loadFactor;
  keys=new int[capacity < MIN_INITIAL_CAPACITY ? MIN_INITIAL_CAPACITY : Numbers.ceilPow2(capacity)];
  mask=keys.length - 1;
  free=this.capacity=initialCapacity;
  clear();
}",0.9441441441441442
31171,"private void compileReplacePattern(VirtualColumn arg) throws ParserException {
  CharSequence pattern=arg.getFlyweightStr(null);
  if (pattern == null) {
    throw QueryError.$(arg.getPosition(),""String_Node_Str"");
  }
  int pos=arg.getPosition();
  int start=0;
  int index=-1;
  int dollar=-2;
  ConcatCharSequence concat=new ConcatCharSequence();
  boolean collectIndex=false;
  int n=pattern.length();
  for (int i=0; i < n; i++) {
    char c=pattern.charAt(i);
switch (c) {
case '$':
      if (i == dollar + 1) {
        throw QueryError.$(pos + i,""String_Node_Str"");
      }
    if (i > start) {
      concat.add(new FlyweightCharSequence().of(pattern,start,i - start));
    }
  collectIndex=true;
index=0;
dollar=i;
break;
default :
if (collectIndex) {
int k=c - '0';
if (k > -1 && k < 10) {
index=index * 10 + k;
}
 else {
if (i == dollar + 1) {
throw QueryError.$(pos + i,""String_Node_Str"");
}
concat.add(new GroupCharSequence(index));
start=i;
collectIndex=false;
index=-1;
}
}
break;
}
}
if (collectIndex) {
if (n == dollar + 1) {
throw QueryError.$(pos + n,""String_Node_Str"");
}
concat.add(new GroupCharSequence(index));
}
 else if (start < n) {
concat.add(new FlyweightCharSequence().of(pattern,start,n - start));
}
if (trivial=(concat.partCount() == 1)) {
left=new FlyweightCharSequence();
right=new FlyweightCharSequence();
concat.surroundWith(left,right);
}
this.replacePattern=concat;
}","private void compileReplacePattern(VirtualColumn arg) throws ParserException {
  CharSequence pattern=arg.getFlyweightStr(null);
  if (pattern == null) {
    throw QueryError.$(arg.getPosition(),""String_Node_Str"");
  }
  int pos=arg.getPosition();
  int start=0;
  int index=-1;
  int dollar=-2;
  int dollarCount=0;
  ConcatCharSequence concat=new ConcatCharSequence();
  boolean collectIndex=false;
  int n=pattern.length();
  for (int i=0; i < n; i++) {
    char c=pattern.charAt(i);
switch (c) {
case '$':
      if (i == dollar + 1) {
        throw QueryError.$(pos + i,""String_Node_Str"");
      }
    if (i > start) {
      concat.add(new FlyweightCharSequence().of(pattern,start,i - start));
    }
  collectIndex=true;
index=0;
dollar=i;
dollarCount++;
break;
default :
if (collectIndex) {
int k=c - '0';
if (k > -1 && k < 10) {
index=index * 10 + k;
}
 else {
if (i == dollar + 1) {
throw QueryError.$(pos + i,""String_Node_Str"");
}
concat.add(new GroupCharSequence(index));
start=i;
collectIndex=false;
index=-1;
}
}
break;
}
}
if (collectIndex) {
if (n == dollar + 1) {
throw QueryError.$(pos + n,""String_Node_Str"");
}
concat.add(new GroupCharSequence(index));
}
 else if (start < n) {
concat.add(new FlyweightCharSequence().of(pattern,start,n - start));
}
if (trivial=(dollarCount == 0)) {
left=new FlyweightCharSequence();
right=new FlyweightCharSequence();
concat.surroundWith(left,right);
}
this.replacePattern=concat;
}",0.9770723104056436
31172,"private RecordSource compileJoins(QueryModel model,JournalReaderFactory factory) throws ParserException {
  ObjList<QueryModel> joinModels=model.getJoinModels();
  IntList ordered=model.getOrderedJoinModels();
  RecordSource master=null;
  try {
    boolean needColumnNameHistogram=model.getColumns().size() > 0;
    model.getColumnNameHistogram().clear();
    for (int i=0, n=ordered.size(); i < n; i++) {
      int index=ordered.getQuick(i);
      QueryModel m=joinModels.getQuick(index);
      RecordSource slave=m.getRecordSource();
      if (slave == null) {
        slave=compileJournal(m,factory);
        if (m.getAlias() != null) {
          slave.getMetadata().setAlias(m.getAlias().token);
        }
      }
      if (needColumnNameHistogram) {
        model.createColumnNameHistogram(slave);
      }
      if (master == null) {
        master=analyseAndCompileOrderBy(model,slave);
      }
 else {
switch (m.getJoinType()) {
case QueryModel.JOIN_CROSS:
          master=new CrossJoinRecordSource(master,slave);
        break;
case QueryModel.JOIN_ASOF:
      master=createAsOfJoin(model.getTimestamp(),m,master,slave);
    break;
default :
  master=createHashJoin(m,master,slave);
break;
}
}
ExprNode filter=m.getPostJoinWhereClause();
if (filter != null) {
master=new FilteredRecordSource(master,virtualColumnBuilder.createVirtualColumn(model,filter,master.getMetadata()),filter);
}
}
if (joinModelIsFalse(model)) {
return new NoOpJournalRecordSource(master);
}
return master;
}
 catch (ParserException e) {
Misc.free(master);
throw e;
}
}","private RecordSource compileJoins(QueryModel model,JournalReaderFactory factory) throws ParserException {
  ObjList<QueryModel> joinModels=model.getJoinModels();
  IntList ordered=model.getOrderedJoinModels();
  RecordSource master=null;
  try {
    boolean needColumnNameHistogram=model.getColumns().size() > 0;
    model.getColumnNameHistogram().clear();
    for (int i=0, n=ordered.size(); i < n; i++) {
      int index=ordered.getQuick(i);
      QueryModel m=joinModels.getQuick(index);
      RecordSource slave=m.getRecordSource();
      if (slave == null) {
        slave=compileJournal(m,factory);
      }
 else {
        slave=filter(m,slave);
      }
      if (m.getAlias() != null) {
        slave.getMetadata().setAlias(m.getAlias().token);
      }
      if (needColumnNameHistogram) {
        model.createColumnNameHistogram(slave);
      }
      if (master == null) {
        master=analyseAndCompileOrderBy(model,slave);
      }
 else {
switch (m.getJoinType()) {
case QueryModel.JOIN_CROSS:
          master=new CrossJoinRecordSource(master,slave);
        break;
case QueryModel.JOIN_ASOF:
      master=createAsOfJoin(model.getTimestamp(),m,master,slave);
    break;
default :
  master=createHashJoin(m,master,slave);
break;
}
}
ExprNode filter=m.getPostJoinWhereClause();
if (filter != null) {
master=new FilteredRecordSource(master,virtualColumnBuilder.createVirtualColumn(model,filter,master.getMetadata()),filter);
}
}
if (joinModelIsFalse(model)) {
return new NoOpJournalRecordSource(master);
}
return master;
}
 catch (ParserException e) {
Misc.free(master);
throw e;
}
}",0.9793322734499204
31173,"public void surroundWith(CharSequence left,CharSequence right){
  CharSequence delegate=delegates.get(0);
  delegates.ensureCapacity(3);
  delegates.extendAndSet(0,left);
  delegates.extendAndSet(1,delegate);
  delegates.extendAndSet(2,right);
  lastSeq=left;
  lastSeqLen=left.length();
}","public void surroundWith(CharSequence left,CharSequence right){
  if (delegates.size() > 0) {
    CharSequence delegate=delegates.get(0);
    delegates.ensureCapacity(3);
    delegates.extendAndSet(0,left);
    delegates.extendAndSet(1,delegate);
    delegates.extendAndSet(2,right);
  }
 else {
    delegates.ensureCapacity(2);
    delegates.extendAndSet(0,left);
    delegates.extendAndSet(1,right);
  }
  lastSeq=left;
  lastSeqLen=left.length();
}",0.7810810810810811
31174,"@Override public short getShort(int col){
  return rec().getShort(col);
}","@Override public short getShort(int col){
  return rec.getShort(col);
}",0.9861111111111112
31175,"@Override public CharSequence getFlyweightStrB(int col){
  return rec().getFlyweightStrB(col);
}","@Override public CharSequence getFlyweightStrB(int col){
  return rec.getFlyweightStrB(col);
}",0.9894736842105264
31176,"@Override public long getRowId(){
  return rec().getRowId();
}","@Override public long getRowId(){
  return rec.getRowId();
}",0.9836065573770492
31177,"@Override public long getBinLen(int col){
  return rec().getBinLen(col);
}","@Override public long getBinLen(int col){
  return rec.getBinLen(col);
}",0.9863013698630136
31178,"@Override public double getDouble(int col){
  return rec().getDouble(col);
}","@Override public double getDouble(int col){
  return rec.getDouble(col);
}",0.9866666666666668
31179,"@Override public float getFloat(int col){
  return rec().getFloat(col);
}","@Override public float getFloat(int col){
  return rec.getFloat(col);
}",0.9861111111111112
31180,"@Override public CharSequence getFlyweightStr(int col){
  return rec().getFlyweightStr(col);
}","@Override public CharSequence getFlyweightStr(int col){
  return rec.getFlyweightStr(col);
}",0.989247311827957
31181,"@Override public long getLong(int col){
  return rec().getLong(col);
}","@Override public long getLong(int col){
  return rec.getLong(col);
}",0.9855072463768116
31182,"@Override public int getInt(int col){
  return rec().getInt(col);
}","@Override public int getInt(int col){
  return rec.getInt(col);
}",0.9848484848484848
31183,"@Override public void getStr(int col,CharSink sink){
  rec().getStr(col,sink);
}","@Override public void getStr(int col,CharSink sink){
  rec.getStr(col,sink);
}",0.9873417721518988
31184,"@Override public int getStrLen(int col){
  return rec().getStrLen(col);
}","@Override public int getStrLen(int col){
  return rec.getStrLen(col);
}",0.9861111111111112
31185,"@Override public byte get(int col){
  return rec().get(col);
}","@Override public byte get(int col){
  return rec.get(col);
}",0.9836065573770492
31186,"@Override public DirectInputStream getBin(int col){
  return rec().getBin(col);
}","@Override public DirectInputStream getBin(int col){
  return rec.getBin(col);
}",0.9875
31187,"@Override public String getSym(int col){
  return rec().getSym(col);
}","@Override public String getSym(int col){
  return rec.getSym(col);
}",0.9855072463768116
31188,"public void set_null(boolean _null){
  this._null=_null;
}","public void set_null(boolean _null){
  if (this._null != _null) {
    this.rec=_null ? NullRecord.INSTANCE : record;
    this._null=_null;
  }
}",0.5742574257425742
31189,"public NullableRecord(Record record){
  this.record=record;
}","public NullableRecord(Record record){
  this.record=this.rec=record;
}",0.931297709923664
31190,"@Override public long getDate(int col){
  return rec().getDate(col);
}","@Override public long getDate(int col){
  return rec.getDate(col);
}",0.9855072463768116
31191,"@Override public boolean getBool(int col){
  return rec().getBool(col);
}","@Override public boolean getBool(int col){
  return rec.getBool(col);
}",0.9861111111111112
31192,"@Override public Record next(){
  record.of(recordCursor.next());
  return record;
}","@Override public Record next(){
  recordCursor.next();
  return record;
}",0.929936305732484
31193,"public VirtualColumnRecordSource(RecordSource delegate,ObjList<VirtualColumn> virtualColumns){
  this.delegate=delegate;
  RecordMetadata dm=delegate.getMetadata();
  this.metadata=new VirtualRecordMetadata(dm,virtualColumns);
  this.record=new VirtualRecord(dm.getColumnCount(),virtualColumns);
  this.virtualColumnStorageFacade=VirtualColumnStorageFacade.INSTANCE;
  this.storageFacade=new SplitRecordStorageFacade(dm.getColumnCount());
}","public VirtualColumnRecordSource(RecordSource delegate,ObjList<VirtualColumn> virtualColumns){
  this.delegate=delegate;
  RecordMetadata dm=delegate.getMetadata();
  this.metadata=new VirtualRecordMetadata(dm,virtualColumns);
  this.record=new VirtualRecord(dm.getColumnCount(),virtualColumns,delegate.getRecord());
  this.virtualColumnStorageFacade=VirtualColumnStorageFacade.INSTANCE;
  this.storageFacade=new SplitRecordStorageFacade(dm.getColumnCount());
}",0.97669256381798
31194,"@Override public Record newRecord(){
  return record.copy().of(delegate.newRecord());
}","@Override public Record newRecord(){
  return record.copy(delegate.newRecord());
}",0.970414201183432
31195,"@Override public PartitionCursor prepareCursor(JournalReaderFactory factory){
  try {
    this.journal=factory.reader(metadata);
  }
 catch (  JournalException e) {
    throw new JournalRuntimeException(e);
  }
  storageFacade.of(metadata);
  partitionCount=journal.getPartitionCount();
  partitionIndex=0;
  return this;
}","@Override public PartitionCursor prepareCursor(JournalReaderFactory factory){
  try {
    this.journal=factory.reader(metadata);
  }
 catch (  JournalException e) {
    throw new JournalRuntimeException(e);
  }
  storageFacade.of(journal.getMetadata());
  partitionCount=journal.getPartitionCount();
  partitionIndex=0;
  return this;
}",0.9559939301972686
31196,"@Override public Record next(){
  long ts=masterCursor.next().getDate(masterTimestampIndex);
  Record delayed=delayedHolder.peek();
  if (delayed != null) {
    if (ts > delayed.getDate(slaveTimestampIndex)) {
      recordHolder.write(delayed);
      delayedHolder.clear();
    }
 else {
      nullableRecord.set_null(true);
      return record;
    }
  }
  while (slaveCursor.hasNext()) {
    Record slave=slaveCursor.next();
    if (ts > slave.getDate(slaveTimestampIndex)) {
      recordHolder.write(slave);
    }
 else {
      nullableRecord.set_null(recordHolder.peek() == null);
      recordHolder.clear();
      delayedHolder.write(slave);
      return record;
    }
  }
  nullableRecord.set_null(recordHolder.peek() == null);
  return record;
}","@Override public Record next(){
  long ts=masterCursor.next().getDate(masterTimestampIndex);
  Record delayed=delayedHolder.peek();
  if (delayed != null) {
    if (ts > delayed.getDate(slaveTimestampIndex)) {
      recordHolder.write(delayed);
      delayedHolder.clear();
    }
 else {
      nullableRecord.set_null(true);
      return record;
    }
  }
  while (slaveCursor.hasNext()) {
    Record slave=slaveCursor.next();
    if (ts > slave.getDate(slaveTimestampIndex)) {
      recordHolder.write(slave);
    }
 else {
      delayedHolder.write(slave);
      nullableRecord.set_null(recordHolder.peek() == null);
      recordHolder.clear();
      return record;
    }
  }
  nullableRecord.set_null(recordHolder.peek() == null);
  return record;
}",0.9547872340425532
31197,"private RecordSource createAsOfJoin(ExprNode masterTimestampNode,QueryModel model,RecordSource master,RecordSource slave) throws ParserException {
  JoinContext jc=model.getContext();
  ExprNode slaveTimestampNode=model.getTimestamp();
  RecordMetadata masterMetadata=master.getMetadata();
  RecordMetadata slaveMetadata=slave.getMetadata();
  int slaveTimestampIndex=getTimestampIndex(model,slaveTimestampNode,slaveMetadata);
  int masterTimestampIndex=getTimestampIndex(model,masterTimestampNode,masterMetadata);
  if (jc == null) {
    return new AsOfJoinRecordSource(master,masterTimestampIndex,slave,slaveTimestampIndex);
  }
 else {
    int sz=jc.aNames.size();
    CharSequenceHashSet slaveKeys=new CharSequenceHashSet();
    CharSequenceHashSet masterKeys=new CharSequenceHashSet();
    for (int i=0; i < sz; i++) {
      slaveKeys.add(jc.aNames.getQuick(i));
      masterKeys.add(jc.bNames.getQuick(i));
    }
    return new AsOfPartitionedJoinRecordSource(master,masterTimestampIndex,slave,slaveTimestampIndex,masterKeys,slaveKeys,configuration.getDbAsOfDataPage(),configuration.getDbAsOfIndexPage(),configuration.getDbAsOfRowPage());
  }
}","private RecordSource createAsOfJoin(ExprNode masterTimestampNode,QueryModel model,RecordSource master,RecordSource slave) throws ParserException {
  JoinContext jc=model.getContext();
  ExprNode slaveTimestampNode=model.getTimestamp();
  RecordMetadata masterMetadata=master.getMetadata();
  RecordMetadata slaveMetadata=slave.getMetadata();
  int slaveTimestampIndex=getTimestampIndex(model,slaveTimestampNode,slaveMetadata);
  int masterTimestampIndex=getTimestampIndex(model,masterTimestampNode,masterMetadata);
  if (jc.bIndexes.size() == 0) {
    return new AsOfJoinRecordSource(master,masterTimestampIndex,slave,slaveTimestampIndex);
  }
 else {
    int sz=jc.aNames.size();
    CharSequenceHashSet slaveKeys=new CharSequenceHashSet();
    CharSequenceHashSet masterKeys=new CharSequenceHashSet();
    for (int i=0; i < sz; i++) {
      slaveKeys.add(jc.aNames.getQuick(i));
      masterKeys.add(jc.bNames.getQuick(i));
    }
    return new AsOfPartitionedJoinRecordSource(master,masterTimestampIndex,slave,slaveTimestampIndex,masterKeys,slaveKeys,configuration.getDbAsOfDataPage(),configuration.getDbAsOfIndexPage(),configuration.getDbAsOfRowPage());
  }
}",0.9909208819714656
31198,"private boolean analyzeEquals(IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
  return node.paramCount == 2 && (analyzeEquals0(model,node,node.lhs,node.rhs,m) || analyzeEquals0(model,node,node.rhs,node.lhs,m));
}","private boolean analyzeEquals(IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
  checkNodeValid(node);
  return analyzeEquals0(model,node,node.lhs,node.rhs,m) || analyzeEquals0(model,node,node.rhs,node.lhs,m);
}",0.8672199170124482
31199,"private boolean analyzeGreater(IntrinsicModel model,ExprNode node,int inc) throws ParserException {
  if (timestamp == null) {
    return false;
  }
  if (node.lhs.type == ExprNode.LITERAL && node.lhs.token.equals(timestamp)) {
    try {
      long lo=Dates.tryParse(quoteEraser.ofQuoted(node.rhs.token)) + inc;
      if (lo > model.intervalLo) {
        model.intervalLo=lo;
      }
      node.intrinsicValue=IntrinsicValue.TRUE;
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.rhs.position,""String_Node_Str"");
    }
  }
  if (node.rhs.type == ExprNode.LITERAL && node.rhs.token.equals(timestamp)) {
    try {
      long hi=Dates.tryParse(quoteEraser.ofQuoted(node.lhs.token)) - inc;
      if (hi < model.intervalHi) {
        model.intervalHi=hi;
      }
      node.intrinsicValue=IntrinsicValue.TRUE;
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.lhs.position,""String_Node_Str"");
    }
  }
  return false;
}","private boolean analyzeGreater(IntrinsicModel model,ExprNode node,int inc) throws ParserException {
  checkNodeValid(node);
  if (Chars.equals(node.lhs.token,node.rhs.token)) {
    model.intrinsicValue=IntrinsicValue.FALSE;
    return false;
  }
  if (timestamp == null) {
    return false;
  }
  if (node.lhs.type == ExprNode.LITERAL && node.lhs.token.equals(timestamp)) {
    try {
      long lo=Dates.tryParse(quoteEraser.ofQuoted(node.rhs.token)) + inc;
      if (lo > model.intervalLo) {
        model.intervalLo=lo;
      }
      node.intrinsicValue=IntrinsicValue.TRUE;
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.rhs.position,""String_Node_Str"");
    }
  }
  if (node.rhs.type == ExprNode.LITERAL && node.rhs.token.equals(timestamp)) {
    try {
      long hi=Dates.tryParse(quoteEraser.ofQuoted(node.lhs.token)) - inc;
      if (hi < model.intervalHi) {
        model.intervalHi=hi;
      }
      node.intrinsicValue=IntrinsicValue.TRUE;
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.lhs.position,""String_Node_Str"");
    }
  }
  return false;
}",0.9315838800374884
31200,"private boolean removeAndIntrinsics(IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
  if (node == null) {
    return true;
  }
switch (node.token) {
case ""String_Node_Str"":
    return analyzeIn(model,node,m);
case ""String_Node_Str"":
  return analyzeGreater(model,node,1);
case ""String_Node_Str"":
return analyzeGreater(model,node,0);
case ""String_Node_Str"":
return analyzeLess(model,node,1);
case ""String_Node_Str"":
return analyzeLess(model,node,0);
case ""String_Node_Str"":
return analyzeEquals(model,node,m);
default :
return false;
}
}","private boolean removeAndIntrinsics(IntrinsicModel model,ExprNode node,RecordMetadata m) throws ParserException {
switch (node.token) {
case ""String_Node_Str"":
    return analyzeIn(model,node,m);
case ""String_Node_Str"":
  return analyzeGreater(model,node,1);
case ""String_Node_Str"":
return analyzeGreater(model,node,0);
case ""String_Node_Str"":
return analyzeLess(model,node,1);
case ""String_Node_Str"":
return analyzeLess(model,node,0);
case ""String_Node_Str"":
return analyzeEquals(model,node,m);
case ""String_Node_Str"":
return analyzeNotEquals(model,node);
default :
return false;
}
}",0.9095652173913044
31201,"private boolean analyzeEquals0(IntrinsicModel model,ExprNode node,ExprNode a,ExprNode b,RecordMetadata m) throws ParserException {
  if (a == null || b == null) {
    throw QueryError.$(node.position,""String_Node_Str"");
  }
  if (a.type == ExprNode.LITERAL && b.type == ExprNode.CONSTANT) {
    if (isTimestamp(a)) {
      boolean reversible=parseInterval(model,quoteEraser.ofQuoted(b.token),b.position);
      node.intrinsicValue=IntrinsicValue.TRUE;
      if (reversible) {
        timestampNodes.add(node);
      }
      return true;
    }
 else {
      if (m.getColumnIndexQuiet(a.token) == -1) {
        throw QueryError.invalidColumn(a.position,a.token);
      }
      RecordColumnMetadata meta=m.getColumn(a.token);
switch (meta.getType()) {
case ColumnType.SYMBOL:
case ColumnType.STRING:
case ColumnType.LONG:
case ColumnType.INT:
        if (meta.isIndexed()) {
          if (preferredKeyColumn != null && !preferredKeyColumn.equals(a.token)) {
            return false;
          }
          boolean newColumn=true;
          if (model.keyColumn != null && (newColumn=!model.keyColumn.equals(a.token)) && meta.getBucketCount() <= m.getColumn(model.keyColumn).getBucketCount()) {
            return false;
          }
          String value=Chars.equals(""String_Node_Str"",b.token) ? null : Chars.stripQuotes(b.token);
          if (newColumn) {
            model.keyColumn=a.token;
            model.keyValues.clear();
            model.keyValuePositions.clear();
            model.keyValues.add(value);
            model.keyValuePositions.add(b.position);
            for (int n=0, k=keyNodes.size(); n < k; n++) {
              keyNodes.getQuick(n).intrinsicValue=IntrinsicValue.UNDEFINED;
            }
            keyNodes.clear();
          }
 else {
            if (model.keyValues.contains(value)) {
              model.keyValues.clear();
              model.keyValuePositions.clear();
              model.keyValues.add(value);
              model.keyValuePositions.add(b.position);
            }
 else {
              model.intrinsicValue=IntrinsicValue.FALSE;
              return false;
            }
          }
          keyNodes.add(node);
          node.intrinsicValue=IntrinsicValue.TRUE;
          return true;
        }
default :
      return false;
  }
}
}
return false;
}","private boolean analyzeEquals0(IntrinsicModel model,ExprNode node,ExprNode a,ExprNode b,RecordMetadata m) throws ParserException {
  if (Chars.equals(a.token,b.token)) {
    node.intrinsicValue=IntrinsicValue.TRUE;
    return true;
  }
  if (a.type == ExprNode.LITERAL && b.type == ExprNode.CONSTANT) {
    if (isTimestamp(a)) {
      boolean reversible=parseInterval(model,quoteEraser.ofQuoted(b.token),b.position);
      node.intrinsicValue=IntrinsicValue.TRUE;
      if (reversible) {
        timestampNodes.add(node);
      }
      return true;
    }
 else {
      if (m.getColumnIndexQuiet(a.token) == -1) {
        throw QueryError.invalidColumn(a.position,a.token);
      }
      RecordColumnMetadata meta=m.getColumn(a.token);
switch (meta.getType()) {
case ColumnType.SYMBOL:
case ColumnType.STRING:
case ColumnType.LONG:
case ColumnType.INT:
        if (meta.isIndexed()) {
          if (preferredKeyColumn != null && !preferredKeyColumn.equals(a.token)) {
            return false;
          }
          boolean newColumn=true;
          if (model.keyColumn != null && (newColumn=!model.keyColumn.equals(a.token)) && meta.getBucketCount() <= m.getColumn(model.keyColumn).getBucketCount()) {
            return false;
          }
          String value=Chars.equals(""String_Node_Str"",b.token) ? null : Chars.stripQuotes(b.token);
          if (newColumn) {
            model.keyColumn=a.token;
            model.keyValues.clear();
            model.keyValuePositions.clear();
            model.keyValues.add(value);
            model.keyValuePositions.add(b.position);
            for (int n=0, k=keyNodes.size(); n < k; n++) {
              keyNodes.getQuick(n).intrinsicValue=IntrinsicValue.UNDEFINED;
            }
            keyNodes.clear();
          }
 else {
            if (model.keyValues.contains(value)) {
              model.keyValues.clear();
              model.keyValuePositions.clear();
              model.keyValues.add(value);
              model.keyValuePositions.add(b.position);
            }
 else {
              model.intrinsicValue=IntrinsicValue.FALSE;
              return false;
            }
          }
          keyNodes.add(node);
          node.intrinsicValue=IntrinsicValue.TRUE;
          return true;
        }
default :
      return false;
  }
}
}
return false;
}",0.9631396357328708
31202,"private boolean analyzeLess(IntrinsicModel model,ExprNode node,int inc) throws ParserException {
  if (timestamp == null) {
    return false;
  }
  if (node.lhs.type == ExprNode.LITERAL && node.lhs.token.equals(timestamp)) {
    try {
      long hi=Dates.tryParse(quoteEraser.ofQuoted(node.rhs.token)) - inc;
      if (hi < model.intervalHi) {
        model.intervalHi=hi;
      }
      node.intrinsicValue=IntrinsicValue.TRUE;
      timestampNodes.add(node);
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.rhs.position,""String_Node_Str"");
    }
  }
  if (node.rhs.type == ExprNode.LITERAL && node.rhs.token.equals(timestamp)) {
    try {
      long lo=Dates.tryParse(quoteEraser.ofQuoted(node.lhs.token)) + inc;
      if (lo > model.intervalLo) {
        model.intervalLo=lo;
      }
      node.intrinsicValue=IntrinsicValue.TRUE;
      timestampNodes.add(node);
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.lhs.position,""String_Node_Str"");
    }
  }
  return false;
}","private boolean analyzeLess(IntrinsicModel model,ExprNode node,int inc) throws ParserException {
  checkNodeValid(node);
  if (Chars.equals(node.lhs.token,node.rhs.token)) {
    model.intrinsicValue=IntrinsicValue.FALSE;
    return false;
  }
  if (timestamp == null) {
    return false;
  }
  if (node.lhs.type == ExprNode.LITERAL && node.lhs.token.equals(timestamp)) {
    try {
      long hi=Dates.tryParse(quoteEraser.ofQuoted(node.rhs.token)) - inc;
      if (hi < model.intervalHi) {
        model.intervalHi=hi;
      }
      node.intrinsicValue=IntrinsicValue.TRUE;
      timestampNodes.add(node);
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.rhs.position,""String_Node_Str"");
    }
  }
  if (node.rhs.type == ExprNode.LITERAL && node.rhs.token.equals(timestamp)) {
    try {
      long lo=Dates.tryParse(quoteEraser.ofQuoted(node.lhs.token)) + inc;
      if (lo > model.intervalLo) {
        model.intervalLo=lo;
      }
      node.intrinsicValue=IntrinsicValue.TRUE;
      timestampNodes.add(node);
      return true;
    }
 catch (    NumericException e) {
      throw QueryError.$(node.lhs.position,""String_Node_Str"");
    }
  }
  return false;
}",0.9352836879432624
31203,"private void parseSelectColumns(QueryModel model) throws ParserException {
  CharSequence tok;
  while (true) {
    ExprNode expr=expr();
    String alias;
    int aliasPosition=lexer.position();
    tok=tok();
    if (!columnAliasStop.contains(tok)) {
      alias=tok.toString();
      tok=tok();
    }
 else {
      alias=null;
      aliasPosition=-1;
    }
    if (Chars.equals(tok,""String_Node_Str"")) {
      expectTok('(');
      AnalyticColumn col=analyticColumnPool.next().of(alias,aliasPosition,expr);
      tok=tok();
      if (Chars.equals(tok,""String_Node_Str"")) {
        expectTok(tok(),""String_Node_Str"");
        ObjList<ExprNode> partitionBy=col.getPartitionBy();
        do {
          partitionBy.add(expectLiteral());
          tok=tok();
        }
 while (Chars.equals(tok,','));
      }
      if (Chars.equals(tok,""String_Node_Str"")) {
        expectTok(tok(),""String_Node_Str"");
        do {
          ExprNode e=expectLiteral();
          tok=tok();
          if (Chars.equalsIgnoreCase(tok,""String_Node_Str"")) {
            col.addOrderBy(e,QueryModel.ORDER_DIRECTION_DESCENDING);
            tok=tok();
          }
 else {
            col.addOrderBy(e,QueryModel.ORDER_DIRECTION_ASCENDING);
            if (Chars.equalsIgnoreCase(tok,""String_Node_Str"")) {
              tok=tok();
            }
          }
        }
 while (Chars.equals(tok,','));
      }
      if (!Chars.equals(tok,')')) {
        throw err(""String_Node_Str"");
      }
      model.addColumn(col);
      tok=tok();
    }
 else {
      model.addColumn(queryColumnPool.next().of(alias,aliasPosition,expr));
    }
    if (Chars.equals(tok,""String_Node_Str"")) {
      break;
    }
    if (!Chars.equals(tok,',')) {
      throw err(""String_Node_Str"");
    }
  }
}","private void parseSelectColumns(QueryModel model) throws ParserException {
  CharSequence tok;
  while (true) {
    ExprNode expr=expr();
    if (expr == null) {
      throw QueryError.$(lexer.position(),""String_Node_Str"");
    }
    String alias;
    int aliasPosition=lexer.position();
    tok=tok();
    if (!columnAliasStop.contains(tok)) {
      alias=tok.toString();
      tok=tok();
    }
 else {
      alias=null;
      aliasPosition=-1;
    }
    if (Chars.equals(tok,""String_Node_Str"")) {
      expectTok('(');
      AnalyticColumn col=analyticColumnPool.next().of(alias,aliasPosition,expr);
      tok=tok();
      if (Chars.equals(tok,""String_Node_Str"")) {
        expectTok(tok(),""String_Node_Str"");
        ObjList<ExprNode> partitionBy=col.getPartitionBy();
        do {
          partitionBy.add(expectLiteral());
          tok=tok();
        }
 while (Chars.equals(tok,','));
      }
      if (Chars.equals(tok,""String_Node_Str"")) {
        expectTok(tok(),""String_Node_Str"");
        do {
          ExprNode e=expectLiteral();
          tok=tok();
          if (Chars.equalsIgnoreCase(tok,""String_Node_Str"")) {
            col.addOrderBy(e,QueryModel.ORDER_DIRECTION_DESCENDING);
            tok=tok();
          }
 else {
            col.addOrderBy(e,QueryModel.ORDER_DIRECTION_ASCENDING);
            if (Chars.equalsIgnoreCase(tok,""String_Node_Str"")) {
              tok=tok();
            }
          }
        }
 while (Chars.equals(tok,','));
      }
      if (!Chars.equals(tok,')')) {
        throw err(""String_Node_Str"");
      }
      model.addColumn(col);
      tok=tok();
    }
 else {
      model.addColumn(queryColumnPool.next().of(alias,aliasPosition,expr));
    }
    if (Chars.equals(tok,""String_Node_Str"")) {
      break;
    }
    if (!Chars.equals(tok,',')) {
      throw err(""String_Node_Str"");
    }
  }
}",0.9744160177975528
31204,"public MappedByteBuffer getBuffer(long offset,int size){
  if (offset > cachedBufferLo && offset + size < cachedBufferHi) {
    cachedBuffer.position((int)(offset - cachedBufferLo - 1));
  }
 else {
    cachedBuffer=getBufferInternal(offset,size);
    cachedBufferLo=offset - cachedBuffer.position() - 1;
    cachedBufferHi=cachedBufferLo + cachedBuffer.limit() + 2;
    cachedAddress=ByteBuffers.getAddress(cachedBuffer);
  }
  return cachedBuffer;
}","public MappedByteBuffer getBuffer(long offset,int size){
  if (offset > cachedBufferLo && offset + size < cachedBufferHi) {
    cachedBuffer.position((int)(offset - cachedBufferLo - 1));
  }
 else {
    cachedBuffer=getBufferInternal(offset,size);
    cachedBufferLo=offset - cachedBuffer.position() - 1;
    cachedBufferHi=cachedBufferLo + cachedBuffer.limit() + 2;
    cachedAddress=ByteBuffers.getAddress(cachedBuffer);
    cachedPointer=cachedAddress - cachedBufferLo - 1;
  }
  return cachedBuffer;
}",0.9435146443514644
31205,"public long addressOf(long offset,int size){
  if (offset > cachedBufferLo && offset + size < cachedBufferHi) {
    return cachedAddress + offset - cachedBufferLo - 1;
  }
 else {
    return allocateAddress(offset,size);
  }
}","public long addressOf(long offset,int size){
  if (offset > cachedBufferLo && offset + size < cachedBufferHi) {
    return cachedPointer + offset;
  }
 else {
    return allocateAddress(offset,size);
  }
}",0.9187935034802784
31206,"private long allocateAddress(long offset,int size){
  cachedBuffer=getBufferInternal(offset,size);
  int p=cachedBuffer.position();
  cachedBufferLo=offset - p - 1;
  cachedBufferHi=cachedBufferLo + cachedBuffer.limit() + 2;
  cachedAddress=ByteBuffers.getAddress(cachedBuffer);
  return cachedAddress + p;
}","private long allocateAddress(long offset,int size){
  cachedBuffer=getBufferInternal(offset,size);
  int p=cachedBuffer.position();
  cachedBufferLo=offset - p - 1;
  cachedBufferHi=cachedBufferLo + cachedBuffer.limit() + 2;
  cachedAddress=ByteBuffers.getAddress(cachedBuffer);
  cachedPointer=cachedAddress - cachedBufferLo - 1;
  return cachedAddress + p;
}",0.9221556886227544
31207,"public CharSequence getFlyweightStrB(long localRowID){
  long offset=indexColumn.getLong(localRowID);
  int len=Unsafe.getUnsafe().getInt(mappedFile.addressOf(offset,4));
  if (len == NULL_LEN) {
    return null;
  }
  long lo=mappedFile.addressOf(offset + 4,len * 2);
  return csB.of(lo,lo + len * 2);
}","public CharSequence getFlyweightStrB(long localRowID){
  return getFlyweightStr0(localRowID,csB);
}",0.4119106699751861
31208,"public CharSequence getFlyweightStr(long localRowID){
  long offset=indexColumn.getLong(localRowID);
  int len=Unsafe.getUnsafe().getInt(mappedFile.addressOf(offset,4));
  if (len == NULL_LEN) {
    return null;
  }
  long lo=mappedFile.addressOf(offset + 4,len * 2);
  return csA.of(lo,lo + len * 2);
}","public CharSequence getFlyweightStr(long localRowID){
  return getFlyweightStr0(localRowID,csA);
}",0.4089775561097257
31209,"@Override public AnalyticColumn of(String alias,ExprNode ast){
  return (AnalyticColumn)super.of(alias,ast);
}","@Override public AnalyticColumn of(String alias,int aliasPosition,ExprNode ast){
  return (AnalyticColumn)super.of(alias,aliasPosition,ast);
}",0.873015873015873
31210,"public QueryColumn of(String alias,ExprNode ast){
  this.alias=alias;
  this.ast=ast;
  return this;
}","public QueryColumn of(String alias,int aliasPosition,ExprNode ast){
  this.alias=alias;
  this.aliasPosition=aliasPosition;
  this.ast=ast;
  return this;
}",0.7906976744186046
31211,"private static void createColumnNameHistogram0(CharSequenceIntHashMap histogram,QueryModel model,JournalReaderFactory factory,boolean ignoreJoins) throws ParserException {
  ObjList<QueryModel> jm=model.getJoinModels();
  int jmSize=ignoreJoins ? 0 : jm.size();
  int n=model.getColumns().size();
  if (n > 0) {
    for (int i=0; i < n; i++) {
      QueryColumn qc=model.getColumns().getQuick(i);
switch (qc.getAst().type) {
case ExprNode.LITERAL:
        if (qc.getAlias() != null) {
          histogram.increment(qc.getAlias());
        }
 else {
          histogram.increment(qc.getAst().token);
        }
      break;
default :
    break;
}
}
}
 else if (jmSize > 0) {
for (int i=0; i < jmSize; i++) {
createColumnNameHistogram0(histogram,jm.getQuick(i),factory,true);
}
}
 else if (model.getJournalName() != null) {
RecordMetadata m=model.collectJournalMetadata(factory);
for (int i=0, k=m.getColumnCount(); i < k; i++) {
histogram.increment(m.getColumnName(i));
}
}
 else {
createColumnNameHistogram0(histogram,model.getNestedModel(),factory,false);
}
}","private static void createColumnNameHistogram0(CharSequenceIntHashMap histogram,QueryModel model,JournalReaderFactory factory,boolean ignoreJoins) throws ParserException {
  ObjList<QueryModel> jm=model.getJoinModels();
  int jmSize=ignoreJoins ? 0 : jm.size();
  int n=model.getColumns().size();
  if (n > 0) {
    for (int i=0; i < n; i++) {
      QueryColumn qc=model.getColumns().getQuick(i);
switch (qc.getAst().type) {
case ExprNode.LITERAL:
        histogram.increment(qc.getName());
      break;
default :
    break;
}
}
}
 else if (jmSize > 0) {
for (int i=0; i < jmSize; i++) {
createColumnNameHistogram0(histogram,jm.getQuick(i),factory,true);
}
}
 else if (model.getJournalName() != null) {
RecordMetadata m=model.collectJournalMetadata(factory);
for (int i=0, k=m.getColumnCount(); i < k; i++) {
histogram.increment(m.getColumnName(i));
}
}
 else {
createColumnNameHistogram0(histogram,model.getNestedModel(),factory,false);
}
}",0.914
31212,"private RecordSource selectColumns0(final RecordSource recordSource,QueryModel model) throws ParserException {
  final ObjList<QueryColumn> columns=model.getColumns();
  final CharSequenceIntHashMap columnNameHistogram=model.getColumnNameHistogram();
  final RecordMetadata meta=recordSource.getMetadata();
  this.outerVirtualColumns.clear();
  this.aggregators.clear();
  this.selectedColumns.clear();
  this.selectedColumnAliases.clear();
  this.groupKeyColumns.clear();
  this.aggregateColumnSequence=0;
  this.analyticColumns.clear();
  ObjList<VirtualColumn> virtualColumns=null;
  try {
    for (int i=0, k=columns.size(); i < k; i++) {
      final QueryColumn qc=columns.getQuick(i);
      final ExprNode node=qc.getAst();
      final boolean analytic=qc instanceof AnalyticColumn;
      if (!analytic && node.type == ExprNode.LITERAL) {
        if (meta.getColumnIndexQuiet(node.token) == -1) {
          throw QueryError.invalidColumn(node.position,node.token);
        }
        if (columnNameHistogram.get(node.token) > 0) {
          throw QueryError.ambiguousColumn(node.position);
        }
        selectedColumns.add(node.token);
        addAlias(node.position,qc.getAlias() == null ? node.token : qc.getAlias());
        groupKeyColumns.add(node.token);
        continue;
      }
      if (qc.getAlias() == null) {
        qc.of(createAlias(aggregateColumnSequence++),node);
      }
      selectedColumns.add(qc.getAlias());
      addAlias(node.position,qc.getAlias());
      if (!analytic && node.type == ExprNode.FUNCTION && FunctionFactories.isAggregate(node.token)) {
        aggregators.add(qc);
        continue;
      }
      if (node.type == ExprNode.OPERATION || node.type == ExprNode.FUNCTION) {
        int beforeSplit=aggregators.size();
        splitAggregates(node,aggregators);
        if (beforeSplit < aggregators.size()) {
          outerVirtualColumns.add(qc);
          continue;
        }
      }
      if (analytic) {
        if (qc.getAst().type != ExprNode.FUNCTION) {
          throw QueryError.$(qc.getAst().position,""String_Node_Str"");
        }
        if (aggregators.size() > 0) {
          throw QueryError.$(qc.getAst().position,""String_Node_Str"");
        }
        AnalyticColumn ac=(AnalyticColumn)qc;
        analyticColumns.add(ac);
      }
 else {
        if (virtualColumns == null) {
          virtualColumns=new ObjList<>();
        }
        VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),recordSource.getMetadata());
        vc.setName(qc.getAlias());
        virtualColumns.add(vc);
        groupKeyColumns.add(qc.getAlias());
      }
    }
  }
 catch (  ParserException e) {
    Misc.free(recordSource);
    throw e;
  }
  RecordSource rs=recordSource;
  if (virtualColumns != null) {
    rs=new VirtualColumnRecordSource(rs,virtualColumns);
  }
  if (aggregators.size() > 0) {
    rs=compileAggregates(rs,model);
  }
 else {
    ExprNode sampleBy=model.getSampleBy();
    if (sampleBy != null) {
      Misc.free(rs);
      throw QueryError.$(sampleBy.position,""String_Node_Str"");
    }
  }
  if (outerVirtualColumns.size() > 0) {
    rs=compileOuterVirtualColumns(rs,model);
  }
  if (analyticColumns.size() > 0) {
    rs=compileAnalytic(rs,model);
  }
  if (selectedColumns.size() > 0) {
    rs=new SelectedColumnsRecordSource(rs,selectedColumns,selectedColumnAliases);
  }
  return rs;
}","private RecordSource selectColumns0(final RecordSource recordSource,QueryModel model) throws ParserException {
  final ObjList<QueryColumn> columns=model.getColumns();
  final CharSequenceIntHashMap columnNameHistogram=model.getColumnNameHistogram();
  final RecordMetadata meta=recordSource.getMetadata();
  this.outerVirtualColumns.clear();
  this.innerVirtualColumn.clear();
  this.aggregators.clear();
  this.selectedColumns.clear();
  this.selectedColumnAliases.clear();
  this.groupKeyColumns.clear();
  this.aggregateColumnSequence=0;
  this.analyticColumns.clear();
  RecordSource rs=recordSource;
  try {
    for (int i=0, k=columns.size(); i < k; i++) {
      final QueryColumn qc=columns.getQuick(i);
      final ExprNode node=qc.getAst();
      final boolean analytic=qc instanceof AnalyticColumn;
      if (!analytic && node.type == ExprNode.LITERAL) {
        if (meta.getColumnIndexQuiet(node.token) == -1) {
          throw QueryError.invalidColumn(node.position,node.token);
        }
        if (columnNameHistogram.get(node.token) > 0) {
          throw QueryError.ambiguousColumn(node.position);
        }
        selectedColumns.add(node.token);
        addAlias(node.position,qc.getName());
        groupKeyColumns.add(node.token);
        continue;
      }
      if (qc.getAlias() == null) {
        qc.of(createAlias(aggregateColumnSequence++),node.position,node);
      }
      selectedColumns.add(qc.getAlias());
      addAlias(node.position,qc.getAlias());
      if (!analytic && node.type == ExprNode.FUNCTION && FunctionFactories.isAggregate(node.token)) {
        aggregators.add(qc);
        continue;
      }
      if (node.type == ExprNode.OPERATION || node.type == ExprNode.FUNCTION) {
        int beforeSplit=aggregators.size();
        splitAggregates(node,aggregators);
        if (beforeSplit < aggregators.size()) {
          outerVirtualColumns.add(qc);
          continue;
        }
      }
      if (analytic) {
        if (qc.getAst().type != ExprNode.FUNCTION) {
          throw QueryError.$(qc.getAst().position,""String_Node_Str"");
        }
        if (aggregators.size() > 0) {
          throw QueryError.$(qc.getAst().position,""String_Node_Str"");
        }
        AnalyticColumn ac=(AnalyticColumn)qc;
        analyticColumns.add(ac);
      }
 else {
        innerVirtualColumn.add(qc);
      }
    }
    if (innerVirtualColumn.size() > 0) {
      ObjList<VirtualColumn> virtualColumns=new ObjList<>();
      final String timestampName;
      if (model.getSampleBy() != null) {
        timestampName=meta.getColumnName(getTimestampIndex(model,model.getTimestamp(),meta));
      }
 else {
        timestampName=null;
      }
      for (int i=0, n=innerVirtualColumn.size(); i < n; i++) {
        QueryColumn qc=innerVirtualColumn.getQuick(i);
        if (Chars.equalsNc(qc.getAlias(),timestampName)) {
          throw QueryError.$(qc.getAliasPosition() == -1 ? qc.getAst().position : qc.getAliasPosition(),""String_Node_Str"");
        }
        VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),meta);
        vc.setName(qc.getAlias());
        virtualColumns.add(vc);
        groupKeyColumns.add(qc.getAlias());
      }
      rs=new VirtualColumnRecordSource(rs,virtualColumns);
    }
    if (aggregators.size() > 0) {
      rs=compileAggregates(rs,model);
    }
 else {
      ExprNode sampleBy=model.getSampleBy();
      if (sampleBy != null) {
        throw QueryError.$(sampleBy.position,""String_Node_Str"");
      }
    }
    if (outerVirtualColumns.size() > 0) {
      rs=compileOuterVirtualColumns(rs,model);
    }
    if (analyticColumns.size() > 0) {
      rs=compileAnalytic(rs,model);
    }
    if (selectedColumns.size() > 0) {
      rs=new SelectedColumnsRecordSource(rs,selectedColumns,selectedColumnAliases);
    }
    return rs;
  }
 catch (  ParserException e) {
    Misc.free(rs);
    throw e;
  }
}",0.715818431911967
31213,"private void createOrderHash(QueryModel model){
  CharSequenceIntHashMap hash=model.getOrderHash();
  hash.clear();
  final ObjList<ExprNode> orderBy=model.getOrderBy();
  final int n=orderBy.size();
  final ObjList<QueryColumn> columns=model.getColumns();
  final int m=columns.size();
  final QueryModel nestedModel=model.getNestedModel();
  if (n > 0) {
    final IntList orderByDirection=model.getOrderByDirection();
    for (int i=0; i < n; i++) {
      hash.put(orderBy.getQuick(i).token,orderByDirection.getQuick(i));
    }
  }
 else   if (nestedModel != null && m > 0) {
    createOrderHash(nestedModel);
    CharSequenceIntHashMap thatHash=nestedModel.getOrderHash();
    if (thatHash.size() > 0) {
      for (int i=0; i < m; i++) {
        QueryColumn column=columns.getQuick(i);
        ExprNode node=column.getAst();
        if (node.type == ExprNode.LITERAL) {
          int direction=thatHash.get(node.token);
          if (direction != -1) {
            hash.put(column.getAlias() == null ? node.token : column.getAlias(),direction);
          }
        }
      }
    }
  }
}","private void createOrderHash(QueryModel model){
  CharSequenceIntHashMap hash=model.getOrderHash();
  hash.clear();
  final ObjList<ExprNode> orderBy=model.getOrderBy();
  final int n=orderBy.size();
  final ObjList<QueryColumn> columns=model.getColumns();
  final int m=columns.size();
  final QueryModel nestedModel=model.getNestedModel();
  if (n > 0) {
    final IntList orderByDirection=model.getOrderByDirection();
    for (int i=0; i < n; i++) {
      hash.put(orderBy.getQuick(i).token,orderByDirection.getQuick(i));
    }
  }
 else   if (nestedModel != null && m > 0) {
    createOrderHash(nestedModel);
    CharSequenceIntHashMap thatHash=nestedModel.getOrderHash();
    if (thatHash.size() > 0) {
      for (int i=0; i < m; i++) {
        QueryColumn column=columns.getQuick(i);
        ExprNode node=column.getAst();
        if (node.type == ExprNode.LITERAL) {
          int direction=thatHash.get(node.token);
          if (direction != -1) {
            hash.put(column.getName(),direction);
          }
        }
      }
    }
  }
}",0.9766136576239476
31214,"private ExprNode replaceIfAggregate(@Transient ExprNode node,ObjList<QueryColumn> aggregateColumns){
  if (node != null && FunctionFactories.isAggregate(node.token)) {
    QueryColumn c=aggregateColumnPool.next().of(createAlias(aggregateColumnSequence++),node);
    aggregateColumns.add(c);
    return exprNodePool.next().of(ExprNode.LITERAL,c.getAlias(),0,0);
  }
  return node;
}","private ExprNode replaceIfAggregate(@Transient ExprNode node,ObjList<QueryColumn> aggregateColumns){
  if (node != null && FunctionFactories.isAggregate(node.token)) {
    QueryColumn c=aggregateColumnPool.next().of(createAlias(aggregateColumnSequence++),node.position,node);
    aggregateColumns.add(c);
    return exprNodePool.next().of(ExprNode.LITERAL,c.getAlias(),0,0);
  }
  return node;
}",0.981958762886598
31215,"private RecordSource compileAggregates(RecordSource rs,QueryModel model) throws ParserException {
  final int n=aggregators.size();
  final ExprNode sampleBy=model.getSampleBy();
  ObjList<AggregatorFunction> af=new ObjList<>(n);
  for (int i=0; i < n; i++) {
    QueryColumn qc=aggregators.get(i);
    try {
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
      if (vc instanceof AggregatorFunction) {
        vc.setName(qc.getAlias());
        af.add((AggregatorFunction)vc);
      }
 else {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
    }
 catch (    ParserException e) {
      Misc.free(rs);
      throw e;
    }
  }
  RecordSource out;
  if (sampleBy == null) {
    out=new AggregatedRecordSource(rs,groupKeyColumns,af,configuration.getDbAggregatePage());
  }
 else {
    TimestampSampler sampler=SamplerFactory.from(sampleBy.token);
    if (sampler == null) {
      Misc.free(rs);
      throw QueryError.$(sampleBy.position,""String_Node_Str"");
    }
    out=new ResampledRecordSource(rs,getTimestampIndex(model,model.getTimestamp(),rs.getMetadata()),groupKeyColumns,af,sampler,configuration.getDbAggregatePage());
  }
  return out;
}","private RecordSource compileAggregates(RecordSource rs,QueryModel model) throws ParserException {
  final int n=aggregators.size();
  final ExprNode sampleBy=model.getSampleBy();
  ObjList<AggregatorFunction> af=new ObjList<>(n);
  for (int i=0; i < n; i++) {
    QueryColumn qc=aggregators.get(i);
    VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
    if (vc instanceof AggregatorFunction) {
      vc.setName(qc.getAlias());
      af.add((AggregatorFunction)vc);
    }
 else {
      throw QueryError.$(qc.getAst().position,""String_Node_Str"");
    }
  }
  RecordSource out;
  if (sampleBy == null) {
    out=new AggregatedRecordSource(rs,groupKeyColumns,af,configuration.getDbAggregatePage());
  }
 else {
    TimestampSampler sampler=SamplerFactory.from(sampleBy.token);
    if (sampler == null) {
      throw QueryError.$(sampleBy.position,""String_Node_Str"");
    }
    out=new ResampledRecordSource(rs,getTimestampIndex(model,model.getTimestamp(),rs.getMetadata()),groupKeyColumns,af,sampler,configuration.getDbAggregatePage());
  }
  return out;
}",0.766122098022356
31216,"private RecordSource compileAnalytic(RecordSource rs,QueryModel model) throws ParserException {
  final int n=analyticColumns.size();
  grouppedAnalytic.clear();
  final RecordMetadata metadata=rs.getMetadata();
  ObjList<AnalyticFunction> naturalOrderFunctions=null;
  boolean needCache=false;
  for (int i=0; i < n; i++) {
    AnalyticColumn col=analyticColumns.getQuick(i);
    ObjList<VirtualColumn> partitionBy=null;
    int psz=col.getPartitionBy().size();
    if (psz > 0) {
      partitionBy=new ObjList<>(psz);
      for (int j=0; j < psz; j++) {
        partitionBy.add(virtualColumnBuilder.createVirtualColumn(model,col.getPartitionBy().getQuick(j),metadata));
      }
    }
    ExprNode ast=col.getAst();
    if (ast.paramCount > 1) {
      Misc.free(rs);
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    VirtualColumn valueColumn;
    if (ast.paramCount == 1) {
      valueColumn=virtualColumnBuilder.createVirtualColumn(model,col.getAst().rhs,metadata);
      valueColumn.setName(col.getAlias());
    }
 else {
      valueColumn=null;
    }
    final int osz=col.getOrderBy().size();
    AnalyticFunction f=AnalyticFunctionFactories.newInstance(configuration,ast.token,valueColumn,col.getAlias(),partitionBy,rs.supportsRowIdAccess(),osz > 0);
    if (f == null) {
      Misc.free(rs);
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    CharSequenceIntHashMap orderHash=model.getOrderHash();
    boolean dismissOrder;
    if (osz > 0 && orderHash.size() > 0) {
      dismissOrder=true;
      for (int j=0; j < osz; j++) {
        ExprNode node=col.getOrderBy().getQuick(j);
        int direction=col.getOrderByDirection().getQuick(j);
        if (orderHash.get(node.token) != direction) {
          dismissOrder=false;
        }
      }
    }
 else {
      dismissOrder=false;
    }
    if (osz > 0 && !dismissOrder) {
      IntList order=toOrderIndices(metadata,col.getOrderBy(),col.getOrderByDirection());
      ObjList<AnalyticFunction> funcs=grouppedAnalytic.get(order);
      if (funcs == null) {
        grouppedAnalytic.put(order,funcs=new ObjList<>());
      }
      funcs.add(f);
      needCache=true;
    }
 else {
      if (naturalOrderFunctions == null) {
        naturalOrderFunctions=new ObjList<>();
      }
      needCache=needCache || f.getType() != AnalyticFunction.STREAM;
      naturalOrderFunctions.add(f);
    }
  }
  if (needCache) {
    final ObjList<RecordComparator> analyticComparators=new ObjList<>(grouppedAnalytic.size());
    final ObjList<ObjList<AnalyticFunction>> functionGroups=new ObjList<>(grouppedAnalytic.size());
    for (    ObjObjHashMap.Entry<IntList,ObjList<AnalyticFunction>> e : grouppedAnalytic) {
      analyticComparators.add(cc.compile(metadata,e.key));
      functionGroups.add(e.value);
    }
    if (naturalOrderFunctions != null) {
      analyticComparators.add(null);
      functionGroups.add(naturalOrderFunctions);
    }
    if (rs.supportsRowIdAccess()) {
      return new CachedRowAnalyticRecordSource(configuration.getDbAnalyticWindowPage(),rs,analyticComparators,functionGroups);
    }
    return new CachedAnalyticRecordSource(configuration.getDbAnalyticWindowPage(),configuration.getDbSortKeyPage(),rs,analyticComparators,functionGroups);
  }
 else {
    return new AnalyticRecordSource(rs,naturalOrderFunctions);
  }
}","private RecordSource compileAnalytic(RecordSource rs,QueryModel model) throws ParserException {
  final int n=analyticColumns.size();
  grouppedAnalytic.clear();
  final RecordMetadata metadata=rs.getMetadata();
  ObjList<AnalyticFunction> naturalOrderFunctions=null;
  boolean needCache=false;
  for (int i=0; i < n; i++) {
    AnalyticColumn col=analyticColumns.getQuick(i);
    ObjList<VirtualColumn> partitionBy=null;
    int psz=col.getPartitionBy().size();
    if (psz > 0) {
      partitionBy=new ObjList<>(psz);
      for (int j=0; j < psz; j++) {
        partitionBy.add(virtualColumnBuilder.createVirtualColumn(model,col.getPartitionBy().getQuick(j),metadata));
      }
    }
    ExprNode ast=col.getAst();
    if (ast.paramCount > 1) {
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    VirtualColumn valueColumn;
    if (ast.paramCount == 1) {
      valueColumn=virtualColumnBuilder.createVirtualColumn(model,col.getAst().rhs,metadata);
      valueColumn.setName(col.getAlias());
    }
 else {
      valueColumn=null;
    }
    final int osz=col.getOrderBy().size();
    AnalyticFunction f=AnalyticFunctionFactories.newInstance(configuration,ast.token,valueColumn,col.getAlias(),partitionBy,rs.supportsRowIdAccess(),osz > 0);
    if (f == null) {
      Misc.free(rs);
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    CharSequenceIntHashMap orderHash=model.getOrderHash();
    boolean dismissOrder;
    if (osz > 0 && orderHash.size() > 0) {
      dismissOrder=true;
      for (int j=0; j < osz; j++) {
        ExprNode node=col.getOrderBy().getQuick(j);
        int direction=col.getOrderByDirection().getQuick(j);
        if (orderHash.get(node.token) != direction) {
          dismissOrder=false;
        }
      }
    }
 else {
      dismissOrder=false;
    }
    if (osz > 0 && !dismissOrder) {
      IntList order=toOrderIndices(metadata,col.getOrderBy(),col.getOrderByDirection());
      ObjList<AnalyticFunction> funcs=grouppedAnalytic.get(order);
      if (funcs == null) {
        grouppedAnalytic.put(order,funcs=new ObjList<>());
      }
      funcs.add(f);
      needCache=true;
    }
 else {
      if (naturalOrderFunctions == null) {
        naturalOrderFunctions=new ObjList<>();
      }
      needCache=needCache || f.getType() != AnalyticFunction.STREAM;
      naturalOrderFunctions.add(f);
    }
  }
  if (needCache) {
    final ObjList<RecordComparator> analyticComparators=new ObjList<>(grouppedAnalytic.size());
    final ObjList<ObjList<AnalyticFunction>> functionGroups=new ObjList<>(grouppedAnalytic.size());
    for (    ObjObjHashMap.Entry<IntList,ObjList<AnalyticFunction>> e : grouppedAnalytic) {
      analyticComparators.add(cc.compile(metadata,e.key));
      functionGroups.add(e.value);
    }
    if (naturalOrderFunctions != null) {
      analyticComparators.add(null);
      functionGroups.add(naturalOrderFunctions);
    }
    if (rs.supportsRowIdAccess()) {
      return new CachedRowAnalyticRecordSource(configuration.getDbAnalyticWindowPage(),rs,analyticComparators,functionGroups);
    }
    return new CachedAnalyticRecordSource(configuration.getDbAnalyticWindowPage(),configuration.getDbSortKeyPage(),rs,analyticComparators,functionGroups);
  }
 else {
    return new AnalyticRecordSource(rs,naturalOrderFunctions);
  }
}",0.9968548749438372
31217,"private void parseSelectColumns(QueryModel model) throws ParserException {
  CharSequence tok;
  while (true) {
    ExprNode expr=expr();
    tok=tok();
    String alias;
    if (!columnAliasStop.contains(tok)) {
      alias=tok.toString();
      tok=tok();
    }
 else {
      alias=null;
    }
    if (Chars.equals(tok,""String_Node_Str"")) {
      expectTok(tok(),'(');
      AnalyticColumn col=analyticColumnPool.next().of(alias,expr);
      tok=tok();
      if (Chars.equals(tok,""String_Node_Str"")) {
        expectTok(tok(),""String_Node_Str"");
        ObjList<ExprNode> partitionBy=col.getPartitionBy();
        do {
          partitionBy.add(expectExpr());
          tok=tok();
        }
 while (Chars.equals(tok,','));
      }
      if (Chars.equals(tok,""String_Node_Str"")) {
        expectTok(tok(),""String_Node_Str"");
        do {
          ExprNode e=expectExpr();
          tok=tok();
          if (Chars.equalsIgnoreCase(tok,""String_Node_Str"")) {
            col.addOrderBy(e,QueryModel.ORDER_DIRECTION_DESCENDING);
            tok=tok();
          }
 else {
            col.addOrderBy(e,QueryModel.ORDER_DIRECTION_ASCENDING);
            if (Chars.equalsIgnoreCase(tok,""String_Node_Str"")) {
              tok=tok();
            }
          }
        }
 while (Chars.equals(tok,','));
      }
      if (!Chars.equals(tok,')')) {
        throw err(""String_Node_Str"");
      }
      model.addColumn(col);
      tok=tok();
    }
 else {
      model.addColumn(queryColumnPool.next().of(alias,expr));
    }
    if (Chars.equals(tok,""String_Node_Str"")) {
      break;
    }
    if (!Chars.equals(tok,',')) {
      throw err(""String_Node_Str"");
    }
  }
}","private void parseSelectColumns(QueryModel model) throws ParserException {
  CharSequence tok;
  while (true) {
    ExprNode expr=expr();
    String alias;
    int aliasPosition=lexer.position();
    tok=tok();
    if (!columnAliasStop.contains(tok)) {
      alias=tok.toString();
      tok=tok();
    }
 else {
      alias=null;
      aliasPosition=-1;
    }
    if (Chars.equals(tok,""String_Node_Str"")) {
      expectTok(tok(),'(');
      AnalyticColumn col=analyticColumnPool.next().of(alias,aliasPosition,expr);
      tok=tok();
      if (Chars.equals(tok,""String_Node_Str"")) {
        expectTok(tok(),""String_Node_Str"");
        ObjList<ExprNode> partitionBy=col.getPartitionBy();
        do {
          partitionBy.add(expectExpr());
          tok=tok();
        }
 while (Chars.equals(tok,','));
      }
      if (Chars.equals(tok,""String_Node_Str"")) {
        expectTok(tok(),""String_Node_Str"");
        do {
          ExprNode e=expectExpr();
          tok=tok();
          if (Chars.equalsIgnoreCase(tok,""String_Node_Str"")) {
            col.addOrderBy(e,QueryModel.ORDER_DIRECTION_DESCENDING);
            tok=tok();
          }
 else {
            col.addOrderBy(e,QueryModel.ORDER_DIRECTION_ASCENDING);
            if (Chars.equalsIgnoreCase(tok,""String_Node_Str"")) {
              tok=tok();
            }
          }
        }
 while (Chars.equals(tok,','));
      }
      if (!Chars.equals(tok,')')) {
        throw err(""String_Node_Str"");
      }
      model.addColumn(col);
      tok=tok();
    }
 else {
      model.addColumn(queryColumnPool.next().of(alias,aliasPosition,expr));
    }
    if (Chars.equals(tok,""String_Node_Str"")) {
      break;
    }
    if (!Chars.equals(tok,',')) {
      throw err(""String_Node_Str"");
    }
  }
}",0.9577960140679952
31218,"private int getTimestampIndexQuiet(QueryModel model,ExprNode node,RecordMetadata m) throws ParserException {
  int pos=model.getJournalName() != null ? model.getJournalName().position : 0;
  if (node != null) {
    if (node.type != ExprNode.LITERAL) {
      throw QueryError.position(node.position).$(""String_Node_Str"").$();
    }
    int index=m.getColumnIndexQuiet(node.token);
    if (index == -1) {
      throw QueryError.position(node.position).$(""String_Node_Str"").$(node.token).$();
    }
    return index;
  }
 else {
    int index=m.getTimestampIndex();
    if (index > -1) {
      return index;
    }
    for (int i=0, n=m.getColumnCount(); i < n; i++) {
      if (m.getColumnQuick(i).getType() == ColumnType.DATE) {
        if (index == -1) {
          index=i;
        }
 else {
          throw QueryError.position(pos).$(""String_Node_Str"").$();
        }
      }
    }
    return index;
  }
}","private int getTimestampIndexQuiet(QueryModel model,ExprNode node,RecordMetadata m) throws ParserException {
  if (node != null) {
    if (node.type != ExprNode.LITERAL) {
      throw QueryError.position(node.position).$(""String_Node_Str"").$();
    }
    int index=m.getColumnIndexQuiet(node.token);
    if (index == -1) {
      throw QueryError.position(node.position).$(""String_Node_Str"").$(node.token).$();
    }
    return index;
  }
 else {
    int index=m.getTimestampIndex();
    if (index > -1) {
      return index;
    }
    for (int i=0, n=m.getColumnCount(); i < n; i++) {
      if (m.getColumnQuick(i).getType() == ColumnType.DATE) {
        if (index == -1) {
          index=i;
        }
 else {
          return -2;
        }
      }
    }
    return index;
  }
}",0.8562945368171021
31219,"private int getTimestampIndex(QueryModel model,ExprNode node,RecordMetadata m) throws ParserException {
  int index=getTimestampIndexQuiet(model,node,m);
  if (index == -1) {
    throw QueryError.position(model.getJournalName() != null ? model.getJournalName().position : 0).$(""String_Node_Str"").$();
  }
  return index;
}","private int getTimestampIndex(QueryModel model,ExprNode node,RecordMetadata m) throws ParserException {
  int index=getTimestampIndexQuiet(model,node,m);
  int pos=model.getJournalName() != null ? model.getJournalName().position : 0;
switch (index) {
case -1:
    throw QueryError.position(pos).$(""String_Node_Str"").$();
case -2:
  throw QueryError.position(pos).$(""String_Node_Str"").$();
default :
return index;
}
}",0.6070460704607046
31220,"private RecordSource timestamp(RecordSource rs,QueryModel model) throws ParserException {
  ExprNode timestamp=model.getTimestamp();
  if (timestamp == null) {
    return rs;
  }
  int index=rs.getMetadata().getColumnIndexQuiet(timestamp.token);
  if (index == -1) {
    throw QueryError.invalidColumn(timestamp.position,timestamp.token);
  }
  return new TimestampRelocatingRecordSource(rs,index);
}","private RecordSource timestamp(RecordSource rs,QueryModel model) throws ParserException {
  try {
    ExprNode timestamp=model.getTimestamp();
    if (timestamp == null) {
      return rs;
    }
    int index=rs.getMetadata().getColumnIndexQuiet(timestamp.token);
    if (index == -1) {
      throw QueryError.invalidColumn(timestamp.position,timestamp.token);
    }
    return new TimestampRelocatingRecordSource(rs,index);
  }
 catch (  ParserException e) {
    Misc.free(rs);
    throw e;
  }
}",0.867335562987737
31221,"private RecordSource filter(QueryModel model,RecordSource rs) throws ParserException {
  if (model.getWhereClause() == null) {
    return rs;
  }
  RecordMetadata m=rs.getMetadata();
  if (model.getAlias() != null) {
    m.setAlias(model.getAlias().token);
  }
  IntrinsicModel im=queryFilterAnalyser.extract(model.getWhereClause(),m,null,getTimestampIndexQuiet(model,model.getTimestamp(),m));
  if (im.intrinsicValue == IntrinsicValue.FALSE) {
    return new NoOpJournalRecordSource(rs);
  }
  if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
    rs=new IntervalRecordSource(rs,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
  }
  if (im.intervalSource != null) {
    rs=new IntervalRecordSource(rs,im.intervalSource);
  }
  if (im.filter != null) {
    VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,im.filter,m);
    if (vc.isConstant()) {
      if (vc.getBool(null)) {
        return rs;
      }
 else {
        return new NoOpJournalRecordSource(rs);
      }
    }
    return new FilteredRecordSource(rs,vc,im.filter);
  }
 else {
    return rs;
  }
}","private RecordSource filter(QueryModel model,RecordSource rs) throws ParserException {
  try {
    if (model.getWhereClause() == null) {
      return rs;
    }
    RecordMetadata m=rs.getMetadata();
    if (model.getAlias() != null) {
      m.setAlias(model.getAlias().token);
    }
    IntrinsicModel im=queryFilterAnalyser.extract(model.getWhereClause(),m,null,getTimestampIndexQuiet(model,model.getTimestamp(),m));
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      return new NoOpJournalRecordSource(rs);
    }
    if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
      rs=new IntervalRecordSource(rs,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
    }
    if (im.intervalSource != null) {
      rs=new IntervalRecordSource(rs,im.intervalSource);
    }
    if (im.filter != null) {
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,im.filter,m);
      if (vc.isConstant()) {
        if (vc.getBool(null)) {
          return rs;
        }
 else {
          return new NoOpJournalRecordSource(rs);
        }
      }
      return new FilteredRecordSource(rs,vc,im.filter);
    }
 else {
      return rs;
    }
  }
 catch (  ParserException e) {
    Misc.free(rs);
    throw e;
  }
}",0.9137568363483384
31222,"IntrinsicModel extract(ExprNode node,RecordMetadata m,String preferredKeyColumn,int timestampIndex) throws ParserException {
  this.stack.clear();
  this.keyNodes.clear();
  this.timestampNodes.clear();
  this.timestamp=timestampIndex == -1 ? null : m.getColumnName(timestampIndex);
  this.preferredKeyColumn=preferredKeyColumn;
  IntrinsicModel model=models.next();
  if (removeAndIntrinsics(model,node,m)) {
    return model;
  }
  ExprNode root=node;
  while (!stack.isEmpty() || node != null) {
    if (node != null) {
switch (node.token) {
case ""String_Node_Str"":
        if (!removeAndIntrinsics(model,node.rhs,m)) {
          stack.push(node.rhs);
        }
      node=removeAndIntrinsics(model,node.lhs,m) ? null : node.lhs;
    break;
default :
  node=stack.poll();
break;
}
}
 else {
node=stack.poll();
}
}
model.filter=collapseIntrinsicNodes(root);
return model;
}","IntrinsicModel extract(ExprNode node,RecordMetadata m,String preferredKeyColumn,int timestampIndex) throws ParserException {
  this.stack.clear();
  this.keyNodes.clear();
  this.timestampNodes.clear();
  this.timestamp=timestampIndex < 0 ? null : m.getColumnName(timestampIndex);
  this.preferredKeyColumn=preferredKeyColumn;
  IntrinsicModel model=models.next();
  if (removeAndIntrinsics(model,node,m)) {
    return model;
  }
  ExprNode root=node;
  while (!stack.isEmpty() || node != null) {
    if (node != null) {
switch (node.token) {
case ""String_Node_Str"":
        if (!removeAndIntrinsics(model,node.rhs,m)) {
          stack.push(node.rhs);
        }
      node=removeAndIntrinsics(model,node.lhs,m) ? null : node.lhs;
    break;
default :
  node=stack.poll();
break;
}
}
 else {
node=stack.poll();
}
}
model.filter=collapseIntrinsicNodes(root);
return model;
}",0.9954233409610984
31223,"private String normalise(CharSequence seq){
  boolean capNext=false;
  tempSink.clear();
  for (int i=0, l=seq.length(); i < l; i++) {
    char c=seq.charAt(i);
    if (c > 2047) {
      continue;
    }
switch (c) {
case ' ':
case '_':
case '?':
case '.':
case ',':
case '\'':
case '\""':
case '\\':
case '/':
case '\0':
case ':':
case ')':
case '(':
case '+':
case '-':
case '*':
case '%':
case '~':
      capNext=true;
    break;
default :
  if (capNext) {
    tempSink.put(Character.toUpperCase(c));
    capNext=false;
  }
 else {
    tempSink.put(c);
  }
break;
}
}
return tempSink.toString();
}","private String normalise(CharSequence seq){
  boolean capNext=false;
  tempSink.clear();
  for (int i=0, l=seq.length(); i < l; i++) {
    char c=seq.charAt(i);
    if (c > 2047) {
      continue;
    }
switch (c) {
case ' ':
case '_':
case '?':
case '.':
case ',':
case '\'':
case '\""':
case '\\':
case '/':
case '\0':
case ':':
case ')':
case '(':
case '+':
case '-':
case '*':
case '%':
case '~':
      capNext=true;
    break;
default :
  if (i == 0 && Character.isDigit(c)) {
    tempSink.put('_');
  }
if (capNext) {
  tempSink.put(Character.toUpperCase(c));
  capNext=false;
}
 else {
  tempSink.put(c);
}
break;
}
}
return tempSink.toString();
}",0.8984812150279776
31224,"private void writeBin(long headerAddress,DirectInputStream value){
  if (value == null) {
    writeNullString(headerAddress);
    return;
  }
  long offset=mem.allocateOffset(8);
  long len=value.size();
  Unsafe.getUnsafe().putLong(headerAddress,offset);
  Unsafe.getUnsafe().putLong(mem.addressOf(offset),len);
  if (len < 1) {
    return;
  }
  offset=mem.allocateOffset(1);
  long p=0;
  do {
    int remaining=mem.pageRemaining(offset);
    int sz=remaining < len ? remaining : (int)len;
    value.copyTo(mem.addressOf(offset),p,sz);
    p+=sz;
    mem.allocateOffset(sz);
    offset+=sz;
    len-=sz;
  }
 while (len > 0);
}","private void writeBin(long headerAddress,DirectInputStream value){
  long offset=mem.allocateOffset(8);
  long len=value == null ? -1L : value.size();
  Unsafe.getUnsafe().putLong(headerAddress,offset);
  Unsafe.getUnsafe().putLong(mem.addressOf(offset),len);
  if (len < 1) {
    return;
  }
  offset=mem.allocateOffset(1);
  long p=0;
  do {
    int remaining=mem.pageRemaining(offset);
    int sz=remaining < len ? remaining : (int)len;
    value.copyTo(mem.addressOf(offset),p,sz);
    p+=sz;
    mem.allocateOffset(sz);
    offset+=sz;
    len-=sz;
  }
 while (len > 0);
}",0.8649544324772163
31225,"public long append(Record record,long prevAddress){
  long thisAddress=mem.allocate(8 + recordPrefix) + 8;
  if (prevAddress != -1) {
    Unsafe.getUnsafe().putLong(prevAddress - 8,thisAddress);
  }
  Unsafe.getUnsafe().putLong(thisAddress - 8,-1L);
  append0(record,thisAddress);
  return thisAddress;
}","public long append(Record record,long prevAddress){
  long thisAddress=beginRecord0(prevAddress);
  append0(record,thisAddress);
  return thisAddress;
}",0.6403508771929824
31226,"private <T>void writeAndReadRecords(JournalWriter<T> journal,int count,int pageSize,RecordGenerator<T> generator) throws IOException, JournalException, ParserException {
  for (int i=0; i < count; i++) {
    journal.append(generator.generate(i));
  }
  journal.commit();
  try (RecordList records=new RecordList(journal.getMetadata(),pageSize)){
    LongList offsets=new LongList();
    try (RecordSource rs=compiler.compile(factory,journal.getLocation().getName())){
      long o=-1;
      for (      Record rec : rs.prepareCursor(factory)) {
        offsets.add(o=records.append(rec,o));
      }
    }
     int i=0;
    while (records.hasNext()) {
      generator.assertRecord(records.next(),i++);
    }
  }
 }","private <T>void writeAndReadRecords(JournalWriter<T> journal,int count,int pageSize,RecordGenerator<T> generator) throws IOException, JournalException, ParserException {
  for (int i=0; i < count; i++) {
    journal.append(generator.generate(i));
  }
  journal.commit();
  try (RecordList records=new RecordList(journal.getMetadata(),pageSize)){
    LongList offsets=new LongList();
    try (RecordSource rs=compiler.compile(factory,journal.getLocation().getName())){
      long o=-1;
      for (      Record rec : rs.prepareCursor(factory)) {
        offsets.add(o=records.append(rec,o));
      }
    }
     int i=0;
    records.toTop();
    while (records.hasNext()) {
      generator.assertRecord(records.next(),i++);
    }
  }
 }",0.9854671280276815
31227,"private void writeBin(long headerAddress,DirectInputStream value){
  long offset=mem.allocateOffset(8);
  long len=value.size();
  Unsafe.getUnsafe().putLong(headerAddress,offset);
  Unsafe.getUnsafe().putLong(mem.addressOf(offset),len);
  if (len < 1) {
    return;
  }
  offset=mem.allocateOffset(1);
  long p=0;
  do {
    int remaining=mem.pageRemaining(offset);
    int sz=remaining < len ? remaining : (int)len;
    value.copyTo(mem.addressOf(offset),p,sz);
    p+=sz;
    mem.allocateOffset(sz);
    offset+=sz;
    len-=sz;
  }
 while (len > 0);
}","private void writeBin(long headerAddress,DirectInputStream value){
  if (value == null) {
    writeNullString(headerAddress);
    return;
  }
  long offset=mem.allocateOffset(8);
  long len=value.size();
  Unsafe.getUnsafe().putLong(headerAddress,offset);
  Unsafe.getUnsafe().putLong(mem.addressOf(offset),len);
  if (len < 1) {
    return;
  }
  offset=mem.allocateOffset(1);
  long p=0;
  do {
    int remaining=mem.pageRemaining(offset);
    int sz=remaining < len ? remaining : (int)len;
    value.copyTo(mem.addressOf(offset),p,sz);
    p+=sz;
    mem.allocateOffset(sz);
    offset+=sz;
    len-=sz;
  }
 while (len > 0);
}",0.9367088607594936
31228,"private boolean isNull(long localRowID){
  return Unsafe.getUnsafe().getInt(mappedFile.addressOf(indexColumn.getLong(localRowID),4)) == NULL_LEN;
}","public boolean isNull(){
  return remaining == -1;
}",0.4422110552763819
31229,"@Test public void testCreateAllFieldTypes() throws Exception {
  compiler.execute(factory,""String_Node_Str"");
  try (Journal r=factory.reader(""String_Node_Str"")){
    Assert.assertNotNull(r);
    JournalMetadata m=r.getMetadata();
    Assert.assertEquals(11,m.getColumnCount());
    Assert.assertEquals(ColumnType.INT,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.BYTE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.SHORT,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.LONG,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.FLOAT,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.DOUBLE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.DATE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.BINARY,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.DATE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.SYMBOL,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.STRING,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(8,m.getTimestampIndex());
    Assert.assertEquals(PartitionBy.MONTH,m.getPartitionBy());
  }
 }","@Test public void testCreateAllFieldTypes() throws Exception {
  compiler.execute(factory,""String_Node_Str"");
  try (Journal r=factory.reader(""String_Node_Str"")){
    Assert.assertNotNull(r);
    JournalMetadata m=r.getMetadata();
    Assert.assertEquals(12,m.getColumnCount());
    Assert.assertEquals(ColumnType.INT,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.BYTE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.SHORT,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.LONG,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.FLOAT,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.DOUBLE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.DATE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.BINARY,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.DATE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.SYMBOL,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.STRING,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.BOOLEAN,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(8,m.getTimestampIndex());
    Assert.assertEquals(PartitionBy.MONTH,m.getPartitionBy());
  }
 }",0.9677182685253118
31230,"public CopyHelper compile(RecordMetadata from,RecordMetadata to){
  asm.clear();
  asm.setupPool();
  int thisClassIndex=asm.poolClass(asm.poolUtf8(""String_Node_Str""));
  int interfaceClassIndex=asm.poolClass(asm.poolUtf8(""String_Node_Str""));
  int recordClassIndex=asm.poolClass(asm.poolUtf8(""String_Node_Str""));
  int writerClassIndex=asm.poolClass(asm.poolUtf8(""String_Node_Str""));
  int rGetInt=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rIntLong=asm.poolUtf8(""String_Node_Str"");
  int rGetLong=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),rIntLong));
  int rGetDate=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),rIntLong));
  int rGetByte=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetShort=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetBool=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetFloat=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetDouble=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetSym=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetStr=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetBin=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutInt=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wIntLong=asm.poolUtf8(""String_Node_Str"");
  int wPutLong=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),wIntLong));
  int wPutDate=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),wIntLong));
  int wPutByte=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutShort=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutBool=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutFloat=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutDouble=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutSym=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutStr=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutBin=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int copyNameIndex=asm.poolUtf8(""String_Node_Str"");
  int copySigIndex=asm.poolUtf8(""String_Node_Str"");
  asm.finishPool();
  asm.defineClass(1,thisClassIndex);
  asm.putShort(1);
  asm.putShort(interfaceClassIndex);
  asm.putShort(0);
  asm.putShort(2);
  asm.defineDefaultConstructor();
  asm.startMethod(0x01,copyNameIndex,copySigIndex,4,3);
  int n=from.getColumnCount();
  for (int i=0; i < n; i++) {
    asm.put(BytecodeAssembler.aload_2);
    asm.putConstant(i);
    asm.put(BytecodeAssembler.aload_1);
    asm.putConstant(i);
switch (from.getColumnQuick(i).getType()) {
case ColumnType.INT:
      asm.invokeInterface(rGetInt,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.LONG:
      asm.put(BytecodeAssembler.i2l);
    asm.invokeInterface(wPutLong,3);
  break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.i2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.i2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutInt,2);
break;
}
break;
case ColumnType.LONG:
asm.invokeInterface(rGetLong,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.put(BytecodeAssembler.l2i);
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.DATE:
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.l2i);
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.l2i);
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.l2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.l2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutLong,3);
break;
}
break;
case ColumnType.DATE:
asm.invokeInterface(rGetDate,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.put(BytecodeAssembler.l2i);
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.l2i);
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.l2i);
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.l2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.l2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutDate,3);
break;
}
break;
case ColumnType.BYTE:
asm.invokeInterface(rGetByte,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.i2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.i2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutByte,2);
break;
}
break;
case ColumnType.SHORT:
asm.invokeInterface(rGetShort,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.i2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.i2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutShort,2);
break;
}
break;
case ColumnType.BOOLEAN:
asm.invokeInterface(rGetBool,1);
asm.invokeInterface(wPutBool,2);
break;
case ColumnType.FLOAT:
asm.invokeInterface(rGetFloat,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.put(BytecodeAssembler.f2i);
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.put(BytecodeAssembler.f2l);
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.f2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.f2i);
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.f2i);
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.f2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutFloat,2);
break;
}
break;
case ColumnType.DOUBLE:
asm.invokeInterface(rGetDouble,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.put(BytecodeAssembler.d2i);
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.put(BytecodeAssembler.d2l);
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.d2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.d2i);
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.d2i);
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.d2f);
asm.invokeInterface(wPutFloat,2);
break;
default :
asm.invokeInterface(wPutDouble,3);
break;
}
break;
case ColumnType.SYMBOL:
asm.invokeInterface(rGetSym,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.STRING:
asm.invokeInterface(wPutStr,2);
break;
default :
asm.invokeInterface(wPutSym,2);
break;
}
break;
case ColumnType.STRING:
asm.invokeInterface(rGetStr,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.SYMBOL:
asm.invokeInterface(wPutSym,2);
break;
default :
asm.invokeInterface(wPutStr,2);
break;
}
break;
case ColumnType.BINARY:
asm.invokeInterface(rGetBin,1);
asm.invokeInterface(wPutBin,2);
break;
default :
break;
}
}
asm.put(BytecodeAssembler.return_);
asm.endMethodCode();
asm.putShort(0);
asm.putShort(0);
asm.endMethod();
asm.putShort(0);
try {
return (CopyHelper)asm.loadClass(ComparatorCompiler.class).newInstance();
}
 catch (Exception e) {
throw new JournalRuntimeException(""String_Node_Str"",e);
}
}","public CopyHelper compile(RecordMetadata from,RecordMetadata to){
  int tsIndex=to.getTimestampIndex();
  asm.clear();
  asm.setupPool();
  int thisClassIndex=asm.poolClass(asm.poolUtf8(""String_Node_Str""));
  int interfaceClassIndex=asm.poolClass(asm.poolUtf8(""String_Node_Str""));
  int recordClassIndex=asm.poolClass(asm.poolUtf8(""String_Node_Str""));
  int writerClassIndex=asm.poolClass(asm.poolUtf8(""String_Node_Str""));
  int rGetInt=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rIntLong=asm.poolUtf8(""String_Node_Str"");
  int rGetLong=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),rIntLong));
  int rGetDate=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),rIntLong));
  int rGetByte=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetShort=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetBool=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetFloat=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetDouble=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetSym=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetStr=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int rGetBin=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutInt=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wIntLong=asm.poolUtf8(""String_Node_Str"");
  int wPutLong=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),wIntLong));
  int wPutDate=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),wIntLong));
  int wPutByte=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutShort=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutBool=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutFloat=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutDouble=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutSym=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutStr=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int wPutBin=asm.poolInterfaceMethod(writerClassIndex,asm.poolNameAndType(asm.poolUtf8(""String_Node_Str""),asm.poolUtf8(""String_Node_Str"")));
  int copyNameIndex=asm.poolUtf8(""String_Node_Str"");
  int copySigIndex=asm.poolUtf8(""String_Node_Str"");
  asm.finishPool();
  asm.defineClass(1,thisClassIndex);
  asm.putShort(1);
  asm.putShort(interfaceClassIndex);
  asm.putShort(0);
  asm.putShort(2);
  asm.defineDefaultConstructor();
  asm.startMethod(0x01,copyNameIndex,copySigIndex,4,3);
  int n=from.getColumnCount();
  for (int i=0; i < n; i++) {
    if (i == tsIndex) {
      continue;
    }
    asm.put(BytecodeAssembler.aload_2);
    asm.putConstant(i);
    asm.put(BytecodeAssembler.aload_1);
    asm.putConstant(i);
switch (from.getColumnQuick(i).getType()) {
case ColumnType.INT:
      asm.invokeInterface(rGetInt,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.LONG:
      asm.put(BytecodeAssembler.i2l);
    asm.invokeInterface(wPutLong,3);
  break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.i2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.i2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutInt,2);
break;
}
break;
case ColumnType.LONG:
asm.invokeInterface(rGetLong,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.put(BytecodeAssembler.l2i);
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.DATE:
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.l2i);
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.l2i);
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.l2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.l2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutLong,3);
break;
}
break;
case ColumnType.DATE:
asm.invokeInterface(rGetDate,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.put(BytecodeAssembler.l2i);
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.l2i);
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.l2i);
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.l2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.l2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutDate,3);
break;
}
break;
case ColumnType.BYTE:
asm.invokeInterface(rGetByte,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.i2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.i2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutByte,2);
break;
}
break;
case ColumnType.SHORT:
asm.invokeInterface(rGetShort,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.i2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.i2f);
asm.invokeInterface(wPutFloat,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.i2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutShort,2);
break;
}
break;
case ColumnType.BOOLEAN:
asm.invokeInterface(rGetBool,1);
asm.invokeInterface(wPutBool,2);
break;
case ColumnType.FLOAT:
asm.invokeInterface(rGetFloat,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.put(BytecodeAssembler.f2i);
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.put(BytecodeAssembler.f2l);
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.f2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.f2i);
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.f2i);
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.DOUBLE:
asm.put(BytecodeAssembler.f2d);
asm.invokeInterface(wPutDouble,3);
break;
default :
asm.invokeInterface(wPutFloat,2);
break;
}
break;
case ColumnType.DOUBLE:
asm.invokeInterface(rGetDouble,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.INT:
asm.put(BytecodeAssembler.d2i);
asm.invokeInterface(wPutInt,2);
break;
case ColumnType.LONG:
asm.put(BytecodeAssembler.d2l);
asm.invokeInterface(wPutLong,3);
break;
case ColumnType.DATE:
asm.put(BytecodeAssembler.d2l);
asm.invokeInterface(wPutDate,3);
break;
case ColumnType.SHORT:
asm.put(BytecodeAssembler.d2i);
asm.put(BytecodeAssembler.i2s);
asm.invokeInterface(wPutShort,2);
break;
case ColumnType.BYTE:
asm.put(BytecodeAssembler.d2i);
asm.put(BytecodeAssembler.i2b);
asm.invokeInterface(wPutByte,2);
break;
case ColumnType.FLOAT:
asm.put(BytecodeAssembler.d2f);
asm.invokeInterface(wPutFloat,2);
break;
default :
asm.invokeInterface(wPutDouble,3);
break;
}
break;
case ColumnType.SYMBOL:
asm.invokeInterface(rGetSym,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.STRING:
asm.invokeInterface(wPutStr,2);
break;
default :
asm.invokeInterface(wPutSym,2);
break;
}
break;
case ColumnType.STRING:
asm.invokeInterface(rGetStr,1);
switch (to.getColumnQuick(i).getType()) {
case ColumnType.SYMBOL:
asm.invokeInterface(wPutSym,2);
break;
default :
asm.invokeInterface(wPutStr,2);
break;
}
break;
case ColumnType.BINARY:
asm.invokeInterface(rGetBin,1);
asm.invokeInterface(wPutBin,2);
break;
default :
break;
}
}
asm.put(BytecodeAssembler.return_);
asm.endMethodCode();
asm.putShort(0);
asm.putShort(0);
asm.endMethod();
asm.putShort(0);
try {
return (CopyHelper)asm.loadClass(ComparatorCompiler.class).newInstance();
}
 catch (Exception e) {
throw new JournalRuntimeException(""String_Node_Str"",e);
}
}",0.9959333849728892
31231,"private void copy(JournalFactory factory,RecordSource rs,JournalWriter w) throws JournalException {
  final CopyHelper helper=copyHelperCompiler.compile(rs.getMetadata(),w.getMetadata());
  final RecordCursor cursor=rs.prepareCursor(factory);
  while (cursor.hasNext()) {
    JournalEntryWriter ew=w.entryWriter();
    helper.copy(cursor.next(),ew);
    ew.append();
  }
  w.commit();
}","private void copy(JournalFactory factory,RecordSource rs,JournalWriter w) throws JournalException {
  final int tsIndex=w.getMetadata().getTimestampIndex();
  if (tsIndex == -1) {
    copyNonPartitioned(rs.prepareCursor(factory),w,copyHelperCompiler.compile(rs.getMetadata(),w.getMetadata()));
  }
 else {
    copyPartitioned(rs.prepareCursor(factory),w,copyHelperCompiler.compile(rs.getMetadata(),w.getMetadata()),tsIndex);
  }
  w.commit();
}",0.4481927710843373
31232,"@Test public void testCreateAsSelectAll() throws Exception {
  int N=5;
  try (JournalWriter w=compiler.createWriter(factory,""String_Node_Str"")){
    Rnd rnd=new Rnd();
    for (int i=0; i < N; i++) {
      JournalEntryWriter ew=w.entryWriter();
      ew.putInt(0,i);
      ew.put(1,(byte)rnd.nextInt());
      ew.putShort(2,(short)rnd.nextInt());
      ew.putLong(3,rnd.nextLong());
      ew.putFloat(4,rnd.nextFloat());
      ew.putDouble(5,rnd.nextDouble());
      ew.putDate(6,rnd.nextLong());
      ew.putNull(7);
      ew.putDate(8,rnd.nextLong());
      ew.putSym(9,rnd.nextChars(1));
      ew.putStr(10,rnd.nextChars(10));
      ew.putBool(11,rnd.nextBoolean());
      ew.append();
    }
    w.commit();
  }
   compiler.execute(factory,""String_Node_Str"");
  int count=0;
  RecordSource rs=compiler.compile(factory,""String_Node_Str"");
  RecordCursor cursor=rs.prepareCursor(factory);
  Rnd rnd=new Rnd();
  while (cursor.hasNext()) {
    Record rec=cursor.next();
    Assert.assertEquals(count,rec.getInt(0));
    Assert.assertTrue((byte)rnd.nextInt() == rec.get(1));
    Assert.assertEquals((short)rnd.nextInt(),rec.getShort(2));
    Assert.assertEquals(rnd.nextLong(),rec.getLong(3));
    Assert.assertEquals(rnd.nextFloat(),rec.getFloat(4),0.00001f);
    Assert.assertEquals(rnd.nextDouble(),rec.getDouble(5),0.00000000001);
    Assert.assertEquals(rnd.nextLong(),rec.getDate(6));
    Assert.assertNull(rec.getBin(7));
    Assert.assertEquals(rnd.nextLong(),rec.getDate(8));
    TestUtils.assertEquals(rnd.nextChars(1),rec.getSym(9));
    TestUtils.assertEquals(rnd.nextChars(10),rec.getFlyweightStr(10));
    Assert.assertEquals(rnd.nextBoolean(),rec.getBool(11));
    count++;
  }
}","@Test public void testCreateAsSelectAll() throws Exception {
  int N=50;
  try (JournalWriter w=compiler.createWriter(factory,""String_Node_Str"")){
    Rnd rnd=new Rnd();
    long t=Dates.parseDateTime(""String_Node_Str"");
    for (int i=0; i < N; i++) {
      JournalEntryWriter ew=w.entryWriter(t+=Dates.DAY_MILLIS);
      ew.putInt(0,i);
      ew.put(1,(byte)rnd.nextInt());
      ew.putShort(2,(short)rnd.nextInt());
      ew.putLong(3,rnd.nextLong());
      ew.putFloat(4,rnd.nextFloat());
      ew.putDouble(5,rnd.nextDouble());
      ew.putDate(6,rnd.nextLong());
      ew.putNull(7);
      ew.putSym(9,rnd.nextChars(1));
      ew.putStr(10,rnd.nextChars(10));
      ew.putBool(11,rnd.nextBoolean());
      ew.append();
    }
    w.commit();
  }
   compiler.execute(factory,""String_Node_Str"");
  try (Journal r=factory.reader(""String_Node_Str"")){
    Assert.assertEquals(2,r.getPartitionCount());
  }
   int count=0;
  RecordSource rs=compiler.compile(factory,""String_Node_Str"");
  RecordCursor cursor=rs.prepareCursor(factory);
  Rnd rnd=new Rnd();
  while (cursor.hasNext()) {
    Record rec=cursor.next();
    Assert.assertEquals(count,rec.getInt(0));
    Assert.assertTrue((byte)rnd.nextInt() == rec.get(1));
    Assert.assertEquals((short)rnd.nextInt(),rec.getShort(2));
    Assert.assertEquals(rnd.nextLong(),rec.getLong(3));
    Assert.assertEquals(rnd.nextFloat(),rec.getFloat(4),0.00001f);
    Assert.assertEquals(rnd.nextDouble(),rec.getDouble(5),0.00000000001);
    Assert.assertEquals(rnd.nextLong(),rec.getDate(6));
    Assert.assertNull(rec.getBin(7));
    TestUtils.assertEquals(rnd.nextChars(1),rec.getSym(9));
    TestUtils.assertEquals(rnd.nextChars(10),rec.getFlyweightStr(10));
    Assert.assertEquals(rnd.nextBoolean(),rec.getBool(11));
    count++;
  }
}",0.7810071942446043
31233,"@Test public void testCreateDefaultPartitionBy() throws Exception {
  try {
    compiler.execute(factory,""String_Node_Str"");
    try (Journal r=factory.reader(""String_Node_Str"")){
      Assert.assertNotNull(r);
      JournalMetadata m=r.getMetadata();
      Assert.assertEquals(5,m.getColumnCount());
      Assert.assertEquals(ColumnType.INT,m.getColumn(""String_Node_Str"").getType());
      Assert.assertTrue(m.getColumn(""String_Node_Str"").isIndexed());
      Assert.assertEquals(1,m.getColumn(""String_Node_Str"").getBucketCount());
      Assert.assertEquals(ColumnType.BYTE,m.getColumn(""String_Node_Str"").getType());
      Assert.assertEquals(ColumnType.DATE,m.getColumn(""String_Node_Str"").getType());
      Assert.assertEquals(ColumnType.STRING,m.getColumn(""String_Node_Str"").getType());
      Assert.assertTrue(m.getColumn(""String_Node_Str"").isIndexed());
      Assert.assertEquals(63,m.getColumn(""String_Node_Str"").getBucketCount());
      Assert.assertEquals(ColumnType.LONG,m.getColumn(""String_Node_Str"").getType());
      Assert.assertTrue(m.getColumn(""String_Node_Str"").isIndexed());
      Assert.assertEquals(511,m.getColumn(""String_Node_Str"").getBucketCount());
      Assert.assertEquals(-1,m.getTimestampIndex());
      Assert.assertEquals(PartitionBy.NONE,m.getPartitionBy());
    }
   }
 catch (  ParserException e) {
    e.printStackTrace();
    System.out.println(QueryError.getPosition());
    System.out.println(QueryError.getMessage());
  }
}","@Test public void testCreateDefaultPartitionBy() throws Exception {
  compiler.execute(factory,""String_Node_Str"");
  try (Journal r=factory.reader(""String_Node_Str"")){
    Assert.assertNotNull(r);
    JournalMetadata m=r.getMetadata();
    Assert.assertEquals(5,m.getColumnCount());
    Assert.assertEquals(ColumnType.INT,m.getColumn(""String_Node_Str"").getType());
    Assert.assertTrue(m.getColumn(""String_Node_Str"").isIndexed());
    Assert.assertEquals(1,m.getColumn(""String_Node_Str"").getBucketCount());
    Assert.assertEquals(ColumnType.BYTE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.DATE,m.getColumn(""String_Node_Str"").getType());
    Assert.assertEquals(ColumnType.STRING,m.getColumn(""String_Node_Str"").getType());
    Assert.assertTrue(m.getColumn(""String_Node_Str"").isIndexed());
    Assert.assertEquals(63,m.getColumn(""String_Node_Str"").getBucketCount());
    Assert.assertEquals(ColumnType.LONG,m.getColumn(""String_Node_Str"").getType());
    Assert.assertTrue(m.getColumn(""String_Node_Str"").isIndexed());
    Assert.assertEquals(511,m.getColumn(""String_Node_Str"").getBucketCount());
    Assert.assertEquals(-1,m.getTimestampIndex());
    Assert.assertEquals(PartitionBy.NONE,m.getPartitionBy());
  }
 }",0.9043927648578812
31234,"private void parse(long lo,long len,int maxLine){
  long hi=lo + len;
  long ptr=lo;
  OUT:   while (ptr < hi) {
    byte c=Unsafe.getUnsafe().getByte(ptr++);
    if (useLineRollBuf) {
      putToRollBuf(c);
    }
    this.fieldHi++;
    if (delayedOutQuote && c != '""') {
      inQuote=delayedOutQuote=false;
    }
    if (c == separator) {
      if (eol) {
        uneol(lo);
      }
      if (inQuote || ignoreEolOnce) {
        continue;
      }
      stashField();
      fieldIndex++;
    }
 else {
switch (c) {
case '""':
        quote();
      break;
case '\r':
case '\n':
    if (inQuote) {
      break;
    }
  if (eol) {
    this.fieldLo=this.fieldHi;
    break;
  }
stashField();
if (ignoreEolOnce) {
ignoreEolOnce();
break;
}
triggerLine(ptr);
if (lineCount > maxLine) {
break OUT;
}
break;
default :
if (eol) {
uneol(lo);
}
break;
}
}
}
if (useLineRollBuf) {
return;
}
if (eol) {
this.fieldLo=0;
}
 else {
rollLine(lo,hi);
useLineRollBuf=true;
}
}","private void parse(long lo,long len,int maxLine){
  long hi=lo + len;
  long ptr=lo;
  OUT:   while (ptr < hi) {
    byte c=Unsafe.getUnsafe().getByte(ptr++);
    char b=(char)c;
    if (useLineRollBuf) {
      putToRollBuf(c);
    }
    this.fieldHi++;
    if (delayedOutQuote && c != '""') {
      inQuote=delayedOutQuote=false;
    }
    if (c == separator) {
      if (eol) {
        uneol(lo);
      }
      if (inQuote || ignoreEolOnce) {
        continue;
      }
      stashField();
      fieldIndex++;
    }
 else {
switch (c) {
case '""':
        quote();
      break;
case '\r':
case '\n':
    if (inQuote) {
      break;
    }
  if (eol) {
    this.fieldLo=this.fieldHi;
    break;
  }
stashField();
if (ignoreEolOnce) {
ignoreEolOnce();
break;
}
triggerLine(ptr);
if (lineCount > maxLine) {
break OUT;
}
break;
default :
if (eol) {
uneol(lo);
}
break;
}
}
}
if (useLineRollBuf) {
return;
}
if (eol) {
this.fieldLo=0;
}
 else {
rollLine(lo,hi);
useLineRollBuf=true;
}
}",0.9896800825593396
31235,"private void quote(){
  if (inQuote) {
    delayedOutQuote=!delayedOutQuote;
    lastQuotePos=this.fieldHi;
  }
 else {
    inQuote=true;
    this.fieldLo=this.fieldHi;
  }
}","private void quote(){
  if (inQuote) {
    delayedOutQuote=!delayedOutQuote;
    lastQuotePos=this.fieldHi;
  }
 else   if (fieldHi - fieldLo == 1) {
    inQuote=true;
    this.fieldLo=this.fieldHi;
  }
}",0.9206349206349206
31236,"public static void main(String[] args) throws Exception {
  System.err.printf(""String_Node_Str"");
  if (args.length < 1) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (Os.type == Os._32Bit) {
    System.err.println(""String_Node_Str"");
    return;
  }
  String dir=args[0];
  String flag=args.length > 1 ? args[1] : null;
  extractSite(dir,""String_Node_Str"".equals(flag));
  File conf=new File(dir,""String_Node_Str"");
  if (!conf.exists()) {
    System.err.println(""String_Node_Str"" + conf);
    return;
  }
  final ServerConfiguration configuration=new ServerConfiguration(conf);
  configureLoggers(configuration);
  final SimpleUrlMatcher matcher=new SimpleUrlMatcher();
  JournalFactory factory=new JournalFactory(configuration.getDbPath().getAbsolutePath());
  JournalFactoryPool pool=new JournalFactoryPool(factory.getConfiguration(),configuration.getJournalPoolSize());
  matcher.put(""String_Node_Str"",new ImportHandler(factory));
  matcher.put(""String_Node_Str"",new QueryHandler(pool,configuration));
  matcher.put(""String_Node_Str"",new CsvHandler(pool,configuration));
  matcher.put(""String_Node_Str"",new ExistenceCheckHandler(factory));
  matcher.setDefaultHandler(new StaticContentHandler(configuration.getHttpPublic(),new MimeTypes(configuration.getMimeTypes())));
  StringBuilder welcome=Misc.getThreadLocalBuilder();
  HttpServer server=new HttpServer(configuration,matcher);
  if (!server.start(LogFactory.INSTANCE.getJobs(),configuration.getHttpQueueDepth())) {
    welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
    welcome.append(""String_Node_Str"");
    System.err.println(welcome);
    System.out.println(new Date() + ""String_Node_Str"");
  }
 else {
    welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
    if (configuration.getSslConfig().isSecure()) {
      welcome.append(""String_Node_Str"");
    }
 else {
      welcome.append(""String_Node_Str"");
    }
    System.err.println(welcome);
    System.out.println(new Date() + ""String_Node_Str"");
    if (Os.type != Os.WINDOWS) {
      Signal.handle(new Signal(""String_Node_Str""),new SignalHandler(){
        public void handle(        Signal signal){
        }
      }
);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      public void run(){
        System.out.println(new Date() + ""String_Node_Str"");
      }
    }
));
  }
}","public static void main(String[] args) throws Exception {
  System.err.printf(""String_Node_Str"");
  if (args.length < 1) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (Os.type == Os._32Bit) {
    System.err.println(""String_Node_Str"");
    return;
  }
  String dir=args[0];
  String flag=args.length > 1 ? args[1] : null;
  extractSite(dir,""String_Node_Str"".equals(flag));
  File conf=new File(dir,""String_Node_Str"");
  if (!conf.exists()) {
    System.err.println(""String_Node_Str"" + conf);
    return;
  }
  final ServerConfiguration configuration=new ServerConfiguration(conf);
  configureLoggers(configuration);
  final SimpleUrlMatcher matcher=new SimpleUrlMatcher();
  JournalFactory factory=new JournalFactory(configuration.getDbPath().getAbsolutePath());
  JournalFactoryPool pool=new JournalFactoryPool(factory.getConfiguration(),configuration.getJournalPoolSize());
  matcher.put(""String_Node_Str"",new ImportHandler(factory));
  matcher.put(""String_Node_Str"",new QueryHandler(pool,configuration,factory));
  matcher.put(""String_Node_Str"",new CsvHandler(pool,configuration));
  matcher.put(""String_Node_Str"",new ExistenceCheckHandler(factory));
  matcher.setDefaultHandler(new StaticContentHandler(configuration.getHttpPublic(),new MimeTypes(configuration.getMimeTypes())));
  StringBuilder welcome=Misc.getThreadLocalBuilder();
  HttpServer server=new HttpServer(configuration,matcher);
  if (!server.start(LogFactory.INSTANCE.getJobs(),configuration.getHttpQueueDepth())) {
    welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
    welcome.append(""String_Node_Str"");
    System.err.println(welcome);
    System.out.println(new Date() + ""String_Node_Str"");
  }
 else {
    welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
    if (configuration.getSslConfig().isSecure()) {
      welcome.append(""String_Node_Str"");
    }
 else {
      welcome.append(""String_Node_Str"");
    }
    System.err.println(welcome);
    System.out.println(new Date() + ""String_Node_Str"");
    if (Os.type != Os.WINDOWS) {
      Signal.handle(new Signal(""String_Node_Str""),new SignalHandler(){
        public void handle(        Signal signal){
        }
      }
);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      public void run(){
        System.out.println(new Date() + ""String_Node_Str"");
      }
    }
));
  }
}",0.9983883964544722
31237,OutputStream putBin(int index);,"void putBin(int index,ByteBuffer buf);",0.5507246376811594
31238,"public OutputStream putBin(int index){
  skip(index);
  return varCol(index).putBin();
}","public void putBin(int index,ByteBuffer buf){
  varCol(index).putBin(buf);
  skip(index);
}",0.6033519553072626
31239,"public void compileQuery(ChunkedResponse r,JournalFactoryPool pool,AtomicLong misses,AtomicLong hits) throws IOException {
  try {
    this.factory=pool.get();
    recordSource=CACHE.get().poll(query);
    if (recordSource == null) {
      recordSource=COMPILER.get().compile(factory,query);
      misses.incrementAndGet();
    }
 else {
      hits.incrementAndGet();
    }
    cursor=recordSource.prepareCursor(factory,cancellationHandler);
    metadata=recordSource.getMetadata();
    header(r,200);
  }
 catch (  ParserException e) {
    info().$(""String_Node_Str"").$(query).$(""String_Node_Str"").$(QueryError.getPosition()).$(""String_Node_Str"").$(QueryError.getMessage()).$();
    sendException(r,QueryError.getPosition(),QueryError.getMessage(),400);
  }
catch (  JournalRuntimeException e) {
    error().$(""String_Node_Str"").$(query).$(e).$();
    sendException(r,0,e.getMessage(),500);
  }
catch (  InterruptedException e) {
    error().$(""String_Node_Str"").$(query).$(e).$();
    sendException(r,0,""String_Node_Str"",500);
  }
}","public void compileQuery(ChunkedResponse r,JournalFactoryPool pool,JournalFactory writerFactory,AtomicLong misses,AtomicLong hits) throws IOException {
  try {
    this.factory=pool.get();
    recordSource=CACHE.get().poll(query);
    if (recordSource == null) {
      recordSource=executeQuery(r,writerFactory);
      misses.incrementAndGet();
    }
 else {
      hits.incrementAndGet();
    }
    header(r,200);
    if (recordSource != null) {
      cursor=recordSource.prepareCursor(factory,cancellationHandler);
      metadata=recordSource.getMetadata();
    }
 else {
      sendConfirmation(r);
    }
  }
 catch (  ParserException e) {
    syntaxError(r);
  }
catch (  JournalRuntimeException e) {
    internalError(r,e);
  }
catch (  InterruptedException e) {
    error().$(""String_Node_Str"").$(query).$(e).$();
    sendException(r,0,""String_Node_Str"",500);
  }
}",0.4855491329479768
31240,"@Override public void handle(IOContext context) throws IOException {
  ExportHandlerContext ctx=localContext.get(context);
  if (ctx == null) {
    localContext.set(context,ctx=new ExportHandlerContext(context.channel.getFd(),context.getServerConfiguration().getDbCyclesBeforeCancel()));
  }
  ChunkedResponse r=context.chunkedResponse();
  if (ctx.parseUrl(r,context.request)) {
    ctx.compileQuery(r,factoryPool,cacheMisses,cacheHits);
    resume(context);
  }
}","@Override public void handle(IOContext context) throws IOException {
  ExportHandlerContext ctx=localContext.get(context);
  if (ctx == null) {
    localContext.set(context,ctx=new ExportHandlerContext(context.channel.getFd(),context.getServerConfiguration().getDbCyclesBeforeCancel()));
  }
  ChunkedResponse r=context.chunkedResponse();
  if (ctx.parseUrl(r,context.request)) {
    ctx.compileQuery(r,factoryPool,null,cacheMisses,cacheHits);
    resume(context);
  }
}",0.9946524064171124
31241,"@SuppressWarnings(""String_Node_Str"") @Override public void resume(IOContext context) throws IOException {
  QueryHandlerContext ctx=localContext.get(context);
  if (ctx == null || ctx.cursor == null) {
    return;
  }
  final ChunkedResponse r=context.chunkedResponse();
  final int columnCount=ctx.metadata.getColumnCount();
  OUT:   while (true) {
    try {
      SWITCH: switch (ctx.queryState) {
case QUERY_PREFIX:
        if (ctx.noMeta) {
          r.put(""String_Node_Str"");
          ctx.queryState=QUERY_RECORD_START;
          break;
        }
      r.bookmark();
    r.put('{').putQuoted(""String_Node_Str"").put(':').putUtf8EscapedAndQuoted(ctx.query);
  r.put(',').putQuoted(""String_Node_Str"").put(':').put('[');
ctx.queryState=QUERY_METADATA;
ctx.columnIndex=0;
case QUERY_METADATA:
for (; ctx.columnIndex < columnCount; ctx.columnIndex++) {
RecordColumnMetadata column=ctx.metadata.getColumnQuick(ctx.columnIndex);
r.bookmark();
if (ctx.columnIndex > 0) {
r.put(',');
}
r.put('{').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getName()).put(',').putQuoted(""String_Node_Str"").put(':').putQuoted(ColumnType.nameOf(column.getType()));
r.put('}');
}
ctx.queryState=QUERY_META_SUFFIX;
case QUERY_META_SUFFIX:
r.bookmark();
r.put(""String_Node_Str"");
ctx.queryState=QUERY_RECORD_START;
case QUERY_RECORD_START:
if (ctx.record == null) {
while (true) {
if (ctx.cursor.hasNext()) {
ctx.record=ctx.cursor.next();
ctx.count++;
if (ctx.fetchAll && ctx.count > ctx.stop) {
continue;
}
if (ctx.count > ctx.skip) {
break;
}
}
 else {
ctx.queryState=QUERY_DATA_SUFFIX;
break SWITCH;
}
}
}
if (ctx.count > ctx.stop) {
ctx.queryState=QUERY_DATA_SUFFIX;
break;
}
r.bookmark();
if (ctx.count > ctx.skip + 1) {
r.put(',');
}
r.put('[');
ctx.queryState=QUERY_RECORD_COLUMNS;
ctx.columnIndex=0;
case QUERY_RECORD_COLUMNS:
for (; ctx.columnIndex < columnCount; ctx.columnIndex++) {
RecordColumnMetadata m=ctx.metadata.getColumnQuick(ctx.columnIndex);
r.bookmark();
if (ctx.columnIndex > 0) {
r.put(',');
}
putValue(r,m.getType(),ctx.record,ctx.columnIndex);
}
ctx.queryState=QUERY_RECORD_SUFFIX;
case QUERY_RECORD_SUFFIX:
r.bookmark();
r.put(']');
ctx.record=null;
ctx.queryState=QUERY_RECORD_START;
break;
case QUERY_DATA_SUFFIX:
sendDone(r,ctx);
break OUT;
default :
break OUT;
}
}
 catch (ResponseContentBufferTooSmallException ignored) {
if (r.resetToBookmark()) {
r.sendChunk();
}
 else {
ctx.info().$(""String_Node_Str"").$(ctx.queryState).$();
throw DisconnectedChannelException.INSTANCE;
}
}
}
}","@SuppressWarnings(""String_Node_Str"") @Override public void resume(IOContext context) throws IOException {
  QueryHandlerContext ctx=localContext.get(context);
  if (ctx == null || ctx.cursor == null) {
    return;
  }
  final ChunkedResponse r=context.chunkedResponse();
  final int columnCount=ctx.metadata.getColumnCount();
  OUT:   while (true) {
    try {
      SWITCH: switch (ctx.queryState) {
case QUERY_PREFIX:
        if (ctx.noMeta) {
          r.put('{').putQuoted(""String_Node_Str"").put(""String_Node_Str"");
          ctx.queryState=QUERY_RECORD_START;
          break;
        }
      r.bookmark();
    r.put('{').putQuoted(""String_Node_Str"").put(':').putUtf8EscapedAndQuoted(ctx.query);
  r.put(',').putQuoted(""String_Node_Str"").put(':').put('[');
ctx.queryState=QUERY_METADATA;
ctx.columnIndex=0;
case QUERY_METADATA:
for (; ctx.columnIndex < columnCount; ctx.columnIndex++) {
RecordColumnMetadata column=ctx.metadata.getColumnQuick(ctx.columnIndex);
r.bookmark();
if (ctx.columnIndex > 0) {
r.put(',');
}
r.put('{').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getName()).put(',').putQuoted(""String_Node_Str"").put(':').putQuoted(ColumnType.nameOf(column.getType()));
r.put('}');
}
ctx.queryState=QUERY_META_SUFFIX;
case QUERY_META_SUFFIX:
r.bookmark();
r.put(""String_Node_Str"");
ctx.queryState=QUERY_RECORD_START;
case QUERY_RECORD_START:
if (ctx.record == null) {
while (true) {
if (ctx.cursor.hasNext()) {
ctx.record=ctx.cursor.next();
ctx.count++;
if (ctx.fetchAll && ctx.count > ctx.stop) {
continue;
}
if (ctx.count > ctx.skip) {
break;
}
}
 else {
ctx.queryState=QUERY_DATA_SUFFIX;
break SWITCH;
}
}
}
if (ctx.count > ctx.stop) {
ctx.queryState=QUERY_DATA_SUFFIX;
break;
}
r.bookmark();
if (ctx.count > ctx.skip + 1) {
r.put(',');
}
r.put('[');
ctx.queryState=QUERY_RECORD_COLUMNS;
ctx.columnIndex=0;
case QUERY_RECORD_COLUMNS:
for (; ctx.columnIndex < columnCount; ctx.columnIndex++) {
RecordColumnMetadata m=ctx.metadata.getColumnQuick(ctx.columnIndex);
r.bookmark();
if (ctx.columnIndex > 0) {
r.put(',');
}
putValue(r,m.getType(),ctx.record,ctx.columnIndex);
}
ctx.queryState=QUERY_RECORD_SUFFIX;
case QUERY_RECORD_SUFFIX:
r.bookmark();
r.put(']');
ctx.record=null;
ctx.queryState=QUERY_RECORD_START;
break;
case QUERY_DATA_SUFFIX:
sendDone(r,ctx);
break OUT;
default :
break OUT;
}
}
 catch (ResponseContentBufferTooSmallException ignored) {
if (r.resetToBookmark()) {
r.sendChunk();
}
 else {
ctx.info().$(""String_Node_Str"").$(ctx.queryState).$();
throw DisconnectedChannelException.INSTANCE;
}
}
}
}",0.9924543288324068
31242,"public QueryHandler(JournalFactoryPool factoryPool,ServerConfiguration configuration){
  this.factoryPool=factoryPool;
  this.configuration=configuration;
}","public QueryHandler(JournalFactoryPool factoryPool,ServerConfiguration configuration,JournalFactory writerFactory){
  this.factoryPool=factoryPool;
  this.configuration=configuration;
  this.writerFactory=writerFactory;
}",0.8275862068965517
31243,"@Override public void handle(IOContext context) throws IOException {
  QueryHandlerContext ctx=localContext.get(context);
  if (ctx == null) {
    localContext.set(context,ctx=new QueryHandlerContext(context.channel.getFd(),context.getServerConfiguration().getDbCyclesBeforeCancel()));
  }
  ChunkedResponse r=context.chunkedResponse();
  if (ctx.parseUrl(r,context.request)) {
    ctx.compileQuery(r,factoryPool,cacheMisses,cacheHits);
    resume(context);
  }
}","@Override public void handle(IOContext context) throws IOException {
  QueryHandlerContext ctx=localContext.get(context);
  if (ctx == null) {
    localContext.set(context,ctx=new QueryHandlerContext(context.channel.getFd(),context.getServerConfiguration().getDbCyclesBeforeCancel()));
  }
  ChunkedResponse r=context.chunkedResponse();
  if (ctx.parseUrl(r,context.request)) {
    ctx.compileQuery(r,factoryPool,writerFactory,cacheMisses,cacheHits);
    resume(context);
  }
}",0.9851063829787234
31244,"public void setName(String name){
  this.name=name;
}","public void setName(ExprNode name){
  this.name=name;
}",0.8888888888888888
31245,"public String getName(){
  return name;
}","public ExprNode getName(){
  return name;
}",0.8571428571428571
31246,"public void execute(JournalFactory factory,CharSequence statement) throws ParserException, JournalException {
  createWriter(factory,statement).close();
}","public void execute(JournalFactory factory,ParsedModel model) throws ParserException, JournalException {
  createWriter(factory,model).close();
}",0.862876254180602
31247,"private ParsedModel parseCreateJournal() throws ParserException {
  String name=tok().toString();
  CharSequence tok=tok();
  final JournalStructure struct;
  final QueryModel queryModel;
  if (Chars.equals(tok,'(')) {
    queryModel=null;
    struct=new JournalStructure(name);
    lexer.unparse();
    parseJournalFields(struct);
  }
 else   if (Chars.equals(tok,""String_Node_Str"")) {
    expectTok(tok(),'(');
    queryModel=parseQuery(true);
    struct=null;
    expectTok(tok(),')');
  }
 else {
    throw QueryError.position(lexer.position()).$(""String_Node_Str"").$();
  }
  CreateJournalModel model=createJournalModelPool.next();
  model.setStruct(struct);
  model.setQueryModel(queryModel);
  model.setName(name);
  tok=lexer.optionTok();
  while (tok != null && Chars.equals(tok,',')) {
    expectTok(tok(),""String_Node_Str"");
    expectTok(tok(),'(');
    ColumnIndexModel columnIndexModel=columnIndexModelPool.next();
    columnIndexModel.setName(expectExpr());
    tok=tok();
    if (Chars.equals(tok,""String_Node_Str"")) {
      int pos=lexer.position();
      try {
        columnIndexModel.setBuckets(Numbers.ceilPow2(Numbers.parseInt(tok())) - 1);
      }
 catch (      NumericException e) {
        throw QueryError.$(pos,""String_Node_Str"");
      }
      tok=tok();
    }
    expectTok(tok,')');
    model.addColumnIndexModel(columnIndexModel);
    tok=lexer.optionTok();
  }
  ExprNode timestamp=parseTimestamp(tok);
  if (timestamp != null) {
    model.setTimestamp(timestamp);
    tok=lexer.optionTok();
  }
  ExprNode partitionBy=parsePartitionBy(tok);
  if (partitionBy != null) {
    model.setPartitionBy(partitionBy);
    tok=lexer.optionTok();
  }
  ExprNode hint=parseRecordHint(tok);
  if (hint != null) {
    model.setRecordHint(hint);
    tok=lexer.optionTok();
  }
  if (tok != null) {
    throw QueryError.$(lexer.position(),""String_Node_Str"");
  }
  return model;
}","private ParsedModel parseCreateJournal() throws ParserException {
  ExprNode name=exprNodePool.next();
  name.token=tok().toString();
  name.position=lexer.position();
  name.type=ExprNode.LITERAL;
  CharSequence tok=tok();
  final JournalStructure struct;
  final QueryModel queryModel;
  if (Chars.equals(tok,'(')) {
    queryModel=null;
    struct=new JournalStructure(name.token);
    lexer.unparse();
    parseJournalFields(struct);
  }
 else   if (Chars.equals(tok,""String_Node_Str"")) {
    expectTok(tok(),'(');
    queryModel=parseQuery(true);
    struct=null;
    expectTok(tok(),')');
  }
 else {
    throw QueryError.position(lexer.position()).$(""String_Node_Str"").$();
  }
  CreateJournalModel model=createJournalModelPool.next();
  model.setStruct(struct);
  model.setQueryModel(queryModel);
  model.setName(name);
  tok=lexer.optionTok();
  while (tok != null && Chars.equals(tok,',')) {
    expectTok(tok(),""String_Node_Str"");
    expectTok(tok(),'(');
    ColumnIndexModel columnIndexModel=columnIndexModelPool.next();
    columnIndexModel.setName(expectExpr());
    tok=tok();
    if (Chars.equals(tok,""String_Node_Str"")) {
      int pos=lexer.position();
      try {
        columnIndexModel.setBuckets(Numbers.ceilPow2(Numbers.parseInt(tok())) - 1);
      }
 catch (      NumericException e) {
        throw QueryError.$(pos,""String_Node_Str"");
      }
      tok=tok();
    }
    expectTok(tok,')');
    model.addColumnIndexModel(columnIndexModel);
    tok=lexer.optionTok();
  }
  ExprNode timestamp=parseTimestamp(tok);
  if (timestamp != null) {
    model.setTimestamp(timestamp);
    tok=lexer.optionTok();
  }
  ExprNode partitionBy=parsePartitionBy(tok);
  if (partitionBy != null) {
    model.setPartitionBy(partitionBy);
    tok=lexer.optionTok();
  }
  ExprNode hint=parseRecordHint(tok);
  if (hint != null) {
    model.setRecordHint(hint);
    tok=lexer.optionTok();
  }
  if (tok != null) {
    throw QueryError.$(lexer.position(),""String_Node_Str"");
  }
  return model;
}",0.9615384615384616
31248,"@Override public long copyTo(long address,long start,long length){
  long res;
  long rem=remaining - start;
  long size=res=length > rem ? rem : length;
  long offset=workOffset + start;
  do {
    int remaining=mappedFile.pageRemaining(offset);
    int sz=size > remaining ? remaining : (int)size;
    Unsafe.getUnsafe().copyMemory(mappedFile.addressOf(offset,1),address,sz);
    address+=sz;
    offset+=sz;
    size-=sz;
  }
 while (size > 0);
  return res;
}","@Override public long copyTo(long address,long start,long length){
  long res;
  long rem=remaining - start;
  long size=res=length > rem ? rem : length;
  long offset=workOffset + start;
  do {
    long from=mappedFile.addressOf(offset,1);
    int remaining=mappedFile.pageRemaining(offset);
    int sz=size > remaining ? remaining : (int)size;
    Unsafe.getUnsafe().copyMemory(from,address,sz);
    address+=sz;
    offset+=sz;
    size-=sz;
  }
 while (size > 0);
  return res;
}",0.9154334038054968
31249,"@Override public int read() throws IOException {
  if (remaining == 0) {
    return -1;
  }
  if (pageRemaining == 0) {
    renew();
  }
  pageRemaining--;
  workOffset++;
  remaining--;
  return Unsafe.getUnsafe().getByte(blockAddress++);
}","@Override public int read() throws IOException {
  if (remaining == 0) {
    return -1;
  }
  if (pageRemaining == 0) {
    renew();
  }
  pageRemaining--;
  workOffset++;
  remaining--;
  return (int)Unsafe.getUnsafe().getByte(blockAddress++) & 0xFF;
}",0.9757085020242916
31250,"private boolean processJournalEvents(final WritableByteChannel channel,boolean blocking) throws JournalNetworkException {
  handler.setChannel(channel);
  boolean dataSent=false;
  if (eventProcessor.process(handler,blocking)) {
    dataSent=handler.isDataSent();
    for (int i=0, k=clientStates.size(); i < k; i++) {
      JournalClientState state=clientStates.getQuick(i);
      if (state.isWaitingOnEvents()) {
        dataSent=dispatch0(channel,i) || dataSent;
      }
      state.setWaitingOnEvents(true);
    }
    if (dataSent) {
      commandProducer.write(channel,Command.SERVER_READY_CMD);
    }
 else     if (blocking) {
      LOG.info().$(socketAddress).$(""String_Node_Str"").$();
    }
  }
 else {
    if (server.isRunning()) {
      commandProducer.write(channel,Command.SERVER_HEARTBEAT);
    }
 else {
      commandProducer.write(channel,Command.SERVER_SHUTDOWN);
    }
  }
  return dataSent;
}","private boolean processJournalEvents(final WritableByteChannel channel,boolean blocking) throws JournalNetworkException {
  handler.setChannel(channel);
  boolean dataSent=false;
  if (eventProcessor.process(handler,blocking)) {
    dataSent=handler.isDataSent();
    for (int i=0, k=clientStates.size(); i < k; i++) {
      JournalClientState state=clientStates.getQuick(i);
      if (state.isWaitingOnEvents()) {
        dataSent=dispatch0(channel,i) || dataSent;
      }
      state.setWaitingOnEvents(true);
    }
    if (dataSent) {
      commandProducer.write(channel,Command.SERVER_READY_CMD);
    }
 else     if (blocking) {
      commandProducer.write(channel,Command.SERVER_HEARTBEAT);
    }
  }
 else {
    if (server.isRunning()) {
      commandProducer.write(channel,Command.SERVER_HEARTBEAT);
    }
 else {
      commandProducer.write(channel,Command.SERVER_SHUTDOWN);
    }
  }
  return dataSent;
}",0.943499725726824
31251,"@Test public void testLagTrickle() throws Exception {
  JournalWriter<Quote> origin=factory.writer(Quote.class,""String_Node_Str"");
  TestData.appendQuoteData2(origin);
  final JournalWriter<Quote> randomOrigin=factory.writer(new JournalKey<>(Quote.class,""String_Node_Str"",PartitionBy.NONE,false));
  randomOrigin.append(origin.query().all().asResultSet().shuffle(new Rnd()));
  origin.close();
  final JournalWriter<Quote> remote=factory.writer(Quote.class,""String_Node_Str"");
  final Journal<Quote> remoteReader=factory.reader(Quote.class,""String_Node_Str"");
  Journal<Quote> local=factory.writer(Quote.class,""String_Node_Str"");
  local.close();
  local=factory.reader(Quote.class,""String_Node_Str"");
  Assert.assertEquals(0,local.size());
  JournalServer server=new JournalServer(serverConfig,factory);
  JournalClient client=new JournalClient(clientConfig,factory);
  server.publish(remote);
  server.start();
  client.subscribe(Quote.class,""String_Node_Str"",""String_Node_Str"");
  client.start();
  lagIteration(randomOrigin,remote,0,100);
  lagIteration(randomOrigin,remote,100,200);
  lagIteration(randomOrigin,remote,200,300);
  lagIteration(randomOrigin,remote,300,400);
  Thread.sleep(200);
  server.halt();
  client.halt();
  local.refresh();
  remoteReader.refresh();
  TestUtils.assertEquals(remoteReader,local);
}","@Test public void testLagTrickle() throws Exception {
  JournalWriter<Quote> origin=factory.writer(Quote.class,""String_Node_Str"");
  TestData.appendQuoteData2(origin);
  final JournalWriter<Quote> randomOrigin=factory.writer(new JournalKey<>(Quote.class,""String_Node_Str"",PartitionBy.NONE,false));
  randomOrigin.append(origin.query().all().asResultSet().shuffle(new Rnd()));
  origin.close();
  final JournalWriter<Quote> remote=factory.writer(Quote.class,""String_Node_Str"");
  final Journal<Quote> remoteReader=factory.reader(Quote.class,""String_Node_Str"");
  Journal<Quote> local=factory.writer(Quote.class,""String_Node_Str"");
  local.close();
  local=factory.reader(Quote.class,""String_Node_Str"");
  Assert.assertEquals(0,local.size());
  JournalServer server=new JournalServer(serverConfig,factory);
  JournalClient client=new JournalClient(clientConfig,factory);
  server.publish(remote);
  server.start();
  client.subscribe(Quote.class,""String_Node_Str"",""String_Node_Str"");
  client.start();
  int n=0;
  while (n < 400) {
    lagIteration(randomOrigin,remote,n,n + 10);
    n+=10;
  }
  Thread.sleep(200);
  server.halt();
  client.halt();
  local.refresh();
  remoteReader.refresh();
  TestUtils.assertEquals(remoteReader,local);
}",0.9127045985970382
31252,"public Win32SelectDispatcher(CharSequence ip,int port,RingQueue<IOEvent> ioQueue,Sequence ioSequence,Clock clock,ServerConfiguration configuration,int capacity){
  this.readFdSet=new FDSet(capacity);
  this.writeFdSet=new FDSet(capacity);
  this.ioQueue=ioQueue;
  this.ioSequence=ioSequence;
  this.interestQueue=new RingQueue<>(IOEvent.FACTORY,ioQueue.getCapacity());
  this.interestPubSequence=new MPSequence(interestQueue.getCapacity());
  this.interestPubSequence.setBarrier(this.interestSubSequence);
  this.interestSubSequence.setBarrier(this.interestPubSequence);
  this.clock=clock;
  this.configuration=configuration;
  this.maxConnections=configuration.getHttpMaxConnections();
  this.timeout=configuration.getHttpTimeout();
  this.socketFd=Net.socketTcp(false);
  if (Net.bind(this.socketFd,ip,port)) {
    Net.listen(this.socketFd,128);
    int r=pending.addRow();
    pending.set(r,M_TIMESTAMP,System.currentTimeMillis());
    pending.set(r,M_FD,socketFd);
    readFdSet.add(socketFd);
    readFdSet.setCount(1);
    writeFdSet.setCount(0);
  }
 else {
    throw new NetworkError(""String_Node_Str"" + Os.errno());
  }
}","public Win32SelectDispatcher(CharSequence ip,int port,RingQueue<IOEvent> ioQueue,Sequence ioSequence,Clock clock,ServerConfiguration configuration,int capacity){
  this.readFdSet=new FDSet(capacity);
  this.writeFdSet=new FDSet(capacity);
  this.ioQueue=ioQueue;
  this.ioSequence=ioSequence;
  this.interestQueue=new RingQueue<>(IOEvent.FACTORY,ioQueue.getCapacity());
  this.interestPubSequence=new MPSequence(interestQueue.getCapacity());
  this.interestPubSequence.setBarrier(this.interestSubSequence);
  this.interestSubSequence.setBarrier(this.interestPubSequence);
  this.clock=clock;
  this.configuration=configuration;
  this.maxConnections=configuration.getHttpMaxConnections();
  this.timeout=configuration.getHttpTimeout();
  this.socketFd=Net.socketTcp(false);
  if (Net.bind(this.socketFd,ip,port)) {
    Net.listen(this.socketFd,128);
    int r=pending.addRow();
    pending.set(r,M_TIMESTAMP,System.currentTimeMillis());
    pending.set(r,M_FD,socketFd);
    pending.set(r,M_OPERATION,ChannelStatus.READ);
    readFdSet.add(socketFd);
    readFdSet.setCount(1);
    writeFdSet.setCount(0);
  }
 else {
    throw new NetworkError(""String_Node_Str"" + Os.errno());
  }
}",0.9779697624190063
31253,"public static void append(CharSink sink,final long value){
  long i=value;
  if (i > Integer.MAX_VALUE || i < Integer.MIN_VALUE) {
    if (i < 0) {
      if (i == Long.MIN_VALUE) {
        sink.put(""String_Node_Str"");
        return;
      }
      sink.put('-');
      i=-i;
    }
    if (i < 100000000000L) {
      appendLong11(sink,i);
    }
 else     if (i < 1000000000000L) {
      appendLong12(sink,i);
    }
 else     if (i < 10000000000000L) {
      appendLong13(sink,i);
    }
 else     if (i < 100000000000000L) {
      appendLong14(sink,i);
    }
 else     if (i < 1000000000000000L) {
      appendLong15(sink,i);
    }
 else     if (i < 10000000000000000L) {
      appendLong16(sink,i);
    }
 else     if (i < 100000000000000000L) {
      appendLong17(sink,i);
    }
 else     if (i < 1000000000000000000L) {
      appendLong18(sink,i);
    }
 else {
      appendLong19(sink,i);
    }
  }
 else {
    append(sink,(int)i);
  }
}","public static void append(CharSink sink,final long value){
  long i=value;
  if (i > Integer.MAX_VALUE || i < Integer.MIN_VALUE) {
    if (i < 0) {
      if (i == Long.MIN_VALUE) {
        sink.put(""String_Node_Str"");
        return;
      }
      sink.put('-');
      i=-i;
    }
    if (i < 10000000000L) {
      appendLong10(sink,i);
    }
 else     if (i < 100000000000L) {
      appendLong11(sink,i);
    }
 else     if (i < 1000000000000L) {
      appendLong12(sink,i);
    }
 else     if (i < 10000000000000L) {
      appendLong13(sink,i);
    }
 else     if (i < 100000000000000L) {
      appendLong14(sink,i);
    }
 else     if (i < 1000000000000000L) {
      appendLong15(sink,i);
    }
 else     if (i < 10000000000000000L) {
      appendLong16(sink,i);
    }
 else     if (i < 100000000000000000L) {
      appendLong17(sink,i);
    }
 else     if (i < 1000000000000000000L) {
      appendLong18(sink,i);
    }
 else {
      appendLong19(sink,i);
    }
  }
 else {
    append(sink,(int)i);
  }
}",0.9403905447070916
31254,"private static void putValue(CharSink sink,ColumnType type,Record rec,int col){
switch (type) {
case BOOLEAN:
    sink.put(rec.getBool(col));
  break;
case BYTE:
sink.put(rec.get(col));
break;
case DOUBLE:
sink.putJson(rec.getDouble(col),10);
break;
case FLOAT:
sink.putJson(rec.getFloat(col),10);
break;
case INT:
final int i=rec.getInt(col);
if (i == Integer.MIN_VALUE) {
sink.put(""String_Node_Str"");
}
 else {
Numbers.append(sink,i);
}
break;
case LONG:
final long l=rec.getLong(col);
if (l == Long.MIN_VALUE) {
sink.put(""String_Node_Str"");
}
 else {
sink.put('""').put(l).put('""');
}
break;
case DATE:
final long d=rec.getDate(col);
if (d == Long.MIN_VALUE) {
sink.put(""String_Node_Str"");
break;
}
sink.put('""').putISODate(d).put('""');
break;
case SHORT:
sink.put(rec.getShort(col));
break;
case STRING:
putStringOrNull(sink,rec.getFlyweightStr(col));
break;
case SYMBOL:
putStringOrNull(sink,rec.getSym(col));
break;
case BINARY:
sink.put('[');
sink.put(']');
break;
default :
break;
}
}","private static void putValue(CharSink sink,ColumnType type,Record rec,int col){
switch (type) {
case BOOLEAN:
    sink.put(rec.getBool(col));
  break;
case BYTE:
sink.put(rec.get(col));
break;
case DOUBLE:
sink.putJson(rec.getDouble(col),10);
break;
case FLOAT:
sink.putJson(rec.getFloat(col),10);
break;
case INT:
final int i=rec.getInt(col);
if (i == Integer.MIN_VALUE) {
sink.put(""String_Node_Str"");
}
 else {
Numbers.append(sink,i);
}
break;
case LONG:
final long l=rec.getLong(col);
if (l == Long.MIN_VALUE) {
sink.put(""String_Node_Str"");
}
 else {
sink.put(l);
}
break;
case DATE:
final long d=rec.getDate(col);
if (d == Long.MIN_VALUE) {
sink.put(""String_Node_Str"");
break;
}
sink.put('""').putISODate(d).put('""');
break;
case SHORT:
sink.put(rec.getShort(col));
break;
case STRING:
putStringOrNull(sink,rec.getFlyweightStr(col));
break;
case SYMBOL:
putStringOrNull(sink,rec.getSym(col));
break;
case BINARY:
sink.put('[');
sink.put(']');
break;
default :
break;
}
}",0.989816700610998
31255,"@SuppressFBWarnings(""String_Node_Str"") private RecordSource selectColumns0(final RecordSource recordSource,QueryModel model) throws ParserException {
  final ObjList<QueryColumn> columns=model.getColumns();
  final CharSequenceIntHashMap columnNameHistogram=model.getColumnNameHistogram();
  final RecordMetadata meta=recordSource.getMetadata();
  this.outerVirtualColumns.clear();
  this.aggregators.clear();
  this.selectedColumns.clear();
  this.selectedColumnAliases.clear();
  this.groupKeyColumns.clear();
  this.aggregateColumnSequence=0;
  this.analyticColumns.clear();
  this.orderedAnalytic=false;
  ObjList<VirtualColumn> virtualColumns=null;
  for (int i=0, k=columns.size(); i < k; i++) {
    final QueryColumn qc=columns.getQuick(i);
    final ExprNode node=qc.getAst();
    final boolean analytic=qc instanceof AnalyticColumn;
    if (!analytic && node.type == ExprNode.NodeType.LITERAL) {
      if (meta.getColumnIndexQuiet(node.token) == -1) {
        throw QueryError.invalidColumn(node.position,node.token);
      }
      if (columnNameHistogram.get(node.token) > 0) {
        throw QueryError.ambiguousColumn(node.position);
      }
      selectedColumns.add(node.token);
      addAlias(node.position,qc.getAlias() == null ? node.token : qc.getAlias());
      groupKeyColumns.add(node.token);
      continue;
    }
    if (qc.getAlias() == null) {
      qc.of(createAlias(aggregateColumnSequence++),node);
    }
    selectedColumns.add(qc.getAlias());
    addAlias(node.position,qc.getAlias());
    if (!analytic && node.type == ExprNode.NodeType.FUNCTION && FunctionFactories.isAggregate(node.token)) {
      aggregators.add(qc);
      continue;
    }
    if (node.type == ExprNode.NodeType.OPERATION || node.type == ExprNode.NodeType.FUNCTION) {
      int beforeSplit=aggregators.size();
      splitAggregates(node,aggregators);
      if (beforeSplit < aggregators.size()) {
        outerVirtualColumns.add(qc);
        continue;
      }
    }
    if (analytic) {
      if (qc.getAst().type != ExprNode.NodeType.FUNCTION) {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
      if (aggregators.size() > 0) {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
      AnalyticColumn ac=(AnalyticColumn)qc;
      orderedAnalytic=ac.getOrderBy().size() > 0;
      analyticColumns.add(ac);
    }
 else {
      if (virtualColumns == null) {
        virtualColumns=new ObjList<>();
      }
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),recordSource.getMetadata());
      vc.setName(qc.getAlias());
      virtualColumns.add(vc);
    }
    groupKeyColumns.add(qc.getAlias());
  }
  RecordSource rs=recordSource;
  if (virtualColumns != null) {
    rs=new VirtualColumnRecordSource(rs,virtualColumns);
  }
  if (aggregators.size() > 0) {
    rs=compileAggregates(rs,model);
  }
 else {
    ExprNode sampleBy=model.getSampleBy();
    if (sampleBy != null) {
      throw QueryError.$(sampleBy.position,""String_Node_Str"");
    }
  }
  if (outerVirtualColumns.size() > 0) {
    rs=compileOuterVirtualColumns(rs,model);
  }
  if (analyticColumns.size() > 0) {
    rs=compileAnalytic(rs,model);
  }
  if (selectedColumns.size() > 0) {
    rs=new SelectedColumnsRecordSource(rs,selectedColumns,selectedColumnAliases);
  }
  return rs;
}","@SuppressFBWarnings(""String_Node_Str"") private RecordSource selectColumns0(final RecordSource recordSource,QueryModel model) throws ParserException {
  final ObjList<QueryColumn> columns=model.getColumns();
  final CharSequenceIntHashMap columnNameHistogram=model.getColumnNameHistogram();
  final RecordMetadata meta=recordSource.getMetadata();
  this.outerVirtualColumns.clear();
  this.aggregators.clear();
  this.selectedColumns.clear();
  this.selectedColumnAliases.clear();
  this.groupKeyColumns.clear();
  this.aggregateColumnSequence=0;
  this.analyticColumns.clear();
  ObjList<VirtualColumn> virtualColumns=null;
  for (int i=0, k=columns.size(); i < k; i++) {
    final QueryColumn qc=columns.getQuick(i);
    final ExprNode node=qc.getAst();
    final boolean analytic=qc instanceof AnalyticColumn;
    if (!analytic && node.type == ExprNode.NodeType.LITERAL) {
      if (meta.getColumnIndexQuiet(node.token) == -1) {
        throw QueryError.invalidColumn(node.position,node.token);
      }
      if (columnNameHistogram.get(node.token) > 0) {
        throw QueryError.ambiguousColumn(node.position);
      }
      selectedColumns.add(node.token);
      addAlias(node.position,qc.getAlias() == null ? node.token : qc.getAlias());
      groupKeyColumns.add(node.token);
      continue;
    }
    if (qc.getAlias() == null) {
      qc.of(createAlias(aggregateColumnSequence++),node);
    }
    selectedColumns.add(qc.getAlias());
    addAlias(node.position,qc.getAlias());
    if (!analytic && node.type == ExprNode.NodeType.FUNCTION && FunctionFactories.isAggregate(node.token)) {
      aggregators.add(qc);
      continue;
    }
    if (node.type == ExprNode.NodeType.OPERATION || node.type == ExprNode.NodeType.FUNCTION) {
      int beforeSplit=aggregators.size();
      splitAggregates(node,aggregators);
      if (beforeSplit < aggregators.size()) {
        outerVirtualColumns.add(qc);
        continue;
      }
    }
    if (analytic) {
      if (qc.getAst().type != ExprNode.NodeType.FUNCTION) {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
      if (aggregators.size() > 0) {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
      AnalyticColumn ac=(AnalyticColumn)qc;
      analyticColumns.add(ac);
    }
 else {
      if (virtualColumns == null) {
        virtualColumns=new ObjList<>();
      }
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),recordSource.getMetadata());
      vc.setName(qc.getAlias());
      virtualColumns.add(vc);
    }
    groupKeyColumns.add(qc.getAlias());
  }
  RecordSource rs=recordSource;
  if (virtualColumns != null) {
    rs=new VirtualColumnRecordSource(rs,virtualColumns);
  }
  if (aggregators.size() > 0) {
    rs=compileAggregates(rs,model);
  }
 else {
    ExprNode sampleBy=model.getSampleBy();
    if (sampleBy != null) {
      throw QueryError.$(sampleBy.position,""String_Node_Str"");
    }
  }
  if (outerVirtualColumns.size() > 0) {
    rs=compileOuterVirtualColumns(rs,model);
  }
  if (analyticColumns.size() > 0) {
    rs=compileAnalytic(rs,model);
  }
  if (selectedColumns.size() > 0) {
    rs=new SelectedColumnsRecordSource(rs,selectedColumns,selectedColumnAliases);
  }
  return rs;
}",0.987838248707814
31256,"private RecordSource compileAnalytic(RecordSource rs,QueryModel model) throws ParserException {
  final int n=analyticColumns.size();
  grouppedAnalytic.clear();
  analyticComparators.clear();
  final RecordMetadata metadata=rs.getMetadata();
  ObjList<AnalyticFunction> naturalOrderFunctions=null;
  for (int i=0; i < n; i++) {
    AnalyticColumn col=analyticColumns.getQuick(i);
    ObjList<VirtualColumn> partitionBy=null;
    int psz=col.getPartitionBy().size();
    if (psz > 0) {
      partitionBy=new ObjList<>(psz);
      for (int j=0; j < psz; j++) {
        partitionBy.add(virtualColumnBuilder.createVirtualColumn(model,col.getPartitionBy().getQuick(j),metadata));
      }
    }
    if (col.getAst().paramCount > 1) {
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    if (col.getAst().paramCount < 1) {
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    VirtualColumn valueColumn=virtualColumnBuilder.createVirtualColumn(model,col.getAst().rhs,metadata);
    valueColumn.setName(col.getAlias());
    AnalyticFunction f=AnalyticFunctionFactories.newInstance(configuration,col.getAst().token,valueColumn,partitionBy,rs.supportsRowIdAccess(),orderedAnalytic);
    if (f == null) {
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    if (col.getOrderBy().size() > 0) {
      IntList order=toOrderIndices(metadata,col.getOrderBy(),col.getOrderByDirection());
      ObjList<AnalyticFunction> funcs=grouppedAnalytic.get(order);
      if (funcs == null) {
        grouppedAnalytic.put(order,funcs=new ObjList<>());
      }
      funcs.add(f);
    }
 else {
      if (naturalOrderFunctions == null) {
        naturalOrderFunctions=new ObjList<>();
      }
      naturalOrderFunctions.add(f);
    }
  }
  ObjList<ObjList<AnalyticFunction>> funcs=new ObjList<>(grouppedAnalytic.size());
  for (  ObjObjHashMap.Entry<IntList,ObjList<AnalyticFunction>> e : grouppedAnalytic) {
    analyticComparators.add(cc.compile(metadata,e.key));
    funcs.add(e.value);
  }
  if (naturalOrderFunctions != null) {
    analyticComparators.add(null);
    funcs.add(naturalOrderFunctions);
  }
  return new AnalyticRecordSource(configuration.getDbAnalyticWindowPage(),configuration.getDbSortKeyPage(),rs,analyticComparators,funcs);
}","private RecordSource compileAnalytic(RecordSource rs,QueryModel model) throws ParserException {
  final int n=analyticColumns.size();
  grouppedAnalytic.clear();
  analyticComparators.clear();
  final RecordMetadata metadata=rs.getMetadata();
  ObjList<AnalyticFunction> naturalOrderFunctions=null;
  for (int i=0; i < n; i++) {
    AnalyticColumn col=analyticColumns.getQuick(i);
    ObjList<VirtualColumn> partitionBy=null;
    int psz=col.getPartitionBy().size();
    if (psz > 0) {
      partitionBy=new ObjList<>(psz);
      for (int j=0; j < psz; j++) {
        partitionBy.add(virtualColumnBuilder.createVirtualColumn(model,col.getPartitionBy().getQuick(j),metadata));
      }
    }
    if (col.getAst().paramCount > 1) {
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    if (col.getAst().paramCount < 1) {
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    VirtualColumn valueColumn=virtualColumnBuilder.createVirtualColumn(model,col.getAst().rhs,metadata);
    valueColumn.setName(col.getAlias());
    AnalyticFunction f=AnalyticFunctionFactories.newInstance(configuration,col.getAst().token,valueColumn,partitionBy,rs.supportsRowIdAccess(),col.getOrderBy().size() > 0);
    if (f == null) {
      throw QueryError.$(col.getAst().position,""String_Node_Str"");
    }
    if (col.getOrderBy().size() > 0) {
      IntList order=toOrderIndices(metadata,col.getOrderBy(),col.getOrderByDirection());
      ObjList<AnalyticFunction> funcs=grouppedAnalytic.get(order);
      if (funcs == null) {
        grouppedAnalytic.put(order,funcs=new ObjList<>());
      }
      funcs.add(f);
    }
 else {
      if (naturalOrderFunctions == null) {
        naturalOrderFunctions=new ObjList<>();
      }
      naturalOrderFunctions.add(f);
    }
  }
  ObjList<ObjList<AnalyticFunction>> funcs=new ObjList<>(grouppedAnalytic.size());
  for (  ObjObjHashMap.Entry<IntList,ObjList<AnalyticFunction>> e : grouppedAnalytic) {
    analyticComparators.add(cc.compile(metadata,e.key));
    funcs.add(e.value);
  }
  if (naturalOrderFunctions != null) {
    analyticComparators.add(null);
    funcs.add(naturalOrderFunctions);
  }
  return new AnalyticRecordSource(configuration.getDbAnalyticWindowPage(),configuration.getDbSortKeyPage(),rs,analyticComparators,funcs);
}",0.9908655937364071
31257,"@Test public void testImportIntoBusyJournal2() throws Exception {
  JournalFactory f=new JournalFactory(factory.getConfiguration().getJournalBase().getAbsolutePath());
  try (JournalWriter w=f.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$())){
    JournalEntryWriter ew=w.entryWriter();
    ew.putInt(0,3);
    ew.putInt(1,30);
    ew.append();
    w.commit();
    HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
        put(""String_Node_Str"",new ImportHandler(factory));
      }
    }
);
    server.start();
    StringBuilder response=new StringBuilder();
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,response));
      Assert.assertTrue(Chars.startsWith(response,""String_Node_Str""));
    }
  finally {
      server.halt();
    }
  }
 }","@Test public void testImportIntoBusyJournal2() throws Exception {
  JournalFactory f=new JournalFactory(factory.getConfiguration().getJournalBase().getAbsolutePath());
  try (JournalWriter w=f.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$())){
    JournalEntryWriter ew=w.entryWriter();
    ew.putInt(0,3);
    ew.putInt(1,30);
    ew.append();
    w.commit();
    HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
        put(""String_Node_Str"",new ImportHandler(factory));
      }
    }
);
    server.start();
    StringBuilder response=new StringBuilder();
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,response));
      Assert.assertTrue(Chars.startsWith(response,""String_Node_Str""));
    }
 catch (    IOException e) {
      Assert.assertTrue(e.getMessage().contains(""String_Node_Str""));
    }
 finally {
      server.halt();
    }
  }
 }",0.9447721179624664
31258,"public static void export(RecordSource from,JournalReaderFactory factory,File to,TextFileFormat format) throws JournalException, IOException {
  if (to.isDirectory()) {
    throw new JournalException(to + ""String_Node_Str"");
  }
  try (FileSink sink=new FileSink(to)){
    RecordSourcePrinter printer=new RecordSourcePrinter(sink,format.getDelimiter());
    printer.printCursor(from,factory);
  }
 }","public static void export(RecordSource from,JournalReaderFactory factory,File to,TextFileFormat format) throws JournalException, IOException {
  if (to.isDirectory()) {
    throw new JournalException(to + ""String_Node_Str"");
  }
  try (FileSink sink=new FileSink(to)){
    RecordSourcePrinter printer=new RecordSourcePrinter(sink,format.getDelimiter());
    printer.print(from,factory);
  }
 }",0.9924242424242424
31259,"@Override public int getStrLen(){
  return nextNull ? 0 : valueColumn.getStrLen(getParentRecord());
}","@Override public int getStrLen(){
  return nextNull ? -1 : valueColumn.getStrLen(getParentRecord());
}",0.9852216748768472
31260,"@Override public int getStrLen(){
  return prevRowId == -1 ? 0 : valueColumn.getStrLen(getParentRecord());
}","@Override public int getStrLen(){
  return prevRowId == -1 ? -1 : valueColumn.getStrLen(getParentRecord());
}",0.9861751152073732
31261,"public CharSequence getFlyweightStrB(int index){
  long address=address0(index);
  int len=Unsafe.getUnsafe().getInt(address);
  return csB.of(address + 4,address + 4 + len * 2);
}","public CharSequence getFlyweightStrB(int index){
  long address=address0(index);
  int len=Unsafe.getUnsafe().getInt(address);
  return len == VariableColumn.NULL_LEN ? null : csB.of(address + 4,address + 4 + len * 2);
}",0.9
31262,"public CharSequence getFlyweightStr(int index){
  long address=address0(index);
  int len=Unsafe.getUnsafe().getInt(address);
  return csA.of(address + 4,address + 4 + len * 2);
}","public CharSequence getFlyweightStr(int index){
  long address=address0(index);
  int len=Unsafe.getUnsafe().getInt(address);
  return len == VariableColumn.NULL_LEN ? null : csA.of(address + 4,address + 4 + len * 2);
}",0.8994974874371859
31263,"@Override public int getStrLen(Record rec){
  return lhs.getStrLen(rec) + rhs.getStrLen(rec);
}","@Override public int getStrLen(Record rec){
  int ll=lhs.getStrLen(rec);
  int rl=rhs.getStrLen(rec);
  if (ll == VariableColumn.NULL_LEN) {
    return rl;
  }
  if (rl == VariableColumn.NULL_LEN) {
    return ll;
  }
  return ll + rl;
}",0.5120481927710844
31264,"public void init(CharSequence lhs,CharSequence rhs){
  this.lhs=lhs;
  this.rhs=rhs;
  this.split=lhs.length();
}","public void init(CharSequence lhs,CharSequence rhs){
  this.lhs=lhs;
  this.rhs=rhs;
  this.rl=rhs == null ? 0 : rhs.length();
  this.split=lhs == null ? 0 : lhs.length();
}",0.7902097902097902
31265,"@Override public int length(){
  return split + rhs.length();
}","@Override public int length(){
  return split + rl;
}",0.913793103448276
31266,"@Test public void testGenericPublish() throws Exception {
  JournalWriter w=factory.writer(new JournalStructure(""String_Node_Str""){
{
      $sym(""String_Node_Str"").index();
      $int(""String_Node_Str"");
      $double(""String_Node_Str"");
      $ts();
      partitionBy(PartitionType.DAY);
    }
  }
);
  JournalServer server=new JournalServer(new ServerConfig(){
{
      addNode(new ServerNode(1,""String_Node_Str""));
      setHeartbeatFrequency(100);
      setEnableMultiCast(false);
    }
  }
,factory);
  server.publish(w);
  server.start();
  final CountDownLatch ready=new CountDownLatch(1);
  JournalClient client=new JournalClient(new ClientConfig(""String_Node_Str""){
{
      setEnableMultiCast(false);
    }
  }
,factory);
  client.subscribe(new JournalKey(""String_Node_Str""),new JournalKey(""String_Node_Str""),new TxListener(){
    @Override public void onCommit(){
      ready.countDown();
    }
    @Override public void onError(){
    }
  }
);
  client.start();
  Rnd rnd=new Rnd();
  for (int i=0; i < 100; i++) {
    JournalEntryWriter ew=w.entryWriter();
    ew.putSym(0,rnd.nextString(10));
    ew.putInt(1,rnd.nextInt());
    ew.putDouble(2,rnd.nextDouble());
    ew.append();
  }
  w.commit();
  Assert.assertTrue(ready.await(1,TimeUnit.SECONDS));
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.printCursor(compiler.compileSource(factory,""String_Node_Str""),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
  client.halt();
  server.halt();
}","@Test public void testGenericPublish() throws Exception {
  JournalWriter w=factory.writer(new JournalStructure(""String_Node_Str""){
{
      $sym(""String_Node_Str"").index();
      $int(""String_Node_Str"");
      $double(""String_Node_Str"");
      $ts();
      partitionBy(PartitionType.DAY);
    }
  }
);
  JournalServer server=new JournalServer(new ServerConfig(){
{
      addNode(new ServerNode(1,""String_Node_Str""));
      setHeartbeatFrequency(100);
      setEnableMultiCast(false);
    }
  }
,factory);
  server.publish(w);
  server.start();
  final CountDownLatch ready=new CountDownLatch(1);
  JournalClient client=new JournalClient(new ClientConfig(""String_Node_Str""){
{
      setEnableMultiCast(false);
    }
  }
,factory);
  client.subscribe(new JournalKey(""String_Node_Str""),new JournalKey(""String_Node_Str""),new TxListener(){
    @Override public void onCommit(){
      ready.countDown();
    }
    @Override public void onError(){
    }
  }
);
  client.start();
  Rnd rnd=new Rnd();
  for (int i=0; i < 100; i++) {
    JournalEntryWriter ew=w.entryWriter();
    ew.putSym(0,rnd.nextString(10));
    ew.putInt(1,rnd.nextInt());
    ew.putDouble(2,rnd.nextDouble());
    ew.append();
  }
  w.commit();
  Assert.assertTrue(ready.await(1,TimeUnit.SECONDS));
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.print(compiler.compileSource(factory,""String_Node_Str""),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
  client.halt();
  server.halt();
}",0.99912739965096
31267,"@Test public void testClassToGenericPublish() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class,""String_Node_Str"");
  JournalServer server=new JournalServer(new ServerConfig(){
{
      addNode(new ServerNode(1,""String_Node_Str""));
      setHeartbeatFrequency(100);
      setEnableMultiCast(false);
    }
  }
,factory);
  server.publish(w);
  server.start();
  final CountDownLatch ready=new CountDownLatch(1);
  JournalClient client=new JournalClient(new ClientConfig(""String_Node_Str""){
{
      setEnableMultiCast(false);
    }
  }
,factory);
  client.subscribe(new JournalKey(""String_Node_Str""),new JournalKey(""String_Node_Str""),new TxListener(){
    @Override public void onCommit(){
      ready.countDown();
    }
    @Override public void onError(){
    }
  }
);
  client.start();
  TestUtils.generateQuoteData(w,100,Dates.parseDateTime(""String_Node_Str""));
  w.commit();
  Assert.assertTrue(ready.await(1,TimeUnit.SECONDS));
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.printCursor(compiler.compileSource(factory,""String_Node_Str""),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
  client.halt();
  server.halt();
}","@Test public void testClassToGenericPublish() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class,""String_Node_Str"");
  JournalServer server=new JournalServer(new ServerConfig(){
{
      addNode(new ServerNode(1,""String_Node_Str""));
      setHeartbeatFrequency(100);
      setEnableMultiCast(false);
    }
  }
,factory);
  server.publish(w);
  server.start();
  final CountDownLatch ready=new CountDownLatch(1);
  JournalClient client=new JournalClient(new ClientConfig(""String_Node_Str""){
{
      setEnableMultiCast(false);
    }
  }
,factory);
  client.subscribe(new JournalKey(""String_Node_Str""),new JournalKey(""String_Node_Str""),new TxListener(){
    @Override public void onCommit(){
      ready.countDown();
    }
    @Override public void onError(){
    }
  }
);
  client.start();
  TestUtils.generateQuoteData(w,100,Dates.parseDateTime(""String_Node_Str""));
  w.commit();
  Assert.assertTrue(ready.await(1,TimeUnit.SECONDS));
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.print(compiler.compileSource(factory,""String_Node_Str""),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
  client.halt();
  server.halt();
}",0.9990403071017274
31268,"@Test public void testImportAppend() throws Exception {
  final ServerConfiguration configuration=new ServerConfiguration();
  HttpServer server=new HttpServer(configuration,new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  try (JournalCachingFactory f=new JournalCachingFactory(factory.getConfiguration())){
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,null));
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,null));
      StringSink sink=new StringSink();
      RecordSourcePrinter printer=new RecordSourcePrinter(sink);
      QueryCompiler qc=new QueryCompiler(configuration);
      printer.printCursor(qc.compileSource(f,""String_Node_Str""),f);
      TestUtils.assertEquals(""String_Node_Str"",sink);
    }
  finally {
      server.halt();
    }
  }
 }","@Test public void testImportAppend() throws Exception {
  final ServerConfiguration configuration=new ServerConfiguration();
  HttpServer server=new HttpServer(configuration,new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  try (JournalCachingFactory f=new JournalCachingFactory(factory.getConfiguration())){
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,null));
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,null));
      StringSink sink=new StringSink();
      RecordSourcePrinter printer=new RecordSourcePrinter(sink);
      QueryCompiler qc=new QueryCompiler(configuration);
      printer.print(qc.compileSource(f,""String_Node_Str""),f);
      TestUtils.assertEquals(""String_Node_Str"",sink);
    }
  finally {
      server.halt();
    }
  }
 }",0.9967284623773174
31269,"@Test public void testImportWrongType() throws Exception {
  final ServerConfiguration configuration=new ServerConfiguration();
  HttpServer server=new HttpServer(configuration,new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  try (JournalCachingFactory f=new JournalCachingFactory(factory.getConfiguration())){
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null));
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null));
      StringSink sink=new StringSink();
      RecordSourcePrinter printer=new RecordSourcePrinter(sink);
      QueryCompiler qc=new QueryCompiler(configuration);
      RecordSource src1=qc.compileSource(f,""String_Node_Str"");
      try {
        printer.printCursor(src1,factory);
        TestUtils.assertEquals(""String_Node_Str"",sink);
      }
  finally {
        Misc.free(src1);
      }
      RecordSource src2=qc.compileSource(factory,""String_Node_Str"");
      try {
        Assert.assertEquals(ColumnType.DOUBLE,src2.getMetadata().getColumn(""String_Node_Str"").getType());
      }
  finally {
        Misc.free(src2);
      }
    }
  finally {
      server.halt();
    }
  }
 }","@Test public void testImportWrongType() throws Exception {
  final ServerConfiguration configuration=new ServerConfiguration();
  HttpServer server=new HttpServer(configuration,new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  try (JournalCachingFactory f=new JournalCachingFactory(factory.getConfiguration())){
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null));
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null));
      StringSink sink=new StringSink();
      RecordSourcePrinter printer=new RecordSourcePrinter(sink);
      QueryCompiler qc=new QueryCompiler(configuration);
      RecordSource src1=qc.compileSource(f,""String_Node_Str"");
      try {
        printer.print(src1,factory);
        TestUtils.assertEquals(""String_Node_Str"",sink);
      }
  finally {
        Misc.free(src1);
      }
      RecordSource src2=qc.compileSource(factory,""String_Node_Str"");
      try {
        Assert.assertEquals(ColumnType.DOUBLE,src2.getMetadata().getColumn(""String_Node_Str"").getType());
      }
  finally {
        Misc.free(src2);
      }
    }
  finally {
      server.halt();
    }
  }
 }",0.9976762199845082
31270,"@Test public void testRowidNonPartitioned() throws Exception {
  AsOfJoinRecordSource source=new AsOfJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,compiler.compileSource(factory,""String_Node_Str""),0);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  printer.printCursor(source,factory);
  TestUtils.assertEquals(expected,sink);
  source.reset();
  sink.clear();
  printer.printCursor(source,factory);
  TestUtils.assertEquals(expected,sink);
}","@Test public void testRowidNonPartitioned() throws Exception {
  AsOfJoinRecordSource source=new AsOfJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,compiler.compileSource(factory,""String_Node_Str""),0);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  printer.print(source,factory);
  TestUtils.assertEquals(expected,sink);
  source.reset();
  sink.clear();
  printer.print(source,factory);
  TestUtils.assertEquals(expected,sink);
}",0.9903691813804172
31271,"@Test public void testFixNonPartitionedJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (AsOfJoinRecordSource source=new AsOfJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,new NoRowidSource().of(compiler.compileSource(factory,""String_Node_Str"")),0)){
    printer.printCursor(source,factory);
    TestUtils.assertEquals(expected,sink);
    source.reset();
    sink.clear();
    printer.printCursor(source,factory);
    TestUtils.assertEquals(expected,sink);
  }
 }","@Test public void testFixNonPartitionedJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (AsOfJoinRecordSource source=new AsOfJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,new NoRowidSource().of(compiler.compileSource(factory,""String_Node_Str"")),0)){
    printer.print(source,factory);
    TestUtils.assertEquals(expected,sink);
    source.reset();
    sink.clear();
    printer.print(source,factory);
    TestUtils.assertEquals(expected,sink);
  }
 }",0.991150442477876
31272,"@Test public void testVarNonPartitioned() throws Exception {
  AsOfJoinRecordSource source=new AsOfJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,new NoRowidSource().of(compiler.compileSource(factory,""String_Node_Str"")),0);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  printer.printCursor(source,factory);
  TestUtils.assertEquals(expected,sink);
}","@Test public void testVarNonPartitioned() throws Exception {
  AsOfJoinRecordSource source=new AsOfJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,new NoRowidSource().of(compiler.compileSource(factory,""String_Node_Str"")),0);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  printer.print(source,factory);
  TestUtils.assertEquals(expected,sink);
}",0.99438202247191
31273,"@Test public void testFixJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (AsOfPartitionedJoinRecordSource source=new AsOfPartitionedJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,new NoRowidSource().of(compiler.compileSource(factory,""String_Node_Str"")),0,keys,keys,128,128,128)){
    printer.printCursor(source,factory);
    TestUtils.assertEquals(expected,sink);
    source.reset();
    sink.clear();
    printer.printCursor(source,factory);
    TestUtils.assertEquals(expected,sink);
  }
 }","@Test public void testFixJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (AsOfPartitionedJoinRecordSource source=new AsOfPartitionedJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,new NoRowidSource().of(compiler.compileSource(factory,""String_Node_Str"")),0,keys,keys,128,128,128)){
    printer.print(source,factory);
    TestUtils.assertEquals(expected,sink);
    source.reset();
    sink.clear();
    printer.print(source,factory);
    TestUtils.assertEquals(expected,sink);
  }
 }",0.9915254237288136
31274,"@Test public void testRowidJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (AsOfPartitionedJoinRecordSource source=new AsOfPartitionedJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,compiler.compileSource(factory,""String_Node_Str""),0,keys,keys,512,512,512)){
    printer.printCursor(source,factory,true);
    TestUtils.assertEquals(expected,sink);
    sink.clear();
    source.reset();
    printer.printCursor(source,factory,true);
    TestUtils.assertEquals(expected,sink);
  }
 }","@Test public void testRowidJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (AsOfPartitionedJoinRecordSource source=new AsOfPartitionedJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,compiler.compileSource(factory,""String_Node_Str""),0,keys,keys,512,512,512)){
    printer.print(source,factory,true);
    TestUtils.assertEquals(expected,sink);
    sink.clear();
    source.reset();
    printer.print(source,factory,true);
    TestUtils.assertEquals(expected,sink);
  }
 }",0.9916083916083916
31275,"@Test public void testVarJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (AsOfPartitionedJoinRecordSource source=new AsOfPartitionedJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,new NoRowidSource().of(compiler.compileSource(factory,""String_Node_Str"")),0,keys,keys,512,512,512)){
    printer.printCursor(source,factory,true);
    TestUtils.assertEquals(expected,sink);
    source.reset();
    sink.clear();
    printer.printCursor(source,factory,true);
    TestUtils.assertEquals(expected,sink);
  }
 }","@Test public void testVarJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (AsOfPartitionedJoinRecordSource source=new AsOfPartitionedJoinRecordSource(compiler.compileSource(factory,""String_Node_Str""),0,new NoRowidSource().of(compiler.compileSource(factory,""String_Node_Str"")),0,keys,keys,512,512,512)){
    printer.print(source,factory,true);
    TestUtils.assertEquals(expected,sink);
    source.reset();
    sink.clear();
    printer.print(source,factory,true);
    TestUtils.assertEquals(expected,sink);
  }
 }",0.9918588873812756
31276,"@Test public void testHashJoinRecordSource() throws Exception {
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.commit();
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.commit();
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  RecordSource joinResult=new SelectedColumnsRecordSource(new HashJoinRecordSource(new JournalSource(new JournalPartitionSource(bw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(bw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,new JournalSource(new JournalPartitionSource(aw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(aw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,false,4 * 1024 * 1024,4 * 1024 * 1024,1024 * 1024),new ObjList<CharSequence>(){
{
      add(""String_Node_Str"");
    }
  }
);
  p.printCursor(joinResult,factory);
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",sink.toString());
}","@Test public void testHashJoinRecordSource() throws Exception {
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.commit();
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.commit();
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  RecordSource joinResult=new SelectedColumnsRecordSource(new HashJoinRecordSource(new JournalSource(new JournalPartitionSource(bw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(bw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,new JournalSource(new JournalPartitionSource(aw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(aw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,false,4 * 1024 * 1024,4 * 1024 * 1024,1024 * 1024),new ObjList<CharSequence>(){
{
      add(""String_Node_Str"");
    }
  }
);
  p.print(joinResult,factory);
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",sink.toString());
}",0.9982014388489208
31277,"@Test public void testOuterHashJoin() throws Exception {
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.commit();
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.commit();
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  RecordSource joinResult=new SelectedColumnsRecordSource(new HashJoinRecordSource(new JournalSource(new JournalPartitionSource(bw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(bw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,new JournalSource(new JournalPartitionSource(aw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(aw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,true,4 * 1024 * 1024,4 * 1024 * 1024,1024 * 1024),new ObjList<CharSequence>(){
{
      add(""String_Node_Str"");
      add(""String_Node_Str"");
    }
  }
);
  p.printCursor(joinResult,factory);
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",sink.toString());
}","@Test public void testOuterHashJoin() throws Exception {
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.commit();
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.commit();
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  RecordSource joinResult=new SelectedColumnsRecordSource(new HashJoinRecordSource(new JournalSource(new JournalPartitionSource(bw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(bw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,new JournalSource(new JournalPartitionSource(aw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(aw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,true,4 * 1024 * 1024,4 * 1024 * 1024,1024 * 1024),new ObjList<CharSequence>(){
{
      add(""String_Node_Str"");
      add(""String_Node_Str"");
    }
  }
);
  p.print(joinResult,factory);
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",sink.toString());
}",0.9983633387888708
31278,"@Test public void testHashJoinJournalRecordSource() throws Exception {
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.commit();
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.commit();
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  RecordSource joinResult=new SelectedColumnsRecordSource(new HashJoinRecordSource(new JournalSource(new JournalPartitionSource(bw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(bw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,new JournalSource(new JournalPartitionSource(aw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(aw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,false,4 * 1024 * 1024,4 * 1024 * 1024,1024 * 1024),new ObjList<CharSequence>(){
{
      add(""String_Node_Str"");
    }
  }
);
  p.printCursor(joinResult,factory);
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",sink.toString());
}","@Test public void testHashJoinJournalRecordSource() throws Exception {
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.commit();
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.commit();
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  RecordSource joinResult=new SelectedColumnsRecordSource(new HashJoinRecordSource(new JournalSource(new JournalPartitionSource(bw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(bw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,new JournalSource(new JournalPartitionSource(aw.getMetadata(),false),new AllRowSource()),new IntList(){
{
      add(aw.getMetadata().getColumnIndex(""String_Node_Str""));
    }
  }
,false,4 * 1024 * 1024,4 * 1024 * 1024,1024 * 1024),new ObjList<CharSequence>(){
{
      add(""String_Node_Str"");
    }
  }
);
  p.print(joinResult,factory);
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",sink.toString());
}",0.9982089552238806
31279,"@Test public void testCrossJoin() throws Exception {
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.commit();
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.commit();
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.printCursor(new CrossJoinRecordSource(new JournalSource(new JournalPartitionSource(aw.getMetadata(),false),new AllRowSource()),new JournalSource(new JournalPartitionSource(bw.getMetadata(),false),new AllRowSource())),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  TestUtils.assertEquals(expected,sink);
}","@Test public void testCrossJoin() throws Exception {
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.append(new Band().setName(""String_Node_Str"").setType(""String_Node_Str"").setUrl(""String_Node_Str""));
  bw.commit();
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.append(new Album().setName(""String_Node_Str"").setBand(""String_Node_Str"").setGenre(""String_Node_Str""));
  aw.commit();
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.print(new CrossJoinRecordSource(new JournalSource(new JournalPartitionSource(aw.getMetadata(),false),new AllRowSource()),new JournalSource(new JournalPartitionSource(bw.getMetadata(),false),new AllRowSource())),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  TestUtils.assertEquals(expected,sink);
}",0.9979195561719834
31280,"private void assertEquals(CharSequence expected,RecordSource src) throws JournalException, IOException {
  new RecordSourcePrinter(sink).printCursor(src,factory);
  Assert.assertEquals(expected,sink.toString());
  sink.flush();
}","private void assertEquals(CharSequence expected,RecordSource src) throws JournalException, IOException {
  new RecordSourcePrinter(sink).print(src,factory);
  Assert.assertEquals(expected,sink.toString());
  sink.flush();
}",0.986725663716814
31281,"@Test public void testTail() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  JournalWriter<Quote> w=factory.writer(Quote.class);
  long lo=Dates.parseDateTime(""String_Node_Str"");
  long hi=Dates.parseDateTime(""String_Node_Str"");
  TestUtils.generateQuoteData(w,100,new Interval(lo,hi));
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.printCursor(new JournalSource(new JournalTailPartitionSource(w.getMetadata(),false,Rows.toRowID(1,30)),new AllRowSource()),factory);
  Assert.assertEquals(expected,sink.toString());
}","@Test public void testTail() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  JournalWriter<Quote> w=factory.writer(Quote.class);
  long lo=Dates.parseDateTime(""String_Node_Str"");
  long hi=Dates.parseDateTime(""String_Node_Str"");
  TestUtils.generateQuoteData(w,100,new Interval(lo,hi));
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.print(new JournalSource(new JournalTailPartitionSource(w.getMetadata(),false,Rows.toRowID(1,30)),new AllRowSource()),factory);
  Assert.assertEquals(expected,sink.toString());
}",0.9974380871050385
31282,"@Test public void testBottomSource() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,100000);
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.printCursor(new TopRecordSource(compiler.compileSource(factory,""String_Node_Str""),new LongConstant(99997),new LongConstant(100000)),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
}","@Test public void testBottomSource() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,100000);
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.print(new TopRecordSource(compiler.compileSource(factory,""String_Node_Str""),new LongConstant(99997),new LongConstant(100000)),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
}",0.9942084942084942
31283,"@Test public void testTopSource() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,100000);
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.printCursor(new TopRecordSource(compiler.compileSource(factory,""String_Node_Str""),new LongConstant(0),new LongConstant(10)),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
}","@Test public void testTopSource() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,100000);
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.print(new TopRecordSource(compiler.compileSource(factory,""String_Node_Str""),new LongConstant(0),new LongConstant(10)),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
}",0.9953125
31284,"@Test public void testNoRows() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,100000);
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.printCursor(new TopRecordSource(compiler.compileSource(factory,""String_Node_Str""),new LongConstant(99997),new LongConstant(10)),factory);
  Assert.assertEquals(""String_Node_Str"",sink.toString());
}","@Test public void testNoRows() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,100000);
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.print(new TopRecordSource(compiler.compileSource(factory,""String_Node_Str""),new LongConstant(99997),new LongConstant(10)),factory);
  Assert.assertEquals(""String_Node_Str"",sink.toString());
}",0.9930875576036866
31285,"@Test public void testMiddleSource() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,100000);
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.printCursor(new TopRecordSource(compiler.compileSource(factory,""String_Node_Str""),new LongConstant(102),new LongConstant(112)),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
}","@Test public void testMiddleSource() throws Exception {
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,100000);
  StringSink sink=new StringSink();
  RecordSourcePrinter p=new RecordSourcePrinter(sink);
  p.print(new TopRecordSource(compiler.compileSource(factory,""String_Node_Str""),new LongConstant(102),new LongConstant(112)),factory);
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Assert.assertEquals(expected,sink.toString());
}",0.9953560371517028
31286,"@Override public void scroll(Record record){
  DirectMap.KeyWriter kw=map.keyWriter();
  for (int i=0, n=partitionBy.size(); i < n; i++) {
    MapUtils.writeVirtualColumn(kw,record,partitionBy.getQuick(i));
  }
  MapValues values=map.getOrCreateValues(kw);
  if (values.isNew()) {
    nextNull=true;
    store(record,values);
  }
 else {
    nextNull=false;
switch (valueColumn.getType()) {
case BOOLEAN:
      Unsafe.getUnsafe().putByte(bufPtr,values.getByte(0));
    values.putByte(0,(byte)(valueColumn.getBool(record) ? 1 : 0));
  break;
case BYTE:
Unsafe.getUnsafe().putByte(bufPtr,values.getByte(0));
values.putByte(0,valueColumn.get(record));
break;
case DOUBLE:
Unsafe.getUnsafe().putDouble(bufPtr,values.getDouble(0));
values.putDouble(0,valueColumn.getDouble(record));
break;
case FLOAT:
Unsafe.getUnsafe().putFloat(bufPtr,values.getFloat(0));
values.putFloat(0,valueColumn.getFloat(record));
break;
case SYMBOL:
case INT:
Unsafe.getUnsafe().putInt(bufPtr,values.getInt(0));
values.putInt(0,valueColumn.getInt(record));
break;
case LONG:
case DATE:
Unsafe.getUnsafe().putLong(bufPtr,values.getLong(0));
values.putLong(0,valueColumn.getLong(record));
break;
case SHORT:
Unsafe.getUnsafe().putShort(bufPtr,values.getShort(0));
values.putShort(0,valueColumn.getShort(record));
break;
default :
throw new JournalRuntimeException(""String_Node_Str"" + valueColumn.getType());
}
}
}","@Override public void scroll(Record record){
  DirectMap.KeyWriter kw=map.keyWriter();
  for (int i=0, n=partitionBy.size(); i < n; i++) {
    MapUtils.writeVirtualColumn(kw,record,partitionBy.getQuick(i));
  }
  MapValues values=map.getOrCreateValues(kw);
  if (values.isNew()) {
    nextNull=true;
    store(record,values);
  }
 else {
    nextNull=false;
switch (valueColumn.getType()) {
case BOOLEAN:
      Unsafe.getUnsafe().putByte(bufPtr,values.get(0));
    values.putByte(0,(byte)(valueColumn.getBool(record) ? 1 : 0));
  break;
case BYTE:
Unsafe.getUnsafe().putByte(bufPtr,values.get(0));
values.putByte(0,valueColumn.get(record));
break;
case DOUBLE:
Unsafe.getUnsafe().putDouble(bufPtr,values.getDouble(0));
values.putDouble(0,valueColumn.getDouble(record));
break;
case FLOAT:
Unsafe.getUnsafe().putFloat(bufPtr,values.getFloat(0));
values.putFloat(0,valueColumn.getFloat(record));
break;
case SYMBOL:
case INT:
Unsafe.getUnsafe().putInt(bufPtr,values.getInt(0));
values.putInt(0,valueColumn.getInt(record));
break;
case LONG:
case DATE:
Unsafe.getUnsafe().putLong(bufPtr,values.getLong(0));
values.putLong(0,valueColumn.getLong(record));
break;
case SHORT:
Unsafe.getUnsafe().putShort(bufPtr,values.getShort(0));
values.putShort(0,valueColumn.getShort(record));
break;
default :
throw new JournalRuntimeException(""String_Node_Str"" + valueColumn.getType());
}
}
}",0.9970993473531544
31287,"public Record get(Record master){
  MapValues values=getByMaster(master);
  if (values == null || values.getByte(1) == 1) {
    return null;
  }
  values.putByte(1,(byte)1);
  return slaveCursor.recordAt(values.getLong(0));
}","public Record get(Record master){
  MapValues values=getByMaster(master);
  if (values == null || values.get(1) == 1) {
    return null;
  }
  values.putByte(1,(byte)1);
  return slaveCursor.recordAt(values.getLong(0));
}",0.7892376681614349
31288,"private void rehash(){
  int capacity=keyCapacity << 1;
  mask=capacity - 1;
  DirectLongList pointers=new DirectLongList(capacity);
  pointers.setPos(capacity);
  pointers.zero(-1);
  for (int i=0, k=this.offsets.size(); i < k; i++) {
    long offset=this.offsets.get(i);
    if (offset == -1) {
      continue;
    }
    int index=Hash.hashMem(kStart + offset + keyBlockOffset,Unsafe.getUnsafe().getInt(kStart + offset) - keyBlockOffset) & mask;
    while (pointers.get(index) != -1) {
      index=(index + 1) & mask;
    }
    pointers.set(index,offset);
  }
  this.offsets.free();
  this.offsets=pointers;
  this.free+=(capacity - keyCapacity) * loadFactor;
  this.keyCapacity=capacity;
}","private void rehash(){
  int capacity=keyCapacity << 1;
  mask=capacity - 1;
  DirectLongList pointers=new DirectLongList(capacity);
  pointers.setPos(capacity);
  pointers.zero(-1);
  for (int i=0, k=this.offsets.size(); i < k; i++) {
    long offset=this.offsets.get(i);
    if (offset == -1) {
      continue;
    }
    int index=Hash.hashMem(kStart + offset + keyDataOffset,Unsafe.getUnsafe().getInt(kStart + offset) - keyDataOffset) & mask;
    while (pointers.get(index) != -1) {
      index=(index + 1) & mask;
    }
    pointers.set(index,offset);
  }
  this.offsets.free();
  this.offsets=pointers;
  this.free+=(capacity - keyCapacity) * loadFactor;
  this.keyCapacity=capacity;
}",0.9869753979739508
31289,"public MapValues getValues(KeyWriter keyWriter){
  keyWriter.commit();
  kPos=keyWriter.startAddr;
  int index=Hash.hashMem(keyWriter.startAddr + keyBlockOffset,keyWriter.len - keyBlockOffset) & mask;
  long offset=offsets.get(index);
  if (offset == -1) {
    return null;
  }
 else   if (eq(keyWriter,offset)) {
    return values.of(kStart + offset,false);
  }
 else {
    return probeReadOnly(keyWriter,index);
  }
}","public MapValues getValues(KeyWriter keyWriter){
  keyWriter.commit();
  kPos=keyWriter.startAddr;
  int index=Hash.hashMem(keyWriter.startAddr + keyDataOffset,keyWriter.len - keyDataOffset) & mask;
  long offset=offsets.get(index);
  if (offset == -1) {
    return null;
  }
 else   if (eq(keyWriter,offset)) {
    return values.of(kStart + offset,false);
  }
 else {
    return probeReadOnly(keyWriter,index);
  }
}",0.9784688995215312
31290,"private boolean eq(KeyWriter keyWriter,long offset){
  long a=kStart + offset;
  long b=keyWriter.startAddr;
  if (Unsafe.getUnsafe().getInt(a) != Unsafe.getUnsafe().getInt(b)) {
    return false;
  }
  long lim=b + keyWriter.len;
  a+=keyBlockOffset;
  b+=keyBlockOffset;
  while (b < lim - 8) {
    if (Unsafe.getUnsafe().getLong(a) != Unsafe.getUnsafe().getLong(b)) {
      return false;
    }
    a+=8;
    b+=8;
  }
  while (b < lim) {
    if (Unsafe.getUnsafe().getByte(a++) != Unsafe.getUnsafe().getByte(b++)) {
      return false;
    }
  }
  return true;
}","private boolean eq(KeyWriter keyWriter,long offset){
  long a=kStart + offset;
  long b=keyWriter.startAddr;
  if (Unsafe.getUnsafe().getInt(a) != Unsafe.getUnsafe().getInt(b)) {
    return false;
  }
  long lim=b + keyWriter.len;
  a+=keyDataOffset;
  b+=keyDataOffset;
  while (b < lim - 8) {
    if (Unsafe.getUnsafe().getLong(a) != Unsafe.getUnsafe().getLong(b)) {
      return false;
    }
    a+=8;
    b+=8;
  }
  while (b < lim) {
    if (Unsafe.getUnsafe().getByte(a++) != Unsafe.getUnsafe().getByte(b++)) {
      return false;
    }
  }
  return true;
}",0.9574468085106383
31291,"public MapValues getOrCreateValues(KeyWriter keyWriter){
  keyWriter.commit();
  int index=Hash.hashMem(keyWriter.startAddr + keyBlockOffset,keyWriter.len - keyBlockOffset) & mask;
  long offset=offsets.get(index);
  if (offset == -1) {
    offsets.set(index,keyWriter.startAddr - kStart);
    if (--free == 0) {
      rehash();
    }
    size++;
    return values.of(keyWriter.startAddr,true);
  }
 else   if (eq(keyWriter,offset)) {
    kPos=keyWriter.startAddr;
    return values.of(kStart + offset,false);
  }
 else {
    return probe0(keyWriter,index);
  }
}","public MapValues getOrCreateValues(KeyWriter keyWriter){
  keyWriter.commit();
  int index=Hash.hashMem(keyWriter.startAddr + keyDataOffset,keyWriter.len - keyDataOffset) & mask;
  long offset=offsets.get(index);
  if (offset == -1) {
    offsets.set(index,keyWriter.startAddr - kStart);
    if (--free == 0) {
      rehash();
    }
    size++;
    return values.of(keyWriter.startAddr,true);
  }
 else   if (eq(keyWriter,offset)) {
    kPos=keyWriter.startAddr;
    return values.of(kStart + offset,false);
  }
 else {
    return probe0(keyWriter,index);
  }
}",0.9839857651245552
31292,"private void copyToBuffer(long ptr){
  int l=toByteLen(Unsafe.getUnsafe().getInt(ptr));
  if (l >= bufPtrLen) {
    if (bufPtr != 0) {
      Unsafe.getUnsafe().freeMemory(bufPtr);
    }
    bufPtrLen=Numbers.ceilPow2(l);
    bufPtr=Unsafe.getUnsafe().allocateMemory(bufPtrLen);
    cs.of(bufPtr + 4,bufPtr + bufPtrLen);
  }
  Unsafe.getUnsafe().copyMemory(ptr,bufPtr,l);
}","private void copyToBuffer(long ptr){
  int l=toByteLen(Unsafe.getUnsafe().getInt(ptr));
  if (l >= bufPtrLen) {
    if (bufPtr != 0) {
      Unsafe.getUnsafe().freeMemory(bufPtr);
    }
    bufPtrLen=Numbers.ceilPow2(l);
    bufPtr=Unsafe.getUnsafe().allocateMemory(bufPtrLen);
    cs.of(bufPtr + 4,bufPtr + bufPtrLen);
  }
 else {
    cs.of(bufPtr + 4,bufPtr + l);
  }
  Unsafe.getUnsafe().copyMemory(ptr,bufPtr,l);
}",0.9417721518987342
31293,"@Override public void toSink(CharSink sink){
}","@Override public void toSink(CharSink sink){
  sink.put('{');
  sink.putQuoted(""String_Node_Str"").put(':').putQuoted(""String_Node_Str"").put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put(functions.size()).put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put(parentSource);
  sink.put('}');
}",0.2621082621082621
31294,RecordCursor prepareCursor(JournalReaderFactory factory) throws JournalException ;,"RecordCursor prepareCursor(JournalReaderFactory factory,CancellationHandler cancellationHandler) throws JournalException ;",0.803921568627451
31295,"@Override public void close() throws IOException {
  Misc.free(this.map);
  Misc.free(recordSource);
}","@Override public void close(){
  Misc.free(this.map);
  Misc.free(recordSource);
}",0.8913043478260869
31296,"@Override public void close() throws IOException {
  Misc.free(recordHolder);
  Misc.free(delayedHolder);
  Misc.free(master);
  Misc.free(slave);
}","@Override public void close(){
  Misc.free(recordHolder);
  Misc.free(delayedHolder);
  Misc.free(master);
  Misc.free(slave);
}",0.927536231884058
31297,"@Override public void close() throws IOException {
}","@Override public void close(){
}",0.7619047619047619
31298,"@Override public void close() throws IOException {
  Misc.free(recordMap);
  Misc.free(master);
  Misc.free(slave);
}","@Override public void close(){
  Misc.free(recordMap);
  Misc.free(master);
  Misc.free(slave);
}",0.9065420560747663
31299,"@Override public void close() throws IOException {
  Misc.free(recordSource);
}","@Override public void close(){
  Misc.free(recordSource);
}",0.855072463768116
31300,"@Override public Record next(){
  DirectMapEntry entry=mapCursor.next();
  if (interceptors != null) {
    for (int i=0, n=interceptors.size(); i < n; i++) {
      interceptors.getQuick(i).beforeRecord(entry.values());
    }
  }
  return record.of(entry);
}","@Override public Record next(){
  DirectMapEntry entry=mapCursor.next();
  if (interceptors != null) {
    notifyInterceptors(entry);
  }
  return record.of(entry);
}",0.7565011820330969
31301,"@Override public StorageFacade getStorageFacade(){
  return recordCursor.getStorageFacade();
}","@Override public StorageFacade getStorageFacade(){
  return storageFacade;
}",0.8941176470588236
31302,"@Override public boolean supportsRowIdAccess(){
  return false;
}","@Override public boolean supportsRowIdAccess(){
  return true;
}",0.9457364341085271
31303,"@Override public void recordAt(Record record,long atRowId){
}","@Override public void recordAt(Record record,long atRowId){
  DirectMapEntry entry=map.entryAt(atRowId);
  if (interceptors != null) {
    notifyInterceptors(entry);
  }
  ((DirectMapRecord)record).of(entry);
}",0.4501845018450184
31304,"@Override public Record newRecord(){
  return null;
}","@Override public Record newRecord(){
  return new DirectMapRecord(storageFacade);
}",0.7352941176470589
31305,"@SuppressFBWarnings({""String_Node_Str""}) public ResampledRecordSource(RecordSource recordSource,int timestampColumnIndex,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,TimestampSampler sampler,int pageSize){
  int keyColumnsSize=keyColumns.size();
  this.keyIndices=new IntList(keyColumnsSize);
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  RecordMetadata rm=recordSource.getMetadata();
  this.tsIndex=timestampColumnIndex;
  keyCols.add(rm.getColumnName(tsIndex));
  for (int i=0; i < keyColumnsSize; i++) {
    keyCols.add(keyColumns.get(i));
    int index=rm.getColumnIndex(keyColumns.get(i));
    if (index != tsIndex) {
      keyIndices.add(index);
    }
  }
  this.aggregators=aggregators;
  this.sampler=sampler;
  ObjList<MapRecordValueInterceptor> interceptors=null;
  ObjList<RecordColumnMetadata> columns=AggregationUtils.TL_COLUMNS.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      if (interceptors == null) {
        interceptors=new ObjList<>();
      }
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.interceptors=interceptors;
  this.storageFacade=new DirectMapStorageFacade(columns.size(),keyIndices);
  this.metadata=new DirectMapMetadata(rm,keyCols,columns);
  this.record=new DirectMapRecord(this.storageFacade);
  ObjList<ColumnType> types=AggregationUtils.TL_COLUMN_TYPES.get();
  types.clear();
  for (int i=0, n=columns.size(); i < n; i++) {
    types.add(columns.getQuick(i).getType());
  }
  this.map=new DirectMap(pageSize,keyCols.size(),types);
  this.recordSource=recordSource;
}","@SuppressFBWarnings({""String_Node_Str""}) public ResampledRecordSource(RecordSource recordSource,int timestampColumnIndex,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,TimestampSampler sampler,int pageSize){
  int keyColumnsSize=keyColumns.size();
  this.keyIndices=new IntList(keyColumnsSize);
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  RecordMetadata rm=recordSource.getMetadata();
  this.tsIndex=timestampColumnIndex;
  keyCols.add(rm.getColumnName(tsIndex));
  for (int i=0; i < keyColumnsSize; i++) {
    keyCols.add(keyColumns.get(i));
    int index=rm.getColumnIndex(keyColumns.get(i));
    if (index != tsIndex) {
      keyIndices.add(index);
    }
  }
  this.aggregators=aggregators;
  this.sampler=sampler;
  ObjList<MapRecordValueInterceptor> interceptors=null;
  ObjList<RecordColumnMetadata> columns=AggregationUtils.TL_COLUMNS.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      if (interceptors == null) {
        interceptors=new ObjList<>();
      }
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.interceptors=interceptors;
  this.storageFacade=new DirectMapStorageFacade(columns.size() + 1,keyIndices);
  this.metadata=new DirectMapMetadata(rm,keyCols,columns);
  this.record=new DirectMapRecord(this.storageFacade);
  ObjList<ColumnType> types=AggregationUtils.TL_COLUMN_TYPES.get();
  types.clear();
  for (int i=0, n=columns.size(); i < n; i++) {
    types.add(columns.getQuick(i).getType());
  }
  this.map=new DirectMap(pageSize,keyCols.size(),types);
  this.recordSource=recordSource;
}",0.9989023051591658
31306,"@SuppressFBWarnings(""String_Node_Str"") private RecordSource selectColumns0(final RecordSource recordSource,QueryModel model) throws ParserException {
  final ObjList<QueryColumn> columns=model.getColumns();
  final CharSequenceIntHashMap columnNameHistogram=model.getColumnNameHistogram();
  final RecordMetadata meta=recordSource.getMetadata();
  this.outerVirtualColumns.clear();
  this.aggregators.clear();
  this.selectedColumns.clear();
  this.selectedColumnAliases.clear();
  this.groupKeyColumns.clear();
  this.aggregateColumnSequence=0;
  this.analyticColumns.clear();
  ObjList<VirtualColumn> virtualColumns=null;
  for (int i=0, k=columns.size(); i < k; i++) {
    final QueryColumn qc=columns.getQuick(i);
    final ExprNode node=qc.getAst();
    final boolean analytic=qc instanceof AnalyticColumn;
    if (!analytic && node.type == ExprNode.NodeType.LITERAL) {
      if (meta.getColumnIndexQuiet(node.token) == -1) {
        throw QueryError.invalidColumn(node.position,node.token);
      }
      if (columnNameHistogram.get(node.token) > 0) {
        throw QueryError.ambiguousColumn(node.position);
      }
      selectedColumns.add(node.token);
      addAlias(node.position,qc.getAlias() == null ? node.token : qc.getAlias());
      groupKeyColumns.add(node.token);
      continue;
    }
    if (qc.getAlias() == null) {
      qc.of(createAlias(aggregateColumnSequence++),node);
    }
    selectedColumns.add(qc.getAlias());
    addAlias(node.position,qc.getAlias());
    if (!analytic && node.type == ExprNode.NodeType.FUNCTION && FunctionFactories.isAggregate(node.token)) {
      aggregators.add(qc);
      continue;
    }
    if (node.type == ExprNode.NodeType.OPERATION || node.type == ExprNode.NodeType.FUNCTION) {
      int beforeSplit=aggregators.size();
      splitAggregates(node,aggregators);
      if (beforeSplit < aggregators.size()) {
        outerVirtualColumns.add(qc);
        continue;
      }
    }
    if (virtualColumns == null) {
      virtualColumns=new ObjList<>();
    }
    if (analytic) {
      if (qc.getAst().type != ExprNode.NodeType.FUNCTION) {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
      analyticColumns.add((AnalyticColumn)qc);
    }
 else {
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),recordSource.getMetadata());
      vc.setName(qc.getAlias());
      virtualColumns.add(vc);
    }
    groupKeyColumns.add(qc.getAlias());
  }
  RecordSource rs=recordSource;
  if (virtualColumns != null) {
    rs=new VirtualColumnRecordSource(rs,virtualColumns);
  }
  ExprNode sampleBy=model.getSampleBy();
  int asz=aggregators.size();
  if (asz > 0) {
    ObjList<AggregatorFunction> af=new ObjList<>(asz);
    for (int i=0; i < asz; i++) {
      QueryColumn qc=aggregators.get(i);
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
      if (vc instanceof AggregatorFunction) {
        vc.setName(qc.getAlias());
        af.add((AggregatorFunction)vc);
      }
 else {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
    }
    if (sampleBy == null) {
      rs=new AggregatedRecordSource(rs,groupKeyColumns,af,configuration.getDbAggregatePage());
    }
 else {
      TimestampSampler sampler=SamplerFactory.from(sampleBy.token);
      if (sampler == null) {
        throw QueryError.$(sampleBy.position,""String_Node_Str"");
      }
      rs=new ResampledRecordSource(rs,getTimestampIndex(model,model.getTimestamp(),rs.getMetadata()),groupKeyColumns,af,sampler,configuration.getDbAggregatePage());
    }
  }
 else {
    if (sampleBy != null) {
      throw QueryError.$(sampleBy.position,""String_Node_Str"");
    }
  }
  if (outerVirtualColumns.size() > 0) {
    ObjList<VirtualColumn> outer=new ObjList<>(outerVirtualColumns.size());
    for (int i=0, n=outerVirtualColumns.size(); i < n; i++) {
      QueryColumn qc=outerVirtualColumns.get(i);
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
      vc.setName(qc.getAlias());
      outer.add(vc);
    }
    rs=new VirtualColumnRecordSource(rs,outer);
  }
  if (analyticColumns.size() > 0) {
    final int n=analyticColumns.size();
    final ObjList<AnalyticFunction> functions=new ObjList<>(n);
    final RecordMetadata metadata=rs.getMetadata();
    boolean hasTwoPassFunctions=false;
    for (int i=0; i < n; i++) {
      AnalyticColumn col=analyticColumns.getQuick(i);
      ObjList<VirtualColumn> partitionBy=null;
      int psz=col.getPartitionBy().size();
      if (psz > 0) {
        partitionBy=new ObjList<>(psz);
        for (int j=0; j < psz; j++) {
          partitionBy.add(virtualColumnBuilder.createVirtualColumn(model,col.getPartitionBy().getQuick(j),metadata));
        }
      }
      if (col.getAst().paramCount > 1) {
        throw QueryError.$(col.getAst().position,""String_Node_Str"");
      }
      if (col.getAst().paramCount < 1) {
        throw QueryError.$(col.getAst().position,""String_Node_Str"");
      }
      VirtualColumn valueColumn=virtualColumnBuilder.createVirtualColumn(model,col.getAst().rhs,metadata);
      valueColumn.setName(col.getAlias());
      AnalyticFunction f=AnalyticFunctionFactories.newInstance(configuration,col.getAst().token,valueColumn,partitionBy,rs.supportsRowIdAccess());
      if (f == null) {
        throw QueryError.$(col.getAst().position,""String_Node_Str"");
      }
      if (!hasTwoPassFunctions && (f instanceof TwoPassAnalyticFunction)) {
        hasTwoPassFunctions=true;
      }
      functions.add(f);
    }
    if (hasTwoPassFunctions) {
      rs=new CachingAnalyticRecordSource(configuration.getDbAnalyticWindowPage(),rs,functions);
    }
 else {
      rs=new AnalyticRecordSource(rs,functions);
    }
  }
  if (selectedColumns.size() > 0) {
    rs=new SelectedColumnsRecordSource(rs,selectedColumns,selectedColumnAliases);
  }
  return rs;
}","@SuppressFBWarnings(""String_Node_Str"") private RecordSource selectColumns0(final RecordSource recordSource,QueryModel model) throws ParserException {
  final ObjList<QueryColumn> columns=model.getColumns();
  final CharSequenceIntHashMap columnNameHistogram=model.getColumnNameHistogram();
  final RecordMetadata meta=recordSource.getMetadata();
  this.outerVirtualColumns.clear();
  this.aggregators.clear();
  this.selectedColumns.clear();
  this.selectedColumnAliases.clear();
  this.groupKeyColumns.clear();
  this.aggregateColumnSequence=0;
  this.analyticColumns.clear();
  ObjList<VirtualColumn> virtualColumns=null;
  for (int i=0, k=columns.size(); i < k; i++) {
    final QueryColumn qc=columns.getQuick(i);
    final ExprNode node=qc.getAst();
    final boolean analytic=qc instanceof AnalyticColumn;
    if (!analytic && node.type == ExprNode.NodeType.LITERAL) {
      if (meta.getColumnIndexQuiet(node.token) == -1) {
        throw QueryError.invalidColumn(node.position,node.token);
      }
      if (columnNameHistogram.get(node.token) > 0) {
        throw QueryError.ambiguousColumn(node.position);
      }
      selectedColumns.add(node.token);
      addAlias(node.position,qc.getAlias() == null ? node.token : qc.getAlias());
      groupKeyColumns.add(node.token);
      continue;
    }
    if (qc.getAlias() == null) {
      qc.of(createAlias(aggregateColumnSequence++),node);
    }
    selectedColumns.add(qc.getAlias());
    addAlias(node.position,qc.getAlias());
    if (!analytic && node.type == ExprNode.NodeType.FUNCTION && FunctionFactories.isAggregate(node.token)) {
      aggregators.add(qc);
      continue;
    }
    if (node.type == ExprNode.NodeType.OPERATION || node.type == ExprNode.NodeType.FUNCTION) {
      int beforeSplit=aggregators.size();
      splitAggregates(node,aggregators);
      if (beforeSplit < aggregators.size()) {
        outerVirtualColumns.add(qc);
        continue;
      }
    }
    if (analytic) {
      if (qc.getAst().type != ExprNode.NodeType.FUNCTION) {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
      if (aggregators.size() > 0) {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
      analyticColumns.add((AnalyticColumn)qc);
    }
 else {
      if (virtualColumns == null) {
        virtualColumns=new ObjList<>();
      }
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),recordSource.getMetadata());
      vc.setName(qc.getAlias());
      virtualColumns.add(vc);
    }
    groupKeyColumns.add(qc.getAlias());
  }
  RecordSource rs=recordSource;
  if (virtualColumns != null) {
    rs=new VirtualColumnRecordSource(rs,virtualColumns);
  }
  ExprNode sampleBy=model.getSampleBy();
  int asz=aggregators.size();
  if (asz > 0) {
    ObjList<AggregatorFunction> af=new ObjList<>(asz);
    for (int i=0; i < asz; i++) {
      QueryColumn qc=aggregators.get(i);
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
      if (vc instanceof AggregatorFunction) {
        vc.setName(qc.getAlias());
        af.add((AggregatorFunction)vc);
      }
 else {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
    }
    if (sampleBy == null) {
      rs=new AggregatedRecordSource(rs,groupKeyColumns,af,configuration.getDbAggregatePage());
    }
 else {
      TimestampSampler sampler=SamplerFactory.from(sampleBy.token);
      if (sampler == null) {
        throw QueryError.$(sampleBy.position,""String_Node_Str"");
      }
      rs=new ResampledRecordSource(rs,getTimestampIndex(model,model.getTimestamp(),rs.getMetadata()),groupKeyColumns,af,sampler,configuration.getDbAggregatePage());
    }
  }
 else {
    if (sampleBy != null) {
      throw QueryError.$(sampleBy.position,""String_Node_Str"");
    }
  }
  if (outerVirtualColumns.size() > 0) {
    ObjList<VirtualColumn> outer=new ObjList<>(outerVirtualColumns.size());
    for (int i=0, n=outerVirtualColumns.size(); i < n; i++) {
      QueryColumn qc=outerVirtualColumns.get(i);
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
      vc.setName(qc.getAlias());
      outer.add(vc);
    }
    rs=new VirtualColumnRecordSource(rs,outer);
  }
  if (analyticColumns.size() > 0) {
    final int n=analyticColumns.size();
    final ObjList<AnalyticFunction> functions=new ObjList<>(n);
    final RecordMetadata metadata=rs.getMetadata();
    boolean hasTwoPassFunctions=false;
    for (int i=0; i < n; i++) {
      AnalyticColumn col=analyticColumns.getQuick(i);
      ObjList<VirtualColumn> partitionBy=null;
      int psz=col.getPartitionBy().size();
      if (psz > 0) {
        partitionBy=new ObjList<>(psz);
        for (int j=0; j < psz; j++) {
          partitionBy.add(virtualColumnBuilder.createVirtualColumn(model,col.getPartitionBy().getQuick(j),metadata));
        }
      }
      if (col.getAst().paramCount > 1) {
        throw QueryError.$(col.getAst().position,""String_Node_Str"");
      }
      if (col.getAst().paramCount < 1) {
        throw QueryError.$(col.getAst().position,""String_Node_Str"");
      }
      VirtualColumn valueColumn=virtualColumnBuilder.createVirtualColumn(model,col.getAst().rhs,metadata);
      valueColumn.setName(col.getAlias());
      AnalyticFunction f=AnalyticFunctionFactories.newInstance(configuration,col.getAst().token,valueColumn,partitionBy,rs.supportsRowIdAccess());
      if (f == null) {
        throw QueryError.$(col.getAst().position,""String_Node_Str"");
      }
      if (!hasTwoPassFunctions && (f instanceof TwoPassAnalyticFunction)) {
        hasTwoPassFunctions=true;
      }
      functions.add(f);
    }
    if (hasTwoPassFunctions) {
      rs=new CachingAnalyticRecordSource(configuration.getDbAnalyticWindowPage(),rs,functions);
    }
 else {
      rs=new AnalyticRecordSource(rs,functions);
    }
  }
  if (selectedColumns.size() > 0) {
    rs=new SelectedColumnsRecordSource(rs,selectedColumns,selectedColumnAliases);
  }
  return rs;
}",0.9537456008044244
31307,"@BeforeClass public static void setUp() throws Exception {
  int recordCount=10000;
  int employeeCount=10;
  try (JournalWriter orders=factory.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$str(""String_Node_Str"").$date(""String_Node_Str"").$int(""String_Node_Str"").$double(""String_Node_Str"").$float(""String_Node_Str"").recordCountHint(recordCount).$())){
    Rnd rnd=new Rnd();
    String employees[]=new String[employeeCount];
    for (int i=0; i < employees.length; i++) {
      employees[i]=rnd.nextString(9);
    }
    long timestamp=Dates.parseDateTime(""String_Node_Str"");
    int tsIncrement=10000;
    int orderId=0;
    for (int i=0; i < recordCount; i++) {
      JournalEntryWriter w=orders.entryWriter();
      w.putInt(0,++orderId);
      w.putInt(1,rnd.nextPositiveInt() % 500);
      w.putInt(2,rnd.nextPositiveInt() % 200);
      w.putStr(3,employees[rnd.nextPositiveInt() % employeeCount]);
      w.putDate(4,timestamp+=tsIncrement);
      w.putInt(5,rnd.nextPositiveInt());
      w.putDouble(6,rnd.nextDouble());
      w.putFloat(7,rnd.nextFloat());
      w.append();
    }
    orders.commit();
  }
   try (JournalWriter orders2=factory.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$str(""String_Node_Str"").$date(""String_Node_Str"").$int(""String_Node_Str"").$double(""String_Node_Str"").$float(""String_Node_Str"").$date(""String_Node_Str"").recordCountHint(recordCount).$())){
    Rnd rnd=new Rnd();
    String employees[]=new String[employeeCount];
    for (int i=0; i < employees.length; i++) {
      employees[i]=rnd.nextString(9);
    }
    long timestamp=Dates.parseDateTime(""String_Node_Str"");
    long timestamp2=Dates.parseDateTime(""String_Node_Str"");
    int tsIncrement=10000;
    int orderId=0;
    for (int i=0; i < recordCount; i++) {
      JournalEntryWriter w=orders2.entryWriter();
      w.putInt(0,++orderId);
      w.putInt(1,rnd.nextPositiveInt() % 500);
      w.putInt(2,rnd.nextPositiveInt() % 200);
      w.putStr(3,employees[rnd.nextPositiveInt() % employeeCount]);
      w.putDate(4,timestamp+=tsIncrement);
      w.putInt(5,rnd.nextPositiveInt());
      w.putDouble(6,rnd.nextDouble());
      w.putFloat(7,rnd.nextFloat());
      w.putDate(8,timestamp2 + tsIncrement);
      w.append();
    }
    orders2.commit();
  }
   JournalWriter orders3=factory.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$str(""String_Node_Str"").$int(""String_Node_Str"").$double(""String_Node_Str"").$float(""String_Node_Str"").recordCountHint(recordCount).$());
  orders3.close();
}","@BeforeClass public static void setUp() throws Exception {
  int recordCount=10000;
  int employeeCount=10;
  try (JournalWriter orders=factory.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$str(""String_Node_Str"").$date(""String_Node_Str"").$int(""String_Node_Str"").$double(""String_Node_Str"").$float(""String_Node_Str"").recordCountHint(recordCount).$())){
    Rnd rnd=new Rnd();
    String employees[]=new String[employeeCount];
    for (int i=0; i < employees.length; i++) {
      employees[i]=rnd.nextString(9);
    }
    long timestamp=Dates.parseDateTime(""String_Node_Str"");
    int tsIncrement=10000;
    int orderId=0;
    for (int i=0; i < recordCount; i++) {
      JournalEntryWriter w=orders.entryWriter();
      w.putInt(0,++orderId);
      w.putInt(1,rnd.nextPositiveInt() % 500);
      w.putInt(2,rnd.nextPositiveInt() % 200);
      w.putStr(3,employees[rnd.nextPositiveInt() % employeeCount]);
      w.putDate(4,timestamp+=tsIncrement);
      w.putInt(5,rnd.nextPositiveInt());
      w.putDouble(6,rnd.nextDouble());
      w.putFloat(7,rnd.nextFloat());
      w.append();
    }
    orders.commit();
  }
   try (JournalWriter orders2=factory.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$str(""String_Node_Str"").$date(""String_Node_Str"").$int(""String_Node_Str"").$double(""String_Node_Str"").$float(""String_Node_Str"").$date(""String_Node_Str"").recordCountHint(recordCount).$())){
    Rnd rnd=new Rnd();
    String employees[]=new String[employeeCount];
    for (int i=0; i < employees.length; i++) {
      employees[i]=rnd.nextString(9);
    }
    long timestamp=Dates.parseDateTime(""String_Node_Str"");
    long timestamp2=Dates.parseDateTime(""String_Node_Str"");
    int tsIncrement=10000;
    int orderId=0;
    for (int i=0; i < recordCount; i++) {
      JournalEntryWriter w=orders2.entryWriter();
      w.putInt(0,++orderId);
      w.putInt(1,rnd.nextPositiveInt() % 500);
      w.putInt(2,rnd.nextPositiveInt() % 200);
      w.putStr(3,employees[rnd.nextPositiveInt() % employeeCount]);
      w.putDate(4,timestamp+=tsIncrement);
      w.putInt(5,rnd.nextPositiveInt());
      w.putDouble(6,rnd.nextDouble());
      w.putFloat(7,rnd.nextFloat());
      w.putDate(8,timestamp2 + tsIncrement);
      w.append();
    }
    orders2.commit();
  }
   try (JournalWriter orders2=factory.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$sym(""String_Node_Str"").$date(""String_Node_Str"").$int(""String_Node_Str"").$double(""String_Node_Str"").$float(""String_Node_Str"").$ts(""String_Node_Str"").recordCountHint(recordCount).$())){
    Rnd rnd=new Rnd();
    String employees[]=new String[employeeCount];
    for (int i=0; i < employees.length; i++) {
      employees[i]=rnd.nextString(9);
    }
    long timestamp=Dates.parseDateTime(""String_Node_Str"");
    long timestamp2=Dates.parseDateTime(""String_Node_Str"");
    int tsIncrement=10000;
    int orderId=0;
    for (int i=0; i < recordCount; i++) {
      JournalEntryWriter w=orders2.entryWriter();
      w.putInt(0,++orderId);
      w.putInt(1,rnd.nextPositiveInt() % 500);
      w.putInt(2,rnd.nextPositiveInt() % 200);
      w.putSym(3,employees[rnd.nextPositiveInt() % employeeCount]);
      w.putDate(4,timestamp+=tsIncrement);
      w.putInt(5,rnd.nextPositiveInt());
      w.putDouble(6,rnd.nextDouble());
      w.putFloat(7,rnd.nextFloat());
      w.putDate(8,timestamp2 + tsIncrement);
      w.append();
    }
    orders2.commit();
  }
   JournalWriter orders3=factory.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$str(""String_Node_Str"").$int(""String_Node_Str"").$double(""String_Node_Str"").$float(""String_Node_Str"").recordCountHint(recordCount).$());
  orders3.close();
}",0.8172888015717092
31308,"@Override public long getRowId(){
  return rowid;
}","@Override public long getRowId(){
  return Rows.toRowID(partitionIndex,rowid);
}",0.7786259541984732
31309,"@Override public void recordAt(Record record,long atRowId){
  ((JournalRecord)record).rowid=atRowId;
}","@Override public void recordAt(Record record,long atRowId){
  ((JournalRecord)record).rowid=Rows.toLocalRowID(atRowId);
  setPartition((JournalRecord)record,atRowId);
}",0.7555555555555555
31310,"@SuppressWarnings(""String_Node_Str"") private boolean nextSlice(){
  while (partitionCursor.hasNext()) {
    PartitionSlice slice=partitionCursor.next();
    cursor=rowSource.prepareCursor(slice);
    if (cursor == null) {
      return false;
    }
    if (cursor.hasNext()) {
      rec.partition=slice.partition;
      return true;
    }
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") private boolean nextSlice(){
  while (partitionCursor.hasNext()) {
    PartitionSlice slice=partitionCursor.next();
    cursor=rowSource.prepareCursor(slice);
    if (cursor == null) {
      return false;
    }
    if (cursor.hasNext()) {
      rec.partition=slice.partition;
      rec.partitionIndex=slice.partition.getPartitionIndex();
      return true;
    }
  }
  return false;
}",0.9205128205128204
31311,"private Record getParentRecord(){
  return parent.recordAt(prevRowId);
}","private Record getParentRecord(){
  parent.recordAt(record,prevRowId);
  return record;
}",0.8074534161490683
31312,"@Override public void setParent(RecordCursor cursor){
  parent=cursor;
}","@Override public void setParent(RecordCursor cursor){
  parent=cursor;
  this.record=cursor.newRecord();
}",0.8089887640449438
31313,"@Before public void setUp() throws Exception {
  try (JournalWriter w=factory.bulkWriter(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$double(""String_Node_Str"").$float(""String_Node_Str"").$byte(""String_Node_Str"").$long(""String_Node_Str"").$str(""String_Node_Str"").$bool(""String_Node_Str"").$sym(""String_Node_Str"").$short(""String_Node_Str"").$date(""String_Node_Str"").$ts().partitionBy(PartitionType.DAY).$())){
    Rnd rnd=new Rnd();
    int n=24 * 3;
    int timestep=60 * 60 * 1000;
    String[] sym={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] str=new String[16];
    for (int i=0; i < str.length; i++) {
      str[i]=rnd.nextString(rnd.nextPositiveInt() % 10);
    }
    long t=Dates.toMillis(2016,5,1,10,20);
    for (int i=0; i < n; i++) {
      JournalEntryWriter ew=w.entryWriter(t+=timestep);
      ew.putInt(0,rnd.nextInt() % 15);
      ew.putDouble(1,rnd.nextDouble());
      ew.putFloat(2,rnd.nextFloat());
      ew.put(3,(byte)rnd.nextInt());
      ew.putLong(4,rnd.nextLong() % 30);
      ew.putStr(5,str[rnd.nextPositiveInt() % str.length]);
      ew.putBool(6,rnd.nextBoolean());
      ew.putSym(7,sym[rnd.nextPositiveInt() % sym.length]);
      ew.putShort(8,(short)(rnd.nextInt() % 20));
      ew.putDate(9,rnd.nextLong());
      ew.append();
    }
    w.commit();
  }
 }","@BeforeClass public static void setUp() throws Exception {
  try (JournalWriter w=factory.bulkWriter(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$double(""String_Node_Str"").$float(""String_Node_Str"").$byte(""String_Node_Str"").$long(""String_Node_Str"").$str(""String_Node_Str"").$bool(""String_Node_Str"").$sym(""String_Node_Str"").$short(""String_Node_Str"").$date(""String_Node_Str"").$ts().partitionBy(PartitionType.DAY).$())){
    Rnd rnd=new Rnd();
    int n=24 * 3;
    int timestep=60 * 60 * 1000;
    String[] sym={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] str=new String[16];
    for (int i=0; i < str.length; i++) {
      str[i]=rnd.nextString(rnd.nextPositiveInt() % 10);
    }
    long t=Dates.toMillis(2016,5,1,10,20);
    for (int i=0; i < n; i++) {
      JournalEntryWriter ew=w.entryWriter(t+=timestep);
      ew.putInt(0,rnd.nextInt() % 15);
      ew.putDouble(1,rnd.nextDouble());
      ew.putFloat(2,rnd.nextFloat());
      ew.put(3,(byte)rnd.nextInt());
      ew.putLong(4,rnd.nextLong() % 30);
      ew.putStr(5,str[rnd.nextPositiveInt() % str.length]);
      ew.putBool(6,rnd.nextBoolean());
      ew.putSym(7,sym[rnd.nextPositiveInt() % sym.length]);
      ew.putShort(8,(short)(rnd.nextInt() % 20));
      ew.putDate(9,rnd.nextLong());
      ew.append();
    }
    w.commit();
  }
 }",0.995729537366548
31314,"@Test @Ignore public void testSelect() throws Exception {
  assertThat(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testSelect() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertThat(expected,""String_Node_Str"");
}",0.1064495929868503
31315,"@Override public void toSink(CharSink sink){
}","@Override public void toSink(CharSink sink){
  sink.put('{');
  sink.putQuoted(""String_Node_Str"").put(':').putQuoted(""String_Node_Str"").put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put(functions.size()).put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put(parentSource);
  sink.put('}');
}",0.2621082621082621
31316,"@Override public int getInt(){
  if (nextNull) {
    if (valueColumn.getType() == ColumnType.SYMBOL) {
      return SymbolTable.VALUE_IS_NULL;
    }
    return Numbers.INT_NaN;
  }
  return valueColumn.getInt(getParentRecord());
}","@Override public int getInt(){
  return nextNull ? Numbers.INT_NaN : valueColumn.getInt(getParentRecord());
}",0.5958702064896755
31317,"public static int compare(CharSequence l,CharSequence r){
  if (l == r) {
    return 0;
  }
  int ll=l.length();
  int rl=r.length();
  for (int i=0, n=ll < rl ? ll : rl; i < n; i++) {
    int k=l.charAt(i) - r.charAt(i);
    if (k != 0) {
      return k;
    }
  }
  return ll < rl ? -1 : ll == rl ? 0 : 1;
}","public static int compare(CharSequence l,CharSequence r){
  if (l == r) {
    return 0;
  }
  if (l == null) {
    return -1;
  }
  if (r == null) {
    return 1;
  }
  int ll=l.length();
  int rl=r.length();
  if (ll < rl) {
    return -1;
  }
  if (ll > rl) {
    return 1;
  }
  for (int i=0, n=ll < rl ? ll : rl; i < n; i++) {
    int k=l.charAt(i) - r.charAt(i);
    if (k != 0) {
      return k;
    }
  }
  return 0;
}",0.7520435967302452
31318,"public void setStorageFacade(StorageFacade storageFacade){
  record.setStorageFacade(storageFacade);
}","public void setStorageFacade(StorageFacade storageFacade){
  record.setStorageFacade(this.storageFacade=storageFacade);
}",0.9147982062780268
31319,"@Override public StorageFacade getStorageFacade(){
  return null;
}","@Override public StorageFacade getStorageFacade(){
  return storageFacade;
}",0.8811188811188811
31320,"@Override public StorageFacade getStorageFacade(){
  return parentCursor.getStorageFacade();
}","@Override public StorageFacade getStorageFacade(){
  return storageFacade;
}",0.8941176470588236
31321,"@Override public RecordCursor prepareCursor(JournalReaderFactory factory,CancellationHandler cancellationHandler) throws JournalException {
  this.parentCursor=this.parentSource.prepareCursor(factory,cancellationHandler);
  final StorageFacade storageFacade=parentCursor.getStorageFacade();
  int n=functions.size();
  for (int i=0; i < n; i++) {
    functions.getQuick(i).setStorageFacade(storageFacade);
  }
  return this;
}","@Override public RecordCursor prepareCursor(JournalReaderFactory factory,CancellationHandler cancellationHandler) throws JournalException {
  this.parentCursor=this.parentSource.prepareCursor(factory,cancellationHandler);
  final StorageFacade storageFacade=parentCursor.getStorageFacade();
  this.storageFacade.prepare(factory,storageFacade);
  int n=functions.size();
  for (int i=0; i < n; i++) {
    functions.getQuick(i).setStorageFacade(storageFacade);
  }
  return this;
}",0.9414364640883978
31322,"public AnalyticRecordSource(RecordSource parentSource,ObjList<AnalyticFunction> functions){
  this.parentSource=parentSource;
  this.functions=functions;
  CollectionRecordMetadata funcMetadata=new CollectionRecordMetadata();
  for (int i=0; i < functions.size(); i++) {
    funcMetadata.add(functions.getQuick(i).getMetadata());
  }
  this.metadata=new SplitRecordMetadata(parentSource.getMetadata(),funcMetadata);
  this.record=new AnalyticRecord(this.metadata,parentSource.getMetadata().getColumnCount(),functions);
}","public AnalyticRecordSource(RecordSource parentSource,ObjList<AnalyticFunction> functions){
  this.parentSource=parentSource;
  this.functions=functions;
  CollectionRecordMetadata funcMetadata=new CollectionRecordMetadata();
  for (int i=0; i < functions.size(); i++) {
    funcMetadata.add(functions.getQuick(i).getMetadata());
  }
  this.metadata=new SplitRecordMetadata(parentSource.getMetadata(),funcMetadata);
  int split=parentSource.getMetadata().getColumnCount();
  this.record=new AnalyticRecord(this.metadata,split,functions);
  this.storageFacade=new AnalyticRecordStorageFacade(this.metadata,split,functions);
}",0.8426573426573427
31323,"@Override public StorageFacade getStorageFacade(){
  return records.getStorageFacade();
}","@Override public StorageFacade getStorageFacade(){
  return storageFacade;
}",0.9212121212121211
31324,"@Override public RecordCursor prepareCursor(JournalReaderFactory factory,CancellationHandler cancellationHandler) throws JournalException {
  RecordCursor cursor=this.parentSource.prepareCursor(factory,cancellationHandler);
  final StorageFacade storageFacade=cursor.getStorageFacade();
  records.setStorageFacade(storageFacade);
  int n=functions.size();
  for (int i=0; i < n; i++) {
    functions.getQuick(i).setStorageFacade(storageFacade);
  }
  long rowid=-1;
  while (cursor.hasNext()) {
    Record record=cursor.next();
    rowid=records.append(record,rowid);
    for (int i=0; i < n; i++) {
      AnalyticFunction f=functions.getQuick(i);
      if (f instanceof TwoPassAnalyticFunction) {
        ((TwoPassAnalyticFunction)f).addRecord(record,rowid);
      }
    }
  }
  for (int i=0; i < n; i++) {
    AnalyticFunction f=functions.getQuick(i);
    if (f instanceof TwoPassAnalyticFunction) {
      ((TwoPassAnalyticFunction)f).prepare(records);
    }
  }
  records.toTop();
  return this;
}","@Override public RecordCursor prepareCursor(JournalReaderFactory factory,CancellationHandler cancellationHandler) throws JournalException {
  RecordCursor cursor=this.parentSource.prepareCursor(factory,cancellationHandler);
  final StorageFacade storageFacade=cursor.getStorageFacade();
  records.setStorageFacade(storageFacade);
  this.storageFacade.prepare(factory,storageFacade);
  int n=functions.size();
  for (int i=0; i < n; i++) {
    functions.getQuick(i).setStorageFacade(storageFacade);
  }
  long rowid=-1;
  while (cursor.hasNext()) {
    Record record=cursor.next();
    rowid=records.append(record,rowid);
    for (int i=0; i < n; i++) {
      AnalyticFunction f=functions.getQuick(i);
      if (f instanceof TwoPassAnalyticFunction) {
        ((TwoPassAnalyticFunction)f).addRecord(record,rowid);
      }
    }
  }
  for (int i=0; i < n; i++) {
    AnalyticFunction f=functions.getQuick(i);
    if (f instanceof TwoPassAnalyticFunction) {
      ((TwoPassAnalyticFunction)f).prepare(records);
    }
  }
  records.toTop();
  return this;
}",0.974184120798831
31325,"@Override public boolean supportsRowIdAccess(){
  return true;
}","@Override public boolean supportsRowIdAccess(){
  return false;
}",0.9457364341085271
31326,"@Override public Record getByRowId(long rowId){
  return records.getByRowId(rowId);
}","@Override public Record getByRowId(long rowId){
  return null;
}",0.8053691275167785
31327,"public CachingAnalyticRecordSource(int pageSize,RecordSource parentSource,ObjList<AnalyticFunction> functions){
  this.parentSource=parentSource;
  this.records=new RecordList(parentSource.getMetadata(),pageSize);
  this.functions=functions;
  CollectionRecordMetadata funcMetadata=new CollectionRecordMetadata();
  for (int i=0; i < functions.size(); i++) {
    funcMetadata.add(functions.getQuick(i).getMetadata());
  }
  this.metadata=new SplitRecordMetadata(parentSource.getMetadata(),funcMetadata);
  this.record=new AnalyticRecord(this.metadata,parentSource.getMetadata().getColumnCount(),functions);
}","public CachingAnalyticRecordSource(int pageSize,RecordSource parentSource,ObjList<AnalyticFunction> functions){
  this.parentSource=parentSource;
  this.records=new RecordList(parentSource.getMetadata(),pageSize);
  this.functions=functions;
  CollectionRecordMetadata funcMetadata=new CollectionRecordMetadata();
  for (int i=0; i < functions.size(); i++) {
    funcMetadata.add(functions.getQuick(i).getMetadata());
  }
  this.metadata=new SplitRecordMetadata(parentSource.getMetadata(),funcMetadata);
  int split=parentSource.getMetadata().getColumnCount();
  this.record=new AnalyticRecord(this.metadata,split,functions);
  this.storageFacade=new AnalyticRecordStorageFacade(metadata,split,functions);
}",0.8608365019011407
31328,"@Override public int getInt(){
  return next.getInt(columnIndex);
}","@Override public int getInt(){
  return next == NullRecord.INSTANCE && metadata.getType() == ColumnType.SYMBOL ? SymbolTable.VALUE_IS_NULL : next.getInt(columnIndex);
}",0.5702127659574469
31329,"@Override public int getInt(){
  return nextNull ? Numbers.INT_NaN : Unsafe.getUnsafe().getInt(bufPtr);
}","@Override public int getInt(){
  return nextNull ? (valueType == ColumnType.SYMBOL ? SymbolTable.VALUE_IS_NULL : Numbers.INT_NaN) : Unsafe.getUnsafe().getInt(bufPtr);
}",0.7692307692307693
31330,"public AbstractNextRowAnalyticFunction(int pageSize,RecordMetadata parentMetadata,String columnName){
  this.pages=new MemoryPages(pageSize);
  this.columnIndex=parentMetadata.getColumnIndex(columnName);
  this.metadata=new RecordColumnMetadataImpl(columnName,parentMetadata.getColumnQuick(this.columnIndex).getType());
}","public AbstractNextRowAnalyticFunction(int pageSize,RecordMetadata parentMetadata,String columnName,String alias){
  this.pages=new MemoryPages(pageSize);
  this.columnIndex=parentMetadata.getColumnIndex(columnName);
  this.metadata=new RecordColumnMetadataImpl(alias == null ? columnName : alias,parentMetadata.getColumnQuick(this.columnIndex).getType());
}",0.9455081001472754
31331,"public NextRowAnalyticFunction(int pageSize,RecordMetadata parentMetadata,@Transient ObjHashSet<String> partitionBy,String columnName){
  super(pageSize,parentMetadata,columnName);
  this.map=new MultiMap(pageSize,parentMetadata,partitionBy,valueColumn,null);
  this.indices=new IntList(partitionBy.size());
  this.types=new ObjList<>(partitionBy.size());
  for (int i=0, n=partitionBy.size(); i < n; i++) {
    int index=parentMetadata.getColumnIndexQuiet(partitionBy.get(i));
    indices.add(index);
    types.add(parentMetadata.getColumn(index).getType());
  }
}","public NextRowAnalyticFunction(int pageSize,RecordMetadata parentMetadata,@Transient ObjHashSet<String> partitionBy,String columnName,String alias){
  super(pageSize,parentMetadata,columnName,alias);
  this.map=new MultiMap(pageSize,parentMetadata,partitionBy,valueColumn,null);
  this.indices=new IntList(partitionBy.size());
  this.types=new ObjList<>(partitionBy.size());
  for (int i=0, n=partitionBy.size(); i < n; i++) {
    int index=parentMetadata.getColumnIndexQuiet(partitionBy.get(i));
    indices.add(index);
    types.add(parentMetadata.getColumn(index).getType());
  }
}",0.9834638816362054
31332,"@Override public AnalyticFunction newInstance(ServerConfiguration configuration,RecordMetadata metadata,AnalyticColumn column) throws ParserException {
  ExprNode ast=column.getAst();
  if (ast.paramCount > 1) {
    throw QueryError.$(ast.position,""String_Node_Str"");
  }
  if (ast.paramCount < 1) {
    throw QueryError.$(ast.position,""String_Node_Str"");
  }
  if (metadata.getColumnIndexQuiet(ast.rhs.token) == -1) {
    throw QueryError.invalidColumn(ast.rhs.position,ast.rhs.token);
  }
  ObjList<ExprNode> pby=column.getPartitionBy();
  int n=pby.size();
  if (n > 0) {
    ObjHashSet<String> partitionBy=AnalyticUtils.HASH_SET.get();
    partitionBy.clear();
    for (int i=0; i < n; i++) {
      ExprNode node=pby.getQuick(i);
      if (node.type != ExprNode.NodeType.LITERAL) {
        throw QueryError.$(node.position,""String_Node_Str"");
      }
      if (metadata.getColumnIndexQuiet(node.token) == -1) {
        throw QueryError.invalidColumn(node.position,node.token);
      }
      partitionBy.add(node.token);
    }
    return new NextRowAnalyticFunction(configuration.getDbAnalyticFuncPage(),metadata,partitionBy,ast.rhs.token);
  }
 else {
    return new NextRowNonPartAnalyticFunction(configuration.getDbAnalyticFuncPage(),metadata,ast.rhs.token);
  }
}","@Override public AnalyticFunction newInstance(ServerConfiguration configuration,RecordMetadata metadata,AnalyticColumn column) throws ParserException {
  ExprNode ast=column.getAst();
  if (ast.paramCount > 1) {
    throw QueryError.$(ast.position,""String_Node_Str"");
  }
  if (ast.paramCount < 1) {
    throw QueryError.$(ast.position,""String_Node_Str"");
  }
  if (metadata.getColumnIndexQuiet(ast.rhs.token) == -1) {
    throw QueryError.invalidColumn(ast.rhs.position,ast.rhs.token);
  }
  ObjList<ExprNode> pby=column.getPartitionBy();
  int n=pby.size();
  if (n > 0) {
    ObjHashSet<String> partitionBy=AnalyticUtils.HASH_SET.get();
    partitionBy.clear();
    for (int i=0; i < n; i++) {
      ExprNode node=pby.getQuick(i);
      if (node.type != ExprNode.NodeType.LITERAL) {
        throw QueryError.$(node.position,""String_Node_Str"");
      }
      if (metadata.getColumnIndexQuiet(node.token) == -1) {
        throw QueryError.invalidColumn(node.position,node.token);
      }
      partitionBy.add(node.token);
    }
    return new NextRowAnalyticFunction(configuration.getDbAnalyticFuncPage(),metadata,partitionBy,ast.rhs.token,column.getAlias());
  }
 else {
    return new NextRowNonPartAnalyticFunction(configuration.getDbAnalyticFuncPage(),metadata,ast.rhs.token,column.getAlias());
  }
}",0.9860248447204968
31333,"public NextRowNonPartAnalyticFunction(int pageSize,RecordMetadata parentMetadata,String columnName){
  super(pageSize,parentMetadata,columnName);
}","public NextRowNonPartAnalyticFunction(int pageSize,RecordMetadata parentMetadata,String columnName,String alias){
  super(pageSize,parentMetadata,columnName,alias);
}",0.939297124600639
31334,"@Override public CharSequence getFlyweightStrB(){
  return null;
}","@Override public CharSequence getFlyweightStrB(){
  throw new UnsupportedOperationException();
}",0.7283950617283951
31335,"@Override public long getBinLen(){
  return 0;
}","@Override public long getBinLen(){
  throw new UnsupportedOperationException();
}",0.6976744186046512
31336,"public AbstractPrevRowAnalyticFunction(int pageSize,RecordMetadata parentMetadata,@Transient ObjHashSet<String> partitionBy,String columnName){
  this.valueIndex=parentMetadata.getColumnIndex(columnName);
  RecordColumnMetadata m=parentMetadata.getColumn(columnName);
  this.valueType=m.getType();
  ObjList<RecordColumnMetadata> valueColumns=new ObjList<>(1);
  valueColumns.add(m);
  this.map=new MultiMap(pageSize,parentMetadata,partitionBy,valueColumns,null);
  this.indices=new IntList(partitionBy.size());
  this.types=new ObjList<>(partitionBy.size());
  for (int i=0, n=partitionBy.size(); i < n; i++) {
    int index=parentMetadata.getColumnIndexQuiet(partitionBy.get(i));
    indices.add(index);
    types.add(parentMetadata.getColumn(index).getType());
  }
  this.bufPtr=Unsafe.getUnsafe().allocateMemory(8);
  this.valueMetadata=new RecordColumnMetadataImpl(columnName,valueType);
}","public AbstractPrevRowAnalyticFunction(RecordMetadata parentMetadata,String columnName,String alias){
  this.valueIndex=parentMetadata.getColumnIndex(columnName);
  RecordColumnMetadata m=parentMetadata.getColumn(columnName);
  this.valueType=m.getType();
  this.bufPtr=Unsafe.getUnsafe().allocateMemory(8);
  this.valueMetadata=new RecordColumnMetadataImpl(alias == null ? columnName : alias,valueType);
}",0.4307692307692308
31337,"@Override public CharSequence getFlyweightStr(){
  return null;
}","@Override public CharSequence getFlyweightStr(){
  throw new UnsupportedOperationException();
}",0.725
31338,"@Override public CharSequence getStr(){
  return null;
}","@Override public CharSequence getStr(){
  throw new UnsupportedOperationException();
}",0.6901408450704225
31339,"@Override public int getStrLen(){
  return 0;
}","@Override public int getStrLen(){
  throw new UnsupportedOperationException();
}",0.6929133858267716
31340,"@Override public DirectInputStream getBin(){
  return null;
}","@Override public DirectInputStream getBin(){
  throw new UnsupportedOperationException();
}",0.7105263157894737
31341,"@Override public void reset(){
  map.clear();
  nextNull=true;
}","@Override public void reset(){
  nextNull=true;
}",0.8672566371681416
31342,"@Override public void close() throws IOException {
  if (closed) {
    return;
  }
  Unsafe.getUnsafe().freeMemory(bufPtr);
  Misc.free(map);
  closed=true;
}","@Override public void close() throws IOException {
  if (closed) {
    return;
  }
  Unsafe.getUnsafe().freeMemory(bufPtr);
  closed=true;
}",0.9395973154362416
31343,"@Override public void close(){
  if (open.compareAndSet(true,false)) {
    Misc.free(channel);
    Misc.free(request);
    Misc.free(response);
    Misc.free(map);
  }
}","@Override public void close(){
  if (open.compareAndSet(true,false)) {
    Misc.free(map);
    Misc.free(channel);
    Misc.free(request);
    Misc.free(response);
  }
}",0.8816568047337278
31344,"public void parse(){
  map.clear();
  Misc.urlDecode(address,wptr,map,csPool);
  for (int i=0, n=map.size(); i < n; i++) {
    map.keys().getQuick(i);
    ImportedColumnMetadata m=mPool.next();
    m.name=map.keys().getQuick(i);
    m.type=ImportedColumnType.valueOf(map.get(m.name).toString());
    metadata.add(m);
  }
}","public void parse(){
  map.clear();
  Misc.urlDecode(address,wptr,map,csPool);
  for (int i=0, n=map.size(); i < n; i++) {
    map.keys().getQuick(i);
    CharSequence name=map.keys().getQuick(i);
    int ordinal=ImportedColumnTypeUtil.LOOKUP.get(map.get(name));
    if (ordinal > -1) {
      ImportedColumnMetadata m=mPool.next();
      m.name=name;
      m.type=ImportedColumnType.values()[ordinal];
      metadata.add(m);
    }
  }
}",0.5778364116094987
31345,"RecordCursor prepareCursor(JournalReaderFactory factory,CancellationHandler cancellationHandler) throws JournalException ;",RecordCursor prepareCursor(JournalReaderFactory factory) throws JournalException ;,0.803921568627451
31346,"@Test public void testConcurrentImport() throws Exception {
  HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  final CyclicBarrier barrier=new CyclicBarrier(2);
  final CountDownLatch latch=new CountDownLatch(2);
  try {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          barrier.await();
          Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null));
          latch.countDown();
        }
 catch (        Exception e) {
          Assert.fail(e.getMessage());
        }
      }
    }
).start();
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          barrier.await();
          Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null));
          latch.countDown();
        }
 catch (        Exception e) {
          Assert.fail(e.getMessage());
        }
      }
    }
).start();
    latch.await();
    try (Journal r=factory.reader(""String_Node_Str"")){
      Assert.assertEquals(""String_Node_Str"",129,r.size());
    }
     try (Journal r=factory.reader(""String_Node_Str"")){
      Assert.assertEquals(""String_Node_Str"",129,r.size());
    }
   }
  finally {
    server.halt();
  }
}","@Test public void testConcurrentImport() throws Exception {
  HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  final CyclicBarrier barrier=new CyclicBarrier(2);
  final CountDownLatch latch=new CountDownLatch(2);
  try {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          barrier.await();
          Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,null));
          latch.countDown();
        }
 catch (        Exception e) {
          Assert.fail(e.getMessage());
        }
      }
    }
).start();
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          barrier.await();
          Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,null));
          latch.countDown();
        }
 catch (        Exception e) {
          Assert.fail(e.getMessage());
        }
      }
    }
).start();
    latch.await();
    try (Journal r=factory.reader(""String_Node_Str"")){
      Assert.assertEquals(""String_Node_Str"",129,r.size());
    }
     try (Journal r=factory.reader(""String_Node_Str"")){
      Assert.assertEquals(""String_Node_Str"",129,r.size());
    }
   }
  finally {
    server.halt();
  }
}",0.9963045084996304
31347,"@Test public void testImportUnknownFormat() throws Exception {
  HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  StringBuilder response=new StringBuilder();
  try {
    Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",response));
    TestUtils.assertEquals(""String_Node_Str"",response);
  }
  finally {
    server.halt();
  }
}","@Test public void testImportUnknownFormat() throws Exception {
  HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  StringBuilder response=new StringBuilder();
  try {
    Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,response));
    TestUtils.assertEquals(""String_Node_Str"",response);
  }
  finally {
    server.halt();
  }
}",0.9948717948717948
31348,"@Test public void testImportIntoBusyJournal2() throws Exception {
  JournalFactory f=new JournalFactory(factory.getConfiguration().getJournalBase().getAbsolutePath());
  try (JournalWriter w=f.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$())){
    JournalEntryWriter ew=w.entryWriter();
    ew.putInt(0,3);
    ew.putInt(1,30);
    ew.append();
    w.commit();
    HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
        put(""String_Node_Str"",new ImportHandler(factory));
      }
    }
);
    server.start();
    StringBuilder response=new StringBuilder();
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",response));
      Assert.assertTrue(Chars.startsWith(response,""String_Node_Str""));
    }
  finally {
      server.halt();
    }
  }
 }","@Test public void testImportIntoBusyJournal2() throws Exception {
  JournalFactory f=new JournalFactory(factory.getConfiguration().getJournalBase().getAbsolutePath());
  try (JournalWriter w=f.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$int(""String_Node_Str"").$())){
    JournalEntryWriter ew=w.entryWriter();
    ew.putInt(0,3);
    ew.putInt(1,30);
    ew.append();
    w.commit();
    HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
        put(""String_Node_Str"",new ImportHandler(factory));
      }
    }
);
    server.start();
    StringBuilder response=new StringBuilder();
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,response));
      Assert.assertTrue(Chars.startsWith(response,""String_Node_Str""));
    }
  finally {
      server.halt();
    }
  }
 }",0.9971542401821286
31349,"@Test public void testImportIntoBusyJournal() throws Exception {
  try (JournalWriter w=factory.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$())){
    HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
        put(""String_Node_Str"",new ImportHandler(factory));
      }
    }
);
    server.start();
    StringBuilder response=new StringBuilder();
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",response));
      TestUtils.assertEquals(""String_Node_Str"",response);
    }
  finally {
      server.halt();
    }
  }
 }","@Test public void testImportIntoBusyJournal() throws Exception {
  try (JournalWriter w=factory.writer(new JournalStructure(""String_Node_Str"").$int(""String_Node_Str"").$())){
    HttpServer server=new HttpServer(new ServerConfiguration(),new SimpleUrlMatcher(){
{
        put(""String_Node_Str"",new ImportHandler(factory));
      }
    }
);
    server.start();
    StringBuilder response=new StringBuilder();
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,response));
      TestUtils.assertEquals(""String_Node_Str"",response);
    }
  finally {
      server.halt();
    }
  }
 }",0.99601593625498
31350,"private void assertRanges(ServerConfiguration configuration,HttpServer server) throws IOException {
  server.start();
  try {
    HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null);
    File out=new File(temp.getRoot(),""String_Node_Str"");
    HttpGet get=new HttpGet(""String_Node_Str"");
    get.addHeader(""String_Node_Str"",""String_Node_Str"");
    try (CloseableHttpClient client=HttpClients.createDefault()){
      try (CloseableHttpResponse r=client.execute(get)){
        Assert.assertEquals(416,r.getStatusLine().getStatusCode());
      }
       File f=resourceFile(""String_Node_Str"");
      long size;
      try (FileInputStream is=new FileInputStream(f)){
        size=is.available();
      }
       long part=size / 2;
      try (FileOutputStream fos=new FileOutputStream(out)){
        get.addHeader(""String_Node_Str"",""String_Node_Str"" + part);
        try (CloseableHttpResponse r=client.execute(get)){
          HttpTestUtils.copy(r.getEntity().getContent(),fos);
          Assert.assertEquals(206,r.getStatusLine().getStatusCode());
        }
         get.addHeader(""String_Node_Str"",""String_Node_Str"" + part + ""String_Node_Str"");
        try (CloseableHttpResponse r=client.execute(get)){
          HttpTestUtils.copy(r.getEntity().getContent(),fos);
          Assert.assertEquals(206,r.getStatusLine().getStatusCode());
        }
       }
       TestUtils.assertEquals(f,out);
    }
   }
  finally {
    server.halt();
    new MimeTypes(configuration.getMimeTypes()).close();
  }
}","private void assertRanges(ServerConfiguration configuration,HttpServer server) throws IOException {
  server.start();
  try {
    HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,null);
    File out=new File(temp.getRoot(),""String_Node_Str"");
    HttpGet get=new HttpGet(""String_Node_Str"");
    get.addHeader(""String_Node_Str"",""String_Node_Str"");
    try (CloseableHttpClient client=HttpClients.createDefault()){
      try (CloseableHttpResponse r=client.execute(get)){
        Assert.assertEquals(416,r.getStatusLine().getStatusCode());
      }
       File f=resourceFile(""String_Node_Str"");
      long size;
      try (FileInputStream is=new FileInputStream(f)){
        size=is.available();
      }
       long part=size / 2;
      try (FileOutputStream fos=new FileOutputStream(out)){
        get.addHeader(""String_Node_Str"",""String_Node_Str"" + part);
        try (CloseableHttpResponse r=client.execute(get)){
          HttpTestUtils.copy(r.getEntity().getContent(),fos);
          Assert.assertEquals(206,r.getStatusLine().getStatusCode());
        }
         get.addHeader(""String_Node_Str"",""String_Node_Str"" + part + ""String_Node_Str"");
        try (CloseableHttpResponse r=client.execute(get)){
          HttpTestUtils.copy(r.getEntity().getContent(),fos);
          Assert.assertEquals(206,r.getStatusLine().getStatusCode());
        }
       }
       TestUtils.assertEquals(f,out);
    }
   }
  finally {
    server.halt();
    new MimeTypes(configuration.getMimeTypes()).close();
  }
}",0.9983416252072967
31351,"@Test public void testImportAppend() throws Exception {
  final ServerConfiguration configuration=new ServerConfiguration();
  HttpServer server=new HttpServer(configuration,new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  try (JournalCachingFactory f=new JournalCachingFactory(factory.getConfiguration())){
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null));
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null));
      StringSink sink=new StringSink();
      RecordSourcePrinter printer=new RecordSourcePrinter(sink);
      QueryCompiler qc=new QueryCompiler(configuration);
      printer.printCursor(qc.compile(f,""String_Node_Str""));
      TestUtils.assertEquals(""String_Node_Str"",sink);
    }
  finally {
      server.halt();
    }
  }
 }","@Test public void testImportAppend() throws Exception {
  final ServerConfiguration configuration=new ServerConfiguration();
  HttpServer server=new HttpServer(configuration,new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new ImportHandler(factory));
    }
  }
);
  server.start();
  try (JournalCachingFactory f=new JournalCachingFactory(factory.getConfiguration())){
    try {
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,null));
      Assert.assertEquals(200,HttpTestUtils.upload(""String_Node_Str"",""String_Node_Str"",null,null));
      StringSink sink=new StringSink();
      RecordSourcePrinter printer=new RecordSourcePrinter(sink);
      QueryCompiler qc=new QueryCompiler(configuration);
      printer.printCursor(qc.compile(f,""String_Node_Str""));
      TestUtils.assertEquals(""String_Node_Str"",sink);
    }
  finally {
      server.halt();
    }
  }
 }",0.9944873208379272
31352,"@SuppressWarnings(""String_Node_Str"") @Override public RecordCursor prepareCursor(JournalReaderFactory factory,CancellationHandler cancellationHandler) throws JournalException {
  return delegate.prepareCursor(factory,cancellationHandler);
}","@Override public RecordCursor prepareCursor(JournalReaderFactory factory) throws JournalException {
  return delegate.prepareCursor(factory);
}",0.7467362924281984
31353,"private static int upload(File file,String url,StringBuilder response) throws IOException {
  HttpPost post=new HttpPost(url);
  try (CloseableHttpClient client=HttpClients.createDefault()){
    MultipartEntityBuilder b=MultipartEntityBuilder.create();
    b.addPart(""String_Node_Str"",new FileBody(file));
    post.setEntity(b.build());
    HttpResponse r=client.execute(post);
    if (response != null) {
      InputStream is=r.getEntity().getContent();
      int n;
      while ((n=is.read()) > 0) {
        response.append((char)n);
      }
      is.close();
    }
    return r.getStatusLine().getStatusCode();
  }
 }","private static int upload(File file,String url,String schema,StringBuilder response) throws IOException {
  HttpPost post=new HttpPost(url);
  try (CloseableHttpClient client=HttpClients.createDefault()){
    MultipartEntityBuilder b=MultipartEntityBuilder.create();
    if (schema != null) {
      b.addPart(""String_Node_Str"",new StringBody(schema,ContentType.TEXT_PLAIN));
    }
    b.addPart(""String_Node_Str"",new FileBody(file));
    post.setEntity(b.build());
    HttpResponse r=client.execute(post);
    if (response != null) {
      InputStream is=r.getEntity().getContent();
      int n;
      while ((n=is.read()) > 0) {
        response.append((char)n);
      }
      is.close();
    }
    return r.getStatusLine().getStatusCode();
  }
 }",0.9064327485380116
31354,"public void of(CharSequence that){
  this.underlying=that;
  int dot=Chars.indexOf(that,'.');
  if (dot == -1) {
    alias.of(null,0,0);
    name.of(that,0,that.length());
  }
 else {
    alias.of(that,0,dot);
    name.of(that,dot + 1,that.length() - dot - 1);
  }
}","private void of(CharSequence that){
  this.underlying=that;
  int dot=Chars.indexOf(that,'.');
  if (dot == -1) {
    alias.of(null,0,0);
    name.of(that,0,that.length());
  }
 else {
    alias.of(that,0,dot);
    name.of(that,dot + 1,that.length() - dot - 1);
  }
}",0.9793621013133208
31355,"@Override public int getColumnIndexQuiet(CharSequence name){
  int index=columnIndexLookup.get(name);
  if (index > -1) {
    return index;
  }
  if (getAlias() == null) {
    return -1;
  }
  columnName.of(name);
  if (columnName.alias().length() == 0) {
    return -1;
  }
  if (Chars.equals(columnName.alias(),getAlias())) {
    return columnIndexLookup.get(columnName.name());
  }
  return -1;
}","@Override public int getColumnIndexQuiet(CharSequence name){
  int index=columnIndexLookup.get(name);
  if (index > -1) {
    return index;
  }
  if (getAlias() == null) {
    return -1;
  }
  ColumnName columnName=ColumnName.singleton(name);
  if (columnName.alias().length() == 0) {
    return -1;
  }
  if (Chars.equals(columnName.alias(),getAlias())) {
    return columnIndexLookup.get(columnName.name());
  }
  return -1;
}",0.9334945586457074
31356,"@Override public void toSink(CharSink sink){
  sink.put('{');
  sink.putQuoted(""String_Node_Str"").put(':').putQuoted(""String_Node_Str"").put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put('""').put(filterNode).put('""');
  sink.put('}');
}","@Override public void toSink(CharSink sink){
  sink.put('{');
  sink.putQuoted(""String_Node_Str"").put(':').putQuoted(""String_Node_Str"").put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put(delegate).put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put('""').put(filterNode).put('""');
  sink.put('}');
}",0.8761220825852782
31357,"@Override public int getColumnIndexQuiet(CharSequence name){
  return nameIndex.get(name);
}","@Override public int getColumnIndexQuiet(CharSequence name){
  int index=nameIndex.get(name);
  if (index != -1) {
    return index;
  }
  String alias=getAlias();
  if (alias == null) {
    return -1;
  }
  ColumnName columnName=ColumnName.singleton(name);
  if (Chars.equalsNc(alias,columnName.alias())) {
    return nameIndex.get(columnName.name());
  }
  return -1;
}",0.367170626349892
31358,"@Override public void visit(ExprNode node) throws ParserException {
  if (node.type == ExprNode.NodeType.LITERAL) {
    match=match && names.contains(node.token);
  }
}","@Override public void visit(ExprNode node) throws ParserException {
  if (node.type == ExprNode.NodeType.LITERAL) {
    if (match) {
      if (names.contains(node.token)) {
        return;
      }
      if (alias == null) {
        match=false;
        return;
      }
      ColumnName columnName=ColumnName.singleton(node.token);
      if (columnName.alias() == null) {
        match=false;
        return;
      }
      if (Chars.equals(columnName.alias(),alias) && names.contains(columnName.name())) {
        node.token=columnName.name().toString();
        return;
      }
      match=false;
    }
  }
}",0.422680412371134
31359,"@Override public void toSink(CharSink sink){
  sink.put('{');
  sink.putQuoted(""String_Node_Str"").put(':').putQuoted(""String_Node_Str"").put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put(master).put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put(slave).put(',');
  sink.putQuoted(""String_Node_Str"").put(':');
  sink.put('[');
  for (int i=0, n=masterColumns.size(); i < n; i++) {
    if (i > 0) {
      sink.put(',');
    }
    sink.put(masterColumns.getQuick(i).getName());
  }
  sink.put(']').put(',');
  sink.put('[');
  for (int i=0, n=slaveColumns.size(); i < n; i++) {
    if (i > 0) {
      sink.put(',');
    }
    sink.put(slaveColumns.getQuick(i).getName());
  }
  sink.put(']');
  sink.put('}');
}","@Override public void toSink(CharSink sink){
  sink.put('{');
  sink.putQuoted(""String_Node_Str"").put(':').putQuoted(""String_Node_Str"").put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put(master).put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put(slave).put(',');
  sink.putQuoted(""String_Node_Str"").put(':').put('[');
  sink.put('[');
  for (int i=0, n=masterColumns.size(); i < n; i++) {
    if (i > 0) {
      sink.put(',');
    }
    sink.putQuoted(masterColumns.getQuick(i).getName());
  }
  sink.put(']').put(',');
  sink.put('[');
  for (int i=0, n=slaveColumns.size(); i < n; i++) {
    if (i > 0) {
      sink.put(',');
    }
    sink.putQuoted(slaveColumns.getQuick(i).getName());
  }
  sink.put(""String_Node_Str"");
}",0.956343792633015
31360,"private RecordSource compile(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  RecordSource rs;
  if (model.getJoinModels().size() > 1) {
    optimiseJoins(model,factory);
    rs=compileJoins(model,factory);
  }
 else {
    rs=compileSingleOrSubQuery(model,factory);
  }
  return limit(order(selectColumns(rs,model),model),model);
}","private RecordSource compile(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  RecordSource rs;
  if (model.getJoinModels().size() > 1) {
    rs=compileJoins(model,factory);
  }
 else   if (model.getJournalName() != null) {
    rs=compileJournal(model,factory);
  }
 else {
    rs=compileSubQuery(model,factory);
  }
  return limit(order(selectColumns(rs,model),model),model);
}",0.8639798488664987
31361,"private RecordSource order(RecordSource rs,QueryModel model) throws ParserException {
  ObjList<ExprNode> orderBy=model.getOrderBy();
  IntList orderByDirection=model.getOrderByDirection();
  IntList indices=model.getOrderColumnIndices();
  int n=orderBy.size();
  if (n > 0) {
    RecordMetadata m=rs.getMetadata();
    for (int i=0; i < n; i++) {
      ExprNode tok=orderBy.getQuick(i);
      int index=m.getColumnIndexQuiet(tok.token);
      if (index == -1) {
        throw QueryError.invalidColumn(tok.position,tok.token);
      }
      index++;
      if (orderByDirection.getQuick(i) == QueryModel.ORDER_DIRECTION_DESCENDING) {
        index=-index;
      }
      indices.add(index);
    }
    return new RBTreeSortedRecordSource(rs,cc.compile(RBTreeSortedRecordSource.class,m,indices));
  }
 else {
    return rs;
  }
}","private RecordSource order(RecordSource rs,QueryModel model) throws ParserException {
  ObjList<ExprNode> orderBy=model.getOrderBy();
  int n=orderBy.size();
  if (n > 0) {
    IntList orderByDirection=model.getOrderByDirection();
    IntList indices=model.getOrderColumnIndices();
    RecordMetadata m=rs.getMetadata();
    for (int i=0; i < n; i++) {
      ExprNode tok=orderBy.getQuick(i);
      int index=m.getColumnIndexQuiet(tok.token);
      if (index == -1) {
        throw QueryError.invalidColumn(tok.position,tok.token);
      }
      index++;
      if (orderByDirection.getQuick(i) == QueryModel.ORDER_DIRECTION_DESCENDING) {
        index=-index;
      }
      indices.add(index);
    }
    return new RBTreeSortedRecordSource(rs,cc.compile(RBTreeSortedRecordSource.class,m,indices));
  }
 else {
    return rs;
  }
}",0.9504830917874396
31362,"private RecordSource compileJoins(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  ObjList<QueryModel> joinModels=model.getJoinModels();
  IntList ordered=model.getOrderedJoinModels();
  RecordSource master=null;
  boolean collectColumnNameFrequency=model.getColumns().size() > 0;
  for (int i=0, n=ordered.size(); i < n; i++) {
    int index=ordered.getQuick(i);
    QueryModel m=joinModels.getQuick(index);
    RecordSource slave=m.getRecordSource();
    if (slave == null) {
      slave=compileSingleOrSubQuery(m,factory);
      if (m.getAlias() != null) {
        slave.getMetadata().setAlias(m.getAlias().token);
      }
    }
    if (collectColumnNameFrequency) {
      collectColumnNameFrequency(model,slave);
    }
    if (master == null) {
      master=slave;
    }
 else {
switch (m.getJoinType()) {
case CROSS:
        master=new CrossJoinRecordSource(master,slave);
      break;
case ASOF:
    master=createAsOfJoin(model.getTimestamp(),m,master,slave);
  break;
default :
master=createHashJoin(m,master,slave);
break;
}
}
ExprNode filter=m.getPostJoinWhereClause();
if (filter != null) {
master=new FilteredJournalRecordSource(master,virtualColumnBuilder.createVirtualColumn(model,filter,master.getMetadata()),filter);
}
}
if (joinModelIsFalse(model)) {
return new NoOpJournalRecordSource(master);
}
return master;
}","private RecordSource compileJoins(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  optimiseJoins(model,factory);
  ObjList<QueryModel> joinModels=model.getJoinModels();
  IntList ordered=model.getOrderedJoinModels();
  RecordSource master=null;
  boolean collectColumnNameFrequency=model.getColumns().size() > 0;
  for (int i=0, n=ordered.size(); i < n; i++) {
    int index=ordered.getQuick(i);
    QueryModel m=joinModels.getQuick(index);
    RecordSource slave=m.getRecordSource();
    if (slave == null) {
      slave=compileJournal(m,factory);
      if (m.getAlias() != null) {
        slave.getMetadata().setAlias(m.getAlias().token);
      }
    }
    if (collectColumnNameFrequency) {
      collectColumnNameFrequency(model,slave);
    }
    if (master == null) {
      master=slave;
    }
 else {
switch (m.getJoinType()) {
case CROSS:
        master=new CrossJoinRecordSource(master,slave);
      break;
case ASOF:
    master=createAsOfJoin(model.getTimestamp(),m,master,slave);
  break;
default :
master=createHashJoin(m,master,slave);
break;
}
}
ExprNode filter=m.getPostJoinWhereClause();
if (filter != null) {
master=new FilteredJournalRecordSource(master,virtualColumnBuilder.createVirtualColumn(model,filter,master.getMetadata()),filter);
}
}
if (joinModelIsFalse(model)) {
return new NoOpJournalRecordSource(master);
}
return master;
}",0.980122876761836
31363,"private RecordSource compileSubQuery(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  RecordSource rs=compile(model.getNestedModel(),factory);
  if (model.getWhereClause() == null) {
    return rs;
  }
  RecordMetadata m=rs.getMetadata();
  if (model.getAlias() != null) {
    m.setAlias(model.getAlias().token);
  }
  IntrinsicModel im=queryFilterAnalyser.extract(model.getWhereClause(),m,null);
switch (im.intrinsicValue) {
case FALSE:
    return new NoOpJournalRecordSource(rs);
default :
  if (im.intervalSource != null) {
    rs=new IntervalRecordSource(rs,im.intervalSource);
  }
if (im.filter != null) {
  VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,im.filter,m);
  if (vc.isConstant()) {
    if (vc.getBool(null)) {
      return rs;
    }
 else {
      return new NoOpJournalRecordSource(rs);
    }
  }
  return new FilteredJournalRecordSource(rs,vc,im.filter);
}
 else {
  return rs;
}
}
}","private RecordSource compileSubQuery(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  applyLimit(model);
  optimiseSubQueries(model,factory);
  RecordSource rs=compile(model.getNestedModel(),factory);
  if (model.getWhereClause() == null) {
    return rs;
  }
  RecordMetadata m=rs.getMetadata();
  if (model.getAlias() != null) {
    m.setAlias(model.getAlias().token);
  }
  IntrinsicModel im=queryFilterAnalyser.extract(model.getWhereClause(),m,null);
switch (im.intrinsicValue) {
case FALSE:
    return new NoOpJournalRecordSource(rs);
default :
  if (im.intervalSource != null) {
    rs=new IntervalRecordSource(rs,im.intervalSource);
  }
if (im.filter != null) {
  VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,im.filter,m);
  if (vc.isConstant()) {
    if (vc.getBool(null)) {
      return rs;
    }
 else {
      return new NoOpJournalRecordSource(rs);
    }
  }
  return new FilteredJournalRecordSource(rs,vc,im.filter);
}
 else {
  return rs;
}
}
}",0.9707070707070709
31364,"private RecordSource compile(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  return limit(order(selectColumns(model.getJoinModels().size() > 1 ? optimise(model,factory).compileJoins(model,factory) : optimise(model,factory).compileSingleOrSubQuery(model,factory),model),model),model);
}","private RecordSource compile(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  return limit(order(selectColumns(model.getJoinModels().size() > 1 ? optimise(model,factory).compileJoins(model,factory) : compileSingleOrSubQuery(model,factory),model),model),model);
}",0.9621451104100948
31365,"@SuppressWarnings(""String_Node_Str"") @SuppressFBWarnings({""String_Node_Str""}) private RecordSource compileSingleJournal(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  RecordMetadata metadata=model.getMetadata();
  JournalMetadata journalMetadata;
  if (metadata == null) {
    journalMetadata=collectJournalMetadata(model,factory);
  }
 else   if (metadata instanceof JournalMetadata) {
    journalMetadata=(JournalMetadata)metadata;
  }
 else {
    throw QueryError.$(0,""String_Node_Str"");
  }
  if (model.getAlias() != null) {
    journalMetadata.setAlias(model.getAlias().token);
  }
 else {
    journalMetadata.setAlias(model.getJournalName().token);
  }
  PartitionSource ps=new JournalPartitionSource(journalMetadata,true);
  RowSource rs=null;
  String latestByCol=null;
  RecordColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.NodeType.LITERAL) {
      throw QueryError.$(latestByNode.position,""String_Node_Str"");
    }
    int colIndex=journalMetadata.getColumnIndexQuiet(latestByNode.token);
    if (colIndex == -1) {
      throw QueryError.invalidColumn(latestByNode.position,latestByNode.token);
    }
    latestByMetadata=journalMetadata.getColumnQuick(colIndex);
    ColumnType type=latestByMetadata.getType();
    if (type != ColumnType.SYMBOL && type != ColumnType.STRING && type != ColumnType.INT) {
      throw QueryError.position(latestByNode.position).$(""String_Node_Str"").$(type).$();
    }
    if (!latestByMetadata.isIndexed()) {
      throw QueryError.position(latestByNode.position).$(""String_Node_Str"").$();
    }
    latestByCol=latestByNode.token;
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=queryFilterAnalyser.extract(where,journalMetadata,latestByCol);
    VirtualColumn filter=im.filter != null ? virtualColumnBuilder.createVirtualColumn(model,im.filter,journalMetadata) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw QueryError.$(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(journalMetadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (journalMetadata.getColumn(im.keyColumn).getType()) {
case SYMBOL:
            rs=buildRowSourceForSym(im);
          break;
case STRING:
        rs=buildRowSourceForStr(im);
      break;
case INT:
    rs=buildRowSourceForInt(im);
  break;
default :
break;
}
}
if (filter != null) {
rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
if (im.keyColumn != null && im.keyValuesIsLambda) {
int lambdaColIndex;
RecordSource lambda=compileSourceInternal(factory,im.keyValues.get(0));
RecordMetadata m=lambda.getMetadata();
switch (m.getColumnCount()) {
case 0:
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
case 1:
lambdaColIndex=0;
break;
default :
lambdaColIndex=m.getColumnIndexQuiet(latestByCol);
if (lambdaColIndex == -1) {
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
break;
}
ColumnType lambdaColType=m.getColumn(lambdaColIndex).getType();
mutableSig.setParamCount(2).setName(""String_Node_Str"").paramType(0,latestByMetadata.getType(),true).paramType(1,lambdaColType,false);
LatestByLambdaRowSourceFactory fact=LAMBDA_ROW_SOURCE_FACTORIES.get(mutableSig);
if (fact != null) {
rs=fact.newInstance(latestByCol,lambda,lambdaColIndex,filter);
}
 else {
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
}
 else {
switch (latestByMetadata.getType()) {
case SYMBOL:
if (im.keyColumn != null) {
rs=new KvIndexSymListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
rs=new KvIndexSymAllHeadRowSource(latestByCol,filter);
}
break;
case STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
case INT:
if (im.keyColumn != null) {
rs=new KvIndexIntListHeadRowSource(latestByCol,toIntHashSet(im),filter);
}
 else {
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
default :
break;
}
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.getType()) {
case SYMBOL:
rs=new KvIndexSymAllHeadRowSource(latestByCol,null);
break;
default :
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
}
return new JournalSource(ps,rs == null ? new AllRowSource() : rs);
}","@SuppressWarnings(""String_Node_Str"") @SuppressFBWarnings({""String_Node_Str""}) private RecordSource compileSingleJournal(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  RecordMetadata metadata=model.getMetadata();
  JournalMetadata journalMetadata;
  if (metadata == null) {
    journalMetadata=collectJournalMetadata(model,factory);
  }
 else   if (metadata instanceof JournalMetadata) {
    journalMetadata=(JournalMetadata)metadata;
  }
 else {
    throw QueryError.$(0,""String_Node_Str"");
  }
  if (model.getAlias() != null) {
    journalMetadata.setAlias(model.getAlias().token);
  }
 else {
    journalMetadata.setAlias(model.getJournalName().token);
  }
  PartitionSource ps=new JournalPartitionSource(journalMetadata,true);
  RowSource rs=null;
  String latestByCol=null;
  RecordColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.NodeType.LITERAL) {
      throw QueryError.$(latestByNode.position,""String_Node_Str"");
    }
    int colIndex=journalMetadata.getColumnIndexQuiet(latestByNode.token);
    if (colIndex == -1) {
      throw QueryError.invalidColumn(latestByNode.position,latestByNode.token);
    }
    latestByMetadata=journalMetadata.getColumnQuick(colIndex);
    ColumnType type=latestByMetadata.getType();
    if (type != ColumnType.SYMBOL && type != ColumnType.STRING && type != ColumnType.INT) {
      throw QueryError.position(latestByNode.position).$(""String_Node_Str"").$(type).$();
    }
    if (!latestByMetadata.isIndexed()) {
      throw QueryError.position(latestByNode.position).$(""String_Node_Str"").$();
    }
    latestByCol=latestByNode.token;
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=queryFilterAnalyser.extract(where,journalMetadata,latestByCol);
    VirtualColumn filter=im.filter != null ? virtualColumnBuilder.createVirtualColumn(model,im.filter,journalMetadata) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw QueryError.$(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(journalMetadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (journalMetadata.getColumn(im.keyColumn).getType()) {
case SYMBOL:
            rs=buildRowSourceForSym(im);
          break;
case STRING:
        rs=buildRowSourceForStr(im);
      break;
case INT:
    rs=buildRowSourceForInt(im);
  break;
default :
break;
}
}
if (filter != null) {
rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
if (im.keyColumn != null && im.keyValuesIsLambda) {
int lambdaColIndex;
RecordSource lambda=compileSourceInternal(factory,im.keyValues.get(0));
RecordMetadata m=lambda.getMetadata();
switch (m.getColumnCount()) {
case 0:
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
case 1:
lambdaColIndex=0;
break;
default :
lambdaColIndex=m.getColumnIndexQuiet(latestByCol);
if (lambdaColIndex == -1) {
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
break;
}
ColumnType lambdaColType=m.getColumn(lambdaColIndex).getType();
mutableSig.setParamCount(2).setName(""String_Node_Str"").paramType(0,latestByMetadata.getType(),true).paramType(1,lambdaColType,false);
LatestByLambdaRowSourceFactory fact=LAMBDA_ROW_SOURCE_FACTORIES.get(mutableSig);
if (fact != null) {
rs=fact.newInstance(latestByCol,lambda,lambdaColIndex,filter);
}
 else {
throw QueryError.$(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
}
 else {
switch (latestByMetadata.getType()) {
case SYMBOL:
if (im.keyColumn != null) {
rs=new KvIndexSymListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
rs=new KvIndexSymAllHeadRowSource(latestByCol,filter);
}
break;
case STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
case INT:
if (im.keyColumn != null) {
rs=new KvIndexIntListHeadRowSource(latestByCol,toIntHashSet(im),filter);
}
 else {
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
break;
default :
break;
}
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.getType()) {
case SYMBOL:
rs=new KvIndexSymAllHeadRowSource(latestByCol,null);
break;
default :
throw QueryError.$(latestByNode.position,""String_Node_Str"");
}
}
if (rs == null && model.getColumns().size() == 1) {
QueryColumn qc=model.getColumns().getQuick(0);
if (""String_Node_Str"".equals(qc.getAst().token) && qc.getAst().paramCount == 0) {
model.getOrderBy().clear();
model.getColumns().clear();
return new CountRecordSource(qc.getAlias() == null ? ""String_Node_Str"" : qc.getAlias(),ps);
}
}
return new JournalSource(ps,rs == null ? new AllRowSource() : rs);
}",0.9688289806234204
31366,"@Override protected void onPartBegin(IOContext context,RequestHeaderBuffer hb) throws IOException {
  ImportHandlerContext h=lvContext.get(context);
  if (Chars.equals(""String_Node_Str"",hb.getContentDispositionName())) {
    if (hb.getContentDispositionFilename() == null) {
      context.simpleResponse().send(400,""String_Node_Str"");
      throw DisconnectedChannelException.INSTANCE;
    }
    h.analysed=false;
    h.importer.of(hb.getContentDispositionFilename().toString());
    h.part=MessagePart.DATA;
  }
 else   if (Chars.equals(""String_Node_Str"",hb.getContentDispositionName())) {
    h.part=MessagePart.SCHEMA;
  }
 else {
    h.part=MessagePart.UNKNOWN;
  }
}","@Override protected void onPartBegin(IOContext context,RequestHeaderBuffer hb) throws IOException {
  ImportHandlerContext h=lvContext.get(context);
  if (Chars.equals(""String_Node_Str"",hb.getContentDispositionName())) {
    if (hb.getContentDispositionFilename() == null) {
      context.simpleResponse().send(400,""String_Node_Str"");
      throw DisconnectedChannelException.INSTANCE;
    }
    h.analysed=false;
    h.importer.of(nameExtractor.get().of(hb.getContentDispositionFilename()).toString());
    h.part=MessagePart.DATA;
  }
 else   if (Chars.equals(""String_Node_Str"",hb.getContentDispositionName())) {
    h.part=MessagePart.SCHEMA;
  }
 else {
    h.part=MessagePart.UNKNOWN;
  }
}",0.9824304538799414
31367,"@SuppressFBWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  System.out.printf(""String_Node_Str"");
  if (args.length < 1) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (Os.type == Os._32Bit) {
    System.out.println(""String_Node_Str"");
    return;
  }
  String dir=args[0];
  extractSite(dir);
  File conf=new File(dir,""String_Node_Str"");
  if (!conf.exists()) {
    System.out.println(""String_Node_Str"" + conf);
    return;
  }
  final HttpServerConfiguration configuration=new HttpServerConfiguration(conf);
  configureLoggers(configuration);
  final SimpleUrlMatcher matcher=new SimpleUrlMatcher();
  JournalFactory factory=new JournalFactory(configuration.getDbPath().getAbsolutePath());
  matcher.put(""String_Node_Str"",new ImportHandler(factory));
  matcher.put(""String_Node_Str"",new QueryHandler(new JournalFactoryPool(factory.getConfiguration(),configuration.getJournalPoolSize())));
  matcher.put(""String_Node_Str"",new ExistenceCheckHandler(factory));
  matcher.setDefaultHandler(new StaticContentHandler(configuration.getHttpPublic(),new MimeTypes(configuration.getMimeTypes())));
  HttpServer server=new HttpServer(configuration,matcher);
  server.start(LogFactory.INSTANCE.getJobs());
  StringBuilder welcome=new StringBuilder();
  welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
  if (configuration.getSslConfig().isSecure()) {
    welcome.append(""String_Node_Str"");
  }
 else {
    welcome.append(""String_Node_Str"");
  }
  System.out.println(welcome);
}","@SuppressFBWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  System.out.printf(""String_Node_Str"");
  if (args.length < 1) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (Os.type == Os._32Bit) {
    System.out.println(""String_Node_Str"");
    return;
  }
  String dir=args[0];
  String flag=args.length > 1 ? args[1] : null;
  extractSite(dir,""String_Node_Str"".equals(flag));
  File conf=new File(dir,""String_Node_Str"");
  if (!conf.exists()) {
    System.out.println(""String_Node_Str"" + conf);
    return;
  }
  final HttpServerConfiguration configuration=new HttpServerConfiguration(conf);
  configureLoggers(configuration);
  final SimpleUrlMatcher matcher=new SimpleUrlMatcher();
  JournalFactory factory=new JournalFactory(configuration.getDbPath().getAbsolutePath());
  matcher.put(""String_Node_Str"",new ImportHandler(factory));
  matcher.put(""String_Node_Str"",new QueryHandler(new JournalFactoryPool(factory.getConfiguration(),configuration.getJournalPoolSize())));
  matcher.put(""String_Node_Str"",new ExistenceCheckHandler(factory));
  matcher.setDefaultHandler(new StaticContentHandler(configuration.getHttpPublic(),new MimeTypes(configuration.getMimeTypes())));
  HttpServer server=new HttpServer(configuration,matcher);
  server.start(LogFactory.INSTANCE.getJobs());
  StringBuilder welcome=new StringBuilder();
  welcome.append(""String_Node_Str"").append(configuration.getHttpIP()).append(':').append(configuration.getHttpPort());
  if (configuration.getSslConfig().isSecure()) {
    welcome.append(""String_Node_Str"");
  }
 else {
    welcome.append(""String_Node_Str"");
  }
  System.out.println(welcome);
}",0.9758039816232772
31368,"private static void extractSite(String dir) throws URISyntaxException, IOException {
  URL url=HttpServer.class.getResource(""String_Node_Str"");
  final Path source=Paths.get(url.toURI());
  final Path target=Paths.get(dir);
  final EnumSet<FileVisitOption> walkOptions=EnumSet.of(FileVisitOption.FOLLOW_LINKS);
  final CopyOption[] copyOptions=new CopyOption[]{COPY_ATTRIBUTES,REPLACE_EXISTING};
  Files.walkFileTree(source,walkOptions,Integer.MAX_VALUE,new FileVisitor<Path>(){
    private boolean skip=true;
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs){
      if (skip) {
        skip=false;
      }
 else {
        Path newDirectory=target.resolve(source.relativize(dir));
        try {
          Files.copy(dir,newDirectory,copyOptions);
        }
 catch (        FileAlreadyExistsException ignore) {
        }
catch (        IOException x) {
          return FileVisitResult.SKIP_SUBTREE;
        }
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      Files.copy(file,target.resolve(source.relativize(file)),copyOptions);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException exc){
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException exc){
      return FileVisitResult.CONTINUE;
    }
  }
);
}","private static void extractSite(String dir,boolean force) throws URISyntaxException, IOException {
  URL url=HttpServer.class.getResource(""String_Node_Str"");
  final Path source=Paths.get(url.toURI());
  final Path target=Paths.get(dir);
  final EnumSet<FileVisitOption> walkOptions=EnumSet.of(FileVisitOption.FOLLOW_LINKS);
  final CopyOption[] copyOptions=new CopyOption[]{COPY_ATTRIBUTES,REPLACE_EXISTING};
  if (force) {
    File pub=new File(dir,""String_Node_Str"");
    if (pub.exists()) {
      com.questdb.misc.Files.delete(pub);
    }
  }
  Files.walkFileTree(source,walkOptions,Integer.MAX_VALUE,new FileVisitor<Path>(){
    private boolean skip=true;
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs){
      if (skip) {
        skip=false;
      }
 else {
        Path newDirectory=target.resolve(source.relativize(dir));
        try {
          Files.copy(dir,newDirectory,copyOptions);
        }
 catch (        FileAlreadyExistsException ignore) {
        }
catch (        IOException x) {
          return FileVisitResult.SKIP_SUBTREE;
        }
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      Files.copy(file,target.resolve(source.relativize(file)),copyOptions);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException exc){
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException exc){
      return FileVisitResult.CONTINUE;
    }
  }
);
}",0.9527682202064436
31369,"private int parseMethod(long lo,int len) throws HeadersTooLargeException {
  long p=lo;
  long hi=lo + len;
  int offset=0;
  while (p < hi) {
    if (_wptr == this.hi) {
      throw HeadersTooLargeException.INSTANCE;
    }
    char b=(char)Unsafe.getUnsafe().getByte(p++);
    if (b == '\r') {
      continue;
    }
switch (b) {
case ' ':
      if (m) {
        method=pool.next().of(_lo,_wptr);
        _lo=_wptr + 1;
        m=false;
      }
 else       if (u) {
        url=pool.next().of(_lo,_wptr);
        u=false;
        _lo=_wptr + 1;
      }
 else       if (q) {
        int o=Misc.urlDecode(_lo,_wptr,urlParams,pool);
        q=false;
        _lo=_wptr;
        _wptr-=o;
      }
    break;
case '?':
  url=pool.next().of(_lo,_wptr);
u=false;
q=true;
_lo=_wptr + 1;
break;
case '\n':
methodLine=pool.next().of(((DirectByteCharSequence)method).getLo(),_wptr);
needMethod=false;
this._lo=_wptr;
return (int)(p - lo);
default :
break;
}
Unsafe.getUnsafe().putByte(_wptr++,(byte)b);
}
return (int)(p - lo);
}","private int parseMethod(long lo,int len) throws HeadersTooLargeException {
  long p=lo;
  long hi=lo + len;
  while (p < hi) {
    if (_wptr == this.hi) {
      throw HeadersTooLargeException.INSTANCE;
    }
    char b=(char)Unsafe.getUnsafe().getByte(p++);
    if (b == '\r') {
      continue;
    }
switch (b) {
case ' ':
      if (m) {
        method=pool.next().of(_lo,_wptr);
        _lo=_wptr + 1;
        m=false;
      }
 else       if (u) {
        url=pool.next().of(_lo,_wptr);
        u=false;
        _lo=_wptr + 1;
      }
 else       if (q) {
        int o=Misc.urlDecode(_lo,_wptr,urlParams,pool);
        q=false;
        _lo=_wptr;
        _wptr-=o;
      }
    break;
case '?':
  url=pool.next().of(_lo,_wptr);
u=false;
q=true;
_lo=_wptr + 1;
break;
case '\n':
methodLine=pool.next().of(((DirectByteCharSequence)method).getLo(),_wptr);
needMethod=false;
this._lo=_wptr;
return (int)(p - lo);
default :
break;
}
Unsafe.getUnsafe().putByte(_wptr++,(byte)b);
}
return (int)(p - lo);
}",0.992063492063492
31370,"public void clear(int capacity){
  setAll(capacity,noEntryValue);
}","public void clear(int capacity){
  ensureCapacity(capacity);
  pos=0;
  Arrays.fill(buffer,noEntryValue);
}",0.735632183908046
31371,"public void setAll(int capacity,int value){
  ensureCapacity0(capacity);
  pos=0;
  Arrays.fill(buffer,value);
}","public void setAll(int capacity,int value){
  ensureCapacity0(capacity);
  pos=capacity;
  Arrays.fill(buffer,value);
}",0.961038961038961
31372,"public void setAll(int capacity,T value){
  ensureCapacity0(capacity);
  pos=0;
  Arrays.fill(buffer,value);
}","public void setAll(int capacity,T value){
  ensureCapacity0(capacity);
  pos=capacity;
  Arrays.fill(buffer,value);
}",0.960352422907489
31373,"public static void urlDecode(long lo,long hi,CharSequenceObjHashMap<CharSequence> map,ObjectPool<DirectByteCharSequence> pool){
  long _lo=lo;
  long rp=lo;
  long wp=lo;
  final DirectByteCharSequence temp=pool.next();
  CharSequence name=null;
  while (rp < hi) {
    char b=(char)Unsafe.getUnsafe().getByte(rp++);
switch (b) {
case '=':
      if (_lo < wp) {
        name=pool.next().of(_lo,wp);
      }
    _lo=rp;
  wp=rp - 1;
break;
case '&':
if (name != null) {
map.put(name,pool.next().of(_lo,wp));
name=null;
}
_lo=rp;
wp=rp - 1;
break;
case '+':
Unsafe.getUnsafe().putByte(wp,(byte)' ');
break;
case '%':
try {
if (rp + 1 < hi) {
Unsafe.getUnsafe().putByte(wp++,(byte)Numbers.parseHexInt(temp.of(rp,rp+=2)));
continue;
}
}
 catch (NumericException ignore) {
}
name=null;
break;
default :
Unsafe.getUnsafe().putByte(wp,(byte)b);
break;
}
wp++;
}
if (_lo < wp && name != null) {
map.put(name,pool.next().of(_lo,wp));
}
}","public static int urlDecode(long lo,long hi,CharSequenceObjHashMap<CharSequence> map,ObjectPool<DirectByteCharSequence> pool){
  long _lo=lo;
  long rp=lo;
  long wp=lo;
  final DirectByteCharSequence temp=pool.next();
  int offset=0;
  CharSequence name=null;
  while (rp < hi) {
    char b=(char)Unsafe.getUnsafe().getByte(rp++);
switch (b) {
case '=':
      if (_lo < wp) {
        name=pool.next().of(_lo,wp);
      }
    _lo=rp - offset;
  break;
case '&':
if (name != null) {
  map.put(name,pool.next().of(_lo,wp));
  name=null;
}
_lo=rp - offset;
break;
case '+':
Unsafe.getUnsafe().putByte(wp++,(byte)' ');
continue;
case '%':
try {
if (rp + 1 < hi) {
Unsafe.getUnsafe().putByte(wp++,(byte)Numbers.parseHexInt(temp.of(rp,rp+=2)));
offset+=2;
continue;
}
}
 catch (NumericException ignore) {
}
name=null;
break;
default :
break;
}
Unsafe.getUnsafe().putByte(wp++,(byte)b);
}
if (_lo < wp && name != null) {
map.put(name,pool.next().of(_lo,wp));
}
return offset;
}",0.9315068493150684
31374,"private int parseMethod(long lo,int len) throws HeadersTooLargeException {
  long p=lo;
  long hi=lo + len;
  while (p < hi) {
    if (_wptr == this.hi) {
      throw HeadersTooLargeException.INSTANCE;
    }
    char b=(char)Unsafe.getUnsafe().getByte(p++);
    if (b == '\r') {
      continue;
    }
    Unsafe.getUnsafe().putByte(_wptr++,(byte)b);
switch (b) {
case ' ':
      if (m) {
        method=pool.next().of(_lo,_wptr - 1);
        _lo=_wptr;
        m=false;
      }
 else       if (u) {
        url=pool.next().of(_lo,_wptr - 1);
        u=false;
        _lo=_wptr;
      }
 else       if (q) {
        Misc.urlDecode(_lo,_wptr - 1,urlParams,pool);
        q=false;
        _lo=_wptr;
      }
    break;
case '?':
  url=pool.next().of(_lo,_wptr - 1);
u=false;
q=true;
_lo=_wptr;
break;
case '\n':
methodLine=pool.next().of(((DirectByteCharSequence)method).getLo(),_wptr - 1);
needMethod=false;
this._lo=_wptr;
return (int)(p - lo);
default :
break;
}
}
return (int)(p - lo);
}","private int parseMethod(long lo,int len) throws HeadersTooLargeException {
  long p=lo;
  long hi=lo + len;
  int offset=0;
  while (p < hi) {
    if (_wptr == this.hi) {
      throw HeadersTooLargeException.INSTANCE;
    }
    char b=(char)Unsafe.getUnsafe().getByte(p++);
    if (b == '\r') {
      continue;
    }
switch (b) {
case ' ':
      if (m) {
        method=pool.next().of(_lo,_wptr);
        _lo=_wptr + 1;
        m=false;
      }
 else       if (u) {
        url=pool.next().of(_lo,_wptr);
        u=false;
        _lo=_wptr + 1;
      }
 else       if (q) {
        int o=Misc.urlDecode(_lo,_wptr,urlParams,pool);
        q=false;
        _lo=_wptr;
        _wptr-=o;
      }
    break;
case '?':
  url=pool.next().of(_lo,_wptr);
u=false;
q=true;
_lo=_wptr + 1;
break;
case '\n':
methodLine=pool.next().of(((DirectByteCharSequence)method).getLo(),_wptr);
needMethod=false;
this._lo=_wptr;
return (int)(p - lo);
default :
break;
}
Unsafe.getUnsafe().putByte(_wptr++,(byte)b);
}
return (int)(p - lo);
}",0.6357285429141717
31375,"@Override public void reset(){
  recordSource.reset();
  map.clear();
}","@Override public void reset(){
  recordSource.reset();
  map.clear();
  nextRecord=null;
}",0.8819875776397516
31376,"@SuppressFBWarnings({""String_Node_Str""}) public ResampledRecordSource(RecordSource recordSource,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,TimestampSampler sampler){
  int keyColumnsSize=keyColumns.size();
  this.keyIndices=new IntList(keyColumnsSize);
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  RecordMetadata rm=recordSource.getMetadata();
  this.tsIndex=rm.getTimestampIndex();
  keyCols.add(rm.getColumnName(tsIndex));
  for (int i=0; i < keyColumnsSize; i++) {
    keyCols.add(keyColumns.get(i));
    int index=rm.getColumnIndex(keyColumns.get(i));
    if (index != tsIndex) {
      keyIndices.add(index);
    }
  }
  this.aggregators=aggregators;
  this.sampler=sampler;
  ObjList<MapRecordValueInterceptor> interceptors=new ObjList<>();
  ObjList<RecordColumnMetadata> columns=tlColumns.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.map=new MultiMap(rm,keyCols,columns,interceptors);
  this.recordSource=recordSource;
}","@SuppressFBWarnings({""String_Node_Str""}) public ResampledRecordSource(RecordSource recordSource,int timestampColumnIndex,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,TimestampSampler sampler){
  int keyColumnsSize=keyColumns.size();
  this.keyIndices=new IntList(keyColumnsSize);
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  RecordMetadata rm=recordSource.getMetadata();
  this.tsIndex=timestampColumnIndex;
  keyCols.add(rm.getColumnName(tsIndex));
  for (int i=0; i < keyColumnsSize; i++) {
    keyCols.add(keyColumns.get(i));
    int index=rm.getColumnIndex(keyColumns.get(i));
    if (index != tsIndex) {
      keyIndices.add(index);
    }
  }
  this.aggregators=aggregators;
  this.sampler=sampler;
  ObjList<MapRecordValueInterceptor> interceptors=new ObjList<>();
  ObjList<RecordColumnMetadata> columns=tlColumns.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.map=new MultiMap(rm,keyCols,columns,interceptors);
  this.recordSource=recordSource;
}",0.9781190019193858
31377,"private void rehash(){
  int capacity=keyCapacity << 1;
  mask=capacity - 1;
  LongList pointers=new LongList(capacity);
  pointers.zero((byte)-1);
  pointers.setPos(capacity);
  for (int i=0, k=this.offsets.size(); i < k; i++) {
    long offset=this.offsets.get(i);
    if (offset == -1) {
      continue;
    }
    int index=Hash.hashMem(kStart + offset + keyBlockOffset,Unsafe.getUnsafe().getInt(kStart + offset) - keyBlockOffset) & mask;
    while (pointers.get(index) != -1) {
      index=(index + 1) & mask;
    }
    pointers.setQuick(index,offset);
  }
  this.offsets=pointers;
  this.free+=(capacity - keyCapacity) * loadFactor;
  this.keyCapacity=capacity;
}","private void rehash(){
  int capacity=keyCapacity << 1;
  mask=capacity - 1;
  LongList pointers=new LongList(capacity);
  pointers.setPos(capacity);
  pointers.zero(-1);
  for (int i=0, k=this.offsets.size(); i < k; i++) {
    long offset=this.offsets.get(i);
    if (offset == -1) {
      continue;
    }
    int index=Hash.hashMem(kStart + offset + keyBlockOffset,Unsafe.getUnsafe().getInt(kStart + offset) - keyBlockOffset) & mask;
    while (pointers.get(index) != -1) {
      index=(index + 1) & mask;
    }
    pointers.setQuick(index,offset);
  }
  this.offsets=pointers;
  this.free+=(capacity - keyCapacity) * loadFactor;
  this.keyCapacity=capacity;
}",0.9518796992481204
31378,"public void clear(){
  kPos=kStart;
  free=(int)(keyCapacity * loadFactor);
  size=0;
  offsets.fill(-1);
}","public void clear(){
  kPos=kStart;
  free=(int)(keyCapacity * loadFactor);
  size=0;
  offsets.zero(-1);
}",0.9626168224299064
31379,"/** 
 * Optimiser may be attempting to order join clauses several times. Every time ordering takes place optimiser will keep at most two lists: one is last known order the other is new order. If new order cost is better optimiser will replace last known order with new one. <p> To facilitate this behaviour the function will always return non-current list.
 * @return non current order list.
 */
public IntList nextOrderedJoinModels(){
  IntList ordered=orderedJoinModels == orderedJoinModels1 ? orderedJoinModels2 : orderedJoinModels1;
  ordered.clear();
  return ordered;
}","/** 
 * Optimiser may be attempting to order join clauses several times. Every time ordering takes place optimiser will keep at most two lists: one is last known order the other is new order. If new order cost is better optimiser will replace last known order with new one. <p/> To facilitate this behaviour the function will always return non-current list.
 * @return non current order list.
 */
public IntList nextOrderedJoinModels(){
  IntList ordered=orderedJoinModels == orderedJoinModels1 ? orderedJoinModels2 : orderedJoinModels1;
  ordered.clear();
  return ordered;
}",0.9991311902693312
31380,"public void clear(){
  columns.clear();
  joinModels.clear();
  joinModels.add(this);
  sampleBy=null;
  orderBy.clear();
  dependencies.clear();
  parsedWhere.clear();
  whereClause=null;
  nestedModel=null;
  journalName=null;
  alias=null;
  latestBy=null;
  recordSource=null;
  metadata=null;
  joinCriteria=null;
  joinType=JoinType.INNER;
  orderedJoinModels1.clear();
  orderedJoinModels2.clear();
  parsedWhereConsts.clear();
  aliasIndexes.clear();
  postJoinWhereClause=null;
  context=null;
  orderedJoinModels=orderedJoinModels2;
  limitHi=null;
  limitLo=null;
  limitHiVc=null;
  limitLoVc=null;
  columnNameFrequencyMap.clear();
  parameterMap.clear();
}","public void clear(){
  columns.clear();
  joinModels.clear();
  joinModels.add(this);
  sampleBy=null;
  orderBy.clear();
  dependencies.clear();
  parsedWhere.clear();
  whereClause=null;
  nestedModel=null;
  journalName=null;
  alias=null;
  latestBy=null;
  recordSource=null;
  metadata=null;
  joinCriteria=null;
  joinType=JoinType.INNER;
  orderedJoinModels1.clear();
  orderedJoinModels2.clear();
  parsedWhereConsts.clear();
  aliasIndexes.clear();
  postJoinWhereClause=null;
  context=null;
  orderedJoinModels=orderedJoinModels2;
  limitHi=null;
  limitLo=null;
  limitHiVc=null;
  limitLoVc=null;
  columnNameFrequencyMap.clear();
  parameterMap.clear();
  timestamp=null;
}",0.9867452135493372
31381,"@SuppressFBWarnings(""String_Node_Str"") private RecordSource selectColumns0(final RecordSource recordSource,QueryModel model) throws ParserException {
  final ObjList<QueryColumn> columns=model.getColumns();
  final CharSequenceIntHashMap columnNameHistogram=model.getColumnNameHistogram();
  final RecordMetadata meta=recordSource.getMetadata();
  this.outerVirtualColumns.clear();
  this.aggregators.clear();
  this.selectedColumns.clear();
  this.selectedColumnAliases.clear();
  this.groupKeyColumns.clear();
  this.aggregateColumnSequence=0;
  ObjList<VirtualColumn> virtualColumns=null;
  for (int i=0, k=columns.size(); i < k; i++) {
    final QueryColumn qc=columns.getQuick(i);
    final ExprNode node=qc.getAst();
    if (node.type == ExprNode.NodeType.LITERAL) {
      if (meta.getColumnIndexQuiet(node.token) == -1) {
        throw QueryError.invalidColumn(node.position,node.token);
      }
      if (columnNameHistogram.get(node.token) > 0) {
        throw QueryError.$(node.position,""String_Node_Str"");
      }
      selectedColumns.add(node.token);
      addAlias(node.position,qc.getAlias() == null ? node.token : qc.getAlias());
      groupKeyColumns.add(node.token);
      continue;
    }
    if (qc.getAlias() == null) {
      qc.of(createAlias(aggregateColumnSequence++),node);
    }
    selectedColumns.add(qc.getAlias());
    addAlias(node.position,qc.getAlias());
    if (node.type == ExprNode.NodeType.FUNCTION && FunctionFactories.isAggregate(node.token)) {
      aggregators.add(qc);
      continue;
    }
    if (node.type == ExprNode.NodeType.OPERATION || node.type == ExprNode.NodeType.FUNCTION) {
      int beforeSplit=aggregators.size();
      splitAggregates(node,aggregators);
      if (beforeSplit < aggregators.size()) {
        outerVirtualColumns.add(qc);
        continue;
      }
    }
    if (virtualColumns == null) {
      virtualColumns=new ObjList<>();
    }
    VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),recordSource.getMetadata());
    vc.setName(qc.getAlias());
    virtualColumns.add(vc);
    groupKeyColumns.add(qc.getAlias());
  }
  RecordSource rs=recordSource;
  if (virtualColumns != null) {
    rs=new VirtualColumnRecordSource(rs,virtualColumns);
  }
  ExprNode sampleBy=model.getSampleBy();
  int asz=aggregators.size();
  if (asz > 0) {
    ObjList<AggregatorFunction> af=new ObjList<>(asz);
    for (int i=0; i < asz; i++) {
      QueryColumn qc=aggregators.get(i);
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
      if (vc instanceof AggregatorFunction) {
        vc.setName(qc.getAlias());
        af.add((AggregatorFunction)vc);
      }
 else {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
    }
    if (sampleBy == null) {
      rs=new AggregatedRecordSource(rs,groupKeyColumns,af);
    }
 else {
      TimestampSampler sampler=SamplerFactory.from(sampleBy.token);
      if (sampler == null) {
        throw QueryError.$(sampleBy.position,""String_Node_Str"");
      }
      rs=new ResampledRecordSource(rs,groupKeyColumns,af,sampler);
    }
  }
 else {
    if (sampleBy != null) {
      throw QueryError.$(sampleBy.position,""String_Node_Str"");
    }
  }
  if (outerVirtualColumns.size() > 0) {
    ObjList<VirtualColumn> outer=new ObjList<>(outerVirtualColumns.size());
    for (int i=0, n=outerVirtualColumns.size(); i < n; i++) {
      QueryColumn qc=outerVirtualColumns.get(i);
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
      vc.setName(qc.getAlias());
      outer.add(vc);
    }
    rs=new VirtualColumnRecordSource(rs,outer);
  }
  if (selectedColumns.size() > 0) {
    rs=new SelectedColumnsRecordSource(rs,selectedColumns,selectedColumnAliases);
  }
  return rs;
}","@SuppressFBWarnings(""String_Node_Str"") private RecordSource selectColumns0(final RecordSource recordSource,QueryModel model) throws ParserException {
  final ObjList<QueryColumn> columns=model.getColumns();
  final CharSequenceIntHashMap columnNameHistogram=model.getColumnNameHistogram();
  final RecordMetadata meta=recordSource.getMetadata();
  this.outerVirtualColumns.clear();
  this.aggregators.clear();
  this.selectedColumns.clear();
  this.selectedColumnAliases.clear();
  this.groupKeyColumns.clear();
  this.aggregateColumnSequence=0;
  ObjList<VirtualColumn> virtualColumns=null;
  for (int i=0, k=columns.size(); i < k; i++) {
    final QueryColumn qc=columns.getQuick(i);
    final ExprNode node=qc.getAst();
    if (node.type == ExprNode.NodeType.LITERAL) {
      if (meta.getColumnIndexQuiet(node.token) == -1) {
        throw QueryError.invalidColumn(node.position,node.token);
      }
      if (columnNameHistogram.get(node.token) > 0) {
        throw QueryError.$(node.position,""String_Node_Str"");
      }
      selectedColumns.add(node.token);
      addAlias(node.position,qc.getAlias() == null ? node.token : qc.getAlias());
      groupKeyColumns.add(node.token);
      continue;
    }
    if (qc.getAlias() == null) {
      qc.of(createAlias(aggregateColumnSequence++),node);
    }
    selectedColumns.add(qc.getAlias());
    addAlias(node.position,qc.getAlias());
    if (node.type == ExprNode.NodeType.FUNCTION && FunctionFactories.isAggregate(node.token)) {
      aggregators.add(qc);
      continue;
    }
    if (node.type == ExprNode.NodeType.OPERATION || node.type == ExprNode.NodeType.FUNCTION) {
      int beforeSplit=aggregators.size();
      splitAggregates(node,aggregators);
      if (beforeSplit < aggregators.size()) {
        outerVirtualColumns.add(qc);
        continue;
      }
    }
    if (virtualColumns == null) {
      virtualColumns=new ObjList<>();
    }
    VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),recordSource.getMetadata());
    vc.setName(qc.getAlias());
    virtualColumns.add(vc);
    groupKeyColumns.add(qc.getAlias());
  }
  RecordSource rs=recordSource;
  if (virtualColumns != null) {
    rs=new VirtualColumnRecordSource(rs,virtualColumns);
  }
  ExprNode sampleBy=model.getSampleBy();
  int asz=aggregators.size();
  if (asz > 0) {
    ObjList<AggregatorFunction> af=new ObjList<>(asz);
    for (int i=0; i < asz; i++) {
      QueryColumn qc=aggregators.get(i);
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
      if (vc instanceof AggregatorFunction) {
        vc.setName(qc.getAlias());
        af.add((AggregatorFunction)vc);
      }
 else {
        throw QueryError.$(qc.getAst().position,""String_Node_Str"");
      }
    }
    if (sampleBy == null) {
      rs=new AggregatedRecordSource(rs,groupKeyColumns,af);
    }
 else {
      TimestampSampler sampler=SamplerFactory.from(sampleBy.token);
      if (sampler == null) {
        throw QueryError.$(sampleBy.position,""String_Node_Str"");
      }
      rs=new ResampledRecordSource(rs,getTimestampIndex(model,model.getTimestamp(),rs.getMetadata()),groupKeyColumns,af,sampler);
    }
  }
 else {
    if (sampleBy != null) {
      throw QueryError.$(sampleBy.position,""String_Node_Str"");
    }
  }
  if (outerVirtualColumns.size() > 0) {
    ObjList<VirtualColumn> outer=new ObjList<>(outerVirtualColumns.size());
    for (int i=0, n=outerVirtualColumns.size(); i < n; i++) {
      QueryColumn qc=outerVirtualColumns.get(i);
      VirtualColumn vc=virtualColumnBuilder.createVirtualColumn(model,qc.getAst(),rs.getMetadata());
      vc.setName(qc.getAlias());
      outer.add(vc);
    }
    rs=new VirtualColumnRecordSource(rs,outer);
  }
  if (selectedColumns.size() > 0) {
    rs=new SelectedColumnsRecordSource(rs,selectedColumns,selectedColumnAliases);
  }
  return rs;
}",0.9918043449980488
31382,"private RecordSource createAsOfJoin(ExprNode masterTimestampNode,QueryModel model,RecordSource master,RecordSource slave) throws ParserException {
  JoinContext jc=model.getContext();
  ExprNode slaveTimestampNode=model.getTimestamp();
  RecordMetadata masterMetadata=master.getMetadata();
  RecordMetadata slaveMetadata=slave.getMetadata();
  int slaveTimestampIndex;
  int masterTimestampIndex;
  if (slaveTimestampNode != null) {
    slaveTimestampIndex=slaveMetadata.getColumnIndexQuiet(slaveTimestampNode.token);
    if (slaveTimestampIndex == -1) {
      throw QueryError.$(slaveTimestampNode.position,""String_Node_Str"");
    }
  }
 else   if (slaveMetadata.getTimestampIndex() == -1) {
    throw QueryError.$(0,""String_Node_Str"");
  }
 else {
    slaveTimestampIndex=slaveMetadata.getTimestampIndex();
  }
  if (masterTimestampNode != null) {
    masterTimestampIndex=masterMetadata.getColumnIndexQuiet(masterTimestampNode.token);
    if (masterTimestampIndex == -1) {
      throw QueryError.$(masterTimestampNode.position,""String_Node_Str"");
    }
  }
 else   if (masterMetadata.getTimestampIndex() == -1) {
    throw QueryError.$(0,""String_Node_Str"");
  }
 else {
    masterTimestampIndex=masterMetadata.getTimestampIndex();
  }
  if (jc == null) {
    return new AsOfJoinRecordSource(master,masterTimestampIndex,slave,slaveTimestampIndex);
  }
 else {
    int sz=jc.aNames.size();
    CharSequenceHashSet slaveKeys=new CharSequenceHashSet();
    CharSequenceHashSet masterKeys=new CharSequenceHashSet();
    for (int i=0; i < sz; i++) {
      slaveKeys.add(jc.aNames.getQuick(i));
      masterKeys.add(jc.bNames.getQuick(i));
    }
    return new AsOfPartitionedJoinRecordSource(master,masterTimestampIndex,slave,slaveTimestampIndex,masterKeys,slaveKeys,4 * 1024 * 1024);
  }
}","private RecordSource createAsOfJoin(ExprNode masterTimestampNode,QueryModel model,RecordSource master,RecordSource slave) throws ParserException {
  JoinContext jc=model.getContext();
  ExprNode slaveTimestampNode=model.getTimestamp();
  RecordMetadata masterMetadata=master.getMetadata();
  RecordMetadata slaveMetadata=slave.getMetadata();
  int slaveTimestampIndex=getTimestampIndex(model,slaveTimestampNode,slaveMetadata);
  int masterTimestampIndex=getTimestampIndex(model,masterTimestampNode,masterMetadata);
  if (jc == null) {
    return new AsOfJoinRecordSource(master,masterTimestampIndex,slave,slaveTimestampIndex);
  }
 else {
    int sz=jc.aNames.size();
    CharSequenceHashSet slaveKeys=new CharSequenceHashSet();
    CharSequenceHashSet masterKeys=new CharSequenceHashSet();
    for (int i=0; i < sz; i++) {
      slaveKeys.add(jc.aNames.getQuick(i));
      masterKeys.add(jc.bNames.getQuick(i));
    }
    return new AsOfPartitionedJoinRecordSource(master,masterTimestampIndex,slave,slaveTimestampIndex,masterKeys,slaveKeys,4 * 1024 * 1024);
  }
}",0.6818660119256401
31383,"private void parseSelectColumns(QueryModel model) throws ParserException {
  CharSequence tok;
  while (true) {
    ExprNode expr=expr();
    tok=tok();
    if (Chars.equals(tok,""String_Node_Str"")) {
      model.addColumn(queryColumnPool.next().of(null,expr));
      break;
    }
    if (Chars.equals(tok,""String_Node_Str"")) {
      model.addColumn(queryColumnPool.next().of(null,expr));
      continue;
    }
    model.addColumn(queryColumnPool.next().of(tok.toString(),expr));
    tok=tok();
    if (Chars.equals(tok,""String_Node_Str"")) {
      break;
    }
    if (!Chars.equals(tok,',')) {
      throw err(""String_Node_Str"");
    }
  }
}","private void parseSelectColumns(QueryModel model) throws ParserException {
  CharSequence tok;
  while (true) {
    ExprNode expr=expr();
    tok=tok();
    if (Chars.equals(tok,""String_Node_Str"")) {
      model.addColumn(queryColumnPool.next().of(null,expr));
      break;
    }
    if (Chars.equals(tok,',')) {
      model.addColumn(queryColumnPool.next().of(null,expr));
      continue;
    }
    model.addColumn(queryColumnPool.next().of(tok.toString(),expr));
    tok=tok();
    if (Chars.equals(tok,""String_Node_Str"")) {
      break;
    }
    if (!Chars.equals(tok,',')) {
      throw err(""String_Node_Str"");
    }
  }
}",0.5757097791798107
31384,"private QueryModel parseJoin(CharSequence tok,QueryModel.JoinType type) throws ParserException {
  QueryModel joinModel=queryModelPool.next();
  joinModel.setJoinType(type);
  if (!Chars.equals(tok,""String_Node_Str"")) {
    expectTok(tok(),""String_Node_Str"");
  }
  tok=tok();
  if (Chars.equals(tok,""String_Node_Str"")) {
    joinModel.setNestedModel(parseQuery(true));
    expectTok(tok(),""String_Node_Str"");
  }
 else {
    lexer.unparse();
    joinModel.setJournalName(expr());
  }
  tok=lexer.optionTok();
  if (tok != null && !aliasStopSet.contains(tok)) {
    lexer.unparse();
    joinModel.setAlias(expr());
  }
 else {
    lexer.unparse();
  }
  tok=lexer.optionTok();
  if (type == QueryModel.JoinType.CROSS && tok != null && Chars.equals(tok,""String_Node_Str"")) {
    throw QueryError.$(lexer.position(),""String_Node_Str"");
  }
switch (type) {
case ASOF:
    if (tok == null || !Chars.equals(""String_Node_Str"",tok)) {
      lexer.unparse();
      break;
    }
case INNER:
case OUTER:
  expectTok(tok,""String_Node_Str"");
ExprNode expr=expr();
if (expr == null) {
throw QueryError.$(lexer.position(),""String_Node_Str"");
}
joinModel.setJoinCriteria(expr);
break;
default :
lexer.unparse();
}
return joinModel;
}","private QueryModel parseJoin(CharSequence tok,QueryModel.JoinType type) throws ParserException {
  QueryModel joinModel=queryModelPool.next();
  joinModel.setJoinType(type);
  if (!Chars.equals(tok,""String_Node_Str"")) {
    expectTok(tok(),""String_Node_Str"");
  }
  tok=tok();
  if (Chars.equals(tok,'(')) {
    joinModel.setNestedModel(parseQuery(true));
    expectTok(tok(),""String_Node_Str"");
  }
 else {
    lexer.unparse();
    joinModel.setJournalName(expr());
  }
  tok=lexer.optionTok();
  if (tok != null && !aliasStopSet.contains(tok)) {
    lexer.unparse();
    joinModel.setAlias(expr());
  }
 else {
    lexer.unparse();
  }
  tok=lexer.optionTok();
  if (type == QueryModel.JoinType.CROSS && tok != null && Chars.equals(tok,""String_Node_Str"")) {
    throw QueryError.$(lexer.position(),""String_Node_Str"");
  }
switch (type) {
case ASOF:
    if (tok == null || !Chars.equals(""String_Node_Str"",tok)) {
      lexer.unparse();
      break;
    }
case INNER:
case OUTER:
  expectTok(tok,""String_Node_Str"");
ExprNode expr=expr();
if (expr == null) {
throw QueryError.$(lexer.position(),""String_Node_Str"");
}
joinModel.setJoinCriteria(expr);
break;
default :
lexer.unparse();
}
return joinModel;
}",0.9917423616845582
31385,"private QueryModel parseQuery(boolean subQuery) throws ParserException {
  CharSequence tok;
  QueryModel model=queryModelPool.next();
  tok=tok();
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    parseSelectColumns(model);
    tok=tok();
  }
  if (Chars.equals(tok,""String_Node_Str"")) {
    model.setNestedModel(parseQuery(true));
    expectTok(tok(),""String_Node_Str"");
    tok=lexer.optionTok();
    if (tok != null && !aliasStopSet.contains(tok)) {
      lexer.unparse();
      model.setAlias(literal());
      tok=lexer.optionTok();
    }
    tok=parseTimestamp(tok,model);
  }
 else {
    lexer.unparse();
    model.setJournalName(literal());
    tok=lexer.optionTok();
    if (tok != null && !aliasStopSet.contains(tok)) {
      lexer.unparse();
      model.setAlias(literal());
      tok=lexer.optionTok();
    }
    tok=parseTimestamp(tok,model);
    if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
      parseLatestBy(model);
      tok=lexer.optionTok();
    }
  }
  QueryModel.JoinType type;
  while (tok != null && (type=joinStartSet.get(tok)) != null) {
    model.addJoinModel(parseJoin(tok,type));
    tok=lexer.optionTok();
  }
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    model.setWhereClause(expr());
    tok=lexer.optionTok();
  }
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    expectTok(tok(),""String_Node_Str"");
    model.setSampleBy(expectExpr());
    tok=lexer.optionTok();
  }
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    expectTok(tok(),""String_Node_Str"");
    do {
      tok=tok();
      if (Chars.equals(tok,""String_Node_Str"")) {
        throw err(""String_Node_Str"");
      }
      lexer.unparse();
      model.addOrderBy(expr());
      tok=lexer.optionTok();
    }
 while (tok != null && Chars.equals(tok,""String_Node_Str""));
  }
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    ExprNode lo=expr();
    ExprNode hi=null;
    tok=lexer.optionTok();
    if (tok != null && Chars.equals(""String_Node_Str"",tok)) {
      hi=expr();
      tok=lexer.optionTok();
    }
    model.setLimit(lo,hi);
  }
  if (subQuery) {
    lexer.unparse();
  }
 else   if (tok != null) {
    throw QueryError.position(lexer.position()).$(""String_Node_Str"").$(tok).$();
  }
  return model;
}","private QueryModel parseQuery(boolean subQuery) throws ParserException {
  CharSequence tok;
  QueryModel model=queryModelPool.next();
  tok=tok();
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    parseSelectColumns(model);
    tok=tok();
  }
  if (Chars.equals(tok,'(')) {
    model.setNestedModel(parseQuery(true));
    expectTok(tok(),""String_Node_Str"");
    tok=lexer.optionTok();
    if (tok != null && !aliasStopSet.contains(tok)) {
      lexer.unparse();
      model.setAlias(literal());
      tok=lexer.optionTok();
    }
    tok=parseTimestamp(tok,model);
  }
 else {
    lexer.unparse();
    model.setJournalName(literal());
    tok=lexer.optionTok();
    if (tok != null && !aliasStopSet.contains(tok)) {
      lexer.unparse();
      model.setAlias(literal());
      tok=lexer.optionTok();
    }
    tok=parseTimestamp(tok,model);
    if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
      parseLatestBy(model);
      tok=lexer.optionTok();
    }
  }
  QueryModel.JoinType type;
  while (tok != null && (type=joinStartSet.get(tok)) != null) {
    model.addJoinModel(parseJoin(tok,type));
    tok=lexer.optionTok();
  }
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    model.setWhereClause(expr());
    tok=lexer.optionTok();
  }
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    expectTok(tok(),""String_Node_Str"");
    model.setSampleBy(expectExpr());
    tok=lexer.optionTok();
  }
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    expectTok(tok(),""String_Node_Str"");
    do {
      tok=tok();
      if (Chars.equals(tok,')')) {
        throw err(""String_Node_Str"");
      }
      lexer.unparse();
      model.addOrderBy(expr());
      tok=lexer.optionTok();
    }
 while (tok != null && Chars.equals(tok,','));
  }
  if (tok != null && Chars.equals(tok,""String_Node_Str"")) {
    ExprNode lo=expr();
    ExprNode hi=null;
    tok=lexer.optionTok();
    if (tok != null && Chars.equals(tok,',')) {
      hi=expr();
      tok=lexer.optionTok();
    }
    model.setLimit(lo,hi);
  }
  if (subQuery) {
    lexer.unparse();
  }
 else   if (tok != null) {
    throw QueryError.position(lexer.position()).$(""String_Node_Str"").$(tok).$();
  }
  return model;
}",0.3554670208056662
31386,"public RecordCursor get(MultiMap.KeyWriter key){
  MapValues values=map.getValues(key);
  records.init(values == null ? -1 : values.getLong(0));
  return records;
}","public RecordCursor get(MultiMap.KeyWriter key){
  MapValues values=map.getValues(key);
  records.of(values == null ? -1 : values.getLong(0));
  return records;
}",0.98159509202454
31387,"@Override public Record next(){
  accessor.init(readOffset + 8);
  readOffset=Unsafe.getUnsafe().getLong(mem.addressOf(readOffset));
  return accessor;
}","@Override public Record next(){
  accessor.of(readOffset + 8);
  readOffset=Unsafe.getUnsafe().getLong(mem.addressOf(readOffset));
  return accessor;
}",0.9802631578947368
31388,"public Record recordAt(long offset){
  accessor.init(offset + 8);
  return accessor;
}","public Record recordAt(long offset){
  accessor.of(offset + 8);
  return accessor;
}",0.9647058823529412
31389,"private void poolFieldArtifacts(int compareMethodIndex,int thisClassIndex,int recordClassIndex,RecordMetadata m,IntList keyColumnIndices){
  typeMap.clear();
  fieldIndices.clear();
  fieldNameIndices.clear();
  fieldTypeIndices.clear();
  fieldRecordAccessorIndices.clear();
  methodMap.clear();
  for (int i=0, n=keyColumnIndices.size(); i < n; i++) {
    String fieldType;
    String getterName;
    String comparatorClass;
    String comparatorDesc=null;
switch (m.getColumn(keyColumnIndices.getQuick(i)).getType()) {
case BOOLEAN:
      fieldType=""String_Node_Str"";
    getterName=""String_Node_Str"";
  comparatorClass=""String_Node_Str"";
break;
case BYTE:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case DOUBLE:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case FLOAT:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case INT:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case LONG:
case DATE:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case SHORT:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case STRING:
getterName=""String_Node_Str"";
fieldType=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case SYMBOL:
getterName=""String_Node_Str"";
fieldType=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
comparatorDesc=""String_Node_Str"";
break;
default :
throw new JournalUnsupportedTypeException(m.getColumn(keyColumnIndices.getQuick(i)).getType());
}
int nameIndex;
int typeIndex=typeMap.get(fieldType);
if (typeIndex == -1) {
typeMap.put(fieldType,typeIndex=asm.poolUtf8(fieldType));
}
fieldTypeIndices.add(typeIndex);
fieldNameIndices.add(nameIndex=asm.poolUtf8().put('f').put(i).$());
fieldIndices.add(asm.poolField(thisClassIndex,asm.poolNameAndType(nameIndex,typeIndex)));
int methodIndex=methodMap.get(getterName);
if (methodIndex == -1) {
methodMap.put(getterName,methodIndex=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(getterName),asm.poolUtf8(""String_Node_Str"" + fieldType))));
}
fieldRecordAccessorIndices.add(methodIndex);
int comparatorIndex=comparatorMap.get(comparatorClass);
if (comparatorIndex == -1) {
int cc=asm.poolClass(asm.poolUtf8(comparatorClass));
int nt=asm.poolNameAndType(compareMethodIndex,comparatorDesc == null ? asm.poolUtf8().put('(').put(fieldType).put(fieldType).put(""String_Node_Str"").$() : asm.poolUtf8(comparatorDesc));
comparatorIndex=asm.poolMethod(cc,nt);
}
comparatorAccessorIndices.add(comparatorIndex);
}
}","private void poolFieldArtifacts(int compareMethodIndex,int thisClassIndex,int recordClassIndex,RecordMetadata m,IntList keyColumnIndices){
  typeMap.clear();
  fieldIndices.clear();
  fieldNameIndices.clear();
  fieldTypeIndices.clear();
  fieldRecordAccessorIndices.clear();
  comparatorAccessorIndices.clear();
  methodMap.clear();
  for (int i=0, n=keyColumnIndices.size(); i < n; i++) {
    String fieldType;
    String getterName;
    String comparatorClass;
    String comparatorDesc=null;
switch (m.getColumn(keyColumnIndices.getQuick(i)).getType()) {
case BOOLEAN:
      fieldType=""String_Node_Str"";
    getterName=""String_Node_Str"";
  comparatorClass=""String_Node_Str"";
break;
case BYTE:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case DOUBLE:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case FLOAT:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case INT:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case LONG:
case DATE:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case SHORT:
fieldType=""String_Node_Str"";
getterName=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case STRING:
getterName=""String_Node_Str"";
fieldType=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
break;
case SYMBOL:
getterName=""String_Node_Str"";
fieldType=""String_Node_Str"";
comparatorClass=""String_Node_Str"";
comparatorDesc=""String_Node_Str"";
break;
default :
throw new JournalUnsupportedTypeException(m.getColumn(keyColumnIndices.getQuick(i)).getType());
}
int nameIndex;
int typeIndex=typeMap.get(fieldType);
if (typeIndex == -1) {
typeMap.put(fieldType,typeIndex=asm.poolUtf8(fieldType));
}
fieldTypeIndices.add(typeIndex);
fieldNameIndices.add(nameIndex=asm.poolUtf8().put('f').put(i).$());
fieldIndices.add(asm.poolField(thisClassIndex,asm.poolNameAndType(nameIndex,typeIndex)));
int methodIndex=methodMap.get(getterName);
if (methodIndex == -1) {
methodMap.put(getterName,methodIndex=asm.poolInterfaceMethod(recordClassIndex,asm.poolNameAndType(asm.poolUtf8(getterName),asm.poolUtf8(""String_Node_Str"" + fieldType))));
}
fieldRecordAccessorIndices.add(methodIndex);
int comparatorIndex=comparatorMap.get(comparatorClass);
if (comparatorIndex == -1) {
int cc=asm.poolClass(asm.poolUtf8(comparatorClass));
int nt=asm.poolNameAndType(compareMethodIndex,comparatorDesc == null ? asm.poolUtf8().put('(').put(fieldType).put(fieldType).put(""String_Node_Str"").$() : asm.poolUtf8(comparatorDesc));
comparatorIndex=asm.poolMethod(cc,nt);
}
comparatorAccessorIndices.add(comparatorIndex);
}
}",0.9932763946938034
31390,"@Override public Record next(){
  long t=current;
  long p=rightOf(t);
  if (p != 0) {
    long l;
    while ((l=leftOf(p)) != 0) {
      p=l;
    }
  }
 else {
    p=parentOf(t);
    long ch=t;
    while (p != 0 && ch == rightOf(p)) {
      ch=p;
      p=parentOf(p);
    }
  }
  current=p;
  return records.recordAt(refOf(t));
}","@Override public Record next(){
  return records.next();
}",0.2886597938144329
31391,"private void put(Record record){
  if (root == 0) {
    root=allocateBlock();
    setRef(root,records.append(record,-1));
    setParent(root,0);
    setLeft(root,0);
    setRight(root,0);
    return;
  }
  comparator.setLeft(record);
  long p=root;
  long parent;
  int cmp;
  do {
    parent=p;
    cmp=comparator.compare(records.recordAt(refOf(p)));
    if (cmp < 0) {
      p=leftOf(p);
    }
 else     if (cmp > 0) {
      p=rightOf(p);
    }
 else {
      setRef(p,records.append(record,refOf(p)));
      return;
    }
  }
 while (p > 0);
  p=allocateBlock();
  setParent(p,parent);
  setRef(p,records.append(record,-1));
  if (cmp < 0) {
    setLeft(parent,p);
  }
 else {
    setRight(parent,p);
  }
  fix(p);
}","private void put(Record record){
  if (root == 0) {
    root=allocateBlock();
    long r=records.append(record,-1);
    setTop(root,r);
    setRef(root,r);
    setParent(root,0);
    setLeft(root,0);
    setRight(root,0);
    return;
  }
  comparator.setLeft(record);
  long p=root;
  long parent;
  int cmp;
  do {
    parent=p;
    cmp=comparator.compare(records.recordAt(refOf(p)));
    if (cmp < 0) {
      p=leftOf(p);
    }
 else     if (cmp > 0) {
      p=rightOf(p);
    }
 else {
      setRef(p,records.append(record,refOf(p)));
      return;
    }
  }
 while (p > 0);
  p=allocateBlock();
  setParent(p,parent);
  long r=records.append(record,-1);
  setTop(p,r);
  setRef(p,r);
  if (cmp < 0) {
    setLeft(parent,p);
  }
 else {
    setRight(parent,p);
  }
  fix(p);
}",0.9311957247828992
31392,"@Override public boolean hasNext(){
  return current != 0;
}","@Override public boolean hasNext(){
  if (records.hasNext()) {
    return true;
  }
  current=successor(current);
  if (current == 0) {
    return false;
  }
  records.of(topOf(current));
  return true;
}",0.3181818181818182
31393,"@Override public void reset(){
  records.clear();
}","@Override public void reset(){
  recordSource.reset();
  clear();
}",0.847457627118644
31394,"private void setup(){
  long p=root;
  if (p != 0) {
    while (leftOf(p) != 0) {
      p=leftOf(p);
    }
  }
  current=p;
}","private void setup(){
  long p=root;
  if (p != 0) {
    while (leftOf(p) != 0) {
      p=leftOf(p);
    }
  }
  records.of(topOf(current=p));
}",0.929368029739777
31395,"public void clear(){
  columns.clear();
  joinModels.clear();
  joinModels.add(this);
  sampleBy=null;
  orderBy.clear();
  dependencies.clear();
  parsedWhere.clear();
  whereClause=null;
  nestedModel=null;
  journalName=null;
  alias=null;
  latestBy=null;
  recordSource=null;
  metadata=null;
  joinCriteria=null;
  joinType=JoinType.INNER;
  orderedJoinModels1.clear();
  orderedJoinModels2.clear();
  parsedWhereConsts.clear();
  aliasIndexes.clear();
  postJoinWhereClause=null;
  context=null;
  orderedJoinModels=orderedJoinModels2;
  limitHi=null;
  limitLo=null;
  limitHiVc=null;
  limitLoVc=null;
  columnNameFrequencyMap.clear();
  parameterMap.clear();
  timestamp=null;
}","public void clear(){
  columns.clear();
  joinModels.clear();
  joinModels.add(this);
  sampleBy=null;
  orderBy.clear();
  dependencies.clear();
  parsedWhere.clear();
  whereClause=null;
  nestedModel=null;
  journalName=null;
  alias=null;
  latestBy=null;
  recordSource=null;
  metadata=null;
  joinCriteria=null;
  joinType=JoinType.INNER;
  orderedJoinModels1.clear();
  orderedJoinModels2.clear();
  parsedWhereConsts.clear();
  aliasIndexes.clear();
  postJoinWhereClause=null;
  context=null;
  orderedJoinModels=orderedJoinModels2;
  limitHi=null;
  limitLo=null;
  limitHiVc=null;
  limitLoVc=null;
  columnNameFrequencyMap.clear();
  parameterMap.clear();
  timestamp=null;
  orderColumnIndices.clear();
}",0.9786628733997156
31396,"private RecordSource order(RecordSource rs,QueryModel model) throws ParserException {
  ObjList<ExprNode> orderBy=model.getOrderBy();
  int n=orderBy.size();
  if (n > 0) {
    RecordMetadata m=rs.getMetadata();
    for (int i=0; i < n; i++) {
      ExprNode tok=orderBy.getQuick(i);
      int index=m.getColumnIndexQuiet(tok.token);
      if (index == -1) {
        throw QueryError.invalidColumn(tok.position,tok.token);
      }
      orderColumnIndices.add(index);
    }
    return new RBTreeSortedRecordSource(rs,cc.compile(RBTreeSortedRecordSource.class,m,orderColumnIndices));
  }
 else {
    return rs;
  }
}","private RecordSource order(RecordSource rs,QueryModel model) throws ParserException {
  ObjList<ExprNode> orderBy=model.getOrderBy();
  IntList indices=model.getOrderColumnIndices();
  int n=orderBy.size();
  if (n > 0) {
    RecordMetadata m=rs.getMetadata();
    for (int i=0; i < n; i++) {
      ExprNode tok=orderBy.getQuick(i);
      int index=m.getColumnIndexQuiet(tok.token);
      if (index == -1) {
        throw QueryError.invalidColumn(tok.position,tok.token);
      }
      indices.add(index);
    }
    return new RBTreeSortedRecordSource(rs,cc.compile(RBTreeSortedRecordSource.class,m,indices));
  }
 else {
    return rs;
  }
}",0.9403341288782816
31397,"private void clearState(){
  csPool.clear();
  exprNodePool.clear();
  contextPool.clear();
  intListPool.clear();
  joinClausesSwap1.clear();
  joinClausesSwap2.clear();
  queryFilterAnalyser.reset();
  constNameToIndex.clear();
  constNameToNode.clear();
  constNameToToken.clear();
  orderColumnIndices.clear();
}","private void clearState(){
  csPool.clear();
  exprNodePool.clear();
  contextPool.clear();
  intListPool.clear();
  joinClausesSwap1.clear();
  joinClausesSwap2.clear();
  queryFilterAnalyser.reset();
  constNameToIndex.clear();
  constNameToNode.clear();
  constNameToToken.clear();
}",0.9501661129568106
31398,"private <T>void writeAndReadRecords(JournalWriter<T> journal,int count,int pageSize,RecordGenerator<T> generator) throws IOException, JournalException, ParserException {
  for (int i=0; i < count; i++) {
    journal.append(generator.generate(i));
  }
  journal.commit();
  try (MemoryPages buffer=new MemoryPages(pageSize)){
    MemoryRecordAccessor a=new MemoryRecordAccessor(journal.getMetadata(),buffer);
    LongList offsets=new LongList();
    for (    Record rec : compiler.compile(factory,journal.getLocation().getName())) {
      offsets.add(a.append(rec));
    }
    for (int i=0; i < count; i++) {
      a.init(offsets.getQuick(i));
      generator.assertRecord(a,i);
    }
  }
 }","private <T>void writeAndReadRecords(JournalWriter<T> journal,int count,int pageSize,RecordGenerator<T> generator) throws IOException, JournalException, ParserException {
  for (int i=0; i < count; i++) {
    journal.append(generator.generate(i));
  }
  journal.commit();
  try (MemoryPages buffer=new MemoryPages(pageSize)){
    MemoryRecordAccessor a=new MemoryRecordAccessor(journal.getMetadata(),buffer);
    LongList offsets=new LongList();
    for (    Record rec : compiler.compile(factory,journal.getLocation().getName())) {
      offsets.add(a.append(rec));
    }
    for (int i=0; i < count; i++) {
      a.of(offsets.getQuick(i));
      generator.assertRecord(a,i);
    }
  }
 }",0.995645863570392
31399,"private void buildHashTable(){
  for (  Record r : slaveCursor) {
    MultiMap.KeyWriter key=recordMap.claimKey();
    for (int i=0, k=slaveColumns.size(); i < k; i++) {
      setKey(key,r,slaveColIndex.getQuick(i),slaveColumns.getQuick(i).getType());
    }
    if (byRowId) {
      recordMap.add(key,rowIdRecord.of(r.getRowId()));
    }
 else {
      recordMap.add(key,r);
    }
  }
}","private void buildHashTable(){
  for (  Record r : slaveCursor) {
    MultiMap.KeyWriter key=recordMap.claimKey();
    for (int i=0, k=slaveColumns.size(); i < k; i++) {
      setKey(key,r,slaveColIndex.getQuick(i),slaveColumns.getQuick(i).getType());
    }
    if (byRowId) {
      recordMap.add(key,fakeRecord.of(r.getRowId()));
    }
 else {
      recordMap.add(key,r);
    }
  }
}",0.7932379713914174
31400,"private MultiRecordMap createRecordMap(RecordSource masterSource,RecordSource slaveSource){
  RecordMetadata mm=masterSource.getMetadata();
  for (int i=0, k=masterColIndex.size(); i < k; i++) {
    this.masterColumns.add(mm.getColumnQuick(masterColIndex.getQuick(i)));
  }
  RecordMetadata sm=slaveSource.getMetadata();
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  for (int i=0, k=slaveColIndex.size(); i < k; i++) {
    int index=slaveColIndex.getQuick(i);
    this.slaveColumns.add(sm.getColumnQuick(index));
    keyCols.add(sm.getColumnName(index));
  }
  return byRowId ? new MultiRecordMap(sm,keyCols,rowIdRecord.getMetadata()) : new MultiRecordMap(sm,keyCols,slaveSource.getMetadata());
}","private MultiRecordMap createRecordMap(RecordSource masterSource,RecordSource slaveSource){
  RecordMetadata mm=masterSource.getMetadata();
  for (int i=0, k=masterColIndex.size(); i < k; i++) {
    this.masterColumns.add(mm.getColumnQuick(masterColIndex.getQuick(i)));
  }
  RecordMetadata sm=slaveSource.getMetadata();
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  for (int i=0, k=slaveColIndex.size(); i < k; i++) {
    int index=slaveColIndex.getQuick(i);
    this.slaveColumns.add(sm.getColumnQuick(index));
    keyCols.add(sm.getColumnName(index));
  }
  return byRowId ? new MultiRecordMap(sm,keyCols,fakeRecord.getMetadata()) : new MultiRecordMap(sm,keyCols,slaveSource.getMetadata());
}",0.9564596716630978
31401,"public RBTreeSortedRecordSource(RecordSource recordSource,RecordComparator comparator){
  this.recordSource=recordSource;
  this.comparator=comparator;
  this.mem=new MemoryPages(1024 * 1024);
  this.byRowId=recordSource.supportsRowIdAccess();
  this.records=new RecordDequeue(byRowId ? rowIdRecord.getMetadata() : recordSource.getMetadata(),4 * 1024 * 1024);
}","public RBTreeSortedRecordSource(RecordSource recordSource,RecordComparator comparator){
  this.recordSource=recordSource;
  this.comparator=comparator;
  this.mem=new MemoryPages(1024 * 1024);
  this.byRowId=recordSource.supportsRowIdAccess();
  this.records=new RecordDequeue(byRowId ? fakeRecord.getMetadata() : recordSource.getMetadata(),4 * 1024 * 1024);
}",0.9875173370319
31402,"private void put(long rowId){
  if (root == 0) {
    putParent(rowIdRecord.of(rowId));
    return;
  }
  comparator.setLeft(sourceCursor.getByRowId(rowId));
  long p=root;
  long parent;
  int cmp;
  do {
    parent=p;
    long r=refOf(p);
    cmp=comparator.compare(sourceCursor.getByRowId(records.recordAt(r).getLong(0)));
    if (cmp < 0) {
      p=leftOf(p);
    }
 else     if (cmp > 0) {
      p=rightOf(p);
    }
 else {
      setRef(p,records.append(rowIdRecord.of(rowId),r));
      return;
    }
  }
 while (p > 0);
  p=allocateBlock();
  setParent(p,parent);
  long r=records.append(rowIdRecord.of(rowId),(long)-1);
  setTop(p,r);
  setRef(p,r);
  if (cmp < 0) {
    setLeft(parent,p);
  }
 else {
    setRight(parent,p);
  }
  fix(p);
}","private void put(long rowId){
  if (root == 0) {
    putParent(fakeRecord.of(rowId));
    return;
  }
  comparator.setLeft(sourceCursor.getByRowId(rowId));
  long p=root;
  long parent;
  int cmp;
  do {
    parent=p;
    long r=refOf(p);
    cmp=comparator.compare(sourceCursor.getByRowId(records.recordAt(r).getLong(0)));
    if (cmp < 0) {
      p=leftOf(p);
    }
 else     if (cmp > 0) {
      p=rightOf(p);
    }
 else {
      setRef(p,records.append(fakeRecord.of(rowId),r));
      return;
    }
  }
 while (p > 0);
  p=allocateBlock();
  setParent(p,parent);
  long r=records.append(fakeRecord.of(rowId),(long)-1);
  setTop(p,r);
  setRef(p,r);
  if (cmp < 0) {
    setLeft(parent,p);
  }
 else {
    setRight(parent,p);
  }
  fix(p);
}",0.8142186452045607
31403,"@Override public long getRowId(){
  return 0;
}","@Override public long getRowId(){
  return base.getRowId();
}",0.8518518518518519
31404,"public VirtualRecord(RecordMetadata metadata,int split,ObjList<VirtualColumn> virtualColumns){
  super(metadata);
  this.split=split;
  this.virtualColumns=virtualColumns;
}","VirtualRecord(RecordMetadata metadata,int split,ObjList<VirtualColumn> virtualColumns){
  super(metadata);
  this.split=split;
  this.virtualColumns=virtualColumns;
}",0.9793510324483776
31405,"void release(final JournalCachingFactory factory){
  if (running.get()) {
    factory.expireOpenFiles();
    pool.addFirst(factory);
  }
 else {
    factory.clearPool();
    factory.close();
  }
}","void release(final JournalCachingFactory factory){
  if (running.get()) {
    if (openCount.get() < capacity) {
      factory.expireOpenFiles();
      pool.addFirst(factory);
      return;
    }
  }
  openCount.decrementAndGet();
  factory.clearPool();
  factory.close();
}",0.6993603411513859
31406,"public JournalCachingFactory get() throws InterruptedException {
  if (running.get()) {
    JournalCachingFactory factory=pool.poll();
    if (factory == null) {
      int index=allLength.incrementAndGet() - 1;
      if (index < capacity) {
        factory=new JournalCachingFactory(configuration,this);
      }
    }
 else {
      factory.setInUse();
    }
    return factory;
  }
 else {
    throw new InterruptedException(""String_Node_Str"");
  }
}","public JournalCachingFactory get() throws InterruptedException {
  if (running.get()) {
    JournalCachingFactory factory=pool.poll();
    if (factory == null) {
      openCount.incrementAndGet();
      factory=new JournalCachingFactory(configuration,this);
    }
 else {
      factory.setInUse();
    }
    return factory;
  }
 else {
    throw new InterruptedException(""String_Node_Str"");
  }
}",0.9101654846335696
31407,"private void process(IOContext context,final ChannelStatus status){
  final Request r=context.request;
  final SimpleResponse sr=context.simpleResponse();
  ChannelStatus result;
  try {
    boolean log=r.isIncomplete();
    if (status == ChannelStatus.READ) {
      r.read();
    }
    if (r.getUrl() == null) {
      sr.send(400);
    }
 else {
      ContextHandler handler=urlMatcher.get(r.getUrl());
      if (handler != null) {
switch (status) {
case WRITE:
          context.resume();
        handler.resume(context);
      break;
case READ:
    if (r.isMultipart()) {
      if (handler instanceof MultipartListener) {
        r.parseMultipart(context,(MultipartListener)handler);
        handler.handle(context);
      }
 else {
        sr.send(400);
      }
    }
 else {
      if (handler instanceof MultipartListener) {
        sr.send(400);
      }
 else {
        handler.handle(context);
      }
    }
  break;
default :
LOG.error().$(""String_Node_Str"").$(status).$();
break;
}
}
 else {
sr.send(404);
}
if (log && !r.isIncomplete()) {
ACCESS.xinfo().$ip(Net.getPeerIP(context.channel.getFd())).$(""String_Node_Str"").$(""String_Node_Str"").$(""String_Node_Str"").$ts(System.currentTimeMillis()).$(""String_Node_Str"").$('""').$(r.getMethodLine()).$('""').$(' ').$(context.getResponseCode()).$(' ').$(context.channel.getTotalWrittenAndReset()).$();
}
}
context.clear();
result=ChannelStatus.READ;
}
 catch (HeadersTooLargeException ignored) {
silent(sr,431,null);
LOG.info().$(""String_Node_Str"").$();
result=ChannelStatus.READ;
}
catch (MalformedHeaderException|DisconnectedChannelException e) {
result=ChannelStatus.DISCONNECTED;
}
catch (EndOfChannelException e) {
result=ChannelStatus.EOF;
}
catch (SlowReadableChannelException e) {
LOG.debug().$(""String_Node_Str"").$();
result=ChannelStatus.READ;
}
catch (SlowWritableChannelException e) {
LOG.debug().$(""String_Node_Str"").$();
result=ChannelStatus.WRITE;
}
catch (IOException e) {
result=ChannelStatus.DISCONNECTED;
LOG.error().$(""String_Node_Str"").$(e).$();
}
catch (Throwable e) {
silent(sr,500,e.getMessage());
result=ChannelStatus.DISCONNECTED;
LOG.error().$(""String_Node_Str"").$(e).$();
}
ioDispatcher.registerChannel(context,result);
}","private void process(IOContext context,final ChannelStatus status){
  final Request r=context.request;
  final SimpleResponse sr=context.simpleResponse();
  ChannelStatus result;
  try {
    boolean log=r.isIncomplete();
    if (status == ChannelStatus.READ) {
      r.read();
    }
    if (r.getUrl() == null) {
      sr.send(400);
    }
 else {
      ContextHandler handler=urlMatcher.get(r.getUrl());
      if (handler != null) {
switch (status) {
case WRITE:
          context.resume();
        handler.resume(context);
      break;
case READ:
    if (r.isMultipart()) {
      if (handler instanceof MultipartListener) {
        r.parseMultipart(context,(MultipartListener)handler);
        handler.handle(context);
      }
 else {
        sr.send(400);
      }
    }
 else {
      if (handler instanceof MultipartListener) {
        sr.send(400);
      }
 else {
        handler.handle(context);
      }
    }
  break;
default :
LOG.error().$(""String_Node_Str"").$(status).$();
break;
}
}
 else {
sr.send(404);
}
if (log && !r.isIncomplete()) {
logAccess(context);
}
}
context.clear();
result=ChannelStatus.READ;
}
 catch (HeadersTooLargeException ignored) {
silent(sr,431,null);
LOG.info().$(""String_Node_Str"").$();
logAccess(context);
result=ChannelStatus.READ;
}
catch (MalformedHeaderException|DisconnectedChannelException e) {
result=ChannelStatus.DISCONNECTED;
}
catch (EndOfChannelException e) {
result=ChannelStatus.EOF;
}
catch (SlowReadableChannelException e) {
LOG.debug().$(""String_Node_Str"").$();
result=ChannelStatus.READ;
}
catch (SlowWritableChannelException e) {
LOG.debug().$(""String_Node_Str"").$();
result=ChannelStatus.WRITE;
}
catch (Throwable e) {
silent(sr,500,e.getMessage());
result=ChannelStatus.DISCONNECTED;
LOG.error().$(""String_Node_Str"").$(e).$();
logAccess(context);
}
ioDispatcher.registerChannel(context,result);
}",0.8866946432979511
31408,"@Override public void resume(IOContext context) throws IOException {
  JsonHandlerContext ctx=localContext.get(context);
  Iterator<Record> records=ctx.records;
  if (records == null) {
    return;
  }
  RecordMetadata metadata=ctx.metadata;
  final int columnCount=metadata.getColumnCount();
  if (ctx.current == null && records.hasNext()) {
    ctx.current=records.next();
    ctx.count++;
  }
  final ChunkedResponse r=context.chunkedResponse();
  try {
    while (ctx.current != null) {
      if (ctx.count > ctx.skip) {
        r.bookmark();
        if (ctx.count > ctx.stop && !ctx.includeCount) {
          break;
        }
        if (ctx.count <= ctx.stop) {
          if (ctx.count > ctx.skip + 1) {
            r.put(',');
          }
          r.put('{');
          for (int col=0; col < columnCount; col++) {
            RecordColumnMetadata m=metadata.getColumnQuick(col);
            if (col > 0) {
              r.put(',');
            }
            r.putQuoted(m.getName()).put(':');
            putValue(r,m.getType(),ctx.current,col);
          }
          r.put('}');
          r.sendChunk();
        }
      }
      if (records.hasNext()) {
        ctx.current=records.next();
        ctx.count++;
      }
 else {
        ctx.current=null;
      }
    }
    sendDone(r,ctx);
  }
 catch (  ResponseContentBufferTooSmallException ex) {
    if (!r.resetToBookmark()) {
      ctx.error().$(""String_Node_Str"").$(ctx.count - 1).$(""String_Node_Str"").$();
      throw ex;
    }
    ctx.debug().$(""String_Node_Str"").$(ctx.count - 1).$();
    r.sendChunk();
  }
}","@Override public void resume(IOContext context) throws IOException {
  JsonHandlerContext ctx=localContext.get(context);
  Iterator<Record> records;
  if (ctx == null || (records=ctx.cursor) == null) {
    return;
  }
  final RecordMetadata metadata=ctx.metadata;
  final int columnCount=metadata.getColumnCount();
  if (ctx.record == null && records.hasNext()) {
    ctx.record=records.next();
    ctx.count++;
  }
  final ChunkedResponse r=context.chunkedResponse();
  try {
    while (ctx.record != null) {
      if (ctx.count > ctx.skip) {
        r.bookmark();
        if (ctx.count > ctx.stop && !ctx.includeCount) {
          break;
        }
        if (ctx.count <= ctx.stop) {
          if (ctx.count > ctx.skip + 1) {
            r.put(',');
          }
          r.put('{');
          for (int col=0; col < columnCount; col++) {
            RecordColumnMetadata m=metadata.getColumnQuick(col);
            if (col > 0) {
              r.put(',');
            }
            r.putQuoted(m.getName()).put(':');
            putValue(r,m.getType(),ctx.record,col);
          }
          r.put('}');
          r.sendChunk();
        }
      }
      if (records.hasNext()) {
        ctx.record=records.next();
        ctx.count++;
      }
 else {
        ctx.record=null;
      }
    }
    sendDone(r,ctx);
  }
 catch (  ResponseContentBufferTooSmallException ex) {
    if (!r.resetToBookmark()) {
      ctx.error().$(""String_Node_Str"").$(ctx.count - 1).$(""String_Node_Str"").$();
      throw ex;
    }
    ctx.debug().$(""String_Node_Str"").$(ctx.count - 1).$();
    r.sendChunk();
  }
}",0.9563843236409608
31409,"@Override public void clear(){
  debug().$(""String_Node_Str"").$();
  metadata=null;
  records=null;
  current=null;
  if (factory != null) {
    debug().$(""String_Node_Str"").$();
    factory.close();
    factory=null;
  }
  if (recordSource != null) {
    queryCompilerLocal.get().reuse(query,recordSource);
    recordSource=null;
  }
  query=null;
}","@Override public void clear(){
  debug().$(""String_Node_Str"").$();
  metadata=null;
  cursor=null;
  record=null;
  debug().$(""String_Node_Str"").$();
  factory=Misc.free(factory);
  if (recordSource != null) {
    COMPILER.get().reuse(query,recordSource);
    recordSource=null;
  }
  query=null;
}",0.3858024691358024
31410,"@Override public void handle(IOContext context) throws IOException {
  JsonHandlerContext ctx=localContext.get(context);
  if (ctx == null) {
    localContext.set(context,ctx=new JsonHandlerContext());
  }
  ctx.fd=context.channel.getFd();
  ChunkedResponse r=context.chunkedResponse();
  CharSequence query=context.request.getUrlParam(""String_Node_Str"");
  if (query == null || query.length() == 0) {
    ctx.info().$(""String_Node_Str"").$();
    r.status(200,""String_Node_Str"");
    r.sendHeader();
    r.put('{').putQuoted(""String_Node_Str"").put(':').putQuoted(""String_Node_Str"").put('}');
    r.sendChunk();
    r.done();
    return;
  }
  long skip=0;
  long stop=Long.MAX_VALUE;
  CharSequence limit=context.request.getUrlParam(""String_Node_Str"");
  if (limit != null) {
    int sepPos=Chars.indexOf(limit,',');
    try {
      if (sepPos > 0) {
        skip=Numbers.parseLong(limit,0,sepPos);
        if (sepPos + 1 < limit.length()) {
          stop=Numbers.parseLong(limit,sepPos + 1,limit.length());
        }
      }
 else {
        stop=Numbers.parseLong(limit);
      }
    }
 catch (    NumericException ex) {
    }
  }
  if (stop < 0) {
    stop=0;
  }
  if (skip < 0) {
    skip=0;
  }
  CharSequence withCount=context.request.getUrlParam(""String_Node_Str"");
  ctx.includeCount=withCount != null && Chars.equalsIgnoreCase(withCount,""String_Node_Str"");
  ctx.query=query;
  ctx.skip=skip;
  ctx.count=0L;
  ctx.stop=stop;
  ctx.info().$(""String_Node_Str"").$(query).$(""String_Node_Str"").$(skip).$(""String_Node_Str"").$(stop).$(""String_Node_Str"").$(ctx.includeCount).$();
  if (executeQuery(r,ctx) != null) {
    resume(context);
  }
}","@Override public void handle(IOContext context) throws IOException {
  JsonHandlerContext ctx=localContext.get(context);
  if (ctx == null) {
    localContext.set(context,ctx=new JsonHandlerContext());
  }
  ctx.fd=context.channel.getFd();
  ChunkedResponse r=context.chunkedResponse();
  CharSequence query=context.request.getUrlParam(""String_Node_Str"");
  if (query == null || query.length() == 0) {
    ctx.info().$(""String_Node_Str"").$();
    r.status(200,""String_Node_Str"");
    r.sendHeader();
    r.put('{').putQuoted(""String_Node_Str"").put(':').putQuoted(""String_Node_Str"").put('}');
    r.sendChunk();
    r.done();
    return;
  }
  long skip=0;
  long stop=Long.MAX_VALUE;
  CharSequence limit=context.request.getUrlParam(""String_Node_Str"");
  if (limit != null) {
    int sepPos=Chars.indexOf(limit,',');
    try {
      if (sepPos > 0) {
        skip=Numbers.parseLong(limit,0,sepPos);
        if (sepPos + 1 < limit.length()) {
          stop=Numbers.parseLong(limit,sepPos + 1,limit.length());
        }
      }
 else {
        stop=Numbers.parseLong(limit);
      }
    }
 catch (    NumericException ex) {
    }
  }
  if (stop < 0) {
    stop=0;
  }
  if (skip < 0) {
    skip=0;
  }
  CharSequence withCount=context.request.getUrlParam(""String_Node_Str"");
  ctx.includeCount=withCount != null && Chars.equalsIgnoreCase(withCount,""String_Node_Str"");
  ctx.query=query;
  ctx.skip=skip;
  ctx.count=0L;
  ctx.stop=stop;
  ctx.info().$(""String_Node_Str"").$(query).$(""String_Node_Str"").$(skip).$(""String_Node_Str"").$(stop).$(""String_Node_Str"").$(ctx.includeCount).$();
  executeQuery(r,ctx);
  resume(context);
}",0.9926650366748166
31411,"@Nullable private Iterator<Record> executeQuery(ChunkedResponse r,JsonHandlerContext ctx) throws IOException {
  CharSequence query=ctx.query;
  try {
    JournalCachingFactory factory=factoryPool.get();
    ctx.factory=factory;
    ctx.recordSource=queryCompilerLocal.get().compileAndRemoveFromCache(factory,query);
    RecordCursor records=ctx.recordSource.prepareCursor(factory);
    r.status(200,""String_Node_Str"");
    r.sendHeader();
    r.put('{').putQuoted(""String_Node_Str"").put(':').putUtf8EscapedAndQuoted(query);
    r.put(',').putQuoted(""String_Node_Str"").put(':').put('[');
    RecordMetadata metadata=records.getMetadata();
    ctx.metadata=metadata;
    ctx.records=records;
    int columnCount=metadata.getColumnCount();
    for (int i=0; i < columnCount; i++) {
      RecordColumnMetadata column=metadata.getColumnQuick(i);
      if (i > 0) {
        r.put(',');
      }
      r.put('{').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getName()).put(',').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getType().name());
      r.put('}');
    }
    r.put(']').put(',');
    r.putQuoted(""String_Node_Str"").put(':').put('[');
    return records;
  }
 catch (  ParserException pex) {
    ctx.info().$(""String_Node_Str"").$(query).$(pex).$();
    sendException(r,query,QueryError.getPosition(),QueryError.getMessage(),400);
  }
catch (  JournalException jex) {
    ctx.info().$(""String_Node_Str"").$(query).$(jex).$();
    sendException(r,query,0,jex.getMessage(),500);
  }
catch (  InterruptedException ex) {
    ctx.info().$(""String_Node_Str"").$(query).$(ex).$();
    sendException(r,query,0,""String_Node_Str"",500);
  }
  return null;
}","private void executeQuery(ChunkedResponse r,JsonHandlerContext ctx) throws IOException {
  CharSequence query=ctx.query;
  try {
    JournalCachingFactory factory=factoryPool.get();
    ctx.factory=factory;
    ctx.recordSource=COMPILER.get().compileAndRemoveFromCache(factory,query);
    RecordCursor cursor=ctx.cursor=ctx.recordSource.prepareCursor(factory);
    r.status(200,""String_Node_Str"");
    r.sendHeader();
    r.put('{').putQuoted(""String_Node_Str"").put(':').putUtf8EscapedAndQuoted(query);
    r.put(',').putQuoted(""String_Node_Str"").put(':').put('[');
    RecordMetadata metadata=cursor.getMetadata();
    ctx.metadata=metadata;
    for (int i=0, n=metadata.getColumnCount(); i < n; i++) {
      RecordColumnMetadata column=metadata.getColumnQuick(i);
      if (i > 0) {
        r.put(',');
      }
      r.put('{').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getName()).put(',').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getType().name());
      r.put('}');
    }
    r.put(']').put(',');
    r.putQuoted(""String_Node_Str"").put(':').put('[');
  }
 catch (  ParserException pex) {
    ctx.info().$(""String_Node_Str"").$(query).$(""String_Node_Str"").$(QueryError.getPosition()).$(""String_Node_Str"").$(QueryError.getMessage()).$();
    sendException(r,query,QueryError.getPosition(),QueryError.getMessage(),400);
  }
catch (  JournalException jex) {
    ctx.error().$(""String_Node_Str"").$(query).$(jex).$();
    sendException(r,query,0,jex.getMessage(),500);
  }
catch (  InterruptedException ex) {
    ctx.error().$(""String_Node_Str"").$(query).$(ex).$();
    sendException(r,query,0,""String_Node_Str"",500);
  }
}",0.903108964684576
31412,"public KeyWriter putStr(CharSequence value){
  int len=value.length();
  checkSize(len << 1);
  for (int i=0; i < len; i++) {
    Unsafe.getUnsafe().putChar(appendAddr + (i << 1),value.charAt(i));
  }
  appendAddr+=len << 1;
  writeOffset();
  return this;
}","public KeyWriter putStr(CharSequence value){
  if (value == null) {
    Unsafe.getUnsafe().putInt(nextColOffset,0);
    nextColOffset+=4;
  }
 else {
    int len=value.length();
    checkSize(len << 1);
    for (int i=0; i < len; i++) {
      Unsafe.getUnsafe().putChar(appendAddr + (i << 1),value.charAt(i));
    }
    appendAddr+=len << 1;
    writeOffset();
  }
  return this;
}",0.7136150234741784
31413,"public void reuse(CharSequence query,RecordSource rs){
  if (query != null) {
    cache.put(query,rs);
  }
}","public void reuse(CharSequence query,RecordSource rs){
  if (query != null) {
    cache.put(query.toString(),rs);
  }
}",0.9515418502202644
31414,"public RecordSource compileSource(JournalReaderFactory factory,CharSequence query) throws ParserException, JournalException {
  RecordSource rs=cache.peek(query);
  if (rs == null) {
    cache.put(query,rs=resetAndCompile(factory,query));
  }
 else {
    rs.reset();
  }
  return rs;
}","public RecordSource compileSource(JournalReaderFactory factory,CharSequence query) throws ParserException, JournalException {
  RecordSource rs=cache.peek(query);
  if (rs == null) {
    cache.put(query.toString(),rs=resetAndCompile(factory,query));
  }
 else {
    rs.reset();
  }
  return rs;
}",0.9810671256454389
31415,"public V poll(CharSequence key){
  int index=getIndex(key);
  if (index == NOT_FOUND) {
    return null;
  }
  V value=Unsafe.arrayGet(values,index);
  Unsafe.arrayPut(values,index,null);
  return value;
}","public V poll(CharSequence key){
  int index=getIndex(key);
  if (index == NOT_FOUND) {
    return null;
  }
  V value=Unsafe.arrayGet(values,index);
  Unsafe.arrayPut(values,index,null);
  Unsafe.arrayPut(keys,index,null);
  return value;
}",0.9192825112107624
31416,"@Test public void testJsonEncodeNumbers() throws Exception {
  generateJournal(null,1.900232E-10,Double.MAX_VALUE,Long.MAX_VALUE,Integer.MIN_VALUE,10);
  HttpServer server=new HttpServer(new HttpServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",createHandler());
    }
  }
);
  server.start();
  try {
    String query=""String_Node_Str"";
    QueryResponse queryResponse=download(query);
    Assert.assertEquals(1.900232E-10,queryResponse.result[0].x,1E-6);
    Assert.assertEquals(Double.MAX_VALUE,queryResponse.result[0].y,1E-6);
    Assert.assertEquals(Long.MAX_VALUE,queryResponse.result[0].z);
    Assert.assertEquals(0,queryResponse.result[0].w);
    Assert.assertEquals(10,queryResponse.result[0].timestamp);
    Assert.assertEquals(false,queryResponse.moreExist);
  }
  finally {
    factoryPool.close();
    server.halt();
  }
}","@Test public void testJsonEncodeNumbers() throws Exception {
  generateJournal(null,1.900232E-10,Double.MAX_VALUE,Long.MAX_VALUE,Integer.MIN_VALUE,10);
  HttpServer server=new HttpServer(new HttpServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",createHandler());
    }
  }
);
  server.start();
  try {
    String query=""String_Node_Str"";
    QueryResponse queryResponse=download(query);
    Assert.assertEquals(1.900232E-10,queryResponse.result[0].x,1E-6);
    Assert.assertEquals(Double.MAX_VALUE,queryResponse.result[0].y,1E-6);
    Assert.assertEquals(Long.MAX_VALUE,queryResponse.result[0].z);
    Assert.assertEquals(0,queryResponse.result[0].w);
    Assert.assertEquals(10,queryResponse.result[0].timestamp);
    Assert.assertEquals(false,queryResponse.moreExist);
    Assert.assertEquals(""String_Node_Str"",queryResponse.result[4].id);
    Assert.assertTrue(Double.isNaN(queryResponse.result[4].y));
  }
  finally {
    factoryPool.close();
    server.halt();
  }
}",0.9273803119956966
31417,"@Test public void testJsonPooling() throws Exception {
  generateJournal();
  HttpServer server=new HttpServer(new HttpServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",createHandler());
    }
  }
);
  server.start();
  try {
    QueryResponse queryResponse1=download(""String_Node_Str"");
    QueryResponse queryResponse2=download(""String_Node_Str"");
    Assert.assertEquals(10,queryResponse1.result.length);
    Assert.assertEquals(10,queryResponse2.result.length);
  }
  finally {
    factoryPool.close();
    server.halt();
  }
}","@Test public void testJsonPooling() throws Exception {
  generateJournal();
  final JsonHandler[] handler=new JsonHandler[1];
  HttpServer server=new HttpServer(new HttpServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",handler[0]=createHandler());
    }
  }
);
  server.start();
  try {
    QueryResponse queryResponse1=download(""String_Node_Str"");
    QueryResponse queryResponse2=download(""String_Node_Str"");
    QueryResponse queryResponse3=download(""String_Node_Str"");
    QueryResponse queryResponse4=download(""String_Node_Str"");
    Assert.assertEquals(10,queryResponse1.result.length);
    Assert.assertEquals(10,queryResponse2.result.length);
    Assert.assertEquals(10,queryResponse3.result.length);
    Assert.assertEquals(10,queryResponse4.result.length);
  }
  finally {
    factoryPool.close();
    server.halt();
  }
}",0.7872791519434629
31418,"@SuppressWarnings(""String_Node_Str"") public JournalFactoryPool(JournalConfiguration configuration,int capacity) throws InterruptedException {
  this.configuration=configuration;
  this.capacity=capacity;
  this.pool=new ConcurrentLinkedDeque<>();
}","@SuppressWarnings(""String_Node_Str"") public JournalFactoryPool(JournalConfiguration configuration,int capacity){
  this.configuration=configuration;
  this.capacity=capacity;
  this.pool=new ConcurrentLinkedDeque<>();
}",0.9379014989293362
31419,"public JournalCachingFactory get() throws InterruptedException, JournalException {
  if (running.get()) {
    JournalCachingFactory factory=pool.poll();
    if (factory == null) {
      int index=allLength.incrementAndGet() - 1;
      if (index < capacity) {
        factory=new JournalCachingFactory(configuration,this);
      }
    }
 else {
      factory.setInUse();
    }
    return factory;
  }
 else {
    throw new InterruptedException(""String_Node_Str"");
  }
}","public JournalCachingFactory get() throws InterruptedException {
  if (running.get()) {
    JournalCachingFactory factory=pool.poll();
    if (factory == null) {
      int index=allLength.incrementAndGet() - 1;
      if (index < capacity) {
        factory=new JournalCachingFactory(configuration,this);
      }
    }
 else {
      factory.setInUse();
    }
    return factory;
  }
 else {
    throw new InterruptedException(""String_Node_Str"");
  }
}",0.2135076252723311
31420,"@Override public void close(){
  if (running.get()) {
    running.set(false);
    JournalCachingFactory factory;
    while ((factory=pool.poll()) != null) {
      try {
        factory.clearPool();
        factory.close();
      }
 catch (      Throwable ex) {
        LOG.info().$(""String_Node_Str"").$(ex).$();
      }
    }
  }
}","@Override public void close(){
  if (running.compareAndSet(true,false)) {
    JournalCachingFactory factory;
    while ((factory=pool.poll()) != null) {
      try {
        factory.clearPool();
        factory.close();
      }
 catch (      Throwable ex) {
        LOG.info().$(""String_Node_Str"").$(ex).$();
      }
    }
  }
}",0.9148936170212766
31421,"public void halt() throws IOException, InterruptedException {
  if (running) {
    running=false;
    startComplete.await();
    for (int i=0; i < workers.size(); i++) {
      workers.getQuick(i).halt();
    }
    haltLatch.await();
    dispatcher.close();
    for (int i=0; i < ioQueue.getCapacity(); i++) {
      IOEvent ev=ioQueue.get(i);
      if (ev != null && ev.context != null) {
        ev.context.close();
      }
    }
  }
}","public void halt() throws IOException, InterruptedException {
  if (running) {
    running=false;
    startComplete.await();
    for (int i=0; i < workers.size(); i++) {
      workers.getQuick(i).halt();
    }
    haltLatch.await();
    dispatcher.close();
    for (int i=0; i < ioQueue.getCapacity(); i++) {
      IOEvent ev=ioQueue.get(i);
      if (ev != null && ev.context != null) {
        ev.context=Misc.free(ev.context);
      }
    }
  }
}",0.9683257918552036
31422,"@Override public void close(){
  Misc.free(channel);
  request.close();
  response.close();
  map.close();
}","@Override public void close(){
  if (open.compareAndSet(true,false)) {
    Misc.free(channel);
    Misc.free(request);
    Misc.free(response);
    Misc.free(map);
  }
}",0.628158844765343
31423,"void prepare(RecordMetadata metadata,ObjList<RecordColumnMetadata> columns,int offset);","void prepare(ObjList<RecordColumnMetadata> columns,int offset);",0.84
31424,"@SuppressFBWarnings({""String_Node_Str""}) public AggregatedRecordSource(RecordSource recordSource,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators){
  int keyColumnsSize=keyColumns.size();
  this.keyIndices=new int[keyColumnsSize];
  RecordMetadata rm=recordSource.getMetadata();
  for (int i=0; i < keyColumnsSize; i++) {
    keyIndices[i]=rm.getColumnIndex(keyColumns.get(i));
  }
  this.aggregators=aggregators;
  ObjList<MapRecordValueInterceptor> interceptors=new ObjList<>();
  ObjList<RecordColumnMetadata> columns=tlColumns.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(rm,columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.map=new MultiMap(rm,keyColumns,columns,interceptors);
  this.recordSource=recordSource;
}","@SuppressFBWarnings({""String_Node_Str""}) public AggregatedRecordSource(RecordSource recordSource,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators){
  int keyColumnsSize=keyColumns.size();
  this.keyIndices=new int[keyColumnsSize];
  RecordMetadata rm=recordSource.getMetadata();
  for (int i=0; i < keyColumnsSize; i++) {
    keyIndices[i]=rm.getColumnIndex(keyColumns.get(i));
  }
  this.aggregators=aggregators;
  ObjList<MapRecordValueInterceptor> interceptors=new ObjList<>();
  ObjList<RecordColumnMetadata> columns=tlColumns.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.map=new MultiMap(rm,keyColumns,columns,interceptors);
  this.recordSource=recordSource;
}",0.9985272459499264
31425,"@SuppressFBWarnings({""String_Node_Str""}) public ResampledRecordSource(RecordSource recordSource,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,TimestampSampler sampler){
  int keyColumnsSize=keyColumns.size();
  this.keyIndices=new IntList(keyColumnsSize);
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  RecordMetadata rm=recordSource.getMetadata();
  this.tsIndex=rm.getTimestampIndex();
  keyCols.add(rm.getColumnName(tsIndex));
  for (int i=0; i < keyColumnsSize; i++) {
    keyCols.add(keyColumns.get(i));
    int index=rm.getColumnIndex(keyColumns.get(i));
    if (index != tsIndex) {
      keyIndices.add(index);
    }
  }
  this.aggregators=aggregators;
  this.sampler=sampler;
  ObjList<MapRecordValueInterceptor> interceptors=new ObjList<>();
  ObjList<RecordColumnMetadata> columns=tlColumns.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(rm,columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.map=new MultiMap(rm,keyCols,columns,interceptors);
  this.recordSource=recordSource;
}","@SuppressFBWarnings({""String_Node_Str""}) public ResampledRecordSource(RecordSource recordSource,@Transient ObjHashSet<String> keyColumns,ObjList<AggregatorFunction> aggregators,TimestampSampler sampler){
  int keyColumnsSize=keyColumns.size();
  this.keyIndices=new IntList(keyColumnsSize);
  ObjHashSet<String> keyCols=new ObjHashSet<>();
  RecordMetadata rm=recordSource.getMetadata();
  this.tsIndex=rm.getTimestampIndex();
  keyCols.add(rm.getColumnName(tsIndex));
  for (int i=0; i < keyColumnsSize; i++) {
    keyCols.add(keyColumns.get(i));
    int index=rm.getColumnIndex(keyColumns.get(i));
    if (index != tsIndex) {
      keyIndices.add(index);
    }
  }
  this.aggregators=aggregators;
  this.sampler=sampler;
  ObjList<MapRecordValueInterceptor> interceptors=new ObjList<>();
  ObjList<RecordColumnMetadata> columns=tlColumns.get();
  columns.clear();
  int index=0;
  for (int i=0, sz=aggregators.size(); i < sz; i++) {
    AggregatorFunction func=aggregators.getQuick(i);
    int n=columns.size();
    func.prepare(columns,index);
    index+=columns.size() - n;
    if (func instanceof MapRecordValueInterceptor) {
      interceptors.add((MapRecordValueInterceptor)func);
    }
  }
  this.map=new MultiMap(rm,keyCols,columns,interceptors);
  this.recordSource=recordSource;
}",0.9988394584139264
31426,"@Override public void prepare(RecordMetadata metadata,ObjList<RecordColumnMetadata> columns,int offset){
  columns.add(this);
  valueIndex=offset;
}","@Override public void prepare(ObjList<RecordColumnMetadata> columns,int offset){
  columns.add(this);
  valueIndex=offset;
}",0.9117647058823528
31427,"@Override public void prepare(RecordMetadata rm,ObjList<RecordColumnMetadata> columns,int offset){
  columns.add(INTERNAL_COL_COUNT);
  columns.add(INTERNAL_COL_SUM);
  columns.add(new ColumnMetadata().setName(getName()).setType(ColumnType.DOUBLE));
  countIdx=offset;
  sumIdx=offset + 1;
  avgIdx=offset + 2;
}","@Override public void prepare(ObjList<RecordColumnMetadata> columns,int offset){
  columns.add(INTERNAL_COL_COUNT);
  columns.add(INTERNAL_COL_SUM);
  columns.add(new ColumnMetadata().setName(getName()).setType(ColumnType.DOUBLE));
  countIdx=offset;
  sumIdx=offset + 1;
  avgIdx=offset + 2;
}",0.9702970297029704
31428,"@Override public void prepare(RecordMetadata metadata,ObjList<RecordColumnMetadata> columns,int offset){
  columns.add(INTERNAL_COL_AMOUNT);
  columns.add(INTERNAL_COL_QUANTITY);
  columns.add(new ColumnMetadata().setName(getName()).setType(ColumnType.DOUBLE));
  sumAmtIdx=offset;
  sumQtyIdx=offset + 1;
  vwap=offset + 2;
}","@Override public void prepare(ObjList<RecordColumnMetadata> columns,int offset){
  columns.add(INTERNAL_COL_AMOUNT);
  columns.add(INTERNAL_COL_QUANTITY);
  columns.add(new ColumnMetadata().setName(getName()).setType(ColumnType.DOUBLE));
  sumAmtIdx=offset;
  sumQtyIdx=offset + 1;
  vwap=offset + 2;
}",0.961783439490446
31429,"@Override public void clear(){
  debug().$(""String_Node_Str"").$();
  metadata=null;
  cursor=null;
  record=null;
  debug().$(""String_Node_Str"").$();
  factory=Misc.free(factory);
  if (recordSource != null) {
    COMPILER.get().reuse(query,recordSource);
    recordSource=null;
  }
  query=null;
}","@Override public void clear(){
  debug().$(""String_Node_Str"").$();
  metadata=null;
  cursor=null;
  record=null;
  debug().$(""String_Node_Str"").$();
  factory=Misc.free(factory);
  if (recordSource != null) {
    CACHE.get().put(query.toString(),recordSource);
    recordSource=null;
  }
  query=null;
}",0.9302325581395348
31430,"@Override public QueryCompiler newInstance(){
  return new QueryCompiler();
}","@Override public AssociativeCache<RecordSource> newInstance(){
  return new AssociativeCache<>(8,128);
}",0.6187845303867403
31431,"private void executeQuery(ChunkedResponse r,JsonHandlerContext ctx) throws IOException {
  CharSequence query=ctx.query;
  try {
    JournalCachingFactory factory=factoryPool.get();
    ctx.factory=factory;
    ctx.recordSource=COMPILER.get().compileAndRemoveFromCache(factory,query);
    RecordCursor cursor=ctx.cursor=ctx.recordSource.prepareCursor(factory);
    r.status(200,""String_Node_Str"");
    r.sendHeader();
    r.put('{').putQuoted(""String_Node_Str"").put(':').putUtf8EscapedAndQuoted(query);
    r.put(',').putQuoted(""String_Node_Str"").put(':').put('[');
    RecordMetadata metadata=cursor.getMetadata();
    ctx.metadata=metadata;
    for (int i=0, n=metadata.getColumnCount(); i < n; i++) {
      RecordColumnMetadata column=metadata.getColumnQuick(i);
      if (i > 0) {
        r.put(',');
      }
      r.put('{').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getName()).put(',').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getType().name());
      r.put('}');
    }
    r.put(']').put(',');
    r.putQuoted(""String_Node_Str"").put(':').put('[');
  }
 catch (  ParserException pex) {
    ctx.info().$(""String_Node_Str"").$(query).$(""String_Node_Str"").$(QueryError.getPosition()).$(""String_Node_Str"").$(QueryError.getMessage()).$();
    sendException(r,query,QueryError.getPosition(),QueryError.getMessage(),400);
  }
catch (  JournalException jex) {
    ctx.error().$(""String_Node_Str"").$(query).$(jex).$();
    sendException(r,query,0,jex.getMessage(),500);
  }
catch (  InterruptedException ex) {
    ctx.error().$(""String_Node_Str"").$(query).$(ex).$();
    sendException(r,query,0,""String_Node_Str"",500);
  }
}","private void executeQuery(ChunkedResponse r,JsonHandlerContext ctx) throws IOException {
  CharSequence query=ctx.query;
  try {
    JournalCachingFactory factory=factoryPool.get();
    ctx.factory=factory;
    ctx.recordSource=CACHE.get().poll(query);
    if (ctx.recordSource == null) {
      ctx.recordSource=COMPILER.get().compileSource(factory,query);
      cacheMisses.add(1);
    }
 else {
      ctx.recordSource.reset();
      cacheHits.add(1);
    }
    RecordCursor cursor=ctx.cursor=ctx.recordSource.prepareCursor(factory);
    r.status(200,""String_Node_Str"");
    r.sendHeader();
    r.put('{').putQuoted(""String_Node_Str"").put(':').putUtf8EscapedAndQuoted(query);
    r.put(',').putQuoted(""String_Node_Str"").put(':').put('[');
    RecordMetadata metadata=cursor.getMetadata();
    ctx.metadata=metadata;
    for (int i=0, n=metadata.getColumnCount(); i < n; i++) {
      RecordColumnMetadata column=metadata.getColumnQuick(i);
      if (i > 0) {
        r.put(',');
      }
      r.put('{').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getName()).put(',').putQuoted(""String_Node_Str"").put(':').putQuoted(column.getType().name());
      r.put('}');
    }
    r.put(']').put(',');
    r.putQuoted(""String_Node_Str"").put(':').put('[');
  }
 catch (  ParserException pex) {
    ctx.info().$(""String_Node_Str"").$(query).$(""String_Node_Str"").$(QueryError.getPosition()).$(""String_Node_Str"").$(QueryError.getMessage()).$();
    sendException(r,query,QueryError.getPosition(),QueryError.getMessage(),400);
  }
catch (  JournalException jex) {
    ctx.error().$(""String_Node_Str"").$(query).$(jex).$();
    sendException(r,query,0,jex.getMessage(),500);
  }
catch (  InterruptedException ex) {
    ctx.error().$(""String_Node_Str"").$(query).$(ex).$();
    sendException(r,query,0,""String_Node_Str"",500);
  }
}",0.9325259515570934
31432,"public RecordSource compileSource(JournalReaderFactory factory,CharSequence query) throws ParserException, JournalException {
  RecordSource rs=cache.peek(query);
  if (rs == null) {
    cache.put(query.toString(),rs=resetAndCompile(factory,query));
  }
 else {
    rs.reset();
  }
  return rs;
}","public RecordSource compileSource(JournalReaderFactory factory,CharSequence query) throws ParserException, JournalException {
  return resetAndCompile(factory,query);
}",0.7112068965517241
31433,"private RecordSource compileSourceInternal(JournalReaderFactory factory,CharSequence query) throws ParserException, JournalException {
  RecordSource rs=cache.poll(query);
  if (rs == null) {
    rs=compile(parser.parseInternal(query).getQueryModel(),factory);
    cache.put(query,rs);
  }
 else {
    rs.reset();
  }
  return rs;
}","private RecordSource compileSourceInternal(JournalReaderFactory factory,CharSequence query) throws ParserException, JournalException {
  return compile(parser.parseInternal(query).getQueryModel(),factory);
}",0.7421150278293135
31434,"@Test public void testJsonPooling() throws Exception {
  generateJournal();
  final JsonHandler[] handler=new JsonHandler[1];
  HttpServer server=new HttpServer(new HttpServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",handler[0]=createHandler());
    }
  }
);
  server.start();
  try {
    QueryResponse queryResponse1=download(""String_Node_Str"");
    QueryResponse queryResponse2=download(""String_Node_Str"");
    QueryResponse queryResponse3=download(""String_Node_Str"");
    QueryResponse queryResponse4=download(""String_Node_Str"");
    Assert.assertEquals(10,queryResponse1.result.length);
    Assert.assertEquals(10,queryResponse2.result.length);
    Assert.assertEquals(10,queryResponse3.result.length);
    Assert.assertEquals(10,queryResponse4.result.length);
  }
  finally {
    factoryPool.close();
    server.halt();
  }
}","@Test public void testJsonPooling() throws Exception {
  generateJournal();
  final JsonHandler[] handler=new JsonHandler[1];
  HttpServer server=new HttpServer(new HttpServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",handler[0]=createHandler());
    }
  }
);
  server.start();
  try {
    QueryResponse queryResponse1=download(""String_Node_Str"");
    QueryResponse queryResponse2=download(""String_Node_Str"");
    QueryResponse queryResponse3=download(""String_Node_Str"");
    QueryResponse queryResponse4=download(""String_Node_Str"");
    Assert.assertEquals(10,queryResponse1.result.length);
    Assert.assertEquals(10,queryResponse2.result.length);
    Assert.assertEquals(10,queryResponse3.result.length);
    Assert.assertEquals(10,queryResponse4.result.length);
    Assert.assertTrue(handler[0].getCacheHits() > 0);
    Assert.assertTrue(handler[0].getCacheMisses() > 0);
  }
  finally {
    factoryPool.close();
    server.halt();
  }
}",0.9397590361445785
31435,"protected void assertThat(String expected,String query) throws JournalException, ParserException, IOException {
  assertThat(expected,query,false);
  assertThat(expected,query,false);
  compiler.clearCache();
}","protected void assertThat(String expected,String query) throws JournalException, ParserException, IOException {
  assertThat(expected,query,false);
  assertThat(expected,query,false);
}",0.9367088607594936
31436,"@Test public void testParamInLimit() throws Exception {
  createTabWithNaNs2();
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  sink.clear();
  RecordSource src=compiler.compileSource(factory,""String_Node_Str"");
  src.getParam(""String_Node_Str"").set(10L);
  printer.printCursor(src.prepareCursor(factory),false);
  TestUtils.assertEquals(expected,sink);
  sink.clear();
  src=compiler.compileSource(factory,""String_Node_Str"");
  printer.printCursor(src.prepareCursor(factory),false);
  TestUtils.assertEquals(expected,sink);
  sink.clear();
  src=compiler.compileSource(factory,""String_Node_Str"");
  src.getParam(""String_Node_Str"").set(5L);
  printer.printCursor(src.prepareCursor(factory),false);
  final String expected2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  TestUtils.assertEquals(expected2,sink);
}","@Test public void testParamInLimit() throws Exception {
  createTabWithNaNs2();
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  sink.clear();
  RecordSource src=compiler.compileSource(factory,""String_Node_Str"");
  src.getParam(""String_Node_Str"").set(10L);
  printer.printCursor(src.prepareCursor(factory),false);
  TestUtils.assertEquals(expected,sink);
  sink.clear();
  src=compiler.compileSource(factory,""String_Node_Str"");
  src.getParam(""String_Node_Str"").set(10L);
  printer.printCursor(src.prepareCursor(factory),false);
  TestUtils.assertEquals(expected,sink);
  sink.clear();
  src=compiler.compileSource(factory,""String_Node_Str"");
  src.getParam(""String_Node_Str"").set(5L);
  printer.printCursor(src.prepareCursor(factory),false);
  final String expected2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  TestUtils.assertEquals(expected2,sink);
}",0.9791469194312796
31437,"private boolean processRegistrations(long timestamp){
  long cursor;
  boolean useful=false;
  int count=0;
  int offset=0;
  while ((cursor=interestSubSequence.next()) > -1) {
    useful=true;
    IOEvent evt=interestQueue.get(cursor);
    IOContext context=evt.context;
    ChannelStatus op=evt.status;
    interestSubSequence.done(cursor);
    int fd=(int)context.channel.getFd();
    LOG.debug().$(""String_Node_Str"").$(fd).$(""String_Node_Str"").$(op).$();
    kqueue.setOffset(offset);
    offset+=Kqueue.SIZEOF_KEVENT;
    count++;
switch (op) {
case READ:
      kqueue.readFD(fd,timestamp);
    break;
case WRITE:
  kqueue.writeFD(fd,timestamp);
break;
case DISCONNECTED:
disconnect(context,DisconnectReason.SILLY);
continue;
}
int r=pending.addRow();
pending.set(r,0,timestamp);
pending.set(r,1,fd);
pending.set(r,context);
if (count > Kqueue.NUM_KEVENTS - 1) {
kqueue.register(count);
count=0;
}
}
if (count > 0) {
kqueue.register(count);
}
return useful;
}","private boolean processRegistrations(long timestamp){
  long cursor;
  boolean useful=false;
  int count=0;
  int offset=0;
  while ((cursor=interestSubSequence.next()) > -1) {
    useful=true;
    IOEvent evt=interestQueue.get(cursor);
    IOContext context=evt.context;
    ChannelStatus op=evt.status;
    interestSubSequence.done(cursor);
    int fd=(int)context.channel.getFd();
    LOG.debug().$(""String_Node_Str"").$(fd).$(""String_Node_Str"").$(op).$();
    kqueue.setOffset(offset);
    offset+=Kqueue.SIZEOF_KEVENT;
    count++;
switch (op) {
case READ:
      kqueue.readFD(fd,timestamp);
    break;
case WRITE:
  kqueue.writeFD(fd,timestamp);
break;
case DISCONNECTED:
disconnect(context,DisconnectReason.SILLY);
continue;
case EOF:
disconnect(context,DisconnectReason.PEER);
continue;
}
int r=pending.addRow();
pending.set(r,0,timestamp);
pending.set(r,1,fd);
pending.set(r,context);
if (count > Kqueue.NUM_KEVENTS - 1) {
kqueue.register(count);
count=0;
}
}
if (count > 0) {
kqueue.register(count);
}
return useful;
}",0.9683576092415872
31438,"@Override protected boolean _run(){
  int count=select(readFdSet.address,writeFdSet.address,0);
  if (count < 0) {
    LOG.error().$(""String_Node_Str"").$(Os.errno()).$();
    return false;
  }
  final long timestamp=System.currentTimeMillis();
  boolean useful=false;
  fds.clear();
  if (count > 0) {
    queryFdSets(timestamp);
    useful=true;
  }
  useful=processRegistrations(timestamp) | useful;
  int readFdCount=0;
  int writeFdCount=0;
  readFdSet.reset();
  writeFdSet.reset();
  long deadline=timestamp - timeout;
  for (int i=0, n=pending.size(); i < n; ) {
    long ts=pending.get(i,M_TIMESTAMP);
    long fd=pending.get(i,M_FD);
    int _new_op=fds.get(fd);
    if (_new_op == -1) {
      if (ts < deadline && fd != socketFd) {
        disconnect(pending.get(i),KQueueDispatcher.DisconnectReason.IDLE);
        pending.deleteRow(i);
        n--;
        useful=true;
        continue;
      }
      ChannelStatus op=ChannelStatus.values()[(int)pending.get(i,M_OPERATION)];
switch (op) {
case READ:
        readFdSet.add(fd);
      readFdCount++;
    i++;
  break;
case WRITE:
writeFdSet.add(fd);
writeFdCount++;
i++;
break;
case DISCONNECTED:
disconnect(pending.get(i),KQueueDispatcher.DisconnectReason.SILLY);
pending.deleteRow(i);
n--;
useful=true;
break;
}
}
 else {
final IOContext context=pending.get(i);
if ((_new_op & FD_READ) > 0 && Net.available(fd) == 0) {
disconnect(context,KQueueDispatcher.DisconnectReason.PEER);
}
 else {
if ((_new_op & FD_READ) > 0) {
enqueue(context,ChannelStatus.READ);
}
if ((_new_op & FD_WRITE) > 0) {
enqueue(context,ChannelStatus.WRITE);
}
}
pending.deleteRow(i);
n--;
}
}
readFdSet.setCount(readFdCount);
writeFdSet.setCount(writeFdCount);
return useful;
}","@Override protected boolean _run(){
  int count=select(readFdSet.address,writeFdSet.address,0);
  if (count < 0) {
    LOG.error().$(""String_Node_Str"").$(Os.errno()).$();
    return false;
  }
  final long timestamp=System.currentTimeMillis();
  boolean useful=false;
  fds.clear();
  if (count > 0) {
    queryFdSets(timestamp);
    useful=true;
  }
  useful=processRegistrations(timestamp) | useful;
  int readFdCount=0;
  int writeFdCount=0;
  readFdSet.reset();
  writeFdSet.reset();
  long deadline=timestamp - timeout;
  for (int i=0, n=pending.size(); i < n; ) {
    long ts=pending.get(i,M_TIMESTAMP);
    long fd=pending.get(i,M_FD);
    int _new_op=fds.get(fd);
    if (_new_op == -1) {
      if (ts < deadline && fd != socketFd) {
        disconnect(pending.get(i),DisconnectReason.IDLE);
        pending.deleteRow(i);
        n--;
        useful=true;
        continue;
      }
      ChannelStatus op=ChannelStatus.values()[(int)pending.get(i,M_OPERATION)];
switch (op) {
case READ:
        readFdSet.add(fd);
      readFdCount++;
    i++;
  break;
case WRITE:
writeFdSet.add(fd);
writeFdCount++;
i++;
break;
case DISCONNECTED:
disconnect(pending.get(i),DisconnectReason.SILLY);
pending.deleteRow(i);
n--;
useful=true;
break;
}
}
 else {
final IOContext context=pending.get(i);
if ((_new_op & FD_READ) > 0 && Net.available(fd) == 0) {
disconnect(context,DisconnectReason.PEER);
}
 else {
if ((_new_op & FD_READ) > 0) {
enqueue(context,ChannelStatus.READ);
}
if ((_new_op & FD_WRITE) > 0) {
enqueue(context,ChannelStatus.WRITE);
}
}
pending.deleteRow(i);
n--;
}
}
readFdSet.setCount(readFdCount);
writeFdSet.setCount(writeFdCount);
return useful;
}",0.9848619768477292
31439,"private void disconnect(IOContext context,KQueueDispatcher.DisconnectReason reason){
  LOG.debug().$(""String_Node_Str"").$(context.channel.getFd()).$(""String_Node_Str"").$(reason).$();
  context.close();
  connectionCount--;
}","private void disconnect(IOContext context,DisconnectReason reason){
  LOG.debug().$(""String_Node_Str"").$(context.channel.getFd()).$(""String_Node_Str"").$(reason).$();
  context.close();
  connectionCount--;
}",0.9605568445475638
31440,"@SuppressFBWarnings(""String_Node_Str"") private void writeDiscardFile(long rowid) throws JournalException {
  if (discardTxtRaf == null) {
    try {
      discardTxtRaf=new RandomAccessFile(discardTxt,""String_Node_Str"");
      FileChannel ch=discardTxtRaf.getChannel();
      discardSink=new FlexBufferSink(ch.position(ch.size()),1024 * 1024);
    }
 catch (    IOException e) {
      throw new JournalException(e);
    }
  }
  JournalMetadata m=getMetadata();
  int p=Rows.toPartitionIndex(rowid);
  long row=Rows.toLocalRowID(rowid);
  long rowCount=0;
  try {
    try {
      for (int n=getPartitionCount() - 1; p < n; p++) {
        final Partition partition=getPartition(n,true);
        for (long r=row, psz=partition.size(); r < psz; r++) {
          for (int c=0, cc=m.getColumnCount(); c < cc; c++) {
switch (m.getColumnQuick(c).type) {
case DATE:
              Dates.appendDateTime(discardSink,partition.getLong(r,c));
            break;
case DOUBLE:
          Numbers.append(discardSink,partition.getDouble(r,c),12);
        break;
case FLOAT:
      Numbers.append(discardSink,partition.getFloat(r,c),4);
    break;
case INT:
  Numbers.append(discardSink,partition.getInt(r,c));
break;
case STRING:
partition.getStr(r,c,discardSink);
break;
case SYMBOL:
discardSink.put(partition.getSym(r,c));
break;
case SHORT:
Numbers.append(discardSink,partition.getShort(r,c));
break;
case LONG:
Numbers.append(discardSink,partition.getLong(r,c));
break;
case BYTE:
Numbers.append(discardSink,partition.getByte(r,c));
break;
case BOOLEAN:
discardSink.put(partition.getBool(r,c) ? ""String_Node_Str"" : ""String_Node_Str"");
break;
}
if (((++rowCount) & 7) == 0) {
discardSink.flush();
}
}
}
}
}
  finally {
discardSink.flush();
}
}
 catch (IOException e) {
throw new JournalException(e);
}
}","private void writeDiscardFile(long rowid) throws JournalException {
  if (discardTxtRaf == null) {
    try {
      discardTxtRaf=new RandomAccessFile(discardTxt,""String_Node_Str"");
      FileChannel ch=discardTxtRaf.getChannel();
      discardSink=new FlexBufferSink(ch.position(ch.size()),1024 * 1024);
    }
 catch (    IOException e) {
      throw new JournalException(e);
    }
  }
  JournalMetadata m=getMetadata();
  int p=Rows.toPartitionIndex(rowid);
  long row=Rows.toLocalRowID(rowid);
  long rowCount=0;
  try {
    try {
      for (int n=getPartitionCount() - 1; p < n; p++) {
        final Partition partition=getPartition(n,true);
        for (long r=row, psz=partition.size(); r < psz; r++) {
          for (int c=0, cc=m.getColumnCount(); c < cc; c++) {
switch (m.getColumnQuick(c).type) {
case DATE:
              Dates.appendDateTime(discardSink,partition.getLong(r,c));
            break;
case DOUBLE:
          Numbers.append(discardSink,partition.getDouble(r,c),12);
        break;
case FLOAT:
      Numbers.append(discardSink,partition.getFloat(r,c),4);
    break;
case INT:
  Numbers.append(discardSink,partition.getInt(r,c));
break;
case STRING:
partition.getStr(r,c,discardSink);
break;
case SYMBOL:
discardSink.put(partition.getSym(r,c));
break;
case SHORT:
Numbers.append(discardSink,partition.getShort(r,c));
break;
case LONG:
Numbers.append(discardSink,partition.getLong(r,c));
break;
case BYTE:
Numbers.append(discardSink,partition.getByte(r,c));
break;
case BOOLEAN:
discardSink.put(partition.getBool(r,c) ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
break;
}
if (((++rowCount) & 7) == 0) {
discardSink.flush();
}
}
}
}
}
  finally {
discardSink.flush();
}
}
 catch (IOException e) {
throw new JournalException(e);
}
}",0.984216459977452
31441,"public void read(long localRowID,T obj){
  for (int i=0; i < columnCount; i++) {
    ColumnMetadata m;
    if (journal.getInactiveColumns().get(i) || (m=Unsafe.arrayGet(columnMetadata,i)).offset == 0) {
      continue;
    }
switch (m.type) {
case BOOLEAN:
      Unsafe.getUnsafe().putBoolean(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getBool(localRowID));
    break;
case BYTE:
  Unsafe.getUnsafe().putByte(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getByte(localRowID));
break;
case DOUBLE:
Unsafe.getUnsafe().putDouble(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getDouble(localRowID));
break;
case FLOAT:
Unsafe.getUnsafe().putFloat(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getFloat(localRowID));
break;
case INT:
Unsafe.getUnsafe().putInt(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getInt(localRowID));
break;
case LONG:
case DATE:
Unsafe.getUnsafe().putLong(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getLong(localRowID));
break;
case SHORT:
Unsafe.getUnsafe().putShort(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getShort(localRowID));
break;
case STRING:
Unsafe.getUnsafe().putObject(obj,m.offset,((VariableColumn)Unsafe.arrayGet(columns,i)).getStr(localRowID));
break;
case SYMBOL:
Unsafe.getUnsafe().putObject(obj,m.offset,m.symbolTable.value(((FixedColumn)Unsafe.arrayGet(columns,i)).getInt(localRowID)));
break;
case BINARY:
readBin(localRowID,obj,i,m);
}
}
}","public void read(long localRowID,T obj){
  for (int i=0; i < columnCount; i++) {
    ColumnMetadata m;
    if (journal.getInactiveColumns().get(i) || (m=Unsafe.arrayGet(columnMetadata,i)).offset == 0) {
      continue;
    }
switch (m.type) {
case BOOLEAN:
      Unsafe.getUnsafe().putBoolean(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getBool(localRowID));
    break;
case BYTE:
  Unsafe.getUnsafe().putByte(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getByte(localRowID));
break;
case DOUBLE:
Unsafe.getUnsafe().putDouble(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getDouble(localRowID));
break;
case FLOAT:
Unsafe.getUnsafe().putFloat(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getFloat(localRowID));
break;
case INT:
Unsafe.getUnsafe().putInt(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getInt(localRowID));
break;
case LONG:
case DATE:
Unsafe.getUnsafe().putLong(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getLong(localRowID));
break;
case SHORT:
Unsafe.getUnsafe().putShort(obj,m.offset,((FixedColumn)Unsafe.arrayGet(columns,i)).getShort(localRowID));
break;
case STRING:
Unsafe.getUnsafe().putObject(obj,m.offset,((VariableColumn)Unsafe.arrayGet(columns,i)).getStr(localRowID));
break;
case SYMBOL:
Unsafe.getUnsafe().putObject(obj,m.offset,m.symbolTable.value(((FixedColumn)Unsafe.arrayGet(columns,i)).getInt(localRowID)));
break;
case BINARY:
readBin(localRowID,obj,i,m);
break;
default :
break;
}
}
}",0.9918256130790192
31442,"private void printRecord(Record r,RecordMetadata m,int i){
switch (m.getColumnQuick(i).getType()) {
case DATE:
    Dates.appendDateTime(sink,r.getDate(i));
  break;
case DOUBLE:
Numbers.append(sink,r.getDouble(i),12);
break;
case FLOAT:
Numbers.append(sink,r.getFloat(i),4);
break;
case INT:
Numbers.append(sink,r.getInt(i));
break;
case STRING:
r.getStr(i,sink);
break;
case SYMBOL:
sink.put(r.getSym(i));
break;
case SHORT:
Numbers.append(sink,r.getShort(i));
break;
case LONG:
Numbers.append(sink,r.getLong(i));
break;
case BYTE:
Numbers.append(sink,r.get(i));
break;
case BOOLEAN:
sink.put(r.getBool(i) ? ""String_Node_Str"" : ""String_Node_Str"");
break;
}
}","private void printRecord(Record r,RecordMetadata m,int i){
switch (m.getColumnQuick(i).getType()) {
case DATE:
    Dates.appendDateTime(sink,r.getDate(i));
  break;
case DOUBLE:
Numbers.append(sink,r.getDouble(i),12);
break;
case FLOAT:
Numbers.append(sink,r.getFloat(i),4);
break;
case INT:
Numbers.append(sink,r.getInt(i));
break;
case STRING:
r.getStr(i,sink);
break;
case SYMBOL:
sink.put(r.getSym(i));
break;
case SHORT:
Numbers.append(sink,r.getShort(i));
break;
case LONG:
Numbers.append(sink,r.getLong(i));
break;
case BYTE:
Numbers.append(sink,r.get(i));
break;
case BOOLEAN:
sink.put(r.getBool(i) ? ""String_Node_Str"" : ""String_Node_Str"");
break;
default :
break;
}
}",0.9872659176029962
31443,"@SuppressFBWarnings({""String_Node_Str""}) @Override public void onFields(int line,CharSequence[] values,int hi){
  boolean append=true;
  try {
    JournalEntryWriter w=writer.entryWriter();
    for (int i=0; i < hi; i++) {
      if (Unsafe.arrayGet(values,i).length() == 0) {
        continue;
      }
      try {
switch (metadata.getQuick(i).importedType) {
case STRING:
          w.putStr(i,Unsafe.arrayGet(values,i));
        break;
case DOUBLE:
      w.putDouble(i,Numbers.parseDouble(Unsafe.arrayGet(values,i)));
    break;
case INT:
  w.putInt(i,Numbers.parseInt(Unsafe.arrayGet(values,i)));
break;
case FLOAT:
w.putFloat(i,Numbers.parseFloat(Unsafe.arrayGet(values,i)));
break;
case DATE_ISO:
w.putDate(i,Dates.parseDateTime(Unsafe.arrayGet(values,i)));
break;
case DATE_1:
w.putDate(i,Dates.parseDateTimeFmt1(Unsafe.arrayGet(values,i)));
break;
case DATE_2:
w.putDate(i,Dates.parseDateTimeFmt2(Unsafe.arrayGet(values,i)));
break;
case DATE_3:
w.putDate(i,Dates.parseDateTimeFmt3(Unsafe.arrayGet(values,i)));
break;
case SYMBOL:
w.putSym(i,Unsafe.arrayGet(values,i));
break;
case LONG:
w.putLong(i,Numbers.parseLong(Unsafe.arrayGet(values,i)));
break;
case BOOLEAN:
w.putBool(i,Chars.equalsIgnoreCase(Unsafe.arrayGet(values,i),""String_Node_Str""));
}
}
 catch (Exception e) {
errors.increment(i);
LOG.debug().$(""String_Node_Str"").$(line).$(',').$(i).$(""String_Node_Str"").$(metadata.getQuick(i).type).$(""String_Node_Str"").$(e.getMessage()).$();
append=false;
break;
}
}
if (append) {
w.append();
}
}
 catch (JournalException e) {
throw new JournalRuntimeException(e);
}
}","@Override public void onFields(int line,CharSequence[] values,int hi){
  boolean append=true;
  try {
    JournalEntryWriter w=writer.entryWriter();
    for (int i=0; i < hi; i++) {
      if (Unsafe.arrayGet(values,i).length() == 0) {
        continue;
      }
      try {
switch (metadata.getQuick(i).importedType) {
case STRING:
          w.putStr(i,Unsafe.arrayGet(values,i));
        break;
case DOUBLE:
      w.putDouble(i,Numbers.parseDouble(Unsafe.arrayGet(values,i)));
    break;
case INT:
  w.putInt(i,Numbers.parseInt(Unsafe.arrayGet(values,i)));
break;
case FLOAT:
w.putFloat(i,Numbers.parseFloat(Unsafe.arrayGet(values,i)));
break;
case DATE_ISO:
w.putDate(i,Dates.parseDateTime(Unsafe.arrayGet(values,i)));
break;
case DATE_1:
w.putDate(i,Dates.parseDateTimeFmt1(Unsafe.arrayGet(values,i)));
break;
case DATE_2:
w.putDate(i,Dates.parseDateTimeFmt2(Unsafe.arrayGet(values,i)));
break;
case DATE_3:
w.putDate(i,Dates.parseDateTimeFmt3(Unsafe.arrayGet(values,i)));
break;
case SYMBOL:
w.putSym(i,Unsafe.arrayGet(values,i));
break;
case LONG:
w.putLong(i,Numbers.parseLong(Unsafe.arrayGet(values,i)));
break;
case BOOLEAN:
w.putBool(i,Chars.equalsIgnoreCase(Unsafe.arrayGet(values,i),""String_Node_Str""));
break;
default :
break;
}
}
 catch (Exception e) {
errors.increment(i);
LOG.debug().$(""String_Node_Str"").$(line).$(',').$(i).$(""String_Node_Str"").$(metadata.getQuick(i).type).$(""String_Node_Str"").$(e.getMessage()).$();
append=false;
break;
}
}
if (append) {
w.append();
}
}
 catch (JournalException e) {
throw new JournalRuntimeException(e);
}
}",0.9792663476874004
31444,"@SuppressFBWarnings({""String_Node_Str""}) @Override public void onLineCount(int count){
  if (calcTypes(count,true) && !calcTypes(count - 1,false)) {
    for (int i=0; i < fieldCount; i++) {
      _metadata.getQuick(i).name=_headers.getQuick(i);
    }
    header=true;
  }
  if (!header) {
    for (int i=0; i < fieldCount; i++) {
      tempSink.clear();
      tempSink.put('f').put(i);
      _metadata.getQuick(i).name=tempSink.toString();
    }
  }
  if (importSchema != null) {
    ObjList<ImportedColumnMetadata> override=importSchema.getMetadata();
    for (int i=0, k=override.size(); i < k; i++) {
      ImportedColumnMetadata m=override.getQuick(i);
      if (m.columnIndex < fieldCount) {
        ImportedColumnMetadata im=_metadata.getQuick(m.columnIndex);
        im.importedType=m.importedType;
        im.type=m.type;
        im.size=m.size;
      }
    }
  }
}","@Override public void onLineCount(int count){
  if (calcTypes(count,true) && !calcTypes(count - 1,false)) {
    for (int i=0; i < fieldCount; i++) {
      _metadata.getQuick(i).name=_headers.getQuick(i);
    }
    header=true;
  }
  if (!header) {
    for (int i=0; i < fieldCount; i++) {
      tempSink.clear();
      tempSink.put('f').put(i);
      _metadata.getQuick(i).name=tempSink.toString();
    }
  }
  if (importSchema != null) {
    ObjList<ImportedColumnMetadata> override=importSchema.getMetadata();
    for (int i=0, k=override.size(); i < k; i++) {
      ImportedColumnMetadata m=override.getQuick(i);
      if (m.columnIndex < fieldCount) {
        ImportedColumnMetadata im=_metadata.getQuick(m.columnIndex);
        im.importedType=m.importedType;
        im.type=m.type;
        im.size=m.size;
      }
    }
  }
}",0.9759530791788856
31445,"/** 
 * computes the length of binary data speculatively. <p/> <p/> Our requirement is to create byte[] of the exact length to store the binary data. If we do this in a straight-forward way, it takes two passes over the data. Experiments show that this is a non-trivial overhead (35% or so is spent on the first pass in calculating the length.) <p/> <p/> So the approach here is that we compute the length speculatively, without looking at the whole contents. The obtained speculative value is never less than the actual length of the binary data, but it may be bigger. So if the speculation goes wrong, we'll pay the cost of reallocation and buffer copying. <p/> <p/> If the base64 text is tightly packed with no indentation nor illegal char (like what most web services produce), then the speculation of this method will be correct, so we get the performance benefit.
 */
private static int guessLength(String text){
  final int len=text.length();
  int j=len - 1;
  for (; j > -1; j--) {
    byte code=decodeMap[text.charAt(j)];
    if (code == PADDING) {
      continue;
    }
    if (code == -1) {
      return text.length() / 4 * 3;
    }
    break;
  }
  j++;
  int padSize=len - j;
  if (padSize > 2) {
    return text.length() / 4 * 3;
  }
  return text.length() / 4 * 3 - padSize;
}","/** 
 * computes the length of binary data speculatively. <p/> <p/> Our requirement is to create byte[] of the exact length to store the binary data. If we do this in a straight-forward way, it takes two passes over the data. Experiments show that this is a non-trivial overhead (35% or so is spent on the first pass in calculating the length.) <p/> <p/> So the approach here is that we compute the length speculatively, without looking at the whole contents. The obtained speculative value is never less than the actual length of the binary data, but it may be bigger. So if the speculation goes wrong, we'll pay the cost of reallocation and buffer copying. <p/> <p/> If the base64 text is tightly packed with no indentation nor illegal char (like what most web services produce), then the speculation of this method will be correct, so we get the performance benefit.
 */
private static int guessLength(String text){
  final int len=text.length();
  int j=len - 1;
  for (; j > -1; j--) {
    byte code=decodeMap[text.charAt(j)];
    if (code != PADDING) {
      if (code == -1) {
        return text.length() / 4 * 3;
      }
      break;
    }
  }
  j++;
  int padSize=len - j;
  if (padSize > 2) {
    return text.length() / 4 * 3;
  }
  return text.length() / 4 * 3 - padSize;
}",0.9868012422360248
31446,"@SuppressFBWarnings(""String_Node_Str"") @SuppressWarnings(""String_Node_Str"") public static void copyNonBlocking(ReadableByteChannel channel,ByteBuffer to,final int retryCount) throws DisconnectedChannelException, SlowReadableChannelException, EndOfChannelException {
  int r=to.remaining();
  int target=r;
  int retriesRemaining=retryCount;
  while (target > 0) {
    int result;
    try {
      result=channel.read(to);
    }
 catch (    SlowReadableChannelException e) {
      throw e;
    }
catch (    IOException e) {
      throw DisconnectedChannelException.INSTANCE;
    }
    if (result == 0 && target == r && Net.EOF()) {
      throw EndOfChannelException.INSTANCE;
    }
    if (result == 0 && target < r) {
      break;
    }
 else     if (--retriesRemaining < 0) {
      throw SlowReadableChannelException.INSTANCE;
    }
    target-=result;
  }
}","@SuppressFBWarnings(""String_Node_Str"") @SuppressWarnings(""String_Node_Str"") public static void copyNonBlocking(ReadableByteChannel channel,ByteBuffer to,final int retryCount) throws DisconnectedChannelException, SlowReadableChannelException, EndOfChannelException {
  int r=to.remaining();
  int target=r;
  int retriesRemaining=retryCount;
  while (target > 0) {
    int result;
    try {
      result=channel.read(to);
    }
 catch (    SlowReadableChannelException e) {
      throw e;
    }
catch (    IOException e) {
      throw DisconnectedChannelException.INSTANCE;
    }
    if (result == 0 && target == r && Net.eof()) {
      throw EndOfChannelException.INSTANCE;
    }
    if (result == 0 && target < r) {
      break;
    }
 else     if (--retriesRemaining < 0) {
      throw SlowReadableChannelException.INSTANCE;
    }
    target-=result;
  }
}",0.9965034965034965
31447,"private static long parseDateTimeFmt3(CharSequence seq,int lo,int lim) throws NumericException {
  int p=lo;
  int day=_int(seq,p,p+=2,lim);
  checkChar(seq,p++,lim,'/');
  int month=_int(seq,p,p+=2,lim);
  checkRange(month,1,12);
  checkChar(seq,p++,lim,'/');
  int year=_int(seq,p,p + 4,lim);
  boolean l=isLeapYear(year);
  checkRange(day,1,getDaysPerMonth(month,l));
  return yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS;
}","private static long parseDateTimeFmt3(CharSequence seq,int lo,int lim) throws NumericException {
  int p=lo;
  int day=int0(seq,p,p+=2,lim);
  checkChar(seq,p++,lim,'/');
  int month=int0(seq,p,p+=2,lim);
  checkRange(month,1,12);
  checkChar(seq,p++,lim,'/');
  int year=int0(seq,p,p + 4,lim);
  boolean l=isLeapYear(year);
  checkRange(day,1,getDaysPerMonth(month,l));
  return yearMillis(year,l) + monthOfYearMillis(month,l) + (day - 1) * DAY_MILLIS;
}",0.9736263736263736
31448,"@SuppressFBWarnings(""String_Node_Str"") public static <T>T free(T object){
  if (object instanceof Closeable) {
    try {
      ((Closeable)object).close();
      return null;
    }
 catch (    IOException e) {
      throw new Error(e);
    }
  }
  return object;
}","@SuppressFBWarnings(""String_Node_Str"") public static <T>T free(T object){
  if (object instanceof Closeable) {
    try {
      ((Closeable)object).close();
      return null;
    }
 catch (    IOException e) {
      throw new FatalError(e);
    }
  }
  return object;
}",0.9906191369606004
31449,"@SuppressWarnings(""String_Node_Str"") private static float parseFloat(CharSequence sequence,int p,int lim) throws NumericException {
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  if (negative) {
    p++;
  }
  if (p >= lim) {
    throw NumericException.INSTANCE;
  }
switch (sequence.charAt(p)) {
case 'N':
    return parseFloatConst(sequence,p,lim,NaN,Float.NaN);
case 'I':
  return parseFloatConst(sequence,p,lim,INFINITY,negative ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY);
}
int val=0;
int dp=-1;
int dpe=lim;
int exp=0;
out: for (int i=p; i < lim; i++) {
int c=sequence.charAt(i);
switch (c) {
case '.':
  dp=i;
continue;
case 'E':
case 'e':
exp=parseInt(sequence,i + 1,lim);
if (dpe == lim) {
dpe=i;
}
break out;
default :
if (c < '0' || c > '9') {
throw NumericException.INSTANCE;
}
if (val <= INT_OVERFLOW_MAX) {
val=(val << 3) + (val << 1) + (c - '0');
}
 else if (dpe == lim) {
dpe=i;
}
}
}
exp=dp == -1 ? exp : exp - (dpe - dp - 1);
if (exp > 38) {
exp=38;
}
 else if (exp < -38) {
exp=-38;
}
if (exp > 0) {
return (negative ? -val : val) * pow10f[exp];
}
 else {
return (negative ? -val : val) / pow10f[-exp];
}
}","@SuppressWarnings(""String_Node_Str"") private static float parseFloat(CharSequence sequence,int p,int lim) throws NumericException {
  if (lim == p) {
    throw NumericException.INSTANCE;
  }
  boolean negative=sequence.charAt(p) == '-';
  if (negative) {
    p++;
  }
  if (p >= lim) {
    throw NumericException.INSTANCE;
  }
switch (sequence.charAt(p)) {
case 'N':
    return parseFloatConst(sequence,p,lim,NaN,Float.NaN);
case 'I':
  return parseFloatConst(sequence,p,lim,INFINITY,negative ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY);
default :
break;
}
int val=0;
int dp=-1;
int dpe=lim;
int exp=0;
out: for (int i=p; i < lim; i++) {
int c=sequence.charAt(i);
switch (c) {
case '.':
dp=i;
continue;
case 'E':
case 'e':
exp=parseInt(sequence,i + 1,lim);
if (dpe == lim) {
dpe=i;
}
break out;
default :
if (c < '0' || c > '9') {
throw NumericException.INSTANCE;
}
if (val <= INT_OVERFLOW_MAX) {
val=(val << 3) + (val << 1) + (c - '0');
}
 else if (dpe == lim) {
dpe=i;
}
}
}
exp=dp == -1 ? exp : exp - (dpe - dp - 1);
if (exp > 38) {
exp=38;
}
 else if (exp < -38) {
exp=-38;
}
if (exp > 0) {
return (negative ? -val : val) * pow10f[exp];
}
 else {
return (negative ? -val : val) / pow10f[-exp];
}
}",0.9920997920997922
31450,"@SuppressFBWarnings(""String_Node_Str"") private static void loadLib(String lib){
  InputStream is=Os.class.getResourceAsStream(lib);
  if (is == null) {
    throw new Error(""String_Node_Str"" + lib + ""String_Node_Str"");
  }
  try {
    File tempLib=null;
    try {
      tempLib=File.createTempFile(lib,""String_Node_Str"");
      try (FileOutputStream out=new FileOutputStream(tempLib)){
        byte[] buf=new byte[4096];
        while (true) {
          int read=is.read(buf);
          if (read == -1) {
            break;
          }
          out.write(buf,0,read);
        }
      }
  finally {
        tempLib.deleteOnExit();
      }
      System.load(tempLib.getAbsolutePath());
    }
 catch (    IOException e) {
      throw new Error(""String_Node_Str"" + tempLib,e);
    }
  }
  finally {
    Misc.free(is);
  }
}","@SuppressFBWarnings(""String_Node_Str"") private static void loadLib(String lib){
  InputStream is=Os.class.getResourceAsStream(lib);
  if (is == null) {
    throw new FatalError(""String_Node_Str"" + lib + ""String_Node_Str"");
  }
  try {
    File tempLib=null;
    try {
      tempLib=File.createTempFile(lib,""String_Node_Str"");
      try (FileOutputStream out=new FileOutputStream(tempLib)){
        byte[] buf=new byte[4096];
        while (true) {
          int read=is.read(buf);
          if (read == -1) {
            break;
          }
          out.write(buf,0,read);
        }
      }
  finally {
        tempLib.deleteOnExit();
      }
      System.load(tempLib.getAbsolutePath());
    }
 catch (    IOException e) {
      throw new FatalError(""String_Node_Str"" + tempLib,e);
    }
  }
  finally {
    Misc.free(is);
  }
}",0.9939320388349514
31451,"@Override protected boolean runSerially(){
  boolean useful=false;
  final int n=kqueue.poll();
  int watermark=pending.size();
  final long timestamp=clock.getTicks();
  int offset=0;
  if (n > 0) {
    for (int i=0; i < n; i++) {
      kqueue.setOffset(offset);
      offset+=Kqueue.SIZEOF_KEVENT;
      int fd=kqueue.getFd();
      if (fd == socketFd) {
        long _fd=accept();
        if (_fd < 0) {
          continue;
        }
        addPending(_fd,timestamp);
      }
 else {
        int row=findPending(fd,kqueue.getData());
        if (row < 0) {
          LOG.error().$(""String_Node_Str"").$(fd).$();
          continue;
        }
        long cursor=ioSequence.nextBully();
        IOEvent evt=ioQueue.get(cursor);
        evt.context=pending.get(row);
        evt.status=kqueue.getFilter() == Kqueue.EVFILT_READ ? ChannelStatus.READ : ChannelStatus.WRITE;
        ioSequence.done(cursor);
        LOG.debug().$(""String_Node_Str"").$(kqueue.getFilter()).$(""String_Node_Str"").$(fd).$();
        pending.deleteRow(row);
        watermark--;
      }
    }
    if (watermark < pending.size()) {
      enqueuePending(watermark);
    }
    useful=true;
  }
  long deadline=timestamp - timeout;
  if (pending.size() > 0 && pending.get(0,0) < deadline) {
    processIdleConnections(deadline);
    useful=true;
  }
  return processRegistrations(timestamp) || useful;
}","@Override protected boolean runSerially(){
  boolean useful=false;
  final int n=kqueue.poll();
  int watermark=pending.size();
  final long timestamp=clock.getTicks();
  int offset=0;
  if (n > 0) {
    for (int i=0; i < n; i++) {
      kqueue.setOffset(offset);
      offset+=Kqueue.SIZEOF_KEVENT;
      int fd=kqueue.getFd();
      if (fd == socketFd) {
        long _fd=accept();
        if (_fd < 0) {
          continue;
        }
        addPending(_fd,timestamp);
      }
 else {
        int row=findPending(fd,kqueue.getData());
        if (row < 0) {
          LOG.error().$(""String_Node_Str"").$(fd).$();
          continue;
        }
        if (kqueue.getFlags() == Kqueue.EV_EOF) {
          disconnect(pending.get(row),DisconnectReason.PEER);
        }
 else {
          long cursor=ioSequence.nextBully();
          IOEvent evt=ioQueue.get(cursor);
          evt.context=pending.get(row);
          evt.status=kqueue.getFilter() == Kqueue.EVFILT_READ ? ChannelStatus.READ : ChannelStatus.WRITE;
          ioSequence.done(cursor);
          LOG.debug().$(""String_Node_Str"").$(kqueue.getFilter()).$(""String_Node_Str"").$(fd).$();
        }
        pending.deleteRow(row);
        watermark--;
      }
    }
    if (watermark < pending.size()) {
      enqueuePending(watermark);
    }
    useful=true;
  }
  long deadline=timestamp - timeout;
  if (pending.size() > 0 && pending.get(0,0) < deadline) {
    processIdleConnections(deadline);
    useful=true;
  }
  return processRegistrations(timestamp) || useful;
}",0.9475500345065564
31452,"@Override protected boolean runSerially(){
  int count=select(readFdSet.address,writeFdSet.address,0);
  if (count < 0) {
    LOG.error().$(""String_Node_Str"").$(Os.errno()).$();
    return false;
  }
  final long timestamp=System.currentTimeMillis();
  boolean useful=false;
  fds.clear();
  if (count > 0) {
    queryFdSets(timestamp);
    useful=true;
  }
  useful=processRegistrations(timestamp) | useful;
  int readFdCount=0;
  int writeFdCount=0;
  readFdSet.reset();
  writeFdSet.reset();
  long deadline=timestamp - timeout;
  for (int i=0, n=pending.size(); i < n; ) {
    long ts=pending.get(i,M_TIMESTAMP);
    long fd=pending.get(i,M_FD);
    int _new_op=fds.get(fd);
    if (_new_op == -1) {
      if (ts < deadline && fd != socketFd) {
        disconnect(pending.get(i),DisconnectReason.IDLE);
        pending.deleteRow(i);
        n--;
        useful=true;
        continue;
      }
      ChannelStatus op=ChannelStatus.values()[(int)pending.get(i,M_OPERATION)];
switch (op) {
case READ:
        readFdSet.add(fd);
      readFdCount++;
    i++;
  break;
case WRITE:
writeFdSet.add(fd);
writeFdCount++;
i++;
break;
case DISCONNECTED:
disconnect(pending.get(i),DisconnectReason.SILLY);
pending.deleteRow(i);
n--;
useful=true;
break;
case EOF:
disconnect(pending.get(i),DisconnectReason.PEER);
pending.deleteRow(i);
n--;
useful=true;
break;
default :
break;
}
}
 else {
final IOContext context=pending.get(i);
if ((_new_op & FD_READ) > 0) {
enqueue(context,ChannelStatus.READ);
}
if ((_new_op & FD_WRITE) > 0) {
enqueue(context,ChannelStatus.WRITE);
}
pending.deleteRow(i);
n--;
}
}
readFdSet.setCount(readFdCount);
writeFdSet.setCount(writeFdCount);
return useful;
}","@Override protected boolean runSerially(){
  int count=select(readFdSet.address,writeFdSet.address,0);
  if (count < 0) {
    LOG.error().$(""String_Node_Str"").$(Os.errno()).$();
    return false;
  }
  final long timestamp=System.currentTimeMillis();
  boolean useful=false;
  fds.clear();
  if (count > 0) {
    queryFdSets(timestamp);
    useful=true;
  }
  useful=processRegistrations(timestamp) | useful;
  int readFdCount=0;
  int writeFdCount=0;
  readFdSet.reset();
  writeFdSet.reset();
  long deadline=timestamp - timeout;
  for (int i=0, n=pending.size(); i < n; ) {
    long ts=pending.get(i,M_TIMESTAMP);
    long fd=pending.get(i,M_FD);
    int _new_op=fds.get(fd);
    if (_new_op == -1) {
      if (ts < deadline && fd != socketFd) {
        disconnect(pending.get(i),DisconnectReason.IDLE);
        pending.deleteRow(i);
        n--;
        useful=true;
        continue;
      }
      ChannelStatus op=ChannelStatus.values()[(int)pending.get(i,M_OPERATION)];
switch (op) {
case READ:
        readFdSet.add(fd);
      readFdCount++;
    i++;
  break;
case WRITE:
writeFdSet.add(fd);
writeFdCount++;
i++;
break;
case DISCONNECTED:
disconnect(pending.get(i),DisconnectReason.SILLY);
pending.deleteRow(i);
n--;
useful=true;
break;
case EOF:
disconnect(pending.get(i),DisconnectReason.PEER);
pending.deleteRow(i);
n--;
useful=true;
break;
default :
break;
}
}
 else {
final IOContext context=pending.get(i);
if ((_new_op & FD_READ) > 0 && Net.available(fd) == 0) {
disconnect(context,DisconnectReason.PEER);
}
 else {
if ((_new_op & FD_READ) > 0) {
enqueue(context,ChannelStatus.READ);
}
if ((_new_op & FD_WRITE) > 0) {
enqueue(context,ChannelStatus.WRITE);
}
}
pending.deleteRow(i);
n--;
}
}
readFdSet.setCount(readFdCount);
writeFdSet.setCount(writeFdCount);
return useful;
}",0.9677047289504036
31453,"public CharSequence optionTok(){
  while (hasNext()) {
    CharSequence cs=next();
    if (!Chars.equals(cs,' ')) {
      return cs;
    }
  }
  return null;
}","public CharSequence optionTok(){
  while (hasNext()) {
    CharSequence cs=next();
    if (!whitespace.contains(cs)) {
      return cs;
    }
  }
  return null;
}",0.9221183800623052
31454,"private CharSequence optionTok(){
  while (lexer.hasNext()) {
    CharSequence cs=lexer.next();
    if (!whitespace.contains(cs)) {
      return cs;
    }
  }
  return null;
}","private CharSequence optionTok(){
  return lexer.optionTok();
}",0.4117647058823529
31455,"@Override public long availableIndex(long lo){
  for (int i=0, n=this.barriers.length; i < n; i++) {
    long cursor=Unsafe.arrayGet(this.barriers,i).availableIndex(lo);
    lo=lo < cursor ? lo : cursor;
  }
  return lo;
}","@SuppressFBWarnings(""String_Node_Str"") @Override public long availableIndex(long lo){
  Barrier[] barriers=this.barriers;
  for (int i=0, n=barriers.length; i < n; i++) {
    long cursor=Unsafe.arrayGet(barriers,i).availableIndex(lo);
    lo=lo < cursor ? lo : cursor;
  }
  return lo;
}",0.8330058939096268
31456,"@Test public void testPackageHierarchy() throws Exception {
  final File a=temp.newFile();
  final File b=temp.newFile();
  try (LoggerFactory factory=new LoggerFactory()){
    factory.add(new LogWriterConfig(""String_Node_Str"",LoggerFactory.LOG_LEVEL_INFO,new LogWriterFactory(){
      @Override public LogWriter createLogWriter(      RingQueue<LogRecordSink> ring,      Sequence seq){
        LogFileWriter w=new LogFileWriter(ring,seq);
        w.setLocation(a.getAbsolutePath());
        return w;
      }
    }
,LoggerFactory.DEFAULT_QUEUE_DEPTH,LoggerFactory.DEFAULT_MSG_SIZE));
    factory.add(new LogWriterConfig(""String_Node_Str"",LoggerFactory.LOG_LEVEL_INFO,new LogWriterFactory(){
      @Override public LogWriter createLogWriter(      RingQueue<LogRecordSink> ring,      Sequence seq){
        LogFileWriter w=new LogFileWriter(ring,seq);
        w.setLocation(b.getAbsolutePath());
        return w;
      }
    }
,LoggerFactory.DEFAULT_QUEUE_DEPTH,LoggerFactory.DEFAULT_MSG_SIZE));
    factory.bind();
    factory.startThread();
    AsyncLogger logger=factory.create(""String_Node_Str"");
    logger.xinfo()._(""String_Node_Str"").$();
    AsyncLogger logger1=factory.create(""String_Node_Str"");
    logger1.xinfo()._(""String_Node_Str"").$();
    Assert.assertEquals(""String_Node_Str"" + Misc.EOL,Files.readStringFromFile(a));
    Assert.assertEquals(""String_Node_Str"" + Misc.EOL,Files.readStringFromFile(b));
  }
 }","@Test public void testPackageHierarchy() throws Exception {
  final File a=temp.newFile();
  final File b=temp.newFile();
  try (LoggerFactory factory=new LoggerFactory()){
    factory.add(new LogWriterConfig(""String_Node_Str"",LoggerFactory.LOG_LEVEL_INFO,new LogWriterFactory(){
      @Override public LogWriter createLogWriter(      RingQueue<LogRecordSink> ring,      Sequence seq){
        LogFileWriter w=new LogFileWriter(ring,seq);
        w.setLocation(a.getAbsolutePath());
        return w;
      }
    }
,LoggerFactory.DEFAULT_QUEUE_DEPTH,LoggerFactory.DEFAULT_MSG_SIZE));
    factory.add(new LogWriterConfig(""String_Node_Str"",LoggerFactory.LOG_LEVEL_INFO,new LogWriterFactory(){
      @Override public LogWriter createLogWriter(      RingQueue<LogRecordSink> ring,      Sequence seq){
        LogFileWriter w=new LogFileWriter(ring,seq);
        w.setLocation(b.getAbsolutePath());
        return w;
      }
    }
,LoggerFactory.DEFAULT_QUEUE_DEPTH,LoggerFactory.DEFAULT_MSG_SIZE));
    factory.bind();
    factory.startThread();
    AsyncLogger logger=factory.create(""String_Node_Str"");
    logger.xinfo()._(""String_Node_Str"").$();
    AsyncLogger logger1=factory.create(""String_Node_Str"");
    logger1.xinfo()._(""String_Node_Str"").$();
    Thread.sleep(100);
    Assert.assertEquals(""String_Node_Str"" + Misc.EOL,Files.readStringFromFile(a));
    Assert.assertEquals(""String_Node_Str"" + Misc.EOL,Files.readStringFromFile(b));
  }
 }",0.9919776770143006
31457,"@Test public void testMultiplexing() throws Exception {
  final File x=temp.newFile();
  final File y=temp.newFile();
  try (LoggerFactory factory=new LoggerFactory()){
    factory.add(new LogWriterConfig(LoggerFactory.LOG_LEVEL_INFO,new LogWriterFactory(){
      @Override public LogWriter createLogWriter(      RingQueue<LogRecordSink> ring,      Sequence seq){
        LogFileWriter w=new LogFileWriter(ring,seq);
        w.setLocation(x.getAbsolutePath());
        return w;
      }
    }
,LoggerFactory.DEFAULT_QUEUE_DEPTH,LoggerFactory.DEFAULT_MSG_SIZE));
    factory.add(new LogWriterConfig(LoggerFactory.LOG_LEVEL_INFO,new LogWriterFactory(){
      @Override public LogWriter createLogWriter(      RingQueue<LogRecordSink> ring,      Sequence seq){
        LogFileWriter w=new LogFileWriter(ring,seq);
        w.setLocation(y.getAbsolutePath());
        return w;
      }
    }
,LoggerFactory.DEFAULT_QUEUE_DEPTH,LoggerFactory.DEFAULT_MSG_SIZE));
    factory.bind();
    factory.startThread();
    try {
      AsyncLogger logger=factory.create(""String_Node_Str"");
      for (int i=0; i < 100000; i++) {
        logger.xinfo()._(""String_Node_Str"")._(i).$();
      }
      Assert.assertTrue(x.length() > 0);
      TestUtils.assertEquals(x,y);
    }
  finally {
      factory.haltThread();
    }
  }
 }","@Test public void testMultiplexing() throws Exception {
  final File x=temp.newFile();
  final File y=temp.newFile();
  try (LoggerFactory factory=new LoggerFactory()){
    factory.add(new LogWriterConfig(LoggerFactory.LOG_LEVEL_INFO,new LogWriterFactory(){
      @Override public LogWriter createLogWriter(      RingQueue<LogRecordSink> ring,      Sequence seq){
        LogFileWriter w=new LogFileWriter(ring,seq);
        w.setLocation(x.getAbsolutePath());
        return w;
      }
    }
,LoggerFactory.DEFAULT_QUEUE_DEPTH,LoggerFactory.DEFAULT_MSG_SIZE));
    factory.add(new LogWriterConfig(LoggerFactory.LOG_LEVEL_INFO,new LogWriterFactory(){
      @Override public LogWriter createLogWriter(      RingQueue<LogRecordSink> ring,      Sequence seq){
        LogFileWriter w=new LogFileWriter(ring,seq);
        w.setLocation(y.getAbsolutePath());
        return w;
      }
    }
,LoggerFactory.DEFAULT_QUEUE_DEPTH,LoggerFactory.DEFAULT_MSG_SIZE));
    factory.bind();
    factory.startThread();
    try {
      AsyncLogger logger=factory.create(""String_Node_Str"");
      for (int i=0; i < 100000; i++) {
        logger.xinfo()._(""String_Node_Str"")._(i).$();
      }
      Thread.sleep(100);
      Assert.assertTrue(x.length() > 0);
      TestUtils.assertEquals(x,y);
    }
  finally {
      factory.haltThread();
    }
  }
 }",0.9905267146646456
31458,"@SuppressWarnings(""String_Node_Str"") @SuppressFBWarnings({""String_Node_Str"",""String_Node_Str""}) private RecordSource<? extends Record> compileSingleJournal(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  if (model.getLimitLo() != null || model.getLimitHi() != null) {
    analyseLimit(model);
  }
  RecordMetadata metadata=model.getMetadata();
  JournalMetadata journalMetadata;
  if (metadata == null) {
    journalMetadata=collectJournalMetadata(model,factory);
  }
 else   if (metadata instanceof JournalMetadata) {
    journalMetadata=(JournalMetadata)metadata;
  }
 else {
    throw new ParserException(0,""String_Node_Str"");
  }
  if (model.getAlias() != null) {
    journalMetadata.setAlias(model.getAlias().token);
  }
 else {
    journalMetadata.setAlias(model.getJournalName().token);
  }
  PartitionSource ps=new JournalPartitionSource(journalMetadata,true);
  RowSource rs=null;
  String latestByCol=null;
  RecordColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.NodeType.LITERAL) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    int colIndex=journalMetadata.getColumnIndexQuiet(latestByNode.token);
    if (colIndex == -1) {
      throw new InvalidColumnException(latestByNode.position);
    }
    latestByMetadata=journalMetadata.getColumnQuick(colIndex);
    ColumnType type=latestByMetadata.getType();
    if (type != ColumnType.SYMBOL && type != ColumnType.STRING && type != ColumnType.INT) {
      throw new ParserException(latestByNode.position,""String_Node_Str"" + type);
    }
    if (!latestByMetadata.isIndexed()) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    latestByCol=latestByNode.token;
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=queryFilterAnalyser.extract(where,journalMetadata,latestByCol);
    VirtualColumn filter=im.filter != null ? createVirtualColumn(im.filter,journalMetadata,model.getColumnNameHistogram()) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw new ParserException(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(journalMetadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (journalMetadata.getColumn(im.keyColumn).getType()) {
case SYMBOL:
            rs=buildRowSourceForSym(im);
          break;
case STRING:
        rs=buildRowSourceForStr(im);
      break;
case INT:
    rs=buildRowSourceForInt(im);
}
}
if (filter != null) {
rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
if (im.keyColumn != null && im.keyValuesIsLambda) {
int lambdaColIndex;
RecordSource<? extends Record> lambda=compileSourceInternal(im.keyValues.get(0));
RecordMetadata m=lambda.getMetadata();
switch (m.getColumnCount()) {
case 0:
  throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
case 1:
lambdaColIndex=0;
break;
default :
lambdaColIndex=m.getColumnIndexQuiet(latestByCol);
if (lambdaColIndex == -1) {
throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
break;
}
ColumnType lambdaColType=m.getColumn(lambdaColIndex).getType();
mutableSig.setParamCount(2).setName(""String_Node_Str"").paramType(0,latestByMetadata.getType(),true).paramType(1,lambdaColType,false);
LatestByLambdaRowSourceFactory fact=LAMBDA_ROW_SOURCE_FACTORIES.get(mutableSig);
if (fact != null) {
rs=fact.newInstance(latestByCol,lambda,lambdaColIndex,filter);
}
 else {
throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
}
 else {
switch (latestByMetadata.getType()) {
case SYMBOL:
if (im.keyColumn != null) {
rs=new KvIndexSymListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
rs=new KvIndexSymAllHeadRowSource(latestByCol,filter);
}
break;
case STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
break;
case INT:
if (im.keyColumn != null) {
rs=new KvIndexIntListHeadRowSource(latestByCol,toIntHashSet(im),filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.getType()) {
case SYMBOL:
rs=new KvIndexSymAllHeadRowSource(latestByCol,null);
break;
default :
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
return new JournalSource(ps,rs == null ? new AllRowSource() : rs);
}","@SuppressWarnings(""String_Node_Str"") @SuppressFBWarnings({""String_Node_Str"",""String_Node_Str""}) private RecordSource<? extends Record> compileSingleJournal(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  RecordMetadata metadata=model.getMetadata();
  JournalMetadata journalMetadata;
  if (metadata == null) {
    journalMetadata=collectJournalMetadata(model,factory);
  }
 else   if (metadata instanceof JournalMetadata) {
    journalMetadata=(JournalMetadata)metadata;
  }
 else {
    throw new ParserException(0,""String_Node_Str"");
  }
  if (model.getAlias() != null) {
    journalMetadata.setAlias(model.getAlias().token);
  }
 else {
    journalMetadata.setAlias(model.getJournalName().token);
  }
  PartitionSource ps=new JournalPartitionSource(journalMetadata,true);
  RowSource rs=null;
  String latestByCol=null;
  RecordColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.NodeType.LITERAL) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    int colIndex=journalMetadata.getColumnIndexQuiet(latestByNode.token);
    if (colIndex == -1) {
      throw new InvalidColumnException(latestByNode.position);
    }
    latestByMetadata=journalMetadata.getColumnQuick(colIndex);
    ColumnType type=latestByMetadata.getType();
    if (type != ColumnType.SYMBOL && type != ColumnType.STRING && type != ColumnType.INT) {
      throw new ParserException(latestByNode.position,""String_Node_Str"" + type);
    }
    if (!latestByMetadata.isIndexed()) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    latestByCol=latestByNode.token;
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=queryFilterAnalyser.extract(where,journalMetadata,latestByCol);
    VirtualColumn filter=im.filter != null ? createVirtualColumn(im.filter,journalMetadata,model.getColumnNameHistogram()) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw new ParserException(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(journalMetadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (journalMetadata.getColumn(im.keyColumn).getType()) {
case SYMBOL:
            rs=buildRowSourceForSym(im);
          break;
case STRING:
        rs=buildRowSourceForStr(im);
      break;
case INT:
    rs=buildRowSourceForInt(im);
}
}
if (filter != null) {
rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
if (im.keyColumn != null && im.keyValuesIsLambda) {
int lambdaColIndex;
RecordSource<? extends Record> lambda=compileSourceInternal(im.keyValues.get(0));
RecordMetadata m=lambda.getMetadata();
switch (m.getColumnCount()) {
case 0:
  throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
case 1:
lambdaColIndex=0;
break;
default :
lambdaColIndex=m.getColumnIndexQuiet(latestByCol);
if (lambdaColIndex == -1) {
throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
break;
}
ColumnType lambdaColType=m.getColumn(lambdaColIndex).getType();
mutableSig.setParamCount(2).setName(""String_Node_Str"").paramType(0,latestByMetadata.getType(),true).paramType(1,lambdaColType,false);
LatestByLambdaRowSourceFactory fact=LAMBDA_ROW_SOURCE_FACTORIES.get(mutableSig);
if (fact != null) {
rs=fact.newInstance(latestByCol,lambda,lambdaColIndex,filter);
}
 else {
throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
}
 else {
switch (latestByMetadata.getType()) {
case SYMBOL:
if (im.keyColumn != null) {
rs=new KvIndexSymListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
rs=new KvIndexSymAllHeadRowSource(latestByCol,filter);
}
break;
case STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
break;
case INT:
if (im.keyColumn != null) {
rs=new KvIndexIntListHeadRowSource(latestByCol,toIntHashSet(im),filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.getType()) {
case SYMBOL:
rs=new KvIndexSymAllHeadRowSource(latestByCol,null);
break;
default :
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
return new JournalSource(ps,rs == null ? new AllRowSource() : rs);
}",0.9909618494910094
31459,"private RecordSource<? extends Record> compileSingleOrSubQuery(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  return model.getJournalName() != null ? compileSingleJournal(model,factory) : compileSubQuery(model,factory);
}","private RecordSource<? extends Record> compileSingleOrSubQuery(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  if (model.getLimitLo() != null || model.getLimitHi() != null) {
    analyseLimit(model);
  }
  return model.getJournalName() != null ? compileSingleJournal(model,factory) : compileSubQuery(model,factory);
}",0.7910685805422647
31460,"private CharSequence optionTok(){
  while (lexer.hasNext()) {
    CharSequence cs=lexer.next();
    if (!Chars.equals(cs,' ')) {
      return cs;
    }
  }
  return null;
}","private CharSequence optionTok(){
  while (lexer.hasNext()) {
    CharSequence cs=lexer.next();
    if (!whitespace.contains(cs)) {
      return cs;
    }
  }
  return null;
}",0.9279538904899136
31461,"@Test @Ignore public void testJsonEncodeControlChars() throws Exception {
  generateJournal();
  HttpServer server=new HttpServer(new HttpServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new JsonHandler(factory));
    }
  }
);
  server.start();
  try {
    String newLineStr=""String_Node_Str"";
    String query=""String_Node_Str"" + newLineStr + ""String_Node_Str"";
    QueryResponse queryResponse=download(""String_Node_Str"" + newLineStr + ""String_Node_Str"");
    Assert.assertEquals(query,queryResponse.query);
    Assert.assertEquals(newLineStr,queryResponse.result[0].id);
  }
  finally {
    server.halt();
  }
}","@Test public void testJsonEncodeControlChars() throws Exception {
  generateJournal();
  HttpServer server=new HttpServer(new HttpServerConfiguration(),new SimpleUrlMatcher(){
{
      put(""String_Node_Str"",new JsonHandler(factory));
    }
  }
);
  server.start();
  try {
    String newLineStr=""String_Node_Str"";
    String query=""String_Node_Str"" + newLineStr + ""String_Node_Str"";
    QueryResponse queryResponse=download(""String_Node_Str"" + newLineStr + ""String_Node_Str"");
    Assert.assertEquals(query,queryResponse.query);
    Assert.assertEquals(newLineStr,queryResponse.result[0].id);
  }
  finally {
    server.halt();
  }
}",0.9937106918238994
31462,"@Override public void alert(){
  signal();
}","@Override public void alert(){
  alerted=true;
  signal();
}",0.8461538461538461
31463,"@SuppressFBWarnings(""String_Node_Str"") @Override public void await(){
  lock.lock();
  try {
    condition.awaitUninterruptibly();
  }
  finally {
    lock.unlock();
  }
}","@SuppressFBWarnings(""String_Node_Str"") @Override public void await(){
  lock.lock();
  try {
    if (alerted) {
      throw AlertedException.INSTANCE;
    }
    condition.awaitUninterruptibly();
  }
  finally {
    lock.unlock();
  }
}",0.7881773399014779
31464,"@SuppressFBWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void await(){
  lock.lock();
  try {
    if (!condition.await(time,unit)) {
      throw TimeoutException.INSTANCE;
    }
  }
 catch (  InterruptedException e) {
    throw new JournalRuntimeException(e);
  }
 finally {
    lock.unlock();
  }
}","@SuppressFBWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void await(){
  lock.lock();
  try {
    if (alerted) {
      throw AlertedException.INSTANCE;
    }
    if (!condition.await(time,unit)) {
      throw TimeoutException.INSTANCE;
    }
  }
 catch (  InterruptedException e) {
    throw new JournalRuntimeException(e);
  }
 finally {
    lock.unlock();
  }
}",0.78
31465,"@SuppressWarnings(""String_Node_Str"") public FormatParser of(long address,int len){
  long lim=address + len;
  long p=address;
  boolean suspended=false;
  int line=0;
  int comma=0;
  int pipe=0;
  int tab=0;
  int _comma=0;
  int _pipe=0;
  int _tab=0;
  commas.clear();
  pipes.clear();
  tabs.clear();
  this.avgRecLen=0;
  this.stdDev=Double.POSITIVE_INFINITY;
  this.format=null;
  while (p < lim) {
    char b=(char)Unsafe.getUnsafe().getByte(p++);
    if (suspended && b != '""') {
      continue;
    }
switch (b) {
case ',':
      comma++;
    break;
case '|':
  pipe++;
break;
case '\t':
tab++;
break;
case '""':
suspended=!suspended;
break;
case '\n':
line++;
commas.add(comma - _comma);
pipes.add(pipe - _pipe);
tabs.add(tab - _tab);
_comma=comma;
_pipe=pipe;
_tab=tab;
break;
default :
break;
}
}
if (line == 0) {
return this;
}
this.avgRecLen=len / line;
heap.clear();
heap.add(TextFileFormat.CSV.ordinal(),comma);
heap.add(TextFileFormat.PIPE.ordinal(),pipe);
heap.add(TextFileFormat.TAB.ordinal(),tab);
this.format=TextFileFormat.values()[heap.peekBottom()];
IntList test;
switch (format) {
case CSV:
test=commas;
break;
case PIPE:
test=pipes;
break;
case TAB:
test=tabs;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + format);
}
double temp;
int n=test.size();
if (n == 0) {
format=null;
return this;
}
temp=0;
for (int i=0; i < n; i++) {
temp+=test.getQuick(i);
}
double mean=temp / n;
temp=0;
for (int i=0; i < n; i++) {
int v=test.getQuick(i);
temp+=(mean - v) * (mean - v);
}
this.stdDev=Math.sqrt(temp / n);
return this;
}","@SuppressWarnings(""String_Node_Str"") public FormatParser of(long address,int len){
  long lim=address + len;
  long p=address;
  boolean suspended=false;
  int line=0;
  int comma=0;
  int pipe=0;
  int tab=0;
  int _comma=0;
  int _pipe=0;
  int _tab=0;
  commas.clear();
  pipes.clear();
  tabs.clear();
  this.avgRecLen=0;
  this.stdDev=Double.POSITIVE_INFINITY;
  this.format=null;
  while (p < lim) {
    char b=(char)Unsafe.getUnsafe().getByte(p++);
    if (suspended && b != '""') {
      continue;
    }
switch (b) {
case ',':
      comma++;
    break;
case '|':
  pipe++;
break;
case '\t':
tab++;
break;
case '""':
suspended=!suspended;
break;
case '\n':
line++;
commas.add(comma - _comma);
pipes.add(pipe - _pipe);
tabs.add(tab - _tab);
_comma=comma;
_pipe=pipe;
_tab=tab;
break;
default :
break;
}
}
if (comma > _comma || pipe > _pipe || tab > _tab) {
line++;
commas.add(comma - _comma);
pipes.add(pipe - _pipe);
tabs.add(tab - _tab);
}
if (line == 0) {
return this;
}
this.avgRecLen=len / line;
heap.clear();
heap.add(TextFileFormat.CSV.ordinal(),comma);
heap.add(TextFileFormat.PIPE.ordinal(),pipe);
heap.add(TextFileFormat.TAB.ordinal(),tab);
this.format=TextFileFormat.values()[heap.peekBottom()];
IntList test;
switch (format) {
case CSV:
test=commas;
break;
case PIPE:
test=pipes;
break;
case TAB:
test=tabs;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + format);
}
double temp;
int n=test.size();
if (n == 0) {
format=null;
return this;
}
temp=0;
for (int i=0; i < n; i++) {
temp+=test.getQuick(i);
}
double mean=temp / n;
temp=0;
for (int i=0; i < n; i++) {
int v=test.getQuick(i);
temp+=(mean - v) * (mean - v);
}
this.stdDev=Math.sqrt(temp / n);
return this;
}",0.9581423770241368
31466,"@SuppressFBWarnings({""String_Node_Str""}) @Override public void onFields(int line,CharSequence[] values,int hi){
  try {
    JournalEntryWriter w=writer.entryWriter();
    for (int i=0; i < hi; i++) {
      if (Unsafe.arrayGet(values,i).length() == 0) {
        continue;
      }
      try {
switch (metadata.getQuick(i).importedType) {
case STRING:
          w.putStr(i,Unsafe.arrayGet(values,i));
        break;
case DOUBLE:
      w.putDouble(i,Numbers.parseDoubleQuiet(Unsafe.arrayGet(values,i)));
    break;
case INT:
  w.putInt(i,Numbers.parseIntQuiet(Unsafe.arrayGet(values,i)));
break;
case FLOAT:
w.putFloat(i,Numbers.parseFloatQuiet(Unsafe.arrayGet(values,i)));
break;
case DATE_ISO:
w.putDate(i,Dates.parseDateTimeQuiet(Unsafe.arrayGet(values,i)));
break;
case DATE_1:
w.putDate(i,Dates.parseDateTimeFmt1Quiet(Unsafe.arrayGet(values,i)));
break;
case DATE_2:
w.putDate(i,Dates.parseDateTimeFmt2Quiet(Unsafe.arrayGet(values,i)));
break;
case DATE_3:
w.putDate(i,Dates.parseDateTimeFmt3Quiet(Unsafe.arrayGet(values,i)));
break;
case SYMBOL:
w.putSym(i,Unsafe.arrayGet(values,i));
break;
case LONG:
w.putLong(i,Numbers.parseLongQuiet(Unsafe.arrayGet(values,i)));
break;
case BOOLEAN:
w.putBool(i,Chars.equalsIgnoreCase(Unsafe.arrayGet(values,i),""String_Node_Str""));
}
}
 catch (Exception e) {
LOGGER.info(""String_Node_Str"",line,i,metadata.getQuick(i).type,e.getMessage());
break;
}
}
w.append();
}
 catch (JournalException e) {
throw new JournalRuntimeException(e);
}
}","@SuppressFBWarnings({""String_Node_Str""}) @Override public void onFields(int line,CharSequence[] values,int hi){
  try {
    JournalEntryWriter w=writer.entryWriter();
    for (int i=0; i < hi; i++) {
      if (Unsafe.arrayGet(values,i).length() == 0) {
        continue;
      }
      try {
switch (metadata.getQuick(i).importedType) {
case STRING:
          w.putStr(i,Unsafe.arrayGet(values,i));
        break;
case DOUBLE:
      w.putDouble(i,Numbers.parseDouble(Unsafe.arrayGet(values,i)));
    break;
case INT:
  w.putInt(i,Numbers.parseInt(Unsafe.arrayGet(values,i)));
break;
case FLOAT:
w.putFloat(i,Numbers.parseFloat(Unsafe.arrayGet(values,i)));
break;
case DATE_ISO:
w.putDate(i,Dates.parseDateTime(Unsafe.arrayGet(values,i)));
break;
case DATE_1:
w.putDate(i,Dates.parseDateTimeFmt1(Unsafe.arrayGet(values,i)));
break;
case DATE_2:
w.putDate(i,Dates.parseDateTimeFmt2(Unsafe.arrayGet(values,i)));
break;
case DATE_3:
w.putDate(i,Dates.parseDateTimeFmt3(Unsafe.arrayGet(values,i)));
break;
case SYMBOL:
w.putSym(i,Unsafe.arrayGet(values,i));
break;
case LONG:
w.putLong(i,Numbers.parseLong(Unsafe.arrayGet(values,i)));
break;
case BOOLEAN:
w.putBool(i,Chars.equalsIgnoreCase(Unsafe.arrayGet(values,i),""String_Node_Str""));
}
}
 catch (Exception e) {
errors.increment(i);
LOGGER.debug(""String_Node_Str"",line,i,metadata.getQuick(i).type,e.getMessage());
break;
}
}
w.append();
}
 catch (JournalException e) {
throw new JournalRuntimeException(e);
}
}",0.97612551159618
31467,"@Override public void onMetadata(ObjList<ImportedColumnMetadata> metadata){
  if (writer == null) {
    try {
      writer=factory.bulkWriter(new JournalStructure(location,this.metadata=metadata));
    }
 catch (    JournalException e) {
      throw new JournalRuntimeException(e);
    }
  }
}","@Override public void onMetadata(ObjList<ImportedColumnMetadata> metadata){
  if (writer == null) {
    try {
      writer=factory.bulkWriter(new JournalStructure(location,this.metadata=metadata));
      errors.seed(metadata.size(),0);
    }
 catch (    JournalException e) {
      throw new JournalRuntimeException(e);
    }
  }
}",0.939102564102564
31468,"public Response(int headerBufferSize,int contentBufferSize){
  if (headerBufferSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (contentBufferSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int sz=Numbers.ceilPow2(contentBufferSize);
  this.out=ByteBuffer.allocateDirect(sz);
  this.hb=new ResponseHeaderBuffer(headerBufferSize);
  this.chunkHeader=ByteBuffer.allocateDirect(8 + 2 * EOL.length());
  this.chunkSink=new DirectUnboundedAnsiSink(((DirectBuffer)chunkHeader).address());
  this.chunkSink.put(EOL);
  this.outPtr=this._wptr=((DirectBuffer)out).address();
  this.limit=outPtr + sz;
}","public Response(int headerBufferSize,int contentBufferSize){
  if (headerBufferSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (contentBufferSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int sz=Numbers.ceilPow2(contentBufferSize);
  this.out=ByteBuffer.allocateDirect(sz);
  this.hb=new ResponseHeaderBuffer(headerBufferSize);
  this.chunkHeader=ByteBuffer.allocateDirect(8 + 2 * EOL.length());
  this.chunkSink=new DirectUnboundedAnsiSink(((DirectBuffer)chunkHeader).address());
  this.chunkSink.put(EOL);
  this.outPtr=this._wPtr=((DirectBuffer)out).address();
  this.limit=outPtr + sz;
}",0.998473282442748
31469,"public void flush() throws IOException {
  int lim=(int)(_wptr - outPtr);
  if (lim > 0) {
    chunk(lim);
    out.limit(lim);
    channel.write(out);
    out.clear();
    _wptr=outPtr;
  }
}","public void flush() throws IOException {
  int lim=(int)(_wPtr - outPtr);
  if (lim > 0) {
    chunk(lim);
    out.limit(lim);
    channel.write(out);
    out.clear();
    _wPtr=outPtr;
  }
}",0.9895287958115184
31470,"@Override public void clear(){
  out.clear();
  hb.clear();
  this._wptr=outPtr;
}","@Override public void clear(){
  out.clear();
  hb.clear();
  this._wPtr=outPtr;
}",0.9878048780487804
31471,"public void end() throws IOException {
  flush();
  chunk(0);
  put(EOL);
  int lim=(int)(_wptr - outPtr);
  out.limit(lim);
  channel.write(out);
  out.clear();
  _wptr=outPtr;
}","public void end() throws IOException {
  flush();
  chunk(0);
  put(EOL);
  int lim=(int)(_wPtr - outPtr);
  out.limit(lim);
  channel.write(out);
  out.clear();
  _wPtr=outPtr;
}",0.988826815642458
31472,"@Override public CharSink put(char c){
  if (_wptr < limit) {
    Unsafe.getUnsafe().putByte(_wptr++,(byte)c);
    return this;
  }
  throw ResponseHeaderBufferTooSmallException.INSTANCE;
}","@Override public CharSink put(char c){
  if (_wPtr < limit) {
    Unsafe.getUnsafe().putByte(_wPtr++,(byte)c);
    return this;
  }
  throw ResponseHeaderBufferTooSmallException.INSTANCE;
}",0.9894179894179894
31473,"private void analyseColumns(IOContext context,long address,int len){
  int sampleSize=1000;
  MetadataExtractorListener lsnr=(MetadataExtractorListener)context.threadContext.getCache().get(IOWorkerContextKey.ME.name());
  if (lsnr == null) {
    lsnr=new MetadataExtractorListener();
    context.threadContext.getCache().put(IOWorkerContextKey.ME.name(),lsnr);
  }
  context.textParser.parse(address,len,sampleSize,lsnr);
  lsnr.onLineCount(context.textParser.getLineCount());
  context.importer.onMetadata(lsnr.getMetadata());
  context.textParser.setHeader(lsnr.isHeader());
  context.textParser.restart();
  context.analysed=true;
}","private void analyseColumns(IOContext context,long address,int len){
  int sampleSize=100;
  MetadataExtractorListener lsnr=(MetadataExtractorListener)context.threadContext.getCache().get(IOWorkerContextKey.ME.name());
  if (lsnr == null) {
    lsnr=new MetadataExtractorListener();
    context.threadContext.getCache().put(IOWorkerContextKey.ME.name(),lsnr);
  }
  context.textParser.parse(address,len,sampleSize,lsnr);
  lsnr.onLineCount(context.textParser.getLineCount());
  context.importer.onMetadata(lsnr.getMetadata());
  context.textParser.setHeader(lsnr.isHeader());
  context.textParser.restart();
  context.analysed=true;
}",0.9992119779353822
31474,"@Override protected void onPartEnd(IOContext context) throws IOException {
  if (context.textParser != null) {
    context.textParser.close();
    context.textParser=null;
    context.importer.close();
  }
}","@Override protected void onPartEnd(IOContext context) throws IOException {
  if (context.textParser != null) {
    context.textParser.parseLast();
    context.textParser.close();
    context.textParser=null;
    context.importer.close();
  }
}",0.92
31475,"@Test public void testCsv() throws Exception {
  open(""String_Node_Str"");
  p.of(this.address,this.len);
  Assert.assertEquals(TextFileFormat.CSV,p.getFormat());
  Assert.assertEquals(0d,p.getStdDev(),0.0000001d);
  Assert.assertEquals(105,p.getAvgRecLen());
}","@Test public void testCsv() throws Exception {
  open(""String_Node_Str"");
  p.of(this.address,this.len);
  Assert.assertEquals(TextFileFormat.CSV,p.getFormat());
  Assert.assertEquals(0d,p.getStdDev(),0.0000001d);
  Assert.assertEquals(104,p.getAvgRecLen());
}",0.9961538461538462
31476,"private static void upload(File file,String url) throws IOException {
  String charset=""String_Node_Str"";
  String param=""String_Node_Str"";
  String boundary=Long.toHexString(System.currentTimeMillis());
  String CRLF=""String_Node_Str"";
  URLConnection connection=new URL(url).openConnection();
  connection.setDoOutput(true);
  connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + boundary);
  try (OutputStream output=connection.getOutputStream();PrintWriter writer=new PrintWriter(new OutputStreamWriter(output,charset),true)){
    writer.append(""String_Node_Str"").append(boundary).append(CRLF);
    writer.append(""String_Node_Str"").append(CRLF);
    writer.append(""String_Node_Str"").append(charset).append(CRLF);
    writer.append(CRLF).append(param).append(CRLF).flush();
    writer.append(""String_Node_Str"").append(boundary).append(CRLF);
    writer.append(""String_Node_Str"").append(file.getName()).append(""String_Node_Str"").append(CRLF);
    writer.append(""String_Node_Str"").append(charset).append(CRLF);
    writer.append(CRLF).flush();
    Files.copy(file.toPath(),output);
    output.flush();
    writer.append(CRLF).flush();
    writer.append(""String_Node_Str"").append(boundary).append(""String_Node_Str"").append(CRLF).flush();
  }
   System.out.println(((HttpURLConnection)connection).getResponseCode());
}","private static void upload(File file,String url) throws IOException {
  String charset=""String_Node_Str"";
  String param=""String_Node_Str"";
  String boundary=Long.toHexString(System.currentTimeMillis());
  String CRLF=""String_Node_Str"";
  URLConnection connection=new URL(url).openConnection();
  connection.setDoOutput(true);
  connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + boundary);
  try (OutputStream output=connection.getOutputStream();PrintWriter writer=new PrintWriter(new OutputStreamWriter(output,charset),true)){
    writer.append(""String_Node_Str"").append(boundary).append(CRLF);
    writer.append(""String_Node_Str"").append(CRLF);
    writer.append(""String_Node_Str"").append(charset).append(CRLF);
    writer.append(CRLF).append(param).append(CRLF).flush();
    writer.append(""String_Node_Str"").append(boundary).append(CRLF);
    writer.append(""String_Node_Str"").append(file.getName()).append(""String_Node_Str"").append(CRLF);
    writer.append(""String_Node_Str"").append(charset).append(CRLF);
    writer.append(CRLF).flush();
    Files.copy(file.toPath(),output);
    output.flush();
    writer.append(CRLF).flush();
    writer.append(""String_Node_Str"").append(boundary).append(""String_Node_Str"").append(CRLF).flush();
  }
   Assert.assertEquals(200,((HttpURLConnection)connection).getResponseCode());
}",0.98388909704009
31477,"@Override protected void _run(){
  try {
    processRegistrations();
    selector.select(1L);
    Set<SelectionKey> keys=selector.selectedKeys();
    for (    SelectionKey key : keys) {
      try {
        if (serverKey.equals(key)) {
          configure(((ServerSocketChannel)key.channel()).accept());
          continue;
        }
        if (key.isReadable()) {
          long cursor=ioSequence.nextBully();
          IOEvent evt=ioQueue.get(cursor);
          evt.channel=(SocketChannel)key.channel();
          evt.op=SelectionKey.OP_READ;
          evt.context=(IOContext)key.attachment();
          ioSequence.done(cursor);
          key.cancel();
        }
      }
 catch (      CancelledKeyException e) {
        key.channel().close();
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override protected void _run(){
  try {
    processRegistrations();
    selector.select(1L);
    Set<SelectionKey> keys=selector.selectedKeys();
    for (    SelectionKey key : keys) {
      try {
        if (serverKey.equals(key)) {
          configure(((ServerSocketChannel)key.channel()).accept());
          continue;
        }
        if (key.isReadable()) {
          long cursor=ioSequence.nextBully();
          IOEvent evt=ioQueue.get(cursor);
          evt.channel=(SocketChannel)key.channel();
          evt.op=SelectionKey.OP_READ;
          evt.context=(IOContext)key.attachment();
          ioSequence.done(cursor);
          key.cancel();
        }
      }
 catch (      CancelledKeyException e) {
        key.channel().close();
      }
    }
    keys.clear();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9891435464414958
31478,"public boolean parse(long ptr,int len,MultipartListener listener) throws InvalidMultipartHeader, HeadersTooLargeException {
  long hi=ptr + len;
  long _lo=Long.MAX_VALUE;
  char b;
  while (ptr < hi) {
switch (state) {
case BODY_BROKEN:
      _lo=ptr;
    state=State.BODY_CONTINUED;
  break;
case START_BOUNDARY:
boundaryPtr=1;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
state=State.PARTIAL_START_BOUNDARY;
return false;
case MATCH:
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
default :
throw InvalidMultipartHeader.INSTANCE;
}
break;
case PARTIAL_START_BOUNDARY:
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
return false;
case MATCH:
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
default :
throw InvalidMultipartHeader.INSTANCE;
}
break;
case PRE_HEADERS:
switch (Unsafe.getUnsafe().getByte(ptr)) {
case '\r':
ptr++;
break;
case '\n':
state=State.HEADERS;
ptr++;
break;
case '-':
return false;
default :
_lo=ptr;
state=State.BODY_CONTINUED;
}
break;
case HEADERS:
hb.clear();
case PARTIAL_HEADERS:
ptr=hb.write(ptr,(int)(hi - ptr),false);
if (hb.isIncomplete()) {
state=State.PARTIAL_HEADERS;
return false;
}
_lo=ptr;
state=State.BODY;
break;
case BODY_CONTINUED:
case BODY:
b=(char)Unsafe.getUnsafe().getByte(ptr++);
if (b == boundary.charAt(0)) {
boundaryPtr=1;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
listener.onChunk(hb,bytes.of(_lo,ptr - 1),state == State.BODY_CONTINUED);
state=State.POTENTIAL_BOUNDARY;
return false;
case MATCH:
listener.onChunk(hb,bytes.of(_lo,ptr - 1),state == State.BODY_CONTINUED);
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
}
}
break;
case POTENTIAL_BOUNDARY:
int p=boundaryPtr;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
return false;
case MATCH:
ptr+=consumedBoundaryLen;
state=State.PRE_HEADERS;
break;
case NO_MATCH:
listener.onChunk(hb,chars.of(boundary,0,p),true);
state=State.BODY_BROKEN;
break;
}
break;
}
}
if (state == State.BODY || state == State.BODY_CONTINUED) {
listener.onChunk(hb,bytes.of(_lo,ptr),state == State.BODY_CONTINUED);
state=State.BODY_BROKEN;
}
return false;
}","public boolean parse(long ptr,int len,MultipartListener listener) throws InvalidMultipartHeader, HeadersTooLargeException {
  long hi=ptr + len;
  long _lo=Long.MAX_VALUE;
  char b;
  while (ptr < hi) {
switch (state) {
case BODY_BROKEN:
      _lo=ptr;
    state=State.BODY_CONTINUED;
  break;
case START_BOUNDARY:
boundaryPtr=1;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
state=State.PARTIAL_START_BOUNDARY;
return false;
case MATCH:
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
default :
throw InvalidMultipartHeader.INSTANCE;
}
break;
case PARTIAL_START_BOUNDARY:
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
return false;
case MATCH:
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
default :
throw InvalidMultipartHeader.INSTANCE;
}
break;
case PRE_HEADERS:
switch (Unsafe.getUnsafe().getByte(ptr)) {
case '\r':
ptr++;
break;
case '\n':
state=State.HEADERS;
ptr++;
break;
case '-':
return true;
default :
_lo=ptr;
state=State.BODY_CONTINUED;
}
break;
case HEADERS:
hb.clear();
case PARTIAL_HEADERS:
ptr=hb.write(ptr,(int)(hi - ptr),false);
if (hb.isIncomplete()) {
state=State.PARTIAL_HEADERS;
return false;
}
_lo=ptr;
state=State.BODY;
break;
case BODY_CONTINUED:
case BODY:
b=(char)Unsafe.getUnsafe().getByte(ptr++);
if (b == boundary.charAt(0)) {
boundaryPtr=1;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
listener.onChunk(hb,bytes.of(_lo,ptr - 1),state == State.BODY_CONTINUED);
state=State.POTENTIAL_BOUNDARY;
return false;
case MATCH:
listener.onChunk(hb,bytes.of(_lo,ptr - 1),state == State.BODY_CONTINUED);
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
}
}
break;
case POTENTIAL_BOUNDARY:
int p=boundaryPtr;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
return false;
case MATCH:
ptr+=consumedBoundaryLen;
state=State.PRE_HEADERS;
break;
case NO_MATCH:
listener.onChunk(hb,chars.of(boundary,0,p),true);
state=State.BODY_BROKEN;
break;
}
break;
}
}
if (state == State.BODY || state == State.BODY_CONTINUED) {
listener.onChunk(hb,bytes.of(_lo,ptr),state == State.BODY_CONTINUED);
state=State.BODY_BROKEN;
}
return false;
}",0.998324958123953
31479,"private void parseContentType() throws UnsupportedContentTypeException {
  CharSequence seq=hb.get(""String_Node_Str"");
  if (seq == null) {
    return;
  }
  long p=((DirectByteCharSequence)seq).getLo();
  long _lo=p;
  long hi=((DirectByteCharSequence)seq).getHi();
  DirectByteCharSequence name=null;
  boolean contentType=true;
  boolean swallowSpace=true;
  while (p <= hi) {
    char b=(char)Unsafe.getUnsafe().getByte(p++);
    if (b == ' ' && swallowSpace) {
      _lo=p;
      continue;
    }
    if (p > hi || b == ';') {
      if (contentType) {
        this.contentType=pool.next().of(_lo,p - 1);
        _lo=p;
        contentType=false;
        continue;
      }
      if (name == null) {
        throw UnsupportedContentTypeException.INSTANCE;
      }
      if (Chars.equals(""String_Node_Str"",name)) {
        encoding=pool.next().of(_lo,p - 1);
        _lo=p;
        continue;
      }
      if (Chars.equals(""String_Node_Str"",name)) {
        boundary=pool.next().of(_lo,p - 1);
        _lo=p;
        continue;
      }
      if (p > hi) {
        break;
      }
    }
 else {
      name=name == null ? pool.next().of(_lo,p - 1) : name.of(_lo,p - 1);
      _lo=p;
      swallowSpace=false;
    }
  }
}","private void parseContentType() throws UnsupportedContentTypeException {
  CharSequence seq=hb.get(""String_Node_Str"");
  if (seq == null) {
    return;
  }
  long p=((DirectByteCharSequence)seq).getLo();
  long _lo=p;
  long hi=((DirectByteCharSequence)seq).getHi();
  DirectByteCharSequence name=null;
  boolean contentType=true;
  boolean swallowSpace=true;
  while (p <= hi) {
    char b=(char)Unsafe.getUnsafe().getByte(p++);
    if (b == ' ' && swallowSpace) {
      _lo=p;
      continue;
    }
    if (p > hi || b == ';') {
      if (contentType) {
        this.contentType=pool.next().of(_lo,p - 1);
        _lo=p;
        contentType=false;
        continue;
      }
      if (name == null) {
        throw UnsupportedContentTypeException.INSTANCE;
      }
      if (Chars.equals(""String_Node_Str"",name)) {
        encoding=pool.next().of(_lo,p - 1);
        _lo=p;
        continue;
      }
      if (Chars.equals(""String_Node_Str"",name)) {
        boundary=pool.next().of(_lo,p - 1);
        _lo=p;
        continue;
      }
      if (p > hi) {
        break;
      }
    }
 else     if (b == '=') {
      name=name == null ? pool.next().of(_lo,p - 1) : name.of(_lo,p - 1);
      _lo=p;
      swallowSpace=false;
    }
  }
}",0.9926590538336052
31480,"public ResponseHeaderBuffer(int size){
  int sz=Numbers.ceilPow2(size);
  this.headers=ByteBuffer.allocateDirect(sz);
  this.headerPtr=((DirectBuffer)headers).address();
  this.limit=headerPtr + sz;
}","public ResponseHeaderBuffer(int size){
  int sz=Numbers.ceilPow2(size);
  this.headers=ByteBuffer.allocateDirect(sz);
  this.headerPtr=_wptr=((DirectBuffer)headers).address();
  this.limit=headerPtr + sz;
}",0.9852216748768472
31481,"public FixRecordHolder(RecordMetadata metadata){
  super(metadata);
  int cc=metadata.getColumnCount();
  this.types=new ObjList<>(cc);
  this.offsets=new IntList(cc);
  int offset=0;
  for (int i=0; i < cc; i++) {
    ColumnType type=metadata.getColumnQuick(i).getType();
    types.add(type);
    offsets.add(offset);
switch (type) {
case INT:
case FLOAT:
case SYMBOL:
      offset+=4;
    break;
case LONG:
case DOUBLE:
case DATE:
  offset+=8;
break;
case BOOLEAN:
case BYTE:
offset++;
break;
case SHORT:
offset+=2;
break;
}
}
address=Unsafe.getUnsafe().allocateMemory(offset);
}","public FixRecordHolder(RecordMetadata metadata){
  super(metadata);
  int cc=metadata.getColumnCount();
  this.types=new ObjList<>(cc);
  this.offsets=new IntList(cc);
  int size=0;
  for (int i=0; i < cc; i++) {
    ColumnType type=metadata.getColumnQuick(i).getType();
    types.add(type);
    offsets.add(size);
switch (type) {
case INT:
case FLOAT:
case SYMBOL:
      size+=4;
    break;
case LONG:
case DOUBLE:
case DATE:
  size+=8;
break;
case BOOLEAN:
case BYTE:
size++;
break;
case SHORT:
size+=2;
break;
}
}
address=Unsafe.getUnsafe().allocateMemory(size);
}",0.9390243902439024
31482,"@Override public void close(){
  Unsafe.getUnsafe().freeMemory(address);
}","@Override public void close(){
  if (address != 0) {
    Unsafe.getUnsafe().freeMemory(address);
    address=0;
  }
}",0.774869109947644
31483,"@Override public void close(){
  if (address != 0) {
    Unsafe.getUnsafe().freeMemory(address);
  }
}","@Override public void close(){
  if (address != 0) {
    Unsafe.getUnsafe().freeMemory(address);
    address=0;
    size=0;
  }
}",0.8831168831168831
31484,"@Override public void close() throws IOException {
  Misc.free(map);
  Misc.free(holder);
  Misc.free(master);
  Misc.free(slave);
}","@Override public void close() throws IOException {
  if (!closed) {
    Misc.free(map);
    Misc.free(holder);
    Misc.free(master);
    Misc.free(slave);
    closed=true;
  }
}",0.8516129032258064
31485,"@BeforeClass public static void setUpClass() throws Exception {
  JournalWriter jw=factory.writer(new JournalStructure(""String_Node_Str"").$ts().$sym(""String_Node_Str"").$double(""String_Node_Str"").$double(""String_Node_Str"").$str(""String_Node_Str"").$sym(""String_Node_Str"").$float(""String_Node_Str"").$short(""String_Node_Str"").$long(""String_Node_Str"").$bool(""String_Node_Str"").$());
  JournalWriter jwy=factory.writer(new JournalStructure(""String_Node_Str"").$ts().$sym(""String_Node_Str"").$double(""String_Node_Str"").$str(""String_Node_Str"").$());
  Rnd rnd=new Rnd();
  String[] ccy=new String[3];
  for (int i=0; i < ccy.length; i++) {
    ccy[i]=rnd.nextChars(6).toString();
  }
  int count=100;
  long ts=Dates.parseDateTime(""String_Node_Str"");
  for (int i=0; i < count; i++) {
    JournalEntryWriter w=jw.entryWriter();
    w.putDate(0,ts+=10000);
    w.putSym(1,ccy[rnd.nextPositiveInt() % ccy.length]);
    w.putDouble(2,rnd.nextDouble());
    w.putDouble(3,rnd.nextDouble());
    w.putStr(4,rnd.nextChars(rnd.nextPositiveInt() % 128));
    w.putSym(5,ccy[rnd.nextPositiveInt() % ccy.length]);
    w.putFloat(6,rnd.nextFloat());
    w.putShort(7,(short)rnd.nextInt());
    w.putLong(8,rnd.nextLong());
    w.putBool(9,rnd.nextBoolean());
    w.append();
  }
  jw.commit();
  int county=10;
  ts=Dates.parseDateTime(""String_Node_Str"");
  for (int i=0; i < county; i++) {
    JournalEntryWriter w=jwy.entryWriter();
    w.putDate(0,ts+=60000);
    w.putSym(1,ccy[rnd.nextPositiveInt() % ccy.length]);
    w.putDouble(2,rnd.nextDouble());
    w.putStr(3,rnd.nextChars(rnd.nextPositiveInt() % 128));
    w.append();
  }
  jwy.commit();
  JournalWriter jwa=factory.writer(new JournalStructure(""String_Node_Str"").$ts().$sym(""String_Node_Str"").$double(""String_Node_Str"").$());
  JournalWriter jwb=factory.writer(new JournalStructure(""String_Node_Str"").$ts().$sym(""String_Node_Str"").$double(""String_Node_Str"").$());
  JournalEntryWriter ewa;
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,0.538);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,1.35);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,1.41);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,0.601);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,1.26);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,1.29);
  ewa.append();
  jwa.commit();
  JournalEntryWriter ewb;
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,1100);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,1200);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,1500);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,130);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,150);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,12000);
  ewb.append();
  jwb.commit();
}","@BeforeClass public static void setUpClass() throws Exception {
  int xcount=100;
  int ycount=10;
  JournalWriter xw=factory.writer(new JournalStructure(""String_Node_Str"").$ts().$sym(""String_Node_Str"").$double(""String_Node_Str"").$double(""String_Node_Str"").$str(""String_Node_Str"").$sym(""String_Node_Str"").$float(""String_Node_Str"").$short(""String_Node_Str"").$long(""String_Node_Str"").$bool(""String_Node_Str"").recordCountHint(xcount).$());
  JournalWriter yw=factory.writer(new JournalStructure(""String_Node_Str"").$ts().$sym(""String_Node_Str"").$double(""String_Node_Str"").$str(""String_Node_Str"").recordCountHint(ycount).$());
  Rnd rnd=new Rnd();
  String[] ccy=new String[3];
  for (int i=0; i < ccy.length; i++) {
    ccy[i]=rnd.nextChars(6).toString();
  }
  long ts=Dates.parseDateTime(""String_Node_Str"");
  for (int i=0; i < xcount; i++) {
    JournalEntryWriter w=xw.entryWriter();
    w.putDate(0,ts+=10000);
    w.putSym(1,ccy[rnd.nextPositiveInt() % ccy.length]);
    w.putDouble(2,rnd.nextDouble());
    w.putDouble(3,rnd.nextDouble());
    w.putStr(4,rnd.nextChars(rnd.nextPositiveInt() % 128));
    w.putSym(5,ccy[rnd.nextPositiveInt() % ccy.length]);
    w.putFloat(6,rnd.nextFloat());
    w.putShort(7,(short)rnd.nextInt());
    w.putLong(8,rnd.nextLong());
    w.putBool(9,rnd.nextBoolean());
    w.append();
  }
  xw.commit();
  ts=Dates.parseDateTime(""String_Node_Str"");
  for (int i=0; i < ycount; i++) {
    JournalEntryWriter w=yw.entryWriter();
    w.putDate(0,ts+=60000);
    w.putSym(1,ccy[rnd.nextPositiveInt() % ccy.length]);
    w.putDouble(2,rnd.nextDouble());
    w.putStr(3,rnd.nextChars(rnd.nextPositiveInt() % 128));
    w.append();
  }
  yw.commit();
  JournalWriter jwa=factory.writer(new JournalStructure(""String_Node_Str"").$ts().$sym(""String_Node_Str"").$double(""String_Node_Str"").$());
  JournalWriter jwb=factory.writer(new JournalStructure(""String_Node_Str"").$ts().$sym(""String_Node_Str"").$double(""String_Node_Str"").$());
  JournalEntryWriter ewa;
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,0.538);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,1.35);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,1.41);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,0.601);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,1.26);
  ewa.append();
  ewa=jwa.entryWriter();
  ewa.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewa.putSym(1,""String_Node_Str"");
  ewa.putDouble(2,1.29);
  ewa.append();
  jwa.commit();
  JournalEntryWriter ewb;
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,1100);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,1200);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,1500);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,130);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,150);
  ewb.append();
  ewb=jwb.entryWriter();
  ewb.putDate(0,Dates.parseDateTime(""String_Node_Str""));
  ewb.putSym(1,""String_Node_Str"");
  ewb.putDouble(2,12000);
  ewb.append();
  jwb.commit();
}",0.9482560367957072
31486,"private void splitAggregates(@Transient ExprNode node,ObjList<QueryColumn> aggregateColumns) throws ParserException {
  this.splitAggregatorsStack.clear();
  this.aggregateColumnSequence=0;
  while (!splitAggregatorsStack.isEmpty() || node != null) {
    if (node != null) {
      if (node.rhs != null) {
        ExprNode n=replaceIfAggregate(node.rhs,aggregateColumns);
        if (node.rhs == n) {
          splitAggregatorsStack.push(node.rhs);
        }
 else {
          node.rhs=n;
        }
      }
      ExprNode n=replaceIfAggregate(node.lhs,aggregateColumns);
      if (n == node.lhs) {
        node=node.lhs;
      }
 else {
        node.lhs=n;
        node=null;
      }
    }
 else {
      node=splitAggregatorsStack.poll();
    }
  }
}","private void splitAggregates(@Transient ExprNode node,ObjList<QueryColumn> aggregateColumns) throws ParserException {
  this.exprNodeStack.clear();
  this.aggregateColumnSequence=0;
  while (!this.exprNodeStack.isEmpty() || node != null) {
    if (node != null) {
      if (node.rhs != null) {
        ExprNode n=replaceIfAggregate(node.rhs,aggregateColumns);
        if (node.rhs == n) {
          this.exprNodeStack.push(node.rhs);
        }
 else {
          node.rhs=n;
        }
      }
      ExprNode n=replaceIfAggregate(node.lhs,aggregateColumns);
      if (n == node.lhs) {
        node=node.lhs;
      }
 else {
        node.lhs=n;
        node=null;
      }
    }
 else {
      node=this.exprNodeStack.poll();
    }
  }
}",0.925050641458474
31487,"private QueryCompiler optimise(QueryModel parent,JournalReaderFactory factory) throws JournalException, ParserException {
  ObjList<QueryModel> joinModels=parent.getJoinModels();
  int n=joinModels.size();
  if (n > 1) {
    for (int i=0; i < n; i++) {
      resolveJoinMetadata(parent,i,factory);
    }
    emittedJoinClauses=joinClausesSwap1;
    ExprNode where=parent.getWhereClause();
    parent.setWhereClause(null);
    processAndConditions(parent,where);
    for (int i=1; i < n; i++) {
      processAndConditions(parent,joinModels.getQuick(i).getJoinCriteria());
    }
    if (emittedJoinClauses.size() > 0) {
      processEmittedJoinClauses(parent);
    }
    createImpliedDependencies(parent);
    reorderJournals(parent);
    homogenizeCrossJoins(parent);
    assignFilters(parent);
    alignJoinClauses(parent);
    addTransitiveFilters(parent);
  }
  return this;
}","private QueryCompiler optimise(QueryModel parent,JournalReaderFactory factory) throws JournalException, ParserException {
  ObjList<QueryModel> joinModels=parent.getJoinModels();
  int n=joinModels.size();
  if (n > 1) {
    for (int i=0; i < n; i++) {
      resolveJoinMetadata(parent,i,factory);
    }
    emittedJoinClauses=joinClausesSwap1;
    ExprNode where=parent.getWhereClause();
    parent.setWhereClause(null);
    processAndConditions(parent,where);
    for (int i=1; i < n; i++) {
      processAndConditions(parent,joinModels.getQuick(i).getJoinCriteria());
    }
    if (emittedJoinClauses.size() > 0) {
      processEmittedJoinClauses(parent);
    }
    createImpliedDependencies(parent);
    reorderJournals(parent);
    homogenizeCrossJoins(parent);
    assignFilters(parent);
    alignJoinClauses(parent);
    addTransitiveFilters(parent);
    rewriteColumnsRemovedByJoins(parent);
  }
  return this;
}",0.9766407119021134
31488,"/** 
 * Splits ""where"" clauses into ""and"" concatenated list of boolean expressions.
 * @param node expression node
 * @throws ParserException
 */
private void processAndConditions(QueryModel parent,ExprNode node) throws ParserException {
  andConditionStack.clear();
  while (!andConditionStack.isEmpty() || node != null) {
    if (node != null) {
switch (node.token) {
case ""String_Node_Str"":
        if (node.rhs != null) {
          andConditionStack.push(node.rhs);
        }
      node=node.lhs;
    break;
case ""String_Node_Str"":
  analyseEquals(parent,node);
node=null;
break;
case ""String_Node_Str"":
processOrConditions(parent,node);
node=null;
break;
case ""String_Node_Str"":
analyseRegex(parent,node);
default :
parent.addParsedWhereNode(node);
node=null;
break;
}
}
 else {
node=andConditionStack.poll();
}
}
}","/** 
 * Splits ""where"" clauses into ""and"" concatenated list of boolean expressions.
 * @param node expression node
 * @throws ParserException
 */
private void processAndConditions(QueryModel parent,ExprNode node) throws ParserException {
  exprNodeStack.clear();
  while (!exprNodeStack.isEmpty() || node != null) {
    if (node != null) {
switch (node.token) {
case ""String_Node_Str"":
        if (node.rhs != null) {
          exprNodeStack.push(node.rhs);
        }
      node=node.lhs;
    break;
case ""String_Node_Str"":
  analyseEquals(parent,node);
node=null;
break;
case ""String_Node_Str"":
processOrConditions(parent,node);
node=null;
break;
case ""String_Node_Str"":
analyseRegex(parent,node);
default :
parent.addParsedWhereNode(node);
node=null;
break;
}
}
 else {
node=exprNodeStack.poll();
}
}
}",0.9507389162561576
31489,"private RecordSource<? extends Record> selectColumns(RecordSource<? extends Record> rs,QueryModel model) throws ParserException {
  return model.getColumns().size() == 0 ? rs : selectColumns01(rs,model);
}","private RecordSource<? extends Record> selectColumns(RecordSource<? extends Record> rs,QueryModel model) throws ParserException {
  return model.getColumns().size() == 0 ? rs : selectColumns0(rs,model);
}",0.9975550122249388
31490,"private VirtualColumn lookupFunction(ExprNode node,Signature sig,ObjList<VirtualColumn> args) throws ParserException {
  FunctionFactory factory=FunctionFactories.find(sig,args);
  if (factory == null) {
    throw new ParserException(node.position,""String_Node_Str"" + sig.userReadable());
  }
  Function f=factory.newInstance(args);
  if (args != null) {
    int n=node.paramCount;
    for (int i=0; i < n; i++) {
      f.setArg(i,args.getQuick(i));
    }
  }
  return f.isConstant() ? processConstantExpression(f) : f;
}","private VirtualColumn lookupFunction(ExprNode node,Signature sig,ObjList<VirtualColumn> args) throws ParserException {
  if (node.type == ExprNode.NodeType.LAMBDA) {
    throw new ParserException(node.position,""String_Node_Str"");
  }
  FunctionFactory factory=FunctionFactories.find(sig,args);
  if (factory == null) {
    throw new ParserException(node.position,""String_Node_Str"" + sig.userReadable());
  }
  Function f=factory.newInstance(args);
  if (args != null) {
    int n=node.paramCount;
    for (int i=0; i < n; i++) {
      f.setArg(i,args.getQuick(i));
    }
  }
  return f.isConstant() ? processConstantExpression(f) : f;
}",0.7675021607605877
31491,"public NoSuchColumnException(String message,Object... args){
  super(message,args);
}","public NoSuchColumnException(CharSequence name){
  super(""String_Node_Str"",name);
}",0.6071428571428571
31492,"@Override public RecordColumnMetadata getColumn(CharSequence name){
  return getColumnQuick(getColumnIndex(name));
}","@Override public final RecordColumnMetadata getColumn(CharSequence name){
  return getColumnQuick(getColumnIndex(name));
}",0.9747899159663864
31493,"@Override public int getColumnIndex(CharSequence columnName){
  int index=getColumnIndexQuiet(columnName);
  if (index == -1) {
    throw new NoSuchColumnException(""String_Node_Str"",columnName);
  }
  return index;
}","@Override public final int getColumnIndex(CharSequence columnName){
  int index=getColumnIndexQuiet(columnName);
  if (index == -1) {
    throw new NoSuchColumnException(columnName);
  }
  return index;
}",0.9428571428571428
31494,int getColumnIndexQuiet(CharSequence name);,int getColumnIndexQuiet(ColumnName name);,0.8095238095238095
31495,"public AsOfPartitionedJoinRecordSource(RecordSource<? extends Record> master,int masterTimestampIndex,RecordSource<? extends Record> slave,int slaveTimestampIndex,CharSequenceHashSet masterKeyColumns,CharSequenceHashSet slaveKeyColumns,int pageSize){
  this.master=master;
  this.masterTimestampIndex=masterTimestampIndex;
  this.slave=slave;
  this.slaveTimestampIndex=slaveTimestampIndex;
  if (slave.supportsRowIdAccess()) {
    map=new LastRowIdRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns);
    holder=new RowidRecordHolder();
  }
 else {
    boolean var=false;
    OUT:     for (int i=0, n=slave.getMetadata().getColumnCount(); i < n; i++) {
switch (slave.getMetadata().getColumnQuick(i).getType()) {
case BINARY:
        throw new JournalRuntimeException(""String_Node_Str"");
case STRING:
      if (!masterKeyColumns.contains(slave.getMetadata().getColumnQuick(i).getName())) {
        var=true;
      }
    break OUT;
}
}
if (var) {
this.map=new LastVarRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns,pageSize);
this.holder=new VarRecordHolder(slave.getMetadata());
}
 else {
this.map=new LastFixRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns,pageSize);
this.holder=new FixRecordHolder(slave.getMetadata());
}
}
this.metadata=new SplitRecordMetadata(master.getMetadata(),map.getMetadata());
this.record=new SplitRecord(this.metadata,master.getMetadata().getColumnCount());
this.storageFacade=new SplitRecordStorageFacade(this.metadata,master.getMetadata().getColumnCount());
}","public AsOfPartitionedJoinRecordSource(RecordSource<? extends Record> master,int masterTimestampIndex,RecordSource<? extends Record> slave,int slaveTimestampIndex,CharSequenceHashSet masterKeyColumns,CharSequenceHashSet slaveKeyColumns,int pageSize){
  this.master=master;
  this.masterTimestampIndex=masterTimestampIndex;
  this.slave=slave;
  this.slaveTimestampIndex=slaveTimestampIndex;
  if (slave.supportsRowIdAccess()) {
    map=new LastRowIdRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns);
    holder=new RowidRecordHolder();
  }
 else {
    boolean var=false;
    OUT:     for (int i=0, n=slave.getMetadata().getColumnCount(); i < n; i++) {
switch (slave.getMetadata().getColumnQuick(i).getType()) {
case BINARY:
        throw new JournalRuntimeException(""String_Node_Str"");
case STRING:
      if (!masterKeyColumns.contains(slave.getMetadata().getColumnQuick(i).getName())) {
        var=true;
      }
    break OUT;
}
}
if (var) {
this.map=new LastVarRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns,pageSize);
this.holder=new VarRecordHolder(slave.getMetadata());
}
 else {
this.map=new LastFixRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns,pageSize);
this.holder=new FixRecordHolder(slave.getMetadata());
}
}
map.getMetadata().setAlias(slave.getMetadata().getAlias());
this.metadata=new SplitRecordMetadata(master.getMetadata(),map.getMetadata());
this.record=new SplitRecord(this.metadata,master.getMetadata().getColumnCount());
this.storageFacade=new SplitRecordStorageFacade(this.metadata,master.getMetadata().getColumnCount());
}",0.9815384615384616
31496,"@SuppressFBWarnings({""String_Node_Str""}) public JournalSource(PartitionSource partitionSource,RowSource rowSource){
  this.metadata=partitionSource.getMetadata();
  this.partitionSource=partitionSource;
  rowSource.configure(partitionSource.getMetadata());
  this.rowSource=rowSource;
}","@SuppressFBWarnings({""String_Node_Str""}) public JournalSource(PartitionSource partitionSource,RowSource rowSource){
  this.metadata=partitionSource.getMetadata();
  this.rec=new JournalRecord(this.metadata);
  this.partitionSource=partitionSource;
  rowSource.configure(partitionSource.getMetadata());
  this.rowSource=rowSource;
}",0.8784440842787682
31497,"@Override public RecordMetadata getMetadata(){
  return this;
}","@Override public RecordMetadata getMetadata(){
  return metadata;
}",0.9230769230769232
31498,"public RowIdHolderRecord(){
  super(new AbstractRecordMetadata(){
    @Override public RecordColumnMetadata getColumn(    int index){
      if (index == 0) {
        return LongMetadata.INSTANCE;
      }
      throw new JournalRuntimeException(""String_Node_Str"",index);
    }
    @Override public int getColumnCount(){
      return 1;
    }
    @Override public int getColumnIndexQuiet(    CharSequence columnName){
      return Chars.equals(RowIdHolderRecord.name,columnName) ? 0 : -1;
    }
    @Override public RecordColumnMetadata getColumnQuick(    int index){
      return LongMetadata.INSTANCE;
    }
    @Override public RecordColumnMetadata getTimestampMetadata(){
      return null;
    }
  }
);
}","public RowIdHolderRecord(){
  super(new AbstractRecordMetadata(){
    @Override public RecordColumnMetadata getColumn(    int index){
      if (index == 0) {
        return LongMetadata.INSTANCE;
      }
      throw new JournalRuntimeException(""String_Node_Str"",index);
    }
    @Override public int getColumnCount(){
      return 1;
    }
    @Override public RecordColumnMetadata getColumnQuick(    int index){
      return LongMetadata.INSTANCE;
    }
    @Override public RecordColumnMetadata getTimestampMetadata(){
      return null;
    }
    @Override protected int getLocalColumnIndex(    CharSequence name){
      return Chars.equals(RowIdHolderRecord.name,name) ? 0 : -1;
    }
  }
);
}",0.7843416370106762
31499,"public int getColumnIndexQuiet(ColumnName columnName){
  int index;
  if (columnName.alias().length() == 0) {
    index=a.getColumnIndexQuiet(columnName.name());
    if (index == -1) {
      index=b.getColumnIndexQuiet(columnName.name());
      return index == -1 ? index : index + split;
    }
 else {
      return index;
    }
  }
 else {
    if (a instanceof SplitRecordMetadata) {
      index=((SplitRecordMetadata)a).getColumnIndexQuiet(columnName);
    }
 else {
      if (a.getAlias() != null && Chars.equals(a.getAlias(),columnName.alias())) {
        index=a.getColumnIndexQuiet(columnName.name());
      }
 else {
        index=-1;
      }
    }
    if (index > -1) {
      return index;
    }
    if (b instanceof SplitRecordMetadata) {
      index=((SplitRecordMetadata)b).getColumnIndexQuiet(columnName);
    }
 else {
      if (b.getAlias() != null && Chars.equals(b.getAlias(),columnName.alias())) {
        index=b.getColumnIndexQuiet(columnName.name());
      }
 else {
        index=-1;
      }
    }
    return index == -1 ? index : index + split;
  }
}","public int getColumnIndexQuiet(ColumnName columnName){
  int index=a.getColumnIndexQuiet(columnName);
  if (index == -1) {
    index=b.getColumnIndexQuiet(columnName);
    if (index == -1) {
      return index;
    }
 else {
      return index + split;
    }
  }
 else {
    return index;
  }
}",0.3030746705710102
31500,"@SuppressWarnings(""String_Node_Str"") @SuppressFBWarnings({""String_Node_Str"",""String_Node_Str""}) private RecordSource<? extends Record> compileSingleJournal(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  if (model.getLimitLo() != null || model.getLimitHi() != null) {
    analyseLimit(model);
  }
  RecordMetadata metadata=model.getMetadata();
  JournalMetadata journalMetadata;
  if (metadata == null) {
    journalMetadata=collectJournalMetadata(model,factory);
  }
 else   if (metadata instanceof JournalMetadata) {
    journalMetadata=(JournalMetadata)metadata;
  }
 else {
    throw new ParserException(0,""String_Node_Str"");
  }
  PartitionSource ps=new JournalPartitionSource(journalMetadata,true);
  RowSource rs=null;
  String latestByCol=null;
  RecordColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.NodeType.LITERAL) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    int colIndex=journalMetadata.getColumnIndexQuiet(latestByNode.token);
    if (colIndex == -1) {
      throw new InvalidColumnException(latestByNode.position);
    }
    latestByMetadata=journalMetadata.getColumnQuick(colIndex);
    ColumnType type=latestByMetadata.getType();
    if (type != ColumnType.SYMBOL && type != ColumnType.STRING && type != ColumnType.INT) {
      throw new ParserException(latestByNode.position,""String_Node_Str"" + type);
    }
    if (!latestByMetadata.isIndexed()) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    latestByCol=latestByNode.token;
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=queryFilterAnalyser.extract(where,journalMetadata,latestByCol);
    VirtualColumn filter=im.filter != null ? createVirtualColumn(im.filter,journalMetadata,model.getColumnNameHistogram()) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw new ParserException(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(journalMetadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (journalMetadata.getColumn(im.keyColumn).getType()) {
case SYMBOL:
            rs=buildRowSourceForSym(im);
          break;
case STRING:
        rs=buildRowSourceForStr(im);
      break;
case INT:
    rs=buildRowSourceForInt(im);
}
}
if (filter != null) {
rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
if (im.keyColumn != null && im.keyValuesIsLambda) {
int lambdaColIndex;
RecordSource<? extends Record> lambda=compileSourceInternal(im.keyValues.get(0));
RecordMetadata m=lambda.getMetadata();
switch (m.getColumnCount()) {
case 0:
  throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
case 1:
lambdaColIndex=0;
break;
default :
lambdaColIndex=m.getColumnIndexQuiet(latestByCol);
if (lambdaColIndex == -1) {
throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
break;
}
ColumnType lambdaColType=m.getColumn(lambdaColIndex).getType();
mutableSig.setParamCount(2).setName(""String_Node_Str"").paramType(0,latestByMetadata.getType(),true).paramType(1,lambdaColType,false);
LatestByLambdaRowSourceFactory fact=LAMBDA_ROW_SOURCE_FACTORIES.get(mutableSig);
if (fact != null) {
rs=fact.newInstance(latestByCol,lambda,lambdaColIndex,filter);
}
 else {
throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
}
 else {
switch (latestByMetadata.getType()) {
case SYMBOL:
if (im.keyColumn != null) {
rs=new KvIndexSymListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
rs=new KvIndexSymAllHeadRowSource(latestByCol,filter);
}
break;
case STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
break;
case INT:
if (im.keyColumn != null) {
rs=new KvIndexIntListHeadRowSource(latestByCol,toIntHashSet(im),filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.getType()) {
case SYMBOL:
rs=new KvIndexSymAllHeadRowSource(latestByCol,null);
break;
default :
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
return new JournalSource(ps,rs == null ? new AllRowSource() : rs);
}","@SuppressWarnings(""String_Node_Str"") @SuppressFBWarnings({""String_Node_Str"",""String_Node_Str""}) private RecordSource<? extends Record> compileSingleJournal(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  if (model.getLimitLo() != null || model.getLimitHi() != null) {
    analyseLimit(model);
  }
  RecordMetadata metadata=model.getMetadata();
  JournalMetadata journalMetadata;
  if (metadata == null) {
    journalMetadata=collectJournalMetadata(model,factory);
  }
 else   if (metadata instanceof JournalMetadata) {
    journalMetadata=(JournalMetadata)metadata;
  }
 else {
    throw new ParserException(0,""String_Node_Str"");
  }
  if (model.getAlias() != null) {
    journalMetadata.setAlias(model.getAlias().token);
  }
 else {
    journalMetadata.setAlias(model.getJournalName().token);
  }
  PartitionSource ps=new JournalPartitionSource(journalMetadata,true);
  RowSource rs=null;
  String latestByCol=null;
  RecordColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.NodeType.LITERAL) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    int colIndex=journalMetadata.getColumnIndexQuiet(latestByNode.token);
    if (colIndex == -1) {
      throw new InvalidColumnException(latestByNode.position);
    }
    latestByMetadata=journalMetadata.getColumnQuick(colIndex);
    ColumnType type=latestByMetadata.getType();
    if (type != ColumnType.SYMBOL && type != ColumnType.STRING && type != ColumnType.INT) {
      throw new ParserException(latestByNode.position,""String_Node_Str"" + type);
    }
    if (!latestByMetadata.isIndexed()) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    latestByCol=latestByNode.token;
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=queryFilterAnalyser.extract(where,journalMetadata,latestByCol);
    VirtualColumn filter=im.filter != null ? createVirtualColumn(im.filter,journalMetadata,model.getColumnNameHistogram()) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw new ParserException(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(journalMetadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (journalMetadata.getColumn(im.keyColumn).getType()) {
case SYMBOL:
            rs=buildRowSourceForSym(im);
          break;
case STRING:
        rs=buildRowSourceForStr(im);
      break;
case INT:
    rs=buildRowSourceForInt(im);
}
}
if (filter != null) {
rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
if (im.keyColumn != null && im.keyValuesIsLambda) {
int lambdaColIndex;
RecordSource<? extends Record> lambda=compileSourceInternal(im.keyValues.get(0));
RecordMetadata m=lambda.getMetadata();
switch (m.getColumnCount()) {
case 0:
  throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
case 1:
lambdaColIndex=0;
break;
default :
lambdaColIndex=m.getColumnIndexQuiet(latestByCol);
if (lambdaColIndex == -1) {
throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
break;
}
ColumnType lambdaColType=m.getColumn(lambdaColIndex).getType();
mutableSig.setParamCount(2).setName(""String_Node_Str"").paramType(0,latestByMetadata.getType(),true).paramType(1,lambdaColType,false);
LatestByLambdaRowSourceFactory fact=LAMBDA_ROW_SOURCE_FACTORIES.get(mutableSig);
if (fact != null) {
rs=fact.newInstance(latestByCol,lambda,lambdaColIndex,filter);
}
 else {
throw new ParserException(im.keyValuePositions.getQuick(0),""String_Node_Str"");
}
}
 else {
switch (latestByMetadata.getType()) {
case SYMBOL:
if (im.keyColumn != null) {
rs=new KvIndexSymListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
rs=new KvIndexSymAllHeadRowSource(latestByCol,filter);
}
break;
case STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,new CharSequenceHashSet(im.keyValues),filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
break;
case INT:
if (im.keyColumn != null) {
rs=new KvIndexIntListHeadRowSource(latestByCol,toIntHashSet(im),filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.getType()) {
case SYMBOL:
rs=new KvIndexSymAllHeadRowSource(latestByCol,null);
break;
default :
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
return new JournalSource(ps,rs == null ? new AllRowSource() : rs);
}",0.9842941965140778
31501,"private RecordSource<? extends Record> compileJoins(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  ObjList<QueryModel> joinModels=model.getJoinModels();
  IntList ordered=model.getOrderedJoinModels();
  RecordSource<? extends Record> master=null;
  boolean collectColumnNameFrequency=model.getColumns().size() > 0;
  for (int i=0, n=ordered.size(); i < n; i++) {
    int index=ordered.getQuick(i);
    QueryModel m=joinModels.getQuick(index);
    RecordSource<? extends Record> slave=m.getRecordSource();
    if (slave == null) {
      slave=compileSingleOrSubQuery(m,factory);
    }
    if (collectColumnNameFrequency) {
      collectColumnNameFrequency(model,slave);
    }
    if (master == null) {
      master=slave;
    }
 else {
switch (m.getJoinType()) {
case CROSS:
        master=new CrossJoinRecordSource(master,slave);
      break;
case ASOF:
    master=createAsOfJoin(model.getTimestamp(),m,master,slave);
  break;
default :
master=createHashJoin(m,master,slave);
break;
}
}
ExprNode filter=m.getPostJoinWhereClause();
if (filter != null) {
master=new FilteredJournalRecordSource(master,createVirtualColumn(filter,master.getMetadata(),model.getColumnNameHistogram()));
}
}
if (joinModelIsFalse(model)) {
return new NoOpJournalRecordSource(master);
}
return master;
}","private RecordSource<? extends Record> compileJoins(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  ObjList<QueryModel> joinModels=model.getJoinModels();
  IntList ordered=model.getOrderedJoinModels();
  RecordSource<? extends Record> master=null;
  boolean collectColumnNameFrequency=model.getColumns().size() > 0;
  for (int i=0, n=ordered.size(); i < n; i++) {
    int index=ordered.getQuick(i);
    QueryModel m=joinModels.getQuick(index);
    RecordSource<? extends Record> slave=m.getRecordSource();
    if (slave == null) {
      slave=compileSingleOrSubQuery(m,factory);
      if (m.getAlias() != null) {
        slave.getMetadata().setAlias(m.getAlias().token);
      }
    }
    if (collectColumnNameFrequency) {
      collectColumnNameFrequency(model,slave);
    }
    if (master == null) {
      master=slave;
    }
 else {
switch (m.getJoinType()) {
case CROSS:
        master=new CrossJoinRecordSource(master,slave);
      break;
case ASOF:
    master=createAsOfJoin(model.getTimestamp(),m,master,slave);
  break;
default :
master=createHashJoin(m,master,slave);
break;
}
}
ExprNode filter=m.getPostJoinWhereClause();
if (filter != null) {
master=new FilteredJournalRecordSource(master,createVirtualColumn(filter,master.getMetadata(),model.getColumnNameHistogram()));
}
}
if (joinModelIsFalse(model)) {
return new NoOpJournalRecordSource(master);
}
return master;
}",0.9635833940276766
31502,"private int resolveJournalIndex(QueryModel parent,CharSequence alias,CharSequence column,int position) throws ParserException {
  ObjList<QueryModel> joinModels=parent.getJoinModels();
  int index=-1;
  if (alias == null) {
    for (int i=0, n=joinModels.size(); i < n; i++) {
      RecordMetadata m=joinModels.getQuick(i).getMetadata();
      if (m.getColumnIndexQuiet(column) == -1) {
        continue;
      }
      if (index > -1) {
        throw new ParserException(position,""String_Node_Str"");
      }
      index=i;
    }
    if (index == -1) {
      throw new InvalidColumnException(position);
    }
    return index;
  }
 else {
    index=parent.getAliasIndex(alias);
    if (index == -1) {
      throw new ParserException(position,""String_Node_Str"");
    }
    RecordMetadata m=joinModels.getQuick(index).getMetadata();
    if (m.getColumnIndexQuiet(column) == -1) {
      throw new InvalidColumnException(position);
    }
    return index;
  }
}","private int resolveJournalIndex(QueryModel parent,@Transient CharSequence alias,CharSequence column,int position) throws ParserException {
  ObjList<QueryModel> joinModels=parent.getJoinModels();
  int index=-1;
  if (alias == null) {
    for (int i=0, n=joinModels.size(); i < n; i++) {
      RecordMetadata m=joinModels.getQuick(i).getMetadata();
      if (m.getColumnIndexQuiet(column) == -1) {
        continue;
      }
      if (index > -1) {
        throw new ParserException(position,""String_Node_Str"");
      }
      index=i;
    }
    if (index == -1) {
      throw new InvalidColumnException(position);
    }
    return index;
  }
 else {
    index=parent.getAliasIndex(alias);
    if (index == -1) {
      throw new ParserException(position,""String_Node_Str"");
    }
    RecordMetadata m=joinModels.getQuick(index).getMetadata();
    if (m.getColumnIndexQuiet(column) == -1) {
      throw new InvalidColumnException(position);
    }
    return index;
  }
}",0.9942797711908476
31503,"public LastFixRecordMap(RecordMetadata masterMetadata,RecordMetadata slaveMetadata,CharSequenceHashSet masterKeyColumns,CharSequenceHashSet slaveKeyColumns,int pageSize){
  this.pageSize=Numbers.ceilPow2(pageSize);
  this.bits=Numbers.msb(this.pageSize);
  this.mask=this.pageSize - 1;
  final int ksz=masterKeyColumns.size();
  this.masterKeyTypes=new ObjList<>(ksz);
  this.slaveKeyTypes=new ObjList<>(ksz);
  this.masterKeyIndexes=new IntHashSet(ksz);
  this.slaveKeyIndexes=new IntHashSet(ksz);
  ObjList<RecordColumnMetadata> keyCols=new ObjList<>(ksz);
  for (int i=0; i < ksz; i++) {
    int idx;
    idx=masterMetadata.getColumnIndex(masterKeyColumns.get(i));
    masterKeyTypes.add(masterMetadata.getColumnQuick(idx).getType());
    masterKeyIndexes.add(idx);
    idx=slaveMetadata.getColumnIndex(slaveKeyColumns.get(i));
    slaveKeyIndexes.add(idx);
    slaveKeyTypes.add(slaveMetadata.getColumnQuick(idx).getType());
    keyCols.add(slaveMetadata.getColumnQuick(idx));
  }
  this.fixedOffsets=new IntList(ksz - keyCols.size());
  this.slaveValueIndexes=new IntList(ksz - keyCols.size());
  this.slaveValueTypes=new ObjList<>(ksz - keyCols.size());
  ObjList<CharSequence> slaveColumnNames=new ObjList<>();
  int varOffset=0;
  for (int i=0, n=slaveMetadata.getColumnCount(); i < n; i++) {
    if (slaveKeyIndexes.contains(i)) {
      continue;
    }
    slaveColumnNames.add(slaveMetadata.getColumnQuick(i).getName());
    fixedOffsets.add(varOffset);
    slaveValueIndexes.add(i);
    ColumnType type=slaveMetadata.getColumnQuick(i).getType();
    slaveValueTypes.add(type);
switch (type) {
case INT:
case FLOAT:
case SYMBOL:
      varOffset+=4;
    break;
case LONG:
case DOUBLE:
case DATE:
  varOffset+=8;
break;
case BOOLEAN:
case BYTE:
varOffset++;
break;
case SHORT:
varOffset+=2;
break;
}
}
if (varOffset > pageSize) {
throw new JournalRuntimeException(""String_Node_Str"");
}
this.recordLen=varOffset;
this.map=new MultiMap(valueMetadata,keyCols,null);
this.metadata=new SelectedColumnsMetadata(slaveMetadata,slaveColumnNames);
this.record=new MapRecord(this.metadata);
}","public LastFixRecordMap(RecordMetadata masterMetadata,RecordMetadata slaveMetadata,CharSequenceHashSet masterKeyColumns,CharSequenceHashSet slaveKeyColumns,int pageSize){
  this.pageSize=Numbers.ceilPow2(pageSize);
  this.bits=Numbers.msb(this.pageSize);
  this.mask=this.pageSize - 1;
  final int ksz=masterKeyColumns.size();
  this.masterKeyTypes=new ObjList<>(ksz);
  this.slaveKeyTypes=new ObjList<>(ksz);
  this.masterKeyIndexes=new IntHashSet(ksz);
  this.slaveKeyIndexes=new IntHashSet(ksz);
  ObjList<RecordColumnMetadata> keyCols=new ObjList<>(ksz);
  for (int i=0; i < ksz; i++) {
    int idx;
    idx=masterMetadata.getColumnIndex(masterKeyColumns.get(i));
    masterKeyTypes.add(masterMetadata.getColumnQuick(idx).getType());
    masterKeyIndexes.add(idx);
    idx=slaveMetadata.getColumnIndex(slaveKeyColumns.get(i));
    slaveKeyIndexes.add(idx);
    slaveKeyTypes.add(slaveMetadata.getColumnQuick(idx).getType());
    keyCols.add(slaveMetadata.getColumnQuick(idx));
  }
  this.fixedOffsets=new IntList(ksz - keyCols.size());
  this.slaveValueIndexes=new IntList(ksz - keyCols.size());
  this.slaveValueTypes=new ObjList<>(ksz - keyCols.size());
  ObjList<CharSequence> slaveColumnNames=new ObjList<>();
  int varOffset=0;
  for (int i=0, n=slaveMetadata.getColumnCount(); i < n; i++) {
    if (slaveKeyIndexes.contains(i)) {
      continue;
    }
    slaveColumnNames.add(slaveMetadata.getColumnQuick(i).getName());
    fixedOffsets.add(varOffset);
    slaveValueIndexes.add(i);
    ColumnType type=slaveMetadata.getColumnQuick(i).getType();
    slaveValueTypes.add(type);
switch (type) {
case INT:
case FLOAT:
case SYMBOL:
      varOffset+=4;
    break;
case LONG:
case DOUBLE:
case DATE:
  varOffset+=8;
break;
case BOOLEAN:
case BYTE:
varOffset++;
break;
case SHORT:
varOffset+=2;
break;
}
}
if (varOffset > pageSize) {
throw new JournalRuntimeException(""String_Node_Str"");
}
this.recordLen=varOffset;
this.map=new MultiMap(valueMetadata,keyCols,null);
this.metadata=new SelectedColumnsMetadata(slaveMetadata,slaveColumnNames);
this.record=new MapRecord(this.metadata);
this.storageFacade=new SelectedColumnsStorageFacade(slaveMetadata,this.metadata,slaveColumnNames);
}",0.9768529342997428
31504,"@Override protected SymbolTable getSymbolTable(int col){
  return storageFacade.getSymbolTable(symTableRemap.get(col));
}","@Override protected SymbolTable getSymbolTable(int col){
  return storageFacade.getSymbolTable(col);
}",0.9147982062780268
31505,"public void setSlaveCursor(RecordCursor<? extends Record> cursor){
  this.storageFacade=cursor.getStorageFacade();
  for (int i=0, n=slaveValueTypes.size(); i < n; i++) {
    if (slaveValueTypes.getQuick(i) == ColumnType.SYMBOL) {
      symTableRemap.put(i,slaveValueIndexes.getQuick(i));
    }
  }
}","@Override public void setSlaveCursor(RecordCursor<? extends Record> cursor){
  this.storageFacade.of(cursor.getStorageFacade());
}",0.5395348837209303
31506,"public LastRowIdRecordMap(RecordMetadata masterMetadata,RecordMetadata slaveMetadata,CharSequenceHashSet masterKeyColumns,CharSequenceHashSet slaveKeyColumns){
  final int ksz=masterKeyColumns.size();
  this.masterKeyTypes=new ObjList<>(ksz);
  this.slaveKeyTypes=new ObjList<>(ksz);
  this.masterKeyIndexes=new IntHashSet(ksz);
  this.slaveKeyIndexes=new IntHashSet(ksz);
  ObjList<RecordColumnMetadata> keyCols=new ObjList<>(ksz);
  for (int i=0; i < ksz; i++) {
    int idx;
    idx=masterMetadata.getColumnIndex(masterKeyColumns.get(i));
    masterKeyTypes.add(masterMetadata.getColumnQuick(idx).getType());
    masterKeyIndexes.add(idx);
    idx=slaveMetadata.getColumnIndex(slaveKeyColumns.get(i));
    slaveKeyIndexes.add(idx);
    slaveKeyTypes.add(slaveMetadata.getColumnQuick(idx).getType());
    keyCols.add(slaveMetadata.getColumnQuick(idx));
  }
  ObjList<CharSequence> slaveColumnNames=new ObjList<>();
  for (int i=0, n=slaveMetadata.getColumnCount(); i < n; i++) {
    if (slaveKeyIndexes.contains(i)) {
      continue;
    }
    slaveColumnNames.add(slaveMetadata.getColumnQuick(i).getName());
  }
  this.map=new MultiMap(valueMetadata,keyCols,null);
  this.metadata=new SelectedColumnsMetadata(slaveMetadata,slaveColumnNames);
  this.record=new SelectedColumnsRecord(slaveMetadata,slaveColumnNames);
}","public LastRowIdRecordMap(RecordMetadata masterMetadata,RecordMetadata slaveMetadata,CharSequenceHashSet masterKeyColumns,CharSequenceHashSet slaveKeyColumns){
  final int ksz=masterKeyColumns.size();
  this.masterKeyTypes=new ObjList<>(ksz);
  this.slaveKeyTypes=new ObjList<>(ksz);
  this.masterKeyIndexes=new IntHashSet(ksz);
  this.slaveKeyIndexes=new IntHashSet(ksz);
  ObjList<RecordColumnMetadata> keyCols=new ObjList<>(ksz);
  for (int i=0; i < ksz; i++) {
    int idx;
    idx=masterMetadata.getColumnIndex(masterKeyColumns.get(i));
    masterKeyTypes.add(masterMetadata.getColumnQuick(idx).getType());
    masterKeyIndexes.add(idx);
    idx=slaveMetadata.getColumnIndex(slaveKeyColumns.get(i));
    slaveKeyIndexes.add(idx);
    slaveKeyTypes.add(slaveMetadata.getColumnQuick(idx).getType());
    keyCols.add(slaveMetadata.getColumnQuick(idx));
  }
  ObjList<CharSequence> slaveColumnNames=new ObjList<>();
  for (int i=0, n=slaveMetadata.getColumnCount(); i < n; i++) {
    if (slaveKeyIndexes.contains(i)) {
      continue;
    }
    slaveColumnNames.add(slaveMetadata.getColumnQuick(i).getName());
  }
  this.map=new MultiMap(valueMetadata,keyCols,null);
  this.metadata=new SelectedColumnsMetadata(slaveMetadata,slaveColumnNames);
  this.record=new SelectedColumnsRecord(slaveMetadata,slaveColumnNames);
  this.storageFacade=new SelectedColumnsStorageFacade(slaveMetadata,this.metadata,slaveColumnNames);
}",0.9631252281854692
31507,"public void setSlaveCursor(RecordCursor<? extends Record> cursor){
  this.slaveCursor=cursor;
}","public void setSlaveCursor(RecordCursor<? extends Record> cursor){
  this.slaveCursor=cursor;
  this.storageFacade.of(cursor.getStorageFacade());
}",0.7851239669421488
31508,"@Override protected SymbolTable getSymbolTable(int col){
  return storageFacade.getSymbolTable(symTableRemap.get(col));
}","@Override protected SymbolTable getSymbolTable(int col){
  return storageFacade.getSymbolTable(col);
}",0.9147982062780268
31509,"@Override public void setSlaveCursor(RecordCursor<? extends Record> cursor){
  this.storageFacade=cursor.getStorageFacade();
  for (int i=0, n=slaveValueTypes.size(); i < n; i++) {
    if (slaveValueTypes.getQuick(i) == ColumnType.SYMBOL) {
      symTableRemap.put(i,slaveValueIndexes.getQuick(i));
    }
  }
}","@Override public void setSlaveCursor(RecordCursor<? extends Record> cursor){
  this.storageFacade.of(cursor.getStorageFacade());
}",0.5727272727272728
31510,"@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.masterCursor=master.prepareCursor(factory);
  this.slaveCursor=slave.prepareCursor(factory);
  this.recordHolder.setCursor(slaveCursor);
  this.delayedHolder.setCursor(slaveCursor);
  return this;
}","@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.masterCursor=master.prepareCursor(factory);
  this.slaveCursor=slave.prepareCursor(factory);
  this.recordHolder.setCursor(slaveCursor);
  this.delayedHolder.setCursor(slaveCursor);
  this.storageFacade.prepare(factory,masterCursor.getStorageFacade(),slaveCursor.getStorageFacade());
  return this;
}",0.8598901098901099
31511,"public AsOfJoinRecordSource(RecordSource<? extends Record> master,int masterTimestampIndex,RecordSource<? extends Record> slave,int slaveTimestampIndex){
  this.master=master;
  this.masterTimestampIndex=masterTimestampIndex;
  this.slave=slave;
  this.slaveTimestampIndex=slaveTimestampIndex;
  this.metadata=new SplitRecordMetadata(master.getMetadata(),slave.getMetadata());
  this.record=new SplitRecord(this.metadata,master.getMetadata().getColumnCount());
  if (slave.supportsRowIdAccess()) {
    this.recordHolder=new RowidRecordHolder();
    this.delayedHolder=new RowidRecordHolder();
  }
 else {
    boolean var=false;
    OUT:     for (int i=0, n=slave.getMetadata().getColumnCount(); i < n; i++) {
switch (slave.getMetadata().getColumnQuick(i).getType()) {
case BINARY:
        throw new JournalRuntimeException(""String_Node_Str"");
case STRING:
      var=true;
    break OUT;
}
}
if (var) {
this.recordHolder=new VarRecordHolder(slave.getMetadata());
this.delayedHolder=new VarRecordHolder(slave.getMetadata());
}
 else {
this.recordHolder=new FixRecordHolder(slave.getMetadata());
this.delayedHolder=new FixRecordHolder(slave.getMetadata());
}
}
}","public AsOfJoinRecordSource(RecordSource<? extends Record> master,int masterTimestampIndex,RecordSource<? extends Record> slave,int slaveTimestampIndex){
  this.master=master;
  this.masterTimestampIndex=masterTimestampIndex;
  this.slave=slave;
  this.slaveTimestampIndex=slaveTimestampIndex;
  this.metadata=new SplitRecordMetadata(master.getMetadata(),slave.getMetadata());
  this.record=new SplitRecord(this.metadata,master.getMetadata().getColumnCount());
  if (slave.supportsRowIdAccess()) {
    this.recordHolder=new RowidRecordHolder();
    this.delayedHolder=new RowidRecordHolder();
  }
 else {
    boolean var=false;
    OUT:     for (int i=0, n=slave.getMetadata().getColumnCount(); i < n; i++) {
switch (slave.getMetadata().getColumnQuick(i).getType()) {
case BINARY:
        throw new JournalRuntimeException(""String_Node_Str"");
case STRING:
      var=true;
    break OUT;
}
}
if (var) {
this.recordHolder=new VarRecordHolder(slave.getMetadata());
this.delayedHolder=new VarRecordHolder(slave.getMetadata());
}
 else {
this.recordHolder=new FixRecordHolder(slave.getMetadata());
this.delayedHolder=new FixRecordHolder(slave.getMetadata());
}
}
this.storageFacade=new SplitRecordStorageFacade(this.metadata,master.getMetadata().getColumnCount());
}",0.9578512396694217
31512,"@Override public StorageFacade getStorageFacade(){
  return null;
}","@Override public StorageFacade getStorageFacade(){
  return storageFacade;
}",0.8811188811188811
31513,"@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.masterCursor=master.prepareCursor(factory);
  this.slaveCursor=slave.prepareCursor(factory);
  map.setSlaveCursor(slaveCursor);
  holder.setCursor(slaveCursor);
  return this;
}","@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.masterCursor=master.prepareCursor(factory);
  this.slaveCursor=slave.prepareCursor(factory);
  map.setSlaveCursor(slaveCursor);
  holder.setCursor(slaveCursor);
  storageFacade.prepare(factory,masterCursor.getStorageFacade(),map.getStorageFacade());
  return this;
}",0.8677563150074294
31514,"public AsOfPartitionedJoinRecordSource(RecordSource<? extends Record> master,int masterTimestampIndex,RecordSource<? extends Record> slave,int slaveTimestampIndex,CharSequenceHashSet masterKeyColumns,CharSequenceHashSet slaveKeyColumns,int pageSize){
  this.master=master;
  this.masterTimestampIndex=masterTimestampIndex;
  this.slave=slave;
  this.slaveTimestampIndex=slaveTimestampIndex;
  if (slave.supportsRowIdAccess()) {
    map=new LastRowIdRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns);
    holder=new RowidRecordHolder();
  }
 else {
    boolean var=false;
    OUT:     for (int i=0, n=slave.getMetadata().getColumnCount(); i < n; i++) {
switch (slave.getMetadata().getColumnQuick(i).getType()) {
case BINARY:
        throw new JournalRuntimeException(""String_Node_Str"");
case STRING:
      if (!masterKeyColumns.contains(slave.getMetadata().getColumnQuick(i).getName())) {
        var=true;
      }
    break OUT;
}
}
if (var) {
this.map=new LastVarRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns,pageSize);
this.holder=new VarRecordHolder(slave.getMetadata());
}
 else {
this.map=new LastFixRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns,pageSize);
this.holder=new FixRecordHolder(slave.getMetadata());
}
}
this.metadata=new SplitRecordMetadata(master.getMetadata(),map.getMetadata());
this.record=new SplitRecord(this.metadata,master.getMetadata().getColumnCount());
}","public AsOfPartitionedJoinRecordSource(RecordSource<? extends Record> master,int masterTimestampIndex,RecordSource<? extends Record> slave,int slaveTimestampIndex,CharSequenceHashSet masterKeyColumns,CharSequenceHashSet slaveKeyColumns,int pageSize){
  this.master=master;
  this.masterTimestampIndex=masterTimestampIndex;
  this.slave=slave;
  this.slaveTimestampIndex=slaveTimestampIndex;
  if (slave.supportsRowIdAccess()) {
    map=new LastRowIdRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns);
    holder=new RowidRecordHolder();
  }
 else {
    boolean var=false;
    OUT:     for (int i=0, n=slave.getMetadata().getColumnCount(); i < n; i++) {
switch (slave.getMetadata().getColumnQuick(i).getType()) {
case BINARY:
        throw new JournalRuntimeException(""String_Node_Str"");
case STRING:
      if (!masterKeyColumns.contains(slave.getMetadata().getColumnQuick(i).getName())) {
        var=true;
      }
    break OUT;
}
}
if (var) {
this.map=new LastVarRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns,pageSize);
this.holder=new VarRecordHolder(slave.getMetadata());
}
 else {
this.map=new LastFixRecordMap(master.getMetadata(),slave.getMetadata(),masterKeyColumns,slaveKeyColumns,pageSize);
this.holder=new FixRecordHolder(slave.getMetadata());
}
}
this.metadata=new SplitRecordMetadata(master.getMetadata(),map.getMetadata());
this.record=new SplitRecord(this.metadata,master.getMetadata().getColumnCount());
this.storageFacade=new SplitRecordStorageFacade(this.metadata,master.getMetadata().getColumnCount());
}",0.9669689119170984
31515,"@SuppressFBWarnings({""String_Node_Str""}) public HashJoinRecordSource(RecordSource<? extends Record> master,IntList masterColIndices,RecordSource<? extends Record> slave,IntList slaveColIndices,boolean outer){
  this.master=master;
  this.slave=slave;
  this.metadata=new SplitRecordMetadata(master.getMetadata(),slave.getMetadata());
  this.currentRecord=new SplitRecord(metadata,master.getMetadata().getColumnCount());
  this.byRowId=slave.supportsRowIdAccess();
  this.masterColIndex=masterColIndices;
  this.slaveColIndex=slaveColIndices;
  this.recordMap=createRecordMap(master,slave);
  this.outer=outer;
  this.nullRecord=new NullRecord(slave.getMetadata());
}","@SuppressFBWarnings({""String_Node_Str""}) public HashJoinRecordSource(RecordSource<? extends Record> master,IntList masterColIndices,RecordSource<? extends Record> slave,IntList slaveColIndices,boolean outer){
  this.master=master;
  this.slave=slave;
  this.metadata=new SplitRecordMetadata(master.getMetadata(),slave.getMetadata());
  this.currentRecord=new SplitRecord(metadata,master.getMetadata().getColumnCount());
  this.byRowId=slave.supportsRowIdAccess();
  this.masterColIndex=masterColIndices;
  this.slaveColIndex=slaveColIndices;
  this.recordMap=createRecordMap(master,slave);
  this.outer=outer;
  this.nullRecord=new NullRecord(slave.getMetadata());
  this.storageFacade=new SplitRecordStorageFacade(metadata,master.getMetadata().getColumnCount());
}",0.9308176100628932
31516,"@Override public StorageFacade getStorageFacade(){
  return null;
}","@Override public StorageFacade getStorageFacade(){
  return storageFacade;
}",0.8811188811188811
31517,"@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.slaveCursor=slave.prepareCursor(factory);
  this.masterCursor=master.prepareCursor(factory);
  buildHashTable();
  recordMap.setStorageFacade(slaveCursor.getStorageFacade());
  return this;
}","@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.slaveCursor=slave.prepareCursor(factory);
  this.masterCursor=master.prepareCursor(factory);
  buildHashTable();
  recordMap.setStorageFacade(slaveCursor.getStorageFacade());
  storageFacade.prepare(factory,masterCursor.getStorageFacade(),slaveCursor.getStorageFacade());
  return this;
}",0.8631875881523272
31518,"@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.recordCursor=recordSource.prepareCursor(factory);
  this.storageFacade.setDelegate(recordCursor.getStorageFacade());
  return this;
}","@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.recordCursor=recordSource.prepareCursor(factory);
  this.storageFacade.of(recordCursor.getStorageFacade());
  return this;
}",0.8870636550308009
31519,"@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.slaveCursor=slave.prepareCursor(factory);
  this.masterCursor=master.prepareCursor(factory);
  buildHashTable();
  return this;
}","@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.slaveCursor=slave.prepareCursor(factory);
  this.masterCursor=master.prepareCursor(factory);
  buildHashTable();
  recordMap.setStorageFacade(slaveCursor.getStorageFacade());
  return this;
}",0.8872727272727273
31520,"@Override public String getSym(int col){
  return getStr(col).toString();
}","@Override public String getSym(int col){
  return storageFacade.getSymbolTable(col).value(getInt(col));
}",0.7333333333333333
31521,"@SuppressWarnings(""String_Node_Str"") private void process(SocketChannel channel,IOContext context,int op){
  Request r=context.request;
  Request.ChannelStatus status;
  try {
    while ((status=r.read(channel)) == Request.ChannelStatus.NEED_REQUEST) {
    }
    final Response response=context.response;
    response.setChannel(channel);
    if (status == Request.ChannelStatus.READY) {
      ContextHandler handler=handlers.get(r.getUrl());
      if (handler != null) {
        if (r.isMultipart()) {
          if (handler instanceof MultipartListener) {
            handler.onHeaders(r,response);
            feedMultipartContent((MultipartListener)handler,r,channel);
            handler.onComplete(r,response);
          }
 else {
          }
        }
      }
 else {
      }
    }
  }
 catch (  HeadersTooLargeException|InvalidMultipartHeader e) {
    status=Request.ChannelStatus.DISCONNECTED;
  }
catch (  SlowChannelException e) {
    status=Request.ChannelStatus.READY;
  }
catch (  IOException e) {
    status=Request.ChannelStatus.DISCONNECTED;
    e.printStackTrace();
  }
catch (  UnsupportedContentTypeException e) {
    context.clear();
    status=Request.ChannelStatus.READY;
  }
  if (status != Request.ChannelStatus.DISCONNECTED) {
    loop.registerChannel(channel,SelectionKey.OP_READ,context);
  }
 else {
    try {
      channel.close();
      context.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void process(SocketChannel channel,IOContext context,int op){
  Request r=context.request;
  Request.ChannelStatus status;
  try {
    while ((status=r.read(channel)) == Request.ChannelStatus.NEED_REQUEST) {
    }
    final Response response=context.response;
    response.setChannel(channel);
    if (status == Request.ChannelStatus.READY) {
      ContextHandler handler=handlers.get(r.getUrl());
      if (handler != null) {
        if (r.isMultipart()) {
          if (handler instanceof MultipartListener) {
            handler.onHeaders(r,response);
            feedMultipartContent((MultipartListener)handler,r,channel);
            handler.onComplete(r,response);
            r.clear();
          }
 else {
          }
        }
      }
 else {
      }
    }
  }
 catch (  HeadersTooLargeException|InvalidMultipartHeader e) {
    status=Request.ChannelStatus.DISCONNECTED;
  }
catch (  SlowChannelException e) {
    status=Request.ChannelStatus.READY;
  }
catch (  IOException e) {
    status=Request.ChannelStatus.DISCONNECTED;
    e.printStackTrace();
  }
catch (  UnsupportedContentTypeException e) {
    context.clear();
    status=Request.ChannelStatus.READY;
  }
  if (status != Request.ChannelStatus.DISCONNECTED) {
    loop.registerChannel(channel,SelectionKey.OP_READ,context);
  }
 else {
    try {
      channel.close();
      context.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9921688798093292
31522,"private void configure(SocketChannel channel) throws IOException {
  channel.configureBlocking(false);
  channel.setOption(StandardSocketOptions.TCP_NODELAY,Boolean.TRUE);
  channel.setOption(StandardSocketOptions.SO_RCVBUF,ZERO);
  channel.register(selector,SelectionKey.OP_READ).attach(new IOContext());
}","private void configure(SocketChannel channel) throws IOException {
  channel.configureBlocking(false);
  channel.setOption(StandardSocketOptions.TCP_NODELAY,Boolean.TRUE);
  channel.setOption(StandardSocketOptions.SO_RCVBUF,1024 * 1024);
  channel.register(selector,SelectionKey.OP_READ).attach(new IOContext());
}",0.9758454106280192
31523,"public boolean parse(long ptr,int len,MultipartListener listener) throws InvalidMultipartHeader, HeadersTooLargeException {
  long hi=ptr + len;
  long _lo=Long.MAX_VALUE;
  char b;
  while (ptr < hi) {
switch (state) {
case BODY_BROKEN:
      _lo=ptr;
    state=State.BODY_CONTINUED;
  break;
case START_BOUNDARY:
boundaryPtr=1;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
state=State.PARTIAL_START_BOUNDARY;
return false;
case MATCH:
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
default :
throw InvalidMultipartHeader.INSTANCE;
}
break;
case PARTIAL_START_BOUNDARY:
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
return false;
case MATCH:
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
default :
throw InvalidMultipartHeader.INSTANCE;
}
break;
case PRE_HEADERS:
switch (Unsafe.getUnsafe().getByte(ptr)) {
case '\r':
ptr++;
break;
case '\n':
state=State.HEADERS;
ptr++;
break;
case '-':
return true;
default :
_lo=ptr;
state=State.BODY_CONTINUED;
}
break;
case HEADERS:
hb.clear();
case PARTIAL_HEADERS:
ptr=hb.write(ptr,(int)(hi - ptr),false);
if (hb.isIncomplete()) {
state=State.PARTIAL_HEADERS;
return false;
}
_lo=ptr;
state=State.BODY;
break;
case BODY_CONTINUED:
case BODY:
b=(char)Unsafe.getUnsafe().getByte(ptr++);
if (b == boundary.charAt(0)) {
boundaryPtr=1;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
listener.onChunk(hb,bytes.of(_lo,ptr - 1),state == State.BODY_CONTINUED);
state=State.POTENTIAL_BOUNDARY;
return false;
case MATCH:
listener.onChunk(hb,bytes.of(_lo,ptr - 1),state == State.BODY_CONTINUED);
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
}
}
break;
case POTENTIAL_BOUNDARY:
int p=boundaryPtr;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
return false;
case MATCH:
ptr+=consumedBoundaryLen;
state=State.PRE_HEADERS;
break;
case NO_MATCH:
listener.onChunk(hb,chars.of(boundary,0,p),true);
state=State.BODY_BROKEN;
break;
}
break;
}
}
if (state == State.BODY || state == State.BODY_CONTINUED) {
listener.onChunk(hb,bytes.of(_lo,ptr),state == State.BODY_CONTINUED);
state=State.BODY_BROKEN;
}
return false;
}","public boolean parse(long ptr,int len,MultipartListener listener) throws InvalidMultipartHeader, HeadersTooLargeException {
  long hi=ptr + len;
  long _lo=Long.MAX_VALUE;
  char b;
  while (ptr < hi) {
switch (state) {
case BODY_BROKEN:
      _lo=ptr;
    state=State.BODY_CONTINUED;
  break;
case START_BOUNDARY:
boundaryPtr=1;
case PARTIAL_START_BOUNDARY:
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
state=State.PARTIAL_START_BOUNDARY;
return false;
case MATCH:
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
default :
throw InvalidMultipartHeader.INSTANCE;
}
break;
case PRE_HEADERS:
switch (Unsafe.getUnsafe().getByte(ptr)) {
case '\n':
state=State.HEADERS;
case '\r':
ptr++;
break;
case '-':
return true;
default :
_lo=ptr;
state=State.BODY_CONTINUED;
}
break;
case HEADERS:
hb.clear();
case PARTIAL_HEADERS:
ptr=hb.write(ptr,(int)(hi - ptr),false);
if (hb.isIncomplete()) {
state=State.PARTIAL_HEADERS;
return false;
}
_lo=ptr;
state=State.BODY;
break;
case BODY_CONTINUED:
case BODY:
b=(char)Unsafe.getUnsafe().getByte(ptr++);
if (b == boundary.charAt(0)) {
boundaryPtr=1;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
listener.onChunk(hb,bytes.of(_lo,ptr - 1),state == State.BODY_CONTINUED);
state=State.POTENTIAL_BOUNDARY;
return false;
case MATCH:
listener.onChunk(hb,bytes.of(_lo,ptr - 1),state == State.BODY_CONTINUED);
state=State.PRE_HEADERS;
ptr+=consumedBoundaryLen;
break;
}
}
break;
case POTENTIAL_BOUNDARY:
int p=boundaryPtr;
switch (matchBoundary(ptr,hi)) {
case INCOMPLETE:
return false;
case MATCH:
ptr+=consumedBoundaryLen;
state=State.PRE_HEADERS;
break;
case NO_MATCH:
listener.onChunk(hb,chars.of(boundary,0,p),true);
state=State.BODY_BROKEN;
break;
}
break;
}
}
if (state == State.BODY || state == State.BODY_CONTINUED) {
listener.onChunk(hb,bytes.of(_lo,ptr),state == State.BODY_CONTINUED);
state=State.BODY_BROKEN;
}
return false;
}",0.5649546827794562
31524,"@Override public void clear(){
  this.needMethod=true;
  this._wptr=this._lo=this.headerPtr;
  pool.clear();
  this.incomplete=true;
  this.headers.clear();
  this.method=null;
  this.url=null;
  this.n=null;
}","@Override public void clear(){
  this.needMethod=true;
  this._wptr=this._lo=this.headerPtr;
  this.incomplete=true;
  this.headers.clear();
  this.method=null;
  this.url=null;
  this.n=null;
}",0.9603960396039604
31525,"public Response(int headerBufferSize,int contentBufferSize){
  if (headerBufferSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (contentBufferSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int sz=Numbers.ceilPow2(contentBufferSize);
  this.out=ByteBuffer.allocateDirect(sz);
  this.hb=new ResponseHeaderBuffer(headerBufferSize);
  this.chunkHeader=ByteBuffer.allocateDirect((int)Math.log10(sz) + 5);
  this.outPtr=this._wptr=((DirectBuffer)out).address();
  this.limit=outPtr + sz;
}","public Response(int headerBufferSize,int contentBufferSize){
  if (headerBufferSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (contentBufferSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int sz=Numbers.ceilPow2(contentBufferSize);
  this.out=ByteBuffer.allocateDirect(sz);
  this.hb=new ResponseHeaderBuffer(headerBufferSize);
  this.chunkHeader=ByteBuffer.allocateDirect(8 + 2 * EOL.length());
  this.chunkSink=new DirectUnboundedAnsiSink(((DirectBuffer)chunkHeader).address());
  this.chunkSink.put(EOL);
  this.outPtr=this._wptr=((DirectBuffer)out).address();
  this.limit=outPtr + sz;
}",0.742714404662781
31526,"public void flush() throws IOException {
  int lim=(int)(_wptr - outPtr);
  if (lim > 0) {
    chunk(lim);
    out.limit(lim);
    channel.write(out);
    out.clear();
    _wptr=outPtr;
  }
}","public void flush() throws IOException {
  int lim=(int)(_wptr - outPtr);
  if (lim > 0) {
    chunk(lim);
    out.limit(lim);
    MultipartParser.dump(out);
    channel.write(out);
    out.clear();
    _wptr=outPtr;
  }
}",0.9249394673123488
31527,"private void chunk(int len) throws IOException {
  chunkHeader.clear();
  String h=EOL + Integer.toHexString(len) + EOL;
  for (int i=0; i < h.length(); i++) {
    chunkHeader.put((byte)h.charAt(i));
  }
  chunkHeader.flip();
  channel.write(chunkHeader);
}","private void chunk(int len) throws IOException {
  chunkHeader.clear();
  chunkSink.clear(EOL.length());
  Numbers.appendHex(chunkSink,len);
  chunkSink.put(EOL);
  chunkHeader.limit(chunkSink.length());
  MultipartParser.dump(chunkHeader);
  channel.write(chunkHeader);
}",0.3553875236294896
31528,"void flush(WritableByteChannel channel) throws IOException {
  headers.limit((int)(_wptr - headerPtr));
  channel.write(headers);
  headers.clear();
}","void flush(WritableByteChannel channel) throws IOException {
  headers.limit((int)(_wptr - headerPtr));
  MultipartParser.dump(headers);
  channel.write(headers);
  headers.clear();
}",0.9009009009009008
31529,"private int writeRec(Record record,long offset){
  return writeRec0(pages.getQuick(pageIndex(offset)) + pageOffset(offset) + 4,record) + 4;
}","private void writeRec(Record record,long offset){
  writeRec0(pages.getQuick(pageIndex(offset)) + pageOffset(offset) + 4,record);
}",0.9411764705882352
31530,"public void put(Record record){
  final MapValues values=getBySlave(record);
  int size=varOffset;
  for (int i=0, n=varColumns.size(); i < n; i++) {
    size+=record.getStrLen(varColumns.getQuick(i)) * 2 + 4;
  }
  if (size > maxRecordSize) {
    throw new JournalRuntimeException(""String_Node_Str"");
  }
  if (values.isNew()) {
    values.putLong(0,appendOffset);
    appendOffset+=appendRec(record,size);
  }
 else {
    long offset=values.getLong(0);
    int pgInx=pageIndex(offset);
    int pgOfs=pageOffset(offset);
    int oldSize=Unsafe.getUnsafe().getInt(pages.getQuick(pgInx) + pgOfs);
    if (size > oldSize) {
      freeList.add(offset,oldSize);
      if (freeList.getTotalSize() < maxRecordSize) {
        values.putLong(0,appendOffset);
        appendOffset+=appendRec(record,size);
      }
 else {
        long _offset=freeList.findAndRemove(size);
        if (_offset == -1) {
          appendOffset+=appendRec(record,size);
        }
 else {
          writeRec(record,_offset);
        }
      }
    }
 else {
      writeRec(record,offset);
    }
  }
}","public void put(Record record){
  final MapValues values=getBySlave(record);
  int size=varOffset;
  for (int i=0, n=varColumns.size(); i < n; i++) {
    size+=record.getStrLen(varColumns.getQuick(i)) * 2 + 4;
  }
  if (size > maxRecordSize) {
    throw new JournalRuntimeException(""String_Node_Str"");
  }
  if (values.isNew()) {
    appendRec(record,size,values);
  }
 else {
    long offset=values.getLong(0);
    int pgInx=pageIndex(offset);
    int pgOfs=pageOffset(offset);
    int oldSize=Unsafe.getUnsafe().getInt(pages.getQuick(pgInx) + pgOfs);
    if (size > oldSize) {
      freeList.add(offset,oldSize);
      if (freeList.getTotalSize() < maxRecordSize) {
        appendRec(record,size,values);
      }
 else {
        long _offset=freeList.findAndRemove(size);
        if (_offset == -1) {
          appendRec(record,size,values);
        }
 else {
          writeRec(record,_offset);
        }
      }
    }
 else {
      writeRec(record,offset);
    }
  }
}",0.8946594806467418
31531,"private int appendRec(Record record,int size){
  int pgInx=pageIndex(appendOffset);
  int pgOfs=pageOffset(appendOffset);
  if (pgOfs + size > pageSize) {
    pgInx++;
    pgOfs=0;
  }
  if (pgInx == pages.size()) {
    pages.add(Unsafe.getUnsafe().allocateMemory(pageSize));
  }
  long addr=pages.getQuick(pgInx) + pgOfs;
  Unsafe.getUnsafe().putInt(addr,size + size / 10);
  return writeRec0(addr + 4,record) + 4;
}","private void appendRec(Record record,int size,MapValues values){
  int pgInx=pageIndex(appendOffset);
  int pgOfs=pageOffset(appendOffset);
  size=size + 4 + size / 10;
  if (pgOfs + size > pageSize) {
    pgInx++;
    pgOfs=0;
    values.putLong(0,appendOffset=(pgInx * pageSize));
  }
 else {
    values.putLong(0,appendOffset);
  }
  appendOffset+=size;
  if (pgInx == pages.size()) {
    pages.add(Unsafe.getUnsafe().allocateMemory(pageSize));
  }
  long addr=pages.getQuick(pgInx) + pgOfs;
  Unsafe.getUnsafe().putInt(addr,size - 4);
  writeRec0(addr + 4,record);
}",0.3302938196555218
31532,"private int pageOffset(long offset){
  return (int)(offset % pageSize);
}","private int pageOffset(long offset){
  return (int)(offset & mask);
}",0.9154929577464788
31533,"public LastVarRecordMap(RecordMetadata masterMetadata,RecordMetadata slaveMetadata,ObjList<CharSequence> keyColumns,int pageSize){
  this.pageSize=Numbers.ceilPow2(pageSize);
  this.maxRecordSize=pageSize - 4;
  final int ksz=keyColumns.size();
  this.masterKeyTypes=new ObjList<>(ksz);
  this.slaveKeyTypes=new ObjList<>(ksz);
  this.masterKeyIndexes=new IntHashSet(ksz);
  this.slaveKeyIndexes=new IntHashSet(ksz);
  ObjList<RecordColumnMetadata> keyCols=new ObjList<>(ksz);
  for (int i=0; i < ksz; i++) {
    int idx;
    idx=masterMetadata.getColumnIndex(keyColumns.getQuick(i));
    masterKeyTypes.add(masterMetadata.getColumn(idx).getType());
    masterKeyIndexes.add(idx);
    idx=slaveMetadata.getColumnIndex(keyColumns.getQuick(i));
    slaveKeyIndexes.add(idx);
    slaveKeyTypes.add(slaveMetadata.getColumn(idx).getType());
    keyCols.add(slaveMetadata.getColumn(idx));
  }
  this.fixedOffsets=new IntList(ksz - keyCols.size());
  this.slaveValueIndexes=new IntList(ksz - keyCols.size());
  this.slaveValueTypes=new ObjList<>(ksz - keyCols.size());
  ObjList<CharSequence> slaveColumnNames=new ObjList<>();
  int varOffset=0;
  for (int i=0, n=slaveMetadata.getColumnCount(); i < n; i++) {
    if (slaveKeyIndexes.contains(i)) {
      continue;
    }
    slaveColumnNames.add(slaveMetadata.getColumn(i).getName());
    fixedOffsets.add(varOffset);
    slaveValueIndexes.add(i);
    ColumnType type=slaveMetadata.getColumn(i).getType();
    slaveValueTypes.add(type);
switch (type) {
case INT:
case FLOAT:
      varOffset+=4;
    break;
case LONG:
case DOUBLE:
case DATE:
  varOffset+=8;
break;
case BOOLEAN:
case BYTE:
varOffset++;
break;
case SHORT:
varOffset+=2;
break;
default :
varColumns.add(i);
varOffset+=4;
break;
}
}
if (varOffset > maxRecordSize) {
throw new JournalRuntimeException(""String_Node_Str"");
}
this.varOffset=varOffset;
this.map=new MultiMap(valueMetadata,keyCols,null);
this.metadata=new SelectedColumnsMetadata(slaveMetadata,slaveColumnNames,EMPTY_MAP);
this.record=new MapRecord(this.metadata);
}","public LastVarRecordMap(RecordMetadata masterMetadata,RecordMetadata slaveMetadata,ObjList<CharSequence> keyColumns,int pageSize){
  this.pageSize=Numbers.ceilPow2(pageSize);
  this.maxRecordSize=pageSize - 4;
  this.bits=Numbers.msb(this.pageSize);
  this.mask=this.pageSize - 1;
  final int ksz=keyColumns.size();
  this.masterKeyTypes=new ObjList<>(ksz);
  this.slaveKeyTypes=new ObjList<>(ksz);
  this.masterKeyIndexes=new IntHashSet(ksz);
  this.slaveKeyIndexes=new IntHashSet(ksz);
  ObjList<RecordColumnMetadata> keyCols=new ObjList<>(ksz);
  for (int i=0; i < ksz; i++) {
    int idx;
    idx=masterMetadata.getColumnIndex(keyColumns.getQuick(i));
    masterKeyTypes.add(masterMetadata.getColumn(idx).getType());
    masterKeyIndexes.add(idx);
    idx=slaveMetadata.getColumnIndex(keyColumns.getQuick(i));
    slaveKeyIndexes.add(idx);
    slaveKeyTypes.add(slaveMetadata.getColumn(idx).getType());
    keyCols.add(slaveMetadata.getColumn(idx));
  }
  this.fixedOffsets=new IntList(ksz - keyCols.size());
  this.slaveValueIndexes=new IntList(ksz - keyCols.size());
  this.slaveValueTypes=new ObjList<>(ksz - keyCols.size());
  ObjList<CharSequence> slaveColumnNames=new ObjList<>();
  int varOffset=0;
  for (int i=0, n=slaveMetadata.getColumnCount(); i < n; i++) {
    if (slaveKeyIndexes.contains(i)) {
      continue;
    }
    slaveColumnNames.add(slaveMetadata.getColumn(i).getName());
    fixedOffsets.add(varOffset);
    slaveValueIndexes.add(i);
    ColumnType type=slaveMetadata.getColumn(i).getType();
    slaveValueTypes.add(type);
switch (type) {
case INT:
case FLOAT:
      varOffset+=4;
    break;
case LONG:
case DOUBLE:
case DATE:
  varOffset+=8;
break;
case BOOLEAN:
case BYTE:
varOffset++;
break;
case SHORT:
varOffset+=2;
break;
default :
varColumns.add(i);
varOffset+=4;
break;
}
}
if (varOffset > maxRecordSize) {
throw new JournalRuntimeException(""String_Node_Str"");
}
this.varOffset=varOffset;
this.map=new MultiMap(valueMetadata,keyCols,null);
this.metadata=new SelectedColumnsMetadata(slaveMetadata,slaveColumnNames,EMPTY_MAP);
this.record=new MapRecord(this.metadata);
}",0.9828378051728306
31534,"private int writeRec0(long addr,Record record){
  int varOffset=this.varOffset;
  for (int i=0, n=slaveValueIndexes.size(); i < n; i++) {
    int idx=slaveValueIndexes.getQuick(i);
    long address=addr + fixedOffsets.getQuick(i);
switch (slaveValueTypes.getQuick(i)) {
case INT:
case SYMBOL:
      Unsafe.getUnsafe().putInt(address,record.getInt(idx));
    break;
case LONG:
  Unsafe.getUnsafe().putLong(address,record.getLong(idx));
break;
case FLOAT:
Unsafe.getUnsafe().putFloat(address,record.getFloat(idx));
break;
case DOUBLE:
Unsafe.getUnsafe().putDouble(address,record.getDouble(idx));
break;
case BOOLEAN:
case BYTE:
Unsafe.getUnsafe().putByte(address,record.get(idx));
break;
case SHORT:
Unsafe.getUnsafe().putShort(address,record.getShort(idx));
break;
case DATE:
Unsafe.getUnsafe().putLong(address,record.getDate(idx));
break;
case STRING:
Unsafe.getUnsafe().putInt(address,varOffset);
varOffset+=writeStr(addr + varOffset,record.getFlyweightStr(idx));
break;
}
}
return varOffset;
}","private void writeRec0(long addr,Record record){
  int varOffset=this.varOffset;
  for (int i=0, n=slaveValueIndexes.size(); i < n; i++) {
    int idx=slaveValueIndexes.getQuick(i);
    long address=addr + fixedOffsets.getQuick(i);
switch (slaveValueTypes.getQuick(i)) {
case INT:
case SYMBOL:
      Unsafe.getUnsafe().putInt(address,record.getInt(idx));
    break;
case LONG:
  Unsafe.getUnsafe().putLong(address,record.getLong(idx));
break;
case FLOAT:
Unsafe.getUnsafe().putFloat(address,record.getFloat(idx));
break;
case DOUBLE:
Unsafe.getUnsafe().putDouble(address,record.getDouble(idx));
break;
case BOOLEAN:
case BYTE:
Unsafe.getUnsafe().putByte(address,record.get(idx));
break;
case SHORT:
Unsafe.getUnsafe().putShort(address,record.getShort(idx));
break;
case DATE:
Unsafe.getUnsafe().putLong(address,record.getDate(idx));
break;
case STRING:
Unsafe.getUnsafe().putInt(address,varOffset);
varOffset+=writeStr(addr + varOffset,record.getFlyweightStr(idx));
break;
}
}
}",0.9873289406994424
31535,"private int pageIndex(long offset){
  return (int)(offset / pageSize);
}","private int pageIndex(long offset){
  return (int)(offset >> bits);
}",0.9078014184397164
31536,"@Override public Record next(){
  Record master=masterCursor.next();
  record.setA(master);
  long ts=master.getDate(masterTimestampIndex);
  if (delayedSlave != null) {
    map.put(delayedSlave);
    delayedSlave=null;
  }
  while (slaveCursor.hasNext()) {
    Record slave=slaveCursor.next();
    if (ts > slave.getDate(slaveTimestampIndex)) {
      map.put(slave);
    }
 else {
      record.setB(map.get(master));
      delayedSlave=slave;
      return record;
    }
  }
  record.setB(null);
  return record;
}","@Override public Record next(){
  Record master=masterCursor.next();
  record.setA(master);
  long ts=master.getDate(masterTimestampIndex);
  if (delayedSlave != null) {
    if (ts > delayedSlave.getDate(slaveTimestampIndex)) {
      map.put(delayedSlave);
      delayedSlave=null;
    }
 else {
      record.setB(null);
      return record;
    }
  }
  while (slaveCursor.hasNext()) {
    Record slave=slaveCursor.next();
    if (ts > slave.getDate(slaveTimestampIndex)) {
      map.put(slave);
    }
 else {
      record.setB(map.get(master));
      delayedSlave=slave;
      return record;
    }
  }
  record.setB(null);
  return record;
}",0.8633217993079585
31537,"public AsOfJoinRecordSource(RecordSource<? extends Record> master,int masterTimestampIndex,RecordSource<? extends Record> slave,int slaveTimestampIndex,ObjList<CharSequence> keyColumns){
  this.master=master;
  this.masterTimestampIndex=masterTimestampIndex;
  this.slave=slave;
  this.slaveTimestampIndex=slaveTimestampIndex;
  this.map=new LastVarRecordMap(master.getMetadata(),slave.getMetadata(),keyColumns,4 * 1024 * 1024);
  this.metadata=new SplitRecordMetadata(master.getMetadata(),map.getMetadata());
  this.record=new SplitRecord(this.metadata,master.getMetadata().getColumnCount());
}","public AsOfJoinRecordSource(RecordSource<? extends Record> master,int masterTimestampIndex,RecordSource<? extends Record> slave,int slaveTimestampIndex,ObjList<CharSequence> keyColumns,int pageSize){
  this.master=master;
  this.masterTimestampIndex=masterTimestampIndex;
  this.slave=slave;
  this.slaveTimestampIndex=slaveTimestampIndex;
  this.map=new LastVarRecordMap(master.getMetadata(),slave.getMetadata(),keyColumns,pageSize);
  this.metadata=new SplitRecordMetadata(master.getMetadata(),map.getMetadata());
  this.record=new SplitRecord(this.metadata,master.getMetadata().getColumnCount());
}",0.9698996655518396
31538,"@Test public void testJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  AsOfJoinRecordSource source=new AsOfJoinRecordSource(compiler.compileSource(""String_Node_Str""),0,compiler.compileSource(""String_Node_Str""),0,new ObjList<CharSequence>(){
{
      add(""String_Node_Str"");
    }
  }
);
  printer.printCursor(source.prepareCursor(factory));
  TestUtils.assertEquals(expected,sink);
}","@Test public void testJoin() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  AsOfJoinRecordSource source=new AsOfJoinRecordSource(compiler.compileSource(""String_Node_Str""),0,compiler.compileSource(""String_Node_Str""),0,new ObjList<CharSequence>(){
{
      add(""String_Node_Str"");
    }
  }
,512);
  printer.printCursor(source.prepareCursor(factory));
  TestUtils.assertEquals(expected,sink);
}",0.996545768566494
31539,"public void clear(int capacity){
  ensureCapacity(capacity);
  pos=0;
  Arrays.fill(buffer,noEntryValue);
}","public void clear(){
  pos=0;
  Arrays.fill(buffer,noEntryValue);
}",0.7701149425287356
31540,"public RecordSource<? extends Record> compileSource(CharSequence query) throws ParserException, JournalException {
  RecordSource<? extends Record> rs=cache.get(query);
  if (rs == null) {
    rs=builder.resetAndCompile(parser.parse(query).getQueryModel(),factory);
  }
 else {
    rs.reset();
  }
  return rs;
}","public RecordSource<? extends Record> compileSource(CharSequence query) throws ParserException, JournalException {
  RecordSource<? extends Record> rs=cache.get(query);
  if (rs == null) {
    rs=builder.resetAndCompile(parser.parse(query).getQueryModel(),factory);
    cache.put(query,rs);
  }
 else {
    rs.reset();
  }
  return rs;
}",0.9614791987673345
31541,"public DirectPagedBuffer(int pageCapacity){
  this.pageCapacity=Numbers.ceilPow2(pageCapacity);
  this.bits=31 - Integer.numberOfLeadingZeros(this.pageCapacity);
  this.mask=this.pageCapacity - 1;
  pages=new LongList();
  allocateAddress();
}","public DirectPagedBuffer(int pageCapacity){
  this.pageCapacity=Numbers.ceilPow2(pageCapacity);
  this.bits=31 - Integer.numberOfLeadingZeros(this.pageCapacity);
  this.mask=this.pageCapacity - 1;
  pages=new LongList();
  allocateAddress(0);
}",0.997946611909651
31542,"public long getWriteOffsetWithChecks(long length){
  if (cachePageLo + length > cachePageHi) {
    allocateAddressChecked(length);
  }
  return (cachePageLo+=length) - length;
}","public long getWriteOffsetWithChecks(long length){
  if (cachePageLo + length > cachePageHi) {
    allocateAddressChecked((cachePageLo + length) >>> bits,length);
  }
  return (cachePageLo+=length) - length;
}",0.917098445595855
31543,"private long allocatePage(){
  pages.add(Unsafe.getUnsafe().allocateMemory(pageCapacity));
  return (pages.size() - 1) << bits;
}","private long allocatePage(int index){
  pages.add(Unsafe.getUnsafe().allocateMemory(pageCapacity));
  return (pages.size() - 1) << bits;
}",0.9662921348314608
31544,"public void clear(){
  cachePageLo=pages.get(0);
  cachePageHi=cachePageLo + pageCapacity;
}","public void clear(){
  cachePageLo=0;
  cachePageHi=cachePageLo + pageCapacity;
  for (int i=0; i < pages.size(); i++) {
    long address=pages.getQuick(i);
    if (address != 0) {
      Unsafe.getUnsafe().freeMemory(address);
    }
  }
  pages.clear();
  allocateAddress(0);
}",0.4336043360433604
31545,"private void allocateAddress(){
  cachePageLo=allocatePage();
  cachePageHi=cachePageLo + pageCapacity;
}","private void allocateAddress(long index){
  if (index > Integer.MAX_VALUE) {
    throw new OutOfMemoryError();
  }
  cachePageLo=allocatePage((int)index);
  cachePageHi=cachePageLo + pageCapacity;
}",0.693069306930693
31546,"private void allocateAddressChecked(long length){
  if (length > pageCapacity) {
    throw new JournalRuntimeException(""String_Node_Str"",length,pageCapacity);
  }
  allocateAddress();
}","private void allocateAddressChecked(long index,long length){
  if (length > pageCapacity) {
    throw new JournalRuntimeException(""String_Node_Str"",length,pageCapacity);
  }
  allocateAddress(index);
}",0.9585492227979274
31547,"@Override public void close() throws IOException {
  if (pages != null) {
    for (int i=0; i < pages.size(); i++) {
      long address=pages.get(i);
      if (address != 0) {
        Unsafe.getUnsafe().freeMemory(address);
      }
    }
    pages=null;
  }
}","@Override public void close() throws IOException {
  clear();
}",0.3726708074534161
31548,"public long toAddress(long offset){
  return pages.get((int)(offset >> bits)) + (offset & mask);
}","public long toAddress(long offset){
  return pages.get((int)(offset >>> bits)) + (offset & mask);
}",0.9949238578680204
31549,"public long getWriteOffsetQuick(long length){
  if (cachePageLo + length > cachePageHi) {
    allocateAddress();
  }
  return (cachePageLo+=length) - length;
}","public long getWriteOffsetQuick(long length){
  if (cachePageLo + length > cachePageHi) {
    allocateAddress((cachePageLo + length) >>> bits);
  }
  return (cachePageLo+=length) - length;
}",0.9111747851002864
31550,"public void clear(){
  buffer.clear();
}","public void clear(){
  buffer.clear();
  readOffset=-1;
}",0.8247422680412371
31551,"public void clear(){
  kPos=kStart;
  free=(int)(keyCapacity * loadFactor);
  size=0;
  offsets.clear((byte)-1);
}","public void clear(){
  kPos=kStart;
  free=(int)(keyCapacity * loadFactor);
  size=0;
  offsets.fill(-1);
}",0.9411764705882352
31552,"public void clear(){
  map.clear();
}","public void clear(){
  map.clear();
  records.clear();
}",0.7956989247311828
31553,"@Override public PartitionCursor prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.journal=factory.reader(metadata).select();
  storageFacade.setJournal(journal);
  storageFacade.setFactory(factory);
  partitionCount=journal.getPartitionCount();
  partitionIndex=0;
  return this;
}","@Override public PartitionCursor prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.journal=factory.reader(metadata);
  storageFacade.setJournal(journal);
  storageFacade.setFactory(factory);
  partitionCount=journal.getPartitionCount();
  partitionIndex=0;
  return this;
}",0.9852216748768472
31554,"@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.recordCursor=recordSource.prepareCursor(factory);
  return this;
}","@Override public RecordCursor<Record> prepareCursor(JournalReaderFactory factory) throws JournalException {
  this.recordCursor=recordSource.prepareCursor(factory);
  current.prepare(recordCursor.getSymFacade());
  return this;
}",0.8829268292682927
31555,"@SuppressFBWarnings({""String_Node_Str""}) public static FunctionFactory find(Signature sig,ObjList<VirtualColumn> args){
  if (Chars.equals(""String_Node_Str"",sig.name) && sig.paramCount == 2 && sig.paramTypes.getQuick(1) == ColumnType.DOUBLE && args.getQuick(1).isConstant()) {
    double d=args.getQuick(1).getDouble(null);
    if (d != d) {
switch (sig.paramTypes.getQuick(0)) {
case DOUBLE:
        return DoubleEqualsNaNOperatorFactory.INSTANCE;
case INT:
      return IntEqualsNaNOperatorFactory.INSTANCE;
case LONG:
    return LongEqualsNaNOperatorFactory.INSTANCE;
}
}
}
FunctionFactory factory=factories.get(sig);
if (factory != null) {
return factory;
}
 else {
if (sig.paramCount < 3 && Chars.equals(""String_Node_Str"",sig.name)) {
switch (sig.paramTypes.get(0)) {
case STRING:
  return StrInOperatorFactory.INSTANCE;
case SYMBOL:
return SymInOperatorFactory.INSTANCE;
}
}
 else if (sig.paramCount > 2 && Chars.equals(""String_Node_Str"",sig.name)) {
switch (sig.paramTypes.getLast()) {
case STRING:
return StrInOperatorFactory.INSTANCE;
case SYMBOL:
return SymInOperatorFactory.INSTANCE;
}
}
}
return null;
}","@SuppressFBWarnings({""String_Node_Str""}) public static FunctionFactory find(Signature sig,ObjList<VirtualColumn> args){
  if (Chars.equals(""String_Node_Str"",sig.name) && sig.paramCount == 2 && sig.paramTypes.getQuick(1) == ColumnType.DOUBLE && args.getQuick(1).isConstant()) {
    double d=args.getQuick(1).getDouble(null);
    if (d != d) {
switch (sig.paramTypes.getQuick(0)) {
case DOUBLE:
        return DoubleEqualsNaNOperatorFactory.INSTANCE;
case INT:
      return IntEqualsNaNOperatorFactory.INSTANCE;
case LONG:
    return LongEqualsNaNOperatorFactory.INSTANCE;
}
}
}
FunctionFactory factory=factories.get(sig);
if (factory != null) {
return factory;
}
 else {
if (Chars.equals(""String_Node_Str"",sig.name)) {
switch (sig.paramTypes.getQuick(0)) {
case STRING:
  return StrInOperatorFactory.INSTANCE;
case SYMBOL:
return SymInOperatorFactory.INSTANCE;
}
}
}
return null;
}",0.8641604010025062
31556,"private void createColumn(ExprNode node,RecordMetadata metadata) throws ParserException {
  Signature sig=new Signature();
  ObjList<VirtualColumn> args=new ObjList<>();
  int argCount=node.paramCount;
  sig.clear();
switch (argCount) {
case 0:
switch (node.type) {
case LITERAL:
      stack.addFirst(lookupColumn(node,metadata));
    break;
case CONSTANT:
  stack.addFirst(parseConstant(node));
break;
default :
stack.addFirst(lookupFunction(node,sig.setName(node.token).setParamCount(0),null));
}
break;
default :
args.ensureCapacity(argCount);
sig.setName(node.token).setParamCount(argCount);
for (int n=0; n < argCount; n++) {
VirtualColumn c=stack.pollFirst();
if (c == null) {
throw new ParserException(node.position,""String_Node_Str"");
}
sig.paramType(n,c.getType(),c.isConstant());
args.setQuick(n,c);
}
stack.addFirst(lookupFunction(node,sig,args));
}
}","private void createColumn(ExprNode node,RecordMetadata metadata) throws ParserException {
  ObjList<VirtualColumn> args=new ObjList<>();
  int argCount=node.paramCount;
  mutableSig.clear();
switch (argCount) {
case 0:
switch (node.type) {
case LITERAL:
      stack.addFirst(lookupColumn(node,metadata));
    break;
case CONSTANT:
  stack.addFirst(parseConstant(node));
break;
default :
stack.addFirst(lookupFunction(node,mutableSig.setName(node.token).setParamCount(0),null));
}
break;
default :
args.ensureCapacity(argCount);
mutableSig.setName(node.token).setParamCount(argCount);
for (int n=0; n < argCount; n++) {
VirtualColumn c=stack.pollFirst();
if (c == null) {
throw new ParserException(node.position,""String_Node_Str"");
}
mutableSig.paramType(n,c.getType(),c.isConstant());
args.setQuick(n,c);
}
stack.addFirst(lookupFunction(node,mutableSig,args));
}
}",0.954808806488992
31557,"public RecordSource<? extends Record> compile(QueryModel model) throws ParserException, JournalException {
  RecordSource<? extends Record> rs=createRecordSource(model);
  RecordMetadata meta=rs.getMetadata();
  ObjList<QueryColumn> columns=model.getColumns();
  ObjList<VirtualColumn> virtualColumns=new ObjList<>();
  ObjList<String> selectedColumns=new ObjList<>();
  int columnSequence=0;
  for (int i=0, k=columns.size(); i < k; i++) {
    QueryColumn qc=columns.getQuick(i);
    ExprNode node=qc.getAst();
switch (node.type) {
case LITERAL:
      if (meta.invalidColumn(node.token)) {
        throw new InvalidColumnException(node.position);
      }
    selectedColumns.add(node.token);
  break;
default :
String colName=qc.getName() == null ? ""String_Node_Str"" + columnSequence++ : qc.getName();
VirtualColumn c=createVirtualColumn(qc.getAst(),rs.getMetadata());
c.setName(colName);
selectedColumns.add(colName);
virtualColumns.add(c);
}
}
if (virtualColumns.size() > 0) {
rs=new VirtualColumnRecordSource(rs,virtualColumns);
}
return new SelectedColumnsRecordSource(rs,selectedColumns);
}","public RecordSource<? extends Record> compile(QueryModel model,JournalReaderFactory factory) throws ParserException, JournalException {
  RecordSource<? extends Record> rs=createRecordSource(model,factory);
  RecordMetadata meta=rs.getMetadata();
  ObjList<QueryColumn> columns=model.getColumns();
  ObjList<VirtualColumn> virtualColumns=new ObjList<>();
  ObjList<String> selectedColumns=new ObjList<>();
  int columnSequence=0;
  for (int i=0, k=columns.size(); i < k; i++) {
    QueryColumn qc=columns.getQuick(i);
    ExprNode node=qc.getAst();
switch (node.type) {
case LITERAL:
      if (meta.invalidColumn(node.token)) {
        throw new InvalidColumnException(node.position);
      }
    selectedColumns.add(node.token);
  break;
default :
String colName=qc.getName() == null ? ""String_Node_Str"" + columnSequence++ : qc.getName();
VirtualColumn c=createVirtualColumn(qc.getAst(),rs.getMetadata());
c.setName(colName);
selectedColumns.add(colName);
virtualColumns.add(c);
}
}
if (virtualColumns.size() > 0) {
rs=new VirtualColumnRecordSource(rs,virtualColumns);
}
return new SelectedColumnsRecordSource(rs,selectedColumns);
}",0.9834006280843428
31558,"@SuppressFBWarnings({""String_Node_Str"",""String_Node_Str""}) private RecordSource<? extends Record> createRecordSource(QueryModel model) throws JournalException, ParserException {
  ExprNode readerNode=model.getJournalName();
  if (readerNode.type != ExprNode.NodeType.LITERAL && readerNode.type != ExprNode.NodeType.CONSTANT) {
    throw new ParserException(readerNode.position,""String_Node_Str"");
  }
  JournalConfiguration configuration=factory.getConfiguration();
  String reader=Chars.stripQuotes(readerNode.token);
  if (configuration.exists(reader) == JournalConfiguration.JournalExistenceCheck.DOES_NOT_EXIST) {
    throw new ParserException(readerNode.position,""String_Node_Str"");
  }
  if (configuration.exists(reader) == JournalConfiguration.JournalExistenceCheck.EXISTS_FOREIGN) {
    throw new ParserException(readerNode.position,""String_Node_Str"");
  }
  JournalMetadata metadata=factory.getOrCreateMetadata(new JournalKey<>(reader));
  PartitionSource ps=new JournalPartitionSource(metadata,true);
  RowSource rs=null;
  String latestByCol=null;
  ColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.NodeType.LITERAL) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    if (metadata.invalidColumn(latestByNode.token)) {
      throw new InvalidColumnException(latestByNode.position);
    }
    latestByMetadata=metadata.getColumn(latestByNode.token);
    if (latestByMetadata.type != ColumnType.SYMBOL && latestByMetadata.type != ColumnType.STRING) {
      throw new ParserException(latestByNode.position,""String_Node_Str"" + latestByMetadata.type);
    }
    if (!latestByMetadata.indexed) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    latestByCol=latestByNode.token;
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=intrinsicExtractor.extract(where,metadata,latestByCol);
    VirtualColumn filter=im.filter != null ? createVirtualColumn(im.filter,metadata) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw new ParserException(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(metadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (metadata.getColumn(im.keyColumn).type) {
case SYMBOL:
            rs=createRecordSourceForSym(im);
          break;
case STRING:
        rs=createRecordSourceForStr(im);
      break;
  }
}
if (filter != null) {
  rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
switch (latestByMetadata.type) {
case SYMBOL:
  if (im.keyColumn != null) {
    rs=new KvIndexSymListHeadRowSource(latestByCol,im.keyValues,filter);
  }
 else {
    rs=new KvIndexAllSymHeadRowSource(latestByCol,filter);
  }
break;
case STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,im.keyValues,filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
break;
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.type) {
case SYMBOL:
rs=new KvIndexAllSymHeadRowSource(latestByCol,null);
break;
case STRING:
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
return new JournalSource(ps,rs == null ? new AllRowSource() : rs);
}","@SuppressFBWarnings({""String_Node_Str"",""String_Node_Str""}) private RecordSource<? extends Record> createRecordSource(QueryModel model,JournalReaderFactory factory) throws JournalException, ParserException {
  ExprNode readerNode=model.getJournalName();
  if (readerNode.type != ExprNode.NodeType.LITERAL && readerNode.type != ExprNode.NodeType.CONSTANT) {
    throw new ParserException(readerNode.position,""String_Node_Str"");
  }
  JournalConfiguration configuration=factory.getConfiguration();
  String reader=Chars.stripQuotes(readerNode.token);
  if (configuration.exists(reader) == JournalConfiguration.JournalExistenceCheck.DOES_NOT_EXIST) {
    throw new ParserException(readerNode.position,""String_Node_Str"");
  }
  if (configuration.exists(reader) == JournalConfiguration.JournalExistenceCheck.EXISTS_FOREIGN) {
    throw new ParserException(readerNode.position,""String_Node_Str"");
  }
  JournalMetadata metadata=factory.getOrCreateMetadata(new JournalKey<>(reader));
  PartitionSource ps=new JournalPartitionSource(metadata,true);
  RowSource rs=null;
  String latestByCol=null;
  ColumnMetadata latestByMetadata=null;
  ExprNode latestByNode=null;
  if (model.getLatestBy() != null) {
    latestByNode=model.getLatestBy();
    if (latestByNode.type != ExprNode.NodeType.LITERAL) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    if (metadata.invalidColumn(latestByNode.token)) {
      throw new InvalidColumnException(latestByNode.position);
    }
    latestByMetadata=metadata.getColumn(latestByNode.token);
    if (latestByMetadata.type != ColumnType.SYMBOL && latestByMetadata.type != ColumnType.STRING) {
      throw new ParserException(latestByNode.position,""String_Node_Str"" + latestByMetadata.type);
    }
    if (!latestByMetadata.indexed) {
      throw new ParserException(latestByNode.position,""String_Node_Str"");
    }
    latestByCol=latestByNode.token;
  }
  ExprNode where=model.getWhereClause();
  if (where != null) {
    IntrinsicModel im=intrinsicExtractor.extract(where,metadata,latestByCol);
    VirtualColumn filter=im.filter != null ? createVirtualColumn(im.filter,metadata) : null;
    if (filter != null) {
      if (filter.getType() != ColumnType.BOOLEAN) {
        throw new ParserException(im.filter.position,""String_Node_Str"");
      }
      if (filter.isConstant()) {
        if (filter.getBool(null)) {
          filter=null;
        }
 else {
          im.intrinsicValue=IntrinsicValue.FALSE;
        }
      }
    }
    if (im.intrinsicValue == IntrinsicValue.FALSE) {
      ps=new NoOpJournalPartitionSource(metadata);
    }
 else {
      if (im.intervalHi < Long.MAX_VALUE || im.intervalLo > Long.MIN_VALUE) {
        ps=new MultiIntervalPartitionSource(ps,new SingleIntervalSource(new Interval(im.intervalLo,im.intervalHi)));
      }
      if (im.intervalSource != null) {
        ps=new MultiIntervalPartitionSource(ps,im.intervalSource);
      }
      if (latestByCol == null) {
        if (im.keyColumn != null) {
switch (metadata.getColumn(im.keyColumn).type) {
case SYMBOL:
            rs=createRecordSourceForSym(im);
          break;
case STRING:
        rs=createRecordSourceForStr(im);
      break;
  }
}
if (filter != null) {
  rs=new FilteredRowSource(rs == null ? new AllRowSource() : rs,filter);
}
}
 else {
switch (latestByMetadata.type) {
case SYMBOL:
  if (im.keyColumn != null) {
    rs=new KvIndexSymListHeadRowSource(latestByCol,im.keyValues,filter);
  }
 else {
    rs=new KvIndexAllSymHeadRowSource(latestByCol,filter);
  }
break;
case STRING:
if (im.keyColumn != null) {
rs=new KvIndexStrListHeadRowSource(latestByCol,im.keyValues,filter);
}
 else {
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
break;
}
}
}
}
 else if (latestByCol != null) {
switch (latestByMetadata.type) {
case SYMBOL:
rs=new KvIndexAllSymHeadRowSource(latestByCol,null);
break;
case STRING:
throw new ParserException(latestByNode.position,""String_Node_Str"");
}
}
return new JournalSource(ps,rs == null ? new AllRowSource() : rs);
}",0.9963889926534678
31559,"private VirtualColumn lookupFunction(ExprNode node,Signature sig,ObjList<VirtualColumn> args) throws ParserException {
  FunctionFactory factory=FunctionFactories.find(sig,args);
  if (factory == null) {
    throw new ParserException(node.position,""String_Node_Str"" + sig);
  }
  Function f=factory.newInstance(args);
  if (args != null) {
    int n=node.paramCount;
    for (int i=0; i < n; i++) {
      f.setArg(i,args.getQuick(i));
    }
  }
  return f.isConstant() ? processConstantExpression(f) : f;
}","private VirtualColumn lookupFunction(ExprNode node,Signature sig,ObjList<VirtualColumn> args) throws ParserException {
  FunctionFactory factory=FunctionFactories.find(sig,args);
  if (factory == null) {
    throw new ParserException(node.position,""String_Node_Str"" + sig.userReadable());
  }
  Function f=factory.newInstance(args);
  if (args != null) {
    int n=node.paramCount;
    for (int i=0; i < n; i++) {
      f.setArg(i,args.getQuick(i));
    }
  }
  return f.isConstant() ? processConstantExpression(f) : f;
}",0.98539435248296
31560,"private void closeChannels(){
  while (channels.size() > 0) {
    closeChannel(channels.remove(0),true);
  }
}","private void closeChannels(){
  for (  SocketChannelHolder h : channels) {
    closeChannel(h,true);
  }
  channels.clear();
}",0.652542372881356
31561,"public long next(){
  int r=(int)(++rowCount & mask);
  if (r > 0) {
    return Unsafe.getUnsafe().getLong(address + ((r - 1) << 3));
  }
 else {
    remainingBlockCount--;
    this.address=rData.getAddress(Unsafe.getUnsafe().getLong(address + (rowBlockLen << 3)) - rowBlockSize,rowBlockSize);
    return Unsafe.getUnsafe().getLong(address + (r << 3));
  }
}","public long next(){
  int r=(int)(rowCount++ & mask);
  long v=Unsafe.getUnsafe().getLong(address + (r << 3));
  if (r == mask) {
    this.address=rData.getAddress(Unsafe.getUnsafe().getLong(address + (rowBlockLen << 3)) - rowBlockSize,rowBlockSize);
  }
  return v;
}",0.2236421725239616
31562,"public FwdIndexCursor setKey(int key){
  this.remainingBlockCount=0;
  this.rowCount=0;
  this.size=0;
  if (key < 0) {
    return this;
  }
  long keyOffset=getKeyOffset(key);
  if (keyOffset >= firstEntryOffset + keyBlockSize) {
    return this;
  }
  long addr=kData.getAddress(keyOffset,ENTRY_SIZE);
  this.size=Unsafe.getUnsafe().getLong(addr + 8);
  if (size == 0) {
    return this;
  }
  this.remainingBlockCount=(int)(this.size >>> bits);
  this.rowCount=0;
  this.address=rData.getAddress(Unsafe.getUnsafe().getLong(addr + 16) - rowBlockSize,rowBlockSize);
  return this;
}","public FwdIndexCursor setKey(int key){
  this.rowCount=0;
  this.size=0;
  if (key < 0) {
    return this;
  }
  long keyOffset=getKeyOffset(key);
  if (keyOffset >= firstEntryOffset + keyBlockSize) {
    return this;
  }
  long addr=kData.getAddress(keyOffset,ENTRY_SIZE);
  this.size=Unsafe.getUnsafe().getLong(addr + 8);
  if (size == 0) {
    return this;
  }
  this.rowCount=0;
  this.address=rData.getAddress(Unsafe.getUnsafe().getLong(addr + 16) - rowBlockSize,rowBlockSize);
  return this;
}",0.922365988909427
31563,"public boolean hasNext(){
  return this.rowCount < size || this.remainingBlockCount > 0;
}","public boolean hasNext(){
  return this.rowCount < size;
}",0.7837837837837838
31564,"private void assertValues(long values[][],KVIndex index){
  for (int i=0; i < values.length; i++) {
    try (DirectLongList array=index.getValues(i)){
      Assert.assertEquals(values[i].length,array.size());
      for (int k=0; k < values[i].length; k++) {
        Assert.assertEquals(values[i][k],array.get(k));
      }
      IndexCursor cursor=index.cursor(i);
      int k=(int)cursor.size();
      while (cursor.hasNext()) {
        Assert.assertEquals(values[i][--k],cursor.next());
      }
      IndexCursor c=index.fwdCursor(i);
      while (c.hasNext()) {
        System.out.println(c.next());
      }
    }
   }
}","private void assertValues(long values[][],KVIndex index){
  for (int i=0; i < values.length; i++) {
    try (DirectLongList array=index.getValues(i)){
      Assert.assertEquals(values[i].length,array.size());
      for (int k=0; k < values[i].length; k++) {
        Assert.assertEquals(values[i][k],array.get(k));
      }
      IndexCursor cursor=index.cursor(i);
      int k=(int)cursor.size();
      while (cursor.hasNext()) {
        Assert.assertEquals(values[i][--k],cursor.next());
      }
      IndexCursor c=index.fwdCursor(i);
      int n=0;
      while (c.hasNext()) {
        long l=c.next();
        Assert.assertEquals(values[i][n++],l);
      }
    }
   }
}",0.920340293890178
31565,"@Test public void testAllFieldTypesField() throws JournalException, IOException {
  writeAndReadRecords(factory.writer(AllFieldTypes.class),1000,64 * 1024,new RecordGenerator<AllFieldTypes>(){
    @Override public void assertRecord(    Record value,    int i) throws IOException {
      AllFieldTypes expected=generate(i);
      int col=0;
      String failedMsg=""String_Node_Str"" + i;
      assertEquals(failedMsg,expected.aBool,value.getBool(col++));
      assertEquals(failedMsg,expected.aString,value.getStr(col++).toString());
      assertEquals(failedMsg,expected.aByte,value.get(col++));
      assertEquals(failedMsg,expected.aShort,value.getShort(col++));
      assertEquals(failedMsg,expected.anInt,value.getInt(col++));
      DirectInputStream binCol=value.getBin(col++);
      byte[] expectedBin=expected.aBinary.array();
      assertEquals(failedMsg,expectedBin.length,binCol.getLength());
      for (int j=0; j < expectedBin.length; j++) {
        assertEquals(failedMsg + ""String_Node_Str"" + j,expectedBin[j],(byte)binCol.read());
      }
      assertEquals(failedMsg,expected.aLong,value.getLong(col++));
      assertEquals(failedMsg,expected.aDouble,value.getDouble(col),0.0001);
    }
    @Override public AllFieldTypes generate(    int i){
      AllFieldTypes af=new AllFieldTypes();
      byte[] bin=new byte[i];
      for (int j=0; j < i; j++) {
        bin[j]=(byte)(j % 255);
      }
      af.aBinary=ByteBuffer.wrap(bin);
      af.aBool=i % 2 == 0;
      af.aByte=(byte)(i % 255);
      af.aDouble=i * Math.PI;
      af.aLong=i * 2;
      af.anInt=i;
      af.aShort=(short)(i / 2);
      StringBuilder sb=new StringBuilder(i);
      for (int j=0; j < i; j++) {
        sb.append((char)j);
      }
      af.aString=sb.toString();
      return af;
    }
  }
);
}","@Test public void testAllFieldTypesField() throws JournalException, IOException {
  writeAndReadRecords(factory.writer(AllFieldTypes.class),1000,64 * 1024,new RecordGenerator<AllFieldTypes>(){
    @Override public void assertRecord(    Record value,    int i) throws IOException {
      AllFieldTypes expected=generate(i);
      int col=0;
      String failedMsg=""String_Node_Str"" + i;
      assertEquals(failedMsg,expected.aBool,value.getBool(col++));
      assertEquals(failedMsg,expected.aString,value.getStr(col++).toString());
      assertEquals(failedMsg,expected.aByte,value.get(col++));
      assertEquals(failedMsg,expected.aShort,value.getShort(col++));
      assertEquals(failedMsg,expected.anInt,value.getInt(col++));
      DirectInputStream binCol=value.getBin(col++);
      byte[] expectedBin=expected.aBinary.array();
      assertEquals(failedMsg,expectedBin.length,binCol.getLength());
      for (int j=0; j < expectedBin.length; j++) {
        assertEquals(failedMsg + ""String_Node_Str"" + j,expectedBin[j],(byte)binCol.read());
      }
      assertEquals(failedMsg,expected.aLong,value.getLong(col++));
      assertEquals(failedMsg,expected.aDouble,value.getDouble(col++),0.0001);
      assertEquals(failedMsg,expected.aFloat,value.getFloat(col),0.0001);
    }
    @Override public AllFieldTypes generate(    int i){
      AllFieldTypes af=new AllFieldTypes();
      byte[] bin=new byte[i];
      for (int j=0; j < i; j++) {
        bin[j]=(byte)(j % 255);
      }
      af.aBinary=ByteBuffer.wrap(bin);
      af.aBool=i % 2 == 0;
      af.aByte=(byte)(i % 255);
      af.aDouble=i * Math.PI;
      af.aFloat=(float)(Math.PI / i);
      af.aLong=i * 2;
      af.anInt=i;
      af.aShort=(short)(i / 2);
      StringBuilder sb=new StringBuilder(i);
      for (int j=0; j < i; j++) {
        sb.append((char)j);
      }
      af.aString=sb.toString();
      return af;
    }
  }
);
}",0.9690385659967408
31566,"public Key commit(){
  Unsafe.getUnsafe().putInt(startAddr,len=(int)(appendAddr - startAddr));
  kPos=appendAddr;
  return this;
}","public KeyWriter commit(){
  Unsafe.getUnsafe().putInt(startAddr,len=(int)(appendAddr - startAddr));
  kPos=appendAddr;
  return this;
}",0.9774436090225564
31567,"public Key putLong(long value){
  checkSize(8);
  Unsafe.getUnsafe().putLong(appendAddr,value);
  appendAddr+=8;
  writeOffset();
  return this;
}","public KeyWriter putLong(long value){
  checkSize(8);
  Unsafe.getUnsafe().putLong(appendAddr,value);
  appendAddr+=8;
  writeOffset();
  return this;
}",0.9798657718120806
31568,"private MapValues probe0(Key key,int index){
  long offset;
  while ((offset=offsets.get(index=(++index % keyCapacity))) != -1) {
    if (eq(key,offset)) {
      kPos=key.startAddr;
      return values.init(kStart + offset,false);
    }
  }
  offsets.set(index,key.startAddr - kStart);
  free--;
  if (free == 0) {
    rehash();
  }
  size++;
  return values.init(key.startAddr,true);
}","private MapValues probe0(KeyWriter keyWriter,int index){
  long offset;
  while ((offset=offsets.get(index=(++index % keyCapacity))) != -1) {
    if (eq(keyWriter,offset)) {
      kPos=keyWriter.startAddr;
      return values.init(kStart + offset,false);
    }
  }
  offsets.set(index,keyWriter.startAddr - kStart);
  free--;
  if (free == 0) {
    rehash();
  }
  size++;
  return values.init(keyWriter.startAddr,true);
}",0.9455445544554456
31569,"public Key init(){
  startAddr=kPos;
  appendAddr=startAddr + keyDataOffset;
  nextColOffset=startAddr + keyBlockOffset;
  return this;
}","public KeyWriter init(){
  startAddr=kPos;
  appendAddr=startAddr + keyDataOffset;
  nextColOffset=startAddr + keyBlockOffset;
  return this;
}",0.9785714285714284
31570,"public Key putInt(int value){
  checkSize(4);
  Unsafe.getUnsafe().putInt(appendAddr,value);
  appendAddr+=4;
  writeOffset();
  return this;
}","public KeyWriter putInt(int value){
  checkSize(4);
  Unsafe.getUnsafe().putInt(appendAddr,value);
  appendAddr+=4;
  writeOffset();
  return this;
}",0.9794520547945206
31571,"public Key putStr(CharSequence value){
  int len=value.length();
  checkSize(len << 1);
  for (int i=0; i < len; i++) {
    Unsafe.getUnsafe().putChar(appendAddr + (i << 1),value.charAt(i));
  }
  appendAddr+=len << 1;
  writeOffset();
  return this;
}","public KeyWriter putStr(CharSequence value){
  int len=value.length();
  checkSize(len << 1);
  for (int i=0; i < len; i++) {
    Unsafe.getUnsafe().putChar(appendAddr + (i << 1),value.charAt(i));
  }
  appendAddr+=len << 1;
  writeOffset();
  return this;
}",0.9882352941176472
31572,"private boolean eq(Key key,long offset){
  long a=kStart + offset;
  long b=key.startAddr;
  if (Unsafe.getUnsafe().getInt(a) != Unsafe.getUnsafe().getInt(b)) {
    return false;
  }
  long lim=b + key.len;
  a+=keyBlockOffset;
  b+=keyBlockOffset;
  while (b < lim - 8) {
    if (Unsafe.getUnsafe().getLong(a) != Unsafe.getUnsafe().getLong(b)) {
      return false;
    }
    a+=8;
    b+=8;
  }
  while (b < lim) {
    if (Unsafe.getUnsafe().getByte(a++) != Unsafe.getUnsafe().getByte(b++)) {
      return false;
    }
  }
  return true;
}","private boolean eq(KeyWriter keyWriter,long offset){
  long a=kStart + offset;
  long b=keyWriter.startAddr;
  if (Unsafe.getUnsafe().getInt(a) != Unsafe.getUnsafe().getInt(b)) {
    return false;
  }
  long lim=b + keyWriter.len;
  a+=keyBlockOffset;
  b+=keyBlockOffset;
  while (b < lim - 8) {
    if (Unsafe.getUnsafe().getLong(a) != Unsafe.getUnsafe().getLong(b)) {
      return false;
    }
    a+=8;
    b+=8;
  }
  while (b < lim) {
    if (Unsafe.getUnsafe().getByte(a++) != Unsafe.getUnsafe().getByte(b++)) {
      return false;
    }
  }
  return true;
}",0.9710669077757684
31573,"private void resize(){
  long kCapacity=(kLimit - kStart) << 1;
  long kAddress=Unsafe.getUnsafe().allocateMemory(kCapacity + AbstractDirectList.CACHE_LINE_SIZE);
  long kStart=kAddress + (kAddress & (AbstractDirectList.CACHE_LINE_SIZE - 1));
  Unsafe.getUnsafe().copyMemory(this.kStart,kStart,kCapacity >> 1);
  Unsafe.getUnsafe().freeMemory(this.address);
  long d=kStart - this.kStart;
  key.startAddr+=d;
  key.appendAddr+=d;
  key.nextColOffset+=d;
  this.address=kAddress;
  this.kStart=kStart;
  this.kLimit=kStart + kCapacity;
}","private void resize(){
  long kCapacity=(kLimit - kStart) << 1;
  long kAddress=Unsafe.getUnsafe().allocateMemory(kCapacity + AbstractDirectList.CACHE_LINE_SIZE);
  long kStart=kAddress + (kAddress & (AbstractDirectList.CACHE_LINE_SIZE - 1));
  Unsafe.getUnsafe().copyMemory(this.kStart,kStart,kCapacity >> 1);
  Unsafe.getUnsafe().freeMemory(this.address);
  long d=kStart - this.kStart;
  keyWriter.startAddr+=d;
  keyWriter.appendAddr+=d;
  keyWriter.nextColOffset+=d;
  this.address=kAddress;
  this.kStart=kStart;
  this.kLimit=kStart + kCapacity;
}",0.98348623853211
31574,"public NetworkInterface findExternalNic() throws JournalNetworkException {
  try {
    Enumeration<NetworkInterface> ifs=NetworkInterface.getNetworkInterfaces();
    while (ifs.hasMoreElements()) {
      NetworkInterface ifn=ifs.nextElement();
      if (ifn.isLoopback()) {
        continue;
      }
      if (ifn.isUp() && !ifn.getDisplayName().startsWith(""String_Node_Str"")) {
        return ifn;
      }
    }
  }
 catch (  SocketException e) {
    throw new JournalNetworkException(e);
  }
  throw new JournalNetworkException(""String_Node_Str"");
}","public NetworkInterface findExternalNic() throws JournalNetworkException {
  if (defaultInterface != null) {
    return defaultInterface;
  }
  try {
    Enumeration<NetworkInterface> ifs=NetworkInterface.getNetworkInterfaces();
    int index=Integer.MAX_VALUE;
    while (ifs.hasMoreElements()) {
      NetworkInterface q=ifs.nextElement();
      if (!q.isLoopback() && q.isUp() && q.getIndex() < index) {
        defaultInterface=q;
        index=q.getIndex();
      }
    }
    if (defaultInterface == null) {
      throw new JournalNetworkException(""String_Node_Str"");
    }
    return defaultInterface;
  }
 catch (  SocketException e) {
    throw new JournalNetworkException(e);
  }
}",0.5028203062046737
31575,"@Override public void onFields(int line,CharSequence values[],int hi){
  if (line == 0) {
    stashPossibleHeader(values,hi);
  }
  for (int i=0; i < hi; i++) {
    if (values[i].length() == 0) {
      blanks[i]++;
    }
    int offset=i * probeLen;
    for (int k=0; k < probeLen; k++) {
      if (probes[k].probe(values[i])) {
        histogram[k + offset]++;
      }
    }
    MapValues mv=frequencyMaps[i].claimSlot(frequencyMaps[i].claimKey().putStr(values[i]).commit());
    if (mv.isNew()) {
      mv.putInt(0,0);
    }
 else {
      mv.putInt(0,mv.getInt(0) + 1);
    }
  }
}","@Override public void onFields(int line,CharSequence values[],int hi){
  if (line == 0) {
    stashPossibleHeader(values,hi);
  }
  for (int i=0; i < hi; i++) {
    if (values[i].length() == 0) {
      blanks[i]++;
    }
    int offset=i * probeLen;
    for (int k=0; k < probeLen; k++) {
      if (probes[k].probe(values[i])) {
        histogram[k + offset]++;
      }
    }
    frequencyMaps[i].values(frequencyMaps[i].keyWriter().putStr(values[i]));
  }
}",0.8395773294908742
31576,"private boolean buildMap(){
  long current=0;
  long sample;
  boolean first=true;
  Record rec;
  map.clear();
  if (nextRecord != null) {
    rec=nextRecord;
  }
 else {
    if (!rowSource.hasNext()) {
      return false;
    }
    rec=rowSource.next();
  }
  do {
switch (sampleBy) {
case YEAR:
      sample=Dates.floorYYYY(rec.getLong(tsIndex));
    break;
case MONTH:
  sample=Dates.floorMM(rec.getLong(tsIndex));
break;
case DAY:
sample=Dates.floorDD(rec.getLong(tsIndex));
break;
case HOUR:
sample=Dates.floorHH(rec.getLong(tsIndex));
break;
case MINUTE:
sample=Dates.floorMI(rec.getLong(tsIndex));
break;
default :
sample=0;
}
if (first) {
current=sample;
first=false;
}
 else if (sample != current) {
nextRecord=rec;
break;
}
MultiMap.Key key=map.claimKey();
key.putLong(sample);
for (int i=0; i < keyIndices.length; i++) {
switch (rowSource.getMetadata().getColumnType(i + 1)) {
case LONG:
key.putLong(rec.getLong(keyIndices[i]));
break;
case INT:
key.putInt(rec.getInt(keyIndices[i]));
break;
case STRING:
key.putStr(rec.getStr(keyIndices[i]));
break;
case SYMBOL:
key.putInt(rec.getInt(keyIndices[i]));
break;
default :
throw new JournalRuntimeException(""String_Node_Str"" + rowSource.getMetadata().getColumnType(i + 1));
}
}
key.commit();
MapValues values=map.claimSlot(key);
for (int i=0, sz=aggregators.size(); i < sz; i++) {
aggregators.get(i).calculate(rec,values);
}
if (!rowSource.hasNext()) {
nextRecord=null;
break;
}
rec=rowSource.next();
}
 while (true);
return (mapRecordSource=map.getRecordSource()).hasNext();
}","private boolean buildMap(){
  long current=0;
  long sample;
  boolean first=true;
  Record rec;
  map.clear();
  if (nextRecord != null) {
    rec=nextRecord;
  }
 else {
    if (!rowSource.hasNext()) {
      return false;
    }
    rec=rowSource.next();
  }
  do {
switch (sampleBy) {
case YEAR:
      sample=Dates.floorYYYY(rec.getLong(tsIndex));
    break;
case MONTH:
  sample=Dates.floorMM(rec.getLong(tsIndex));
break;
case DAY:
sample=Dates.floorDD(rec.getLong(tsIndex));
break;
case HOUR:
sample=Dates.floorHH(rec.getLong(tsIndex));
break;
case MINUTE:
sample=Dates.floorMI(rec.getLong(tsIndex));
break;
default :
sample=0;
}
if (first) {
current=sample;
first=false;
}
 else if (sample != current) {
nextRecord=rec;
break;
}
MultiMap.KeyWriter keyWriter=map.keyWriter();
keyWriter.putLong(sample);
for (int i=0; i < keyIndices.length; i++) {
switch (rowSource.getMetadata().getColumnType(i + 1)) {
case LONG:
keyWriter.putLong(rec.getLong(keyIndices[i]));
break;
case INT:
keyWriter.putInt(rec.getInt(keyIndices[i]));
break;
case STRING:
keyWriter.putStr(rec.getStr(keyIndices[i]));
break;
case SYMBOL:
keyWriter.putInt(rec.getInt(keyIndices[i]));
break;
default :
throw new JournalRuntimeException(""String_Node_Str"" + rowSource.getMetadata().getColumnType(i + 1));
}
}
MapValues values=map.values(keyWriter);
for (int i=0, sz=aggregators.size(); i < sz; i++) {
aggregators.get(i).calculate(rec,values);
}
if (!rowSource.hasNext()) {
nextRecord=null;
break;
}
rec=rowSource.next();
}
 while (true);
return (mapRecordSource=map.getRecordSource()).hasNext();
}",0.9568298969072164
31577,"public void setContent(String s){
  if ((s == null || s.length() == 0) && buffer != null) {
    buffer.limit(0);
    return;
  }
  if (buffer == null || buffer.capacity() < s.length() * 2) {
    buffer=ByteBuffer.allocate(s.length() * 2);
  }
 else {
    buffer.limit(s.length() * 2);
  }
  buffer.rewind();
  ByteBuffers.putStr(buffer,s);
  buffer.rewind();
}","public void setContent(String s){
  if ((s == null || s.length() == 0) && buffer != null) {
    buffer.limit(0);
    return;
  }
  if (s == null) {
    return;
  }
  if (buffer == null || buffer.capacity() < s.length() * 2) {
    buffer=ByteBuffer.allocate(s.length() * 2);
  }
 else {
    buffer.limit(s.length() * 2);
  }
  buffer.rewind();
  ByteBuffers.putStr(buffer,s);
  buffer.rewind();
}",0.9536423841059604
31578,"@Override public boolean hasNext(){
  return buffer != null && buffer.hasRemaining();
}","@Override public boolean hasNext(){
  return next != null || (buffer != null && buffer.hasRemaining());
}",0.90625
31579,"@SuppressFBWarnings({""String_Node_Str""}) public Token getSymbol(char c){
  List<Token> l=symbols.get(c);
  if (l == null) {
    return null;
  }
  int pos=buffer.position();
  for (int i=0, sz=l.size(); i < sz; i++) {
    final Token t=l.get(i);
    boolean match=t.text.length() < buffer.remaining();
    if (match) {
      for (int k=1; k < t.text.length(); k++) {
        if (buffer.getChar(pos + 2 * (k - 1)) != t.text.charAt(k)) {
          match=false;
          break;
        }
      }
    }
    if (match) {
      return t;
    }
  }
  return null;
}","@SuppressFBWarnings({""String_Node_Str""}) public Token getSymbol(char c){
  List<Token> l=symbols.get(c);
  if (l == null) {
    return null;
  }
  int pos=buffer.position();
  for (int i=0, sz=l.size(); i < sz; i++) {
    final Token t=l.get(i);
    boolean match=(t.text.length() - 2) < buffer.remaining();
    if (match) {
      for (int k=1; k < t.text.length(); k++) {
        if (buffer.getChar(pos + 2 * (k - 1)) != t.text.charAt(k)) {
          match=false;
          break;
        }
      }
    }
    if (match) {
      return t;
    }
  }
  return null;
}",0.994661921708185
31580,"@Test public void testCount() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,10000,1419908881558L,30);
  w.commit();
  int tsIndex=w.getMetadata().getColumnIndex(""String_Node_Str"");
  int symIndex=w.getMetadata().getColumnIndex(""String_Node_Str"");
  MultiMap map=new MultiMap.Builder().keyColumn(w.getMetadata().getColumnMetadata(tsIndex)).keyColumn(w.getMetadata().getColumnMetadata(symIndex)).valueColumn(new ColumnMetadata(){
{
      name=""String_Node_Str"";
      type=ColumnType.INT;
    }
  }
).setCapacity(150).setDataSize(1024 * 1024).setLoadFactor(0.5f).build();
  for (  JournalRecord e : w.rows()) {
    long ts=e.getLong(tsIndex);
    MapValues val=map.claimSlot(map.claimKey().putLong(Dates.floorMI(ts)).putInt(e.getInt(symIndex)).commit());
    val.putInt(0,val.isNew() ? 1 : val.getInt(0) + 1);
  }
  RecordSourcePrinter out=new RecordSourcePrinter(sink);
  out.print(map.getRecordSource());
  map.free();
  Assert.assertEquals(expected,sink.toString());
}","@Test public void testCount() throws Exception {
  final String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  JournalWriter<Quote> w=factory.writer(Quote.class);
  TestUtils.generateQuoteData(w,10000,1419908881558L,30);
  w.commit();
  int tsIndex=w.getMetadata().getColumnIndex(""String_Node_Str"");
  int symIndex=w.getMetadata().getColumnIndex(""String_Node_Str"");
  MultiMap map=new MultiMap.Builder().keyColumn(w.getMetadata().getColumnMetadata(tsIndex)).keyColumn(w.getMetadata().getColumnMetadata(symIndex)).valueColumn(new ColumnMetadata(){
{
      name=""String_Node_Str"";
      type=ColumnType.INT;
    }
  }
).setCapacity(150).setDataSize(1024 * 1024).setLoadFactor(0.5f).build();
  for (  JournalRecord e : w.rows()) {
    long ts=e.getLong(tsIndex);
    MapValues val=map.values(map.keyWriter().putLong(Dates.floorMI(ts)).putInt(e.getInt(symIndex)));
    val.putInt(0,val.isNew() ? 1 : val.getInt(0) + 1);
  }
  RecordSourcePrinter out=new RecordSourcePrinter(sink);
  out.print(map.getRecordSource());
  map.free();
  Assert.assertEquals(expected,sink.toString());
}",0.9910897875257024
31581,"private void vote(boolean startup) throws JournalNetworkException {
  ServerNode activeNode;
  if (startup) {
    try {
      if ((activeNode=getActiveNodeAndSetupClient()) != null) {
        LOGGER.info(thisNode() + ""String_Node_Str"",activeNode);
        setupClient(activeNode);
        return;
      }
    }
 catch (    JournalNetworkException ignore) {
      LOGGER.info(""String_Node_Str"",ignore.getMessage());
    }
    haltClient();
  }
  LOGGER.info(thisNode() + ""String_Node_Str"");
  server=new JournalServer(serverConfig,factory,null,thisNode().getId());
  for (int i=0, writersSize=writers.size(); i < writersSize; i++) {
    server.publish(writers.get(i));
  }
  server.start();
  boolean isClient=false;
  while (!isClient && server.isRunning() && (activeNode=getActiveNodeAndSetupClient()) != null && client != null) {
    LOGGER.info(""String_Node_Str"",thisNode(),activeNode);
switch (client.voteInstance(instance,activeNode)) {
case ALPHA:
      LOGGER.info(thisNode() + ""String_Node_Str"");
    setupClient(activeNode);
  return;
case THEM:
LOGGER.info(""String_Node_Str"",thisNode(),activeNode);
isClient=true;
break;
default :
LOGGER.info(""String_Node_Str"",thisNode(),activeNode);
}
haltClient();
Thread.yield();
}
if (!isClient) {
server.setIgnoreVoting(true);
LOGGER.info(thisNode() + ""String_Node_Str"");
listener.onNodeActive();
return;
}
while (true) {
activeNode=getActiveNodeAndSetupClient();
if (activeNode == null || client == null) {
throw new JournalNetworkException(""String_Node_Str"");
}
if (client.voteInstance(instance,activeNode) == JournalClient.VoteResult.ALPHA) {
setupClient(activeNode);
return;
}
haltClient();
}
}","private void vote(boolean startup) throws JournalNetworkException {
  ServerNode activeNode;
  if (startup) {
    try {
      if ((activeNode=getActiveNodeAndSetupClient()) != null) {
        LOGGER.info(thisNode() + ""String_Node_Str"",activeNode);
        setupClient(activeNode);
        return;
      }
    }
 catch (    JournalNetworkException ignore) {
      LOGGER.info(""String_Node_Str"",ignore.getMessage());
    }
    haltClient();
  }
  LOGGER.info(thisNode() + ""String_Node_Str"");
  server=new JournalServer(serverConfig,factory,null,thisNode().getId());
  for (int i=0, writersSize=writers.size(); i < writersSize; i++) {
    server.publish(writers.get(i));
  }
  server.start();
  boolean isClient=false;
  while (!isClient && server.isRunning() && (activeNode=getActiveNodeAndSetupClient()) != null && client != null) {
    LOGGER.info(""String_Node_Str"",thisNode(),activeNode);
switch (client.voteInstance(instance,activeNode)) {
case ALPHA:
      LOGGER.info(thisNode() + ""String_Node_Str"");
    server.halt();
  setupClient(activeNode);
return;
case THEM:
LOGGER.info(""String_Node_Str"",thisNode(),activeNode);
isClient=true;
server.halt();
break;
default :
LOGGER.info(""String_Node_Str"",thisNode(),activeNode);
}
haltClient();
Thread.yield();
}
if (!isClient) {
server.setIgnoreVoting(true);
LOGGER.info(thisNode() + ""String_Node_Str"");
listener.onNodeActive();
return;
}
while (true) {
activeNode=getActiveNodeAndSetupClient();
if (activeNode == null || client == null) {
throw new JournalNetworkException(""String_Node_Str"");
}
if (client.voteInstance(instance,activeNode) == JournalClient.VoteResult.ALPHA) {
setupClient(activeNode);
return;
}
haltClient();
}
}",0.9897713598074608
31582,"public long getTxAddress(){
  ByteBuffer buf=mf.getBuffer(0,9);
  long address;
  while (true) {
    address=buf.getLong();
    byte checksum=buf.get();
    byte b0=(byte)address;
    byte b1=(byte)(address >> 8);
    byte b2=(byte)(address >> 16);
    byte b3=(byte)(address >> 24);
    byte b4=(byte)(address >> 32);
    byte b5=(byte)(address >> 40);
    byte b6=(byte)(address >> 48);
    byte b7=(byte)(address >> 56);
    if ((b0 ^ b1 ^ b2^ b3^ b4^ b5^ b6^ b7) == checksum) {
      break;
    }
  }
  return address;
}","public long getTxAddress(){
  final ByteBuffer buf=mf.getBuffer(0,9);
  final int pos=buf.position();
  long address;
  while (true) {
    address=buf.getLong(pos);
    byte checksum=buf.get(pos + 8);
    byte b0=(byte)address;
    byte b1=(byte)(address >> 8);
    byte b2=(byte)(address >> 16);
    byte b3=(byte)(address >> 24);
    byte b4=(byte)(address >> 32);
    byte b5=(byte)(address >> 40);
    byte b6=(byte)(address >> 48);
    byte b7=(byte)(address >> 56);
    if ((b0 ^ b1 ^ b2^ b3^ b4^ b5^ b6^ b7) == checksum) {
      break;
    }
  }
  return address;
}",0.9562043795620438
31583,"public void setTxAddress(long address){
  MappedByteBuffer buffer=mf.getBuffer(0,8);
  buffer.putLong(address);
  byte b0=(byte)address;
  byte b1=(byte)(address >> 8);
  byte b2=(byte)(address >> 16);
  byte b3=(byte)(address >> 24);
  byte b4=(byte)(address >> 32);
  byte b5=(byte)(address >> 40);
  byte b6=(byte)(address >> 48);
  byte b7=(byte)(address >> 56);
  buffer.put((byte)(b0 ^ b1 ^ b2^ b3^ b4^ b5^ b6^ b7));
}","public void setTxAddress(long address){
  MappedByteBuffer buffer=mf.getBuffer(0,9);
  buffer.putLong(address);
  byte b0=(byte)address;
  byte b1=(byte)(address >> 8);
  byte b2=(byte)(address >> 16);
  byte b3=(byte)(address >> 24);
  byte b4=(byte)(address >> 32);
  byte b5=(byte)(address >> 40);
  byte b6=(byte)(address >> 48);
  byte b7=(byte)(address >> 56);
  buffer.put((byte)(b0 ^ b1 ^ b2^ b3^ b4^ b5^ b6^ b7));
}",0.9976415094339622
31584,"@Override public DataDictionary build(BasicML basicML){
  DataDictionary dict=new DataDictionary();
  List<DataField> fields=new ArrayList<DataField>();
  if (basicML != null && basicML instanceof BasicFloatNetwork) {
    BasicFloatNetwork bfn=(BasicFloatNetwork)basicML;
    Set<Integer> featureSet=bfn.getFeatureSet();
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.getColumnNum() >= datasetHeaders.length) {
        break;
      }
      if (isConcise) {
        if (columnConfig.isFinalSelect() && (CollectionUtils.isEmpty(featureSet) || featureSet.contains(columnConfig.getColumnNum())) || columnConfig.isTarget()) {
          fields.add(convertColumnToDataField(columnConfig));
        }
      }
 else {
        fields.add(convertColumnToDataField(columnConfig));
      }
    }
  }
 else {
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.getColumnNum() >= datasetHeaders.length) {
        break;
      }
      if (isConcise) {
        if (columnConfig.isFinalSelect() || columnConfig.isTarget()) {
          fields.add(convertColumnToDataField(columnConfig));
        }
      }
 else {
        fields.add(convertColumnToDataField(columnConfig));
      }
    }
  }
  dict.withDataFields(fields);
  dict.withNumberOfFields(fields.size());
  return dict;
}","@Override public DataDictionary build(BasicML basicML){
  DataDictionary dict=new DataDictionary();
  List<DataField> fields=new ArrayList<DataField>();
  boolean isSegExpansionMode=columnConfigList.size() > datasetHeaders.length;
  int segSize=segmentExpansions.size();
  if (basicML != null && basicML instanceof BasicFloatNetwork) {
    BasicFloatNetwork bfn=(BasicFloatNetwork)basicML;
    Set<Integer> featureSet=bfn.getFeatureSet();
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.getColumnNum() >= datasetHeaders.length) {
        break;
      }
      if (isConcise) {
        if (columnConfig.isFinalSelect() && (CollectionUtils.isEmpty(featureSet) || featureSet.contains(columnConfig.getColumnNum())) || columnConfig.isTarget()) {
          fields.add(convertColumnToDataField(columnConfig));
        }
 else         if (isSegExpansionMode) {
          for (int i=0; i < segSize; i++) {
            int newIndex=datasetHeaders.length * (i + 1) + columnConfig.getColumnNum();
            ColumnConfig cc=columnConfigList.get(newIndex);
            if (cc.isFinalSelect()) {
              fields.add(convertColumnToDataField(columnConfig));
              break;
            }
          }
        }
      }
 else {
        fields.add(convertColumnToDataField(columnConfig));
      }
    }
  }
 else {
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.getColumnNum() >= datasetHeaders.length) {
        break;
      }
      if (isConcise) {
        if (columnConfig.isFinalSelect() || columnConfig.isTarget()) {
          fields.add(convertColumnToDataField(columnConfig));
        }
 else         if (isSegExpansionMode) {
          for (int i=0; i < segSize; i++) {
            int newIndex=datasetHeaders.length * (i + 1) + columnConfig.getColumnNum();
            ColumnConfig cc=columnConfigList.get(newIndex);
            if (cc.isFinalSelect()) {
              fields.add(convertColumnToDataField(columnConfig));
              break;
            }
          }
        }
      }
 else {
        fields.add(convertColumnToDataField(columnConfig));
      }
    }
  }
  dict.withDataFields(fields);
  dict.withNumberOfFields(fields.size());
  return dict;
}",0.7464946719012899
31585,"@Override public MiningSchema build(BasicML basicML){
  MiningSchema miningSchema=new MiningSchema();
  if (basicML != null && basicML instanceof BasicFloatNetwork) {
    BasicFloatNetwork bfn=(BasicFloatNetwork)basicML;
    Set<Integer> featureSet=bfn.getFeatureSet();
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.getColumnNum() >= datasetHeaders.length) {
        break;
      }
      if (isActiveColumn(featureSet,columnConfig)) {
        MiningField miningField=new MiningField();
        miningField.setName(FieldName.create(CommonUtils.getSimpleColumnName(columnConfig.getColumnName())));
        miningField.setOptype(getOptype(columnConfig));
        if (columnConfig.isTarget()) {
          miningField.setUsageType(FieldUsageType.TARGET);
        }
 else {
          miningField.setUsageType(FieldUsageType.ACTIVE);
        }
        miningSchema.withMiningFields(miningField);
      }
    }
  }
 else {
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.getColumnNum() >= datasetHeaders.length) {
        break;
      }
      if (columnConfig.isFinalSelect() || columnConfig.isTarget()) {
        MiningField miningField=new MiningField();
        miningField.setName(FieldName.create(CommonUtils.getSimpleColumnName(columnConfig.getColumnName())));
        miningField.setOptype(getOptype(columnConfig));
        if (columnConfig.isTarget()) {
          miningField.setUsageType(FieldUsageType.TARGET);
        }
 else {
          miningField.setUsageType(FieldUsageType.ACTIVE);
        }
        miningSchema.withMiningFields(miningField);
      }
    }
  }
  return miningSchema;
}","@Override public MiningSchema build(BasicML basicML){
  MiningSchema miningSchema=new MiningSchema();
  boolean isSegExpansionMode=columnConfigList.size() > datasetHeaders.length;
  int segSize=segmentExpansions.size();
  if (basicML != null && basicML instanceof BasicFloatNetwork) {
    BasicFloatNetwork bfn=(BasicFloatNetwork)basicML;
    Set<Integer> featureSet=bfn.getFeatureSet();
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.getColumnNum() >= datasetHeaders.length) {
        break;
      }
      if (isActiveColumn(featureSet,columnConfig)) {
        MiningField miningField=new MiningField();
        miningField.setName(FieldName.create(CommonUtils.getSimpleColumnName(columnConfig.getColumnName())));
        miningField.setOptype(getOptype(columnConfig));
        if (columnConfig.isTarget()) {
          miningField.setUsageType(FieldUsageType.TARGET);
        }
 else {
          miningField.setUsageType(FieldUsageType.ACTIVE);
        }
        miningSchema.withMiningFields(miningField);
      }
 else       if (isSegExpansionMode) {
        for (int i=0; i < segSize; i++) {
          int newIndex=datasetHeaders.length * (i + 1) + columnConfig.getColumnNum();
          ColumnConfig cc=columnConfigList.get(newIndex);
          if (cc.isFinalSelect()) {
            MiningField miningField=new MiningField();
            miningField.setName(FieldName.create(CommonUtils.getSimpleColumnName(columnConfig.getColumnName())));
            miningField.setOptype(getOptype(columnConfig));
            if (columnConfig.isTarget()) {
              miningField.setUsageType(FieldUsageType.TARGET);
            }
 else {
              miningField.setUsageType(FieldUsageType.ACTIVE);
            }
            miningSchema.withMiningFields(miningField);
            break;
          }
        }
      }
    }
  }
 else {
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.getColumnNum() >= datasetHeaders.length) {
        break;
      }
      if (columnConfig.isFinalSelect() || columnConfig.isTarget()) {
        MiningField miningField=new MiningField();
        miningField.setName(FieldName.create(CommonUtils.getSimpleColumnName(columnConfig.getColumnName())));
        miningField.setOptype(getOptype(columnConfig));
        if (columnConfig.isTarget()) {
          miningField.setUsageType(FieldUsageType.TARGET);
        }
 else {
          miningField.setUsageType(FieldUsageType.ACTIVE);
        }
        miningSchema.withMiningFields(miningField);
      }
 else       if (isSegExpansionMode) {
        for (int i=0; i < segSize; i++) {
          int newIndex=datasetHeaders.length * (i + 1) + columnConfig.getColumnNum();
          ColumnConfig cc=columnConfigList.get(newIndex);
          if (cc.isFinalSelect()) {
            MiningField miningField=new MiningField();
            miningField.setName(FieldName.create(CommonUtils.getSimpleColumnName(columnConfig.getColumnName())));
            miningField.setOptype(getOptype(columnConfig));
            if (columnConfig.isTarget()) {
              miningField.setUsageType(FieldUsageType.TARGET);
            }
 else {
              miningField.setUsageType(FieldUsageType.ACTIVE);
            }
            miningSchema.withMiningFields(miningField);
            break;
          }
        }
      }
    }
  }
  return miningSchema;
}",0.4794140934283452
31586,"public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  Object tag=input.get(tagColumnNum);
  if (tag == null) {
    log.warn(""String_Node_Str"");
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  final String rawTag=CommonUtils.trimTag(tag.toString());
  boolean isNotSampled=DataSampler.isNotSampled(posTags,negTags,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
  if (isNotSampled) {
    return null;
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString();
    if (weightExpr != null) {
      weightContext.set(config.getColumnName(),val);
    }
    if (tagColumnNum == i) {
      String tagType=tagTypeCheck(posTags,negTags,rawTag);
      if (tagType == null) {
        log.error(""String_Node_Str"" + rawTag);
        return null;
      }
      tuple.append(Integer.parseInt(tagType));
      continue;
    }
    if (!CommonUtils.isGoodCandidate(config,super.hasCandidates)) {
      tuple.append((Double)null);
    }
 else {
      if (CommonUtils.isTreeModel(this.alg)) {
        Double normVal=0d;
        if (config.isCategorical()) {
          tuple.append(val);
        }
 else {
          try {
            normVal=Double.parseDouble(val);
          }
 catch (          Exception e) {
            log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
            normVal=Normalizer.defaultMissingValue(config);
          }
        }
        tuple.append(normVal);
      }
 else {
        List<Double> normVals=Normalizer.normalize(config,val,cutoff,normType);
        for (        Double normVal : normVals) {
          tuple.append(normVal);
        }
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}","@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  Object tag=input.get(tagColumnNum);
  if (tag == null) {
    log.warn(""String_Node_Str"");
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  final String rawTag=CommonUtils.trimTag(tag.toString());
  boolean isNotSampled=DataSampler.isNotSampled(posTags,negTags,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
  if (isNotSampled) {
    return null;
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString();
    if (weightExpr != null) {
      weightContext.set(config.getColumnName(),val);
    }
    if (tagColumnNum == i) {
      String tagType=tagTypeCheck(posTags,negTags,rawTag);
      if (tagType == null) {
        log.error(""String_Node_Str"" + rawTag);
        return null;
      }
      tuple.append(Integer.parseInt(tagType));
      continue;
    }
    if (!CommonUtils.isGoodCandidate(config,super.hasCandidates)) {
      tuple.append((Double)null);
    }
 else {
      if (CommonUtils.isTreeModel(this.alg)) {
        Double normVal=0d;
        if (config.isCategorical()) {
          tuple.append(val);
        }
 else {
          try {
            normVal=Double.parseDouble(val);
          }
 catch (          Exception e) {
            log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
            normVal=Normalizer.defaultMissingValue(config);
          }
        }
        tuple.append(normVal);
      }
 else {
        List<Double> normVals=Normalizer.normalize(config,val,cutoff,normType);
        for (        Double normVal : normVals) {
          tuple.append(normVal);
        }
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}",0.9915736734229104
31587,"@Test public void testPartsFile() throws IOException {
  HdfsPartFile hdfsPartFile=new HdfsPartFile(""String_Node_Str"",SourceType.LOCAL);
  int lineCnt=0;
  String line=null;
  while ((line=hdfsPartFile.readLine()) != null) {
    lineCnt++;
  }
  hdfsPartFile.close();
  Assert.assertEquals(lineCnt,50);
}","@SuppressWarnings(""String_Node_Str"") @Test public void testPartsFile() throws IOException {
  HdfsPartFile hdfsPartFile=new HdfsPartFile(""String_Node_Str"",SourceType.LOCAL);
  int lineCnt=0;
  String line=null;
  while ((line=hdfsPartFile.readLine()) != null) {
    lineCnt++;
  }
  hdfsPartFile.close();
  Assert.assertEquals(lineCnt,50);
}",0.9426356589147288
31588,"public static void save(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,List<List<TreeNode>> baggingTrees,String loss,int inputCount,OutputStream output) throws IOException {
  DataOutputStream fos=null;
  try {
    fos=new DataOutputStream(new GZIPOutputStream(output));
    fos.writeInt(CommonConstants.TREE_FORMAT_VERSION);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(loss);
    fos.writeBoolean(modelConfig.isClassification());
    fos.writeBoolean(modelConfig.getTrain().isOneVsAll());
    fos.writeInt(inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      }
      if (columnConfig.isCategorical() && CollectionUtils.isNotEmpty(columnConfig.getBinCategory())) {
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),columnConfig.getBinCategory());
      }
      if (columnConfig.isNumerical() && columnConfig.getMean() != null) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    if (columnIndexNameMapping.size() == 0) {
      boolean hasCandidates=CommonUtils.hasCandidateColumns(columnConfigList);
      for (      ColumnConfig columnConfig : columnConfigList) {
        if (CommonUtils.isGoodCandidate(columnConfig,hasCandidates)) {
          columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
        }
      }
    }
    fos.writeInt(numericalMeanMapping.size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue() == null ? 0d : entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      List<String> categories=entry.getValue();
      if (categories != null) {
        fos.writeInt(entry.getKey());
        fos.writeInt(categories.size());
        for (        String category : categories) {
          if (category.length() > Constants.MAX_CATEGORICAL_VAL_LEN) {
            int pos=category.lastIndexOf(Constants.CATEGORICAL_GROUP_VAL_DELIMITER,Constants.MAX_CATEGORICAL_VAL_LEN);
            if (pos >= 0) {
              category=category.substring(0,pos);
            }
 else {
              category=category.substring(0,Constants.MAX_CATEGORICAL_VAL_LEN);
            }
            fos.writeUTF(category);
          }
 else {
            fos.writeShort(UTF_BYTES_MARKER);
            byte[] bytes=category.getBytes(""String_Node_Str"");
            fos.writeInt(bytes.length);
            for (int i=0; i < bytes.length; i++) {
              fos.writeByte(bytes[i]);
            }
          }
        }
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping(columnConfigList);
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    fos.writeInt(baggingTrees.size());
    for (int i=0; i < baggingTrees.size(); i++) {
      List<TreeNode> trees=baggingTrees.get(i);
      int treeLength=trees.size();
      fos.writeInt(treeLength);
      for (      TreeNode treeNode : trees) {
        treeNode.write(fos);
      }
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}","public static void save(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,List<List<TreeNode>> baggingTrees,String loss,int inputCount,OutputStream output) throws IOException {
  DataOutputStream fos=null;
  try {
    fos=new DataOutputStream(new GZIPOutputStream(output));
    fos.writeInt(CommonConstants.TREE_FORMAT_VERSION);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(loss);
    fos.writeBoolean(modelConfig.isClassification());
    fos.writeBoolean(modelConfig.getTrain().isOneVsAll());
    fos.writeInt(inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      }
      if (columnConfig.isCategorical() && CollectionUtils.isNotEmpty(columnConfig.getBinCategory())) {
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),columnConfig.getBinCategory());
      }
      if (columnConfig.isNumerical() && columnConfig.getMean() != null) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    if (columnIndexNameMapping.size() == 0) {
      boolean hasCandidates=CommonUtils.hasCandidateColumns(columnConfigList);
      for (      ColumnConfig columnConfig : columnConfigList) {
        if (CommonUtils.isGoodCandidate(columnConfig,hasCandidates)) {
          columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
        }
      }
    }
    fos.writeInt(numericalMeanMapping.size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue() == null ? 0d : entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      List<String> categories=entry.getValue();
      if (categories != null) {
        fos.writeInt(entry.getKey());
        fos.writeInt(categories.size());
        for (        String category : categories) {
          if (category.length() < Constants.MAX_CATEGORICAL_VAL_LEN) {
            fos.writeUTF(category);
          }
 else {
            fos.writeShort(UTF_BYTES_MARKER);
            byte[] bytes=category.getBytes(""String_Node_Str"");
            fos.writeInt(bytes.length);
            for (int i=0; i < bytes.length; i++) {
              fos.writeByte(bytes[i]);
            }
          }
        }
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping(columnConfigList);
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    fos.writeInt(baggingTrees.size());
    for (int i=0; i < baggingTrees.size(); i++) {
      List<TreeNode> trees=baggingTrees.get(i);
      int treeLength=trees.size();
      fos.writeInt(treeLength);
      for (      TreeNode treeNode : trees) {
        treeNode.write(fos);
      }
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}",0.9591068414903284
31589,"private void postProcess4SEVarSelect(SourceType source,String varSelectMSEOutputPath) throws IOException {
  String outputFilePattern=varSelectMSEOutputPath + Path.SEPARATOR + ""String_Node_Str"";
  if (!ShifuFileUtils.isFileExists(outputFilePattern,source)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int selectCnt=0;
  for (  ColumnConfig config : super.columnConfigList) {
    if (config.isFinalSelect()) {
      config.setFinalSelect(false);
    }
    if (config.isForceSelect()) {
      config.setFinalSelect(true);
      selectCnt++;
      log.info(""String_Node_Str"",config.getColumnName());
    }
  }
  Set<NSColumn> userCandidateColumns=CommonUtils.loadCandidateColumns(modelConfig);
  List<Scanner> scanners=null;
  try {
    FileStatus[] globStatus=ShifuFileUtils.getFileSystemBySourceType(source).globStatus(new Path(outputFilePattern));
    if (globStatus == null || globStatus.length == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    scanners=ShifuFileUtils.getDataScanners(globStatus[0].getPath().toString(),source);
    String str=null;
    int targetCnt=0;
    List<Integer> candidateColumnIdList=new ArrayList<Integer>();
    Scanner scanner=scanners.get(0);
    while (scanner.hasNext()) {
      ++targetCnt;
      str=scanner.nextLine().trim();
      candidateColumnIdList.add(Integer.parseInt(str));
    }
    int i=0;
    int candidateCount=candidateColumnIdList.size();
    while (selectCnt < targetCnt && i < targetCnt) {
      if (i >= candidateCount) {
        log.warn(""String_Node_Str"",candidateCount,targetCnt);
        break;
      }
      Integer columnId=candidateColumnIdList.get(i++);
      ColumnConfig columnConfig=this.columnConfigList.get(columnId);
      if (CollectionUtils.isNotEmpty(userCandidateColumns) && !userCandidateColumns.contains(new NSColumn(columnConfig.getColumnName()))) {
        log.info(""String_Node_Str"",columnConfig.getColumnName());
      }
 else       if (!columnConfig.isForceSelect() && !columnConfig.isForceRemove()) {
        columnConfig.setFinalSelect(true);
        selectCnt++;
        log.info(""String_Node_Str"",columnConfig.getColumnName());
      }
    }
    log.info(""String_Node_Str"",selectCnt);
    log.info(""String_Node_Str"",varSelectMSEOutputPath,Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME);
    this.seStatsMap=readSEValuesToMap(varSelectMSEOutputPath + Path.SEPARATOR + Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME+ ""String_Node_Str"",source);
  }
  finally {
    if (scanners != null) {
      for (      Scanner scanner : scanners) {
        if (scanner != null) {
          scanner.close();
        }
      }
    }
  }
}","private void postProcess4SEVarSelect(SourceType source,String varSelectMSEOutputPath) throws IOException {
  String outputFilePattern=varSelectMSEOutputPath + Path.SEPARATOR + ""String_Node_Str"";
  if (!ShifuFileUtils.isFileExists(outputFilePattern,source)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int selectCnt=0;
  for (  ColumnConfig config : super.columnConfigList) {
    if (config.isFinalSelect()) {
      config.setFinalSelect(false);
    }
    if (config.isForceSelect()) {
      config.setFinalSelect(true);
      selectCnt++;
      log.info(""String_Node_Str"",config.getColumnName());
    }
  }
  Set<NSColumn> userCandidateColumns=CommonUtils.loadCandidateColumns(modelConfig);
  List<Scanner> scanners=null;
  try {
    FileStatus[] globStatus=ShifuFileUtils.getFileSystemBySourceType(source).globStatus(new Path(outputFilePattern));
    if (globStatus == null || globStatus.length == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    scanners=ShifuFileUtils.getDataScanners(globStatus[0].getPath().toString(),source);
    String str=null;
    int targetCnt=0;
    List<Integer> candidateColumnIdList=new ArrayList<Integer>();
    Scanner scanner=scanners.get(0);
    while (scanner.hasNext()) {
      ++targetCnt;
      str=scanner.nextLine().trim();
      candidateColumnIdList.add(Integer.parseInt(str));
    }
    int i=0;
    int candidateCount=candidateColumnIdList.size();
    while (selectCnt < targetCnt && i < targetCnt) {
      if (i >= candidateCount) {
        log.warn(""String_Node_Str"",candidateCount,targetCnt);
        break;
      }
      Integer columnId=candidateColumnIdList.get(i++);
      ColumnConfig columnConfig=CommonUtils.getColumnConfig(this.columnConfigList,columnId);
      if (CollectionUtils.isNotEmpty(userCandidateColumns) && !userCandidateColumns.contains(new NSColumn(columnConfig.getColumnName()))) {
        log.info(""String_Node_Str"",columnConfig.getColumnName());
      }
 else       if (!columnConfig.isForceSelect() && !columnConfig.isForceRemove()) {
        columnConfig.setFinalSelect(true);
        selectCnt++;
        log.info(""String_Node_Str"",columnConfig.getColumnName());
      }
    }
    log.info(""String_Node_Str"",selectCnt);
    log.info(""String_Node_Str"",varSelectMSEOutputPath,Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME);
    this.seStatsMap=readSEValuesToMap(varSelectMSEOutputPath + Path.SEPARATOR + Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME+ ""String_Node_Str"",source);
  }
  finally {
    if (scanners != null) {
      for (      Scanner scanner : scanners) {
        if (scanner != null) {
          scanner.close();
        }
      }
    }
  }
}",0.993563044301401
31590,"/** 
 * Get the varsel auto filter history to let user have the opportunity to change
 * @return
 */
public String getVarSelHistory(){
  return getPathBySourceType(new Path(Constants.TMP,Constants.VAR_SEL_HISTORY),SourceType.LOCAL);
}","/** 
 * Get the varsel auto filter history to let user have the opportunity to change
 * @return - the varsel.history path for variable auto filter
 */
public String getVarSelHistory(){
  return getPathBySourceType(new Path(Constants.TMP,Constants.VAR_SEL_HISTORY),SourceType.LOCAL);
}",0.9017341040462428
31591,"/** 
 * Get the shuffle data path according SourceType
 * @param sourceType
 * @return
 */
private String getShuffleDataPath(SourceType sourceType){
  return getPathBySourceType(new Path(Constants.TMP,Constants.SHUFFLED_DATA_PATH),sourceType);
}","/** 
 * Get the shuffle data path according SourceType
 * @param sourceType - Local/HDFS
 * @return - the shuffle data path
 */
private String getShuffleDataPath(SourceType sourceType){
  return getPathBySourceType(new Path(Constants.TMP,Constants.SHUFFLED_DATA_PATH),sourceType);
}",0.9297912713472486
31592,"/** 
 * Get the backup ColumnConfig
 * @return
 */
public String getBackupColumnConfig(){
  return getPathBySourceType(new Path(Constants.TMP,Constants.COLUMN_CONFIG_JSON_FILE_NAME),SourceType.LOCAL);
}","/** 
 * Get the backup ColumnConfig
 * @return - the ColumnConfig.json path for backup
 */
public String getBackupColumnConfig(){
  return getPathBySourceType(new Path(Constants.TMP,Constants.COLUMN_CONFIG_JSON_FILE_NAME),SourceType.LOCAL);
}",0.90990990990991
31593,"public String getCorrExportPath(){
  return getPathBySourceType(new Path(Constants.TMP,Constants.CORR_EXPORT_PATH),SourceType.LOCAL);
}","/** 
 * Get the correlation export path
 * @return - the correlation path for export
 */
public String getCorrExportPath(){
  return getPathBySourceType(new Path(Constants.TMP,Constants.CORR_EXPORT_PATH),SourceType.LOCAL);
}",0.7520891364902507
31594,"@Override public void updateColumnConfig(ColumnConfig columnConfig){
  String varName=columnConfig.getColumnName();
  columnConfig.setColumnFlag(null);
  if (NSColumnUtils.isColumnEqual(this.targetColumnName,varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Target);
  }
 else   if (this.setMeta.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Meta);
  }
 else   if (this.setForceRemove.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceRemove);
  }
 else   if (this.setForceSelect.contains(new NSColumn(varName))) {
    if (CollectionUtils.isEmpty(this.setCandidates) || (CollectionUtils.isNotEmpty(this.setCandidates) && this.setCandidates.contains(new NSColumn(varName)))) {
      columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceSelect);
    }
  }
 else   if (NSColumnUtils.isColumnEqual(this.weightColumnName,varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Weight);
  }
 else   if (this.setCandidates.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Candidate);
  }
}","@Override public void updateColumnConfig(ColumnConfig columnConfig){
  String varName=columnConfig.getColumnName();
  columnConfig.setColumnFlag(null);
  if (NSColumnUtils.isColumnEqual(this.targetColumnName,varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Target);
  }
 else   if (this.setMeta.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Meta);
  }
 else   if (this.setForceRemove.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceRemove);
  }
 else   if (this.setForceSelect.contains(new NSColumn(varName))) {
    if (CollectionUtils.isEmpty(this.setCandidates) || (CollectionUtils.isNotEmpty(this.setCandidates) && this.setCandidates.contains(new NSColumn(varName)))) {
      columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceSelect);
    }
  }
 else   if (NSColumnUtils.isColumnEqual(this.weightColumnName,varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Weight);
  }
 else   if (this.setCandidates.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Candidate);
  }
 else   if (this.setCategorialColumns.contains(new NSColumn(varName))) {
    columnConfig.setColumnType(ColumnType.C);
  }
}",0.9489414694894148
31595,"public VarSelUpdater(ModelConfig modelConfig) throws IOException {
  super(modelConfig);
  segs=modelConfig.getSegmentFilterExpressions();
  if (segs.size() > 0) {
    this.isForSegs=true;
  }
  this.setMeta=new HashSet<NSColumn>();
  if (CollectionUtils.isNotEmpty(modelConfig.getMetaColumnNames())) {
    for (    String meta : modelConfig.getMetaColumnNames()) {
      setMeta.add(new NSColumn(meta));
      if (this.isForSegs) {
        for (int i=0; i < segs.size(); i++) {
          setMeta.add(new NSColumn(meta + ""String_Node_Str"" + (i + 1)));
        }
      }
    }
  }
  setHybridColumns=new HashSet<NSColumn>();
  hybridColumnNames=modelConfig.getHybridColumnNames();
  if (hybridColumnNames != null && hybridColumnNames.size() > 0) {
    for (    Entry<String,Double> entry : hybridColumnNames.entrySet()) {
      setHybridColumns.add(new NSColumn(entry.getKey()));
      if (this.isForSegs) {
        for (int i=0; i < segs.size(); i++) {
          setHybridColumns.add(new NSColumn(entry.getKey() + ""String_Node_Str"" + (i + 1)));
        }
      }
    }
  }
}","public VarSelUpdater(ModelConfig modelConfig) throws IOException {
  super(modelConfig);
  segs=modelConfig.getSegmentFilterExpressions();
  if (segs.size() > 0) {
    this.isForSegs=true;
  }
  this.setMeta=new HashSet<NSColumn>();
  if (CollectionUtils.isNotEmpty(modelConfig.getMetaColumnNames())) {
    for (    String meta : modelConfig.getMetaColumnNames()) {
      setMeta.add(new NSColumn(meta));
      if (this.isForSegs) {
        for (int i=0; i < segs.size(); i++) {
          setMeta.add(new NSColumn(meta + ""String_Node_Str"" + (i + 1)));
        }
      }
    }
  }
  this.setCategorialColumns=new HashSet<NSColumn>();
  if (CollectionUtils.isNotEmpty(modelConfig.getCategoricalColumnNames())) {
    for (    String category : modelConfig.getCategoricalColumnNames()) {
      this.setCategorialColumns.add(new NSColumn(category));
      if (this.isForSegs) {
        for (int i=0; i < segs.size(); i++) {
          this.setCategorialColumns.add(new NSColumn(category + ""String_Node_Str"" + (i + 1)));
        }
      }
    }
  }
  setHybridColumns=new HashSet<NSColumn>();
  hybridColumnNames=modelConfig.getHybridColumnNames();
  if (hybridColumnNames != null && hybridColumnNames.size() > 0) {
    for (    Entry<String,Double> entry : hybridColumnNames.entrySet()) {
      setHybridColumns.add(new NSColumn(entry.getKey()));
      if (this.isForSegs) {
        for (int i=0; i < segs.size(); i++) {
          setHybridColumns.add(new NSColumn(entry.getKey() + ""String_Node_Str"" + (i + 1)));
        }
      }
    }
  }
}",0.8229885057471265
31596,"private long computeDynamicCombineSize() throws IOException {
  String dataPath=null;
  if (CommonUtils.isTreeModel(super.modelConfig.getAlgorithm())) {
    dataPath=super.pathFinder.getCleanedDataPath();
  }
 else {
    dataPath=super.pathFinder.getNormalizedDataPath();
  }
  int filePartCnt=ShifuFileUtils.getFilePartCount(dataPath,SourceType.HDFS);
  long actualFileSize=ShifuFileUtils.getFileOrDirectorySize(dataPath,SourceType.HDFS);
  boolean isGzip=ShifuFileUtils.isPartFileAllGzip(dataPath,SourceType.HDFS);
  long avgFileSize=actualFileSize / filePartCnt;
  if (isGzip && filePartCnt <= 20) {
    return (long)(avgFileSize * 1.2d);
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  int candidateCount=inputOutputIndex[2];
  long maxCombineSize=CommonUtils.isTreeModel(modelConfig.getAlgorithm()) ? 209715200L : 168435456L;
  if (modelConfig.isClassification()) {
    return maxCombineSize;
  }
  double ratio=candidateCount / 600d;
  if (ratio > 2d) {
    ratio=0.85 * ratio;
  }
  long finalCombineSize=Double.valueOf((maxCombineSize * 1d * (ratio))).longValue();
  if (finalCombineSize != 0L && actualFileSize / finalCombineSize < 25) {
    finalCombineSize/=2;
  }
  return finalCombineSize;
}","private long computeDynamicCombineSize() throws IOException {
  String dataPath=null;
  if (CommonUtils.isTreeModel(super.modelConfig.getAlgorithm())) {
    dataPath=ShifuFileUtils.getFileSystemBySourceType(modelConfig.getDataSet().getSource()).makeQualified(new Path(super.getPathFinder().getCleanedDataPath())).toString();
  }
 else {
    dataPath=ShifuFileUtils.getFileSystemBySourceType(modelConfig.getDataSet().getSource()).makeQualified(new Path(super.getPathFinder().getNormalizedDataPath())).toString();
  }
  LOG.info(""String_Node_Str"",dataPath);
  int filePartCnt=ShifuFileUtils.getFilePartCount(dataPath,SourceType.HDFS);
  long actualFileSize=ShifuFileUtils.getFileOrDirectorySize(dataPath,SourceType.HDFS);
  boolean isGzip=ShifuFileUtils.isPartFileAllGzip(dataPath,SourceType.HDFS);
  long avgFileSize=actualFileSize / filePartCnt;
  if (isGzip && filePartCnt <= 20) {
    return (long)(avgFileSize * 1.2d);
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  int candidateCount=inputOutputIndex[2];
  long maxCombineSize=CommonUtils.isTreeModel(modelConfig.getAlgorithm()) ? 209715200L : 168435456L;
  if (modelConfig.isClassification()) {
    return maxCombineSize;
  }
  double ratio=candidateCount / 600d;
  if (ratio > 2d) {
    ratio=0.85 * ratio;
  }
  long finalCombineSize=Double.valueOf((maxCombineSize * 1d * (ratio))).longValue();
  if (finalCombineSize != 0L && actualFileSize / finalCombineSize < 25) {
    finalCombineSize/=2;
  }
  return finalCombineSize;
}",0.8686797752808989
31597,"public static FileStatus[] getFilePartStatus(String filePath,SourceType sourceType) throws IOException {
  FileSystem fs=getFileSystemBySourceType(sourceType);
  FileStatus[] fileStatsArr=fs.globStatus(new Path(filePath),new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().startsWith(""String_Node_Str"");
    }
  }
);
  return fileStatsArr;
}","public static FileStatus[] getFilePartStatus(String filePath,SourceType sourceType) throws IOException {
  FileSystem fs=getFileSystemBySourceType(sourceType);
  FileStatus[] fileStatsArr=fs.listStatus(new Path(filePath),new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().startsWith(""String_Node_Str"");
    }
  }
);
  return fileStatsArr;
}",0.9896640826873384
31598,"/** 
 * Check the setting for model training. It will make sure (num_of_layers > 0 && num_of_layers = hidden_nodes_size && num_of_layse = active_func_size)
 * @param train - @ModelTrainConf to check
 * @return @ValidateResult
 */
@SuppressWarnings(""String_Node_Str"") private ValidateResult checkTrainSetting(ModelConfig modelConfig,ModelTrainConf train){
  ValidateResult result=new ValidateResult(true);
  if (train.getBaggingNum() == null || train.getBaggingNum() < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumKFold() != null && train.getNumKFold() > 20) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getBaggingSampleRate() == null || train.getBaggingSampleRate().compareTo(Double.valueOf(0)) <= 0 || train.getBaggingSampleRate().compareTo(Double.valueOf(1)) > 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getValidSetRate() == null || train.getValidSetRate().compareTo(Double.valueOf(0)) < 0 || train.getValidSetRate().compareTo(Double.valueOf(1)) >= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumTrainEpochs() == null || train.getNumTrainEpochs() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getEpochsPerIteration() != null && train.getEpochsPerIteration() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getWorkerThreadCount() != null && (train.getWorkerThreadCount() <= 0 || train.getWorkerThreadCount() > 32)) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getConvergenceThreshold() != null && train.getConvergenceThreshold().compareTo(0.0) < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.isOneVsAll() && !CommonUtils.isTreeModel(train.getAlgorithm())&& !train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.getMultiClassifyMethod() == MultipleClassification.NATIVE && train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
    Object impurity=train.getParams().get(""String_Node_Str"");
    if (impurity != null && !""String_Node_Str"".equalsIgnoreCase(impurity.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurity.toString())) {
      ValidateResult tmpResult=new ValidateResult(true);
      tmpResult.setStatus(false);
      tmpResult.getCauses().add(""String_Node_Str"");
      result=ValidateResult.mergeResult(result,tmpResult);
    }
  }
  GridSearch gs=new GridSearch(train.getParams(),train.getGridConfigFileContent());
  if (modelConfig.isRegression() && !gs.hasHyperParam()) {
    if (train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
      Map<String,Object> params=train.getParams();
      Object loss=params.get(""String_Node_Str"");
      if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      int layerCnt=(Integer)params.get(CommonConstants.NUM_HIDDEN_LAYERS);
      if (layerCnt < 0) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      List<Integer> hiddenNode=(List<Integer>)params.get(CommonConstants.NUM_HIDDEN_NODES);
      List<String> activateFucs=(List<String>)params.get(CommonConstants.ACTIVATION_FUNC);
      if (hiddenNode.size() != activateFucs.size() || layerCnt != activateFucs.size()) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(CommonConstants.NUM_HIDDEN_LAYERS + ""String_Node_Str"" + CommonConstants.NUM_HIDDEN_NODES+ ""String_Node_Str""+ ""String_Node_Str""+ CommonConstants.ACTIVATION_FUNC+ ""String_Node_Str""+ ""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Double learningRate=Double.valueOf(params.get(CommonConstants.LEARNING_RATE).toString());
      if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object learningDecayO=params.get(""String_Node_Str"");
      if (learningDecayO != null) {
        Double learningDecay=Double.valueOf(learningDecayO.toString());
        if (learningDecay != null && ((learningDecay.compareTo(Double.valueOf(0)) < 0) || (learningDecay.compareTo(Double.valueOf(1)) >= 0))) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object elmObject=params.get(DTrainUtils.IS_ELM);
      boolean isELM=elmObject == null ? false : ""String_Node_Str"".equalsIgnoreCase(elmObject.toString());
      if (isELM && layerCnt != 1) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object miniBatchsO=params.get(""String_Node_Str"");
      if (miniBatchsO != null) {
        Integer miniBatchs=Integer.valueOf(miniBatchsO.toString());
        if (miniBatchs != null && (miniBatchs <= 0 || miniBatchs > 1000)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object momentumO=params.get(""String_Node_Str"");
      if (momentumO != null) {
        Double momentum=Double.valueOf(momentumO.toString());
        if (momentum != null && momentum <= 0d) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object adamBeta1O=params.get(""String_Node_Str"");
      if (adamBeta1O != null) {
        Double adamBeta1=Double.valueOf(adamBeta1O.toString());
        if (adamBeta1 != null && (adamBeta1 <= 0d || adamBeta1 >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object adamBeta2O=params.get(""String_Node_Str"");
      if (adamBeta2O != null) {
        Double adamBeta2=Double.valueOf(adamBeta2O.toString());
        if (adamBeta2 != null && (adamBeta2 <= 0d || adamBeta2 >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      Object fssObj=params.get(""String_Node_Str"");
      if (fssObj == null) {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        boolean isNumber=false;
        double doubleFss=0;
        try {
          doubleFss=Double.parseDouble(fssObj.toString());
          isNumber=true;
        }
 catch (        Exception e) {
          isNumber=false;
        }
        if (isNumber && (doubleFss <= 0d || doubleFss > 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
        }
 else {
          boolean fssInEnum=false;
          for (          FeatureSubsetStrategy fss : FeatureSubsetStrategy.values()) {
            if (fss.toString().equalsIgnoreCase(fssObj.toString())) {
              fssInEnum=true;
              break;
            }
          }
          if (!fssInEnum) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
          }
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object loss=params.get(""String_Node_Str"");
        if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
        if (loss == null) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxDepthObj=params.get(""String_Node_Str"");
      if (maxDepthObj != null) {
        int maxDepth=Integer.valueOf(maxDepthObj.toString());
        if (maxDepth <= 0 || maxDepth > 20) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object vtObj=params.get(""String_Node_Str"");
      if (vtObj != null) {
        double validationTolerance=Double.valueOf(vtObj.toString());
        if (validationTolerance < 0d || validationTolerance >= 1d) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxLeavesObj=params.get(""String_Node_Str"");
      if (maxLeavesObj != null) {
        int maxLeaves=Integer.valueOf(maxLeavesObj.toString());
        if (maxLeaves <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (maxDepthObj == null && maxLeavesObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object maxStatsMemoryMBObj=params.get(""String_Node_Str"");
      if (maxStatsMemoryMBObj != null) {
        int maxStatsMemoryMB=Integer.valueOf(maxStatsMemoryMBObj.toString());
        if (maxStatsMemoryMB <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object learningRateObj=params.get(CommonConstants.LEARNING_RATE);
        if (learningRateObj != null) {
          Double learningRate=Double.valueOf(learningRateObj.toString());
          if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
 else {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object minInstancesPerNodeObj=params.get(""String_Node_Str"");
      if (minInstancesPerNodeObj != null) {
        int minInstancesPerNode=Integer.valueOf(minInstancesPerNodeObj.toString());
        if (minInstancesPerNode <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object treeNumObj=params.get(""String_Node_Str"");
      if (treeNumObj != null) {
        int treeNum=Integer.valueOf(treeNumObj.toString());
        if (treeNum <= 0 || treeNum > 10000) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object minInfoGainObj=params.get(""String_Node_Str"");
      if (minInfoGainObj != null) {
        Double minInfoGain=Double.valueOf(minInfoGainObj.toString());
        if (minInfoGain != null && (minInfoGain.compareTo(Double.valueOf(0)) < 0)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object impurityObj=params.get(""String_Node_Str"");
      if (impurityObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
 else {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
      }
    }
  }
  return result;
}","/** 
 * Check the setting for model training. It will make sure (num_of_layers > 0 && num_of_layers = hidden_nodes_size && num_of_layse = active_func_size)
 * @param train - @ModelTrainConf to check
 * @return @ValidateResult
 */
@SuppressWarnings(""String_Node_Str"") private ValidateResult checkTrainSetting(ModelConfig modelConfig,ModelTrainConf train){
  ValidateResult result=new ValidateResult(true);
  if (train.getBaggingNum() == null || train.getBaggingNum() < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumKFold() != null && train.getNumKFold() > 20) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getBaggingSampleRate() == null || train.getBaggingSampleRate().compareTo(Double.valueOf(0)) <= 0 || train.getBaggingSampleRate().compareTo(Double.valueOf(1)) > 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getValidSetRate() == null || train.getValidSetRate().compareTo(Double.valueOf(0)) < 0 || train.getValidSetRate().compareTo(Double.valueOf(1)) >= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumTrainEpochs() == null || train.getNumTrainEpochs() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getEpochsPerIteration() != null && train.getEpochsPerIteration() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getWorkerThreadCount() != null && (train.getWorkerThreadCount() <= 0 || train.getWorkerThreadCount() > 32)) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getConvergenceThreshold() != null && train.getConvergenceThreshold().compareTo(0.0) < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.isOneVsAll() && !CommonUtils.isTreeModel(train.getAlgorithm())&& !train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.getMultiClassifyMethod() == MultipleClassification.NATIVE && train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
    Object impurity=train.getParams().get(""String_Node_Str"");
    if (impurity != null && !""String_Node_Str"".equalsIgnoreCase(impurity.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurity.toString())) {
      ValidateResult tmpResult=new ValidateResult(true);
      tmpResult.setStatus(false);
      tmpResult.getCauses().add(""String_Node_Str"");
      result=ValidateResult.mergeResult(result,tmpResult);
    }
  }
  GridSearch gs=new GridSearch(train.getParams(),train.getGridConfigFileContent());
  if (modelConfig.isRegression() && !gs.hasHyperParam()) {
    if (train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
      Map<String,Object> params=train.getParams();
      Object loss=params.get(""String_Node_Str"");
      if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      int layerCnt=(Integer)params.get(CommonConstants.NUM_HIDDEN_LAYERS);
      if (layerCnt < 0) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      List<Integer> hiddenNode=(List<Integer>)params.get(CommonConstants.NUM_HIDDEN_NODES);
      List<String> activateFucs=(List<String>)params.get(CommonConstants.ACTIVATION_FUNC);
      if (hiddenNode.size() != activateFucs.size() || layerCnt != activateFucs.size()) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(CommonConstants.NUM_HIDDEN_LAYERS + ""String_Node_Str"" + CommonConstants.NUM_HIDDEN_NODES+ ""String_Node_Str""+ ""String_Node_Str""+ CommonConstants.ACTIVATION_FUNC+ ""String_Node_Str""+ ""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Double learningRate=Double.valueOf(params.get(CommonConstants.LEARNING_RATE).toString());
      if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object learningDecayO=params.get(""String_Node_Str"");
      if (learningDecayO != null) {
        Double learningDecay=Double.valueOf(learningDecayO.toString());
        if (learningDecay != null && ((learningDecay.compareTo(Double.valueOf(0)) < 0) || (learningDecay.compareTo(Double.valueOf(1)) >= 0))) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object elmObject=params.get(DTrainUtils.IS_ELM);
      boolean isELM=elmObject == null ? false : ""String_Node_Str"".equalsIgnoreCase(elmObject.toString());
      if (isELM && layerCnt != 1) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object miniBatchsO=params.get(""String_Node_Str"");
      if (miniBatchsO != null) {
        Integer miniBatchs=Integer.valueOf(miniBatchsO.toString());
        if (miniBatchs != null && (miniBatchs <= 0 || miniBatchs > 1000)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object momentumO=params.get(""String_Node_Str"");
      if (momentumO != null) {
        Double momentum=Double.valueOf(momentumO.toString());
        if (momentum != null && momentum <= 0d) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object adamBeta1O=params.get(""String_Node_Str"");
      if (adamBeta1O != null) {
        Double adamBeta1=Double.valueOf(adamBeta1O.toString());
        if (adamBeta1 != null && (adamBeta1 <= 0d || adamBeta1 >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object adamBeta2O=params.get(""String_Node_Str"");
      if (adamBeta2O != null) {
        Double adamBeta2=Double.valueOf(adamBeta2O.toString());
        if (adamBeta2 != null && (adamBeta2 <= 0d || adamBeta2 >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      Object fssObj=params.get(""String_Node_Str"");
      if (fssObj == null) {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        boolean isNumber=false;
        double doubleFss=0;
        try {
          doubleFss=Double.parseDouble(fssObj.toString());
          isNumber=true;
        }
 catch (        Exception e) {
          isNumber=false;
        }
        if (isNumber) {
          if (doubleFss <= 0d || doubleFss > 1d) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
 else {
          boolean fssInEnum=false;
          for (          FeatureSubsetStrategy fss : FeatureSubsetStrategy.values()) {
            if (fss.toString().equalsIgnoreCase(fssObj.toString())) {
              fssInEnum=true;
              break;
            }
          }
          if (!fssInEnum) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object loss=params.get(""String_Node_Str"");
        if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
        if (loss == null) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxDepthObj=params.get(""String_Node_Str"");
      if (maxDepthObj != null) {
        int maxDepth=Integer.valueOf(maxDepthObj.toString());
        if (maxDepth <= 0 || maxDepth > 20) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object vtObj=params.get(""String_Node_Str"");
      if (vtObj != null) {
        double validationTolerance=Double.valueOf(vtObj.toString());
        if (validationTolerance < 0d || validationTolerance >= 1d) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxLeavesObj=params.get(""String_Node_Str"");
      if (maxLeavesObj != null) {
        int maxLeaves=Integer.valueOf(maxLeavesObj.toString());
        if (maxLeaves <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (maxDepthObj == null && maxLeavesObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object maxStatsMemoryMBObj=params.get(""String_Node_Str"");
      if (maxStatsMemoryMBObj != null) {
        int maxStatsMemoryMB=Integer.valueOf(maxStatsMemoryMBObj.toString());
        if (maxStatsMemoryMB <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object learningRateObj=params.get(CommonConstants.LEARNING_RATE);
        if (learningRateObj != null) {
          Double learningRate=Double.valueOf(learningRateObj.toString());
          if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
 else {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object minInstancesPerNodeObj=params.get(""String_Node_Str"");
      if (minInstancesPerNodeObj != null) {
        int minInstancesPerNode=Integer.valueOf(minInstancesPerNodeObj.toString());
        if (minInstancesPerNode <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object treeNumObj=params.get(""String_Node_Str"");
      if (treeNumObj != null) {
        int treeNum=Integer.valueOf(treeNumObj.toString());
        if (treeNum <= 0 || treeNum > 10000) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object minInfoGainObj=params.get(""String_Node_Str"");
      if (minInfoGainObj != null) {
        Double minInfoGain=Double.valueOf(minInfoGainObj.toString());
        if (minInfoGain != null && (minInfoGain.compareTo(Double.valueOf(0)) < 0)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object impurityObj=params.get(""String_Node_Str"");
      if (impurityObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
 else {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
      }
    }
  }
  return result;
}",0.9955679839603228
31599,"public RunModelWorker(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,EvalConfig evalConfig,ActorRef parentActorRef,ActorRef nextActorRef) throws IOException {
  super(modelConfig,columnConfigList,parentActorRef,nextActorRef);
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,evalConfig,SourceType.LOCAL);
  String[] header=null;
  String delimiter=null;
  if (null == evalConfig || null == evalConfig.getDataSet().getHeaderPath() || null == evalConfig.getDataSet().getHeaderDelimiter()) {
    header=CommonUtils.getFinalHeaders(modelConfig);
    delimiter=modelConfig.getDataSetDelimiter();
  }
 else {
    header=CommonUtils.getFinalHeaders(evalConfig);
    delimiter=evalConfig.getDataSet().getDataDelimiter();
  }
  modelRunner=new ModelRunner(modelConfig,columnConfigList,header,delimiter,models);
  boolean gbtConvertToProp=((evalConfig == null) ? false : evalConfig.getGbtConvertToProb());
  SourceType sourceType=((evalConfig == null) ? modelConfig.getDataSet().getSource() : evalConfig.getDataSet().getSource());
  List<ModelSpec> subModels=CommonUtils.loadSubModels(modelConfig,this.columnConfigList,evalConfig,sourceType,gbtConvertToProp);
  if (CollectionUtils.isNotEmpty(subModels)) {
    for (    ModelSpec modelSpec : subModels) {
      this.modelRunner.addSubModels(modelSpec);
    }
  }
}","public RunModelWorker(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,EvalConfig evalConfig,ActorRef parentActorRef,ActorRef nextActorRef) throws IOException {
  super(modelConfig,columnConfigList,parentActorRef,nextActorRef);
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,evalConfig,SourceType.LOCAL);
  String[] header=null;
  String delimiter=null;
  if (null == evalConfig || null == evalConfig.getDataSet().getHeaderPath() || null == evalConfig.getDataSet().getHeaderDelimiter()) {
    header=CommonUtils.getFinalHeaders(modelConfig);
    delimiter=modelConfig.getDataSetDelimiter();
  }
 else {
    header=CommonUtils.getFinalHeaders(evalConfig);
    delimiter=evalConfig.getDataSet().getDataDelimiter();
  }
  modelRunner=new ModelRunner(modelConfig,columnConfigList,header,delimiter,models);
  @SuppressWarnings(""String_Node_Str"") boolean gbtConvertToProp=((evalConfig == null) ? false : evalConfig.getGbtConvertToProb());
  SourceType sourceType=((evalConfig == null) ? modelConfig.getDataSet().getSource() : evalConfig.getDataSet().getSource());
  List<ModelSpec> subModels=CommonUtils.loadSubModels(modelConfig,this.columnConfigList,evalConfig,sourceType,gbtConvertToProp);
  if (CollectionUtils.isNotEmpty(subModels)) {
    for (    ModelSpec modelSpec : subModels) {
      this.modelRunner.addSubModels(modelSpec);
    }
  }
}",0.9862912189699888
31600,"public ScoreModelWorker(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,ActorRef parentActorRef,ActorRef nextActorRef,EvalConfig evalConfig) throws IOException {
  super(modelConfig,columnConfigList,parentActorRef,nextActorRef);
  this.evalConfig=evalConfig;
  PathFinder pathFinder=new PathFinder(modelConfig);
  ShifuFileUtils.createDirIfNotExists(pathFinder.getEvalSetPath(evalConfig),evalConfig.getDataSet().getSource());
  ShifuFileUtils.deleteFile(pathFinder.getEvalScorePath(evalConfig),evalConfig.getDataSet().getSource());
  scoreWriter=ShifuFileUtils.getWriter(pathFinder.getEvalScorePath(evalConfig),evalConfig.getDataSet().getSource());
  header=CommonUtils.getFinalHeaders(evalConfig);
  receivedStreamCnt=0;
  resultMap=new HashMap<Integer,StreamBulletin>();
  subModelsCnt=new TreeMap<String,Integer>();
  List<ModelSpec> subModels=CommonUtils.loadSubModels(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource(),evalConfig.getGbtConvertToProb());
  if (CollectionUtils.isNotEmpty(subModels)) {
    for (    ModelSpec modelSpec : subModels) {
      System.out.println(""String_Node_Str"" + modelSpec.getModelName() + ""String_Node_Str""+ modelSpec.getModels().size());
      subModelsCnt.put(modelSpec.getModelName(),modelSpec.getModels().size());
    }
  }
  writeScoreHeader();
}","public ScoreModelWorker(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,ActorRef parentActorRef,ActorRef nextActorRef,EvalConfig evalConfig) throws IOException {
  super(modelConfig,columnConfigList,parentActorRef,nextActorRef);
  this.evalConfig=evalConfig;
  PathFinder pathFinder=new PathFinder(modelConfig);
  ShifuFileUtils.createDirIfNotExists(pathFinder.getEvalSetPath(evalConfig),evalConfig.getDataSet().getSource());
  ShifuFileUtils.deleteFile(pathFinder.getEvalScorePath(evalConfig),evalConfig.getDataSet().getSource());
  scoreWriter=ShifuFileUtils.getWriter(pathFinder.getEvalScorePath(evalConfig),evalConfig.getDataSet().getSource());
  header=CommonUtils.getFinalHeaders(evalConfig);
  receivedStreamCnt=0;
  resultMap=new HashMap<Integer,StreamBulletin>();
  subModelsCnt=new TreeMap<String,Integer>();
  @SuppressWarnings(""String_Node_Str"") List<ModelSpec> subModels=CommonUtils.loadSubModels(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource(),evalConfig.getGbtConvertToProb());
  if (CollectionUtils.isNotEmpty(subModels)) {
    for (    ModelSpec modelSpec : subModels) {
      System.out.println(""String_Node_Str"" + modelSpec.getModelName() + ""String_Node_Str""+ modelSpec.getModels().size());
      subModelsCnt.put(modelSpec.getModelName(),modelSpec.getModels().size());
    }
  }
  writeScoreHeader();
}",0.9862810530218762
31601,"/** 
 * load Column Config
 * @throws IOException in load column config
 */
private void loadColumnConfig() throws IOException {
  columnConfigList=CommonUtils.loadColumnConfigList(new Path(CommonUtils.getLocalModelSetPath(otherConfigs),Constants.LOCAL_COLUMN_CONFIG_JSON).toString(),SourceType.LOCAL);
}","/** 
 * load Column Config
 * @throws IOException in load column config
 */
private void loadColumnConfig() throws IOException {
  columnConfigList=CommonUtils.loadColumnConfigList(new Path(CommonUtils.getLocalModelSetPath(otherConfigs),Constants.LOCAL_COLUMN_CONFIG_JSON).toString(),SourceType.LOCAL,false);
}",0.990228013029316
31602,"/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    if (getBooleanParam(this.params,Constants.IS_COMPUTE_CORR)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      log.info(""String_Node_Str"");
      SourceType source=this.modelConfig.getDataSet().getSource();
      String corrPath=super.getPathFinder().getCorrelationPath(source);
      boolean reuseCorrResult=Environment.getBoolean(""String_Node_Str"",Boolean.FALSE);
      if (reuseCorrResult && ShifuFileUtils.isFileExists(corrPath,SourceType.HDFS)) {
        dumpCorrelationResult(source,corrPath);
      }
 else {
        runCorrMapReduceJob();
      }
      saveColumnConfigList();
    }
 else     if (getBooleanParam(this.params,Constants.IS_COMPUTE_PSI)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      if (StringUtils.isNotEmpty(modelConfig.getPsiColumnName())) {
        new MapReducerStatsWorker(this,modelConfig,columnConfigList).runPSI();
      }
 else {
        log.warn(""String_Node_Str"");
      }
    }
 else     if (getBooleanParam(this.params,Constants.IS_REBIN)) {
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      if (!ShifuFileUtils.isFileExists(new Path(backupColumnConfigPath),SourceType.LOCAL)) {
        ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
        saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
      }
 else {
        List<ColumnConfig> backColumnConfigList=CommonUtils.loadColumnConfigList(backupColumnConfigPath,SourceType.LOCAL);
        for (        ColumnConfig backupColumnConfig : backColumnConfigList) {
          for (          ColumnConfig columnConfig : this.columnConfigList) {
            if (NSColumnUtils.isColumnEqual(backupColumnConfig.getColumnName(),columnConfig.getColumnName())) {
              columnConfig.setColumnBinning(backupColumnConfig.getColumnBinning());
            }
          }
        }
      }
      List<ColumnConfig> rebinColumns=new ArrayList<ColumnConfig>();
      List<String> catVariables=getStringList(this.params,Constants.REQUEST_VARS,""String_Node_Str"");
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CollectionUtils.isEmpty(catVariables) || isRequestColumn(catVariables,columnConfig)) {
          rebinColumns.add(columnConfig);
        }
      }
      if (CollectionUtils.isNotEmpty(rebinColumns)) {
        for (        ColumnConfig columnConfig : rebinColumns) {
          doReBin(columnConfig);
        }
      }
      saveColumnConfigList();
    }
 else {
      AbstractStatsExecutor statsExecutor=null;
      if (modelConfig.isMapReduceRunMode()) {
        if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
          statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
          statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
          statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
          statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
      }
 else       if (modelConfig.isLocalRunMode()) {
        statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
      }
 else {
        throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
      }
      statsExecutor.doStats();
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
      saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
    }
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}","/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    if (getBooleanParam(this.params,Constants.IS_COMPUTE_CORR)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      log.info(""String_Node_Str"");
      SourceType source=this.modelConfig.getDataSet().getSource();
      String corrPath=super.getPathFinder().getCorrelationPath(source);
      boolean reuseCorrResult=Environment.getBoolean(""String_Node_Str"",Boolean.FALSE);
      if (reuseCorrResult && ShifuFileUtils.isFileExists(corrPath,SourceType.HDFS)) {
        dumpCorrelationResult(source,corrPath);
      }
 else {
        runCorrMapReduceJob();
      }
      saveColumnConfigList();
    }
 else     if (getBooleanParam(this.params,Constants.IS_COMPUTE_PSI)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      if (StringUtils.isNotEmpty(modelConfig.getPsiColumnName())) {
        new MapReducerStatsWorker(this,modelConfig,columnConfigList).runPSI();
      }
 else {
        log.warn(""String_Node_Str"");
      }
    }
 else     if (getBooleanParam(this.params,Constants.IS_REBIN)) {
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      if (!ShifuFileUtils.isFileExists(new Path(backupColumnConfigPath),SourceType.LOCAL)) {
        ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
        saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
      }
 else {
        List<ColumnConfig> backColumnConfigList=CommonUtils.loadColumnConfigList(backupColumnConfigPath,SourceType.LOCAL,false);
        for (        ColumnConfig backupColumnConfig : backColumnConfigList) {
          for (          ColumnConfig columnConfig : this.columnConfigList) {
            if (NSColumnUtils.isColumnEqual(backupColumnConfig.getColumnName(),columnConfig.getColumnName())) {
              columnConfig.setColumnBinning(backupColumnConfig.getColumnBinning());
            }
          }
        }
      }
      List<ColumnConfig> rebinColumns=new ArrayList<ColumnConfig>();
      List<String> catVariables=getStringList(this.params,Constants.REQUEST_VARS,""String_Node_Str"");
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CollectionUtils.isEmpty(catVariables) || isRequestColumn(catVariables,columnConfig)) {
          rebinColumns.add(columnConfig);
        }
      }
      if (CollectionUtils.isNotEmpty(rebinColumns)) {
        for (        ColumnConfig columnConfig : rebinColumns) {
          doReBin(columnConfig);
        }
      }
      saveColumnConfigList();
    }
 else {
      AbstractStatsExecutor statsExecutor=null;
      if (modelConfig.isMapReduceRunMode()) {
        if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
          statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
          statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
          statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
          statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
      }
 else       if (modelConfig.isLocalRunMode()) {
        statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
      }
 else {
        throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
      }
      statsExecutor.doStats();
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
      saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
    }
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}",0.999443000371333
31603,"@Override public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() != 1) {
    return null;
  }
  Integer columnId=null;
  ColumnConfig columnConfig=null;
  String binsData=null;
  Set<String> missingValSet=new HashSet<String>(super.modelConfig.getMissingOrInvalidValues());
  List<NumBinInfo> binInfoList=null;
  DataBag columnDataBag=(DataBag)input.get(0);
  Iterator<Tuple> iterator=columnDataBag.iterator();
  while (iterator.hasNext()) {
    Tuple tuple=iterator.next();
    if (columnId == null) {
      columnId=(Integer)tuple.get(0);
      if (columnId >= super.columnConfigList.size()) {
        int newColumnId=columnId % super.columnConfigList.size();
        columnConfig=super.columnConfigList.get(newColumnId);
      }
 else {
        columnConfig=super.columnConfigList.get(columnId);
      }
      String smallBins=smallBinsMap.get(columnId);
      if (columnConfig.isCategorical()) {
        binsData=smallBins;
        break;
      }
 else {
        binInfoList=NumBinInfo.constructNumBinfo(smallBins,AbstractBinning.FIELD_SEPARATOR);
      }
    }
    String val=(String)tuple.get(1);
    Boolean isPositiveInst=(Boolean)tuple.get(2);
    if (missingValSet.contains(val)) {
      continue;
    }
    Double d=null;
    try {
      d=Double.valueOf(val);
    }
 catch (    Exception e) {
      continue;
    }
    NumBinInfo numBinInfo=binaryLocate(binInfoList,d);
    if (numBinInfo != null) {
      numBinInfo.incInstCnt(isPositiveInst);
    }
  }
  if (binsData == null && CollectionUtils.isNotEmpty(binInfoList)) {
    int maxNumBin=modelConfig.getStats().getMaxNumBin();
    if (maxNumBin <= 0) {
      maxNumBin=1024;
    }
    DynamicBinning dynamicBinning=new DynamicBinning(binInfoList,maxNumBin);
    List<Double> binFields=dynamicBinning.getDataBin();
    binsData=StringUtils.join(binFields,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR);
  }
  Tuple output=TupleFactory.getInstance().newTuple(2);
  output.set(0,columnId);
  output.set(1,binsData);
  return output;
}","@Override public Tuple exec(Tuple input) throws IOException {
  if (smallBinsMap == null) {
    smallBinsMap=new HashMap<Integer,String>();
    List<String> smallBinsList=ShifuFileUtils.readFilePartsIntoList(smallBinsPath,SourceType.HDFS);
    for (    String smallBin : smallBinsList) {
      String[] fields=StringUtils.split(smallBin,'\u0007');
      if (fields.length == 2) {
        smallBinsMap.put(Integer.parseInt(fields[0]),fields[1]);
      }
    }
  }
  if (input == null || input.size() != 1) {
    return null;
  }
  Integer columnId=null;
  ColumnConfig columnConfig=null;
  String binsData=null;
  Set<String> missingValSet=new HashSet<String>(super.modelConfig.getMissingOrInvalidValues());
  List<NumBinInfo> binInfoList=null;
  DataBag columnDataBag=(DataBag)input.get(0);
  Iterator<Tuple> iterator=columnDataBag.iterator();
  while (iterator.hasNext()) {
    Tuple tuple=iterator.next();
    if (columnId == null) {
      columnId=(Integer)tuple.get(0);
      if (columnId >= super.columnConfigList.size()) {
        int newColumnId=columnId % super.columnConfigList.size();
        columnConfig=super.columnConfigList.get(newColumnId);
      }
 else {
        columnConfig=super.columnConfigList.get(columnId);
      }
      String smallBins=smallBinsMap.get(columnId);
      if (columnConfig.isCategorical()) {
        binsData=smallBins;
        break;
      }
 else {
        binInfoList=NumBinInfo.constructNumBinfo(smallBins,AbstractBinning.FIELD_SEPARATOR);
      }
    }
    String val=(String)tuple.get(1);
    Boolean isPositiveInst=(Boolean)tuple.get(2);
    if (missingValSet.contains(val)) {
      continue;
    }
    Double d=null;
    try {
      d=Double.valueOf(val);
    }
 catch (    Exception e) {
      continue;
    }
    NumBinInfo numBinInfo=binaryLocate(binInfoList,d);
    if (numBinInfo != null) {
      numBinInfo.incInstCnt(isPositiveInst);
    }
  }
  if (binsData == null && CollectionUtils.isNotEmpty(binInfoList)) {
    int maxNumBin=modelConfig.getStats().getMaxNumBin();
    if (maxNumBin <= 0) {
      maxNumBin=1024;
    }
    DynamicBinning dynamicBinning=new DynamicBinning(binInfoList,maxNumBin);
    List<Double> binFields=dynamicBinning.getDataBin();
    binsData=StringUtils.join(binFields,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR);
  }
  Tuple output=TupleFactory.getInstance().newTuple(2);
  output.set(0,columnId);
  output.set(1,binsData);
  return output;
}",0.9098673859294224
31604,"public DynamicBinningUDF(String source,String pathModelConfig,String pathColumnConfig,String smallBinsPath) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  smallBinsMap=new HashMap<Integer,String>();
  List<String> smallBinsList=ShifuFileUtils.readFilePartsIntoList(smallBinsPath,SourceType.HDFS);
  for (  String smallBin : smallBinsList) {
    String[] fields=StringUtils.split(smallBin,'\u0007');
    if (fields.length == 2) {
      smallBinsMap.put(Integer.parseInt(fields[0]),fields[1]);
    }
  }
}","public DynamicBinningUDF(String source,String pathModelConfig,String pathColumnConfig,String smallBinsPath) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  this.smallBinsPath=smallBinsPath;
}",0.4966442953020134
31605,"/** 
 * Load column configuration list.
 * @param path file path
 * @param sourceType source type: hdfs or local
 * @return column config list
 * @throws IOException if any IO exception in parsing json.
 * @throws IllegalArgumentException if  {@code path} is null or empty, if sourceType is null.
 */
public static List<ColumnConfig> loadColumnConfigList(String path,SourceType sourceType) throws IOException {
  ColumnConfig[] configList=loadJSON(path,sourceType,ColumnConfig[].class);
  List<ColumnConfig> columnConfigList=new ArrayList<ColumnConfig>();
  for (  ColumnConfig columnConfig : configList) {
    columnConfig.setSampleValues(null);
    columnConfigList.add(columnConfig);
  }
  return columnConfigList;
}","/** 
 * Load column configuration list.
 * @param path file path
 * @param sourceType source type: hdfs or local
 * @param nullSampleValues if sample values null or not to save memory especially in Pig UDF to save more memory. there is a OOM if larger ColumnConfig.json.
 * @return column config list
 * @throws IOException if any IO exception in parsing json.
 * @throws IllegalArgumentException if  {@code path} is null or empty, if sourceType is null.
 */
public static List<ColumnConfig> loadColumnConfigList(String path,SourceType sourceType,boolean nullSampleValues) throws IOException {
  ColumnConfig[] configList=loadJSON(path,sourceType,ColumnConfig[].class);
  List<ColumnConfig> columnConfigList=new ArrayList<ColumnConfig>();
  for (  ColumnConfig columnConfig : configList) {
    if (nullSampleValues) {
      columnConfig.setSampleValues(null);
    }
    columnConfigList.add(columnConfig);
  }
  return columnConfigList;
}",0.867833433916717
31606,"public static void main(String[] args){
  List<String> cleanedArgsList=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      String keyValue=args[i].substring(2,args[i].length());
      int index=keyValue.indexOf(""String_Node_Str"");
      String key=keyValue.substring(0,index);
      String value=""String_Node_Str"";
      if (keyValue.length() >= index + 1) {
        value=keyValue.substring(index + 1,keyValue.length());
      }
      Environment.setProperty(key.trim(),value.trim());
      System.setProperty(key.trim(),value.trim());
    }
 else {
      cleanedArgsList.add(args[i]);
    }
  }
  String[] cleanedArgs=cleanedArgsList.toArray(new String[0]);
  if (cleanedArgs.length < 1 || (isHelpOption(cleanedArgs[0]))) {
    printUsage();
    System.exit(cleanedArgs.length < 1 ? -1 : 0);
  }
  if (isVersionOption(cleanedArgs[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(cleanedArgs);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,cleanedArgs);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (cleanedArgs[0].equals(NEW) && cleanedArgs.length >= 2 && StringUtils.isNotEmpty(cleanedArgs[1])) {
      String modelName=cleanedArgs[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (cleanedArgs[0].equals(MODELSET_CMD_CP) && cleanedArgs.length >= 3 && StringUtils.isNotEmpty(cleanedArgs[1]) && StringUtils.isNotEmpty(cleanedArgs[2])) {
        String newModelSetName=cleanedArgs[2];
        copyModel(new String[]{cleanedArgs[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(STATS_CMD)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(StatsModelProcessor.IS_COMPUTE_CORR,cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str""));
        params.put(StatsModelProcessor.IS_REBIN,cmd.hasOption(REBIN));
        params.put(StatsModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(StatsModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(StatsModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(StatsModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        params.put(StatsModelProcessor.IS_COMPUTE_PSI,cmd.hasOption(PSI) || cmd.hasOption(SHORT_PSI));
        status=calModelStats(params);
        if (status == 0) {
          if (cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str"")) {
            log.info(""String_Node_Str"");
          }
          if (cmd.hasOption(PSI) || cmd.hasOption(SHORT_PSI)) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(NORMALIZE_CMD) || cleanedArgs[0].equals(NORM_CMD) || cleanedArgs[0].equals(TRANSFORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(VARSELECT_CMD) || cleanedArgs[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET),cmd.hasOption(LIST));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG),cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(SAVE)) {
        String newModelSetName=cleanedArgs.length >= 2 ? cleanedArgs[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SWITCH)) {
        String newModelSetName=cleanedArgs[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (cleanedArgs[0].equals(EVAL_CMD)) {
        if (cleanedArgs.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(CMD_EXPORT)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(ExportModelProcessor.IS_CONCISE,cmd.hasOption(EXPORT_CONCISE));
        params.put(ExportModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(ExportModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(ExportModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(ExportModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),params);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}","public static void main(String[] args){
  List<String> cleanedArgsList=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      String keyValue=args[i].substring(2,args[i].length());
      int index=keyValue.indexOf(""String_Node_Str"");
      String key=keyValue.substring(0,index);
      String value=""String_Node_Str"";
      if (keyValue.length() >= index + 1) {
        value=keyValue.substring(index + 1,keyValue.length());
      }
      Environment.setProperty(key.trim(),value.trim());
      System.setProperty(key.trim(),value.trim());
    }
 else {
      cleanedArgsList.add(args[i]);
    }
  }
  String[] cleanedArgs=cleanedArgsList.toArray(new String[0]);
  if (cleanedArgs.length < 1 || (isHelpOption(cleanedArgs[0]))) {
    printUsage();
    System.exit(cleanedArgs.length < 1 ? -1 : 0);
  }
  if (isVersionOption(cleanedArgs[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(cleanedArgs);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,cleanedArgs);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (cleanedArgs[0].equals(NEW) && cleanedArgs.length >= 2 && StringUtils.isNotEmpty(cleanedArgs[1])) {
      String modelName=cleanedArgs[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (cleanedArgs[0].equals(MODELSET_CMD_CP) && cleanedArgs.length >= 3 && StringUtils.isNotEmpty(cleanedArgs[1]) && StringUtils.isNotEmpty(cleanedArgs[2])) {
        String newModelSetName=cleanedArgs[2];
        copyModel(new String[]{cleanedArgs[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(STATS_CMD)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(Constants.IS_COMPUTE_CORR,cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str""));
        params.put(Constants.IS_REBIN,cmd.hasOption(REBIN));
        params.put(Constants.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(Constants.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(Constants.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(Constants.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        params.put(Constants.IS_COMPUTE_PSI,cmd.hasOption(PSI) || cmd.hasOption(SHORT_PSI));
        status=calModelStats(params);
        if (status == 0) {
          if (cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str"")) {
            log.info(""String_Node_Str"");
          }
          if (cmd.hasOption(PSI) || cmd.hasOption(SHORT_PSI)) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(NORMALIZE_CMD) || cleanedArgs[0].equals(NORM_CMD) || cleanedArgs[0].equals(TRANSFORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(VARSELECT_CMD) || cleanedArgs[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET),cmd.hasOption(LIST));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG),cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(SAVE)) {
        String newModelSetName=cleanedArgs.length >= 2 ? cleanedArgs[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SWITCH)) {
        String newModelSetName=cleanedArgs[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (cleanedArgs[0].equals(EVAL_CMD)) {
        if (cleanedArgs.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(CMD_EXPORT)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(ExportModelProcessor.IS_CONCISE,cmd.hasOption(EXPORT_CONCISE));
        params.put(ExportModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(ExportModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(ExportModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(ExportModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),params);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}",0.988793596340766
31607,"private List<AbstractBinInfo> genNumericalBinInfos(ColumnConfig columnConfig){
  List<AbstractBinInfo> numericalBinInfos=new ArrayList<AbstractBinInfo>();
  for (int i=0; i < columnConfig.getBinBoundary().size(); i++) {
    NumericalBinInfo binInfo=new NumericalBinInfo();
    binInfo.setLeftThreshold(columnConfig.getBinBoundary().get(i));
    if (i == columnConfig.getBinBoundary().size() - 1) {
      binInfo.setRightThreshold(Double.POSITIVE_INFINITY);
    }
 else {
      binInfo.setRightThreshold(columnConfig.getBinBoundary().get(i + 1));
    }
    binInfo.setPositiveCnt(columnConfig.getBinCountPos().get(i));
    binInfo.setNegativeCnt(columnConfig.getBinCountNeg().get(i));
    binInfo.setWeightPos(columnConfig.getBinWeightedPos().get(i));
    binInfo.setWeightNeg(columnConfig.getBinWeightedNeg().get(i));
    numericalBinInfos.add(binInfo);
  }
  return numericalBinInfos;
}","private List<AbstractBinInfo> genNumericalBinInfos(ColumnConfig columnConfig){
  List<AbstractBinInfo> numericalBinInfos=new ArrayList<AbstractBinInfo>();
  if (columnConfig.getBinBoundary() == null) {
    LOG.info(""String_Node_Str"",columnConfig.getColumnNum(),columnConfig.getColumnName());
  }
  for (int i=0; i < columnConfig.getBinBoundary().size(); i++) {
    NumericalBinInfo binInfo=new NumericalBinInfo();
    binInfo.setLeftThreshold(columnConfig.getBinBoundary().get(i));
    if (i == columnConfig.getBinBoundary().size() - 1) {
      binInfo.setRightThreshold(Double.POSITIVE_INFINITY);
    }
 else {
      binInfo.setRightThreshold(columnConfig.getBinBoundary().get(i + 1));
    }
    binInfo.setPositiveCnt(columnConfig.getBinCountPos().get(i));
    binInfo.setNegativeCnt(columnConfig.getBinCountNeg().get(i));
    binInfo.setWeightPos(columnConfig.getBinWeightedPos().get(i));
    binInfo.setWeightNeg(columnConfig.getBinWeightedNeg().get(i));
    numericalBinInfos.add(binInfo);
  }
  return numericalBinInfos;
}",0.9263707571801568
31608,"/** 
 * initialize the config file, pathFinder and other input
 * @param step Shifu running step
 * @throws Exception any exception in setup
 */
protected void setUp(ModelStep step) throws Exception {
  if (hasInitialized()) {
    return;
  }
  loadModelConfig();
  validateModelConfig(step);
  this.pathFinder=new PathFinder(modelConfig,this.getOtherConfigs());
  checkAlgorithmParam();
  LOG.info(String.format(""String_Node_Str"",modelConfig.getDataSet().getSource()));
switch (step) {
case INIT:
    break;
default :
  loadColumnConfig();
validateColumnConfig();
ColumnConfigUpdater.updateColumnConfigFlags(modelConfig,columnConfigList,step);
validateColumnConfigAfterSet();
saveColumnConfigList();
break;
}
switch (step) {
case NORMALIZE:
case VARSELECT:
case TRAIN:
case EVAL:
List<String> segs=this.modelConfig.getSegmentFilterExpressions();
String alg=this.modelConfig.getAlgorithm();
if (segs.size() > 0 && !(CommonUtils.isNNModel(alg) || CommonUtils.isLRModel(alg))) {
throw new IllegalArgumentException(""String_Node_Str"");
}
break;
}
}","/** 
 * initialize the config file, pathFinder and other input
 * @param step Shifu running step
 * @throws Exception any exception in setup
 */
protected void setUp(ModelStep step) throws Exception {
  if (hasInitialized()) {
    return;
  }
  loadModelConfig();
  validateModelConfig(step);
  this.pathFinder=new PathFinder(modelConfig,this.getOtherConfigs());
  checkAlgorithmParam();
  LOG.info(String.format(""String_Node_Str"",modelConfig.getDataSet().getSource()));
switch (step) {
case INIT:
    break;
default :
  loadColumnConfig();
validateColumnConfig();
boolean strictCallVoidUpdate=(step == ModelStep.STATS) && (getBooleanParam(this.params,Constants.IS_COMPUTE_CORR) || getBooleanParam(this.params,Constants.IS_COMPUTE_PSI) || getBooleanParam(this.params,Constants.IS_REBIN));
ColumnConfigUpdater.updateColumnConfigFlags(modelConfig,columnConfigList,step,strictCallVoidUpdate);
validateColumnConfigAfterSet();
saveColumnConfigList();
break;
}
switch (step) {
case NORMALIZE:
case VARSELECT:
case TRAIN:
case EVAL:
List<String> segs=this.modelConfig.getSegmentFilterExpressions();
String alg=this.modelConfig.getAlgorithm();
if (segs.size() > 0 && !(CommonUtils.isNNModel(alg) || CommonUtils.isLRModel(alg))) {
throw new IllegalArgumentException(""String_Node_Str"");
}
break;
}
}",0.8846978139734247
31609,"private void doReBin(ColumnConfig columnConfig) throws IOException {
  int expectBinNum=getIntParam(this.params,EXPECTED_BIN_NUM);
  double ivKeepRatio=getDoubleParam(this.params,IV_KEEP_RATIO,1.0d);
  long minimumInstCnt=getLongParam(this.params,MINIMUM_BIN_INST_CNT);
  ColumnConfigDynamicBinning columnConfigDynamicBinning=new ColumnConfigDynamicBinning(columnConfig,expectBinNum,ivKeepRatio,minimumInstCnt);
  List<AbstractBinInfo> binInfos=columnConfigDynamicBinning.run();
  long[] binCountNeg=new long[binInfos.size() + 1];
  long[] binCountPos=new long[binInfos.size() + 1];
  for (int i=0; i < binInfos.size(); i++) {
    AbstractBinInfo binInfo=binInfos.get(i);
    binCountNeg[i]=binInfo.getNegativeCnt();
    binCountPos[i]=binInfo.getPositiveCnt();
  }
  binCountNeg[binCountNeg.length - 1]=columnConfig.getBinCountNeg().get(columnConfig.getBinCountNeg().size() - 1);
  binCountPos[binCountPos.length - 1]=columnConfig.getBinCountPos().get(columnConfig.getBinCountPos().size() - 1);
  double[] binWeightNeg=new double[binInfos.size() + 1];
  double[] binWeightPos=new double[binInfos.size() + 1];
  for (int i=0; i < binInfos.size(); i++) {
    AbstractBinInfo binInfo=binInfos.get(i);
    binWeightNeg[i]=binInfo.getWeightNeg();
    binWeightPos[i]=binInfo.getWeightPos();
  }
  binWeightNeg[binWeightNeg.length - 1]=columnConfig.getBinWeightedNeg().get(columnConfig.getBinWeightedNeg().size() - 1);
  binWeightPos[binWeightPos.length - 1]=columnConfig.getBinWeightedPos().get(columnConfig.getBinWeightedPos().size() - 1);
  ColumnStatsCalculator.ColumnMetrics columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
  ColumnStatsCalculator.ColumnMetrics columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  columnConfig.setBinLength(binInfos.size() + 1);
  if (columnConfig.isCategorical()) {
    List<String> values=new ArrayList<String>();
    for (    AbstractBinInfo binInfo : binInfos) {
      CategoricalBinInfo categoricalBinInfo=(CategoricalBinInfo)binInfo;
      values.add(StringUtils.join(categoricalBinInfo.getValues(),Constants.CATEGORICAL_GROUP_VAL_DELIMITER));
    }
    columnConfig.setBinCategory(values);
  }
 else {
    List<Double> values=new ArrayList<Double>();
    for (    AbstractBinInfo binInfo : binInfos) {
      NumericalBinInfo numericalBinInfo=(NumericalBinInfo)binInfo;
      values.add(numericalBinInfo.getLeftThreshold());
    }
    columnConfig.setBinBoundary(values);
  }
  columnConfig.setBinCountNeg(convertToIntList(binCountNeg));
  columnConfig.setBinCountPos(convertToIntList(binCountPos));
  List<Double> binPosRates=new ArrayList<Double>();
  for (  AbstractBinInfo binInfo : binInfos) {
    binPosRates.add(binInfo.getPositiveRate());
  }
  if (binPosRates.size() + 1 == binCountPos.length) {
    long missingSumCnt=binCountPos[binCountPos.length - 1] + binCountNeg[binCountNeg.length - 1];
    if (missingSumCnt > 0) {
      binPosRates.add(binCountPos[binCountPos.length - 1] * 1d / missingSumCnt);
    }
 else {
      binPosRates.add(Double.NaN);
    }
  }
  columnConfig.setBinPosCaseRate(binPosRates);
  columnConfig.setBinWeightedNeg(convertIntoDoubleList(binWeightNeg));
  columnConfig.setBinWeightedPos(convertIntoDoubleList(binWeightPos));
  columnConfig.setIv(columnCountMetrics.getIv());
  columnConfig.setKs(columnCountMetrics.getKs());
  columnConfig.getColumnStats().setWoe(columnCountMetrics.getWoe());
  columnConfig.getColumnBinning().setBinCountWoe(columnCountMetrics.getBinningWoe());
  columnConfig.getColumnStats().setWeightedIv(columnWeightMetrics.getIv());
  columnConfig.getColumnStats().setWeightedKs(columnWeightMetrics.getWoe());
  columnConfig.getColumnStats().setWeightedWoe(columnWeightMetrics.getWoe());
  columnConfig.getColumnBinning().setBinWeightedWoe(columnWeightMetrics.getBinningWoe());
}","private void doReBin(ColumnConfig columnConfig) throws IOException {
  int expectBinNum=getIntParam(this.params,Constants.EXPECTED_BIN_NUM);
  double ivKeepRatio=getDoubleParam(this.params,Constants.IV_KEEP_RATIO,1.0d);
  long minimumInstCnt=getLongParam(this.params,Constants.MINIMUM_BIN_INST_CNT);
  ColumnConfigDynamicBinning columnConfigDynamicBinning=new ColumnConfigDynamicBinning(columnConfig,expectBinNum,ivKeepRatio,minimumInstCnt);
  List<AbstractBinInfo> binInfos=columnConfigDynamicBinning.run();
  long[] binCountNeg=new long[binInfos.size() + 1];
  long[] binCountPos=new long[binInfos.size() + 1];
  for (int i=0; i < binInfos.size(); i++) {
    AbstractBinInfo binInfo=binInfos.get(i);
    binCountNeg[i]=binInfo.getNegativeCnt();
    binCountPos[i]=binInfo.getPositiveCnt();
  }
  binCountNeg[binCountNeg.length - 1]=columnConfig.getBinCountNeg().get(columnConfig.getBinCountNeg().size() - 1);
  binCountPos[binCountPos.length - 1]=columnConfig.getBinCountPos().get(columnConfig.getBinCountPos().size() - 1);
  double[] binWeightNeg=new double[binInfos.size() + 1];
  double[] binWeightPos=new double[binInfos.size() + 1];
  for (int i=0; i < binInfos.size(); i++) {
    AbstractBinInfo binInfo=binInfos.get(i);
    binWeightNeg[i]=binInfo.getWeightNeg();
    binWeightPos[i]=binInfo.getWeightPos();
  }
  binWeightNeg[binWeightNeg.length - 1]=columnConfig.getBinWeightedNeg().get(columnConfig.getBinWeightedNeg().size() - 1);
  binWeightPos[binWeightPos.length - 1]=columnConfig.getBinWeightedPos().get(columnConfig.getBinWeightedPos().size() - 1);
  ColumnStatsCalculator.ColumnMetrics columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
  ColumnStatsCalculator.ColumnMetrics columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  columnConfig.setBinLength(binInfos.size() + 1);
  if (columnConfig.isCategorical()) {
    List<String> values=new ArrayList<String>();
    for (    AbstractBinInfo binInfo : binInfos) {
      CategoricalBinInfo categoricalBinInfo=(CategoricalBinInfo)binInfo;
      values.add(StringUtils.join(categoricalBinInfo.getValues(),Constants.CATEGORICAL_GROUP_VAL_DELIMITER));
    }
    columnConfig.setBinCategory(values);
  }
 else {
    List<Double> values=new ArrayList<Double>();
    for (    AbstractBinInfo binInfo : binInfos) {
      NumericalBinInfo numericalBinInfo=(NumericalBinInfo)binInfo;
      values.add(numericalBinInfo.getLeftThreshold());
    }
    columnConfig.setBinBoundary(values);
  }
  columnConfig.setBinCountNeg(convertToIntList(binCountNeg));
  columnConfig.setBinCountPos(convertToIntList(binCountPos));
  List<Double> binPosRates=new ArrayList<Double>();
  for (  AbstractBinInfo binInfo : binInfos) {
    binPosRates.add(binInfo.getPositiveRate());
  }
  if (binPosRates.size() + 1 == binCountPos.length) {
    long missingSumCnt=binCountPos[binCountPos.length - 1] + binCountNeg[binCountNeg.length - 1];
    if (missingSumCnt > 0) {
      binPosRates.add(binCountPos[binCountPos.length - 1] * 1d / missingSumCnt);
    }
 else {
      binPosRates.add(Double.NaN);
    }
  }
  columnConfig.setBinPosCaseRate(binPosRates);
  columnConfig.setBinWeightedNeg(convertIntoDoubleList(binWeightNeg));
  columnConfig.setBinWeightedPos(convertIntoDoubleList(binWeightPos));
  columnConfig.setIv(columnCountMetrics.getIv());
  columnConfig.setKs(columnCountMetrics.getKs());
  columnConfig.getColumnStats().setWoe(columnCountMetrics.getWoe());
  columnConfig.getColumnBinning().setBinCountWoe(columnCountMetrics.getBinningWoe());
  columnConfig.getColumnStats().setWeightedIv(columnWeightMetrics.getIv());
  columnConfig.getColumnStats().setWeightedKs(columnWeightMetrics.getWoe());
  columnConfig.getColumnStats().setWeightedWoe(columnWeightMetrics.getWoe());
  columnConfig.getColumnBinning().setBinWeightedWoe(columnWeightMetrics.getBinningWoe());
}",0.9961300309597524
31610,"/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    log.debug(""String_Node_Str"",this.modelConfig.getStats().getCateMaxNumBin());
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    if (getBooleanParam(this.params,IS_COMPUTE_CORR)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      log.info(""String_Node_Str"");
      SourceType source=this.modelConfig.getDataSet().getSource();
      String corrPath=super.getPathFinder().getCorrelationPath(source);
      boolean reuseCorrResult=Environment.getBoolean(""String_Node_Str"",Boolean.FALSE);
      if (reuseCorrResult && ShifuFileUtils.isFileExists(corrPath,SourceType.HDFS)) {
        dumpCorrelationResult(source,corrPath);
      }
 else {
        runCorrMapReduceJob();
      }
      saveColumnConfigList();
    }
 else     if (getBooleanParam(this.params,IS_COMPUTE_PSI)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      if (StringUtils.isNotEmpty(modelConfig.getPsiColumnName())) {
        new MapReducerStatsWorker(this,modelConfig,columnConfigList).runPSI();
      }
 else {
        log.warn(""String_Node_Str"");
      }
    }
 else     if (getBooleanParam(this.params,IS_REBIN)) {
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      if (!ShifuFileUtils.isFileExists(new Path(backupColumnConfigPath),SourceType.LOCAL)) {
        ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
        saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
      }
 else {
        List<ColumnConfig> backColumnConfigList=CommonUtils.loadColumnConfigList(backupColumnConfigPath,SourceType.LOCAL);
        for (        ColumnConfig backupColumnConfig : backColumnConfigList) {
          for (          ColumnConfig columnConfig : this.columnConfigList) {
            if (NSColumnUtils.isColumnEqual(backupColumnConfig.getColumnName(),columnConfig.getColumnName())) {
              columnConfig.setColumnBinning(backupColumnConfig.getColumnBinning());
            }
          }
        }
      }
      List<ColumnConfig> rebinColumns=new ArrayList<ColumnConfig>();
      List<String> catVariables=getStringList(this.params,REQUEST_VARS,""String_Node_Str"");
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CollectionUtils.isEmpty(catVariables) || isRequestColumn(catVariables,columnConfig)) {
          rebinColumns.add(columnConfig);
        }
      }
      if (CollectionUtils.isNotEmpty(rebinColumns)) {
        for (        ColumnConfig columnConfig : rebinColumns) {
          doReBin(columnConfig);
        }
      }
      saveColumnConfigList();
    }
 else {
      AbstractStatsExecutor statsExecutor=null;
      if (modelConfig.isMapReduceRunMode()) {
        if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
          statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
          statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
          statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
          statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
      }
 else       if (modelConfig.isLocalRunMode()) {
        statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
      }
 else {
        throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
      }
      statsExecutor.doStats();
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
      saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
    }
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}","/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    if (getBooleanParam(this.params,Constants.IS_COMPUTE_CORR)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      log.info(""String_Node_Str"");
      SourceType source=this.modelConfig.getDataSet().getSource();
      String corrPath=super.getPathFinder().getCorrelationPath(source);
      boolean reuseCorrResult=Environment.getBoolean(""String_Node_Str"",Boolean.FALSE);
      if (reuseCorrResult && ShifuFileUtils.isFileExists(corrPath,SourceType.HDFS)) {
        dumpCorrelationResult(source,corrPath);
      }
 else {
        runCorrMapReduceJob();
      }
      saveColumnConfigList();
    }
 else     if (getBooleanParam(this.params,Constants.IS_COMPUTE_PSI)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      if (StringUtils.isNotEmpty(modelConfig.getPsiColumnName())) {
        new MapReducerStatsWorker(this,modelConfig,columnConfigList).runPSI();
      }
 else {
        log.warn(""String_Node_Str"");
      }
    }
 else     if (getBooleanParam(this.params,Constants.IS_REBIN)) {
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      if (!ShifuFileUtils.isFileExists(new Path(backupColumnConfigPath),SourceType.LOCAL)) {
        ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
        saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
      }
 else {
        List<ColumnConfig> backColumnConfigList=CommonUtils.loadColumnConfigList(backupColumnConfigPath,SourceType.LOCAL);
        for (        ColumnConfig backupColumnConfig : backColumnConfigList) {
          for (          ColumnConfig columnConfig : this.columnConfigList) {
            if (NSColumnUtils.isColumnEqual(backupColumnConfig.getColumnName(),columnConfig.getColumnName())) {
              columnConfig.setColumnBinning(backupColumnConfig.getColumnBinning());
            }
          }
        }
      }
      List<ColumnConfig> rebinColumns=new ArrayList<ColumnConfig>();
      List<String> catVariables=getStringList(this.params,Constants.REQUEST_VARS,""String_Node_Str"");
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CollectionUtils.isEmpty(catVariables) || isRequestColumn(catVariables,columnConfig)) {
          rebinColumns.add(columnConfig);
        }
      }
      if (CollectionUtils.isNotEmpty(rebinColumns)) {
        for (        ColumnConfig columnConfig : rebinColumns) {
          doReBin(columnConfig);
        }
      }
      saveColumnConfigList();
    }
 else {
      AbstractStatsExecutor statsExecutor=null;
      if (modelConfig.isMapReduceRunMode()) {
        if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
          statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
          statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
          statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
          statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
      }
 else       if (modelConfig.isLocalRunMode()) {
        statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
      }
 else {
        throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
      }
      statsExecutor.doStats();
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
      saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
    }
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}",0.9723327472934208
31611,"/** 
 * Scan the stats result and save them into column configure
 * @param scanner the scanners to be read
 */
private void scanStatsResult(Scanner scanner,int ccInitSize){
  while (scanner.hasNextLine()) {
    String[] raw=scanner.nextLine().trim().split(""String_Node_Str"");
    if (raw.length == 1) {
      continue;
    }
    if (raw.length < 25) {
      log.info(""String_Node_Str"" + raw.length + ""String_Node_Str"");
      log.info(""String_Node_Str"" + Arrays.toString(raw));
    }
    int columnNum=Integer.parseInt(raw[0]);
    int corrColumnNum=columnNum;
    if (columnNum >= ccInitSize) {
      corrColumnNum=columnNum % ccInitSize;
    }
    try {
      ColumnConfig basicConfig=this.columnConfigList.get(corrColumnNum);
      log.debug(""String_Node_Str"" + basicConfig.getColumnName() + ""String_Node_Str""+ corrColumnNum);
      ColumnConfig config=null;
      if (columnNum >= ccInitSize) {
        config=new ColumnConfig();
        config.setColumnNum(columnNum);
        config.setColumnName(basicConfig.getColumnName() + ""String_Node_Str"" + (columnNum / ccInitSize));
        config.setVersion(basicConfig.getVersion());
        config.setColumnType(basicConfig.getColumnType());
        config.setColumnFlag(basicConfig.getColumnFlag() == ColumnFlag.Target ? ColumnFlag.Meta : basicConfig.getColumnFlag());
        this.columnConfigList.add(config);
      }
 else {
        config=basicConfig;
      }
      if (config.isHybrid()) {
        String[] splits=CommonUtils.split(raw[1],Constants.HYBRID_BIN_STR_DILIMETER);
        config.setBinBoundary(CommonUtils.stringToDoubleList(splits[0]));
        String binCategory=Base64Utils.base64Decode(splits[1]);
        config.setBinCategory(CommonUtils.stringToStringList(binCategory,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR));
      }
 else       if (config.isCategorical()) {
        String binCategory=Base64Utils.base64Decode(raw[1]);
        config.setBinCategory(CommonUtils.stringToStringList(binCategory,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR));
        config.setBinBoundary(null);
      }
 else {
        config.setBinBoundary(CommonUtils.stringToDoubleList(raw[1]));
        config.setBinCategory(null);
      }
      config.setBinCountNeg(CommonUtils.stringToIntegerList(raw[2]));
      config.setBinCountPos(CommonUtils.stringToIntegerList(raw[3]));
      config.setBinPosCaseRate(CommonUtils.stringToDoubleList(raw[5]));
      config.setBinLength(config.getBinCountNeg().size());
      config.setKs(parseDouble(raw[6]));
      config.setIv(parseDouble(raw[7]));
      config.setMax(parseDouble(raw[8]));
      config.setMin(parseDouble(raw[9]));
      config.setMean(parseDouble(raw[10]));
      config.setStdDev(parseDouble(raw[11],Double.NaN));
      config.setColumnType(ColumnType.of(raw[12]));
      config.setMedian(parseDouble(raw[13]));
      config.setMissingCnt(parseLong(raw[14]));
      config.setTotalCount(parseLong(raw[15]));
      config.setMissingPercentage(parseDouble(raw[16]));
      config.setBinWeightedNeg(CommonUtils.stringToDoubleList(raw[17]));
      config.setBinWeightedPos(CommonUtils.stringToDoubleList(raw[18]));
      config.getColumnStats().setWoe(parseDouble(raw[19]));
      config.getColumnStats().setWeightedWoe(parseDouble(raw[20]));
      config.getColumnStats().setWeightedKs(parseDouble(raw[21]));
      config.getColumnStats().setWeightedIv(parseDouble(raw[22]));
      config.getColumnBinning().setBinCountWoe(CommonUtils.stringToDoubleList(raw[23]));
      config.getColumnBinning().setBinWeightedWoe(CommonUtils.stringToDoubleList(raw[24]));
      if (raw.length >= 26) {
        config.getColumnStats().setSkewness(parseDouble(raw[25]));
      }
      if (raw.length >= 27) {
        config.getColumnStats().setKurtosis(parseDouble(raw[26]));
      }
      if (raw.length >= 30) {
        config.getColumnStats().setValidNumCount(parseLong(raw[29]));
      }
      if (raw.length >= 31) {
        config.getColumnStats().setDistinctCount(parseLong(raw[30]));
      }
      if (raw.length >= 32) {
        if (raw[31] != null) {
          List<String> sampleValues=Arrays.asList(raw[31].split(""String_Node_Str""));
          config.setSampleValues(sampleValues);
        }
      }
      if (raw.length >= 33) {
        config.getColumnStats().set25th(parseDouble(raw[32]));
      }
      if (raw.length >= 34) {
        config.getColumnStats().set75th(parseDouble(raw[33]));
      }
    }
 catch (    Exception e) {
      log.error(String.format(""String_Node_Str"",columnNum,this.columnConfigList.get(corrColumnNum).getColumnName(),e.getMessage()),e);
      continue;
    }
  }
}","/** 
 * Scan the stats result and save them into column configure
 * @param scanner the scanners to be read
 */
private void scanStatsResult(Scanner scanner,int ccInitSize){
  while (scanner.hasNextLine()) {
    String[] raw=scanner.nextLine().trim().split(""String_Node_Str"");
    if (raw.length == 1) {
      continue;
    }
    if (raw.length < 25) {
      log.info(""String_Node_Str"" + raw.length + ""String_Node_Str"");
      log.info(""String_Node_Str"" + Arrays.toString(raw));
    }
    int columnNum=Integer.parseInt(raw[0]);
    int corrColumnNum=columnNum;
    if (columnNum >= ccInitSize) {
      corrColumnNum=columnNum % ccInitSize;
    }
    try {
      ColumnConfig basicConfig=this.columnConfigList.get(corrColumnNum);
      log.debug(""String_Node_Str"" + basicConfig.getColumnName() + ""String_Node_Str""+ corrColumnNum);
      ColumnConfig config=null;
      if (columnNum >= ccInitSize) {
        config=new ColumnConfig();
        config.setColumnNum(columnNum);
        config.setColumnName(basicConfig.getColumnName() + ""String_Node_Str"" + (columnNum / ccInitSize));
        config.setVersion(basicConfig.getVersion());
        config.setColumnType(basicConfig.getColumnType());
        config.setColumnFlag(basicConfig.getColumnFlag() == ColumnFlag.Target ? ColumnFlag.Meta : basicConfig.getColumnFlag());
        log.info(""String_Node_Str"" + basicConfig.getColumnName() + ""String_Node_Str""+ corrColumnNum+ ""String_Node_Str""+ columnNum+ ""String_Node_Str""+ config.getColumnType());
        this.columnConfigList.add(config);
      }
 else {
        config=basicConfig;
      }
      if (config.isHybrid()) {
        String[] splits=CommonUtils.split(raw[1],Constants.HYBRID_BIN_STR_DILIMETER);
        config.setBinBoundary(CommonUtils.stringToDoubleList(splits[0]));
        String binCategory=Base64Utils.base64Decode(splits[1]);
        config.setBinCategory(CommonUtils.stringToStringList(binCategory,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR));
      }
 else       if (config.isCategorical()) {
        String binCategory=Base64Utils.base64Decode(raw[1]);
        config.setBinCategory(CommonUtils.stringToStringList(binCategory,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR));
        config.setBinBoundary(null);
      }
 else {
        config.setBinBoundary(CommonUtils.stringToDoubleList(raw[1]));
        config.setBinCategory(null);
      }
      config.setBinCountNeg(CommonUtils.stringToIntegerList(raw[2]));
      config.setBinCountPos(CommonUtils.stringToIntegerList(raw[3]));
      config.setBinPosCaseRate(CommonUtils.stringToDoubleList(raw[5]));
      config.setBinLength(config.getBinCountNeg().size());
      config.setKs(parseDouble(raw[6]));
      config.setIv(parseDouble(raw[7]));
      config.setMax(parseDouble(raw[8]));
      config.setMin(parseDouble(raw[9]));
      config.setMean(parseDouble(raw[10]));
      config.setStdDev(parseDouble(raw[11],Double.NaN));
      config.setColumnType(ColumnType.of(raw[12]));
      config.setMedian(parseDouble(raw[13]));
      config.setMissingCnt(parseLong(raw[14]));
      config.setTotalCount(parseLong(raw[15]));
      config.setMissingPercentage(parseDouble(raw[16]));
      config.setBinWeightedNeg(CommonUtils.stringToDoubleList(raw[17]));
      config.setBinWeightedPos(CommonUtils.stringToDoubleList(raw[18]));
      config.getColumnStats().setWoe(parseDouble(raw[19]));
      config.getColumnStats().setWeightedWoe(parseDouble(raw[20]));
      config.getColumnStats().setWeightedKs(parseDouble(raw[21]));
      config.getColumnStats().setWeightedIv(parseDouble(raw[22]));
      config.getColumnBinning().setBinCountWoe(CommonUtils.stringToDoubleList(raw[23]));
      config.getColumnBinning().setBinWeightedWoe(CommonUtils.stringToDoubleList(raw[24]));
      if (raw.length >= 26) {
        config.getColumnStats().setSkewness(parseDouble(raw[25]));
      }
      if (raw.length >= 27) {
        config.getColumnStats().setKurtosis(parseDouble(raw[26]));
      }
      if (raw.length >= 30) {
        config.getColumnStats().setValidNumCount(parseLong(raw[29]));
      }
      if (raw.length >= 31) {
        config.getColumnStats().setDistinctCount(parseLong(raw[30]));
      }
      if (raw.length >= 32) {
        if (raw[31] != null) {
          List<String> sampleValues=Arrays.asList(raw[31].split(""String_Node_Str""));
          config.setSampleValues(sampleValues);
        }
      }
      if (raw.length >= 33) {
        config.getColumnStats().set25th(parseDouble(raw[32]));
      }
      if (raw.length >= 34) {
        config.getColumnStats().set75th(parseDouble(raw[33]));
      }
    }
 catch (    Exception e) {
      log.error(String.format(""String_Node_Str"",columnNum,this.columnConfigList.get(corrColumnNum).getColumnName(),e.getMessage()),e);
      continue;
    }
  }
}",0.9813253654892754
31612,"/** 
 * Update target, listMeta, listForceSelect, listForceRemove
 * @param modelConfig - ModelConfig
 * @param columnConfigList - ColumnConfig list to update
 * @param step - which step is running
 * @throws IOException - error occur, when create updater
 */
public static void updateColumnConfigFlags(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,ModelInspector.ModelStep step) throws IOException {
  BasicUpdater updater=BasicUpdater.getUpdater(modelConfig,step);
  for (  ColumnConfig config : columnConfigList) {
    updater.updateColumnConfig(config);
  }
}","/** 
 * Update target, listMeta, listForceSelect, listForceRemove
 * @param modelConfig - ModelConfig
 * @param columnConfigList - ColumnConfig list to update
 * @param step - which step is running
 * @param directVoidCall - if strictly to call VoidUpdater
 * @throws IOException - error occur, when create updater
 */
public static void updateColumnConfigFlags(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,ModelInspector.ModelStep step,boolean directVoidCall) throws IOException {
  BasicUpdater updater=null;
  if (directVoidCall) {
    updater=new VoidUpdater(modelConfig);
  }
 else {
    updater=BasicUpdater.getUpdater(modelConfig,step);
  }
  for (  ColumnConfig config : columnConfigList) {
    updater.updateColumnConfig(config);
  }
}",0.7050898203592815
31613,"private long computeDynamicCombineSize() throws IOException {
  int filePartCnt=ShifuFileUtils.getFilePartCount(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long actualFileSize=ShifuFileUtils.getFileOrDirectorySize(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  boolean isGzip=ShifuFileUtils.isPartFileAllGzip(this.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long avgFileSize=actualFileSize / filePartCnt;
  if (isGzip && filePartCnt <= 20) {
    return (long)(avgFileSize * 1.2d);
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  int candidateCount=inputOutputIndex[2];
  long maxCombineSize=CommonUtils.isTreeModel(modelConfig.getAlgorithm()) ? 209715200L : 168435456L;
  if (modelConfig.isClassification()) {
    return maxCombineSize;
  }
  double ratio=candidateCount / 600d;
  if (ratio > 2d) {
    ratio=0.85 * ratio;
  }
  long finalCombineSize=Double.valueOf((maxCombineSize * 1d * (ratio))).longValue();
  if (finalCombineSize != 0L && actualFileSize / finalCombineSize < 25) {
    finalCombineSize/=2;
  }
  return finalCombineSize;
}","private long computeDynamicCombineSize() throws IOException {
  String dataPath=null;
  if (CommonUtils.isTreeModel(super.modelConfig.getAlgorithm())) {
    dataPath=super.pathFinder.getCleanedDataPath();
  }
 else {
    dataPath=super.pathFinder.getNormalizedDataPath();
  }
  int filePartCnt=ShifuFileUtils.getFilePartCount(dataPath,SourceType.HDFS);
  long actualFileSize=ShifuFileUtils.getFileOrDirectorySize(dataPath,SourceType.HDFS);
  boolean isGzip=ShifuFileUtils.isPartFileAllGzip(dataPath,SourceType.HDFS);
  long avgFileSize=actualFileSize / filePartCnt;
  if (isGzip && filePartCnt <= 20) {
    return (long)(avgFileSize * 1.2d);
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  int candidateCount=inputOutputIndex[2];
  long maxCombineSize=CommonUtils.isTreeModel(modelConfig.getAlgorithm()) ? 209715200L : 168435456L;
  if (modelConfig.isClassification()) {
    return maxCombineSize;
  }
  double ratio=candidateCount / 600d;
  if (ratio > 2d) {
    ratio=0.85 * ratio;
  }
  long finalCombineSize=Double.valueOf((maxCombineSize * 1d * (ratio))).longValue();
  if (finalCombineSize != 0L && actualFileSize / finalCombineSize < 25) {
    finalCombineSize/=2;
  }
  return finalCombineSize;
}",0.8672927725602286
31614,"@Override public NNParams doCompute(WorkerContext<NNParams,NNParams> context){
  if (this.isDry || context.isFirstIteration()) {
    return buildEmptyNNParams(context);
  }
  if (context.getLastMasterResult() == null) {
    LOG.warn(""String_Node_Str"");
    return null;
  }
  LOG.debug(""String_Node_Str"",context.getLastMasterResult());
  double[] weights=context.getLastMasterResult().getWeights();
  if (gradient == null) {
    initGradient(this.trainingData,this.validationData,weights,this.isCrossOver);
    context.addCompletionCallBack(new WorkerCompletionCallBack<NNParams,NNParams>(){
      @Override public void callback(      WorkerContext<NNParams,NNParams> context){
        AbstractNNWorker.this.gradient.shutdown();
      }
    }
);
  }
 else {
    if (this.isCrossOver) {
      this.gradient.setSeed(System.currentTimeMillis());
    }
  }
  this.gradient.getNetwork().setWeights(weights);
  double[] gradients=null;
  for (int i=0; i < epochsPerIteration; i++) {
    gradients=this.gradient.computeGradients();
    if (this.epochsPerIteration > 1) {
      this.gradient.resetNetworkWeights();
    }
  }
  double trainError=this.gradient.getTrainError();
  long start=System.currentTimeMillis();
  double testError=this.validationData.getRecordCount() > 0 ? (this.gradient.calculateError()) : this.gradient.getTrainError();
  LOG.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  LOG.info(""String_Node_Str"",new Object[]{context.getCurrentIteration(),trainError,(this.validationData.getRecordCount() > 0 ? testError : ""String_Node_Str"")});
  NNParams params=new NNParams();
  params.setTestError(testError);
  params.setTrainError(trainError);
  params.setGradients(gradients);
  params.setWeights(new double[0]);
  params.setTrainSize(this.trainingData.getRecordCount());
  params.setCount(count);
  return params;
}","@Override public NNParams doCompute(WorkerContext<NNParams,NNParams> context){
  if (this.isDry || context.isFirstIteration()) {
    return buildEmptyNNParams(context);
  }
  if (context.getLastMasterResult() == null) {
    LOG.warn(""String_Node_Str"");
    return null;
  }
  LOG.debug(""String_Node_Str"",context.getLastMasterResult());
  double[] weights=context.getLastMasterResult().getWeights();
  if (gradient == null) {
    initGradient(this.trainingData,this.validationData,weights,this.isCrossOver);
    context.addCompletionCallBack(new WorkerCompletionCallBack<NNParams,NNParams>(){
      @Override public void callback(      WorkerContext<NNParams,NNParams> context){
        AbstractNNWorker.this.gradient.shutdown();
      }
    }
);
  }
 else {
    if (this.isCrossOver) {
      this.gradient.setSeed(System.currentTimeMillis());
    }
  }
  this.gradient.getNetwork().setWeights(weights);
  double[] gradients=null;
  for (int i=0; i < epochsPerIteration; i++) {
    gradients=this.gradient.computeGradients(context.getCurrentIteration());
    if (this.epochsPerIteration > 1) {
      this.gradient.resetNetworkWeights();
    }
  }
  double trainError=this.gradient.getTrainError();
  long start=System.currentTimeMillis();
  double testError=this.validationData.getRecordCount() > 0 ? (this.gradient.calculateError()) : this.gradient.getTrainError();
  LOG.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  LOG.info(""String_Node_Str"",new Object[]{context.getCurrentIteration(),trainError,(this.validationData.getRecordCount() > 0 ? testError : ""String_Node_Str"")});
  NNParams params=new NNParams();
  params.setTestError(testError);
  params.setTrainError(trainError);
  params.setGradients(gradients);
  params.setWeights(new double[0]);
  params.setTrainSize(this.trainingData.getRecordCount());
  params.setCount(count);
  return params;
}",0.9921938088829072
31615,"@SuppressWarnings(""String_Node_Str"") private void initGradient(FloatMLDataSet training,FloatMLDataSet testing,double[] weights,boolean isCrossOver){
  int numLayers=(Integer)this.validParams.get(CommonConstants.NUM_HIDDEN_LAYERS);
  List<String> actFunc=(List<String>)this.validParams.get(CommonConstants.ACTIVATION_FUNC);
  List<Integer> hiddenNodeList=(List<Integer>)this.validParams.get(CommonConstants.NUM_HIDDEN_NODES);
  BasicNetwork network=DTrainUtils.generateNetwork(this.featureInputsCnt,this.outputNodeCount,numLayers,actFunc,hiddenNodeList,false,this.dropoutRate,this.wgtInit);
  network.getFlat().setWeights(weights);
  FlatNetwork flat=network.getFlat();
  double[] flatSpot=new double[flat.getActivationFunctions().length];
  for (int i=0; i < flat.getActivationFunctions().length; i++) {
    flatSpot[i]=flat.getActivationFunctions()[i] instanceof ActivationSigmoid ? 0.1 : 0.0;
  }
  LOG.info(""String_Node_Str"",modelConfig.getTrain().getWorkerThreadCount());
  this.gradient=new ParallelGradient((FloatFlatNetwork)flat,training,testing,flatSpot,new LinearErrorFunction(),isCrossOver,modelConfig.getTrain().getWorkerThreadCount(),this.isELM,this.lossStr);
}","@SuppressWarnings(""String_Node_Str"") private void initGradient(FloatMLDataSet training,FloatMLDataSet testing,double[] weights,boolean isCrossOver){
  int numLayers=(Integer)this.validParams.get(CommonConstants.NUM_HIDDEN_LAYERS);
  List<String> actFunc=(List<String>)this.validParams.get(CommonConstants.ACTIVATION_FUNC);
  List<Integer> hiddenNodeList=(List<Integer>)this.validParams.get(CommonConstants.NUM_HIDDEN_NODES);
  BasicNetwork network=DTrainUtils.generateNetwork(this.featureInputsCnt,this.outputNodeCount,numLayers,actFunc,hiddenNodeList,false,this.dropoutRate,this.wgtInit);
  network.getFlat().setWeights(weights);
  FlatNetwork flat=network.getFlat();
  double[] flatSpot=new double[flat.getActivationFunctions().length];
  for (int i=0; i < flat.getActivationFunctions().length; i++) {
    flatSpot[i]=flat.getActivationFunctions()[i] instanceof ActivationSigmoid ? 0.1 : 0.0;
  }
  LOG.info(""String_Node_Str"",modelConfig.getTrain().getWorkerThreadCount());
  this.gradient=new ParallelGradient((FloatFlatNetwork)flat,training,testing,flatSpot,new LinearErrorFunction(),isCrossOver,modelConfig.getTrain().getWorkerThreadCount(),this.isELM,this.lossStr,this.batchs);
}",0.9949109414758268
31616,"@Override public void init(WorkerContext<NNParams,NNParams> context){
  this.props=context.getProps();
  loadConfigFiles(context.getProps());
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams(),modelConfig.getTrain().getGridConfigFileContent());
  this.validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    this.validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    LOG.info(""String_Node_Str"",kCrossValidation);
  }
  this.poissonSampler=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(NNConstants.NN_POISON_SAMPLER));
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0 && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()))) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  Integer epochsPerIterationInteger=this.modelConfig.getTrain().getEpochsPerIteration();
  this.epochsPerIteration=epochsPerIterationInteger == null ? 1 : epochsPerIterationInteger.intValue();
  LOG.info(""String_Node_Str"",epochsPerIteration);
  Object elmObject=validParams.get(DTrainUtils.IS_ELM);
  isELM=elmObject == null ? false : ""String_Node_Str"".equalsIgnoreCase(elmObject.toString());
  LOG.info(""String_Node_Str"",isELM);
  Object dropoutRateObj=validParams.get(CommonConstants.DROPOUT_RATE);
  if (dropoutRateObj != null) {
    this.dropoutRate=Double.valueOf(dropoutRateObj.toString());
  }
  LOG.info(""String_Node_Str"",this.dropoutRate);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[1] : (modelConfig.getTrain().isOneVsAll() ? inputOutputIndex[1] : modelConfig.getTags().size());
  this.candidateCount=inputOutputIndex[2];
  boolean isAfterVarSelect=inputOutputIndex[0] != 0;
  LOG.info(""String_Node_Str"",inputNodeCount,outputNodeCount,candidateCount);
  this.allFeatures=CommonUtils.getAllFeatureList(columnConfigList,isAfterVarSelect);
  String subsetStr=context.getProps().getProperty(CommonConstants.SHIFU_NN_FEATURE_SUBSET);
  if (StringUtils.isBlank(subsetStr)) {
    this.subFeatures=this.allFeatures;
  }
 else {
    String[] splits=subsetStr.split(""String_Node_Str"");
    this.subFeatures=new ArrayList<Integer>(splits.length);
    for (    String split : splits) {
      int featureIndex=Integer.parseInt(split);
      this.subFeatures.add(featureIndex);
    }
  }
  this.subFeatureSet=new HashSet<Integer>(this.subFeatures);
  LOG.info(""String_Node_Str"",subFeatures.size());
  this.featureInputsCnt=DTrainUtils.getFeatureInputsCnt(this.modelConfig,this.columnConfigList,this.subFeatureSet);
  this.wgtInit=""String_Node_Str"";
  Object wgtInitObj=validParams.get(""String_Node_Str"");
  if (wgtInitObj != null) {
    this.wgtInit=wgtInitObj.toString();
  }
  Object lossObj=validParams.get(""String_Node_Str"");
  this.lossStr=lossObj != null ? lossObj.toString() : ""String_Node_Str"";
  LOG.info(""String_Node_Str"",this.lossStr);
  this.isDry=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  this.isSpecificValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  if (isOnDisk()) {
    LOG.info(""String_Node_Str"");
    try {
      initDiskDataSet();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      @Override public void run(){
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
      }
    }
));
  }
 else {
    LOG.info(""String_Node_Str"");
    double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
    long memoryStoreSize=(long)(Runtime.getRuntime().maxMemory() * memoryFraction);
    LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
    double crossValidationRate=this.modelConfig.getValidSetRate();
    try {
      if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
        this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * 0.6),DTrainUtils.getTrainingFile().toString(),this.featureInputsCnt,this.outputNodeCount);
        this.validationData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * 0.4),DTrainUtils.getTestingFile().toString(),this.featureInputsCnt,this.outputNodeCount);
      }
 else {
        this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * (1 - crossValidationRate)),DTrainUtils.getTrainingFile().toString(),this.featureInputsCnt,this.outputNodeCount);
        this.validationData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * crossValidationRate),DTrainUtils.getTestingFile().toString(),this.featureInputsCnt,this.outputNodeCount);
      }
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
        }
      }
));
    }
 catch (    IOException e) {
      throw new GuaguaRuntimeException(e);
    }
  }
}","@Override public void init(WorkerContext<NNParams,NNParams> context){
  this.props=context.getProps();
  loadConfigFiles(context.getProps());
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams(),modelConfig.getTrain().getGridConfigFileContent());
  this.validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    this.validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    LOG.info(""String_Node_Str"",kCrossValidation);
  }
  this.poissonSampler=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(NNConstants.NN_POISON_SAMPLER));
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0 && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()))) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  Integer epochsPerIterationInteger=this.modelConfig.getTrain().getEpochsPerIteration();
  this.epochsPerIteration=epochsPerIterationInteger == null ? 1 : epochsPerIterationInteger.intValue();
  LOG.info(""String_Node_Str"",epochsPerIteration);
  Object elmObject=validParams.get(DTrainUtils.IS_ELM);
  isELM=elmObject == null ? false : ""String_Node_Str"".equalsIgnoreCase(elmObject.toString());
  LOG.info(""String_Node_Str"",isELM);
  Object dropoutRateObj=validParams.get(CommonConstants.DROPOUT_RATE);
  if (dropoutRateObj != null) {
    this.dropoutRate=Double.valueOf(dropoutRateObj.toString());
  }
  LOG.info(""String_Node_Str"",this.dropoutRate);
  Object miniBatchO=validParams.get(""String_Node_Str"");
  if (miniBatchO != null) {
    int miniBatchs;
    try {
      miniBatchs=Integer.parseInt(miniBatchO.toString());
    }
 catch (    Exception e) {
      miniBatchs=1;
    }
    if (miniBatchs < 0) {
      this.batchs=1;
    }
 else     if (miniBatchs > 1000) {
      this.batchs=1000;
    }
 else {
      this.batchs=miniBatchs;
    }
    LOG.info(""String_Node_Str"",miniBatchs,batchs);
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[1] : (modelConfig.getTrain().isOneVsAll() ? inputOutputIndex[1] : modelConfig.getTags().size());
  this.candidateCount=inputOutputIndex[2];
  boolean isAfterVarSelect=inputOutputIndex[0] != 0;
  LOG.info(""String_Node_Str"",inputNodeCount,outputNodeCount,candidateCount);
  this.allFeatures=CommonUtils.getAllFeatureList(columnConfigList,isAfterVarSelect);
  String subsetStr=context.getProps().getProperty(CommonConstants.SHIFU_NN_FEATURE_SUBSET);
  if (StringUtils.isBlank(subsetStr)) {
    this.subFeatures=this.allFeatures;
  }
 else {
    String[] splits=subsetStr.split(""String_Node_Str"");
    this.subFeatures=new ArrayList<Integer>(splits.length);
    for (    String split : splits) {
      int featureIndex=Integer.parseInt(split);
      this.subFeatures.add(featureIndex);
    }
  }
  this.subFeatureSet=new HashSet<Integer>(this.subFeatures);
  LOG.info(""String_Node_Str"",subFeatures.size());
  this.featureInputsCnt=DTrainUtils.getFeatureInputsCnt(this.modelConfig,this.columnConfigList,this.subFeatureSet);
  this.wgtInit=""String_Node_Str"";
  Object wgtInitObj=validParams.get(""String_Node_Str"");
  if (wgtInitObj != null) {
    this.wgtInit=wgtInitObj.toString();
  }
  Object lossObj=validParams.get(""String_Node_Str"");
  this.lossStr=lossObj != null ? lossObj.toString() : ""String_Node_Str"";
  LOG.info(""String_Node_Str"",this.lossStr);
  this.isDry=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  this.isSpecificValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  if (isOnDisk()) {
    LOG.info(""String_Node_Str"");
    try {
      initDiskDataSet();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      @Override public void run(){
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
      }
    }
));
  }
 else {
    LOG.info(""String_Node_Str"");
    double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
    long memoryStoreSize=(long)(Runtime.getRuntime().maxMemory() * memoryFraction);
    LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
    double crossValidationRate=this.modelConfig.getValidSetRate();
    try {
      if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
        this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * 0.6),DTrainUtils.getTrainingFile().toString(),this.featureInputsCnt,this.outputNodeCount);
        this.validationData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * 0.4),DTrainUtils.getTestingFile().toString(),this.featureInputsCnt,this.outputNodeCount);
      }
 else {
        this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * (1 - crossValidationRate)),DTrainUtils.getTrainingFile().toString(),this.featureInputsCnt,this.outputNodeCount);
        this.validationData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * crossValidationRate),DTrainUtils.getTestingFile().toString(),this.featureInputsCnt,this.outputNodeCount);
      }
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
        }
      }
));
    }
 catch (    IOException e) {
      throw new GuaguaRuntimeException(e);
    }
  }
}",0.9638418079096044
31617,"public ParallelGradient(final FloatFlatNetwork theNetwork,final FloatMLDataSet theTraining,final FloatMLDataSet theTesting,final double[] flatSpot,ErrorFunction ef,boolean isCrossOver,int threadCount,boolean isELM,String lossStr){
}","public ParallelGradient(final FloatFlatNetwork theNetwork,final FloatMLDataSet theTraining,final FloatMLDataSet theTesting,final double[] flatSpot,ErrorFunction ef,boolean isCrossOver,int threadCount,boolean isELM,String lossStr,int batchs){
}",0.9768421052631578
31618,"public double[] computeGradients(){
  CompletionService<double[]> completionService=new ExecutorCompletionService<double[]>(this.threadPool);
  this.subGradients=new SubGradient[this.threadCount];
  Random dropoutRandom=new Random();
  for (int i=0; i < this.threadCount; i++) {
    if (this.subGradients[i] == null) {
      this.subGradients[i]=new SubGradient(this.network.clone(),this.training,this.trainLows[i],this.trainHighs[i],this.testing,this.testLows[i],this.testHighs[i],this.flatSpot,this.isCrossOver,this,dropoutRandom);
    }
 else {
      this.subGradients[i].setNetwork(this.network.clone());
    }
    this.subGradients[i].setSeed(this.getSeed());
    completionService.submit(this.subGradients[i]);
  }
  int rCnt=0;
  double[] finalGradients=new double[this.getNetwork().getWeights().length];
  while (rCnt < this.threadCount) {
    double[] gradients=null;
    try {
      gradients=completionService.take().get();
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    for (int i=0; i < finalGradients.length; i++) {
      finalGradients[i]+=gradients[i];
    }
    rCnt+=1;
  }
  double errorSum=0d;
  for (int i=0; i < this.threadCount; i++) {
    errorSum+=this.subGradients[i].getError() * (trainHighs[i] - trainLows[i] + 1) * this.getNetwork().getOutputCount();
  }
  this.trainError=errorSum / (this.training.getRecordCount() * this.getNetwork().getOutputCount());
  return finalGradients;
}","public double[] computeGradients(int currentIteration){
  CompletionService<double[]> completionService=new ExecutorCompletionService<double[]>(this.threadPool);
  this.subGradients=new SubGradient[this.threadCount];
  Random dropoutRandom=new Random();
  for (int i=0; i < this.threadCount; i++) {
    if (this.subGradients[i] == null) {
      this.subGradients[i]=new SubGradient(this.network.clone(),this.training,this.trainLows[i],this.trainHighs[i],this.testing,this.testLows[i],this.testHighs[i],this.flatSpot,this.isCrossOver,this,dropoutRandom,this.batchs,currentIteration);
    }
 else {
      this.subGradients[i].setNetwork(this.network.clone());
    }
    this.subGradients[i].setSeed(this.getSeed());
    completionService.submit(this.subGradients[i]);
  }
  int rCnt=0;
  double[] finalGradients=new double[this.getNetwork().getWeights().length];
  while (rCnt < this.threadCount) {
    double[] gradients=null;
    try {
      gradients=completionService.take().get();
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    for (int i=0; i < finalGradients.length; i++) {
      finalGradients[i]+=gradients[i];
    }
    rCnt+=1;
  }
  double errorSum=0d;
  for (int i=0; i < this.threadCount; i++) {
    errorSum+=this.subGradients[i].getError() * (trainHighs[i] - trainLows[i] + 1) * this.getNetwork().getOutputCount();
  }
  this.trainError=errorSum / (this.training.getRecordCount() * this.getNetwork().getOutputCount());
  return finalGradients;
}",0.984309958373359
31619,"public SubGradient(final FloatFlatNetwork theNetwork,final FloatMLDataSet theTraining,long trainLow,long trainHigh,final FloatMLDataSet theTesting,long testLow,long testHigh,final double[] flatSpot,boolean isCrossOver,ParallelGradient owner,Random dropoutRandomSource){
  this.network=theNetwork;
  this.training=theTraining;
  this.trainLow=trainLow;
  this.trainHigh=trainHigh;
  this.testing=theTesting;
  this.testLow=testLow;
  this.testHigh=testHigh;
  this.isCrossOver=isCrossOver;
  this.flatSpot=flatSpot;
  this.owner=owner;
  this.errorFunction=this.owner.createEFInstance();
  this.layerDropoutRates=theNetwork.getLayerDropoutRates();
  this.dropoutRandomSource=dropoutRandomSource;
  this.initNetworkParams();
  this.errorCalculation=this.owner.createECInstance();
}","public SubGradient(final FloatFlatNetwork theNetwork,final FloatMLDataSet theTraining,long trainLow,long trainHigh,final FloatMLDataSet theTesting,long testLow,long testHigh,final double[] flatSpot,boolean isCrossOver,ParallelGradient owner,Random dropoutRandomSource,int batchs,int currentInteration){
  this.network=theNetwork;
  this.training=theTraining;
  this.trainLow=trainLow;
  this.trainHigh=trainHigh;
  this.testing=theTesting;
  this.testLow=testLow;
  this.testHigh=testHigh;
  this.isCrossOver=isCrossOver;
  this.flatSpot=flatSpot;
  this.owner=owner;
  this.errorFunction=this.owner.createEFInstance();
  this.layerDropoutRates=theNetwork.getLayerDropoutRates();
  this.dropoutRandomSource=dropoutRandomSource;
  this.initNetworkParams();
  this.errorCalculation=this.owner.createECInstance();
  this.batchs=batchs;
  this.currentIteration=currentInteration;
}",0.9408212560386472
31620,"/** 
 * Perform the gradient calculation
 */
public final double[] call(){
  try {
    this.errorCalculation.reset();
    Arrays.fill(this.gradients,0.0);
    for (long i=this.trainLow; i <= this.trainHigh; i++) {
synchronized (this.owner) {
        if (this.isCrossOver) {
          if ((i + seed) % 4 < 3) {
            this.training.getRecord(i,this.pair);
          }
 else {
            long testingSize=this.testing.getRecordCount();
            if (i < testingSize) {
              this.testing.getRecord(i,this.pair);
            }
 else {
              this.testing.getRecord(i % testingSize,this.pair);
            }
          }
        }
 else {
          this.training.getRecord(i,this.pair);
        }
      }
      process(this.pair.getInputArray(),this.pair.getIdealArray(),pair.getSignificance());
    }
    this.error=this.errorCalculation.calculate();
  }
 catch (  final Throwable ex) {
    throw new RuntimeException(ex);
  }
  return this.gradients;
}","/** 
 * Perform the gradient calculation
 */
@Override public final double[] call(){
  try {
    this.errorCalculation.reset();
    Arrays.fill(this.gradients,0.0);
    long start=this.trainLow;
    long end=this.trainHigh;
    if (this.batchs > 1) {
      long currentBatch=(currentIteration - 2) % this.batchs;
      long recordsInBatch=(this.trainHigh - this.trainLow + 1) / this.batchs;
      if (currentBatch == this.batchs - 1) {
        start=this.trainLow + recordsInBatch * currentBatch;
        end=this.trainHigh;
      }
 else {
        start=this.trainLow + recordsInBatch * currentBatch;
        end=this.trainLow + recordsInBatch * (currentBatch + 1) - 1;
      }
      LOG.debug(""String_Node_Str"",Thread.currentThread().getName(),trainLow,trainHigh,currentIteration,batchs,currentBatch,start,end);
    }
    for (long i=start; i <= end; i++) {
synchronized (this.owner) {
        if (this.isCrossOver) {
          if ((i + seed) % 4 < 3) {
            this.training.getRecord(i,this.pair);
          }
 else {
            long testingSize=this.testing.getRecordCount();
            if (i < testingSize) {
              this.testing.getRecord(i,this.pair);
            }
 else {
              this.testing.getRecord(i % testingSize,this.pair);
            }
          }
        }
 else {
          this.training.getRecord(i,this.pair);
        }
      }
      process(this.pair.getInputArray(),this.pair.getIdealArray(),pair.getSignificance());
    }
    this.error=this.errorCalculation.calculate();
  }
 catch (  final Throwable ex) {
    throw new RuntimeException(ex);
  }
  return this.gradients;
}",0.7320463320463321
31621,"public void generateHtml4PrAndRoc(EvalConfig evalConfig,ModelConfig modelConfig,String fileName,List<PerformanceResult> results,List<String> names) throws IOException {
  BufferedWriter writer=null;
  try {
    writer=ShifuFileUtils.getWriter(fileName,SourceType.LOCAL);
    writer.write(GainChartTemplate.HIGHCHART_BASE_BEGIN);
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + j + ""String_Node_Str"");
      for (int i=0; i < result.weightedPr.size(); i++) {
        PerformanceObject po=result.weightedPr.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedPr.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.weightedPr.size(); i++) {
        PerformanceObject po=result.weightedPr.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedPr.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (2 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.pr.size(); i++) {
        PerformanceObject po=result.pr.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.pr.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (3 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.pr.size(); i++) {
        PerformanceObject po=result.pr.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.pr.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (4 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.weightedRoc.size(); i++) {
        PerformanceObject po=result.weightedRoc.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedRoc.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (5 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.weightedRoc.size(); i++) {
        PerformanceObject po=result.weightedRoc.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedRoc.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (6 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.roc.size(); i++) {
        PerformanceObject po=result.roc.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.roc.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (7 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.roc.size(); i++) {
        PerformanceObject po=result.roc.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.roc.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    int currIndex=0;
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(GainChartTemplate.HIGHCHART_BASE_END);
  }
  finally {
    if (writer != null) {
      writer.close();
    }
  }
}","public void generateHtml4PrAndRoc(EvalConfig evalConfig,ModelConfig modelConfig,String fileName,List<PerformanceResult> results,List<String> names) throws IOException {
  BufferedWriter writer=null;
  try {
    writer=ShifuFileUtils.getWriter(fileName,SourceType.LOCAL);
    writer.write(GainChartTemplate.HIGHCHART_BASE_BEGIN);
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + j + ""String_Node_Str"");
      for (int i=0; i < result.weightedPr.size(); i++) {
        PerformanceObject po=result.weightedPr.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedPr.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.weightedPr.size(); i++) {
        PerformanceObject po=result.weightedPr.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedPr.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (2 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.pr.size(); i++) {
        PerformanceObject po=result.pr.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.pr.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (3 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.pr.size(); i++) {
        PerformanceObject po=result.pr.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.pr.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (4 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.weightedRoc.size(); i++) {
        PerformanceObject po=result.weightedRoc.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedRoc.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (5 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.weightedRoc.size(); i++) {
        PerformanceObject po=result.weightedRoc.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.weightedFpr * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedRoc.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (6 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.roc.size(); i++) {
        PerformanceObject po=result.roc.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.roc.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (7 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.roc.size(); i++) {
        PerformanceObject po=result.roc.get(i);
        writer.write(String.format(GainChartTemplate.PRROC_DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.fpr * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.roc.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    int currIndex=0;
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX3,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(GainChartTemplate.HIGHCHART_BASE_END);
  }
  finally {
    if (writer != null) {
      writer.close();
    }
  }
}",0.9971785570334544
31622,"/** 
 * Check the setting for model training. It will make sure (num_of_layers > 0 && num_of_layers = hidden_nodes_size && num_of_layse = active_func_size)
 * @param train - @ModelTrainConf to check
 * @return @ValidateResult
 */
@SuppressWarnings(""String_Node_Str"") private ValidateResult checkTrainSetting(ModelConfig modelConfig,ModelTrainConf train){
  ValidateResult result=new ValidateResult(true);
  if (train.getBaggingNum() == null || train.getBaggingNum() < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumKFold() != null && train.getNumKFold() > 20) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getBaggingSampleRate() == null || train.getBaggingSampleRate().compareTo(Double.valueOf(0)) <= 0 || train.getBaggingSampleRate().compareTo(Double.valueOf(1)) > 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getValidSetRate() == null || train.getValidSetRate().compareTo(Double.valueOf(0)) < 0 || train.getValidSetRate().compareTo(Double.valueOf(1)) >= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumTrainEpochs() == null || train.getNumTrainEpochs() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getEpochsPerIteration() != null && train.getEpochsPerIteration() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getWorkerThreadCount() != null && (train.getWorkerThreadCount() <= 0 || train.getWorkerThreadCount() > 32)) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getConvergenceThreshold() != null && train.getConvergenceThreshold().compareTo(0.0) < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.isOneVsAll() && !CommonUtils.isTreeModel(train.getAlgorithm())&& !train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.getMultiClassifyMethod() == MultipleClassification.NATIVE && train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
    Object impurity=train.getParams().get(""String_Node_Str"");
    if (impurity != null && !""String_Node_Str"".equalsIgnoreCase(impurity.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurity.toString())) {
      ValidateResult tmpResult=new ValidateResult(true);
      tmpResult.setStatus(false);
      tmpResult.getCauses().add(""String_Node_Str"");
      result=ValidateResult.mergeResult(result,tmpResult);
    }
  }
  GridSearch gs=new GridSearch(train.getParams(),train.getGridConfigFileContent());
  if (modelConfig.isRegression() && !gs.hasHyperParam()) {
    if (train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
      Map<String,Object> params=train.getParams();
      Object loss=params.get(""String_Node_Str"");
      if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      int layerCnt=(Integer)params.get(CommonConstants.NUM_HIDDEN_LAYERS);
      if (layerCnt < 0) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      List<Integer> hiddenNode=(List<Integer>)params.get(CommonConstants.NUM_HIDDEN_NODES);
      List<String> activateFucs=(List<String>)params.get(CommonConstants.ACTIVATION_FUNC);
      if (hiddenNode.size() != activateFucs.size() || layerCnt != activateFucs.size()) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(CommonConstants.NUM_HIDDEN_LAYERS + ""String_Node_Str"" + CommonConstants.NUM_HIDDEN_NODES+ ""String_Node_Str""+ ""String_Node_Str""+ CommonConstants.ACTIVATION_FUNC+ ""String_Node_Str""+ ""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Double learningRate=Double.valueOf(params.get(CommonConstants.LEARNING_RATE).toString());
      if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object learningDecayO=params.get(""String_Node_Str"");
      if (learningDecayO != null) {
        Double learningDecay=Double.valueOf(learningDecayO.toString());
        if (learningDecay != null && ((learningDecay.compareTo(Double.valueOf(0)) < 0) || (learningDecay.compareTo(Double.valueOf(1)) >= 0))) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object elmObject=params.get(DTrainUtils.IS_ELM);
      boolean isELM=elmObject == null ? false : ""String_Node_Str"".equalsIgnoreCase(elmObject.toString());
      if (isELM && layerCnt != 1) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      Object fssObj=params.get(""String_Node_Str"");
      if (fssObj == null) {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        boolean isNumber=false;
        double doubleFss=0;
        try {
          doubleFss=Double.parseDouble(fssObj.toString());
          isNumber=true;
        }
 catch (        Exception e) {
          isNumber=false;
        }
        if (isNumber && (doubleFss <= 0d || doubleFss > 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
        }
 else {
          boolean fssInEnum=false;
          for (          FeatureSubsetStrategy fss : FeatureSubsetStrategy.values()) {
            if (fss.toString().equalsIgnoreCase(fssObj.toString())) {
              fssInEnum=true;
              break;
            }
          }
          if (!fssInEnum) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
          }
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object loss=params.get(""String_Node_Str"");
        if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
        if (loss == null) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxDepthObj=params.get(""String_Node_Str"");
      if (maxDepthObj != null) {
        int maxDepth=Integer.valueOf(maxDepthObj.toString());
        if (maxDepth <= 0 || maxDepth > 20) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object vtObj=params.get(""String_Node_Str"");
      if (vtObj != null) {
        double validationTolerance=Double.valueOf(vtObj.toString());
        if (validationTolerance < 0d || validationTolerance >= 1d) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxLeavesObj=params.get(""String_Node_Str"");
      if (maxLeavesObj != null) {
        int maxLeaves=Integer.valueOf(maxLeavesObj.toString());
        if (maxLeaves <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (maxDepthObj == null && maxLeavesObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object maxStatsMemoryMBObj=params.get(""String_Node_Str"");
      if (maxStatsMemoryMBObj != null) {
        int maxStatsMemoryMB=Integer.valueOf(maxStatsMemoryMBObj.toString());
        if (maxStatsMemoryMB <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object learningRateObj=params.get(CommonConstants.LEARNING_RATE);
        if (learningRateObj != null) {
          Double learningRate=Double.valueOf(learningRateObj.toString());
          if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
 else {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object minInstancesPerNodeObj=params.get(""String_Node_Str"");
      if (minInstancesPerNodeObj != null) {
        int minInstancesPerNode=Integer.valueOf(minInstancesPerNodeObj.toString());
        if (minInstancesPerNode <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object treeNumObj=params.get(""String_Node_Str"");
      if (treeNumObj != null) {
        int treeNum=Integer.valueOf(treeNumObj.toString());
        if (treeNum <= 0 || treeNum > 10000) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object minInfoGainObj=params.get(""String_Node_Str"");
      if (minInfoGainObj != null) {
        Double minInfoGain=Double.valueOf(minInfoGainObj.toString());
        if (minInfoGain != null && (minInfoGain.compareTo(Double.valueOf(0)) < 0)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object impurityObj=params.get(""String_Node_Str"");
      if (impurityObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
 else {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
      }
    }
  }
  return result;
}","/** 
 * Check the setting for model training. It will make sure (num_of_layers > 0 && num_of_layers = hidden_nodes_size && num_of_layse = active_func_size)
 * @param train - @ModelTrainConf to check
 * @return @ValidateResult
 */
@SuppressWarnings(""String_Node_Str"") private ValidateResult checkTrainSetting(ModelConfig modelConfig,ModelTrainConf train){
  ValidateResult result=new ValidateResult(true);
  if (train.getBaggingNum() == null || train.getBaggingNum() < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumKFold() != null && train.getNumKFold() > 20) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getBaggingSampleRate() == null || train.getBaggingSampleRate().compareTo(Double.valueOf(0)) <= 0 || train.getBaggingSampleRate().compareTo(Double.valueOf(1)) > 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getValidSetRate() == null || train.getValidSetRate().compareTo(Double.valueOf(0)) < 0 || train.getValidSetRate().compareTo(Double.valueOf(1)) >= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumTrainEpochs() == null || train.getNumTrainEpochs() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getEpochsPerIteration() != null && train.getEpochsPerIteration() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getWorkerThreadCount() != null && (train.getWorkerThreadCount() <= 0 || train.getWorkerThreadCount() > 32)) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getConvergenceThreshold() != null && train.getConvergenceThreshold().compareTo(0.0) < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.isOneVsAll() && !CommonUtils.isTreeModel(train.getAlgorithm())&& !train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.getMultiClassifyMethod() == MultipleClassification.NATIVE && train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
    Object impurity=train.getParams().get(""String_Node_Str"");
    if (impurity != null && !""String_Node_Str"".equalsIgnoreCase(impurity.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurity.toString())) {
      ValidateResult tmpResult=new ValidateResult(true);
      tmpResult.setStatus(false);
      tmpResult.getCauses().add(""String_Node_Str"");
      result=ValidateResult.mergeResult(result,tmpResult);
    }
  }
  GridSearch gs=new GridSearch(train.getParams(),train.getGridConfigFileContent());
  if (modelConfig.isRegression() && !gs.hasHyperParam()) {
    if (train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
      Map<String,Object> params=train.getParams();
      Object loss=params.get(""String_Node_Str"");
      if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      int layerCnt=(Integer)params.get(CommonConstants.NUM_HIDDEN_LAYERS);
      if (layerCnt < 0) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      List<Integer> hiddenNode=(List<Integer>)params.get(CommonConstants.NUM_HIDDEN_NODES);
      List<String> activateFucs=(List<String>)params.get(CommonConstants.ACTIVATION_FUNC);
      if (hiddenNode.size() != activateFucs.size() || layerCnt != activateFucs.size()) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(CommonConstants.NUM_HIDDEN_LAYERS + ""String_Node_Str"" + CommonConstants.NUM_HIDDEN_NODES+ ""String_Node_Str""+ ""String_Node_Str""+ CommonConstants.ACTIVATION_FUNC+ ""String_Node_Str""+ ""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Double learningRate=Double.valueOf(params.get(CommonConstants.LEARNING_RATE).toString());
      if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object learningDecayO=params.get(""String_Node_Str"");
      if (learningDecayO != null) {
        Double learningDecay=Double.valueOf(learningDecayO.toString());
        if (learningDecay != null && ((learningDecay.compareTo(Double.valueOf(0)) < 0) || (learningDecay.compareTo(Double.valueOf(1)) >= 0))) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object elmObject=params.get(DTrainUtils.IS_ELM);
      boolean isELM=elmObject == null ? false : ""String_Node_Str"".equalsIgnoreCase(elmObject.toString());
      if (isELM && layerCnt != 1) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object miniBatchsO=params.get(""String_Node_Str"");
      if (miniBatchsO != null) {
        Integer miniBatchs=Integer.valueOf(miniBatchsO.toString());
        if (miniBatchs != null && (miniBatchs <= 0 || miniBatchs > 1000)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object momentumO=params.get(""String_Node_Str"");
      if (momentumO != null) {
        Double momentum=Double.valueOf(momentumO.toString());
        if (momentum != null && momentum <= 0d) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object adamBeta1O=params.get(""String_Node_Str"");
      if (adamBeta1O != null) {
        Double adamBeta1=Double.valueOf(adamBeta1O.toString());
        if (adamBeta1 != null && (adamBeta1 <= 0d || adamBeta1 >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object adamBeta2O=params.get(""String_Node_Str"");
      if (adamBeta2O != null) {
        Double adamBeta2=Double.valueOf(adamBeta2O.toString());
        if (adamBeta2 != null && (adamBeta2 <= 0d || adamBeta2 >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      Object fssObj=params.get(""String_Node_Str"");
      if (fssObj == null) {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        boolean isNumber=false;
        double doubleFss=0;
        try {
          doubleFss=Double.parseDouble(fssObj.toString());
          isNumber=true;
        }
 catch (        Exception e) {
          isNumber=false;
        }
        if (isNumber && (doubleFss <= 0d || doubleFss > 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
        }
 else {
          boolean fssInEnum=false;
          for (          FeatureSubsetStrategy fss : FeatureSubsetStrategy.values()) {
            if (fss.toString().equalsIgnoreCase(fssObj.toString())) {
              fssInEnum=true;
              break;
            }
          }
          if (!fssInEnum) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
          }
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object loss=params.get(""String_Node_Str"");
        if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
        if (loss == null) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxDepthObj=params.get(""String_Node_Str"");
      if (maxDepthObj != null) {
        int maxDepth=Integer.valueOf(maxDepthObj.toString());
        if (maxDepth <= 0 || maxDepth > 20) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object vtObj=params.get(""String_Node_Str"");
      if (vtObj != null) {
        double validationTolerance=Double.valueOf(vtObj.toString());
        if (validationTolerance < 0d || validationTolerance >= 1d) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxLeavesObj=params.get(""String_Node_Str"");
      if (maxLeavesObj != null) {
        int maxLeaves=Integer.valueOf(maxLeavesObj.toString());
        if (maxLeaves <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (maxDepthObj == null && maxLeavesObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object maxStatsMemoryMBObj=params.get(""String_Node_Str"");
      if (maxStatsMemoryMBObj != null) {
        int maxStatsMemoryMB=Integer.valueOf(maxStatsMemoryMBObj.toString());
        if (maxStatsMemoryMB <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object learningRateObj=params.get(CommonConstants.LEARNING_RATE);
        if (learningRateObj != null) {
          Double learningRate=Double.valueOf(learningRateObj.toString());
          if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
 else {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object minInstancesPerNodeObj=params.get(""String_Node_Str"");
      if (minInstancesPerNodeObj != null) {
        int minInstancesPerNode=Integer.valueOf(minInstancesPerNodeObj.toString());
        if (minInstancesPerNode <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object treeNumObj=params.get(""String_Node_Str"");
      if (treeNumObj != null) {
        int treeNum=Integer.valueOf(treeNumObj.toString());
        if (treeNum <= 0 || treeNum > 10000) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object minInfoGainObj=params.get(""String_Node_Str"");
      if (minInfoGainObj != null) {
        Double minInfoGain=Double.valueOf(minInfoGainObj.toString());
        if (minInfoGain != null && (minInfoGain.compareTo(Double.valueOf(0)) < 0)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object impurityObj=params.get(""String_Node_Str"");
      if (impurityObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
 else {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
      }
    }
  }
  return result;
}",0.9492818171695804
31623,"@Override protected void reduce(IntWritable key,Iterable<CorrelationWritable> values,Context context) throws IOException, InterruptedException {
  CorrelationWritable finalCw=initCw();
  Iterator<CorrelationWritable> cwIt=values.iterator();
  while (cwIt.hasNext()) {
    CorrelationWritable cw=cwIt.next();
    finalCw.setColumnIndex(cw.getColumnIndex());
    finalCw.combine(cw);
  }
  this.outputKey.set(key.get());
  this.outputValue.set(new String(Base64.encodeBase64(objectToBytes(finalCw)),""String_Node_Str""));
  context.write(outputKey,outputValue);
}","@Override protected void reduce(IntWritable key,Iterable<CorrelationWritable> values,Context context) throws IOException, InterruptedException {
  CorrelationWritable finalCw=null;
  Iterator<CorrelationWritable> cwIt=values.iterator();
  while (cwIt.hasNext()) {
    CorrelationWritable cw=cwIt.next();
    if (finalCw == null) {
      finalCw=initCw(cw.getAdjustCount().length);
    }
    finalCw.setColumnIndex(cw.getColumnIndex());
    finalCw.combine(cw);
  }
  this.outputKey.set(key.get());
  this.outputValue.set(new String(Base64.encodeBase64(objectToBytes(finalCw)),""String_Node_Str""));
  context.write(outputKey,outputValue);
}",0.9206349206349206
31624,"private CorrelationWritable initCw(){
  CorrelationWritable finalCw=new CorrelationWritable();
  double[] xySum=new double[this.columnConfigList.size()];
  finalCw.setXySum(xySum);
  double[] xxSum=new double[this.columnConfigList.size()];
  finalCw.setXxSum(xxSum);
  double[] yySum=new double[this.columnConfigList.size()];
  finalCw.setYySum(yySum);
  double[] adjustCount=new double[this.columnConfigList.size()];
  finalCw.setAdjustCount(adjustCount);
  double[] adjustSumX=new double[this.columnConfigList.size()];
  finalCw.setAdjustSumX(adjustSumX);
  double[] adjustSumY=new double[this.columnConfigList.size()];
  finalCw.setAdjustSumY(adjustSumY);
  return finalCw;
}","private CorrelationWritable initCw(int statsCnt){
  CorrelationWritable finalCw=new CorrelationWritable();
  double[] xySum=new double[statsCnt];
  finalCw.setXySum(xySum);
  double[] xxSum=new double[statsCnt];
  finalCw.setXxSum(xxSum);
  double[] yySum=new double[statsCnt];
  finalCw.setYySum(yySum);
  double[] adjustCount=new double[statsCnt];
  finalCw.setAdjustCount(adjustCount);
  double[] adjustSumX=new double[statsCnt];
  finalCw.setAdjustSumX(adjustSumX);
  double[] adjustSumY=new double[statsCnt];
  finalCw.setAdjustSumY(adjustSumY);
  return finalCw;
}",0.2868589743589743
31625,"private void loadConfigFiles(final Context context){
  try {
    SourceType sourceType=SourceType.valueOf(context.getConfiguration().get(Constants.SHIFU_MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.columnConfigList=CommonUtils.loadColumnConfigList(context.getConfiguration().get(Constants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private void loadConfigFiles(final Context context){
  try {
    SourceType sourceType=SourceType.valueOf(context.getConfiguration().get(Constants.SHIFU_MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.columnConfigList=CommonUtils.loadColumnConfigList(context.getConfiguration().get(Constants.SHIFU_COLUMN_CONFIG),sourceType);
    this.hasCandidates=CommonUtils.hasCandidateColumns(this.columnConfigList);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9119286510590858
31626,"@SuppressWarnings(""String_Node_Str"") private static Options buildModelSetOptions(String[] args){
  Options opts=new Options();
  Option opt_cmt=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_M);
  Option opt_new=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(NEW);
  Option opt_type=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_TYPE);
  Option opt_run=OptionBuilder.hasOptionalArg().withDescription(""String_Node_Str"").create(EVAL_CMD_RUN);
  Option opt_dry=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DRY);
  Option opt_debug=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DEBUG);
  Option opt_model=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(INIT_CMD_MODEL);
  Option opt_concise=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(EXPORT_CONCISE);
  Option opt_reset=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESET);
  Option opt_correlation=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(CORRELATION);
  Option opt_correlation_short=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option opt_shuffle=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SHUFFLE);
  Option opt_resume=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESUME);
  Option opt_list=OptionBuilder.hasArg(false).create(LIST);
  Option opt_delete=OptionBuilder.hasArg().create(DELETE);
  Option opt_score=OptionBuilder.hasArg().create(SCORE);
  Option opt_confmat=OptionBuilder.hasArg().create(CONFMAT);
  Option opt_perf=OptionBuilder.hasArg().create(PERF);
  Option opt_norm=OptionBuilder.hasArg().create(NORM);
  Option opt_eval=OptionBuilder.hasArg(false).create(EVAL_CMD);
  Option opt_init=OptionBuilder.hasArg(false).create(INIT_CMD);
  Option opt_rebin=OptionBuilder.hasArg(false).create(REBIN);
  Option opt_vars=OptionBuilder.hasArg().create(VARS);
  Option opt_n=OptionBuilder.hasArg().create(N);
  Option opt_ivr=OptionBuilder.hasArg().create(IVR);
  Option opt_bic=OptionBuilder.hasArg().create(BIC);
  Option opt_save=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SAVE);
  Option opt_switch=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SWITCH);
  Option opt_eval_model=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(EVAL_MODEL);
  opts.addOption(opt_cmt);
  opts.addOption(opt_new);
  opts.addOption(opt_type);
  opts.addOption(opt_run);
  opts.addOption(opt_perf);
  opts.addOption(opt_norm);
  opts.addOption(opt_dry);
  opts.addOption(opt_debug);
  opts.addOption(opt_model);
  opts.addOption(opt_concise);
  opts.addOption(opt_reset);
  opts.addOption(opt_eval);
  opts.addOption(opt_init);
  opts.addOption(opt_shuffle);
  opts.addOption(opt_resume);
  opts.addOption(opt_list);
  opts.addOption(opt_delete);
  opts.addOption(opt_score);
  opts.addOption(opt_confmat);
  opts.addOption(opt_save);
  opts.addOption(opt_switch);
  opts.addOption(opt_eval_model);
  opts.addOption(opt_correlation);
  opts.addOption(opt_correlation_short);
  opts.addOption(opt_rebin);
  opts.addOption(opt_vars);
  opts.addOption(opt_n);
  opts.addOption(opt_ivr);
  opts.addOption(opt_bic);
  return opts;
}","@SuppressWarnings(""String_Node_Str"") private static Options buildModelSetOptions(String[] args){
  Options opts=new Options();
  Option opt_cmt=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_M);
  Option opt_new=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(NEW);
  Option opt_type=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_TYPE);
  Option opt_run=OptionBuilder.hasOptionalArg().withDescription(""String_Node_Str"").create(EVAL_CMD_RUN);
  Option opt_dry=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DRY);
  Option opt_debug=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DEBUG);
  Option opt_model=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(INIT_CMD_MODEL);
  Option opt_concise=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(EXPORT_CONCISE);
  Option opt_reset=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESET);
  Option opt_correlation=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(CORRELATION);
  Option opt_correlation_short=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option opt_shuffle=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SHUFFLE);
  Option opt_resume=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESUME);
  Option opt_list=OptionBuilder.hasArg(false).create(LIST);
  Option opt_delete=OptionBuilder.hasArg().create(DELETE);
  Option opt_score=OptionBuilder.hasOptionalArg().create(SCORE);
  Option opt_confmat=OptionBuilder.hasArg().create(CONFMAT);
  Option opt_perf=OptionBuilder.hasArg().create(PERF);
  Option opt_norm=OptionBuilder.hasArg().create(NORM);
  Option opt_eval=OptionBuilder.hasArg(false).create(EVAL_CMD);
  Option opt_init=OptionBuilder.hasArg(false).create(INIT_CMD);
  Option opt_rebin=OptionBuilder.hasArg(false).create(REBIN);
  Option opt_vars=OptionBuilder.hasArg().create(VARS);
  Option opt_n=OptionBuilder.hasArg().create(N);
  Option opt_ivr=OptionBuilder.hasArg().create(IVR);
  Option opt_bic=OptionBuilder.hasArg().create(BIC);
  Option opt_save=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SAVE);
  Option opt_switch=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SWITCH);
  Option opt_eval_model=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(EVAL_MODEL);
  opts.addOption(opt_cmt);
  opts.addOption(opt_new);
  opts.addOption(opt_type);
  opts.addOption(opt_run);
  opts.addOption(opt_perf);
  opts.addOption(opt_norm);
  opts.addOption(opt_dry);
  opts.addOption(opt_debug);
  opts.addOption(opt_model);
  opts.addOption(opt_concise);
  opts.addOption(opt_reset);
  opts.addOption(opt_eval);
  opts.addOption(opt_init);
  opts.addOption(opt_shuffle);
  opts.addOption(opt_resume);
  opts.addOption(opt_list);
  opts.addOption(opt_delete);
  opts.addOption(opt_score);
  opts.addOption(opt_confmat);
  opts.addOption(opt_save);
  opts.addOption(opt_switch);
  opts.addOption(opt_eval_model);
  opts.addOption(opt_correlation);
  opts.addOption(opt_correlation_short);
  opts.addOption(opt_rebin);
  opts.addOption(opt_vars);
  opts.addOption(opt_n);
  opts.addOption(opt_ivr);
  opts.addOption(opt_bic);
  return opts;
}",0.9988183161004432
31627,"private void loadConfigFiles(final Context context){
  try {
    SourceType sourceType=SourceType.valueOf(context.getConfiguration().get(Constants.SHIFU_MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(context.getConfiguration().get(Constants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(context.getConfiguration().get(Constants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private void loadConfigFiles(final Context context){
  try {
    SourceType sourceType=SourceType.valueOf(context.getConfiguration().get(Constants.SHIFU_MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(context.getConfiguration().get(Constants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(context.getConfiguration().get(Constants.SHIFU_COLUMN_CONFIG),sourceType);
    this.hasCandidates=CommonUtils.hasCandidateColumns(this.columnConfigList);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9308836395450568
31628,"@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  double[] dValues=null;
  if (!this.dataPurifier.isFilter(valueStr)) {
    return;
  }
  long startO=System.currentTimeMillis();
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (Math.random() >= this.modelConfig.getStats().getSampleRate()) {
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  dValues=getDoubleArrayByRawArray(CommonUtils.split(valueStr,this.dataSetDelimiter));
  count+=1L;
  if (count % 2000L == 0) {
    LOG.info(""String_Node_Str"",count,Thread.currentThread().getName());
  }
  for (int i=0; i < this.columnConfigList.size(); i++) {
    ColumnConfig columnConfig=this.columnConfigList.get(i);
    if (columnConfig.getColumnFlag() == ColumnFlag.Meta) {
      continue;
    }
    CorrelationWritable cw=CorrelationMultithreadedMapper.finalCorrelationMap.get(i);
synchronized (cw) {
      cw.setColumnIndex(i);
      cw.setCount(cw.getCount() + 1d);
      cw.setSum(cw.getSum() + dValues[i]);
      double squaredSum=dValues[i] * dValues[i];
      cw.setSumSquare(cw.getSumSquare() + squaredSum);
      double[] xySum=cw.getXySum();
      if (xySum == null) {
        xySum=new double[this.columnConfigList.size()];
        cw.setXySum(xySum);
      }
      double[] xxSum=cw.getXxSum();
      if (xxSum == null) {
        xxSum=new double[this.columnConfigList.size()];
        cw.setXxSum(xxSum);
      }
      double[] yySum=cw.getYySum();
      if (yySum == null) {
        yySum=new double[this.columnConfigList.size()];
        cw.setYySum(yySum);
      }
      double[] adjustCount=cw.getAdjustCount();
      if (adjustCount == null) {
        adjustCount=new double[this.columnConfigList.size()];
        cw.setAdjustCount(adjustCount);
      }
      double[] adjustSumX=cw.getAdjustSumX();
      if (adjustSumX == null) {
        adjustSumX=new double[this.columnConfigList.size()];
        cw.setAdjustSumX(adjustSumX);
      }
      double[] adjustSumY=cw.getAdjustSumY();
      if (adjustSumY == null) {
        adjustSumY=new double[this.columnConfigList.size()];
        cw.setAdjustSumY(adjustSumY);
      }
      for (int j=0; j < this.columnConfigList.size(); j++) {
        ColumnConfig otherColumnConfig=this.columnConfigList.get(j);
        if (otherColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
          continue;
        }
        if (i > j && !this.isComputeAll) {
          continue;
        }
        if (dValues[i] != Double.MIN_VALUE && dValues[j] != Double.MIN_VALUE) {
          xySum[j]+=dValues[i] * dValues[j];
          xxSum[j]+=squaredSum;
          yySum[j]+=dValues[j] * dValues[j];
          adjustCount[j]+=1d;
          adjustSumX[j]+=dValues[i];
          adjustSumY[j]+=dValues[j];
        }
      }
    }
    LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - startO),Thread.currentThread().getName());
  }
}","@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  double[] dValues=null;
  if (!this.dataPurifier.isFilter(valueStr)) {
    return;
  }
  long startO=System.currentTimeMillis();
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (Math.random() >= this.modelConfig.getStats().getSampleRate()) {
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  dValues=getDoubleArrayByRawArray(CommonUtils.split(valueStr,this.dataSetDelimiter));
  count+=1L;
  if (count % 2000L == 0) {
    LOG.info(""String_Node_Str"",count,Thread.currentThread().getName());
  }
  for (int i=0; i < this.columnConfigList.size(); i++) {
    ColumnConfig columnConfig=this.columnConfigList.get(i);
    if (columnConfig.getColumnFlag() == ColumnFlag.Meta || (this.hasCandidates && !ColumnFlag.Candidate.equals(columnConfig.getColumnFlag()))) {
      continue;
    }
    CorrelationWritable cw=CorrelationMultithreadedMapper.finalCorrelationMap.get(i);
synchronized (cw) {
      cw.setColumnIndex(i);
      cw.setCount(cw.getCount() + 1d);
      cw.setSum(cw.getSum() + dValues[i]);
      double squaredSum=dValues[i] * dValues[i];
      cw.setSumSquare(cw.getSumSquare() + squaredSum);
      double[] xySum=cw.getXySum();
      if (xySum == null) {
        xySum=new double[this.columnConfigList.size()];
        cw.setXySum(xySum);
      }
      double[] xxSum=cw.getXxSum();
      if (xxSum == null) {
        xxSum=new double[this.columnConfigList.size()];
        cw.setXxSum(xxSum);
      }
      double[] yySum=cw.getYySum();
      if (yySum == null) {
        yySum=new double[this.columnConfigList.size()];
        cw.setYySum(yySum);
      }
      double[] adjustCount=cw.getAdjustCount();
      if (adjustCount == null) {
        adjustCount=new double[this.columnConfigList.size()];
        cw.setAdjustCount(adjustCount);
      }
      double[] adjustSumX=cw.getAdjustSumX();
      if (adjustSumX == null) {
        adjustSumX=new double[this.columnConfigList.size()];
        cw.setAdjustSumX(adjustSumX);
      }
      double[] adjustSumY=cw.getAdjustSumY();
      if (adjustSumY == null) {
        adjustSumY=new double[this.columnConfigList.size()];
        cw.setAdjustSumY(adjustSumY);
      }
      for (int j=0; j < this.columnConfigList.size(); j++) {
        ColumnConfig otherColumnConfig=this.columnConfigList.get(j);
        if (otherColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
          continue;
        }
        if (i > j && !this.isComputeAll) {
          continue;
        }
        if (dValues[i] != Double.MIN_VALUE && dValues[j] != Double.MIN_VALUE) {
          xySum[j]+=dValues[i] * dValues[j];
          xxSum[j]+=squaredSum;
          yySum[j]+=dValues[j] * dValues[j];
          adjustCount[j]+=1d;
          adjustSumX[j]+=dValues[i];
          adjustSumY[j]+=dValues[j];
        }
      }
    }
    LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - startO),Thread.currentThread().getName());
  }
}",0.9865834633385336
31629,"private void loadConfigFiles(final Context context){
  try {
    SourceType sourceType=SourceType.valueOf(context.getConfiguration().get(Constants.SHIFU_MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(context.getConfiguration().get(Constants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(context.getConfiguration().get(Constants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private void loadConfigFiles(final Context context){
  try {
    SourceType sourceType=SourceType.valueOf(context.getConfiguration().get(Constants.SHIFU_MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(context.getConfiguration().get(Constants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(context.getConfiguration().get(Constants.SHIFU_COLUMN_CONFIG),sourceType);
    this.hasCandidates=CommonUtils.hasCandidateColumns(this.columnConfigList);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9308836395450568
31630,"@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  double[] dValues=null;
  if (!this.dataPurifier.isFilter(valueStr)) {
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (Math.random() >= this.modelConfig.getStats().getSampleRate()) {
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  dValues=getDoubleArrayByRawArray(CommonUtils.split(valueStr,this.dataSetDelimiter));
  count+=1L;
  if (count % 2000L == 0) {
    LOG.info(""String_Node_Str"",count,Thread.currentThread().getName());
  }
  long startO=System.currentTimeMillis();
  for (int i=0; i < this.columnConfigList.size(); i++) {
    long start=System.currentTimeMillis();
    ColumnConfig columnConfig=this.columnConfigList.get(i);
    if (columnConfig.getColumnFlag() == ColumnFlag.Meta) {
      continue;
    }
    CorrelationWritable cw=this.correlationMap.get(i);
    if (cw == null) {
      cw=new CorrelationWritable();
      this.correlationMap.put(i,cw);
    }
    cw.setColumnIndex(i);
    cw.setCount(cw.getCount() + 1d);
    cw.setSum(cw.getSum() + dValues[i]);
    double squaredSum=dValues[i] * dValues[i];
    cw.setSumSquare(cw.getSumSquare() + squaredSum);
    double[] xySum=cw.getXySum();
    if (xySum == null) {
      xySum=new double[this.columnConfigList.size()];
      cw.setXySum(xySum);
    }
    double[] xxSum=cw.getXxSum();
    if (xxSum == null) {
      xxSum=new double[this.columnConfigList.size()];
      cw.setXxSum(xxSum);
    }
    double[] yySum=cw.getYySum();
    if (yySum == null) {
      yySum=new double[this.columnConfigList.size()];
      cw.setYySum(yySum);
    }
    double[] adjustCount=cw.getAdjustCount();
    if (adjustCount == null) {
      adjustCount=new double[this.columnConfigList.size()];
      cw.setAdjustCount(adjustCount);
    }
    double[] adjustSumX=cw.getAdjustSumX();
    if (adjustSumX == null) {
      adjustSumX=new double[this.columnConfigList.size()];
      cw.setAdjustSumX(adjustSumX);
    }
    double[] adjustSumY=cw.getAdjustSumY();
    if (adjustSumY == null) {
      adjustSumY=new double[this.columnConfigList.size()];
      cw.setAdjustSumY(adjustSumY);
    }
    if (i % 1000 == 0) {
      LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start),Thread.currentThread().getName());
    }
    start=System.currentTimeMillis();
    for (int j=0; j < this.columnConfigList.size(); j++) {
      ColumnConfig otherColumnConfig=this.columnConfigList.get(j);
      if (otherColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
        continue;
      }
      if (i > j && !this.isComputeAll) {
        continue;
      }
      if (dValues[i] != Double.MIN_VALUE && dValues[j] != Double.MIN_VALUE) {
        xySum[j]+=dValues[i] * dValues[j];
        xxSum[j]+=squaredSum;
        yySum[j]+=dValues[j] * dValues[j];
        adjustCount[j]+=1d;
        adjustSumX[j]+=dValues[i];
        adjustSumY[j]+=dValues[j];
      }
    }
    if (i % 1000 == 0) {
      LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start),Thread.currentThread().getName());
    }
  }
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - startO),Thread.currentThread().getName());
}","@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  double[] dValues=null;
  if (!this.dataPurifier.isFilter(valueStr)) {
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (Math.random() >= this.modelConfig.getStats().getSampleRate()) {
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  dValues=getDoubleArrayByRawArray(CommonUtils.split(valueStr,this.dataSetDelimiter));
  count+=1L;
  if (count % 2000L == 0) {
    LOG.info(""String_Node_Str"",count,Thread.currentThread().getName());
  }
  long startO=System.currentTimeMillis();
  for (int i=0; i < this.columnConfigList.size(); i++) {
    long start=System.currentTimeMillis();
    ColumnConfig columnConfig=this.columnConfigList.get(i);
    if (columnConfig.getColumnFlag() == ColumnFlag.Meta || (this.hasCandidates && !ColumnFlag.Candidate.equals(columnConfig.getColumnFlag()))) {
      continue;
    }
    CorrelationWritable cw=this.correlationMap.get(i);
    if (cw == null) {
      cw=new CorrelationWritable();
      this.correlationMap.put(i,cw);
    }
    cw.setColumnIndex(i);
    cw.setCount(cw.getCount() + 1d);
    cw.setSum(cw.getSum() + dValues[i]);
    double squaredSum=dValues[i] * dValues[i];
    cw.setSumSquare(cw.getSumSquare() + squaredSum);
    double[] xySum=cw.getXySum();
    if (xySum == null) {
      xySum=new double[this.columnConfigList.size()];
      cw.setXySum(xySum);
    }
    double[] xxSum=cw.getXxSum();
    if (xxSum == null) {
      xxSum=new double[this.columnConfigList.size()];
      cw.setXxSum(xxSum);
    }
    double[] yySum=cw.getYySum();
    if (yySum == null) {
      yySum=new double[this.columnConfigList.size()];
      cw.setYySum(yySum);
    }
    double[] adjustCount=cw.getAdjustCount();
    if (adjustCount == null) {
      adjustCount=new double[this.columnConfigList.size()];
      cw.setAdjustCount(adjustCount);
    }
    double[] adjustSumX=cw.getAdjustSumX();
    if (adjustSumX == null) {
      adjustSumX=new double[this.columnConfigList.size()];
      cw.setAdjustSumX(adjustSumX);
    }
    double[] adjustSumY=cw.getAdjustSumY();
    if (adjustSumY == null) {
      adjustSumY=new double[this.columnConfigList.size()];
      cw.setAdjustSumY(adjustSumY);
    }
    if (i % 1000 == 0) {
      LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start),Thread.currentThread().getName());
    }
    start=System.currentTimeMillis();
    for (int j=0; j < this.columnConfigList.size(); j++) {
      ColumnConfig otherColumnConfig=this.columnConfigList.get(j);
      if (otherColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
        continue;
      }
      if (i > j && !this.isComputeAll) {
        continue;
      }
      if (dValues[i] != Double.MIN_VALUE && dValues[j] != Double.MIN_VALUE) {
        xySum[j]+=dValues[i] * dValues[j];
        xxSum[j]+=squaredSum;
        yySum[j]+=dValues[j] * dValues[j];
        adjustCount[j]+=1d;
        adjustSumX[j]+=dValues[i];
        adjustSumY[j]+=dValues[j];
      }
    }
    if (i % 1000 == 0) {
      LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start),Thread.currentThread().getName());
    }
  }
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - startO),Thread.currentThread().getName());
}",0.9877072612921668
31631,"/** 
 * Run score only
 * @param config the eval config instance
 * @throws IOException any io exception
 */
private void runScore(EvalConfig config) throws IOException {
  PathFinder pathFinder=new PathFinder(modelConfig);
  String evalSetPath=pathFinder.getEvalSetPath(config,SourceType.LOCAL);
  FileUtils.forceMkdir(new File(evalSetPath));
switch (modelConfig.getBasic().getRunMode()) {
case DIST:
case MAPRED:
    runDistScore(config);
  break;
case LOCAL:
runAkkaScore(config);
break;
default :
break;
}
}","/** 
 * Run score only
 * @param config the eval config instance
 * @throws IOException any io exception
 */
private void runScore(EvalConfig config) throws IOException {
switch (modelConfig.getBasic().getRunMode()) {
case DIST:
case MAPRED:
    runDistScore(config);
  break;
case LOCAL:
runAkkaScore(config);
break;
default :
break;
}
}",0.7962308598351001
31632,"/** 
 * Run evaluation per EvalConfig.
 * @param evalConfig the evaluation config instance.
 * @throws IOException when any IO exception
 */
private void runEval(EvalConfig evalConfig) throws IOException {
synchronized (this) {
    validateEvalColumnConfig(evalConfig);
    String evalSetPath=pathFinder.getEvalSetPath(evalConfig,SourceType.LOCAL);
    FileUtils.forceMkdir(new File(evalSetPath));
  }
  try {
    Thread.sleep(8000);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
switch (modelConfig.getBasic().getRunMode()) {
case DIST:
case MAPRED:
    runDistEval(evalConfig);
  break;
case LOCAL:
runAkkaEval(evalConfig);
break;
default :
break;
}
}","/** 
 * Run evaluation per EvalConfig.
 * @param evalConfig the evaluation config instance.
 * @throws IOException when any IO exception
 */
private void runEval(EvalConfig evalConfig) throws IOException {
synchronized (this) {
    validateEvalColumnConfig(evalConfig);
  }
  try {
    Thread.sleep(8000);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
switch (modelConfig.getBasic().getRunMode()) {
case DIST:
case MAPRED:
    runDistEval(evalConfig);
  break;
case LOCAL:
runAkkaEval(evalConfig);
break;
default :
break;
}
}",0.89792663476874
31633,"/** 
 * Compute correlation value according to correlation statistics from correlation MR job.
 * @param corrMap CorrelationWritable map read from MR job output file
 * @throws IOException any IOException to write correlation value to csv file.
 */
private void computeCorrValue(SortedMap<Integer,CorrelationWritable> corrMap) throws IOException {
  String localCorrelationCsv=super.pathFinder.getLocalCorrelationCsvPath();
  ShifuFileUtils.createFileIfNotExists(localCorrelationCsv,SourceType.LOCAL);
  BufferedWriter writer=null;
  Map<Integer,double[]> finalCorrMap=new HashMap<Integer,double[]>();
  try {
    writer=ShifuFileUtils.getWriter(localCorrelationCsv,SourceType.LOCAL);
    writer.write(getColumnIndexes());
    writer.newLine();
    writer.write(getColumnNames());
    writer.newLine();
    for (    Entry<Integer,CorrelationWritable> entry : corrMap.entrySet()) {
      ColumnConfig xColumnConfig=this.columnConfigList.get(entry.getKey());
      if (xColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
        continue;
      }
      CorrelationWritable xCw=corrMap.get(entry.getKey());
      double[] corrArray=new double[this.columnConfigList.size()];
      for (int i=0; i < corrArray.length; i++) {
        ColumnConfig yColumnConfig=this.columnConfigList.get(i);
        if (yColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
          continue;
        }
        if (entry.getKey() > i) {
          double[] reverseDoubleArray=finalCorrMap.get(i);
          if (reverseDoubleArray != null) {
            corrArray[i]=reverseDoubleArray[entry.getKey()];
          }
 else {
            corrArray[i]=0d;
          }
          continue;
        }
        double numerator=xCw.getAdjustCount()[i] * xCw.getXySum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumY()[i];
        double denominator1=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getXxSum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumX()[i]);
        double denominator2=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getYySum()[i] - xCw.getAdjustSumY()[i] * xCw.getAdjustSumY()[i]);
        if (Double.compare(denominator1,Double.valueOf(0d)) == 0 || Double.compare(denominator2,Double.valueOf(0d)) == 0) {
          corrArray[i]=0d;
        }
 else {
          corrArray[i]=numerator / (denominator1 * denominator2);
        }
      }
      finalCorrMap.put(entry.getKey(),corrArray);
      String corrStr=Arrays.toString(corrArray);
      String adjustCorrStr=corrStr.substring(1,corrStr.length() - 1);
      writer.write(entry.getKey() + ""String_Node_Str"" + this.columnConfigList.get(entry.getKey()).getColumnName()+ ""String_Node_Str""+ adjustCorrStr);
      writer.newLine();
    }
  }
  finally {
    IOUtils.closeQuietly(writer);
  }
}","/** 
 * Compute correlation value according to correlation statistics from correlation MR job.
 * @param corrMap CorrelationWritable map read from MR job output file
 * @throws IOException any IOException to write correlation value to csv file.
 */
private void computeCorrValue(SortedMap<Integer,CorrelationWritable> corrMap) throws IOException {
  boolean hasCandidates=CommonUtils.hasCandidateColumns(this.columnConfigList);
  String localCorrelationCsv=super.pathFinder.getLocalCorrelationCsvPath();
  ShifuFileUtils.createFileIfNotExists(localCorrelationCsv,SourceType.LOCAL);
  BufferedWriter writer=null;
  Map<Integer,double[]> finalCorrMap=new HashMap<Integer,double[]>();
  try {
    writer=ShifuFileUtils.getWriter(localCorrelationCsv,SourceType.LOCAL);
    writer.write(getColumnIndexes());
    writer.newLine();
    writer.write(getColumnNames());
    writer.newLine();
    for (    Entry<Integer,CorrelationWritable> entry : corrMap.entrySet()) {
      ColumnConfig xColumnConfig=this.columnConfigList.get(entry.getKey());
      if (xColumnConfig.getColumnFlag() == ColumnFlag.Meta || (hasCandidates && !ColumnFlag.Candidate.equals(xColumnConfig.getColumnFlag()))) {
        continue;
      }
      CorrelationWritable xCw=corrMap.get(entry.getKey());
      double[] corrArray=new double[this.columnConfigList.size()];
      for (int i=0; i < corrArray.length; i++) {
        ColumnConfig yColumnConfig=this.columnConfigList.get(i);
        if (yColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
          continue;
        }
        if (entry.getKey() > i) {
          double[] reverseDoubleArray=finalCorrMap.get(i);
          if (reverseDoubleArray != null) {
            corrArray[i]=reverseDoubleArray[entry.getKey()];
          }
 else {
            corrArray[i]=0d;
          }
          continue;
        }
        double numerator=xCw.getAdjustCount()[i] * xCw.getXySum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumY()[i];
        double denominator1=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getXxSum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumX()[i]);
        double denominator2=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getYySum()[i] - xCw.getAdjustSumY()[i] * xCw.getAdjustSumY()[i]);
        if (Double.compare(denominator1,Double.valueOf(0d)) == 0 || Double.compare(denominator2,Double.valueOf(0d)) == 0) {
          corrArray[i]=0d;
        }
 else {
          corrArray[i]=numerator / (denominator1 * denominator2);
        }
      }
      finalCorrMap.put(entry.getKey(),corrArray);
      String corrStr=Arrays.toString(corrArray);
      String adjustCorrStr=corrStr.substring(1,corrStr.length() - 1);
      writer.write(entry.getKey() + ""String_Node_Str"" + this.columnConfigList.get(entry.getKey()).getColumnName()+ ""String_Node_Str""+ adjustCorrStr);
      writer.newLine();
    }
  }
  finally {
    IOUtils.closeQuietly(writer);
  }
}",0.9710093056549748
31634,"public static BasicUpdater getUpdater(ModelConfig modelConfig,ModelInspector.ModelStep step) throws IOException {
  BasicUpdater updater=null;
switch (step) {
case INIT:
case STATS:
    updater=new BasicUpdater(modelConfig);
  break;
case VARSELECT:
updater=new VarSelUpdater(modelConfig);
break;
case TRAIN:
updater=new TrainUpdater(modelConfig);
break;
default :
updater=new VoidUpdater(modelConfig);
break;
}
return updater;
}","public static BasicUpdater getUpdater(ModelConfig modelConfig,ModelInspector.ModelStep step) throws IOException {
  BasicUpdater updater=null;
switch (step) {
case INIT:
case STATS:
case NORMALIZE:
    updater=new BasicUpdater(modelConfig);
  break;
case VARSELECT:
updater=new VarSelUpdater(modelConfig);
break;
case TRAIN:
updater=new TrainUpdater(modelConfig);
break;
default :
updater=new VoidUpdater(modelConfig);
break;
}
return updater;
}",0.9816933638443937
31635,"private void addRuntimeJars(final List<String> args){
  List<String> jars=new ArrayList<String>(16);
  jars.add(JarManager.findContainingJar(ObjectMapper.class));
  jars.add(JarManager.findContainingJar(JsonParser.class));
  jars.add(JarManager.findContainingJar(JsonIgnore.class));
  jars.add(JarManager.findContainingJar(BZip2CompressorInputStream.class));
  jars.add(JarManager.findContainingJar(StringUtils.class));
  jars.add(JarManager.findContainingJar(ListUtils.class));
  jars.add(JarManager.findContainingJar(org.apache.commons.io.IOUtils.class));
  jars.add(JarManager.findContainingJar(Splitter.class));
  jars.add(JarManager.findContainingJar(MLDataSet.class));
  jars.add(JarManager.findContainingJar(getClass()));
  jars.add(JarManager.findContainingJar(GuaguaConstants.class));
  jars.add(JarManager.findContainingJar(GuaguaMapReduceConstants.class));
  jars.add(JarManager.findContainingJar(ZooKeeper.class));
  jars.add(JarManager.findContainingJar(ServerBootstrap.class));
  if (modelConfig.getNormalize().getIsParquet()) {
    jars.add(JarManager.findContainingJar(ParquetRecordReader.class));
    jars.add(JarManager.findContainingJar(parquet.pig.ParquetLoader.class));
    jars.add(JarManager.findContainingJar(PigContext.class));
    jars.add(JarManager.findContainingJar(ParquetRuntimeException.class));
    jars.add(JarManager.findContainingJar(ParquetProperties.class));
    jars.add(JarManager.findContainingJar(Packer.class));
    jars.add(JarManager.findContainingJar(Generator.class));
    jars.add(JarManager.findContainingJar(PageType.class));
    jars.add(JarManager.findContainingJar(Snappy.class));
    jars.add(JarManager.findContainingJar(Base64Variant.class));
    jars.add(JarManager.findContainingJar(RecognitionException.class));
    jars.add(JarManager.findContainingJar(ReadableInstant.class));
  }
  String hdpVersion=HDPUtils.getHdpVersionForHDP224();
  if (StringUtils.isNotBlank(hdpVersion)) {
    jars.add(HDPUtils.findContainingFile(""String_Node_Str""));
    jars.add(HDPUtils.findContainingFile(""String_Node_Str""));
    jars.add(HDPUtils.findContainingFile(""String_Node_Str""));
    jars.add(HDPUtils.findContainingFile(""String_Node_Str""));
  }
  args.add(StringUtils.join(jars,NNConstants.LIB_JAR_SEPARATOR));
}","private void addRuntimeJars(final List<String> args){
  List<String> jars=new ArrayList<String>(16);
  jars.add(JarManager.findContainingJar(ObjectMapper.class));
  jars.add(JarManager.findContainingJar(JsonParser.class));
  jars.add(JarManager.findContainingJar(JsonIgnore.class));
  jars.add(JarManager.findContainingJar(BZip2CompressorInputStream.class));
  jars.add(JarManager.findContainingJar(StringUtils.class));
  jars.add(JarManager.findContainingJar(org.apache.commons.lang3.StringUtils.class));
  jars.add(JarManager.findContainingJar(ListUtils.class));
  jars.add(JarManager.findContainingJar(org.apache.commons.io.IOUtils.class));
  jars.add(JarManager.findContainingJar(Splitter.class));
  jars.add(JarManager.findContainingJar(MLDataSet.class));
  jars.add(JarManager.findContainingJar(getClass()));
  jars.add(JarManager.findContainingJar(GuaguaConstants.class));
  jars.add(JarManager.findContainingJar(GuaguaMapReduceConstants.class));
  jars.add(JarManager.findContainingJar(ZooKeeper.class));
  jars.add(JarManager.findContainingJar(ServerBootstrap.class));
  if (modelConfig.getNormalize().getIsParquet()) {
    jars.add(JarManager.findContainingJar(ParquetRecordReader.class));
    jars.add(JarManager.findContainingJar(parquet.pig.ParquetLoader.class));
    jars.add(JarManager.findContainingJar(PigContext.class));
    jars.add(JarManager.findContainingJar(ParquetRuntimeException.class));
    jars.add(JarManager.findContainingJar(ParquetProperties.class));
    jars.add(JarManager.findContainingJar(Packer.class));
    jars.add(JarManager.findContainingJar(Generator.class));
    jars.add(JarManager.findContainingJar(PageType.class));
    jars.add(JarManager.findContainingJar(Snappy.class));
    jars.add(JarManager.findContainingJar(Base64Variant.class));
    jars.add(JarManager.findContainingJar(RecognitionException.class));
    jars.add(JarManager.findContainingJar(ReadableInstant.class));
  }
  String hdpVersion=HDPUtils.getHdpVersionForHDP224();
  if (StringUtils.isNotBlank(hdpVersion)) {
    jars.add(HDPUtils.findContainingFile(""String_Node_Str""));
    jars.add(HDPUtils.findContainingFile(""String_Node_Str""));
    jars.add(HDPUtils.findContainingFile(""String_Node_Str""));
    jars.add(HDPUtils.findContainingFile(""String_Node_Str""));
  }
  args.add(StringUtils.join(jars,NNConstants.LIB_JAR_SEPARATOR));
}",0.9813287016934432
31636,"@Override protected void reduce(IntWritable key,Iterable<CorrelationWritable> values,Context context) throws IOException, InterruptedException {
  CorrelationWritable finalCw=null;
  Iterator<CorrelationWritable> cwIt=values.iterator();
  while (cwIt.hasNext()) {
    CorrelationWritable cw=cwIt.next();
    if (finalCw == null) {
      finalCw=cw;
    }
 else {
      finalCw.combine(cw);
    }
  }
  this.outputKey.set(key.get());
  this.outputValue.set(new String(Base64.encodeBase64(objectToBytes(finalCw)),""String_Node_Str""));
  context.write(outputKey,outputValue);
}","@Override protected void reduce(IntWritable key,Iterable<CorrelationWritable> values,Context context) throws IOException, InterruptedException {
  CorrelationWritable finalCw=initCw();
  Iterator<CorrelationWritable> cwIt=values.iterator();
  while (cwIt.hasNext()) {
    CorrelationWritable cw=cwIt.next();
    finalCw.setColumnIndex(cw.getColumnIndex());
    finalCw.combine(cw);
  }
  this.outputKey.set(key.get());
  this.outputValue.set(new String(Base64.encodeBase64(objectToBytes(finalCw)),""String_Node_Str""));
  context.write(outputKey,outputValue);
}",0.8886925795053003
31637,"/** 
 * Do initialization like ModelConfig and ColumnConfig loading.
 */
@Override protected void setup(Context context) throws IOException, InterruptedException {
  this.outputKey=new IntWritable();
  this.outputValue=new Text();
}","/** 
 * Do initialization like ModelConfig and ColumnConfig loading.
 */
@Override protected void setup(Context context) throws IOException, InterruptedException {
  this.outputKey=new IntWritable();
  this.outputValue=new Text();
  loadConfigFiles(context);
}",0.943089430894309
31638,"/** 
 * Compute correlation value according to correlation statistics from correlation MR job.
 * @param corrMap CorrelationWritable map read from MR job output file
 * @throws IOException any IOException to write correlation value to csv file.
 */
private void computeCorrValue(SortedMap<Integer,CorrelationWritable> corrMap) throws IOException {
  boolean hasCandidates=CommonUtils.hasCandidateColumns(this.columnConfigList);
  String localCorrelationCsv=super.pathFinder.getLocalCorrelationCsvPath();
  ShifuFileUtils.createFileIfNotExists(localCorrelationCsv,SourceType.LOCAL);
  BufferedWriter writer=null;
  Map<Integer,double[]> finalCorrMap=new HashMap<Integer,double[]>();
  try {
    writer=ShifuFileUtils.getWriter(localCorrelationCsv,SourceType.LOCAL);
    writer.write(getColumnIndexes());
    writer.newLine();
    writer.write(getColumnNames());
    writer.newLine();
    for (    Entry<Integer,CorrelationWritable> entry : corrMap.entrySet()) {
      ColumnConfig xColumnConfig=this.columnConfigList.get(entry.getKey());
      if (xColumnConfig.getColumnFlag() == ColumnFlag.Meta || (hasCandidates && !ColumnFlag.Candidate.equals(xColumnConfig.getColumnFlag()))) {
        continue;
      }
      CorrelationWritable xCw=corrMap.get(entry.getKey());
      double[] corrArray=new double[this.columnConfigList.size()];
      for (int i=0; i < corrArray.length; i++) {
        ColumnConfig yColumnConfig=this.columnConfigList.get(i);
        if (yColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
          continue;
        }
        if (entry.getKey() > i) {
          double[] reverseDoubleArray=finalCorrMap.get(i);
          if (reverseDoubleArray != null) {
            corrArray[i]=reverseDoubleArray[entry.getKey()];
          }
 else {
            corrArray[i]=0d;
          }
          continue;
        }
        double numerator=xCw.getAdjustCount()[i] * xCw.getXySum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumY()[i];
        double denominator1=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getXxSum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumX()[i]);
        double denominator2=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getYySum()[i] - xCw.getAdjustSumY()[i] * xCw.getAdjustSumY()[i]);
        if (Double.compare(denominator1,Double.valueOf(0d)) == 0 || Double.compare(denominator2,Double.valueOf(0d)) == 0) {
          corrArray[i]=0d;
        }
 else {
          corrArray[i]=numerator / (denominator1 * denominator2);
        }
      }
      finalCorrMap.put(entry.getKey(),corrArray);
      String corrStr=Arrays.toString(corrArray);
      String adjustCorrStr=corrStr.substring(1,corrStr.length() - 1);
      writer.write(entry.getKey() + ""String_Node_Str"" + this.columnConfigList.get(entry.getKey()).getColumnName()+ ""String_Node_Str""+ adjustCorrStr);
      writer.newLine();
    }
  }
  finally {
    IOUtils.closeQuietly(writer);
  }
}","/** 
 * Compute correlation value according to correlation statistics from correlation MR job.
 * @param corrMap CorrelationWritable map read from MR job output file
 * @throws IOException any IOException to write correlation value to csv file.
 */
private void computeCorrValue(SortedMap<Integer,CorrelationWritable> corrMap) throws IOException {
  boolean hasCandidates=CommonUtils.hasCandidateColumns(this.columnConfigList);
  String localCorrelationCsv=super.pathFinder.getLocalCorrelationCsvPath();
  ShifuFileUtils.createFileIfNotExists(localCorrelationCsv,SourceType.LOCAL);
  BufferedWriter writer=null;
  Map<Integer,double[]> finalCorrMap=new HashMap<Integer,double[]>();
  try {
    writer=ShifuFileUtils.getWriter(localCorrelationCsv,SourceType.LOCAL);
    writer.write(getColumnIndexes());
    writer.newLine();
    writer.write(getColumnNames());
    writer.newLine();
    for (    Entry<Integer,CorrelationWritable> entry : corrMap.entrySet()) {
      ColumnConfig xColumnConfig=this.columnConfigList.get(entry.getKey());
      if (xColumnConfig.getColumnFlag() == ColumnFlag.Meta || (hasCandidates && !ColumnFlag.Candidate.equals(xColumnConfig.getColumnFlag()))) {
        continue;
      }
      CorrelationWritable xCw=corrMap.get(entry.getKey());
      double[] corrArray=new double[this.columnConfigList.size()];
      for (int i=0; i < corrArray.length; i++) {
        ColumnConfig yColumnConfig=this.columnConfigList.get(i);
        if (yColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
          continue;
        }
        if (entry.getKey() > i) {
          double[] reverseDoubleArray=finalCorrMap.get(i);
          if (reverseDoubleArray != null) {
            corrArray[i]=reverseDoubleArray[entry.getKey()];
          }
 else {
            corrArray[i]=0d;
          }
          continue;
        }
        double numerator=xCw.getAdjustCount()[i] * xCw.getXySum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumY()[i];
        double denominator1=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getXxSum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumX()[i]);
        double denominator2=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getYySum()[i] - xCw.getAdjustSumY()[i] * xCw.getAdjustSumY()[i]);
        if (Double.compare(denominator1,Double.valueOf(0d)) == 0 || Double.compare(denominator2,Double.valueOf(0d)) == 0) {
          corrArray[i]=0d;
        }
 else {
          corrArray[i]=numerator / (denominator1 * denominator2);
        }
        if (corrArray[i] > 1.05d) {
          log.warn(""String_Node_Str"" + numerator + ""String_Node_Str""+ denominator1+ ""String_Node_Str""+ denominator2+ ""String_Node_Str"",numerator / (denominator1 * denominator2),entry.getKey(),i);
          log.warn(""String_Node_Str"",xCw.getAdjustCount()[i],xCw.getXySum()[i],xCw.getAdjustSumX()[i],xCw.getAdjustSumY()[i]);
          log.warn(""String_Node_Str"",xCw.getAdjustCount()[i],xCw.getXxSum()[i],xCw.getAdjustSumX()[i],xCw.getAdjustSumX()[i]);
          log.warn(""String_Node_Str"",xCw.getAdjustCount()[i],xCw.getYySum()[i],xCw.getAdjustSumY()[i],xCw.getAdjustSumY()[i]);
        }
      }
      finalCorrMap.put(entry.getKey(),corrArray);
      String corrStr=Arrays.toString(corrArray);
      String adjustCorrStr=corrStr.substring(1,corrStr.length() - 1);
      writer.write(entry.getKey() + ""String_Node_Str"" + this.columnConfigList.get(entry.getKey()).getColumnName()+ ""String_Node_Str""+ adjustCorrStr);
      writer.newLine();
    }
  }
  finally {
    IOUtils.closeQuietly(writer);
  }
}",0.902243841205084
31639,"private void autoCheckShuffleAndShuffleSize() throws IOException {
  ColumnConfig targetColumnConfig=CommonUtils.findTargetColumn(columnConfigList);
  long totalCount=targetColumnConfig.getTotalCount();
  int filePartCnt=ShifuFileUtils.getFilePartCount(this.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  if (filePartCnt > 0 && filePartCnt <= CommonConstants.PART_FILE_COUNT_THRESHOLD && totalCount * 1.0d / filePartCnt >= CommonConstants.MAX_RECORDS_PER_WORKER && ShifuFileUtils.isPartFileAllGzip(this.pathFinder.getNormalizedDataPath(),SourceType.HDFS)) {
    long shuffleSize=totalCount / CommonConstants.MAX_RECORDS_PER_WORKER;
    log.info(""String_Node_Str"",shuffleSize);
    this.isToShuffleData=true;
    Integer shuffleSizeInteger=Environment.getInt(Constants.SHIFU_NORM_SHUFFLE_SIZE);
    if (shuffleSizeInteger == null) {
      Environment.setProperty(Constants.SHIFU_NORM_SHUFFLE_SIZE,shuffleSize + ""String_Node_Str"");
    }
  }
}","private void autoCheckShuffleAndShuffleSize() throws IOException {
  ColumnConfig targetColumnConfig=CommonUtils.findTargetColumn(columnConfigList);
  Long totalCount=targetColumnConfig.getTotalCount();
  if (totalCount == null) {
    return;
  }
  int filePartCnt=ShifuFileUtils.getFilePartCount(this.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  if (filePartCnt > 0 && filePartCnt <= CommonConstants.PART_FILE_COUNT_THRESHOLD && totalCount * 1.0d / filePartCnt >= CommonConstants.MAX_RECORDS_PER_WORKER && ShifuFileUtils.isPartFileAllGzip(this.pathFinder.getNormalizedDataPath(),SourceType.HDFS)) {
    long shuffleSize=totalCount / CommonConstants.MAX_RECORDS_PER_WORKER;
    log.info(""String_Node_Str"",shuffleSize);
    this.isToShuffleData=true;
    Integer shuffleSizeInteger=Environment.getInt(Constants.SHIFU_NORM_SHUFFLE_SIZE);
    if (shuffleSizeInteger == null) {
      Environment.setProperty(Constants.SHIFU_NORM_SHUFFLE_SIZE,shuffleSize + ""String_Node_Str"");
    }
  }
}",0.976313079299691
31640,"/** 
 * runner for normalization data
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.NORMALIZE);
    syncDataToHdfs(modelConfig.getDataSet().getSource());
switch (modelConfig.getBasic().getRunMode()) {
case DIST:
case MAPRED:
      runPigNormalize();
    autoCheckShuffleAndShuffleSize();
  if (this.isToShuffleData) {
    MapReduceShuffle shuffler=new MapReduceShuffle(this.modelConfig);
    shuffler.run(this.pathFinder.getNormalizedDataPath());
  }
if (CommonUtils.isTreeModel(modelConfig.getAlgorithm())) {
  runDataClean(this.isToShuffleData);
}
break;
case LOCAL:
runAkkaNormalize();
break;
}
syncDataToHdfs(modelConfig.getDataSet().getSource());
clearUp(ModelStep.NORMALIZE);
}
 catch (Exception e) {
log.error(""String_Node_Str"",e);
return -1;
}
log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
return 0;
}","/** 
 * runner for normalization data
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.NORMALIZE);
    syncDataToHdfs(modelConfig.getDataSet().getSource());
switch (modelConfig.getBasic().getRunMode()) {
case DIST:
case MAPRED:
      runPigNormalize();
    try {
      autoCheckShuffleAndShuffleSize();
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"",e);
    }
  if (this.isToShuffleData) {
    MapReduceShuffle shuffler=new MapReduceShuffle(this.modelConfig);
    shuffler.run(this.pathFinder.getNormalizedDataPath());
  }
if (CommonUtils.isTreeModel(modelConfig.getAlgorithm())) {
  runDataClean(this.isToShuffleData);
}
break;
case LOCAL:
runAkkaNormalize();
break;
}
syncDataToHdfs(modelConfig.getDataSet().getSource());
clearUp(ModelStep.NORMALIZE);
}
 catch (Exception e) {
log.error(""String_Node_Str"",e);
return -1;
}
log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
return 0;
}",0.95496417604913
31641,"/** 
 * Create the normalized output for model, since the final score should be 0 ~ 1000, instead of 0.o ~ 1.0
 * @return output for model
 */
protected Output createNormalizedOutput(int id){
  Output output=new Output();
  output.withOutputFields(createOutputField(RAW_RESULT + ""String_Node_Str"" + id,OpType.CONTINUOUS,DataType.DOUBLE,ResultFeatureType.PREDICTED_VALUE));
  OutputField finalResult=createOutputField(FINAL_RESULT + ""String_Node_Str"" + id,OpType.CONTINUOUS,DataType.DOUBLE,ResultFeatureType.TRANSFORMED_VALUE);
  finalResult.withExpression(createApplyFunc(id));
  output.withOutputFields(finalResult);
  return output;
}","/** 
 * Create the normalized output for model, since the final score should be 0 ~ 1000, instead of 0.o ~ 1.0
 * @return output for model
 */
protected Output createNormalizedOutput(int id){
  Output output=new Output();
  output.withOutputFields(createOutputField(RAW_RESULT + ""String_Node_Str"" + id,OpType.CONTINUOUS,DataType.DOUBLE,ResultFeatureType.PREDICTED_VALUE));
  OutputField finalResult=createOutputField(FINAL_RESULT + ""String_Node_Str"" + id,OpType.CONTINUOUS,DataType.DOUBLE,ResultFeatureType.TRANSFORMED_VALUE);
  finalResult.withExpression(createNormExpr(id));
  output.withOutputFields(finalResult);
  return output;
}",0.9866247049567268
31642,"/** 
 * Create @DerivedField for numerical variable
 * @param config - ColumnConfig for numerical variable
 * @param cutoff - cutoff of normalization
 * @param normType - the normalization method that is used to generate DerivedField
 * @return DerivedField for variable
 */
@Override protected List<DerivedField> createNumericalDerivedField(ColumnConfig config,double cutoff,ModelNormalizeConf.NormType normType){
  List<Double> binWoeList=(normType.equals(ModelNormalizeConf.NormType.WOE) ? config.getBinCountWoe() : config.getBinWeightedWoe());
  List<Double> binBoundaryList=config.getBinBoundary();
  List<DiscretizeBin> discretizeBinList=new ArrayList<DiscretizeBin>();
  for (int i=0; i < binBoundaryList.size(); i++) {
    DiscretizeBin discretizeBin=new DiscretizeBin();
    Interval interval=new Interval();
    if (i == 0) {
      if (binBoundaryList.size() == 1) {
        interval.withClosure(Interval.Closure.OPEN_OPEN).withLeftMargin(Double.NEGATIVE_INFINITY).withRightMargin(Double.POSITIVE_INFINITY);
      }
 else {
        interval.withClosure(Interval.Closure.OPEN_OPEN).withRightMargin(binBoundaryList.get(i + 1));
      }
    }
 else     if (i == binBoundaryList.size() - 1) {
      interval.withClosure(Interval.Closure.CLOSED_OPEN).withLeftMargin(binBoundaryList.get(i));
    }
 else {
      interval.withClosure(Interval.Closure.CLOSED_OPEN).withLeftMargin(binBoundaryList.get(i)).withRightMargin(binBoundaryList.get(i + 1));
    }
    discretizeBin.withInterval(interval).withBinValue(Double.toString(binWoeList.get(i)));
    discretizeBinList.add(discretizeBin);
  }
  Discretize discretize=new Discretize();
  discretize.withDataType(DataType.DOUBLE).withField(FieldName.create(CommonUtils.getSimpleColumnName(config))).withMapMissingTo(Normalizer.normalize(config,null,cutoff,normType).toString()).withDefaultValue(Normalizer.normalize(config,null,cutoff,normType).toString()).withDiscretizeBins(discretizeBinList);
  List<DerivedField> derivedFields=new ArrayList<DerivedField>();
  derivedFields.add(new DerivedField(OpType.CONTINUOUS,DataType.DOUBLE).withName(FieldName.create(genPmmlColumnName(CommonUtils.getSimpleColumnName(config),normType))).withExpression(discretize));
  return derivedFields;
}","/** 
 * Create @DerivedField for numerical variable
 * @param config - ColumnConfig for numerical variable
 * @param cutoff - cutoff of normalization
 * @param normType - the normalization method that is used to generate DerivedField
 * @return DerivedField for variable
 */
@Override protected List<DerivedField> createNumericalDerivedField(ColumnConfig config,double cutoff,ModelNormalizeConf.NormType normType){
  List<Double> binWoeList=(normType.equals(ModelNormalizeConf.NormType.WOE) ? config.getBinCountWoe() : config.getBinWeightedWoe());
  List<Double> binBoundaryList=config.getBinBoundary();
  List<DiscretizeBin> discretizeBinList=new ArrayList<DiscretizeBin>();
  for (int i=0; i < binBoundaryList.size(); i++) {
    DiscretizeBin discretizeBin=new DiscretizeBin();
    Interval interval=new Interval();
    if (i == 0) {
      if (binBoundaryList.size() == 1) {
        interval.withClosure(Interval.Closure.OPEN_OPEN).withLeftMargin(Double.NEGATIVE_INFINITY).withRightMargin(Double.POSITIVE_INFINITY);
      }
 else {
        interval.withClosure(Interval.Closure.OPEN_OPEN).withRightMargin(binBoundaryList.get(i + 1));
      }
    }
 else     if (i == binBoundaryList.size() - 1) {
      interval.withClosure(Interval.Closure.CLOSED_OPEN).withLeftMargin(binBoundaryList.get(i));
    }
 else {
      interval.withClosure(Interval.Closure.CLOSED_OPEN).withLeftMargin(binBoundaryList.get(i)).withRightMargin(binBoundaryList.get(i + 1));
    }
    discretizeBin.withInterval(interval).withBinValue(Double.toString(binWoeList.get(i)));
    discretizeBinList.add(discretizeBin);
  }
  Discretize discretize=new Discretize();
  discretize.withDataType(DataType.DOUBLE).withField(FieldName.create(CommonUtils.getSimpleColumnName(config))).withMapMissingTo(Normalizer.normalize(config,null,cutoff,normType).get(0).toString()).withDefaultValue(Normalizer.normalize(config,null,cutoff,normType).get(0).toString()).withDiscretizeBins(discretizeBinList);
  List<DerivedField> derivedFields=new ArrayList<DerivedField>();
  derivedFields.add(new DerivedField(OpType.CONTINUOUS,DataType.DOUBLE).withName(FieldName.create(genPmmlColumnName(CommonUtils.getSimpleColumnName(config),normType))).withExpression(discretize));
  return derivedFields;
}",0.996875
31643,"/** 
 * Create DerivedField for categorical variable
 * @param config - ColumnConfig for categorical variable
 * @param cutoff - cutoff for normalization
 * @param normType - the normalization method that is used to generate DerivedField
 * @return DerivedField for variable
 */
protected List<DerivedField> createCategoricalDerivedField(ColumnConfig config,double cutoff,ModelNormalizeConf.NormType normType){
  Document document=null;
  try {
    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  }
 catch (  ParserConfigurationException e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
  String defaultValue=Normalizer.normalize(config,""String_Node_Str"",cutoff,normType).toString();
  String missingValue=Normalizer.normalize(config,null,cutoff,normType).toString();
  InlineTable inlineTable=new InlineTable();
  for (int i=0; i < config.getBinCategory().size(); i++) {
    List<String> catVals=CommonUtils.flattenCatValGrp(config.getBinCategory().get(i));
    for (    String cval : catVals) {
      String dval=Normalizer.normalize(config,cval,cutoff,normType).toString();
      Element out=document.createElementNS(NAME_SPACE_URI,ELEMENT_OUT);
      out.setTextContent(dval);
      Element origin=document.createElementNS(NAME_SPACE_URI,ELEMENT_ORIGIN);
      origin.setTextContent(cval);
      inlineTable.withRows(new Row().withContent(origin).withContent(out));
    }
  }
  MapValues mapValues=new MapValues(""String_Node_Str"").withDataType(DataType.DOUBLE).withDefaultValue(defaultValue).withFieldColumnPairs(new FieldColumnPair(new FieldName(CommonUtils.getSimpleColumnName(config)),ELEMENT_ORIGIN)).withInlineTable(inlineTable).withMapMissingTo(missingValue);
  List<DerivedField> derivedFields=new ArrayList<DerivedField>();
  derivedFields.add(new DerivedField(OpType.CONTINUOUS,DataType.DOUBLE).withName(FieldName.create(genPmmlColumnName(CommonUtils.getSimpleColumnName(config),normType))).withExpression(mapValues));
  return derivedFields;
}","/** 
 * Create DerivedField for categorical variable
 * @param config - ColumnConfig for categorical variable
 * @param cutoff - cutoff for normalization
 * @param normType - the normalization method that is used to generate DerivedField
 * @return DerivedField for variable
 */
protected List<DerivedField> createCategoricalDerivedField(ColumnConfig config,double cutoff,ModelNormalizeConf.NormType normType){
  Document document=null;
  try {
    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  }
 catch (  ParserConfigurationException e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
  String defaultValue=Normalizer.normalize(config,""String_Node_Str"",cutoff,normType).get(0).toString();
  String missingValue=Normalizer.normalize(config,null,cutoff,normType).get(0).toString();
  InlineTable inlineTable=new InlineTable();
  for (int i=0; i < config.getBinCategory().size(); i++) {
    List<String> catVals=CommonUtils.flattenCatValGrp(config.getBinCategory().get(i));
    for (    String cval : catVals) {
      String dval=Normalizer.normalize(config,cval,cutoff,normType).get(0).toString();
      Element out=document.createElementNS(NAME_SPACE_URI,ELEMENT_OUT);
      out.setTextContent(dval);
      Element origin=document.createElementNS(NAME_SPACE_URI,ELEMENT_ORIGIN);
      origin.setTextContent(cval);
      inlineTable.withRows(new Row().withContent(origin).withContent(out));
    }
  }
  MapValues mapValues=new MapValues(""String_Node_Str"").withDataType(DataType.DOUBLE).withDefaultValue(defaultValue).withFieldColumnPairs(new FieldColumnPair(new FieldName(CommonUtils.getSimpleColumnName(config)),ELEMENT_ORIGIN)).withInlineTable(inlineTable).withMapMissingTo(missingValue);
  List<DerivedField> derivedFields=new ArrayList<DerivedField>();
  derivedFields.add(new DerivedField(OpType.CONTINUOUS,DataType.DOUBLE).withName(FieldName.create(genPmmlColumnName(CommonUtils.getSimpleColumnName(config),normType))).withExpression(mapValues));
  return derivedFields;
}",0.994884287454324
31644,"private long computeDynamicCombineSize() throws IOException {
  int filePartCnt=ShifuFileUtils.getFilePartCount(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long actualFileSize=ShifuFileUtils.getFileOrDirectorySize(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  boolean isGzip=ShifuFileUtils.isPartFileAllGzip(this.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long avgFileSize=actualFileSize / filePartCnt;
  if (isGzip && filePartCnt <= 20) {
    return (long)(avgFileSize * 1.2d);
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  int candidateCount=inputOutputIndex[2];
  long maxCombineSize=CommonUtils.isTreeModel(modelConfig.getAlgorithm()) ? 209715200L : 168435456L;
  double ratio=candidateCount / 600d;
  if (ratio > 2d) {
    ratio=0.85 * ratio;
  }
  long finalCombineSize=Double.valueOf((maxCombineSize * 1d * (ratio))).longValue();
  if (actualFileSize / finalCombineSize < 25) {
    finalCombineSize/=2;
  }
  return finalCombineSize;
}","private long computeDynamicCombineSize() throws IOException {
  int filePartCnt=ShifuFileUtils.getFilePartCount(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long actualFileSize=ShifuFileUtils.getFileOrDirectorySize(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  boolean isGzip=ShifuFileUtils.isPartFileAllGzip(this.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long avgFileSize=actualFileSize / filePartCnt;
  if (isGzip && filePartCnt <= 20) {
    return (long)(avgFileSize * 1.2d);
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  int candidateCount=inputOutputIndex[2];
  long maxCombineSize=CommonUtils.isTreeModel(modelConfig.getAlgorithm()) ? 209715200L : 168435456L;
  if (modelConfig.isClassification()) {
    return maxCombineSize;
  }
  double ratio=candidateCount / 600d;
  if (ratio > 2d) {
    ratio=0.85 * ratio;
  }
  long finalCombineSize=Double.valueOf((maxCombineSize * 1d * (ratio))).longValue();
  if (actualFileSize / finalCombineSize < 25) {
    finalCombineSize/=2;
  }
  return finalCombineSize;
}",0.9678296329859538
31645,"private long computeDynamicCombineSize() throws IOException {
  int filePartCnt=ShifuFileUtils.getFilePartCount(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long actualFileSize=ShifuFileUtils.getFileOrDirectorySize(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  boolean isGzip=ShifuFileUtils.isPartFileAllGzip(this.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long avgFileSize=actualFileSize / filePartCnt;
  if (isGzip && filePartCnt <= 20) {
    return (long)(avgFileSize * 1.2d);
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  int candidateCount=inputOutputIndex[2];
  long maxCombineSize=CommonUtils.isTreeModel(modelConfig.getAlgorithm()) ? 209715200L : 168435456L;
  if (modelConfig.isClassification()) {
    return maxCombineSize;
  }
  double ratio=candidateCount / 600d;
  if (ratio > 2d) {
    ratio=0.85 * ratio;
  }
  long finalCombineSize=Double.valueOf((maxCombineSize * 1d * (ratio))).longValue();
  if (actualFileSize / finalCombineSize < 25) {
    finalCombineSize/=2;
  }
  return finalCombineSize;
}","private long computeDynamicCombineSize() throws IOException {
  int filePartCnt=ShifuFileUtils.getFilePartCount(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long actualFileSize=ShifuFileUtils.getFileOrDirectorySize(super.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  boolean isGzip=ShifuFileUtils.isPartFileAllGzip(this.pathFinder.getNormalizedDataPath(),SourceType.HDFS);
  long avgFileSize=actualFileSize / filePartCnt;
  if (isGzip && filePartCnt <= 20) {
    return (long)(avgFileSize * 1.2d);
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(modelConfig.getNormalizeType(),this.columnConfigList);
  int candidateCount=inputOutputIndex[2];
  long maxCombineSize=CommonUtils.isTreeModel(modelConfig.getAlgorithm()) ? 209715200L : 168435456L;
  if (modelConfig.isClassification()) {
    return maxCombineSize;
  }
  double ratio=candidateCount / 600d;
  if (ratio > 2d) {
    ratio=0.85 * ratio;
  }
  long finalCombineSize=Double.valueOf((maxCombineSize * 1d * (ratio))).longValue();
  if (finalCombineSize != 0L && actualFileSize / finalCombineSize < 25) {
    finalCombineSize/=2;
  }
  return finalCombineSize;
}",0.9887152777777778
31646,"private Object convertItemValue(Map<String,MetaItem> metaWarehouse,String itemKey,String itemValueStr) throws ShifuException {
  MetaItem itemMeta=metaWarehouse.get(itemKey);
  if (itemMeta == null) {
    return null;
  }
  itemValueStr=itemValueStr.trim();
  if (itemMeta.getType().equals(""String_Node_Str"")) {
    return itemValueStr;
  }
 else   if (itemMeta.getType().equals(""String_Node_Str"")) {
    try {
      return Double.parseDouble(itemValueStr);
    }
 catch (    NumberFormatException e) {
      LOG.error(""String_Node_Str"",itemKey,itemValueStr);
      throw new ShifuException(ShifuErrorCode.ERROR_GRID_SEARCH_FILE_CONFIG);
    }
  }
 else   if (itemMeta.getType().equals(""String_Node_Str"")) {
    return itemValueStr.equalsIgnoreCase(""String_Node_Str"");
  }
 else   if (itemMeta.getType().equals(""String_Node_Str"")) {
    if (itemKey.equals(""String_Node_Str"") && itemMeta.getElementType().equals(""String_Node_Str"") && itemValueStr.matches(""String_Node_Str"")) {
      List<Integer> itemValue=new ArrayList<Integer>();
      itemValueStr=itemValueStr.substring(1,itemValueStr.length() - 1);
      String[] splits=itemValueStr.split(""String_Node_Str"");
      for (      String valueSplit : splits) {
        itemValue.add(Integer.parseInt(valueSplit));
      }
      return itemValue;
    }
 else     if (itemKey.equals(""String_Node_Str"") && itemMeta.getElementType().equals(""String_Node_Str"") && itemValueStr.matches(""String_Node_Str"")) {
      List<String> itemValue=new ArrayList<String>();
      itemValueStr=itemValueStr.substring(1,itemValueStr.length() - 1);
      String[] splits=itemValueStr.split(""String_Node_Str"");
      for (      String valueSplit : splits) {
        itemValue.add(valueSplit.trim());
      }
      return itemValue;
    }
  }
  throw new ShifuException(ShifuErrorCode.ERROR_GRID_SEARCH_FILE_CONFIG);
}","private Object convertItemValue(Map<String,MetaItem> metaWarehouse,String itemKey,String itemValueStr) throws ShifuException {
  MetaItem itemMeta=metaWarehouse.get(getItemKeyInMeta(itemKey));
  if (itemMeta == null) {
    return null;
  }
  itemValueStr=itemValueStr.trim();
  if (itemMeta.getType().equals(""String_Node_Str"")) {
    return itemValueStr;
  }
 else   if (itemMeta.getType().equals(""String_Node_Str"")) {
    try {
      return Double.parseDouble(itemValueStr);
    }
 catch (    NumberFormatException e) {
      LOG.error(""String_Node_Str"",itemKey,itemValueStr);
      throw new ShifuException(ShifuErrorCode.ERROR_GRID_SEARCH_FILE_CONFIG);
    }
  }
 else   if (itemMeta.getType().equals(""String_Node_Str"")) {
    return itemValueStr.equalsIgnoreCase(""String_Node_Str"");
  }
 else   if (itemMeta.getType().equals(""String_Node_Str"")) {
    if (itemKey.equals(""String_Node_Str"") && itemMeta.getElementType().equals(""String_Node_Str"") && itemValueStr.matches(""String_Node_Str"")) {
      List<Integer> itemValue=new ArrayList<Integer>();
      itemValueStr=itemValueStr.substring(1,itemValueStr.length() - 1);
      String[] splits=itemValueStr.split(""String_Node_Str"");
      for (      String valueSplit : splits) {
        itemValue.add(Integer.parseInt(valueSplit));
      }
      return itemValue;
    }
 else     if (itemKey.equals(""String_Node_Str"") && itemMeta.getElementType().equals(""String_Node_Str"") && itemValueStr.matches(""String_Node_Str"")) {
      List<String> itemValue=new ArrayList<String>();
      itemValueStr=itemValueStr.substring(1,itemValueStr.length() - 1);
      String[] splits=itemValueStr.split(""String_Node_Str"");
      for (      String valueSplit : splits) {
        itemValue.add(valueSplit.trim());
      }
      return itemValue;
    }
  }
  throw new ShifuException(ShifuErrorCode.ERROR_GRID_SEARCH_FILE_CONFIG);
}",0.9946062567421792
31647,"/** 
 * Load model configuration from the path and the source type.
 * @param path model file path
 * @param sourceType source type of model file
 * @return model config instance
 * @throws IOException if any IO exception in parsing json.
 * @throws IllegalArgumentException if  {@code path} is null or empty, if sourceType is null.
 */
public static ModelConfig loadModelConfig(String path,SourceType sourceType) throws IOException {
  ModelConfig modelConfig=loadJSON(path,sourceType,ModelConfig.class);
  if (modelConfig.getTrain().getGridConfigFile() != null) {
    modelConfig.getTrain().setGridConfigFileContent(loadFileContent(path,sourceType));
  }
  return modelConfig;
}","/** 
 * Load model configuration from the path and the source type.
 * @param path model file path
 * @param sourceType source type of model file
 * @return model config instance
 * @throws IOException if any IO exception in parsing json.
 * @throws IllegalArgumentException if  {@code path} is null or empty, if sourceType is null.
 */
public static ModelConfig loadModelConfig(String path,SourceType sourceType) throws IOException {
  ModelConfig modelConfig=loadJSON(path,sourceType,ModelConfig.class);
  if (modelConfig.getTrain().getGridConfigFile() != null) {
    modelConfig.getTrain().setGridConfigFileContent(loadFileContent(modelConfig.getTrain().getGridConfigFile(),sourceType));
  }
  return modelConfig;
}",0.9670958512160228
31648,"/** 
 * Run evaluation per EvalConfig.
 * @param evalConfig the evaluation config instance.
 * @throws IOException when any IO exception
 */
private void runEval(EvalConfig evalConfig) throws IOException {
  validateEvalColumnConfig(evalConfig);
  String evalSetPath=pathFinder.getEvalSetPath(evalConfig,SourceType.LOCAL);
  FileUtils.forceMkdir(new File(evalSetPath));
  syncDataToHdfs(evalConfig.getDataSet().getSource());
switch (modelConfig.getBasic().getRunMode()) {
case DIST:
case MAPRED:
    runDistEval(evalConfig);
  break;
case LOCAL:
runAkkaEval(evalConfig);
break;
default :
break;
}
}","/** 
 * Run evaluation per EvalConfig.
 * @param evalConfig the evaluation config instance.
 * @throws IOException when any IO exception
 */
private void runEval(EvalConfig evalConfig) throws IOException {
synchronized (this) {
    validateEvalColumnConfig(evalConfig);
    String evalSetPath=pathFinder.getEvalSetPath(evalConfig,SourceType.LOCAL);
    FileUtils.forceMkdir(new File(evalSetPath));
    syncDataToHdfs(evalConfig.getDataSet().getSource());
  }
switch (modelConfig.getBasic().getRunMode()) {
case DIST:
case MAPRED:
    runDistEval(evalConfig);
  break;
case LOCAL:
runAkkaEval(evalConfig);
break;
default :
break;
}
}",0.9723577235772358
31649,"private Tuple buildTuple(Tuple input,TupleFactory tupleFactory,String tag,int i,int finalIndex,DataPurifier dataPurifier) throws ExecException {
  if (dataPurifier != null) {
    Boolean isFilter=dataPurifier.isFilter(input);
    if (!isFilter) {
      return null;
    }
  }
  Tuple tuple=tupleFactory.newTuple(TOTAL_COLUMN_CNT);
  tuple.set(COLUMN_ID_INDX,finalIndex);
  tuple.set(COLUMN_VAL_INDX,(input.get(i) == null ? null : input.get(i).toString()));
  if (modelConfig.isRegression()) {
    if (super.posTagSet.contains(tag)) {
      tuple.set(COLUMN_TAG_INDX,true);
    }
    if (super.negTagSet.contains(tag)) {
      tuple.set(COLUMN_TAG_INDX,false);
    }
  }
 else {
    tuple.set(COLUMN_TAG_INDX,true);
  }
  tuple.set(COLUMN_WEIGHT_INDX,getWeightColumnVal(input));
  if (this.isAppendRandom) {
    tuple.set(COLUMN_SEED_INDX,Math.abs(random.nextInt() % 300));
  }
  return tuple;
}","private Tuple buildTuple(Tuple input,TupleFactory tupleFactory,String tag,int i,int finalIndex) throws ExecException {
  Tuple tuple=tupleFactory.newTuple(TOTAL_COLUMN_CNT);
  tuple.set(COLUMN_ID_INDX,finalIndex);
  tuple.set(COLUMN_VAL_INDX,(input.get(i) == null ? null : input.get(i).toString()));
  if (modelConfig.isRegression()) {
    if (super.posTagSet.contains(tag)) {
      tuple.set(COLUMN_TAG_INDX,true);
    }
    if (super.negTagSet.contains(tag)) {
      tuple.set(COLUMN_TAG_INDX,false);
    }
  }
 else {
    tuple.set(COLUMN_TAG_INDX,true);
  }
  tuple.set(COLUMN_WEIGHT_INDX,getWeightColumnVal(input));
  if (this.isAppendRandom) {
    tuple.set(COLUMN_SEED_INDX,Math.abs(random.nextInt() % 300));
  }
  return tuple;
}",0.9037400367872472
31650,"public AddColumnNumAndFilterUDF(String source,String pathModelConfig,String pathColumnConfig,String withScoreStr,String isAppendRandom) throws Exception {
  super(source,pathModelConfig,pathColumnConfig,withScoreStr);
  this.isAppendRandom=Boolean.TRUE.toString().equalsIgnoreCase(isAppendRandom);
  String filterExpressions=""String_Node_Str"";
  if (UDFContext.getUDFContext() != null && UDFContext.getUDFContext().getJobConf() != null) {
    filterExpressions=UDFContext.getUDFContext().getJobConf().get(""String_Node_Str"");
  }
 else {
    filterExpressions=Environment.getProperty(""String_Node_Str"");
  }
  if (StringUtils.isNotBlank(filterExpressions)) {
    this.isForExpressions=true;
    String[] splits=CommonUtils.split(filterExpressions,Constants.SHIFU_STATS_FILTER_EXPRESSIONS_DELIMETER);
    this.dataPurifiers=new ArrayList<DataPurifier>(splits.length);
    for (    String split : splits) {
      this.dataPurifiers.add(new DataPurifier(modelConfig,split));
    }
  }
}","public AddColumnNumAndFilterUDF(String source,String pathModelConfig,String pathColumnConfig,String withScoreStr,String isAppendRandom,String filterExpressions) throws Exception {
  super(source,pathModelConfig,pathColumnConfig,withScoreStr);
  this.isAppendRandom=Boolean.TRUE.toString().equalsIgnoreCase(isAppendRandom);
  log.info(""String_Node_Str"" + pathColumnConfig + ""String_Node_Str""+ filterExpressions);
  if (UDFContext.getUDFContext() != null && UDFContext.getUDFContext().getJobConf() != null) {
    filterExpressions=UDFContext.getUDFContext().getJobConf().get(""String_Node_Str"");
  }
 else {
    filterExpressions=Environment.getProperty(""String_Node_Str"");
  }
  if (StringUtils.isNotBlank(filterExpressions)) {
    this.isForExpressions=true;
    String[] splits=CommonUtils.split(filterExpressions,Constants.SHIFU_STATS_FILTER_EXPRESSIONS_DELIMETER);
    this.dataPurifiers=new ArrayList<DataPurifier>(splits.length);
    for (    String split : splits) {
      this.dataPurifiers.add(new DataPurifier(modelConfig,split));
    }
    log.info(""String_Node_Str"" + filterExpressions + ""String_Node_Str""+ dataPurifiers.size());
  }
}",0.8998589562764457
31651,"@SuppressWarnings(""String_Node_Str"") @Override public DataBag exec(Tuple input) throws IOException {
  DataBag bag=BagFactory.getInstance().newDefaultBag();
  TupleFactory tupleFactory=TupleFactory.getInstance();
  if (input == null) {
    return null;
  }
  int size=input.size();
  if (size == 0 || input.size() != this.columnConfigList.size()) {
    log.info(""String_Node_Str"" + input.size() + ""String_Node_Str""+ columnConfigList.size());
    throw new ShifuException(ShifuErrorCode.ERROR_NO_EQUAL_COLCONFIG);
  }
  if (input.get(tagColumnNum) == null) {
    log.info(""String_Node_Str"" + tagColumnNum + ""String_Node_Str""+ input.size()+ ""String_Node_Str""+ columnConfigList.size()+ ""String_Node_Str""+ input.toDelimitedString(""String_Node_Str"")+ ""String_Node_Str""+ input.get(tagColumnNum));
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  String tag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(tag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  Double rate=modelConfig.getBinningSampleRate();
  if (modelConfig.isBinningSampleNegOnly()) {
    if (super.negTagSet.contains(tag) && random.nextDouble() > rate) {
      return null;
    }
  }
 else {
    if (random.nextDouble() > rate) {
      return null;
    }
  }
  for (int i=0; i < size; i++) {
    ColumnConfig config=columnConfigList.get(i);
    boolean isPositive=false;
    if (modelConfig.isRegression()) {
      if (super.posTagSet.contains(tag)) {
        isPositive=true;
      }
 else       if (super.negTagSet.contains(tag)) {
        isPositive=false;
      }
 else {
        continue;
      }
    }
    if (!isValidRecord(modelConfig.isRegression(),isPositive,config)) {
      continue;
    }
    Tuple tuple=buildTuple(input,tupleFactory,tag,i,i,null);
    bag.add(tuple);
    if (this.isForExpressions) {
      for (int j=0; j < this.dataPurifiers.size(); j++) {
        DataPurifier dataPurifier=this.dataPurifiers.get(j);
        Tuple newTuple=buildTuple(input,tupleFactory,tag,i,(j + 1) * size + i,dataPurifier);
        if (newTuple != null) {
          bag.add(newTuple);
        }
      }
    }
  }
  return bag;
}","@SuppressWarnings(""String_Node_Str"") @Override public DataBag exec(Tuple input) throws IOException {
  DataBag bag=BagFactory.getInstance().newDefaultBag();
  TupleFactory tupleFactory=TupleFactory.getInstance();
  if (input == null) {
    return null;
  }
  int size=input.size();
  if (size == 0 || input.size() != this.columnConfigList.size()) {
    log.info(""String_Node_Str"" + input.size() + ""String_Node_Str""+ columnConfigList.size());
    throw new ShifuException(ShifuErrorCode.ERROR_NO_EQUAL_COLCONFIG);
  }
  if (input.get(tagColumnNum) == null) {
    log.info(""String_Node_Str"" + tagColumnNum + ""String_Node_Str""+ input.size()+ ""String_Node_Str""+ columnConfigList.size()+ ""String_Node_Str""+ input.toDelimitedString(""String_Node_Str"")+ ""String_Node_Str""+ input.get(tagColumnNum));
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  String tag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(tag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  Double rate=modelConfig.getBinningSampleRate();
  if (modelConfig.isBinningSampleNegOnly()) {
    if (super.negTagSet.contains(tag) && random.nextDouble() > rate) {
      return null;
    }
  }
 else {
    if (random.nextDouble() > rate) {
      return null;
    }
  }
  List<Boolean> filterResultList=null;
  if (this.isForExpressions) {
    filterResultList=new ArrayList<Boolean>();
    for (int j=0; j < this.dataPurifiers.size(); j++) {
      DataPurifier dataPurifier=this.dataPurifiers.get(j);
      filterResultList.add(dataPurifier.isFilter(input));
    }
  }
  for (int i=0; i < size; i++) {
    ColumnConfig config=columnConfigList.get(i);
    boolean isPositive=false;
    if (modelConfig.isRegression()) {
      if (super.posTagSet.contains(tag)) {
        isPositive=true;
      }
 else       if (super.negTagSet.contains(tag)) {
        isPositive=false;
      }
 else {
        continue;
      }
    }
    if (!isValidRecord(modelConfig.isRegression(),isPositive,config)) {
      continue;
    }
    bag.add(buildTuple(input,tupleFactory,tag,i,i));
    if (this.isForExpressions) {
      for (int j=0; j < this.dataPurifiers.size(); j++) {
        Boolean isFilter=filterResultList.get(j);
        if (isFilter != null && isFilter) {
          bag.add(buildTuple(input,tupleFactory,tag,i,(j + 1) * size + i));
        }
      }
    }
  }
  return bag;
}",0.7264973832138011
31652,"public TrainUpdater(ModelConfig modelConfig) throws IOException {
  super(modelConfig);
}","public TrainUpdater(ModelConfig modelConfig) throws IOException {
  super(modelConfig);
  segs=modelConfig.getSegmentFilterExpressions();
  if (segs.size() > 0) {
    this.isForSegs=true;
  }
  this.setMeta=new HashSet<NSColumn>();
  if (CollectionUtils.isNotEmpty(modelConfig.getMetaColumnNames())) {
    for (    String meta : modelConfig.getMetaColumnNames()) {
      setMeta.add(new NSColumn(meta));
      if (this.isForSegs) {
        for (int i=0; i < segs.size(); i++) {
          setMeta.add(new NSColumn(meta + ""String_Node_Str"" + (i + 1)));
        }
      }
    }
  }
  setHybridColumns=new HashSet<NSColumn>();
  hybridColumnNames=modelConfig.getHybridColumnNames();
  if (hybridColumnNames != null && hybridColumnNames.size() > 0) {
    for (    Entry<String,Double> entry : hybridColumnNames.entrySet()) {
      setHybridColumns.add(new NSColumn(entry.getKey()));
      if (this.isForSegs) {
        for (int i=0; i < segs.size(); i++) {
          setHybridColumns.add(new NSColumn(entry.getKey() + ""String_Node_Str"" + (i + 1)));
        }
      }
    }
  }
}",0.153184165232358
31653,"public VarSelUpdater(ModelConfig modelConfig) throws IOException {
  super(modelConfig);
}","public VarSelUpdater(ModelConfig modelConfig) throws IOException {
  super(modelConfig);
  segs=modelConfig.getSegmentFilterExpressions();
  if (segs.size() > 0) {
    this.isForSegs=true;
  }
  this.setMeta=new HashSet<NSColumn>();
  if (CollectionUtils.isNotEmpty(modelConfig.getMetaColumnNames())) {
    for (    String meta : modelConfig.getMetaColumnNames()) {
      setMeta.add(new NSColumn(meta));
      if (this.isForSegs) {
        for (int i=0; i < segs.size(); i++) {
          setMeta.add(new NSColumn(meta + ""String_Node_Str"" + (i + 1)));
        }
      }
    }
  }
  setHybridColumns=new HashSet<NSColumn>();
  hybridColumnNames=modelConfig.getHybridColumnNames();
  if (hybridColumnNames != null && hybridColumnNames.size() > 0) {
    for (    Entry<String,Double> entry : hybridColumnNames.entrySet()) {
      setHybridColumns.add(new NSColumn(entry.getKey()));
      if (this.isForSegs) {
        for (int i=0; i < segs.size(); i++) {
          setHybridColumns.add(new NSColumn(entry.getKey() + ""String_Node_Str"" + (i + 1)));
        }
      }
    }
  }
}",0.1546391752577319
31654,"private void populateStats(String[] units,String tag,Double weight,int columnIndex,int newCCIndex){
  ColumnConfig columnConfig=this.columnConfigList.get(columnIndex);
  CountAndFrequentItems countAndFrequentItems=this.variableCountMap.get(newCCIndex);
  if (countAndFrequentItems == null) {
    countAndFrequentItems=new CountAndFrequentItems();
    this.variableCountMap.put(newCCIndex,countAndFrequentItems);
  }
  countAndFrequentItems.offer(this.missingOrInvalidValues,units[columnIndex]);
  boolean isMissingValue=false;
  boolean isInvalidValue=false;
  BinningInfoWritable binningInfoWritable=this.columnBinningInfo.get(newCCIndex);
  if (binningInfoWritable == null) {
    return;
  }
  binningInfoWritable.setTotalCount(binningInfoWritable.getTotalCount() + 1L);
  if (columnConfig.isHybrid()) {
    int binNum=0;
    if (units[columnIndex] == null || missingOrInvalidValues.contains(units[columnIndex].toLowerCase())) {
      isMissingValue=true;
    }
    String str=StringUtils.trim(units[columnIndex]);
    double douVal=CommonUtils.parseNumber(str);
    Double hybridThreshould=columnConfig.getHybridThreshold();
    if (hybridThreshould == null) {
      hybridThreshould=Double.NEGATIVE_INFINITY;
    }
    boolean isCategory=Double.isNaN(douVal) || douVal < hybridThreshould;
    boolean isNumber=!Double.isNaN(douVal);
    if (isMissingValue) {
      binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
      binNum=binningInfoWritable.getBinCategories().size() + binningInfoWritable.getBinBoundaries().size();
    }
 else     if (isCategory) {
      binNum=quickLocateCategoricalBin(this.categoricalBinMap.get(newCCIndex),str);
      if (binNum < 0) {
        isInvalidValue=true;
      }
      if (isInvalidValue) {
        binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
        binNum=binningInfoWritable.getBinCategories().size() + binningInfoWritable.getBinBoundaries().size();
      }
 else {
        binNum+=binningInfoWritable.getBinBoundaries().size();
        ;
      }
    }
 else     if (isNumber) {
      binNum=getBinNum(binningInfoWritable.getBinBoundaries(),douVal);
      if (binNum == -1) {
        throw new RuntimeException(""String_Node_Str"");
      }
      binningInfoWritable.setSum(binningInfoWritable.getSum() + douVal);
      double squaredVal=douVal * douVal;
      binningInfoWritable.setSquaredSum(binningInfoWritable.getSquaredSum() + squaredVal);
      binningInfoWritable.setTripleSum(binningInfoWritable.getTripleSum() + squaredVal * douVal);
      binningInfoWritable.setQuarticSum(binningInfoWritable.getQuarticSum() + squaredVal * squaredVal);
      if (Double.compare(binningInfoWritable.getMax(),douVal) < 0) {
        binningInfoWritable.setMax(douVal);
      }
      if (Double.compare(binningInfoWritable.getMin(),douVal) > 0) {
        binningInfoWritable.setMin(douVal);
      }
    }
    if (posTags.contains(tag)) {
      binningInfoWritable.getBinCountPos()[binNum]+=1L;
      binningInfoWritable.getBinWeightPos()[binNum]+=weight;
    }
 else     if (negTags.contains(tag)) {
      binningInfoWritable.getBinCountNeg()[binNum]+=1L;
      binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
    }
  }
 else   if (columnConfig.isCategorical()) {
    int lastBinIndex=binningInfoWritable.getBinCategories().size();
    int binNum=0;
    if (units[columnIndex] == null || missingOrInvalidValues.contains(units[columnIndex].toLowerCase())) {
      isMissingValue=true;
    }
 else {
      String str=StringUtils.trim(units[columnIndex]);
      binNum=quickLocateCategoricalBin(this.categoricalBinMap.get(columnIndex),str);
      if (binNum < 0) {
        isInvalidValue=true;
      }
    }
    if (isInvalidValue || isMissingValue) {
      binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
      binNum=lastBinIndex;
    }
    if (modelConfig.isRegression()) {
      if (posTags.contains(tag)) {
        binningInfoWritable.getBinCountPos()[binNum]+=1L;
        binningInfoWritable.getBinWeightPos()[binNum]+=weight;
      }
 else       if (negTags.contains(tag)) {
        binningInfoWritable.getBinCountNeg()[binNum]+=1L;
        binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
      }
    }
 else {
      binningInfoWritable.getBinCountPos()[binNum]+=1L;
      binningInfoWritable.getBinWeightPos()[binNum]+=weight;
    }
  }
 else   if (columnConfig.isNumerical()) {
    int lastBinIndex=binningInfoWritable.getBinBoundaries().size();
    double douVal=0.0;
    if (units[columnIndex] == null || units[columnIndex].length() == 0) {
      isMissingValue=true;
    }
 else {
      try {
        douVal=Double.parseDouble(units[columnIndex].trim());
      }
 catch (      Exception e) {
        isInvalidValue=true;
      }
    }
    if (Double.compare(douVal,modelConfig.getNumericalValueThreshold()) > 0) {
      isInvalidValue=true;
    }
    if (isInvalidValue || isMissingValue) {
      binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
      if (modelConfig.isRegression()) {
        if (posTags.contains(tag)) {
          binningInfoWritable.getBinCountPos()[lastBinIndex]+=1L;
          binningInfoWritable.getBinWeightPos()[lastBinIndex]+=weight;
        }
 else         if (negTags.contains(tag)) {
          binningInfoWritable.getBinCountNeg()[lastBinIndex]+=1L;
          binningInfoWritable.getBinWeightNeg()[lastBinIndex]+=weight;
        }
      }
    }
 else {
      int binNum=getBinNum(binningInfoWritable.getBinBoundaries(),units[columnIndex]);
      if (binNum == -1) {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (modelConfig.isRegression()) {
        if (posTags.contains(tag)) {
          binningInfoWritable.getBinCountPos()[binNum]+=1L;
          binningInfoWritable.getBinWeightPos()[binNum]+=weight;
        }
 else         if (negTags.contains(tag)) {
          binningInfoWritable.getBinCountNeg()[binNum]+=1L;
          binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
        }
      }
      binningInfoWritable.setSum(binningInfoWritable.getSum() + douVal);
      double squaredVal=douVal * douVal;
      binningInfoWritable.setSquaredSum(binningInfoWritable.getSquaredSum() + squaredVal);
      binningInfoWritable.setTripleSum(binningInfoWritable.getTripleSum() + squaredVal * douVal);
      binningInfoWritable.setQuarticSum(binningInfoWritable.getQuarticSum() + squaredVal * squaredVal);
      if (Double.compare(binningInfoWritable.getMax(),douVal) < 0) {
        binningInfoWritable.setMax(douVal);
      }
      if (Double.compare(binningInfoWritable.getMin(),douVal) > 0) {
        binningInfoWritable.setMin(douVal);
      }
    }
  }
}","private void populateStats(String[] units,String tag,Double weight,int columnIndex,int newCCIndex){
  ColumnConfig columnConfig=this.columnConfigList.get(columnIndex);
  CountAndFrequentItems countAndFrequentItems=this.variableCountMap.get(newCCIndex);
  if (countAndFrequentItems == null) {
    countAndFrequentItems=new CountAndFrequentItems();
    this.variableCountMap.put(newCCIndex,countAndFrequentItems);
  }
  countAndFrequentItems.offer(this.missingOrInvalidValues,units[columnIndex]);
  boolean isMissingValue=false;
  boolean isInvalidValue=false;
  BinningInfoWritable binningInfoWritable=this.columnBinningInfo.get(newCCIndex);
  if (binningInfoWritable == null) {
    return;
  }
  binningInfoWritable.setTotalCount(binningInfoWritable.getTotalCount() + 1L);
  if (columnConfig.isHybrid()) {
    int binNum=0;
    if (units[columnIndex] == null || missingOrInvalidValues.contains(units[columnIndex].toLowerCase())) {
      isMissingValue=true;
    }
    String str=StringUtils.trim(units[columnIndex]);
    double douVal=CommonUtils.parseNumber(str);
    Double hybridThreshould=columnConfig.getHybridThreshold();
    if (hybridThreshould == null) {
      hybridThreshould=Double.NEGATIVE_INFINITY;
    }
    boolean isCategory=Double.isNaN(douVal) || douVal < hybridThreshould;
    boolean isNumber=!Double.isNaN(douVal);
    if (isMissingValue) {
      binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
      binNum=binningInfoWritable.getBinCategories().size() + binningInfoWritable.getBinBoundaries().size();
    }
 else     if (isCategory) {
      binNum=quickLocateCategoricalBin(this.categoricalBinMap.get(newCCIndex),str);
      if (binNum < 0) {
        isInvalidValue=true;
      }
      if (isInvalidValue) {
        binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
        binNum=binningInfoWritable.getBinCategories().size() + binningInfoWritable.getBinBoundaries().size();
      }
 else {
        binNum+=binningInfoWritable.getBinBoundaries().size();
        ;
      }
    }
 else     if (isNumber) {
      binNum=getBinNum(binningInfoWritable.getBinBoundaries(),douVal);
      if (binNum == -1) {
        throw new RuntimeException(""String_Node_Str"");
      }
      binningInfoWritable.setSum(binningInfoWritable.getSum() + douVal);
      double squaredVal=douVal * douVal;
      binningInfoWritable.setSquaredSum(binningInfoWritable.getSquaredSum() + squaredVal);
      binningInfoWritable.setTripleSum(binningInfoWritable.getTripleSum() + squaredVal * douVal);
      binningInfoWritable.setQuarticSum(binningInfoWritable.getQuarticSum() + squaredVal * squaredVal);
      if (Double.compare(binningInfoWritable.getMax(),douVal) < 0) {
        binningInfoWritable.setMax(douVal);
      }
      if (Double.compare(binningInfoWritable.getMin(),douVal) > 0) {
        binningInfoWritable.setMin(douVal);
      }
    }
    if (posTags.contains(tag)) {
      binningInfoWritable.getBinCountPos()[binNum]+=1L;
      binningInfoWritable.getBinWeightPos()[binNum]+=weight;
    }
 else     if (negTags.contains(tag)) {
      binningInfoWritable.getBinCountNeg()[binNum]+=1L;
      binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
    }
  }
 else   if (columnConfig.isCategorical()) {
    int lastBinIndex=binningInfoWritable.getBinCategories().size();
    int binNum=0;
    if (units[columnIndex] == null || missingOrInvalidValues.contains(units[columnIndex].toLowerCase())) {
      isMissingValue=true;
    }
 else {
      String str=StringUtils.trim(units[columnIndex]);
      binNum=quickLocateCategoricalBin(this.categoricalBinMap.get(newCCIndex),str);
      if (binNum < 0) {
        isInvalidValue=true;
      }
    }
    if (isInvalidValue || isMissingValue) {
      binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
      binNum=lastBinIndex;
    }
    if (modelConfig.isRegression()) {
      if (posTags.contains(tag)) {
        binningInfoWritable.getBinCountPos()[binNum]+=1L;
        binningInfoWritable.getBinWeightPos()[binNum]+=weight;
      }
 else       if (negTags.contains(tag)) {
        binningInfoWritable.getBinCountNeg()[binNum]+=1L;
        binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
      }
    }
 else {
      binningInfoWritable.getBinCountPos()[binNum]+=1L;
      binningInfoWritable.getBinWeightPos()[binNum]+=weight;
    }
  }
 else   if (columnConfig.isNumerical()) {
    int lastBinIndex=binningInfoWritable.getBinBoundaries().size();
    double douVal=0.0;
    if (units[columnIndex] == null || units[columnIndex].length() == 0) {
      isMissingValue=true;
    }
 else {
      try {
        douVal=Double.parseDouble(units[columnIndex].trim());
      }
 catch (      Exception e) {
        isInvalidValue=true;
      }
    }
    if (Double.compare(douVal,modelConfig.getNumericalValueThreshold()) > 0) {
      isInvalidValue=true;
    }
    if (isInvalidValue || isMissingValue) {
      binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
      if (modelConfig.isRegression()) {
        if (posTags.contains(tag)) {
          binningInfoWritable.getBinCountPos()[lastBinIndex]+=1L;
          binningInfoWritable.getBinWeightPos()[lastBinIndex]+=weight;
        }
 else         if (negTags.contains(tag)) {
          binningInfoWritable.getBinCountNeg()[lastBinIndex]+=1L;
          binningInfoWritable.getBinWeightNeg()[lastBinIndex]+=weight;
        }
      }
    }
 else {
      int binNum=getBinNum(binningInfoWritable.getBinBoundaries(),units[columnIndex]);
      if (binNum == -1) {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (modelConfig.isRegression()) {
        if (posTags.contains(tag)) {
          binningInfoWritable.getBinCountPos()[binNum]+=1L;
          binningInfoWritable.getBinWeightPos()[binNum]+=weight;
        }
 else         if (negTags.contains(tag)) {
          binningInfoWritable.getBinCountNeg()[binNum]+=1L;
          binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
        }
      }
      binningInfoWritable.setSum(binningInfoWritable.getSum() + douVal);
      double squaredVal=douVal * douVal;
      binningInfoWritable.setSquaredSum(binningInfoWritable.getSquaredSum() + squaredVal);
      binningInfoWritable.setTripleSum(binningInfoWritable.getTripleSum() + squaredVal * douVal);
      binningInfoWritable.setQuarticSum(binningInfoWritable.getQuarticSum() + squaredVal * squaredVal);
      if (Double.compare(binningInfoWritable.getMax(),douVal) < 0) {
        binningInfoWritable.setMax(douVal);
      }
      if (Double.compare(binningInfoWritable.getMin(),douVal) > 0) {
        binningInfoWritable.setMin(douVal);
      }
    }
  }
}",0.9991799000969208
31655,"/** 
 * Mapper implementation includes: 1. Invalid data purifier 2. Column statistics update.
 */
@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (!this.dataPurifier.isFilter(valueStr)) {
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    return;
  }
  String[] units=CommonUtils.split(valueStr,this.dataSetDelimiter);
  String tag=CommonUtils.trimTag(units[this.tagColumnNum]);
  if (modelConfig.isRegression()) {
    if (tag == null || (!posTags.contains(tag) && !negTags.contains(tag))) {
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      return;
    }
  }
 else {
    if (tag == null || (!tags.contains(tag))) {
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      return;
    }
  }
  Double weight=1.0;
  try {
    weight=(this.weightedColumnNum == -1 ? 1.0d : Double.valueOf(units[this.weightedColumnNum]));
    if (weight < 0) {
      weightExceptions+=1;
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      if (weightExceptions > 5000 && this.isThrowforWeightException) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
  }
 catch (  NumberFormatException e) {
    weightExceptions+=1;
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    if (weightExceptions > 5000 && this.isThrowforWeightException) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  for (int i=0; i < units.length; i++) {
    populateStats(units,tag,weight,i,i);
    if (this.isForExpressions) {
      for (int j=0; j < this.expressionDataPurifiers.size(); j++) {
        DataPurifier dp=this.expressionDataPurifiers.get(j);
        if (dp.isFilter(valueStr)) {
          populateStats(units,tag,weight,i,(j + 1) * units.length + i);
        }
      }
    }
  }
}","/** 
 * Mapper implementation includes: 1. Invalid data purifier 2. Column statistics update.
 */
@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (!this.dataPurifier.isFilter(valueStr)) {
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    return;
  }
  String[] units=CommonUtils.split(valueStr,this.dataSetDelimiter);
  String tag=CommonUtils.trimTag(units[this.tagColumnNum]);
  if (modelConfig.isRegression()) {
    if (tag == null || (!posTags.contains(tag) && !negTags.contains(tag))) {
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      return;
    }
  }
 else {
    if (tag == null || (!tags.contains(tag))) {
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      return;
    }
  }
  Double weight=1.0;
  try {
    weight=(this.weightedColumnNum == -1 ? 1.0d : Double.valueOf(units[this.weightedColumnNum]));
    if (weight < 0) {
      weightExceptions+=1;
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      if (weightExceptions > 5000 && this.isThrowforWeightException) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
  }
 catch (  NumberFormatException e) {
    weightExceptions+=1;
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    if (weightExceptions > 5000 && this.isThrowforWeightException) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  List<Boolean> filterResults=null;
  if (this.isForExpressions) {
    filterResults=new ArrayList<Boolean>();
    for (int j=0; j < this.expressionDataPurifiers.size(); j++) {
      DataPurifier dp=this.expressionDataPurifiers.get(j);
      filterResults.add(dp.isFilter(valueStr));
    }
  }
  for (int i=0; i < units.length; i++) {
    populateStats(units,tag,weight,i,i);
    if (this.isForExpressions) {
      for (int j=0; j < this.expressionDataPurifiers.size(); j++) {
        Boolean filter=filterResults.get(j);
        if (filter != null && filter) {
          populateStats(units,tag,weight,i,(j + 1) * units.length + i);
        }
      }
    }
  }
}",0.9000211371803002
31656,"public static void save(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,List<List<TreeNode>> baggingTrees,String loss,int inputCount,FileSystem fs,Path output) throws IOException {
  DataOutputStream fos=null;
  try {
    fos=new DataOutputStream(new GZIPOutputStream(fs.create(output)));
    LOG.info(""String_Node_Str"",baggingTrees.get(0).size(),output);
    fos.writeInt(CommonConstants.TREE_FORMAT_VERSION);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(loss);
    fos.writeBoolean(modelConfig.isClassification());
    fos.writeBoolean(modelConfig.getTrain().isOneVsAll());
    fos.writeInt(inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      }
      if (columnConfig.isCategorical() && CollectionUtils.isNotEmpty(columnConfig.getBinCategory())) {
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),columnConfig.getBinCategory());
      }
      if (columnConfig.isNumerical() && columnConfig.getMean() != null) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    if (columnIndexNameMapping.size() == 0) {
      for (      ColumnConfig columnConfig : columnConfigList) {
        if (CommonUtils.isGoodCandidate(columnConfig)) {
          columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
        }
      }
    }
    fos.writeInt(numericalMeanMapping.size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue() == null ? 0d : entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      List<String> categories=entry.getValue();
      if (categories != null) {
        fos.writeInt(entry.getKey());
        fos.writeInt(categories.size());
        for (        String category : categories) {
          if (category.length() > Constants.MAX_CATEGORICAL_VAL_LEN) {
            int pos=category.lastIndexOf(Constants.CATEGORICAL_GROUP_VAL_DELIMITER,Constants.MAX_CATEGORICAL_VAL_LEN);
            if (pos >= 0) {
              category=category.substring(0,pos);
            }
 else {
              category=category.substring(0,Constants.MAX_CATEGORICAL_VAL_LEN);
            }
          }
          fos.writeUTF(category);
        }
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping(columnConfigList);
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    fos.writeInt(baggingTrees.size());
    for (int i=0; i < baggingTrees.size(); i++) {
      List<TreeNode> trees=baggingTrees.get(i);
      int treeLength=trees.size();
      fos.writeInt(treeLength);
      for (      TreeNode treeNode : trees) {
        treeNode.write(fos);
      }
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}","public static void save(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,List<List<TreeNode>> baggingTrees,String loss,int inputCount,FileSystem fs,Path output) throws IOException {
  DataOutputStream fos=null;
  try {
    fos=new DataOutputStream(new GZIPOutputStream(fs.create(output)));
    LOG.info(""String_Node_Str"",output);
    fos.writeInt(CommonConstants.TREE_FORMAT_VERSION);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(loss);
    fos.writeBoolean(modelConfig.isClassification());
    fos.writeBoolean(modelConfig.getTrain().isOneVsAll());
    fos.writeInt(inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      }
      if (columnConfig.isCategorical() && CollectionUtils.isNotEmpty(columnConfig.getBinCategory())) {
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),columnConfig.getBinCategory());
      }
      if (columnConfig.isNumerical() && columnConfig.getMean() != null) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    if (columnIndexNameMapping.size() == 0) {
      for (      ColumnConfig columnConfig : columnConfigList) {
        if (CommonUtils.isGoodCandidate(columnConfig)) {
          columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
        }
      }
    }
    fos.writeInt(numericalMeanMapping.size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue() == null ? 0d : entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      List<String> categories=entry.getValue();
      if (categories != null) {
        fos.writeInt(entry.getKey());
        fos.writeInt(categories.size());
        for (        String category : categories) {
          if (category.length() > Constants.MAX_CATEGORICAL_VAL_LEN) {
            int pos=category.lastIndexOf(Constants.CATEGORICAL_GROUP_VAL_DELIMITER,Constants.MAX_CATEGORICAL_VAL_LEN);
            if (pos >= 0) {
              category=category.substring(0,pos);
            }
 else {
              category=category.substring(0,Constants.MAX_CATEGORICAL_VAL_LEN);
            }
          }
          fos.writeUTF(category);
        }
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping(columnConfigList);
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    fos.writeInt(baggingTrees.size());
    for (int i=0; i < baggingTrees.size(); i++) {
      List<TreeNode> trees=baggingTrees.get(i);
      int treeLength=trees.size();
      fos.writeInt(treeLength);
      for (      TreeNode treeNode : trees) {
        treeNode.write(fos);
      }
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}",0.9963616763239456
31657,"private void init(MasterContext<DTMasterParams,DTWorkerParams> context){
  if (isInit.compareAndSet(false,true)) {
    loadConfigFiles(context.getProps());
    this.trainerId=context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID);
    GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
    this.isGsMode=gs.hasHyperParam();
    this.validParams=modelConfig.getParams();
    if (isGsMode) {
      this.validParams=gs.getParams(Integer.parseInt(trainerId));
    }
    Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
    if (kCrossValidation != null && kCrossValidation > 0) {
      isKFoldCV=true;
    }
    this.tmpModelsFolder=context.getProps().getProperty(CommonConstants.SHIFU_TMP_MODELS_FOLDER);
    this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
    this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
    int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
    this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
    try {
      Path progressLog=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE));
      if (ShifuFileUtils.isFileExists(progressLog,SourceType.HDFS)) {
        this.progressOutput=FileSystem.get(new Configuration()).append(progressLog);
      }
 else {
        this.progressOutput=FileSystem.get(new Configuration()).create(progressLog);
      }
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
    ;
  }
}","private void init(MasterContext<DTMasterParams,DTWorkerParams> context){
  if (isInit.compareAndSet(false,true)) {
    this.conf=new Configuration();
    loadConfigFiles(context.getProps());
    this.trainerId=context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID);
    GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
    this.isGsMode=gs.hasHyperParam();
    this.validParams=modelConfig.getParams();
    if (isGsMode) {
      this.validParams=gs.getParams(Integer.parseInt(trainerId));
    }
    Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
    if (kCrossValidation != null && kCrossValidation > 0) {
      isKFoldCV=true;
    }
    this.tmpModelsFolder=context.getProps().getProperty(CommonConstants.SHIFU_TMP_MODELS_FOLDER);
    this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
    this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
    int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
    this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
    try {
      Path progressLog=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE));
      if (ShifuFileUtils.isFileExists(progressLog,SourceType.HDFS)) {
        this.progressOutput=FileSystem.get(new Configuration()).append(progressLog);
      }
 else {
        this.progressOutput=FileSystem.get(new Configuration()).create(progressLog);
      }
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
    ;
  }
}",0.9894482966536028
31658,"/** 
 * Save tmp model to HDFS.
 */
private void saveTmpModelToHDFS(int iteration,List<TreeNode> trees){
  Path out=new Path(DTrainUtils.getTmpModelName(this.tmpModelsFolder,this.trainerId,iteration,modelConfig.getTrain().getAlgorithm().toLowerCase()));
  writeModelToFileSystem(trees,out);
}","/** 
 * Save tmp model to HDFS.
 */
private void saveTmpModelToHDFS(int iteration,List<TreeNode> trees){
  Path out=getTmpModelPath(iteration);
  writeModelToFileSystem(trees,out);
}",0.759493670886076
31659,"@Override public void postIteration(final MasterContext<DTMasterParams,DTWorkerParams> context){
  long start=System.currentTimeMillis();
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  final int currentIteration=context.getCurrentIteration();
  final int totalIteration=context.getTotalIteration();
  final boolean isHalt=context.getMasterResult().isHalt();
  if (isRF) {
    if (currentIteration % (tmpModelFactor * 2) == 0) {
      Thread tmpModelPersistThread=new Thread(new Runnable(){
        @Override public void run(){
          Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
          if (!isHalt && currentIteration != totalIteration) {
            writeModelToFileSystem(context.getMasterResult().getTrees(),out);
          }
          saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getTrees());
        }
      }
,""String_Node_Str"");
      tmpModelPersistThread.setDaemon(true);
      tmpModelPersistThread.start();
    }
  }
 else   if (isGBDT) {
    if (this.treeNum >= 10 && context.getMasterResult().isSwitchToNextTree() && (context.getMasterResult().getTmpTrees().size() - 1) % (this.treeNum / 10) == 0) {
      final List<TreeNode> trees=context.getMasterResult().getTmpTrees();
      if (trees.size() > 1) {
        Thread tmpModelPersistThread=new Thread(new Runnable(){
          @Override public void run(){
            List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
            Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
            if (!isHalt && currentIteration != totalIteration) {
              writeModelToFileSystem(subTrees,out);
            }
            saveTmpModelToHDFS(subTrees.size(),subTrees);
          }
        }
,""String_Node_Str"");
        tmpModelPersistThread.setDaemon(true);
        tmpModelPersistThread.start();
      }
    }
  }
  updateProgressLog(context);
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}","@Override public void postIteration(final MasterContext<DTMasterParams,DTWorkerParams> context){
  long start=System.currentTimeMillis();
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  final int currentIteration=context.getCurrentIteration();
  final int totalIteration=context.getTotalIteration();
  final boolean isHalt=context.getMasterResult().isHalt();
  if (isRF) {
    if (currentIteration % (tmpModelFactor * 2) == 0) {
      Thread tmpModelPersistThread=new Thread(new Runnable(){
        @Override public void run(){
          Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
          if (!isHalt && currentIteration != totalIteration) {
            Path tmpModelPath=getTmpModelPath(currentIteration);
            writeModelToFileSystem(context.getMasterResult().getTrees(),out);
            LOG.info(""String_Node_Str"",tmpModelPath.toString());
            try {
              DataOutputStream outputStream=new DataOutputStream(new GZIPOutputStream(FileSystem.get(DTOutput.this.conf).create(tmpModelPath)));
              FSDataInputStream inputStream=FileSystem.get(DTOutput.this.conf).open(out);
              DataInputStream dis=new DataInputStream(new GZIPInputStream(inputStream));
              IOUtils.copyBytes(dis,outputStream,DTOutput.this.conf);
            }
 catch (            IOException e) {
              LOG.warn(""String_Node_Str"",e);
            }
          }
 else {
            saveTmpModelToHDFS(currentIteration,context.getMasterResult().getTrees());
          }
        }
      }
,""String_Node_Str"");
      tmpModelPersistThread.setDaemon(true);
      tmpModelPersistThread.start();
    }
  }
 else   if (isGBDT) {
    if (this.treeNum >= 10 && context.getMasterResult().isSwitchToNextTree() && (context.getMasterResult().getTmpTrees().size() - 1) % (this.treeNum / 10) == 0) {
      final List<TreeNode> trees=context.getMasterResult().getTmpTrees();
      if (trees.size() > 1) {
        Thread tmpModelPersistThread=new Thread(new Runnable(){
          @Override public void run(){
            List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
            Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
            int subTreesSize=subTrees.size();
            if (!isHalt && currentIteration != totalIteration) {
              Path tmpModelPath=getTmpModelPath(subTreesSize);
              writeModelToFileSystem(subTrees,out);
              LOG.info(""String_Node_Str"",tmpModelPath.toString());
              try {
                DataOutputStream outputStream=new DataOutputStream(new GZIPOutputStream(FileSystem.get(DTOutput.this.conf).create(tmpModelPath)));
                FSDataInputStream inputStream=FileSystem.get(DTOutput.this.conf).open(out);
                DataInputStream dis=new DataInputStream(new GZIPInputStream(inputStream));
                IOUtils.copyBytes(dis,outputStream,DTOutput.this.conf);
              }
 catch (              IOException e) {
                LOG.warn(""String_Node_Str"",e);
              }
            }
 else {
              saveTmpModelToHDFS(subTreesSize,subTrees);
            }
          }
        }
,""String_Node_Str"");
        tmpModelPersistThread.setDaemon(true);
        tmpModelPersistThread.start();
      }
    }
  }
  updateProgressLog(context);
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}",0.7316983894582724
31660,"@Override public void run(){
  List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!isHalt && currentIteration != totalIteration) {
    writeModelToFileSystem(subTrees,out);
  }
  saveTmpModelToHDFS(subTrees.size(),subTrees);
}","@Override public void run(){
  List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  int subTreesSize=subTrees.size();
  if (!isHalt && currentIteration != totalIteration) {
    Path tmpModelPath=getTmpModelPath(subTreesSize);
    writeModelToFileSystem(subTrees,out);
    LOG.info(""String_Node_Str"",tmpModelPath.toString());
    try {
      DataOutputStream outputStream=new DataOutputStream(new GZIPOutputStream(FileSystem.get(DTOutput.this.conf).create(tmpModelPath)));
      FSDataInputStream inputStream=FileSystem.get(DTOutput.this.conf).open(out);
      DataInputStream dis=new DataInputStream(new GZIPInputStream(inputStream));
      IOUtils.copyBytes(dis,outputStream,DTOutput.this.conf);
    }
 catch (    IOException e) {
      LOG.warn(""String_Node_Str"",e);
    }
  }
 else {
    saveTmpModelToHDFS(subTreesSize,subTrees);
  }
}",0.5099601593625498
31661,"private void writeModelToFileSystem(List<TreeNode> trees,Path out){
  List<List<TreeNode>> baggingTrees=new ArrayList<List<TreeNode>>();
  baggingTrees.add(trees);
  try {
    BinaryDTSerializer.save(modelConfig,columnConfigList,baggingTrees,this.validParams.get(""String_Node_Str"").toString(),inputCount,FileSystem.get(new Configuration()),out);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","private void writeModelToFileSystem(List<TreeNode> trees,Path out){
  List<List<TreeNode>> baggingTrees=new ArrayList<List<TreeNode>>();
  baggingTrees.add(trees);
  try {
    BinaryDTSerializer.save(modelConfig,columnConfigList,baggingTrees,this.validParams.get(""String_Node_Str"").toString(),inputCount,FileSystem.get(this.conf),out);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.973365617433414
31662,"/** 
 * Runner for evaluation
 */
@Override public int run() throws Exception {
  LOG.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.EVAL);
    syncDataToHdfs(modelConfig.getDataSet().getSource());
switch (evalStep) {
case LIST:
      listEvalSet();
    break;
case NEW:
  createNewEval(evalName);
break;
case DELETE:
deleteEvalSet(evalName);
break;
case RUN:
runEval(getEvalConfigListFromInput());
break;
case NORM:
runNormalize(getEvalConfigListFromInput());
break;
case PERF:
runPerformance(getEvalConfigListFromInput());
break;
case SCORE:
runScore(getEvalConfigListFromInput());
break;
case CONFMAT:
runConfusionMatrix(getEvalConfigListFromInput());
break;
default :
break;
}
syncDataToHdfs(modelConfig.getDataSet().getSource());
clearUp(ModelStep.EVAL);
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",e);
return -1;
}
LOG.info(""String_Node_Str"",(System.currentTimeMillis() - start));
return 0;
}","@Override public void run(){
  try {
    runScore(config);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  cdl.countDown();
}",0.1815068493150685
31663,"public double[] calculateWeights(double[] weights,double[] gradients){
  for (int i=0; i < gradients.length; i++) {
    if (this.dropoutRate > 0 && this.random.nextDouble() < this.dropoutRate) {
      continue;
    }
switch (this.rl) {
case NONE:
      weights[i]+=updateWeight(i,weights,gradients);
    break;
case L1:
  if (Double.compare(this.reg,0d) == 0) {
    weights[i]+=updateWeight(i,weights,gradients);
  }
 else {
    double shrinkValue=this.reg / getNumTrainSize();
    double delta=updateWeight(i,weights,gradients);
    weights[i]+=Math.signum(delta) * Math.max(0.0,Math.abs(delta) - shrinkValue);
  }
break;
case L2:
default :
weights[i]+=(updateWeight(i,weights,gradients) - this.reg * weights[i] / getNumTrainSize());
break;
}
}
return weights;
}","public double[] calculateWeights(double[] weights,double[] gradients){
  for (int i=0; i < gradients.length; i++) {
    if (this.dropoutRate > 0 && this.random.nextDouble() < this.dropoutRate) {
      continue;
    }
switch (this.rl) {
case NONE:
      weights[i]+=updateWeight(i,weights,gradients);
    break;
case L1:
  if (Double.compare(this.reg,0d) == 0) {
    weights[i]+=updateWeight(i,weights,gradients);
  }
 else {
    double shrinkValue=this.reg / getNumTrainSize();
    double delta=updateWeight(i,weights,gradients);
    weights[i]=Math.signum(delta) * Math.max(0.0,Math.abs(delta) - shrinkValue);
  }
break;
case L2:
default :
weights[i]+=(updateWeight(i,weights,gradients) - this.reg * weights[i] / getNumTrainSize());
break;
}
}
return weights;
}",0.999344262295082
31664,"public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName,String scale) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isBlank(evalConfig.getDataSet().getHeaderPath())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.headers=CommonUtils.getFinalHeaders(evalConfig);
  Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
  this.outputNames=new ArrayList<String>();
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
    outputNames.add(evalConfig.getDataSet().getTargetColumnName());
  }
 else {
    outputNames.add(modelConfig.getTargetColumnName());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
    outputNames.add(evalConfig.getDataSet().getWeightColumnName());
  }
 else {
    outputNames.add(""String_Node_Str"");
  }
  List<String> allMetaColumns=evalConfig.getAllMetaColumns(modelConfig);
  for (  String meta : allMetaColumns) {
    if (evalNamesSet.contains(meta)) {
      if (!outputNames.contains(meta)) {
        outputNames.add(meta);
        validMetaSize+=1;
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + meta + ""String_Node_Str"");
    }
  }
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    columnConfigMap.put(columnConfig.getColumnName(),columnConfig);
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  boolean isAfterVarSelect=(inputOutputIndex[3] == 1);
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    if (isAfterVarSelect) {
      if (columnConfig.isFinalSelect() && (!columnConfig.isMeta() && !columnConfig.isTarget())) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
 else {
      if (!columnConfig.isMeta() && !columnConfig.isTarget()) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
  }
  this.scoreName=this.evalConfig.getPerformanceScoreSelector();
  if (StringUtils.isBlank(this.scoreName) || this.scoreName.equalsIgnoreCase(""String_Node_Str"")) {
    this.scIndex=-1;
  }
 else {
    try {
      this.scIndex=Integer.parseInt(this.scoreName.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + this.scoreName);
    }
  }
  this.scale=scale;
  if (UDFContext.getUDFContext() != null && UDFContext.getUDFContext().getJobConf() != null) {
    this.isOutputRaw=Boolean.TRUE.toString().equalsIgnoreCase(UDFContext.getUDFContext().getJobConf().get(SHIFU_EVAL_NORM_OUTPUTRAW,Boolean.TRUE.toString()));
  }
 else {
    this.isOutputRaw=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(SHIFU_EVAL_NORM_OUTPUTRAW,Boolean.TRUE.toString()));
  }
}","public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName,String scale) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isBlank(evalConfig.getDataSet().getHeaderPath())) {
    log.warn(""String_Node_Str"");
  }
  this.headers=CommonUtils.getFinalHeaders(evalConfig);
  Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
  this.outputNames=new ArrayList<String>();
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
    outputNames.add(evalConfig.getDataSet().getTargetColumnName());
  }
 else {
    outputNames.add(modelConfig.getTargetColumnName());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
    outputNames.add(evalConfig.getDataSet().getWeightColumnName());
  }
 else {
    outputNames.add(""String_Node_Str"");
  }
  List<String> allMetaColumns=evalConfig.getAllMetaColumns(modelConfig);
  for (  String meta : allMetaColumns) {
    if (evalNamesSet.contains(meta)) {
      if (!outputNames.contains(meta)) {
        outputNames.add(meta);
        validMetaSize+=1;
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + meta + ""String_Node_Str"");
    }
  }
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    columnConfigMap.put(columnConfig.getColumnName(),columnConfig);
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  boolean isAfterVarSelect=(inputOutputIndex[3] == 1);
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    if (isAfterVarSelect) {
      if (columnConfig.isFinalSelect() && (!columnConfig.isMeta() && !columnConfig.isTarget())) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
 else {
      if (!columnConfig.isMeta() && !columnConfig.isTarget()) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
  }
  this.scoreName=this.evalConfig.getPerformanceScoreSelector();
  if (StringUtils.isBlank(this.scoreName) || this.scoreName.equalsIgnoreCase(""String_Node_Str"")) {
    this.scIndex=-1;
  }
 else {
    try {
      this.scIndex=Integer.parseInt(this.scoreName.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + this.scoreName);
    }
  }
  this.scale=scale;
  if (UDFContext.getUDFContext() != null && UDFContext.getUDFContext().getJobConf() != null) {
    this.isOutputRaw=Boolean.TRUE.toString().equalsIgnoreCase(UDFContext.getUDFContext().getJobConf().get(SHIFU_EVAL_NORM_OUTPUTRAW,Boolean.TRUE.toString()));
  }
 else {
    this.isOutputRaw=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(SHIFU_EVAL_NORM_OUTPUTRAW,Boolean.TRUE.toString()));
  }
}",0.9956622325043376
31665,"/** 
 * Parse raw value based on ColumnConfig.
 * @param config ColumnConfig info
 * @param raw input column value
 * @param categoryMissingNormType missing categorical value norm type
 * @return parsed raw value. For categorical type, return BinPosRate. For numerical type, returncorresponding double value. For missing data, return default value using {@link Normalizer#defaultMissingValue}.
 */
private static double parseRawValue(ColumnConfig config,String raw,CategoryMissingNormType categoryMissingNormType){
  if (categoryMissingNormType == null) {
    categoryMissingNormType=CategoryMissingNormType.MEAN;
  }
  double value=0.0;
  if (config.isCategorical()) {
    int index=CommonUtils.getBinNum(config,raw);
    if (index == -1) {
switch (categoryMissingNormType) {
case POSRATE:
        value=config.getBinPosRate().get(config.getBinPosRate().size() - 1);
      break;
case MEAN:
default :
    value=defaultMissingValue(config);
  break;
}
}
 else {
Double binPosRate=config.getBinPosRate().get(index);
if (binPosRate != null) {
value=binPosRate.doubleValue();
}
 else {
switch (categoryMissingNormType) {
case POSRATE:
  value=config.getBinPosRate().get(config.getBinPosRate().size() - 1);
break;
case MEAN:
default :
value=defaultMissingValue(config);
break;
}
}
}
}
 else {
try {
value=Double.parseDouble(raw);
}
 catch (Exception e) {
log.debug(""String_Node_Str"" + raw + ""String_Node_Str"");
value=defaultMissingValue(config);
}
}
return value;
}","/** 
 * Parse raw value based on ColumnConfig.
 * @param config ColumnConfig info
 * @param raw input column value
 * @param categoryMissingNormType missing categorical value norm type
 * @return parsed raw value. For categorical type, return BinPosRate. For numerical type, returncorresponding double value. For missing data, return default value using {@link Normalizer#defaultMissingValue}.
 */
private static double parseRawValue(ColumnConfig config,String raw,CategoryMissingNormType categoryMissingNormType){
  if (categoryMissingNormType == null) {
    categoryMissingNormType=CategoryMissingNormType.POSRATE;
  }
  double value=0.0;
  if (config.isCategorical()) {
    int index=CommonUtils.getBinNum(config,raw);
    if (index == -1) {
switch (categoryMissingNormType) {
case POSRATE:
        value=config.getBinPosRate().get(config.getBinPosRate().size() - 1);
      break;
case MEAN:
default :
    value=defaultMissingValue(config);
  break;
}
}
 else {
Double binPosRate=config.getBinPosRate().get(index);
if (binPosRate != null) {
value=binPosRate.doubleValue();
}
 else {
switch (categoryMissingNormType) {
case POSRATE:
  value=config.getBinPosRate().get(config.getBinPosRate().size() - 1);
break;
case MEAN:
default :
value=defaultMissingValue(config);
break;
}
}
}
}
 else {
try {
value=Double.parseDouble(raw);
}
 catch (Exception e) {
log.debug(""String_Node_Str"" + raw + ""String_Node_Str"");
value=defaultMissingValue(config);
}
}
return value;
}",0.9969230769230768
31666,"/** 
 * Normalize the raw data, according the ColumnConfig information and normalization type. Currently, the cutoff value doesn't affect the computation of WOE or WEIGHT_WOE type. <p> Noticed: currently OLD_ZSCALE and ZSCALE is implemented with the same process method. </p>
 * @param config ColumnConfig to normalize data
 * @param raw raw input data
 * @param cutoff standard deviation cut off
 * @param type normalization type of ModelNormalizeConf.NormType
 * @return normalized value. If normType parameter is invalid, then the ZSCALE will be used as default.
 */
public static Double normalize(ColumnConfig config,String raw,Double cutoff,ModelNormalizeConf.NormType type){
  return normalize(config,raw,cutoff,type,CategoryMissingNormType.MEAN);
}","/** 
 * Normalize the raw data, according the ColumnConfig information and normalization type. Currently, the cutoff value doesn't affect the computation of WOE or WEIGHT_WOE type. <p> Noticed: currently OLD_ZSCALE and ZSCALE is implemented with the same process method. </p>
 * @param config ColumnConfig to normalize data
 * @param raw raw input data
 * @param cutoff standard deviation cut off
 * @param type normalization type of ModelNormalizeConf.NormType
 * @return normalized value. If normType parameter is invalid, then the ZSCALE will be used as default.
 */
public static Double normalize(ColumnConfig config,String raw,Double cutoff,ModelNormalizeConf.NormType type){
  return normalize(config,raw,cutoff,type,CategoryMissingNormType.POSRATE);
}",0.9940515532055518
31667,"/** 
 * Compute the normalized data for @NormalizeMethod.Zscore
 * @param config ColumnConfig info
 * @param raw input column value
 * @param cutoff standard deviation cut off
 * @return normalized value for ZScore method.
 */
private static Double zScoreNormalize(ColumnConfig config,String raw,Double cutoff){
  double stdDevCutOff=checkCutOff(cutoff);
  double value=parseRawValue(config,raw,CategoryMissingNormType.MEAN);
  return computeZScore(value,config.getMean(),config.getStdDev(),stdDevCutOff);
}","/** 
 * Compute the normalized data for @NormalizeMethod.Zscore
 * @param config ColumnConfig info
 * @param raw input column value
 * @param cutoff standard deviation cut off
 * @return normalized value for ZScore method.
 */
private static Double zScoreNormalize(ColumnConfig config,String raw,Double cutoff){
  double stdDevCutOff=checkCutOff(cutoff);
  double value=parseRawValue(config,raw,CategoryMissingNormType.POSRATE);
  return computeZScore(value,config.getMean(),config.getStdDev(),stdDevCutOff);
}",0.991150442477876
31668,"/** 
 * Load model instance from input stream which is saved in NNOutput for specified binary format.
 * @param input the input stream, flat input stream or gzip input stream both OK
 * @param isRemoveNameSpace is remove name space or not
 * @return the nn model instance
 * @throws IOException any IOException in de-serialization.
 */
public static IndependentNNModel loadFromStream(InputStream input,boolean isRemoveNameSpace) throws IOException {
  DataInputStream dis=null;
  try {
    byte[] header=new byte[2];
    BufferedInputStream bis=new BufferedInputStream(input);
    bis.mark(2);
    int result=bis.read(header);
    bis.reset();
    int ss=(header[0] & 0xff) | ((header[1] & 0xff) << 8);
    if (result != -1 && ss == GZIPInputStream.GZIP_MAGIC) {
      dis=new DataInputStream(new GZIPInputStream(bis));
    }
 else {
      dis=new DataInputStream(bis);
    }
  }
 catch (  java.io.IOException e) {
    dis=new DataInputStream(input);
  }
  int version=dis.readInt();
  LOG.info(""String_Node_Str"" + version);
  IndependentNNModel.setVersion(version);
  String normStr=ml.shifu.shifu.core.dtrain.StringUtils.readString(dis);
  LOG.info(""String_Node_Str"" + normStr);
  NormType normType=NormType.valueOf(normStr.toUpperCase());
  Map<Integer,String> numNameMap=new HashMap<Integer,String>();
  Map<Integer,List<String>> cateColumnNameNames=new HashMap<Integer,List<String>>();
  Map<Integer,Map<String,Double>> cateWoeMap=new HashMap<Integer,Map<String,Double>>();
  Map<Integer,Map<String,Double>> cateWgtWoeMap=new HashMap<Integer,Map<String,Double>>();
  Map<Integer,Map<String,Double>> binPosRateMap=new HashMap<Integer,Map<String,Double>>();
  Map<Integer,List<Double>> numerBinBoundaries=new HashMap<Integer,List<Double>>();
  Map<Integer,List<Double>> numerWoes=new HashMap<Integer,List<Double>>();
  Map<Integer,List<Double>> numerWgtWoes=new HashMap<Integer,List<Double>>();
  Map<Integer,Double> numerMeanMap=new HashMap<Integer,Double>();
  Map<Integer,Double> numerStddevMap=new HashMap<Integer,Double>();
  Map<Integer,Double> woeMeanMap=new HashMap<Integer,Double>();
  Map<Integer,Double> woeStddevMap=new HashMap<Integer,Double>();
  Map<Integer,Double> wgtWoeMeanMap=new HashMap<Integer,Double>();
  Map<Integer,Double> wgtWoeStddevMap=new HashMap<Integer,Double>();
  Map<Integer,Double> cutoffMap=new HashMap<Integer,Double>();
  int columnSize=dis.readInt();
  for (int i=0; i < columnSize; i++) {
    NNColumnStats cs=new NNColumnStats();
    cs.readFields(dis);
    List<Double> binWoes=cs.getBinCountWoes();
    List<Double> binWgtWoes=cs.getBinWeightWoes();
    List<Double> binPosRates=cs.getBinPosRates();
    int columnNum=cs.getColumnNum();
    if (isRemoveNameSpace) {
      numNameMap.put(columnNum,StringUtils.getSimpleColumnName(cs.getColumnName()));
    }
 else {
      numNameMap.put(columnNum,cs.getColumnName());
    }
    Map<String,Double> woeMap=new HashMap<String,Double>();
    Map<String,Double> woeWgtMap=new HashMap<String,Double>();
    Map<String,Double> posRateMap=new HashMap<String,Double>();
    if (cs.isCategorical()) {
      List<String> binCategories=cs.getBinCategories();
      cateColumnNameNames.put(columnNum,binCategories);
      for (int j=0; j < binCategories.size(); j++) {
        String currCate=binCategories.get(j);
        if (currCate.contains(Constants.CATEGORICAL_GROUP_VAL_DELIMITER)) {
          String[] splits=StringUtils.split(currCate,Constants.CATEGORICAL_GROUP_VAL_DELIMITER);
          for (          String str : splits) {
            woeMap.put(str,binWoes.get(j));
            woeWgtMap.put(str,binWgtWoes.get(j));
            posRateMap.put(str,binPosRates.get(j));
          }
        }
 else {
          woeMap.put(currCate,binWoes.get(j));
          woeWgtMap.put(currCate,binWgtWoes.get(j));
          posRateMap.put(currCate,binPosRates.get(j));
        }
      }
      woeMap.put(Constants.EMPTY_CATEGORY,binWoes.get(binCategories.size()));
      woeWgtMap.put(Constants.EMPTY_CATEGORY,binWgtWoes.get(binCategories.size()));
      posRateMap.put(Constants.EMPTY_CATEGORY,binPosRates.get(binCategories.size()));
    }
 else {
      numerBinBoundaries.put(columnNum,cs.getBinBoundaries());
      numerWoes.put(columnNum,binWoes);
      numerWgtWoes.put(columnNum,binWgtWoes);
    }
    cateWoeMap.put(columnNum,woeMap);
    cateWgtWoeMap.put(columnNum,woeWgtMap);
    binPosRateMap.put(columnNum,posRateMap);
    numerMeanMap.put(columnNum,cs.getMean());
    numerStddevMap.put(columnNum,cs.getStddev());
    woeMeanMap.put(columnNum,cs.getWoeMean());
    woeStddevMap.put(columnNum,cs.getWoeStddev());
    wgtWoeMeanMap.put(columnNum,cs.getWoeWgtMean());
    wgtWoeStddevMap.put(columnNum,cs.getWoeWgtStddev());
    cutoffMap.put(columnNum,cs.getCutoff());
  }
  Map<Integer,Integer> columnMap=new HashMap<Integer,Integer>();
  int columnMapSize=dis.readInt();
  for (int i=0; i < columnMapSize; i++) {
    columnMap.put(dis.readInt(),dis.readInt());
  }
  BasicFloatNetwork network=new PersistBasicFloatNetwork().readNetwork(dis);
  return new IndependentNNModel(network,normType,numNameMap,cateColumnNameNames,columnMap,cateWoeMap,cateWgtWoeMap,binPosRateMap,numerBinBoundaries,numerWgtWoes,numerWoes,cutoffMap,numerMeanMap,numerStddevMap,woeMeanMap,woeStddevMap,wgtWoeMeanMap,wgtWoeStddevMap);
}","/** 
 * Load model instance from input stream which is saved in NNOutput for specified binary format.
 * @param input the input stream, flat input stream or gzip input stream both OK
 * @param isRemoveNameSpace is remove name space or not
 * @return the nn model instance
 * @throws IOException any IOException in de-serialization.
 */
public static IndependentNNModel loadFromStream(InputStream input,boolean isRemoveNameSpace) throws IOException {
  DataInputStream dis=null;
  try {
    byte[] header=new byte[2];
    BufferedInputStream bis=new BufferedInputStream(input);
    bis.mark(2);
    int result=bis.read(header);
    bis.reset();
    int ss=(header[0] & 0xff) | ((header[1] & 0xff) << 8);
    if (result != -1 && ss == GZIPInputStream.GZIP_MAGIC) {
      dis=new DataInputStream(new GZIPInputStream(bis));
    }
 else {
      dis=new DataInputStream(bis);
    }
  }
 catch (  java.io.IOException e) {
    dis=new DataInputStream(input);
  }
  int version=dis.readInt();
  IndependentNNModel.setVersion(version);
  String normStr=ml.shifu.shifu.core.dtrain.StringUtils.readString(dis);
  NormType normType=NormType.valueOf(normStr.toUpperCase());
  Map<Integer,String> numNameMap=new HashMap<Integer,String>();
  Map<Integer,List<String>> cateColumnNameNames=new HashMap<Integer,List<String>>();
  Map<Integer,Map<String,Double>> cateWoeMap=new HashMap<Integer,Map<String,Double>>();
  Map<Integer,Map<String,Double>> cateWgtWoeMap=new HashMap<Integer,Map<String,Double>>();
  Map<Integer,Map<String,Double>> binPosRateMap=new HashMap<Integer,Map<String,Double>>();
  Map<Integer,List<Double>> numerBinBoundaries=new HashMap<Integer,List<Double>>();
  Map<Integer,List<Double>> numerWoes=new HashMap<Integer,List<Double>>();
  Map<Integer,List<Double>> numerWgtWoes=new HashMap<Integer,List<Double>>();
  Map<Integer,Double> numerMeanMap=new HashMap<Integer,Double>();
  Map<Integer,Double> numerStddevMap=new HashMap<Integer,Double>();
  Map<Integer,Double> woeMeanMap=new HashMap<Integer,Double>();
  Map<Integer,Double> woeStddevMap=new HashMap<Integer,Double>();
  Map<Integer,Double> wgtWoeMeanMap=new HashMap<Integer,Double>();
  Map<Integer,Double> wgtWoeStddevMap=new HashMap<Integer,Double>();
  Map<Integer,Double> cutoffMap=new HashMap<Integer,Double>();
  int columnSize=dis.readInt();
  for (int i=0; i < columnSize; i++) {
    NNColumnStats cs=new NNColumnStats();
    cs.readFields(dis);
    List<Double> binWoes=cs.getBinCountWoes();
    List<Double> binWgtWoes=cs.getBinWeightWoes();
    List<Double> binPosRates=cs.getBinPosRates();
    int columnNum=cs.getColumnNum();
    if (isRemoveNameSpace) {
      numNameMap.put(columnNum,StringUtils.getSimpleColumnName(cs.getColumnName()));
    }
 else {
      numNameMap.put(columnNum,cs.getColumnName());
    }
    Map<String,Double> woeMap=new HashMap<String,Double>();
    Map<String,Double> woeWgtMap=new HashMap<String,Double>();
    Map<String,Double> posRateMap=new HashMap<String,Double>();
    if (cs.isCategorical()) {
      List<String> binCategories=cs.getBinCategories();
      cateColumnNameNames.put(columnNum,binCategories);
      for (int j=0; j < binCategories.size(); j++) {
        String currCate=binCategories.get(j);
        if (currCate.contains(Constants.CATEGORICAL_GROUP_VAL_DELIMITER)) {
          String[] splits=StringUtils.split(currCate,Constants.CATEGORICAL_GROUP_VAL_DELIMITER);
          for (          String str : splits) {
            woeMap.put(str,binWoes.get(j));
            woeWgtMap.put(str,binWgtWoes.get(j));
            posRateMap.put(str,binPosRates.get(j));
          }
        }
 else {
          woeMap.put(currCate,binWoes.get(j));
          woeWgtMap.put(currCate,binWgtWoes.get(j));
          posRateMap.put(currCate,binPosRates.get(j));
        }
      }
      woeMap.put(Constants.EMPTY_CATEGORY,binWoes.get(binCategories.size()));
      woeWgtMap.put(Constants.EMPTY_CATEGORY,binWgtWoes.get(binCategories.size()));
      posRateMap.put(Constants.EMPTY_CATEGORY,binPosRates.get(binCategories.size()));
    }
 else {
      numerBinBoundaries.put(columnNum,cs.getBinBoundaries());
      numerWoes.put(columnNum,binWoes);
      numerWgtWoes.put(columnNum,binWgtWoes);
    }
    cateWoeMap.put(columnNum,woeMap);
    cateWgtWoeMap.put(columnNum,woeWgtMap);
    binPosRateMap.put(columnNum,posRateMap);
    numerMeanMap.put(columnNum,cs.getMean());
    numerStddevMap.put(columnNum,cs.getStddev());
    woeMeanMap.put(columnNum,cs.getWoeMean());
    woeStddevMap.put(columnNum,cs.getWoeStddev());
    wgtWoeMeanMap.put(columnNum,cs.getWoeWgtMean());
    wgtWoeStddevMap.put(columnNum,cs.getWoeWgtStddev());
    cutoffMap.put(columnNum,cs.getCutoff());
  }
  Map<Integer,Integer> columnMap=new HashMap<Integer,Integer>();
  int columnMapSize=dis.readInt();
  for (int i=0; i < columnMapSize; i++) {
    columnMap.put(dis.readInt(),dis.readInt());
  }
  BasicFloatNetwork network=new PersistBasicFloatNetwork().readNetwork(dis);
  return new IndependentNNModel(network,normType,numNameMap,cateColumnNameNames,columnMap,cateWoeMap,cateWgtWoeMap,binPosRateMap,numerBinBoundaries,numerWgtWoes,numerWoes,cutoffMap,numerMeanMap,numerStddevMap,woeMeanMap,woeStddevMap,wgtWoeMeanMap,wgtWoeStddevMap);
}",0.9922053231939164
31669,"private double getNumericalZScoreValue(Integer columnNum,Object obj){
  double rawValue=0d;
  double mean=this.numerMeanMap.get(columnNum);
  if (obj == null || obj.toString().length() == 0) {
    rawValue=defaultMissingValue(mean);
  }
 else {
    try {
      rawValue=Double.parseDouble(obj.toString());
    }
 catch (    Exception e) {
      rawValue=defaultMissingValue(mean);
    }
  }
  double stddev=this.numerStddevMap.get(columnNum);
  double cutoff=Normalizer.checkCutOff(this.cutOffMap.get(columnNum));
  return Normalizer.computeZScore(rawValue,mean,stddev,cutoff);
}","private double getNumericalZScoreValue(Integer columnNum,Object obj){
  double mean=this.numerMeanMap.get(columnNum);
  double stddev=this.numerStddevMap.get(columnNum);
  double rawValue=0d;
  if (obj == null || obj.toString().length() == 0) {
    rawValue=defaultMissingValue(mean);
  }
 else {
    try {
      rawValue=Double.parseDouble(obj.toString());
    }
 catch (    Exception e) {
      rawValue=defaultMissingValue(mean);
    }
  }
  double cutoff=Normalizer.checkCutOff(this.cutOffMap.get(columnNum));
  return Normalizer.computeZScore(rawValue,mean,stddev,cutoff);
}",0.8272884283246977
31670,"private double[] convertDataMapToDoubleArray(Map<String,Object> dataMap){
  double[] data=new double[this.columnNumIndexMap.size()];
  for (  Entry<Integer,Integer> entry : this.columnNumIndexMap.entrySet()) {
    double value=0d;
    Integer columnNum=entry.getKey();
    String columnName=this.numNameMap.get(columnNum);
    Object obj=dataMap.get(columnName);
    if (this.cateCateMap.containsKey(columnNum)) {
switch (this.normType) {
case WOE:
case HYBRID:
        value=getCategoricalWoeValue(columnNum,obj,false);
      break;
case WEIGHT_WOE:
case WEIGHT_HYBRID:
    value=getCategoricalWoeValue(columnNum,obj,true);
  break;
case WOE_ZSCORE:
case WOE_ZSCALE:
value=getCategoricalWoeZScoreValue(columnNum,obj,false);
break;
case WEIGHT_WOE_ZSCORE:
case WEIGHT_WOE_ZSCALE:
value=getCategoricalWoeZScoreValue(columnNum,obj,true);
break;
case OLD_ZSCALE:
case OLD_ZSCORE:
case ZSCALE:
case ZSCORE:
default :
value=getCategoricalPosRateValue(columnNum,obj);
break;
}
}
 else {
switch (this.normType) {
case WOE:
value=getNumericalWoeValue(columnNum,obj,false);
break;
case WEIGHT_WOE:
value=getNumericalWoeValue(columnNum,obj,false);
break;
case WOE_ZSCORE:
case WOE_ZSCALE:
value=getNumericalWoeZScoreValue(columnNum,obj,false);
break;
case WEIGHT_WOE_ZSCORE:
case WEIGHT_WOE_ZSCALE:
value=getNumericalWoeZScoreValue(columnNum,obj,true);
break;
case OLD_ZSCALE:
case OLD_ZSCORE:
case ZSCALE:
case ZSCORE:
case HYBRID:
case WEIGHT_HYBRID:
default :
value=getNumericalZScoreValue(columnNum,obj);
break;
}
}
Integer index=entry.getValue();
if (index != null && index < data.length) {
data[index]=value;
}
}
return data;
}","private double[] convertDataMapToDoubleArray(Map<String,Object> dataMap){
  double[] data=new double[this.columnNumIndexMap.size()];
  for (  Entry<Integer,Integer> entry : this.columnNumIndexMap.entrySet()) {
    double value=0d;
    Integer columnNum=entry.getKey();
    String columnName=this.numNameMap.get(columnNum);
    Object obj=dataMap.get(columnName);
    if (this.cateCateMap.containsKey(columnNum)) {
switch (this.normType) {
case WOE:
case HYBRID:
        value=getCategoricalWoeValue(columnNum,obj,false);
      break;
case WEIGHT_WOE:
case WEIGHT_HYBRID:
    value=getCategoricalWoeValue(columnNum,obj,true);
  break;
case WOE_ZSCORE:
case WOE_ZSCALE:
value=getCategoricalWoeZScoreValue(columnNum,obj,false);
break;
case WEIGHT_WOE_ZSCORE:
case WEIGHT_WOE_ZSCALE:
value=getCategoricalWoeZScoreValue(columnNum,obj,true);
break;
case OLD_ZSCALE:
case OLD_ZSCORE:
case ZSCALE:
case ZSCORE:
default :
value=getCategoricalPosRateZScoreValue(columnNum,obj);
break;
}
}
 else {
switch (this.normType) {
case WOE:
value=getNumericalWoeValue(columnNum,obj,false);
break;
case WEIGHT_WOE:
value=getNumericalWoeValue(columnNum,obj,false);
break;
case WOE_ZSCORE:
case WOE_ZSCALE:
value=getNumericalWoeZScoreValue(columnNum,obj,false);
break;
case WEIGHT_WOE_ZSCORE:
case WEIGHT_WOE_ZSCALE:
value=getNumericalWoeZScoreValue(columnNum,obj,true);
break;
case OLD_ZSCALE:
case OLD_ZSCORE:
case ZSCALE:
case ZSCORE:
case HYBRID:
case WEIGHT_HYBRID:
default :
value=getNumericalZScoreValue(columnNum,obj);
break;
}
}
Integer index=entry.getValue();
if (index != null && index < data.length) {
data[index]=value;
}
}
return data;
}",0.9981549815498156
31671,"private void init(MasterContext<NNParams,NNParams> context){
  this.isDry=Boolean.TRUE.toString().equals(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  this.isBinaryNNModel=Boolean.TRUE.toString().equals(context.getProps().getProperty(Constants.SHIFU_NN_INDEPENDENT_MODEL,""String_Node_Str""));
  if (this.isDry) {
    return;
  }
  if (isInit.compareAndSet(false,true)) {
    loadConfigFiles(context.getProps());
    this.trainerId=context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID);
    this.tmpModelsFolder=context.getProps().getProperty(CommonConstants.SHIFU_TMP_MODELS_FOLDER);
    gridSearch=new GridSearch(modelConfig.getTrain().getParams());
    validParams=this.modelConfig.getTrain().getParams();
    if (gridSearch.hasHyperParam()) {
      validParams=gridSearch.getParams(Integer.parseInt(trainerId));
      LOG.info(""String_Node_Str"",validParams);
    }
    Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
    if (kCrossValidation != null && kCrossValidation > 0) {
      isKFoldCV=true;
    }
    Object dropoutRateObj=validParams.get(CommonConstants.DROPOUT_RATE);
    if (dropoutRateObj != null) {
      this.dropoutRate=Double.valueOf(dropoutRateObj.toString());
    }
    LOG.info(""String_Node_Str"",this.dropoutRate);
    this.bModel=new Path(context.getProps().getProperty(Constants.SHIFU_NN_BINARY_MODEL_PATH));
    initNetwork(context);
  }
  try {
    Path progressLog=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE));
    if (ShifuFileUtils.isFileExists(progressLog,SourceType.HDFS)) {
      this.progressOutput=FileSystem.get(new Configuration()).append(progressLog);
    }
 else {
      this.progressOutput=FileSystem.get(new Configuration()).create(progressLog);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","private void init(MasterContext<NNParams,NNParams> context){
  this.isDry=Boolean.TRUE.toString().equals(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  if (this.isDry) {
    return;
  }
  if (isInit.compareAndSet(false,true)) {
    loadConfigFiles(context.getProps());
    this.trainerId=context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID);
    this.tmpModelsFolder=context.getProps().getProperty(CommonConstants.SHIFU_TMP_MODELS_FOLDER);
    gridSearch=new GridSearch(modelConfig.getTrain().getParams());
    validParams=this.modelConfig.getTrain().getParams();
    if (gridSearch.hasHyperParam()) {
      validParams=gridSearch.getParams(Integer.parseInt(trainerId));
      LOG.info(""String_Node_Str"",validParams);
    }
    Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
    if (kCrossValidation != null && kCrossValidation > 0) {
      isKFoldCV=true;
    }
    Object dropoutRateObj=validParams.get(CommonConstants.DROPOUT_RATE);
    if (dropoutRateObj != null) {
      this.dropoutRate=Double.valueOf(dropoutRateObj.toString());
    }
    LOG.info(""String_Node_Str"",this.dropoutRate);
    this.bModel=new Path(context.getProps().getProperty(Constants.SHIFU_NN_BINARY_MODEL_PATH));
    initNetwork(context);
  }
  try {
    Path progressLog=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE));
    if (ShifuFileUtils.isFileExists(progressLog,SourceType.HDFS)) {
      this.progressOutput=FileSystem.get(new Configuration()).append(progressLog);
    }
 else {
      this.progressOutput=FileSystem.get(new Configuration()).create(progressLog);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.9599551946233548
31672,"protected int runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  int status=0;
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  int candidateCount=inputOutputIndex[2];
  boolean isAfterVarSelect=(inputOutputIndex[0] != 0);
  List<Integer> allFeatures=CommonUtils.getAllFeatureList(this.columnConfigList,isAfterVarSelect);
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
 else       if (isKFoldCV) {
        LOG.info(""String_Node_Str"",i);
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      Path bModelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getNNBinaryModelsPath(sourceType),modelName));
      boolean isContinous=false;
      if (gs.hasHyperParam()) {
        isContinous=false;
      }
 else {
        int intContinuous=checkContinuousTraining(fileSystem,localArgs,modelPath,modelConfig.getTrain().getParams());
        if (intContinuous == -1) {
          LOG.warn(""String_Node_Str"",i);
          continue;
        }
 else {
          isContinous=(intContinuous == 1);
        }
      }
      if (gs.hasHyperParam() || isKFoldCV) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
        Map<String,Object> params=gs.hasHyperParam() ? gs.getParams(i) : this.modelConfig.getTrain().getParams();
        Object fssObj=params.get(""String_Node_Str"");
        FeatureSubsetStrategy featureSubsetStrategy=null;
        double featureSubsetRate=0d;
        if (fssObj != null) {
          try {
            featureSubsetRate=Double.parseDouble(fssObj.toString());
            featureSubsetStrategy=null;
          }
 catch (          NumberFormatException ee) {
            featureSubsetStrategy=FeatureSubsetStrategy.of(fssObj.toString());
          }
        }
 else {
          LOG.warn(""String_Node_Str"");
          featureSubsetStrategy=FeatureSubsetStrategy.ALL;
          featureSubsetRate=0;
        }
        Set<Integer> subFeatures=null;
        if (isContinous) {
          BasicFloatNetwork existingModel=(BasicFloatNetwork)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
          if (existingModel == null) {
            subFeatures=new HashSet<Integer>(getSubsamplingFeatures(allFeatures,featureSubsetStrategy,featureSubsetRate,inputNodeCount));
          }
 else {
            subFeatures=existingModel.getFeatureSet();
          }
        }
 else {
          subFeatures=new HashSet<Integer>(getSubsamplingFeatures(allFeatures,featureSubsetStrategy,featureSubsetRate,inputNodeCount));
        }
        if (subFeatures == null || subFeatures.size() == 0) {
          localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_NN_FEATURE_SUBSET,""String_Node_Str""));
        }
 else {
          localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_NN_FEATURE_SUBSET,StringUtils.join(subFeatures,',')));
          LOG.debug(""String_Node_Str"",subFeatures.size(),StringUtils.join(subFeatures,','));
        }
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,Constants.SHIFU_NN_BINARY_MODEL_PATH,bModelPath.toString()));
      if (gs.hasHyperParam() || isKFoldCV) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
          status=1;
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isTreeModel(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
        List<BasicML> models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
        Map<Integer,MutablePair<String,Double>> featureImportances=CommonUtils.computeTreeModelFeatureImportance(models);
        String localFsFolder=pathFinder.getLocalFeatureImportanceFolder();
        String localFIPath=pathFinder.getLocalFeatureImportancePath();
        processRollupForFIFiles(localFsFolder,localFIPath);
        CommonUtils.writeFeatureImportance(localFIPath,featureImportances);
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
  if (status != 0) {
    LOG.error(""String_Node_Str"");
  }
  return status;
}","protected int runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  int status=0;
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  int candidateCount=inputOutputIndex[2];
  boolean isAfterVarSelect=(inputOutputIndex[0] != 0);
  List<Integer> allFeatures=CommonUtils.getAllFeatureList(this.columnConfigList,isAfterVarSelect);
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
 else       if (isKFoldCV) {
        LOG.info(""String_Node_Str"",i);
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      Path bModelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getNNBinaryModelsPath(sourceType),modelName));
      boolean isContinous=false;
      if (gs.hasHyperParam()) {
        isContinous=false;
      }
 else {
        int intContinuous=checkContinuousTraining(fileSystem,localArgs,modelPath,modelConfig.getTrain().getParams());
        if (intContinuous == -1) {
          LOG.warn(""String_Node_Str"",i);
          continue;
        }
 else {
          isContinous=(intContinuous == 1);
        }
      }
      if (gs.hasHyperParam() || isKFoldCV) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
        Map<String,Object> params=gs.hasHyperParam() ? gs.getParams(i) : this.modelConfig.getTrain().getParams();
        Object fssObj=params.get(""String_Node_Str"");
        FeatureSubsetStrategy featureSubsetStrategy=null;
        double featureSubsetRate=0d;
        if (fssObj != null) {
          try {
            featureSubsetRate=Double.parseDouble(fssObj.toString());
            featureSubsetStrategy=null;
          }
 catch (          NumberFormatException ee) {
            featureSubsetStrategy=FeatureSubsetStrategy.of(fssObj.toString());
          }
        }
 else {
          LOG.warn(""String_Node_Str"");
          featureSubsetStrategy=FeatureSubsetStrategy.ALL;
          featureSubsetRate=0;
        }
        Set<Integer> subFeatures=null;
        if (isContinous) {
          BasicFloatNetwork existingModel=(BasicFloatNetwork)CommonUtils.getBasicNetwork(CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource())));
          if (existingModel == null) {
            subFeatures=new HashSet<Integer>(getSubsamplingFeatures(allFeatures,featureSubsetStrategy,featureSubsetRate,inputNodeCount));
          }
 else {
            subFeatures=existingModel.getFeatureSet();
          }
        }
 else {
          subFeatures=new HashSet<Integer>(getSubsamplingFeatures(allFeatures,featureSubsetStrategy,featureSubsetRate,inputNodeCount));
        }
        if (subFeatures == null || subFeatures.size() == 0) {
          localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_NN_FEATURE_SUBSET,""String_Node_Str""));
        }
 else {
          localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_NN_FEATURE_SUBSET,StringUtils.join(subFeatures,',')));
          LOG.debug(""String_Node_Str"",subFeatures.size(),StringUtils.join(subFeatures,','));
        }
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,Constants.SHIFU_NN_BINARY_MODEL_PATH,bModelPath.toString()));
      if (gs.hasHyperParam() || isKFoldCV) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
          status=1;
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isTreeModel(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
        List<BasicML> models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
        Map<Integer,MutablePair<String,Double>> featureImportances=CommonUtils.computeTreeModelFeatureImportance(models);
        String localFsFolder=pathFinder.getLocalFeatureImportanceFolder();
        String localFIPath=pathFinder.getLocalFeatureImportancePath();
        processRollupForFIFiles(localFsFolder,localFIPath);
        CommonUtils.writeFeatureImportance(localFIPath,featureImportances);
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
  if (status != 0) {
    LOG.error(""String_Node_Str"");
  }
  return status;
}",0.9988934254206892
31673,"private double[] convertDataMapToDoubleArray(Map<String,Object> dataMap){
  double[] data=new double[this.columnNumIndexMapping.size()];
  for (  Entry<Integer,Integer> entry : this.columnNumIndexMapping.entrySet()) {
    double value=0d;
    Integer columnNum=entry.getKey();
    String columnName=this.numNameMapping.get(columnNum);
    Object obj=dataMap.get(columnName);
    if (this.categoricalColumnNameNames.containsKey(columnNum)) {
      double indexValue=-1d;
      int categoricalSize=categoricalColumnNameNames.get(columnNum).size();
      if (obj == null) {
        indexValue=categoricalSize;
      }
 else {
        Integer intIndex=columnCategoryIndexMapping.get(columnNum).get(obj.toString());
        if (intIndex == null || intIndex < 0 || intIndex >= categoricalSize) {
          intIndex=categoricalSize;
        }
        indexValue=intIndex;
      }
      value=indexValue;
    }
 else {
      if (obj == null || ((obj instanceof String) && ((String)obj).length() == 0)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
 else {
        if (obj instanceof Number) {
          value=((Number)obj).doubleValue();
        }
 else {
          try {
            value=Double.parseDouble(obj.toString());
          }
 catch (          NumberFormatException e) {
            value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
          }
        }
      }
      if (Double.isNaN(value)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
    }
    Integer index=entry.getValue();
    if (index != null && index < data.length) {
      data[index]=value;
    }
  }
  return data;
}","private double[] convertDataMapToDoubleArray(Map<String,Object> dataMap){
  double[] data=new double[this.columnNumIndexMapping.size()];
  for (  Entry<Integer,Integer> entry : this.columnNumIndexMapping.entrySet()) {
    double value=0d;
    Integer columnNum=entry.getKey();
    String columnName=this.numNameMapping.get(columnNum);
    Object obj=dataMap.get(columnName);
    if (this.categoricalColumnNameNames.containsKey(columnNum)) {
      double indexValue=-1d;
      int categoricalSize=categoricalColumnNameNames.get(columnNum).size();
      if (obj == null) {
        indexValue=categoricalSize;
      }
 else {
        Map<String,Integer> categoryIndexMap=columnCategoryIndexMapping.get(columnNum);
        Integer intIndex=categoryIndexMap.get(obj.toString());
        if (intIndex == null || intIndex < 0 || intIndex >= categoricalSize) {
          intIndex=categoryIndexMap.get(CommonUtils.trimTag(obj.toString()));
          if (intIndex == null || intIndex < 0 || intIndex >= categoricalSize) {
            intIndex=categoricalSize;
          }
        }
        indexValue=intIndex;
      }
      value=indexValue;
    }
 else {
      if (obj == null || ((obj instanceof String) && ((String)obj).length() == 0)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
 else {
        if (obj instanceof Number) {
          value=((Number)obj).doubleValue();
        }
 else {
          try {
            value=Double.parseDouble(obj.toString());
          }
 catch (          NumberFormatException e) {
            value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
          }
        }
      }
      if (Double.isNaN(value)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
    }
    Integer index=entry.getValue();
    if (index != null && index < data.length) {
      data[index]=value;
    }
  }
  return data;
}",0.8789942378208486
31674,"@Test public void trimNumber(){
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(null),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
}","@Test public void trimNumber(){
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(null),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
}",0.938449848024316
31675,"@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
    PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
  }
  final String rawTag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(new NSColumn(config.getColumnName()).getSimpleName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        Map<String,Integer> map=this.categoricalIndexMap.get(config.getColumnNum());
        tuple.append(((map.get(val) == null || map.get(val) == -1)) ? ""String_Node_Str"" : val);
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType,this.categoryMissingNormType);
        tuple.append(df.format(normVal));
      }
 else {
        tuple.append(config.isMeta() ? val : null);
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}","@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
    PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
  }
  Object tag=input.get(tagColumnNum);
  if (tag == null) {
    log.warn(""String_Node_Str"");
    return null;
  }
  final String rawTag=CommonUtils.trimTag(tag.toString());
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(new NSColumn(config.getColumnName()).getSimpleName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        Map<String,Integer> map=this.categoricalIndexMap.get(config.getColumnNum());
        tuple.append(((map.get(val) == null || map.get(val) == -1)) ? ""String_Node_Str"" : val);
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType,this.categoryMissingNormType);
        tuple.append(df.format(normVal));
      }
 else {
        tuple.append(config.isMeta() ? val : null);
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}",0.9785460719246796
31676,"public void updateColumnConfig(ColumnConfig columnConfig){
  String varName=columnConfig.getColumnName();
  if (this.setMeta.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Meta);
    columnConfig.setFinalSelect(false);
  }
 else   if (this.setForceRemove.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceRemove);
    columnConfig.setFinalSelect(false);
  }
 else   if (this.setForceSelect.contains(new NSColumn(varName))) {
    if (CollectionUtils.isEmpty(this.setCandidates) || (CollectionUtils.isNotEmpty(this.setCandidates) && this.setCandidates.contains(new NSColumn(varName)))) {
      columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceSelect);
      columnConfig.setFinalSelect(true);
    }
  }
}","public void updateColumnConfig(ColumnConfig columnConfig){
  String varName=columnConfig.getColumnName();
  if (this.setMeta.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Meta);
    columnConfig.setFinalSelect(false);
  }
 else   if (this.setForceRemove.contains(new NSColumn(varName))) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceRemove);
    columnConfig.setFinalSelect(false);
  }
 else   if (this.setForceSelect.contains(new NSColumn(varName))) {
    if (CollectionUtils.isEmpty(this.setCandidates) || (CollectionUtils.isNotEmpty(this.setCandidates) && this.setCandidates.contains(new NSColumn(varName)))) {
      columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceSelect);
    }
  }
}",0.9735994848679974
31677,"@Override public void postIteration(final MasterContext<DTMasterParams,DTWorkerParams> context){
  long start=System.currentTimeMillis();
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  if (isRF) {
    if (context.getCurrentIteration() % (tmpModelFactor * 2) == 0) {
      Thread tmpModelPersistThread=new Thread(new Runnable(){
        @Override public void run(){
          Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
          writeModelToFileSystem(context.getMasterResult().getTrees(),out);
          saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getTrees());
        }
      }
,""String_Node_Str"");
      tmpModelPersistThread.setDaemon(true);
      tmpModelPersistThread.start();
    }
  }
 else   if (isGBDT) {
    if (this.treeNum >= 10 && context.getMasterResult().isSwitchToNextTree() && (context.getMasterResult().getTmpTrees().size() - 1) % (this.treeNum / 10) == 0) {
      final List<TreeNode> trees=context.getMasterResult().getTmpTrees();
      if (trees.size() > 1) {
        Thread tmpModelPersistThread=new Thread(new Runnable(){
          @Override public void run(){
            List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
            Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
            writeModelToFileSystem(subTrees,out);
            saveTmpModelToHDFS(subTrees.size(),subTrees);
          }
        }
,""String_Node_Str"");
        tmpModelPersistThread.setDaemon(true);
        tmpModelPersistThread.start();
      }
    }
  }
  updateProgressLog(context);
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}","@Override public void postIteration(final MasterContext<DTMasterParams,DTWorkerParams> context){
  long start=System.currentTimeMillis();
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  if (isRF) {
    if (context.getCurrentIteration() % (tmpModelFactor * 2) == 0) {
      Thread tmpModelPersistThread=new Thread(new Runnable(){
        @Override public void run(){
          Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
          if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
            writeModelToFileSystem(context.getMasterResult().getTrees(),out);
          }
          saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getTrees());
        }
      }
,""String_Node_Str"");
      tmpModelPersistThread.setDaemon(true);
      tmpModelPersistThread.start();
    }
  }
 else   if (isGBDT) {
    if (this.treeNum >= 10 && context.getMasterResult().isSwitchToNextTree() && (context.getMasterResult().getTmpTrees().size() - 1) % (this.treeNum / 10) == 0) {
      final List<TreeNode> trees=context.getMasterResult().getTmpTrees();
      if (trees.size() > 1) {
        Thread tmpModelPersistThread=new Thread(new Runnable(){
          @Override public void run(){
            List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
            Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
            if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
              writeModelToFileSystem(subTrees,out);
            }
            saveTmpModelToHDFS(subTrees.size(),subTrees);
          }
        }
,""String_Node_Str"");
        tmpModelPersistThread.setDaemon(true);
        tmpModelPersistThread.start();
      }
    }
  }
  updateProgressLog(context);
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}",0.92795232936078
31678,"@Override public void run(){
  List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  writeModelToFileSystem(subTrees,out);
  saveTmpModelToHDFS(subTrees.size(),subTrees);
}","@Override public void run(){
  List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
    writeModelToFileSystem(subTrees,out);
  }
  saveTmpModelToHDFS(subTrees.size(),subTrees);
}",0.8205928237129485
31679,"private double[] convertDataMapToDoubleArray(Map<String,Object> dataMap){
  double[] data=new double[this.columnNumIndexMapping.size()];
  for (  Entry<Integer,Integer> entry : this.columnNumIndexMapping.entrySet()) {
    double value=0d;
    Integer columnNum=entry.getKey();
    String columnName=this.numNameMapping.get(columnNum);
    Object obj=dataMap.get(columnName);
    if (this.categoricalColumnNameNames.containsKey(columnNum)) {
      double indexValue=-1d;
      int categoricalSize=categoricalColumnNameNames.get(columnNum).size();
      if (obj == null) {
        indexValue=categoricalSize;
      }
 else {
        Map<String,Integer> categoryIndexMap=columnCategoryIndexMapping.get(columnNum);
        Integer intIndex=categoryIndexMap.get(obj.toString());
        if (intIndex == null || intIndex < 0 || intIndex >= categoricalSize) {
          intIndex=categoryIndexMap.get(CommonUtils.trimTag(obj.toString()));
          if (intIndex == null || intIndex < 0 || intIndex >= categoricalSize) {
            intIndex=categoricalSize;
          }
        }
        indexValue=intIndex;
      }
      value=indexValue;
    }
 else {
      if (obj == null || ((obj instanceof String) && ((String)obj).length() == 0)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
 else {
        if (obj instanceof Number) {
          value=((Number)obj).doubleValue();
        }
 else {
          try {
            value=Double.parseDouble(obj.toString());
          }
 catch (          NumberFormatException e) {
            value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
          }
        }
      }
      if (Double.isNaN(value)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
    }
    Integer index=entry.getValue();
    if (index != null && index < data.length) {
      data[index]=value;
    }
  }
  return data;
}","private double[] convertDataMapToDoubleArray(Map<String,Object> dataMap){
  double[] data=new double[this.columnNumIndexMapping.size()];
  for (  Entry<Integer,Integer> entry : this.columnNumIndexMapping.entrySet()) {
    double value=0d;
    Integer columnNum=entry.getKey();
    String columnName=this.numNameMapping.get(columnNum);
    Object obj=dataMap.get(columnName);
    if (this.categoricalColumnNameNames.containsKey(columnNum)) {
      double indexValue=-1d;
      int categoricalSize=categoricalColumnNameNames.get(columnNum).size();
      if (obj == null) {
        indexValue=categoricalSize;
      }
 else {
        Map<String,Integer> categoryIndexMap=columnCategoryIndexMapping.get(columnNum);
        Integer intIndex=categoryIndexMap.get(obj.toString());
        if (intIndex == null || intIndex < 0 || intIndex >= categoricalSize) {
          intIndex=categoricalSize;
        }
        indexValue=intIndex;
      }
      value=indexValue;
    }
 else {
      if (obj == null || ((obj instanceof String) && ((String)obj).length() == 0)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
 else {
        if (obj instanceof Number) {
          value=((Number)obj).doubleValue();
        }
 else {
          try {
            value=Double.parseDouble(obj.toString());
          }
 catch (          NumberFormatException e) {
            value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
          }
        }
      }
      if (Double.isNaN(value)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
    }
    Integer index=entry.getValue();
    if (index != null && index < data.length) {
      data[index]=value;
    }
  }
  return data;
}",0.9044060809069828
31680,"/** 
 * Load model instance from stream like model0.gbt or model0.rf. User can specify to use raw score or score after sigmoid transfrom by isConvertToProb.
 * @param input the input stream
 * @param isConvertToProb if convert score to probability (if to transform raw score by sigmoid)
 * @param isOptimizeMode if column index query is optimized
 * @param isRemoveNameSpace new column name including namespace like ""a::b"", if true, remove ""a::"" and set column name to simple name
 * @return the tree model instance
 * @throws IOException any exception in load input stream
 */
public static IndependentTreeModel loadFromStream(InputStream input,boolean isConvertToProb,boolean isOptimizeMode,boolean isRemoveNameSpace) throws IOException {
  DataInputStream dis=null;
  try {
    byte[] header=new byte[2];
    BufferedInputStream bis=new BufferedInputStream(input);
    bis.mark(2);
    int result=bis.read(header);
    bis.reset();
    int ss=(header[0] & 0xff) | ((header[1] & 0xff) << 8);
    if (result != -1 && ss == GZIPInputStream.GZIP_MAGIC) {
      dis=new DataInputStream(new GZIPInputStream(bis));
    }
 else {
      dis=new DataInputStream(bis);
    }
  }
 catch (  java.io.IOException e) {
    dis=new DataInputStream(input);
  }
  int version=dis.readInt();
  IndependentTreeModel.setVersion(version);
  String algorithm=dis.readUTF();
  String lossStr=dis.readUTF();
  boolean isClassification=dis.readBoolean();
  boolean isOneVsAll=dis.readBoolean();
  int inputNode=dis.readInt();
  int size=dis.readInt();
  Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>(size,1f);
  Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>(size,1f);
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    double mean=dis.readDouble();
    numericalMeanMapping.put(columnIndex,mean);
  }
  size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    String columnName=dis.readUTF();
    if (isRemoveNameSpace) {
      columnName=CommonUtils.getSimpleColumnName(columnName);
    }
    columnIndexNameMapping.put(columnIndex,columnName);
  }
  size=dis.readInt();
  Map<Integer,List<String>> categoricalColumnNameNames=new HashMap<Integer,List<String>>(size,1f);
  Map<Integer,Map<String,Integer>> columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>(size,1f);
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    int categoryListSize=dis.readInt();
    Map<String,Integer> categoryIndexMapping=new HashMap<String,Integer>(categoryListSize,1f);
    List<String> categories=new ArrayList<String>(categoryListSize);
    for (int j=0; j < categoryListSize; j++) {
      String category=dis.readUTF();
      categories.add(category);
      if (category.contains(Constants.CATEGORICAL_GROUP_VAL_DELIMITER)) {
        String[] splits=split(category,Constants.CATEGORICAL_GROUP_VAL_DELIMITER);
        for (        String str : splits) {
          categoryIndexMapping.put(str,j);
          String tmStr=CommonUtils.trimTag(str);
          if (!str.equals(tmStr)) {
            categoryIndexMapping.put(tmStr,j);
          }
        }
      }
 else {
        categoryIndexMapping.put(category,j);
        String tmCategory=CommonUtils.trimTag(category);
        if (!category.equals(tmCategory)) {
          categoryIndexMapping.put(tmCategory,j);
        }
      }
    }
    categoricalColumnNameNames.put(columnIndex,categories);
    columnCategoryIndexMapping.put(columnIndex,categoryIndexMapping);
  }
  int columnMappingSize=dis.readInt();
  Map<Integer,Integer> columnMapping=new HashMap<Integer,Integer>(columnMappingSize,1f);
  for (int i=0; i < columnMappingSize; i++) {
    columnMapping.put(dis.readInt(),dis.readInt());
  }
  int treeNum=dis.readInt();
  List<TreeNode> trees=new CopyOnWriteArrayList<TreeNode>();
  List<Double> weights=new ArrayList<Double>(treeNum);
  for (int i=0; i < treeNum; i++) {
    TreeNode treeNode=new TreeNode();
    treeNode.readFields(dis);
    trees.add(treeNode);
    weights.add(treeNode.getLearningRate());
    if (isOptimizeMode) {
      treeNode.remapColumnNum(columnMapping);
    }
  }
  return new IndependentTreeModel(numericalMeanMapping,columnIndexNameMapping,categoricalColumnNameNames,columnCategoryIndexMapping,columnMapping,isOptimizeMode,trees,weights,CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(algorithm),isClassification && !isOneVsAll,isConvertToProb,lossStr,algorithm,inputNode,version);
}","/** 
 * Load model instance from stream like model0.gbt or model0.rf. User can specify to use raw score or score after sigmoid transfrom by isConvertToProb.
 * @param input the input stream
 * @param isConvertToProb if convert score to probability (if to transform raw score by sigmoid)
 * @param isOptimizeMode if column index query is optimized
 * @param isRemoveNameSpace new column name including namespace like ""a::b"", if true, remove ""a::"" and set column name to simple name
 * @return the tree model instance
 * @throws IOException any exception in load input stream
 */
public static IndependentTreeModel loadFromStream(InputStream input,boolean isConvertToProb,boolean isOptimizeMode,boolean isRemoveNameSpace) throws IOException {
  DataInputStream dis=null;
  try {
    byte[] header=new byte[2];
    BufferedInputStream bis=new BufferedInputStream(input);
    bis.mark(2);
    int result=bis.read(header);
    bis.reset();
    int ss=(header[0] & 0xff) | ((header[1] & 0xff) << 8);
    if (result != -1 && ss == GZIPInputStream.GZIP_MAGIC) {
      dis=new DataInputStream(new GZIPInputStream(bis));
    }
 else {
      dis=new DataInputStream(bis);
    }
  }
 catch (  java.io.IOException e) {
    dis=new DataInputStream(input);
  }
  int version=dis.readInt();
  IndependentTreeModel.setVersion(version);
  String algorithm=dis.readUTF();
  String lossStr=dis.readUTF();
  boolean isClassification=dis.readBoolean();
  boolean isOneVsAll=dis.readBoolean();
  int inputNode=dis.readInt();
  int size=dis.readInt();
  Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>(size,1f);
  Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>(size,1f);
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    double mean=dis.readDouble();
    numericalMeanMapping.put(columnIndex,mean);
  }
  size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    String columnName=dis.readUTF();
    if (isRemoveNameSpace) {
      columnName=CommonUtils.getSimpleColumnName(columnName);
    }
    columnIndexNameMapping.put(columnIndex,columnName);
  }
  size=dis.readInt();
  Map<Integer,List<String>> categoricalColumnNameNames=new HashMap<Integer,List<String>>(size,1f);
  Map<Integer,Map<String,Integer>> columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>(size,1f);
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    int categoryListSize=dis.readInt();
    Map<String,Integer> categoryIndexMapping=new HashMap<String,Integer>(categoryListSize,1f);
    List<String> categories=new ArrayList<String>(categoryListSize);
    for (int j=0; j < categoryListSize; j++) {
      String category=dis.readUTF();
      categories.add(category);
      if (category.contains(Constants.CATEGORICAL_GROUP_VAL_DELIMITER)) {
        String[] splits=split(category,Constants.CATEGORICAL_GROUP_VAL_DELIMITER);
        for (        String str : splits) {
          categoryIndexMapping.put(str,j);
        }
      }
 else {
        categoryIndexMapping.put(category,j);
      }
    }
    categoricalColumnNameNames.put(columnIndex,categories);
    columnCategoryIndexMapping.put(columnIndex,categoryIndexMapping);
  }
  int columnMappingSize=dis.readInt();
  Map<Integer,Integer> columnMapping=new HashMap<Integer,Integer>(columnMappingSize,1f);
  for (int i=0; i < columnMappingSize; i++) {
    columnMapping.put(dis.readInt(),dis.readInt());
  }
  int treeNum=dis.readInt();
  List<TreeNode> trees=new CopyOnWriteArrayList<TreeNode>();
  List<Double> weights=new ArrayList<Double>(treeNum);
  for (int i=0; i < treeNum; i++) {
    TreeNode treeNode=new TreeNode();
    treeNode.readFields(dis);
    trees.add(treeNode);
    weights.add(treeNode.getLearningRate());
    if (isOptimizeMode) {
      treeNode.remapColumnNum(columnMapping);
    }
  }
  return new IndependentTreeModel(numericalMeanMapping,columnIndexNameMapping,categoricalColumnNameNames,columnCategoryIndexMapping,columnMapping,isOptimizeMode,trees,weights,CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(algorithm),isClassification && !isOneVsAll,isConvertToProb,lossStr,algorithm,inputNode,version);
}",0.959360889197638
31681,"@Override public void postIteration(final MasterContext<LogisticRegressionParams,LogisticRegressionParams> context){
  if (this.isDry) {
    return;
  }
  double currentError=((modelConfig.getTrain().getValidSetRate() < EPSILON) ? context.getMasterResult().getTrainError() : context.getMasterResult().getTestError());
  if (currentError < this.minTestError) {
    this.minTestError=currentError;
    this.optimizedWeights=context.getMasterResult().getParameters();
  }
  if (context.getCurrentIteration() % DTrainUtils.tmpModelFactor(context.getTotalIteration()) == 0) {
    Thread tmpNNThread=new Thread(new Runnable(){
      @Override public void run(){
        saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getParameters());
        Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
        writeModelWeightsToFileSystem(optimizedWeights,out);
      }
    }
,""String_Node_Str"");
    tmpNNThread.setDaemon(true);
    tmpNNThread.start();
  }
  updateProgressLog(context);
}","@Override public void postIteration(final MasterContext<LogisticRegressionParams,LogisticRegressionParams> context){
  if (this.isDry) {
    return;
  }
  double currentError=((modelConfig.getTrain().getValidSetRate() < EPSILON) ? context.getMasterResult().getTrainError() : context.getMasterResult().getTestError());
  if (currentError < this.minTestError) {
    this.minTestError=currentError;
    this.optimizedWeights=context.getMasterResult().getParameters();
  }
  if (context.getCurrentIteration() % DTrainUtils.tmpModelFactor(context.getTotalIteration()) == 0) {
    Thread tmpNNThread=new Thread(new Runnable(){
      @Override public void run(){
        saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getParameters());
        Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
        if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
          writeModelWeightsToFileSystem(optimizedWeights,out);
        }
      }
    }
,""String_Node_Str"");
    tmpNNThread.setDaemon(true);
    tmpNNThread.start();
  }
  updateProgressLog(context);
}",0.9422464756707596
31682,"@Override public void run(){
  saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getParameters());
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  writeModelWeightsToFileSystem(optimizedWeights,out);
}","@Override public void run(){
  saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getParameters());
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
    writeModelWeightsToFileSystem(optimizedWeights,out);
  }
}",0.8211508553654744
31683,"@Override public void postIteration(final MasterContext<NNParams,NNParams> context){
  if (this.isDry) {
    return;
  }
  double currentError=((modelConfig.getTrain().getValidSetRate() < EPSILON) ? context.getMasterResult().getTrainError() : context.getMasterResult().getTestError());
  if (currentError < this.minTestError) {
    this.minTestError=currentError;
    this.optimizedWeights=context.getMasterResult().getWeights();
  }
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  if (context.getCurrentIteration() % tmpModelFactor == 0) {
    Thread tmpNNThread=new Thread(new Runnable(){
      @Override public void run(){
        saveTmpNNToHDFS(context.getCurrentIteration(),context.getMasterResult().getWeights());
        Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
        writeModelWeightsToFileSystem(optimizedWeights,out);
      }
    }
,""String_Node_Str"");
    tmpNNThread.setDaemon(true);
    tmpNNThread.start();
  }
  updateProgressLog(context);
}","@Override public void postIteration(final MasterContext<NNParams,NNParams> context){
  if (this.isDry) {
    return;
  }
  double currentError=((modelConfig.getTrain().getValidSetRate() < EPSILON) ? context.getMasterResult().getTrainError() : context.getMasterResult().getTestError());
  if (currentError < this.minTestError) {
    this.minTestError=currentError;
    this.optimizedWeights=context.getMasterResult().getWeights();
  }
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  if (context.getCurrentIteration() % tmpModelFactor == 0) {
    Thread tmpNNThread=new Thread(new Runnable(){
      @Override public void run(){
        saveTmpNNToHDFS(context.getCurrentIteration(),context.getMasterResult().getWeights());
        Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
        if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
          writeModelWeightsToFileSystem(optimizedWeights,out);
        }
      }
    }
,""String_Node_Str"");
    tmpNNThread.setDaemon(true);
    tmpNNThread.start();
  }
  updateProgressLog(context);
}",0.9423513390830686
31684,"@Override public void run(){
  saveTmpNNToHDFS(context.getCurrentIteration(),context.getMasterResult().getWeights());
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  writeModelWeightsToFileSystem(optimizedWeights,out);
}","@Override public void run(){
  saveTmpNNToHDFS(context.getCurrentIteration(),context.getMasterResult().getWeights());
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
    writeModelWeightsToFileSystem(optimizedWeights,out);
  }
}",0.8177496038034865
31685,"/** 
 * Create DerivedField for categorical variable
 * @param config - ColumnConfig for categorical variable
 * @param cutoff - cutoff for normalization
 * @param normType - the normalization method that is used to generate DerivedField
 * @return DerivedField for variable
 */
protected List<DerivedField> createCategoricalDerivedField(ColumnConfig config,double cutoff,ModelNormalizeConf.NormType normType){
  Document document=null;
  try {
    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  }
 catch (  ParserConfigurationException e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
  String defaultValue=Normalizer.normalize(config,""String_Node_Str"",cutoff,normType).toString();
  String missingValue=Normalizer.normalize(config,null,cutoff,normType).toString();
  InlineTable inlineTable=new InlineTable();
  for (int i=0; i < config.getBinCategory().size(); i++) {
    List<String> catVals=CommonUtils.flattenCatValGrp(config.getBinCategory().get(i));
    for (    String cval : catVals) {
      String dval=Normalizer.normalize(config,cval,cutoff,normType).toString();
      Element out=document.createElementNS(NAME_SPACE_URI,ELEMENT_OUT);
      out.setTextContent(dval);
      Element origin=document.createElementNS(NAME_SPACE_URI,ELEMENT_ORIGIN);
      origin.setTextContent(cval);
      inlineTable.withRows(new Row().withContent(origin).withContent(out));
      String tmCval=CommonUtils.trimTag(cval);
      if (!cval.equals(tmCval)) {
        Element tmOut=document.createElementNS(NAME_SPACE_URI,ELEMENT_OUT);
        tmOut.setTextContent(dval);
        Element tmOrigin=document.createElementNS(NAME_SPACE_URI,ELEMENT_ORIGIN);
        tmOrigin.setTextContent(tmCval);
        inlineTable.withRows(new Row().withContent(origin).withContent(tmOut));
      }
    }
  }
  MapValues mapValues=new MapValues(""String_Node_Str"").withDataType(DataType.DOUBLE).withDefaultValue(defaultValue).withFieldColumnPairs(new FieldColumnPair(new FieldName(CommonUtils.getSimpleColumnName(config)),ELEMENT_ORIGIN)).withInlineTable(inlineTable).withMapMissingTo(missingValue);
  List<DerivedField> derivedFields=new ArrayList<DerivedField>();
  derivedFields.add(new DerivedField(OpType.CONTINUOUS,DataType.DOUBLE).withName(FieldName.create(genPmmlColumnName(CommonUtils.getSimpleColumnName(config),normType))).withExpression(mapValues));
  return derivedFields;
}","/** 
 * Create DerivedField for categorical variable
 * @param config - ColumnConfig for categorical variable
 * @param cutoff - cutoff for normalization
 * @param normType - the normalization method that is used to generate DerivedField
 * @return DerivedField for variable
 */
protected List<DerivedField> createCategoricalDerivedField(ColumnConfig config,double cutoff,ModelNormalizeConf.NormType normType){
  Document document=null;
  try {
    document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  }
 catch (  ParserConfigurationException e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
  String defaultValue=Normalizer.normalize(config,""String_Node_Str"",cutoff,normType).toString();
  String missingValue=Normalizer.normalize(config,null,cutoff,normType).toString();
  InlineTable inlineTable=new InlineTable();
  for (int i=0; i < config.getBinCategory().size(); i++) {
    List<String> catVals=CommonUtils.flattenCatValGrp(config.getBinCategory().get(i));
    for (    String cval : catVals) {
      String dval=Normalizer.normalize(config,cval,cutoff,normType).toString();
      Element out=document.createElementNS(NAME_SPACE_URI,ELEMENT_OUT);
      out.setTextContent(dval);
      Element origin=document.createElementNS(NAME_SPACE_URI,ELEMENT_ORIGIN);
      origin.setTextContent(cval);
      inlineTable.withRows(new Row().withContent(origin).withContent(out));
    }
  }
  MapValues mapValues=new MapValues(""String_Node_Str"").withDataType(DataType.DOUBLE).withDefaultValue(defaultValue).withFieldColumnPairs(new FieldColumnPair(new FieldName(CommonUtils.getSimpleColumnName(config)),ELEMENT_ORIGIN)).withInlineTable(inlineTable).withMapMissingTo(missingValue);
  List<DerivedField> derivedFields=new ArrayList<DerivedField>();
  derivedFields.add(new DerivedField(OpType.CONTINUOUS,DataType.DOUBLE).withName(FieldName.create(genPmmlColumnName(CommonUtils.getSimpleColumnName(config),normType))).withExpression(mapValues));
  return derivedFields;
}",0.678698752228164
31686,"@Test public void trimNumber(){
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(null),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
}","@Test public void trimNumber(){
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(null),""String_Node_Str"");
  Assert.assertEquals(CommonUtils.trimTag(""String_Node_Str""),""String_Node_Str"");
}",0.9451962110960758
31687,"@Override public void postIteration(final MasterContext<DTMasterParams,DTWorkerParams> context){
  long start=System.currentTimeMillis();
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  if (isRF) {
    if (context.getCurrentIteration() % (tmpModelFactor * 2) == 0) {
      Thread tmpModelPersistThread=new Thread(new Runnable(){
        @Override public void run(){
          Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
          if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
            writeModelToFileSystem(context.getMasterResult().getTrees(),out);
          }
          saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getTrees());
        }
      }
,""String_Node_Str"");
      tmpModelPersistThread.setDaemon(true);
      tmpModelPersistThread.start();
    }
  }
 else   if (isGBDT) {
    if (this.treeNum >= 10 && context.getMasterResult().isSwitchToNextTree() && (context.getMasterResult().getTmpTrees().size() - 1) % (this.treeNum / 10) == 0) {
      final List<TreeNode> trees=context.getMasterResult().getTmpTrees();
      if (trees.size() > 1) {
        Thread tmpModelPersistThread=new Thread(new Runnable(){
          @Override public void run(){
            List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
            Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
            if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
              writeModelToFileSystem(subTrees,out);
            }
            saveTmpModelToHDFS(subTrees.size(),subTrees);
          }
        }
,""String_Node_Str"");
        tmpModelPersistThread.setDaemon(true);
        tmpModelPersistThread.start();
      }
    }
  }
  updateProgressLog(context);
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}","@Override public void postIteration(final MasterContext<DTMasterParams,DTWorkerParams> context){
  long start=System.currentTimeMillis();
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  final int currentIteration=context.getCurrentIteration();
  final int totalIteration=context.getTotalIteration();
  final boolean isHalt=context.getMasterResult().isHalt();
  if (isRF) {
    if (currentIteration % (tmpModelFactor * 2) == 0) {
      Thread tmpModelPersistThread=new Thread(new Runnable(){
        @Override public void run(){
          Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
          if (!isHalt && currentIteration != totalIteration) {
            writeModelToFileSystem(context.getMasterResult().getTrees(),out);
          }
          saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getTrees());
        }
      }
,""String_Node_Str"");
      tmpModelPersistThread.setDaemon(true);
      tmpModelPersistThread.start();
    }
  }
 else   if (isGBDT) {
    if (this.treeNum >= 10 && context.getMasterResult().isSwitchToNextTree() && (context.getMasterResult().getTmpTrees().size() - 1) % (this.treeNum / 10) == 0) {
      final List<TreeNode> trees=context.getMasterResult().getTmpTrees();
      if (trees.size() > 1) {
        Thread tmpModelPersistThread=new Thread(new Runnable(){
          @Override public void run(){
            List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
            Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
            if (!isHalt && currentIteration != totalIteration) {
              writeModelToFileSystem(subTrees,out);
            }
            saveTmpModelToHDFS(subTrees.size(),subTrees);
          }
        }
,""String_Node_Str"");
        tmpModelPersistThread.setDaemon(true);
        tmpModelPersistThread.start();
      }
    }
  }
  updateProgressLog(context);
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}",0.9252243270189432
31688,"@Override public void run(){
  List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
    writeModelToFileSystem(subTrees,out);
  }
  saveTmpModelToHDFS(subTrees.size(),subTrees);
}","@Override public void run(){
  List<TreeNode> subTrees=trees.subList(0,trees.size() - 1);
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!isHalt && currentIteration != totalIteration) {
    writeModelToFileSystem(subTrees,out);
  }
  saveTmpModelToHDFS(subTrees.size(),subTrees);
}",0.9202279202279202
31689,"@Override public void postIteration(final MasterContext<LogisticRegressionParams,LogisticRegressionParams> context){
  if (this.isDry) {
    return;
  }
  double currentError=((modelConfig.getTrain().getValidSetRate() < EPSILON) ? context.getMasterResult().getTrainError() : context.getMasterResult().getTestError());
  if (currentError < this.minTestError) {
    this.minTestError=currentError;
    this.optimizedWeights=context.getMasterResult().getParameters();
  }
  if (context.getCurrentIteration() % DTrainUtils.tmpModelFactor(context.getTotalIteration()) == 0) {
    Thread tmpNNThread=new Thread(new Runnable(){
      @Override public void run(){
        saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getParameters());
        Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
        if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
          writeModelWeightsToFileSystem(optimizedWeights,out);
        }
      }
    }
,""String_Node_Str"");
    tmpNNThread.setDaemon(true);
    tmpNNThread.start();
  }
  updateProgressLog(context);
}","@Override public void postIteration(final MasterContext<LogisticRegressionParams,LogisticRegressionParams> context){
  if (this.isDry) {
    return;
  }
  double currentError=((modelConfig.getTrain().getValidSetRate() < EPSILON) ? context.getMasterResult().getTrainError() : context.getMasterResult().getTestError());
  if (currentError < this.minTestError) {
    this.minTestError=currentError;
    this.optimizedWeights=context.getMasterResult().getParameters();
  }
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  final int currentIteration=context.getCurrentIteration();
  final double[] parameters=context.getMasterResult().getParameters();
  final int totalIteration=context.getTotalIteration();
  final boolean isHalt=context.getMasterResult().isHalt();
  if ((currentIteration - 1) % tmpModelFactor == 0) {
    Thread tmpNNThread=new Thread(new Runnable(){
      @Override public void run(){
        saveTmpModelToHDFS(currentIteration - 1,parameters);
        Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
        if (!isHalt && currentIteration != totalIteration) {
          writeModelWeightsToFileSystem(optimizedWeights,out);
        }
      }
    }
,""String_Node_Str"");
    tmpNNThread.setDaemon(true);
    tmpNNThread.start();
  }
  updateProgressLog(context);
}",0.8042959427207638
31690,"@Override public void run(){
  saveTmpModelToHDFS(context.getCurrentIteration(),context.getMasterResult().getParameters());
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
    writeModelWeightsToFileSystem(optimizedWeights,out);
  }
}","@Override public void run(){
  saveTmpModelToHDFS(currentIteration - 1,parameters);
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!isHalt && currentIteration != totalIteration) {
    writeModelWeightsToFileSystem(optimizedWeights,out);
  }
}",0.8132530120481928
31691,"@Override public void postIteration(final MasterContext<NNParams,NNParams> context){
  if (this.isDry) {
    return;
  }
  double currentError=((modelConfig.getTrain().getValidSetRate() < EPSILON) ? context.getMasterResult().getTrainError() : context.getMasterResult().getTestError());
  if (currentError < this.minTestError) {
    this.minTestError=currentError;
    this.optimizedWeights=context.getMasterResult().getWeights();
  }
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  if (context.getCurrentIteration() % tmpModelFactor == 0) {
    Thread tmpNNThread=new Thread(new Runnable(){
      @Override public void run(){
        saveTmpNNToHDFS(context.getCurrentIteration(),context.getMasterResult().getWeights());
        Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
        if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
          writeModelWeightsToFileSystem(optimizedWeights,out);
        }
      }
    }
,""String_Node_Str"");
    tmpNNThread.setDaemon(true);
    tmpNNThread.start();
  }
  updateProgressLog(context);
}","@Override public void postIteration(final MasterContext<NNParams,NNParams> context){
  if (this.isDry) {
    return;
  }
  double currentError=((modelConfig.getTrain().getValidSetRate() < EPSILON) ? context.getMasterResult().getTrainError() : context.getMasterResult().getTestError());
  if (currentError < this.minTestError) {
    this.minTestError=currentError;
    this.optimizedWeights=context.getMasterResult().getWeights();
  }
  final int tmpModelFactor=DTrainUtils.tmpModelFactor(context.getTotalIteration());
  final int currentIteration=context.getCurrentIteration();
  final double[] weights=context.getMasterResult().getWeights();
  final int totalIteration=context.getTotalIteration();
  final boolean isHalt=context.getMasterResult().isHalt();
  if (currentIteration > 1 && (currentIteration - 1) % tmpModelFactor == 0) {
    Thread tmpNNThread=new Thread(new Runnable(){
      @Override public void run(){
        saveTmpNNToHDFS(currentIteration - 1,weights);
        Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
        if (!isHalt && currentIteration != totalIteration) {
          writeModelWeightsToFileSystem(optimizedWeights,out);
        }
      }
    }
,""String_Node_Str"");
    tmpNNThread.setDaemon(true);
    tmpNNThread.start();
  }
  updateProgressLog(context);
}",0.8471720818291215
31692,"@Override public void run(){
  saveTmpNNToHDFS(context.getCurrentIteration(),context.getMasterResult().getWeights());
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!context.getMasterResult().isHalt() && context.getCurrentIteration() != context.getTotalIteration()) {
    writeModelWeightsToFileSystem(optimizedWeights,out);
  }
}","@Override public void run(){
  saveTmpNNToHDFS(currentIteration - 1,weights);
  Path out=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
  if (!isHalt && currentIteration != totalIteration) {
    writeModelWeightsToFileSystem(optimizedWeights,out);
  }
}",0.8190184049079755
31693,"/** 
 * Get feature importance of current model.
 * @return map of feature importance, key is column index.
 */
public Map<Integer,MutablePair<String,Double>> getFeatureImportances(){
  Map<Integer,MutablePair<String,Double>> importancesSum=new HashMap<Integer,MutablePair<String,Double>>();
  Map<Integer,String> nameMapping=this.getIndependentTreeModel().getNumNameMapping();
  int size=this.getIndependentTreeModel().getTrees().size();
  for (  TreeNode tree : this.getIndependentTreeModel().getTrees()) {
    Map<Integer,Double> subImportances=tree.computeFeatureImportance();
    for (    Entry<Integer,Double> entry : subImportances.entrySet()) {
      String featureName=nameMapping.get(entry.getKey());
      MutablePair<String,Double> importance=MutablePair.of(featureName,entry.getValue());
      if (!importancesSum.containsKey(entry.getKey())) {
        importance.setValue(importance.getValue() / size);
        importancesSum.put(entry.getKey(),importance);
      }
 else {
        MutablePair<String,Double> current=importancesSum.get(entry.getKey());
        current.setValue(current.getValue() + importance.getValue() / size);
        importancesSum.put(entry.getKey(),current);
      }
    }
  }
  return importancesSum;
}","/** 
 * Get feature importance of current model.
 * @return map of feature importance, key is column index.
 */
public Map<Integer,MutablePair<String,Double>> getFeatureImportances(){
  Map<Integer,MutablePair<String,Double>> importancesSum=new HashMap<Integer,MutablePair<String,Double>>();
  Map<Integer,String> nameMapping=this.getIndependentTreeModel().getNumNameMapping();
  int treeSize=this.getIndependentTreeModel().getTrees().size();
  for (  TreeNode tree : this.getIndependentTreeModel().getTrees()) {
    Map<Integer,Double> subImportances=tree.computeFeatureImportance();
    for (    Entry<Integer,Double> entry : subImportances.entrySet()) {
      String featureName=nameMapping.get(entry.getKey());
      MutablePair<String,Double> importance=MutablePair.of(featureName,entry.getValue());
      if (!importancesSum.containsKey(entry.getKey())) {
        importance.setValue(importance.getValue() / treeSize);
        importancesSum.put(entry.getKey(),importance);
      }
 else {
        MutablePair<String,Double> current=importancesSum.get(entry.getKey());
        current.setValue(current.getValue() + importance.getValue() / treeSize);
        importancesSum.put(entry.getKey(),current);
      }
    }
  }
  return importancesSum;
}",0.992776886035313
31694,"/** 
 * Locate histogram unit with just less than s, from some histogram unit
 * @param s the s value
 * @param startPos start pos
 * @return next node
 */
private LinkNode<HistogramUnit> locateHistogram(double s,LinkNode<HistogramUnit> startPos){
  while (startPos != this.tail) {
    if (startPos == null) {
      startPos=this.header;
    }
    HistogramUnit chu=startPos.data();
    HistogramUnit nhu=startPos.next().data();
    double sc=sumCache.get(startPos);
    double sn=sumCache.get(startPos.next());
    if (sc >= s || (sc < s && s <= sn)) {
      return startPos;
    }
    startPos=startPos.next();
  }
  return null;
}","/** 
 * Locate histogram unit with just less than s, from some histogram unit
 * @param s the s value
 * @param startPos start pos
 * @return next node
 */
private LinkNode<HistogramUnit> locateHistogram(double s,LinkNode<HistogramUnit> startPos){
  while (startPos != this.tail) {
    if (startPos == null) {
      startPos=this.header;
    }
    double sc=sumCache.get(startPos);
    double sn=sumCache.get(startPos.next());
    if (sc >= s || (sc < s && s <= sn)) {
      return startPos;
    }
    startPos=startPos.next();
  }
  return null;
}",0.9280270956816258
31695,"/** 
 * Sum the histogram's frequency whose value less than or equal some value
 * @param hval the h value
 * @return current sum
 */
private double sum(double hval){
  LinkNode<HistogramUnit> posHistogramUnit=null;
  LinkNode<HistogramUnit> tmp=this.header;
  while (tmp != this.tail) {
    HistogramUnit chu=tmp.data();
    HistogramUnit nhu=tmp.next().data();
    if (chu.getHval() <= hval && hval < nhu.getHval()) {
      posHistogramUnit=tmp;
      break;
    }
    tmp=tmp.next();
  }
  if (posHistogramUnit != null) {
    HistogramUnit chu=posHistogramUnit.data();
    HistogramUnit nhu=posHistogramUnit.next().data();
    double mb=chu.getHcnt() + (nhu.getHcnt() - chu.getHcnt()) * (hval - chu.getHval()) / (nhu.getHval() - chu.getHval());
    double s=(chu.getHcnt() + mb) * (hval - chu.getHval()) / (nhu.getHval() - chu.getHval());
    s=s / 2;
    tmp=this.header;
    while (tmp != posHistogramUnit) {
      HistogramUnit hu=tmp.data();
      s=s + hu.getHcnt();
      tmp=tmp.next();
    }
    return s + chu.getHcnt() / 2d;
  }
 else   if (tmp == this.tail) {
    double sum=0.0;
    tmp=this.header;
    while (tmp != null) {
      sum+=tmp.data().getHcnt();
      tmp=tmp.next();
    }
    return sum;
  }
  return -1.0;
}","/** 
 * Sum the histogram's frequency whose value less than or equal some value
 * @param hval the h value
 * @return current sum
 */
@SuppressWarnings(""String_Node_Str"") private double sum(double hval){
  LinkNode<HistogramUnit> posHistogramUnit=null;
  LinkNode<HistogramUnit> tmp=this.header;
  while (tmp != this.tail) {
    HistogramUnit chu=tmp.data();
    HistogramUnit nhu=tmp.next().data();
    if (chu.getHval() <= hval && hval < nhu.getHval()) {
      posHistogramUnit=tmp;
      break;
    }
    tmp=tmp.next();
  }
  if (posHistogramUnit != null) {
    HistogramUnit chu=posHistogramUnit.data();
    HistogramUnit nhu=posHistogramUnit.next().data();
    double mb=chu.getHcnt() + (nhu.getHcnt() - chu.getHcnt()) * (hval - chu.getHval()) / (nhu.getHval() - chu.getHval());
    double s=(chu.getHcnt() + mb) * (hval - chu.getHval()) / (nhu.getHval() - chu.getHval());
    s=s / 2;
    tmp=this.header;
    while (tmp != posHistogramUnit) {
      HistogramUnit hu=tmp.data();
      s=s + hu.getHcnt();
      tmp=tmp.next();
    }
    return s + chu.getHcnt() / 2d;
  }
 else   if (tmp == this.tail) {
    double sum=0.0;
    tmp=this.header;
    while (tmp != null) {
      sum+=tmp.data().getHcnt();
      tmp=tmp.next();
    }
    return sum;
  }
  return -1.0;
}",0.9852765618782332
31696,"private void populateGainInfoToNode(int treeId,Node doneNode,GainInfo maxGainInfo){
  doneNode.setPredict(maxGainInfo.getPredict());
  doneNode.setSplit(maxGainInfo.getSplit());
  doneNode.setGain(maxGainInfo.getGain());
  doneNode.setImpurity(maxGainInfo.getImpurity());
  doneNode.setLeftImpurity(maxGainInfo.getLeftImpurity());
  doneNode.setRightImpurity(maxGainInfo.getRightImpurity());
  doneNode.setLeftPredict(maxGainInfo.getLeftPredict());
  doneNode.setRightPredict(maxGainInfo.getRightPredict());
  if (Node.isRootNode(doneNode)) {
    this.trees.get(treeId).setRootWgtCnt(maxGainInfo.getWgtCnt());
  }
 else {
    double rootWgtCnt=this.trees.get(treeId).getRootWgtCnt();
    doneNode.setWgtCntRatio(maxGainInfo.getWgtCnt() / rootWgtCnt);
  }
}","private void populateGainInfoToNode(int treeId,Node doneNode,GainInfo maxGainInfo){
  doneNode.setPredict(maxGainInfo.getPredict());
  doneNode.setSplit(maxGainInfo.getSplit());
  doneNode.setGain(maxGainInfo.getGain());
  doneNode.setImpurity(maxGainInfo.getImpurity());
  doneNode.setLeftImpurity(maxGainInfo.getLeftImpurity());
  doneNode.setRightImpurity(maxGainInfo.getRightImpurity());
  doneNode.setLeftPredict(maxGainInfo.getLeftPredict());
  doneNode.setRightPredict(maxGainInfo.getRightPredict());
  doneNode.setWgtCnt(maxGainInfo.getWgtCnt());
  if (Node.isRootNode(doneNode)) {
    this.trees.get(treeId).setRootWgtCnt(maxGainInfo.getWgtCnt());
  }
 else {
    double rootWgtCnt=this.trees.get(treeId).getRootWgtCnt();
    doneNode.setWgtCntRatio(maxGainInfo.getWgtCnt() / rootWgtCnt);
  }
}",0.9698524695317512
31697,"public IndependentTreeModel(Map<Integer,Double> numericalMeanMapping,Map<Integer,String> numNameMapping,Map<Integer,List<String>> categoricalColumnNameNames,Map<Integer,Map<String,Integer>> columnCategoryIndexMapping,Map<Integer,Integer> columnNumIndexMapping,boolean isOptimizeMode,List<TreeNode> trees,List<Double> weights,boolean isGBDT,boolean isClassification,boolean isConvertToProb,String lossStr,String algorithm,int inputNode,int version){
  this.numericalMeanMapping=numericalMeanMapping;
  this.numNameMapping=numNameMapping;
  this.categoricalColumnNameNames=categoricalColumnNameNames;
  this.columnCategoryIndexMapping=columnCategoryIndexMapping;
  this.columnNumIndexMapping=columnNumIndexMapping;
  this.isOptimizeMode=isOptimizeMode;
  this.trees=trees;
  this.weights=weights;
  this.isGBDT=isGBDT;
  this.isClassification=isClassification;
  this.isConvertToProb=isConvertToProb;
  this.lossStr=lossStr;
  this.algorithm=algorithm;
  this.inputNode=inputNode;
  this.version=version;
  if (this.isOptimizeMode) {
    this.categoricalValueSize=new int[this.columnNumIndexMapping.size()];
    Iterator<Entry<Integer,List<String>>> iterator=this.categoricalColumnNameNames.entrySet().iterator();
    while (iterator.hasNext()) {
      Entry<Integer,List<String>> entry=iterator.next();
      Integer columnNum=entry.getKey();
      if (this.columnNumIndexMapping.containsKey(columnNum)) {
        this.categoricalValueSize[this.columnNumIndexMapping.get(columnNum)]=entry.getValue().size();
      }
    }
  }
}","public IndependentTreeModel(Map<Integer,Double> numericalMeanMapping,Map<Integer,String> numNameMapping,Map<Integer,List<String>> categoricalColumnNameNames,Map<Integer,Map<String,Integer>> columnCategoryIndexMapping,Map<Integer,Integer> columnNumIndexMapping,boolean isOptimizeMode,List<TreeNode> trees,List<Double> weights,boolean isGBDT,boolean isClassification,boolean isConvertToProb,String lossStr,String algorithm,int inputNode,int version){
  this.numericalMeanMapping=numericalMeanMapping;
  this.numNameMapping=numNameMapping;
  this.categoricalColumnNameNames=categoricalColumnNameNames;
  this.columnCategoryIndexMapping=columnCategoryIndexMapping;
  this.columnNumIndexMapping=columnNumIndexMapping;
  this.isOptimizeMode=isOptimizeMode;
  this.trees=trees;
  this.weights=weights;
  this.isGBDT=isGBDT;
  this.isClassification=isClassification;
  this.isConvertToProb=isConvertToProb;
  this.lossStr=lossStr;
  this.algorithm=algorithm;
  this.inputNode=inputNode;
  IndependentTreeModel.version=version;
  if (this.isOptimizeMode) {
    this.categoricalValueSize=new int[this.columnNumIndexMapping.size()];
    Iterator<Entry<Integer,List<String>>> iterator=this.categoricalColumnNameNames.entrySet().iterator();
    while (iterator.hasNext()) {
      Entry<Integer,List<String>> entry=iterator.next();
      Integer columnNum=entry.getKey();
      if (this.columnNumIndexMapping.containsKey(columnNum)) {
        this.categoricalValueSize[this.columnNumIndexMapping.get(columnNum)]=entry.getValue().size();
      }
    }
  }
}",0.9921773142112124
31698,"/** 
 * @return the version
 */
public int getVersion(){
  return version;
}","public static int getVersion(){
  return version;
}",0.6929133858267716
31699,"/** 
 * @param version the version to set
 */
public void setVersion(int version){
  this.version=version;
}","public static void setVersion(int from){
  version=from;
}",0.5662650602409639
31700,"/** 
 * Load model instance from stream like model0.gbt or model0.rf. User can specify to use raw score or score after sigmoid transfrom by isConvertToProb.
 * @param input the input stream
 * @param isConvertToProb if convert score to probability (if to transform raw score by sigmoid)
 * @param isOptimizeMode if column index query is optimized
 * @param isRemoveNameSpace new column name including namespace like ""a::b"", if true, remove ""a::"" and set column name to simple name
 * @return the tree model instance
 * @throws IOException any exception in load input stream
 */
public static IndependentTreeModel loadFromStream(InputStream input,boolean isConvertToProb,boolean isOptimizeMode,boolean isRemoveNameSpace) throws IOException {
  DataInputStream dis=null;
  try {
    byte[] header=new byte[2];
    BufferedInputStream bis=new BufferedInputStream(input);
    bis.mark(2);
    int result=bis.read(header);
    bis.reset();
    int ss=(header[0] & 0xff) | ((header[1] & 0xff) << 8);
    if (result != -1 && ss == GZIPInputStream.GZIP_MAGIC) {
      dis=new DataInputStream(new GZIPInputStream(bis));
    }
 else {
      dis=new DataInputStream(bis);
    }
  }
 catch (  java.io.IOException e) {
    dis=new DataInputStream(input);
  }
  int version=dis.readInt();
  String algorithm=dis.readUTF();
  String lossStr=dis.readUTF();
  boolean isClassification=dis.readBoolean();
  boolean isOneVsAll=dis.readBoolean();
  int inputNode=dis.readInt();
  int size=dis.readInt();
  Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>(size,1f);
  Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>(size,1f);
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    double mean=dis.readDouble();
    numericalMeanMapping.put(columnIndex,mean);
  }
  size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    String columnName=dis.readUTF();
    if (isRemoveNameSpace) {
      columnName=CommonUtils.getSimpleColumnName(columnName);
    }
    columnIndexNameMapping.put(columnIndex,columnName);
  }
  size=dis.readInt();
  Map<Integer,List<String>> categoricalColumnNameNames=new HashMap<Integer,List<String>>(size,1f);
  Map<Integer,Map<String,Integer>> columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>(size,1f);
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    int categoryListSize=dis.readInt();
    Map<String,Integer> categoryIndexMapping=new HashMap<String,Integer>(categoryListSize,1f);
    List<String> categories=new ArrayList<String>(categoryListSize);
    for (int j=0; j < categoryListSize; j++) {
      String category=dis.readUTF();
      categories.add(category);
      if (category.contains(Constants.CATEGORICAL_GROUP_VAL_DELIMITER)) {
        String[] splits=split(category,Constants.CATEGORICAL_GROUP_VAL_DELIMITER);
        for (        String str : splits) {
          categoryIndexMapping.put(str,j);
        }
      }
 else {
        categoryIndexMapping.put(category,j);
      }
    }
    categoricalColumnNameNames.put(columnIndex,categories);
    columnCategoryIndexMapping.put(columnIndex,categoryIndexMapping);
  }
  int columnMappingSize=dis.readInt();
  Map<Integer,Integer> columnMapping=new HashMap<Integer,Integer>(columnMappingSize,1f);
  for (int i=0; i < columnMappingSize; i++) {
    columnMapping.put(dis.readInt(),dis.readInt());
  }
  int treeNum=dis.readInt();
  List<TreeNode> trees=new CopyOnWriteArrayList<TreeNode>();
  List<Double> weights=new ArrayList<Double>(treeNum);
  for (int i=0; i < treeNum; i++) {
    TreeNode treeNode=new TreeNode();
    treeNode.readFields(dis);
    trees.add(treeNode);
    weights.add(treeNode.getLearningRate());
    if (isOptimizeMode) {
      treeNode.remapColumnNum(columnMapping);
    }
  }
  return new IndependentTreeModel(numericalMeanMapping,columnIndexNameMapping,categoricalColumnNameNames,columnCategoryIndexMapping,columnMapping,isOptimizeMode,trees,weights,CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(algorithm),isClassification && !isOneVsAll,isConvertToProb,lossStr,algorithm,inputNode,version);
}","/** 
 * Load model instance from stream like model0.gbt or model0.rf. User can specify to use raw score or score after sigmoid transfrom by isConvertToProb.
 * @param input the input stream
 * @param isConvertToProb if convert score to probability (if to transform raw score by sigmoid)
 * @param isOptimizeMode if column index query is optimized
 * @param isRemoveNameSpace new column name including namespace like ""a::b"", if true, remove ""a::"" and set column name to simple name
 * @return the tree model instance
 * @throws IOException any exception in load input stream
 */
public static IndependentTreeModel loadFromStream(InputStream input,boolean isConvertToProb,boolean isOptimizeMode,boolean isRemoveNameSpace) throws IOException {
  DataInputStream dis=null;
  try {
    byte[] header=new byte[2];
    BufferedInputStream bis=new BufferedInputStream(input);
    bis.mark(2);
    int result=bis.read(header);
    bis.reset();
    int ss=(header[0] & 0xff) | ((header[1] & 0xff) << 8);
    if (result != -1 && ss == GZIPInputStream.GZIP_MAGIC) {
      dis=new DataInputStream(new GZIPInputStream(bis));
    }
 else {
      dis=new DataInputStream(bis);
    }
  }
 catch (  java.io.IOException e) {
    dis=new DataInputStream(input);
  }
  int version=dis.readInt();
  IndependentTreeModel.setVersion(version);
  String algorithm=dis.readUTF();
  String lossStr=dis.readUTF();
  boolean isClassification=dis.readBoolean();
  boolean isOneVsAll=dis.readBoolean();
  int inputNode=dis.readInt();
  int size=dis.readInt();
  Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>(size,1f);
  Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>(size,1f);
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    double mean=dis.readDouble();
    numericalMeanMapping.put(columnIndex,mean);
  }
  size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    String columnName=dis.readUTF();
    if (isRemoveNameSpace) {
      columnName=CommonUtils.getSimpleColumnName(columnName);
    }
    columnIndexNameMapping.put(columnIndex,columnName);
  }
  size=dis.readInt();
  Map<Integer,List<String>> categoricalColumnNameNames=new HashMap<Integer,List<String>>(size,1f);
  Map<Integer,Map<String,Integer>> columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>(size,1f);
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    int categoryListSize=dis.readInt();
    Map<String,Integer> categoryIndexMapping=new HashMap<String,Integer>(categoryListSize,1f);
    List<String> categories=new ArrayList<String>(categoryListSize);
    for (int j=0; j < categoryListSize; j++) {
      String category=dis.readUTF();
      categories.add(category);
      if (category.contains(Constants.CATEGORICAL_GROUP_VAL_DELIMITER)) {
        String[] splits=split(category,Constants.CATEGORICAL_GROUP_VAL_DELIMITER);
        for (        String str : splits) {
          categoryIndexMapping.put(str,j);
        }
      }
 else {
        categoryIndexMapping.put(category,j);
      }
    }
    categoricalColumnNameNames.put(columnIndex,categories);
    columnCategoryIndexMapping.put(columnIndex,categoryIndexMapping);
  }
  int columnMappingSize=dis.readInt();
  Map<Integer,Integer> columnMapping=new HashMap<Integer,Integer>(columnMappingSize,1f);
  for (int i=0; i < columnMappingSize; i++) {
    columnMapping.put(dis.readInt(),dis.readInt());
  }
  int treeNum=dis.readInt();
  List<TreeNode> trees=new CopyOnWriteArrayList<TreeNode>();
  List<Double> weights=new ArrayList<Double>(treeNum);
  for (int i=0; i < treeNum; i++) {
    TreeNode treeNode=new TreeNode();
    treeNode.readFields(dis);
    trees.add(treeNode);
    weights.add(treeNode.getLearningRate());
    if (isOptimizeMode) {
      treeNode.remapColumnNum(columnMapping);
    }
  }
  return new IndependentTreeModel(numericalMeanMapping,columnIndexNameMapping,categoricalColumnNameNames,columnCategoryIndexMapping,columnMapping,isOptimizeMode,trees,weights,CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(algorithm),isClassification && !isOneVsAll,isConvertToProb,lossStr,algorithm,inputNode,version);
}",0.9946911196911196
31701,"/** 
 * @return the wgtCnt
 */
public double getWgtCntRatio(){
  return this.nodeStats.getWgtCntRatio();
}","public double getWgtCntRatio(){
  return this.nodeStats.getWgtCntRatio();
}",0.8287292817679558
31702,"@Override public void write(DataOutput out) throws IOException {
  out.writeInt(id);
  out.writeFloat((float)gain);
  out.writeFloat((float)1d);
  if (split == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    split.write(out);
  }
  boolean isRealLeaf=isRealLeaf();
  out.writeBoolean(isRealLeaf);
  if (isRealLeaf) {
    if (predict == null) {
      out.writeBoolean(false);
    }
 else {
      out.writeBoolean(true);
      predict.write(out);
    }
  }
  if (left == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    left.write(out);
  }
  if (right == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    right.write(out);
  }
}","@Override public void write(DataOutput out) throws IOException {
  out.writeInt(id);
  out.writeFloat((float)gain);
  out.writeDouble(this.wgtCnt);
  if (split == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    split.write(out);
  }
  boolean isRealLeaf=isRealLeaf();
  out.writeBoolean(isRealLeaf);
  if (isRealLeaf) {
    if (predict == null) {
      out.writeBoolean(false);
    }
 else {
      out.writeBoolean(true);
      predict.write(out);
    }
  }
  if (left == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    left.write(out);
  }
  if (right == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    right.write(out);
  }
}",0.9772256728778468
31703,"@Override public void readFields(DataInput in) throws IOException {
  this.id=in.readInt();
  this.gain=in.readFloat();
  in.readFloat();
  if (in.readBoolean()) {
    this.split=new Split();
    this.split.readFields(in);
  }
  boolean isRealLeaf=in.readBoolean();
  if (isRealLeaf) {
    if (in.readBoolean()) {
      this.predict=new Predict();
      this.predict.readFields(in);
    }
  }
  if (in.readBoolean()) {
    this.left=new Node();
    this.left.readFields(in);
  }
  if (in.readBoolean()) {
    this.right=new Node();
    this.right.readFields(in);
  }
}","@Override public void readFields(DataInput in) throws IOException {
  this.id=in.readInt();
  this.gain=in.readFloat();
  if (IndependentTreeModel.getVersion() <= 2) {
    this.wgtCnt=in.readFloat();
  }
 else {
    this.wgtCnt=in.readDouble();
  }
  if (in.readBoolean()) {
    this.split=new Split();
    this.split.readFields(in);
  }
  boolean isRealLeaf=in.readBoolean();
  if (isRealLeaf) {
    if (in.readBoolean()) {
      this.predict=new Predict();
      this.predict.readFields(in);
    }
  }
  if (in.readBoolean()) {
    this.left=new Node();
    this.left.readFields(in);
  }
  if (in.readBoolean()) {
    this.right=new Node();
    this.right.readFields(in);
  }
}",0.9109863672814756
31704,"/** 
 * @param wgtCntRatio the wgtCntRatio to set
 */
public void setWgtCntRatio(double wgtCntRatio){
  if (this.nodeStats == null) {
    this.nodeStats=new NodeStats();
  }
  this.nodeStats.setWgtCntRatio(wgtCntRatio);
}","public void setWgtCntRatio(double wgtCntRatio){
  if (this.nodeStats == null) {
    this.nodeStats=new NodeStats();
  }
  this.nodeStats.setWgtCntRatio(wgtCntRatio);
}",0.8608247422680413
31705,"private void computeImportance(Map<Integer,Double> importances,Node node){
  if (!node.isRealLeaf()) {
    int featureId=node.getSplit().getColumnNum();
    if (!importances.containsKey(featureId)) {
      importances.put(featureId,node.getGain());
    }
 else {
      importances.put(featureId,importances.get(featureId) + node.getGain());
    }
  }
}","private void computeImportance(Map<Integer,Double> importances,Node node,double rootWgtCnt){
  if (!node.isRealLeaf()) {
    int featureId=node.getSplit().getColumnNum();
    double contribution=(node.getGain() * node.getWgtCnt()) / rootWgtCnt;
    if (!importances.containsKey(featureId)) {
      importances.put(featureId,contribution);
    }
 else {
      importances.put(featureId,importances.get(featureId) + contribution);
    }
  }
}",0.8181818181818182
31706,"private void preOrder(Map<Integer,Double> importances,Node node){
  if (node == null) {
    return;
  }
  computeImportance(importances,node);
  preOrder(importances,node.getLeft());
  preOrder(importances,node.getRight());
}","private void preOrder(Map<Integer,Double> importances,Node node,double rootWgtCnt){
  if (node == null) {
    return;
  }
  computeImportance(importances,node,rootWgtCnt);
  preOrder(importances,node.getLeft(),rootWgtCnt);
  preOrder(importances,node.getRight(),rootWgtCnt);
}",0.8982035928143712
31707,"/** 
 * Compute tree model feature importance.
 * @return a map with (column_id, feature_importance.)
 */
public Map<Integer,Double> computeFeatureImportance(){
  Map<Integer,Double> importances=new HashMap<Integer,Double>();
  preOrder(importances,node);
  return importances;
}","/** 
 * Compute tree model feature importance by accumulating gain. Check scikit-learn for details: https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/tree/_tree.pyx#L1056
 * @return a map with (column_id, feature_importance.)
 */
public Map<Integer,Double> computeFeatureImportance(){
  Map<Integer,Double> importances=new HashMap<Integer,Double>();
  double rootWgtCnt=node.getWgtCnt();
  preOrder(importances,node,rootWgtCnt);
  return importances;
}",0.6353887399463807
31708,"private static Map<Integer,MutablePair<String,Double>> mergeImportanceList(List<Map<Integer,MutablePair<String,Double>>> list){
  Map<Integer,MutablePair<String,Double>> finalResult=new HashMap<Integer,MutablePair<String,Double>>();
  int size=list.size();
  for (  Map<Integer,MutablePair<String,Double>> item : list) {
    for (    Entry<Integer,MutablePair<String,Double>> entry : item.entrySet()) {
      if (!finalResult.containsKey(entry.getKey())) {
        MutablePair<String,Double> value=MutablePair.of(entry.getValue().getKey(),entry.getValue().getValue() / size);
        finalResult.put(entry.getKey(),value);
      }
 else {
        MutablePair<String,Double> current=finalResult.get(entry.getKey());
        double entryValue=entry.getValue().getValue();
        current.setValue(current.getValue() + entryValue / size);
        finalResult.put(entry.getKey(),current);
      }
    }
  }
  return TreeModel.sortByValue(finalResult,false);
}","private static Map<Integer,MutablePair<String,Double>> mergeImportanceList(List<Map<Integer,MutablePair<String,Double>>> list){
  Map<Integer,MutablePair<String,Double>> finalResult=new HashMap<Integer,MutablePair<String,Double>>();
  int modelSize=list.size();
  for (  Map<Integer,MutablePair<String,Double>> item : list) {
    for (    Entry<Integer,MutablePair<String,Double>> entry : item.entrySet()) {
      if (!finalResult.containsKey(entry.getKey())) {
        MutablePair<String,Double> value=MutablePair.of(entry.getValue().getKey(),entry.getValue().getValue() / modelSize);
        finalResult.put(entry.getKey(),value);
      }
 else {
        MutablePair<String,Double> current=finalResult.get(entry.getKey());
        double entryValue=entry.getValue().getValue();
        current.setValue(current.getValue() + (entryValue / modelSize));
        finalResult.put(entry.getKey(),current);
      }
    }
  }
  return TreeModel.sortByValue(finalResult,false);
}",0.9880643487285936
31709,"public static Map<Integer,MutablePair<String,Double>> computeTreeModelFeatureImportance(List<BasicML> models){
  List<Map<Integer,MutablePair<String,Double>>> importanceList=new ArrayList<Map<Integer,MutablePair<String,Double>>>();
  for (  BasicML basicModel : models) {
    if (basicModel instanceof TreeModel) {
      TreeModel model=(TreeModel)basicModel;
      Map<Integer,MutablePair<String,Double>> importances=model.getFeatureImportances();
      importanceList.add(importances);
    }
  }
  if (importanceList.size() < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return mergeImportanceList(importanceList);
}","/** 
 * Compute feature importance for all bagging tree models.
 * @param models the tree models, should be instance of TreeModel
 * @return feature importance per each column id
 * @throws IllegalStateException if no any feature importance from models
 */
public static Map<Integer,MutablePair<String,Double>> computeTreeModelFeatureImportance(List<BasicML> models){
  List<Map<Integer,MutablePair<String,Double>>> importanceList=new ArrayList<Map<Integer,MutablePair<String,Double>>>();
  for (  BasicML basicModel : models) {
    if (basicModel instanceof TreeModel) {
      TreeModel model=(TreeModel)basicModel;
      Map<Integer,MutablePair<String,Double>> importances=model.getFeatureImportances();
      importanceList.add(importances);
    }
  }
  if (importanceList.size() < 1) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return mergeImportanceList(importanceList);
}",0.8246753246753247
31710,"public static TreeModel loadFromStream(InputStream input,boolean isConvertToProb,boolean isOptimizeMode) throws IOException {
  return new TreeModel(IndependentTreeModel.loadFromStream(input,isConvertToProb,isOptimizeMode));
}","public static TreeModel loadFromStream(InputStream input,boolean isConvertToProb,boolean isOptimizeMode,boolean isRemoveNameSpace) throws IOException {
  return new TreeModel(IndependentTreeModel.loadFromStream(input,isConvertToProb,isOptimizeMode,isRemoveNameSpace));
}",0.9112903225806452
31711,"@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
    PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
  }
  final String rawTag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(new NSColumn(config.getColumnName()).getSimpleName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        Map<String,Integer> map=this.categoricalIndexMap.get(config.getColumnNum());
        if ((map.get(val) == null || map.get(val) == -1)) {
          tuple.append(config.getBinCategory().size());
        }
 else {
          tuple.append(map.get(val));
        }
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType,this.categoryMissingNormType);
        tuple.append(df.format(normVal));
      }
 else {
        tuple.append(config.isMeta() ? val : null);
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}","@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
    PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
  }
  final String rawTag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(new NSColumn(config.getColumnName()).getSimpleName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        Map<String,Integer> map=this.categoricalIndexMap.get(config.getColumnNum());
        tuple.append(((map.get(val) == null || map.get(val) == -1)) ? ""String_Node_Str"" : val);
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType,this.categoryMissingNormType);
        tuple.append(df.format(normVal));
      }
 else {
        tuple.append(config.isMeta() ? val : null);
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}",0.9755871446229912
31712,"@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
    PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
  }
  final String rawTag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(new NSColumn(config.getColumnName()).getSimpleName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        Map<String,Integer> map=this.categoricalIndexMap.get(config.getColumnNum());
        if ((map.get(val) == null || map.get(val) == -1)) {
          tuple.append(config.getBinCategory().size());
        }
 else {
          tuple.append(map.get(val));
        }
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType,this.categoryMissingNormType);
        tuple.append(df.format(normVal));
      }
 else {
        tuple.append(config.isMeta() ? val : null);
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}","@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
    PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
  }
  final String rawTag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(new NSColumn(config.getColumnName()).getSimpleName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        Map<String,Integer> map=this.categoricalIndexMap.get(config.getColumnNum());
        tuple.append(((map.get(val) == null || map.get(val) == -1)) ? ""String_Node_Str"" : val);
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType,this.categoryMissingNormType);
        tuple.append(df.format(normVal));
      }
 else {
        tuple.append(config.isMeta() ? val : null);
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}",0.9755871446229912
31713,"@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
    PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
  }
  final String rawTag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(new NSColumn(config.getColumnName()).getSimpleName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        Map<String,Integer> map=this.categoricalIndexMap.get(config.getColumnNum());
        if ((map.get(val) == null || map.get(val) == -1)) {
          tuple.append(config.getBinCategory().size());
        }
 else {
          tuple.append(map.get(val));
        }
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType,this.categoryMissingNormType);
        tuple.append(df.format(normVal));
      }
 else {
        tuple.append(config.isMeta() ? val : null);
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}","@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
    PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
  }
  final String rawTag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(new NSColumn(config.getColumnName()).getSimpleName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        Map<String,Integer> map=this.categoricalIndexMap.get(config.getColumnNum());
        tuple.append(((map.get(val) == null || map.get(val) == -1)) ? ""String_Node_Str"" : val);
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType,this.categoryMissingNormType);
        tuple.append(df.format(normVal));
      }
 else {
        tuple.append(config.isMeta() ? val : null);
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}",0.9755871446229912
31714,"/** 
 * Process one level.
 * @param currentLevel The current level.
 */
private void processLevel(final int currentLevel){
  final int fromLayerIndex=this.layerIndex[currentLevel + 1];
  final int toLayerIndex=this.layerIndex[currentLevel];
  final int fromLayerSize=this.layerCounts[currentLevel + 1];
  final int toLayerSize=this.layerFeedCounts[currentLevel];
  double dropoutRate=0;
  if (this.layerDropoutRates.length > currentLevel && this.layerDropoutRates[currentLevel] != 0) {
    dropoutRate=this.layerDropoutRates[currentLevel];
  }
  final int index=this.weightIndex[currentLevel];
  final ActivationFunction activation=this.getNetwork().getActivationFunctions()[currentLevel + 1];
  final double currentFlatSpot=this.flatSpot[currentLevel + 1];
  int yi=fromLayerIndex;
  for (int y=0; y < fromLayerSize; y++) {
    final double output=this.layerOutput[yi];
    double sum=0;
    int wi=index + y;
    if (this.owner.isELM() || dropoutRate == 0d || dropoutRandomSource.nextDouble() > dropoutRate) {
      int xi=toLayerIndex;
      for (int x=0; x < toLayerSize; x++) {
        if (this.owner.isELM() && currentLevel == 0) {
          this.gradients[wi]=0d;
        }
 else {
          this.gradients[wi]+=output * this.getLayerDelta()[xi];
        }
        sum+=this.weights[wi] * this.getLayerDelta()[xi];
        wi+=fromLayerSize;
        xi++;
      }
      this.getLayerDelta()[yi]=sum * (activation.derivativeFunction(this.layerSums[yi],this.layerOutput[yi]) + currentFlatSpot);
    }
 else {
      this.getLayerDelta()[yi]=0;
    }
    yi++;
  }
}","/** 
 * Process one level.
 * @param currentLevel The current level.
 */
private void processLevel(final int currentLevel){
  final int fromLayerIndex=this.layerIndex[currentLevel + 1];
  final int toLayerIndex=this.layerIndex[currentLevel];
  final int fromLayerSize=this.layerCounts[currentLevel + 1];
  final int toLayerSize=this.layerFeedCounts[currentLevel];
  double dropoutRate=0;
  if (this.layerDropoutRates.length > currentLevel && this.layerDropoutRates[currentLevel] != 0) {
    dropoutRate=this.layerDropoutRates[currentLevel];
  }
  final int index=this.weightIndex[currentLevel];
  final ActivationFunction activation=this.getNetwork().getActivationFunctions()[currentLevel + 1];
  final double currentFlatSpot=this.flatSpot[currentLevel + 1];
  int yi=fromLayerIndex;
  for (int y=0; y < fromLayerSize; y++) {
    final double output=this.layerOutput[yi];
    double sum=0;
    int wi=index + y;
    if (this.owner.isELM() || dropoutRate == 0d || dropoutRandomSource.nextDouble() > dropoutRate) {
      int xi=toLayerIndex;
      for (int x=0; x < toLayerSize; x++) {
        if (this.owner.isELM() && currentLevel == (this.getNetwork().getEndTraining() - 1)) {
          this.gradients[wi]=0d;
        }
 else {
          this.gradients[wi]+=output * this.getLayerDelta()[xi];
        }
        sum+=this.weights[wi] * this.getLayerDelta()[xi];
        wi+=fromLayerSize;
        xi++;
      }
      this.getLayerDelta()[yi]=sum * (activation.derivativeFunction(this.layerSums[yi],this.layerOutput[yi]) + currentFlatSpot);
    }
 else {
      this.getLayerDelta()[yi]=0;
    }
    yi++;
  }
}",0.9871028625353884
31715,"/** 
 * Process one level.
 * @param currentLevel The current level.
 */
private void processLevel(final int currentLevel){
  final int fromLayerIndex=this.layerIndex[currentLevel + 1];
  final int toLayerIndex=this.layerIndex[currentLevel];
  final int fromLayerSize=this.layerCounts[currentLevel + 1];
  final int toLayerSize=this.layerFeedCounts[currentLevel];
  double dropoutRate=0;
  if (this.layerDropoutRates.length > currentLevel && this.layerDropoutRates[currentLevel] != 0) {
    dropoutRate=this.layerDropoutRates[currentLevel];
  }
  final int index=this.weightIndex[currentLevel];
  final ActivationFunction activation=this.getNetwork().getActivationFunctions()[currentLevel + 1];
  final double currentFlatSpot=this.flatSpot[currentLevel + 1];
  int yi=fromLayerIndex;
  for (int y=0; y < fromLayerSize; y++) {
    final double output=this.layerOutput[yi];
    double sum=0;
    int xi=toLayerIndex;
    int wi=index + y;
    for (int x=0; x < toLayerSize; x++) {
      if (this.owner.isELM() && currentLevel == 0) {
        this.gradients[wi]=0d;
      }
 else {
        this.gradients[wi]+=output * this.getLayerDelta()[xi];
      }
      sum+=this.weights[wi] * this.getLayerDelta()[xi];
      wi+=fromLayerSize;
      xi++;
    }
    if (dropoutRate == 0d || dropoutRandomSource.nextDouble() > dropoutRate) {
      this.getLayerDelta()[yi]=sum * (activation.derivativeFunction(this.layerSums[yi],this.layerOutput[yi]) + currentFlatSpot);
    }
 else {
      this.getLayerDelta()[yi]=0;
    }
    yi++;
  }
}","/** 
 * Process one level.
 * @param currentLevel The current level.
 */
private void processLevel(final int currentLevel){
  final int fromLayerIndex=this.layerIndex[currentLevel + 1];
  final int toLayerIndex=this.layerIndex[currentLevel];
  final int fromLayerSize=this.layerCounts[currentLevel + 1];
  final int toLayerSize=this.layerFeedCounts[currentLevel];
  double dropoutRate=0;
  if (this.layerDropoutRates.length > currentLevel && this.layerDropoutRates[currentLevel] != 0) {
    dropoutRate=this.layerDropoutRates[currentLevel];
  }
  final int index=this.weightIndex[currentLevel];
  final ActivationFunction activation=this.getNetwork().getActivationFunctions()[currentLevel + 1];
  final double currentFlatSpot=this.flatSpot[currentLevel + 1];
  int yi=fromLayerIndex;
  for (int y=0; y < fromLayerSize; y++) {
    final double output=this.layerOutput[yi];
    double sum=0;
    int wi=index + y;
    if (this.owner.isELM() || dropoutRate == 0d || dropoutRandomSource.nextDouble() > dropoutRate) {
      int xi=toLayerIndex;
      for (int x=0; x < toLayerSize; x++) {
        if (this.owner.isELM() && currentLevel == 0) {
          this.gradients[wi]=0d;
        }
 else {
          this.gradients[wi]+=output * this.getLayerDelta()[xi];
        }
        sum+=this.weights[wi] * this.getLayerDelta()[xi];
        wi+=fromLayerSize;
        xi++;
      }
      this.getLayerDelta()[yi]=sum * (activation.derivativeFunction(this.layerSums[yi],this.layerOutput[yi]) + currentFlatSpot);
    }
 else {
      this.getLayerDelta()[yi]=0;
    }
    yi++;
  }
}",0.8023255813953488
31716,"@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
}","@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  double[] dValues=null;
  if (!this.dataPurifier.isFilterOut(valueStr)) {
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (Math.random() >= this.modelConfig.getStats().getSampleRate()) {
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  dValues=getDoubleArrayByRawArray(CommonUtils.split(valueStr,this.dataSetDelimiter));
  count+=1L;
  if (count % 2000L == 0) {
    LOG.info(""String_Node_Str"",count,Thread.currentThread().getName());
  }
  for (int i=0; i < this.columnConfigList.size(); i++) {
    ColumnConfig columnConfig=this.columnConfigList.get(i);
    if (columnConfig.getColumnFlag() == ColumnFlag.Meta) {
      continue;
    }
    CorrelationWritable cw=CorrelationMultithreadedMapper.finalCorrelationMap.get(i);
synchronized (cw) {
      cw.setColumnIndex(i);
      cw.setCount(cw.getCount() + 1d);
      cw.setSum(cw.getSum() + dValues[i]);
      double squaredSum=dValues[i] * dValues[i];
      cw.setSumSquare(cw.getSumSquare() + squaredSum);
      double[] xySum=cw.getXySum();
      if (xySum == null) {
        xySum=new double[this.columnConfigList.size()];
        cw.setXySum(xySum);
      }
      double[] xxSum=cw.getXxSum();
      if (xxSum == null) {
        xxSum=new double[this.columnConfigList.size()];
        cw.setXxSum(xxSum);
      }
      double[] yySum=cw.getYySum();
      if (yySum == null) {
        yySum=new double[this.columnConfigList.size()];
        cw.setYySum(yySum);
      }
      double[] adjustCount=cw.getAdjustCount();
      if (adjustCount == null) {
        adjustCount=new double[this.columnConfigList.size()];
        cw.setAdjustCount(adjustCount);
      }
      double[] adjustSumX=cw.getAdjustSumX();
      if (adjustSumX == null) {
        adjustSumX=new double[this.columnConfigList.size()];
        cw.setAdjustSumX(adjustSumX);
      }
      double[] adjustSumY=cw.getAdjustSumY();
      if (adjustSumY == null) {
        adjustSumY=new double[this.columnConfigList.size()];
        cw.setAdjustSumY(adjustSumY);
      }
      for (int j=0; j < this.columnConfigList.size(); j++) {
        ColumnConfig otherColumnConfig=this.columnConfigList.get(j);
        if (otherColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
          continue;
        }
        if (i > j && !this.isComputeAll) {
          continue;
        }
        if (dValues[i] != Double.MIN_VALUE && dValues[j] != Double.MIN_VALUE) {
          xySum[j]+=dValues[i] * dValues[j];
          xxSum[j]+=squaredSum;
          yySum[j]+=dValues[j] * dValues[j];
          adjustCount[j]+=1d;
          adjustSumX[j]+=dValues[i];
          adjustSumY[j]+=dValues[j];
        }
      }
    }
  }
}",0.0752551020408163
31717,"@Override public void write(DataOutput out) throws IOException {
  out.writeBoolean(this.isNumeric);
  out.writeInt(this.columnNum);
  out.writeDouble(this.max);
  out.writeDouble(this.min);
  out.writeDouble(this.sum);
  out.writeDouble(this.squaredSum);
  out.writeDouble(this.tripleSum);
  out.writeDouble(this.quarticSum);
  out.writeLong(this.missingCount);
  out.writeLong(this.totalCount);
  out.writeInt(this.binCountPos.length);
  for (int i=0; i < this.binCountPos.length; i++) {
    out.writeLong(this.binCountPos[i]);
  }
  out.writeInt(this.binCountNeg.length);
  for (int i=0; i < this.binCountNeg.length; i++) {
    out.writeLong(this.binCountNeg[i]);
  }
  out.writeInt(this.binWeightPos.length);
  for (int i=0; i < this.binWeightPos.length; i++) {
    out.writeDouble(this.binWeightPos[i]);
  }
  out.writeInt(this.binWeightNeg.length);
  for (int i=0; i < this.binWeightNeg.length; i++) {
    out.writeDouble(this.binWeightNeg[i]);
  }
  if (this.isNumeric) {
    out.writeInt(this.binBoundaries.size());
    for (int i=0; i < this.binBoundaries.size(); i++) {
      out.writeDouble(this.binBoundaries.get(i));
    }
    if (this.xMultiY != null) {
      out.writeInt(this.xMultiY.length);
      for (      double d : this.xMultiY) {
        out.writeDouble(d);
      }
    }
 else {
      out.writeInt(0);
    }
  }
 else {
    out.writeInt(this.binCategories.size());
    for (int i=0; i < this.binCategories.size(); i++) {
      String bin=this.binCategories.get(i);
      byte[] bytes=bin.getBytes(Charset.forName(""String_Node_Str""));
      out.writeInt(bytes.length);
      for (int j=0; j < bytes.length; j++) {
        out.writeByte(bytes[j]);
      }
    }
  }
  this.cfiw.write(out);
}","@Override public void write(DataOutput out) throws IOException {
  out.writeBoolean(this.isNumeric);
  out.writeInt(this.columnNum);
  out.writeDouble(this.max);
  out.writeDouble(this.min);
  out.writeDouble(this.sum);
  out.writeDouble(this.squaredSum);
  out.writeDouble(this.tripleSum);
  out.writeDouble(this.quarticSum);
  out.writeLong(this.missingCount);
  out.writeLong(this.totalCount);
  out.writeInt(this.binCountPos.length);
  for (int i=0; i < this.binCountPos.length; i++) {
    out.writeLong(this.binCountPos[i]);
  }
  out.writeInt(this.binCountNeg.length);
  for (int i=0; i < this.binCountNeg.length; i++) {
    out.writeLong(this.binCountNeg[i]);
  }
  out.writeInt(this.binWeightPos.length);
  for (int i=0; i < this.binWeightPos.length; i++) {
    out.writeDouble(this.binWeightPos[i]);
  }
  out.writeInt(this.binWeightNeg.length);
  for (int i=0; i < this.binWeightNeg.length; i++) {
    out.writeDouble(this.binWeightNeg[i]);
  }
  if (this.isNumeric) {
    out.writeInt(this.binBoundaries.size());
    for (int i=0; i < this.binBoundaries.size(); i++) {
      out.writeDouble(this.binBoundaries.get(i));
    }
    if (this.xMultiY != null) {
      out.writeInt(this.xMultiY.length);
      for (      double d : this.xMultiY) {
        out.writeDouble(d);
      }
    }
 else {
      out.writeInt(0);
    }
  }
 else {
    out.writeInt(this.binCategories.size());
    for (int i=0; i < this.binCategories.size(); i++) {
      String bin=this.binCategories.get(i);
      byte[] bytes=bin.getBytes(Charset.forName(""String_Node_Str""));
      out.writeInt(bytes.length);
      for (int j=0; j < bytes.length; j++) {
        out.writeByte(bytes[j]);
      }
    }
  }
  this.cfiw.write(out);
  out.writeBoolean(this.isEmpty);
}",0.9901734104046244
31718,"@Override public void readFields(DataInput in) throws IOException {
  this.isNumeric=in.readBoolean();
  this.columnNum=in.readInt();
  this.max=in.readDouble();
  this.min=in.readDouble();
  this.sum=in.readDouble();
  this.squaredSum=in.readDouble();
  this.tripleSum=in.readDouble();
  this.quarticSum=in.readDouble();
  this.missingCount=in.readLong();
  this.totalCount=in.readLong();
  int size=in.readInt();
  this.binCountPos=new long[size];
  for (int i=0; i < size; i++) {
    this.binCountPos[i]=in.readLong();
  }
  size=in.readInt();
  this.binCountNeg=new long[size];
  for (int i=0; i < size; i++) {
    this.binCountNeg[i]=in.readLong();
  }
  size=in.readInt();
  this.binWeightPos=new double[size];
  for (int i=0; i < size; i++) {
    this.binWeightPos[i]=in.readDouble();
  }
  size=in.readInt();
  this.binWeightNeg=new double[size];
  for (int i=0; i < size; i++) {
    this.binWeightNeg[i]=in.readDouble();
  }
  if (this.isNumeric) {
    size=in.readInt();
    this.binBoundaries=new ArrayList<Double>(size);
    for (int i=0; i < size; i++) {
      this.binBoundaries.add(in.readDouble());
    }
    int xMultiYSize=in.readInt();
    if (xMultiYSize != 0) {
      this.xMultiY=new double[xMultiYSize];
      for (int i=0; i < xMultiYSize; i++) {
        this.xMultiY[i]=in.readDouble();
      }
    }
  }
 else {
    size=in.readInt();
    this.binCategories=new ArrayList<String>(size);
    for (int i=0; i < size; i++) {
      int bytesSize=in.readInt();
      byte[] bytes=new byte[bytesSize];
      for (int j=0; j < bytesSize; j++) {
        bytes[j]=in.readByte();
      }
      this.binCategories.add(new String(bytes,Charset.forName(""String_Node_Str"")));
    }
  }
  this.cfiw=new CountAndFrequentItemsWritable();
  this.cfiw.readFields(in);
}","@Override public void readFields(DataInput in) throws IOException {
  this.isNumeric=in.readBoolean();
  this.columnNum=in.readInt();
  this.max=in.readDouble();
  this.min=in.readDouble();
  this.sum=in.readDouble();
  this.squaredSum=in.readDouble();
  this.tripleSum=in.readDouble();
  this.quarticSum=in.readDouble();
  this.missingCount=in.readLong();
  this.totalCount=in.readLong();
  int size=in.readInt();
  this.binCountPos=new long[size];
  for (int i=0; i < size; i++) {
    this.binCountPos[i]=in.readLong();
  }
  size=in.readInt();
  this.binCountNeg=new long[size];
  for (int i=0; i < size; i++) {
    this.binCountNeg[i]=in.readLong();
  }
  size=in.readInt();
  this.binWeightPos=new double[size];
  for (int i=0; i < size; i++) {
    this.binWeightPos[i]=in.readDouble();
  }
  size=in.readInt();
  this.binWeightNeg=new double[size];
  for (int i=0; i < size; i++) {
    this.binWeightNeg[i]=in.readDouble();
  }
  if (this.isNumeric) {
    size=in.readInt();
    this.binBoundaries=new ArrayList<Double>(size);
    for (int i=0; i < size; i++) {
      this.binBoundaries.add(in.readDouble());
    }
    int xMultiYSize=in.readInt();
    if (xMultiYSize != 0) {
      this.xMultiY=new double[xMultiYSize];
      for (int i=0; i < xMultiYSize; i++) {
        this.xMultiY[i]=in.readDouble();
      }
    }
  }
 else {
    size=in.readInt();
    this.binCategories=new ArrayList<String>(size);
    for (int i=0; i < size; i++) {
      int bytesSize=in.readInt();
      byte[] bytes=new byte[bytesSize];
      for (int j=0; j < bytesSize; j++) {
        bytes[j]=in.readByte();
      }
      this.binCategories.add(new String(bytes,Charset.forName(""String_Node_Str"")));
    }
  }
  this.cfiw=new CountAndFrequentItemsWritable();
  this.cfiw.readFields(in);
  this.isEmpty=in.readBoolean();
}",0.990794979079498
31719,"/** 
 * Write column info to reducer for merging.
 */
@Override protected void cleanup(Context context) throws IOException, InterruptedException {
  LOG.debug(""String_Node_Str"",this.columnBinningInfo);
  LOG.debug(""String_Node_Str"",this.variableCountMap);
  for (  Map.Entry<Integer,BinningInfoWritable> entry : this.columnBinningInfo.entrySet()) {
    CountAndFrequentItems cfi=this.variableCountMap.get(entry.getKey());
    if (cfi != null) {
      entry.getValue().setCfiw(new CountAndFrequentItemsWritable(cfi.getCount(),cfi.getInvalidCount(),cfi.getValidNumCount(),cfi.getHyper().getBytes(),cfi.getFrequentItems()));
    }
 else {
      LOG.info(""String_Node_Str"",entry.getKey());
    }
    this.outputKey.set(entry.getKey());
    context.write(this.outputKey,entry.getValue());
  }
}","/** 
 * Write column info to reducer for merging.
 */
@Override protected void cleanup(Context context) throws IOException, InterruptedException {
  LOG.debug(""String_Node_Str"",this.columnBinningInfo);
  LOG.debug(""String_Node_Str"",this.variableCountMap);
  for (  Map.Entry<Integer,BinningInfoWritable> entry : this.columnBinningInfo.entrySet()) {
    CountAndFrequentItems cfi=this.variableCountMap.get(entry.getKey());
    if (cfi != null) {
      entry.getValue().setCfiw(new CountAndFrequentItemsWritable(cfi.getCount(),cfi.getInvalidCount(),cfi.getValidNumCount(),cfi.getHyper().getBytes(),cfi.getFrequentItems()));
    }
 else {
      entry.getValue().setEmpty(true);
      LOG.warn(""String_Node_Str"",entry.getKey());
    }
    this.outputKey.set(entry.getKey());
    context.write(this.outputKey,entry.getValue());
  }
}",0.9709338280766852
31720,"/** 
 * Load and initialize column binning info object.
 */
private void loadColumnBinningInfo() throws FileNotFoundException, IOException {
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(Constants.BINNING_INFO_FILE_NAME),Charset.forName(""String_Node_Str"")));
    String line=reader.readLine();
    while (line != null && line.length() != 0) {
      LOG.debug(""String_Node_Str"",line);
      String[] cols=CommonUtils.split(line.trim(),Constants.DEFAULT_DELIMITER);
      if (cols != null && cols.length >= 2) {
        Integer columnNum=Integer.parseInt(cols[0]);
        BinningInfoWritable binningInfo=new BinningInfoWritable();
        binningInfo.setColumnNum(columnNum);
        ColumnConfig columnConfig=this.columnConfigList.get(columnNum);
        int binSize=0;
        if (columnConfig.isNumerical()) {
          binningInfo.setNumeric(true);
          List<Double> list=new ArrayList<Double>();
          for (          String startElement : BIN_BOUNDARY_SPLITTER.split(cols[1])) {
            list.add(Double.valueOf(startElement));
          }
          binningInfo.setBinBoundaries(list);
          binSize=list.size();
        }
 else {
          binningInfo.setNumeric(false);
          List<String> list=new ArrayList<String>();
          Map<String,Integer> map=this.categoricalBinMap.get(columnNum);
          if (map == null) {
            map=new HashMap<String,Integer>();
            this.categoricalBinMap.put(columnNum,map);
          }
          int index=0;
          if (!StringUtils.isBlank(cols[1])) {
            for (            String startElement : BIN_BOUNDARY_SPLITTER.split(cols[1])) {
              list.add(startElement);
              map.put(startElement,index++);
            }
          }
          binningInfo.setBinCategories(list);
          binSize=list.size();
        }
        long[] binCountPos=new long[binSize + 1];
        binningInfo.setBinCountPos(binCountPos);
        long[] binCountNeg=new long[binSize + 1];
        binningInfo.setBinCountNeg(binCountNeg);
        double[] binWeightPos=new double[binSize + 1];
        binningInfo.setBinWeightPos(binWeightPos);
        double[] binWeightNeg=new double[binSize + 1];
        binningInfo.setBinWeightNeg(binWeightNeg);
        LOG.info(""String_Node_Str"",columnNum,binningInfo);
        this.columnBinningInfo.put(columnNum,binningInfo);
      }
      line=reader.readLine();
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
}","/** 
 * Load and initialize column binning info object.
 */
private void loadColumnBinningInfo() throws FileNotFoundException, IOException {
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(Constants.BINNING_INFO_FILE_NAME),Charset.forName(""String_Node_Str"")));
    String line=reader.readLine();
    while (line != null && line.length() != 0) {
      LOG.debug(""String_Node_Str"",line);
      String[] cols=CommonUtils.split(line.trim(),Constants.DEFAULT_DELIMITER);
      if (cols != null && cols.length >= 2) {
        Integer columnNum=Integer.parseInt(cols[0]);
        BinningInfoWritable binningInfo=new BinningInfoWritable();
        binningInfo.setColumnNum(columnNum);
        ColumnConfig columnConfig=this.columnConfigList.get(columnNum);
        int binSize=0;
        if (columnConfig.isNumerical()) {
          binningInfo.setNumeric(true);
          List<Double> list=new ArrayList<Double>();
          for (          String startElement : BIN_BOUNDARY_SPLITTER.split(cols[1])) {
            list.add(Double.valueOf(startElement));
          }
          binningInfo.setBinBoundaries(list);
          binSize=list.size();
        }
 else {
          binningInfo.setNumeric(false);
          List<String> list=new ArrayList<String>();
          Map<String,Integer> map=this.categoricalBinMap.get(columnNum);
          if (map == null) {
            map=new HashMap<String,Integer>();
            this.categoricalBinMap.put(columnNum,map);
          }
          int index=0;
          if (!StringUtils.isBlank(cols[1])) {
            for (            String startElement : BIN_BOUNDARY_SPLITTER.split(cols[1])) {
              list.add(startElement);
              map.put(startElement,index++);
            }
          }
          binningInfo.setBinCategories(list);
          binSize=list.size();
        }
        long[] binCountPos=new long[binSize + 1];
        binningInfo.setBinCountPos(binCountPos);
        long[] binCountNeg=new long[binSize + 1];
        binningInfo.setBinCountNeg(binCountNeg);
        double[] binWeightPos=new double[binSize + 1];
        binningInfo.setBinWeightPos(binWeightPos);
        double[] binWeightNeg=new double[binSize + 1];
        binningInfo.setBinWeightNeg(binWeightNeg);
        LOG.debug(""String_Node_Str"",columnNum,binningInfo);
        this.columnBinningInfo.put(columnNum,binningInfo);
      }
      line=reader.readLine();
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
}",0.9982209922909666
31721,"@Override protected void reduce(IntWritable key,Iterable<BinningInfoWritable> values,Context context) throws IOException, InterruptedException {
  long start=System.currentTimeMillis();
  double sum=0d;
  double squaredSum=0d;
  double tripleSum=0d;
  double quarticSum=0d;
  long count=0L, missingCount=0L;
  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;
  List<Double> binBoundaryList=null;
  List<String> binCategories=null;
  long[] binCountPos=null;
  long[] binCountNeg=null;
  double[] binWeightPos=null;
  double[] binWeightNeg=null;
  ColumnConfig columnConfig=this.columnConfigList.get(key.get());
  HyperLogLogPlus hyperLogLogPlus=null;
  Set<String> fis=new HashSet<String>();
  long totalCount=0, invalidCount=0, validNumCount=0;
  int binSize=0;
  for (  BinningInfoWritable info : values) {
    CountAndFrequentItemsWritable cfiw=info.getCfiw();
    totalCount+=cfiw.getCount();
    invalidCount+=cfiw.getInvalidCount();
    validNumCount+=cfiw.getValidNumCount();
    fis.addAll(cfiw.getFrequetItems());
    if (hyperLogLogPlus == null) {
      hyperLogLogPlus=HyperLogLogPlus.Builder.build(cfiw.getHyperBytes());
    }
 else {
      try {
        hyperLogLogPlus=(HyperLogLogPlus)hyperLogLogPlus.merge(HyperLogLogPlus.Builder.build(cfiw.getHyperBytes()));
      }
 catch (      CardinalityMergeException e) {
        throw new RuntimeException(e);
      }
    }
    if (info.isNumeric() && binBoundaryList == null) {
      binBoundaryList=info.getBinBoundaries();
      binSize=binBoundaryList.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    if (!info.isNumeric() && binCategories == null) {
      binCategories=info.getBinCategories();
      binSize=binCategories.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    count+=info.getTotalCount();
    missingCount+=info.getMissingCount();
    sum+=info.getSum();
    squaredSum+=info.getSquaredSum();
    tripleSum+=info.getTripleSum();
    quarticSum+=info.getQuarticSum();
    if (Double.compare(max,info.getMax()) < 0) {
      max=info.getMax();
    }
    if (Double.compare(min,info.getMin()) > 0) {
      min=info.getMin();
    }
    for (int i=0; i < (binSize + 1); i++) {
      binCountPos[i]+=info.getBinCountPos()[i];
      binCountNeg[i]+=info.getBinCountNeg()[i];
      binWeightPos[i]+=info.getBinWeightPos()[i];
      binWeightNeg[i]+=info.getBinWeightNeg()[i];
    }
  }
  if (columnConfig.isCategorical() && modelConfig.getStats().getCateMaxNumBin() > 0) {
    CateBinningStats cateBinningStats=rebinCategoricalValues(new CateBinningStats(binCategories,binCountPos,binCountNeg,binWeightPos,binWeightNeg));
    LOG.info(""String_Node_Str"",columnConfig.getColumnName(),binCategories.size(),cateBinningStats.binCategories.size());
    binCategories=cateBinningStats.binCategories;
    binCountPos=cateBinningStats.binCountPos;
    binCountNeg=cateBinningStats.binCountNeg;
    binWeightPos=cateBinningStats.binWeightPos;
    binWeightNeg=cateBinningStats.binWeightNeg;
  }
  double[] binPosRate;
  if (modelConfig.isRegression()) {
    binPosRate=computePosRate(binCountPos,binCountNeg);
  }
 else {
    binPosRate=computeRateForMultiClassfication(binCountPos);
  }
  String binBounString=null;
  if (columnConfig.isCategorical()) {
    if (binCategories.size() < 0 || binCategories.size() > MAX_CATEGORICAL_BINC_COUNT) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binCategories.size());
      return;
    }
    binBounString=Base64Utils.base64Encode(""String_Node_Str"" + StringUtils.join(binCategories,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR) + ""String_Node_Str"");
    min=Double.MAX_VALUE;
    max=Double.MIN_VALUE;
    sum=0d;
    squaredSum=0d;
    for (int i=0; i < binPosRate.length; i++) {
      if (!Double.isNaN(binPosRate[i])) {
        if (Double.compare(max,binPosRate[i]) < 0) {
          max=binPosRate[i];
        }
        if (Double.compare(min,binPosRate[i]) > 0) {
          min=binPosRate[i];
        }
        long binCount=binCountPos[i] + binCountNeg[i];
        sum+=binPosRate[i] * binCount;
        double squaredVal=binPosRate[i] * binPosRate[i];
        squaredSum+=squaredVal * binCount;
        tripleSum+=squaredVal * binPosRate[i] * binCount;
        quarticSum+=squaredVal * squaredVal * binCount;
      }
    }
  }
 else {
    if (binBoundaryList.size() == 0) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binBoundaryList.size());
      return;
    }
    binBounString=binBoundaryList.toString();
  }
  ColumnMetrics columnCountMetrics=null;
  ColumnMetrics columnWeightMetrics=null;
  if (modelConfig.isRegression()) {
    columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
    columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  }
  long realCount=this.statsExcludeMissingValue ? (count - missingCount) : count;
  double mean=sum / realCount;
  double stdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / (realCount - 1)));
  double aStdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / realCount));
  double skewness=ColumnStatsCalculator.computeSkewness(realCount,mean,aStdDev,sum,squaredSum,tripleSum);
  double kurtosis=ColumnStatsCalculator.computeKurtosis(realCount,mean,aStdDev,sum,squaredSum,tripleSum,quarticSum);
  sb.append(key.get()).append(Constants.DEFAULT_DELIMITER).append(binBounString).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountPos)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(new double[0])).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binPosRate)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : df.format(columnCountMetrics.getKs())).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : df.format(columnCountMetrics.getIv())).append(Constants.DEFAULT_DELIMITER).append(df.format(max)).append(Constants.DEFAULT_DELIMITER).append(df.format(min)).append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(df.format(stdDev)).append(Constants.DEFAULT_DELIMITER).append(columnConfig.isCategorical() ? ""String_Node_Str"" : ""String_Node_Str"").append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(missingCount).append(Constants.DEFAULT_DELIMITER).append(count).append(Constants.DEFAULT_DELIMITER).append(missingCount * 1.0d / count).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightPos)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : columnCountMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getKs()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getIv()).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnCountMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnWeightMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(skewness).append(Constants.DEFAULT_DELIMITER).append(kurtosis).append(Constants.DEFAULT_DELIMITER).append(totalCount).append(Constants.DEFAULT_DELIMITER).append(invalidCount).append(Constants.DEFAULT_DELIMITER).append(validNumCount).append(Constants.DEFAULT_DELIMITER).append(hyperLogLogPlus.cardinality()).append(Constants.DEFAULT_DELIMITER).append(limitedFrequentItems(fis));
  outputValue.set(sb.toString());
  context.write(NullWritable.get(),outputValue);
  sb.delete(0,sb.length());
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}","@Override protected void reduce(IntWritable key,Iterable<BinningInfoWritable> values,Context context) throws IOException, InterruptedException {
  long start=System.currentTimeMillis();
  double sum=0d;
  double squaredSum=0d;
  double tripleSum=0d;
  double quarticSum=0d;
  long count=0L, missingCount=0L;
  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;
  List<Double> binBoundaryList=null;
  List<String> binCategories=null;
  long[] binCountPos=null;
  long[] binCountNeg=null;
  double[] binWeightPos=null;
  double[] binWeightNeg=null;
  ColumnConfig columnConfig=this.columnConfigList.get(key.get());
  HyperLogLogPlus hyperLogLogPlus=null;
  Set<String> fis=new HashSet<String>();
  long totalCount=0, invalidCount=0, validNumCount=0;
  int binSize=0;
  for (  BinningInfoWritable info : values) {
    if (info.isEmpty()) {
      continue;
    }
    CountAndFrequentItemsWritable cfiw=info.getCfiw();
    totalCount+=cfiw.getCount();
    invalidCount+=cfiw.getInvalidCount();
    validNumCount+=cfiw.getValidNumCount();
    fis.addAll(cfiw.getFrequetItems());
    if (hyperLogLogPlus == null) {
      hyperLogLogPlus=HyperLogLogPlus.Builder.build(cfiw.getHyperBytes());
    }
 else {
      try {
        hyperLogLogPlus=(HyperLogLogPlus)hyperLogLogPlus.merge(HyperLogLogPlus.Builder.build(cfiw.getHyperBytes()));
      }
 catch (      CardinalityMergeException e) {
        throw new RuntimeException(e);
      }
    }
    if (info.isNumeric() && binBoundaryList == null) {
      binBoundaryList=info.getBinBoundaries();
      binSize=binBoundaryList.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    if (!info.isNumeric() && binCategories == null) {
      binCategories=info.getBinCategories();
      binSize=binCategories.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    count+=info.getTotalCount();
    missingCount+=info.getMissingCount();
    sum+=info.getSum();
    squaredSum+=info.getSquaredSum();
    tripleSum+=info.getTripleSum();
    quarticSum+=info.getQuarticSum();
    if (Double.compare(max,info.getMax()) < 0) {
      max=info.getMax();
    }
    if (Double.compare(min,info.getMin()) > 0) {
      min=info.getMin();
    }
    for (int i=0; i < (binSize + 1); i++) {
      binCountPos[i]+=info.getBinCountPos()[i];
      binCountNeg[i]+=info.getBinCountNeg()[i];
      binWeightPos[i]+=info.getBinWeightPos()[i];
      binWeightNeg[i]+=info.getBinWeightNeg()[i];
    }
  }
  if (columnConfig.isCategorical() && modelConfig.getStats().getCateMaxNumBin() > 0) {
    CateBinningStats cateBinningStats=rebinCategoricalValues(new CateBinningStats(binCategories,binCountPos,binCountNeg,binWeightPos,binWeightNeg));
    LOG.info(""String_Node_Str"",columnConfig.getColumnName(),binCategories.size(),cateBinningStats.binCategories.size());
    binCategories=cateBinningStats.binCategories;
    binCountPos=cateBinningStats.binCountPos;
    binCountNeg=cateBinningStats.binCountNeg;
    binWeightPos=cateBinningStats.binWeightPos;
    binWeightNeg=cateBinningStats.binWeightNeg;
  }
  double[] binPosRate;
  if (modelConfig.isRegression()) {
    binPosRate=computePosRate(binCountPos,binCountNeg);
  }
 else {
    binPosRate=computeRateForMultiClassfication(binCountPos);
  }
  String binBounString=null;
  if (columnConfig.isCategorical()) {
    if (binCategories.size() < 0 || binCategories.size() > MAX_CATEGORICAL_BINC_COUNT) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binCategories.size());
      return;
    }
    binBounString=Base64Utils.base64Encode(""String_Node_Str"" + StringUtils.join(binCategories,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR) + ""String_Node_Str"");
    min=Double.MAX_VALUE;
    max=Double.MIN_VALUE;
    sum=0d;
    squaredSum=0d;
    for (int i=0; i < binPosRate.length; i++) {
      if (!Double.isNaN(binPosRate[i])) {
        if (Double.compare(max,binPosRate[i]) < 0) {
          max=binPosRate[i];
        }
        if (Double.compare(min,binPosRate[i]) > 0) {
          min=binPosRate[i];
        }
        long binCount=binCountPos[i] + binCountNeg[i];
        sum+=binPosRate[i] * binCount;
        double squaredVal=binPosRate[i] * binPosRate[i];
        squaredSum+=squaredVal * binCount;
        tripleSum+=squaredVal * binPosRate[i] * binCount;
        quarticSum+=squaredVal * squaredVal * binCount;
      }
    }
  }
 else {
    if (binBoundaryList.size() == 0) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binBoundaryList.size());
      return;
    }
    binBounString=binBoundaryList.toString();
  }
  ColumnMetrics columnCountMetrics=null;
  ColumnMetrics columnWeightMetrics=null;
  if (modelConfig.isRegression()) {
    columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
    columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  }
  long realCount=this.statsExcludeMissingValue ? (count - missingCount) : count;
  double mean=sum / realCount;
  double stdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / (realCount - 1)));
  double aStdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / realCount));
  double skewness=ColumnStatsCalculator.computeSkewness(realCount,mean,aStdDev,sum,squaredSum,tripleSum);
  double kurtosis=ColumnStatsCalculator.computeKurtosis(realCount,mean,aStdDev,sum,squaredSum,tripleSum,quarticSum);
  sb.append(key.get()).append(Constants.DEFAULT_DELIMITER).append(binBounString).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountPos)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(new double[0])).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binPosRate)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : df.format(columnCountMetrics.getKs())).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : df.format(columnCountMetrics.getIv())).append(Constants.DEFAULT_DELIMITER).append(df.format(max)).append(Constants.DEFAULT_DELIMITER).append(df.format(min)).append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(df.format(stdDev)).append(Constants.DEFAULT_DELIMITER).append(columnConfig.isCategorical() ? ""String_Node_Str"" : ""String_Node_Str"").append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(missingCount).append(Constants.DEFAULT_DELIMITER).append(count).append(Constants.DEFAULT_DELIMITER).append(missingCount * 1.0d / count).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightPos)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : columnCountMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getKs()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getIv()).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnCountMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnWeightMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(skewness).append(Constants.DEFAULT_DELIMITER).append(kurtosis).append(Constants.DEFAULT_DELIMITER).append(totalCount).append(Constants.DEFAULT_DELIMITER).append(invalidCount).append(Constants.DEFAULT_DELIMITER).append(validNumCount).append(Constants.DEFAULT_DELIMITER).append(hyperLogLogPlus.cardinality()).append(Constants.DEFAULT_DELIMITER).append(limitedFrequentItems(fis));
  outputValue.set(sb.toString());
  context.write(NullWritable.get(),outputValue);
  sb.delete(0,sb.length());
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}",0.9971469329529244
31722,"private void doReBin(ColumnConfig columnConfig) throws IOException {
  int expectBinNum=getIntParam(this.params,EXPECTED_BIN_NUM);
  double ivKeepRatio=getDoubleParam(this.params,IV_KEEP_RATIO,1.0d);
  long minimumInstCnt=getLongParam(this.params,MINIMUM_BIN_INST_CNT);
  ColumnConfigDynamicBinning columnConfigDynamicBinning=new ColumnConfigDynamicBinning(columnConfig,expectBinNum,ivKeepRatio,minimumInstCnt);
  List<AbstractBinInfo> binInfos=columnConfigDynamicBinning.run();
  long[] binCountNeg=new long[binInfos.size() + 1];
  long[] binCountPos=new long[binInfos.size() + 1];
  for (int i=0; i < binInfos.size(); i++) {
    AbstractBinInfo binInfo=binInfos.get(i);
    binCountNeg[i]=binInfo.getNegativeCnt();
    binCountPos[i]=binInfo.getPositiveCnt();
  }
  binCountNeg[binCountNeg.length - 1]=columnConfig.getBinCountNeg().get(columnConfig.getBinCountNeg().size() - 1);
  binCountPos[binCountPos.length - 1]=columnConfig.getBinCountPos().get(columnConfig.getBinCountPos().size() - 1);
  double[] binWeightNeg=new double[binInfos.size() + 1];
  double[] binWeightPos=new double[binInfos.size() + 1];
  for (int i=0; i < binInfos.size(); i++) {
    AbstractBinInfo binInfo=binInfos.get(i);
    binWeightNeg[i]=binInfo.getWeightNeg();
    binWeightPos[i]=binInfo.getWeightPos();
  }
  binWeightNeg[binWeightNeg.length - 1]=columnConfig.getBinWeightedNeg().get(columnConfig.getBinWeightedNeg().size() - 1);
  binWeightPos[binWeightPos.length - 1]=columnConfig.getBinWeightedPos().get(columnConfig.getBinWeightedPos().size() - 1);
  ColumnStatsCalculator.ColumnMetrics columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
  ColumnStatsCalculator.ColumnMetrics columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  columnConfig.setBinLength(binInfos.size() + 1);
  if (columnConfig.isCategorical()) {
    List<String> values=new ArrayList<String>();
    for (    AbstractBinInfo binInfo : binInfos) {
      CategoricalBinInfo categoricalBinInfo=(CategoricalBinInfo)binInfo;
      values.add(StringUtils.join(categoricalBinInfo.getValues(),Constants.CATEGORICAL_GROUP_VAL_DELIMITER));
    }
    columnConfig.setBinCategory(values);
  }
 else {
    List<Double> values=new ArrayList<Double>();
    for (    AbstractBinInfo binInfo : binInfos) {
      NumericalBinInfo numericalBinInfo=(NumericalBinInfo)binInfo;
      values.add(numericalBinInfo.getLeftThreshold());
    }
    columnConfig.setBinBoundary(values);
  }
  columnConfig.setBinCountNeg(convertToIntList(binCountNeg));
  columnConfig.setBinCountPos(convertToIntList(binCountPos));
  List<Double> binPosRates=new ArrayList<Double>();
  for (  AbstractBinInfo binInfo : binInfos) {
    binPosRates.add(binInfo.getPositiveRate());
  }
  columnConfig.setBinPosCaseRate(binPosRates);
  columnConfig.setBinWeightedNeg(convertIntoDoubleList(binWeightNeg));
  columnConfig.setBinWeightedPos(convertIntoDoubleList(binWeightPos));
  columnConfig.setIv(columnCountMetrics.getIv());
  columnConfig.setKs(columnCountMetrics.getKs());
  columnConfig.getColumnStats().setWoe(columnCountMetrics.getWoe());
  columnConfig.getColumnBinning().setBinCountWoe(columnCountMetrics.getBinningWoe());
  columnConfig.getColumnStats().setWeightedIv(columnWeightMetrics.getIv());
  columnConfig.getColumnStats().setWeightedKs(columnWeightMetrics.getWoe());
  columnConfig.getColumnStats().setWeightedWoe(columnWeightMetrics.getWoe());
  columnConfig.getColumnBinning().setBinWeightedWoe(columnWeightMetrics.getBinningWoe());
}","private void doReBin(ColumnConfig columnConfig) throws IOException {
  int expectBinNum=getIntParam(this.params,EXPECTED_BIN_NUM);
  double ivKeepRatio=getDoubleParam(this.params,IV_KEEP_RATIO,1.0d);
  long minimumInstCnt=getLongParam(this.params,MINIMUM_BIN_INST_CNT);
  ColumnConfigDynamicBinning columnConfigDynamicBinning=new ColumnConfigDynamicBinning(columnConfig,expectBinNum,ivKeepRatio,minimumInstCnt);
  List<AbstractBinInfo> binInfos=columnConfigDynamicBinning.run();
  long[] binCountNeg=new long[binInfos.size() + 1];
  long[] binCountPos=new long[binInfos.size() + 1];
  for (int i=0; i < binInfos.size(); i++) {
    AbstractBinInfo binInfo=binInfos.get(i);
    binCountNeg[i]=binInfo.getNegativeCnt();
    binCountPos[i]=binInfo.getPositiveCnt();
  }
  binCountNeg[binCountNeg.length - 1]=columnConfig.getBinCountNeg().get(columnConfig.getBinCountNeg().size() - 1);
  binCountPos[binCountPos.length - 1]=columnConfig.getBinCountPos().get(columnConfig.getBinCountPos().size() - 1);
  double[] binWeightNeg=new double[binInfos.size() + 1];
  double[] binWeightPos=new double[binInfos.size() + 1];
  for (int i=0; i < binInfos.size(); i++) {
    AbstractBinInfo binInfo=binInfos.get(i);
    binWeightNeg[i]=binInfo.getWeightNeg();
    binWeightPos[i]=binInfo.getWeightPos();
  }
  binWeightNeg[binWeightNeg.length - 1]=columnConfig.getBinWeightedNeg().get(columnConfig.getBinWeightedNeg().size() - 1);
  binWeightPos[binWeightPos.length - 1]=columnConfig.getBinWeightedPos().get(columnConfig.getBinWeightedPos().size() - 1);
  ColumnStatsCalculator.ColumnMetrics columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
  ColumnStatsCalculator.ColumnMetrics columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  columnConfig.setBinLength(binInfos.size() + 1);
  if (columnConfig.isCategorical()) {
    List<String> values=new ArrayList<String>();
    for (    AbstractBinInfo binInfo : binInfos) {
      CategoricalBinInfo categoricalBinInfo=(CategoricalBinInfo)binInfo;
      values.add(StringUtils.join(categoricalBinInfo.getValues(),Constants.CATEGORICAL_GROUP_VAL_DELIMITER));
    }
    columnConfig.setBinCategory(values);
  }
 else {
    List<Double> values=new ArrayList<Double>();
    for (    AbstractBinInfo binInfo : binInfos) {
      NumericalBinInfo numericalBinInfo=(NumericalBinInfo)binInfo;
      values.add(numericalBinInfo.getLeftThreshold());
    }
    columnConfig.setBinBoundary(values);
  }
  columnConfig.setBinCountNeg(convertToIntList(binCountNeg));
  columnConfig.setBinCountPos(convertToIntList(binCountPos));
  List<Double> binPosRates=new ArrayList<Double>();
  for (  AbstractBinInfo binInfo : binInfos) {
    binPosRates.add(binInfo.getPositiveRate());
  }
  if (binPosRates.size() + 1 == binCountPos.length) {
    long missingSumCnt=binCountPos[binCountPos.length - 1] + binCountNeg[binCountNeg.length - 1];
    if (missingSumCnt > 0) {
      binPosRates.add(binCountPos[binCountPos.length - 1] * 1d / missingSumCnt);
    }
 else {
      binPosRates.add(Double.NaN);
    }
  }
  columnConfig.setBinPosCaseRate(binPosRates);
  columnConfig.setBinWeightedNeg(convertIntoDoubleList(binWeightNeg));
  columnConfig.setBinWeightedPos(convertIntoDoubleList(binWeightPos));
  columnConfig.setIv(columnCountMetrics.getIv());
  columnConfig.setKs(columnCountMetrics.getKs());
  columnConfig.getColumnStats().setWoe(columnCountMetrics.getWoe());
  columnConfig.getColumnBinning().setBinCountWoe(columnCountMetrics.getBinningWoe());
  columnConfig.getColumnStats().setWeightedIv(columnWeightMetrics.getIv());
  columnConfig.getColumnStats().setWeightedKs(columnWeightMetrics.getWoe());
  columnConfig.getColumnStats().setWeightedWoe(columnWeightMetrics.getWoe());
  columnConfig.getColumnBinning().setBinWeightedWoe(columnWeightMetrics.getBinningWoe());
}",0.9566274827725983
31723,"/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    log.info(""String_Node_Str"",this.modelConfig.getStats().getCateMaxNumBin());
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    if (getBooleanParam(this.params,IS_COMPUTE_CORR)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget() && config.isNumerical()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      log.info(""String_Node_Str"");
      runCorrMapReduceJob();
      saveColumnConfigList();
    }
 else     if (getBooleanParam(this.params,IS_REBIN)) {
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      if (!ShifuFileUtils.isFileExists(new Path(backupColumnConfigPath),SourceType.LOCAL)) {
        ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
        saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
      }
 else {
        List<ColumnConfig> backColumnConfigList=CommonUtils.loadColumnConfigList(backupColumnConfigPath,SourceType.LOCAL);
        for (        ColumnConfig backupColumnConfig : backColumnConfigList) {
          for (          ColumnConfig columnConfig : this.columnConfigList) {
            if (NSColumnUtils.isColumnEqual(backupColumnConfig.getColumnName(),columnConfig.getColumnName())) {
              columnConfig.setColumnBinning(backupColumnConfig.getColumnBinning());
            }
          }
        }
      }
      List<ColumnConfig> rebinColumns=new ArrayList<ColumnConfig>();
      List<String> catVariables=getStringList(this.params,REQUEST_VARS,""String_Node_Str"");
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CollectionUtils.isEmpty(catVariables) || isRequestColumn(catVariables,columnConfig)) {
          rebinColumns.add(columnConfig);
        }
      }
      if (CollectionUtils.isNotEmpty(rebinColumns)) {
        for (        ColumnConfig columnConfig : rebinColumns) {
          doReBin(columnConfig);
        }
      }
      saveColumnConfigList();
    }
 else {
      AbstractStatsExecutor statsExecutor=null;
      if (modelConfig.isMapReduceRunMode()) {
        if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
          statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
          statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
          statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
          statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
      }
 else       if (modelConfig.isLocalRunMode()) {
        statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
      }
 else {
        throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
      }
      statsExecutor.doStats();
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
      saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
    }
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    e.printStackTrace();
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}","/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    log.debug(""String_Node_Str"",this.modelConfig.getStats().getCateMaxNumBin());
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    if (getBooleanParam(this.params,IS_COMPUTE_CORR)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget() && config.isNumerical()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      log.info(""String_Node_Str"");
      runCorrMapReduceJob();
      saveColumnConfigList();
    }
 else     if (getBooleanParam(this.params,IS_REBIN)) {
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      if (!ShifuFileUtils.isFileExists(new Path(backupColumnConfigPath),SourceType.LOCAL)) {
        ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
        saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
      }
 else {
        List<ColumnConfig> backColumnConfigList=CommonUtils.loadColumnConfigList(backupColumnConfigPath,SourceType.LOCAL);
        for (        ColumnConfig backupColumnConfig : backColumnConfigList) {
          for (          ColumnConfig columnConfig : this.columnConfigList) {
            if (NSColumnUtils.isColumnEqual(backupColumnConfig.getColumnName(),columnConfig.getColumnName())) {
              columnConfig.setColumnBinning(backupColumnConfig.getColumnBinning());
            }
          }
        }
      }
      List<ColumnConfig> rebinColumns=new ArrayList<ColumnConfig>();
      List<String> catVariables=getStringList(this.params,REQUEST_VARS,""String_Node_Str"");
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CollectionUtils.isEmpty(catVariables) || isRequestColumn(catVariables,columnConfig)) {
          rebinColumns.add(columnConfig);
        }
      }
      if (CollectionUtils.isNotEmpty(rebinColumns)) {
        for (        ColumnConfig columnConfig : rebinColumns) {
          doReBin(columnConfig);
        }
      }
      saveColumnConfigList();
    }
 else {
      AbstractStatsExecutor statsExecutor=null;
      if (modelConfig.isMapReduceRunMode()) {
        if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
          statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
          statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
          statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
          statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
      }
 else       if (modelConfig.isLocalRunMode()) {
        statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
      }
 else {
        throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
      }
      statsExecutor.doStats();
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
      saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
    }
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    e.printStackTrace();
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}",0.9989790130459444
31724,"public ScoreObject scoreNsData(MLDataPair inputPair,Map<NSColumn,String> rawNsDataMap){
  if (inputPair == null && !this.alg.equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
    inputPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg);
  }
  final MLDataPair pair=inputPair;
  List<Callable<MLData>> tasks=new ArrayList<Callable<MLData>>();
  for (  final BasicML model : models) {
    if (model instanceof BasicFloatNetwork) {
      final BasicFloatNetwork network=(BasicFloatNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,network.getFeatureSet());
      if (network.getFeatureSet().size() != networkPair.getInput().size()) {
        log.error(""String_Node_Str"" + network.getFeatureSet().size() + ""String_Node_Str""+ networkPair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof SVM) {
      final SVM svm=(SVM)model;
      if (svm.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + svm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return svm.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof LR) {
      final LR lr=(LR)model;
      if (lr.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + lr.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return lr.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof TreeModel) {
      final TreeModel tm=(TreeModel)model;
      if (tm.getInputCount() != pair.getInput().size()) {
        throw new RuntimeException(""String_Node_Str"" + tm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          MLData result=tm.compute(pair.getInput());
          return result;
        }
      }
);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  List<Double> scores=new ArrayList<Double>();
  List<Integer> rfTreeSizeList=new ArrayList<Integer>();
  if (CollectionUtils.isNotEmpty(tasks)) {
    List<MLData> modelResults=this.executorManager.submitTasksAndWaitResults(tasks);
    if (CollectionUtils.isEmpty(modelResults) || modelResults.size() != this.models.size()) {
      log.error(""String_Node_Str"");
      return null;
    }
    for (int i=0; i < this.models.size(); i++) {
      BasicML model=this.models.get(i);
      MLData score=modelResults.get(i);
      if (model instanceof BasicNetwork) {
        if (modelConfig != null && modelConfig.isRegression()) {
          scores.add(toScore(score.getData(0)));
        }
 else         if (modelConfig != null && modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
          scores.add(toScore(score.getData(0)));
        }
 else {
          double[] outputs=score.getData();
          for (          double d : outputs) {
            scores.add(toScore(d));
          }
        }
      }
 else       if (model instanceof SVM) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof LR) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof TreeModel) {
        if (modelConfig.isClassification() && !modelConfig.getTrain().isOneVsAll()) {
          double[] scoreArray=score.getData();
          for (          double sc : scoreArray) {
            scores.add(sc);
          }
        }
 else {
          scores.add(toScore(score.getData(0)));
        }
        final TreeModel tm=(TreeModel)model;
        if (!tm.isClassfication() && !tm.isGBDT()) {
          rfTreeSizeList.add(tm.getTrees().size());
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Integer tag=Constants.DEFAULT_IDEAL_VALUE;
  if (scores.size() == 0) {
    log.warn(""String_Node_Str"");
  }
  return new ScoreObject(scores,tag,rfTreeSizeList);
}","public ScoreObject scoreNsData(MLDataPair inputPair,Map<NSColumn,String> rawNsDataMap){
  if (inputPair == null && !this.alg.equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
    inputPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg);
  }
  final MLDataPair pair=inputPair;
  List<Callable<MLData>> tasks=new ArrayList<Callable<MLData>>();
  for (  final BasicML model : models) {
    if (model instanceof BasicNetwork) {
      final BasicNetwork network=(BasicNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,null);
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof BasicFloatNetwork) {
      final BasicFloatNetwork network=(BasicFloatNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,network.getFeatureSet());
      if (network.getFeatureSet().size() != networkPair.getInput().size()) {
        log.error(""String_Node_Str"" + network.getFeatureSet().size() + ""String_Node_Str""+ networkPair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof SVM) {
      final SVM svm=(SVM)model;
      if (svm.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + svm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return svm.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof LR) {
      final LR lr=(LR)model;
      if (lr.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + lr.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return lr.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof TreeModel) {
      final TreeModel tm=(TreeModel)model;
      if (tm.getInputCount() != pair.getInput().size()) {
        throw new RuntimeException(""String_Node_Str"" + tm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          MLData result=tm.compute(pair.getInput());
          return result;
        }
      }
);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  List<Double> scores=new ArrayList<Double>();
  List<Integer> rfTreeSizeList=new ArrayList<Integer>();
  if (CollectionUtils.isNotEmpty(tasks)) {
    List<MLData> modelResults=this.executorManager.submitTasksAndWaitResults(tasks);
    if (CollectionUtils.isEmpty(modelResults) || modelResults.size() != this.models.size()) {
      log.error(""String_Node_Str"");
      return null;
    }
    for (int i=0; i < this.models.size(); i++) {
      BasicML model=this.models.get(i);
      MLData score=modelResults.get(i);
      if (model instanceof BasicNetwork) {
        if (modelConfig != null && modelConfig.isRegression()) {
          scores.add(toScore(score.getData(0)));
        }
 else         if (modelConfig != null && modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
          scores.add(toScore(score.getData(0)));
        }
 else {
          double[] outputs=score.getData();
          for (          double d : outputs) {
            scores.add(toScore(d));
          }
        }
      }
 else       if (model instanceof SVM) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof LR) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof TreeModel) {
        if (modelConfig.isClassification() && !modelConfig.getTrain().isOneVsAll()) {
          double[] scoreArray=score.getData();
          for (          double sc : scoreArray) {
            scores.add(sc);
          }
        }
 else {
          scores.add(toScore(score.getData(0)));
        }
        final TreeModel tm=(TreeModel)model;
        if (!tm.isClassfication() && !tm.isGBDT()) {
          rfTreeSizeList.add(tm.getTrees().size());
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Integer tag=Constants.DEFAULT_IDEAL_VALUE;
  if (scores.size() == 0) {
    log.warn(""String_Node_Str"");
  }
  return new ScoreObject(scores,tag,rfTreeSizeList);
}",0.9537419286545994
31725,"/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    log.debug(""String_Node_Str"",this.modelConfig.getStats().getCateMaxNumBin());
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    if (getBooleanParam(this.params,IS_COMPUTE_CORR)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget() && config.isNumerical()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      log.info(""String_Node_Str"");
      runCorrMapReduceJob();
      saveColumnConfigList();
    }
 else     if (getBooleanParam(this.params,IS_REBIN)) {
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      if (!ShifuFileUtils.isFileExists(new Path(backupColumnConfigPath),SourceType.LOCAL)) {
        ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
        saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
      }
 else {
        List<ColumnConfig> backColumnConfigList=CommonUtils.loadColumnConfigList(backupColumnConfigPath,SourceType.LOCAL);
        for (        ColumnConfig backupColumnConfig : backColumnConfigList) {
          for (          ColumnConfig columnConfig : this.columnConfigList) {
            if (NSColumnUtils.isColumnEqual(backupColumnConfig.getColumnName(),columnConfig.getColumnName())) {
              columnConfig.setColumnBinning(backupColumnConfig.getColumnBinning());
            }
          }
        }
      }
      List<ColumnConfig> rebinColumns=new ArrayList<ColumnConfig>();
      List<String> catVariables=getStringList(this.params,REQUEST_VARS,""String_Node_Str"");
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CollectionUtils.isEmpty(catVariables) || isRequestColumn(catVariables,columnConfig)) {
          rebinColumns.add(columnConfig);
        }
      }
      if (CollectionUtils.isNotEmpty(rebinColumns)) {
        for (        ColumnConfig columnConfig : rebinColumns) {
          doReBin(columnConfig);
        }
      }
      saveColumnConfigList();
    }
 else {
      AbstractStatsExecutor statsExecutor=null;
      if (modelConfig.isMapReduceRunMode()) {
        if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
          statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
          statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
          statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
          statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
      }
 else       if (modelConfig.isLocalRunMode()) {
        statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
      }
 else {
        throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
      }
      statsExecutor.doStats();
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
      saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
    }
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    e.printStackTrace();
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}","/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    log.debug(""String_Node_Str"",this.modelConfig.getStats().getCateMaxNumBin());
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    if (getBooleanParam(this.params,IS_COMPUTE_CORR)) {
      boolean foundValidMeanValueColumn=false;
      for (      ColumnConfig config : this.columnConfigList) {
        if (!config.isMeta() && !config.isTarget()) {
          if (config.getMean() != null) {
            foundValidMeanValueColumn=true;
            break;
          }
        }
      }
      if (!foundValidMeanValueColumn) {
        log.warn(""String_Node_Str"");
        return -1;
      }
      log.info(""String_Node_Str"");
      runCorrMapReduceJob();
      saveColumnConfigList();
    }
 else     if (getBooleanParam(this.params,IS_REBIN)) {
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      if (!ShifuFileUtils.isFileExists(new Path(backupColumnConfigPath),SourceType.LOCAL)) {
        ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
        saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
      }
 else {
        List<ColumnConfig> backColumnConfigList=CommonUtils.loadColumnConfigList(backupColumnConfigPath,SourceType.LOCAL);
        for (        ColumnConfig backupColumnConfig : backColumnConfigList) {
          for (          ColumnConfig columnConfig : this.columnConfigList) {
            if (NSColumnUtils.isColumnEqual(backupColumnConfig.getColumnName(),columnConfig.getColumnName())) {
              columnConfig.setColumnBinning(backupColumnConfig.getColumnBinning());
            }
          }
        }
      }
      List<ColumnConfig> rebinColumns=new ArrayList<ColumnConfig>();
      List<String> catVariables=getStringList(this.params,REQUEST_VARS,""String_Node_Str"");
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CollectionUtils.isEmpty(catVariables) || isRequestColumn(catVariables,columnConfig)) {
          rebinColumns.add(columnConfig);
        }
      }
      if (CollectionUtils.isNotEmpty(rebinColumns)) {
        for (        ColumnConfig columnConfig : rebinColumns) {
          doReBin(columnConfig);
        }
      }
      saveColumnConfigList();
    }
 else {
      AbstractStatsExecutor statsExecutor=null;
      if (modelConfig.isMapReduceRunMode()) {
        if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
          statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
          statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
          statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
          statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
        }
 else         if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
 else {
          statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
        }
      }
 else       if (modelConfig.isLocalRunMode()) {
        statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
      }
 else {
        throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
      }
      statsExecutor.doStats();
      String backupColumnConfigPath=this.pathFinder.getBackupColumnConfig();
      ShifuFileUtils.createDirIfNotExists(new SourceFile(Constants.TMP,SourceType.LOCAL));
      saveColumnConfigList(backupColumnConfigPath,this.columnConfigList);
    }
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    e.printStackTrace();
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}",0.997270245677889
31726,"public ScoreObject scoreNsData(MLDataPair inputPair,Map<NSColumn,String> rawNsDataMap){
  if (inputPair == null && !this.alg.equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
    inputPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg);
  }
  final MLDataPair pair=inputPair;
  List<Callable<MLData>> tasks=new ArrayList<Callable<MLData>>();
  for (  final BasicML model : models) {
    if (model instanceof BasicNetwork) {
      final BasicNetwork network=(BasicNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,null);
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof BasicFloatNetwork) {
      final BasicFloatNetwork network=(BasicFloatNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,network.getFeatureSet());
      if (network.getFeatureSet().size() != networkPair.getInput().size()) {
        log.error(""String_Node_Str"" + network.getFeatureSet().size() + ""String_Node_Str""+ networkPair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof SVM) {
      final SVM svm=(SVM)model;
      if (svm.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + svm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return svm.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof LR) {
      final LR lr=(LR)model;
      if (lr.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + lr.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return lr.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof TreeModel) {
      final TreeModel tm=(TreeModel)model;
      if (tm.getInputCount() != pair.getInput().size()) {
        throw new RuntimeException(""String_Node_Str"" + tm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          MLData result=tm.compute(pair.getInput());
          return result;
        }
      }
);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  List<Double> scores=new ArrayList<Double>();
  List<Integer> rfTreeSizeList=new ArrayList<Integer>();
  if (CollectionUtils.isNotEmpty(tasks)) {
    List<MLData> modelResults=this.executorManager.submitTasksAndWaitResults(tasks);
    if (CollectionUtils.isEmpty(modelResults) || modelResults.size() != this.models.size()) {
      log.error(""String_Node_Str"");
      return null;
    }
    for (int i=0; i < this.models.size(); i++) {
      BasicML model=this.models.get(i);
      MLData score=modelResults.get(i);
      if (model instanceof BasicNetwork) {
        if (modelConfig != null && modelConfig.isRegression()) {
          scores.add(toScore(score.getData(0)));
        }
 else         if (modelConfig != null && modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
          scores.add(toScore(score.getData(0)));
        }
 else {
          double[] outputs=score.getData();
          for (          double d : outputs) {
            scores.add(toScore(d));
          }
        }
      }
 else       if (model instanceof SVM) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof LR) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof TreeModel) {
        if (modelConfig.isClassification() && !modelConfig.getTrain().isOneVsAll()) {
          double[] scoreArray=score.getData();
          for (          double sc : scoreArray) {
            scores.add(sc);
          }
        }
 else {
          scores.add(toScore(score.getData(0)));
        }
        final TreeModel tm=(TreeModel)model;
        if (!tm.isClassfication() && !tm.isGBDT()) {
          rfTreeSizeList.add(tm.getTrees().size());
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Integer tag=Constants.DEFAULT_IDEAL_VALUE;
  if (scores.size() == 0) {
    log.warn(""String_Node_Str"");
  }
  return new ScoreObject(scores,tag,rfTreeSizeList);
}","public ScoreObject scoreNsData(MLDataPair inputPair,Map<NSColumn,String> rawNsDataMap){
  if (inputPair == null && !this.alg.equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
    inputPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg);
  }
  final MLDataPair pair=inputPair;
  List<Callable<MLData>> tasks=new ArrayList<Callable<MLData>>();
  for (  final BasicML model : models) {
    if (model instanceof BasicFloatNetwork) {
      final BasicFloatNetwork network=(BasicFloatNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,network.getFeatureSet());
      if (network.getFeatureSet().size() != networkPair.getInput().size()) {
        log.error(""String_Node_Str"" + network.getFeatureSet().size() + ""String_Node_Str""+ networkPair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof BasicNetwork) {
      final BasicNetwork network=(BasicNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,null);
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof SVM) {
      final SVM svm=(SVM)model;
      if (svm.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + svm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return svm.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof LR) {
      final LR lr=(LR)model;
      if (lr.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + lr.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return lr.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof TreeModel) {
      final TreeModel tm=(TreeModel)model;
      if (tm.getInputCount() != pair.getInput().size()) {
        throw new RuntimeException(""String_Node_Str"" + tm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          MLData result=tm.compute(pair.getInput());
          return result;
        }
      }
);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  List<Double> scores=new ArrayList<Double>();
  List<Integer> rfTreeSizeList=new ArrayList<Integer>();
  if (CollectionUtils.isNotEmpty(tasks)) {
    List<MLData> modelResults=this.executorManager.submitTasksAndWaitResults(tasks);
    if (CollectionUtils.isEmpty(modelResults) || modelResults.size() != this.models.size()) {
      log.error(""String_Node_Str"");
      return null;
    }
    for (int i=0; i < this.models.size(); i++) {
      BasicML model=this.models.get(i);
      MLData score=modelResults.get(i);
      if (model instanceof BasicNetwork) {
        if (modelConfig != null && modelConfig.isRegression()) {
          scores.add(toScore(score.getData(0)));
        }
 else         if (modelConfig != null && modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
          scores.add(toScore(score.getData(0)));
        }
 else {
          double[] outputs=score.getData();
          for (          double d : outputs) {
            scores.add(toScore(d));
          }
        }
      }
 else       if (model instanceof SVM) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof LR) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof TreeModel) {
        if (modelConfig.isClassification() && !modelConfig.getTrain().isOneVsAll()) {
          double[] scoreArray=score.getData();
          for (          double sc : scoreArray) {
            scores.add(sc);
          }
        }
 else {
          scores.add(toScore(score.getData(0)));
        }
        final TreeModel tm=(TreeModel)model;
        if (!tm.isClassfication() && !tm.isGBDT()) {
          rfTreeSizeList.add(tm.getTrees().size());
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Integer tag=Constants.DEFAULT_IDEAL_VALUE;
  if (scores.size() == 0) {
    log.warn(""String_Node_Str"");
  }
  return new ScoreObject(scores,tag,rfTreeSizeList);
}",0.9455685957102388
31727,"public ScoreObject scoreNsData(MLDataPair inputPair,Map<NSColumn,String> rawNsDataMap){
  if (inputPair == null && !this.alg.equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
    inputPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg);
  }
  final MLDataPair pair=inputPair;
  List<Callable<MLData>> tasks=new ArrayList<Callable<MLData>>();
  for (  final BasicML model : models) {
    if (model instanceof BasicFloatNetwork) {
      final BasicFloatNetwork network=(BasicFloatNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,network.getFeatureSet());
      if (network.getFeatureSet().size() != networkPair.getInput().size()) {
        log.error(""String_Node_Str"" + network.getFeatureSet().size() + ""String_Node_Str""+ networkPair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof SVM) {
      final SVM svm=(SVM)model;
      if (svm.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + svm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return svm.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof LR) {
      final LR lr=(LR)model;
      if (lr.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + lr.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return lr.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof TreeModel) {
      final TreeModel tm=(TreeModel)model;
      if (tm.getInputCount() != pair.getInput().size()) {
        throw new RuntimeException(""String_Node_Str"" + tm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          MLData result=tm.compute(pair.getInput());
          return result;
        }
      }
);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  List<Double> scores=new ArrayList<Double>();
  List<Integer> rfTreeSizeList=new ArrayList<Integer>();
  if (CollectionUtils.isNotEmpty(tasks)) {
    List<MLData> modelResults=this.executorManager.submitTasksAndWaitResults(tasks);
    if (CollectionUtils.isEmpty(modelResults) || modelResults.size() != this.models.size()) {
      log.error(""String_Node_Str"");
      return null;
    }
    for (int i=0; i < this.models.size(); i++) {
      BasicML model=this.models.get(i);
      MLData score=modelResults.get(i);
      if (model instanceof BasicNetwork) {
        if (modelConfig != null && modelConfig.isRegression()) {
          scores.add(toScore(score.getData(0)));
        }
 else         if (modelConfig != null && modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
          scores.add(toScore(score.getData(0)));
        }
 else {
          double[] outputs=score.getData();
          for (          double d : outputs) {
            scores.add(toScore(d));
          }
        }
      }
 else       if (model instanceof SVM) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof LR) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof TreeModel) {
        if (modelConfig.isClassification() && !modelConfig.getTrain().isOneVsAll()) {
          double[] scoreArray=score.getData();
          for (          double sc : scoreArray) {
            scores.add(sc);
          }
        }
 else {
          scores.add(toScore(score.getData(0)));
        }
        final TreeModel tm=(TreeModel)model;
        if (!tm.isClassfication() && !tm.isGBDT()) {
          rfTreeSizeList.add(tm.getTrees().size());
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Integer tag=Constants.DEFAULT_IDEAL_VALUE;
  if (scores.size() == 0) {
    log.warn(""String_Node_Str"");
  }
  return new ScoreObject(scores,tag,rfTreeSizeList);
}","public ScoreObject scoreNsData(MLDataPair inputPair,Map<NSColumn,String> rawNsDataMap){
  if (inputPair == null && !this.alg.equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
    inputPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg);
  }
  final MLDataPair pair=inputPair;
  List<Callable<MLData>> tasks=new ArrayList<Callable<MLData>>();
  for (  final BasicML model : models) {
    if (model instanceof BasicFloatNetwork) {
      final BasicFloatNetwork network=(BasicFloatNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,network.getFeatureSet());
      if (CollectionUtils.isNotEmpty(network.getFeatureSet())) {
        if (network.getFeatureSet().size() != networkPair.getInput().size()) {
          log.error(""String_Node_Str"" + network.getFeatureSet().size() + ""String_Node_Str""+ networkPair.getInput().size());
          continue;
        }
      }
 else {
        if (network.getInputCount() != networkPair.getInput().size()) {
          log.error(""String_Node_Str"" + network.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
          continue;
        }
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof BasicNetwork) {
      final BasicNetwork network=(BasicNetwork)model;
      final MLDataPair networkPair=CommonUtils.assembleNsDataPair(binCategoryMap,noVarSelect,modelConfig,columnConfigList,rawNsDataMap,cutoff,alg,null);
      if (network.getInputCount() != networkPair.getInput().size()) {
        log.error(""String_Node_Str"" + network.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(networkPair.getInput());
        }
      }
);
    }
 else     if (model instanceof SVM) {
      final SVM svm=(SVM)model;
      if (svm.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + svm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return svm.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof LR) {
      final LR lr=(LR)model;
      if (lr.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + lr.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return lr.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof TreeModel) {
      final TreeModel tm=(TreeModel)model;
      if (tm.getInputCount() != pair.getInput().size()) {
        throw new RuntimeException(""String_Node_Str"" + tm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          MLData result=tm.compute(pair.getInput());
          return result;
        }
      }
);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  List<Double> scores=new ArrayList<Double>();
  List<Integer> rfTreeSizeList=new ArrayList<Integer>();
  if (CollectionUtils.isNotEmpty(tasks)) {
    List<MLData> modelResults=this.executorManager.submitTasksAndWaitResults(tasks);
    if (CollectionUtils.isEmpty(modelResults) || modelResults.size() != this.models.size()) {
      log.error(""String_Node_Str"");
      return null;
    }
    for (int i=0; i < this.models.size(); i++) {
      BasicML model=this.models.get(i);
      MLData score=modelResults.get(i);
      if (model instanceof BasicNetwork) {
        if (modelConfig != null && modelConfig.isRegression()) {
          scores.add(toScore(score.getData(0)));
        }
 else         if (modelConfig != null && modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
          scores.add(toScore(score.getData(0)));
        }
 else {
          double[] outputs=score.getData();
          for (          double d : outputs) {
            scores.add(toScore(d));
          }
        }
      }
 else       if (model instanceof SVM) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof LR) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof TreeModel) {
        if (modelConfig.isClassification() && !modelConfig.getTrain().isOneVsAll()) {
          double[] scoreArray=score.getData();
          for (          double sc : scoreArray) {
            scores.add(sc);
          }
        }
 else {
          scores.add(toScore(score.getData(0)));
        }
        final TreeModel tm=(TreeModel)model;
        if (!tm.isClassfication() && !tm.isGBDT()) {
          rfTreeSizeList.add(tm.getTrees().size());
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Integer tag=Constants.DEFAULT_IDEAL_VALUE;
  if (scores.size() == 0) {
    log.warn(""String_Node_Str"");
  }
  return new ScoreObject(scores,tag,rfTreeSizeList);
}",0.9046184738955824
31728,"/** 
 * Sum the histogram's frequency whose value less than or equal some value
 * @param hval the h value
 * @return current sum
 */
private double sum(double hval){
  LinkNode<HistogramUnit> posHistogramUnit=null;
  LinkNode<HistogramUnit> tmp=this.header;
  while (tmp != this.tail) {
    HistogramUnit chu=tmp.data();
    HistogramUnit nhu=tmp.next().data();
    if (chu.getHval() <= hval && hval < nhu.getHval()) {
      posHistogramUnit=tmp;
      break;
    }
    tmp=tmp.next();
  }
  if (posHistogramUnit != null) {
    HistogramUnit chu=posHistogramUnit.data();
    HistogramUnit nhu=posHistogramUnit.next().data();
    double mb=chu.getHcnt() + (nhu.getHcnt() - nhu.getHcnt()) * (hval - chu.getHval()) / (nhu.getHval() - chu.getHval());
    double s=(chu.getHcnt() + mb) * (hval - chu.getHval()) / (nhu.getHval() - chu.getHval());
    s=s / 2;
    tmp=this.header;
    while (tmp != posHistogramUnit) {
      HistogramUnit hu=tmp.data();
      s=s + hu.getHcnt();
      tmp=tmp.next();
    }
    return s + chu.getHcnt() / 2d;
  }
 else   if (tmp == this.tail) {
    double sum=0.0;
    tmp=this.header;
    while (tmp != null) {
      sum+=tmp.data().getHcnt();
      tmp=tmp.next();
    }
    return sum;
  }
  return -1.0;
}","/** 
 * Sum the histogram's frequency whose value less than or equal some value
 * @param hval the h value
 * @return current sum
 */
private double sum(double hval){
  LinkNode<HistogramUnit> posHistogramUnit=null;
  LinkNode<HistogramUnit> tmp=this.header;
  while (tmp != this.tail) {
    HistogramUnit chu=tmp.data();
    HistogramUnit nhu=tmp.next().data();
    if (chu.getHval() <= hval && hval < nhu.getHval()) {
      posHistogramUnit=tmp;
      break;
    }
    tmp=tmp.next();
  }
  if (posHistogramUnit != null) {
    HistogramUnit chu=posHistogramUnit.data();
    HistogramUnit nhu=posHistogramUnit.next().data();
    double mb=chu.getHcnt() + (nhu.getHcnt() - chu.getHcnt()) * (hval - chu.getHval()) / (nhu.getHval() - chu.getHval());
    double s=(chu.getHcnt() + mb) * (hval - chu.getHval()) / (nhu.getHval() - chu.getHval());
    s=s / 2;
    tmp=this.header;
    while (tmp != posHistogramUnit) {
      HistogramUnit hu=tmp.data();
      s=s + hu.getHcnt();
      tmp=tmp.next();
    }
    return s + chu.getHcnt() / 2d;
  }
 else   if (tmp == this.tail) {
    double sum=0.0;
    tmp=this.header;
    while (tmp != null) {
      sum+=tmp.data().getHcnt();
      tmp=tmp.next();
    }
    return sum;
  }
  return -1.0;
}",0.9991922455573504
31729,"/** 
 * Parse raw value based on ColumnConfig.
 * @param config ColumnConfig info
 * @param raw input column value
 * @param categoryMissingNormType missing categorical value norm type
 * @return parsed raw value. For categorical type, return BinPosRate. For numerical type, returncorresponding double value. For missing data, return default value using {@link Normalizer#defaultMissingValue}.
 */
private static double parseRawValue(ColumnConfig config,String raw,CategoryMissingNormType categoryMissingNormType){
  if (categoryMissingNormType == null) {
    categoryMissingNormType=CategoryMissingNormType.MEAN;
  }
  double value=0.0;
  if (config.isCategorical()) {
    int index=CommonUtils.getBinNum(config,raw);
    if (index == -1) {
switch (categoryMissingNormType) {
case POSRATE:
        value=config.getBinPosRate().get(config.getBinPosRate().size() - 1);
      break;
case MEAN:
default :
    value=defaultMissingValue(config);
  break;
}
}
 else {
Double binPosRate=config.getBinPosRate().get(index);
value=binPosRate == null ? defaultMissingValue(config) : binPosRate.doubleValue();
}
}
 else {
try {
value=Double.parseDouble(raw);
}
 catch (Exception e) {
log.debug(""String_Node_Str"" + raw + ""String_Node_Str"");
value=defaultMissingValue(config);
}
}
return value;
}","/** 
 * Parse raw value based on ColumnConfig.
 * @param config ColumnConfig info
 * @param raw input column value
 * @param categoryMissingNormType missing categorical value norm type
 * @return parsed raw value. For categorical type, return BinPosRate. For numerical type, returncorresponding double value. For missing data, return default value using {@link Normalizer#defaultMissingValue}.
 */
private static double parseRawValue(ColumnConfig config,String raw,CategoryMissingNormType categoryMissingNormType){
  if (categoryMissingNormType == null) {
    categoryMissingNormType=CategoryMissingNormType.MEAN;
  }
  double value=0.0;
  if (config.isCategorical()) {
    int index=CommonUtils.getBinNum(config,raw);
    if (index == -1) {
switch (categoryMissingNormType) {
case POSRATE:
        value=config.getBinPosRate().get(config.getBinPosRate().size() - 1);
      break;
case MEAN:
default :
    value=defaultMissingValue(config);
  break;
}
}
 else {
Double binPosRate=config.getBinPosRate().get(index);
if (binPosRate != null) {
value=binPosRate.doubleValue();
;
}
 else {
switch (categoryMissingNormType) {
case POSRATE:
  value=config.getBinPosRate().get(config.getBinPosRate().size() - 1);
break;
case MEAN:
default :
value=defaultMissingValue(config);
break;
}
}
}
}
 else {
try {
value=Double.parseDouble(raw);
}
 catch (Exception e) {
log.debug(""String_Node_Str"" + raw + ""String_Node_Str"");
value=defaultMissingValue(config);
}
}
return value;
}",0.8969034608378871
31730,"public static void main(String[] args){
  List<String> cleanedArgsList=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      String keyValue=args[i].substring(2,args[i].length());
      int index=keyValue.indexOf(""String_Node_Str"");
      String key=keyValue.substring(0,index);
      String value=""String_Node_Str"";
      if (keyValue.length() >= index + 1) {
        value=keyValue.substring(index + 1,keyValue.length());
      }
      Environment.setProperty(key.trim(),value.trim());
      System.setProperty(key.trim(),value.trim());
      cleanedArgsList.add(args[i]);
    }
  }
  String[] cleanedArgs=cleanedArgsList.toArray(new String[0]);
  if (cleanedArgs.length < 1 || (isHelpOption(cleanedArgs[0]))) {
    printUsage();
    System.exit(cleanedArgs.length < 1 ? -1 : 0);
  }
  if (isVersionOption(cleanedArgs[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(cleanedArgs);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,cleanedArgs);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (cleanedArgs[0].equals(NEW) && cleanedArgs.length >= 2 && StringUtils.isNotEmpty(cleanedArgs[1])) {
      String modelName=cleanedArgs[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (cleanedArgs[0].equals(MODELSET_CMD_CP) && cleanedArgs.length >= 3 && StringUtils.isNotEmpty(cleanedArgs[1]) && StringUtils.isNotEmpty(cleanedArgs[2])) {
        String newModelSetName=cleanedArgs[2];
        copyModel(new String[]{cleanedArgs[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(STATS_CMD)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(StatsModelProcessor.IS_COMPUTE_CORR,cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str""));
        params.put(StatsModelProcessor.IS_REBIN,cmd.hasOption(REBIN));
        params.put(StatsModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(StatsModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(StatsModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(StatsModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=calModelStats(params);
        if (status == 0) {
          if (cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str"")) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(NORMALIZE_CMD) || cleanedArgs[0].equals(NORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(VARSELECT_CMD) || cleanedArgs[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET),cmd.hasOption(LIST));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG),cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(SAVE)) {
        String newModelSetName=cleanedArgs.length >= 2 ? cleanedArgs[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SWITCH)) {
        String newModelSetName=cleanedArgs[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (cleanedArgs[0].equals(EVAL_CMD)) {
        if (cleanedArgs.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(CMD_EXPORT)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(ExportModelProcessor.IS_CONCISE,cmd.hasOption(EXPORT_CONCISE));
        params.put(ExportModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(ExportModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(ExportModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(ExportModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),params);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}","public static void main(String[] args){
  List<String> cleanedArgsList=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      String keyValue=args[i].substring(2,args[i].length());
      int index=keyValue.indexOf(""String_Node_Str"");
      String key=keyValue.substring(0,index);
      String value=""String_Node_Str"";
      if (keyValue.length() >= index + 1) {
        value=keyValue.substring(index + 1,keyValue.length());
      }
      Environment.setProperty(key.trim(),value.trim());
      System.setProperty(key.trim(),value.trim());
    }
 else {
      cleanedArgsList.add(args[i]);
    }
  }
  String[] cleanedArgs=cleanedArgsList.toArray(new String[0]);
  if (cleanedArgs.length < 1 || (isHelpOption(cleanedArgs[0]))) {
    printUsage();
    System.exit(cleanedArgs.length < 1 ? -1 : 0);
  }
  if (isVersionOption(cleanedArgs[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(cleanedArgs);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,cleanedArgs);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (cleanedArgs[0].equals(NEW) && cleanedArgs.length >= 2 && StringUtils.isNotEmpty(cleanedArgs[1])) {
      String modelName=cleanedArgs[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (cleanedArgs[0].equals(MODELSET_CMD_CP) && cleanedArgs.length >= 3 && StringUtils.isNotEmpty(cleanedArgs[1]) && StringUtils.isNotEmpty(cleanedArgs[2])) {
        String newModelSetName=cleanedArgs[2];
        copyModel(new String[]{cleanedArgs[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(STATS_CMD)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(StatsModelProcessor.IS_COMPUTE_CORR,cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str""));
        params.put(StatsModelProcessor.IS_REBIN,cmd.hasOption(REBIN));
        params.put(StatsModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(StatsModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(StatsModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(StatsModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=calModelStats(params);
        if (status == 0) {
          if (cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str"")) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(NORMALIZE_CMD) || cleanedArgs[0].equals(NORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(VARSELECT_CMD) || cleanedArgs[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET),cmd.hasOption(LIST));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG),cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(SAVE)) {
        String newModelSetName=cleanedArgs.length >= 2 ? cleanedArgs[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SWITCH)) {
        String newModelSetName=cleanedArgs[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (cleanedArgs[0].equals(EVAL_CMD)) {
        if (cleanedArgs.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(CMD_EXPORT)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(ExportModelProcessor.IS_CONCISE,cmd.hasOption(EXPORT_CONCISE));
        params.put(ExportModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(ExportModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(ExportModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(ExportModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),params);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}",0.99917772818043
31731,"/** 
 * Check the setting for model training. It will make sure (num_of_layers > 0 && num_of_layers = hidden_nodes_size && num_of_layse = active_func_size)
 * @param train - @ModelTrainConf to check
 * @return @ValidateResult
 */
@SuppressWarnings(""String_Node_Str"") private ValidateResult checkTrainSetting(ModelConfig modelConfig,ModelTrainConf train){
  ValidateResult result=new ValidateResult(true);
  if (train.getBaggingNum() == null || train.getBaggingNum() < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumKFold() != null && train.getNumKFold() > 20) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getBaggingSampleRate() == null || train.getBaggingSampleRate().compareTo(Double.valueOf(0)) <= 0 || train.getBaggingSampleRate().compareTo(Double.valueOf(1)) > 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getValidSetRate() == null || train.getValidSetRate().compareTo(Double.valueOf(0)) < 0 || train.getValidSetRate().compareTo(Double.valueOf(1)) >= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumTrainEpochs() == null || train.getNumTrainEpochs() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getEpochsPerIteration() != null && train.getEpochsPerIteration() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getWorkerThreadCount() != null && (train.getWorkerThreadCount() <= 0 || train.getWorkerThreadCount() > 32)) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getConvergenceThreshold() != null && train.getConvergenceThreshold().compareTo(0.0) < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.isOneVsAll() && !CommonUtils.isTreeModel(train.getAlgorithm())&& !train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.getMultiClassifyMethod() == MultipleClassification.NATIVE && train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
    Object impurity=train.getParams().get(""String_Node_Str"");
    if (impurity != null && !""String_Node_Str"".equalsIgnoreCase(impurity.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurity.toString())) {
      ValidateResult tmpResult=new ValidateResult(true);
      tmpResult.setStatus(false);
      tmpResult.getCauses().add(""String_Node_Str"");
      result=ValidateResult.mergeResult(result,tmpResult);
    }
  }
  GridSearch gs=new GridSearch(train.getParams());
  if (modelConfig.isRegression() && !gs.hasHyperParam()) {
    if (train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
      Map<String,Object> params=train.getParams();
      int layerCnt=(Integer)params.get(CommonConstants.NUM_HIDDEN_LAYERS);
      if (layerCnt < 0) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      List<Integer> hiddenNode=(List<Integer>)params.get(CommonConstants.NUM_HIDDEN_NODES);
      List<String> activateFucs=(List<String>)params.get(CommonConstants.ACTIVATION_FUNC);
      if (hiddenNode.size() != activateFucs.size() || layerCnt != activateFucs.size()) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(CommonConstants.NUM_HIDDEN_LAYERS + ""String_Node_Str"" + CommonConstants.NUM_HIDDEN_NODES+ ""String_Node_Str""+ ""String_Node_Str""+ CommonConstants.ACTIVATION_FUNC+ ""String_Node_Str""+ ""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Double learningRate=Double.valueOf(params.get(CommonConstants.LEARNING_RATE).toString());
      if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object learningDecayO=params.get(""String_Node_Str"");
      if (learningDecayO != null) {
        Double learningDecay=Double.valueOf(learningDecayO.toString());
        if (learningDecay != null && ((learningDecay.compareTo(Double.valueOf(0)) < 0) || (learningDecay.compareTo(Double.valueOf(1)) >= 0))) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object elmObject=params.get(DTrainUtils.IS_ELM);
      boolean isELM=elmObject == null ? false : ""String_Node_Str"".equalsIgnoreCase(elmObject.toString());
      if (isELM && layerCnt != 1) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      Object fssObj=params.get(""String_Node_Str"");
      if (fssObj == null) {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        boolean isNumber=false;
        double doubleFss=0;
        try {
          doubleFss=Double.parseDouble(fssObj.toString());
          isNumber=true;
        }
 catch (        Exception e) {
          isNumber=false;
        }
        if (isNumber && (doubleFss <= 0d || doubleFss > 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
        }
 else {
          boolean fssInEnum=false;
          for (          FeatureSubsetStrategy fss : FeatureSubsetStrategy.values()) {
            if (fss.toString().equalsIgnoreCase(fssObj.toString())) {
              fssInEnum=true;
              break;
            }
          }
          if (!fssInEnum) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
          }
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object loss=params.get(""String_Node_Str"");
        if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
        if (loss == null) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxDepthObj=params.get(""String_Node_Str"");
      if (maxDepthObj != null) {
        int maxDepth=Integer.valueOf(maxDepthObj.toString());
        if (maxDepth <= 0 || maxDepth > 20) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object vtObj=params.get(""String_Node_Str"");
      if (vtObj != null) {
        double validationTolerance=Double.valueOf(vtObj.toString());
        if (validationTolerance < 0d || validationTolerance >= 1d) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxLeavesObj=params.get(""String_Node_Str"");
      if (maxLeavesObj != null) {
        int maxLeaves=Integer.valueOf(maxLeavesObj.toString());
        if (maxLeaves <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (maxDepthObj == null && maxLeavesObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object maxStatsMemoryMBObj=params.get(""String_Node_Str"");
      if (maxStatsMemoryMBObj != null) {
        int maxStatsMemoryMB=Integer.valueOf(maxStatsMemoryMBObj.toString());
        if (maxStatsMemoryMB <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object learningRateObj=params.get(CommonConstants.LEARNING_RATE);
        if (learningRateObj != null) {
          Double learningRate=Double.valueOf(learningRateObj.toString());
          if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
 else {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object minInstancesPerNodeObj=params.get(""String_Node_Str"");
      if (minInstancesPerNodeObj != null) {
        int minInstancesPerNode=Integer.valueOf(minInstancesPerNodeObj.toString());
        if (minInstancesPerNode <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object treeNumObj=params.get(""String_Node_Str"");
      if (treeNumObj != null) {
        int treeNum=Integer.valueOf(treeNumObj.toString());
        if (treeNum <= 0 || treeNum > 10000) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object minInfoGainObj=params.get(""String_Node_Str"");
      if (minInfoGainObj != null) {
        Double minInfoGain=Double.valueOf(minInfoGainObj.toString());
        if (minInfoGain != null && (minInfoGain.compareTo(Double.valueOf(0)) < 0)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object impurityObj=params.get(""String_Node_Str"");
      if (impurityObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
 else {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
      }
    }
  }
  return result;
}","/** 
 * Check the setting for model training. It will make sure (num_of_layers > 0 && num_of_layers = hidden_nodes_size && num_of_layse = active_func_size)
 * @param train - @ModelTrainConf to check
 * @return @ValidateResult
 */
@SuppressWarnings(""String_Node_Str"") private ValidateResult checkTrainSetting(ModelConfig modelConfig,ModelTrainConf train){
  ValidateResult result=new ValidateResult(true);
  if (train.getBaggingNum() == null || train.getBaggingNum() < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumKFold() != null && train.getNumKFold() > 20) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getBaggingSampleRate() == null || train.getBaggingSampleRate().compareTo(Double.valueOf(0)) <= 0 || train.getBaggingSampleRate().compareTo(Double.valueOf(1)) > 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getValidSetRate() == null || train.getValidSetRate().compareTo(Double.valueOf(0)) < 0 || train.getValidSetRate().compareTo(Double.valueOf(1)) >= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getNumTrainEpochs() == null || train.getNumTrainEpochs() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getEpochsPerIteration() != null && train.getEpochsPerIteration() <= 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getWorkerThreadCount() != null && (train.getWorkerThreadCount() <= 0 || train.getWorkerThreadCount() > 32)) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (train.getConvergenceThreshold() != null && train.getConvergenceThreshold().compareTo(0.0) < 0) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.isOneVsAll() && !CommonUtils.isTreeModel(train.getAlgorithm())&& !train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
    ValidateResult tmpResult=new ValidateResult(true);
    tmpResult.setStatus(false);
    tmpResult.getCauses().add(""String_Node_Str"");
    result=ValidateResult.mergeResult(result,tmpResult);
  }
  if (modelConfig.isClassification() && train.getMultiClassifyMethod() == MultipleClassification.NATIVE && train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
    Object impurity=train.getParams().get(""String_Node_Str"");
    if (impurity != null && !""String_Node_Str"".equalsIgnoreCase(impurity.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurity.toString())) {
      ValidateResult tmpResult=new ValidateResult(true);
      tmpResult.setStatus(false);
      tmpResult.getCauses().add(""String_Node_Str"");
      result=ValidateResult.mergeResult(result,tmpResult);
    }
  }
  GridSearch gs=new GridSearch(train.getParams());
  if (modelConfig.isRegression() && !gs.hasHyperParam()) {
    if (train.getAlgorithm().equalsIgnoreCase(""String_Node_Str"")) {
      Map<String,Object> params=train.getParams();
      int layerCnt=(Integer)params.get(CommonConstants.NUM_HIDDEN_LAYERS);
      if (layerCnt < 0) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      List<Integer> hiddenNode=(List<Integer>)params.get(CommonConstants.NUM_HIDDEN_NODES);
      List<String> activateFucs=(List<String>)params.get(CommonConstants.ACTIVATION_FUNC);
      if (hiddenNode.size() != activateFucs.size() || layerCnt != activateFucs.size()) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(CommonConstants.NUM_HIDDEN_LAYERS + ""String_Node_Str"" + CommonConstants.NUM_HIDDEN_NODES+ ""String_Node_Str""+ ""String_Node_Str""+ CommonConstants.ACTIVATION_FUNC+ ""String_Node_Str""+ ""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Double learningRate=Double.valueOf(params.get(CommonConstants.LEARNING_RATE).toString());
      if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object learningDecayO=params.get(""String_Node_Str"");
      if (learningDecayO != null) {
        Double learningDecay=Double.valueOf(learningDecayO.toString());
        if (learningDecay != null && ((learningDecay.compareTo(Double.valueOf(0)) < 0) || (learningDecay.compareTo(Double.valueOf(1)) >= 0))) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object elmObject=params.get(DTrainUtils.IS_ELM);
      boolean isELM=elmObject == null ? false : ""String_Node_Str"".equalsIgnoreCase(elmObject.toString());
      if (isELM && layerCnt != 1) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(NNConstants.NN_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      Object fssObj=params.get(""String_Node_Str"");
      if (fssObj == null) {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        boolean isNumber=false;
        double doubleFss=0;
        try {
          doubleFss=Double.parseDouble(fssObj.toString());
          isNumber=true;
        }
 catch (        Exception e) {
          isNumber=false;
        }
        if (isNumber && (doubleFss <= 0d || doubleFss > 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
        }
 else {
          boolean fssInEnum=false;
          for (          FeatureSubsetStrategy fss : FeatureSubsetStrategy.values()) {
            if (fss.toString().equalsIgnoreCase(fssObj.toString())) {
              fssInEnum=true;
              break;
            }
          }
          if (!fssInEnum) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
          }
        }
      }
    }
    if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME) || train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
      Map<String,Object> params=train.getParams();
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object loss=params.get(""String_Node_Str"");
        if (loss != null && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString()) && !""String_Node_Str"".equalsIgnoreCase(loss.toString())) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
        if (loss == null) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxDepthObj=params.get(""String_Node_Str"");
      if (maxDepthObj != null) {
        int maxDepth=Integer.valueOf(maxDepthObj.toString());
        if (maxDepth <= 0 || maxDepth > 20) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object vtObj=params.get(""String_Node_Str"");
      if (vtObj != null) {
        double validationTolerance=Double.valueOf(vtObj.toString());
        if (validationTolerance < 0d || validationTolerance >= 1d) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object maxLeavesObj=params.get(""String_Node_Str"");
      if (maxLeavesObj != null) {
        int maxLeaves=Integer.valueOf(maxLeavesObj.toString());
        if (maxLeaves <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (maxDepthObj == null && maxLeavesObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object maxStatsMemoryMBObj=params.get(""String_Node_Str"");
      if (maxStatsMemoryMBObj != null) {
        int maxStatsMemoryMB=Integer.valueOf(maxStatsMemoryMBObj.toString());
        if (maxStatsMemoryMB <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object dropoutObj=params.get(CommonConstants.DROPOUT_RATE);
      if (dropoutObj != null) {
        Double dropoutRate=Double.valueOf(dropoutObj.toString());
        if (dropoutRate != null && (dropoutRate < 0d || dropoutRate >= 1d)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
        Object learningRateObj=params.get(CommonConstants.LEARNING_RATE);
        if (learningRateObj != null) {
          Double learningRate=Double.valueOf(learningRateObj.toString());
          if (learningRate != null && (learningRate.compareTo(Double.valueOf(0)) <= 0)) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
 else {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
      Object minInstancesPerNodeObj=params.get(""String_Node_Str"");
      if (minInstancesPerNodeObj != null) {
        int minInstancesPerNode=Integer.valueOf(minInstancesPerNodeObj.toString());
        if (minInstancesPerNode <= 0) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object treeNumObj=params.get(""String_Node_Str"");
      if (treeNumObj != null) {
        int treeNum=Integer.valueOf(treeNumObj.toString());
        if (treeNum <= 0 || treeNum > 10000) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object minInfoGainObj=params.get(""String_Node_Str"");
      if (minInfoGainObj != null) {
        Double minInfoGain=Double.valueOf(minInfoGainObj.toString());
        if (minInfoGain != null && (minInfoGain.compareTo(Double.valueOf(0)) < 0)) {
          ValidateResult tmpResult=new ValidateResult(true);
          tmpResult.setStatus(false);
          tmpResult.getCauses().add(""String_Node_Str"");
          result=ValidateResult.mergeResult(result,tmpResult);
        }
      }
 else {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
      Object impurityObj=params.get(""String_Node_Str"");
      if (impurityObj == null) {
        ValidateResult tmpResult=new ValidateResult(true);
        tmpResult.setStatus(false);
        tmpResult.getCauses().add(""String_Node_Str"");
        result=ValidateResult.mergeResult(result,tmpResult);
      }
 else {
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.GBT_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
        if (train.getAlgorithm().equalsIgnoreCase(CommonConstants.RF_ALG_NAME)) {
          if (impurityObj != null && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString()) && !""String_Node_Str"".equalsIgnoreCase(impurityObj.toString())) {
            ValidateResult tmpResult=new ValidateResult(true);
            tmpResult.setStatus(false);
            tmpResult.getCauses().add(""String_Node_Str"");
            result=ValidateResult.mergeResult(result,tmpResult);
          }
        }
      }
    }
  }
  return result;
}",0.9962093862815884
31732,"public static void main(String[] args){
  List<String> cleanedArgsList=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      String keyValue=args[i].substring(2,args[i].length());
      int index=keyValue.indexOf(""String_Node_Str"");
      String key=keyValue.substring(0,index);
      String value=""String_Node_Str"";
      if (keyValue.length() >= index + 1) {
        value=keyValue.substring(index + 1,keyValue.length());
      }
      Environment.setProperty(key.trim(),value.trim());
      System.setProperty(key.trim(),value.trim());
      cleanedArgsList.add(args[i]);
    }
  }
  String[] cleanedArgs=cleanedArgsList.toArray(new String[0]);
  if (cleanedArgs.length < 1 || (isHelpOption(cleanedArgs[0]))) {
    printUsage();
    System.exit(cleanedArgs.length < 1 ? -1 : 0);
  }
  if (isVersionOption(cleanedArgs[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(cleanedArgs);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,cleanedArgs);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (cleanedArgs[0].equals(NEW) && cleanedArgs.length >= 2 && StringUtils.isNotEmpty(cleanedArgs[1])) {
      String modelName=cleanedArgs[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (cleanedArgs[0].equals(MODELSET_CMD_CP) && cleanedArgs.length >= 3 && StringUtils.isNotEmpty(cleanedArgs[1]) && StringUtils.isNotEmpty(cleanedArgs[2])) {
        String newModelSetName=cleanedArgs[2];
        copyModel(new String[]{cleanedArgs[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(STATS_CMD)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(StatsModelProcessor.IS_COMPUTE_CORR,cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str""));
        params.put(StatsModelProcessor.IS_REBIN,cmd.hasOption(REBIN));
        params.put(StatsModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(StatsModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(StatsModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(StatsModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=calModelStats(params);
        if (status == 0) {
          if (cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str"")) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(NORMALIZE_CMD) || cleanedArgs[0].equals(NORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(VARSELECT_CMD) || cleanedArgs[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET),cmd.hasOption(LIST));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG),cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(SAVE)) {
        String newModelSetName=cleanedArgs.length >= 2 ? cleanedArgs[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SWITCH)) {
        String newModelSetName=cleanedArgs[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (cleanedArgs[0].equals(EVAL_CMD)) {
        if (cleanedArgs.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(CMD_EXPORT)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(ExportModelProcessor.IS_CONCISE,cmd.hasOption(EXPORT_CONCISE));
        params.put(ExportModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(ExportModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(ExportModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(ExportModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),params);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}","public static void main(String[] args){
  List<String> cleanedArgsList=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      String keyValue=args[i].substring(2,args[i].length());
      int index=keyValue.indexOf(""String_Node_Str"");
      String key=keyValue.substring(0,index);
      String value=""String_Node_Str"";
      if (keyValue.length() >= index + 1) {
        value=keyValue.substring(index + 1,keyValue.length());
      }
      Environment.setProperty(key.trim(),value.trim());
      System.setProperty(key.trim(),value.trim());
    }
 else {
      cleanedArgsList.add(args[i]);
    }
  }
  String[] cleanedArgs=cleanedArgsList.toArray(new String[0]);
  if (cleanedArgs.length < 1 || (isHelpOption(cleanedArgs[0]))) {
    printUsage();
    System.exit(cleanedArgs.length < 1 ? -1 : 0);
  }
  if (isVersionOption(cleanedArgs[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(cleanedArgs);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,cleanedArgs);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (cleanedArgs[0].equals(NEW) && cleanedArgs.length >= 2 && StringUtils.isNotEmpty(cleanedArgs[1])) {
      String modelName=cleanedArgs[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (cleanedArgs[0].equals(MODELSET_CMD_CP) && cleanedArgs.length >= 3 && StringUtils.isNotEmpty(cleanedArgs[1]) && StringUtils.isNotEmpty(cleanedArgs[2])) {
        String newModelSetName=cleanedArgs[2];
        copyModel(new String[]{cleanedArgs[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(STATS_CMD)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(StatsModelProcessor.IS_COMPUTE_CORR,cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str""));
        params.put(StatsModelProcessor.IS_REBIN,cmd.hasOption(REBIN));
        params.put(StatsModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(StatsModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(StatsModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(StatsModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=calModelStats(params);
        if (status == 0) {
          if (cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str"")) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(NORMALIZE_CMD) || cleanedArgs[0].equals(NORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(VARSELECT_CMD) || cleanedArgs[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET),cmd.hasOption(LIST));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG),cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(SAVE)) {
        String newModelSetName=cleanedArgs.length >= 2 ? cleanedArgs[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SWITCH)) {
        String newModelSetName=cleanedArgs[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (cleanedArgs[0].equals(EVAL_CMD)) {
        if (cleanedArgs.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(CMD_EXPORT)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(ExportModelProcessor.IS_CONCISE,cmd.hasOption(EXPORT_CONCISE));
        params.put(ExportModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(ExportModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(ExportModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(ExportModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),params);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}",0.99917772818043
31733,"@Override protected void reduce(IntWritable key,Iterable<BinningInfoWritable> values,Context context) throws IOException, InterruptedException {
  long start=System.currentTimeMillis();
  double sum=0d;
  double squaredSum=0d;
  double tripleSum=0d;
  double quarticSum=0d;
  long count=0L, missingCount=0L;
  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;
  List<Double> binBoundaryList=null;
  List<String> binCategories=null;
  long[] binCountPos=null;
  long[] binCountNeg=null;
  double[] binWeightPos=null;
  double[] binWeightNeg=null;
  ColumnConfig columnConfig=this.columnConfigList.get(key.get());
  HyperLogLogPlus hyperLogLogPlus=null;
  Set<String> fis=new HashSet<String>();
  long totalCount=0, invalidCount=0, validNumCount=0;
  int binSize=0;
  for (  BinningInfoWritable info : values) {
    CountAndFrequentItemsWritable cfiw=info.getCfiw();
    totalCount+=cfiw.getCount();
    invalidCount+=cfiw.getInvalidCount();
    validNumCount+=cfiw.getValidNumCount();
    fis.addAll(cfiw.getFrequetItems());
    if (hyperLogLogPlus == null) {
      hyperLogLogPlus=HyperLogLogPlus.Builder.build(cfiw.getHyperBytes());
    }
 else {
      try {
        hyperLogLogPlus=(HyperLogLogPlus)hyperLogLogPlus.merge(HyperLogLogPlus.Builder.build(cfiw.getHyperBytes()));
      }
 catch (      CardinalityMergeException e) {
        throw new RuntimeException(e);
      }
    }
    if (info.isNumeric() && binBoundaryList == null) {
      binBoundaryList=info.getBinBoundaries();
      binSize=binBoundaryList.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    if (!info.isNumeric() && binCategories == null) {
      binCategories=info.getBinCategories();
      binSize=binCategories.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    count+=info.getTotalCount();
    missingCount+=info.getMissingCount();
    sum+=info.getSum();
    squaredSum+=info.getSquaredSum();
    tripleSum+=info.getTripleSum();
    quarticSum+=info.getQuarticSum();
    if (Double.compare(max,info.getMax()) < 0) {
      max=info.getMax();
    }
    if (Double.compare(min,info.getMin()) > 0) {
      min=info.getMin();
    }
    for (int i=0; i < (binSize + 1); i++) {
      binCountPos[i]+=info.getBinCountPos()[i];
      binCountNeg[i]+=info.getBinCountNeg()[i];
      binWeightPos[i]+=info.getBinWeightPos()[i];
      binWeightNeg[i]+=info.getBinWeightNeg()[i];
    }
  }
  if (columnConfig.isCategorical() && modelConfig.getStats().getCateMaxNumBin() > 0) {
    CateBinningStats cateBinningStats=rebinCategoricalValues(new CateBinningStats(binCategories,binCountPos,binCountNeg,binWeightPos,binWeightNeg));
    LOG.info(""String_Node_Str"",columnConfig.getColumnName(),binCategories.size(),cateBinningStats.binCategories.size());
    binCategories=cateBinningStats.binCategories;
    binCountPos=cateBinningStats.binCountPos;
    binCountNeg=cateBinningStats.binCountNeg;
    binWeightPos=cateBinningStats.binWeightPos;
    binWeightNeg=cateBinningStats.binWeightNeg;
  }
  double[] binPosRate;
  if (modelConfig.isRegression()) {
    binPosRate=computePosRate(binCountPos,binCountNeg);
  }
 else {
    binPosRate=computeRateForMultiClassfication(binCountPos);
  }
  String binBounString=null;
  if (columnConfig.isCategorical()) {
    if (binCategories.size() < 0 || binCategories.size() > MAX_CATEGORICAL_BINC_COUNT) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binCategories.size());
      return;
    }
    binBounString=Base64Utils.base64Encode(""String_Node_Str"" + StringUtils.join(binCategories,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR) + ""String_Node_Str"");
    min=Double.MAX_VALUE;
    max=Double.MIN_VALUE;
    sum=0d;
    squaredSum=0d;
    for (int i=0; i < binPosRate.length; i++) {
      if (!Double.isNaN(binPosRate[i])) {
        if (Double.compare(max,binPosRate[i]) < 0) {
          max=binPosRate[i];
        }
        if (Double.compare(min,binPosRate[i]) > 0) {
          min=binPosRate[i];
        }
        long binCount=binCountPos[i] + binCountNeg[i];
        sum+=binPosRate[i] * binCount;
        double squaredVal=binPosRate[i] * binPosRate[i];
        squaredSum+=squaredVal * binCount;
        tripleSum+=squaredVal * binPosRate[i] * binCount;
        quarticSum+=squaredVal * squaredVal * binCount;
      }
    }
  }
 else {
    if (binBoundaryList.size() == 0) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binBoundaryList.size());
      return;
    }
    binBounString=binBoundaryList.toString();
  }
  ColumnMetrics columnCountMetrics=null;
  ColumnMetrics columnWeightMetrics=null;
  if (modelConfig.isRegression()) {
    columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
    columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  }
  long realCount=this.statsExcludeMissingValue ? (count - missingCount) : count;
  double mean=sum / realCount;
  double stdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / (realCount - 1)));
  double aStdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / realCount));
  double skewness=ColumnStatsCalculator.computeSkewness(realCount,mean,aStdDev,sum,squaredSum,tripleSum);
  double kurtosis=ColumnStatsCalculator.computeKurtosis(realCount,mean,aStdDev,sum,squaredSum,tripleSum,quarticSum);
  sb.append(key.get()).append(Constants.DEFAULT_DELIMITER).append(binBounString).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountPos)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(new double[0])).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binPosRate)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : df.format(columnCountMetrics.getKs())).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : df.format(columnWeightMetrics.getIv())).append(Constants.DEFAULT_DELIMITER).append(df.format(max)).append(Constants.DEFAULT_DELIMITER).append(df.format(min)).append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(df.format(stdDev)).append(Constants.DEFAULT_DELIMITER).append(columnConfig.isCategorical() ? ""String_Node_Str"" : ""String_Node_Str"").append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(missingCount).append(Constants.DEFAULT_DELIMITER).append(count).append(Constants.DEFAULT_DELIMITER).append(missingCount * 1.0d / count).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightPos)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : columnCountMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getKs()).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : columnCountMetrics.getIv()).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnCountMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnWeightMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(skewness).append(Constants.DEFAULT_DELIMITER).append(kurtosis).append(Constants.DEFAULT_DELIMITER).append(totalCount).append(Constants.DEFAULT_DELIMITER).append(invalidCount).append(Constants.DEFAULT_DELIMITER).append(validNumCount).append(Constants.DEFAULT_DELIMITER).append(hyperLogLogPlus.cardinality()).append(Constants.DEFAULT_DELIMITER).append(limitedFrequentItems(fis));
  outputValue.set(sb.toString());
  context.write(NullWritable.get(),outputValue);
  sb.delete(0,sb.length());
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}","@Override protected void reduce(IntWritable key,Iterable<BinningInfoWritable> values,Context context) throws IOException, InterruptedException {
  long start=System.currentTimeMillis();
  double sum=0d;
  double squaredSum=0d;
  double tripleSum=0d;
  double quarticSum=0d;
  long count=0L, missingCount=0L;
  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;
  List<Double> binBoundaryList=null;
  List<String> binCategories=null;
  long[] binCountPos=null;
  long[] binCountNeg=null;
  double[] binWeightPos=null;
  double[] binWeightNeg=null;
  ColumnConfig columnConfig=this.columnConfigList.get(key.get());
  HyperLogLogPlus hyperLogLogPlus=null;
  Set<String> fis=new HashSet<String>();
  long totalCount=0, invalidCount=0, validNumCount=0;
  int binSize=0;
  for (  BinningInfoWritable info : values) {
    CountAndFrequentItemsWritable cfiw=info.getCfiw();
    totalCount+=cfiw.getCount();
    invalidCount+=cfiw.getInvalidCount();
    validNumCount+=cfiw.getValidNumCount();
    fis.addAll(cfiw.getFrequetItems());
    if (hyperLogLogPlus == null) {
      hyperLogLogPlus=HyperLogLogPlus.Builder.build(cfiw.getHyperBytes());
    }
 else {
      try {
        hyperLogLogPlus=(HyperLogLogPlus)hyperLogLogPlus.merge(HyperLogLogPlus.Builder.build(cfiw.getHyperBytes()));
      }
 catch (      CardinalityMergeException e) {
        throw new RuntimeException(e);
      }
    }
    if (info.isNumeric() && binBoundaryList == null) {
      binBoundaryList=info.getBinBoundaries();
      binSize=binBoundaryList.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    if (!info.isNumeric() && binCategories == null) {
      binCategories=info.getBinCategories();
      binSize=binCategories.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    count+=info.getTotalCount();
    missingCount+=info.getMissingCount();
    sum+=info.getSum();
    squaredSum+=info.getSquaredSum();
    tripleSum+=info.getTripleSum();
    quarticSum+=info.getQuarticSum();
    if (Double.compare(max,info.getMax()) < 0) {
      max=info.getMax();
    }
    if (Double.compare(min,info.getMin()) > 0) {
      min=info.getMin();
    }
    for (int i=0; i < (binSize + 1); i++) {
      binCountPos[i]+=info.getBinCountPos()[i];
      binCountNeg[i]+=info.getBinCountNeg()[i];
      binWeightPos[i]+=info.getBinWeightPos()[i];
      binWeightNeg[i]+=info.getBinWeightNeg()[i];
    }
  }
  if (columnConfig.isCategorical() && modelConfig.getStats().getCateMaxNumBin() > 0) {
    CateBinningStats cateBinningStats=rebinCategoricalValues(new CateBinningStats(binCategories,binCountPos,binCountNeg,binWeightPos,binWeightNeg));
    LOG.info(""String_Node_Str"",columnConfig.getColumnName(),binCategories.size(),cateBinningStats.binCategories.size());
    binCategories=cateBinningStats.binCategories;
    binCountPos=cateBinningStats.binCountPos;
    binCountNeg=cateBinningStats.binCountNeg;
    binWeightPos=cateBinningStats.binWeightPos;
    binWeightNeg=cateBinningStats.binWeightNeg;
  }
  double[] binPosRate;
  if (modelConfig.isRegression()) {
    binPosRate=computePosRate(binCountPos,binCountNeg);
  }
 else {
    binPosRate=computeRateForMultiClassfication(binCountPos);
  }
  String binBounString=null;
  if (columnConfig.isCategorical()) {
    if (binCategories.size() < 0 || binCategories.size() > MAX_CATEGORICAL_BINC_COUNT) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binCategories.size());
      return;
    }
    binBounString=Base64Utils.base64Encode(""String_Node_Str"" + StringUtils.join(binCategories,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR) + ""String_Node_Str"");
    min=Double.MAX_VALUE;
    max=Double.MIN_VALUE;
    sum=0d;
    squaredSum=0d;
    for (int i=0; i < binPosRate.length; i++) {
      if (!Double.isNaN(binPosRate[i])) {
        if (Double.compare(max,binPosRate[i]) < 0) {
          max=binPosRate[i];
        }
        if (Double.compare(min,binPosRate[i]) > 0) {
          min=binPosRate[i];
        }
        long binCount=binCountPos[i] + binCountNeg[i];
        sum+=binPosRate[i] * binCount;
        double squaredVal=binPosRate[i] * binPosRate[i];
        squaredSum+=squaredVal * binCount;
        tripleSum+=squaredVal * binPosRate[i] * binCount;
        quarticSum+=squaredVal * squaredVal * binCount;
      }
    }
  }
 else {
    if (binBoundaryList.size() == 0) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binBoundaryList.size());
      return;
    }
    binBounString=binBoundaryList.toString();
  }
  ColumnMetrics columnCountMetrics=null;
  ColumnMetrics columnWeightMetrics=null;
  if (modelConfig.isRegression()) {
    columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
    columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  }
  long realCount=this.statsExcludeMissingValue ? (count - missingCount) : count;
  double mean=sum / realCount;
  double stdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / (realCount - 1)));
  double aStdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / realCount));
  double skewness=ColumnStatsCalculator.computeSkewness(realCount,mean,aStdDev,sum,squaredSum,tripleSum);
  double kurtosis=ColumnStatsCalculator.computeKurtosis(realCount,mean,aStdDev,sum,squaredSum,tripleSum,quarticSum);
  sb.append(key.get()).append(Constants.DEFAULT_DELIMITER).append(binBounString).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountPos)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(new double[0])).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binPosRate)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : df.format(columnCountMetrics.getKs())).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : df.format(columnCountMetrics.getIv())).append(Constants.DEFAULT_DELIMITER).append(df.format(max)).append(Constants.DEFAULT_DELIMITER).append(df.format(min)).append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(df.format(stdDev)).append(Constants.DEFAULT_DELIMITER).append(columnConfig.isCategorical() ? ""String_Node_Str"" : ""String_Node_Str"").append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(missingCount).append(Constants.DEFAULT_DELIMITER).append(count).append(Constants.DEFAULT_DELIMITER).append(missingCount * 1.0d / count).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightPos)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : columnCountMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getKs()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getIv()).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnCountMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnWeightMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(skewness).append(Constants.DEFAULT_DELIMITER).append(kurtosis).append(Constants.DEFAULT_DELIMITER).append(totalCount).append(Constants.DEFAULT_DELIMITER).append(invalidCount).append(Constants.DEFAULT_DELIMITER).append(validNumCount).append(Constants.DEFAULT_DELIMITER).append(hyperLogLogPlus.cardinality()).append(Constants.DEFAULT_DELIMITER).append(limitedFrequentItems(fis));
  outputValue.set(sb.toString());
  context.write(NullWritable.get(),outputValue);
  sb.delete(0,sb.length());
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}",0.9978540772532188
31734,"/** 
 * Do checkpoint for master states, this is for master fail over
 */
private void doCheckPoint(final MasterContext<DTMasterParams,DTWorkerParams> context,final DTMasterParams masterParams,int iteration){
  LOG.info(""String_Node_Str"",this.checkpointOutput,iteration);
  final Queue<TreeNode> finalTodoQueue=this.toDoQueue;
  final Queue<TreeNode> finalToSplitQueue=this.toSplitQueue;
  final boolean finalIsLeaf=this.isLeafWise;
  long start=System.currentTimeMillis();
  final List<TreeNode> finalTrees=new ArrayList<TreeNode>();
  for (  TreeNode treeNode : this.trees) {
    BytableSerializer<TreeNode> bs=new BytableSerializer<TreeNode>();
    byte[] bytes=bs.objectToBytes(treeNode);
    TreeNode newTreeNode=bs.bytesToObject(bytes,TreeNode.class.getName());
    finalTrees.add(newTreeNode);
  }
  LOG.info(""String_Node_Str"",context.getCurrentIteration(),(System.currentTimeMillis() - start));
  Thread cpPersistThread=new Thread(new Runnable(){
    @Override public void run(){
      writeStatesToHdfs(DTMaster.this.checkpointOutput,masterParams,finalTrees,finalIsLeaf,finalTodoQueue,finalToSplitQueue);
    }
  }
,""String_Node_Str"");
  cpPersistThread.setDaemon(true);
  cpPersistThread.start();
}","/** 
 * Do checkpoint for master states, this is for master fail over
 */
private void doCheckPoint(final MasterContext<DTMasterParams,DTWorkerParams> context,final DTMasterParams masterParams,int iteration){
  String intervalStr=context.getProps().getProperty(CommonConstants.SHIFU_TREE_CHECKPOINT_INTERVAL);
  int interval=50;
  try {
    interval=Integer.parseInt(intervalStr);
  }
 catch (  Exception ignore) {
  }
  if (iteration != 0 && iteration % interval != 0) {
    return;
  }
  LOG.info(""String_Node_Str"",this.checkpointOutput,iteration);
  final Queue<TreeNode> finalTodoQueue=this.toDoQueue;
  final Queue<TreeNode> finalToSplitQueue=this.toSplitQueue;
  final boolean finalIsLeaf=this.isLeafWise;
  long start=System.currentTimeMillis();
  final List<TreeNode> finalTrees=new ArrayList<TreeNode>();
  for (  TreeNode treeNode : this.trees) {
    BytableSerializer<TreeNode> bs=new BytableSerializer<TreeNode>();
    byte[] bytes=bs.objectToBytes(treeNode);
    TreeNode newTreeNode=bs.bytesToObject(bytes,TreeNode.class.getName());
    finalTrees.add(newTreeNode);
  }
  LOG.info(""String_Node_Str"",context.getCurrentIteration(),(System.currentTimeMillis() - start));
  Thread cpPersistThread=new Thread(new Runnable(){
    @Override public void run(){
      writeStatesToHdfs(DTMaster.this.checkpointOutput,masterParams,finalTrees,finalIsLeaf,finalTodoQueue,finalToSplitQueue);
    }
  }
,""String_Node_Str"");
  cpPersistThread.setDaemon(true);
  cpPersistThread.start();
}",0.8964749536178107
31735,"/** 
 * Rollup feature importance file to keep latest one and old ones.
 */
private void processRollupForFIFiles(String localFsFolder){
  try {
    FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(SourceType.LOCAL);
    if (!fs.isDirectory(new Path(localFsFolder))) {
      return;
    }
    FileStatus[] fss=fs.listStatus(new Path(localFsFolder));
    if (fss != null && fss.length > 0) {
      for (      FileStatus fileStatus : fss) {
        String strPath=fileStatus.getPath().getName();
        if (strPath.endsWith(PathFinder.FEATURE_IMPORTANCE_FILE)) {
          fs.rename(fileStatus.getPath(),new Path(fileStatus.getPath() + ""String_Node_Str""));
        }
 else         if (strPath.contains(PathFinder.FEATURE_IMPORTANCE_FILE)) {
          int lastDotIndex=strPath.lastIndexOf(""String_Node_Str"");
          String lastIndexStr=strPath.substring(lastDotIndex + 1,strPath.length());
          int index=Integer.parseInt(lastIndexStr);
          fs.rename(fileStatus.getPath(),new Path(fileStatus.getPath() + ""String_Node_Str"" + (index + 1)));
        }
      }
    }
  }
 catch (  Exception ignore) {
  }
}","/** 
 * Rollup feature importance file to keep latest one and old ones.
 */
private void processRollupForFIFiles(String localFsFolder,String fiFile){
  try {
    FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(SourceType.LOCAL);
    if (!fs.isDirectory(new Path(localFsFolder))) {
      return;
    }
    FileStatus[] fss=fs.listStatus(new Path(localFsFolder));
    Arrays.sort(fss,new Comparator<FileStatus>(){
      @Override public int compare(      FileStatus o1,      FileStatus o2){
        return o2.getPath().toString().compareTo(o1.getPath().toString());
      }
    }
);
    if (fss != null && fss.length > 0) {
      for (      FileStatus fileStatus : fss) {
        String strPath=fileStatus.getPath().getName();
        if (strPath.endsWith(PathFinder.FEATURE_IMPORTANCE_FILE)) {
          fs.rename(fileStatus.getPath(),new Path(fileStatus.getPath() + ""String_Node_Str""));
        }
 else         if (strPath.contains(PathFinder.FEATURE_IMPORTANCE_FILE)) {
          int lastDotIndex=strPath.lastIndexOf(""String_Node_Str"");
          String lastIndexStr=strPath.substring(lastDotIndex + 1,strPath.length());
          int index=Integer.parseInt(lastIndexStr);
          fs.rename(fileStatus.getPath(),new Path(fiFile + ""String_Node_Str"" + (index + 1)));
        }
      }
    }
  }
 catch (  Exception ignore) {
  }
}",0.8962148962148963
31736,"protected int runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  int status=0;
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  int candidateCount=inputOutputIndex[2];
  boolean isAfterVarSelect=(inputOutputIndex[0] != 0);
  List<Integer> allFeatures=CommonUtils.getAllFeatureList(this.columnConfigList,isAfterVarSelect);
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
 else       if (isKFoldCV) {
        LOG.info(""String_Node_Str"",i);
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      boolean isContinous=false;
      if (gs.hasHyperParam()) {
        isContinous=false;
      }
 else {
        int intContinuous=checkContinuousTraining(fileSystem,localArgs,modelPath,modelConfig.getTrain().getParams());
        if (intContinuous == -1) {
          LOG.warn(""String_Node_Str"",i);
          continue;
        }
 else {
          isContinous=(intContinuous == 1);
        }
      }
      if (gs.hasHyperParam() || isKFoldCV) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
        Map<String,Object> params=gs.hasHyperParam() ? gs.getParams(i) : this.modelConfig.getTrain().getParams();
        Object fssObj=params.get(""String_Node_Str"");
        FeatureSubsetStrategy featureSubsetStrategy=null;
        double featureSubsetRate=0d;
        if (fssObj != null) {
          try {
            featureSubsetRate=Double.parseDouble(fssObj.toString());
            featureSubsetStrategy=null;
          }
 catch (          NumberFormatException ee) {
            featureSubsetStrategy=FeatureSubsetStrategy.of(fssObj.toString());
          }
        }
 else {
          LOG.warn(""String_Node_Str"");
          featureSubsetStrategy=FeatureSubsetStrategy.ALL;
          featureSubsetRate=0;
        }
        Set<Integer> subFeatures=null;
        if (isContinous) {
          BasicFloatNetwork existingModel=(BasicFloatNetwork)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
          if (existingModel == null) {
            subFeatures=new HashSet<Integer>(getSubsamplingFeatures(allFeatures,featureSubsetStrategy,featureSubsetRate,inputNodeCount));
          }
 else {
            subFeatures=existingModel.getFeatureSet();
          }
        }
 else {
          subFeatures=new HashSet<Integer>(getSubsamplingFeatures(allFeatures,featureSubsetStrategy,featureSubsetRate,inputNodeCount));
        }
        if (subFeatures == null || subFeatures.size() == 0) {
          localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_NN_FEATURE_SUBSET,""String_Node_Str""));
        }
 else {
          localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_NN_FEATURE_SUBSET,StringUtils.join(subFeatures,',')));
          LOG.debug(""String_Node_Str"",subFeatures.size(),StringUtils.join(subFeatures,','));
        }
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      if (gs.hasHyperParam() || isKFoldCV) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
          status=1;
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isTreeModel(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
        List<BasicML> models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
        Map<Integer,MutablePair<String,Double>> featureImportances=CommonUtils.computeTreeModelFeatureImportance(models);
        String localFsFolder=pathFinder.getLocalFeatureImportanceFolder();
        processRollupForFIFiles(localFsFolder);
        CommonUtils.writeFeatureImportance(pathFinder.getLocalFeatureImportancePath(),featureImportances);
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
  if (status != 0) {
    LOG.error(""String_Node_Str"");
  }
  return status;
}","protected int runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  int status=0;
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  int candidateCount=inputOutputIndex[2];
  boolean isAfterVarSelect=(inputOutputIndex[0] != 0);
  List<Integer> allFeatures=CommonUtils.getAllFeatureList(this.columnConfigList,isAfterVarSelect);
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
 else       if (isKFoldCV) {
        LOG.info(""String_Node_Str"",i);
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      boolean isContinous=false;
      if (gs.hasHyperParam()) {
        isContinous=false;
      }
 else {
        int intContinuous=checkContinuousTraining(fileSystem,localArgs,modelPath,modelConfig.getTrain().getParams());
        if (intContinuous == -1) {
          LOG.warn(""String_Node_Str"",i);
          continue;
        }
 else {
          isContinous=(intContinuous == 1);
        }
      }
      if (gs.hasHyperParam() || isKFoldCV) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
        Map<String,Object> params=gs.hasHyperParam() ? gs.getParams(i) : this.modelConfig.getTrain().getParams();
        Object fssObj=params.get(""String_Node_Str"");
        FeatureSubsetStrategy featureSubsetStrategy=null;
        double featureSubsetRate=0d;
        if (fssObj != null) {
          try {
            featureSubsetRate=Double.parseDouble(fssObj.toString());
            featureSubsetStrategy=null;
          }
 catch (          NumberFormatException ee) {
            featureSubsetStrategy=FeatureSubsetStrategy.of(fssObj.toString());
          }
        }
 else {
          LOG.warn(""String_Node_Str"");
          featureSubsetStrategy=FeatureSubsetStrategy.ALL;
          featureSubsetRate=0;
        }
        Set<Integer> subFeatures=null;
        if (isContinous) {
          BasicFloatNetwork existingModel=(BasicFloatNetwork)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
          if (existingModel == null) {
            subFeatures=new HashSet<Integer>(getSubsamplingFeatures(allFeatures,featureSubsetStrategy,featureSubsetRate,inputNodeCount));
          }
 else {
            subFeatures=existingModel.getFeatureSet();
          }
        }
 else {
          subFeatures=new HashSet<Integer>(getSubsamplingFeatures(allFeatures,featureSubsetStrategy,featureSubsetRate,inputNodeCount));
        }
        if (subFeatures == null || subFeatures.size() == 0) {
          localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_NN_FEATURE_SUBSET,""String_Node_Str""));
        }
 else {
          localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_NN_FEATURE_SUBSET,StringUtils.join(subFeatures,',')));
          LOG.debug(""String_Node_Str"",subFeatures.size(),StringUtils.join(subFeatures,','));
        }
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      if (gs.hasHyperParam() || isKFoldCV) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
          status=1;
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isTreeModel(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
        List<BasicML> models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
        Map<Integer,MutablePair<String,Double>> featureImportances=CommonUtils.computeTreeModelFeatureImportance(models);
        String localFsFolder=pathFinder.getLocalFeatureImportanceFolder();
        String localFIPath=pathFinder.getLocalFeatureImportancePath();
        processRollupForFIFiles(localFsFolder,localFIPath);
        CommonUtils.writeFeatureImportance(localFIPath,featureImportances);
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
  if (status != 0) {
    LOG.error(""String_Node_Str"");
  }
  return status;
}",0.9949230649066624
31737,"@Override public LocalTransformations build(BasicML basicML){
  LocalTransformations localTransformations=new LocalTransformations();
  if (basicML instanceof BasicFloatNetwork) {
    BasicFloatNetwork bfn=(BasicFloatNetwork)basicML;
    Set<Integer> featureSet=bfn.getFeatureSet();
    for (    ColumnConfig config : columnConfigList) {
      if (config.isFinalSelect() && featureSet.contains(config.getColumnName())) {
        double cutoff=modelConfig.getNormalizeStdDevCutOff();
        localTransformations.withDerivedFields(config.isCategorical() ? createCategoricalDerivedField(config,cutoff,modelConfig.getNormalizeType()) : createNumericalDerivedField(config,cutoff,modelConfig.getNormalizeType()));
      }
    }
  }
 else {
    for (    ColumnConfig config : columnConfigList) {
      if (config.isFinalSelect()) {
        double cutoff=modelConfig.getNormalizeStdDevCutOff();
        localTransformations.withDerivedFields(config.isCategorical() ? createCategoricalDerivedField(config,cutoff,modelConfig.getNormalizeType()) : createNumericalDerivedField(config,cutoff,modelConfig.getNormalizeType()));
      }
    }
  }
  return localTransformations;
}","@Override public LocalTransformations build(BasicML basicML){
  LocalTransformations localTransformations=new LocalTransformations();
  if (basicML instanceof BasicFloatNetwork) {
    BasicFloatNetwork bfn=(BasicFloatNetwork)basicML;
    Set<Integer> featureSet=bfn.getFeatureSet();
    for (    ColumnConfig config : columnConfigList) {
      if (config.isFinalSelect() && (CollectionUtils.isEmpty(featureSet) || featureSet.contains(config.getColumnNum()))) {
        double cutoff=modelConfig.getNormalizeStdDevCutOff();
        localTransformations.withDerivedFields(config.isCategorical() ? createCategoricalDerivedField(config,cutoff,modelConfig.getNormalizeType()) : createNumericalDerivedField(config,cutoff,modelConfig.getNormalizeType()));
      }
    }
  }
 else {
    for (    ColumnConfig config : columnConfigList) {
      if (config.isFinalSelect()) {
        double cutoff=modelConfig.getNormalizeStdDevCutOff();
        localTransformations.withDerivedFields(config.isCategorical() ? createCategoricalDerivedField(config,cutoff,modelConfig.getNormalizeType()) : createNumericalDerivedField(config,cutoff,modelConfig.getNormalizeType()));
      }
    }
  }
  return localTransformations;
}",0.9797297297297296
31738,"public static void main(String[] args){
  List<String> cleanedArgsList=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      String keyValue=args[i].substring(2,args[i].length());
      int index=keyValue.indexOf(""String_Node_Str"");
      String key=keyValue.substring(0,index);
      String value=""String_Node_Str"";
      if (keyValue.length() >= index + 1) {
        value=keyValue.substring(index + 1,keyValue.length());
      }
      Environment.setProperty(key.trim(),value.trim());
      System.setProperty(key.trim(),value.trim());
      cleanedArgsList.add(args[i]);
    }
  }
  String[] cleanedArgs=cleanedArgsList.toArray(new String[0]);
  if (cleanedArgs.length < 1 || (isHelpOption(cleanedArgs[0]))) {
    printUsage();
    System.exit(cleanedArgs.length < 1 ? -1 : 0);
  }
  if (isVersionOption(cleanedArgs[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(cleanedArgs);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,cleanedArgs);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (cleanedArgs[0].equals(NEW) && cleanedArgs.length >= 2 && StringUtils.isNotEmpty(cleanedArgs[1])) {
      String modelName=cleanedArgs[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (cleanedArgs[0].equals(MODELSET_CMD_CP) && cleanedArgs.length >= 3 && StringUtils.isNotEmpty(cleanedArgs[1]) && StringUtils.isNotEmpty(cleanedArgs[2])) {
        String newModelSetName=cleanedArgs[2];
        copyModel(new String[]{cleanedArgs[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(STATS_CMD)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(StatsModelProcessor.IS_COMPUTE_CORR,cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str""));
        params.put(StatsModelProcessor.IS_REBIN,cmd.hasOption(REBIN));
        params.put(StatsModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(StatsModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(StatsModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(StatsModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=calModelStats(params);
        if (status == 0) {
          if (cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str"")) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(NORMALIZE_CMD) || cleanedArgs[0].equals(NORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(VARSELECT_CMD) || cleanedArgs[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET),cmd.hasOption(LIST));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG),cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(SAVE)) {
        String newModelSetName=cleanedArgs.length >= 2 ? cleanedArgs[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SWITCH)) {
        String newModelSetName=cleanedArgs[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (cleanedArgs[0].equals(EVAL_CMD)) {
        if (cleanedArgs.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(CMD_EXPORT)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(ExportModelProcessor.IS_CONCISE,cmd.hasOption(EXPORT_CONCISE));
        params.put(ExportModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(ExportModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(ExportModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(ExportModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),params);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}","public static void main(String[] args){
  List<String> cleanedArgsList=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      String keyValue=args[i].substring(2,args[i].length());
      int index=keyValue.indexOf(""String_Node_Str"");
      String key=keyValue.substring(0,index);
      String value=""String_Node_Str"";
      if (keyValue.length() >= index + 1) {
        value=keyValue.substring(index + 1,keyValue.length());
      }
      Environment.setProperty(key.trim(),value.trim());
      System.setProperty(key.trim(),value.trim());
    }
 else {
      cleanedArgsList.add(args[i]);
    }
  }
  String[] cleanedArgs=cleanedArgsList.toArray(new String[0]);
  if (cleanedArgs.length < 1 || (isHelpOption(cleanedArgs[0]))) {
    printUsage();
    System.exit(cleanedArgs.length < 1 ? -1 : 0);
  }
  if (isVersionOption(cleanedArgs[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(cleanedArgs);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,cleanedArgs);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (cleanedArgs[0].equals(NEW) && cleanedArgs.length >= 2 && StringUtils.isNotEmpty(cleanedArgs[1])) {
      String modelName=cleanedArgs[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (cleanedArgs[0].equals(MODELSET_CMD_CP) && cleanedArgs.length >= 3 && StringUtils.isNotEmpty(cleanedArgs[1]) && StringUtils.isNotEmpty(cleanedArgs[2])) {
        String newModelSetName=cleanedArgs[2];
        copyModel(new String[]{cleanedArgs[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(STATS_CMD)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(StatsModelProcessor.IS_COMPUTE_CORR,cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str""));
        params.put(StatsModelProcessor.IS_REBIN,cmd.hasOption(REBIN));
        params.put(StatsModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(StatsModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(StatsModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(StatsModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=calModelStats(params);
        if (status == 0) {
          if (cmd.hasOption(CORRELATION) || cmd.hasOption(""String_Node_Str"")) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(NORMALIZE_CMD) || cleanedArgs[0].equals(NORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(VARSELECT_CMD) || cleanedArgs[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET),cmd.hasOption(LIST));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG),cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (cleanedArgs[0].equals(SAVE)) {
        String newModelSetName=cleanedArgs.length >= 2 ? cleanedArgs[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SWITCH)) {
        String newModelSetName=cleanedArgs[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (cleanedArgs[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (cleanedArgs[0].equals(EVAL_CMD)) {
        if (cleanedArgs.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (cleanedArgs[0].equals(CMD_EXPORT)) {
        Map<String,Object> params=new HashMap<String,Object>();
        params.put(ExportModelProcessor.IS_CONCISE,cmd.hasOption(EXPORT_CONCISE));
        params.put(ExportModelProcessor.REQUEST_VARS,cmd.getOptionValue(VARS));
        params.put(ExportModelProcessor.EXPECTED_BIN_NUM,cmd.getOptionValue(N));
        params.put(ExportModelProcessor.IV_KEEP_RATIO,cmd.getOptionValue(IVR));
        params.put(ExportModelProcessor.MINIMUM_BIN_INST_CNT,cmd.getOptionValue(BIC));
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),params);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}",0.99917772818043
31739,"@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          List<String> catVals=CommonUtils.flattenCatValGrp(config.getBinCategory().get(i));
          for (          String cval : catVals) {
            tmpMap.put(config.getBinCategory().get(i),i);
          }
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0 && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()))) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),new ArrayList<Data>());
  }
 else {
    if (Double.compare(validationRate,0d) != 0) {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
      this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
    }
 else {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.isAfterVarSelect=(inputOutputIndex[3] == 1);
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(CommonConstants.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
    Object dropoutObj=validParams.get(CommonConstants.DROPOUT_RATE);
    if (dropoutObj != null) {
      this.dropOutRate=Double.valueOf(dropoutObj.toString());
    }
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation,this.dropOutRate);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}","@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          List<String> catVals=CommonUtils.flattenCatValGrp(config.getBinCategory().get(i));
          for (          String cval : catVals) {
            tmpMap.put(cval,i);
          }
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0 && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()))) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),new ArrayList<Data>());
  }
 else {
    if (Double.compare(validationRate,0d) != 0) {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
      this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
    }
 else {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.isAfterVarSelect=(inputOutputIndex[3] == 1);
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(CommonConstants.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
    Object dropoutObj=validParams.get(CommonConstants.DROPOUT_RATE);
    if (dropoutObj != null) {
      this.dropOutRate=Double.valueOf(dropoutObj.toString());
    }
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation,this.dropOutRate);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}",0.9979751961528728
31740,"/** 
 * Check some categorical value is in the categorical value group or not
 * @param binVal - categorical value group, the format is lik cn^us^uk^jp
 * @param cval - categorical value to look up
 * @return  true if the categorical value exists in group, else false
 */
public static boolean isCategoricalBinValue(String binVal,String cval){
  return binVal.equals(cval) ? true : CommonUtils.flattenCatValGrp(binVal).contains(cval);
}","/** 
 * Check some categorical value is in the categorical value group or not
 * @param binVal - categorical value group, the format is lik cn^us^uk^jp
 * @param cval - categorical value to look up
 * @return true if the categorical value exists in group, else false
 */
public static boolean isCategoricalBinValue(String binVal,String cval){
  return binVal.equals(cval) ? true : CommonUtils.flattenCatValGrp(binVal).contains(cval);
}",0.9988518943742823
31741,"/** 
 * Find the @ColumnConfig according the column name
 * @param columnConfigList list of column config
 * @param columnName the column name
 * @return column config instance
 */
public static ColumnConfig findColumnConfigByName(List<ColumnConfig> columnConfigList,String columnName){
  for (  ColumnConfig columnConfig : columnConfigList) {
    if (columnConfig.getColumnName().equalsIgnoreCase(columnName)) {
      return columnConfig;
    }
  }
  return null;
}","/** 
 * Find the @ColumnConfig according the column name
 * @param columnConfigList list of column config
 * @param columnName the column name
 * @return column config instance
 */
public static ColumnConfig findColumnConfigByName(List<ColumnConfig> columnConfigList,String columnName){
  for (  ColumnConfig columnConfig : columnConfigList) {
    if (NSColumnUtils.isColumnEqual(columnConfig.getColumnName(),columnName)) {
      return columnConfig;
    }
  }
  return null;
}",0.9501590668080594
31742,"private void writeModelToFileSystem(List<TreeNode> trees,Path out){
  DataOutputStream fos=null;
  try {
    fos=new DataOutputStream(new GZIPOutputStream(FileSystem.get(new Configuration()).create(out)));
    LOG.info(""String_Node_Str"",trees.size(),out);
    fos.writeInt(CommonConstants.TREE_FORMAT_VERSION);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(this.validParams.get(""String_Node_Str"").toString());
    fos.writeBoolean(this.modelConfig.isClassification());
    fos.writeBoolean(this.modelConfig.getTrain().isOneVsAll());
    fos.writeInt(this.inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      }
      if (columnConfig.isCategorical() && CollectionUtils.isNotEmpty(columnConfig.getBinCategory())) {
        List<String> binCatVals=new ArrayList<String>();
        for (        String catGrp : columnConfig.getBinCategory()) {
          binCatVals.addAll(CommonUtils.flattenCatValGrp(catGrp));
        }
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),binCatVals);
      }
      if (columnConfig.isNumerical() && columnConfig.getMean() != null) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    if (columnIndexNameMapping.size() == 0) {
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CommonUtils.isGoodCandidate(columnConfig)) {
          columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
        }
      }
    }
    fos.writeInt(numericalMeanMapping.size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue() == null ? 0d : entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      List<String> categories=entry.getValue();
      if (categories != null) {
        fos.writeInt(entry.getKey());
        fos.writeInt(categories.size());
        for (        String category : categories) {
          fos.writeUTF(category);
        }
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping();
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    int treeLength=trees.size();
    fos.writeInt(treeLength);
    for (    TreeNode treeNode : trees) {
      treeNode.write(fos);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}","private void writeModelToFileSystem(List<TreeNode> trees,Path out){
  DataOutputStream fos=null;
  try {
    fos=new DataOutputStream(new GZIPOutputStream(FileSystem.get(new Configuration()).create(out)));
    LOG.info(""String_Node_Str"",trees.size(),out);
    fos.writeInt(CommonConstants.TREE_FORMAT_VERSION);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(this.validParams.get(""String_Node_Str"").toString());
    fos.writeBoolean(this.modelConfig.isClassification());
    fos.writeBoolean(this.modelConfig.getTrain().isOneVsAll());
    fos.writeInt(this.inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      }
      if (columnConfig.isCategorical() && CollectionUtils.isNotEmpty(columnConfig.getBinCategory())) {
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),columnConfig.getBinCategory());
      }
      if (columnConfig.isNumerical() && columnConfig.getMean() != null) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    if (columnIndexNameMapping.size() == 0) {
      for (      ColumnConfig columnConfig : this.columnConfigList) {
        if (CommonUtils.isGoodCandidate(columnConfig)) {
          columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
        }
      }
    }
    fos.writeInt(numericalMeanMapping.size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue() == null ? 0d : entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      List<String> categories=entry.getValue();
      if (categories != null) {
        fos.writeInt(entry.getKey());
        fos.writeInt(categories.size());
        for (        String category : categories) {
          fos.writeUTF(category);
        }
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping();
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    int treeLength=trees.size();
    fos.writeInt(treeLength);
    for (    TreeNode treeNode : trees) {
      treeNode.write(fos);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}",0.9518466573165032
31743,"private double[] convertDataMapToDoubleArray(Map<String,Object> dataMap){
  double[] data=new double[this.columnNumIndexMapping.size()];
  for (  Entry<Integer,Integer> entry : this.columnNumIndexMapping.entrySet()) {
    double value=0d;
    Integer columnNum=entry.getKey();
    String columnName=this.numNameMapping.get(columnNum);
    Object obj=dataMap.get(columnName);
    if (this.categoricalColumnNameNames.containsKey(columnNum)) {
      double indexValue=-1d;
      int categoricalSize=categoricalColumnNameNames.get(columnNum).size();
      if (obj == null) {
        indexValue=categoricalSize;
      }
 else {
        if (obj instanceof Number) {
          indexValue=((Number)obj).doubleValue();
        }
 else {
          Integer intIndex=columnCategoryIndexMapping.get(columnNum).get(obj.toString());
          if (intIndex == null || intIndex < 0 || intIndex >= categoricalSize) {
            intIndex=categoricalSize;
          }
          indexValue=intIndex * 1d;
        }
      }
      value=indexValue;
    }
 else {
      if (obj == null) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
 else {
        if (obj instanceof Number) {
          value=((Number)obj).doubleValue();
        }
 else {
          try {
            value=Double.parseDouble(obj.toString());
          }
 catch (          NumberFormatException e) {
            value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
          }
        }
      }
      if (Double.isNaN(value)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
    }
    Integer index=entry.getValue();
    if (index != null && index < data.length) {
      data[index]=value;
    }
  }
  return data;
}","private double[] convertDataMapToDoubleArray(Map<String,Object> dataMap){
  double[] data=new double[this.columnNumIndexMapping.size()];
  for (  Entry<Integer,Integer> entry : this.columnNumIndexMapping.entrySet()) {
    double value=0d;
    Integer columnNum=entry.getKey();
    String columnName=this.numNameMapping.get(columnNum);
    Object obj=dataMap.get(columnName);
    if (this.categoricalColumnNameNames.containsKey(columnNum)) {
      double indexValue=-1d;
      int categoricalSize=categoricalColumnNameNames.get(columnNum).size();
      if (obj == null) {
        indexValue=categoricalSize;
      }
 else {
        if (obj instanceof Number) {
          indexValue=((Number)obj).doubleValue();
        }
 else {
          Integer intIndex=columnCategoryIndexMapping.get(columnNum).get(obj.toString());
          if (intIndex == null || intIndex < 0 || intIndex >= categoricalSize) {
            intIndex=categoricalSize;
          }
          indexValue=intIndex;
        }
      }
      value=indexValue;
    }
 else {
      if (obj == null) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
 else {
        if (obj instanceof Number) {
          value=((Number)obj).doubleValue();
        }
 else {
          try {
            value=Double.parseDouble(obj.toString());
          }
 catch (          NumberFormatException e) {
            value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
          }
        }
      }
      if (Double.isNaN(value)) {
        value=this.numericalMeanMapping.get(columnNum) == null ? 0d : this.numericalMeanMapping.get(columnNum);
      }
    }
    Integer index=entry.getValue();
    if (index != null && index < data.length) {
      data[index]=value;
    }
  }
  return data;
}",0.9986548291633036
31744,"/** 
 * Load model instance from stream like model0.gbt or model0.rf. User can specify to use raw score or score after sigmoid transfrom by isConvertToProb.
 * @param input the input stream
 * @param isConvertToProb if convert score to probability (if to transfrom raw score by sigmoid)
 * @return the tree model instance
 * @throws IOException any exception in load input stream
 */
public static IndependentTreeModel loadFromStream(InputStream input,boolean isConvertToProb) throws IOException {
  DataInputStream dis=null;
  try {
    byte[] header=new byte[2];
    BufferedInputStream bis=new BufferedInputStream(input);
    bis.mark(2);
    int result=bis.read(header);
    bis.reset();
    int ss=(header[0] & 0xff) | ((header[1] & 0xff) << 8);
    if (result != -1 && ss == GZIPInputStream.GZIP_MAGIC) {
      dis=new DataInputStream(new GZIPInputStream(bis));
    }
 else {
      dis=new DataInputStream(bis);
    }
  }
 catch (  java.io.IOException e) {
    dis=new DataInputStream(input);
  }
  int version=dis.readInt();
  String algorithm=dis.readUTF();
  String lossStr=dis.readUTF();
  boolean isClassification=dis.readBoolean();
  boolean isOneVsAll=dis.readBoolean();
  int inputNode=dis.readInt();
  Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
  Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
  int size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    double mean=dis.readDouble();
    numericalMeanMapping.put(columnIndex,mean);
  }
  size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    String columnName=dis.readUTF();
    columnIndexNameMapping.put(columnIndex,columnName);
  }
  Map<Integer,List<String>> categoricalColumnNameNames=new HashMap<Integer,List<String>>();
  Map<Integer,Map<String,Integer>> columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    int categoryListSize=dis.readInt();
    Map<String,Integer> categoryIndexMapping=new HashMap<String,Integer>();
    List<String> categories=new ArrayList<String>();
    for (int j=0; j < categoryListSize; j++) {
      String category=dis.readUTF();
      categoryIndexMapping.put(category,j);
      categories.add(category);
    }
    categoricalColumnNameNames.put(columnIndex,categories);
    columnCategoryIndexMapping.put(columnIndex,categoryIndexMapping);
  }
  Map<Integer,Integer> columnMapping=new HashMap<Integer,Integer>();
  int columnMappingSize=dis.readInt();
  for (int i=0; i < columnMappingSize; i++) {
    columnMapping.put(dis.readInt(),dis.readInt());
  }
  int treeNum=dis.readInt();
  List<TreeNode> trees=new ArrayList<TreeNode>(treeNum);
  List<Double> weights=new ArrayList<Double>(treeNum);
  for (int i=0; i < treeNum; i++) {
    TreeNode treeNode=new TreeNode();
    treeNode.readFields(dis);
    trees.add(treeNode);
    weights.add(treeNode.getLearningRate());
  }
  return new IndependentTreeModel(numericalMeanMapping,columnIndexNameMapping,categoricalColumnNameNames,columnCategoryIndexMapping,columnMapping,trees,weights,CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(algorithm),isClassification && !isOneVsAll,isConvertToProb,lossStr,algorithm,inputNode,version);
}","/** 
 * Load model instance from stream like model0.gbt or model0.rf. User can specify to use raw score or score after sigmoid transfrom by isConvertToProb.
 * @param input the input stream
 * @param isConvertToProb if convert score to probability (if to transfrom raw score by sigmoid)
 * @return the tree model instance
 * @throws IOException any exception in load input stream
 */
public static IndependentTreeModel loadFromStream(InputStream input,boolean isConvertToProb) throws IOException {
  DataInputStream dis=null;
  try {
    byte[] header=new byte[2];
    BufferedInputStream bis=new BufferedInputStream(input);
    bis.mark(2);
    int result=bis.read(header);
    bis.reset();
    int ss=(header[0] & 0xff) | ((header[1] & 0xff) << 8);
    if (result != -1 && ss == GZIPInputStream.GZIP_MAGIC) {
      dis=new DataInputStream(new GZIPInputStream(bis));
    }
 else {
      dis=new DataInputStream(bis);
    }
  }
 catch (  java.io.IOException e) {
    dis=new DataInputStream(input);
  }
  int version=dis.readInt();
  String algorithm=dis.readUTF();
  String lossStr=dis.readUTF();
  boolean isClassification=dis.readBoolean();
  boolean isOneVsAll=dis.readBoolean();
  int inputNode=dis.readInt();
  Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
  Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
  int size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    double mean=dis.readDouble();
    numericalMeanMapping.put(columnIndex,mean);
  }
  size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    String columnName=dis.readUTF();
    columnIndexNameMapping.put(columnIndex,columnName);
  }
  Map<Integer,List<String>> categoricalColumnNameNames=new HashMap<Integer,List<String>>();
  Map<Integer,Map<String,Integer>> columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  size=dis.readInt();
  for (int i=0; i < size; i++) {
    int columnIndex=dis.readInt();
    int categoryListSize=dis.readInt();
    Map<String,Integer> categoryIndexMapping=new HashMap<String,Integer>();
    List<String> categories=new ArrayList<String>();
    for (int j=0; j < categoryListSize; j++) {
      String category=dis.readUTF();
      categories.add(category);
      if (category.contains(""String_Node_Str"" + MERGE_CATEGORY_DELIMITER)) {
        String[] splits=split(category,MERGE_CATEGORY_DELIMITER);
        for (        String str : splits) {
          categoryIndexMapping.put(str,j);
        }
      }
 else {
        categoryIndexMapping.put(category,j);
      }
    }
    categoricalColumnNameNames.put(columnIndex,categories);
    columnCategoryIndexMapping.put(columnIndex,categoryIndexMapping);
  }
  Map<Integer,Integer> columnMapping=new HashMap<Integer,Integer>();
  int columnMappingSize=dis.readInt();
  for (int i=0; i < columnMappingSize; i++) {
    columnMapping.put(dis.readInt(),dis.readInt());
  }
  int treeNum=dis.readInt();
  List<TreeNode> trees=new ArrayList<TreeNode>(treeNum);
  List<Double> weights=new ArrayList<Double>(treeNum);
  for (int i=0; i < treeNum; i++) {
    TreeNode treeNode=new TreeNode();
    treeNode.readFields(dis);
    trees.add(treeNode);
    weights.add(treeNode.getLearningRate());
  }
  return new IndependentTreeModel(numericalMeanMapping,columnIndexNameMapping,categoricalColumnNameNames,columnCategoryIndexMapping,columnMapping,trees,weights,CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(algorithm),isClassification && !isOneVsAll,isConvertToProb,lossStr,algorithm,inputNode,version);
}",0.9542691751085384
31745,"private List<CategoricalBinInfo> loadTestData() throws IOException {
  List<String> lines=IOUtils.readLines(DynamicCategoricalBinTest.class.getResourceAsStream(""String_Node_Str""));
  String[] categories=lines.get(0).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim().split(""String_Node_Str"");
  String[] binPosCounts=lines.get(2).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim().split(""String_Node_Str"");
  String[] binNegCounts=lines.get(1).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim().split(""String_Node_Str"");
  String[] positiveRates=lines.get(3).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim().split(""String_Node_Str"");
  List<CategoricalBinInfo> categoricalBinInfos=new ArrayList<CategoricalBinInfo>();
  for (int i=0; i < categories.length; i++) {
    CategoricalBinInfo binInfo=new CategoricalBinInfo();
    List<String> values=new ArrayList<String>();
    values.add(categories[i].trim());
    binInfo.setValues(values);
    binInfo.setPositiveCnt(Long.parseLong(binPosCounts[i].trim()));
    binInfo.setNegativeCnt(Long.parseLong(binNegCounts[i].trim()));
    categoricalBinInfos.add(binInfo);
  }
  return categoricalBinInfos;
}","private List<CategoricalBinInfo> loadTestData() throws IOException {
  List<String> lines=IOUtils.readLines(DynamicCategoricalBinTest.class.getResourceAsStream(""String_Node_Str""));
  String[] categories=lines.get(0).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim().split(""String_Node_Str"");
  String[] binPosCounts=lines.get(2).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim().split(""String_Node_Str"");
  String[] binNegCounts=lines.get(1).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim().split(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") String[] positiveRates=lines.get(3).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim().split(""String_Node_Str"");
  List<CategoricalBinInfo> categoricalBinInfos=new ArrayList<CategoricalBinInfo>();
  for (int i=0; i < categories.length; i++) {
    CategoricalBinInfo binInfo=new CategoricalBinInfo();
    List<String> values=new ArrayList<String>();
    values.add(categories[i].trim());
    binInfo.setValues(values);
    binInfo.setPositiveCnt(Long.parseLong(binPosCounts[i].trim()));
    binInfo.setNegativeCnt(Long.parseLong(binNegCounts[i].trim()));
    categoricalBinInfos.add(binInfo);
  }
  return categoricalBinInfos;
}",0.988205291679949
31746,"@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          tmpMap.put(config.getBinCategory().get(i),i);
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0 && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()))) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),new ArrayList<Data>());
  }
 else {
    if (Double.compare(validationRate,0d) != 0) {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
      this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
    }
 else {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.isAfterVarSelect=(inputOutputIndex[3] == 1);
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(CommonConstants.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
    this.dropOutRate=Double.valueOf(validParams.get(CommonConstants.DROPOUT_RATE).toString());
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation,this.dropOutRate);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}","@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          tmpMap.put(config.getBinCategory().get(i),i);
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0 && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()))) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),new ArrayList<Data>());
  }
 else {
    if (Double.compare(validationRate,0d) != 0) {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
      this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
    }
 else {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.isAfterVarSelect=(inputOutputIndex[3] == 1);
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(CommonConstants.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
    Object dropoutObj=validParams.get(CommonConstants.DROPOUT_RATE);
    if (dropoutObj != null) {
      this.dropOutRate=Double.valueOf(dropoutObj.toString());
    }
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation,this.dropOutRate);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}",0.98989898989899
31747,"@Override public DTWorkerParams doCompute(WorkerContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return new DTWorkerParams();
  }
  DTMasterParams lastMasterResult=context.getLastMasterResult();
  final List<TreeNode> trees=lastMasterResult.getTrees();
  final Map<Integer,TreeNode> todoNodes=lastMasterResult.getTodoNodes();
  if (todoNodes == null) {
    return new DTWorkerParams();
  }
  Map<Integer,NodeStats> statistics=initTodoNodeStats(todoNodes);
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  if (this.isGBDT && !this.gbdtSampleWithReplacement && lastMasterResult.isSwitchToNextTree()) {
    this.baggingRandomMap=new HashMap<Integer,Random>();
  }
  long start=System.nanoTime();
  for (  Data data : this.trainingData) {
    if (this.isRF) {
      for (      TreeNode treeNode : trees) {
        if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
          continue;
        }
        Node predictNode=predictNodeIndex(treeNode.getNode(),data,true);
        if (predictNode.getPredict() != null) {
          float weight=data.subsampleWeights[treeNode.getTreeId()];
          if (Float.compare(weight,0f) == 0) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
 else {
            trainError+=weight * data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=weight * data.significance;
          }
        }
      }
    }
    if (this.isGBDT) {
      if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
        recoverGBTData(context,data.output,data.predict,data,false);
        trainError+=data.significance * loss.computeError(data.predict,data.label);
        weightedTrainCount+=data.significance;
      }
 else {
        if (isNeedRecoverGBDTPredict) {
          if (this.recoverTrees == null) {
            this.recoverTrees=recoverCurrentTrees();
          }
          recoverGBTData(context,data.output,data.predict,data,true);
        }
        int currTreeIndex=trees.size() - 1;
        if (lastMasterResult.isSwitchToNextTree()) {
          if (currTreeIndex >= 1) {
            Node node=trees.get(currTreeIndex - 1).getNode();
            Node predictNode=predictNodeIndex(node,data,false);
            if (predictNode.getPredict() != null) {
              double predict=predictNode.getPredict().getPredict();
              if (context.getLastMasterResult().isFirstTree()) {
                data.predict=(float)predict;
              }
 else {
                boolean drop=(this.dropOutRate > 0.0 && rand.nextDouble() < this.dropOutRate);
                if (!drop) {
                  data.predict+=(float)(this.learningRate * predict);
                }
              }
              data.output=-1f * loss.computeGradient(data.predict,data.label);
            }
            if (!this.gbdtSampleWithReplacement) {
              Random random=null;
              int classValue=(int)(data.label + 0.01f);
              if (this.isStratifiedSampling) {
                random=baggingRandomMap.get(classValue);
                if (random == null) {
                  random=new Random();
                  baggingRandomMap.put(classValue,random);
                }
              }
 else {
                random=baggingRandomMap.get(0);
                if (random == null) {
                  random=new Random();
                  baggingRandomMap.put(0,random);
                }
              }
              if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
              }
 else {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
              }
            }
          }
        }
        if (context.getLastMasterResult().isFirstTree() && !lastMasterResult.isSwitchToNextTree()) {
          Node currTree=trees.get(currTreeIndex).getNode();
          Node predictNode=predictNodeIndex(currTree,data,true);
          if (predictNode.getPredict() != null) {
            trainError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=data.significance;
          }
        }
 else {
          trainError+=data.significance * loss.computeError(data.predict,data.label);
          weightedTrainCount+=data.significance;
        }
      }
    }
  }
  LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
  if (validationData != null) {
    start=System.nanoTime();
    for (    Data data : this.validationData) {
      if (this.isRF) {
        for (        TreeNode treeNode : trees) {
          if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
            continue;
          }
          Node predictNode=predictNodeIndex(treeNode.getNode(),data,true);
          if (predictNode.getPredict() != null) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
      if (this.isGBDT) {
        if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
          recoverGBTData(context,data.output,data.predict,data,false);
          validationError+=data.significance * loss.computeError(data.predict,data.label);
          weightedValidationCount+=data.significance;
        }
 else {
          if (isNeedRecoverGBDTPredict) {
            if (this.recoverTrees == null) {
              this.recoverTrees=recoverCurrentTrees();
            }
            recoverGBTData(context,data.output,data.predict,data,true);
          }
          int currTreeIndex=trees.size() - 1;
          if (lastMasterResult.isSwitchToNextTree()) {
            if (currTreeIndex >= 1) {
              Node node=trees.get(currTreeIndex - 1).getNode();
              Node predictNode=predictNodeIndex(node,data,false);
              if (predictNode.getPredict() != null) {
                double predict=predictNode.getPredict().getPredict();
                if (context.getLastMasterResult().isFirstTree()) {
                  data.predict=(float)predict;
                }
 else {
                  data.predict+=(float)(this.learningRate * predict);
                }
                data.output=-1f * loss.computeGradient(data.predict,data.label);
              }
            }
          }
          if (context.getLastMasterResult().isFirstTree() && !lastMasterResult.isSwitchToNextTree()) {
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,true);
            if (predictNode.getPredict() != null) {
              validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
              weightedValidationCount+=data.significance;
            }
          }
 else {
            validationError+=data.significance * loss.computeError(data.predict,data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
    }
    LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
  }
  if (this.isGBDT) {
    this.recoverTrees=null;
    if (this.isNeedRecoverGBDTPredict) {
      this.isNeedRecoverGBDTPredict=false;
    }
  }
  if (this.isGBDT && this.isNeedRecoverGBDTPredict) {
    this.isNeedRecoverGBDTPredict=false;
  }
  start=System.nanoTime();
  CompletionService<Map<Integer,NodeStats>> completionService=new ExecutorCompletionService<Map<Integer,NodeStats>>(this.threadPool);
  Set<Entry<Integer,TreeNode>> treeNodeEntrySet=todoNodes.entrySet();
  Iterator<Entry<Integer,TreeNode>> treeNodeIterator=treeNodeEntrySet.iterator();
  int roundNodeNumer=treeNodeEntrySet.size() / this.workerThreadCount;
  int modeNodeNumber=treeNodeEntrySet.size() % this.workerThreadCount;
  int realThreadCount=0;
  LOG.debug(""String_Node_Str"",todoNodes.size());
  for (int i=0; i < this.workerThreadCount; i++) {
    final Map<Integer,TreeNode> localTodoNodes=new HashMap<Integer,TreeNode>();
    final Map<Integer,NodeStats> localStatistics=new HashMap<Integer,DTWorkerParams.NodeStats>();
    for (int j=0; j < roundNodeNumer; j++) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
    }
    if (modeNodeNumber > 0) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
      modeNodeNumber-=1;
    }
    LOG.info(""String_Node_Str"",i,localTodoNodes.size(),localStatistics.size());
    if (localTodoNodes.size() == 0) {
      continue;
    }
    realThreadCount+=1;
    completionService.submit(new Callable<Map<Integer,NodeStats>>(){
      @Override public Map<Integer,NodeStats> call() throws Exception {
        List<Integer> nodeIndexes=new ArrayList<Integer>(trees.size());
        for (        Data data : DTWorker.this.trainingData) {
          nodeIndexes.clear();
          if (DTWorker.this.isRF) {
            for (            TreeNode treeNode : trees) {
              if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
                nodeIndexes.add(Node.INVALID_INDEX);
              }
 else {
                Node predictNode=predictNodeIndex(treeNode.getNode(),data,false);
                nodeIndexes.add(predictNode.getId());
              }
            }
          }
          if (DTWorker.this.isGBDT) {
            int currTreeIndex=trees.size() - 1;
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,false);
            nodeIndexes.add(predictNode.getId());
          }
          for (          Map.Entry<Integer,TreeNode> entry : localTodoNodes.entrySet()) {
            Node todoNode=entry.getValue().getNode();
            int treeId=entry.getValue().getTreeId();
            int currPredictIndex=0;
            if (DTWorker.this.isRF) {
              currPredictIndex=nodeIndexes.get(entry.getValue().getTreeId());
            }
            if (DTWorker.this.isGBDT) {
              currPredictIndex=nodeIndexes.get(0);
            }
            if (todoNode.getId() == currPredictIndex) {
              List<Integer> features=entry.getValue().getFeatures();
              if (features.isEmpty()) {
                features=getAllValidFeatures();
              }
              for (              Integer columnNum : features) {
                double[] featuerStatistic=localStatistics.get(entry.getKey()).getFeatureStatistics().get(columnNum);
                float weight=data.subsampleWeights[treeId % data.subsampleWeights.length];
                if (Float.compare(weight,0f) != 0) {
                  short binIndex=data.inputs[DTWorker.this.inputIndexMap.get(columnNum)];
                  DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
                }
              }
            }
          }
        }
        return localStatistics;
      }
    }
);
  }
  int rCnt=0;
  while (rCnt < realThreadCount) {
    try {
      statistics.putAll(completionService.take().get());
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    rCnt+=1;
  }
  LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
  LOG.info(""String_Node_Str"",count,trainError,statistics.size(),weightedTrainCount,weightedValidationCount,trainError,validationError);
  return new DTWorkerParams(weightedTrainCount,weightedValidationCount,trainError,validationError,statistics);
}","@Override public DTWorkerParams doCompute(WorkerContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return new DTWorkerParams();
  }
  DTMasterParams lastMasterResult=context.getLastMasterResult();
  final List<TreeNode> trees=lastMasterResult.getTrees();
  final Map<Integer,TreeNode> todoNodes=lastMasterResult.getTodoNodes();
  if (todoNodes == null) {
    return new DTWorkerParams();
  }
  Map<Integer,NodeStats> statistics=initTodoNodeStats(todoNodes);
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  if (this.isGBDT && !this.gbdtSampleWithReplacement && lastMasterResult.isSwitchToNextTree()) {
    this.baggingRandomMap=new HashMap<Integer,Random>();
  }
  long start=System.nanoTime();
  for (  Data data : this.trainingData) {
    if (this.isRF) {
      for (      TreeNode treeNode : trees) {
        if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
          continue;
        }
        Node predictNode=predictNodeIndex(treeNode.getNode(),data,true);
        if (predictNode.getPredict() != null) {
          float weight=data.subsampleWeights[treeNode.getTreeId()];
          if (Float.compare(weight,0f) == 0) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
 else {
            trainError+=weight * data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=weight * data.significance;
          }
        }
      }
    }
    if (this.isGBDT) {
      if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
        recoverGBTData(context,data.output,data.predict,data,false);
        trainError+=data.significance * loss.computeError(data.predict,data.label);
        weightedTrainCount+=data.significance;
      }
 else {
        if (isNeedRecoverGBDTPredict) {
          if (this.recoverTrees == null) {
            this.recoverTrees=recoverCurrentTrees();
          }
          recoverGBTData(context,data.output,data.predict,data,true);
        }
        int currTreeIndex=trees.size() - 1;
        if (lastMasterResult.isSwitchToNextTree()) {
          if (currTreeIndex >= 1) {
            Node node=trees.get(currTreeIndex - 1).getNode();
            Node predictNode=predictNodeIndex(node,data,false);
            if (predictNode.getPredict() != null) {
              double predict=predictNode.getPredict().getPredict();
              if (context.getLastMasterResult().isFirstTree()) {
                data.predict=(float)predict;
              }
 else {
                boolean drop=(this.dropOutRate > 0.0 && dropOutRandom.nextDouble() < this.dropOutRate);
                if (!drop) {
                  data.predict+=(float)(this.learningRate * predict);
                }
              }
              data.output=-1f * loss.computeGradient(data.predict,data.label);
            }
            if (!this.gbdtSampleWithReplacement) {
              Random random=null;
              int classValue=(int)(data.label + 0.01f);
              if (this.isStratifiedSampling) {
                random=baggingRandomMap.get(classValue);
                if (random == null) {
                  random=new Random();
                  baggingRandomMap.put(classValue,random);
                }
              }
 else {
                random=baggingRandomMap.get(0);
                if (random == null) {
                  random=new Random();
                  baggingRandomMap.put(0,random);
                }
              }
              if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
              }
 else {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
              }
            }
          }
        }
        if (context.getLastMasterResult().isFirstTree() && !lastMasterResult.isSwitchToNextTree()) {
          Node currTree=trees.get(currTreeIndex).getNode();
          Node predictNode=predictNodeIndex(currTree,data,true);
          if (predictNode.getPredict() != null) {
            trainError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=data.significance;
          }
        }
 else {
          trainError+=data.significance * loss.computeError(data.predict,data.label);
          weightedTrainCount+=data.significance;
        }
      }
    }
  }
  LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
  if (validationData != null) {
    start=System.nanoTime();
    for (    Data data : this.validationData) {
      if (this.isRF) {
        for (        TreeNode treeNode : trees) {
          if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
            continue;
          }
          Node predictNode=predictNodeIndex(treeNode.getNode(),data,true);
          if (predictNode.getPredict() != null) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
      if (this.isGBDT) {
        if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
          recoverGBTData(context,data.output,data.predict,data,false);
          validationError+=data.significance * loss.computeError(data.predict,data.label);
          weightedValidationCount+=data.significance;
        }
 else {
          if (isNeedRecoverGBDTPredict) {
            if (this.recoverTrees == null) {
              this.recoverTrees=recoverCurrentTrees();
            }
            recoverGBTData(context,data.output,data.predict,data,true);
          }
          int currTreeIndex=trees.size() - 1;
          if (lastMasterResult.isSwitchToNextTree()) {
            if (currTreeIndex >= 1) {
              Node node=trees.get(currTreeIndex - 1).getNode();
              Node predictNode=predictNodeIndex(node,data,false);
              if (predictNode.getPredict() != null) {
                double predict=predictNode.getPredict().getPredict();
                if (context.getLastMasterResult().isFirstTree()) {
                  data.predict=(float)predict;
                }
 else {
                  data.predict+=(float)(this.learningRate * predict);
                }
                data.output=-1f * loss.computeGradient(data.predict,data.label);
              }
            }
          }
          if (context.getLastMasterResult().isFirstTree() && !lastMasterResult.isSwitchToNextTree()) {
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,true);
            if (predictNode.getPredict() != null) {
              validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
              weightedValidationCount+=data.significance;
            }
          }
 else {
            validationError+=data.significance * loss.computeError(data.predict,data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
    }
    LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
  }
  if (this.isGBDT) {
    this.recoverTrees=null;
    if (this.isNeedRecoverGBDTPredict) {
      this.isNeedRecoverGBDTPredict=false;
    }
  }
  if (this.isGBDT && this.isNeedRecoverGBDTPredict) {
    this.isNeedRecoverGBDTPredict=false;
  }
  start=System.nanoTime();
  CompletionService<Map<Integer,NodeStats>> completionService=new ExecutorCompletionService<Map<Integer,NodeStats>>(this.threadPool);
  Set<Entry<Integer,TreeNode>> treeNodeEntrySet=todoNodes.entrySet();
  Iterator<Entry<Integer,TreeNode>> treeNodeIterator=treeNodeEntrySet.iterator();
  int roundNodeNumer=treeNodeEntrySet.size() / this.workerThreadCount;
  int modeNodeNumber=treeNodeEntrySet.size() % this.workerThreadCount;
  int realThreadCount=0;
  LOG.debug(""String_Node_Str"",todoNodes.size());
  for (int i=0; i < this.workerThreadCount; i++) {
    final Map<Integer,TreeNode> localTodoNodes=new HashMap<Integer,TreeNode>();
    final Map<Integer,NodeStats> localStatistics=new HashMap<Integer,DTWorkerParams.NodeStats>();
    for (int j=0; j < roundNodeNumer; j++) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
    }
    if (modeNodeNumber > 0) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
      modeNodeNumber-=1;
    }
    LOG.info(""String_Node_Str"",i,localTodoNodes.size(),localStatistics.size());
    if (localTodoNodes.size() == 0) {
      continue;
    }
    realThreadCount+=1;
    completionService.submit(new Callable<Map<Integer,NodeStats>>(){
      @Override public Map<Integer,NodeStats> call() throws Exception {
        List<Integer> nodeIndexes=new ArrayList<Integer>(trees.size());
        for (        Data data : DTWorker.this.trainingData) {
          nodeIndexes.clear();
          if (DTWorker.this.isRF) {
            for (            TreeNode treeNode : trees) {
              if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
                nodeIndexes.add(Node.INVALID_INDEX);
              }
 else {
                Node predictNode=predictNodeIndex(treeNode.getNode(),data,false);
                nodeIndexes.add(predictNode.getId());
              }
            }
          }
          if (DTWorker.this.isGBDT) {
            int currTreeIndex=trees.size() - 1;
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,false);
            nodeIndexes.add(predictNode.getId());
          }
          for (          Map.Entry<Integer,TreeNode> entry : localTodoNodes.entrySet()) {
            Node todoNode=entry.getValue().getNode();
            int treeId=entry.getValue().getTreeId();
            int currPredictIndex=0;
            if (DTWorker.this.isRF) {
              currPredictIndex=nodeIndexes.get(entry.getValue().getTreeId());
            }
            if (DTWorker.this.isGBDT) {
              currPredictIndex=nodeIndexes.get(0);
            }
            if (todoNode.getId() == currPredictIndex) {
              List<Integer> features=entry.getValue().getFeatures();
              if (features.isEmpty()) {
                features=getAllValidFeatures();
              }
              for (              Integer columnNum : features) {
                double[] featuerStatistic=localStatistics.get(entry.getKey()).getFeatureStatistics().get(columnNum);
                float weight=data.subsampleWeights[treeId % data.subsampleWeights.length];
                if (Float.compare(weight,0f) != 0) {
                  short binIndex=data.inputs[DTWorker.this.inputIndexMap.get(columnNum)];
                  DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
                }
              }
            }
          }
        }
        return localStatistics;
      }
    }
);
  }
  int rCnt=0;
  while (rCnt < realThreadCount) {
    try {
      statistics.putAll(completionService.take().get());
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    rCnt+=1;
  }
  LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
  LOG.info(""String_Node_Str"",count,trainError,statistics.size(),weightedTrainCount,weightedValidationCount,trainError,validationError);
  return new DTWorkerParams(weightedTrainCount,weightedValidationCount,trainError,validationError,statistics);
}",0.9992999217559608
31748,"private void recoverGBTData(WorkerContext<DTMasterParams,DTWorkerParams> context,float output,float predict,Data data,boolean isFailoverOrContinuous){
  final List<TreeNode> trees=this.recoverTrees;
  if (trees == null) {
    return;
  }
  if (trees.size() >= 1) {
    int iterLen=isFailoverOrContinuous ? trees.size() - 1 : trees.size();
    for (int i=0; i < iterLen; i++) {
      TreeNode currTree=trees.get(i);
      if (i == 0) {
        double oldPredict=predictNodeIndex(currTree.getNode(),data,false).getPredict().getPredict();
        predict=(float)oldPredict;
        output=-1f * loss.computeGradient(predict,data.label);
      }
 else {
        if (this.dropOutRate > 0.0 && rand.nextDouble() < this.dropOutRate) {
          continue;
        }
        double oldPredict=predictNodeIndex(currTree.getNode(),data,false).getPredict().getPredict();
        predict+=(float)(this.learningRate * oldPredict);
        output=-1f * loss.computeGradient(predict,data.label);
      }
    }
    data.output=output;
    data.predict=predict;
  }
}","private void recoverGBTData(WorkerContext<DTMasterParams,DTWorkerParams> context,float output,float predict,Data data,boolean isFailoverOrContinuous){
  final List<TreeNode> trees=this.recoverTrees;
  if (trees == null) {
    return;
  }
  if (trees.size() >= 1) {
    int iterLen=isFailoverOrContinuous ? trees.size() - 1 : trees.size();
    for (int i=0; i < iterLen; i++) {
      TreeNode currTree=trees.get(i);
      if (i == 0) {
        double oldPredict=predictNodeIndex(currTree.getNode(),data,false).getPredict().getPredict();
        predict=(float)oldPredict;
        output=-1f * loss.computeGradient(predict,data.label);
      }
 else {
        if (this.dropOutRate > 0.0 && dropOutRandom.nextDouble() < this.dropOutRate) {
          continue;
        }
        double oldPredict=predictNodeIndex(currTree.getNode(),data,false).getPredict().getPredict();
        predict+=(float)(this.learningRate * oldPredict);
        output=-1f * loss.computeGradient(predict,data.label);
      }
    }
    data.output=output;
    data.predict=predict;
  }
}",0.9919316563834836
31749,"public Boolean getTrainOnDisk(){
  return trainOnDisk;
}","@JsonIgnore public Boolean getTrainOnDisk(){
  return trainOnDisk;
}",0.9032258064516128
31750,"public void computeConfusionMatixForMultipleClassification(long records) throws IOException {
  SourceType sourceType=evalConfig.getDataSet().getSource();
  List<Scanner> scanners=ShifuFileUtils.getDataScanners(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  boolean isDir=ShifuFileUtils.isDir(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  Set<String> tagSet=new HashSet<String>(modelConfig.getFlattenTags(modelConfig.getPosTags(evalConfig),modelConfig.getNegTags(evalConfig)));
  List<Set<String>> tags=modelConfig.getSetTags(modelConfig.getPosTags(evalConfig),modelConfig.getNegTags(evalConfig));
  int classes=tags.size();
  long cnt=0, invalidTargetCnt=0;
  long[][] confusionMatrix=new long[classes][classes];
  for (  Scanner scanner : scanners) {
    while (scanner.hasNext()) {
      if ((++cnt) % 100000 == 0) {
        LOG.info(""String_Node_Str"" + cnt + ""String_Node_Str"");
      }
      if (!isDir && cnt == 1) {
        continue;
      }
      String[] raw=scanner.nextLine().split(Constants.DEFAULT_ESCAPE_DELIMITER);
      String tag=raw[targetColumnIndex];
      if (StringUtils.isBlank(tag) || !tagSet.contains(tag)) {
        invalidTargetCnt+=1;
        continue;
      }
      double[] scores=new double[classes];
      int maxIndex=-1;
      double maxScore=Double.NEGATIVE_INFINITY;
      if (CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm()) && !modelConfig.getTrain().isOneVsAll()) {
        double[] tagCounts=new double[tags.size()];
        for (int i=this.multiClassScore1Index; i < (raw.length - this.metaColumns); i++) {
          double dd=NumberFormatUtils.getDouble(raw[i],0d);
          tagCounts[(int)dd]+=1d;
        }
        double maxVotes=-1d;
        for (int i=0; i < tagCounts.length; i++) {
          if (tagCounts[i] > maxVotes) {
            maxIndex=i;
            maxScore=maxVotes=tagCounts[i];
          }
        }
      }
 else       if ((CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm()) || NNConstants.NN_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) && modelConfig.getTrain().isOneVsAll()) {
        for (int i=this.multiClassScore1Index; i < (classes + this.multiClassScore1Index); i++) {
          double dd=NumberFormatUtils.getDouble(raw[i],0d);
          if (dd > maxScore) {
            maxScore=dd;
            maxIndex=i - this.multiClassScore1Index;
          }
        }
      }
 else {
        for (int i=0; i < classes; i++) {
          for (int j=0; j < multiClassModelCnt; j++) {
            double dd=NumberFormatUtils.getDouble(raw[this.multiClassScore1Index + j * classes + i],0d);
            scores[i]+=dd;
          }
          scores[i]/=multiClassModelCnt;
          if (scores[i] > maxScore) {
            maxIndex=i;
            maxScore=scores[i];
          }
        }
      }
      int tagIndex=-1;
      for (int i=0; i < tags.size(); i++) {
        if (tags.get(i).contains(tag)) {
          tagIndex=i;
          break;
        }
      }
      confusionMatrix[tagIndex][maxIndex]+=1L;
    }
    scanner.close();
  }
  LOG.info(""String_Node_Str"",cnt,invalidTargetCnt,evalConfig.getName());
  writeToConfMatrixFile(tags,confusionMatrix);
  LOG.info(""String_Node_Str"");
  LOG.info(String.format(""String_Node_Str"",""String_Node_Str"",tags.toString()));
  for (int i=0; i < confusionMatrix.length; i++) {
    LOG.info(String.format(""String_Node_Str"",tags.get(i),Arrays.toString(confusionMatrix[i])));
  }
}","public void computeConfusionMatixForMultipleClassification(long records) throws IOException {
  SourceType sourceType=evalConfig.getDataSet().getSource();
  List<Scanner> scanners=ShifuFileUtils.getDataScanners(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  boolean isDir=ShifuFileUtils.isDir(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  Set<String> tagSet=new HashSet<String>(modelConfig.getFlattenTags(modelConfig.getPosTags(evalConfig),modelConfig.getNegTags(evalConfig)));
  List<Set<String>> tags=modelConfig.getSetTags(modelConfig.getPosTags(evalConfig),modelConfig.getNegTags(evalConfig));
  int classes=tags.size();
  long cnt=0, invalidTargetCnt=0;
  long[][] confusionMatrix=new long[classes][classes];
  for (  Scanner scanner : scanners) {
    while (scanner.hasNext()) {
      if ((++cnt) % 100000 == 0) {
        LOG.info(""String_Node_Str"" + cnt + ""String_Node_Str"");
      }
      if (!isDir && cnt == 1) {
        continue;
      }
      String[] raw=scanner.nextLine().split(Constants.DEFAULT_ESCAPE_DELIMITER);
      String tag=raw[targetColumnIndex];
      if (StringUtils.isBlank(tag) || !tagSet.contains(tag)) {
        invalidTargetCnt+=1;
        continue;
      }
      double[] scores=new double[classes];
      int maxIndex=-1;
      double maxScore=Double.NEGATIVE_INFINITY;
      if (CommonUtils.isTreeModel(modelConfig.getAlgorithm()) && !modelConfig.getTrain().isOneVsAll()) {
        double[] tagCounts=new double[tags.size()];
        for (int i=this.multiClassScore1Index; i < (raw.length - this.metaColumns); i++) {
          double dd=NumberFormatUtils.getDouble(raw[i],0d);
          tagCounts[(int)dd]+=1d;
        }
        double maxVotes=-1d;
        for (int i=0; i < tagCounts.length; i++) {
          if (tagCounts[i] > maxVotes) {
            maxIndex=i;
            maxScore=maxVotes=tagCounts[i];
          }
        }
      }
 else       if ((CommonUtils.isTreeModel(modelConfig.getAlgorithm()) || NNConstants.NN_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) && modelConfig.getTrain().isOneVsAll()) {
        for (int i=this.multiClassScore1Index; i < (classes + this.multiClassScore1Index); i++) {
          double dd=NumberFormatUtils.getDouble(raw[i],0d);
          if (dd > maxScore) {
            maxScore=dd;
            maxIndex=i - this.multiClassScore1Index;
          }
        }
      }
 else {
        for (int i=0; i < classes; i++) {
          for (int j=0; j < multiClassModelCnt; j++) {
            double dd=NumberFormatUtils.getDouble(raw[this.multiClassScore1Index + j * classes + i],0d);
            scores[i]+=dd;
          }
          scores[i]/=multiClassModelCnt;
          if (scores[i] > maxScore) {
            maxIndex=i;
            maxScore=scores[i];
          }
        }
      }
      int tagIndex=-1;
      for (int i=0; i < tags.size(); i++) {
        if (tags.get(i).contains(tag)) {
          tagIndex=i;
          break;
        }
      }
      confusionMatrix[tagIndex][maxIndex]+=1L;
    }
    scanner.close();
  }
  LOG.info(""String_Node_Str"",cnt,invalidTargetCnt,evalConfig.getName());
  writeToConfMatrixFile(tags,confusionMatrix);
  LOG.info(""String_Node_Str"");
  LOG.info(String.format(""String_Node_Str"",""String_Node_Str"",tags.toString()));
  for (int i=0; i < confusionMatrix.length; i++) {
    LOG.info(String.format(""String_Node_Str"",tags.get(i),Arrays.toString(confusionMatrix[i])));
  }
}",0.9936157864190366
31751,"public double[] calculateWeights(double[] weights,double[] gradients){
  for (int i=0; i < gradients.length; i++) {
switch (this.rl) {
case NONE:
      weights[i]+=updateWeight(i,weights,gradients);
    break;
case L1:
  if (Double.compare(this.reg,0d) == 0) {
    weights[i]+=updateWeight(i,weights,gradients);
  }
 else {
    double shrinkValue=this.reg / getNumTrainSize();
    double delta=updateWeight(i,weights,gradients);
    weights[i]+=Math.signum(delta) * Math.max(0.0,Math.abs(delta) - shrinkValue);
  }
break;
case L2:
default :
weights[i]+=(updateWeight(i,weights,gradients) - this.reg * weights[i] / getNumTrainSize());
break;
}
}
return weights;
}","public double[] calculateWeights(double[] weights,double[] gradients){
  for (int i=0; i < gradients.length; i++) {
    if (this.random.nextDouble() < this.dropoutRate) {
      continue;
    }
switch (this.rl) {
case NONE:
      weights[i]+=updateWeight(i,weights,gradients);
    break;
case L1:
  if (Double.compare(this.reg,0d) == 0) {
    weights[i]+=updateWeight(i,weights,gradients);
  }
 else {
    double shrinkValue=this.reg / getNumTrainSize();
    double delta=updateWeight(i,weights,gradients);
    weights[i]+=Math.signum(delta) * Math.max(0.0,Math.abs(delta) - shrinkValue);
  }
break;
case L2:
default :
weights[i]+=(updateWeight(i,weights,gradients) - this.reg * weights[i] / getNumTrainSize());
break;
}
}
return weights;
}",0.9450392576730906
31752,"private double updateWeightSCG(int index,double[] weights,double[] gradients){
  return 0;
}","private double updateWeightSCG(int index,double[] weights,double[] gradients){
  throw new RuntimeException(""String_Node_Str"");
}",0.8054298642533937
31753,"public Weight(int numWeight,double numTrainSize,double rate,String algorithm,double reg,RegulationLevel rl){
  this.lastDelta=new double[numWeight];
  this.lastGradient=new double[numWeight];
  this.numTrainSize=numTrainSize;
  this.eps=this.outputEpsilon / numTrainSize;
  this.shrink=rate / (1.0 + rate);
  this.learningRate=rate;
  this.algorithm=algorithm;
  this.updateValues=new double[numWeight];
  for (int i=0; i < this.updateValues.length; i++) {
    this.updateValues[i]=DEFAULT_INITIAL_UPDATE;
    this.lastDelta[i]=0;
  }
  this.reg=reg;
  if (rl != null) {
    this.rl=rl;
  }
}","public Weight(int numWeight,double numTrainSize,double rate,String algorithm,double reg,RegulationLevel rl,double dropoutRate){
  this.dropoutRate=dropoutRate;
  this.random=new Random();
  this.lastDelta=new double[numWeight];
  this.lastGradient=new double[numWeight];
  this.numTrainSize=numTrainSize;
  this.eps=this.outputEpsilon / numTrainSize;
  this.shrink=rate / (1.0 + rate);
  this.learningRate=rate;
  this.algorithm=algorithm;
  this.updateValues=new double[numWeight];
  for (int i=0; i < this.updateValues.length; i++) {
    this.updateValues[i]=DEFAULT_INITIAL_UPDATE;
    this.lastDelta[i]=0;
  }
  this.reg=reg;
  if (rl != null) {
    this.rl=rl;
  }
}",0.9374505146476644
31754,"@Override public LogisticRegressionParams doCompute(MasterContext<LogisticRegressionParams,LogisticRegressionParams> context){
  if (isInitialized.compareAndSet(false,true)) {
    if (!context.isFirstIteration()) {
      LogisticRegressionParams lastMasterResult=context.getMasterResult();
      if (lastMasterResult != null && lastMasterResult.getParameters() != null) {
        this.weights=lastMasterResult.getParameters();
        return lastMasterResult;
      }
 else {
        return initWeights();
      }
    }
  }
  if (context.isFirstIteration()) {
    if (this.isContinuousEnabled) {
      return initOrRecoverParams(context);
    }
 else {
      return initWeights();
    }
  }
 else {
    double[] gradients=new double[this.inputNum + 1];
    double trainError=0.0d, testError=0d;
    long trainSize=0, testSize=0;
    for (    LogisticRegressionParams param : context.getWorkerResults()) {
      if (param != null) {
        for (int i=0; i < gradients.length; i++) {
          gradients[i]+=param.getParameters()[i];
        }
        trainError+=param.getTrainError();
        testError+=param.getTestError();
        trainSize+=param.getTrainSize();
        testSize+=param.getTestSize();
      }
    }
    if (this.weightCalculator == null) {
      this.weightCalculator=new Weight(weights.length,trainSize,learningRate,this.propagation,this.regularizedConstant,RegulationLevel.to(this.validParams.get(CommonConstants.REG_LEVEL_KEY)));
    }
 else {
      this.weightCalculator.setNumTrainSize(trainSize);
    }
    double[] oldWeights=Arrays.copyOf(this.weights,this.weights.length);
    this.weights=this.weightCalculator.calculateWeights(this.weights,gradients);
    double finalTrainError=trainError / trainSize;
    double finalTestError=testError / testSize;
    LOG.info(""String_Node_Str"",context.getCurrentIteration(),finalTrainError,finalTestError);
    LogisticRegressionParams lrParams=new LogisticRegressionParams(weights,finalTrainError,finalTestError,trainSize,testSize);
    boolean vtTriggered=false;
    if (validationTolerance > 0d) {
      double weightSumSquare=0d;
      double diffWeightSumSquare=0d;
      for (int i=0; i < weights.length; i++) {
        weightSumSquare+=Math.pow(weights[i],2);
        diffWeightSumSquare+=Math.pow(weights[i] - oldWeights[i],2);
      }
      if (Math.pow(diffWeightSumSquare,0.5) < this.validationTolerance * Math.max(Math.pow(weightSumSquare,0.5),1d)) {
        LOG.info(""String_Node_Str"",Math.pow(diffWeightSumSquare,0.5),Math.pow(weightSumSquare,0.5),validationTolerance);
        vtTriggered=true;
      }
    }
    if (finalTestError < this.bestValidationError) {
      this.bestValidationError=finalTestError;
    }
    if (judger.judge(finalTrainError + finalTestError / 2,convergenceThreshold) || vtTriggered) {
      LOG.info(""String_Node_Str"",context.getCurrentIteration());
      lrParams.setHalt(true);
    }
 else {
      LOG.debug(""String_Node_Str"",context.getCurrentIteration());
    }
    return lrParams;
  }
}","@Override public LogisticRegressionParams doCompute(MasterContext<LogisticRegressionParams,LogisticRegressionParams> context){
  if (isInitialized.compareAndSet(false,true)) {
    if (!context.isFirstIteration()) {
      LogisticRegressionParams lastMasterResult=context.getMasterResult();
      if (lastMasterResult != null && lastMasterResult.getParameters() != null) {
        this.weights=lastMasterResult.getParameters();
        return lastMasterResult;
      }
 else {
        return initWeights();
      }
    }
  }
  if (context.isFirstIteration()) {
    if (this.isContinuousEnabled) {
      return initOrRecoverParams(context);
    }
 else {
      return initWeights();
    }
  }
 else {
    double[] gradients=new double[this.inputNum + 1];
    double trainError=0.0d, testError=0d;
    long trainSize=0, testSize=0;
    for (    LogisticRegressionParams param : context.getWorkerResults()) {
      if (param != null) {
        for (int i=0; i < gradients.length; i++) {
          gradients[i]+=param.getParameters()[i];
        }
        trainError+=param.getTrainError();
        testError+=param.getTestError();
        trainSize+=param.getTrainSize();
        testSize+=param.getTestSize();
      }
    }
    if (this.weightCalculator == null) {
      this.weightCalculator=new Weight(weights.length,trainSize,learningRate,this.propagation,this.regularizedConstant,RegulationLevel.to(this.validParams.get(CommonConstants.REG_LEVEL_KEY)),0d);
    }
 else {
      this.weightCalculator.setNumTrainSize(trainSize);
    }
    double[] oldWeights=Arrays.copyOf(this.weights,this.weights.length);
    this.weights=this.weightCalculator.calculateWeights(this.weights,gradients);
    double finalTrainError=trainError / trainSize;
    double finalTestError=testError / testSize;
    LOG.info(""String_Node_Str"",context.getCurrentIteration(),finalTrainError,finalTestError);
    LogisticRegressionParams lrParams=new LogisticRegressionParams(weights,finalTrainError,finalTestError,trainSize,testSize);
    boolean vtTriggered=false;
    if (validationTolerance > 0d) {
      double weightSumSquare=0d;
      double diffWeightSumSquare=0d;
      for (int i=0; i < weights.length; i++) {
        weightSumSquare+=Math.pow(weights[i],2);
        diffWeightSumSquare+=Math.pow(weights[i] - oldWeights[i],2);
      }
      if (Math.pow(diffWeightSumSquare,0.5) < this.validationTolerance * Math.max(Math.pow(weightSumSquare,0.5),1d)) {
        LOG.info(""String_Node_Str"",Math.pow(diffWeightSumSquare,0.5),Math.pow(weightSumSquare,0.5),validationTolerance);
        vtTriggered=true;
      }
    }
    if (finalTestError < this.bestValidationError) {
      this.bestValidationError=finalTestError;
    }
    if (judger.judge(finalTrainError + finalTestError / 2,convergenceThreshold) || vtTriggered) {
      LOG.info(""String_Node_Str"",context.getCurrentIteration());
      lrParams.setHalt(true);
    }
 else {
      LOG.debug(""String_Node_Str"",context.getCurrentIteration());
    }
    return lrParams;
  }
}",0.9995012468827932
31755,"@Override public NNParams doCompute(MasterContext<NNParams,NNParams> context){
  if (context.isFirstIteration()) {
    NNParams params=null;
    if (this.isContinuousEnabled) {
      params=initOrRecoverParams(context);
    }
 else {
      params=initWeights();
      LOG.info(""String_Node_Str"");
    }
    this.globalNNParams.setWeights(params.getWeights());
    return params;
  }
  if (context.getWorkerResults() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  double totalTestError=0;
  double totalTrainError=0;
  int size=0;
  this.globalNNParams.reset();
  long totalCount=0L;
  int totalWorkerCount=0;
  for (  NNParams nn : context.getWorkerResults()) {
    totalTestError+=nn.getTestError();
    totalTrainError+=nn.getTrainError();
    this.globalNNParams.accumulateGradients(nn.getGradients());
    this.globalNNParams.accumulateTrainSize(nn.getTrainSize());
    totalCount+=nn.getCount();
    totalWorkerCount+=nn.getWrCount();
    size++;
  }
  LOG.debug(""String_Node_Str"",this.globalNNParams.getGradients()[0]);
  LOG.debug(""String_Node_Str"",totalCount,totalWorkerCount);
  if (size == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (this.weightCalculator == null) {
    this.learningRate=this.rawLearningRate;
    this.weightCalculator=new Weight(this.globalNNParams.getGradients().length,this.globalNNParams.getTrainSize(),learningRate,propagation,this.regularizedConstant,RegulationLevel.to(this.validParams.get(CommonConstants.REG_LEVEL_KEY)));
  }
 else {
    this.learningRate=this.learningRate * (1.0d - this.learningDecay);
    this.weightCalculator.setLearningRate(this.learningRate);
    this.weightCalculator.setNumTrainSize(this.globalNNParams.getTrainSize());
  }
  double[] oldWeights=Arrays.copyOf(this.globalNNParams.getWeights(),this.globalNNParams.getWeights().length);
  double[] weights=this.weightCalculator.calculateWeights(this.globalNNParams.getWeights(),this.globalNNParams.getGradients());
  this.globalNNParams.setWeights(weights);
  double currentTestError=totalTestError / totalWorkerCount;
  double currentTrainError=totalTrainError / totalWorkerCount;
  boolean vtTriggered=false;
  if (validationTolerance > 0d) {
    double weightSumSquare=0d;
    double diffWeightSumSquare=0d;
    for (int i=0; i < weights.length; i++) {
      weightSumSquare+=Math.pow(weights[i],2);
      diffWeightSumSquare+=Math.pow(weights[i] - oldWeights[i],2);
    }
    if (Math.pow(diffWeightSumSquare,0.5) < this.validationTolerance * Math.max(Math.pow(weightSumSquare,0.5),1d)) {
      LOG.info(""String_Node_Str"",Math.pow(diffWeightSumSquare,0.5),Math.pow(weightSumSquare,0.5),validationTolerance);
      vtTriggered=true;
    }
  }
  if (currentTestError < this.bestValidationError) {
    this.bestValidationError=currentTestError;
  }
  LOG.info(""String_Node_Str"",new Object[]{context.getCurrentIteration(),currentTrainError,currentTestError});
  NNParams params=new NNParams();
  params.setTrainError(currentTrainError);
  params.setTestError(currentTestError);
  params.setGradients(new double[0]);
  params.setWeights(weights);
  LOG.debug(""String_Node_Str"",params,context.getCurrentIteration());
  double avgErr=(currentTrainError + currentTestError) / 2;
  LOG.info(""String_Node_Str"",context.getCurrentIteration(),avgErr,convergenceThreshold);
  if (judger.judge(avgErr,convergenceThreshold) || vtTriggered) {
    LOG.info(""String_Node_Str"",context.getCurrentIteration());
    params.setHalt(true);
  }
 else {
    LOG.debug(""String_Node_Str"",context.getCurrentIteration());
  }
  return params;
}","@Override public NNParams doCompute(MasterContext<NNParams,NNParams> context){
  if (context.isFirstIteration()) {
    NNParams params=null;
    if (this.isContinuousEnabled) {
      params=initOrRecoverParams(context);
    }
 else {
      params=initWeights();
      LOG.info(""String_Node_Str"");
    }
    this.globalNNParams.setWeights(params.getWeights());
    return params;
  }
  if (context.getWorkerResults() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  double totalTestError=0;
  double totalTrainError=0;
  int size=0;
  this.globalNNParams.reset();
  long totalCount=0L;
  int totalWorkerCount=0;
  for (  NNParams nn : context.getWorkerResults()) {
    totalTestError+=nn.getTestError();
    totalTrainError+=nn.getTrainError();
    this.globalNNParams.accumulateGradients(nn.getGradients());
    this.globalNNParams.accumulateTrainSize(nn.getTrainSize());
    totalCount+=nn.getCount();
    totalWorkerCount+=nn.getWrCount();
    size++;
  }
  LOG.debug(""String_Node_Str"",this.globalNNParams.getGradients()[0]);
  LOG.debug(""String_Node_Str"",totalCount,totalWorkerCount);
  if (size == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (this.weightCalculator == null) {
    this.learningRate=this.rawLearningRate;
    this.weightCalculator=new Weight(this.globalNNParams.getGradients().length,this.globalNNParams.getTrainSize(),learningRate,propagation,this.regularizedConstant,RegulationLevel.to(this.validParams.get(CommonConstants.REG_LEVEL_KEY)),this.dropoutRate);
  }
 else {
    this.learningRate=this.learningRate * (1.0d - this.learningDecay);
    this.weightCalculator.setLearningRate(this.learningRate);
    this.weightCalculator.setNumTrainSize(this.globalNNParams.getTrainSize());
  }
  double[] oldWeights=Arrays.copyOf(this.globalNNParams.getWeights(),this.globalNNParams.getWeights().length);
  double[] weights=this.weightCalculator.calculateWeights(this.globalNNParams.getWeights(),this.globalNNParams.getGradients());
  this.globalNNParams.setWeights(weights);
  double currentTestError=totalTestError / totalWorkerCount;
  double currentTrainError=totalTrainError / totalWorkerCount;
  boolean vtTriggered=false;
  if (validationTolerance > 0d) {
    double weightSumSquare=0d;
    double diffWeightSumSquare=0d;
    for (int i=0; i < weights.length; i++) {
      weightSumSquare+=Math.pow(weights[i],2);
      diffWeightSumSquare+=Math.pow(weights[i] - oldWeights[i],2);
    }
    if (Math.pow(diffWeightSumSquare,0.5) < this.validationTolerance * Math.max(Math.pow(weightSumSquare,0.5),1d)) {
      LOG.info(""String_Node_Str"",Math.pow(diffWeightSumSquare,0.5),Math.pow(weightSumSquare,0.5),validationTolerance);
      vtTriggered=true;
    }
  }
  if (currentTestError < this.bestValidationError) {
    this.bestValidationError=currentTestError;
  }
  LOG.info(""String_Node_Str"",new Object[]{context.getCurrentIteration(),currentTrainError,currentTestError});
  NNParams params=new NNParams();
  params.setTrainError(currentTrainError);
  params.setTestError(currentTestError);
  params.setGradients(new double[0]);
  params.setWeights(weights);
  LOG.debug(""String_Node_Str"",params,context.getCurrentIteration());
  double avgErr=(currentTrainError + currentTestError) / 2;
  LOG.info(""String_Node_Str"",context.getCurrentIteration(),avgErr,convergenceThreshold);
  if (judger.judge(avgErr,convergenceThreshold) || vtTriggered) {
    LOG.info(""String_Node_Str"",context.getCurrentIteration());
    params.setHalt(true);
  }
 else {
    LOG.debug(""String_Node_Str"",context.getCurrentIteration());
  }
  return params;
}",0.9976359338061466
31756,"@Override public void init(MasterContext<NNParams,NNParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  int trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  Object vtObj=validParams.get(""String_Node_Str"");
  if (vtObj != null) {
    try {
      validationTolerance=Double.parseDouble(vtObj.toString());
      LOG.warn(""String_Node_Str"",validationTolerance);
    }
 catch (    NumberFormatException ee) {
      validationTolerance=0d;
      LOG.warn(""String_Node_Str"",vtObj);
    }
  }
 else {
    LOG.info(""String_Node_Str"");
  }
  Object pObject=validParams.get(NNTrainer.PROPAGATION);
  this.propagation=pObject == null ? ""String_Node_Str"" : (String)pObject;
  this.rawLearningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
  Object learningDecayO=validParams.get(""String_Node_Str"");
  if (learningDecayO != null) {
    this.learningDecay=Double.valueOf(learningDecayO.toString());
  }
  LOG.info(""String_Node_Str"",learningDecay);
  Double threshold=this.modelConfig.getTrain().getConvergenceThreshold();
  this.convergenceThreshold=threshold == null ? 0d : threshold.doubleValue();
  LOG.info(""String_Node_Str"",this.convergenceThreshold);
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  Object rconstant=validParams.get(CommonConstants.LR_REGULARIZED_CONSTANT);
  this.regularizedConstant=NumberFormatUtils.getDouble(rconstant == null ? ""String_Node_Str"" : rconstant.toString(),0d);
  if (!context.isFirstIteration()) {
    NNParams params=context.getMasterResult();
    if (params != null && params.getWeights() != null) {
      this.globalNNParams.setWeights(params.getWeights());
    }
 else {
      params=initOrRecoverParams(context);
      this.globalNNParams.setWeights(params.getWeights());
    }
  }
}","@Override public void init(MasterContext<NNParams,NNParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  int trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  Object vtObj=validParams.get(""String_Node_Str"");
  if (vtObj != null) {
    try {
      validationTolerance=Double.parseDouble(vtObj.toString());
      LOG.warn(""String_Node_Str"",validationTolerance);
    }
 catch (    NumberFormatException ee) {
      validationTolerance=0d;
      LOG.warn(""String_Node_Str"",vtObj);
    }
  }
 else {
    LOG.info(""String_Node_Str"");
  }
  Object pObject=validParams.get(NNTrainer.PROPAGATION);
  this.propagation=pObject == null ? ""String_Node_Str"" : (String)pObject;
  this.rawLearningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
  Object dropoutRateObj=validParams.get(NNTrainer.DROPOUT_RATE);
  if (dropoutRateObj != null) {
    this.dropoutRate=Double.valueOf(dropoutRateObj.toString());
  }
  LOG.info(""String_Node_Str"",this.dropoutRate);
  Object learningDecayO=validParams.get(""String_Node_Str"");
  if (learningDecayO != null) {
    this.learningDecay=Double.valueOf(learningDecayO.toString());
  }
  LOG.info(""String_Node_Str"",learningDecay);
  Double threshold=this.modelConfig.getTrain().getConvergenceThreshold();
  this.convergenceThreshold=threshold == null ? 0d : threshold.doubleValue();
  LOG.info(""String_Node_Str"",this.convergenceThreshold);
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  Object rconstant=validParams.get(CommonConstants.LR_REGULARIZED_CONSTANT);
  this.regularizedConstant=NumberFormatUtils.getDouble(rconstant == null ? ""String_Node_Str"" : rconstant.toString(),0d);
  if (!context.isFirstIteration()) {
    NNParams params=context.getMasterResult();
    if (params != null && params.getWeights() != null) {
      this.globalNNParams.setWeights(params.getWeights());
    }
 else {
      params=initOrRecoverParams(context);
      this.globalNNParams.setWeights(params.getWeights());
    }
  }
}",0.960577456968351
31757,"@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  double[] dValues=null;
  if (correlation == Correlation.Pearson) {
    if (!this.dataPurifier.isFilterOut(valueStr)) {
      return;
    }
    dValues=getDoubleArrayByRawArray(CommonUtils.split(valueStr,this.dataSetDelimiter));
  }
 else   if (correlation == Correlation.NormPearson) {
    dValues=getDoubleArray(CommonUtils.split(valueStr,Constants.DEFAULT_DELIMITER));
  }
  count+=1L;
  if (count % 2000L == 0) {
    LOG.info(""String_Node_Str"",count,Thread.currentThread().getName());
  }
  for (int i=0; i < this.columnConfigList.size(); i++) {
    ColumnConfig columnConfig=this.columnConfigList.get(i);
    if (columnConfig.getColumnFlag() == ColumnFlag.Meta) {
      continue;
    }
    CorrelationWritable cw=this.correlationMap.get(i);
    if (cw == null) {
      cw=new CorrelationWritable();
      this.correlationMap.put(i,cw);
    }
    cw.setColumnIndex(i);
    cw.setCount(cw.getCount() + 1d);
    cw.setSum(cw.getSum() + dValues[i]);
    double squaredSum=dValues[i] * dValues[i];
    cw.setSumSquare(cw.getSumSquare() + squaredSum);
    double[] xySum=cw.getXySum();
    if (xySum == null) {
      xySum=new double[this.columnConfigList.size()];
      cw.setXySum(xySum);
    }
    double[] xxSum=cw.getXxSum();
    if (xxSum == null) {
      xxSum=new double[this.columnConfigList.size()];
      cw.setXxSum(xxSum);
    }
    double[] yySum=cw.getYySum();
    if (yySum == null) {
      yySum=new double[this.columnConfigList.size()];
      cw.setYySum(xxSum);
    }
    double[] adjustCount=cw.getAdjustCount();
    if (adjustCount == null) {
      adjustCount=new double[this.columnConfigList.size()];
      cw.setAdjustCount(adjustCount);
    }
    double[] adjustSum=cw.getAdjustSum();
    if (adjustSum == null) {
      adjustSum=new double[this.columnConfigList.size()];
      cw.setAdjustSum(adjustSum);
    }
    double[] adjustSumSquare=cw.getAdjustSumSquare();
    if (adjustSumSquare == null) {
      adjustSumSquare=new double[this.columnConfigList.size()];
      cw.setAdjustSumSquare(adjustSumSquare);
    }
    for (int j=0; j < this.columnConfigList.size(); j++) {
      ColumnConfig otherColumnConfig=this.columnConfigList.get(j);
      if (otherColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
        continue;
      }
      if (i > j && !this.isComputeAll) {
        continue;
      }
      if (dValues[i] != Double.MIN_VALUE && dValues[j] != Double.MIN_VALUE) {
        xySum[j]+=dValues[i] * dValues[j];
        xxSum[j]+=squaredSum;
        yySum[j]+=dValues[j] * dValues[j];
        adjustCount[j]+=1d;
        adjustSum[j]+=dValues[i];
        adjustSumSquare[j]+=squaredSum;
      }
    }
  }
}","@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  double[] dValues=null;
  if (correlation == Correlation.Pearson) {
    if (!this.dataPurifier.isFilterOut(valueStr)) {
      return;
    }
    if (Math.random() >= this.modelConfig.getNormalizeSampleRate()) {
      return;
    }
    dValues=getDoubleArrayByRawArray(CommonUtils.split(valueStr,this.dataSetDelimiter));
  }
 else   if (correlation == Correlation.NormPearson) {
    if (Math.random() >= this.modelConfig.getNormalizeSampleRate()) {
      return;
    }
    dValues=getDoubleArray(CommonUtils.split(valueStr,Constants.DEFAULT_DELIMITER));
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  count+=1L;
  if (count % 2000L == 0) {
    LOG.info(""String_Node_Str"",count,Thread.currentThread().getName());
  }
  for (int i=0; i < this.columnConfigList.size(); i++) {
    ColumnConfig columnConfig=this.columnConfigList.get(i);
    if (columnConfig.getColumnFlag() == ColumnFlag.Meta) {
      continue;
    }
    CorrelationWritable cw=this.correlationMap.get(i);
    if (cw == null) {
      cw=new CorrelationWritable();
      this.correlationMap.put(i,cw);
    }
    cw.setColumnIndex(i);
    cw.setCount(cw.getCount() + 1d);
    cw.setSum(cw.getSum() + dValues[i]);
    double squaredSum=dValues[i] * dValues[i];
    cw.setSumSquare(cw.getSumSquare() + squaredSum);
    double[] xySum=cw.getXySum();
    if (xySum == null) {
      xySum=new double[this.columnConfigList.size()];
      cw.setXySum(xySum);
    }
    double[] xxSum=cw.getXxSum();
    if (xxSum == null) {
      xxSum=new double[this.columnConfigList.size()];
      cw.setXxSum(xxSum);
    }
    double[] yySum=cw.getYySum();
    if (yySum == null) {
      yySum=new double[this.columnConfigList.size()];
      cw.setYySum(yySum);
    }
    double[] adjustCount=cw.getAdjustCount();
    if (adjustCount == null) {
      adjustCount=new double[this.columnConfigList.size()];
      cw.setAdjustCount(adjustCount);
    }
    double[] adjustSum=cw.getAdjustSum();
    if (adjustSum == null) {
      adjustSum=new double[this.columnConfigList.size()];
      cw.setAdjustSum(adjustSum);
    }
    double[] adjustSumSquare=cw.getAdjustSumSquare();
    if (adjustSumSquare == null) {
      adjustSumSquare=new double[this.columnConfigList.size()];
      cw.setAdjustSumSquare(adjustSumSquare);
    }
    for (int j=0; j < this.columnConfigList.size(); j++) {
      ColumnConfig otherColumnConfig=this.columnConfigList.get(j);
      if (otherColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
        continue;
      }
      if (i > j && !this.isComputeAll) {
        continue;
      }
      if (dValues[i] != Double.MIN_VALUE && dValues[j] != Double.MIN_VALUE) {
        xySum[j]+=dValues[i] * dValues[j];
        xxSum[j]+=squaredSum;
        yySum[j]+=dValues[j] * dValues[j];
        adjustCount[j]+=1d;
        adjustSum[j]+=dValues[i];
        adjustSumSquare[j]+=squaredSum;
      }
    }
  }
}",0.9560672872774784
31758,"@Override protected void reduce(IntWritable key,Iterable<CorrelationWritable> values,Context context) throws IOException, InterruptedException {
  CorrelationWritable finalCw=new CorrelationWritable();
  finalCw.setColumnIndex(key.get());
  finalCw.setXySum(new double[this.columnConfigList.size()]);
  finalCw.setXxSum(new double[this.columnConfigList.size()]);
  finalCw.setYySum(new double[this.columnConfigList.size()]);
  finalCw.setAdjustCount(new double[this.columnConfigList.size()]);
  finalCw.setAdjustSum(new double[this.columnConfigList.size()]);
  finalCw.setAdjustSumSquare(new double[this.columnConfigList.size()]);
  Iterator<CorrelationWritable> cwIt=values.iterator();
  while (cwIt.hasNext()) {
    CorrelationWritable cw=cwIt.next();
    finalCw.setCount(finalCw.getCount() + cw.getCount());
    finalCw.setSum(finalCw.getSum() + cw.getSum());
    finalCw.setSumSquare(finalCw.getSumSquare() + cw.getSumSquare());
    double[] finalXySum=finalCw.getXySum();
    double[] xySum=cw.getXySum();
    for (int i=0; i < finalXySum.length; i++) {
      finalXySum[i]+=xySum[i];
    }
    double[] finalXxSum=finalCw.getXxSum();
    double[] xxSum=cw.getXxSum();
    for (int i=0; i < finalXxSum.length; i++) {
      finalXxSum[i]+=xxSum[i];
    }
    double[] finalYySum=finalCw.getYySum();
    double[] yySum=cw.getYySum();
    for (int i=0; i < finalYySum.length; i++) {
      finalYySum[i]+=yySum[i];
    }
    double[] finalAdjustCount=finalCw.getAdjustCount();
    double[] adjustCount=cw.getAdjustCount();
    for (int i=0; i < finalAdjustCount.length; i++) {
      finalAdjustCount[i]+=adjustCount[i];
    }
    double[] finalAdjustSum=finalCw.getAdjustSum();
    double[] adjustSum=cw.getAdjustSum();
    for (int i=0; i < finalAdjustSum.length; i++) {
      finalAdjustSum[i]+=adjustSum[i];
    }
    double[] finalAdjustSumSquare=finalCw.getAdjustSumSquare();
    double[] adjustSumSquare=cw.getAdjustSumSquare();
    for (int i=0; i < finalAdjustSumSquare.length; i++) {
      finalAdjustSumSquare[i]+=adjustSumSquare[i];
    }
  }
  this.outputKey.set(key.get());
  Base64.encodeBase64(objectToBytes(finalCw));
  this.outputValue.set(new String(Base64.encodeBase64(objectToBytes(finalCw)),""String_Node_Str""));
  context.write(outputKey,outputValue);
}","@Override protected void reduce(IntWritable key,Iterable<CorrelationWritable> values,Context context) throws IOException, InterruptedException {
  CorrelationWritable finalCw=new CorrelationWritable();
  finalCw.setColumnIndex(key.get());
  finalCw.setXySum(new double[this.columnConfigList.size()]);
  finalCw.setXxSum(new double[this.columnConfigList.size()]);
  finalCw.setYySum(new double[this.columnConfigList.size()]);
  finalCw.setAdjustCount(new double[this.columnConfigList.size()]);
  finalCw.setAdjustSum(new double[this.columnConfigList.size()]);
  finalCw.setAdjustSumSquare(new double[this.columnConfigList.size()]);
  Iterator<CorrelationWritable> cwIt=values.iterator();
  while (cwIt.hasNext()) {
    CorrelationWritable cw=cwIt.next();
    finalCw.setCount(finalCw.getCount() + cw.getCount());
    finalCw.setSum(finalCw.getSum() + cw.getSum());
    finalCw.setSumSquare(finalCw.getSumSquare() + cw.getSumSquare());
    double[] finalXySum=finalCw.getXySum();
    double[] xySum=cw.getXySum();
    for (int i=0; i < finalXySum.length; i++) {
      finalXySum[i]+=xySum[i];
    }
    double[] finalXxSum=finalCw.getXxSum();
    double[] xxSum=cw.getXxSum();
    for (int i=0; i < finalXxSum.length; i++) {
      finalXxSum[i]+=xxSum[i];
    }
    double[] finalYySum=finalCw.getYySum();
    double[] yySum=cw.getYySum();
    for (int i=0; i < finalYySum.length; i++) {
      finalYySum[i]+=yySum[i];
    }
    double[] finalAdjustCount=finalCw.getAdjustCount();
    double[] adjustCount=cw.getAdjustCount();
    for (int i=0; i < finalAdjustCount.length; i++) {
      finalAdjustCount[i]+=adjustCount[i];
    }
    double[] finalAdjustSum=finalCw.getAdjustSum();
    double[] adjustSum=cw.getAdjustSum();
    for (int i=0; i < finalAdjustSum.length; i++) {
      finalAdjustSum[i]+=adjustSum[i];
    }
    double[] finalAdjustSumSquare=finalCw.getAdjustSumSquare();
    double[] adjustSumSquare=cw.getAdjustSumSquare();
    for (int i=0; i < finalAdjustSumSquare.length; i++) {
      finalAdjustSumSquare[i]+=adjustSumSquare[i];
    }
  }
  this.outputKey.set(key.get());
  this.outputValue.set(new String(Base64.encodeBase64(objectToBytes(finalCw)),""String_Node_Str""));
  context.write(outputKey,outputValue);
}",0.9753607103218646
31759,"public boolean nextKeyValue() throws IOException {
  if (key == null) {
    key=new LongWritable();
  }
  key.set(pos);
  if (value == null) {
    value=new Text();
  }
  int newSize=0;
  while (pos < end) {
    newSize=in.readLine(value,maxLineLength,Math.max((int)Math.min(Integer.MAX_VALUE,end - pos),maxLineLength));
    if (newSize == 0) {
      break;
    }
    pos+=newSize;
    if (newSize < maxLineLength) {
      break;
    }
    LOG.info(""String_Node_Str"" + newSize + ""String_Node_Str""+ (pos - newSize));
  }
  if (this.splitIndex == this.fileSplits.length && newSize == 0 && consumedSplitSize == wholeSize) {
    key=null;
    value=null;
    return false;
  }
  if (newSize == 0) {
    if (this.splitIndex < this.fileSplits.length) {
      consumedSplitSize+=(end - start);
      close();
      FileSplit currSplit=this.fileSplits[this.splitIndex++];
      initializeOne(context,currSplit);
      if (currSplit.getLength() == 0L) {
        throw new IllegalStateException(""String_Node_Str"" + currSplit + ""String_Node_Str"");
      }
      return nextKeyValue();
    }
 else {
      consumedSplitSize+=(end - start);
      key=null;
      value=null;
      return false;
    }
  }
 else {
    return true;
  }
}","public boolean nextKeyValue() throws IOException {
  if (key == null) {
    key=new LongWritable();
  }
  key.set(pos);
  if (value == null) {
    value=new Text();
  }
  int newSize=0;
  while (getFilePosition() <= end || in.needAdditionalRecordAfterSplit()) {
    if (pos == 0) {
      newSize=skipUtfByteOrderMark();
    }
 else {
      newSize=in.readLine(value,maxLineLength,maxBytesToConsume(pos));
      pos+=newSize;
    }
    if ((newSize == 0) || (newSize < maxLineLength)) {
      break;
    }
    LOG.info(""String_Node_Str"" + newSize + ""String_Node_Str""+ (pos - newSize));
  }
  if (this.splitIndex == this.fileSplits.length && newSize == 0 && consumedSplitSize == wholeSize) {
    key=null;
    value=null;
    return false;
  }
  if (newSize == 0) {
    if (this.splitIndex < this.fileSplits.length) {
      consumedSplitSize+=(end - start);
      close();
      FileSplit currSplit=this.fileSplits[this.splitIndex++];
      initializeOne(currSplit,context);
      if (currSplit.getLength() == 0L) {
        throw new IllegalStateException(""String_Node_Str"" + currSplit + ""String_Node_Str"");
      }
      return nextKeyValue();
    }
 else {
      consumedSplitSize+=(end - start);
      key=null;
      value=null;
      return false;
    }
  }
 else {
    return true;
  }
}",0.8436132113012336
31760,"private void initializeOne(TaskAttemptContext context,FileSplit split) throws IOException {
  Configuration job=context.getConfiguration();
  this.maxLineLength=job.getInt(""String_Node_Str"",Integer.MAX_VALUE);
  start=split.getStart();
  end=start + split.getLength();
  final Path file=split.getPath();
  compressionCodecs=new CompressionCodecFactory(job);
  final CompressionCodec codec=compressionCodecs.getCodec(file);
  FileSystem fs=file.getFileSystem(job);
  FSDataInputStream fileIn=fs.open(split.getPath());
  boolean skipFirstLine=false;
  if (codec != null) {
    if (null == this.recordDelimiterBytes) {
      in=new LineReader(codec.createInputStream(fileIn),job);
    }
 else {
      in=new LineReader(codec.createInputStream(fileIn),job,this.recordDelimiterBytes);
    }
    end=Long.MAX_VALUE;
  }
 else {
    if (start != 0) {
      skipFirstLine=true;
      --start;
      fileIn.seek(start);
    }
    if (null == this.recordDelimiterBytes) {
      in=new LineReader(fileIn,job);
    }
 else {
      in=new LineReader(fileIn,job,this.recordDelimiterBytes);
    }
  }
  if (skipFirstLine) {
    start+=in.readLine(new Text(),0,(int)Math.min((long)Integer.MAX_VALUE,end - start));
  }
  this.pos=start;
}","public void initializeOne(FileSplit split,TaskAttemptContext context) throws IOException {
  Configuration job=context.getConfiguration();
  this.maxLineLength=job.getInt(MAX_LINE_LENGTH,Integer.MAX_VALUE);
  start=split.getStart();
  end=start + split.getLength();
  final Path file=split.getPath();
  final FileSystem fs=file.getFileSystem(job);
  fileIn=fs.open(file);
  CompressionCodec codec=new CompressionCodecFactory(job).getCodec(file);
  if (null != codec) {
    isCompressedInput=true;
    decompressor=CodecPool.getDecompressor(codec);
    if (codec instanceof SplittableCompressionCodec) {
      final SplitCompressionInputStream cIn=((SplittableCompressionCodec)codec).createInputStream(fileIn,decompressor,start,end,SplittableCompressionCodec.READ_MODE.BYBLOCK);
      in=new CompressedSplitLineReader(cIn,job,this.recordDelimiterBytes);
      start=cIn.getAdjustedStart();
      end=cIn.getAdjustedEnd();
      filePosition=cIn;
    }
 else {
      in=new SplitLineReader(codec.createInputStream(fileIn,decompressor),job,this.recordDelimiterBytes);
      filePosition=fileIn;
    }
  }
 else {
    fileIn.seek(start);
    in=new SplitLineReader(fileIn,job,this.recordDelimiterBytes);
    filePosition=fileIn;
  }
  if (start != 0) {
    start+=in.readLine(new Text(),0,maxBytesToConsume(start));
  }
  this.pos=start;
}",0.3755868544600939
31761,"public void initialize(InputSplit genericSplit,TaskAttemptContext context) throws IOException {
  this.splitIndex=0;
  this.context=context;
  this.fileSplits=((CombineInputSplit)genericSplit).getFileSplits();
  initializeOne(context,this.fileSplits[this.splitIndex++]);
  for (  FileSplit fileSplit : this.fileSplits) {
    this.wholeSize+=fileSplit.getLength();
  }
}","public void initialize(InputSplit genericSplit,TaskAttemptContext context) throws IOException {
  this.splitIndex=0;
  this.context=context;
  this.fileSplits=((CombineInputSplit)genericSplit).getFileSplits();
  initializeOne(this.fileSplits[this.splitIndex++],context);
  for (  FileSplit fileSplit : this.fileSplits) {
    this.wholeSize+=fileSplit.getLength();
  }
}",0.978319783197832
31762,"/** 
 * Get the progress within the split
 */
public float getProgress(){
  if (start == end) {
    return 0.0f;
  }
 else {
    return Math.min(1.0f,((consumedSplitSize + (pos - start)) * 1f) / (this.wholeSize * 1f));
  }
}","/** 
 * Get the progress within the split
 */
public float getProgress() throws IOException {
  if (start == end) {
    return 0.0f;
  }
 else {
    return Math.min(1.0f,((consumedSplitSize + (getFilePosition() - start)) * 1f) / (this.wholeSize * 1f));
  }
}",0.91701244813278
31763,"public synchronized void close() throws IOException {
  if (in != null) {
    in.close();
  }
}","public synchronized void close() throws IOException {
  try {
    if (in != null) {
      in.close();
    }
  }
  finally {
    if (decompressor != null) {
      CodecPool.returnDecompressor(decompressor);
    }
  }
}",0.5897435897435898
31764,"private boolean inputOutputModelCheckSuccess(FileSystem fileSystem,Path modelPath) throws IOException {
  MLInputOutput model=(MLInputOutput)CommonUtils.loadModel(this.modelConfig,modelPath,fileSystem);
  int[] outputCandidateCounts=DTrainUtils.getInputOutputCandidateCounts(getColumnConfigList());
  return model.getInputCount() == outputCandidateCounts[0] && model.getOutputCount() == outputCandidateCounts[1];
}","@SuppressWarnings(""String_Node_Str"") private boolean inputOutputModelCheckSuccess(FileSystem fileSystem,Path modelPath,Map<String,Object> modelParams) throws IOException {
  BasicNetwork model=(BasicNetwork)CommonUtils.loadModel(this.modelConfig,modelPath,fileSystem);
  int[] outputCandidateCounts=DTrainUtils.getInputOutputCandidateCounts(getColumnConfigList());
  int inputs=outputCandidateCounts[0] == 0 ? outputCandidateCounts[2] : outputCandidateCounts[0];
  boolean isInputOutConsistent=model.getInputCount() == inputs && model.getOutputCount() == outputCandidateCounts[1];
  if (!isInputOutConsistent) {
    return false;
  }
  boolean isHasSameHidderLayer=(model.getLayerCount() - 2) == (Integer)modelParams.get(NNTrainer.NUM_HIDDEN_LAYERS);
  if (!isHasSameHidderLayer) {
    return false;
  }
  boolean isHasSameHiddenNodes=true;
  List<Integer> hiddenNodeList=(List<Integer>)modelParams.get(NNTrainer.NUM_HIDDEN_NODES);
  for (int i=0; i < hiddenNodeList.size(); i++) {
    if (model.getLayerNeuronCount(i + 1) != hiddenNodeList.get(i)) {
      isHasSameHiddenNodes=false;
      break;
    }
  }
  if (!isHasSameHiddenNodes) {
    return false;
  }
  boolean isHasSameHiddenActiviation=true;
  List<String> actFunc=(List<String>)modelParams.get(NNTrainer.ACTIVATION_FUNC);
  for (int i=0; i < actFunc.size(); i++) {
    ActivationFunction activation=model.getActivation(i + 1);
    if (actFunc.get(i).equalsIgnoreCase(NNConstants.NN_LINEAR)) {
      isHasSameHiddenActiviation=ActivationLinear.class == activation.getClass();
    }
 else     if (actFunc.get(i).equalsIgnoreCase(NNConstants.NN_SIGMOID)) {
      isHasSameHiddenActiviation=ActivationSigmoid.class == activation.getClass();
    }
 else     if (actFunc.get(i).equalsIgnoreCase(NNConstants.NN_TANH)) {
      isHasSameHiddenActiviation=ActivationTANH.class == activation.getClass();
    }
 else     if (actFunc.get(i).equalsIgnoreCase(NNConstants.NN_LOG)) {
      isHasSameHiddenActiviation=ActivationLOG.class == activation.getClass();
    }
 else     if (actFunc.get(i).equalsIgnoreCase(NNConstants.NN_SIN)) {
      isHasSameHiddenActiviation=ActivationSIN.class == activation.getClass();
    }
 else     if (actFunc.get(i).equalsIgnoreCase(NNConstants.NN_RELU)) {
      isHasSameHiddenActiviation=ActivationReLU.class == activation.getClass();
    }
 else {
      isHasSameHiddenActiviation=ActivationSigmoid.class == activation.getClass();
    }
    if (!isHasSameHiddenActiviation) {
      break;
    }
  }
  if (!isHasSameHiddenActiviation) {
    return false;
  }
  return true;
}",0.2367182246133154
31765,"private int checkContinuousTraining(FileSystem fileSystem,List<String> localArgs,Path modelPath) throws IOException {
  int finalContinuous=0;
  if (Boolean.TRUE.toString().equals(this.modelConfig.getTrain().getIsContinuous().toString())) {
    if (this.isForVarSelect) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"");
    }
 else     if (!fileSystem.exists(modelPath)) {
      finalContinuous=0;
      LOG.info(""String_Node_Str"");
    }
 else     if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm()) && !inputOutputModelCheckSuccess(fileSystem,modelPath)) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"");
    }
 else     if (CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
      TreeModel model=(TreeModel)CommonUtils.loadModel(this.modelConfig,modelPath,fileSystem);
      if (!model.getAlgorithm().equalsIgnoreCase(modelConfig.getAlgorithm())) {
        finalContinuous=0;
        LOG.warn(""String_Node_Str"");
      }
 else       if (!model.getLossStr().equalsIgnoreCase(this.modelConfig.getTrain().getParams().get(""String_Node_Str"").toString())) {
        finalContinuous=0;
        LOG.warn(""String_Node_Str"");
      }
 else       if (model.getTrees().size() == 0) {
        finalContinuous=0;
      }
 else       if (model.getTrees().size() >= Integer.valueOf(modelConfig.getTrain().getParams().get(""String_Node_Str"").toString())) {
        finalContinuous=-1;
      }
 else {
        finalContinuous=1;
      }
    }
 else     if (CommonConstants.RF_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"");
    }
 else {
      finalContinuous=1;
    }
  }
 else {
    finalContinuous=0;
  }
  localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CONTINUOUS_TRAINING,finalContinuous == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  return finalContinuous;
}","private int checkContinuousTraining(FileSystem fileSystem,List<String> localArgs,Path modelPath,Map<String,Object> modelParams) throws IOException {
  int finalContinuous=0;
  if (Boolean.TRUE.toString().equals(this.modelConfig.getTrain().getIsContinuous().toString())) {
    if (this.isForVarSelect) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"");
    }
 else     if (!fileSystem.exists(modelPath)) {
      finalContinuous=0;
      LOG.info(""String_Node_Str"");
    }
 else     if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm()) && !inputOutputModelCheckSuccess(fileSystem,modelPath,modelParams)) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"");
    }
 else     if (CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
      TreeModel model=(TreeModel)CommonUtils.loadModel(this.modelConfig,modelPath,fileSystem);
      if (!model.getAlgorithm().equalsIgnoreCase(modelConfig.getAlgorithm())) {
        finalContinuous=0;
        LOG.warn(""String_Node_Str"");
      }
 else       if (!model.getLossStr().equalsIgnoreCase(this.modelConfig.getTrain().getParams().get(""String_Node_Str"").toString())) {
        finalContinuous=0;
        LOG.warn(""String_Node_Str"");
      }
 else       if (model.getTrees().size() == 0) {
        finalContinuous=0;
      }
 else       if (model.getTrees().size() >= Integer.valueOf(modelConfig.getTrain().getParams().get(""String_Node_Str"").toString())) {
        finalContinuous=-1;
      }
 else {
        finalContinuous=1;
      }
    }
 else     if (CommonConstants.RF_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"");
    }
 else {
      finalContinuous=1;
    }
  }
 else {
    finalContinuous=0;
  }
  localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CONTINUOUS_TRAINING,finalContinuous == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  return finalContinuous;
}",0.9839326702371844
31766,"protected int runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  int status=0;
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
 else       if (isKFoldCV) {
        LOG.info(""String_Node_Str"",i);
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      boolean isContinous=false;
      if (gs.hasHyperParam()) {
        isContinous=false;
      }
 else {
        int intContinuous=checkContinuousTraining(fileSystem,localArgs,modelPath);
        if (intContinuous == -1) {
          LOG.warn(""String_Node_Str"",i);
          continue;
        }
 else {
          isContinous=(intContinuous == 1);
        }
      }
      if (gs.hasHyperParam() || isKFoldCV) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      if (gs.hasHyperParam() || isKFoldCV) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
          status=1;
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isTreeModel(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
        List<BasicML> models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
        Map<Integer,MutablePair<String,Double>> featureImportances=CommonUtils.computeTreeModelFeatureImportance(models);
        CommonUtils.writeFeatureImportance(this.pathFinder.getLocalFeatureImportancePath(),featureImportances);
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
  if (status != 0) {
    LOG.error(""String_Node_Str"");
  }
  return status;
}","protected int runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  int status=0;
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
 else       if (isKFoldCV) {
        LOG.info(""String_Node_Str"",i);
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      boolean isContinous=false;
      if (gs.hasHyperParam()) {
        isContinous=false;
      }
 else {
        int intContinuous=checkContinuousTraining(fileSystem,localArgs,modelPath,modelConfig.getTrain().getParams());
        if (intContinuous == -1) {
          LOG.warn(""String_Node_Str"",i);
          continue;
        }
 else {
          isContinous=(intContinuous == 1);
        }
      }
      if (gs.hasHyperParam() || isKFoldCV) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      if (gs.hasHyperParam() || isKFoldCV) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
          status=1;
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isTreeModel(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
        List<BasicML> models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
        Map<Integer,MutablePair<String,Double>> featureImportances=CommonUtils.computeTreeModelFeatureImportance(models);
        CommonUtils.writeFeatureImportance(this.pathFinder.getLocalFeatureImportancePath(),featureImportances);
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
  if (status != 0) {
    LOG.error(""String_Node_Str"");
  }
  return status;
}",0.9983402096078152
31767,"public static void loadShifuConfig() throws IOException {
  loadProperties(properties,getProperty(Environment.SHIFU_HOME) + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  loadProperties(properties,File.separator + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
  String userHome=System.getProperty(""String_Node_Str"");
  loadProperties(properties,userHome + File.separator + ""String_Node_Str"");
}","public static void loadShifuConfig() throws IOException {
  loadProperties(properties,getProperty(Environment.SHIFU_HOME) + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  loadProperties(properties,getProperty(Environment.SHIFU_HOME) + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  loadProperties(properties,getProperty(Environment.SHIFU_HOME) + File.separator + ""String_Node_Str"");
  loadProperties(properties,File.separator + ""String_Node_Str"" + File.separator+ ""String_Node_Str"");
  String userHome=System.getProperty(""String_Node_Str"");
  loadProperties(properties,userHome + File.separator + ""String_Node_Str"");
}",0.7815049864007253
31768,"/** 
 * Compute correlation value according to correlation statistics from correlation MR job.
 * @param corrMap CorrelationWritable map read from MR job output file
 * @throws IOException any IOException to write correlation value to csv file.
 */
private void computeCorrValue(SortedMap<Integer,CorrelationWritable> corrMap) throws IOException {
  String localCorrelationCsv=super.pathFinder.getLocalCorrelationCsvPath();
  ShifuFileUtils.createFileIfNotExists(localCorrelationCsv,SourceType.LOCAL);
  BufferedWriter writer=null;
  Map<Integer,double[]> finalCorrMap=new HashMap<Integer,double[]>();
  try {
    writer=ShifuFileUtils.getWriter(localCorrelationCsv,SourceType.LOCAL);
    writer.write(getColumnIndexes());
    writer.newLine();
    writer.write(getColumnNames());
    writer.newLine();
    for (    Entry<Integer,CorrelationWritable> entry : corrMap.entrySet()) {
      ColumnConfig xColumnConfig=this.columnConfigList.get(entry.getKey());
      if (xColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
        continue;
      }
      CorrelationWritable xCw=corrMap.get(entry.getKey());
      double[] corrArray=new double[this.columnConfigList.size()];
      for (int i=0; i < corrArray.length; i++) {
        ColumnConfig yColumnConfig=this.columnConfigList.get(i);
        if (yColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
          continue;
        }
        if (entry.getKey() > i) {
          double[] reverseDoubleArray=finalCorrMap.get(i);
          if (reverseDoubleArray != null) {
            corrArray[i]=reverseDoubleArray[entry.getKey()];
          }
 else {
            corrArray[i]=0d;
          }
          continue;
        }
        double numerator=xCw.getAdjustCount()[i] * xCw.getXySum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumY()[i];
        double denominator1=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getXxSum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumX()[i]);
        double denominator2=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getYySum()[i] - xCw.getAdjustSumY()[i] * xCw.getAdjustSumY()[i]);
        if (Double.compare(denominator1,Double.valueOf(0d)) == 0 || Double.compare(denominator2,Double.valueOf(0d)) == 0) {
          corrArray[i]=0d;
        }
 else {
          corrArray[i]=numerator / (denominator1 * denominator2);
        }
      }
      finalCorrMap.put(entry.getKey(),corrArray);
      String corrStr=Arrays.toString(corrArray);
      String adjustCorrStr=corrStr.substring(1,corrStr.length() - 1);
      writer.write(entry.getKey() + ""String_Node_Str"" + this.columnConfigList.get(entry.getKey()).getColumnName()+ ""String_Node_Str""+ adjustCorrStr);
      writer.newLine();
      corrMap.remove(entry.getKey());
    }
    log.info(""String_Node_Str"",localCorrelationCsv);
  }
  finally {
    IOUtils.closeQuietly(writer);
  }
}","/** 
 * Compute correlation value according to correlation statistics from correlation MR job.
 * @param corrMap CorrelationWritable map read from MR job output file
 * @throws IOException any IOException to write correlation value to csv file.
 */
private void computeCorrValue(SortedMap<Integer,CorrelationWritable> corrMap) throws IOException {
  String localCorrelationCsv=super.pathFinder.getLocalCorrelationCsvPath();
  ShifuFileUtils.createFileIfNotExists(localCorrelationCsv,SourceType.LOCAL);
  BufferedWriter writer=null;
  Map<Integer,double[]> finalCorrMap=new HashMap<Integer,double[]>();
  try {
    writer=ShifuFileUtils.getWriter(localCorrelationCsv,SourceType.LOCAL);
    writer.write(getColumnIndexes());
    writer.newLine();
    writer.write(getColumnNames());
    writer.newLine();
    for (    Entry<Integer,CorrelationWritable> entry : corrMap.entrySet()) {
      ColumnConfig xColumnConfig=this.columnConfigList.get(entry.getKey());
      if (xColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
        continue;
      }
      CorrelationWritable xCw=corrMap.get(entry.getKey());
      double[] corrArray=new double[this.columnConfigList.size()];
      for (int i=0; i < corrArray.length; i++) {
        ColumnConfig yColumnConfig=this.columnConfigList.get(i);
        if (yColumnConfig.getColumnFlag() == ColumnFlag.Meta) {
          continue;
        }
        if (entry.getKey() > i) {
          double[] reverseDoubleArray=finalCorrMap.get(i);
          if (reverseDoubleArray != null) {
            corrArray[i]=reverseDoubleArray[entry.getKey()];
          }
 else {
            corrArray[i]=0d;
          }
          continue;
        }
        double numerator=xCw.getAdjustCount()[i] * xCw.getXySum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumY()[i];
        double denominator1=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getXxSum()[i] - xCw.getAdjustSumX()[i] * xCw.getAdjustSumX()[i]);
        double denominator2=Math.sqrt(xCw.getAdjustCount()[i] * xCw.getYySum()[i] - xCw.getAdjustSumY()[i] * xCw.getAdjustSumY()[i]);
        if (Double.compare(denominator1,Double.valueOf(0d)) == 0 || Double.compare(denominator2,Double.valueOf(0d)) == 0) {
          corrArray[i]=0d;
        }
 else {
          corrArray[i]=numerator / (denominator1 * denominator2);
        }
      }
      finalCorrMap.put(entry.getKey(),corrArray);
      String corrStr=Arrays.toString(corrArray);
      String adjustCorrStr=corrStr.substring(1,corrStr.length() - 1);
      writer.write(entry.getKey() + ""String_Node_Str"" + this.columnConfigList.get(entry.getKey()).getColumnName()+ ""String_Node_Str""+ adjustCorrStr);
      writer.newLine();
    }
    log.info(""String_Node_Str"",localCorrelationCsv);
  }
  finally {
    IOUtils.closeQuietly(writer);
  }
}",0.993177737881508
31769,"private int parseThreadNum(){
  int threads=4;
  try {
    threads=Integer.parseInt(Environment.getProperty(Constants.SHIFU_CORRELATION_MULTI_THREADS,threads + ""String_Node_Str""));
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",threads);
  }
  if (threads <= 0) {
    threads=4;
  }
  return threads;
}","private int parseThreadNum(){
  int threads=6;
  try {
    threads=Integer.parseInt(Environment.getProperty(Constants.SHIFU_CORRELATION_MULTI_THREADS,threads + ""String_Node_Str""));
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",threads);
  }
  if (threads <= 0) {
    threads=6;
  }
  return threads;
}",0.9936507936507936
31770,"/** 
 * To do some auto variable selection like remove ID-like variables, remove variable with high missing rate.
 * @throws IOException any IO exception
 */
private void autoVarSelCondition() throws IOException {
  for (  ColumnConfig config : columnConfigList) {
    if (!config.isTarget() && !config.isMeta() && !config.isForceSelect()&& config.isFinalSelect()&& isHighMissingRateColumn(config)) {
      log.warn(""String_Node_Str"",config.getColumnName());
      config.setFinalSelect(false);
    }
  }
  if (!ShifuFileUtils.isFileExists(pathFinder.getLocalCorrelationCsvPath(),SourceType.LOCAL)) {
    return;
  }
  BufferedReader reader=ShifuFileUtils.getReader(pathFinder.getLocalCorrelationCsvPath(),SourceType.LOCAL);
  int lineNum=0;
  try {
    String line=null;
    while ((line=reader.readLine()) != null) {
      lineNum+=1;
      if (lineNum <= 2) {
        continue;
      }
      String[] columns=CommonUtils.split(line,""String_Node_Str"");
      if (columns != null && columns.length == columnConfigList.size() + 2) {
        int columnIndex=Integer.parseInt(columns[0]);
        ColumnConfig config=this.columnConfigList.get(columnIndex);
        if (config.isFinalSelect() || config.isTarget()) {
          double[] corrArray=getCorrArray(columns);
          for (int i=0; i < corrArray.length; i++) {
            if (config.getColumnNum() < i && columnConfigList.get(i).isFinalSelect()) {
              if (Math.abs(corrArray[i]) > (modelConfig.getVarSelect().getCorrelationThreshold() * 1.000005d)) {
                if (config.isTarget() && columnConfigList.get(i).isFinalSelect()) {
                  log.warn(""String_Node_Str"",columnIndex,i,i);
                  columnConfigList.get(i).setFinalSelect(false);
                }
 else                 if (config.isFinalSelect() && columnConfigList.get(i).isTarget()) {
                  log.warn(""String_Node_Str"",columnIndex,i,columnIndex);
                  config.setFinalSelect(false);
                }
 else {
                  if (config.getIv() > columnConfigList.get(i).getIv()) {
                    log.warn(""String_Node_Str"",corrArray[i],config.getColumnNum(),i,modelConfig.getVarSelect().getCorrelationThreshold(),i);
                    columnConfigList.get(i).setFinalSelect(false);
                  }
 else {
                    log.warn(""String_Node_Str"",corrArray[i],config.getColumnNum(),i,modelConfig.getVarSelect().getCorrelationThreshold(),config.getColumnNum());
                    config.setFinalSelect(false);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}","/** 
 * To do some auto variable selection like remove ID-like variables, remove variable with high missing rate.
 * @throws IOException any IO exception
 */
private void autoVarSelCondition() throws IOException {
  for (  ColumnConfig config : columnConfigList) {
    if (!config.isTarget() && !config.isMeta() && !config.isForceSelect()&& config.isFinalSelect()&& isHighMissingRateColumn(config)) {
      log.warn(""String_Node_Str"",config.getColumnName());
      config.setFinalSelect(false);
    }
  }
  if (!ShifuFileUtils.isFileExists(pathFinder.getLocalCorrelationCsvPath(),SourceType.LOCAL)) {
    return;
  }
  BufferedReader reader=ShifuFileUtils.getReader(pathFinder.getLocalCorrelationCsvPath(),SourceType.LOCAL);
  int lineNum=0;
  try {
    String line=null;
    while ((line=reader.readLine()) != null) {
      lineNum+=1;
      if (lineNum <= 2) {
        continue;
      }
      String[] columns=CommonUtils.split(line,""String_Node_Str"");
      if (columns != null && columns.length == columnConfigList.size() + 2) {
        int columnIndex=Integer.parseInt(columns[0].trim());
        ColumnConfig config=this.columnConfigList.get(columnIndex);
        if (config.isFinalSelect() || config.isTarget()) {
          double[] corrArray=getCorrArray(columns);
          for (int i=0; i < corrArray.length; i++) {
            if (config.getColumnNum() < i && (columnConfigList.get(i).isTarget() || columnConfigList.get(i).isFinalSelect())) {
              if (Math.abs(corrArray[i]) > (modelConfig.getVarSelect().getCorrelationThreshold() * 1.000005d)) {
                if (config.isTarget() && columnConfigList.get(i).isFinalSelect()) {
                  log.warn(""String_Node_Str"",columnIndex,i,i);
                  columnConfigList.get(i).setFinalSelect(false);
                }
 else                 if (config.isFinalSelect() && columnConfigList.get(i).isTarget()) {
                  log.warn(""String_Node_Str"",columnIndex,i,columnIndex);
                  config.setFinalSelect(false);
                }
 else {
                  if (config.getIv() > columnConfigList.get(i).getIv()) {
                    log.warn(""String_Node_Str"",corrArray[i],config.getColumnNum(),i,modelConfig.getVarSelect().getCorrelationThreshold(),i);
                    columnConfigList.get(i).setFinalSelect(false);
                  }
 else {
                    log.warn(""String_Node_Str"",corrArray[i],config.getColumnNum(),i,modelConfig.getVarSelect().getCorrelationThreshold(),config.getColumnNum());
                    config.setFinalSelect(false);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}",0.9912655640215572
31771,"public RunModelWorker(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,EvalConfig evalConfig,ActorRef parentActorRef,ActorRef nextActorRef) throws IOException {
  super(modelConfig,columnConfigList,parentActorRef,nextActorRef);
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,evalConfig,SourceType.LOCAL);
  String[] header=null;
  String delimiter=null;
  if (null == evalConfig || null == evalConfig.getDataSet().getHeaderPath() || null == evalConfig.getDataSet().getHeaderDelimiter()) {
    header=CommonUtils.getFinalHeaders(modelConfig);
    delimiter=modelConfig.getDataSetDelimiter();
  }
 else {
    header=CommonUtils.getFinalHeaders(evalConfig);
    delimiter=evalConfig.getDataSet().getDataDelimiter();
  }
  modelRunner=new ModelRunner(modelConfig,columnConfigList,header,delimiter,models);
  List<ModelSpec> subModels=CommonUtils.loadSubModels(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource(),evalConfig.getGbtConvertToProb());
  if (CollectionUtils.isNotEmpty(subModels)) {
    for (    ModelSpec modelSpec : subModels) {
      this.modelRunner.addSubModels(modelSpec);
    }
  }
}","public RunModelWorker(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,EvalConfig evalConfig,ActorRef parentActorRef,ActorRef nextActorRef) throws IOException {
  super(modelConfig,columnConfigList,parentActorRef,nextActorRef);
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,evalConfig,SourceType.LOCAL);
  String[] header=null;
  String delimiter=null;
  if (null == evalConfig || null == evalConfig.getDataSet().getHeaderPath() || null == evalConfig.getDataSet().getHeaderDelimiter()) {
    header=CommonUtils.getFinalHeaders(modelConfig);
    delimiter=modelConfig.getDataSetDelimiter();
  }
 else {
    header=CommonUtils.getFinalHeaders(evalConfig);
    delimiter=evalConfig.getDataSet().getDataDelimiter();
  }
  modelRunner=new ModelRunner(modelConfig,columnConfigList,header,delimiter,models);
  boolean gbtConvertToProp=((evalConfig == null) ? false : evalConfig.getGbtConvertToProb());
  SourceType sourceType=((evalConfig == null) ? modelConfig.getDataSet().getSource() : evalConfig.getDataSet().getSource());
  List<ModelSpec> subModels=CommonUtils.loadSubModels(modelConfig,this.columnConfigList,evalConfig,sourceType,gbtConvertToProp);
  if (CollectionUtils.isNotEmpty(subModels)) {
    for (    ModelSpec modelSpec : subModels) {
      this.modelRunner.addSubModels(modelSpec);
    }
  }
}",0.8848631239935588
31772,"public ConfusionMatrix(ModelConfig modelConfig,EvalConfig evalConfig) throws IOException {
  this.modelConfig=modelConfig;
  this.evalConfig=evalConfig;
  String[] evalScoreHeader=getEvalScoreHeader();
  if (ArrayUtils.isEmpty(evalScoreHeader)) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_NO_EVALSCORE_HEADER);
  }
  if (StringUtils.isEmpty(evalConfig.getPerformanceScoreSelector())) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_SELECTOR_EMPTY);
  }
  if (modelConfig.isRegression()) {
    scoreColumnIndex=getColumnIndex(evalScoreHeader,StringUtils.trimToEmpty(evalConfig.getPerformanceScoreSelector()));
    if (scoreColumnIndex < 0) {
      throw new ShifuException(ShifuErrorCode.ERROR_EVAL_SELECTOR_EMPTY);
    }
  }
  targetColumnIndex=getColumnIndex(evalScoreHeader,StringUtils.trimToEmpty(modelConfig.getTargetColumnName(evalConfig)));
  if (targetColumnIndex < 0) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_TARGET_NOT_FOUND);
  }
  weightColumnIndex=getColumnIndex(evalScoreHeader,StringUtils.trimToEmpty(evalConfig.getDataSet().getWeightColumnName()));
  multiClassScore1Index=targetColumnIndex + 2;
  multiClassModelCnt=CommonUtils.getBasicModelsCnt(modelConfig,evalConfig,evalConfig.getDataSet().getSource());
  metaColumns=evalConfig.getAllMetaColumns(modelConfig).size();
}","public ConfusionMatrix(ModelConfig modelConfig,EvalConfig evalConfig) throws IOException {
  this.modelConfig=modelConfig;
  this.evalConfig=evalConfig;
  String[] evalScoreHeader=getEvalScoreHeader();
  if (ArrayUtils.isEmpty(evalScoreHeader)) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_NO_EVALSCORE_HEADER);
  }
  if (StringUtils.isEmpty(evalConfig.getPerformanceScoreSelector())) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_SELECTOR_EMPTY);
  }
  if (modelConfig.isRegression()) {
    scoreColumnIndex=getColumnIndex(evalScoreHeader,StringUtils.trimToEmpty(evalConfig.getPerformanceScoreSelector()));
    if (scoreColumnIndex < 0) {
      throw new ShifuException(ShifuErrorCode.ERROR_EVAL_SELECTOR_EMPTY);
    }
  }
  targetColumnIndex=getColumnIndex(evalScoreHeader,StringUtils.trimToEmpty(modelConfig.getTargetColumnName(evalConfig)));
  if (targetColumnIndex < 0) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_TARGET_NOT_FOUND);
  }
  weightColumnIndex=getColumnIndex(evalScoreHeader,StringUtils.trimToEmpty(evalConfig.getDataSet().getWeightColumnName()));
  multiClassScore1Index=targetColumnIndex + 2;
  try {
    multiClassModelCnt=CommonUtils.getBasicModelsCnt(modelConfig,evalConfig,evalConfig.getDataSet().getSource());
  }
 catch (  java.io.FileNotFoundException e) {
    multiClassModelCnt=0;
  }
  metaColumns=evalConfig.getAllMetaColumns(modelConfig).size();
}",0.9595038307187158
31773,"public void generateHtml(EvalConfig evalConfig,ModelConfig modelConfig,String fileName,List<PerformanceResult> results,List<String> names) throws IOException {
  BufferedWriter writer=null;
  try {
    writer=ShifuFileUtils.getWriter(fileName,SourceType.LOCAL);
    writer.write(GainChartTemplate.HIGHCHART_BASE_BEGIN);
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + j + ""String_Node_Str"");
      for (int i=0; i < result.weightedGains.size(); i++) {
        PerformanceObject po=result.weightedGains.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedGains.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.weightedGains.size(); i++) {
        PerformanceObject po=result.weightedGains.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedGains.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (2 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.gains.size(); i++) {
        PerformanceObject po=result.gains.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.gains.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (3 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.gains.size(); i++) {
        PerformanceObject po=result.gains.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.gains.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (4 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.modelScoreList.size(); i++) {
        PerformanceObject po=result.modelScoreList.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.binLowestScore),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.modelScoreList.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (5 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.modelScoreList.size(); i++) {
        PerformanceObject po=result.modelScoreList.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.binLowestScore),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.modelScoreList.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (6 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.modelScoreList.size(); i++) {
        PerformanceObject po=result.modelScoreList.get(i);
        writer.write(String.format(GainChartTemplate.SCORE_DATA_FORMAT,GainChartTemplate.DF.format(po.scoreCount),GainChartTemplate.DF.format(po.binLowestScore),GainChartTemplate.DF.format(po.scoreCount),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.modelScoreList.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    int currIndex=0;
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(GainChartTemplate.HIGHCHART_BASE_END);
  }
  finally {
    if (writer != null) {
      writer.close();
    }
  }
}","public void generateHtml(EvalConfig evalConfig,ModelConfig modelConfig,String fileName,List<PerformanceResult> results,List<String> names) throws IOException {
  BufferedWriter writer=null;
  try {
    writer=ShifuFileUtils.getWriter(fileName,SourceType.LOCAL);
    writer.write(GainChartTemplate.HIGHCHART_BASE_BEGIN);
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_3,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_BUTTON_PANEL_TEMPLATE_4,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(String.format(GainChartTemplate.HIGHCHART_DIV,""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + j + ""String_Node_Str"");
      for (int i=0; i < result.weightedGains.size(); i++) {
        PerformanceObject po=result.weightedGains.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedGains.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.weightedGains.size(); i++) {
        PerformanceObject po=result.weightedGains.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.weightedGains.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (2 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.gains.size(); i++) {
        PerformanceObject po=result.gains.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.gains.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (3 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.gains.size(); i++) {
        PerformanceObject po=result.gains.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.gains.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (4 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.modelScoreList.size(); i++) {
        PerformanceObject po=result.modelScoreList.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.weightedRecall * 100),GainChartTemplate.DF.format(po.binLowestScore),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.weightedPrecision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.modelScoreList.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (5 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.modelScoreList.size(); i++) {
        PerformanceObject po=result.modelScoreList.get(i);
        writer.write(String.format(GainChartTemplate.DATA_FORMAT,GainChartTemplate.DF.format(po.recall * 100),GainChartTemplate.DF.format(po.binLowestScore),GainChartTemplate.DF.format(po.weightedActionRate * 100),GainChartTemplate.DF.format(po.precision * 100),GainChartTemplate.DF.format(po.actionRate * 100),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.modelScoreList.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    for (int j=0; j < results.size(); j++) {
      PerformanceResult result=results.get(j);
      writer.write(""String_Node_Str"" + (6 * results.size() + j) + ""String_Node_Str"");
      for (int i=0; i < result.modelScoreList.size(); i++) {
        PerformanceObject po=result.modelScoreList.get(i);
        writer.write(String.format(GainChartTemplate.SCORE_DATA_FORMAT,GainChartTemplate.DF.format(po.scoreCount),GainChartTemplate.DF.format(po.binLowestScore),GainChartTemplate.DF.format(po.scoreCount),GainChartTemplate.DF.format(po.binLowestScore)));
        if (i != result.modelScoreList.size() - 1) {
          writer.write(""String_Node_Str"");
        }
      }
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    int currIndex=0;
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_CHART_TEMPLATE_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.SCORE_HIGHCHART_CHART_PREFIX,""String_Node_Str"",""String_Node_Str"",modelConfig.getBasic().getName(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    for (int i=0; i < results.size(); i++) {
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"" + (currIndex++) + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + names.get(i) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      if (i != results.size() - 1) {
        writer.write(""String_Node_Str"");
      }
    }
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(String.format(GainChartTemplate.HIGHCHART_LIST_TOGGLE_TEMPLATE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(GainChartTemplate.HIGHCHART_BASE_END);
  }
  finally {
    if (writer != null) {
      writer.close();
    }
  }
}",0.9982108496776154
31774,"public RunModelWorker(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,EvalConfig evalConfig,ActorRef parentActorRef,ActorRef nextActorRef) throws IOException {
  super(modelConfig,columnConfigList,parentActorRef,nextActorRef);
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,columnConfigList,evalConfig,SourceType.LOCAL);
  String[] header=null;
  String delimiter=null;
  if (null == evalConfig || null == evalConfig.getDataSet().getHeaderPath() || null == evalConfig.getDataSet().getHeaderDelimiter()) {
    header=CommonUtils.getFinalHeaders(modelConfig);
    delimiter=modelConfig.getDataSetDelimiter();
  }
 else {
    header=CommonUtils.getFinalHeaders(evalConfig);
    delimiter=evalConfig.getDataSet().getDataDelimiter();
  }
  modelRunner=new ModelRunner(modelConfig,columnConfigList,header,delimiter,models);
}","public RunModelWorker(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,EvalConfig evalConfig,ActorRef parentActorRef,ActorRef nextActorRef) throws IOException {
  super(modelConfig,columnConfigList,parentActorRef,nextActorRef);
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,evalConfig,SourceType.LOCAL);
  String[] header=null;
  String delimiter=null;
  if (null == evalConfig || null == evalConfig.getDataSet().getHeaderPath() || null == evalConfig.getDataSet().getHeaderDelimiter()) {
    header=CommonUtils.getFinalHeaders(modelConfig);
    delimiter=modelConfig.getDataSetDelimiter();
  }
 else {
    header=CommonUtils.getFinalHeaders(evalConfig);
    delimiter=evalConfig.getDataSet().getDataDelimiter();
  }
  modelRunner=new ModelRunner(modelConfig,columnConfigList,header,delimiter,models);
}",0.9898628503279666
31775,"/** 
 * Write the file header for score file
 * @throws IOException if any ip exception
 */
private void writeScoreHeader() throws IOException {
  StringBuilder buf=new StringBuilder();
  buf.append(modelConfig.getTargetColumnName(evalConfig) == null ? ""String_Node_Str"" : modelConfig.getTargetColumnName(evalConfig));
  buf.append(""String_Node_Str"" + (StringUtils.isBlank(evalConfig.getDataSet().getWeightColumnName()) ? ""String_Node_Str"" : evalConfig.getDataSet().getWeightColumnName()));
  buf.append(""String_Node_Str"");
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,columnConfigList,evalConfig,SourceType.LOCAL);
  for (int i=0; i < models.size(); i++) {
    buf.append(""String_Node_Str"" + i);
  }
  List<String> metaColumns=evalConfig.getAllMetaColumns(modelConfig);
  if (CollectionUtils.isNotEmpty(metaColumns)) {
    for (    String columnName : metaColumns) {
      buf.append(""String_Node_Str"" + columnName);
    }
  }
  scoreWriter.write(buf.toString() + ""String_Node_Str"");
}","/** 
 * Write the file header for score file
 * @throws IOException if any ip exception
 */
private void writeScoreHeader() throws IOException {
  StringBuilder buf=new StringBuilder();
  buf.append(modelConfig.getTargetColumnName(evalConfig) == null ? ""String_Node_Str"" : modelConfig.getTargetColumnName(evalConfig));
  buf.append(""String_Node_Str"" + (StringUtils.isBlank(evalConfig.getDataSet().getWeightColumnName()) ? ""String_Node_Str"" : evalConfig.getDataSet().getWeightColumnName()));
  buf.append(""String_Node_Str"");
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,evalConfig,SourceType.LOCAL);
  for (int i=0; i < models.size(); i++) {
    buf.append(""String_Node_Str"" + i);
  }
  List<String> metaColumns=evalConfig.getAllMetaColumns(modelConfig);
  if (CollectionUtils.isNotEmpty(metaColumns)) {
    for (    String columnName : metaColumns) {
      buf.append(""String_Node_Str"" + columnName);
    }
  }
  scoreWriter.write(buf.toString() + ""String_Node_Str"");
}",0.9914615770969362
31776,"public ConfusionMatrix(ModelConfig modelConfig,EvalConfig evalConfig) throws IOException {
  this.modelConfig=modelConfig;
  this.evalConfig=evalConfig;
  String[] evalScoreHeader=getEvalScoreHeader();
  if (ArrayUtils.isEmpty(evalScoreHeader)) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_NO_EVALSCORE_HEADER);
  }
  if (StringUtils.isEmpty(evalConfig.getPerformanceScoreSelector())) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_SELECTOR_EMPTY);
  }
  if (modelConfig.isRegression()) {
    scoreColumnIndex=ArrayUtils.indexOf(evalScoreHeader,evalConfig.getPerformanceScoreSelector().trim());
    if (scoreColumnIndex < 0) {
      throw new ShifuException(ShifuErrorCode.ERROR_EVAL_SELECTOR_EMPTY);
    }
  }
  targetColumnIndex=ArrayUtils.indexOf(evalScoreHeader,modelConfig.getTargetColumnName(evalConfig));
  if (targetColumnIndex < 0) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_TARGET_NOT_FOUND);
  }
  weightColumnIndex=ArrayUtils.indexOf(evalScoreHeader,evalConfig.getDataSet().getWeightColumnName());
  multiClassScore1Index=targetColumnIndex + 2;
  multiClassModelCnt=(evalScoreHeader.length - multiClassScore1Index) / modelConfig.getTags().size();
}","public ConfusionMatrix(ModelConfig modelConfig,EvalConfig evalConfig) throws IOException {
  this.modelConfig=modelConfig;
  this.evalConfig=evalConfig;
  String[] evalScoreHeader=getEvalScoreHeader();
  if (ArrayUtils.isEmpty(evalScoreHeader)) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_NO_EVALSCORE_HEADER);
  }
  if (StringUtils.isEmpty(evalConfig.getPerformanceScoreSelector())) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_SELECTOR_EMPTY);
  }
  if (modelConfig.isRegression()) {
    scoreColumnIndex=ArrayUtils.indexOf(evalScoreHeader,evalConfig.getPerformanceScoreSelector().trim());
    if (scoreColumnIndex < 0) {
      throw new ShifuException(ShifuErrorCode.ERROR_EVAL_SELECTOR_EMPTY);
    }
  }
  targetColumnIndex=ArrayUtils.indexOf(evalScoreHeader,modelConfig.getTargetColumnName(evalConfig));
  if (targetColumnIndex < 0) {
    throw new ShifuException(ShifuErrorCode.ERROR_EVAL_TARGET_NOT_FOUND);
  }
  weightColumnIndex=ArrayUtils.indexOf(evalScoreHeader,evalConfig.getDataSet().getWeightColumnName());
  multiClassScore1Index=targetColumnIndex + 2;
  multiClassModelCnt=CommonUtils.getBasicModelsCnt(modelConfig,evalConfig,evalConfig.getDataSet().getSource());
  metaColumns=evalConfig.getAllMetaColumns(modelConfig).size();
}",0.9124087591240876
31777,"@SuppressWarnings(""String_Node_Str"") public void computeConfusionMatixForMultipleClassification(long records) throws IOException {
  PathFinder pathFinder=new PathFinder(modelConfig);
  SourceType sourceType=evalConfig.getDataSet().getSource();
  List<Scanner> scanners=ShifuFileUtils.getDataScanners(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  boolean isDir=ShifuFileUtils.isDir(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  int cnt=0;
  Set<String> posTags=new HashSet<String>(modelConfig.getPosTags(evalConfig));
  Set<String> negTags=new HashSet<String>(modelConfig.getNegTags(evalConfig));
  Set<String> tagSet=new HashSet<String>(modelConfig.getFlattenTags(modelConfig.getPosTags(evalConfig),modelConfig.getNegTags(evalConfig)));
  List<Set<String>> tags=modelConfig.getSetTags(modelConfig.getPosTags(evalConfig),modelConfig.getNegTags(evalConfig));
  int classes=tags.size();
  long[][] confusionMatrix=new long[classes][classes];
  for (  Scanner scanner : scanners) {
    while (scanner.hasNext()) {
      if ((++cnt) % 100000 == 0) {
        log.info(""String_Node_Str"" + cnt + ""String_Node_Str"");
      }
      String[] raw=scanner.nextLine().split(""String_Node_Str"");
      if (!isDir && cnt == 1) {
        continue;
      }
      String tag=raw[targetColumnIndex];
      if (modelConfig.isRegression()) {
        if (StringUtils.isBlank(tag) || (!posTags.contains(tag) && !negTags.contains(tag))) {
          if (rd.nextDouble() < 0.01) {
            log.warn(""String_Node_Str"");
          }
          continue;
        }
      }
 else {
        if (StringUtils.isBlank(tag) || !tagSet.contains(tag)) {
          if (rd.nextDouble() < 0.01) {
            log.warn(""String_Node_Str"");
          }
          continue;
        }
      }
      double[] scores=new double[classes];
      int maxIndex=-1;
      double maxScore=Double.NEGATIVE_INFINITY;
      if (CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm()) && !modelConfig.getTrain().isOneVsAll()) {
        double[] tagCounts=new double[tags.size()];
        for (int i=this.multiClassScore1Index; i < raw.length; i++) {
          double dd=NumberFormatUtils.getDouble(raw[i],0d);
          tagCounts[(int)dd]+=1d;
        }
        double maxVotes=-1d;
        for (int i=0; i < tagCounts.length; i++) {
          if (tagCounts[i] > maxVotes) {
            maxIndex=i;
            maxScore=maxVotes=tagCounts[i];
          }
        }
      }
 else       if ((CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm()) || NNConstants.NN_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) && modelConfig.getTrain().isOneVsAll()) {
        for (int i=this.multiClassScore1Index; i < raw.length; i++) {
          double dd=NumberFormatUtils.getDouble(raw[i],0d);
          if (dd > maxScore) {
            maxScore=dd;
            maxIndex=i - this.multiClassScore1Index;
          }
        }
      }
 else {
        for (int i=0; i < classes; i++) {
          for (int j=0; j < multiClassModelCnt; j++) {
            double dd=NumberFormatUtils.getDouble(raw[this.multiClassScore1Index + j * classes + i],0d);
            scores[i]+=dd;
          }
          scores[i]/=multiClassModelCnt;
          if (scores[i] > maxScore) {
            maxIndex=i;
            maxScore=scores[i];
          }
        }
      }
      int tagIndex=-1;
      for (int i=0; i < tags.size(); i++) {
        if (tags.get(i).contains(tag)) {
          tagIndex=i;
          break;
        }
      }
      confusionMatrix[tagIndex][maxIndex]+=1L;
    }
    scanner.close();
  }
  Path localEvalMatrixFile=new Path(pathFinder.getEvalLocalMultiMatrixFile(evalConfig.getName()));
  log.info(""String_Node_Str"",localEvalMatrixFile);
  if (HDFSUtils.getLocalFS().exists(localEvalMatrixFile)) {
    HDFSUtils.getLocalFS().delete(localEvalMatrixFile);
  }
  BufferedWriter writer=null;
  try {
    writer=ShifuFileUtils.getWriter(localEvalMatrixFile.toString(),SourceType.LOCAL);
    writer.write(""String_Node_Str"" + StringUtils.join(tags,""String_Node_Str"") + ""String_Node_Str"");
    for (int i=0; i < confusionMatrix.length; i++) {
      StringBuilder sb=new StringBuilder(300);
      sb.append(tags.get(i));
      for (int j=0; j < confusionMatrix[i].length; j++) {
        sb.append(""String_Node_Str"").append(confusionMatrix[i][j]);
      }
      sb.append(""String_Node_Str"");
      writer.write(tags.get(i) + ""String_Node_Str"" + sb.toString());
    }
  }
  finally {
    writer.close();
  }
  log.info(""String_Node_Str"");
  log.info(String.format(""String_Node_Str"",""String_Node_Str"",tags.toString()));
  for (int i=0; i < confusionMatrix.length; i++) {
    log.info(String.format(""String_Node_Str"",tags.get(i),Arrays.toString(confusionMatrix[i])));
  }
}","@SuppressWarnings(""String_Node_Str"") public void computeConfusionMatixForMultipleClassification(long records) throws IOException {
  PathFinder pathFinder=new PathFinder(modelConfig);
  SourceType sourceType=evalConfig.getDataSet().getSource();
  List<Scanner> scanners=ShifuFileUtils.getDataScanners(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  boolean isDir=ShifuFileUtils.isDir(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  int cnt=0;
  Set<String> tagSet=new HashSet<String>(modelConfig.getFlattenTags(modelConfig.getPosTags(evalConfig),modelConfig.getNegTags(evalConfig)));
  List<Set<String>> tags=modelConfig.getSetTags(modelConfig.getPosTags(evalConfig),modelConfig.getNegTags(evalConfig));
  int classes=tags.size();
  long[][] confusionMatrix=new long[classes][classes];
  for (  Scanner scanner : scanners) {
    while (scanner.hasNext()) {
      if ((++cnt) % 100000 == 0) {
        log.info(""String_Node_Str"" + cnt + ""String_Node_Str"");
      }
      String[] raw=scanner.nextLine().split(""String_Node_Str"");
      if (!isDir && cnt == 1) {
        continue;
      }
      String tag=raw[targetColumnIndex];
      if (StringUtils.isBlank(tag) || !tagSet.contains(tag)) {
        if (rd.nextDouble() < 0.01) {
          log.warn(""String_Node_Str"");
        }
        continue;
      }
      double[] scores=new double[classes];
      int maxIndex=-1;
      double maxScore=Double.NEGATIVE_INFINITY;
      if (CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm()) && !modelConfig.getTrain().isOneVsAll()) {
        double[] tagCounts=new double[tags.size()];
        for (int i=this.multiClassScore1Index; i < (raw.length - this.metaColumns); i++) {
          double dd=NumberFormatUtils.getDouble(raw[i],0d);
          tagCounts[(int)dd]+=1d;
        }
        double maxVotes=-1d;
        for (int i=0; i < tagCounts.length; i++) {
          if (tagCounts[i] > maxVotes) {
            maxIndex=i;
            maxScore=maxVotes=tagCounts[i];
          }
        }
      }
 else       if ((CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm()) || NNConstants.NN_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) && modelConfig.getTrain().isOneVsAll()) {
        for (int i=this.multiClassScore1Index; i < (classes + this.multiClassScore1Index); i++) {
          double dd=NumberFormatUtils.getDouble(raw[i],0d);
          if (dd > maxScore) {
            maxScore=dd;
            maxIndex=i - this.multiClassScore1Index;
          }
        }
      }
 else {
        for (int i=0; i < classes; i++) {
          for (int j=0; j < multiClassModelCnt; j++) {
            double dd=NumberFormatUtils.getDouble(raw[this.multiClassScore1Index + j * classes + i],0d);
            scores[i]+=dd;
          }
          scores[i]/=multiClassModelCnt;
          if (scores[i] > maxScore) {
            maxIndex=i;
            maxScore=scores[i];
          }
        }
      }
      int tagIndex=-1;
      for (int i=0; i < tags.size(); i++) {
        if (tags.get(i).contains(tag)) {
          tagIndex=i;
          break;
        }
      }
      confusionMatrix[tagIndex][maxIndex]+=1L;
    }
    scanner.close();
  }
  Path localEvalMatrixFile=new Path(pathFinder.getEvalLocalMultiMatrixFile(evalConfig.getName()));
  log.info(""String_Node_Str"",localEvalMatrixFile);
  if (HDFSUtils.getLocalFS().exists(localEvalMatrixFile)) {
    HDFSUtils.getLocalFS().delete(localEvalMatrixFile);
  }
  BufferedWriter writer=null;
  try {
    writer=ShifuFileUtils.getWriter(localEvalMatrixFile.toString(),SourceType.LOCAL);
    writer.write(""String_Node_Str"" + StringUtils.join(tags,""String_Node_Str"") + ""String_Node_Str"");
    for (int i=0; i < confusionMatrix.length; i++) {
      StringBuilder sb=new StringBuilder(300);
      sb.append(tags.get(i));
      for (int j=0; j < confusionMatrix[i].length; j++) {
        sb.append(""String_Node_Str"").append(confusionMatrix[i][j]);
      }
      sb.append(""String_Node_Str"");
      writer.write(sb.toString());
    }
  }
  finally {
    writer.close();
  }
  log.info(""String_Node_Str"");
  log.info(String.format(""String_Node_Str"",""String_Node_Str"",tags.toString()));
  for (int i=0; i < confusionMatrix.length; i++) {
    log.info(String.format(""String_Node_Str"",tags.get(i),Arrays.toString(confusionMatrix[i])));
  }
}",0.9332746091169346
31778,"@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          tmpMap.put(config.getBinCategory().get(i),i);
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),new ArrayList<Data>());
  }
 else {
    if (Double.compare(validationRate,0d) != 0) {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
      this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
    }
 else {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.isAfterVarSelect=(inputOutputIndex[3] == 1);
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,columnConfigList,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}","@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          tmpMap.put(config.getBinCategory().get(i),i);
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),new ArrayList<Data>());
  }
 else {
    if (Double.compare(validationRate,0d) != 0) {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
      this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
    }
 else {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.isAfterVarSelect=(inputOutputIndex[3] == 1);
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}",0.998825236680257
31779,"private LogisticRegressionParams initOrRecoverParams(MasterContext<LogisticRegressionParams,LogisticRegressionParams> context){
  LOG.info(""String_Node_Str"");
  LogisticRegressionParams params=null;
  try {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    LR existingModel=(LR)CommonUtils.loadModel(modelConfig,columnConfigList,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    if (existingModel == null) {
      params=initWeights();
      LOG.info(""String_Node_Str"");
    }
 else {
      params=initModelParams(existingModel);
      LOG.info(""String_Node_Str"",modelPath);
    }
  }
 catch (  IOException e) {
    throw new GuaguaRuntimeException(e);
  }
  return params;
}","private LogisticRegressionParams initOrRecoverParams(MasterContext<LogisticRegressionParams,LogisticRegressionParams> context){
  LOG.info(""String_Node_Str"");
  LogisticRegressionParams params=null;
  try {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    LR existingModel=(LR)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    if (existingModel == null) {
      params=initWeights();
      LOG.info(""String_Node_Str"");
    }
 else {
      params=initModelParams(existingModel);
      LOG.info(""String_Node_Str"",modelPath);
    }
  }
 catch (  IOException e) {
    throw new GuaguaRuntimeException(e);
  }
  return params;
}",0.9888524590163934
31780,"private NNParams initOrRecoverParams(MasterContext<NNParams,NNParams> context){
  NNParams params=null;
  try {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    BasicNetwork existingModel=(BasicNetwork)CommonUtils.loadModel(modelConfig,columnConfigList,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    if (existingModel == null) {
      params=initWeights();
      LOG.info(""String_Node_Str"");
    }
 else {
      params=initModelParams(existingModel);
      LOG.info(""String_Node_Str"",modelPath);
    }
  }
 catch (  IOException e) {
    throw new GuaguaRuntimeException(e);
  }
  return params;
}","private NNParams initOrRecoverParams(MasterContext<NNParams,NNParams> context){
  NNParams params=null;
  try {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    BasicNetwork existingModel=(BasicNetwork)CommonUtils.loadModel(modelConfig,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    if (existingModel == null) {
      params=initWeights();
      LOG.info(""String_Node_Str"");
    }
 else {
      params=initModelParams(existingModel);
      LOG.info(""String_Node_Str"",modelPath);
    }
  }
 catch (  IOException e) {
    throw new GuaguaRuntimeException(e);
  }
  return params;
}",0.9876363636363636
31781,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected void setup(Context context) throws IOException, InterruptedException {
  loadConfigFiles(context);
  loadTagWeightNum();
  this.dataPurifier=new DataPurifier(this.modelConfig);
  this.outputKey=new IntWritable();
  this.outputValue=new Text();
  this.tags=new HashSet<String>(modelConfig.getFlattenTags());
  SourceType sourceType=this.modelConfig.getDataSet().getSource();
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,columnConfigList,null,sourceType);
  this.headers=CommonUtils.getFinalHeaders(modelConfig);
  this.modelRunner=new ModelRunner(modelConfig,columnConfigList,this.headers,modelConfig.getDataSetDelimiter(),models);
  this.mos=new MultipleOutputs<NullWritable,Text>((TaskInputOutputContext)context);
  this.initFeatureStats();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected void setup(Context context) throws IOException, InterruptedException {
  loadConfigFiles(context);
  loadTagWeightNum();
  this.dataPurifier=new DataPurifier(this.modelConfig);
  this.outputKey=new IntWritable();
  this.outputValue=new Text();
  this.tags=new HashSet<String>(modelConfig.getFlattenTags());
  SourceType sourceType=this.modelConfig.getDataSet().getSource();
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,null,sourceType);
  this.headers=CommonUtils.getFinalHeaders(modelConfig);
  this.modelRunner=new ModelRunner(modelConfig,columnConfigList,this.headers,modelConfig.getDataSetDelimiter(),models);
  this.mos=new MultipleOutputs<NullWritable,Text>((TaskInputOutputContext)context);
  this.initFeatureStats();
}",0.9897528631705846
31782,"private boolean inputOutputModelCheckSuccess(FileSystem fileSystem,Path modelPath) throws IOException {
  MLInputOutput model=(MLInputOutput)CommonUtils.loadModel(this.modelConfig,this.columnConfigList,modelPath,fileSystem);
  int[] outputCandidateCounts=DTrainUtils.getInputOutputCandidateCounts(getColumnConfigList());
  return model.getInputCount() == outputCandidateCounts[0] && model.getOutputCount() == outputCandidateCounts[1];
}","private boolean inputOutputModelCheckSuccess(FileSystem fileSystem,Path modelPath) throws IOException {
  MLInputOutput model=(MLInputOutput)CommonUtils.loadModel(this.modelConfig,modelPath,fileSystem);
  int[] outputCandidateCounts=DTrainUtils.getInputOutputCandidateCounts(getColumnConfigList());
  return model.getInputCount() == outputCandidateCounts[0] && model.getOutputCount() == outputCandidateCounts[1];
}",0.9741176470588236
31783,"private int checkContinuousTraining(FileSystem fileSystem,List<String> localArgs,Path modelPath) throws IOException {
  int finalContinuous=0;
  if (Boolean.TRUE.toString().equals(this.modelConfig.getTrain().getIsContinuous().toString())) {
    if (this.isForVarSelect) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"");
    }
 else     if (!fileSystem.exists(modelPath)) {
      finalContinuous=0;
      LOG.info(""String_Node_Str"");
    }
 else     if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm()) && !inputOutputModelCheckSuccess(fileSystem,modelPath)) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"");
    }
 else     if (CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
      TreeModel model=(TreeModel)CommonUtils.loadModel(this.modelConfig,this.columnConfigList,modelPath,fileSystem);
      if (!model.getAlgorithm().equalsIgnoreCase(modelConfig.getAlgorithm())) {
        finalContinuous=0;
        LOG.warn(""String_Node_Str"");
      }
 else       if (!model.getLossStr().equalsIgnoreCase(this.modelConfig.getTrain().getParams().get(""String_Node_Str"").toString())) {
        finalContinuous=0;
        LOG.warn(""String_Node_Str"");
      }
 else       if (model.getTrees().size() == 0) {
        finalContinuous=0;
      }
 else       if (model.getTrees().size() >= Integer.valueOf(modelConfig.getTrain().getParams().get(""String_Node_Str"").toString())) {
        finalContinuous=-1;
      }
 else {
        finalContinuous=1;
      }
    }
 else     if (CommonConstants.RF_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"");
    }
 else {
      finalContinuous=1;
    }
  }
 else {
    finalContinuous=0;
  }
  localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CONTINUOUS_TRAINING,finalContinuous == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  return finalContinuous;
}","private int checkContinuousTraining(FileSystem fileSystem,List<String> localArgs,Path modelPath) throws IOException {
  int finalContinuous=0;
  if (Boolean.TRUE.toString().equals(this.modelConfig.getTrain().getIsContinuous().toString())) {
    if (this.isForVarSelect) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"");
    }
 else     if (!fileSystem.exists(modelPath)) {
      finalContinuous=0;
      LOG.info(""String_Node_Str"");
    }
 else     if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm()) && !inputOutputModelCheckSuccess(fileSystem,modelPath)) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"");
    }
 else     if (CommonConstants.GBT_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
      TreeModel model=(TreeModel)CommonUtils.loadModel(this.modelConfig,modelPath,fileSystem);
      if (!model.getAlgorithm().equalsIgnoreCase(modelConfig.getAlgorithm())) {
        finalContinuous=0;
        LOG.warn(""String_Node_Str"");
      }
 else       if (!model.getLossStr().equalsIgnoreCase(this.modelConfig.getTrain().getParams().get(""String_Node_Str"").toString())) {
        finalContinuous=0;
        LOG.warn(""String_Node_Str"");
      }
 else       if (model.getTrees().size() == 0) {
        finalContinuous=0;
      }
 else       if (model.getTrees().size() >= Integer.valueOf(modelConfig.getTrain().getParams().get(""String_Node_Str"").toString())) {
        finalContinuous=-1;
      }
 else {
        finalContinuous=1;
      }
    }
 else     if (CommonConstants.RF_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
      finalContinuous=0;
      LOG.warn(""String_Node_Str"");
    }
 else {
      finalContinuous=1;
    }
  }
 else {
    finalContinuous=0;
  }
  localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CONTINUOUS_TRAINING,finalContinuous == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  return finalContinuous;
}",0.9943877551020408
31784,"private void prepareCommonParams(boolean isGsMode,final List<String> args,final SourceType sourceType){
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  args.add(""String_Node_Str"");
  addRuntimeJars(args);
  args.add(""String_Node_Str"");
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedDataPath())).toString());
  }
 else {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedDataPath())).toString());
  }
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    args.add(""String_Node_Str"");
    args.add(ShifuInputFormat.class.getName());
  }
  String zkServers=Environment.getProperty(Environment.ZOO_KEEPER_SERVERS);
  if (StringUtils.isEmpty(zkServers)) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    args.add(""String_Node_Str"");
    args.add(zkServers);
  }
  if (LogisticRegressionContants.LR_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareLRParams(args,sourceType);
  }
 else   if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareNNParams(args,sourceType);
  }
 else   if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    this.prepareDTParams(args,sourceType);
  }
  args.add(""String_Node_Str"");
  int numTrainEpoches=super.getModelConfig().getTrain().getNumTrainEpochs();
  LOG.info(""String_Node_Str"",this.isForVarSelect(),isGsMode);
  if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg) && (this.isForVarSelect() || isGsMode) && numTrainEpoches >= VAR_SELECT_TRAINING_DECAY_EPOCHES_THRESHOLD) {
    numTrainEpoches=numTrainEpoches / 2;
  }
  if (CommonUtils.isDesicionTreeAlgorithm(alg) && numTrainEpoches <= 20000) {
    numTrainEpoches=20000;
  }
  numTrainEpoches=numTrainEpoches + 1;
  LOG.info(""String_Node_Str"",numTrainEpoches);
  args.add(String.valueOf(numTrainEpoches));
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedValidationDataPath(sourceType))).toString()));
  }
 else {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedValidationDataPath(sourceType))).toString()));
  }
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,Constants.DEFAULT_JOB_QUEUE)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getModelConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.MODELSET_SOURCE_TYPE,sourceType));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DRY_DTRAIN,isDryTrain()));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.NN_POISON_SAMPLER,Environment.getProperty(NNConstants.NN_POISON_SAMPLER,""String_Node_Str"")));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,GuaguaConstants.GUAGUA_COMPUTATION_TIME_THRESHOLD,60 * 1000L));
  setHeapSizeAndSplitSize(args);
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",modelConfig.getTrain().getWorkerThreadCount() == null ? 1 : modelConfig.getTrain().getWorkerThreadCount()));
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,entry.getKey().toString(),entry.getValue().toString()));
    }
  }
}","private void prepareCommonParams(boolean isGsMode,final List<String> args,final SourceType sourceType){
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  args.add(""String_Node_Str"");
  addRuntimeJars(args);
  args.add(""String_Node_Str"");
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedDataPath())).toString());
  }
 else {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedDataPath())).toString());
  }
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    args.add(""String_Node_Str"");
    args.add(ShifuInputFormat.class.getName());
  }
  String zkServers=Environment.getProperty(Environment.ZOO_KEEPER_SERVERS);
  if (StringUtils.isEmpty(zkServers)) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    args.add(""String_Node_Str"");
    args.add(zkServers);
  }
  if (LogisticRegressionContants.LR_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareLRParams(args,sourceType);
  }
 else   if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareNNParams(args,sourceType);
  }
 else   if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    this.prepareDTParams(args,sourceType);
  }
  args.add(""String_Node_Str"");
  int numTrainEpoches=super.getModelConfig().getTrain().getNumTrainEpochs();
  LOG.debug(""String_Node_Str"",this.isForVarSelect(),isGsMode);
  if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg) && (this.isForVarSelect() || isGsMode) && numTrainEpoches >= VAR_SELECT_TRAINING_DECAY_EPOCHES_THRESHOLD) {
    numTrainEpoches=numTrainEpoches / 2;
  }
  if (CommonUtils.isDesicionTreeAlgorithm(alg) && numTrainEpoches <= 20000) {
    numTrainEpoches=20000;
  }
  numTrainEpoches=numTrainEpoches + 1;
  LOG.info(""String_Node_Str"",numTrainEpoches);
  args.add(String.valueOf(numTrainEpoches));
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedValidationDataPath(sourceType))).toString()));
  }
 else {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedValidationDataPath(sourceType))).toString()));
  }
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,Constants.DEFAULT_JOB_QUEUE)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getModelConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.MODELSET_SOURCE_TYPE,sourceType));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DRY_DTRAIN,isDryTrain()));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.NN_POISON_SAMPLER,Environment.getProperty(NNConstants.NN_POISON_SAMPLER,""String_Node_Str"")));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,GuaguaConstants.GUAGUA_COMPUTATION_TIME_THRESHOLD,60 * 1000L));
  setHeapSizeAndSplitSize(args);
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",modelConfig.getTrain().getWorkerThreadCount() == null ? 1 : modelConfig.getTrain().getWorkerThreadCount()));
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,entry.getKey().toString(),entry.getValue().toString()));
    }
  }
}",0.9989357928343384
31785,"/** 
 * Check is high rate is very high.
 */
private boolean isHighMissingRateColumn(ColumnConfig config){
  Double missingPercentage=config.getMissingPercentage();
  if (missingPercentage != null && missingPercentage >= modelConfig.getVarSelect().getMissingRateThreshold()) {
    return true;
  }
  return false;
}","/** 
 * Check is missing rate is over threshold.
 */
private boolean isHighMissingRateColumn(ColumnConfig config){
  Double missingPercentage=config.getMissingPercentage();
  if (missingPercentage != null && missingPercentage >= modelConfig.getVarSelect().getMissingRateThreshold()) {
    return true;
  }
  return false;
}",0.927899686520376
31786,"@SuppressWarnings(""String_Node_Str"") @Override public DataBag exec(Tuple input) throws IOException {
  DataBag bag=BagFactory.getInstance().newDefaultBag();
  TupleFactory tupleFactory=TupleFactory.getInstance();
  if (input == null) {
    return null;
  }
  int size=input.size();
  if (size == 0 || input.size() != this.columnConfigList.size()) {
    log.info(""String_Node_Str"" + input.size() + ""String_Node_Str""+ columnConfigList.size());
    throw new ShifuException(ShifuErrorCode.ERROR_NO_EQUAL_COLCONFIG);
  }
  if (input.get(tagColumnNum) == null) {
    throw new ShifuException(ShifuErrorCode.ERROR_NO_TARGET_COLUMN);
  }
  String tag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(tag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  Double rate=modelConfig.getBinningSampleRate();
  if (modelConfig.isBinningSampleNegOnly()) {
    if (super.negTagSet.contains(tag) && random.nextDouble() > rate) {
      return null;
    }
  }
 else {
    if (random.nextDouble() > rate) {
      return null;
    }
  }
  for (int i=0; i < size; i++) {
    ColumnConfig config=columnConfigList.get(i);
    boolean isPositive=false;
    if (modelConfig.isRegression()) {
      if (super.posTagSet.contains(tag)) {
        isPositive=true;
      }
 else       if (super.negTagSet.contains(tag)) {
        isPositive=false;
      }
 else {
        continue;
      }
    }
    if (!isValidRecord(modelConfig.isRegression(),isPositive,config)) {
      continue;
    }
    Tuple tuple=tupleFactory.newTuple(TOTAL_COLUMN_CNT);
    tuple.set(COLUMN_ID_INDX,i);
    tuple.set(COLUMN_VAL_INDX,(input.get(i) == null ? null : input.get(i).toString()));
    if (modelConfig.isRegression()) {
      if (super.posTagSet.contains(tag)) {
        tuple.set(COLUMN_TAG_INDX,true);
      }
      if (super.negTagSet.contains(tag)) {
        tuple.set(COLUMN_TAG_INDX,false);
      }
    }
 else {
      tuple.set(COLUMN_TAG_INDX,true);
    }
    tuple.set(COLUMN_WEIGHT_INDX,getWeightColumnVal(input));
    if (this.isAppendRandom) {
      tuple.set(COLUMN_SEED_INDX,Math.abs(random.nextInt() % 300));
    }
    bag.add(tuple);
  }
  return bag;
}","@SuppressWarnings(""String_Node_Str"") @Override public DataBag exec(Tuple input) throws IOException {
  DataBag bag=BagFactory.getInstance().newDefaultBag();
  TupleFactory tupleFactory=TupleFactory.getInstance();
  if (input == null) {
    return null;
  }
  int size=input.size();
  if (size == 0 || input.size() != this.columnConfigList.size()) {
    log.info(""String_Node_Str"" + input.size() + ""String_Node_Str""+ columnConfigList.size());
    throw new ShifuException(ShifuErrorCode.ERROR_NO_EQUAL_COLCONFIG);
  }
  if (input.get(tagColumnNum) == null) {
    log.info(""String_Node_Str"" + tagColumnNum + ""String_Node_Str""+ input.size()+ ""String_Node_Str""+ columnConfigList.size()+ ""String_Node_Str""+ input.toDelimitedString(""String_Node_Str"")+ ""String_Node_Str""+ input.get(tagColumnNum));
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  String tag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(tag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  Double rate=modelConfig.getBinningSampleRate();
  if (modelConfig.isBinningSampleNegOnly()) {
    if (super.negTagSet.contains(tag) && random.nextDouble() > rate) {
      return null;
    }
  }
 else {
    if (random.nextDouble() > rate) {
      return null;
    }
  }
  for (int i=0; i < size; i++) {
    ColumnConfig config=columnConfigList.get(i);
    boolean isPositive=false;
    if (modelConfig.isRegression()) {
      if (super.posTagSet.contains(tag)) {
        isPositive=true;
      }
 else       if (super.negTagSet.contains(tag)) {
        isPositive=false;
      }
 else {
        continue;
      }
    }
    if (!isValidRecord(modelConfig.isRegression(),isPositive,config)) {
      continue;
    }
    Tuple tuple=tupleFactory.newTuple(TOTAL_COLUMN_CNT);
    tuple.set(COLUMN_ID_INDX,i);
    tuple.set(COLUMN_VAL_INDX,(input.get(i) == null ? null : input.get(i).toString()));
    if (modelConfig.isRegression()) {
      if (super.posTagSet.contains(tag)) {
        tuple.set(COLUMN_TAG_INDX,true);
      }
      if (super.negTagSet.contains(tag)) {
        tuple.set(COLUMN_TAG_INDX,false);
      }
    }
 else {
      tuple.set(COLUMN_TAG_INDX,true);
    }
    tuple.set(COLUMN_WEIGHT_INDX,getWeightColumnVal(input));
    if (this.isAppendRandom) {
      tuple.set(COLUMN_SEED_INDX,Math.abs(random.nextInt() % 300));
    }
    bag.add(tuple);
  }
  return bag;
}",0.9033797216699802
31787,"@SuppressWarnings(""String_Node_Str"") public DataBag exec(Tuple input) throws IOException {
  DataBag bag=BagFactory.getInstance().newDefaultBag();
  TupleFactory tupleFactory=TupleFactory.getInstance();
  if (input == null) {
    return null;
  }
  int size=input.size();
  if (size == 0 || input.size() < this.columnConfigList.size()) {
    log.info(""String_Node_Str"" + input.size() + ""String_Node_Str""+ columnConfigList.size());
    throw new ShifuException(ShifuErrorCode.ERROR_NO_EQUAL_COLCONFIG);
  }
  if (input.get(tagColumnNum) == null) {
    throw new ShifuException(ShifuErrorCode.ERROR_NO_TARGET_COLUMN);
  }
  String tag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(tag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  Double rate=modelConfig.getBinningSampleRate();
  if (modelConfig.isBinningSampleNegOnly()) {
    if (negTags.contains(tag) && random.nextDouble() > rate) {
      return null;
    }
  }
 else {
    if (random.nextDouble() > rate) {
      return null;
    }
  }
  for (int i=0; i < size; i++) {
    Tuple tuple=tupleFactory.newTuple(TOTAL_COLUMN_CNT);
    tuple.set(COLUMN_ID_INDX,i);
    tuple.set(COLUMN_VAL_INDX,input.get(i) == null ? null : input.get(i).toString());
    if (modelConfig.isRegression()) {
      if (super.posTagSet.contains(tag)) {
        tuple.set(COLUMN_TAG_INDX,true);
      }
      if (super.negTagSet.contains(tag)) {
        tuple.set(COLUMN_TAG_INDX,false);
      }
    }
 else {
      tuple.set(COLUMN_TAG_INDX,true);
    }
    tuple.set(COLUMN_SEED_INDX,Math.abs(random.nextInt() % 300));
    tuple.set(COLUMN_WEIGHT_INDX,getWeightColumnVal(input));
    bag.add(tuple);
  }
  return bag;
}","@SuppressWarnings(""String_Node_Str"") public DataBag exec(Tuple input) throws IOException {
  DataBag bag=BagFactory.getInstance().newDefaultBag();
  TupleFactory tupleFactory=TupleFactory.getInstance();
  if (input == null) {
    return null;
  }
  int size=input.size();
  if (size == 0 || input.size() < this.columnConfigList.size()) {
    log.info(""String_Node_Str"" + input.size() + ""String_Node_Str""+ columnConfigList.size());
    throw new ShifuException(ShifuErrorCode.ERROR_NO_EQUAL_COLCONFIG);
  }
  if (input.get(tagColumnNum) == null) {
    log.info(""String_Node_Str"" + tagColumnNum + ""String_Node_Str""+ input.size()+ ""String_Node_Str""+ columnConfigList.size()+ ""String_Node_Str""+ input.toDelimitedString(""String_Node_Str"")+ ""String_Node_Str""+ input.get(tagColumnNum));
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  String tag=CommonUtils.trimTag(input.get(tagColumnNum).toString());
  if (!super.tagSet.contains(tag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  Double rate=modelConfig.getBinningSampleRate();
  if (modelConfig.isBinningSampleNegOnly()) {
    if (negTags.contains(tag) && random.nextDouble() > rate) {
      return null;
    }
  }
 else {
    if (random.nextDouble() > rate) {
      return null;
    }
  }
  for (int i=0; i < size; i++) {
    Tuple tuple=tupleFactory.newTuple(TOTAL_COLUMN_CNT);
    tuple.set(COLUMN_ID_INDX,i);
    tuple.set(COLUMN_VAL_INDX,input.get(i) == null ? null : input.get(i).toString());
    if (modelConfig.isRegression()) {
      if (super.posTagSet.contains(tag)) {
        tuple.set(COLUMN_TAG_INDX,true);
      }
      if (super.negTagSet.contains(tag)) {
        tuple.set(COLUMN_TAG_INDX,false);
      }
    }
 else {
      tuple.set(COLUMN_TAG_INDX,true);
    }
    tuple.set(COLUMN_SEED_INDX,Math.abs(random.nextInt() % 300));
    tuple.set(COLUMN_WEIGHT_INDX,getWeightColumnVal(input));
    bag.add(tuple);
  }
  return bag;
}",0.8811735941320293
31788,"/** 
 * Since most user won't use this function, hidden the custom paths for creating new model.
 */
public String getName(){
  return name;
}","public String getName(){
  return name;
}",0.448087431693989
31789,"/** 
 * Auto generated by eclipse
 */
@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((author == null) ? 0 : author.hashCode());
  result=prime * result + ((description == null) ? 0 : description.hashCode());
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((author == null) ? 0 : author.hashCode());
  result=prime * result + ((description == null) ? 0 : description.hashCode());
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  return result;
}",0.941358024691358
31790,"public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isBlank(evalConfig.getDataSet().getHeaderPath())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.headers=CommonUtils.getFinalHeaders(evalConfig);
  Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
  this.outputNames=new ArrayList<String>();
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
    outputNames.add(SCHEMA_PREFIX + evalConfig.getDataSet().getTargetColumnName());
  }
 else {
    outputNames.add(SCHEMA_PREFIX + modelConfig.getTargetColumnName());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
    outputNames.add(SCHEMA_PREFIX + evalConfig.getDataSet().getWeightColumnName());
  }
 else {
    outputNames.add(SCHEMA_PREFIX + ""String_Node_Str"");
  }
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    columnConfigMap.put(columnConfig.getColumnName(),columnConfig);
  }
  List<String> allMetaColumns=evalConfig.getAllMetaColumns(modelConfig);
  for (  String meta : allMetaColumns) {
    if (evalNamesSet.contains(meta)) {
      outputNames.add(meta);
      validMetaSize+=1;
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + meta + ""String_Node_Str"");
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  boolean isAfterVarSelect=(inputOutputIndex[3] == 1);
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    if (isAfterVarSelect) {
      if (columnConfig.isFinalSelect() && (!columnConfig.isMeta() && !columnConfig.isTarget())) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
 else {
      if (!columnConfig.isMeta() && !columnConfig.isTarget()) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
  }
}","public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isBlank(evalConfig.getDataSet().getHeaderPath())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.headers=CommonUtils.getFinalHeaders(evalConfig);
  Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
  this.outputNames=new ArrayList<String>();
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
    outputNames.add(evalConfig.getDataSet().getTargetColumnName());
  }
 else {
    outputNames.add(modelConfig.getTargetColumnName());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
    outputNames.add(evalConfig.getDataSet().getWeightColumnName());
  }
 else {
    outputNames.add(""String_Node_Str"");
  }
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    columnConfigMap.put(columnConfig.getColumnName(),columnConfig);
  }
  List<String> allMetaColumns=evalConfig.getAllMetaColumns(modelConfig);
  for (  String meta : allMetaColumns) {
    if (evalNamesSet.contains(meta)) {
      outputNames.add(meta);
      validMetaSize+=1;
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + meta + ""String_Node_Str"");
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  boolean isAfterVarSelect=(inputOutputIndex[3] == 1);
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    if (isAfterVarSelect) {
      if (columnConfig.isFinalSelect() && (!columnConfig.isMeta() && !columnConfig.isTarget())) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
 else {
      if (!columnConfig.isMeta() && !columnConfig.isTarget()) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
  }
}",0.9875486381322958
31791,"@JsonIgnore public List<String> getScoreMetaColumns(ModelConfig modelConfig) throws IOException {
  if (scoreMetaColumns == null) {
synchronized (this) {
      if (scoreMetaColumns == null) {
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile)) {
          String path=scoreMetaColumnNameFile;
          if (SourceType.HDFS.equals(dataSet.getSource())) {
            PathFinder pathFinder=new PathFinder(modelConfig);
            File file=new File(scoreMetaColumnNameFile);
            path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          }
          String delimiter=StringUtils.isBlank(dataSet.getHeaderDelimiter()) ? dataSet.getDataDelimiter() : dataSet.getHeaderDelimiter();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),delimiter);
        }
      }
    }
  }
  return scoreMetaColumns;
}","@JsonIgnore public List<String> getScoreMetaColumns(ModelConfig modelConfig) throws IOException {
  if (scoreMetaColumns == null) {
synchronized (this) {
      if (scoreMetaColumns == null) {
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile)) {
          String path=scoreMetaColumnNameFile;
          if (SourceType.HDFS.equals(dataSet.getSource())) {
            PathFinder pathFinder=new PathFinder(modelConfig);
            File file=new File(scoreMetaColumnNameFile);
            path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          }
          String delimiter=StringUtils.isBlank(dataSet.getHeaderDelimiter()) ? dataSet.getDataDelimiter() : dataSet.getHeaderDelimiter();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),delimiter);
        }
        if (this.scoreMetaColumns == null) {
          this.scoreMetaColumns=new ArrayList<String>();
        }
      }
    }
  }
  return scoreMetaColumns;
}",0.9396551724137931
31792,"@JsonIgnore public List<String> getAllMetaColumns(ModelConfig modelConfig) throws IOException {
  if (metaColumns == null) {
synchronized (this) {
      if (metaColumns == null) {
        List<String> scoreMetaColumns=getScoreMetaColumns(modelConfig);
        if (scoreMetaColumns != null) {
          this.metaColumns=new ArrayList<String>(scoreMetaColumns);
        }
        String metaColumnNameFile=dataSet.getMetaColumnNameFile();
        if (StringUtils.isNotBlank(metaColumnNameFile)) {
          String path=metaColumnNameFile;
          if (SourceType.HDFS.equals(dataSet.getSource())) {
            PathFinder pathFinder=new PathFinder(modelConfig);
            File file=new File(metaColumnNameFile);
            path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          }
          String delimiter=StringUtils.isBlank(dataSet.getHeaderDelimiter()) ? dataSet.getDataDelimiter() : dataSet.getHeaderDelimiter();
          List<String> rawMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),delimiter);
          if (CollectionUtils.isNotEmpty(metaColumns)) {
            for (            String column : rawMetaColumns) {
              if (!metaColumns.contains(column)) {
                metaColumns.add(column);
              }
            }
          }
 else {
            metaColumns=rawMetaColumns;
          }
        }
      }
    }
  }
  return metaColumns;
}","@JsonIgnore public List<String> getAllMetaColumns(ModelConfig modelConfig) throws IOException {
  if (metaColumns == null) {
synchronized (this) {
      if (metaColumns == null) {
        List<String> scoreMetaColumns=getScoreMetaColumns(modelConfig);
        if (scoreMetaColumns != null) {
          this.metaColumns=new ArrayList<String>(scoreMetaColumns);
        }
        String metaColumnNameFile=dataSet.getMetaColumnNameFile();
        if (StringUtils.isNotBlank(metaColumnNameFile)) {
          String path=metaColumnNameFile;
          if (SourceType.HDFS.equals(dataSet.getSource())) {
            PathFinder pathFinder=new PathFinder(modelConfig);
            File file=new File(metaColumnNameFile);
            path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          }
          String delimiter=StringUtils.isBlank(dataSet.getHeaderDelimiter()) ? dataSet.getDataDelimiter() : dataSet.getHeaderDelimiter();
          List<String> rawMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),delimiter);
          if (CollectionUtils.isNotEmpty(metaColumns)) {
            for (            String column : rawMetaColumns) {
              if (!metaColumns.contains(column)) {
                metaColumns.add(column);
              }
            }
          }
 else {
            metaColumns=rawMetaColumns;
          }
        }
        if (this.metaColumns == null) {
          this.metaColumns=new ArrayList<String>();
        }
      }
    }
  }
  return metaColumns;
}",0.9653767820773932
31793,"/** 
 * Convert column name into PMML format(with normalization)
 * @param columnName the column name
 * @param normType the norm type
 * @return - PMML standard column name
 */
protected String genPmmlColumnName(String columnName,ModelNormalizeConf.NormType normType){
  return columnName + ""String_Node_Str"" + normType.name().toLowerCase();
}","/** 
 * Convert column name into PMML format(with normalization)
 * @param columnName the column name
 * @param normType the norm type
 * @return - PMML standard column name
 */
public static String genPmmlColumnName(String columnName,ModelNormalizeConf.NormType normType){
  return columnName + ""String_Node_Str"" + normType.name().toLowerCase();
}",0.9710982658959536
31794,"/** 
 * Run pig code to normalize evaluation dataset
 * @param evalConfig
 * @throws IOException
 */
private void runPigNormalize(EvalConfig evalConfig) throws IOException {
  SourceType sourceType=evalConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getEvalNormalizedPath(evalConfig),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(Constants.SOURCE_TYPE,sourceType.toString());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataPath());
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalNormalizedPath(evalConfig));
  paramsMap.put(""String_Node_Str"",evalConfig.getName());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataDelimiter());
  String pigScript=""String_Node_Str"";
  try {
    PigExecutor.getExecutor().submitJob(modelConfig,pathFinder.getScriptPath(pigScript),paramsMap,evalConfig.getDataSet().getSource());
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Run pig code to normalize evaluation dataset
 * @param evalConfig
 * @throws IOException
 */
private void runPigNormalize(EvalConfig evalConfig) throws IOException {
  SourceType sourceType=evalConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getEvalNormalizedPath(evalConfig),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(Constants.SOURCE_TYPE,sourceType.toString());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataPath());
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalNormalizedPath(evalConfig));
  paramsMap.put(""String_Node_Str"",evalConfig.getName());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataDelimiter());
  paramsMap.put(""String_Node_Str"",Environment.getProperty(Constants.SHIFU_SCORE_SCALE,Integer.toString(Scorer.DEFAULT_SCORE_SCALE)));
  String pigScript=""String_Node_Str"";
  try {
    PigExecutor.getExecutor().submitJob(modelConfig,pathFinder.getScriptPath(pigScript),paramsMap,evalConfig.getDataSet().getSource());
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.9418907198612316
31795,"/** 
 * output the schema for evaluation score
 */
public Schema outputSchema(Schema input){
  try {
    Schema tupleSchema=new Schema();
    for (int i=0; i < this.outputNames.size(); i++) {
      String name=this.outputNames.get(i);
      if (i < 2 + validMetaSize) {
        tupleSchema.add(new FieldSchema(name,DataType.CHARARRAY));
      }
 else {
        tupleSchema.add(new FieldSchema(name,DataType.DOUBLE));
      }
    }
    return new Schema(new FieldSchema(""String_Node_Str"",tupleSchema,DataType.TUPLE));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * output the schema for evaluation score
 */
public Schema outputSchema(Schema input){
  try {
    Schema tupleSchema=new Schema();
    for (int i=0; i < this.outputNames.size(); i++) {
      String name=this.outputNames.get(i);
      if (i < 2 + validMetaSize) {
        tupleSchema.add(new FieldSchema(name,DataType.CHARARRAY));
      }
 else {
        tupleSchema.add(new FieldSchema(ZscoreLocalTransformCreator.genPmmlColumnName(name,this.modelConfig.getNormalizeType()),DataType.DOUBLE));
      }
    }
    tupleSchema.add(new FieldSchema(this.scoreName,DataType.DOUBLE));
    return new Schema(new FieldSchema(""String_Node_Str"",tupleSchema,DataType.TUPLE));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
}",0.882051282051282
31796,"public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isBlank(evalConfig.getDataSet().getHeaderPath())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.headers=CommonUtils.getFinalHeaders(evalConfig);
  Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
  this.outputNames=new ArrayList<String>();
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
    outputNames.add(evalConfig.getDataSet().getTargetColumnName());
  }
 else {
    outputNames.add(modelConfig.getTargetColumnName());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
    outputNames.add(evalConfig.getDataSet().getWeightColumnName());
  }
 else {
    outputNames.add(""String_Node_Str"");
  }
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    columnConfigMap.put(columnConfig.getColumnName(),columnConfig);
  }
  List<String> allMetaColumns=evalConfig.getAllMetaColumns(modelConfig);
  for (  String meta : allMetaColumns) {
    if (evalNamesSet.contains(meta)) {
      if (!outputNames.contains(meta)) {
        outputNames.add(meta);
        validMetaSize+=1;
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + meta + ""String_Node_Str"");
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  boolean isAfterVarSelect=(inputOutputIndex[3] == 1);
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    if (isAfterVarSelect) {
      if (columnConfig.isFinalSelect() && (!columnConfig.isMeta() && !columnConfig.isTarget())) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
 else {
      if (!columnConfig.isMeta() && !columnConfig.isTarget()) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
  }
}","public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName,String scale) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isBlank(evalConfig.getDataSet().getHeaderPath())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.headers=CommonUtils.getFinalHeaders(evalConfig);
  Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
  this.outputNames=new ArrayList<String>();
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
    outputNames.add(evalConfig.getDataSet().getTargetColumnName());
  }
 else {
    outputNames.add(modelConfig.getTargetColumnName());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
    outputNames.add(evalConfig.getDataSet().getWeightColumnName());
  }
 else {
    outputNames.add(""String_Node_Str"");
  }
  List<String> allMetaColumns=evalConfig.getAllMetaColumns(modelConfig);
  for (  String meta : allMetaColumns) {
    if (evalNamesSet.contains(meta)) {
      if (!outputNames.contains(meta)) {
        outputNames.add(meta);
        validMetaSize+=1;
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + meta + ""String_Node_Str"");
    }
  }
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    columnConfigMap.put(columnConfig.getColumnName(),columnConfig);
    if (columnConfig.isFinalSelect() && !outputNames.contains(columnConfig.getColumnName())) {
      validMetaSize+=1;
      outputNames.add(columnConfig.getColumnName());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  boolean isAfterVarSelect=(inputOutputIndex[3] == 1);
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    if (isAfterVarSelect) {
      if (columnConfig.isFinalSelect() && (!columnConfig.isMeta() && !columnConfig.isTarget())) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          outputNames.add(columnConfig.getColumnName());
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
 else {
      if (!columnConfig.isMeta() && !columnConfig.isTarget()) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          outputNames.add(columnConfig.getColumnName());
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
  }
  this.scoreName=this.evalConfig.getPerformanceScoreSelector();
  if (StringUtils.isBlank(this.scoreName) || this.scoreName.equalsIgnoreCase(""String_Node_Str"")) {
    this.scIndex=-1;
  }
 else {
    try {
      this.scIndex=Integer.parseInt(this.scoreName.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"" + this.scoreName);
    }
  }
  this.scale=scale;
}",0.8093976329270447
31797,"public Tuple exec(Tuple input) throws IOException {
  Map<String,String> rawDataMap=CommonUtils.convertDataIntoMap(input,this.headers);
  Tuple tuple=TupleFactory.getInstance().newTuple(this.outputNames.size());
  for (int i=0; i < this.outputNames.size(); i++) {
    String name=this.outputNames.get(i);
    String raw=rawDataMap.get(name);
    if (i == 0) {
      tuple.set(i,raw);
    }
 else     if (i == 1) {
      tuple.set(i,(StringUtils.isEmpty(raw) ? ""String_Node_Str"" : raw));
    }
 else     if (i > 1 && i < 2 + validMetaSize) {
      tuple.set(i,raw);
    }
 else {
      ColumnConfig columnConfig=this.columnConfigMap.get(name);
      Double value=Normalizer.normalize(columnConfig,raw,this.modelConfig.getNormalizeStdDevCutOff(),this.modelConfig.getNormalizeType());
      tuple.set(i,value);
    }
  }
  return tuple;
}","public Tuple exec(Tuple input) throws IOException {
  if (this.modelRunner == null) {
    List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource(),evalConfig.getGbtConvertToProb());
    this.modelRunner=new ModelRunner(modelConfig,columnConfigList,this.headers,evalConfig.getDataSet().getDataDelimiter(),models);
    this.modelRunner.setScoreScale(Integer.parseInt(this.scale));
  }
  Map<String,String> rawDataMap=CommonUtils.convertDataIntoMap(input,this.headers);
  Tuple tuple=TupleFactory.getInstance().newTuple(this.outputNames.size() + 1);
  for (int i=0; i < this.outputNames.size(); i++) {
    String name=this.outputNames.get(i);
    String raw=rawDataMap.get(name);
    if (i == 0) {
      tuple.set(i,raw);
    }
 else     if (i == 1) {
      tuple.set(i,(StringUtils.isEmpty(raw) ? ""String_Node_Str"" : raw));
    }
 else     if (i > 1 && i < 2 + validMetaSize) {
      tuple.set(i,raw);
    }
 else {
      ColumnConfig columnConfig=this.columnConfigMap.get(name);
      Double value=Normalizer.normalize(columnConfig,raw,this.modelConfig.getNormalizeStdDevCutOff(),this.modelConfig.getNormalizeType());
      tuple.set(i,value);
    }
  }
  CaseScoreResult score=this.modelRunner.compute(rawDataMap);
  if (score == null) {
    tuple.set(this.outputNames.size(),-999.0);
  }
 else   if (this.scIndex < 0) {
    tuple.set(this.outputNames.size(),score.getAvgScore());
  }
 else {
    tuple.set(this.outputNames.size(),score.getScores().get(this.scIndex));
  }
  return tuple;
}",0.6847372810675563
31798,"public void updateColumnConfig(ColumnConfig columnConfig){
  String varName=columnConfig.getColumnName();
  if (this.targetColumnName.equals(varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Target);
  }
  if (this.setMeta.contains(varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Meta);
  }
 else   if (this.setForceRemove.contains(varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceRemove);
  }
 else   if (this.setForceSelect.contains(varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceSelect);
  }
}","public void updateColumnConfig(ColumnConfig columnConfig){
  String varName=columnConfig.getColumnName();
  columnConfig.setColumnFlag(null);
  if (this.targetColumnName.equals(varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Target);
  }
  if (this.setMeta.contains(varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.Meta);
  }
 else   if (this.setForceRemove.contains(varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceRemove);
  }
 else   if (this.setForceSelect.contains(varName)) {
    columnConfig.setColumnFlag(ColumnConfig.ColumnFlag.ForceSelect);
  }
}",0.9698996655518396
31799,"/** 
 * Run model to compute score for input data map
 * @param rawDataMap - the whole original input data as map
 * @return CaseScoreResult
 */
public CaseScoreResult compute(Map<String,String> rawDataMap){
  CaseScoreResult scoreResult=new CaseScoreResult();
  if (this.scorer != null) {
    ScoreObject so=scorer.score(rawDataMap);
    if (so == null) {
      return null;
    }
    scoreResult.setScores(so.getScores());
    scoreResult.setMaxScore(so.getMaxScore());
    scoreResult.setMinScore(so.getMinScore());
    scoreResult.setAvgScore(so.getMeanScore());
    scoreResult.setMedianScore(so.getMedianScore());
  }
  if (MapUtils.isNotEmpty(this.subScorers)) {
    Iterator<Map.Entry<String,Scorer>> iterator=this.subScorers.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<String,Scorer> entry=iterator.next();
      String modelName=entry.getKey();
      ScoreObject so=scorer.score(rawDataMap);
      if (so != null) {
        scoreResult.addSubModelScore(modelName,so);
      }
    }
  }
  return scoreResult;
}","/** 
 * Run model to compute score for input data map
 * @param rawDataMap - the whole original input data as map
 * @return CaseScoreResult
 */
public CaseScoreResult compute(Map<String,String> rawDataMap){
  CaseScoreResult scoreResult=new CaseScoreResult();
  if (this.scorer != null) {
    ScoreObject so=scorer.score(rawDataMap);
    if (so == null) {
      return null;
    }
    scoreResult.setScores(so.getScores());
    scoreResult.setMaxScore(so.getMaxScore());
    scoreResult.setMinScore(so.getMinScore());
    scoreResult.setAvgScore(so.getMeanScore());
    scoreResult.setMedianScore(so.getMedianScore());
  }
  if (MapUtils.isNotEmpty(this.subScorers)) {
    Iterator<Map.Entry<String,Scorer>> iterator=this.subScorers.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<String,Scorer> entry=iterator.next();
      String modelName=entry.getKey();
      Scorer subScorer=entry.getValue();
      ScoreObject so=subScorer.score(rawDataMap);
      if (so != null) {
        scoreResult.addSubModelScore(modelName,so);
      }
    }
  }
  return scoreResult;
}",0.979420018709074
31800,"@JsonIgnore public List<String> getScoreMetaColumns(ModelConfig modelConfig) throws IOException {
  if (scoreMetaColumns == null) {
synchronized (this) {
      if (scoreMetaColumns == null) {
        PathFinder pathFinder=new PathFinder(modelConfig);
        String delimiter=StringUtils.isBlank(dataSet.getHeaderDelimiter()) ? dataSet.getDataDelimiter() : dataSet.getHeaderDelimiter();
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.HDFS.equals(dataSet.getSource())) {
          String path=scoreMetaColumnNameFile;
          File file=new File(scoreMetaColumnNameFile);
          path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),delimiter);
        }
 else         if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.LOCAL.equals(dataSet.getSource())) {
          scoreMetaColumns=CommonUtils.readConfFileIntoList(scoreMetaColumnNameFile,dataSet.getSource(),delimiter);
        }
      }
    }
  }
  return scoreMetaColumns;
}","@JsonIgnore public List<String> getScoreMetaColumns(ModelConfig modelConfig) throws IOException {
  if (scoreMetaColumns == null) {
synchronized (this) {
      if (scoreMetaColumns == null) {
        PathFinder pathFinder=new PathFinder(modelConfig);
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.HDFS.equals(dataSet.getSource())) {
          String path=scoreMetaColumnNameFile;
          File file=new File(scoreMetaColumnNameFile);
          path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),dataSet.getHeaderDelimiter());
        }
      }
    }
  }
  return scoreMetaColumns;
}",0.7230255839822024
31801,"@JsonIgnore public List<String> getAllMetaColumns(ModelConfig modelConfig) throws IOException {
  if (metaColumns == null) {
synchronized (this) {
      if (metaColumns == null) {
        PathFinder pathFinder=new PathFinder(modelConfig);
        List<String> scoreMetaColumns=null;
        String delimiter=StringUtils.isBlank(dataSet.getHeaderDelimiter()) ? dataSet.getDataDelimiter() : dataSet.getHeaderDelimiter();
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.HDFS.equals(dataSet.getSource())) {
          String path=scoreMetaColumnNameFile;
          File file=new File(scoreMetaColumnNameFile);
          path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),delimiter);
          metaColumns=scoreMetaColumns;
        }
 else         if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.LOCAL.equals(dataSet.getSource())) {
          scoreMetaColumns=CommonUtils.readConfFileIntoList(scoreMetaColumnNameFile,dataSet.getSource(),delimiter);
          metaColumns=scoreMetaColumns;
        }
        if (StringUtils.isNotBlank(dataSet.getMetaColumnNameFile())) {
          String rawMetaPath=dataSet.getMetaColumnNameFile();
          List<String> rawMetaColumns=null;
          if (StringUtils.isNotBlank(rawMetaPath) && SourceType.HDFS.equals(dataSet.getSource())) {
            File file=new File(rawMetaPath);
            rawMetaPath=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
            rawMetaColumns=CommonUtils.readConfFileIntoList(rawMetaPath,dataSet.getSource(),delimiter);
          }
 else           if (StringUtils.isNotBlank(rawMetaPath) && SourceType.LOCAL.equals(dataSet.getSource())) {
            rawMetaColumns=CommonUtils.readConfFileIntoList(rawMetaPath,dataSet.getSource(),delimiter);
          }
          if (metaColumns != null) {
            for (            String column : rawMetaColumns) {
              if (!metaColumns.contains(column)) {
                metaColumns.add(column);
              }
            }
          }
 else {
            metaColumns=rawMetaColumns;
          }
        }
      }
    }
  }
  return metaColumns;
}","@JsonIgnore public List<String> getAllMetaColumns(ModelConfig modelConfig) throws IOException {
  if (metaColumns == null) {
synchronized (this) {
      if (metaColumns == null) {
        PathFinder pathFinder=new PathFinder(modelConfig);
        List<String> scoreMetaColumns=null;
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.HDFS.equals(dataSet.getSource())) {
          File file=new File(scoreMetaColumnNameFile);
          String path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),dataSet.getHeaderDelimiter());
          metaColumns=scoreMetaColumns;
        }
      }
    }
  }
  return metaColumns;
}",0.4387959866220736
31802,"@Override public RawSourceData clone(){
  RawSourceData copy=null;
  try {
    copy=(RawSourceData)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    throw new InternalError(e.toString());
  }
  copy.setSource(source);
  copy.setDataPath(dataPath);
  copy.setDataDelimiter(dataDelimiter);
  copy.setHeaderPath(headerPath);
  copy.setHeaderDelimiter(headerDelimiter);
  copy.setFilterExpressions(filterExpressions);
  copy.setWeightColumnName(weightColumnName);
  copy.setTargetColumnName(targetColumnName);
  copy.setPosTags(new ArrayList<String>(posTags));
  copy.setNegTags(new ArrayList<String>(negTags));
  copy.setMissingOrInvalidValues(missingOrInvalidValues);
  return copy;
}","@Override public RawSourceData clone(){
  RawSourceData copy=new RawSourceData();
  copy.setSource(source);
  copy.setDataPath(dataPath);
  copy.setDataDelimiter(dataDelimiter);
  copy.setHeaderPath(headerPath);
  copy.setHeaderDelimiter(headerDelimiter);
  copy.setFilterExpressions(filterExpressions);
  copy.setWeightColumnName(weightColumnName);
  copy.setTargetColumnName(targetColumnName);
  copy.setPosTags(new ArrayList<String>(posTags));
  copy.setNegTags(new ArrayList<String>(negTags));
  copy.setMissingOrInvalidValues(missingOrInvalidValues);
  return copy;
}",0.5768321513002365
31803,"/** 
 * Returns the element if it is in both collections. - return null if any collection is null or empty - return null if no element exists in both collections
 * @param leftCol - left collection
 * @param rightCol - right collection
 * @return First element that are found in both collectionsnull if no elements in both collection or any collection is null or empty
 */
public static <T>T containsAny(Collection<T> leftCol,Collection<T> rightCol){
  if (CollectionUtils.isEmpty(leftCol) || CollectionUtils.isEmpty(rightCol)) {
    return null;
  }
  Iterator<T> iterator=leftCol.iterator();
  while (iterator.hasNext()) {
    T element=iterator.next();
    if (rightCol.contains(element)) {
      return element;
    }
  }
  return null;
}","/** 
 * Returns the element if it is in both collections. - return null if any collection is null or empty - return null if no element exists in both collections
 * @param leftCol - left collection
 * @param rightCol - right collection
 * @param < T > - collection type
 * @return First element that are found in both collectionsnull if no elements in both collection or any collection is null or empty
 */
public static <T>T containsAny(Collection<T> leftCol,Collection<T> rightCol){
  if (CollectionUtils.isEmpty(leftCol) || CollectionUtils.isEmpty(rightCol)) {
    return null;
  }
  Iterator<T> iterator=leftCol.iterator();
  while (iterator.hasNext()) {
    T element=iterator.next();
    if (rightCol.contains(element)) {
      return element;
    }
  }
  return null;
}",0.9776021080368906
31804,"/** 
 * Loading model according to existing model path.
 * @param modelConfig model config
 * @param columnConfigList list of column config
 * @param modelPath the path to store model
 * @param fs file system used to store model
 * @param gbtConvertToProb convert gbt score to prob or not
 * @return model object or null if no modelPath file,
 * @throws IOException if loading file for any IOException
 * @throws GuaguaRuntimeException if any exception to load model object and cast to BasicNetwork
 */
public static BasicML loadModel(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,Path modelPath,FileSystem fs,boolean gbtConvertToProb) throws IOException {
  if (!fs.exists(modelPath)) {
    return null;
  }
  PersistorRegistry.getInstance().add(new PersistBasicFloatNetwork());
  FSDataInputStream stream=null;
  BufferedReader br=null;
  try {
    stream=fs.open(modelPath);
    if (modelPath.getName().endsWith(LogisticRegressionContants.LR_ALG_NAME.toLowerCase())) {
      br=new BufferedReader(new InputStreamReader(stream));
      return LR.loadFromString(br.readLine());
    }
 else     if (modelPath.getName().endsWith(CommonConstants.RF_ALG_NAME.toLowerCase()) || modelPath.getName().endsWith(CommonConstants.GBT_ALG_NAME.toLowerCase())) {
      return TreeModel.loadFromStream(stream,gbtConvertToProb);
    }
 else {
      return BasicML.class.cast(EncogDirectoryPersistence.loadObject(stream));
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + modelPath;
    throw new ShifuException(ShifuErrorCode.ERROR_FAIL_TO_LOAD_MODEL_FILE,e,msg);
  }
 finally {
    if (br != null) {
      IOUtils.closeQuietly(br);
    }
    if (stream != null) {
      IOUtils.closeQuietly(stream);
    }
  }
}","/** 
 * Loading model according to existing model path.
 * @param modelConfig model config
 * @param columnConfigList list of column config
 * @param modelPath the path to store model
 * @param fs file system used to store model
 * @param gbtConvertToProb convert gbt score to prob or not
 * @return model object or null if no modelPath file,
 * @throws IOException if loading file for any IOException
 */
public static BasicML loadModel(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,Path modelPath,FileSystem fs,boolean gbtConvertToProb) throws IOException {
  if (!fs.exists(modelPath)) {
    return null;
  }
  PersistorRegistry.getInstance().add(new PersistBasicFloatNetwork());
  FSDataInputStream stream=null;
  BufferedReader br=null;
  try {
    stream=fs.open(modelPath);
    if (modelPath.getName().endsWith(LogisticRegressionContants.LR_ALG_NAME.toLowerCase())) {
      br=new BufferedReader(new InputStreamReader(stream));
      return LR.loadFromString(br.readLine());
    }
 else     if (modelPath.getName().endsWith(CommonConstants.RF_ALG_NAME.toLowerCase()) || modelPath.getName().endsWith(CommonConstants.GBT_ALG_NAME.toLowerCase())) {
      return TreeModel.loadFromStream(stream,gbtConvertToProb);
    }
 else {
      return BasicML.class.cast(EncogDirectoryPersistence.loadObject(stream));
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + modelPath;
    throw new ShifuException(ShifuErrorCode.ERROR_FAIL_TO_LOAD_MODEL_FILE,e,msg);
  }
 finally {
    if (br != null) {
      IOUtils.closeQuietly(br);
    }
    if (stream != null) {
      IOUtils.closeQuietly(stream);
    }
  }
}",0.9711909711909712
31805,"/** 
 * Load JSON instance
 * @param path file path
 * @param sourceType source type: hdfs or local
 * @param clazz class of instance
 * @return instance from json file
 * @throws IOException if any IO exception in parsing json.
 * @throws IllegalArgumentException if  {@code path} is null or empty, if sourceType is null.
 */
public static <T>T loadJSON(String path,SourceType sourceType,Class<T> clazz) throws IOException {
  checkPathAndMode(path,sourceType);
  log.debug(""String_Node_Str"",path,sourceType);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(path,sourceType);
    return JSONUtils.readValue(reader,clazz);
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}","/** 
 * Load JSON instance
 * @param path file path
 * @param sourceType source type: hdfs or local
 * @param clazz class of instance
 * @param < T > class type to load
 * @return instance from json file
 * @throws IOException if any IO exception in parsing json.
 * @throws IllegalArgumentException if  {@code path} is null or empty, if sourceType is null.
 */
public static <T>T loadJSON(String path,SourceType sourceType,Class<T> clazz) throws IOException {
  checkPathAndMode(path,sourceType);
  log.debug(""String_Node_Str"",path,sourceType);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(path,sourceType);
    return JSONUtils.readValue(reader,clazz);
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}",0.9757449757449758
31806,"/** 
 * Get target column.
 * @param columnConfigList column config list
 * @throws IllegalArgumentException if columnConfigList is null or empty.
 * @throws IllegalStateException if no target column can be found.
 */
public static Integer getTargetColumnNum(List<ColumnConfig> columnConfigList){
  if (CollectionUtils.isEmpty(columnConfigList)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ColumnConfig cc=(ColumnConfig)CollectionUtils.find(columnConfigList,new Predicate(){
    @Override public boolean evaluate(    Object object){
      return ((ColumnConfig)object).isTarget();
    }
  }
);
  if (cc == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return cc.getColumnNum();
}","/** 
 * Get target column.
 * @param columnConfigList column config list
 * @return target column index
 * @throws IllegalArgumentException if columnConfigList is null or empty.
 * @throws IllegalStateException if no target column can be found.
 */
public static Integer getTargetColumnNum(List<ColumnConfig> columnConfigList){
  if (CollectionUtils.isEmpty(columnConfigList)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ColumnConfig cc=(ColumnConfig)CollectionUtils.find(columnConfigList,new Predicate(){
    @Override public boolean evaluate(    Object object){
      return ((ColumnConfig)object).isTarget();
    }
  }
);
  if (cc == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return cc.getColumnNum();
}",0.9790964261631828
31807,"/** 
 * Return one HashMap Object contains keys in the first parameter, values in the second parameter. Before calling this method, you should be aware that headers should be unique.
 * @throws IllegalArgumentException if lengths of two arrays are not the same.
 * @throws NullPointerException if header or data is null.
 */
public static Map<String,String> getRawDataMap(String[] header,String[] data){
  if (header.length != data.length) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",header.length,data.length));
  }
  Map<String,String> rawDataMap=new HashMap<String,String>(header.length);
  for (int i=0; i < header.length; i++) {
    rawDataMap.put(header[i],data[i]);
  }
  return rawDataMap;
}","/** 
 * Return one HashMap Object contains keys in the first parameter, values in the second parameter. Before calling this method, you should be aware that headers should be unique.
 * @param header - header that contains column name
 * @param data - raw data
 * @return key-value map for variable
 */
public static Map<String,String> getRawDataMap(String[] header,String[] data){
  if (header.length != data.length) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",header.length,data.length));
  }
  Map<String,String> rawDataMap=new HashMap<String,String>(header.length);
  for (int i=0; i < header.length; i++) {
    rawDataMap.put(header[i],data[i]);
  }
  return rawDataMap;
}",0.8312412831241283
31808,"/** 
 * Assemble map data to Encog standard input format.
 * @throws NullPointerException if input is null
 * @throws NumberFormatException if column value is not number format.
 */
public static MLDataPair assembleDataPair(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,Map<String,? extends Object> rawDataMap,double cutoff){
  double[] ideal={Constants.DEFAULT_IDEAL_VALUE};
  List<Double> inputList=new ArrayList<Double>();
  for (  ColumnConfig config : columnConfigList) {
    String key=config.getColumnName();
    if (config.isFinalSelect() && !rawDataMap.containsKey(key)) {
      throw new IllegalStateException(String.format(""String_Node_Str"",key));
    }
    if (config.isTarget()) {
      continue;
    }
 else     if (config.isFinalSelect()) {
      String val=rawDataMap.get(key) == null ? null : rawDataMap.get(key).toString();
      Double normalizeValue=Normalizer.normalize(config,val,cutoff,modelConfig.getNormalizeType());
      inputList.add(normalizeValue);
    }
  }
  int size=inputList.size();
  double[] input=new double[size];
  for (int i=0; i < size; i++) {
    input[i]=inputList.get(i);
  }
  return new BasicMLDataPair(new BasicMLData(input),new BasicMLData(ideal));
}","/** 
 * Assemble map data to Encog standard input format.
 * @param modelConfig - ModelConfig
 * @param columnConfigList - ColumnConfig list
 * @param rawDataMap - raw input key-value map
 * @param cutoff - cutoff value when normalization
 * @return - input data pair for neural network
 */
public static MLDataPair assembleDataPair(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,Map<String,? extends Object> rawDataMap,double cutoff){
  double[] ideal={Constants.DEFAULT_IDEAL_VALUE};
  List<Double> inputList=new ArrayList<Double>();
  for (  ColumnConfig config : columnConfigList) {
    String key=config.getColumnName();
    if (config.isFinalSelect() && !rawDataMap.containsKey(key)) {
      throw new IllegalStateException(String.format(""String_Node_Str"",key));
    }
    if (config.isTarget()) {
      continue;
    }
 else     if (config.isFinalSelect()) {
      String val=rawDataMap.get(key) == null ? null : rawDataMap.get(key).toString();
      Double normalizeValue=Normalizer.normalize(config,val,cutoff,modelConfig.getNormalizeType());
      inputList.add(normalizeValue);
    }
  }
  int size=inputList.size();
  double[] input=new double[size];
  for (int i=0; i < size; i++) {
    input[i]=inputList.get(i);
  }
  return new BasicMLDataPair(new BasicMLData(input),new BasicMLData(ideal));
}",0.8710059171597633
31809,"/** 
 * Sync-up the evalulation data into HDFS
 */
@SuppressWarnings(""String_Node_Str"") public static void copyEvalDataFromLocalToHDFS(ModelConfig modelConfig,String evalName) throws IOException {
  EvalConfig evalConfig=modelConfig.getEvalConfigByName(evalName);
  if (evalConfig != null) {
    FileSystem hdfs=HDFSUtils.getFS();
    FileSystem localFs=HDFSUtils.getLocalFS();
    PathFinder pathFinder=new PathFinder(modelConfig);
    Path evalDir=new Path(pathFinder.getEvalSetPath(evalConfig,SourceType.LOCAL));
    Path dst=new Path(pathFinder.getEvalSetPath(evalConfig,SourceType.HDFS));
    if (localFs.exists(evalDir) && localFs.getFileStatus(evalDir).isDir() && !hdfs.exists(dst)) {
      hdfs.copyFromLocalFile(evalDir,dst);
    }
    if (StringUtils.isNotBlank(evalConfig.getScoreMetaColumnNameFile())) {
      hdfs.copyFromLocalFile(new Path(evalConfig.getScoreMetaColumnNameFile()),new Path(pathFinder.getEvalSetPath(evalConfig)));
    }
    if (StringUtils.isNotBlank(evalConfig.getDataSet().getMetaColumnNameFile())) {
      hdfs.copyFromLocalFile(new Path(evalConfig.getDataSet().getMetaColumnNameFile()),new Path(pathFinder.getEvalSetPath(evalConfig)));
    }
  }
}","/** 
 * Sync-up the evalulation data into HDFS
 * @param modelConfig - ModelConfig
 * @param evalName eval name in ModelConfig
 * @throws IOException - error occur when copying data
 */
@SuppressWarnings(""String_Node_Str"") public static void copyEvalDataFromLocalToHDFS(ModelConfig modelConfig,String evalName) throws IOException {
  EvalConfig evalConfig=modelConfig.getEvalConfigByName(evalName);
  if (evalConfig != null) {
    FileSystem hdfs=HDFSUtils.getFS();
    FileSystem localFs=HDFSUtils.getLocalFS();
    PathFinder pathFinder=new PathFinder(modelConfig);
    Path evalDir=new Path(pathFinder.getEvalSetPath(evalConfig,SourceType.LOCAL));
    Path dst=new Path(pathFinder.getEvalSetPath(evalConfig,SourceType.HDFS));
    if (localFs.exists(evalDir) && localFs.getFileStatus(evalDir).isDir() && !hdfs.exists(dst)) {
      hdfs.copyFromLocalFile(evalDir,dst);
    }
    if (StringUtils.isNotBlank(evalConfig.getScoreMetaColumnNameFile())) {
      hdfs.copyFromLocalFile(new Path(evalConfig.getScoreMetaColumnNameFile()),new Path(pathFinder.getEvalSetPath(evalConfig)));
    }
  }
}",0.7408710954685438
31810,"@Test public void testUDFEnoughInput() throws Exception {
  Tuple tuple=TupleFactory.getInstance().newTuple(31);
  for (int i=0; i < 31; i++) {
    tuple.set(i,0);
  }
  tuple.set(0,""String_Node_Str"");
  DataBag dataBag=instance.exec(tuple);
  Assert.assertEquals(30,dataBag.size());
  Assert.assertEquals(dataBag.iterator().next().size(),5);
}","@Test public void testUDFEnoughInput() throws Exception {
  Tuple tuple=TupleFactory.getInstance().newTuple(31);
  for (int i=0; i < 31; i++) {
    tuple.set(i,0);
  }
  tuple.set(0,""String_Node_Str"");
  DataBag dataBag=instance.exec(tuple);
  Assert.assertEquals(31,dataBag.size());
  Assert.assertEquals(dataBag.iterator().next().size(),5);
}",0.997093023255814
31811,"public Scorer(List<BasicML> models,List<ColumnConfig> columnConfigList,String algorithm,ModelConfig modelConfig,Double cutoff){
  if (modelConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.models=models;
  this.columnConfigList=columnConfigList;
  this.cutoff=cutoff;
  this.alg=algorithm;
  this.modelConfig=modelConfig;
  if (this.columnConfigList != null) {
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    if (inputNodeCount == candidateCount) {
      this.noVarSelect=true;
    }
 else {
      this.noVarSelect=false;
    }
  }
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.isCategorical()) {
        Map<String,Integer> map=new HashMap<String,Integer>();
        List<String> categories=columnConfig.getBinCategory();
        if (categories == null) {
          continue;
        }
        for (int i=0; i < categories.size(); i++) {
          map.put(categories.get(i) == null ? ""String_Node_Str"" : categories.get(i),i);
        }
        this.binCategoryMap.put(columnConfig.getColumnNum(),map);
      }
    }
  }
  this.executorManager=new ExecutorManager<MLData>(Math.min(Runtime.getRuntime().availableProcessors(),models.size()));
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      Scorer.this.executorManager.forceShutDown();
    }
  }
));
}","public Scorer(List<BasicML> models,List<ColumnConfig> columnConfigList,String algorithm,ModelConfig modelConfig,Double cutoff){
  if (modelConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.models=models;
  this.columnConfigList=columnConfigList;
  this.cutoff=cutoff;
  this.alg=algorithm;
  this.modelConfig=modelConfig;
  if (this.columnConfigList != null) {
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    this.noVarSelect=(inputNodeCount == candidateCount);
  }
  for (  ColumnConfig columnConfig : columnConfigList) {
    if (columnConfig.isCategorical()) {
      Map<String,Integer> map=new HashMap<String,Integer>();
      List<String> categories=columnConfig.getBinCategory();
      if (categories != null) {
        for (int i=0; i < categories.size(); i++) {
          map.put(categories.get(i) == null ? ""String_Node_Str"" : categories.get(i),i);
        }
      }
      this.binCategoryMap.put(columnConfig.getColumnNum(),map);
    }
  }
  this.executorManager=new ExecutorManager<MLData>(Math.min(Runtime.getRuntime().availableProcessors(),models.size()));
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      Scorer.this.executorManager.forceShutDown();
    }
  }
));
}",0.8621586475942783
31812,"@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          tmpMap.put(config.getBinCategory().get(i),i);
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),new ArrayList<Data>());
  }
 else {
    if (Double.compare(validationRate,0d) != 0) {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
      this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
    }
 else {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.isAfterVarSelect=inputOutputIndex[3] == 1 ? true : false;
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,columnConfigList,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}","@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          tmpMap.put(config.getBinCategory().get(i),i);
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),new ArrayList<Data>());
  }
 else {
    if (Double.compare(validationRate,0d) != 0) {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
      this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
    }
 else {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.isAfterVarSelect=(inputOutputIndex[3] == 1);
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,columnConfigList,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}",0.9988276670574444
31813,"/** 
 * output the schema for evaluation score
 */
public Schema outputSchema(Schema input){
  try {
    Schema tupleSchema=new Schema();
    for (int i=0; i < this.outputNames.size(); i++) {
      String name=this.outputNames.get(i);
      if (i < 2) {
        tupleSchema.add(new FieldSchema(name,DataType.CHARARRAY));
      }
 else {
        tupleSchema.add(new FieldSchema(name,DataType.DOUBLE));
      }
    }
    return new Schema(new FieldSchema(""String_Node_Str"",tupleSchema,DataType.TUPLE));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * output the schema for evaluation score
 */
public Schema outputSchema(Schema input){
  try {
    Schema tupleSchema=new Schema();
    for (int i=0; i < this.outputNames.size(); i++) {
      String name=this.outputNames.get(i);
      if (i < 2 + validMetaSize) {
        tupleSchema.add(new FieldSchema(name,DataType.CHARARRAY));
      }
 else {
        tupleSchema.add(new FieldSchema(name,DataType.DOUBLE));
      }
    }
    return new Schema(new FieldSchema(""String_Node_Str"",tupleSchema,DataType.TUPLE));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
}",0.9866220735785952
31814,"public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
      String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
      this.headers=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),delimiter,evalConfig.getDataSet().getSource());
    }
 else {
      String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
      String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
      if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
        this.headers=new String[fields.length];
        for (int i=0; i < fields.length; i++) {
          this.headers[i]=CommonUtils.getRelativePigHeaderColumnName(fields[i]);
        }
        log.warn(""String_Node_Str"");
        log.warn(""String_Node_Str"");
      }
 else {
        log.warn(""String_Node_Str"");
        log.warn(""String_Node_Str"");
        log.warn(""String_Node_Str"");
        this.headers=new String[fields.length];
        for (int i=0; i < fields.length; i++) {
          this.headers[i]=i + ""String_Node_Str"";
        }
      }
    }
    Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
    this.outputNames=new ArrayList<String>();
    if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
      outputNames.add(evalConfig.getDataSet().getTargetColumnName());
    }
 else {
      outputNames.add(modelConfig.getWeightColumnName());
    }
    if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
      outputNames.add(evalConfig.getDataSet().getWeightColumnName());
    }
 else {
      outputNames.add(SCHEMA_PREFIX + ""String_Node_Str"");
    }
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        if (!evalNamesSet.contains(columnConfig.getColumnName())) {
          log.error(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
 else {
          outputNames.add(columnConfig.getColumnName());
        }
      }
    }
  }
 else {
    log.error(""String_Node_Str"");
    throw new RuntimeException(""String_Node_Str"");
  }
}","public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isBlank(evalConfig.getDataSet().getHeaderPath())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.headers=CommonUtils.getFinalHeaders(evalConfig);
  Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
  this.outputNames=new ArrayList<String>();
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
    outputNames.add(SCHEMA_PREFIX + evalConfig.getDataSet().getTargetColumnName());
  }
 else {
    outputNames.add(SCHEMA_PREFIX + modelConfig.getTargetColumnName());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
    outputNames.add(SCHEMA_PREFIX + evalConfig.getDataSet().getWeightColumnName());
  }
 else {
    outputNames.add(SCHEMA_PREFIX + ""String_Node_Str"");
  }
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    columnConfigMap.put(columnConfig.getColumnName(),columnConfig);
  }
  List<String> allMetaColumns=evalConfig.getAllMetaColumns(modelConfig);
  for (  String meta : allMetaColumns) {
    if (evalNamesSet.contains(meta)) {
      outputNames.add(meta);
      validMetaSize+=1;
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + meta + ""String_Node_Str"");
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  boolean isAfterVarSelect=(inputOutputIndex[3] == 1);
  for (  ColumnConfig columnConfig : this.columnConfigList) {
    if (isAfterVarSelect) {
      if (columnConfig.isFinalSelect() && (!columnConfig.isMeta() && !columnConfig.isTarget())) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
 else {
      if (!columnConfig.isMeta() && !columnConfig.isTarget()) {
        if (evalNamesSet.contains(columnConfig.getColumnName())) {
          if (!outputNames.contains(columnConfig.getColumnName())) {
            outputNames.add(columnConfig.getColumnName());
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
      }
    }
  }
}",0.3115115851415961
31815,"public Tuple exec(Tuple input) throws IOException {
  Map<String,String> rawDataMap=CommonUtils.convertDataIntoMap(input,this.headers);
  Tuple tuple=TupleFactory.getInstance().newTuple(this.outputNames.size());
  for (int i=0; i < this.outputNames.size(); i++) {
    String name=this.outputNames.get(i);
    String raw=rawDataMap.get(name);
    if (i == 0) {
      tuple.set(i,raw);
    }
 else     if (i == 1) {
      tuple.set(i,(StringUtils.isEmpty(raw) ? ""String_Node_Str"" : raw));
    }
 else {
      ColumnConfig columnConfig=CommonUtils.findColumnConfigByName(this.columnConfigList,name);
      Double value=Normalizer.normalize(columnConfig,raw,this.modelConfig.getNormalizeStdDevCutOff(),this.modelConfig.getNormalizeType());
      tuple.set(i,value);
    }
  }
  return tuple;
}","public Tuple exec(Tuple input) throws IOException {
  Map<String,String> rawDataMap=CommonUtils.convertDataIntoMap(input,this.headers);
  Tuple tuple=TupleFactory.getInstance().newTuple(this.outputNames.size());
  for (int i=0; i < this.outputNames.size(); i++) {
    String name=this.outputNames.get(i);
    String raw=rawDataMap.get(name);
    if (i == 0) {
      tuple.set(i,raw);
    }
 else     if (i == 1) {
      tuple.set(i,(StringUtils.isEmpty(raw) ? ""String_Node_Str"" : raw));
    }
 else     if (i > 1 && i < 2 + validMetaSize) {
      tuple.set(i,raw);
    }
 else {
      ColumnConfig columnConfig=this.columnConfigMap.get(name);
      Double value=Normalizer.normalize(columnConfig,raw,this.modelConfig.getNormalizeStdDevCutOff(),this.modelConfig.getNormalizeType());
      tuple.set(i,value);
    }
  }
  return tuple;
}",0.9039408866995072
31816,"public EvalScoreUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName,String scale) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (evalConfig.getModelsPath() != null) {
    this.columnConfigList=ShifuFileUtils.searchColumnConfig(evalConfig,columnConfigList);
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    this.headers=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),delimiter,evalConfig.getDataSet().getSource());
  }
 else {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      this.headers=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        this.headers[i]=CommonUtils.getRelativePigHeaderColumnName(fields[i]);
      }
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      this.headers=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        this.headers[i]=i + ""String_Node_Str"";
      }
    }
  }
  this.modelCnt=CommonUtils.getBasicModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
  this.subModelsCnt=CommonUtils.getSubModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
  this.scale=scale;
}","public EvalScoreUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName,String scale) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (evalConfig.getModelsPath() != null) {
    this.columnConfigList=ShifuFileUtils.searchColumnConfig(evalConfig,columnConfigList);
  }
  this.headers=CommonUtils.getFinalHeaders(evalConfig);
  this.modelCnt=CommonUtils.getBasicModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
  this.subModelsCnt=CommonUtils.getSubModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
  this.scale=scale;
}",0.5018450184501845
31817,"public Scorer(List<BasicML> models,List<ColumnConfig> columnConfigList,String algorithm,ModelConfig modelConfig,Double cutoff){
  if (modelConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.models=models;
  this.columnConfigList=columnConfigList;
  this.cutoff=cutoff;
  this.alg=algorithm;
  this.modelConfig=modelConfig;
  if (this.columnConfigList != null) {
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    if (inputNodeCount == candidateCount) {
      this.noVarSelect=true;
    }
 else {
      this.noVarSelect=false;
    }
  }
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.isCategorical()) {
        Map<String,Integer> map=new HashMap<String,Integer>();
        List<String> categories=columnConfig.getBinCategory();
        for (int i=0; i < categories.size(); i++) {
          map.put(categories.get(i) == null ? ""String_Node_Str"" : categories.get(i),i);
        }
        this.binCategoryMap.put(columnConfig.getColumnNum(),map);
      }
    }
  }
  this.executorManager=new ExecutorManager<MLData>(Math.min(Runtime.getRuntime().availableProcessors(),models.size()));
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      Scorer.this.executorManager.forceShutDown();
    }
  }
));
}","public Scorer(List<BasicML> models,List<ColumnConfig> columnConfigList,String algorithm,ModelConfig modelConfig,Double cutoff){
  if (modelConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.models=models;
  this.columnConfigList=columnConfigList;
  this.cutoff=cutoff;
  this.alg=algorithm;
  this.modelConfig=modelConfig;
  if (this.columnConfigList != null) {
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    if (inputNodeCount == candidateCount) {
      this.noVarSelect=true;
    }
 else {
      this.noVarSelect=false;
    }
  }
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    for (    ColumnConfig columnConfig : columnConfigList) {
      if (columnConfig.isCategorical()) {
        Map<String,Integer> map=new HashMap<String,Integer>();
        List<String> categories=columnConfig.getBinCategory();
        if (categories == null) {
          continue;
        }
        for (int i=0; i < categories.size(); i++) {
          map.put(categories.get(i) == null ? ""String_Node_Str"" : categories.get(i),i);
        }
        this.binCategoryMap.put(columnConfig.getColumnNum(),map);
      }
    }
  }
  this.executorManager=new ExecutorManager<MLData>(Math.min(Runtime.getRuntime().availableProcessors(),models.size()));
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      Scorer.this.executorManager.forceShutDown();
    }
  }
));
}",0.9798234552332912
31818,"/** 
 * Return first two lines split string array. This is used to detect data schema and check if data schema is the same as data.
 */
public static String[][] takeFirstTwoLines(String dataSetRawPath,String delimiter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimiter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
    if (listStatus == null || listStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
    }
    Arrays.sort(listStatus,new Comparator<FileStatus>(){
      @Override public int compare(      FileStatus o1,      FileStatus o2){
        return o1.getPath().toString().compareTo(o2.getPath().toString());
      }
    }
);
    firstValidFile=findFirstNonEmptyFile(listStatus);
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    String[] firstArray=null;
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(firstLine)) {
        list.add(unit);
      }
      firstArray=list.toArray(new String[0]);
    }
    String secondLine=reader.readLine();
    String[] secondArray=null;
    if (secondLine != null && secondLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(secondLine)) {
        list.add(unit);
      }
      secondArray=list.toArray(new String[0]);
    }
    String[][] results=new String[2][];
    results[0]=firstArray;
    results[1]=secondArray;
    return results;
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}","/** 
 * Return first two lines split string array. This is used to detect data schema and check if data schema is the same as data.
 */
public static String[][] takeFirstTwoLines(String dataSetRawPath,String delimiter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimiter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    for (    FileStatus fileStatus : globStatus) {
      RemoteIterator<LocatedFileStatus> iterator=fs.listFiles(fileStatus.getPath(),true);
      while (iterator.hasNext()) {
        LocatedFileStatus lfs=iterator.next();
        String name=lfs.getPath().getName();
        if (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"")) {
          continue;
        }
        if (lfs.getLen() > 1024L) {
          firstValidFile=lfs.getPath().toString();
          break;
        }
      }
      if (StringUtils.isNotBlank(firstValidFile)) {
        break;
      }
    }
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    String[] firstArray=null;
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(firstLine)) {
        list.add(unit);
      }
      firstArray=list.toArray(new String[0]);
    }
    String secondLine=reader.readLine();
    String[] secondArray=null;
    if (secondLine != null && secondLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(secondLine)) {
        list.add(unit);
      }
      secondArray=list.toArray(new String[0]);
    }
    String[][] results=new String[2][];
    results[0]=firstArray;
    results[1]=secondArray;
    return results;
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}",0.8003545313538666
31819,"@Override public int compare(FileStatus o1,FileStatus o2){
  return o1.getPath().toString().compareTo(o2.getPath().toString());
}","@Override public int compare(ColumnConfig from,ColumnConfig to){
  return from.getColumnName().compareTo(to.getColumnName());
}",0.59375
31820,"/** 
 * Return first line split string array. This is used to detect data schema.
 */
public static String[] takeFirstLine(String dataSetRawPath,String delimeter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimeter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
    if (listStatus == null || listStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
    }
    Arrays.sort(listStatus,new Comparator<FileStatus>(){
      @Override public int compare(      FileStatus o1,      FileStatus o2){
        return o1.getPath().toString().compareTo(o2.getPath().toString());
      }
    }
);
    firstValidFile=findFirstNonEmptyFile(listStatus);
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    log.debug(""String_Node_Str"",firstLine);
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimeter).split(firstLine)) {
        list.add(unit);
      }
      return list.toArray(new String[0]);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
  return new String[0];
}","/** 
 * Return first line split string array. This is used to detect data schema.
 */
public static String[] takeFirstLine(String dataSetRawPath,String delimeter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimeter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    for (    FileStatus fileStatus : globStatus) {
      RemoteIterator<LocatedFileStatus> iterator=fs.listFiles(fileStatus.getPath(),true);
      while (iterator.hasNext()) {
        LocatedFileStatus lfs=iterator.next();
        String name=lfs.getPath().getName();
        if (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"")) {
          continue;
        }
        if (lfs.getLen() > 1024L) {
          firstValidFile=lfs.getPath().toString();
          break;
        }
      }
      if (StringUtils.isNotBlank(firstValidFile)) {
        break;
      }
    }
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    log.debug(""String_Node_Str"",firstLine);
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimeter).split(firstLine)) {
        list.add(unit);
      }
      return list.toArray(new String[0]);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
  return new String[0];
}",0.3890544567867786
31821,"@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<DTMasterParams,DTWorkerParams> context){
  this.count+=1;
  if ((this.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  long hashcode=0;
  short[] inputs=new short[this.inputCount];
  float ideal=0f;
  float significance=1f;
  int index=0, inputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    if (index == this.columnConfigList.size()) {
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        ideal=getFloatValue(input);
      }
 else {
        if (!isAfterVarSelect) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
      }
    }
    index+=1;
  }
  if (this.isOneVsAll) {
    ideal=updateOneVsAllTargetValue(ideal);
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(ideal + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(ideal + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  float output=ideal;
  float predict=ideal;
  Data data=new Data(inputs,predict,output,output,significance);
  boolean isValidation=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)context.getAttachment();
  }
  boolean isInTraining=this.addDataPairToDataSet(hashcode,data,isValidation);
  if (isInTraining) {
    data.subsampleWeights=sampleWeights(data.label);
    if (isPositive(data.label)) {
      this.positiveSelectedTrainCount+=data.subsampleWeights[0] * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=data.subsampleWeights[0] * 1L;
    }
  }
 else {
  }
}","@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<DTMasterParams,DTWorkerParams> context){
  this.count+=1;
  if ((this.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  long hashcode=0;
  short[] inputs=new short[this.inputCount];
  float ideal=0f;
  float significance=1f;
  int index=0, inputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    if (index == this.columnConfigList.size()) {
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      if (Float.compare(significance,0f) < 0) {
        LOG.warn(""String_Node_Str"",count,significance);
        significance=1f;
      }
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        ideal=getFloatValue(input);
      }
 else {
        if (!isAfterVarSelect) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
      }
    }
    index+=1;
  }
  if (this.isOneVsAll) {
    ideal=updateOneVsAllTargetValue(ideal);
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(ideal + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(ideal + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  float output=ideal;
  float predict=ideal;
  Data data=new Data(inputs,predict,output,output,significance);
  boolean isValidation=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)context.getAttachment();
  }
  boolean isInTraining=this.addDataPairToDataSet(hashcode,data,isValidation);
  if (isInTraining) {
    data.subsampleWeights=sampleWeights(data.label);
    if (isPositive(data.label)) {
      this.positiveSelectedTrainCount+=data.subsampleWeights[0] * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=data.subsampleWeights[0] * 1L;
    }
  }
 else {
  }
}",0.9877951002227172
31822,"@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<LogisticRegressionParams,LogisticRegressionParams> context){
  ++this.count;
  if ((this.count) % 100000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  String line=currentValue.getWritable().toString();
  float[] inputData=new float[inputNum];
  float[] outputData=new float[outputNum];
  int index=0, inputIndex=0, outputIndex=0;
  long hashcode=0;
  double significance=CommonConstants.DEFAULT_SIGNIFICANCE_VALUE;
  for (  String unit : splitter.split(line)) {
    float floatValue=unit.length() == 0 ? 0f : NumberFormatUtils.getFloat(unit,0f);
    floatValue=(Float.isNaN(floatValue) || Double.isNaN(floatValue)) ? 0f : floatValue;
    if (index == this.columnConfigList.size()) {
      significance=unit.length() == 0 ? 1f : NumberFormatUtils.getDouble(unit,1d);
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        outputData[outputIndex++]=floatValue;
      }
 else {
        if (this.inputNum == this.candidateNum) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputData[inputIndex++]=floatValue;
            hashcode=hashcode * 31 + Float.valueOf(floatValue).hashCode();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputData[inputIndex++]=floatValue;
            hashcode=hashcode * 31 + Float.valueOf(floatValue).hashCode();
          }
        }
      }
    }
    index+=1;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(outputData[0] + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(outputData[0] + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  Data data=new Data(inputData,outputData,significance);
  if (modelConfig.isRegression() && isUpSampleEnabled() && Double.compare(outputData[0],1d) == 0) {
    data.setSignificance(data.significance * (this.upSampleRng.sample() + 1));
  }
  boolean isValidation=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)context.getAttachment();
  }
  boolean isInTraining=addDataPairToDataSet(hashcode,data,isValidation);
  if (isInTraining) {
    float subsampleWeights=sampleWeights(outputData[0]);
    if (isPositive(outputData[0])) {
      this.positiveSelectedTrainCount+=subsampleWeights * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=subsampleWeights * 1L;
    }
    data.setSignificance(data.significance * subsampleWeights);
  }
 else {
  }
}","@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<LogisticRegressionParams,LogisticRegressionParams> context){
  ++this.count;
  if ((this.count) % 100000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  String line=currentValue.getWritable().toString();
  float[] inputData=new float[inputNum];
  float[] outputData=new float[outputNum];
  int index=0, inputIndex=0, outputIndex=0;
  long hashcode=0;
  double significance=CommonConstants.DEFAULT_SIGNIFICANCE_VALUE;
  for (  String unit : splitter.split(line)) {
    float floatValue=unit.length() == 0 ? 0f : NumberFormatUtils.getFloat(unit,0f);
    floatValue=(Float.isNaN(floatValue) || Double.isNaN(floatValue)) ? 0f : floatValue;
    if (index == this.columnConfigList.size()) {
      significance=unit.length() == 0 ? 1f : NumberFormatUtils.getDouble(unit,1d);
      if (Double.compare(significance,0d) < 0) {
        LOG.warn(""String_Node_Str"",count,significance);
        significance=1d;
      }
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        outputData[outputIndex++]=floatValue;
      }
 else {
        if (this.inputNum == this.candidateNum) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputData[inputIndex++]=floatValue;
            hashcode=hashcode * 31 + Float.valueOf(floatValue).hashCode();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputData[inputIndex++]=floatValue;
            hashcode=hashcode * 31 + Float.valueOf(floatValue).hashCode();
          }
        }
      }
    }
    index+=1;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(outputData[0] + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(outputData[0] + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  Data data=new Data(inputData,outputData,significance);
  if (modelConfig.isRegression() && isUpSampleEnabled() && Double.compare(outputData[0],1d) == 0) {
    data.setSignificance(data.significance * (this.upSampleRng.sample() + 1));
  }
  boolean isValidation=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)context.getAttachment();
  }
  boolean isInTraining=addDataPairToDataSet(hashcode,data,isValidation);
  if (isInTraining) {
    float subsampleWeights=sampleWeights(outputData[0]);
    if (isPositive(outputData[0])) {
      this.positiveSelectedTrainCount+=subsampleWeights * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=subsampleWeights * 1L;
    }
    data.setSignificance(data.significance * subsampleWeights);
  }
 else {
  }
}",0.9793351302785264
31823,"@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<NNParams,NNParams> workerContext){
  super.count+=1;
  if ((super.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",super.count);
  }
  float[] inputs=new float[super.inputNodeCount];
  float[] ideal=new float[super.outputNodeCount];
  if (super.isDry) {
    addDataPairToDataSet(0,new BasicFloatMLDataPair(new BasicFloatMLData(inputs),new BasicFloatMLData(ideal)));
    return;
  }
  long hashcode=0;
  float significance=1f;
  int index=0, inputsIndex=0, outputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    float floatValue=input.length() == 0 ? 0f : NumberFormatUtils.getFloat(input,0f);
    floatValue=(Float.isNaN(floatValue) || Double.isNaN(floatValue)) ? 0f : floatValue;
    if (index == super.columnConfigList.size()) {
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      break;
    }
 else {
      ColumnConfig columnConfig=super.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        if (modelConfig.isRegression()) {
          ideal[outputIndex++]=floatValue;
        }
 else {
          if (modelConfig.getTrain().isOneVsAll()) {
            ideal[outputIndex++]=Float.compare(floatValue,trainerId) == 0 ? 1f : 0f;
          }
 else {
            int ideaIndex=(int)floatValue;
            ideal[ideaIndex]=1f;
          }
        }
      }
 else {
        if (super.inputNodeCount == super.candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputs[inputsIndex++]=floatValue;
            hashcode=hashcode * 31 + Double.valueOf(floatValue).hashCode();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputs[inputsIndex++]=floatValue;
            hashcode=hashcode * 31 + Double.valueOf(floatValue).hashCode();
          }
        }
      }
    }
    index+=1;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(ideal[0] + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(ideal[0] + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  FloatMLDataPair pair=new BasicFloatMLDataPair(new BasicFloatMLData(inputs),new BasicFloatMLData(ideal));
  if (modelConfig.isRegression() && isUpSampleEnabled() && Double.compare(ideal[0],1d) == 0) {
    pair.setSignificance(significance * (super.upSampleRng.sample() + 1));
  }
 else {
    pair.setSignificance(significance);
  }
  boolean isValidation=false;
  if (workerContext.getAttachment() != null && workerContext.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)workerContext.getAttachment();
  }
  boolean isInTraining=addDataPairToDataSet(hashcode,pair,isValidation);
  if (isInTraining) {
    float subsampleWeights=sampleWeights(pair.getIdealArray()[0]);
    if (isPositive(pair.getIdealArray()[0])) {
      this.positiveSelectedTrainCount+=subsampleWeights * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=subsampleWeights * 1L;
    }
    pair.setSignificance(pair.getSignificance() * subsampleWeights);
  }
 else {
  }
}","@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<NNParams,NNParams> workerContext){
  super.count+=1;
  if ((super.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",super.count);
  }
  float[] inputs=new float[super.inputNodeCount];
  float[] ideal=new float[super.outputNodeCount];
  if (super.isDry) {
    addDataPairToDataSet(0,new BasicFloatMLDataPair(new BasicFloatMLData(inputs),new BasicFloatMLData(ideal)));
    return;
  }
  long hashcode=0;
  float significance=1f;
  int index=0, inputsIndex=0, outputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    float floatValue=input.length() == 0 ? 0f : NumberFormatUtils.getFloat(input,0f);
    floatValue=(Float.isNaN(floatValue) || Double.isNaN(floatValue)) ? 0f : floatValue;
    if (index == super.columnConfigList.size()) {
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      if (Float.compare(significance,0f) < 0) {
        LOG.warn(""String_Node_Str"",count,significance);
        significance=1f;
      }
      break;
    }
 else {
      ColumnConfig columnConfig=super.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        if (modelConfig.isRegression()) {
          ideal[outputIndex++]=floatValue;
        }
 else {
          if (modelConfig.getTrain().isOneVsAll()) {
            ideal[outputIndex++]=Float.compare(floatValue,trainerId) == 0 ? 1f : 0f;
          }
 else {
            int ideaIndex=(int)floatValue;
            ideal[ideaIndex]=1f;
          }
        }
      }
 else {
        if (super.inputNodeCount == super.candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputs[inputsIndex++]=floatValue;
            hashcode=hashcode * 31 + Double.valueOf(floatValue).hashCode();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputs[inputsIndex++]=floatValue;
            hashcode=hashcode * 31 + Double.valueOf(floatValue).hashCode();
          }
        }
      }
    }
    index+=1;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(ideal[0] + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(ideal[0] + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  FloatMLDataPair pair=new BasicFloatMLDataPair(new BasicFloatMLData(inputs),new BasicFloatMLData(ideal));
  if (modelConfig.isRegression() && isUpSampleEnabled() && Double.compare(ideal[0],1d) == 0) {
    pair.setSignificance(significance * (super.upSampleRng.sample() + 1));
  }
 else {
    pair.setSignificance(significance);
  }
  boolean isValidation=false;
  if (workerContext.getAttachment() != null && workerContext.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)workerContext.getAttachment();
  }
  boolean isInTraining=addDataPairToDataSet(hashcode,pair,isValidation);
  if (isInTraining) {
    float subsampleWeights=sampleWeights(pair.getIdealArray()[0]);
    if (isPositive(pair.getIdealArray()[0])) {
      this.positiveSelectedTrainCount+=subsampleWeights * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=subsampleWeights * 1L;
    }
    pair.setSignificance(pair.getSignificance() * subsampleWeights);
  }
 else {
  }
}",0.9823476356139672
31824,"/** 
 * Load and initialize column binning info object.
 */
private void loadColumnBinningInfo() throws FileNotFoundException, IOException {
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(Constants.BINNING_INFO_FILE_NAME),Charset.forName(""String_Node_Str"")));
    String line=reader.readLine();
    while (line != null && line.length() != 0) {
      LOG.debug(""String_Node_Str"",line);
      String[] cols=line.trim().split(Constants.DEFAULT_ESCAPE_DELIMITER);
      if (cols != null && cols.length >= 2) {
        Integer columnNum=Integer.parseInt(cols[0]);
        BinningInfoWritable binningInfo=new BinningInfoWritable();
        binningInfo.setColumnNum(columnNum);
        ColumnConfig columnConfig=this.columnConfigList.get(columnNum);
        int binSize=0;
        if (columnConfig.isNumerical()) {
          binningInfo.setNumeric(true);
          List<Double> list=new ArrayList<Double>();
          for (          String startElement : BIN_BOUNDARY_SPLITTER.split(cols[1])) {
            list.add(Double.valueOf(startElement));
          }
          binningInfo.setBinBoundaries(list);
          binSize=list.size();
        }
 else {
          binningInfo.setNumeric(false);
          List<String> list=new ArrayList<String>();
          Map<String,Integer> map=this.categoricalBinMap.get(columnNum);
          if (map == null) {
            map=new HashMap<String,Integer>();
            this.categoricalBinMap.put(columnNum,map);
          }
          int index=0;
          for (          String startElement : BIN_BOUNDARY_SPLITTER.split(cols[1])) {
            list.add(startElement);
            map.put(startElement,index++);
          }
          binningInfo.setBinCategories(list);
          binSize=list.size();
        }
        long[] binCountPos=new long[binSize + 1];
        binningInfo.setBinCountPos(binCountPos);
        long[] binCountNeg=new long[binSize + 1];
        binningInfo.setBinCountNeg(binCountNeg);
        double[] binWeightPos=new double[binSize + 1];
        binningInfo.setBinWeightPos(binWeightPos);
        double[] binWeightNeg=new double[binSize + 1];
        binningInfo.setBinWeightNeg(binWeightNeg);
        this.columnBinningInfo.put(columnNum,binningInfo);
      }
      line=reader.readLine();
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
}","/** 
 * Load and initialize column binning info object.
 */
private void loadColumnBinningInfo() throws FileNotFoundException, IOException {
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(Constants.BINNING_INFO_FILE_NAME),Charset.forName(""String_Node_Str"")));
    String line=reader.readLine();
    while (line != null && line.length() != 0) {
      LOG.debug(""String_Node_Str"",line);
      String[] cols=CommonUtils.split(line.trim(),Constants.DEFAULT_DELIMITER);
      if (cols != null && cols.length >= 2) {
        Integer columnNum=Integer.parseInt(cols[0]);
        BinningInfoWritable binningInfo=new BinningInfoWritable();
        binningInfo.setColumnNum(columnNum);
        ColumnConfig columnConfig=this.columnConfigList.get(columnNum);
        int binSize=0;
        if (columnConfig.isNumerical()) {
          binningInfo.setNumeric(true);
          List<Double> list=new ArrayList<Double>();
          for (          String startElement : BIN_BOUNDARY_SPLITTER.split(cols[1])) {
            list.add(Double.valueOf(startElement));
          }
          binningInfo.setBinBoundaries(list);
          binSize=list.size();
        }
 else {
          binningInfo.setNumeric(false);
          List<String> list=new ArrayList<String>();
          Map<String,Integer> map=this.categoricalBinMap.get(columnNum);
          if (map == null) {
            map=new HashMap<String,Integer>();
            this.categoricalBinMap.put(columnNum,map);
          }
          int index=0;
          if (!StringUtils.isBlank(cols[1])) {
            for (            String startElement : BIN_BOUNDARY_SPLITTER.split(cols[1])) {
              list.add(startElement);
              map.put(startElement,index++);
            }
          }
          binningInfo.setBinCategories(list);
          binSize=list.size();
        }
        long[] binCountPos=new long[binSize + 1];
        binningInfo.setBinCountPos(binCountPos);
        long[] binCountNeg=new long[binSize + 1];
        binningInfo.setBinCountNeg(binCountNeg);
        double[] binWeightPos=new double[binSize + 1];
        binningInfo.setBinWeightPos(binWeightPos);
        double[] binWeightNeg=new double[binSize + 1];
        binningInfo.setBinWeightNeg(binWeightNeg);
        LOG.info(""String_Node_Str"",columnNum,binningInfo);
        this.columnBinningInfo.put(columnNum,binningInfo);
      }
      line=reader.readLine();
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
}",0.9636548223350254
31825,"@Override protected void reduce(IntWritable key,Iterable<BinningInfoWritable> values,Context context) throws IOException, InterruptedException {
  long start=System.currentTimeMillis();
  double sum=0d;
  double squaredSum=0d;
  double tripleSum=0d;
  double quarticSum=0d;
  long count=0L, missingCount=0L;
  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;
  List<Double> binBoundaryList=null;
  List<String> binCategories=null;
  long[] binCountPos=null;
  long[] binCountNeg=null;
  double[] binWeightPos=null;
  double[] binWeightNeg=null;
  ColumnConfig columnConfig=this.columnConfigList.get(key.get());
  HyperLogLogPlus hyperLogLogPlus=null;
  Set<String> fis=new HashSet<String>();
  long totalCount=0, invalidCount=0, validNumCount=0;
  int binSize=0;
  for (  BinningInfoWritable info : values) {
    CountAndFrequentItemsWritable cfiw=info.getCfiw();
    totalCount+=cfiw.getCount();
    invalidCount+=cfiw.getInvalidCount();
    validNumCount+=cfiw.getValidNumCount();
    fis.addAll(cfiw.getFrequetItems());
    if (hyperLogLogPlus == null) {
      hyperLogLogPlus=HyperLogLogPlus.Builder.build(cfiw.getHyperBytes());
    }
 else {
      try {
        hyperLogLogPlus=(HyperLogLogPlus)hyperLogLogPlus.merge(HyperLogLogPlus.Builder.build(cfiw.getHyperBytes()));
      }
 catch (      CardinalityMergeException e) {
        throw new RuntimeException(e);
      }
    }
    if (info.isNumeric() && binBoundaryList == null) {
      binBoundaryList=info.getBinBoundaries();
      binSize=binBoundaryList.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    if (!info.isNumeric() && binCategories == null) {
      binCategories=info.getBinCategories();
      binSize=binCategories.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    count+=info.getTotalCount();
    missingCount+=info.getMissingCount();
    sum+=info.getSum();
    squaredSum+=info.getSquaredSum();
    tripleSum+=info.getTripleSum();
    quarticSum+=info.getQuarticSum();
    if (Double.compare(max,info.getMax()) < 0) {
      max=info.getMax();
    }
    if (Double.compare(min,info.getMin()) > 0) {
      min=info.getMin();
    }
    for (int i=0; i < (binSize + 1); i++) {
      binCountPos[i]+=info.getBinCountPos()[i];
      binCountNeg[i]+=info.getBinCountNeg()[i];
      binWeightPos[i]+=info.getBinWeightPos()[i];
      binWeightNeg[i]+=info.getBinWeightNeg()[i];
    }
  }
  double[] binPosRate;
  if (modelConfig.isRegression()) {
    binPosRate=computePosRate(binCountPos,binCountNeg);
  }
 else {
    binPosRate=computeRateForMultiClassfication(binCountPos);
  }
  String binBounString=null;
  if (columnConfig.isCategorical()) {
    if (binCategories.size() == 0 || binCategories.size() > MAX_CATEGORICAL_BINC_COUNT) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binCategories.size());
      return;
    }
    binBounString=Base64Utils.base64Encode(""String_Node_Str"" + StringUtils.join(binCategories,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR) + ""String_Node_Str"");
    min=Double.MAX_VALUE;
    max=Double.MIN_VALUE;
    sum=0d;
    squaredSum=0d;
    for (int i=0; i < binPosRate.length; i++) {
      if (!Double.isNaN(binPosRate[i])) {
        if (Double.compare(max,binPosRate[i]) < 0) {
          max=binPosRate[i];
        }
        if (Double.compare(min,binPosRate[i]) > 0) {
          min=binPosRate[i];
        }
        long binCount=binCountPos[i] + binCountNeg[i];
        sum+=binPosRate[i] * binCount;
        double squaredVal=binPosRate[i] * binPosRate[i];
        squaredSum+=squaredVal * binCount;
        tripleSum+=squaredVal * binPosRate[i] * binCount;
        quarticSum+=squaredVal * squaredVal * binCount;
      }
    }
  }
 else {
    if (binBoundaryList.size() == 0) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binBoundaryList.size());
      return;
    }
    binBounString=binBoundaryList.toString();
  }
  ColumnMetrics columnCountMetrics=null;
  ColumnMetrics columnWeightMetrics=null;
  if (modelConfig.isRegression()) {
    columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
    columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  }
  long realCount=this.statsExcludeMissingValue ? (count - missingCount) : count;
  double mean=sum / realCount;
  double stdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / (realCount - 1)));
  double aStdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / realCount));
  double skewness=ColumnStatsCalculator.computeSkewness(realCount,mean,aStdDev,sum,squaredSum,tripleSum);
  double kurtosis=ColumnStatsCalculator.computeKurtosis(realCount,mean,aStdDev,sum,squaredSum,tripleSum,quarticSum);
  sb.append(key.get()).append(Constants.DEFAULT_DELIMITER).append(binBounString).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountPos)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(new double[0])).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binPosRate)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : df.format(columnCountMetrics.getKs())).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : df.format(columnWeightMetrics.getIv())).append(Constants.DEFAULT_DELIMITER).append(df.format(max)).append(Constants.DEFAULT_DELIMITER).append(df.format(min)).append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(df.format(stdDev)).append(Constants.DEFAULT_DELIMITER).append(columnConfig.isCategorical() ? ""String_Node_Str"" : ""String_Node_Str"").append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(missingCount).append(Constants.DEFAULT_DELIMITER).append(count).append(Constants.DEFAULT_DELIMITER).append(missingCount * 1.0d / count).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightPos)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : columnCountMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getKs()).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : columnCountMetrics.getIv()).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnCountMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnWeightMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(skewness).append(Constants.DEFAULT_DELIMITER).append(kurtosis).append(Constants.DEFAULT_DELIMITER).append(totalCount).append(Constants.DEFAULT_DELIMITER).append(invalidCount).append(Constants.DEFAULT_DELIMITER).append(validNumCount).append(Constants.DEFAULT_DELIMITER).append(hyperLogLogPlus.cardinality()).append(Constants.DEFAULT_DELIMITER).append(limitedFrequentItems(fis));
  outputValue.set(sb.toString());
  context.write(NullWritable.get(),outputValue);
  sb.delete(0,sb.length());
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}","@Override protected void reduce(IntWritable key,Iterable<BinningInfoWritable> values,Context context) throws IOException, InterruptedException {
  long start=System.currentTimeMillis();
  double sum=0d;
  double squaredSum=0d;
  double tripleSum=0d;
  double quarticSum=0d;
  long count=0L, missingCount=0L;
  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;
  List<Double> binBoundaryList=null;
  List<String> binCategories=null;
  long[] binCountPos=null;
  long[] binCountNeg=null;
  double[] binWeightPos=null;
  double[] binWeightNeg=null;
  ColumnConfig columnConfig=this.columnConfigList.get(key.get());
  HyperLogLogPlus hyperLogLogPlus=null;
  Set<String> fis=new HashSet<String>();
  long totalCount=0, invalidCount=0, validNumCount=0;
  int binSize=0;
  for (  BinningInfoWritable info : values) {
    CountAndFrequentItemsWritable cfiw=info.getCfiw();
    totalCount+=cfiw.getCount();
    invalidCount+=cfiw.getInvalidCount();
    validNumCount+=cfiw.getValidNumCount();
    fis.addAll(cfiw.getFrequetItems());
    if (hyperLogLogPlus == null) {
      hyperLogLogPlus=HyperLogLogPlus.Builder.build(cfiw.getHyperBytes());
    }
 else {
      try {
        hyperLogLogPlus=(HyperLogLogPlus)hyperLogLogPlus.merge(HyperLogLogPlus.Builder.build(cfiw.getHyperBytes()));
      }
 catch (      CardinalityMergeException e) {
        throw new RuntimeException(e);
      }
    }
    if (info.isNumeric() && binBoundaryList == null) {
      binBoundaryList=info.getBinBoundaries();
      binSize=binBoundaryList.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    if (!info.isNumeric() && binCategories == null) {
      binCategories=info.getBinCategories();
      binSize=binCategories.size();
      binCountPos=new long[binSize + 1];
      binCountNeg=new long[binSize + 1];
      binWeightPos=new double[binSize + 1];
      binWeightNeg=new double[binSize + 1];
    }
    count+=info.getTotalCount();
    missingCount+=info.getMissingCount();
    sum+=info.getSum();
    squaredSum+=info.getSquaredSum();
    tripleSum+=info.getTripleSum();
    quarticSum+=info.getQuarticSum();
    if (Double.compare(max,info.getMax()) < 0) {
      max=info.getMax();
    }
    if (Double.compare(min,info.getMin()) > 0) {
      min=info.getMin();
    }
    for (int i=0; i < (binSize + 1); i++) {
      binCountPos[i]+=info.getBinCountPos()[i];
      binCountNeg[i]+=info.getBinCountNeg()[i];
      binWeightPos[i]+=info.getBinWeightPos()[i];
      binWeightNeg[i]+=info.getBinWeightNeg()[i];
    }
  }
  double[] binPosRate;
  if (modelConfig.isRegression()) {
    binPosRate=computePosRate(binCountPos,binCountNeg);
  }
 else {
    binPosRate=computeRateForMultiClassfication(binCountPos);
  }
  String binBounString=null;
  if (columnConfig.isCategorical()) {
    if (binCategories.size() < 0 || binCategories.size() > MAX_CATEGORICAL_BINC_COUNT) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binCategories.size());
      return;
    }
    binBounString=Base64Utils.base64Encode(""String_Node_Str"" + StringUtils.join(binCategories,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR) + ""String_Node_Str"");
    min=Double.MAX_VALUE;
    max=Double.MIN_VALUE;
    sum=0d;
    squaredSum=0d;
    for (int i=0; i < binPosRate.length; i++) {
      if (!Double.isNaN(binPosRate[i])) {
        if (Double.compare(max,binPosRate[i]) < 0) {
          max=binPosRate[i];
        }
        if (Double.compare(min,binPosRate[i]) > 0) {
          min=binPosRate[i];
        }
        long binCount=binCountPos[i] + binCountNeg[i];
        sum+=binPosRate[i] * binCount;
        double squaredVal=binPosRate[i] * binPosRate[i];
        squaredSum+=squaredVal * binCount;
        tripleSum+=squaredVal * binPosRate[i] * binCount;
        quarticSum+=squaredVal * squaredVal * binCount;
      }
    }
  }
 else {
    if (binBoundaryList.size() == 0) {
      LOG.warn(""String_Node_Str"",key.get(),columnConfig.getColumnName(),binBoundaryList.size());
      return;
    }
    binBounString=binBoundaryList.toString();
  }
  ColumnMetrics columnCountMetrics=null;
  ColumnMetrics columnWeightMetrics=null;
  if (modelConfig.isRegression()) {
    columnCountMetrics=ColumnStatsCalculator.calculateColumnMetrics(binCountNeg,binCountPos);
    columnWeightMetrics=ColumnStatsCalculator.calculateColumnMetrics(binWeightNeg,binWeightPos);
  }
  long realCount=this.statsExcludeMissingValue ? (count - missingCount) : count;
  double mean=sum / realCount;
  double stdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / (realCount - 1)));
  double aStdDev=Math.sqrt(Math.abs((squaredSum - (sum * sum) / realCount + EPS) / realCount));
  double skewness=ColumnStatsCalculator.computeSkewness(realCount,mean,aStdDev,sum,squaredSum,tripleSum);
  double kurtosis=ColumnStatsCalculator.computeKurtosis(realCount,mean,aStdDev,sum,squaredSum,tripleSum,quarticSum);
  sb.append(key.get()).append(Constants.DEFAULT_DELIMITER).append(binBounString).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binCountPos)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(new double[0])).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binPosRate)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : df.format(columnCountMetrics.getKs())).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : df.format(columnWeightMetrics.getIv())).append(Constants.DEFAULT_DELIMITER).append(df.format(max)).append(Constants.DEFAULT_DELIMITER).append(df.format(min)).append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(df.format(stdDev)).append(Constants.DEFAULT_DELIMITER).append(columnConfig.isCategorical() ? ""String_Node_Str"" : ""String_Node_Str"").append(Constants.DEFAULT_DELIMITER).append(df.format(mean)).append(Constants.DEFAULT_DELIMITER).append(missingCount).append(Constants.DEFAULT_DELIMITER).append(count).append(Constants.DEFAULT_DELIMITER).append(missingCount * 1.0d / count).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightNeg)).append(Constants.DEFAULT_DELIMITER).append(Arrays.toString(binWeightPos)).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : columnCountMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getWoe()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? ""String_Node_Str"" : columnWeightMetrics.getKs()).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? ""String_Node_Str"" : columnCountMetrics.getIv()).append(Constants.DEFAULT_DELIMITER).append(columnCountMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnCountMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(columnWeightMetrics == null ? Arrays.toString(new double[binSize + 1]) : columnWeightMetrics.getBinningWoe().toString()).append(Constants.DEFAULT_DELIMITER).append(skewness).append(Constants.DEFAULT_DELIMITER).append(kurtosis).append(Constants.DEFAULT_DELIMITER).append(totalCount).append(Constants.DEFAULT_DELIMITER).append(invalidCount).append(Constants.DEFAULT_DELIMITER).append(validNumCount).append(Constants.DEFAULT_DELIMITER).append(hyperLogLogPlus.cardinality()).append(Constants.DEFAULT_DELIMITER).append(limitedFrequentItems(fis));
  outputValue.set(sb.toString());
  context.write(NullWritable.get(),outputValue);
  sb.delete(0,sb.length());
  LOG.debug(""String_Node_Str"",(System.currentTimeMillis() - start));
}",0.9998074330829964
31826,"/** 
 * Scan the stats result and save them into column configure
 * @param scanner
 */
private void scanStatsResult(Scanner scanner){
  while (scanner.hasNextLine()) {
    String[] raw=scanner.nextLine().trim().split(""String_Node_Str"");
    if (raw.length == 1) {
      continue;
    }
    if (raw.length < 25) {
      log.info(""String_Node_Str"" + raw.length + ""String_Node_Str"");
      log.info(""String_Node_Str"" + Arrays.toString(raw));
    }
    int columnNum=Integer.parseInt(raw[0]);
    try {
      ColumnConfig config=this.columnConfigList.get(columnNum);
      if (config.isCategorical()) {
        String binCategory=Base64Utils.base64Decode(raw[1]);
        config.setBinCategory(CommonUtils.stringToStringList(binCategory,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR));
      }
 else {
        config.setBinBoundary(CommonUtils.stringToDoubleList(raw[1]));
      }
      config.setBinCountNeg(CommonUtils.stringToIntegerList(raw[2]));
      config.setBinCountPos(CommonUtils.stringToIntegerList(raw[3]));
      config.setBinPosCaseRate(CommonUtils.stringToDoubleList(raw[5]));
      config.setBinLength(config.getBinCountNeg().size());
      config.setKs(parseDouble(raw[6]));
      config.setIv(parseDouble(raw[7]));
      config.setMax(parseDouble(raw[8]));
      config.setMin(parseDouble(raw[9]));
      config.setMean(parseDouble(raw[10]));
      config.setStdDev(parseDouble(raw[11],Double.NaN));
      if (raw[12].equals(""String_Node_Str"")) {
        config.setColumnType(ColumnConfig.ColumnType.N);
      }
 else {
        config.setColumnType(ColumnConfig.ColumnType.C);
      }
      config.setMedian(parseDouble(raw[13]));
      config.setMissingCnt(parseLong(raw[14]));
      config.setTotalCount(parseLong(raw[15]));
      config.setMissingPercentage(parseDouble(raw[16]));
      config.setBinWeightedNeg(CommonUtils.stringToDoubleList(raw[17]));
      config.setBinWeightedPos(CommonUtils.stringToDoubleList(raw[18]));
      config.getColumnStats().setWoe(parseDouble(raw[19]));
      config.getColumnStats().setWeightedWoe(parseDouble(raw[20]));
      config.getColumnStats().setWeightedKs(parseDouble(raw[21]));
      config.getColumnStats().setWeightedIv(parseDouble(raw[22]));
      config.getColumnBinning().setBinCountWoe(CommonUtils.stringToDoubleList(raw[23]));
      config.getColumnBinning().setBinWeightedWoe(CommonUtils.stringToDoubleList(raw[24]));
      if (raw.length >= 26) {
        config.getColumnStats().setSkewness(parseDouble(raw[25]));
      }
      if (raw.length >= 27) {
        config.getColumnStats().setKurtosis(parseDouble(raw[26]));
      }
      if (raw.length >= 30) {
        config.getColumnStats().setValidNumCount(parseLong(raw[29]));
      }
      if (raw.length >= 31) {
        config.getColumnStats().setDistinctCount(parseLong(raw[30]));
      }
      if (raw.length >= 32) {
        if (raw[31] != null) {
          List<String> sampleValues=Arrays.asList(raw[31].split(""String_Node_Str""));
          config.setSampleValues(sampleValues);
        }
      }
    }
 catch (    Exception e) {
      log.error(String.format(""String_Node_Str"",columnNum,this.columnConfigList.get(columnNum).getColumnName(),e.getMessage()),e);
      continue;
    }
  }
}","/** 
 * Scan the stats result and save them into column configure
 * @param scanner
 */
private void scanStatsResult(Scanner scanner){
  while (scanner.hasNextLine()) {
    String[] raw=scanner.nextLine().trim().split(""String_Node_Str"");
    if (raw.length == 1) {
      continue;
    }
    if (raw.length < 25) {
      log.info(""String_Node_Str"" + raw.length + ""String_Node_Str"");
      log.info(""String_Node_Str"" + Arrays.toString(raw));
    }
    int columnNum=Integer.parseInt(raw[0]);
    try {
      ColumnConfig config=this.columnConfigList.get(columnNum);
      if (config.isCategorical()) {
        String binCategory=Base64Utils.base64Decode(raw[1]);
        config.setBinCategory(CommonUtils.stringToStringList(binCategory,CalculateStatsUDF.CATEGORY_VAL_SEPARATOR));
        config.setBinBoundary(null);
      }
 else {
        config.setBinBoundary(CommonUtils.stringToDoubleList(raw[1]));
        config.setBinCategory(null);
      }
      config.setBinCountNeg(CommonUtils.stringToIntegerList(raw[2]));
      config.setBinCountPos(CommonUtils.stringToIntegerList(raw[3]));
      config.setBinPosCaseRate(CommonUtils.stringToDoubleList(raw[5]));
      config.setBinLength(config.getBinCountNeg().size());
      config.setKs(parseDouble(raw[6]));
      config.setIv(parseDouble(raw[7]));
      config.setMax(parseDouble(raw[8]));
      config.setMin(parseDouble(raw[9]));
      config.setMean(parseDouble(raw[10]));
      config.setStdDev(parseDouble(raw[11],Double.NaN));
      if (raw[12].equals(""String_Node_Str"")) {
        config.setColumnType(ColumnConfig.ColumnType.N);
      }
 else {
        config.setColumnType(ColumnConfig.ColumnType.C);
      }
      config.setMedian(parseDouble(raw[13]));
      config.setMissingCnt(parseLong(raw[14]));
      config.setTotalCount(parseLong(raw[15]));
      config.setMissingPercentage(parseDouble(raw[16]));
      config.setBinWeightedNeg(CommonUtils.stringToDoubleList(raw[17]));
      config.setBinWeightedPos(CommonUtils.stringToDoubleList(raw[18]));
      config.getColumnStats().setWoe(parseDouble(raw[19]));
      config.getColumnStats().setWeightedWoe(parseDouble(raw[20]));
      config.getColumnStats().setWeightedKs(parseDouble(raw[21]));
      config.getColumnStats().setWeightedIv(parseDouble(raw[22]));
      config.getColumnBinning().setBinCountWoe(CommonUtils.stringToDoubleList(raw[23]));
      config.getColumnBinning().setBinWeightedWoe(CommonUtils.stringToDoubleList(raw[24]));
      if (raw.length >= 26) {
        config.getColumnStats().setSkewness(parseDouble(raw[25]));
      }
      if (raw.length >= 27) {
        config.getColumnStats().setKurtosis(parseDouble(raw[26]));
      }
      if (raw.length >= 30) {
        config.getColumnStats().setValidNumCount(parseLong(raw[29]));
      }
      if (raw.length >= 31) {
        config.getColumnStats().setDistinctCount(parseLong(raw[30]));
      }
      if (raw.length >= 32) {
        if (raw[31] != null) {
          List<String> sampleValues=Arrays.asList(raw[31].split(""String_Node_Str""));
          config.setSampleValues(sampleValues);
        }
      }
    }
 catch (    Exception e) {
      log.error(String.format(""String_Node_Str"",columnNum,this.columnConfigList.get(columnNum).getColumnName(),e.getMessage()),e);
      continue;
    }
  }
}",0.9886153846153846
31827,"/** 
 * Update target, listMeta, listForceSelect, listForceRemove
 * @throws IOException
 * @throws IllegalArgumentException if modelConfig is null or columnConfigList is null.
 */
public static void updateColumnConfigFlags(ModelConfig modelConfig,List<ColumnConfig> columnConfigList) throws IOException {
  String targetColumnName=CommonUtils.getRelativePigHeaderColumnName(modelConfig.getTargetColumnName());
  Set<String> setCategorialColumns=new HashSet<String>();
  if (CollectionUtils.isNotEmpty(modelConfig.getCategoricalColumnNames())) {
    for (    String column : modelConfig.getCategoricalColumnNames()) {
      setCategorialColumns.add(CommonUtils.getRelativePigHeaderColumnName(column));
    }
  }
  Set<String> setMeta=new HashSet<String>();
  if (CollectionUtils.isNotEmpty(modelConfig.getMetaColumnNames())) {
    for (    String meta : modelConfig.getMetaColumnNames()) {
      setMeta.add(CommonUtils.getRelativePigHeaderColumnName(meta));
    }
  }
  Set<String> setForceRemove=new HashSet<String>();
  if (Boolean.TRUE.equals(modelConfig.getVarSelect().getForceEnable()) && CollectionUtils.isNotEmpty(modelConfig.getListForceRemove())) {
    for (    String forceRemoveName : modelConfig.getListForceRemove()) {
      setForceRemove.add(CommonUtils.getRelativePigHeaderColumnName(forceRemoveName));
    }
  }
  Set<String> setForceSelect=new HashSet<String>(512);
  if (Boolean.TRUE.equals(modelConfig.getVarSelect().getForceEnable()) && CollectionUtils.isNotEmpty(modelConfig.getListForceSelect())) {
    for (    String forceSelectName : modelConfig.getListForceSelect()) {
      setForceSelect.add(CommonUtils.getRelativePigHeaderColumnName(forceSelectName));
    }
  }
  for (  ColumnConfig config : columnConfigList) {
    String varName=config.getColumnName();
    if (targetColumnName.equals(varName)) {
      config.setColumnFlag(ColumnFlag.Target);
      config.setColumnType(null);
    }
 else     if (setMeta.contains(varName)) {
      config.setColumnFlag(ColumnFlag.Meta);
      config.setColumnType(null);
    }
 else     if (setForceRemove.contains(varName)) {
      config.setColumnFlag(ColumnFlag.ForceRemove);
    }
 else     if (setForceSelect.contains(varName)) {
      config.setColumnFlag(ColumnFlag.ForceSelect);
    }
    if (setCategorialColumns.contains(varName)) {
      config.setColumnType(ColumnType.C);
    }
  }
}","/** 
 * Update target, listMeta, listForceSelect, listForceRemove
 * @throws IOException
 * @throws IllegalArgumentException if modelConfig is null or columnConfigList is null.
 */
public static void updateColumnConfigFlags(ModelConfig modelConfig,List<ColumnConfig> columnConfigList) throws IOException {
  String targetColumnName=CommonUtils.getRelativePigHeaderColumnName(modelConfig.getTargetColumnName());
  Set<String> setCategorialColumns=new HashSet<String>();
  if (CollectionUtils.isNotEmpty(modelConfig.getCategoricalColumnNames())) {
    for (    String column : modelConfig.getCategoricalColumnNames()) {
      setCategorialColumns.add(CommonUtils.getRelativePigHeaderColumnName(column));
    }
  }
  Set<String> setMeta=new HashSet<String>();
  if (CollectionUtils.isNotEmpty(modelConfig.getMetaColumnNames())) {
    for (    String meta : modelConfig.getMetaColumnNames()) {
      setMeta.add(CommonUtils.getRelativePigHeaderColumnName(meta));
    }
  }
  Set<String> setForceRemove=new HashSet<String>();
  if (Boolean.TRUE.equals(modelConfig.getVarSelect().getForceEnable()) && CollectionUtils.isNotEmpty(modelConfig.getListForceRemove())) {
    for (    String forceRemoveName : modelConfig.getListForceRemove()) {
      setForceRemove.add(CommonUtils.getRelativePigHeaderColumnName(forceRemoveName));
    }
  }
  Set<String> setForceSelect=new HashSet<String>(512);
  if (Boolean.TRUE.equals(modelConfig.getVarSelect().getForceEnable()) && CollectionUtils.isNotEmpty(modelConfig.getListForceSelect())) {
    for (    String forceSelectName : modelConfig.getListForceSelect()) {
      setForceSelect.add(CommonUtils.getRelativePigHeaderColumnName(forceSelectName));
    }
  }
  for (  ColumnConfig config : columnConfigList) {
    String varName=config.getColumnName();
    if (targetColumnName.equals(varName)) {
      config.setColumnFlag(ColumnFlag.Target);
      config.setColumnType(null);
    }
 else     if (setMeta.contains(varName)) {
      config.setColumnFlag(ColumnFlag.Meta);
      config.setColumnType(null);
    }
 else     if (setForceRemove.contains(varName)) {
      config.setColumnFlag(ColumnFlag.ForceRemove);
    }
 else     if (setForceSelect.contains(varName)) {
      config.setColumnFlag(ColumnFlag.ForceSelect);
    }
    if (setCategorialColumns.contains(varName)) {
      config.setColumnType(ColumnType.C);
    }
 else {
      config.setColumnType(ColumnType.N);
    }
  }
}",0.9883040935672516
31828,"/** 
 * validate the modelconfig if it's well written.
 * @return
 * @throws Exception
 */
protected void validateModelConfig(ModelConfig modelConfig,ModelStep step) throws Exception {
  ValidateResult result=new ValidateResult(false);
  if (modelConfig == null) {
    result.getCauses().add(""String_Node_Str"");
  }
 else {
    result=ModelInspector.getInspector().probe(modelConfig,step);
  }
  if (!result.getStatus()) {
    LOG.error(""String_Node_Str"");
    for (    String cause : result.getCauses()) {
      LOG.error(""String_Node_Str"" + cause);
    }
    throw new ShifuException(ShifuErrorCode.ERROR_MODELCONFIG_NOT_VALIDATION);
  }
 else {
    LOG.info(""String_Node_Str"");
  }
  checkAlgParameter(modelConfig);
}","/** 
 * Validate the modelconfig if it's well written.
 * @param modelConfig the model config
 * @param step step in Shifu
 * @throws Exception any exception in validation
 */
protected void validateModelConfig(ModelConfig modelConfig,ModelStep step) throws Exception {
  ValidateResult result=new ValidateResult(false);
  if (modelConfig == null) {
    result.getCauses().add(""String_Node_Str"");
  }
 else {
    result=ModelInspector.getInspector().probe(modelConfig,step);
  }
  if (!result.getStatus()) {
    LOG.error(""String_Node_Str"");
    for (    String cause : result.getCauses()) {
      LOG.error(""String_Node_Str"" + cause);
    }
    throw new ShifuException(ShifuErrorCode.ERROR_MODELCONFIG_NOT_VALIDATION);
  }
 else {
    LOG.info(""String_Node_Str"");
  }
  checkAlgParameter(modelConfig);
}",0.9350819672131148
31829,"/** 
 * check the argument is for listing version or not
 * @param arg input option
 * @return true - if arg is v/version/-v/-version, or return false
 */
private static boolean isVersionOption(String arg){
  return arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"");
}","private static boolean isVersionOption(String arg){
  return arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"") || arg.equalsIgnoreCase(""String_Node_Str"")|| arg.equalsIgnoreCase(""String_Node_Str"");
}",0.7487844408427877
31830,"/** 
 * train each sub-models, and use train data as evaluation set to generate model score. And join the evaluation result to train assemble model
 * @return
 * @throws Exception
 */
private static int runComboModels(boolean isToShuffleData,boolean isToResume) throws Exception {
  ComboModelProcessor processor=new ComboModelProcessor(ComboModelProcessor.ComboStep.RUN);
  processor.setToShuffleData(isToShuffleData);
  processor.setToResume(isToResume);
  return processor.run();
}","private static int runComboModels(boolean isToShuffleData,boolean isToResume) throws Exception {
  ComboModelProcessor processor=new ComboModelProcessor(ComboModelProcessor.ComboStep.RUN);
  processor.setToShuffleData(isToShuffleData);
  processor.setToResume(isToResume);
  return processor.run();
}",0.7653061224489796
31831,"/** 
 * Select variables for model
 * @throws Exception
 * @throws ShifuException
 */
public static int selectModelVar(boolean isToReset) throws Exception {
  VarSelectModelProcessor p=new VarSelectModelProcessor(isToReset);
  return p.run();
}","public static int selectModelVar(boolean isToReset) throws Exception {
  VarSelectModelProcessor p=new VarSelectModelProcessor(isToReset);
  return p.run();
}",0.7860696517412935
31832,"/** 
 * check the argument is for listing help info or not
 * @param str
 * @return true - if arg is h/-h/help/-help, or return false
 */
private static boolean isHelpOption(String str){
  return ""String_Node_Str"".equalsIgnoreCase(str) || ""String_Node_Str"".equalsIgnoreCase(str) || ""String_Node_Str"".equalsIgnoreCase(str)|| ""String_Node_Str"".equalsIgnoreCase(str);
}","private static boolean isHelpOption(String str){
  return ""String_Node_Str"".equalsIgnoreCase(str) || ""String_Node_Str"".equalsIgnoreCase(str) || ""String_Node_Str"".equalsIgnoreCase(str)|| ""String_Node_Str"".equalsIgnoreCase(str);
}",0.7676767676767676
31833,"/** 
 * Main entry for the whole framework.
 * @throws IOException
 */
public static void main(String[] args){
  if (args.length < 1 || (isHelpOption(args[0]))) {
    printUsage();
    System.exit(args.length < 1 ? -1 : 0);
  }
  if (isVersionOption(args[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(args);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,args);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (args[0].equals(NEW) && args.length >= 2 && StringUtils.isNotEmpty(args[1])) {
      String modelName=args[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (args[0].equals(MODELSET_CMD_CP) && args.length >= 3 && StringUtils.isNotEmpty(args[1]) && StringUtils.isNotEmpty(args[2])) {
        String newModelSetName=args[2];
        copyModel(new String[]{args[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (args[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (args[0].equals(STATS_CMD)) {
        status=calModelStats();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(NORMALIZE_CMD) || args[0].equals(NORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(VARSELECT_CMD) || args[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (args[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(SAVE)) {
        String newModelSetName=args.length >= 2 ? args[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (args[0].equals(SWITCH)) {
        String newModelSetName=args[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (args[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (args[0].equals(EVAL_CMD)) {
        if (args.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (args[0].equals(CMD_EXPORT)) {
        boolean isConcise=cmd.hasOption(EXPORT_CONCISE);
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),isConcise);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}","public static void main(String[] args){
  if (args.length < 1 || (isHelpOption(args[0]))) {
    printUsage();
    System.exit(args.length < 1 ? -1 : 0);
  }
  if (isVersionOption(args[0])) {
    printLogoAndVersion();
    System.exit(0);
  }
  CommandLineParser parser=new GnuParser();
  Options opts=buildModelSetOptions(args);
  CommandLine cmd=null;
  try {
    cmd=parser.parse(opts,args);
  }
 catch (  ParseException e) {
    log.error(""String_Node_Str"");
    printUsage();
    System.exit(1);
  }
  int status=0;
  try {
    if (args[0].equals(NEW) && args.length >= 2 && StringUtils.isNotEmpty(args[1])) {
      String modelName=args[1];
      status=createNewModel(modelName,cmd.getOptionValue(MODELSET_CMD_TYPE),cmd.getOptionValue(MODELSET_CMD_M));
      if (status == 0) {
        printModelSetCreatedSuccessfulLog(modelName);
      }
 else {
        log.warn(""String_Node_Str"");
      }
      System.exit(status);
    }
 else {
      if (args[0].equals(MODELSET_CMD_CP) && args.length >= 3 && StringUtils.isNotEmpty(args[1]) && StringUtils.isNotEmpty(args[2])) {
        String newModelSetName=args[2];
        copyModel(new String[]{args[1],newModelSetName});
        printModelSetCopiedSuccessfulLog(newModelSetName);
      }
 else       if (args[0].equals(INIT_CMD)) {
        if (cmd.getOptions() == null || cmd.getOptions().length == 0) {
          status=initializeModel();
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
 else         if (cmd.hasOption(INIT_CMD_MODEL)) {
          initializeModelParam();
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (args[0].equals(STATS_CMD)) {
        status=calModelStats();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(NORMALIZE_CMD) || args[0].equals(NORM_CMD)) {
        status=normalizeTrainData(cmd.hasOption(SHUFFLE));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(VARSELECT_CMD) || args[0].equals(VARSEL_CMD)) {
        status=selectModelVar(cmd.hasOption(RESET));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(TRAIN_CMD)) {
        status=trainModel(cmd.hasOption(TRAIN_CMD_DRY),cmd.hasOption(TRAIN_CMD_DEBUG));
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(CMD_COMBO)) {
        if (cmd.hasOption(MODELSET_CMD_NEW)) {
          log.info(""String_Node_Str"");
          status=createNewCombo(cmd.getOptionValue(MODELSET_CMD_NEW));
        }
 else         if (cmd.hasOption(INIT_CMD)) {
          log.info(""String_Node_Str"");
          status=initComboModels();
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          log.info(""String_Node_Str"",opts.hasOption(SHUFFLE),opts.hasOption(RESUME));
          status=runComboModels(cmd.hasOption(SHUFFLE),cmd.hasOption(RESUME));
        }
 else         if (cmd.hasOption(EVAL_CMD)) {
          log.info(""String_Node_Str"");
          status=evalComboModels(cmd.hasOption(RESUME));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (args[0].equals(POSTTRAIN_CMD)) {
        status=postTrainModel();
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"");
        }
      }
 else       if (args[0].equals(SAVE)) {
        String newModelSetName=args.length >= 2 ? args[1] : null;
        saveCurrentModel(newModelSetName);
      }
 else       if (args[0].equals(SWITCH)) {
        String newModelSetName=args[1];
        switchCurrentModel(newModelSetName);
      }
 else       if (args[0].equals(SHOW)) {
        ManageModelProcessor p=new ManageModelProcessor(ModelAction.SHOW,null);
        p.run();
      }
 else       if (args[0].equals(EVAL_CMD)) {
        if (args.length == 1) {
          status=runEvalSet(cmd.hasOption(TRAIN_CMD_DRY));
          if (status == 0) {
            log.info(""String_Node_Str"");
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 else         if (cmd.getOptionValue(MODELSET_CMD_NEW) != null) {
          createNewEvalSet(cmd.getOptionValue(MODELSET_CMD_NEW));
          log.info(""String_Node_Str"");
        }
 else         if (cmd.hasOption(EVAL_CMD_RUN)) {
          runEvalSet(cmd.getOptionValue(EVAL_CMD_RUN),cmd.hasOption(TRAIN_CMD_DRY));
          log.info(""String_Node_Str"",cmd.getOptionValue(EVAL_CMD_RUN));
        }
 else         if (cmd.hasOption(SCORE)) {
          runEvalScore(cmd.getOptionValue(SCORE));
          log.info(""String_Node_Str"",cmd.getOptionValue(SCORE));
        }
 else         if (cmd.hasOption(CONFMAT)) {
          runEvalConfMat(cmd.getOptionValue(CONFMAT));
          log.info(""String_Node_Str"",cmd.getOptionValue(CONFMAT));
        }
 else         if (cmd.hasOption(PERF)) {
          runEvalPerf(cmd.getOptionValue(PERF));
          log.info(""String_Node_Str"",cmd.getOptionValue(PERF));
        }
 else         if (cmd.hasOption(LIST)) {
          listEvalSet();
        }
 else         if (cmd.hasOption(DELETE)) {
          deleteEvalSet(cmd.getOptionValue(DELETE));
        }
 else         if (cmd.hasOption(NORM)) {
          runEvalNorm(cmd.getOptionValue(NORM));
        }
 else {
          log.error(""String_Node_Str"");
          printUsage();
        }
      }
 else       if (args[0].equals(CMD_EXPORT)) {
        boolean isConcise=cmd.hasOption(EXPORT_CONCISE);
        status=exportModel(cmd.getOptionValue(MODELSET_CMD_TYPE),isConcise);
        if (status == 0) {
          log.info(""String_Node_Str"");
        }
 else {
          log.warn(""String_Node_Str"");
        }
      }
 else {
        log.error(""String_Node_Str"");
        printUsage();
      }
    }
    System.exit(status);
  }
 catch (  ShifuException e) {
    log.error(e.getError().toString(),e.getCause());
    exceptionExit(e);
  }
catch (  Exception e) {
    exceptionExit(e);
  }
}",0.9944802923112804
31834,"/** 
 * create a new model from existing model
 * @throws ShifuException
 */
private static void copyModel(String[] cmdArgs) throws IOException, ShifuException {
  BasicModelProcessor p=new BasicModelProcessor();
  p.copyModelFiles(cmdArgs[0],cmdArgs[1]);
}","private static void copyModel(String[] cmdArgs) throws IOException, ShifuException {
  BasicModelProcessor p=new BasicModelProcessor();
  p.copyModelFiles(cmdArgs[0],cmdArgs[1]);
}",0.8237986270022883
31835,"/** 
 * print usage
 */
private static void printUsage(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}","private static void printUsage(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}",0.9888059701492538
31836,"/** 
 * Create new model - create directory and ModelConfig for the model
 * @throws Exception
 */
public static int createNewModel(String modelSetName,String modelType,String description) throws Exception {
  ALGORITHM modelAlg=null;
  if (modelType != null) {
    for (    ALGORITHM alg : ALGORITHM.values()) {
      if (alg.name().equalsIgnoreCase(modelType.trim())) {
        modelAlg=alg;
      }
    }
  }
 else {
    modelAlg=ALGORITHM.NN;
  }
  if (modelAlg == null) {
    log.error(""String_Node_Str"",modelType);
    return 2;
  }
  CreateModelProcessor p=new CreateModelProcessor(modelSetName,modelAlg,description);
  return p.run();
}","public static int createNewModel(String modelSetName,String modelType,String description) throws Exception {
  ALGORITHM modelAlg=null;
  if (modelType != null) {
    for (    ALGORITHM alg : ALGORITHM.values()) {
      if (alg.name().equalsIgnoreCase(modelType.trim())) {
        modelAlg=alg;
      }
    }
  }
 else {
    modelAlg=ALGORITHM.NN;
  }
  if (modelAlg == null) {
    log.error(""String_Node_Str"",modelType);
    return 2;
  }
  CreateModelProcessor p=new CreateModelProcessor(modelSetName,modelAlg,description);
  return p.run();
}",0.9167367535744324
31837,"/** 
 * switch model - switch the current model to</p> <p/> <li>master if it's not current model existing</li> <li><code>modelName</code> if you already save it with name <code>modelName</code></li> <p/> then create a new branch with naming <code>newModelSetName</code>
 * @param newModelSetName
 * @throws Exception
 */
private static void switchCurrentModel(String newModelSetName) throws Exception {
  ManageModelProcessor p=new ManageModelProcessor(ModelAction.SWITCH,newModelSetName);
  p.run();
}","private static void switchCurrentModel(String newModelSetName) throws Exception {
  ManageModelProcessor p=new ManageModelProcessor(ModelAction.SWITCH,newModelSetName);
  p.run();
}",0.5300146412884333
31838,"/** 
 * @param evalSetNames
 * @throws Exception
 */
private static int runEvalConfMat(String evalSetNames) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.CONFMAT,evalSetNames);
  return p.run();
}","private static int runEvalConfMat(String evalSetNames) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.CONFMAT,evalSetNames);
  return p.run();
}",0.8658227848101265
31839,"/** 
 * Build the usage option for parameter check
 */
@SuppressWarnings(""String_Node_Str"") private static Options buildModelSetOptions(String[] args){
  Options opts=new Options();
  Option opt_cmt=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_M);
  Option opt_new=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(NEW);
  Option opt_type=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_TYPE);
  Option opt_run=OptionBuilder.hasOptionalArg().withDescription(""String_Node_Str"").create(EVAL_CMD_RUN);
  Option opt_dry=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DRY);
  Option opt_debug=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DEBUG);
  Option opt_model=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(INIT_CMD_MODEL);
  Option opt_concise=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(EXPORT_CONCISE);
  Option opt_reset=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESET);
  Option opt_shuffle=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SHUFFLE);
  Option opt_resume=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESUME);
  Option opt_list=OptionBuilder.hasArg(false).create(LIST);
  Option opt_delete=OptionBuilder.hasArg().create(DELETE);
  Option opt_score=OptionBuilder.hasArg().create(SCORE);
  Option opt_confmat=OptionBuilder.hasArg().create(CONFMAT);
  Option opt_perf=OptionBuilder.hasArg().create(PERF);
  Option opt_norm=OptionBuilder.hasArg().create(NORM);
  Option opt_eval=OptionBuilder.hasArg(false).create(EVAL_CMD);
  Option opt_init=OptionBuilder.hasArg(false).create(INIT_CMD);
  Option opt_save=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SAVE);
  Option opt_switch=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SWITCH);
  Option opt_eval_model=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(EVAL_MODEL);
  opts.addOption(opt_cmt);
  opts.addOption(opt_new);
  opts.addOption(opt_type);
  opts.addOption(opt_run);
  opts.addOption(opt_perf);
  opts.addOption(opt_norm);
  opts.addOption(opt_dry);
  opts.addOption(opt_debug);
  opts.addOption(opt_model);
  opts.addOption(opt_concise);
  opts.addOption(opt_reset);
  opts.addOption(opt_eval);
  opts.addOption(opt_init);
  opts.addOption(opt_shuffle);
  opts.addOption(opt_resume);
  opts.addOption(opt_list);
  opts.addOption(opt_delete);
  opts.addOption(opt_score);
  opts.addOption(opt_confmat);
  opts.addOption(opt_save);
  opts.addOption(opt_switch);
  opts.addOption(opt_eval_model);
  return opts;
}","@SuppressWarnings(""String_Node_Str"") private static Options buildModelSetOptions(String[] args){
  Options opts=new Options();
  Option opt_cmt=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_M);
  Option opt_new=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(NEW);
  Option opt_type=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_TYPE);
  Option opt_run=OptionBuilder.hasOptionalArg().withDescription(""String_Node_Str"").create(EVAL_CMD_RUN);
  Option opt_dry=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DRY);
  Option opt_debug=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DEBUG);
  Option opt_model=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(INIT_CMD_MODEL);
  Option opt_concise=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(EXPORT_CONCISE);
  Option opt_reset=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESET);
  Option opt_shuffle=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SHUFFLE);
  Option opt_resume=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESUME);
  Option opt_list=OptionBuilder.hasArg(false).create(LIST);
  Option opt_delete=OptionBuilder.hasArg().create(DELETE);
  Option opt_score=OptionBuilder.hasArg().create(SCORE);
  Option opt_confmat=OptionBuilder.hasArg().create(CONFMAT);
  Option opt_perf=OptionBuilder.hasArg().create(PERF);
  Option opt_norm=OptionBuilder.hasArg().create(NORM);
  Option opt_eval=OptionBuilder.hasArg(false).create(EVAL_CMD);
  Option opt_init=OptionBuilder.hasArg(false).create(INIT_CMD);
  Option opt_save=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SAVE);
  Option opt_switch=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SWITCH);
  Option opt_eval_model=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(EVAL_MODEL);
  opts.addOption(opt_cmt);
  opts.addOption(opt_new);
  opts.addOption(opt_type);
  opts.addOption(opt_run);
  opts.addOption(opt_perf);
  opts.addOption(opt_norm);
  opts.addOption(opt_dry);
  opts.addOption(opt_debug);
  opts.addOption(opt_model);
  opts.addOption(opt_concise);
  opts.addOption(opt_reset);
  opts.addOption(opt_eval);
  opts.addOption(opt_init);
  opts.addOption(opt_shuffle);
  opts.addOption(opt_resume);
  opts.addOption(opt_list);
  opts.addOption(opt_delete);
  opts.addOption(opt_score);
  opts.addOption(opt_confmat);
  opts.addOption(opt_save);
  opts.addOption(opt_switch);
  opts.addOption(opt_eval_model);
  return opts;
}",0.9897940248654666
31840,"/** 
 * Load the column definition and do the training data purification
 * @throws Exception
 */
public static int initializeModel() throws Exception {
  InitModelProcessor processor=new InitModelProcessor();
  return processor.run();
}","public static int initializeModel() throws Exception {
  InitModelProcessor processor=new InitModelProcessor();
  return processor.run();
}",0.7393617021276596
31841,"/** 
 * @param evalSetNames
 * @return
 */
private static int runEvalNorm(String evalSetNames) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.NORM,evalSetNames);
  return p.run();
}","private static int runEvalNorm(String evalSetNames) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.NORM,evalSetNames);
  return p.run();
}",0.8847184986595175
31842,"/** 
 * save model - save current mode or save to a specially name <code>newModelSetName</code>
 * @param newModelSetName
 * @throws Exception
 */
private static void saveCurrentModel(String newModelSetName) throws Exception {
  ManageModelProcessor p=new ManageModelProcessor(ModelAction.SAVE,newModelSetName);
  p.run();
}","private static void saveCurrentModel(String newModelSetName) throws Exception {
  ManageModelProcessor p=new ManageModelProcessor(ModelAction.SAVE,newModelSetName);
  p.run();
}",0.7065868263473054
31843,"/** 
 * create ComboTrain.json, when user provide the algorithms to combo
 * @param algorithms
 * @return
 * @throws Exception
 */
private static int createNewCombo(String algorithms) throws Exception {
  Processor processor=new ComboModelProcessor(ComboModelProcessor.ComboStep.NEW,algorithms);
  return processor.run();
}","private static int createNewCombo(String algorithms) throws Exception {
  Processor processor=new ComboModelProcessor(ComboModelProcessor.ComboStep.NEW,algorithms);
  return processor.run();
}",0.7456310679611651
31844,"/** 
 * Train model
 * @throws Exception
 */
public static int trainModel(boolean isDryTrain,boolean isDebug) throws Exception {
  TrainModelProcessor p=new TrainModelProcessor(isDryTrain,isDebug);
  return p.run();
}","public static int trainModel(boolean isDryTrain,boolean isDebug) throws Exception {
  TrainModelProcessor p=new TrainModelProcessor(isDryTrain,isDebug);
  return p.run();
}",0.884318766066838
31845,"/** 
 * Normalize the training data
 * @throws Exception
 */
public static int normalizeTrainData(boolean isToShuffleData) throws Exception {
  NormalizeModelProcessor p=new NormalizeModelProcessor(isToShuffleData);
  return p.run();
}","public static int normalizeTrainData(boolean isToShuffleData) throws Exception {
  NormalizeModelProcessor p=new NormalizeModelProcessor(isToShuffleData);
  return p.run();
}",0.8508557457212714
31846,"/** 
 * Load and test ModelConfig
 * @throws Exception
 */
private static void initializeModelParam() throws Exception {
  InitModelProcessor p=new InitModelProcessor();
  p.checkAlgorithmParam();
}","private static void initializeModelParam() throws Exception {
  InitModelProcessor p=new InitModelProcessor();
  p.checkAlgorithmParam();
}",0.8249258160237388
31847,"/** 
 * evaluate each sub-models, join data and evaluate assemble model
 * @return
 * @throws Exception
 */
private static int evalComboModels(boolean isToResume) throws Exception {
  ComboModelProcessor processor=new ComboModelProcessor(ComboModelProcessor.ComboStep.EVAL);
  processor.setToResume(isToResume);
  return processor.run();
}","private static int evalComboModels(boolean isToResume) throws Exception {
  ComboModelProcessor processor=new ComboModelProcessor(ComboModelProcessor.ComboStep.EVAL);
  processor.setToResume(isToResume);
  return processor.run();
}",0.8105263157894737
31848,"/** 
 * @param evalSetNames
 * @throws Exception
 */
private static int runEvalPerf(String evalSetNames) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.PERF,evalSetNames);
  return p.run();
}","private static int runEvalPerf(String evalSetNames) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.PERF,evalSetNames);
  return p.run();
}",0.8616187989556136
31849,"/** 
 * print exception and contact message, then quit program
 * @param e
 */
private static void exceptionExit(Exception e){
  log.error(""String_Node_Str"" + e.toString(),e);
  System.err.println(Constants.CONTACT_MESSAGE);
  System.exit(-1);
}","private static void exceptionExit(Exception e){
  log.error(""String_Node_Str"" + e.toString(),e);
  System.err.println(Constants.CONTACT_MESSAGE);
  System.exit(-1);
}",0.8077858880778589
31850,"/** 
 * export Shifu model into other format, i.e. PMML
 * @param type
 * @throws Exception
 */
public static int exportModel(String type,boolean isConcise) throws Exception {
  ExportModelProcessor p=new ExportModelProcessor(type,isConcise);
  return p.run();
}","public static int exportModel(String type,boolean isConcise) throws Exception {
  ExportModelProcessor p=new ExportModelProcessor(type,isConcise);
  return p.run();
}",0.7757009345794392
31851,"/** 
 * Calculate variables stats for model - ks/iv/mean/max/min
 */
public static int calModelStats() throws Exception {
  StatsModelProcessor p=new StatsModelProcessor();
  return p.run();
}","public static int calModelStats() throws Exception {
  StatsModelProcessor p=new StatsModelProcessor();
  return p.run();
}",0.780952380952381
31852,"/** 
 * @param evalSetName
 * @param isDryRun
 * @throws Exception
 */
public static int runEvalSet(String evalSetName,boolean isDryRun) throws Exception {
  log.info(""String_Node_Str"",evalSetName);
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.RUN,evalSetName);
  return p.run();
}","public static int runEvalSet(String evalSetName,boolean isDryRun) throws Exception {
  log.info(""String_Node_Str"",evalSetName);
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.RUN,evalSetName);
  return p.run();
}",0.8610567514677103
31853,"/** 
 * list all evaluation set
 * @throws Exception
 */
private static int listEvalSet() throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.LIST);
  return p.run();
}","private static int listEvalSet() throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.LIST);
  return p.run();
}",0.8235294117647058
31854,"/** 
 * create each sub-models, assemble model and generate corresponding configurations
 * @return
 * @throws Exception
 */
private static int initComboModels() throws Exception {
  Processor processor=new ComboModelProcessor(ComboModelProcessor.ComboStep.INIT);
  return processor.run();
}","private static int initComboModels() throws Exception {
  Processor processor=new ComboModelProcessor(ComboModelProcessor.ComboStep.INIT);
  return processor.run();
}",0.7264770240700219
31855,"/** 
 * Run post-train step
 */
public static int postTrainModel() throws Exception {
  PostTrainModelProcessor p=new PostTrainModelProcessor();
  return p.run();
}","public static int postTrainModel() throws Exception {
  PostTrainModelProcessor p=new PostTrainModelProcessor();
  return p.run();
}",0.8918918918918919
31856,"/** 
 * Create new evalset
 * @throws Exception
 */
public static int createNewEvalSet(String evalSetName) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.NEW,evalSetName);
  return p.run();
}","public static int createNewEvalSet(String evalSetName) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.NEW,evalSetName);
  return p.run();
}",0.8645833333333334
31857,"/** 
 * delete some evaluation set
 * @param evalSetName
 * @throws Exception
 */
private static int deleteEvalSet(String evalSetName) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.DELETE,evalSetName);
  return p.run();
}","private static int deleteEvalSet(String evalSetName) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.DELETE,evalSetName);
  return p.run();
}",0.8028846153846154
31858,"/** 
 * @param evalSetNames
 * @throws Exception
 */
public static int runEvalScore(String evalSetNames) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.SCORE,evalSetNames);
  return p.run();
}","public static int runEvalScore(String evalSetNames) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.SCORE,evalSetNames);
  return p.run();
}",0.8623376623376623
31859,"@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<DTMasterParams,DTWorkerParams> context){
  this.count+=1;
  if ((this.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  long hashcode=0;
  short[] inputs=new short[this.inputCount];
  float ideal=0f;
  float significance=1f;
  int index=0, inputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    if (index == this.columnConfigList.size()) {
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      if (Float.compare(significance,0f) < 0) {
        LOG.warn(""String_Node_Str"",count,significance);
        significance=1f;
      }
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        ideal=getFloatValue(input);
      }
 else {
        if (!isAfterVarSelect) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
      }
    }
    index+=1;
  }
  if (this.isOneVsAll) {
    ideal=updateOneVsAllTargetValue(ideal);
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(ideal + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(ideal + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  float output=ideal;
  float predict=ideal;
  Data data=new Data(inputs,predict,output,output,significance);
  boolean isValidation=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)context.getAttachment();
  }
  boolean isInTraining=this.addDataPairToDataSet(hashcode,data,isValidation);
  if (isInTraining) {
    data.subsampleWeights=sampleWeights(data.label);
    if (isPositive(data.label)) {
      this.positiveSelectedTrainCount+=data.subsampleWeights[0] * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=data.subsampleWeights[0] * 1L;
    }
  }
 else {
  }
}","@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<DTMasterParams,DTWorkerParams> context){
  this.count+=1;
  if ((this.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  long hashcode=0;
  short[] inputs=new short[this.inputCount];
  float ideal=0f;
  float significance=1f;
  int index=0, inputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    if (index == this.columnConfigList.size()) {
      if (StringUtils.isBlank(modelConfig.getWeightColumnName())) {
        significance=1f;
        break;
      }
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      if (Float.compare(significance,0f) < 0) {
        LOG.warn(""String_Node_Str"",count,significance);
        significance=1f;
      }
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        ideal=getFloatValue(input);
      }
 else {
        if (!isAfterVarSelect) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
      }
    }
    index+=1;
  }
  if (this.isOneVsAll) {
    ideal=updateOneVsAllTargetValue(ideal);
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(ideal + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(ideal + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  float output=ideal;
  float predict=ideal;
  Data data=new Data(inputs,predict,output,output,significance);
  boolean isValidation=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)context.getAttachment();
  }
  boolean isInTraining=this.addDataPairToDataSet(hashcode,data,isValidation);
  if (isInTraining) {
    data.subsampleWeights=sampleWeights(data.label);
    if (isPositive(data.label)) {
      this.positiveSelectedTrainCount+=data.subsampleWeights[0] * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=data.subsampleWeights[0] * 1L;
    }
  }
 else {
  }
}",0.9898937097055236
31860,"@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<LogisticRegressionParams,LogisticRegressionParams> context){
  ++this.count;
  if ((this.count) % 100000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  String line=currentValue.getWritable().toString();
  float[] inputData=new float[inputNum];
  float[] outputData=new float[outputNum];
  int index=0, inputIndex=0, outputIndex=0;
  long hashcode=0;
  double significance=CommonConstants.DEFAULT_SIGNIFICANCE_VALUE;
  for (  String unit : splitter.split(line)) {
    float floatValue=unit.length() == 0 ? 0f : NumberFormatUtils.getFloat(unit,0f);
    floatValue=(Float.isNaN(floatValue) || Double.isNaN(floatValue)) ? 0f : floatValue;
    if (index == this.columnConfigList.size()) {
      significance=unit.length() == 0 ? 1f : NumberFormatUtils.getDouble(unit,1d);
      if (Double.compare(significance,0d) < 0) {
        LOG.warn(""String_Node_Str"",count,significance);
        significance=1d;
      }
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        outputData[outputIndex++]=floatValue;
      }
 else {
        if (this.inputNum == this.candidateNum) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputData[inputIndex++]=floatValue;
            hashcode=hashcode * 31 + Float.valueOf(floatValue).hashCode();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputData[inputIndex++]=floatValue;
            hashcode=hashcode * 31 + Float.valueOf(floatValue).hashCode();
          }
        }
      }
    }
    index+=1;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(outputData[0] + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(outputData[0] + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  Data data=new Data(inputData,outputData,significance);
  if (modelConfig.isRegression() && isUpSampleEnabled() && Double.compare(outputData[0],1d) == 0) {
    data.setSignificance(data.significance * (this.upSampleRng.sample() + 1));
  }
  boolean isValidation=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)context.getAttachment();
  }
  boolean isInTraining=addDataPairToDataSet(hashcode,data,isValidation);
  if (isInTraining) {
    float subsampleWeights=sampleWeights(outputData[0]);
    if (isPositive(outputData[0])) {
      this.positiveSelectedTrainCount+=subsampleWeights * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=subsampleWeights * 1L;
    }
    data.setSignificance(data.significance * subsampleWeights);
  }
 else {
  }
}","@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<LogisticRegressionParams,LogisticRegressionParams> context){
  ++this.count;
  if ((this.count) % 100000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  String line=currentValue.getWritable().toString();
  float[] inputData=new float[inputNum];
  float[] outputData=new float[outputNum];
  int index=0, inputIndex=0, outputIndex=0;
  long hashcode=0;
  double significance=CommonConstants.DEFAULT_SIGNIFICANCE_VALUE;
  for (  String unit : splitter.split(line)) {
    float floatValue=unit.length() == 0 ? 0f : NumberFormatUtils.getFloat(unit,0f);
    floatValue=(Float.isNaN(floatValue) || Double.isNaN(floatValue)) ? 0f : floatValue;
    if (index == this.columnConfigList.size()) {
      if (StringUtils.isBlank(modelConfig.getWeightColumnName())) {
        significance=1d;
        break;
      }
      significance=unit.length() == 0 ? 1f : NumberFormatUtils.getDouble(unit,1d);
      if (Double.compare(significance,0d) < 0) {
        LOG.warn(""String_Node_Str"",count,significance);
        significance=1d;
      }
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        outputData[outputIndex++]=floatValue;
      }
 else {
        if (this.inputNum == this.candidateNum) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputData[inputIndex++]=floatValue;
            hashcode=hashcode * 31 + Float.valueOf(floatValue).hashCode();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputData[inputIndex++]=floatValue;
            hashcode=hashcode * 31 + Float.valueOf(floatValue).hashCode();
          }
        }
      }
    }
    index+=1;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(outputData[0] + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(outputData[0] + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  Data data=new Data(inputData,outputData,significance);
  if (modelConfig.isRegression() && isUpSampleEnabled() && Double.compare(outputData[0],1d) == 0) {
    data.setSignificance(data.significance * (this.upSampleRng.sample() + 1));
  }
  boolean isValidation=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)context.getAttachment();
  }
  boolean isInTraining=addDataPairToDataSet(hashcode,data,isValidation);
  if (isInTraining) {
    float subsampleWeights=sampleWeights(outputData[0]);
    if (isPositive(outputData[0])) {
      this.positiveSelectedTrainCount+=subsampleWeights * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=subsampleWeights * 1L;
    }
    data.setSignificance(data.significance * subsampleWeights);
  }
 else {
  }
}",0.983266012694749
31861,"@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<NNParams,NNParams> workerContext){
  super.count+=1;
  if ((super.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",super.count);
  }
  float[] inputs=new float[super.inputNodeCount];
  float[] ideal=new float[super.outputNodeCount];
  if (super.isDry) {
    addDataPairToDataSet(0,new BasicFloatMLDataPair(new BasicFloatMLData(inputs),new BasicFloatMLData(ideal)));
    return;
  }
  long hashcode=0;
  float significance=1f;
  int index=0, inputsIndex=0, outputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    float floatValue=input.length() == 0 ? 0f : NumberFormatUtils.getFloat(input,0f);
    floatValue=(Float.isNaN(floatValue) || Double.isNaN(floatValue)) ? 0f : floatValue;
    if (index == super.columnConfigList.size()) {
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      if (Float.compare(significance,0f) < 0) {
        LOG.warn(""String_Node_Str"",count,significance);
        significance=1f;
      }
      break;
    }
 else {
      ColumnConfig columnConfig=super.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        if (modelConfig.isRegression()) {
          ideal[outputIndex++]=floatValue;
        }
 else {
          if (modelConfig.getTrain().isOneVsAll()) {
            ideal[outputIndex++]=Float.compare(floatValue,trainerId) == 0 ? 1f : 0f;
          }
 else {
            int ideaIndex=(int)floatValue;
            ideal[ideaIndex]=1f;
          }
        }
      }
 else {
        if (super.inputNodeCount == super.candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputs[inputsIndex++]=floatValue;
            hashcode=hashcode * 31 + Double.valueOf(floatValue).hashCode();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputs[inputsIndex++]=floatValue;
            hashcode=hashcode * 31 + Double.valueOf(floatValue).hashCode();
          }
        }
      }
    }
    index+=1;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(ideal[0] + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(ideal[0] + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  FloatMLDataPair pair=new BasicFloatMLDataPair(new BasicFloatMLData(inputs),new BasicFloatMLData(ideal));
  if (modelConfig.isRegression() && isUpSampleEnabled() && Double.compare(ideal[0],1d) == 0) {
    pair.setSignificance(significance * (super.upSampleRng.sample() + 1));
  }
 else {
    pair.setSignificance(significance);
  }
  boolean isValidation=false;
  if (workerContext.getAttachment() != null && workerContext.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)workerContext.getAttachment();
  }
  boolean isInTraining=addDataPairToDataSet(hashcode,pair,isValidation);
  if (isInTraining) {
    float subsampleWeights=sampleWeights(pair.getIdealArray()[0]);
    if (isPositive(pair.getIdealArray()[0])) {
      this.positiveSelectedTrainCount+=subsampleWeights * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=subsampleWeights * 1L;
    }
    pair.setSignificance(pair.getSignificance() * subsampleWeights);
  }
 else {
  }
}","@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<NNParams,NNParams> workerContext){
  super.count+=1;
  if ((super.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",super.count);
  }
  float[] inputs=new float[super.inputNodeCount];
  float[] ideal=new float[super.outputNodeCount];
  if (super.isDry) {
    addDataPairToDataSet(0,new BasicFloatMLDataPair(new BasicFloatMLData(inputs),new BasicFloatMLData(ideal)));
    return;
  }
  long hashcode=0;
  float significance=1f;
  int index=0, inputsIndex=0, outputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    float floatValue=input.length() == 0 ? 0f : NumberFormatUtils.getFloat(input,0f);
    floatValue=(Float.isNaN(floatValue) || Double.isNaN(floatValue)) ? 0f : floatValue;
    if (index == super.columnConfigList.size()) {
      if (StringUtils.isBlank(modelConfig.getWeightColumnName())) {
        significance=1f;
        break;
      }
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      if (Float.compare(significance,0f) < 0) {
        LOG.warn(""String_Node_Str"",count,significance);
        significance=1f;
      }
      break;
    }
 else {
      ColumnConfig columnConfig=super.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        if (modelConfig.isRegression()) {
          ideal[outputIndex++]=floatValue;
        }
 else {
          if (modelConfig.getTrain().isOneVsAll()) {
            ideal[outputIndex++]=Float.compare(floatValue,trainerId) == 0 ? 1f : 0f;
          }
 else {
            int ideaIndex=(int)floatValue;
            ideal[ideaIndex]=1f;
          }
        }
      }
 else {
        if (super.inputNodeCount == super.candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputs[inputsIndex++]=floatValue;
            hashcode=hashcode * 31 + Double.valueOf(floatValue).hashCode();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputs[inputsIndex++]=floatValue;
            hashcode=hashcode * 31 + Double.valueOf(floatValue).hashCode();
          }
        }
      }
    }
    index+=1;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && Double.compare(ideal[0] + 0.01d,0d) == 0 && (!this.modelConfig.isFixInitialInput() && Double.compare(Math.random(),this.modelConfig.getBaggingSampleRate()) >= 0)) {
    return;
  }
  if (modelConfig.getTrain().getSampleNegOnly() && (modelConfig.isRegression() || (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll())) && (Double.compare(ideal[0] + 0.01d,0d) == 0 && this.modelConfig.isFixInitialInput() && hashcode % 100 >= Double.valueOf(this.modelConfig.getBaggingSampleRate() * 100).longValue())) {
    return;
  }
  FloatMLDataPair pair=new BasicFloatMLDataPair(new BasicFloatMLData(inputs),new BasicFloatMLData(ideal));
  if (modelConfig.isRegression() && isUpSampleEnabled() && Double.compare(ideal[0],1d) == 0) {
    pair.setSignificance(significance * (super.upSampleRng.sample() + 1));
  }
 else {
    pair.setSignificance(significance);
  }
  boolean isValidation=false;
  if (workerContext.getAttachment() != null && workerContext.getAttachment() instanceof Boolean) {
    isValidation=(Boolean)workerContext.getAttachment();
  }
  boolean isInTraining=addDataPairToDataSet(hashcode,pair,isValidation);
  if (isInTraining) {
    float subsampleWeights=sampleWeights(pair.getIdealArray()[0]);
    if (isPositive(pair.getIdealArray()[0])) {
      this.positiveSelectedTrainCount+=subsampleWeights * 1L;
    }
 else {
      this.negativeSelectedTrainCount+=subsampleWeights * 1L;
    }
    pair.setSignificance(pair.getSignificance() * subsampleWeights);
  }
 else {
  }
}",0.9855253306713252
31862,"/** 
 * Return first two lines split string array. This is used to detect data schema and check if data schema is the same as data.
 */
public static String[][] takeFirstTwoLines(String dataSetRawPath,String delimiter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimiter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  if (ShifuFileUtils.isDir(dataSetRawPath,source)) {
    FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
    FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
    if (globStatus == null || globStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
    }
 else {
      FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
      if (listStatus == null || listStatus.length == 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
      }
      firstValidFile=listStatus[0].getPath().toString();
    }
  }
 else {
    firstValidFile=dataSetRawPath;
  }
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    String[] firstArray=null;
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(firstLine)) {
        list.add(unit);
      }
      firstArray=list.toArray(new String[0]);
    }
    String secondLine=reader.readLine();
    String[] secondArray=null;
    if (secondLine != null && secondLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(secondLine)) {
        list.add(unit);
      }
      secondArray=list.toArray(new String[0]);
    }
    String[][] results=new String[2][];
    results[0]=firstArray;
    results[1]=secondArray;
    return results;
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}","/** 
 * Return first two lines split string array. This is used to detect data schema and check if data schema is the same as data.
 */
public static String[][] takeFirstTwoLines(String dataSetRawPath,String delimiter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimiter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
    if (listStatus == null || listStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
    }
    firstValidFile=listStatus[0].getPath().toString();
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    String[] firstArray=null;
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(firstLine)) {
        list.add(unit);
      }
      firstArray=list.toArray(new String[0]);
    }
    String secondLine=reader.readLine();
    String[] secondArray=null;
    if (secondLine != null && secondLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(secondLine)) {
        list.add(unit);
      }
      secondArray=list.toArray(new String[0]);
    }
    String[][] results=new String[2][];
    results[0]=firstArray;
    results[1]=secondArray;
    return results;
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}",0.966093366093366
31863,"@Override public int compare(ColumnConfig from,ColumnConfig to){
  return from.getColumnName().compareTo(to.getColumnName());
}","@Override public int compare(FileStatus o1,FileStatus o2){
  return o1.getPath().toString().compareTo(o2.getPath().toString());
}",0.609375
31864,"/** 
 * Return first line split string array. This is used to detect data schema.
 */
public static String[] takeFirstLine(String dataSetRawPath,String delimeter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimeter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  if (ShifuFileUtils.isDir(dataSetRawPath,source)) {
    FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
    FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
    if (globStatus == null || globStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
    }
 else {
      FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
      if (listStatus == null || listStatus.length == 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
      }
      firstValidFile=listStatus[0].getPath().toString();
    }
  }
 else {
    firstValidFile=dataSetRawPath;
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    log.debug(""String_Node_Str"",firstLine);
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimeter).split(firstLine)) {
        list.add(unit);
      }
      return list.toArray(new String[0]);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
  return new String[0];
}","/** 
 * Return first line split string array. This is used to detect data schema.
 */
public static String[] takeFirstLine(String dataSetRawPath,String delimeter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimeter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
    if (listStatus == null || listStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
    }
    Arrays.sort(listStatus,new Comparator<FileStatus>(){
      @Override public int compare(      FileStatus o1,      FileStatus o2){
        return o1.getPath().toString().compareTo(o2.getPath().toString());
      }
    }
);
    firstValidFile=listStatus[0].getPath().toString();
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    log.debug(""String_Node_Str"",firstLine);
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimeter).split(firstLine)) {
        list.add(unit);
      }
      return list.toArray(new String[0]);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
  return new String[0];
}",0.9011363636363636
31865,"@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          tmpMap.put(config.getBinCategory().get(i),i);
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (Double.compare(validationRate,0d) != 0) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
  }
 else {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.outputNodeCount=1;
  this.isAfterVarSelect=inputOutputIndex[3] == 1 ? true : false;
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,columnConfigList,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}","@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.columnCategoryIndexMapping=new HashMap<Integer,Map<String,Integer>>();
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      if (config.getBinCategory() != null) {
        Map<String,Integer> tmpMap=new HashMap<String,Integer>();
        for (int i=0; i < config.getBinCategory().size(); i++) {
          tmpMap.put(config.getBinCategory().get(i),i);
        }
        this.columnCategoryIndexMapping.put(config.getColumnNum(),tmpMap);
      }
    }
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getValidSetRate();
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),new ArrayList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),new ArrayList<Data>());
  }
 else {
    if (Double.compare(validationRate,0d) != 0) {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new ArrayList<Data>());
      this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new ArrayList<Data>());
    }
 else {
      this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new ArrayList<Data>());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.inputCount=inputOutputIndex[0] + inputOutputIndex[1];
  this.outputNodeCount=1;
  this.isAfterVarSelect=inputOutputIndex[3] == 1 ? true : false;
  this.isManualValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new SquaredLoss();
  }
 else {
    try {
      this.loss=(Loss)ClassUtils.newInstance(Class.forName(lossStr));
    }
 catch (    ClassNotFoundException e) {
      LOG.warn(""String_Node_Str"",lossStr);
      this.loss=new SquaredLoss();
    }
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.checkpointOutput=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DT_MASTER_CHECKPOINT_FOLDER,""String_Node_Str"" + context.getAppId()));
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT,this.isStratifiedSampling,this.isKFoldCV,kCrossValidation);
  if (!context.isFirstIteration()) {
    if (this.isGBDT) {
      isNeedRecoverGBDTPredict=true;
    }
 else {
      recoverTrees=context.getLastMasterResult().getTrees();
    }
  }
  if (context.isFirstIteration() && this.isContinuousEnabled && this.isGBDT) {
    Path modelPath=new Path(context.getProps().getProperty(CommonConstants.GUAGUA_OUTPUT));
    TreeModel existingModel=null;
    try {
      existingModel=(TreeModel)CommonUtils.loadModel(modelConfig,columnConfigList,modelPath,ShifuFileUtils.getFileSystemBySourceType(this.modelConfig.getDataSet().getSource()));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    if (existingModel == null) {
      LOG.warn(""String_Node_Str"");
      return;
    }
 else {
      recoverTrees=existingModel.getTrees();
      LOG.info(""String_Node_Str"",recoverTrees.size());
    }
  }
}",0.9731406415227352
31866,"@Override public void init(WorkerContext<LogisticRegressionParams,LogisticRegressionParams> context){
  loadConfigFiles(context.getProps());
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNum=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNum=inputOutputIndex[1];
  this.candidateNum=inputOutputIndex[2];
  this.isSpecificValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  if (this.inputNum == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double crossValidationRate=this.modelConfig.getValidSetRate();
  String tmpFolder=context.getProps().getProperty(""String_Node_Str"",""String_Node_Str"");
  this.trainingData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - crossValidationRate)),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
  this.validationData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * crossValidationRate),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      LogisticRegressionWorker.this.validationData.close();
      LogisticRegressionWorker.this.trainingData.close();
    }
  }
));
}","@Override public void init(WorkerContext<LogisticRegressionParams,LogisticRegressionParams> context){
  loadConfigFiles(context.getProps());
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNum=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNum=inputOutputIndex[1];
  this.candidateNum=inputOutputIndex[2];
  this.isSpecificValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  if (this.inputNum == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double crossValidationRate=this.modelConfig.getValidSetRate();
  String tmpFolder=context.getProps().getProperty(""String_Node_Str"",""String_Node_Str"");
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    this.trainingData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.6),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
    this.validationData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * 0.4),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
  }
 else {
    this.trainingData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - crossValidationRate)),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
    this.validationData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * crossValidationRate),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
  }
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      LogisticRegressionWorker.this.validationData.close();
      LogisticRegressionWorker.this.trainingData.close();
    }
  }
));
}",0.8798909869573681
31867,"@Override public void init(WorkerContext<NNParams,NNParams> context){
  this.props=context.getProps();
  loadConfigFiles(context.getProps());
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  this.validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    this.validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.poissonSampler=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(NNConstants.NN_POISON_SAMPLER));
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  Integer epochsPerIterationInteger=this.modelConfig.getTrain().getEpochsPerIteration();
  this.epochsPerIteration=epochsPerIterationInteger == null ? 1 : epochsPerIterationInteger.intValue();
  LOG.info(""String_Node_Str"",epochsPerIteration);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[1] : (modelConfig.getTrain().isOneVsAll() ? inputOutputIndex[1] : modelConfig.getTags().size());
  this.candidateCount=inputOutputIndex[2];
  LOG.info(""String_Node_Str"",inputNodeCount,outputNodeCount,candidateCount);
  this.isDry=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  this.isSpecificValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  if (isOnDisk()) {
    LOG.info(""String_Node_Str"");
    try {
      initDiskDataSet();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      @Override public void run(){
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
      }
    }
));
  }
 else {
    LOG.info(""String_Node_Str"");
    double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
    long memoryStoreSize=(long)(Runtime.getRuntime().maxMemory() * memoryFraction);
    LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
    double crossValidationRate=this.modelConfig.getValidSetRate();
    try {
      this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * (1 - crossValidationRate)),DTrainUtils.getTrainingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      this.validationData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * crossValidationRate),DTrainUtils.getTestingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
        }
      }
));
    }
 catch (    IOException e) {
      throw new GuaguaRuntimeException(e);
    }
  }
}","@Override public void init(WorkerContext<NNParams,NNParams> context){
  this.props=context.getProps();
  loadConfigFiles(context.getProps());
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  this.validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    this.validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.poissonSampler=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(NNConstants.NN_POISON_SAMPLER));
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  Integer epochsPerIterationInteger=this.modelConfig.getTrain().getEpochsPerIteration();
  this.epochsPerIteration=epochsPerIterationInteger == null ? 1 : epochsPerIterationInteger.intValue();
  LOG.info(""String_Node_Str"",epochsPerIteration);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[1] : (modelConfig.getTrain().isOneVsAll() ? inputOutputIndex[1] : modelConfig.getTags().size());
  this.candidateCount=inputOutputIndex[2];
  LOG.info(""String_Node_Str"",inputNodeCount,outputNodeCount,candidateCount);
  this.isDry=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  this.isSpecificValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  if (isOnDisk()) {
    LOG.info(""String_Node_Str"");
    try {
      initDiskDataSet();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      @Override public void run(){
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
      }
    }
));
  }
 else {
    LOG.info(""String_Node_Str"");
    double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
    long memoryStoreSize=(long)(Runtime.getRuntime().maxMemory() * memoryFraction);
    LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
    double crossValidationRate=this.modelConfig.getValidSetRate();
    try {
      if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
        this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * 0.6),DTrainUtils.getTrainingFile().toString(),this.inputNodeCount,this.outputNodeCount);
        this.validationData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * 0.4),DTrainUtils.getTestingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      }
 else {
        this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * (1 - crossValidationRate)),DTrainUtils.getTrainingFile().toString(),this.inputNodeCount,this.outputNodeCount);
        this.validationData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * crossValidationRate),DTrainUtils.getTestingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      }
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
        }
      }
));
    }
 catch (    IOException e) {
      throw new GuaguaRuntimeException(e);
    }
  }
}",0.9326097930338212
31868,"/** 
 * Return first two lines split string array. This is used to detect data schema and check if data schema is the same as data.
 */
public static String[][] takeFirstTwoLines(String dataSetRawPath,String delimiter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimiter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
    if (listStatus == null || listStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
    }
    firstValidFile=listStatus[0].getPath().toString();
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    String[] firstArray=null;
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(firstLine)) {
        list.add(unit);
      }
      firstArray=list.toArray(new String[0]);
    }
    String secondLine=reader.readLine();
    String[] secondArray=null;
    if (secondLine != null && secondLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(secondLine)) {
        list.add(unit);
      }
      secondArray=list.toArray(new String[0]);
    }
    String[][] results=new String[2][];
    results[0]=firstArray;
    results[1]=secondArray;
    return results;
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}","/** 
 * Return first two lines split string array. This is used to detect data schema and check if data schema is the same as data.
 */
public static String[][] takeFirstTwoLines(String dataSetRawPath,String delimiter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimiter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
    if (listStatus == null || listStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
    }
    Arrays.sort(listStatus,new Comparator<FileStatus>(){
      @Override public int compare(      FileStatus o1,      FileStatus o2){
        return o1.getPath().toString().compareTo(o2.getPath().toString());
      }
    }
);
    firstValidFile=findFirstNonEmptyFile(listStatus);
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    String[] firstArray=null;
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(firstLine)) {
        list.add(unit);
      }
      firstArray=list.toArray(new String[0]);
    }
    String secondLine=reader.readLine();
    String[] secondArray=null;
    if (secondLine != null && secondLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimiter).split(secondLine)) {
        list.add(unit);
      }
      secondArray=list.toArray(new String[0]);
    }
    String[][] results=new String[2][];
    results[0]=firstArray;
    results[1]=secondArray;
    return results;
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
}",0.9309608540925268
31869,"/** 
 * Return first line split string array. This is used to detect data schema.
 */
public static String[] takeFirstLine(String dataSetRawPath,String delimeter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimeter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
    if (listStatus == null || listStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
    }
    Arrays.sort(listStatus,new Comparator<FileStatus>(){
      @Override public int compare(      FileStatus o1,      FileStatus o2){
        return o1.getPath().toString().compareTo(o2.getPath().toString());
      }
    }
);
    firstValidFile=listStatus[0].getPath().toString();
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    log.debug(""String_Node_Str"",firstLine);
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimeter).split(firstLine)) {
        list.add(unit);
      }
      return list.toArray(new String[0]);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
  return new String[0];
}","/** 
 * Return first line split string array. This is used to detect data schema.
 */
public static String[] takeFirstLine(String dataSetRawPath,String delimeter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimeter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
  FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
  if (globStatus == null || globStatus.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
  }
 else {
    FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
    if (listStatus == null || listStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
    }
    Arrays.sort(listStatus,new Comparator<FileStatus>(){
      @Override public int compare(      FileStatus o1,      FileStatus o2){
        return o1.getPath().toString().compareTo(o2.getPath().toString());
      }
    }
);
    firstValidFile=findFirstNonEmptyFile(listStatus);
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    log.debug(""String_Node_Str"",firstLine);
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimeter).split(firstLine)) {
        list.add(unit);
      }
      return list.toArray(new String[0]);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
  return new String[0];
}",0.6653771760154739
31870,"/** 
 * @param resultMap2
 * @return
 */
private boolean hasAllMessageResult(Map<Integer,StreamBulletin> resultMsgMap){
  Iterator<Entry<Integer,StreamBulletin>> iterator=resultMsgMap.entrySet().iterator();
  while (iterator.hasNext()) {
    Entry<Integer,StreamBulletin> entry=iterator.next();
    if (!entry.getValue().isMessageEnd()) {
      return false;
    }
  }
  return true;
}","private boolean hasAllMessageResult(Map<Integer,StreamBulletin> resultMsgMap){
  Iterator<Entry<Integer,StreamBulletin>> iterator=resultMsgMap.entrySet().iterator();
  while (iterator.hasNext()) {
    Entry<Integer,StreamBulletin> entry=iterator.next();
    if (!entry.getValue().isMessageEnd()) {
      return false;
    }
  }
  return true;
}",0.943758573388203
31871,"/** 
 * Write the file header for score file
 * @throws IOException
 */
private void writeScoreHeader() throws IOException {
  StringBuilder buf=new StringBuilder();
  buf.append(modelConfig.getTargetColumnName(evalConfig) == null ? ""String_Node_Str"" : modelConfig.getTargetColumnName(evalConfig));
  buf.append(""String_Node_Str"" + (StringUtils.isBlank(evalConfig.getDataSet().getWeightColumnName()) ? ""String_Node_Str"" : evalConfig.getDataSet().getWeightColumnName()));
  buf.append(""String_Node_Str"");
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,columnConfigList,evalConfig,SourceType.LOCAL);
  for (int i=0; i < models.size(); i++) {
    buf.append(""String_Node_Str"" + i);
  }
  List<String> metaColumns=evalConfig.getAllMetaColumns(modelConfig);
  if (CollectionUtils.isNotEmpty(metaColumns)) {
    for (    String columnName : metaColumns) {
      buf.append(""String_Node_Str"" + columnName);
    }
  }
  scoreWriter.write(buf.toString() + ""String_Node_Str"");
}","/** 
 * Write the file header for score file
 * @throws IOException if any ip exception
 */
private void writeScoreHeader() throws IOException {
  StringBuilder buf=new StringBuilder();
  buf.append(modelConfig.getTargetColumnName(evalConfig) == null ? ""String_Node_Str"" : modelConfig.getTargetColumnName(evalConfig));
  buf.append(""String_Node_Str"" + (StringUtils.isBlank(evalConfig.getDataSet().getWeightColumnName()) ? ""String_Node_Str"" : evalConfig.getDataSet().getWeightColumnName()));
  buf.append(""String_Node_Str"");
  List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,columnConfigList,evalConfig,SourceType.LOCAL);
  for (int i=0; i < models.size(); i++) {
    buf.append(""String_Node_Str"" + i);
  }
  List<String> metaColumns=evalConfig.getAllMetaColumns(modelConfig);
  if (CollectionUtils.isNotEmpty(metaColumns)) {
    for (    String columnName : metaColumns) {
      buf.append(""String_Node_Str"" + columnName);
    }
  }
  scoreWriter.write(buf.toString() + ""String_Node_Str"");
}",0.9899396378269618
31872,"/** 
 * @return
 * @throws IOException
 */
private String[] getEvalScoreHeader() throws IOException {
  PathFinder pathFinder=new PathFinder(modelConfig);
  SourceType sourceType=evalConfig.getDataSet().getSource();
  String pathHeader=null;
  boolean isDir=ShifuFileUtils.isDir(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  if (isDir) {
    pathHeader=pathFinder.getEvalScoreHeaderPath(evalConfig,sourceType);
  }
 else {
    pathHeader=pathFinder.getEvalScorePath(evalConfig,sourceType);
  }
  return CommonUtils.getHeaders(pathHeader,""String_Node_Str"",sourceType,false);
}","private String[] getEvalScoreHeader() throws IOException {
  PathFinder pathFinder=new PathFinder(modelConfig);
  SourceType sourceType=evalConfig.getDataSet().getSource();
  String pathHeader=null;
  boolean isDir=ShifuFileUtils.isDir(pathFinder.getEvalScorePath(evalConfig,sourceType),sourceType);
  if (isDir) {
    pathHeader=pathFinder.getEvalScoreHeaderPath(evalConfig,sourceType);
  }
 else {
    pathHeader=pathFinder.getEvalScorePath(evalConfig,sourceType);
  }
  return CommonUtils.getHeaders(pathHeader,""String_Node_Str"",sourceType,false);
}",0.8962510897994769
31873,"/** 
 * Normalize the raw data, according the ColumnConfig infomation and normalization type. Currently, the cutoff value doesn't affect the computation of WOE or WEIGHT_WOE type. <p> Noticed: currently OLD_ZSCALE and ZSCALE is implemented with the same process method. </p>
 * @param config ColumnConfig to normalize data
 * @param raw raw input data
 * @param cutoff standard deviation cut off
 * @param type normalization type.  {@link ModelNormalizeConf.NormType}
 * @return normalized value. If normType parameter is invalid, then the ZSCALE will be used as default.
 */
public static Double normalize(ColumnConfig config,String raw,Double cutoff,ModelNormalizeConf.NormType type){
switch (type) {
case WOE:
    return woeNormalize(config,raw,false);
case WEIGHT_WOE:
  return woeNormalize(config,raw,true);
case HYBRID:
return hybridNormalize(config,raw,cutoff,false);
case WEIGHT_HYBRID:
return hybridNormalize(config,raw,cutoff,true);
case WOE_ZSCORE:
return woeZScoreNormalize(config,raw,cutoff,false);
case WEIGHT_WOE_ZSCORE:
return woeZScoreNormalize(config,raw,cutoff,true);
case OLD_ZSCALE:
case OLD_ZSCORE:
case ZSCALE:
case ZSCORE:
default :
return zScoreNormalize(config,raw,cutoff);
}
}","/** 
 * Normalize the raw data, according the ColumnConfig infomation and normalization type. Currently, the cutoff value doesn't affect the computation of WOE or WEIGHT_WOE type. <p> Noticed: currently OLD_ZSCALE and ZSCALE is implemented with the same process method. </p>
 * @param config ColumnConfig to normalize data
 * @param raw raw input data
 * @param cutoff standard deviation cut off
 * @param type normalization type of ModelNormalizeConf.NormType
 * @return normalized value. If normType parameter is invalid, then the ZSCALE will be used as default.
 */
public static Double normalize(ColumnConfig config,String raw,Double cutoff,ModelNormalizeConf.NormType type){
switch (type) {
case WOE:
    return woeNormalize(config,raw,false);
case WEIGHT_WOE:
  return woeNormalize(config,raw,true);
case HYBRID:
return hybridNormalize(config,raw,cutoff,false);
case WEIGHT_HYBRID:
return hybridNormalize(config,raw,cutoff,true);
case WOE_ZSCORE:
return woeZScoreNormalize(config,raw,cutoff,false);
case WEIGHT_WOE_ZSCORE:
return woeZScoreNormalize(config,raw,cutoff,true);
case OLD_ZSCALE:
case OLD_ZSCORE:
case ZSCALE:
case ZSCORE:
default :
return zScoreNormalize(config,raw,cutoff);
}
}",0.9787411421425594
31874,"/** 
 * set min/max, merge same bins In a very skewed data array, this one may not be well performed
 * @param bins
 * @return
 */
private List<Double> binMerge(List<Double> bins){
  List<Double> newBins=new ArrayList<Double>();
  if (bins.size() == 0) {
    bins.add(Double.NaN);
    return bins;
  }
  Double cur=bins.get(0);
  newBins.add(cur);
  int i=1;
  while (i < bins.size()) {
    if (Math.abs(cur - bins.get(i)) > 1e-10) {
      newBins.add(bins.get(i));
    }
    cur=bins.get(i);
    i++;
  }
  if (newBins.size() == 1) {
    double val=newBins.get(0);
    newBins=Arrays.asList(new Double[]{Double.NEGATIVE_INFINITY,val});
  }
 else   if (newBins.size() == 2) {
    newBins.set(0,Double.NEGATIVE_INFINITY);
  }
 else {
    newBins.set(0,Double.NEGATIVE_INFINITY);
    newBins.remove(newBins.size() - 1);
  }
  return newBins;
}","/** 
 * set min/max, merge same bins In a very skewed data array, this one may not be well performed
 * @param bins input bins
 * @return merged bins
 */
private List<Double> binMerge(List<Double> bins){
  List<Double> newBins=new ArrayList<Double>();
  if (bins.size() == 0) {
    bins.add(Double.NaN);
    return bins;
  }
  Double cur=bins.get(0);
  newBins.add(cur);
  int i=1;
  while (i < bins.size()) {
    if (Math.abs(cur - bins.get(i)) > 1e-10) {
      newBins.add(bins.get(i));
    }
    cur=bins.get(i);
    i++;
  }
  if (newBins.size() == 1) {
    double val=newBins.get(0);
    newBins=Arrays.asList(new Double[]{Double.NEGATIVE_INFINITY,val});
  }
 else   if (newBins.size() == 2) {
    newBins.set(0,Double.NEGATIVE_INFINITY);
  }
 else {
    newBins.set(0,Double.NEGATIVE_INFINITY);
    newBins.remove(newBins.size() - 1);
  }
  return newBins;
}",0.9865102639296188
31875,"/** 
 * get the eval data path for sub model
 * @param subModelConfig - @ModelConfig for sub model
 * @param evalConfig
 * @return
 */
private String getEvalDataPath(ModelConfig subModelConfig,EvalConfig evalConfig){
  PathFinder pathFinder=new PathFinder(subModelConfig);
  String evalDataPath=pathFinder.getEvalScorePath(evalConfig);
  if (RawSourceData.SourceType.LOCAL.equals(evalConfig.getDataSet().getSource())) {
    evalDataPath=subModelConfig.getModelSetName() + File.separator + evalDataPath;
  }
  return evalDataPath;
}","/** 
 * get the eval data path for sub model
 * @param subModelConfig - @ModelConfig for sub model
 * @param evalConfig eval config
 * @return eval data path
 */
private String getEvalDataPath(ModelConfig subModelConfig,EvalConfig evalConfig){
  PathFinder pathFinder=new PathFinder(subModelConfig);
  String evalDataPath=pathFinder.getEvalScorePath(evalConfig);
  if (RawSourceData.SourceType.LOCAL.equals(evalConfig.getDataSet().getSource())) {
    evalDataPath=subModelConfig.getModelSetName() + File.separator + evalDataPath;
  }
  return evalDataPath;
}",0.975206611570248
31876,"/** 
 * Save ModelConfig into some folder
 * @param folder - folder to host ModelConfig.json
 * @param modelConfig
 * @throws IOException
 */
private void saveModelConfig(String folder,ModelConfig modelConfig) throws IOException {
  JSONUtils.writeValue(new File(folder + File.separator + Constants.MODEL_CONFIG_JSON_FILE_NAME),modelConfig);
}","/** 
 * Save ModelConfig into some folder
 * @param folder - folder to host ModelConfig.json
 * @param modelConfig model config instance
 * @throws IOException any io exception
 */
private void saveModelConfig(String folder,ModelConfig modelConfig) throws IOException {
  JSONUtils.writeValue(new File(folder + File.separator + Constants.MODEL_CONFIG_JSON_FILE_NAME),modelConfig);
}",0.9462068965517242
31877,"/** 
 * Create @ModelTrainConf according the @ModelTrainConf.ALGORITHM
 * @param alg - the algorithm, see @ModelTrainConf.ALGORITHM
 * @return
 */
private ModelTrainConf createModelTrainConf(ModelTrainConf.ALGORITHM alg){
  ModelTrainConf trainConf=new ModelTrainConf();
  trainConf.setAlgorithm(alg.name());
  trainConf.setEpochsPerIteration(1);
  trainConf.setParams(ModelTrainConf.createParamsByAlg(alg,trainConf));
  trainConf.setNumTrainEpochs(100);
  if (ModelTrainConf.ALGORITHM.NN.equals(alg)) {
    trainConf.setNumTrainEpochs(200);
  }
 else   if (ModelTrainConf.ALGORITHM.SVM.equals(alg)) {
    trainConf.setNumTrainEpochs(100);
  }
 else   if (ModelTrainConf.ALGORITHM.RF.equals(alg)) {
    trainConf.setNumTrainEpochs(20000);
  }
 else   if (ModelTrainConf.ALGORITHM.GBT.equals(alg)) {
    trainConf.setNumTrainEpochs(20000);
  }
 else   if (ModelTrainConf.ALGORITHM.LR.equals(alg)) {
    trainConf.setNumTrainEpochs(100);
  }
  trainConf.setBaggingWithReplacement(true);
  return trainConf;
}","/** 
 * Create @ModelTrainConf according the @ModelTrainConf.ALGORITHM
 * @param alg - the algorithm, see @ModelTrainConf.ALGORITHM
 * @return train config instance
 */
private ModelTrainConf createModelTrainConf(ModelTrainConf.ALGORITHM alg){
  ModelTrainConf trainConf=new ModelTrainConf();
  trainConf.setAlgorithm(alg.name());
  trainConf.setEpochsPerIteration(1);
  trainConf.setParams(ModelTrainConf.createParamsByAlg(alg,trainConf));
  trainConf.setNumTrainEpochs(100);
  if (ModelTrainConf.ALGORITHM.NN.equals(alg)) {
    trainConf.setNumTrainEpochs(200);
  }
 else   if (ModelTrainConf.ALGORITHM.SVM.equals(alg)) {
    trainConf.setNumTrainEpochs(100);
  }
 else   if (ModelTrainConf.ALGORITHM.RF.equals(alg)) {
    trainConf.setNumTrainEpochs(20000);
  }
 else   if (ModelTrainConf.ALGORITHM.GBT.equals(alg)) {
    trainConf.setNumTrainEpochs(20000);
  }
 else   if (ModelTrainConf.ALGORITHM.LR.equals(alg)) {
    trainConf.setNumTrainEpochs(100);
  }
  trainConf.setBaggingWithReplacement(true);
  return trainConf;
}",0.9891838741396264
31878,"/** 
 * Create @VarTrainConf according the @ModelTrainConf.ALGORITHM
 * @param alg - the algorithm, see @ModelTrainConf.ALGORITHM
 * @return
 */
private VarTrainConf createVarTrainConf(ModelTrainConf.ALGORITHM alg){
  VarTrainConf varTrainConf=new VarTrainConf();
  varTrainConf.setVariables(new ArrayList<String>());
  varTrainConf.setModelTrainConf(createModelTrainConf(alg));
  return varTrainConf;
}","/** 
 * Create @VarTrainConf according the @ModelTrainConf.ALGORITHM
 * @param alg - the algorithm, see @ModelTrainConf.ALGORITHM
 * @return train config instance
 */
private VarTrainConf createVarTrainConf(ModelTrainConf.ALGORITHM alg){
  VarTrainConf varTrainConf=new VarTrainConf();
  varTrainConf.setVariables(new ArrayList<String>());
  varTrainConf.setModelTrainConf(createModelTrainConf(alg));
  return varTrainConf;
}",0.9734299516908212
31879,"/** 
 * Generate sub model name
 * @param i - sequence to keep unique
 * @param varTrainConf
 * @return
 */
private String genSubModelName(int i,VarTrainConf varTrainConf){
  return this.modelConfig.getBasic().getName() + ""String_Node_Str"" + varTrainConf.getModelTrainConf().getAlgorithm()+ ""String_Node_Str""+ i;
}","/** 
 * Generate sub model name
 * @param i - sequence to keep unique
 * @param varTrainConf train config
 * @return sub model name
 */
private String genSubModelName(int i,VarTrainConf varTrainConf){
  return this.modelConfig.getBasic().getName() + ""String_Node_Str"" + varTrainConf.getModelTrainConf().getAlgorithm()+ ""String_Node_Str""+ i;
}",0.9573170731707316
31880,"/** 
 * Load ComboModelTrain from ComboTrain.json
 * @return
 */
private ComboModelTrain loadComboTrain(){
  try {
    return JSONUtils.readValue(new File(Constants.COMBO_CONFIG_JSON_FILE_NAME),ComboModelTrain.class);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"");
    return null;
  }
}","/** 
 * Load ComboModelTrain from ComboTrain.json
 * @return combo model train instance, null if exception
 */
private ComboModelTrain loadComboTrain(){
  try {
    return JSONUtils.readValue(new File(Constants.COMBO_CONFIG_JSON_FILE_NAME),ComboModelTrain.class);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"");
    return null;
  }
}",0.9294478527607362
31881,"/** 
 * Get evaluation output file format
 * @param runMode
 * @return
 */
private ColumnFile.FileType genEvalFileType(ModelBasicConf.RunMode runMode){
  return (ModelBasicConf.RunMode.MAPRED.equals(runMode) ? ColumnFile.FileType.PIGSTORAGE : ColumnFile.FileType.CSV);
}","/** 
 * Get evaluation output file format
 * @param runMode run mode
 * @return file type
 */
private ColumnFile.FileType genEvalFileType(ModelBasicConf.RunMode runMode){
  return (ModelBasicConf.RunMode.MAPRED.equals(runMode) ? ColumnFile.FileType.PIGSTORAGE : ColumnFile.FileType.CSV);
}",0.966010733452594
31882,"/** 
 * Clone @ColumnConfig list for sub-models
 * @param columnConfigList
 * @return
 */
private List<ColumnConfig> cloneColumnConfigs(List<ColumnConfig> columnConfigList){
  List<ColumnConfig> columnConfigs=new ArrayList<ColumnConfig>();
  for (  ColumnConfig columnConfig : columnConfigList) {
    columnConfigs.add(columnConfig.clone());
  }
  return columnConfigs;
}","/** 
 * Clone @ColumnConfig list for sub-models
 * @param columnConfigList column config list
 * @return cloned column config list
 */
private List<ColumnConfig> cloneColumnConfigs(List<ColumnConfig> columnConfigList){
  List<ColumnConfig> columnConfigs=new ArrayList<ColumnConfig>();
  for (  ColumnConfig columnConfig : columnConfigList) {
    columnConfigs.add(columnConfig.clone());
  }
  return columnConfigs;
}",0.9428208386277002
31883,"/** 
 * Append weight column, if not blank, with uid column as score meta data.
 * @param weightColumnName
 * @return
 */
private String[] genEvalScoreMetaVars(String weightColumnName){
  return new String[]{this.comboModelTrain.getUidColumnName()};
}","/** 
 * Append weight column, if not blank, with uid column as score meta data.
 * @param weightColumnName weight column name
 * @return eval meta vars
 */
private String[] genEvalScoreMetaVars(String weightColumnName){
  return new String[]{this.comboModelTrain.getUidColumnName()};
}",0.9365671641791044
31884,"/** 
 * Save ColumnConfig list into some folder
 * @param folder - folder to host ColumnConfig.json
 * @param columnConfigs
 * @throws IOException
 */
private void saveColumnConfigList(String folder,List<ColumnConfig> columnConfigs) throws IOException {
  JSONUtils.writeValue(new File(folder + File.separator + Constants.COLUMN_CONFIG_JSON_FILE_NAME),columnConfigs);
}","/** 
 * Save ColumnConfig list into some folder
 * @param folder - folder to host ColumnConfig.json
 * @param columnConfigs column config list
 * @throws IOException any io exception
 */
private void saveColumnConfigList(String folder,List<ColumnConfig> columnConfigs) throws IOException {
  JSONUtils.writeValue(new File(folder + File.separator + Constants.COLUMN_CONFIG_JSON_FILE_NAME),columnConfigs);
}",0.9534883720930232
31885,"/** 
 * Create evaluation tasks for all sub-models
 * @param evalName - the evalset to evaluate
 * @return
 * @throws IOException
 */
private List<Callable<Integer>> createEvaluateTasks(final String evalName) throws IOException {
  List<Callable<Integer>> tasks=new ArrayList<Callable<Integer>>();
  for (int i=0; i < this.comboModelTrain.getVarTrainConfList().size(); i++) {
    VarTrainConf varTrainConf=this.comboModelTrain.getVarTrainConfList().get(i);
    final String subModelName=genSubModelName(i,varTrainConf);
    tasks.add(new Callable<Integer>(){
      @Override public Integer call(){
        try {
          return ProcessManager.runShellProcess(subModelName,new String[][]{new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalName}});
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e);
          return 1;
        }
      }
    }
);
  }
  return tasks;
}","/** 
 * Create evaluation tasks for all sub-models
 * @param evalName - the evalset to evaluate
 * @return list of callable instance
 * @throws IOException any io exception
 */
private List<Callable<Integer>> createEvaluateTasks(final String evalName) throws IOException {
  List<Callable<Integer>> tasks=new ArrayList<Callable<Integer>>();
  for (int i=0; i < this.comboModelTrain.getVarTrainConfList().size(); i++) {
    VarTrainConf varTrainConf=this.comboModelTrain.getVarTrainConfList().get(i);
    final String subModelName=genSubModelName(i,varTrainConf);
    tasks.add(new Callable<Integer>(){
      @Override public Integer call(){
        try {
          return ProcessManager.runShellProcess(subModelName,new String[][]{new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalName}});
        }
 catch (        IOException e) {
          LOG.error(""String_Node_Str"",e);
          return 1;
        }
      }
    }
);
  }
  return tasks;
}",0.9771883289124668
31886,"/** 
 * Create train and eval task for sub-model
 * @param subModelName
 * @param evalSetName
 * @return
 */
private Callable<Integer> createTrainAndEvalTasks(final String subModelName,final String evalSetName) throws IOException {
}","/** 
 * Create train and eval task for sub-model
 * @param subModelName sub model name
 * @param evalSetName eval set name
 * @return callable instance
 */
private Callable<Integer> createTrainAndEvalTasks(final String subModelName,final String evalSetName) throws IOException {
}",0.9083820662768032
31887,"/** 
 * Generate assembel model name
 * @param modelName
 * @return
 */
private String genAssembleModelName(String modelName){
  return modelName + ""String_Node_Str"" + Constants.COMBO_ASSEMBLE;
}","/** 
 * Generate assembel model name
 * @param modelName model name
 * @return assemble model bane
 */
private String genAssembleModelName(String modelName){
  return modelName + ""String_Node_Str"" + Constants.COMBO_ASSEMBLE;
}",0.9263657957244656
31888,"/** 
 * get @EvalConfig from @ModelConfig by evalset name
 * @param mconfig
 * @param name
 * @return
 */
private EvalConfig getEvalConfigByName(ModelConfig mconfig,String name){
  for (  EvalConfig evalConfig : mconfig.getEvals()) {
    if (evalConfig.getName().equalsIgnoreCase(name)) {
      return evalConfig;
    }
  }
  return null;
}","/** 
 * get @EvalConfig from @ModelConfig by evalset name
 * @param mconfig model config
 * @param name eval name
 * @return eval config instance
 */
private EvalConfig getEvalConfigByName(ModelConfig mconfig,String name){
  for (  EvalConfig evalConfig : mconfig.getEvals()) {
    if (evalConfig.getName().equalsIgnoreCase(name)) {
      return evalConfig;
    }
  }
  return null;
}",0.9088397790055248
31889,"/** 
 * Evaluate the Combo model performance 1. Evaluate all evaluation sets in sub models; 2. Join the evaluation result data for assemble model; 3. Run evaluation for assemble model
 * @return
 * @throws IOException
 */
private int evalComboModels() throws IOException {
}","/** 
 * Evaluate the Combo model performance 1. Evaluate all evaluation sets in sub models; 2. Join the evaluation result data for assemble model; 3. Run evaluation for assemble model
 * @return 0 success, otherwise failed
 * @throws IOException any io exception
 */
private int evalComboModels() throws IOException {
}",0.924114671163575
31890,"/** 
 * Create configuration file for sub-model if the configuration for parent model exists, it will copy that parent configuration firstly and append new content.
 * @param subModelName
 * @param namesPrefix
 * @param parentNamesFile
 * @param varNames
 * @return
 * @throws IOException
 */
private String createModelNamesFile(String subModelName,String namesPrefix,String parentNamesFile,String... varNames) throws IOException {
  String modelNamesCfg=namesPrefix + ""String_Node_Str"";
  File mnFile=new File(subModelName + File.separator + modelNamesCfg);
  if (StringUtils.isNotBlank(parentNamesFile)) {
    FileUtils.copyFile(new File(parentNamesFile),mnFile);
  }
  FileWriter writer=new FileWriter(mnFile);
  try {
    for (    String var : varNames) {
      writer.append(var + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
  }
 finally {
    writer.close();
  }
  return modelNamesCfg;
}","/** 
 * Create configuration file for sub-model if the configuration for parent model exists, it will copy that parent configuration firstly and append new content.
 * @param subModelName sub model name
 * @param namesPrefix prefix of name
 * @param parentNamesFile parent names of files
 * @param varNames var names
 * @return model file name
 * @throws IOException any io exception
 */
private String createModelNamesFile(String subModelName,String namesPrefix,String parentNamesFile,String... varNames) throws IOException {
  String modelNamesCfg=namesPrefix + ""String_Node_Str"";
  File mnFile=new File(subModelName + File.separator + modelNamesCfg);
  if (StringUtils.isNotBlank(parentNamesFile)) {
    FileUtils.copyFile(new File(parentNamesFile),mnFile);
  }
  FileWriter writer=new FileWriter(mnFile);
  try {
    for (    String var : varNames) {
      writer.append(var + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
  }
 finally {
    writer.close();
  }
  return modelNamesCfg;
}",0.9502357255107386
31891,"/** 
 * Create folder for sub-models, and create related files for sub-models. All settings in sub-model will use parent model as reference.
 * @return
 * @throws IOException
 */
private int initComboModels() throws IOException {
  if (this.comboModelTrain == null) {
    LOG.error(""String_Node_Str"");
    return 1;
  }
  String[] subModelNames=new String[this.comboModelTrain.getVarTrainConfList().size()];
  for (int i=0; i < this.comboModelTrain.getVarTrainConfList().size(); i++) {
    VarTrainConf varTrainConf=this.comboModelTrain.getVarTrainConfList().get(i);
    String subModelName=genSubModelName(i,varTrainConf);
    subModelNames[i]=subModelName;
    new File(subModelName).mkdirs();
    ModelConfig subModelConfig=this.modelConfig.clone();
    subModelConfig.getBasic().setName(subModelName);
    subModelConfig.setTrain(varTrainConf.getModelTrainConf());
    subModelConfig.getTrain().setCustomPaths(new HashMap<String,String>());
    String normalizedPath=pathFinder.getNormalizedDataPath();
    if (RawSourceData.SourceType.LOCAL.equals(modelConfig.getDataSet().getSource())) {
      normalizedPath=new File(normalizedPath).getAbsolutePath();
    }
    subModelConfig.getTrain().getCustomPaths().put(Constants.KEY_NORMALIZED_DATA_PATH,normalizedPath);
    List<ColumnConfig> columnConfigs=this.columnConfigList;
    if (CollectionUtils.isNotEmpty(varTrainConf.getVariables())) {
      Set<String> selectedVars=new HashSet<String>(varTrainConf.getVariables());
      columnConfigs=cloneColumnConfigs(this.columnConfigList);
      for (      ColumnConfig columnConfig : columnConfigs) {
        columnConfig.setFinalSelect(false);
        if (selectedVars.contains(columnConfig.getColumnName())) {
          columnConfig.setFinalSelect(true);
        }
      }
    }
    for (    EvalConfig evalConfig : subModelConfig.getEvals()) {
      String scoreMetaFileName=createModelNamesFile(subModelName,evalConfig.getName() + ""String_Node_Str"",evalConfig.getScoreMetaColumnNameFile(),this.genEvalScoreMetaVars(null));
      evalConfig.setScoreMetaColumnNameFile(scoreMetaFileName);
    }
    EvalConfig trainEval=new EvalConfig();
    trainEval.setName(genEvalTrainName());
    trainEval.setDataSet(subModelConfig.getDataSet().cloneRawSourceData());
    String scoreMetaFileName=createModelNamesFile(subModelName,trainEval.getName() + ""String_Node_Str"",null,this.genEvalScoreMetaVars(this.modelConfig.getDataSet().getWeightColumnName()));
    trainEval.setScoreMetaColumnNameFile(scoreMetaFileName);
    subModelConfig.getEvals().add(trainEval);
    saveModelConfig(subModelName,subModelConfig);
    saveColumnConfigList(subModelName,columnConfigs);
  }
  ModelConfig assembleModelConfig=this.modelConfig.clone();
  String assembleModelName=genAssembleModelName(this.modelConfig.getModelSetName());
  new File(assembleModelName).mkdirs();
  assembleModelConfig.setModelSetName(assembleModelName);
  assembleModelConfig.getDataSet().setCategoricalColumnNameFile(null);
  assembleModelConfig.getVarSelect().setForceRemoveColumnNameFile(null);
  String forceSelectNames=createModelNamesFile(assembleModelName,assembleModelName + ""String_Node_Str"",null,CommonUtils.genPigFieldName(subModelNames));
  assembleModelConfig.getVarSelect().setForceSelectColumnNameFile(forceSelectNames);
  assembleModelConfig.getVarSelect().setForceEnable(true);
  assembleModelConfig.getVarSelect().setFilterNum(subModelNames.length);
  assembleModelConfig.getVarSelect().setFilterEnable(true);
  String metaColumnNames=createModelNamesFile(assembleModelName,assembleModelName + ""String_Node_Str"",null,this.comboModelTrain.getUidColumnName());
  assembleModelConfig.getDataSet().setMetaColumnNameFile(metaColumnNames);
  assembleModelConfig.setTrain(this.comboModelTrain.getFusionModelTrainConf());
  for (  EvalConfig evalConfig : assembleModelConfig.getEvals()) {
    String scoreMetaFileName=createModelNamesFile(assembleModelName,evalConfig.getName() + ""String_Node_Str"",evalConfig.getScoreMetaColumnNameFile(),this.genEvalScoreMetaVars(null));
    evalConfig.setScoreMetaColumnNameFile(scoreMetaFileName);
  }
  new File(assembleModelName).mkdirs();
  saveModelConfig(assembleModelName,assembleModelConfig);
  return 0;
}","/** 
 * Create folder for sub-models, and create related files for sub-models. All settings in sub-model will use parent model as reference.
 * @return 0 successful, otherwise failed
 * @throws IOException any io exception
 */
private int initComboModels() throws IOException {
  if (this.comboModelTrain == null) {
    LOG.error(""String_Node_Str"");
    return 1;
  }
  String[] subModelNames=new String[this.comboModelTrain.getVarTrainConfList().size()];
  for (int i=0; i < this.comboModelTrain.getVarTrainConfList().size(); i++) {
    VarTrainConf varTrainConf=this.comboModelTrain.getVarTrainConfList().get(i);
    String subModelName=genSubModelName(i,varTrainConf);
    subModelNames[i]=subModelName;
    new File(subModelName).mkdirs();
    ModelConfig subModelConfig=this.modelConfig.clone();
    subModelConfig.getBasic().setName(subModelName);
    subModelConfig.setTrain(varTrainConf.getModelTrainConf());
    subModelConfig.getTrain().setCustomPaths(new HashMap<String,String>());
    String normalizedPath=pathFinder.getNormalizedDataPath();
    if (RawSourceData.SourceType.LOCAL.equals(modelConfig.getDataSet().getSource())) {
      normalizedPath=new File(normalizedPath).getAbsolutePath();
    }
    subModelConfig.getTrain().getCustomPaths().put(Constants.KEY_NORMALIZED_DATA_PATH,normalizedPath);
    List<ColumnConfig> columnConfigs=this.columnConfigList;
    if (CollectionUtils.isNotEmpty(varTrainConf.getVariables())) {
      Set<String> selectedVars=new HashSet<String>(varTrainConf.getVariables());
      columnConfigs=cloneColumnConfigs(this.columnConfigList);
      for (      ColumnConfig columnConfig : columnConfigs) {
        columnConfig.setFinalSelect(false);
        if (selectedVars.contains(columnConfig.getColumnName())) {
          columnConfig.setFinalSelect(true);
        }
      }
    }
    for (    EvalConfig evalConfig : subModelConfig.getEvals()) {
      String scoreMetaFileName=createModelNamesFile(subModelName,evalConfig.getName() + ""String_Node_Str"",evalConfig.getScoreMetaColumnNameFile(),this.genEvalScoreMetaVars(null));
      evalConfig.setScoreMetaColumnNameFile(scoreMetaFileName);
    }
    EvalConfig trainEval=new EvalConfig();
    trainEval.setName(genEvalTrainName());
    trainEval.setDataSet(subModelConfig.getDataSet().cloneRawSourceData());
    String scoreMetaFileName=createModelNamesFile(subModelName,trainEval.getName() + ""String_Node_Str"",null,this.genEvalScoreMetaVars(this.modelConfig.getDataSet().getWeightColumnName()));
    trainEval.setScoreMetaColumnNameFile(scoreMetaFileName);
    subModelConfig.getEvals().add(trainEval);
    saveModelConfig(subModelName,subModelConfig);
    saveColumnConfigList(subModelName,columnConfigs);
  }
  ModelConfig assembleModelConfig=this.modelConfig.clone();
  String assembleModelName=genAssembleModelName(this.modelConfig.getModelSetName());
  new File(assembleModelName).mkdirs();
  assembleModelConfig.setModelSetName(assembleModelName);
  assembleModelConfig.getDataSet().setCategoricalColumnNameFile(null);
  assembleModelConfig.getVarSelect().setForceRemoveColumnNameFile(null);
  String forceSelectNames=createModelNamesFile(assembleModelName,assembleModelName + ""String_Node_Str"",null,CommonUtils.genPigFieldName(subModelNames));
  assembleModelConfig.getVarSelect().setForceSelectColumnNameFile(forceSelectNames);
  assembleModelConfig.getVarSelect().setForceEnable(true);
  assembleModelConfig.getVarSelect().setFilterNum(subModelNames.length);
  assembleModelConfig.getVarSelect().setFilterEnable(true);
  String metaColumnNames=createModelNamesFile(assembleModelName,assembleModelName + ""String_Node_Str"",null,this.comboModelTrain.getUidColumnName());
  assembleModelConfig.getDataSet().setMetaColumnNameFile(metaColumnNames);
  assembleModelConfig.setTrain(this.comboModelTrain.getFusionModelTrainConf());
  for (  EvalConfig evalConfig : assembleModelConfig.getEvals()) {
    String scoreMetaFileName=createModelNamesFile(assembleModelName,evalConfig.getName() + ""String_Node_Str"",evalConfig.getScoreMetaColumnNameFile(),this.genEvalScoreMetaVars(null));
    evalConfig.setScoreMetaColumnNameFile(scoreMetaFileName);
  }
  new File(assembleModelName).mkdirs();
  saveModelConfig(assembleModelName,assembleModelConfig);
  return 0;
}",0.9943329397874852
31892,"/** 
 * Generate train data evaluation set name
 * @return
 */
private String genEvalTrainName(){
  return Constants.COMBO_EVAL_TRAIN;
}","/** 
 * Generate train data evaluation set name
 * @return eval train name
 */
private String genEvalTrainName(){
  return Constants.COMBO_EVAL_TRAIN;
}",0.9444444444444444
31893,"/** 
 * Save ComboTrain.json into local directory
 * @param comboModelTrain
 * @return
 */
private int saveComboTrain(ComboModelTrain comboModelTrain){
  try {
    JSONUtils.writeValue(new File(Constants.COMBO_CONFIG_JSON_FILE_NAME),comboModelTrain);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"");
    return 1;
  }
  return 0;
}","/** 
 * Save ComboTrain.json into local directory
 * @param comboModelTrain combo model train instance
 * @return 0 success, otherwise failed
 */
private int saveComboTrain(ComboModelTrain comboModelTrain){
  try {
    JSONUtils.writeValue(new File(Constants.COMBO_CONFIG_JSON_FILE_NAME),comboModelTrain);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"");
    return 1;
  }
  return 0;
}",0.9261744966442952
31894,"/** 
 * run pig post train
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") private void runPigPostTrain() throws IOException {
  SourceType sourceType=modelConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getTrainScoresPath(),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getBinAvgScorePath(),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(""String_Node_Str"",modelConfig.getHeaderPath());
  paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getHeaderDelimiter()));
  paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
  try {
    PigExecutor.getExecutor().submitJob(modelConfig,pathFinder.getScriptPath(""String_Node_Str""),paramsMap);
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
  columnConfigList=updateColumnConfigWithBinAvgScore(columnConfigList);
  saveColumnConfigListAndColumnStats(false);
}","/** 
 * run pig post train
 * @throws IOException for any io exception
 */
@SuppressWarnings(""String_Node_Str"") private void runPigPostTrain() throws IOException {
  SourceType sourceType=modelConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getTrainScoresPath(),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getBinAvgScorePath(),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(""String_Node_Str"",modelConfig.getHeaderPath());
  paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getHeaderDelimiter()));
  paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
  try {
    PigExecutor.getExecutor().submitJob(modelConfig,pathFinder.getScriptPath(""String_Node_Str""),paramsMap);
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
  columnConfigList=updateColumnConfigWithBinAvgScore(columnConfigList);
  saveColumnConfigListAndColumnStats(false);
}",0.9903270382312298
31895,"/** 
 * run akka post train
 * @throws IOException
 */
private void runAkkaPostTrain() throws IOException {
  SourceType sourceType=modelConfig.getDataSet().getSource();
  List<Scanner> scanners=ShifuFileUtils.getDataScanners(pathFinder.getSelectedRawDataPath(sourceType),sourceType);
  log.info(""String_Node_Str"" + scanners.size());
  AkkaSystemExecutor.getExecutor().submitPostTrainJob(modelConfig,columnConfigList,scanners);
  closeScanners(scanners);
}","/** 
 * run akka post train
 * @throws IOException for any io exception
 */
private void runAkkaPostTrain() throws IOException {
  SourceType sourceType=modelConfig.getDataSet().getSource();
  List<Scanner> scanners=ShifuFileUtils.getDataScanners(pathFinder.getSelectedRawDataPath(sourceType),sourceType);
  log.info(""String_Node_Str"" + scanners.size());
  AkkaSystemExecutor.getExecutor().submitPostTrainJob(modelConfig,columnConfigList,scanners);
  closeScanners(scanners);
}",0.977491961414791
31896,"/** 
 * read the binary average score and update them into column list
 * @param columnConfigList
 * @return
 * @throws IOException
 */
private List<ColumnConfig> updateColumnConfigWithBinAvgScore(List<ColumnConfig> columnConfigList) throws IOException {
  List<Scanner> scanners=ShifuFileUtils.getDataScanners(pathFinder.getBinAvgScorePath(),modelConfig.getDataSet().getSource());
  for (  Scanner scanner : scanners) {
    while (scanner.hasNextLine()) {
      List<Integer> scores=new ArrayList<Integer>();
      String[] raw=scanner.nextLine().split(""String_Node_Str"");
      int columnNum=Integer.parseInt(raw[0]);
      for (int i=1; i < raw.length; i++) {
        scores.add(Integer.valueOf(raw[i]));
      }
      ColumnConfig config=columnConfigList.get(columnNum);
      config.setBinAvgScore(scores);
    }
  }
  closeScanners(scanners);
  return columnConfigList;
}","/** 
 * read the binary average score and update them into column list
 * @param columnConfigList input column config list
 * @return updated column config list
 * @throws IOException for any io exception
 */
private List<ColumnConfig> updateColumnConfigWithBinAvgScore(List<ColumnConfig> columnConfigList) throws IOException {
  List<Scanner> scanners=ShifuFileUtils.getDataScanners(pathFinder.getBinAvgScorePath(),modelConfig.getDataSet().getSource());
  for (  Scanner scanner : scanners) {
    while (scanner.hasNextLine()) {
      List<Integer> scores=new ArrayList<Integer>();
      String[] raw=scanner.nextLine().split(""String_Node_Str"");
      int columnNum=Integer.parseInt(raw[0]);
      for (int i=1; i < raw.length; i++) {
        scores.add(Integer.valueOf(raw[i]));
      }
      ColumnConfig config=columnConfigList.get(columnNum);
      config.setBinAvgScore(scores);
    }
  }
  closeScanners(scanners);
  return columnConfigList;
}",0.9600437876299944
31897,"@JsonIgnore public List<String> getScoreMetaColumns(ModelConfig modelConfig) throws IOException {
  if (scoreMetaColumns == null) {
synchronized (this) {
      if (scoreMetaColumns == null) {
        PathFinder pathFinder=new PathFinder(modelConfig);
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.HDFS.equals(dataSet.getSource())) {
          String path=scoreMetaColumnNameFile;
          File file=new File(scoreMetaColumnNameFile);
          path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),dataSet.getHeaderDelimiter());
        }
      }
    }
  }
  return scoreMetaColumns;
}","@JsonIgnore public List<String> getScoreMetaColumns(ModelConfig modelConfig) throws IOException {
  if (scoreMetaColumns == null) {
synchronized (this) {
      if (scoreMetaColumns == null) {
        PathFinder pathFinder=new PathFinder(modelConfig);
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.HDFS.equals(dataSet.getSource())) {
          String path=scoreMetaColumnNameFile;
          File file=new File(scoreMetaColumnNameFile);
          path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),StringUtils.isBlank(dataSet.getHeaderDelimiter()) ? dataSet.getDataDelimiter() : dataSet.getHeaderDelimiter());
        }
      }
    }
  }
  return scoreMetaColumns;
}",0.9466754443712968
31898,"@JsonIgnore public List<String> getAllMetaColumns(ModelConfig modelConfig) throws IOException {
  if (metaColumns == null) {
synchronized (this) {
      if (metaColumns == null) {
        PathFinder pathFinder=new PathFinder(modelConfig);
        List<String> scoreMetaColumns=null;
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.HDFS.equals(dataSet.getSource())) {
          String path=scoreMetaColumnNameFile;
          File file=new File(scoreMetaColumnNameFile);
          path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),dataSet.getHeaderDelimiter());
          metaColumns=scoreMetaColumns;
        }
        if (StringUtils.isNotBlank(dataSet.getMetaColumnNameFile())) {
          String rawMetaPath=dataSet.getMetaColumnNameFile();
          if (StringUtils.isNotBlank(rawMetaPath) && SourceType.HDFS.equals(dataSet.getSource())) {
            File file=new File(rawMetaPath);
            rawMetaPath=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          }
          List<String> rawMetaColumns=CommonUtils.readConfFileIntoList(rawMetaPath,dataSet.getSource(),dataSet.getHeaderDelimiter());
          if (metaColumns != null) {
            for (            String column : rawMetaColumns) {
              if (!metaColumns.contains(column)) {
                metaColumns.add(column);
              }
            }
          }
 else {
            metaColumns=rawMetaColumns;
          }
        }
      }
    }
  }
  return metaColumns;
}","@JsonIgnore public List<String> getAllMetaColumns(ModelConfig modelConfig) throws IOException {
  if (metaColumns == null) {
synchronized (this) {
      if (metaColumns == null) {
        PathFinder pathFinder=new PathFinder(modelConfig);
        List<String> scoreMetaColumns=null;
        if (StringUtils.isNotBlank(scoreMetaColumnNameFile) && SourceType.HDFS.equals(dataSet.getSource())) {
          String path=scoreMetaColumnNameFile;
          File file=new File(scoreMetaColumnNameFile);
          path=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          scoreMetaColumns=CommonUtils.readConfFileIntoList(path,dataSet.getSource(),StringUtils.isBlank(dataSet.getHeaderDelimiter()) ? dataSet.getDataDelimiter() : dataSet.getHeaderDelimiter());
          metaColumns=scoreMetaColumns;
        }
        if (StringUtils.isNotBlank(dataSet.getMetaColumnNameFile())) {
          String rawMetaPath=dataSet.getMetaColumnNameFile();
          if (StringUtils.isNotBlank(rawMetaPath) && SourceType.HDFS.equals(dataSet.getSource())) {
            File file=new File(rawMetaPath);
            rawMetaPath=new Path(pathFinder.getEvalSetPath(this),file.getName()).toString();
          }
          List<String> rawMetaColumns=CommonUtils.readConfFileIntoList(rawMetaPath,dataSet.getSource(),StringUtils.isBlank(dataSet.getHeaderDelimiter()) ? dataSet.getDataDelimiter() : dataSet.getHeaderDelimiter());
          if (metaColumns != null) {
            for (            String column : rawMetaColumns) {
              if (!metaColumns.contains(column)) {
                metaColumns.add(column);
              }
            }
          }
 else {
            metaColumns=rawMetaColumns;
          }
        }
      }
    }
  }
  return metaColumns;
}",0.9520142180094788
31899,"private void validateEvalColumnConfig(EvalConfig evalConfig) throws IOException {
  if (this.columnConfigList == null) {
    return;
  }
  String[] evalColumnNames=null;
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    evalColumnNames=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
  }
 else {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      String[] dataInFirstLine=CommonUtils.takeFirstTwoLines(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource())[1];
      if (dataInFirstLine != null && fields.length != dataInFirstLine.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      evalColumnNames=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        evalColumnNames[i]=CommonUtils.getRelativePigHeaderColumnName(fields[i]);
      }
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      evalColumnNames=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        evalColumnNames[i]=i + ""String_Node_Str"";
      }
    }
  }
  Set<String> names=new HashSet<String>();
  names.addAll(Arrays.asList(evalColumnNames));
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isFinalSelect() && !names.contains(config.getColumnName())) {
      throw new IllegalArgumentException(""String_Node_Str"" + config.getColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
    }
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName()) && !names.contains(evalConfig.getDataSet().getTargetColumnName())) {
    throw new IllegalArgumentException(""String_Node_Str"" + evalConfig.getDataSet().getTargetColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName()) && !names.contains(evalConfig.getDataSet().getWeightColumnName())) {
    throw new IllegalArgumentException(""String_Node_Str"" + evalConfig.getDataSet().getWeightColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
  }
}","private void validateEvalColumnConfig(EvalConfig evalConfig) throws IOException {
  if (this.columnConfigList == null) {
    return;
  }
  String[] evalColumnNames=null;
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    evalColumnNames=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),delimiter,evalConfig.getDataSet().getSource());
  }
 else {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      String[] dataInFirstLine=CommonUtils.takeFirstTwoLines(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource())[1];
      if (dataInFirstLine != null && fields.length != dataInFirstLine.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      evalColumnNames=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        evalColumnNames[i]=CommonUtils.getRelativePigHeaderColumnName(fields[i]);
      }
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      evalColumnNames=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        evalColumnNames[i]=i + ""String_Node_Str"";
      }
    }
  }
  Set<String> names=new HashSet<String>();
  names.addAll(Arrays.asList(evalColumnNames));
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isFinalSelect() && !names.contains(config.getColumnName())) {
      throw new IllegalArgumentException(""String_Node_Str"" + config.getColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
    }
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName()) && !names.contains(evalConfig.getDataSet().getTargetColumnName())) {
    throw new IllegalArgumentException(""String_Node_Str"" + evalConfig.getDataSet().getTargetColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName()) && !names.contains(evalConfig.getDataSet().getWeightColumnName())) {
    throw new IllegalArgumentException(""String_Node_Str"" + evalConfig.getDataSet().getWeightColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
  }
}",0.9494106980961016
31900,"public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    this.headers=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
    Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
    this.outputNames=new ArrayList<String>();
    if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
      outputNames.add(evalConfig.getDataSet().getTargetColumnName());
    }
 else {
      outputNames.add(modelConfig.getWeightColumnName());
    }
    if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
      outputNames.add(evalConfig.getDataSet().getWeightColumnName());
    }
 else {
      outputNames.add(SCHEMA_PREFIX + ""String_Node_Str"");
    }
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        if (!evalNamesSet.contains(columnConfig.getColumnName())) {
          log.error(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
 else {
          outputNames.add(columnConfig.getColumnName());
        }
      }
    }
  }
 else {
    log.error(""String_Node_Str"");
    throw new RuntimeException(""String_Node_Str"");
  }
}","public EvalNormUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
      String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
      this.headers=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),delimiter,evalConfig.getDataSet().getSource());
    }
 else {
      String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
      String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
      if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
        this.headers=new String[fields.length];
        for (int i=0; i < fields.length; i++) {
          this.headers[i]=CommonUtils.getRelativePigHeaderColumnName(fields[i]);
        }
        log.warn(""String_Node_Str"");
        log.warn(""String_Node_Str"");
      }
 else {
        log.warn(""String_Node_Str"");
        log.warn(""String_Node_Str"");
        log.warn(""String_Node_Str"");
        this.headers=new String[fields.length];
        for (int i=0; i < fields.length; i++) {
          this.headers[i]=i + ""String_Node_Str"";
        }
      }
    }
    Set<String> evalNamesSet=new HashSet<String>(Arrays.asList(this.headers));
    this.outputNames=new ArrayList<String>();
    if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName())) {
      outputNames.add(evalConfig.getDataSet().getTargetColumnName());
    }
 else {
      outputNames.add(modelConfig.getWeightColumnName());
    }
    if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
      outputNames.add(evalConfig.getDataSet().getWeightColumnName());
    }
 else {
      outputNames.add(SCHEMA_PREFIX + ""String_Node_Str"");
    }
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        if (!evalNamesSet.contains(columnConfig.getColumnName())) {
          log.error(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
        }
 else {
          outputNames.add(columnConfig.getColumnName());
        }
      }
    }
  }
 else {
    log.error(""String_Node_Str"");
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.7195696032279758
31901,"/** 
 * Add model(Classification) schema into tuple schema, if the modelCount > 0
 * @param tupleSchema  - schema for Tuple
 * @param modelCount - model count
 * @param modelName - model name
 */
private void addModelTagSchema(Schema tupleSchema,Integer modelCount,String modelName){
  for (int i=0; i < modelCount; i++) {
    for (int j=0; j < modelConfig.getTags().size(); j++) {
      tupleSchema.add(new FieldSchema(SCHEMA_PREFIX + addModelNameToField(modelName,""String_Node_Str"" + i + ""String_Node_Str""+ j),DataType.INTEGER));
    }
  }
}","/** 
 * Add model(Classification) schema into tuple schema, if the modelCount > 0
 * @param tupleSchema - schema for Tuple
 * @param modelCount - model count
 * @param modelName - model name
 */
private void addModelTagSchema(Schema tupleSchema,Integer modelCount,String modelName){
  for (int i=0; i < modelCount; i++) {
    for (int j=0; j < modelConfig.getTags().size(); j++) {
      tupleSchema.add(new FieldSchema(SCHEMA_PREFIX + addModelNameToField(modelName,""String_Node_Str"" + i + ""String_Node_Str""+ j),DataType.INTEGER));
    }
  }
}",0.9990783410138248
31902,"public EvalScoreUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName,String scale) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (evalConfig.getModelsPath() != null) {
    this.columnConfigList=ShifuFileUtils.searchColumnConfig(evalConfig,columnConfigList);
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    this.headers=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
  }
 else {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      this.headers=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        this.headers[i]=CommonUtils.getRelativePigHeaderColumnName(fields[i]);
      }
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      this.headers=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        this.headers[i]=i + ""String_Node_Str"";
      }
    }
  }
  this.modelCnt=CommonUtils.getBasicModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
  this.subModelsCnt=CommonUtils.getSubModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
  this.scale=scale;
}","public EvalScoreUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName,String scale) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (evalConfig.getModelsPath() != null) {
    this.columnConfigList=ShifuFileUtils.searchColumnConfig(evalConfig,columnConfigList);
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    this.headers=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),delimiter,evalConfig.getDataSet().getSource());
  }
 else {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      this.headers=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        this.headers[i]=CommonUtils.getRelativePigHeaderColumnName(fields[i]);
      }
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      this.headers=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        this.headers[i]=i + ""String_Node_Str"";
      }
    }
  }
  this.modelCnt=CommonUtils.getBasicModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
  this.subModelsCnt=CommonUtils.getSubModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
  this.scale=scale;
}",0.9288506645817044
31903,"protected void runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
 else       if (isKFoldCV) {
        LOG.info(""String_Node_Str"",i);
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      boolean isContinous=checkContinuousTraining(fileSystem,localArgs,modelPath);
      if (isContinous && CommonConstants.RF_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
        isContinous=false;
        LOG.warn(""String_Node_Str"");
      }
      if (gs.hasHyperParam() || isKFoldCV) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      if (gs.hasHyperParam() || isKFoldCV) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
}","protected int runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  int status=0;
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
 else       if (isKFoldCV) {
        LOG.info(""String_Node_Str"",i);
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      boolean isContinous=checkContinuousTraining(fileSystem,localArgs,modelPath);
      if (isContinous && CommonConstants.RF_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
        isContinous=false;
        LOG.warn(""String_Node_Str"");
      }
      if (gs.hasHyperParam() || isKFoldCV) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      if (gs.hasHyperParam() || isKFoldCV) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
          status=1;
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
  if (status != 0) {
    LOG.error(""String_Node_Str"");
  }
  return status;
}",0.9940704569236136
31904,"public List<Integer> submitTasksAndRetryIfFail(List<Callable<Integer>> tasks,int maxRetryTimes){
  List<Integer> results=new ArrayList<Integer>(tasks.size());
  int[] taskLeftTryTimes=new int[tasks.size()];
  Arrays.fill(taskLeftTryTimes,maxRetryTimes);
  List<TaskFuture> taskFutures=new ArrayList<TaskFuture>();
  for (int i=0; i < tasks.size(); i++) {
    Callable<Integer> task=tasks.get(i);
    Future<Integer> future=executorService.submit(task);
    taskFutures.add(new TaskFuture(i,future));
  }
  int size=taskFutures.size();
  int i=0;
  while (i < size) {
    TaskFuture tf=taskFutures.get(i);
    try {
      Integer res=tf.getFuture().get();
      if (res == null || res != 0) {
        if (!retryTask(tf,tasks,taskFutures,taskLeftTryTimes,maxRetryTimes)) {
          results.set(tf.getTaskId(),res);
        }
      }
 else {
        results.set(tf.getTaskId(),res);
      }
    }
 catch (    InterruptedException e) {
    }
catch (    ExecutionException e) {
      if (!retryTask(tf,tasks,taskFutures,taskLeftTryTimes,maxRetryTimes)) {
        results.set(tf.getTaskId(),1);
      }
    }
    i++;
    size=taskFutures.size();
  }
  return results;
}","public List<Integer> submitTasksAndRetryIfFail(List<Callable<Integer>> tasks,int maxRetryTimes){
  List<Integer> results=new ArrayList<Integer>(tasks.size());
  int[] taskLeftTryTimes=new int[tasks.size()];
  Arrays.fill(taskLeftTryTimes,maxRetryTimes);
  List<TaskFuture> taskFutures=new ArrayList<TaskFuture>();
  for (int i=0; i < tasks.size(); i++) {
    Callable<Integer> task=tasks.get(i);
    Future<Integer> future=executorService.submit(task);
    taskFutures.add(new TaskFuture(i,future));
    results.add(null);
  }
  int size=taskFutures.size();
  int i=0;
  while (i < size) {
    TaskFuture tf=taskFutures.get(i);
    try {
      Integer res=tf.getFuture().get();
      if (res == null || res != 0) {
        if (!retryTask(tf,tasks,taskFutures,taskLeftTryTimes,maxRetryTimes)) {
          results.set(tf.getTaskId(),res);
        }
      }
 else {
        results.set(tf.getTaskId(),res);
      }
    }
 catch (    InterruptedException e) {
    }
catch (    ExecutionException e) {
      if (!retryTask(tf,tasks,taskFutures,taskLeftTryTimes,maxRetryTimes)) {
        results.set(tf.getTaskId(),1);
      }
    }
    i++;
    size=taskFutures.size();
  }
  return results;
}",0.9902252443688908
31905,"/** 
 * initialize the columnConfig file
 * @throws IOException
 */
private int initColumnConfigList() throws IOException {
  String[] fields=null;
  boolean isSchemaProvided=true;
  if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
    fields=CommonUtils.getHeaders(modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
    String[] dataInFirstLine=CommonUtils.takeFirstLine(modelConfig.getDataSetRawPath(),modelConfig.getDataSetDelimiter(),modelConfig.getDataSet().getSource());
    if (fields.length != dataInFirstLine.length) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else {
    fields=CommonUtils.takeFirstLine(modelConfig.getDataSetRawPath(),StringUtils.isBlank(modelConfig.getHeaderDelimiter()) ? modelConfig.getDataSetDelimiter() : modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      isSchemaProvided=true;
      String[] dataInFirstLine=CommonUtils.takeFirstTwoLines(modelConfig.getDataSetRawPath(),StringUtils.isBlank(modelConfig.getHeaderDelimiter()) ? modelConfig.getDataSetDelimiter() : modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource())[1];
      if (dataInFirstLine != null && fields.length != dataInFirstLine.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      isSchemaProvided=false;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
  }
  columnConfigList=new ArrayList<ColumnConfig>();
  for (int i=0; i < fields.length; i++) {
    ColumnConfig config=new ColumnConfig();
    config.setColumnNum(i);
    if (isSchemaProvided) {
      config.setColumnName(CommonUtils.getRelativePigHeaderColumnName(fields[i]));
    }
 else {
      config.setColumnName(i + ""String_Node_Str"");
    }
    columnConfigList.add(config);
  }
  CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
  boolean hasTarget=false;
  for (  ColumnConfig config : columnConfigList) {
    if (config.isTarget()) {
      hasTarget=true;
    }
  }
  if (!hasTarget) {
    log.error(""String_Node_Str"" + modelConfig.getTargetColumnName());
    if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
      log.error(""String_Node_Str"",modelConfig.getDataSetRawPath());
    }
 else {
      log.error(""String_Node_Str"",modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter());
    }
    return 1;
  }
  return 0;
}","/** 
 * initialize the columnConfig file
 * @throws IOException
 */
private int initColumnConfigList() throws IOException {
  String[] fields=null;
  boolean isSchemaProvided=true;
  if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
    fields=CommonUtils.getHeaders(modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
    String[] dataInFirstLine=CommonUtils.takeFirstLine(modelConfig.getDataSetRawPath(),modelConfig.getDataSetDelimiter(),modelConfig.getDataSet().getSource());
    if (fields.length != dataInFirstLine.length) {
      throw new IllegalArgumentException(""String_Node_Str"" + fields.length + ""String_Node_Str""+ dataInFirstLine.length+ ""String_Node_Str"");
    }
  }
 else {
    fields=CommonUtils.takeFirstLine(modelConfig.getDataSetRawPath(),StringUtils.isBlank(modelConfig.getHeaderDelimiter()) ? modelConfig.getDataSetDelimiter() : modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      isSchemaProvided=true;
      String[] dataInFirstLine=CommonUtils.takeFirstTwoLines(modelConfig.getDataSetRawPath(),StringUtils.isBlank(modelConfig.getHeaderDelimiter()) ? modelConfig.getDataSetDelimiter() : modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource())[1];
      if (dataInFirstLine != null && fields.length != dataInFirstLine.length) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      isSchemaProvided=false;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
  }
  columnConfigList=new ArrayList<ColumnConfig>();
  for (int i=0; i < fields.length; i++) {
    ColumnConfig config=new ColumnConfig();
    config.setColumnNum(i);
    if (isSchemaProvided) {
      config.setColumnName(CommonUtils.getRelativePigHeaderColumnName(fields[i]));
    }
 else {
      config.setColumnName(i + ""String_Node_Str"");
    }
    columnConfigList.add(config);
  }
  CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
  boolean hasTarget=false;
  for (  ColumnConfig config : columnConfigList) {
    if (config.isTarget()) {
      hasTarget=true;
    }
  }
  if (!hasTarget) {
    log.error(""String_Node_Str"" + modelConfig.getTargetColumnName());
    if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
      log.error(""String_Node_Str"",modelConfig.getDataSetRawPath());
    }
 else {
      log.error(""String_Node_Str"",modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter());
    }
    return 1;
  }
  return 0;
}",0.9851865741608852
31906,"/** 
 * Get buffered reader with <code>  {@link Constants#DEFAULT_CHARSET}</code> for specified file <p/> !!! Warning: reader instance should be closed by caller.
 * @param path - file path
 * @param sourceType - local/hdfs
 * @throws IOException - if any I/O exception in processing
 * @return buffered reader with <code>{@link Constants#DEFAULT_CHARSET}</code>
 */
public static BufferedReader getReader(String path,SourceType sourceType) throws IOException {
  try {
    return new BufferedReader(new InputStreamReader(getFileSystemBySourceType(sourceType).open(new Path(path)),Constants.DEFAULT_CHARSET));
  }
 catch (  IOException e) {
    if (e.getMessage() != null) {
      if (e.getMessage().toLowerCase().indexOf(""String_Node_Str"") >= 0) {
        if (sourceType == SourceType.HDFS) {
          return new BufferedReader(new InputStreamReader(HDFSUtils.renewFS().open(new Path(path)),Constants.DEFAULT_CHARSET));
        }
      }
    }
    throw e;
  }
}","/** 
 * Get buffered reader with <code>  {@link Constants#DEFAULT_CHARSET}</code> for specified file <p/> !!! Warning: reader instance should be closed by caller.
 * @param path - file path
 * @param sourceType - local/hdfs
 * @throws IOException - if any I/O exception in processing
 * @return buffered reader with <code>{@link Constants#DEFAULT_CHARSET}</code>
 */
public static BufferedReader getReader(String path,SourceType sourceType) throws IOException {
  try {
    return new BufferedReader(new InputStreamReader(getCompressInputStream(getFileSystemBySourceType(sourceType).open(new Path(path)),new Path(path)),Constants.DEFAULT_CHARSET));
  }
 catch (  IOException e) {
    if (e.getMessage() != null) {
      if (e.getMessage().toLowerCase().indexOf(""String_Node_Str"") >= 0) {
        if (sourceType == SourceType.HDFS) {
          return new BufferedReader(new InputStreamReader(HDFSUtils.renewFS().open(new Path(path)),Constants.DEFAULT_CHARSET));
        }
      }
    }
    throw e;
  }
}",0.9801728520589732
31907,"/** 
 * Return first line split string array. This is used to detect data schema.
 */
public static String[] takeFirstLine(String dataSetRawPath,String delimeter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimeter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  if (ShifuFileUtils.isDir(dataSetRawPath,source)) {
    FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
    FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
    if (globStatus == null || globStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
    }
 else {
      FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
      if (listStatus == null || listStatus.length == 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
      }
      firstValidFile=listStatus[0].getPath().toString();
    }
  }
 else {
    firstValidFile=dataSetRawPath;
  }
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimeter).split(firstLine)) {
        list.add(unit);
      }
      return list.toArray(new String[0]);
    }
  }
  finally {
    IOUtils.closeQuietly(reader);
  }
  return new String[0];
}","/** 
 * Return first line split string array. This is used to detect data schema.
 */
public static String[] takeFirstLine(String dataSetRawPath,String delimeter,SourceType source) throws IOException {
  if (dataSetRawPath == null || delimeter == null || source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String firstValidFile=null;
  if (ShifuFileUtils.isDir(dataSetRawPath,source)) {
    FileSystem fs=ShifuFileUtils.getFileSystemBySourceType(source);
    FileStatus[] globStatus=fs.globStatus(new Path(dataSetRawPath),HIDDEN_FILE_FILTER);
    if (globStatus == null || globStatus.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + dataSetRawPath);
    }
 else {
      FileStatus[] listStatus=fs.listStatus(globStatus[0].getPath(),HIDDEN_FILE_FILTER);
      if (listStatus == null || listStatus.length == 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + globStatus[0].getPath());
      }
      firstValidFile=listStatus[0].getPath().toString();
    }
  }
 else {
    firstValidFile=dataSetRawPath;
  }
  log.info(""String_Node_Str"",firstValidFile);
  BufferedReader reader=null;
  try {
    reader=ShifuFileUtils.getReader(firstValidFile,source);
    String firstLine=reader.readLine();
    log.debug(""String_Node_Str"",firstLine);
    if (firstLine != null && firstLine.length() > 0) {
      List<String> list=new ArrayList<String>();
      for (      String unit : Splitter.on(delimeter).split(firstLine)) {
        list.add(unit);
      }
      return list.toArray(new String[0]);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
  return new String[0];
}",0.9528475199020208
31908,"@Override public DTMasterParams doCompute(MasterContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return buildInitialMasterParams();
  }
  if (this.cpMasterParams != null) {
    DTMasterParams tmpMasterParams=rebuildRecoverMasterResultDepthList();
    this.cpMasterParams=null;
    if (this.isGBDT) {
      tmpMasterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
      tmpMasterParams.setTmpTrees(this.trees);
    }
    return tmpMasterParams;
  }
  boolean isFirst=false;
  Map<Integer,NodeStats> nodeStatsMap=null;
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  for (  DTWorkerParams params : context.getWorkerResults()) {
    if (!isFirst) {
      isFirst=true;
      nodeStatsMap=params.getNodeStatsMap();
    }
 else {
      Map<Integer,NodeStats> currNodeStatsmap=params.getNodeStatsMap();
      for (      Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
        NodeStats resultNodeStats=entry.getValue();
        mergeNodeStats(resultNodeStats,currNodeStatsmap.get(entry.getKey()));
      }
    }
    trainError+=params.getTrainError();
    validationError+=params.getValidationError();
    weightedTrainCount+=params.getTrainCount();
    weightedValidationCount+=params.getValidationCount();
  }
  for (  Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
    NodeStats nodeStats=entry.getValue();
    int treeId=nodeStats.getTreeId();
    Node doneNode=Node.getNode(trees.get(treeId).getNode(),nodeStats.getNodeId());
    Map<Integer,double[]> statistics=nodeStats.getFeatureStatistics();
    List<GainInfo> gainList=new ArrayList<GainInfo>();
    for (    Entry<Integer,double[]> gainEntry : statistics.entrySet()) {
      int columnNum=gainEntry.getKey();
      ColumnConfig config=this.columnConfigList.get(columnNum);
      double[] statsArray=gainEntry.getValue();
      GainInfo gainInfo=this.impurity.computeImpurity(statsArray,config);
      if (gainInfo != null) {
        gainList.add(gainInfo);
      }
    }
    GainInfo maxGainInfo=GainInfo.getGainInfoByMaxGain(gainList);
    if (maxGainInfo == null) {
      doneNode.setLeaf(true);
      continue;
    }
    populateGainInfoToNode(treeId,doneNode,maxGainInfo);
    if (this.isLeafWise) {
      boolean isNotSplit=maxGainInfo.getGain() <= 0d;
      if (!isNotSplit) {
        this.toSplitQueue.offer(new TreeNode(treeId,doneNode));
      }
 else {
        LOG.info(""String_Node_Str"",doneNode.getId(),treeId);
      }
    }
 else {
      boolean isLeaf=maxGainInfo.getGain() <= 0d || Node.indexToLevel(doneNode.getId()) == this.maxDepth;
      doneNode.setLeaf(isLeaf);
      splitNodeForLevelWisedTree(isLeaf,treeId,doneNode);
    }
  }
  if (this.isLeafWise) {
    int currSplitIndex=0;
    while (!toSplitQueue.isEmpty() && currSplitIndex < this.maxBatchSplitSize) {
      TreeNode treeNode=this.toSplitQueue.poll();
      splitNodeForLeafWisedTree(treeNode.getTreeId(),treeNode.getNode());
    }
  }
  Map<Integer,TreeNode> todoNodes=new HashMap<Integer,TreeNode>();
  double averageValidationError=validationError;
  if (this.dtEarlyStopDecider != null) {
    this.dtEarlyStopDecider.add(validationError);
    averageValidationError=this.dtEarlyStopDecider.getCurrentAverageValue();
  }
  DTMasterParams masterParams=new DTMasterParams(weightedTrainCount,trainError,weightedValidationCount,averageValidationError);
  if (toDoQueue.isEmpty()) {
    if (this.isGBDT) {
      TreeNode treeNode=this.trees.get(this.trees.size() - 1);
      Node node=treeNode.getNode();
      if (this.trees.size() == this.treeNum + this.existingTreeSize) {
        masterParams.setHalt(true);
        LOG.info(""String_Node_Str"",context.getCurrentIteration());
      }
 else       if (node.getLeft() == null && node.getRight() == null) {
        masterParams.setHalt(true);
        LOG.warn(""String_Node_Str"",context.getCurrentIteration());
      }
 else       if (this.dtEarlyStopDecider != null && this.dtEarlyStopDecider.canStop()) {
        masterParams.setHalt(true);
        LOG.info(""String_Node_Str"",context.getCurrentIteration());
      }
 else {
        masterParams.setFirstTree(this.trees.size() == 1);
        treeNode.setFeatures(null);
        TreeNode newRootNode=new TreeNode(this.trees.size(),new Node(Node.ROOT_INDEX),this.learningRate);
        LOG.info(""String_Node_Str"",this.trees.size());
        this.trees.add(newRootNode);
        newRootNode.setFeatures(getSubsamplingFeatures(this.featureSubsetStrategy,this.featureSubsetRate));
        todoNodes.put(0,newRootNode);
        masterParams.setTodoNodes(todoNodes);
        masterParams.setSwitchToNextTree(true);
      }
    }
 else {
      masterParams.setHalt(true);
      LOG.info(""String_Node_Str"",context.getCurrentIteration());
    }
  }
 else {
    int nodeIndexInGroup=0;
    long currMem=0L;
    List<Integer> depthList=new ArrayList<Integer>();
    if (this.isGBDT) {
      depthList.add(-1);
    }
    if (isRF) {
      for (int i=0; i < this.trees.size(); i++) {
        depthList.add(-1);
      }
    }
    while (!toDoQueue.isEmpty() && currMem <= this.maxStatsMemory) {
      TreeNode node=this.toDoQueue.poll();
      int treeId=node.getTreeId();
      int oldDepth=this.isGBDT ? depthList.get(0) : depthList.get(treeId);
      int currDepth=Node.indexToLevel(node.getNode().getId());
      if (currDepth > oldDepth) {
        if (this.isGBDT) {
          depthList.set(0,currDepth);
        }
 else {
          depthList.set(treeId,currDepth);
        }
      }
      List<Integer> subsetFeatures=getSubsamplingFeatures(this.featureSubsetStrategy,this.featureSubsetRate);
      node.setFeatures(subsetFeatures);
      currMem+=getStatsMem(subsetFeatures);
      todoNodes.put(nodeIndexInGroup,node);
      nodeIndexInGroup+=1;
    }
    masterParams.setTreeDepth(depthList);
    masterParams.setTodoNodes(todoNodes);
    masterParams.setSwitchToNextTree(false);
    masterParams.setContinuousRunningStart(false);
    masterParams.setFirstTree(this.trees.size() == 1);
    LOG.info(""String_Node_Str"",todoNodes.size());
  }
  if (this.isGBDT) {
    if (masterParams.isSwitchToNextTree()) {
      masterParams.setTrees(trees.subList(trees.size() - 2,trees.size()));
    }
 else {
      masterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
    }
  }
  if (this.isRF) {
    if (masterParams.getTreeDepth().size() == this.trees.size()) {
      List<TreeNode> todoTrees=new ArrayList<TreeNode>();
      for (int i=0; i < trees.size(); i++) {
        if (masterParams.getTreeDepth().get(i) >= 0) {
          todoTrees.add(trees.get(i));
        }
 else {
          todoTrees.add(new TreeNode(i,new Node(Node.INVALID_INDEX),1d));
        }
      }
      masterParams.setTrees(todoTrees);
    }
 else {
      masterParams.setTrees(trees);
    }
  }
  if (this.isGBDT) {
    masterParams.setTmpTrees(this.trees);
  }
  doCheckPoint(context,masterParams);
  LOG.info(""String_Node_Str"",weightedTrainCount,weightedValidationCount,trainError,validationError);
  return masterParams;
}","@Override public DTMasterParams doCompute(MasterContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return buildInitialMasterParams();
  }
  if (this.cpMasterParams != null) {
    DTMasterParams tmpMasterParams=rebuildRecoverMasterResultDepthList();
    this.cpMasterParams=null;
    if (this.isGBDT) {
      tmpMasterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
      tmpMasterParams.setTmpTrees(this.trees);
    }
    return tmpMasterParams;
  }
  boolean isFirst=false;
  Map<Integer,NodeStats> nodeStatsMap=null;
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  for (  DTWorkerParams params : context.getWorkerResults()) {
    if (!isFirst) {
      isFirst=true;
      nodeStatsMap=params.getNodeStatsMap();
    }
 else {
      Map<Integer,NodeStats> currNodeStatsmap=params.getNodeStatsMap();
      for (      Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
        NodeStats resultNodeStats=entry.getValue();
        mergeNodeStats(resultNodeStats,currNodeStatsmap.get(entry.getKey()));
      }
    }
    trainError+=params.getTrainError();
    validationError+=params.getValidationError();
    weightedTrainCount+=params.getTrainCount();
    weightedValidationCount+=params.getValidationCount();
  }
  for (  Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
    NodeStats nodeStats=entry.getValue();
    int treeId=nodeStats.getTreeId();
    Node doneNode=Node.getNode(trees.get(treeId).getNode(),nodeStats.getNodeId());
    Map<Integer,double[]> statistics=nodeStats.getFeatureStatistics();
    List<GainInfo> gainList=new ArrayList<GainInfo>();
    for (    Entry<Integer,double[]> gainEntry : statistics.entrySet()) {
      int columnNum=gainEntry.getKey();
      ColumnConfig config=this.columnConfigList.get(columnNum);
      double[] statsArray=gainEntry.getValue();
      GainInfo gainInfo=this.impurity.computeImpurity(statsArray,config);
      if (gainInfo != null) {
        gainList.add(gainInfo);
      }
    }
    GainInfo maxGainInfo=GainInfo.getGainInfoByMaxGain(gainList);
    if (maxGainInfo == null) {
      doneNode.setLeaf(true);
      continue;
    }
    populateGainInfoToNode(treeId,doneNode,maxGainInfo);
    if (this.isLeafWise) {
      boolean isNotSplit=maxGainInfo.getGain() <= 0d;
      if (!isNotSplit) {
        this.toSplitQueue.offer(new TreeNode(treeId,doneNode));
      }
 else {
        LOG.info(""String_Node_Str"",doneNode.getId(),treeId);
      }
    }
 else {
      boolean isLeaf=maxGainInfo.getGain() <= 0d || Node.indexToLevel(doneNode.getId()) == this.maxDepth;
      doneNode.setLeaf(isLeaf);
      splitNodeForLevelWisedTree(isLeaf,treeId,doneNode);
    }
  }
  if (this.isLeafWise) {
    int currSplitIndex=0;
    while (!toSplitQueue.isEmpty() && currSplitIndex < this.maxBatchSplitSize) {
      TreeNode treeNode=this.toSplitQueue.poll();
      splitNodeForLeafWisedTree(treeNode.getTreeId(),treeNode.getNode());
    }
  }
  Map<Integer,TreeNode> todoNodes=new HashMap<Integer,TreeNode>();
  double averageValidationError=validationError;
  if (this.isGBDT && this.dtEarlyStopDecider != null) {
    this.dtEarlyStopDecider.add(validationError);
    averageValidationError=this.dtEarlyStopDecider.getCurrentAverageValue();
  }
  DTMasterParams masterParams=new DTMasterParams(weightedTrainCount,trainError,weightedValidationCount,averageValidationError);
  if (toDoQueue.isEmpty()) {
    if (this.isGBDT) {
      TreeNode treeNode=this.trees.get(this.trees.size() - 1);
      Node node=treeNode.getNode();
      if (this.trees.size() == this.treeNum + this.existingTreeSize) {
        masterParams.setHalt(true);
        LOG.info(""String_Node_Str"",context.getCurrentIteration());
      }
 else       if (node.getLeft() == null && node.getRight() == null) {
        masterParams.setHalt(true);
        LOG.warn(""String_Node_Str"",context.getCurrentIteration());
      }
 else       if (this.dtEarlyStopDecider != null && (this.enableEarlyStop && this.dtEarlyStopDecider.canStop())) {
        masterParams.setHalt(true);
        LOG.info(""String_Node_Str"",context.getCurrentIteration());
      }
 else {
        masterParams.setFirstTree(this.trees.size() == 1);
        treeNode.setFeatures(null);
        TreeNode newRootNode=new TreeNode(this.trees.size(),new Node(Node.ROOT_INDEX),this.learningRate);
        LOG.info(""String_Node_Str"",this.trees.size());
        this.trees.add(newRootNode);
        newRootNode.setFeatures(getSubsamplingFeatures(this.featureSubsetStrategy,this.featureSubsetRate));
        todoNodes.put(0,newRootNode);
        masterParams.setTodoNodes(todoNodes);
        masterParams.setSwitchToNextTree(true);
      }
    }
 else {
      masterParams.setHalt(true);
      LOG.info(""String_Node_Str"",context.getCurrentIteration());
    }
  }
 else {
    int nodeIndexInGroup=0;
    long currMem=0L;
    List<Integer> depthList=new ArrayList<Integer>();
    if (this.isGBDT) {
      depthList.add(-1);
    }
    if (isRF) {
      for (int i=0; i < this.trees.size(); i++) {
        depthList.add(-1);
      }
    }
    while (!toDoQueue.isEmpty() && currMem <= this.maxStatsMemory) {
      TreeNode node=this.toDoQueue.poll();
      int treeId=node.getTreeId();
      int oldDepth=this.isGBDT ? depthList.get(0) : depthList.get(treeId);
      int currDepth=Node.indexToLevel(node.getNode().getId());
      if (currDepth > oldDepth) {
        if (this.isGBDT) {
          depthList.set(0,currDepth);
        }
 else {
          depthList.set(treeId,currDepth);
        }
      }
      List<Integer> subsetFeatures=getSubsamplingFeatures(this.featureSubsetStrategy,this.featureSubsetRate);
      node.setFeatures(subsetFeatures);
      currMem+=getStatsMem(subsetFeatures);
      todoNodes.put(nodeIndexInGroup,node);
      nodeIndexInGroup+=1;
    }
    masterParams.setTreeDepth(depthList);
    masterParams.setTodoNodes(todoNodes);
    masterParams.setSwitchToNextTree(false);
    masterParams.setContinuousRunningStart(false);
    masterParams.setFirstTree(this.trees.size() == 1);
    LOG.info(""String_Node_Str"",todoNodes.size());
  }
  if (this.isGBDT) {
    if (masterParams.isSwitchToNextTree()) {
      masterParams.setTrees(trees.subList(trees.size() - 2,trees.size()));
    }
 else {
      masterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
    }
  }
  if (this.isRF) {
    if (masterParams.getTreeDepth().size() == this.trees.size()) {
      List<TreeNode> todoTrees=new ArrayList<TreeNode>();
      for (int i=0; i < trees.size(); i++) {
        if (masterParams.getTreeDepth().get(i) >= 0) {
          todoTrees.add(trees.get(i));
        }
 else {
          todoTrees.add(new TreeNode(i,new Node(Node.INVALID_INDEX),1d));
        }
      }
      masterParams.setTrees(todoTrees);
    }
 else {
      masterParams.setTrees(trees);
    }
  }
  if (this.isGBDT) {
    masterParams.setTmpTrees(this.trees);
  }
  doCheckPoint(context,masterParams);
  LOG.info(""String_Node_Str"",weightedTrainCount,weightedValidationCount,trainError,validationError);
  return masterParams;
}",0.9494393907340808
31909,"protected void runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  if (modelConfig.getTrain().getNumKFold() > 0) {
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      boolean isContinous=checkContinuousTraining(fileSystem,localArgs,modelPath);
      if (isContinous && CommonConstants.RF_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
        isContinous=false;
        LOG.warn(""String_Node_Str"");
      }
      if (gs.hasHyperParam()) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      if (gs.hasHyperParam()) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
}","protected void runDistributedTrain() throws IOException, InterruptedException, ClassNotFoundException {
  LOG.info(""String_Node_Str"",isDryTrain ? ""String_Node_Str"" : ""String_Node_Str"");
  Configuration conf=new Configuration();
  SourceType sourceType=super.getModelConfig().getDataSet().getSource();
  final List<String> args=new ArrayList<String>();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  prepareCommonParams(gs.hasHyperParam(),args,sourceType);
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  FileSystem fileSystem=ShifuFileUtils.getFileSystemBySourceType(sourceType);
  Path tmpModelsPath=fileSystem.makeQualified(new Path(super.getPathFinder().getPathBySourceType(new Path(Constants.TMP,Constants.DEFAULT_MODELS_TMP_FOLDER),sourceType)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TMP_MODELS_FOLDER,tmpModelsPath.toString()));
  int baggingNum=isForVarSelect ? 1 : super.getModelConfig().getBaggingNum();
  if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
    baggingNum=modelConfig.getTags().size();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  boolean isKFoldCV=false;
  if (modelConfig.getTrain().getNumKFold() > 0) {
    isKFoldCV=ture;
    baggingNum=modelConfig.getTrain().getNumKFold();
    if (baggingNum != super.getModelConfig().getBaggingNum()) {
      LOG.warn(""String_Node_Str"",baggingNum);
    }
  }
  long start=System.currentTimeMillis();
  LOG.info(""String_Node_Str"",baggingNum);
  boolean isParallel=Boolean.valueOf(Environment.getProperty(Constants.SHIFU_DTRAIN_PARALLEL,SHIFU_DEFAULT_DTRAIN_PARALLEL)).booleanValue();
  GuaguaMapReduceClient guaguaClient;
  if (modelConfig.getNormalize().getIsParquet()) {
    guaguaClient=new GuaguaParquetMapReduceClient();
    RequiredFieldList requiredFieldList=new RequiredFieldList();
    int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
    int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
    int candidateCount=inputOutputIndex[2];
    for (    ColumnConfig columnConfig : super.columnConfigList) {
      if (columnConfig.isTarget()) {
        requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
      }
 else {
        if (inputNodeCount == candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
 else {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            requiredFieldList.add(new RequiredField(columnConfig.getColumnName(),columnConfig.getColumnNum(),null,DataType.FLOAT));
          }
        }
      }
    }
    requiredFieldList.add(new RequiredField(""String_Node_Str"",columnConfigList.size(),null,DataType.DOUBLE));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",serializeRequiredFieldList(requiredFieldList)));
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",""String_Node_Str""));
  }
 else {
    guaguaClient=new GuaguaMapReduceClient();
  }
  int parallelNum=Integer.parseInt(Environment.getProperty(CommonConstants.SHIFU_TRAIN_BAGGING_INPARALLEL,""String_Node_Str""));
  int parallelGroups=1;
  if (gs.hasHyperParam()) {
    parallelGroups=(gs.getFlattenParams().size() % parallelNum == 0 ? gs.getFlattenParams().size() / parallelNum : gs.getFlattenParams().size() / parallelNum + 1);
  }
 else {
    parallelGroups=baggingNum % parallelNum == 0 ? baggingNum / parallelNum : baggingNum / parallelNum + 1;
  }
  List<String> progressLogList=new ArrayList<String>(baggingNum);
  boolean isOneJobNotContinuous=false;
  for (int j=0; j < parallelGroups; j++) {
    int currBags=baggingNum;
    if (gs.hasHyperParam()) {
      if (j == parallelGroups - 1) {
        currBags=gs.getFlattenParams().size() % parallelNum == 0 ? parallelNum : gs.getFlattenParams().size() % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
 else {
      if (j == parallelGroups - 1) {
        currBags=baggingNum % parallelNum == 0 ? parallelNum : baggingNum % parallelNum;
      }
 else {
        currBags=parallelNum;
      }
    }
    for (int k=0; k < currBags; k++) {
      int i=j * parallelNum + k;
      if (gs.hasHyperParam()) {
        LOG.info(""String_Node_Str"",i,gs.getParams(i));
      }
 else       if (isKFoldCV) {
        LOG.info(""String_Node_Str"");
      }
      List<String> localArgs=new ArrayList<String>(args);
      localArgs.add(""String_Node_Str"");
      localArgs.add(String.format(""String_Node_Str"",alg,super.getModelConfig().getModelSetName(),i));
      LOG.info(""String_Node_Str"",i);
      String modelName=getModelName(i);
      Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
      boolean isContinous=checkContinuousTraining(fileSystem,localArgs,modelPath);
      if (isContinous && CommonConstants.RF_ALG_NAME.equalsIgnoreCase(modelConfig.getAlgorithm())) {
        isContinous=false;
        LOG.warn(""String_Node_Str"");
      }
      if (gs.hasHyperParam() || isKFoldCV) {
        isContinous=false;
      }
      if (!isContinous && !isOneJobNotContinuous) {
        isOneJobNotContinuous=true;
        String srcModelPath=super.getPathFinder().getModelsPath(sourceType);
        String mvModelPath=srcModelPath + ""String_Node_Str"" + System.currentTimeMillis();
        LOG.info(""String_Node_Str"",mvModelPath);
        fileSystem.rename(new Path(srcModelPath),new Path(mvModelPath));
        fileSystem.mkdirs(new Path(srcModelPath));
        FileSystem.getLocal(conf).delete(new Path(super.getPathFinder().getModelsPath(SourceType.LOCAL)),true);
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GUAGUA_OUTPUT,modelPath.toString()));
      if (gs.hasHyperParam() || isKFoldCV) {
        Path valErrPath=fileSystem.makeQualified(new Path(super.getPathFinder().getValErrorPath(sourceType),""String_Node_Str"" + i));
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.GS_VALIDATION_ERROR,valErrPath.toString()));
      }
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_TRAINER_ID,String.valueOf(i)));
      final String progressLogFile=getProgressLogFile(i);
      progressLogList.add(progressLogFile);
      localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE,progressLogFile));
      String hdpVersion=HDPUtils.getHdpVersionForHDP224();
      if (StringUtils.isNotBlank(hdpVersion)) {
        localArgs.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",hdpVersion));
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
        HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
      }
      if (isParallel) {
        guaguaClient.addJob(localArgs.toArray(new String[0]));
      }
 else {
        TailThread tailThread=startTailThread(new String[]{progressLogFile});
        guaguaClient.createJob(localArgs.toArray(new String[0])).waitForCompletion(true);
        stopTailThread(tailThread);
      }
    }
    if (isParallel) {
      TailThread tailThread=startTailThread(progressLogList.toArray(new String[0]));
      guaguaClient.run();
      stopTailThread(tailThread);
    }
  }
  boolean isKFoldCV=false;
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  if (isKFoldCV) {
    List<Double> valErrs=readAllValidationErrors(sourceType,fileSystem,kCrossValidation);
    double sum=0d;
    for (    Double err : valErrs) {
      sum+=err;
    }
    LOG.info(""String_Node_Str"",sum / valErrs.size());
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else   if (gs.hasHyperParam()) {
    LOG.info(""String_Node_Str"",modelConfig.getParams());
    Map<String,Object> params=findBestParams(sourceType,fileSystem,gs);
    for (    Entry<String,Object> entry : params.entrySet()) {
      modelConfig.getParams().put(entry.getKey(),entry.getValue());
    }
    super.pathFinder.getModelConfigPath(SourceType.LOCAL);
    JSONUtils.writeValue(new File(super.pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
  }
 else {
    if (!gs.hasHyperParam()) {
      for (int i=0; i < baggingNum; i++) {
        String modelName=getModelName(i);
        Path modelPath=fileSystem.makeQualified(new Path(super.getPathFinder().getModelsPath(sourceType),modelName));
        if (ShifuFileUtils.getFileSystemBySourceType(sourceType).exists(modelPath)) {
          copyModelToLocal(modelName,modelPath,sourceType);
        }
 else {
          LOG.warn(""String_Node_Str"",modelPath.toString());
        }
      }
      boolean copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      if (CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm())) {
        copyTmpModelsToLocal=Boolean.TRUE.toString().equalsIgnoreCase(Environment.getProperty(Constants.SHIFU_TMPMODEL_COPYTOLOCAL,""String_Node_Str""));
      }
      if (copyTmpModelsToLocal) {
        copyTmpModelsToLocal(tmpModelsPath,sourceType);
      }
 else {
        LOG.info(""String_Node_Str"",tmpModelsPath);
      }
      LOG.info(""String_Node_Str"",System.currentTimeMillis() - start);
    }
  }
}",0.9694637413164076
31910,"public PMML build(BasicML basicML){
  PMML pmml=new PMML();
  Header header=new Header();
  pmml.setHeader(header);
  header.setCopyright(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  Application application=new Application();
  header.setApplication(application);
  application.setName(""String_Node_Str"");
  String findContainingJar=JarManager.findContainingJar(TreeEnsemblePMMLTranslator.class);
  JarFile jar=null;
  try {
    jar=new JarFile(findContainingJar);
    final Manifest manifest=jar.getManifest();
    String vendor=manifest.getMainAttributes().getValue(""String_Node_Str"");
    String version=manifest.getMainAttributes().getValue(""String_Node_Str"");
    application.setVersion(version);
  }
 catch (  Exception e) {
    LOG.warn(e.getMessage());
  }
 finally {
    if (jar != null) {
      try {
        jar.close();
      }
 catch (      IOException e) {
        LOG.warn(e.getMessage());
      }
    }
  }
  pmml.setDataDictionary(this.dataDictionaryCreator.build());
  Model model=this.modelCreator.build();
  model.setMiningSchema(this.miningSchemaCreator.build());
  model.setModelStats(this.modelStatsCreator.build());
  model.setLocalTransformations(this.localTransformationsCreator.build());
  this.specifCreator.build(basicML,model);
  pmml.withModels(model);
  return pmml;
}","public PMML build(BasicML basicML){
  PMML pmml=new PMML();
  Header header=new Header();
  pmml.setHeader(header);
  header.setCopyright(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  Application application=new Application();
  header.setApplication(application);
  application.setName(""String_Node_Str"");
  String findContainingJar=JarManager.findContainingJar(TreeEnsemblePMMLTranslator.class);
  JarFile jar=null;
  try {
    jar=new JarFile(findContainingJar);
    final Manifest manifest=jar.getManifest();
    String version=manifest.getMainAttributes().getValue(""String_Node_Str"");
    application.setVersion(version);
  }
 catch (  Exception e) {
    LOG.warn(e.getMessage());
  }
 finally {
    if (jar != null) {
      try {
        jar.close();
      }
 catch (      IOException e) {
        LOG.warn(e.getMessage());
      }
    }
  }
  pmml.setDataDictionary(this.dataDictionaryCreator.build());
  Model model=this.modelCreator.build();
  model.setMiningSchema(this.miningSchemaCreator.build());
  model.setModelStats(this.modelStatsCreator.build());
  model.setLocalTransformations(this.localTransformationsCreator.build());
  this.specifCreator.build(basicML,model);
  pmml.withModels(model);
  return pmml;
}",0.974132062627638
31911,"private void prepareCommonParams(boolean isGsMode,final List<String> args,final SourceType sourceType){
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  args.add(""String_Node_Str"");
  addRuntimeJars(args);
  args.add(""String_Node_Str"");
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedDataPath())).toString());
  }
 else {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedDataPath())).toString());
  }
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    args.add(""String_Node_Str"");
    args.add(ShifuInputFormat.class.getName());
  }
  String zkServers=Environment.getProperty(Environment.ZOO_KEEPER_SERVERS);
  if (StringUtils.isEmpty(zkServers)) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    args.add(""String_Node_Str"");
    args.add(zkServers);
  }
  if (LogisticRegressionContants.LR_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareLRParams(args,sourceType);
  }
 else   if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareNNParams(args,sourceType);
  }
 else   if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    this.prepareDTParams(args,sourceType);
  }
  args.add(""String_Node_Str"");
  int numTrainEpoches=super.getModelConfig().getTrain().getNumTrainEpochs();
  if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg) && (this.isForVarSelect() || isGsMode) && numTrainEpoches >= VAR_SELECT_TRAINING_DECAY_EPOCHES_THRESHOLD) {
    numTrainEpoches=numTrainEpoches / 2;
  }
  if (CommonUtils.isDesicionTreeAlgorithm(alg) || numTrainEpoches <= 20000) {
    numTrainEpoches=20000;
  }
  numTrainEpoches=numTrainEpoches + 1;
  args.add(String.valueOf(numTrainEpoches));
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedValidationDataPath(sourceType))).toString()));
  }
 else {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedValidationDataPath(sourceType))).toString()));
  }
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,Constants.DEFAULT_JOB_QUEUE)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getModelConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.MODELSET_SOURCE_TYPE,sourceType));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DRY_DTRAIN,isDryTrain()));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.NN_POISON_SAMPLER,Environment.getProperty(NNConstants.NN_POISON_SAMPLER,""String_Node_Str"")));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,GuaguaConstants.GUAGUA_COMPUTATION_TIME_THRESHOLD,60 * 1000L));
  setHeapSizeAndSplitSize(args);
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",modelConfig.getTrain().getWorkerThreadCount() == null ? 1 : modelConfig.getTrain().getWorkerThreadCount()));
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,entry.getKey().toString(),entry.getValue().toString()));
    }
  }
}","private void prepareCommonParams(boolean isGsMode,final List<String> args,final SourceType sourceType){
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  args.add(""String_Node_Str"");
  addRuntimeJars(args);
  args.add(""String_Node_Str"");
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedDataPath())).toString());
  }
 else {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedDataPath())).toString());
  }
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    args.add(""String_Node_Str"");
    args.add(ShifuInputFormat.class.getName());
  }
  String zkServers=Environment.getProperty(Environment.ZOO_KEEPER_SERVERS);
  if (StringUtils.isEmpty(zkServers)) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    args.add(""String_Node_Str"");
    args.add(zkServers);
  }
  if (LogisticRegressionContants.LR_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareLRParams(args,sourceType);
  }
 else   if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareNNParams(args,sourceType);
  }
 else   if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    this.prepareDTParams(args,sourceType);
  }
  args.add(""String_Node_Str"");
  int numTrainEpoches=super.getModelConfig().getTrain().getNumTrainEpochs();
  if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg) && (this.isForVarSelect() || isGsMode) && numTrainEpoches >= VAR_SELECT_TRAINING_DECAY_EPOCHES_THRESHOLD) {
    numTrainEpoches=numTrainEpoches / 2;
  }
  if (CommonUtils.isDesicionTreeAlgorithm(alg) && numTrainEpoches <= 20000) {
    numTrainEpoches=20000;
  }
  numTrainEpoches=numTrainEpoches + 1;
  args.add(String.valueOf(numTrainEpoches));
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedValidationDataPath(sourceType))).toString()));
  }
 else {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedValidationDataPath(sourceType))).toString()));
  }
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,Constants.DEFAULT_JOB_QUEUE)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getModelConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.MODELSET_SOURCE_TYPE,sourceType));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DRY_DTRAIN,isDryTrain()));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.NN_POISON_SAMPLER,Environment.getProperty(NNConstants.NN_POISON_SAMPLER,""String_Node_Str"")));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,GuaguaConstants.GUAGUA_COMPUTATION_TIME_THRESHOLD,60 * 1000L));
  setHeapSizeAndSplitSize(args);
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",modelConfig.getTrain().getWorkerThreadCount() == null ? 1 : modelConfig.getTrain().getWorkerThreadCount()));
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,entry.getKey().toString(),entry.getValue().toString()));
    }
  }
}",0.9995144452537024
31912,"private List<Integer> sampleFeaturesForNodeStats(List<Integer> allFeatures,int sample){
  List<Integer> features=new ArrayList<Integer>(sample);
  for (int i=0; i < sample; i++) {
    features.add(allFeatures.get(i));
  }
  Random random=new Random();
  for (int i=sample; i < allFeatures.size(); i++) {
    int replacementIndex=(int)(random.nextDouble() * i);
    if (replacementIndex >= 0 && replacementIndex < sample) {
      features.set(replacementIndex,allFeatures.get(i));
    }
  }
  return features;
}","private List<Integer> sampleFeaturesForNodeStats(List<Integer> allFeatures,int sample){
  List<Integer> features=new ArrayList<Integer>(sample);
  for (int i=0; i < sample; i++) {
    features.add(allFeatures.get(i));
  }
  for (int i=sample; i < allFeatures.size(); i++) {
    int replacementIndex=(int)(featureSamplingRandom.nextDouble() * i);
    if (replacementIndex >= 0 && replacementIndex < sample) {
      features.set(replacementIndex,allFeatures.get(i));
    }
  }
  return features;
}",0.9532338308457712
31913,"private long getStatsMem(List<Integer> subsetFeatures){
  long statsMem=0L;
  List<Integer> tempFeatures=subsetFeatures;
  if (subsetFeatures.size() == 0) {
    tempFeatures=getAllValidFeatures();
  }
  for (  Integer columnNum : tempFeatures) {
    ColumnConfig config=this.columnConfigList.get(columnNum);
    if (config.isNumerical()) {
      statsMem+=config.getBinBoundary().size() * this.impurity.getStatsSize() * 8L* 2;
    }
 else     if (config.isCategorical()) {
      statsMem+=(config.getBinCategory().size() + 1) * this.impurity.getStatsSize() * 8L* 2;
    }
  }
  statsMem=statsMem * this.workerNumber / 2;
  return statsMem;
}","private long getStatsMem(List<Integer> subsetFeatures){
  long statsMem=0L;
  List<Integer> tempFeatures=subsetFeatures;
  if (subsetFeatures.size() == 0) {
    tempFeatures=getAllFeatureList(this.columnConfigList,this.isAfterVarSelect);
  }
  for (  Integer columnNum : tempFeatures) {
    ColumnConfig config=this.columnConfigList.get(columnNum);
    if (config.isNumerical()) {
      statsMem+=config.getBinBoundary().size() * this.impurity.getStatsSize() * 8L* 2;
    }
 else     if (config.isCategorical()) {
      statsMem+=(config.getBinCategory().size() + 1) * this.impurity.getStatsSize() * 8L* 2;
    }
  }
  statsMem=statsMem * this.workerNumber / 2;
  return statsMem;
}",0.9508692365835224
31914,"/** 
 * 'binBoundary' is ArrayList in fact, so we can use get method. [""-Infinity"", 1d, 4d, ....]
 */
public static int getBinIndex(float value,List<Double> binBoundary){
  if (binBoundary.size() <= 1) {
    throw new IllegalArgumentException();
  }
  if (value == Float.POSITIVE_INFINITY) {
    return binBoundary.size() - 1;
  }
  if (value == Float.NEGATIVE_INFINITY) {
    return 0;
  }
  int low=0, high=binBoundary.size() - 1;
  while (low <= high) {
    int mid=(low + high) >>> 1;
    double lowThreshold=binBoundary.get(mid);
    double highThreshold=mid == binBoundary.size() - 1 ? Double.MAX_VALUE : binBoundary.get(mid + 1);
    if (value >= lowThreshold && value < highThreshold) {
      return mid;
    }
    if (value >= highThreshold) {
      low=mid + 1;
    }
 else {
      high=mid - 1;
    }
  }
  return -1;
}","/** 
 * 'binBoundary' is ArrayList in fact, so we can use get method. [""-Infinity"", 1d, 4d, ....]
 */
public static int getBinIndex(float value,List<Double> binBoundary){
  if (binBoundary.size() <= 1) {
    return 0;
  }
  if (value == Float.POSITIVE_INFINITY) {
    return binBoundary.size() - 1;
  }
  if (value == Float.NEGATIVE_INFINITY) {
    return 0;
  }
  int low=0, high=binBoundary.size() - 1;
  while (low <= high) {
    int mid=(low + high) >>> 1;
    double lowThreshold=binBoundary.get(mid);
    double highThreshold=mid == binBoundary.size() - 1 ? Double.MAX_VALUE : binBoundary.get(mid + 1);
    if (value >= lowThreshold && value < highThreshold) {
      return mid;
    }
    if (value >= highThreshold) {
      low=mid + 1;
    }
 else {
      high=mid - 1;
    }
  }
  return -1;
}",0.9730392156862744
31915,"/** 
 * For RF/GBT model, no need do normalizing, but clean and filter data is needed. Before real training, we have to clean and filter data.
 */
private void checkAndCleanDataForTreeModels() throws IOException {
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  if (!CommonUtils.isDesicionTreeAlgorithm(alg)) {
    return;
  }
  for (  ColumnConfig columnConfig : columnConfigList) {
    if (columnConfig.isFinalSelect() && !columnConfig.isTarget() && !columnConfig.isMeta()) {
      if (columnConfig.isNumerical() && columnConfig.getBinBoundary() == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
      }
      if (columnConfig.isNumerical() && columnConfig.getBinBoundary().size() <= 1) {
        LOG.warn(""String_Node_Str"");
      }
      if (columnConfig.isCategorical() && columnConfig.getBinCategory() == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
      }
      if (columnConfig.isCategorical() && columnConfig.getBinCategory().size() <= 0) {
        LOG.warn(""String_Node_Str"");
      }
    }
  }
  SourceType sourceType=modelConfig.getDataSet().getSource();
  String cleanedDataPath=super.pathFinder.getCleanedDataPath();
  String needReGen=Environment.getProperty(""String_Node_Str"",Boolean.FALSE.toString());
  if (Boolean.TRUE.toString().equalsIgnoreCase(needReGen) || !ShifuFileUtils.isFileExists(cleanedDataPath,sourceType) || (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath()) && !ShifuFileUtils.isFileExists(pathFinder.getCleanedValidationDataPath(),sourceType))) {
    LOG.info(""String_Node_Str"");
    if (ShifuFileUtils.isFileExists(cleanedDataPath,sourceType)) {
      ShifuFileUtils.deleteFile(cleanedDataPath,sourceType);
    }
    String cleandedValidationDataPath=pathFinder.getCleanedValidationDataPath();
    if (ShifuFileUtils.isFileExists(cleandedValidationDataPath,sourceType)) {
      ShifuFileUtils.deleteFile(cleandedValidationDataPath,sourceType);
    }
    Map<String,String> paramsMap=new HashMap<String,String>();
    paramsMap.put(""String_Node_Str"",modelConfig.getNormalizeSampleRate().toString());
    paramsMap.put(""String_Node_Str"",((Boolean)modelConfig.isNormalizeSampleNegOnly()).toString());
    paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
    try {
      String normPigPath=pathFinder.getScriptPath(""String_Node_Str"");
      paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
      paramsMap.put(Constants.IS_NORM_FOR_CLEAN,""String_Node_Str"");
      paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getCleanedDataPath());
      PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,sourceType,super.pathFinder);
      if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
        paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
        paramsMap.put(Constants.PATH_RAW_DATA,modelConfig.getValidationDataSetRawPath());
        paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getCleanedValidationDataPath());
        PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,sourceType,super.pathFinder);
      }
    }
 catch (    IOException e) {
      throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
    }
catch (    Throwable e) {
      throw new RuntimeException(e);
    }
    LOG.info(""String_Node_Str"");
  }
 else {
    LOG.warn(""String_Node_Str"",cleanedDataPath);
    LOG.warn(""String_Node_Str"");
  }
}","/** 
 * For RF/GBT model, no need do normalizing, but clean and filter data is needed. Before real training, we have to clean and filter data.
 */
private void checkAndCleanDataForTreeModels() throws IOException {
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  if (!CommonUtils.isDesicionTreeAlgorithm(alg)) {
    return;
  }
  for (  ColumnConfig columnConfig : columnConfigList) {
    if (columnConfig.isFinalSelect() && !columnConfig.isTarget() && !columnConfig.isMeta()) {
      if (columnConfig.isNumerical() && columnConfig.getBinBoundary() == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
      }
      if (columnConfig.isNumerical() && columnConfig.getBinBoundary().size() <= 1) {
        LOG.warn(""String_Node_Str"",columnConfig.getColumnNum(),columnConfig.getColumnName());
      }
      if (columnConfig.isCategorical() && columnConfig.getBinCategory() == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + columnConfig.getColumnName() + ""String_Node_Str"");
      }
      if (columnConfig.isCategorical() && columnConfig.getBinCategory().size() <= 0) {
        LOG.warn(""String_Node_Str"",columnConfig.getColumnNum(),columnConfig.getColumnName());
      }
    }
  }
  SourceType sourceType=modelConfig.getDataSet().getSource();
  String cleanedDataPath=super.pathFinder.getCleanedDataPath();
  String needReGen=Environment.getProperty(""String_Node_Str"",Boolean.FALSE.toString());
  if (Boolean.TRUE.toString().equalsIgnoreCase(needReGen) || !ShifuFileUtils.isFileExists(cleanedDataPath,sourceType) || (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath()) && !ShifuFileUtils.isFileExists(pathFinder.getCleanedValidationDataPath(),sourceType))) {
    LOG.info(""String_Node_Str"");
    if (ShifuFileUtils.isFileExists(cleanedDataPath,sourceType)) {
      ShifuFileUtils.deleteFile(cleanedDataPath,sourceType);
    }
    String cleandedValidationDataPath=pathFinder.getCleanedValidationDataPath();
    if (ShifuFileUtils.isFileExists(cleandedValidationDataPath,sourceType)) {
      ShifuFileUtils.deleteFile(cleandedValidationDataPath,sourceType);
    }
    Map<String,String> paramsMap=new HashMap<String,String>();
    paramsMap.put(""String_Node_Str"",modelConfig.getNormalizeSampleRate().toString());
    paramsMap.put(""String_Node_Str"",((Boolean)modelConfig.isNormalizeSampleNegOnly()).toString());
    paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
    try {
      String normPigPath=pathFinder.getScriptPath(""String_Node_Str"");
      paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
      paramsMap.put(Constants.IS_NORM_FOR_CLEAN,""String_Node_Str"");
      paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getCleanedDataPath());
      PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,sourceType,super.pathFinder);
      if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
        paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
        paramsMap.put(Constants.PATH_RAW_DATA,modelConfig.getValidationDataSetRawPath());
        paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getCleanedValidationDataPath());
        PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,sourceType,super.pathFinder);
      }
    }
 catch (    IOException e) {
      throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
    }
catch (    Throwable e) {
      throw new RuntimeException(e);
    }
    LOG.info(""String_Node_Str"");
  }
 else {
    LOG.warn(""String_Node_Str"",cleanedDataPath);
    LOG.warn(""String_Node_Str"");
  }
}",0.9843320505772404
31916,"private void postProcess4SEVarSelect(SourceType source,String varSelectMSEOutputPath) throws IOException {
  String outputFilePattern=varSelectMSEOutputPath + Path.SEPARATOR + ""String_Node_Str"";
  if (!ShifuFileUtils.isFileExists(outputFilePattern,source)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int selectCnt=0;
  for (  ColumnConfig config : super.columnConfigList) {
    if (config.isFinalSelect()) {
      config.setFinalSelect(false);
    }
    if (config.isForceSelect()) {
      config.setFinalSelect(true);
      selectCnt++;
      log.info(""String_Node_Str"",config.getColumnName());
    }
  }
  List<Scanner> scanners=null;
  try {
    FileStatus[] globStatus=ShifuFileUtils.getFileSystemBySourceType(source).globStatus(new Path(outputFilePattern));
    if (globStatus == null || globStatus.length == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    scanners=ShifuFileUtils.getDataScanners(globStatus[0].getPath().toString(),source);
    String str=null;
    int targetCnt=0;
    List<Integer> candidateColumnIdList=new ArrayList<Integer>();
    Scanner scanner=scanners.get(0);
    while (scanner.hasNext()) {
      ++targetCnt;
      str=scanner.nextLine().trim();
      candidateColumnIdList.add(Integer.parseInt(str));
    }
    int i=0;
    while (selectCnt < targetCnt && i < targetCnt) {
      Integer columnId=candidateColumnIdList.get(i++);
      ColumnConfig columnConfig=this.columnConfigList.get(columnId);
      if (!columnConfig.isForceSelect() && !columnConfig.isForceRemove()) {
        columnConfig.setFinalSelect(true);
        selectCnt++;
        log.info(""String_Node_Str"",columnConfig.getColumnName());
      }
    }
    log.info(""String_Node_Str"",selectCnt);
    log.info(""String_Node_Str"",varSelectMSEOutputPath,Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME);
  }
  finally {
    if (scanners != null) {
      for (      Scanner scanner : scanners) {
        if (scanner != null) {
          scanner.close();
        }
      }
    }
  }
}","private void postProcess4SEVarSelect(SourceType source,String varSelectMSEOutputPath) throws IOException {
  String outputFilePattern=varSelectMSEOutputPath + Path.SEPARATOR + ""String_Node_Str"";
  if (!ShifuFileUtils.isFileExists(outputFilePattern,source)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int selectCnt=0;
  for (  ColumnConfig config : super.columnConfigList) {
    if (config.isFinalSelect()) {
      config.setFinalSelect(false);
    }
    if (config.isForceSelect()) {
      config.setFinalSelect(true);
      selectCnt++;
      log.info(""String_Node_Str"",config.getColumnName());
    }
  }
  List<Scanner> scanners=null;
  try {
    FileStatus[] globStatus=ShifuFileUtils.getFileSystemBySourceType(source).globStatus(new Path(outputFilePattern));
    if (globStatus == null || globStatus.length == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    scanners=ShifuFileUtils.getDataScanners(globStatus[0].getPath().toString(),source);
    String str=null;
    int targetCnt=0;
    List<Integer> candidateColumnIdList=new ArrayList<Integer>();
    Scanner scanner=scanners.get(0);
    while (scanner.hasNext()) {
      ++targetCnt;
      str=scanner.nextLine().trim();
      candidateColumnIdList.add(Integer.parseInt(str));
    }
    int i=0;
    int candidateCount=candidateColumnIdList.size();
    while (selectCnt < targetCnt && i < targetCnt) {
      if (i >= candidateCount) {
        log.warn(""String_Node_Str"",candidateCount,targetCnt);
        break;
      }
      Integer columnId=candidateColumnIdList.get(i++);
      ColumnConfig columnConfig=this.columnConfigList.get(columnId);
      if (!columnConfig.isForceSelect() && !columnConfig.isForceRemove()) {
        columnConfig.setFinalSelect(true);
        selectCnt++;
        log.info(""String_Node_Str"",columnConfig.getColumnName());
      }
    }
    log.info(""String_Node_Str"",selectCnt);
    log.info(""String_Node_Str"",varSelectMSEOutputPath,Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME);
  }
  finally {
    if (scanners != null) {
      for (      Scanner scanner : scanners) {
        if (scanner != null) {
          scanner.close();
        }
      }
    }
  }
}",0.959100693613968
31917,"private void prepareSelect() throws Exception {
  setUp(ModelStep.VARSELECT);
  validateParameters();
  if (isToReset) {
    log.info(""String_Node_Str"");
    resetAllFinalSelect();
  }
  if (this.modelConfig.getVarSelectFilterNum() > 0) {
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      if (columnConfig.isFinalSelect()) {
        columnConfig.setFinalSelect(false);
      }
    }
  }
  syncDataToHdfs(super.modelConfig.getDataSet().getSource());
}","private void prepareSelect() throws Exception {
  setUp(ModelStep.VARSELECT);
  validateParameters();
  if (isToReset) {
    log.info(""String_Node_Str"");
    resetAllFinalSelect();
  }
  syncDataToHdfs(super.modelConfig.getDataSet().getSource());
}",0.5694444444444444
31918,"private void selectByFeatureImportance() throws Exception {
  List<BasicML> models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
  if (models == null || models.size() < 1) {
    TrainModelProcessor trainModelProcessor=new TrainModelProcessor();
    trainModelProcessor.setForVarSelect(true);
    trainModelProcessor.run();
  }
  List<Map<Integer,MutablePair<String,Double>>> importanceList=new ArrayList<Map<Integer,MutablePair<String,Double>>>();
  Map<Integer,MutablePair<String,Double>> mergedResult=null;
  for (  BasicML basicModel : models) {
    if (basicModel instanceof TreeModel) {
      TreeModel model=(TreeModel)basicModel;
      Map<Integer,MutablePair<String,Double>> importances=model.getFeatureImportances();
      importanceList.add(importances);
    }
  }
  if (importanceList.size() < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mergedResult=this.mergeImportanceList(importanceList);
  this.writeFeatureImportance(mergedResult);
  if (super.modelConfig.getVarSelect().getFilterEnable()) {
    this.postProcessFIVarSelect(mergedResult);
  }
}","private void selectByFeatureImportance() throws Exception {
  List<BasicML> models=null;
  if (!super.modelConfig.getVarSelect().getFilterEnable()) {
    models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
  }
  if (models == null || models.size() < 1) {
    TrainModelProcessor trainModelProcessor=new TrainModelProcessor();
    trainModelProcessor.setForVarSelect(true);
    trainModelProcessor.run();
    models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
  }
  List<Map<Integer,MutablePair<String,Double>>> importanceList=new ArrayList<Map<Integer,MutablePair<String,Double>>>();
  Map<Integer,MutablePair<String,Double>> mergedResult=null;
  for (  BasicML basicModel : models) {
    if (basicModel instanceof TreeModel) {
      TreeModel model=(TreeModel)basicModel;
      Map<Integer,MutablePair<String,Double>> importances=model.getFeatureImportances();
      importanceList.add(importances);
    }
  }
  if (importanceList.size() < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mergedResult=this.mergeImportanceList(importanceList);
  this.writeFeatureImportance(mergedResult);
  if (super.modelConfig.getVarSelect().getFilterEnable()) {
    this.postProcessFIVarSelect(mergedResult);
  }
}",0.9303295786399666
31919,"private void prepareSEJobConf(SourceType source,Configuration conf) throws IOException {
  new GenericOptionsParser(conf,new String[]{""String_Node_Str"",addRuntimeJars()});
  conf.setBoolean(CombineInputFormat.SHIFU_VS_SPLIT_COMBINABLE,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPRED_MAP_TASKS_SPECULATIVE_EXECUTION,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPRED_REDUCE_TASKS_SPECULATIVE_EXECUTION,true);
  conf.set(Constants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(source).makeQualified(new Path(super.getPathFinder().getModelConfigPath(source))).toString());
  conf.set(Constants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(source).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(source))).toString());
  conf.set(NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,""String_Node_Str""));
  conf.set(Constants.SHIFU_MODELSET_SOURCE_TYPE,source.toString());
  conf.setInt(GuaguaMapReduceConstants.MAPREDUCE_JOB_MAX_SPLIT_LOCATIONS,100);
  conf.setBoolean(CombineInputFormat.SHIFU_VS_SPLIT_COMBINABLE,false);
  conf.set(""String_Node_Str"",Environment.getProperty(""String_Node_Str"",""String_Node_Str""));
  Float filterOutRatio=this.modelConfig.getVarSelect().getFilterOutRatio();
  if (filterOutRatio == null) {
    log.warn(""String_Node_Str"");
    filterOutRatio=0.05f;
  }
  if (filterOutRatio.compareTo(Float.valueOf(1.0f)) >= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  conf.setFloat(Constants.SHIFU_VARSELECT_FILTEROUT_RATIO,filterOutRatio);
  String hdpVersion=HDPUtils.getHdpVersionForHDP224();
  if (StringUtils.isNotBlank(hdpVersion)) {
    conf.set(""String_Node_Str"",hdpVersion);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
  }
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      conf.set(entry.getKey().toString(),entry.getValue().toString());
    }
  }
}","private void prepareSEJobConf(SourceType source,Configuration conf) throws IOException {
  new GenericOptionsParser(conf,new String[]{""String_Node_Str"",addRuntimeJars()});
  conf.setBoolean(CombineInputFormat.SHIFU_VS_SPLIT_COMBINABLE,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPRED_MAP_TASKS_SPECULATIVE_EXECUTION,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPRED_REDUCE_TASKS_SPECULATIVE_EXECUTION,true);
  conf.set(Constants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(source).makeQualified(new Path(super.getPathFinder().getModelConfigPath(source))).toString());
  conf.set(Constants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(source).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(source))).toString());
  conf.set(NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,""String_Node_Str""));
  conf.set(Constants.SHIFU_MODELSET_SOURCE_TYPE,source.toString());
  conf.setInt(GuaguaMapReduceConstants.MAPREDUCE_JOB_MAX_SPLIT_LOCATIONS,100);
  conf.setBoolean(CombineInputFormat.SHIFU_VS_SPLIT_COMBINABLE,false);
  conf.set(""String_Node_Str"",Environment.getProperty(""String_Node_Str"",""String_Node_Str""));
  Float filterOutRatio=this.modelConfig.getVarSelect().getFilterOutRatio();
  if (filterOutRatio == null) {
    log.warn(""String_Node_Str"");
    filterOutRatio=0.05f;
  }
  if (filterOutRatio.compareTo(Float.valueOf(1.0f)) >= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  conf.setFloat(Constants.SHIFU_VARSELECT_FILTEROUT_RATIO,filterOutRatio);
  conf.setInt(Constants.SHIFU_VARSELECT_FILTER_NUM,this.modelConfig.getVarSelectFilterNum());
  String hdpVersion=HDPUtils.getHdpVersionForHDP224();
  if (StringUtils.isNotBlank(hdpVersion)) {
    conf.set(""String_Node_Str"",hdpVersion);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
  }
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      conf.set(entry.getKey().toString(),entry.getValue().toString());
    }
  }
}",0.98007630351844
31920,"@Override public void init(WorkerContext<NNParams,NNParams> context){
  this.props=context.getProps();
  loadConfigFiles(context.getProps());
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  this.validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    this.validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.poissonSampler=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(NNConstants.NN_POISON_SAMPLER));
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  Integer epochsPerIterationInteger=this.modelConfig.getTrain().getEpochsPerIteration();
  this.epochsPerIteration=epochsPerIterationInteger == null ? 1 : epochsPerIterationInteger.intValue();
  LOG.info(""String_Node_Str"",epochsPerIteration);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[1] : (modelConfig.getTrain().isOneVsAll() ? inputOutputIndex[1] : modelConfig.getTags().size());
  this.candidateCount=inputOutputIndex[2];
  this.isDry=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  this.isSpecificValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  if (isOnDisk()) {
    LOG.info(""String_Node_Str"");
    try {
      initDiskDataSet();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      @Override public void run(){
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
      }
    }
));
  }
 else {
    LOG.info(""String_Node_Str"");
    double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
    long memoryStoreSize=(long)(Runtime.getRuntime().maxMemory() * memoryFraction);
    LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
    double crossValidationRate=this.modelConfig.getValidSetRate();
    try {
      this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * (1 - crossValidationRate)),DTrainUtils.getTrainingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      this.validationData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * crossValidationRate),DTrainUtils.getTestingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
        }
      }
));
    }
 catch (    IOException e) {
      throw new GuaguaRuntimeException(e);
    }
  }
}","@Override public void init(WorkerContext<NNParams,NNParams> context){
  this.props=context.getProps();
  loadConfigFiles(context.getProps());
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  this.validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    this.validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
  if (kCrossValidation != null && kCrossValidation > 0) {
    isKFoldCV=true;
  }
  this.poissonSampler=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(NNConstants.NN_POISON_SAMPLER));
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  Integer epochsPerIterationInteger=this.modelConfig.getTrain().getEpochsPerIteration();
  this.epochsPerIteration=epochsPerIterationInteger == null ? 1 : epochsPerIterationInteger.intValue();
  LOG.info(""String_Node_Str"",epochsPerIteration);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[1] : (modelConfig.getTrain().isOneVsAll() ? inputOutputIndex[1] : modelConfig.getTags().size());
  this.candidateCount=inputOutputIndex[2];
  LOG.info(""String_Node_Str"",inputNodeCount,outputNodeCount,candidateCount);
  this.isDry=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  this.isSpecificValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  this.isStratifiedSampling=this.modelConfig.getTrain().getStratifiedSample();
  if (isOnDisk()) {
    LOG.info(""String_Node_Str"");
    try {
      initDiskDataSet();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      @Override public void run(){
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
      }
    }
));
  }
 else {
    LOG.info(""String_Node_Str"");
    double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
    long memoryStoreSize=(long)(Runtime.getRuntime().maxMemory() * memoryFraction);
    LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
    double crossValidationRate=this.modelConfig.getValidSetRate();
    try {
      this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * (1 - crossValidationRate)),DTrainUtils.getTrainingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      this.validationData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * crossValidationRate),DTrainUtils.getTestingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.validationData)).close();
        }
      }
));
    }
 catch (    IOException e) {
      throw new GuaguaRuntimeException(e);
    }
  }
}",0.9895960005404676
31921,"/** 
 * Run for the variable selection
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    prepareSelect();
    if (modelConfig.isRegression()) {
      VariableSelector selector=new VariableSelector(this.modelConfig,this.columnConfigList);
      String filterBy=this.modelConfig.getVarSelectFilterBy();
      if (filterBy.equalsIgnoreCase(Constants.FILTER_BY_KS) || filterBy.equalsIgnoreCase(Constants.FILTER_BY_IV) || filterBy.equalsIgnoreCase(Constants.FILTER_BY_PARETO)|| filterBy.equalsIgnoreCase(Constants.FILTER_BY_MIX)) {
        CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
        this.columnConfigList=selector.selectByFilter();
      }
 else       if (filterBy.equalsIgnoreCase(Constants.FILTER_BY_FI)) {
        selectByFeatureImportance();
      }
 else       if (filterBy.equalsIgnoreCase(Constants.FILTER_BY_SE) || filterBy.equalsIgnoreCase(Constants.FILTER_BY_ST)) {
        distributedSEWrapper();
      }
 else       if (filterBy.equalsIgnoreCase(Constants.FILTER_BY_VOTED)) {
        votedVariablesSelection();
      }
    }
 else {
      for (      ColumnConfig config : this.columnConfigList) {
        if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
          config.setFinalSelect(true);
        }
      }
    }
    clearUp(ModelStep.VARSELECT);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}","/** 
 * Run for the variable selection
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.VARSELECT);
    validateParameters();
    if (isToReset) {
      log.info(""String_Node_Str"");
      resetAllFinalSelect();
    }
 else {
      syncDataToHdfs(super.modelConfig.getDataSet().getSource());
      if (modelConfig.isRegression()) {
        VariableSelector selector=new VariableSelector(this.modelConfig,this.columnConfigList);
        String filterBy=this.modelConfig.getVarSelectFilterBy();
        if (filterBy.equalsIgnoreCase(Constants.FILTER_BY_KS) || filterBy.equalsIgnoreCase(Constants.FILTER_BY_IV) || filterBy.equalsIgnoreCase(Constants.FILTER_BY_PARETO)|| filterBy.equalsIgnoreCase(Constants.FILTER_BY_MIX)) {
          CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
          this.columnConfigList=selector.selectByFilter();
        }
 else         if (filterBy.equalsIgnoreCase(Constants.FILTER_BY_FI)) {
          if (!CommonUtils.isDesicionTreeAlgorithm(modelConfig.getAlgorithm())) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          selectByFeatureImportance();
        }
 else         if (filterBy.equalsIgnoreCase(Constants.FILTER_BY_SE) || filterBy.equalsIgnoreCase(Constants.FILTER_BY_ST)) {
          if (Constants.NN.equalsIgnoreCase(modelConfig.getAlgorithm())) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          distributedSEWrapper();
        }
 else         if (filterBy.equalsIgnoreCase(Constants.FILTER_BY_VOTED)) {
          votedVariablesSelection();
        }
      }
 else {
        for (        ColumnConfig config : this.columnConfigList) {
          if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
            config.setFinalSelect(true);
          }
        }
      }
    }
    clearUp(ModelStep.VARSELECT);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}",0.8214575995665131
31922,"/** 
 * Wrapper through   {@link TrainModelProcessor} and a MapReduce job to analyze biggest sensitivity RMS.
 */
private void distributedSEWrapper() throws Exception {
  TrainModelProcessor trainModelProcessor=new TrainModelProcessor();
  trainModelProcessor.setForVarSelect(true);
  trainModelProcessor.run();
  SourceType source=this.modelConfig.getDataSet().getSource();
  Configuration conf=new Configuration();
  prepareSEJobConf(source,conf);
  String varSelectMSEOutputPath=super.getPathFinder().getVarSelectMSEOutputPath(source);
  Job job=createSEMapReduceJob(source,conf,varSelectMSEOutputPath);
  ShifuFileUtils.deleteFile(varSelectMSEOutputPath,source);
  if (job.waitForCompletion(true)) {
    if (super.modelConfig.getVarSelect().getFilterEnable()) {
      postProcess4SEVarSelect(source,varSelectMSEOutputPath);
    }
 else {
      log.info(""String_Node_Str"");
    }
    log.info(""String_Node_Str"",varSelectMSEOutputPath,Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME);
  }
 else {
    log.error(""String_Node_Str"");
  }
}","/** 
 * Wrapper through   {@link TrainModelProcessor} and a MapReduce job to analyze biggest sensitivity RMS.
 */
private void distributedSEWrapper() throws Exception {
  TrainModelProcessor trainModelProcessor=new TrainModelProcessor();
  trainModelProcessor.setForVarSelect(true);
  trainModelProcessor.run();
  SourceType source=this.modelConfig.getDataSet().getSource();
  Configuration conf=new Configuration();
  prepareSEJobConf(source,conf);
  String varSelectMSEOutputPath=super.getPathFinder().getVarSelectMSEOutputPath(source);
  Job job=createSEMapReduceJob(source,conf,varSelectMSEOutputPath);
  ShifuFileUtils.deleteFile(varSelectMSEOutputPath,source);
  if (job.waitForCompletion(true)) {
    if (super.modelConfig.getVarSelect().getFilterEnable()) {
      postProcess4SEVarSelect(source,varSelectMSEOutputPath);
    }
 else {
      log.info(""String_Node_Str"");
      log.info(""String_Node_Str"",varSelectMSEOutputPath,Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME);
    }
  }
 else {
    log.error(""String_Node_Str"");
  }
}",0.99515503875969
31923,"/** 
 * To do some auto variable selection like remove ID-like variables, remove variable with high missing rate.
 */
private void autoVarSelCondition(){
  for (  ColumnConfig config : columnConfigList) {
    if (isHighMissingRateColumn(config) && !config.isForceSelect()) {
      log.warn(""String_Node_Str"",config.getColumnName());
      config.setFinalSelect(false);
      continue;
    }
  }
}","/** 
 * To do some auto variable selection like remove ID-like variables, remove variable with high missing rate.
 */
private void autoVarSelCondition(){
  for (  ColumnConfig config : columnConfigList) {
    if (!config.isTarget() && !config.isMeta() && !config.isForceSelect()&& config.isFinalSelect()&& isHighMissingRateColumn(config)) {
      log.warn(""String_Node_Str"",config.getColumnName());
      config.setFinalSelect(false);
    }
  }
}",0.838479809976247
31924,"@Override protected void clearUp(ModelStep step) throws IOException {
  autoVarSelCondition();
  try {
    this.saveColumnConfigListAndColumnStats(true);
  }
 catch (  Exception e) {
    throw new ShifuException(ShifuErrorCode.ERROR_WRITE_COLCONFIG,e);
  }
  this.syncDataToHdfs(this.modelConfig.getDataSet().getSource());
}","@Override protected void clearUp(ModelStep step) throws IOException {
  if (!isToReset) {
    autoVarSelCondition();
  }
  try {
    this.saveColumnConfigListAndColumnStats(true);
  }
 catch (  Exception e) {
    throw new ShifuException(ShifuErrorCode.ERROR_WRITE_COLCONFIG,e);
  }
  this.syncDataToHdfs(this.modelConfig.getDataSet().getSource());
}",0.9614243323442137
31925,"private void prepareSEJobConf(SourceType source,Configuration conf) throws IOException {
  new GenericOptionsParser(conf,new String[]{""String_Node_Str"",addRuntimeJars()});
  conf.setBoolean(CombineInputFormat.SHIFU_VS_SPLIT_COMBINABLE,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPRED_MAP_TASKS_SPECULATIVE_EXECUTION,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPRED_REDUCE_TASKS_SPECULATIVE_EXECUTION,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPREDUCE_MAP_SPECULATIVE,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPREDUCE_REDUCE_SPECULATIVE,true);
  conf.set(Constants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(source).makeQualified(new Path(super.getPathFinder().getModelConfigPath(source))).toString());
  conf.set(Constants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(source).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(source))).toString());
  conf.set(NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,""String_Node_Str""));
  conf.set(Constants.SHIFU_MODELSET_SOURCE_TYPE,source.toString());
  conf.setInt(GuaguaMapReduceConstants.MAPREDUCE_JOB_MAX_SPLIT_LOCATIONS,100);
  conf.setBoolean(CombineInputFormat.SHIFU_VS_SPLIT_COMBINABLE,false);
  conf.set(""String_Node_Str"",Environment.getProperty(""String_Node_Str"",""String_Node_Str""));
  Float filterOutRatio=this.modelConfig.getVarSelect().getFilterOutRatio();
  if (filterOutRatio == null) {
    log.warn(""String_Node_Str"");
    filterOutRatio=0.05f;
  }
  if (filterOutRatio.compareTo(Float.valueOf(1.0f)) >= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  conf.setFloat(Constants.SHIFU_VARSELECT_FILTEROUT_RATIO,filterOutRatio);
  conf.setInt(Constants.SHIFU_VARSELECT_FILTER_NUM,this.modelConfig.getVarSelectFilterNum());
  String hdpVersion=HDPUtils.getHdpVersionForHDP224();
  if (StringUtils.isNotBlank(hdpVersion)) {
    conf.set(""String_Node_Str"",hdpVersion);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
  }
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      conf.set(entry.getKey().toString(),entry.getValue().toString());
    }
  }
}","private void prepareSEJobConf(SourceType source,Configuration conf) throws IOException {
  new GenericOptionsParser(conf,new String[]{""String_Node_Str"",addRuntimeJars()});
  conf.setBoolean(GuaguaMapReduceConstants.MAPRED_MAP_TASKS_SPECULATIVE_EXECUTION,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPRED_REDUCE_TASKS_SPECULATIVE_EXECUTION,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPREDUCE_MAP_SPECULATIVE,true);
  conf.setBoolean(GuaguaMapReduceConstants.MAPREDUCE_REDUCE_SPECULATIVE,true);
  conf.set(Constants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(source).makeQualified(new Path(super.getPathFinder().getModelConfigPath(source))).toString());
  conf.set(Constants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(source).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(source))).toString());
  conf.set(NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,""String_Node_Str""));
  conf.set(Constants.SHIFU_MODELSET_SOURCE_TYPE,source.toString());
  conf.setInt(GuaguaMapReduceConstants.MAPREDUCE_JOB_MAX_SPLIT_LOCATIONS,100);
  conf.setBoolean(CombineInputFormat.SHIFU_VS_SPLIT_COMBINABLE,false);
  conf.set(""String_Node_Str"",Environment.getProperty(""String_Node_Str"",""String_Node_Str""));
  conf.set(Constants.SHIFU_VARSELECT_FILTEROUT_TYPE,modelConfig.getVarSelectFilterBy());
  Float filterOutRatio=this.modelConfig.getVarSelect().getFilterOutRatio();
  if (filterOutRatio == null) {
    log.warn(""String_Node_Str"");
    filterOutRatio=0.05f;
  }
  if (filterOutRatio.compareTo(Float.valueOf(1.0f)) >= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  conf.setFloat(Constants.SHIFU_VARSELECT_FILTEROUT_RATIO,filterOutRatio);
  conf.setInt(Constants.SHIFU_VARSELECT_FILTER_NUM,this.modelConfig.getVarSelectFilterNum());
  String hdpVersion=HDPUtils.getHdpVersionForHDP224();
  if (StringUtils.isNotBlank(hdpVersion)) {
    conf.set(""String_Node_Str"",hdpVersion);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
    HDPUtils.addFileToClassPath(HDPUtils.findContainingFile(""String_Node_Str""),conf);
  }
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      conf.set(entry.getKey().toString(),entry.getValue().toString());
    }
  }
}",0.5971600855864618
31926,"/** 
 * Write all column->MSE pairs to output.
 */
@Override protected void cleanup(Context context) throws IOException, InterruptedException {
  LOG.info(""String_Node_Str"",results.size());
  for (  Entry<Long,ColumnInfo> entry : results.entrySet()) {
    this.outputKey.set(entry.getKey());
    ColumnInfo columnInfo=entry.getValue();
    columnInfo.setCount(this.recordCount);
    context.write(this.outputKey,columnInfo);
  }
  LOG.info(""String_Node_Str"",results.size());
  this.executorManager.forceShutDown();
}","/** 
 * Write all column->MSE pairs to output.
 */
@Override protected void cleanup(Context context) throws IOException, InterruptedException {
  for (  Entry<Long,ColumnInfo> entry : results.entrySet()) {
    this.outputKey.set(entry.getKey());
    ColumnInfo columnInfo=entry.getValue();
    columnInfo.setCount(this.recordCount);
    context.write(this.outputKey,columnInfo);
  }
  LOG.debug(""String_Node_Str"",results);
}",0.3829787234042553
31927,"/** 
 * Do initialization like ModelConfig and ColumnConfig loading, model loading and others like input or output number loading.
 */
@Override protected void setup(Context context) throws IOException, InterruptedException {
  loadConfigFiles(context);
  loadModel();
  this.filterBy=context.getConfiguration().get(Constants.SHIFU_VARSELECT_FILTEROUT_TYPE,Constants.FILTER_BY_SE);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.candidateCount=inputOutputIndex[2];
  this.inputs=new double[this.inputNodeCount];
  this.outputs=new double[inputOutputIndex[1]];
  this.columnIndexes=new long[this.inputNodeCount];
  this.inputsMLData=new BasicMLData(this.inputNodeCount);
  this.outputKey=new LongWritable();
  this.executorManager=new ExecutorManager<SEColResult>();
}","/** 
 * Do initialization like ModelConfig and ColumnConfig loading, model loading and others like input or output number loading.
 */
@Override protected void setup(Context context) throws IOException, InterruptedException {
  loadConfigFiles(context);
  loadModel();
  this.filterBy=context.getConfiguration().get(Constants.SHIFU_VARSELECT_FILTEROUT_TYPE,Constants.FILTER_BY_SE);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.candidateCount=inputOutputIndex[2];
  this.inputs=new double[this.inputNodeCount];
  this.outputs=new double[inputOutputIndex[1]];
  this.columnIndexes=new long[this.inputNodeCount];
  this.inputsMLData=new BasicMLData(this.inputNodeCount);
  this.outputKey=new LongWritable();
  LOG.info(""String_Node_Str"",filterBy);
}",0.951693503609106
31928,"@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  recordCount+=1L;
  int index=0, inputsIndex=0, outputsIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(value.toString())) {
    double doubleValue=NumberFormatUtils.getDouble(input.trim(),0.0d);
    if (index == this.columnConfigList.size()) {
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        this.outputs[outputsIndex++]=doubleValue;
      }
 else {
        if (this.inputNodeCount == this.candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputs[inputsIndex]=doubleValue;
            columnIndexes[inputsIndex++]=columnConfig.getColumnNum();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputs[inputsIndex]=doubleValue;
            columnIndexes[inputsIndex++]=columnConfig.getColumnNum();
          }
        }
      }
    }
    index++;
  }
  double oldValue=0.0d;
  double candidateModelScore=0d;
  if (Constants.FILTER_BY_SE.equalsIgnoreCase(this.filterBy)) {
    candidateModelScore=this.model.compute(new BasicMLData(inputs)).getData()[0];
  }
  List<Callable<SEColResult>> tasks=new ArrayList<Callable<SEColResult>>();
  for (int i=0; i < this.inputs.length; i++) {
    oldValue=this.inputs[i];
    this.inputs[i]=0d;
    final double[] seInputs=new double[this.inputs.length];
    System.arraycopy(this.inputs,0,seInputs,0,this.inputs.length);
    final int columnId=i;
    Callable<SEColResult> task=new Callable<SEColResult>(){
      @Override public SEColResult call() throws Exception {
        SEColResult seColResult=new SEColResult();
        seColResult.setColumnId(columnId);
        seColResult.setScore(model.compute(new BasicMLData(seInputs)).getData()[0]);
        return seColResult;
      }
    }
;
    tasks.add(task);
    this.inputs[i]=oldValue;
  }
  List<SEColResult> results=this.executorManager.submitTasksAndWaitResults(tasks);
  for (  SEColResult seColResult : results) {
    double currentModelScore=seColResult.getScore();
    double diff=0d;
    if (Constants.FILTER_BY_ST.equalsIgnoreCase(this.filterBy)) {
      diff=this.outputs[0] - currentModelScore;
    }
 else {
      diff=candidateModelScore - currentModelScore;
    }
    ColumnInfo columnInfo=this.results.get(this.columnIndexes[seColResult.getColumnId()]);
    if (columnInfo == null) {
      columnInfo=new ColumnInfo();
      columnInfo.setSumScoreDiff(Math.abs(diff));
      columnInfo.setSumSquareScoreDiff(power2(diff));
    }
 else {
      columnInfo.setSumScoreDiff(columnInfo.getSumScoreDiff() + Math.abs(diff));
      columnInfo.setSumSquareScoreDiff(columnInfo.getSumSquareScoreDiff() + power2(diff));
    }
    this.results.put(this.columnIndexes[seColResult.getColumnId()],columnInfo);
  }
  if (this.recordCount % 1000 == 0) {
    LOG.info(""String_Node_Str"",this.recordCount);
  }
}","@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  recordCount+=1L;
  int index=0, inputsIndex=0, outputsIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(value.toString())) {
    double doubleValue=NumberFormatUtils.getDouble(input.trim(),0.0d);
    if (index == this.columnConfigList.size()) {
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        this.outputs[outputsIndex++]=doubleValue;
      }
 else {
        if (this.inputNodeCount == this.candidateCount) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            inputs[inputsIndex]=doubleValue;
            columnIndexes[inputsIndex++]=columnConfig.getColumnNum();
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            inputs[inputsIndex]=doubleValue;
            columnIndexes[inputsIndex++]=columnConfig.getColumnNum();
          }
        }
      }
    }
    index++;
  }
  double oldValue=0.0d;
  this.inputsMLData.setData(this.inputs);
  double candidateModelScore=0d;
  if (Constants.FILTER_BY_SE.equalsIgnoreCase(this.filterBy)) {
    candidateModelScore=this.model.compute(new BasicMLData(inputs)).getData()[0];
  }
  for (int i=0; i < this.inputs.length; i++) {
    oldValue=this.inputs[i];
    this.inputs[i]=0d;
    this.inputsMLData.setData(this.inputs);
    double currentModelScore=this.model.compute(new BasicMLData(inputs)).getData()[0];
    double diff=0d;
    if (Constants.FILTER_BY_ST.equalsIgnoreCase(this.filterBy)) {
      diff=this.outputs[0] - currentModelScore;
    }
 else {
      diff=candidateModelScore - currentModelScore;
    }
    ColumnInfo columnInfo=this.results.get(this.columnIndexes[i]);
    if (columnInfo == null) {
      columnInfo=new ColumnInfo();
      columnInfo.setSumScoreDiff(Math.abs(diff));
      columnInfo.setSumSquareScoreDiff(power2(diff));
    }
 else {
      columnInfo.setSumScoreDiff(columnInfo.getSumScoreDiff() + Math.abs(diff));
      columnInfo.setSumSquareScoreDiff(columnInfo.getSumSquareScoreDiff() + power2(diff));
    }
    this.results.put(this.columnIndexes[i],columnInfo);
    this.inputs[i]=oldValue;
  }
  if (this.recordCount % 1000 == 0) {
    LOG.info(""String_Node_Str"",this.recordCount);
  }
}",0.8229037404715476
31929,"@Override protected void cleanup(Context context) throws IOException, InterruptedException {
  Collections.sort(this.results,new Comparator<Pair>(){
    @Override public int compare(    Pair o1,    Pair o2){
      return Double.compare(o2.value.getRms(),o1.value.getRms());
    }
  }
);
  LOG.debug(""String_Node_Str"",this.results);
  int candidates=this.filterNum;
  if (candidates <= 0) {
    if (Constants.FILTER_BY_ST.equalsIgnoreCase(this.filterBy) || Constants.FILTER_BY_SE.equalsIgnoreCase(this.filterBy)) {
      candidates=(int)(this.inputNodeCount * (1.0f - this.filterOutRatio));
    }
 else {
      candidates=(int)(this.inputNodeCount * (this.filterOutRatio));
    }
  }
  for (int i=0; i < this.results.size(); i++) {
    Pair pair=this.results.get(i);
    this.outputKey.set(pair.key + ""String_Node_Str"");
    if (i < candidates) {
      context.write(this.outputKey,OUTPUT_VALUE);
    }
    StringBuilder sb=new StringBuilder(100);
    sb.append(this.columnConfigList.get((int)pair.key).getColumnName()).append(""String_Node_Str"").append(pair.value.getMean()).append(""String_Node_Str"").append(pair.value.getRms()).append(""String_Node_Str"").append(pair.value.getVariance());
    this.outputValue.set(sb.toString());
    this.mos.write(Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME,this.outputKey,this.outputValue);
  }
  this.mos.close();
}","@Override protected void cleanup(Context context) throws IOException, InterruptedException {
  Collections.sort(this.results,new Comparator<Pair>(){
    @Override public int compare(    Pair o1,    Pair o2){
      return Double.compare(o2.value.getRms(),o1.value.getRms());
    }
  }
);
  LOG.debug(""String_Node_Str"",this.results);
  int candidates=this.filterNum;
  if (candidates <= 0) {
    if (Constants.FILTER_BY_ST.equalsIgnoreCase(this.filterBy) || Constants.FILTER_BY_SE.equalsIgnoreCase(this.filterBy)) {
      candidates=(int)(this.inputNodeCount * (1.0f - this.filterOutRatio));
    }
 else {
      candidates=(int)(this.inputNodeCount * (this.filterOutRatio));
    }
  }
  LOG.info(""String_Node_Str"",candidates);
  for (int i=0; i < this.results.size(); i++) {
    Pair pair=this.results.get(i);
    this.outputKey.set(pair.key + ""String_Node_Str"");
    if (i < candidates) {
      context.write(this.outputKey,OUTPUT_VALUE);
    }
    StringBuilder sb=new StringBuilder(100);
    sb.append(this.columnConfigList.get((int)pair.key).getColumnName()).append(""String_Node_Str"").append(pair.value.getMean()).append(""String_Node_Str"").append(pair.value.getRms()).append(""String_Node_Str"").append(pair.value.getVariance());
    this.outputValue.set(sb.toString());
    this.mos.write(Constants.SHIFU_VARSELECT_SE_OUTPUT_NAME,this.outputKey,this.outputValue);
  }
  this.mos.close();
}",0.9846603360116872
31930,"/** 
 * Do initialization like ModelConfig and ColumnConfig loading.
 */
@Override protected void setup(Context context) throws IOException, InterruptedException {
  loadConfigFiles(context);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.filterOutRatio=context.getConfiguration().getFloat(Constants.SHIFU_VARSELECT_FILTEROUT_RATIO,Constants.SHIFU_DEFAULT_VARSELECT_FILTEROUT_RATIO);
  this.filterNum=context.getConfiguration().getInt(Constants.SHIFU_VARSELECT_FILTER_NUM,Constants.SHIFU_DEFAULT_VARSELECT_FILTER_NUM);
  this.outputKey=new Text();
  this.outputValue=new Text();
  this.filterBy=context.getConfiguration().get(Constants.SHIFU_VARSELECT_FILTEROUT_TYPE,Constants.FILTER_BY_SE);
  this.mos=new MultipleOutputs<Text,Text>(context);
}","/** 
 * Do initialization like ModelConfig and ColumnConfig loading.
 */
@Override protected void setup(Context context) throws IOException, InterruptedException {
  loadConfigFiles(context);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.filterOutRatio=context.getConfiguration().getFloat(Constants.SHIFU_VARSELECT_FILTEROUT_RATIO,Constants.SHIFU_DEFAULT_VARSELECT_FILTEROUT_RATIO);
  this.filterNum=context.getConfiguration().getInt(Constants.SHIFU_VARSELECT_FILTER_NUM,Constants.SHIFU_DEFAULT_VARSELECT_FILTER_NUM);
  this.outputKey=new Text();
  this.outputValue=new Text();
  this.filterBy=context.getConfiguration().get(Constants.SHIFU_VARSELECT_FILTEROUT_TYPE,Constants.FILTER_BY_SE);
  this.mos=new MultipleOutputs<Text,Text>(context);
  LOG.info(""String_Node_Str"",filterBy,filterOutRatio,filterNum);
}",0.9646931015752308
31931,"private void init(MasterContext<NNParams,NNParams> context){
  this.isDry=Boolean.TRUE.toString().equals(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  if (this.isDry) {
    return;
  }
  if (isInit.compareAndSet(false,true)) {
    loadConfigFiles(context.getProps());
    this.trainerId=context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID);
    this.tmpModelsFolder=context.getProps().getProperty(CommonConstants.SHIFU_TMP_MODELS_FOLDER);
    gridSearch=new GridSearch(modelConfig.getTrain().getParams());
    validParams=this.modelConfig.getTrain().getParams();
    if (gridSearch.hasHyperParam()) {
      validParams=gridSearch.getParams(Integer.parseInt(trainerId));
      LOG.info(""String_Node_Str"",validParams);
    }
    Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
    if (kCrossValidation != null && kCrossValidation > 0) {
      isKFoldCV=true;
    }
    initNetwork();
  }
  try {
    Path progressLog=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE));
    this.progressOutput=FileSystem.get(new Configuration()).create(progressLog);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","private void init(MasterContext<NNParams,NNParams> context){
  this.isDry=Boolean.TRUE.toString().equals(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  if (this.isDry) {
    return;
  }
  if (isInit.compareAndSet(false,true)) {
    loadConfigFiles(context.getProps());
    this.trainerId=context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID);
    this.tmpModelsFolder=context.getProps().getProperty(CommonConstants.SHIFU_TMP_MODELS_FOLDER);
    gridSearch=new GridSearch(modelConfig.getTrain().getParams());
    validParams=this.modelConfig.getTrain().getParams();
    if (gridSearch.hasHyperParam()) {
      validParams=gridSearch.getParams(Integer.parseInt(trainerId));
      LOG.info(""String_Node_Str"",validParams);
    }
    Integer kCrossValidation=this.modelConfig.getTrain().getNumKFold();
    if (kCrossValidation != null && kCrossValidation > 0) {
      isKFoldCV=true;
    }
    initNetwork();
  }
  try {
    Path progressLog=new Path(context.getProps().getProperty(CommonConstants.SHIFU_DTRAIN_PROGRESS_FILE));
    if (ShifuFileUtils.isFileExists(progressLog,SourceType.HDFS)) {
      this.progressOutput=FileSystem.get(new Configuration()).append(progressLog);
    }
 else {
      this.progressOutput=FileSystem.get(new Configuration()).create(progressLog);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.9285989965264376
31932,"/** 
 * According to SourceType to check whether file exists.
 * @param path - path of source file
 * @param sourceType - local/hdfs
 * @return - true if file exists, or false
 * @throws IOException - if any I/O exception in processing
 */
public static boolean isFileExists(String path,SourceType sourceType) throws IOException {
  FileSystem fs=getFileSystemBySourceType(sourceType);
  FileStatus[] fileStatusArr=fs.globStatus(new Path(path));
  return !(fileStatusArr == null || fileStatusArr.length == 0);
}","/** 
 * According to SourceType to check whether file exists.
 * @param path - @Path of source file
 * @param sourceType - local/hdfs
 * @return - true if file exists, or false
 * @throws IOException - if any I/O exception in processing
 */
public static boolean isFileExists(Path path,SourceType sourceType) throws IOException {
  FileSystem fs=getFileSystemBySourceType(sourceType);
  FileStatus[] fileStatusArr=fs.globStatus(path);
  return !(fileStatusArr == null || fileStatusArr.length == 0);
}",0.9693372898120672
31933,"public CsvFile(String filePath,String delimiter){
  this.filePath=filePath;
  this.delimiter=delimiter;
}","public CsvFile(String filePath,String delimiter){
  this.filePath=filePath;
  this.delimiter=delimiter;
  this.iterator=new CvsFileIterator(filePath,delimiter);
}",0.7865168539325843
31934,"private void open(String filePath) throws IOException {
  this.reader=new BufferedReader(new FileReader(filePath));
  String headerLine=reader.readLine();
  this.header=StringUtils.split(headerLine,delimiter);
}","private void open(String filePath) throws IOException {
  this.reader=new BufferedReader(new FileReader(filePath));
  String headerLine=reader.readLine();
  this.header=StringUtils.splitPreserveAllTokens(headerLine,delimiter);
}",0.9612756264236902
31935,"@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (!this.dataPurifier.isFilterOut(valueStr)) {
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    return;
  }
  String[] units=CommonUtils.split(valueStr,this.modelConfig.getDataSetDelimiter());
  String tag=units[this.tagColumnNum];
  if (!this.tags.contains(tag)) {
    if (System.currentTimeMillis() % 20 == 0) {
      LOG.warn(""String_Node_Str"",tag);
    }
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    return;
  }
  int i=0;
  for (  String unit : units) {
    CountAndFrequentItems countAndFrequentItems=this.variableCountMap.get(i);
    if (countAndFrequentItems == null) {
      countAndFrequentItems=new CountAndFrequentItems();
      this.variableCountMap.put(i,countAndFrequentItems);
    }
    countAndFrequentItems.offer(this.missingOrInvalidValues,unit);
    i++;
  }
}","@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (!this.dataPurifier.isFilterOut(valueStr)) {
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    return;
  }
  String[] units=CommonUtils.split(valueStr,this.modelConfig.getDataSetDelimiter());
  String tag=units[this.tagColumnNum];
  if (!this.tags.contains(tag)) {
    if (System.currentTimeMillis() % 50 == 0L) {
      LOG.warn(""String_Node_Str"",tag);
    }
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    return;
  }
  int i=0;
  for (  String unit : units) {
    CountAndFrequentItems countAndFrequentItems=this.variableCountMap.get(i);
    if (countAndFrequentItems == null) {
      countAndFrequentItems=new CountAndFrequentItems();
      this.variableCountMap.put(i,countAndFrequentItems);
    }
    countAndFrequentItems.offer(this.missingOrInvalidValues,unit);
    i++;
  }
}",0.9987937273823884
31936,"public CountAndFrequentItemsWritable(long count,long invalidCount,long validNumCount,byte[] hyperBytes,Set<String> frequetItems){
  this.hyperBytes=hyperBytes;
  this.frequetItems=frequetItems;
}","public CountAndFrequentItemsWritable(long count,long invalidCount,long validNumCount,byte[] hyperBytes,Set<String> frequetItems){
  this.count=count;
  this.invalidCount=invalidCount;
  this.validNumCount=validNumCount;
  this.hyperBytes=hyperBytes;
  this.frequetItems=frequetItems;
}",0.8125
31937,"/** 
 * Initialization for column statistics in mapper.
 */
@Override protected void setup(Context context) throws IOException, InterruptedException {
  loadConfigFiles(context);
  this.dataSetDelimiter=this.modelConfig.getDataSetDelimiter();
  this.dataPurifier=new DataPurifier(this.modelConfig);
  loadWeightColumnNum();
  loadTagWeightNum();
  this.columnBinningInfo=new HashMap<Integer,BinningInfoWritable>(this.columnConfigList.size() * 4 / 3);
  this.categoricalBinMap=new HashMap<Integer,Map<String,Integer>>(this.columnConfigList.size() * 4 / 3);
  loadColumnBinningInfo();
  this.outputKey=new IntWritable();
  this.posTags=new HashSet<String>(modelConfig.getPosTags());
  this.negTags=new HashSet<String>(modelConfig.getNegTags());
  this.tags=new HashSet<String>(modelConfig.getFlattenTags());
  this.missingOrInvalidValues=new HashSet<String>(this.modelConfig.getDataSet().getMissingOrInvalidValues());
  LOG.debug(""String_Node_Str"",this.columnBinningInfo);
}","/** 
 * Initialization for column statistics in mapper.
 */
@Override protected void setup(Context context) throws IOException, InterruptedException {
  loadConfigFiles(context);
  this.dataSetDelimiter=this.modelConfig.getDataSetDelimiter();
  this.dataPurifier=new DataPurifier(this.modelConfig);
  loadWeightColumnNum();
  loadTagWeightNum();
  this.columnBinningInfo=new HashMap<Integer,BinningInfoWritable>(this.columnConfigList.size() * 4 / 3);
  this.categoricalBinMap=new HashMap<Integer,Map<String,Integer>>(this.columnConfigList.size() * 4 / 3);
  loadColumnBinningInfo();
  this.outputKey=new IntWritable();
  this.posTags=new HashSet<String>(modelConfig.getPosTags());
  this.negTags=new HashSet<String>(modelConfig.getNegTags());
  this.tags=new HashSet<String>(modelConfig.getFlattenTags());
  this.missingOrInvalidValues=new HashSet<String>(this.modelConfig.getDataSet().getMissingOrInvalidValues());
  this.isThrowforWeightException=""String_Node_Str"".equalsIgnoreCase(context.getConfiguration().get(""String_Node_Str"",""String_Node_Str""));
  LOG.debug(""String_Node_Str"",this.columnBinningInfo);
}",0.9337175792507204
31938,"/** 
 * Mapper implementation includes: 1. Invalid data purifier 2. Column statistics update.
 */
@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (!this.dataPurifier.isFilterOut(valueStr)) {
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    return;
  }
  String[] units=CommonUtils.split(valueStr,this.dataSetDelimiter);
  String tag=units[this.tagColumnNum];
  if (modelConfig.isRegression()) {
    if (tag == null || (!posTags.contains(tag) && !negTags.contains(tag))) {
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      return;
    }
  }
 else {
    if (tag == null || (!tags.contains(tag))) {
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      return;
    }
  }
  Double weight=1.0;
  try {
    weight=(this.weightedColumnNum == -1 ? 1.0d : Double.valueOf(units[this.weightedColumnNum]));
  }
 catch (  Exception e) {
    weightExceptions+=1;
    if (weightExceptions > 500) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  boolean isMissingValue=false;
  boolean isInvalidValue=false;
  for (int i=0; i < units.length; i++) {
    ColumnConfig columnConfig=this.columnConfigList.get(i);
    if (columnConfig.isMeta() || columnConfig.isTarget()) {
      continue;
    }
    isMissingValue=false;
    isInvalidValue=false;
    BinningInfoWritable binningInfoWritable=this.columnBinningInfo.get(i);
    if (binningInfoWritable == null) {
      continue;
    }
    binningInfoWritable.setTotalCount(binningInfoWritable.getTotalCount() + 1L);
    if (columnConfig.isCategorical()) {
      int lastBinIndex=binningInfoWritable.getBinCategories().size();
      int binNum=0;
      if (units[i] == null || missingOrInvalidValues.contains(units[i].toLowerCase())) {
        isMissingValue=true;
      }
 else {
        String str=StringUtils.trim(units[i]);
        binNum=quickLocateCategoricalBin(this.categoricalBinMap.get(i),str);
        if (binNum < 0) {
          isInvalidValue=true;
        }
      }
      if (isInvalidValue || isMissingValue) {
        binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
        binNum=lastBinIndex;
      }
      if (modelConfig.isRegression()) {
        if (posTags.contains(tag)) {
          binningInfoWritable.getBinCountPos()[binNum]+=1L;
          binningInfoWritable.getBinWeightPos()[binNum]+=weight;
        }
 else         if (negTags.contains(tag)) {
          binningInfoWritable.getBinCountNeg()[binNum]+=1L;
          binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
        }
      }
 else {
        binningInfoWritable.getBinCountPos()[binNum]+=1L;
        binningInfoWritable.getBinWeightPos()[binNum]+=weight;
      }
    }
 else     if (columnConfig.isNumerical()) {
      int lastBinIndex=binningInfoWritable.getBinBoundaries().size();
      double douVal=0.0;
      if (units[i] == null || units[i].length() == 0) {
        isMissingValue=true;
      }
 else {
        try {
          douVal=Double.parseDouble(units[i].trim());
        }
 catch (        Exception e) {
          isInvalidValue=true;
        }
      }
      if (Double.compare(douVal,modelConfig.getNumericalValueThreshold()) > 0) {
        isInvalidValue=true;
      }
      if (isInvalidValue || isMissingValue) {
        binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
        if (modelConfig.isRegression()) {
          if (posTags.contains(tag)) {
            binningInfoWritable.getBinCountPos()[lastBinIndex]+=1L;
            binningInfoWritable.getBinWeightPos()[lastBinIndex]+=weight;
          }
 else           if (negTags.contains(tag)) {
            binningInfoWritable.getBinCountNeg()[lastBinIndex]+=1L;
            binningInfoWritable.getBinWeightNeg()[lastBinIndex]+=weight;
          }
        }
      }
 else {
        int binNum=getBinNum(binningInfoWritable.getBinBoundaries(),units[i]);
        if (binNum == -1) {
          throw new RuntimeException(""String_Node_Str"");
        }
        if (modelConfig.isRegression()) {
          if (posTags.contains(tag)) {
            binningInfoWritable.getBinCountPos()[binNum]+=1L;
            binningInfoWritable.getBinWeightPos()[binNum]+=weight;
          }
 else           if (negTags.contains(tag)) {
            binningInfoWritable.getBinCountNeg()[binNum]+=1L;
            binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
          }
        }
        binningInfoWritable.setSum(binningInfoWritable.getSum() + douVal);
        double squaredVal=douVal * douVal;
        binningInfoWritable.setSquaredSum(binningInfoWritable.getSquaredSum() + squaredVal);
        binningInfoWritable.setTripleSum(binningInfoWritable.getTripleSum() + squaredVal * douVal);
        binningInfoWritable.setQuarticSum(binningInfoWritable.getQuarticSum() + squaredVal * squaredVal);
        if (Double.compare(binningInfoWritable.getMax(),douVal) < 0) {
          binningInfoWritable.setMax(douVal);
        }
        if (Double.compare(binningInfoWritable.getMin(),douVal) > 0) {
          binningInfoWritable.setMin(douVal);
        }
      }
    }
  }
}","/** 
 * Mapper implementation includes: 1. Invalid data purifier 2. Column statistics update.
 */
@Override protected void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {
  String valueStr=value.toString();
  if (valueStr == null || valueStr.length() == 0 || valueStr.trim().length() == 0) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
  if (!this.dataPurifier.isFilterOut(valueStr)) {
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    return;
  }
  String[] units=CommonUtils.split(valueStr,this.dataSetDelimiter);
  String tag=units[this.tagColumnNum];
  if (modelConfig.isRegression()) {
    if (tag == null || (!posTags.contains(tag) && !negTags.contains(tag))) {
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      return;
    }
  }
 else {
    if (tag == null || (!tags.contains(tag))) {
      context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
      return;
    }
  }
  Double weight=1.0;
  try {
    weight=(this.weightedColumnNum == -1 ? 1.0d : Double.valueOf(units[this.weightedColumnNum]));
  }
 catch (  Exception e) {
    weightExceptions+=1;
    context.getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1L);
    if (weightExceptions > 5000 && this.isThrowforWeightException) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  boolean isMissingValue=false;
  boolean isInvalidValue=false;
  for (int i=0; i < units.length; i++) {
    ColumnConfig columnConfig=this.columnConfigList.get(i);
    if (columnConfig.isMeta() || columnConfig.isTarget()) {
      continue;
    }
    isMissingValue=false;
    isInvalidValue=false;
    BinningInfoWritable binningInfoWritable=this.columnBinningInfo.get(i);
    if (binningInfoWritable == null) {
      continue;
    }
    binningInfoWritable.setTotalCount(binningInfoWritable.getTotalCount() + 1L);
    if (columnConfig.isCategorical()) {
      int lastBinIndex=binningInfoWritable.getBinCategories().size();
      int binNum=0;
      if (units[i] == null || missingOrInvalidValues.contains(units[i].toLowerCase())) {
        isMissingValue=true;
      }
 else {
        String str=StringUtils.trim(units[i]);
        binNum=quickLocateCategoricalBin(this.categoricalBinMap.get(i),str);
        if (binNum < 0) {
          isInvalidValue=true;
        }
      }
      if (isInvalidValue || isMissingValue) {
        binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
        binNum=lastBinIndex;
      }
      if (modelConfig.isRegression()) {
        if (posTags.contains(tag)) {
          binningInfoWritable.getBinCountPos()[binNum]+=1L;
          binningInfoWritable.getBinWeightPos()[binNum]+=weight;
        }
 else         if (negTags.contains(tag)) {
          binningInfoWritable.getBinCountNeg()[binNum]+=1L;
          binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
        }
      }
 else {
        binningInfoWritable.getBinCountPos()[binNum]+=1L;
        binningInfoWritable.getBinWeightPos()[binNum]+=weight;
      }
    }
 else     if (columnConfig.isNumerical()) {
      int lastBinIndex=binningInfoWritable.getBinBoundaries().size();
      double douVal=0.0;
      if (units[i] == null || units[i].length() == 0) {
        isMissingValue=true;
      }
 else {
        try {
          douVal=Double.parseDouble(units[i].trim());
        }
 catch (        Exception e) {
          isInvalidValue=true;
        }
      }
      if (Double.compare(douVal,modelConfig.getNumericalValueThreshold()) > 0) {
        isInvalidValue=true;
      }
      if (isInvalidValue || isMissingValue) {
        binningInfoWritable.setMissingCount(binningInfoWritable.getMissingCount() + 1L);
        if (modelConfig.isRegression()) {
          if (posTags.contains(tag)) {
            binningInfoWritable.getBinCountPos()[lastBinIndex]+=1L;
            binningInfoWritable.getBinWeightPos()[lastBinIndex]+=weight;
          }
 else           if (negTags.contains(tag)) {
            binningInfoWritable.getBinCountNeg()[lastBinIndex]+=1L;
            binningInfoWritable.getBinWeightNeg()[lastBinIndex]+=weight;
          }
        }
      }
 else {
        int binNum=getBinNum(binningInfoWritable.getBinBoundaries(),units[i]);
        if (binNum == -1) {
          throw new RuntimeException(""String_Node_Str"");
        }
        if (modelConfig.isRegression()) {
          if (posTags.contains(tag)) {
            binningInfoWritable.getBinCountPos()[binNum]+=1L;
            binningInfoWritable.getBinWeightPos()[binNum]+=weight;
          }
 else           if (negTags.contains(tag)) {
            binningInfoWritable.getBinCountNeg()[binNum]+=1L;
            binningInfoWritable.getBinWeightNeg()[binNum]+=weight;
          }
        }
        binningInfoWritable.setSum(binningInfoWritable.getSum() + douVal);
        double squaredVal=douVal * douVal;
        binningInfoWritable.setSquaredSum(binningInfoWritable.getSquaredSum() + squaredVal);
        binningInfoWritable.setTripleSum(binningInfoWritable.getTripleSum() + squaredVal * douVal);
        binningInfoWritable.setQuarticSum(binningInfoWritable.getQuarticSum() + squaredVal * squaredVal);
        if (Double.compare(binningInfoWritable.getMax(),douVal) < 0) {
          binningInfoWritable.setMax(douVal);
        }
        if (Double.compare(binningInfoWritable.getMin(),douVal) > 0) {
          binningInfoWritable.setMin(douVal);
        }
      }
    }
  }
}",0.989012968299712
31939,"/** 
 * Write   {@link #trees},   {@link #toDoQueue} and MasterParams to HDFS.
 */
private void writeStatesToHdfs(Path out,DTMasterParams masterParams){
  FSDataOutputStream fos=null;
  try {
    fos=FileSystem.get(conf).create(out);
    int treeLength=trees.size();
    fos.writeInt(treeLength);
    for (    TreeNode treeNode : trees) {
      treeNode.write(fos);
    }
    fos.writeInt(this.toDoQueue.size());
    for (    TreeNode treeNode : this.toDoQueue) {
      treeNode.write(fos);
    }
    if (this.isLeafWise && this.toSplitQueue != null) {
      fos.writeInt(this.toSplitQueue.size());
      for (      TreeNode treeNode : this.toSplitQueue) {
        treeNode.write(fos);
      }
    }
    masterParams.write(fos);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}","/** 
 * Write   {@link #trees},   {@link #toDoQueue} and MasterParams to HDFS.
 */
private void writeStatesToHdfs(Path out,DTMasterParams masterParams,List<TreeNode> trees,boolean isLeafWise,Queue<TreeNode> toDoQueue,Queue<TreeNode> toSplitQueue){
  FSDataOutputStream fos=null;
  try {
    fos=FileSystem.get(conf).create(out);
    int treeLength=trees.size();
    fos.writeInt(treeLength);
    for (    TreeNode treeNode : trees) {
      treeNode.write(fos);
    }
    fos.writeInt(toDoQueue.size());
    for (    TreeNode treeNode : toDoQueue) {
      treeNode.write(fos);
    }
    if (isLeafWise && toSplitQueue != null) {
      fos.writeInt(toSplitQueue.size());
      for (      TreeNode treeNode : toSplitQueue) {
        treeNode.write(fos);
      }
    }
    masterParams.write(fos);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}",0.9288560045532156
31940,"private DTMasterParams buildInitialMasterParams(){
  Map<Integer,TreeNode> todoNodes=new HashMap<Integer,TreeNode>(treeNum,1.0f);
  int nodeIndexInGroup=0;
  List<Integer> depthList=new ArrayList<Integer>();
  DTMasterParams masterParams=new DTMasterParams(trees,todoNodes);
  if (isRF) {
    for (int i=0; i < this.treeNum; i++) {
      depthList.add(-1);
    }
    for (    TreeNode treeNode : trees) {
      List<Integer> features=getSubsamplingFeatures(this.featureSubsetStrategy);
      treeNode.setFeatures(features);
      todoNodes.put(nodeIndexInGroup,treeNode);
      int treeId=treeNode.getTreeId();
      int oldDepth=depthList.get(treeId);
      int currDepth=Node.indexToLevel(treeNode.getNode().getId());
      if (currDepth > oldDepth) {
        depthList.set(treeId,currDepth);
      }
      nodeIndexInGroup+=1;
    }
    masterParams.setTrees(this.trees);
  }
 else   if (isGBDT) {
    depthList.add(-1);
    List<Integer> features=getSubsamplingFeatures(this.featureSubsetStrategy);
    TreeNode treeNode=trees.get(trees.size() - 1);
    treeNode.setFeatures(features);
    todoNodes.put(nodeIndexInGroup,treeNode);
    int oldDepth=depthList.get(0);
    int currDepth=Node.indexToLevel(treeNode.getNode().getId());
    if (currDepth > oldDepth) {
      depthList.set(0,currDepth);
    }
    nodeIndexInGroup+=1;
    masterParams.setContinuousRunningStart(this.isContinuousEnabled);
    masterParams.setSwitchToNextTree(true);
    masterParams.setFirstTree(this.trees.size() == 1);
    if (this.trees.size() > 0) {
      masterParams.setTrees(this.trees.subList(this.trees.size() - 1,this.trees.size()));
    }
    masterParams.setTmpTrees(this.trees);
  }
  masterParams.setTreeDepth(depthList);
  return masterParams;
}","private DTMasterParams buildInitialMasterParams(){
  Map<Integer,TreeNode> todoNodes=new HashMap<Integer,TreeNode>(treeNum,1.0f);
  int nodeIndexInGroup=0;
  List<Integer> depthList=new ArrayList<Integer>();
  DTMasterParams masterParams=new DTMasterParams(trees,todoNodes);
  if (isRF) {
    for (int i=0; i < this.treeNum; i++) {
      depthList.add(-1);
    }
    for (    TreeNode treeNode : trees) {
      List<Integer> features=getSubsamplingFeatures(this.featureSubsetStrategy,this.featureSubsetRate);
      treeNode.setFeatures(features);
      todoNodes.put(nodeIndexInGroup,treeNode);
      int treeId=treeNode.getTreeId();
      int oldDepth=depthList.get(treeId);
      int currDepth=Node.indexToLevel(treeNode.getNode().getId());
      if (currDepth > oldDepth) {
        depthList.set(treeId,currDepth);
      }
      nodeIndexInGroup+=1;
    }
    masterParams.setTrees(this.trees);
  }
 else   if (isGBDT) {
    depthList.add(-1);
    List<Integer> features=getSubsamplingFeatures(this.featureSubsetStrategy,this.featureSubsetRate);
    TreeNode treeNode=trees.get(trees.size() - 1);
    treeNode.setFeatures(features);
    todoNodes.put(nodeIndexInGroup,treeNode);
    int oldDepth=depthList.get(0);
    int currDepth=Node.indexToLevel(treeNode.getNode().getId());
    if (currDepth > oldDepth) {
      depthList.set(0,currDepth);
    }
    nodeIndexInGroup+=1;
    masterParams.setContinuousRunningStart(this.isContinuousEnabled);
    masterParams.setSwitchToNextTree(true);
    masterParams.setFirstTree(this.trees.size() == 1);
    if (this.trees.size() > 0) {
      masterParams.setTrees(this.trees.subList(this.trees.size() - 1,this.trees.size()));
    }
    masterParams.setTmpTrees(this.trees);
  }
  masterParams.setTreeDepth(depthList);
  return masterParams;
}",0.9869614512471656
31941,"@Override public void run(){
  long start=System.currentTimeMillis();
  writeStatesToHdfs(DTMaster.this.checkpointOutput,masterParams);
  LOG.info(""String_Node_Str"",context.getCurrentIteration(),(System.currentTimeMillis() - start));
}","@Override public void run(){
  long start=System.currentTimeMillis();
  writeStatesToHdfs(DTMaster.this.checkpointOutput,masterParams,finalTrees,finalIsLeaf,finalTodoQueue,finalToSplitQueue);
  LOG.info(""String_Node_Str"",context.getCurrentIteration(),(System.currentTimeMillis() - start));
}",0.8935361216730038
31942,"/** 
 * If earlyStopEnabled is true, the early stop feature will be enabled
 */
@Override public DTMasterParams doCompute(MasterContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return buildInitialMasterParams();
  }
  if (this.cpMasterParams != null) {
    DTMasterParams tmpMasterParams=rebuildRecoverMasterResultDepthList();
    this.cpMasterParams=null;
    if (this.isGBDT) {
      tmpMasterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
      tmpMasterParams.setTmpTrees(this.trees);
    }
    return tmpMasterParams;
  }
  boolean isFirst=false;
  Map<Integer,NodeStats> nodeStatsMap=null;
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  for (  DTWorkerParams params : context.getWorkerResults()) {
    if (!isFirst) {
      isFirst=true;
      nodeStatsMap=params.getNodeStatsMap();
    }
 else {
      Map<Integer,NodeStats> currNodeStatsmap=params.getNodeStatsMap();
      for (      Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
        NodeStats resultNodeStats=entry.getValue();
        mergeNodeStats(resultNodeStats,currNodeStatsmap.get(entry.getKey()));
      }
    }
    trainError+=params.getTrainError();
    validationError+=params.getValidationError();
    weightedTrainCount+=params.getTrainCount();
    weightedValidationCount+=params.getValidationCount();
  }
  for (  Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
    NodeStats nodeStats=entry.getValue();
    int treeId=nodeStats.getTreeId();
    Node doneNode=Node.getNode(trees.get(treeId).getNode(),nodeStats.getNodeId());
    Map<Integer,double[]> statistics=nodeStats.getFeatureStatistics();
    List<GainInfo> gainList=new ArrayList<GainInfo>();
    for (    Entry<Integer,double[]> gainEntry : statistics.entrySet()) {
      int columnNum=gainEntry.getKey();
      ColumnConfig config=this.columnConfigList.get(columnNum);
      double[] statsArray=gainEntry.getValue();
      GainInfo gainInfo=this.impurity.computeImpurity(statsArray,config);
      if (gainInfo != null) {
        gainList.add(gainInfo);
      }
    }
    GainInfo maxGainInfo=GainInfo.getGainInfoByMaxGain(gainList);
    if (maxGainInfo == null) {
      doneNode.setLeaf(true);
      continue;
    }
    populateGainInfoToNode(treeId,doneNode,maxGainInfo);
    if (this.isLeafWise) {
      boolean isNotSplit=maxGainInfo.getGain() <= 0d;
      if (!isNotSplit) {
        this.toSplitQueue.offer(new TreeNode(treeId,doneNode));
      }
 else {
        LOG.info(""String_Node_Str"",doneNode.getId(),treeId);
      }
    }
 else {
      boolean isLeaf=maxGainInfo.getGain() <= 0d || Node.indexToLevel(doneNode.getId()) == this.maxDepth;
      doneNode.setLeaf(isLeaf);
      splitNodeForLevelWisedTree(isLeaf,treeId,doneNode);
    }
  }
  if (this.isLeafWise) {
    int currSplitIndex=0;
    while (!toSplitQueue.isEmpty() && currSplitIndex < this.maxBatchSplitSize) {
      TreeNode treeNode=this.toSplitQueue.poll();
      splitNodeForLeafWisedTree(treeNode.getTreeId(),treeNode.getNode());
    }
  }
  Map<Integer,TreeNode> todoNodes=new HashMap<Integer,TreeNode>();
  DTMasterParams masterParams=new DTMasterParams(weightedTrainCount,trainError,weightedValidationCount,validationError);
  if (toDoQueue.isEmpty()) {
    if (this.isGBDT) {
      TreeNode treeNode=this.trees.get(this.trees.size() - 1);
      Node node=treeNode.getNode();
      if (this.trees.size() == this.treeNum + this.existingTreeSize) {
        masterParams.setHalt(true);
        LOG.info(""String_Node_Str"",context.getCurrentIteration());
      }
 else       if (node.getLeft() == null && node.getRight() == null) {
        masterParams.setHalt(true);
        LOG.warn(""String_Node_Str"",context.getCurrentIteration());
      }
 else {
        masterParams.setFirstTree(this.trees.size() == 1);
        treeNode.setFeatures(null);
        TreeNode newRootNode=new TreeNode(this.trees.size(),new Node(Node.ROOT_INDEX),this.learningRate);
        LOG.info(""String_Node_Str"",this.trees.size());
        this.trees.add(newRootNode);
        newRootNode.setFeatures(getSubsamplingFeatures(this.featureSubsetStrategy));
        todoNodes.put(0,newRootNode);
        masterParams.setTodoNodes(todoNodes);
        masterParams.setSwitchToNextTree(true);
      }
    }
 else {
      masterParams.setHalt(true);
      LOG.info(""String_Node_Str"",context.getCurrentIteration());
    }
  }
 else {
    int nodeIndexInGroup=0;
    long currMem=0L;
    List<Integer> depthList=new ArrayList<Integer>();
    if (this.isGBDT) {
      depthList.add(-1);
    }
    if (isRF) {
      for (int i=0; i < this.trees.size(); i++) {
        depthList.add(-1);
      }
    }
    while (!toDoQueue.isEmpty() && currMem <= this.maxStatsMemory) {
      TreeNode node=this.toDoQueue.poll();
      int treeId=node.getTreeId();
      int oldDepth=this.isGBDT ? depthList.get(0) : depthList.get(treeId);
      int currDepth=Node.indexToLevel(node.getNode().getId());
      if (currDepth > oldDepth) {
        if (this.isGBDT) {
          depthList.set(0,currDepth);
        }
 else {
          depthList.set(treeId,currDepth);
        }
      }
      List<Integer> subsetFeatures=getSubsamplingFeatures(featureSubsetStrategy);
      node.setFeatures(subsetFeatures);
      currMem+=getStatsMem(subsetFeatures);
      todoNodes.put(nodeIndexInGroup,node);
      nodeIndexInGroup+=1;
    }
    masterParams.setTreeDepth(depthList);
    masterParams.setTodoNodes(todoNodes);
    masterParams.setSwitchToNextTree(false);
    masterParams.setContinuousRunningStart(false);
    masterParams.setFirstTree(this.trees.size() == 1);
    LOG.info(""String_Node_Str"",todoNodes.size());
  }
  if (this.isGBDT) {
    if (masterParams.isSwitchToNextTree()) {
      masterParams.setTrees(trees.subList(trees.size() - 2,trees.size()));
    }
 else {
      masterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
    }
  }
  if (this.isRF) {
    if (masterParams.getTreeDepth().size() == this.trees.size()) {
      List<TreeNode> todoTrees=new ArrayList<TreeNode>();
      for (int i=0; i < trees.size(); i++) {
        if (masterParams.getTreeDepth().get(i) >= 0) {
          todoTrees.add(trees.get(i));
        }
 else {
          todoTrees.add(new TreeNode(i,new Node(Node.INVALID_INDEX),1d));
        }
      }
      masterParams.setTrees(todoTrees);
    }
 else {
      masterParams.setTrees(trees);
    }
  }
  if (this.isGBDT) {
    masterParams.setTmpTrees(this.trees);
  }
  doCheckPoint(context,masterParams);
  LOG.info(""String_Node_Str"",weightedTrainCount,weightedValidationCount,trainError,validationError);
  return masterParams;
}","/** 
 * If earlyStopEnabled is true, the early stop feature will be enabled
 */
@Override public DTMasterParams doCompute(MasterContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return buildInitialMasterParams();
  }
  if (this.cpMasterParams != null) {
    DTMasterParams tmpMasterParams=rebuildRecoverMasterResultDepthList();
    this.cpMasterParams=null;
    if (this.isGBDT) {
      tmpMasterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
      tmpMasterParams.setTmpTrees(this.trees);
    }
    return tmpMasterParams;
  }
  boolean isFirst=false;
  Map<Integer,NodeStats> nodeStatsMap=null;
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  for (  DTWorkerParams params : context.getWorkerResults()) {
    if (!isFirst) {
      isFirst=true;
      nodeStatsMap=params.getNodeStatsMap();
    }
 else {
      Map<Integer,NodeStats> currNodeStatsmap=params.getNodeStatsMap();
      for (      Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
        NodeStats resultNodeStats=entry.getValue();
        mergeNodeStats(resultNodeStats,currNodeStatsmap.get(entry.getKey()));
      }
    }
    trainError+=params.getTrainError();
    validationError+=params.getValidationError();
    weightedTrainCount+=params.getTrainCount();
    weightedValidationCount+=params.getValidationCount();
  }
  for (  Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
    NodeStats nodeStats=entry.getValue();
    int treeId=nodeStats.getTreeId();
    Node doneNode=Node.getNode(trees.get(treeId).getNode(),nodeStats.getNodeId());
    Map<Integer,double[]> statistics=nodeStats.getFeatureStatistics();
    List<GainInfo> gainList=new ArrayList<GainInfo>();
    for (    Entry<Integer,double[]> gainEntry : statistics.entrySet()) {
      int columnNum=gainEntry.getKey();
      ColumnConfig config=this.columnConfigList.get(columnNum);
      double[] statsArray=gainEntry.getValue();
      GainInfo gainInfo=this.impurity.computeImpurity(statsArray,config);
      if (gainInfo != null) {
        gainList.add(gainInfo);
      }
    }
    GainInfo maxGainInfo=GainInfo.getGainInfoByMaxGain(gainList);
    if (maxGainInfo == null) {
      doneNode.setLeaf(true);
      continue;
    }
    populateGainInfoToNode(treeId,doneNode,maxGainInfo);
    if (this.isLeafWise) {
      boolean isNotSplit=maxGainInfo.getGain() <= 0d;
      if (!isNotSplit) {
        this.toSplitQueue.offer(new TreeNode(treeId,doneNode));
      }
 else {
        LOG.info(""String_Node_Str"",doneNode.getId(),treeId);
      }
    }
 else {
      boolean isLeaf=maxGainInfo.getGain() <= 0d || Node.indexToLevel(doneNode.getId()) == this.maxDepth;
      doneNode.setLeaf(isLeaf);
      splitNodeForLevelWisedTree(isLeaf,treeId,doneNode);
    }
  }
  if (this.isLeafWise) {
    int currSplitIndex=0;
    while (!toSplitQueue.isEmpty() && currSplitIndex < this.maxBatchSplitSize) {
      TreeNode treeNode=this.toSplitQueue.poll();
      splitNodeForLeafWisedTree(treeNode.getTreeId(),treeNode.getNode());
    }
  }
  Map<Integer,TreeNode> todoNodes=new HashMap<Integer,TreeNode>();
  DTMasterParams masterParams=new DTMasterParams(weightedTrainCount,trainError,weightedValidationCount,validationError);
  if (toDoQueue.isEmpty()) {
    if (this.isGBDT) {
      TreeNode treeNode=this.trees.get(this.trees.size() - 1);
      Node node=treeNode.getNode();
      if (this.trees.size() == this.treeNum + this.existingTreeSize) {
        masterParams.setHalt(true);
        LOG.info(""String_Node_Str"",context.getCurrentIteration());
      }
 else       if (node.getLeft() == null && node.getRight() == null) {
        masterParams.setHalt(true);
        LOG.warn(""String_Node_Str"",context.getCurrentIteration());
      }
 else {
        masterParams.setFirstTree(this.trees.size() == 1);
        treeNode.setFeatures(null);
        TreeNode newRootNode=new TreeNode(this.trees.size(),new Node(Node.ROOT_INDEX),this.learningRate);
        LOG.info(""String_Node_Str"",this.trees.size());
        this.trees.add(newRootNode);
        newRootNode.setFeatures(getSubsamplingFeatures(this.featureSubsetStrategy,this.featureSubsetRate));
        todoNodes.put(0,newRootNode);
        masterParams.setTodoNodes(todoNodes);
        masterParams.setSwitchToNextTree(true);
      }
    }
 else {
      masterParams.setHalt(true);
      LOG.info(""String_Node_Str"",context.getCurrentIteration());
    }
  }
 else {
    int nodeIndexInGroup=0;
    long currMem=0L;
    List<Integer> depthList=new ArrayList<Integer>();
    if (this.isGBDT) {
      depthList.add(-1);
    }
    if (isRF) {
      for (int i=0; i < this.trees.size(); i++) {
        depthList.add(-1);
      }
    }
    while (!toDoQueue.isEmpty() && currMem <= this.maxStatsMemory) {
      TreeNode node=this.toDoQueue.poll();
      int treeId=node.getTreeId();
      int oldDepth=this.isGBDT ? depthList.get(0) : depthList.get(treeId);
      int currDepth=Node.indexToLevel(node.getNode().getId());
      if (currDepth > oldDepth) {
        if (this.isGBDT) {
          depthList.set(0,currDepth);
        }
 else {
          depthList.set(treeId,currDepth);
        }
      }
      List<Integer> subsetFeatures=getSubsamplingFeatures(this.featureSubsetStrategy,this.featureSubsetRate);
      node.setFeatures(subsetFeatures);
      currMem+=getStatsMem(subsetFeatures);
      todoNodes.put(nodeIndexInGroup,node);
      nodeIndexInGroup+=1;
    }
    masterParams.setTreeDepth(depthList);
    masterParams.setTodoNodes(todoNodes);
    masterParams.setSwitchToNextTree(false);
    masterParams.setContinuousRunningStart(false);
    masterParams.setFirstTree(this.trees.size() == 1);
    LOG.info(""String_Node_Str"",todoNodes.size());
  }
  if (this.isGBDT) {
    if (masterParams.isSwitchToNextTree()) {
      masterParams.setTrees(trees.subList(trees.size() - 2,trees.size()));
    }
 else {
      masterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
    }
  }
  if (this.isRF) {
    if (masterParams.getTreeDepth().size() == this.trees.size()) {
      List<TreeNode> todoTrees=new ArrayList<TreeNode>();
      for (int i=0; i < trees.size(); i++) {
        if (masterParams.getTreeDepth().get(i) >= 0) {
          todoTrees.add(trees.get(i));
        }
 else {
          todoTrees.add(new TreeNode(i,new Node(Node.INVALID_INDEX),1d));
        }
      }
      masterParams.setTrees(todoTrees);
    }
 else {
      masterParams.setTrees(trees);
    }
  }
  if (this.isGBDT) {
    masterParams.setTmpTrees(this.trees);
  }
  doCheckPoint(context,masterParams);
  LOG.info(""String_Node_Str"",weightedTrainCount,weightedValidationCount,trainError,validationError);
  return masterParams;
}",0.9961926091825308
31943,"/** 
 * Do checkpoint for master states, this is for master fail over
 */
private void doCheckPoint(final MasterContext<DTMasterParams,DTWorkerParams> context,final DTMasterParams masterParams){
  LOG.info(""String_Node_Str"",this.checkpointOutput);
  Thread cpPersistThread=new Thread(new Runnable(){
    @Override public void run(){
      long start=System.currentTimeMillis();
      writeStatesToHdfs(DTMaster.this.checkpointOutput,masterParams);
      LOG.info(""String_Node_Str"",context.getCurrentIteration(),(System.currentTimeMillis() - start));
    }
  }
,""String_Node_Str"");
  cpPersistThread.setDaemon(true);
  cpPersistThread.start();
}","/** 
 * Do checkpoint for master states, this is for master fail over
 */
private void doCheckPoint(final MasterContext<DTMasterParams,DTWorkerParams> context,final DTMasterParams masterParams){
  LOG.info(""String_Node_Str"",this.checkpointOutput);
  final Queue<TreeNode> finalTodoQueue=this.toDoQueue;
  final Queue<TreeNode> finalToSplitQueue=this.toSplitQueue;
  final boolean finalIsLeaf=this.isLeafWise;
  final List<TreeNode> finalTrees=this.trees;
  Thread cpPersistThread=new Thread(new Runnable(){
    @Override public void run(){
      long start=System.currentTimeMillis();
      writeStatesToHdfs(DTMaster.this.checkpointOutput,masterParams,finalTrees,finalIsLeaf,finalTodoQueue,finalToSplitQueue);
      LOG.info(""String_Node_Str"",context.getCurrentIteration(),(System.currentTimeMillis() - start));
    }
  }
,""String_Node_Str"");
  cpPersistThread.setDaemon(true);
  cpPersistThread.start();
}",0.8304319793681496
31944,"private List<Integer> getSubsamplingFeatures(FeatureSubsetStrategy featureSubsetStrategy){
switch (featureSubsetStrategy) {
case HALF:
    return sampleFeaturesForNodeStats(this.allFeatures,this.allFeatures.size() / 2);
case ONETHIRD:
  return sampleFeaturesForNodeStats(this.allFeatures,this.allFeatures.size() / 3);
case TWOTHIRDS:
return sampleFeaturesForNodeStats(this.allFeatures,this.allFeatures.size() * 2 / 3);
case SQRT:
return sampleFeaturesForNodeStats(this.allFeatures,(int)(this.allFeatures.size() * Math.sqrt(this.inputNum) / this.inputNum));
case LOG2:
return sampleFeaturesForNodeStats(this.allFeatures,(int)(this.allFeatures.size() * Math.log(this.inputNum) / Math.log(2) / this.inputNum));
case AUTO:
if (this.treeNum > 1) {
return sampleFeaturesForNodeStats(this.allFeatures,this.allFeatures.size() / 2);
}
 else {
return new ArrayList<Integer>();
}
case ALL:
default :
return new ArrayList<Integer>();
}
}","private List<Integer> getSubsamplingFeatures(FeatureSubsetStrategy featureSubsetStrategy,double featureSubsetRate){
  if (featureSubsetStrategy == null) {
    return sampleFeaturesForNodeStats(this.allFeatures,(int)(this.allFeatures.size() * featureSubsetRate));
  }
 else {
switch (featureSubsetStrategy) {
case HALF:
      return sampleFeaturesForNodeStats(this.allFeatures,this.allFeatures.size() / 2);
case ONETHIRD:
    return sampleFeaturesForNodeStats(this.allFeatures,this.allFeatures.size() / 3);
case TWOTHIRDS:
  return sampleFeaturesForNodeStats(this.allFeatures,this.allFeatures.size() * 2 / 3);
case SQRT:
return sampleFeaturesForNodeStats(this.allFeatures,(int)(this.allFeatures.size() * Math.sqrt(this.inputNum) / this.inputNum));
case LOG2:
return sampleFeaturesForNodeStats(this.allFeatures,(int)(this.allFeatures.size() * Math.log(this.inputNum) / Math.log(2) / this.inputNum));
case AUTO:
if (this.treeNum > 1) {
return sampleFeaturesForNodeStats(this.allFeatures,this.allFeatures.size() / 2);
}
 else {
return new ArrayList<Integer>();
}
case ALL:
default :
return new ArrayList<Integer>();
}
}
}",0.9049951028403526
31945,"/** 
 * Create train and eval task for sub-model
 * @param subModelName
 * @param evalSetName
 * @return
 */
private Callable<Integer> createTrainAndEvalTasks(final String subModelName,final String evalSetName) throws IOException {
  if (this.isToShuffleData) {
    ModelConfig subModelConfig=CommonUtils.loadModelConfig(subModelName + File.separator + Constants.MODEL_CONFIG_JSON_FILE_NAME,RawSourceData.SourceType.LOCAL);
    subModelConfig.getTrain().setCustomPaths(null);
    saveModelConfig(subModelName,subModelConfig);
  }
  return new Callable(){
    @Override public Integer call(){
      try {
        if (isToShuffleData) {
          return ProcessManager.runShellProcess(subModelName,new String[][]{new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalSetName}});
        }
 else {
          return ProcessManager.runShellProcess(subModelName,new String[][]{new String[]{""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalSetName}});
        }
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
        return 1;
      }
    }
  }
;
}","/** 
 * Create train and eval task for sub-model
 * @param subModelName
 * @param evalSetName
 * @return
 */
private Callable<Integer> createTrainAndEvalTasks(final String subModelName,final String evalSetName) throws IOException {
  if (this.isToShuffleData) {
    ModelConfig subModelConfig=CommonUtils.loadModelConfig(subModelName + File.separator + Constants.MODEL_CONFIG_JSON_FILE_NAME,RawSourceData.SourceType.LOCAL);
    subModelConfig.getTrain().setCustomPaths(null);
    saveModelConfig(subModelName,subModelConfig);
  }
  return new Callable<Integer>(){
    @Override public Integer call(){
      try {
        if (isToShuffleData) {
          return ProcessManager.runShellProcess(subModelName,new String[][]{new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalSetName}});
        }
 else {
          return ProcessManager.runShellProcess(subModelName,new String[][]{new String[]{""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalSetName}});
        }
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
        return 1;
      }
    }
  }
;
}",0.9964608729846638
31946,"private void prepareCommonParams(boolean isGsMode,final List<String> args,final SourceType sourceType){
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  args.add(""String_Node_Str"");
  addRuntimeJars(args);
  args.add(""String_Node_Str"");
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedDataPath())).toString());
  }
 else {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedDataPath())).toString());
  }
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    args.add(""String_Node_Str"");
    args.add(ShifuInputFormat.class.getName());
  }
  String zkServers=Environment.getProperty(Environment.ZOO_KEEPER_SERVERS);
  if (StringUtils.isEmpty(zkServers)) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    args.add(""String_Node_Str"");
    args.add(zkServers);
  }
  if (LogisticRegressionContants.LR_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareLRParams(args,sourceType);
  }
 else   if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareNNParams(args,sourceType);
  }
 else   if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    this.prepareDTParams(args,sourceType);
  }
  args.add(""String_Node_Str"");
  int numTrainEpoches=super.getModelConfig().getTrain().getNumTrainEpochs();
  if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg) && (this.isForVarSelect() || isGsMode) && numTrainEpoches >= VAR_SELECT_TRAINING_DECAY_EPOCHES_THRESHOLD) {
    numTrainEpoches=numTrainEpoches / 2;
  }
  numTrainEpoches=numTrainEpoches + 1;
  args.add(String.valueOf(numTrainEpoches));
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedValidationDataPath(sourceType))).toString()));
  }
 else {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedValidationDataPath(sourceType))).toString()));
  }
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,Constants.DEFAULT_JOB_QUEUE)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getModelConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.MODELSET_SOURCE_TYPE,sourceType));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DRY_DTRAIN,isDryTrain()));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.NN_POISON_SAMPLER,Environment.getProperty(NNConstants.NN_POISON_SAMPLER,""String_Node_Str"")));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,GuaguaConstants.GUAGUA_COMPUTATION_TIME_THRESHOLD,60 * 1000L));
  setHeapSizeAndSplitSize(args);
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",modelConfig.getTrain().getWorkerThreadCount() == null ? 1 : modelConfig.getTrain().getWorkerThreadCount()));
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,entry.getKey().toString(),entry.getValue().toString()));
    }
  }
}","private void prepareCommonParams(boolean isGsMode,final List<String> args,final SourceType sourceType){
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  args.add(""String_Node_Str"");
  addRuntimeJars(args);
  args.add(""String_Node_Str"");
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedDataPath())).toString());
  }
 else {
    args.add(ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedDataPath())).toString());
  }
  if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
    args.add(""String_Node_Str"");
    args.add(ShifuInputFormat.class.getName());
  }
  String zkServers=Environment.getProperty(Environment.ZOO_KEEPER_SERVERS);
  if (StringUtils.isEmpty(zkServers)) {
    LOG.warn(""String_Node_Str"");
  }
 else {
    args.add(""String_Node_Str"");
    args.add(zkServers);
  }
  if (LogisticRegressionContants.LR_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareLRParams(args,sourceType);
  }
 else   if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg)) {
    this.prepareNNParams(args,sourceType);
  }
 else   if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    this.prepareDTParams(args,sourceType);
  }
  args.add(""String_Node_Str"");
  int numTrainEpoches=super.getModelConfig().getTrain().getNumTrainEpochs();
  if (NNConstants.NN_ALG_NAME.equalsIgnoreCase(alg) && (this.isForVarSelect() || isGsMode) && numTrainEpoches >= VAR_SELECT_TRAINING_DECAY_EPOCHES_THRESHOLD) {
    numTrainEpoches=numTrainEpoches / 2;
  }
  if (CommonUtils.isDesicionTreeAlgorithm(alg) || numTrainEpoches <= 20000) {
    numTrainEpoches=20000;
  }
  numTrainEpoches=numTrainEpoches + 1;
  args.add(String.valueOf(numTrainEpoches));
  if (CommonUtils.isDesicionTreeAlgorithm(alg)) {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getCleanedValidationDataPath(sourceType))).toString()));
  }
 else {
    args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.CROSS_VALIDATION_DIR,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getNormalizedValidationDataPath(sourceType))).toString()));
  }
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.MAPRED_JOB_QUEUE_NAME,Environment.getProperty(Environment.HADOOP_JOB_QUEUE,Constants.DEFAULT_JOB_QUEUE)));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_MODEL_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getModelConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_COLUMN_CONFIG,ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(super.getPathFinder().getColumnConfigPath(sourceType)))));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.MODELSET_SOURCE_TYPE,sourceType));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,CommonConstants.SHIFU_DRY_DTRAIN,isDryTrain()));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,NNConstants.NN_POISON_SAMPLER,Environment.getProperty(NNConstants.NN_POISON_SAMPLER,""String_Node_Str"")));
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,GuaguaConstants.GUAGUA_COMPUTATION_TIME_THRESHOLD,60 * 1000L));
  setHeapSizeAndSplitSize(args);
  args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,""String_Node_Str"",modelConfig.getTrain().getWorkerThreadCount() == null ? 1 : modelConfig.getTrain().getWorkerThreadCount()));
  for (  Map.Entry<Object,Object> entry : Environment.getProperties().entrySet()) {
    if (CommonUtils.isHadoopConfigurationInjected(entry.getKey().toString())) {
      args.add(String.format(CommonConstants.MAPREDUCE_PARAM_FORMAT,entry.getKey().toString(),entry.getValue().toString()));
    }
  }
}",0.986591216631812
31947,"/** 
 * If earlyStopEnabled is true, the early stop feature will be enabled
 */
@Override public DTMasterParams doCompute(MasterContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return buildInitialMasterParams();
  }
  if (this.cpMasterParams != null) {
    DTMasterParams tmpMasterParams=rebuildRecoverMasterResultDepthList();
    this.cpMasterParams=null;
    if (this.isGBDT) {
      tmpMasterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
      tmpMasterParams.setTmpTrees(this.trees);
    }
    return tmpMasterParams;
  }
  boolean isFirst=false;
  Map<Integer,NodeStats> nodeStatsMap=null;
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  for (  DTWorkerParams params : context.getWorkerResults()) {
    if (!isFirst) {
      isFirst=true;
      nodeStatsMap=params.getNodeStatsMap();
    }
 else {
      Map<Integer,NodeStats> currNodeStatsmap=params.getNodeStatsMap();
      for (      Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
        NodeStats resultNodeStats=entry.getValue();
        mergeNodeStats(resultNodeStats,currNodeStatsmap.get(entry.getKey()));
      }
    }
    trainError+=params.getTrainError();
    validationError+=params.getValidationError();
    weightedTrainCount+=params.getTrainCount();
    weightedValidationCount+=params.getValidationCount();
  }
  for (  Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
    NodeStats nodeStats=entry.getValue();
    int treeId=nodeStats.getTreeId();
    Node doneNode=Node.getNode(trees.get(treeId).getNode(),nodeStats.getNodeId());
    Map<Integer,double[]> statistics=nodeStats.getFeatureStatistics();
    List<GainInfo> gainList=new ArrayList<GainInfo>();
    for (    Entry<Integer,double[]> gainEntry : statistics.entrySet()) {
      int columnNum=gainEntry.getKey();
      ColumnConfig config=this.columnConfigList.get(columnNum);
      double[] statsArray=gainEntry.getValue();
      GainInfo gainInfo=this.impurity.computeImpurity(statsArray,config);
      if (gainInfo != null) {
        gainList.add(gainInfo);
      }
    }
    GainInfo maxGainInfo=GainInfo.getGainInfoByMaxGain(gainList);
    if (maxGainInfo == null) {
      doneNode.setLeaf(true);
      continue;
    }
    populateGainInfoToNode(treeId,doneNode,maxGainInfo);
    if (this.isLeafWise) {
      boolean isNotSplit=maxGainInfo.getGain() <= 0d;
      if (!isNotSplit) {
        this.toSplitQueue.offer(new TreeNode(treeId,doneNode));
      }
 else {
        LOG.info(""String_Node_Str"",doneNode.getId(),treeId);
      }
    }
 else {
      boolean isLeaf=maxGainInfo.getGain() <= 0d || Node.indexToLevel(doneNode.getId()) == this.maxDepth;
      doneNode.setLeaf(isLeaf);
      splitNodeForLevelWisedTree(isLeaf,treeId,doneNode);
    }
  }
  if (this.isLeafWise) {
    int currSplitIndex=0;
    while (!toSplitQueue.isEmpty() && currSplitIndex < this.maxBatchSplitSize) {
      TreeNode treeNode=this.toSplitQueue.poll();
      splitNodeForLeafWisedTree(treeNode.getTreeId(),treeNode.getNode());
    }
  }
  Map<Integer,TreeNode> todoNodes=new HashMap<Integer,TreeNode>();
  DTMasterParams masterParams=new DTMasterParams(weightedTrainCount,trainError,weightedValidationCount,validationError);
  if (toDoQueue.isEmpty()) {
    if (this.isGBDT) {
      TreeNode treeNode=this.trees.get(this.trees.size() - 1);
      Node node=treeNode.getNode();
      if (this.trees.size() == this.treeNum + this.existingTreeSize) {
        masterParams.setHalt(true);
        LOG.info(""String_Node_Str"",context.getCurrentIteration());
      }
 else       if (node.getLeft() == null && node.getRight() == null) {
        masterParams.setHalt(true);
        LOG.warn(""String_Node_Str"",context.getCurrentIteration());
      }
 else {
        masterParams.setFirstTree(this.trees.size() == 1);
        treeNode.setFeatures(null);
        TreeNode newRootNode=new TreeNode(this.trees.size(),new Node(Node.ROOT_INDEX),this.learningRate);
        LOG.info(""String_Node_Str"",this.trees.size());
        this.trees.add(newRootNode);
        newRootNode.setFeatures(getSubsamplingFeatures(this.featureSubsetStrategy));
        todoNodes.put(0,newRootNode);
        masterParams.setTodoNodes(todoNodes);
        masterParams.setSwitchToNextTree(true);
      }
    }
 else {
      masterParams.setHalt(true);
      LOG.info(""String_Node_Str"",context.getCurrentIteration());
    }
  }
 else {
    int nodeIndexInGroup=0;
    long currMem=0L;
    List<Integer> depthList=new ArrayList<Integer>();
    if (this.isGBDT) {
      depthList.add(-1);
    }
    if (isRF) {
      for (int i=0; i < this.trees.size(); i++) {
        depthList.add(-1);
      }
    }
    while (!toDoQueue.isEmpty() && currMem <= this.maxStatsMemory) {
      TreeNode node=this.toDoQueue.poll();
      int treeId=node.getTreeId();
      int oldDepth=this.isGBDT ? depthList.get(0) : depthList.get(treeId);
      int currDepth=Node.indexToLevel(node.getNode().getId());
      if (currDepth > oldDepth) {
        if (this.isGBDT) {
          depthList.set(0,currDepth);
        }
 else {
          depthList.set(treeId,currDepth);
        }
      }
      List<Integer> subsetFeatures=getSubsamplingFeatures(featureSubsetStrategy);
      node.setFeatures(subsetFeatures);
      currMem+=getStatsMem(subsetFeatures);
      todoNodes.put(nodeIndexInGroup,node);
      nodeIndexInGroup+=1;
    }
    masterParams.setTreeDepth(depthList);
    masterParams.setTodoNodes(todoNodes);
    masterParams.setSwitchToNextTree(false);
    masterParams.setContinuousRunningStart(false);
    masterParams.setFirstTree(this.trees.size() == 1);
    LOG.info(""String_Node_Str"",todoNodes.size());
  }
  if (this.isGBDT) {
    if (masterParams.isSwitchToNextTree()) {
      masterParams.setTrees(trees.subList(trees.size() - 2,trees.size()));
    }
 else {
      masterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
    }
  }
  if (this.isRF) {
    masterParams.setTrees(trees);
  }
  if (this.isGBDT) {
    masterParams.setTmpTrees(this.trees);
  }
  doCheckPoint(context,masterParams);
  LOG.info(""String_Node_Str"",weightedTrainCount,weightedValidationCount,trainError,validationError);
  return masterParams;
}","/** 
 * If earlyStopEnabled is true, the early stop feature will be enabled
 */
@Override public DTMasterParams doCompute(MasterContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return buildInitialMasterParams();
  }
  if (this.cpMasterParams != null) {
    DTMasterParams tmpMasterParams=rebuildRecoverMasterResultDepthList();
    this.cpMasterParams=null;
    if (this.isGBDT) {
      tmpMasterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
      tmpMasterParams.setTmpTrees(this.trees);
    }
    return tmpMasterParams;
  }
  boolean isFirst=false;
  Map<Integer,NodeStats> nodeStatsMap=null;
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  for (  DTWorkerParams params : context.getWorkerResults()) {
    if (!isFirst) {
      isFirst=true;
      nodeStatsMap=params.getNodeStatsMap();
    }
 else {
      Map<Integer,NodeStats> currNodeStatsmap=params.getNodeStatsMap();
      for (      Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
        NodeStats resultNodeStats=entry.getValue();
        mergeNodeStats(resultNodeStats,currNodeStatsmap.get(entry.getKey()));
      }
    }
    trainError+=params.getTrainError();
    validationError+=params.getValidationError();
    weightedTrainCount+=params.getTrainCount();
    weightedValidationCount+=params.getValidationCount();
  }
  for (  Entry<Integer,NodeStats> entry : nodeStatsMap.entrySet()) {
    NodeStats nodeStats=entry.getValue();
    int treeId=nodeStats.getTreeId();
    Node doneNode=Node.getNode(trees.get(treeId).getNode(),nodeStats.getNodeId());
    Map<Integer,double[]> statistics=nodeStats.getFeatureStatistics();
    List<GainInfo> gainList=new ArrayList<GainInfo>();
    for (    Entry<Integer,double[]> gainEntry : statistics.entrySet()) {
      int columnNum=gainEntry.getKey();
      ColumnConfig config=this.columnConfigList.get(columnNum);
      double[] statsArray=gainEntry.getValue();
      GainInfo gainInfo=this.impurity.computeImpurity(statsArray,config);
      if (gainInfo != null) {
        gainList.add(gainInfo);
      }
    }
    GainInfo maxGainInfo=GainInfo.getGainInfoByMaxGain(gainList);
    if (maxGainInfo == null) {
      doneNode.setLeaf(true);
      continue;
    }
    populateGainInfoToNode(treeId,doneNode,maxGainInfo);
    if (this.isLeafWise) {
      boolean isNotSplit=maxGainInfo.getGain() <= 0d;
      if (!isNotSplit) {
        this.toSplitQueue.offer(new TreeNode(treeId,doneNode));
      }
 else {
        LOG.info(""String_Node_Str"",doneNode.getId(),treeId);
      }
    }
 else {
      boolean isLeaf=maxGainInfo.getGain() <= 0d || Node.indexToLevel(doneNode.getId()) == this.maxDepth;
      doneNode.setLeaf(isLeaf);
      splitNodeForLevelWisedTree(isLeaf,treeId,doneNode);
    }
  }
  if (this.isLeafWise) {
    int currSplitIndex=0;
    while (!toSplitQueue.isEmpty() && currSplitIndex < this.maxBatchSplitSize) {
      TreeNode treeNode=this.toSplitQueue.poll();
      splitNodeForLeafWisedTree(treeNode.getTreeId(),treeNode.getNode());
    }
  }
  Map<Integer,TreeNode> todoNodes=new HashMap<Integer,TreeNode>();
  DTMasterParams masterParams=new DTMasterParams(weightedTrainCount,trainError,weightedValidationCount,validationError);
  if (toDoQueue.isEmpty()) {
    if (this.isGBDT) {
      TreeNode treeNode=this.trees.get(this.trees.size() - 1);
      Node node=treeNode.getNode();
      if (this.trees.size() == this.treeNum + this.existingTreeSize) {
        masterParams.setHalt(true);
        LOG.info(""String_Node_Str"",context.getCurrentIteration());
      }
 else       if (node.getLeft() == null && node.getRight() == null) {
        masterParams.setHalt(true);
        LOG.warn(""String_Node_Str"",context.getCurrentIteration());
      }
 else {
        masterParams.setFirstTree(this.trees.size() == 1);
        treeNode.setFeatures(null);
        TreeNode newRootNode=new TreeNode(this.trees.size(),new Node(Node.ROOT_INDEX),this.learningRate);
        LOG.info(""String_Node_Str"",this.trees.size());
        this.trees.add(newRootNode);
        newRootNode.setFeatures(getSubsamplingFeatures(this.featureSubsetStrategy));
        todoNodes.put(0,newRootNode);
        masterParams.setTodoNodes(todoNodes);
        masterParams.setSwitchToNextTree(true);
      }
    }
 else {
      masterParams.setHalt(true);
      LOG.info(""String_Node_Str"",context.getCurrentIteration());
    }
  }
 else {
    int nodeIndexInGroup=0;
    long currMem=0L;
    List<Integer> depthList=new ArrayList<Integer>();
    if (this.isGBDT) {
      depthList.add(-1);
    }
    if (isRF) {
      for (int i=0; i < this.trees.size(); i++) {
        depthList.add(-1);
      }
    }
    while (!toDoQueue.isEmpty() && currMem <= this.maxStatsMemory) {
      TreeNode node=this.toDoQueue.poll();
      int treeId=node.getTreeId();
      int oldDepth=this.isGBDT ? depthList.get(0) : depthList.get(treeId);
      int currDepth=Node.indexToLevel(node.getNode().getId());
      if (currDepth > oldDepth) {
        if (this.isGBDT) {
          depthList.set(0,currDepth);
        }
 else {
          depthList.set(treeId,currDepth);
        }
      }
      List<Integer> subsetFeatures=getSubsamplingFeatures(featureSubsetStrategy);
      node.setFeatures(subsetFeatures);
      currMem+=getStatsMem(subsetFeatures);
      todoNodes.put(nodeIndexInGroup,node);
      nodeIndexInGroup+=1;
    }
    masterParams.setTreeDepth(depthList);
    masterParams.setTodoNodes(todoNodes);
    masterParams.setSwitchToNextTree(false);
    masterParams.setContinuousRunningStart(false);
    masterParams.setFirstTree(this.trees.size() == 1);
    LOG.info(""String_Node_Str"",todoNodes.size());
  }
  if (this.isGBDT) {
    if (masterParams.isSwitchToNextTree()) {
      masterParams.setTrees(trees.subList(trees.size() - 2,trees.size()));
    }
 else {
      masterParams.setTrees(trees.subList(trees.size() - 1,trees.size()));
    }
  }
  if (this.isRF) {
    if (masterParams.getTreeDepth().size() == this.trees.size()) {
      List<TreeNode> todoTrees=new ArrayList<TreeNode>();
      for (int i=0; i < trees.size(); i++) {
        if (masterParams.getTreeDepth().get(i) >= 0) {
          todoTrees.add(trees.get(i));
        }
 else {
          todoTrees.add(new TreeNode(i,new Node(Node.INVALID_INDEX),1d));
        }
      }
      masterParams.setTrees(todoTrees);
    }
 else {
      masterParams.setTrees(trees);
    }
  }
  if (this.isGBDT) {
    masterParams.setTmpTrees(this.trees);
  }
  doCheckPoint(context,masterParams);
  LOG.info(""String_Node_Str"",weightedTrainCount,weightedValidationCount,trainError,validationError);
  return masterParams;
}",0.9646730709637434
31948,"@Override public Map<Integer,NodeStats> call() throws Exception {
  List<Integer> nodeIndexes=new ArrayList<Integer>(trees.size());
  for (  Data data : DTWorker.this.trainingData) {
    nodeIndexes.clear();
    if (DTWorker.this.isRF) {
      for (      TreeNode treeNode : trees) {
        Node predictNode=predictNodeIndex(treeNode.getNode(),data,false);
        nodeIndexes.add(predictNode.getId());
      }
    }
    if (DTWorker.this.isGBDT) {
      int currTreeIndex=trees.size() - 1;
      Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,false);
      nodeIndexes.add(predictNode.getId());
    }
    for (    Map.Entry<Integer,TreeNode> entry : localTodoNodes.entrySet()) {
      Node todoNode=entry.getValue().getNode();
      int treeId=entry.getValue().getTreeId();
      int currPredictIndex=0;
      if (DTWorker.this.isRF) {
        currPredictIndex=nodeIndexes.get(entry.getValue().getTreeId());
      }
      if (DTWorker.this.isGBDT) {
        currPredictIndex=nodeIndexes.get(0);
      }
      if (todoNode.getId() == currPredictIndex) {
        List<Integer> features=entry.getValue().getFeatures();
        if (features.isEmpty()) {
          features=getAllValidFeatures();
        }
        for (        Integer columnNum : features) {
          double[] featuerStatistic=localStatistics.get(entry.getKey()).getFeatureStatistics().get(columnNum);
          float weight=data.subsampleWeights[treeId % data.subsampleWeights.length];
          if (Float.compare(weight,0f) != 0) {
            short binIndex=data.inputs[DTWorker.this.inputIndexMap.get(columnNum)];
            DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
          }
        }
      }
    }
  }
  return localStatistics;
}","@Override public Map<Integer,NodeStats> call() throws Exception {
  List<Integer> nodeIndexes=new ArrayList<Integer>(trees.size());
  for (  Data data : DTWorker.this.trainingData) {
    nodeIndexes.clear();
    if (DTWorker.this.isRF) {
      for (      TreeNode treeNode : trees) {
        if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
          nodeIndexes.add(Node.INVALID_INDEX);
        }
 else {
          Node predictNode=predictNodeIndex(treeNode.getNode(),data,false);
          nodeIndexes.add(predictNode.getId());
        }
      }
    }
    if (DTWorker.this.isGBDT) {
      int currTreeIndex=trees.size() - 1;
      Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,false);
      nodeIndexes.add(predictNode.getId());
    }
    for (    Map.Entry<Integer,TreeNode> entry : localTodoNodes.entrySet()) {
      Node todoNode=entry.getValue().getNode();
      int treeId=entry.getValue().getTreeId();
      int currPredictIndex=0;
      if (DTWorker.this.isRF) {
        currPredictIndex=nodeIndexes.get(entry.getValue().getTreeId());
      }
      if (DTWorker.this.isGBDT) {
        currPredictIndex=nodeIndexes.get(0);
      }
      if (todoNode.getId() == currPredictIndex) {
        List<Integer> features=entry.getValue().getFeatures();
        if (features.isEmpty()) {
          features=getAllValidFeatures();
        }
        for (        Integer columnNum : features) {
          double[] featuerStatistic=localStatistics.get(entry.getKey()).getFeatureStatistics().get(columnNum);
          float weight=data.subsampleWeights[treeId % data.subsampleWeights.length];
          if (Float.compare(weight,0f) != 0) {
            short binIndex=data.inputs[DTWorker.this.inputIndexMap.get(columnNum)];
            DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
          }
        }
      }
    }
  }
  return localStatistics;
}",0.9616313388784544
31949,"@Override public DTWorkerParams doCompute(WorkerContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return new DTWorkerParams();
  }
  DTMasterParams lastMasterResult=context.getLastMasterResult();
  final List<TreeNode> trees=lastMasterResult.getTrees();
  final Map<Integer,TreeNode> todoNodes=lastMasterResult.getTodoNodes();
  if (todoNodes == null) {
    return new DTWorkerParams();
  }
  Map<Integer,NodeStats> statistics=initTodoNodeStats(todoNodes);
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  if (this.isGBDT && !this.gbdtSampleWithReplacement && lastMasterResult.isSwitchToNextTree()) {
    this.random=new Random();
  }
  for (  Data data : this.trainingData) {
    if (this.isRF) {
      for (      TreeNode treeNode : trees) {
        Node predictNode=predictNodeIndex(treeNode.getNode(),data,true);
        if (predictNode.getPredict() != null) {
          float weight=data.subsampleWeights[treeNode.getTreeId()];
          if (Float.compare(weight,0f) == 0) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
 else {
            trainError+=weight * data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=weight * data.significance;
          }
        }
      }
    }
    if (this.isGBDT) {
      if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
        recoverGBTData(context,data.output,data.predict,data,false);
        trainError+=data.significance * loss.computeError(data.predict,data.label);
        weightedTrainCount+=data.significance;
      }
 else {
        if (isNeedRecoverGBDTPredict) {
          if (this.recoverTrees == null) {
            this.recoverTrees=recoverCurrentTrees();
          }
          recoverGBTData(context,data.output,data.predict,data,true);
        }
        int currTreeIndex=trees.size() - 1;
        if (lastMasterResult.isSwitchToNextTree()) {
          if (currTreeIndex >= 1) {
            Node node=trees.get(currTreeIndex - 1).getNode();
            Node predictNode=predictNodeIndex(node,data,false);
            if (predictNode.getPredict() != null) {
              double predict=predictNode.getPredict().getPredict();
              if (context.getLastMasterResult().isFirstTree()) {
                data.predict=(float)predict;
              }
 else {
                data.predict+=(float)(this.learningRate * predict);
              }
              data.output=-1f * loss.computeGradient(data.predict,data.label);
            }
            if (!this.gbdtSampleWithReplacement) {
              if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
              }
 else {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
              }
            }
          }
        }
        if (context.getLastMasterResult().isFirstTree() && !lastMasterResult.isSwitchToNextTree()) {
          Node currTree=trees.get(currTreeIndex).getNode();
          Node predictNode=predictNodeIndex(currTree,data,true);
          if (predictNode.getPredict() != null) {
            trainError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=data.significance;
          }
        }
 else {
          trainError+=data.significance * loss.computeError(data.predict,data.label);
          weightedTrainCount+=data.significance;
        }
      }
    }
  }
  if (validationData != null) {
    for (    Data data : this.validationData) {
      if (this.isRF) {
        for (        TreeNode treeNode : trees) {
          Node predictNode=predictNodeIndex(treeNode.getNode(),data,true);
          if (predictNode.getPredict() != null) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
      if (this.isGBDT) {
        if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
          recoverGBTData(context,data.output,data.predict,data,false);
          validationError+=data.significance * loss.computeError(data.predict,data.label);
          weightedValidationCount+=data.significance;
        }
 else {
          if (isNeedRecoverGBDTPredict) {
            if (this.recoverTrees == null) {
              this.recoverTrees=recoverCurrentTrees();
            }
            recoverGBTData(context,data.output,data.predict,data,true);
          }
          int currTreeIndex=trees.size() - 1;
          if (lastMasterResult.isSwitchToNextTree()) {
            if (currTreeIndex >= 1) {
              Node node=trees.get(currTreeIndex - 1).getNode();
              Node predictNode=predictNodeIndex(node,data,false);
              if (predictNode.getPredict() != null) {
                double predict=predictNode.getPredict().getPredict();
                if (context.getLastMasterResult().isFirstTree()) {
                  data.predict=(float)predict;
                }
 else {
                  data.predict+=(float)(this.learningRate * predict);
                }
                data.output=-1f * loss.computeGradient(data.predict,data.label);
              }
              if (!this.gbdtSampleWithReplacement) {
                if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                  data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
                }
 else {
                  data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
                }
              }
            }
          }
          if (context.getLastMasterResult().isFirstTree() && !lastMasterResult.isSwitchToNextTree()) {
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,true);
            if (predictNode.getPredict() != null) {
              validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
              weightedValidationCount+=data.significance;
            }
          }
 else {
            validationError+=data.significance * loss.computeError(data.predict,data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
    }
  }
  if (this.isGBDT && this.isNeedRecoverGBDTPredict) {
    this.isNeedRecoverGBDTPredict=false;
    this.recoverTrees=null;
  }
  CompletionService<Map<Integer,NodeStats>> completionService=new ExecutorCompletionService<Map<Integer,NodeStats>>(this.threadPool);
  Set<Entry<Integer,TreeNode>> treeNodeEntrySet=todoNodes.entrySet();
  Iterator<Entry<Integer,TreeNode>> treeNodeIterator=treeNodeEntrySet.iterator();
  int roundNodeNumer=treeNodeEntrySet.size() / this.workerThreadCount;
  int modeNodeNumber=treeNodeEntrySet.size() % this.workerThreadCount;
  int realThreadCount=0;
  LOG.info(""String_Node_Str"",todoNodes.size());
  for (int i=0; i < this.workerThreadCount; i++) {
    final Map<Integer,TreeNode> localTodoNodes=new HashMap<Integer,TreeNode>();
    final Map<Integer,NodeStats> localStatistics=new HashMap<Integer,DTWorkerParams.NodeStats>();
    for (int j=0; j < roundNodeNumer; j++) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
    }
    if (modeNodeNumber > 0) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
      modeNodeNumber-=1;
    }
    LOG.info(""String_Node_Str"",i,localTodoNodes.size(),localStatistics.size());
    if (localTodoNodes.size() == 0) {
      continue;
    }
    realThreadCount+=1;
    completionService.submit(new Callable<Map<Integer,NodeStats>>(){
      @Override public Map<Integer,NodeStats> call() throws Exception {
        List<Integer> nodeIndexes=new ArrayList<Integer>(trees.size());
        for (        Data data : DTWorker.this.trainingData) {
          nodeIndexes.clear();
          if (DTWorker.this.isRF) {
            for (            TreeNode treeNode : trees) {
              Node predictNode=predictNodeIndex(treeNode.getNode(),data,false);
              nodeIndexes.add(predictNode.getId());
            }
          }
          if (DTWorker.this.isGBDT) {
            int currTreeIndex=trees.size() - 1;
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,false);
            nodeIndexes.add(predictNode.getId());
          }
          for (          Map.Entry<Integer,TreeNode> entry : localTodoNodes.entrySet()) {
            Node todoNode=entry.getValue().getNode();
            int treeId=entry.getValue().getTreeId();
            int currPredictIndex=0;
            if (DTWorker.this.isRF) {
              currPredictIndex=nodeIndexes.get(entry.getValue().getTreeId());
            }
            if (DTWorker.this.isGBDT) {
              currPredictIndex=nodeIndexes.get(0);
            }
            if (todoNode.getId() == currPredictIndex) {
              List<Integer> features=entry.getValue().getFeatures();
              if (features.isEmpty()) {
                features=getAllValidFeatures();
              }
              for (              Integer columnNum : features) {
                double[] featuerStatistic=localStatistics.get(entry.getKey()).getFeatureStatistics().get(columnNum);
                float weight=data.subsampleWeights[treeId % data.subsampleWeights.length];
                if (Float.compare(weight,0f) != 0) {
                  short binIndex=data.inputs[DTWorker.this.inputIndexMap.get(columnNum)];
                  DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
                }
              }
            }
          }
        }
        return localStatistics;
      }
    }
);
  }
  int rCnt=0;
  while (rCnt < realThreadCount) {
    try {
      statistics.putAll(completionService.take().get());
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    rCnt+=1;
  }
  LOG.info(""String_Node_Str"",count,trainError,statistics.size(),weightedTrainCount,weightedValidationCount,trainError,validationError);
  return new DTWorkerParams(weightedTrainCount,weightedValidationCount,trainError,validationError,statistics);
}","@Override public DTWorkerParams doCompute(WorkerContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return new DTWorkerParams();
  }
  DTMasterParams lastMasterResult=context.getLastMasterResult();
  final List<TreeNode> trees=lastMasterResult.getTrees();
  final Map<Integer,TreeNode> todoNodes=lastMasterResult.getTodoNodes();
  if (todoNodes == null) {
    return new DTWorkerParams();
  }
  Map<Integer,NodeStats> statistics=initTodoNodeStats(todoNodes);
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  if (this.isGBDT && !this.gbdtSampleWithReplacement && lastMasterResult.isSwitchToNextTree()) {
    this.random=new Random();
  }
  for (  Data data : this.trainingData) {
    if (this.isRF) {
      for (      TreeNode treeNode : trees) {
        if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
          continue;
        }
        Node predictNode=predictNodeIndex(treeNode.getNode(),data,true);
        if (predictNode.getPredict() != null) {
          float weight=data.subsampleWeights[treeNode.getTreeId()];
          if (Float.compare(weight,0f) == 0) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
 else {
            trainError+=weight * data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=weight * data.significance;
          }
        }
      }
    }
    if (this.isGBDT) {
      if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
        recoverGBTData(context,data.output,data.predict,data,false);
        trainError+=data.significance * loss.computeError(data.predict,data.label);
        weightedTrainCount+=data.significance;
      }
 else {
        if (isNeedRecoverGBDTPredict) {
          if (this.recoverTrees == null) {
            this.recoverTrees=recoverCurrentTrees();
          }
          recoverGBTData(context,data.output,data.predict,data,true);
        }
        int currTreeIndex=trees.size() - 1;
        if (lastMasterResult.isSwitchToNextTree()) {
          if (currTreeIndex >= 1) {
            Node node=trees.get(currTreeIndex - 1).getNode();
            Node predictNode=predictNodeIndex(node,data,false);
            if (predictNode.getPredict() != null) {
              double predict=predictNode.getPredict().getPredict();
              if (context.getLastMasterResult().isFirstTree()) {
                data.predict=(float)predict;
              }
 else {
                data.predict+=(float)(this.learningRate * predict);
              }
              data.output=-1f * loss.computeGradient(data.predict,data.label);
            }
            if (!this.gbdtSampleWithReplacement) {
              if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
              }
 else {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
              }
            }
          }
        }
        if (context.getLastMasterResult().isFirstTree() && !lastMasterResult.isSwitchToNextTree()) {
          Node currTree=trees.get(currTreeIndex).getNode();
          Node predictNode=predictNodeIndex(currTree,data,true);
          if (predictNode.getPredict() != null) {
            trainError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=data.significance;
          }
        }
 else {
          trainError+=data.significance * loss.computeError(data.predict,data.label);
          weightedTrainCount+=data.significance;
        }
      }
    }
  }
  if (validationData != null) {
    for (    Data data : this.validationData) {
      if (this.isRF) {
        for (        TreeNode treeNode : trees) {
          if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
            continue;
          }
          Node predictNode=predictNodeIndex(treeNode.getNode(),data,true);
          if (predictNode.getPredict() != null) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
      if (this.isGBDT) {
        if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
          recoverGBTData(context,data.output,data.predict,data,false);
          validationError+=data.significance * loss.computeError(data.predict,data.label);
          weightedValidationCount+=data.significance;
        }
 else {
          if (isNeedRecoverGBDTPredict) {
            if (this.recoverTrees == null) {
              this.recoverTrees=recoverCurrentTrees();
            }
            recoverGBTData(context,data.output,data.predict,data,true);
          }
          int currTreeIndex=trees.size() - 1;
          if (lastMasterResult.isSwitchToNextTree()) {
            if (currTreeIndex >= 1) {
              Node node=trees.get(currTreeIndex - 1).getNode();
              Node predictNode=predictNodeIndex(node,data,false);
              if (predictNode.getPredict() != null) {
                double predict=predictNode.getPredict().getPredict();
                if (context.getLastMasterResult().isFirstTree()) {
                  data.predict=(float)predict;
                }
 else {
                  data.predict+=(float)(this.learningRate * predict);
                }
                data.output=-1f * loss.computeGradient(data.predict,data.label);
              }
              if (!this.gbdtSampleWithReplacement) {
                if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                  data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
                }
 else {
                  data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
                }
              }
            }
          }
          if (context.getLastMasterResult().isFirstTree() && !lastMasterResult.isSwitchToNextTree()) {
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,true);
            if (predictNode.getPredict() != null) {
              validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
              weightedValidationCount+=data.significance;
            }
          }
 else {
            validationError+=data.significance * loss.computeError(data.predict,data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
    }
  }
  if (this.isGBDT && this.isNeedRecoverGBDTPredict) {
    this.isNeedRecoverGBDTPredict=false;
    this.recoverTrees=null;
  }
  CompletionService<Map<Integer,NodeStats>> completionService=new ExecutorCompletionService<Map<Integer,NodeStats>>(this.threadPool);
  Set<Entry<Integer,TreeNode>> treeNodeEntrySet=todoNodes.entrySet();
  Iterator<Entry<Integer,TreeNode>> treeNodeIterator=treeNodeEntrySet.iterator();
  int roundNodeNumer=treeNodeEntrySet.size() / this.workerThreadCount;
  int modeNodeNumber=treeNodeEntrySet.size() % this.workerThreadCount;
  int realThreadCount=0;
  LOG.info(""String_Node_Str"",todoNodes.size());
  for (int i=0; i < this.workerThreadCount; i++) {
    final Map<Integer,TreeNode> localTodoNodes=new HashMap<Integer,TreeNode>();
    final Map<Integer,NodeStats> localStatistics=new HashMap<Integer,DTWorkerParams.NodeStats>();
    for (int j=0; j < roundNodeNumer; j++) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
    }
    if (modeNodeNumber > 0) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
      modeNodeNumber-=1;
    }
    LOG.info(""String_Node_Str"",i,localTodoNodes.size(),localStatistics.size());
    if (localTodoNodes.size() == 0) {
      continue;
    }
    realThreadCount+=1;
    completionService.submit(new Callable<Map<Integer,NodeStats>>(){
      @Override public Map<Integer,NodeStats> call() throws Exception {
        List<Integer> nodeIndexes=new ArrayList<Integer>(trees.size());
        for (        Data data : DTWorker.this.trainingData) {
          nodeIndexes.clear();
          if (DTWorker.this.isRF) {
            for (            TreeNode treeNode : trees) {
              if (treeNode.getNode().getId() == Node.INVALID_INDEX) {
                nodeIndexes.add(Node.INVALID_INDEX);
              }
 else {
                Node predictNode=predictNodeIndex(treeNode.getNode(),data,false);
                nodeIndexes.add(predictNode.getId());
              }
            }
          }
          if (DTWorker.this.isGBDT) {
            int currTreeIndex=trees.size() - 1;
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data,false);
            nodeIndexes.add(predictNode.getId());
          }
          for (          Map.Entry<Integer,TreeNode> entry : localTodoNodes.entrySet()) {
            Node todoNode=entry.getValue().getNode();
            int treeId=entry.getValue().getTreeId();
            int currPredictIndex=0;
            if (DTWorker.this.isRF) {
              currPredictIndex=nodeIndexes.get(entry.getValue().getTreeId());
            }
            if (DTWorker.this.isGBDT) {
              currPredictIndex=nodeIndexes.get(0);
            }
            if (todoNode.getId() == currPredictIndex) {
              List<Integer> features=entry.getValue().getFeatures();
              if (features.isEmpty()) {
                features=getAllValidFeatures();
              }
              for (              Integer columnNum : features) {
                double[] featuerStatistic=localStatistics.get(entry.getKey()).getFeatureStatistics().get(columnNum);
                float weight=data.subsampleWeights[treeId % data.subsampleWeights.length];
                if (Float.compare(weight,0f) != 0) {
                  short binIndex=data.inputs[DTWorker.this.inputIndexMap.get(columnNum)];
                  DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
                }
              }
            }
          }
        }
        return localStatistics;
      }
    }
);
  }
  int rCnt=0;
  while (rCnt < realThreadCount) {
    try {
      statistics.putAll(completionService.take().get());
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    rCnt+=1;
  }
  LOG.info(""String_Node_Str"",count,trainError,statistics.size(),weightedTrainCount,weightedValidationCount,trainError,validationError);
  return new DTWorkerParams(weightedTrainCount,weightedValidationCount,trainError,validationError,statistics);
}",0.9812440966131426
31950,"/** 
 * For RF/GBT model, no need do normalizing, but clean and filter data is needed. Before real training, we have to clean and filter data.
 */
private void checkAndCleanDataForTreeModels() throws IOException {
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  if (!CommonUtils.isDesicionTreeAlgorithm(alg)) {
    return;
  }
  SourceType sourceType=modelConfig.getDataSet().getSource();
  String cleanedDataPath=super.pathFinder.getCleanedDataPath();
  String needReGen=Environment.getProperty(""String_Node_Str"",Boolean.FALSE.toString());
  if (ShifuFileUtils.isFileExists(cleanedDataPath,sourceType) && Boolean.FALSE.toString().equalsIgnoreCase(needReGen)) {
    LOG.warn(""String_Node_Str"",cleanedDataPath);
    LOG.warn(""String_Node_Str"");
  }
 else {
    LOG.info(""String_Node_Str"");
    if (ShifuFileUtils.isFileExists(cleanedDataPath,sourceType)) {
      ShifuFileUtils.deleteFile(cleanedDataPath,sourceType);
    }
    String cleandedValidationDataPath=pathFinder.getCleanedValidationDataPath();
    if (ShifuFileUtils.isFileExists(cleandedValidationDataPath,sourceType)) {
      ShifuFileUtils.deleteFile(cleandedValidationDataPath,sourceType);
    }
    Map<String,String> paramsMap=new HashMap<String,String>();
    paramsMap.put(""String_Node_Str"",modelConfig.getNormalizeSampleRate().toString());
    paramsMap.put(""String_Node_Str"",((Boolean)modelConfig.isNormalizeSampleNegOnly()).toString());
    paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
    try {
      String normPigPath=pathFinder.getScriptPath(""String_Node_Str"");
      paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
      paramsMap.put(Constants.IS_NORM_FOR_CLEAN,""String_Node_Str"");
      paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getCleanedDataPath());
      PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,sourceType,super.pathFinder);
      if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
        paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
        paramsMap.put(Constants.PATH_RAW_DATA,modelConfig.getValidationDataSetRawPath());
        paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getCleanedValidationDataPath());
        PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,sourceType,super.pathFinder);
      }
    }
 catch (    IOException e) {
      throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
    }
catch (    Throwable e) {
      throw new RuntimeException(e);
    }
    LOG.info(""String_Node_Str"");
  }
}","/** 
 * For RF/GBT model, no need do normalizing, but clean and filter data is needed. Before real training, we have to clean and filter data.
 */
private void checkAndCleanDataForTreeModels() throws IOException {
  String alg=super.getModelConfig().getTrain().getAlgorithm();
  if (!CommonUtils.isDesicionTreeAlgorithm(alg)) {
    return;
  }
  SourceType sourceType=modelConfig.getDataSet().getSource();
  String cleanedDataPath=super.pathFinder.getCleanedDataPath();
  String needReGen=Environment.getProperty(""String_Node_Str"",Boolean.FALSE.toString());
  if (Boolean.TRUE.toString().equalsIgnoreCase(needReGen) || !ShifuFileUtils.isFileExists(cleanedDataPath,sourceType) || (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath()) && !ShifuFileUtils.isFileExists(pathFinder.getCleanedValidationDataPath(),sourceType))) {
    LOG.info(""String_Node_Str"");
    if (ShifuFileUtils.isFileExists(cleanedDataPath,sourceType)) {
      ShifuFileUtils.deleteFile(cleanedDataPath,sourceType);
    }
    String cleandedValidationDataPath=pathFinder.getCleanedValidationDataPath();
    if (ShifuFileUtils.isFileExists(cleandedValidationDataPath,sourceType)) {
      ShifuFileUtils.deleteFile(cleandedValidationDataPath,sourceType);
    }
    Map<String,String> paramsMap=new HashMap<String,String>();
    paramsMap.put(""String_Node_Str"",modelConfig.getNormalizeSampleRate().toString());
    paramsMap.put(""String_Node_Str"",((Boolean)modelConfig.isNormalizeSampleNegOnly()).toString());
    paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
    try {
      String normPigPath=pathFinder.getScriptPath(""String_Node_Str"");
      paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
      paramsMap.put(Constants.IS_NORM_FOR_CLEAN,""String_Node_Str"");
      paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getCleanedDataPath());
      PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,sourceType,super.pathFinder);
      if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
        paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
        paramsMap.put(Constants.PATH_RAW_DATA,modelConfig.getValidationDataSetRawPath());
        paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getCleanedValidationDataPath());
        PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,sourceType,super.pathFinder);
      }
    }
 catch (    IOException e) {
      throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
    }
catch (    Throwable e) {
      throw new RuntimeException(e);
    }
    LOG.info(""String_Node_Str"");
  }
 else {
    LOG.warn(""String_Node_Str"",cleanedDataPath);
    LOG.warn(""String_Node_Str"");
  }
}",0.9193337076548757
31951,"protected void addCrossValidationDataset(List<InputSplit> trainingSplit,JobContext context) throws IOException {
  List<InputSplit> trainingNoMaster=new ArrayList<InputSplit>();
  for (  InputSplit split : trainingSplit) {
    GuaguaInputSplit guaguaInput=(GuaguaInputSplit)split;
    if (guaguaInput.isMaster()) {
      continue;
    }
    trainingNoMaster.add(guaguaInput);
  }
  List<List<FileSplit>> csSplits=this.getCrossValidationSplits(context,trainingNoMaster.size());
  for (int i=0; i < csSplits.size(); i++) {
    List<FileSplit> oneInput=csSplits.get(i);
    GuaguaInputSplit guaguaInput=(GuaguaInputSplit)trainingNoMaster.get(i);
    int trainingSize=guaguaInput.getFileSplits().length;
    FileSplit[] finalSplits=(FileSplit[])ArrayUtils.addAll(guaguaInput.getFileSplits(),oneInput.toArray(new FileSplit[0]));
    guaguaInput.setFileSplits(finalSplits);
    Boolean[] validationFlags=new Boolean[finalSplits.length];
    for (int j=0; j < finalSplits.length; j++) {
      validationFlags[j]=j < trainingSize ? false : true;
    }
    guaguaInput.setExtensions(validationFlags);
  }
  LOG.info(""String_Node_Str"" + trainingSplit.size());
  LOG.info(""String_Node_Str"" + csSplits.size());
}","protected void addCrossValidationDataset(List<InputSplit> trainingSplit,JobContext context) throws IOException {
  List<InputSplit> trainingNoMaster=new ArrayList<InputSplit>();
  for (  InputSplit split : trainingSplit) {
    GuaguaInputSplit guaguaInput=(GuaguaInputSplit)split;
    if (guaguaInput.isMaster()) {
      continue;
    }
    trainingNoMaster.add(guaguaInput);
  }
  List<List<FileSplit>> csSplits=this.getCrossValidationSplits(context,trainingNoMaster.size());
  for (int i=0; i < csSplits.size(); i++) {
    List<FileSplit> oneInput=csSplits.get(i);
    GuaguaInputSplit guaguaInput=(GuaguaInputSplit)trainingNoMaster.get(i);
    int trainingSize=guaguaInput.getFileSplits().length;
    FileSplit[] finalSplits=(FileSplit[])ArrayUtils.addAll(guaguaInput.getFileSplits(),oneInput.toArray(new FileSplit[0]));
    guaguaInput.setFileSplits(finalSplits);
    Boolean[] validationFlags=new Boolean[finalSplits.length];
    for (int j=0; j < finalSplits.length; j++) {
      validationFlags[j]=j < trainingSize ? false : true;
    }
    guaguaInput.setExtensions(validationFlags);
  }
  LOG.info(""String_Node_Str"",trainingSplit.size());
  LOG.info(""String_Node_Str"",csSplits.size());
}",0.996661101836394
31952,"/** 
 * Splitter building logic including master setting, also includes combining input feature like Pig.
 */
@Override public List<InputSplit> getSplits(JobContext job) throws IOException {
  List<InputSplit> newSplits=super.getSplits(job);
  String testDirs=job.getConfiguration().get(""String_Node_Str"",""String_Node_Str"");
  LOG.info(""String_Node_Str"" + testDirs);
  if (org.apache.commons.lang.StringUtils.isNotBlank(testDirs)) {
    this.addCrossValidationDataset(newSplits,job);
  }
  return newSplits;
}","/** 
 * Splitter building logic including master setting, also includes combining input feature like Pig.
 */
@Override public List<InputSplit> getSplits(JobContext job) throws IOException {
  List<InputSplit> newSplits=super.getSplits(job);
  String testDirs=job.getConfiguration().get(""String_Node_Str"",""String_Node_Str"");
  LOG.info(""String_Node_Str"",testDirs);
  if (org.apache.commons.lang.StringUtils.isNotBlank(testDirs)) {
    this.addCrossValidationDataset(newSplits,job);
  }
  return newSplits;
}",0.9960629921259844
31953,"protected List<List<FileSplit>> getCrossValidationSplits(JobContext job,int count) throws IOException {
  LOG.info(""String_Node_Str"",count);
  List<FileStatus> files=listCrossValidationStatus(job);
  List<FileSplit> current=new ArrayList<FileSplit>();
  List<List<FileSplit>> validationList=new ArrayList<List<FileSplit>>();
  long lengthSum=0L;
  for (  FileStatus file : files) {
    Path path=file.getPath();
    if (isPigOrHadoopMetaFile(path)) {
      continue;
    }
    lengthSum+=file.getLen();
  }
  long size=lengthSum / count + 1;
  long remaining=0L;
  for (  FileStatus file : files) {
    Path path=file.getPath();
    if (isPigOrHadoopMetaFile(path)) {
      continue;
    }
    FileSystem fs=path.getFileSystem(job.getConfiguration());
    long offset=0L;
    long length=file.getLen();
    if (length + remaining >= size) {
      long cut=(size - remaining) >= length ? length : (size - remaining);
      current.add(getFileSplit(fs,file,offset,cut));
      offset=cut;
      remaining=length - cut;
      validationList.add(current);
      current=new ArrayList<FileSplit>();
      while (remaining >= size) {
        current.add(getFileSplit(fs,file,offset,size));
        validationList.add(current);
        current=new ArrayList<FileSplit>();
        remaining-=size;
        offset+=size;
      }
      if (remaining > 0) {
        current.add(getFileSplit(fs,file,offset,remaining));
      }
    }
 else {
      current.add(getFileSplit(fs,file,0,length));
      remaining+=length;
    }
  }
  if (current.size() > 0) {
    validationList.add(current);
  }
  LOG.info(""String_Node_Str"",validationList.size());
  return validationList;
}","protected List<List<FileSplit>> getCrossValidationSplits(JobContext job,int count) throws IOException {
  LOG.debug(""String_Node_Str"",count);
  List<FileStatus> files=listCrossValidationStatus(job);
  List<FileSplit> current=new ArrayList<FileSplit>();
  List<List<FileSplit>> validationList=new ArrayList<List<FileSplit>>();
  long lengthSum=0L;
  for (  FileStatus file : files) {
    Path path=file.getPath();
    if (isPigOrHadoopMetaFile(path)) {
      continue;
    }
    lengthSum+=file.getLen();
  }
  long size=lengthSum / count + 1;
  long remaining=0L;
  for (  FileStatus file : files) {
    Path path=file.getPath();
    if (isPigOrHadoopMetaFile(path)) {
      continue;
    }
    FileSystem fs=path.getFileSystem(job.getConfiguration());
    long offset=0L;
    long length=file.getLen();
    if (length + remaining >= size) {
      long cut=(size - remaining) >= length ? length : (size - remaining);
      current.add(getFileSplit(fs,file,offset,cut));
      offset=cut;
      remaining=length - cut;
      validationList.add(current);
      current=new ArrayList<FileSplit>();
      while (remaining >= size) {
        current.add(getFileSplit(fs,file,offset,size));
        validationList.add(current);
        current=new ArrayList<FileSplit>();
        remaining-=size;
        offset+=size;
      }
      if (remaining > 0) {
        current.add(getFileSplit(fs,file,offset,remaining));
      }
    }
 else {
      current.add(getFileSplit(fs,file,0,length));
      remaining+=length;
    }
  }
  if (current.size() > 0) {
    validationList.add(current);
  }
  LOG.debug(""String_Node_Str"",validationList.size());
  return validationList;
}",0.9945815773630344
31954,"@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  final String rawTag=input.get(tagColumnNum).toString();
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(config.getColumnName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        int index=config.getBinCategory().indexOf(val);
        if (index == -1) {
          tuple.append(""String_Node_Str"");
        }
 else {
          tuple.append(val);
        }
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (!CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        if (config.isMeta()) {
          tuple.append(val);
        }
 else {
          tuple.append(null);
        }
      }
 else {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType);
        tuple.append(df.format(normVal));
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}","@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  final String rawTag=input.get(tagColumnNum).toString();
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(config.getColumnName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        if (config.getBinCategory() != null) {
          int index=config.getBinCategory().indexOf(val);
          if (index == -1) {
            tuple.append(""String_Node_Str"");
          }
 else {
            tuple.append(val);
          }
        }
 else {
          tuple.append(val);
        }
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (!CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        if (config.isMeta()) {
          tuple.append(val);
        }
 else {
          tuple.append(null);
        }
      }
 else {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType);
        tuple.append(df.format(normVal));
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}",0.9810147299509
31955,"public static boolean isHadoopConfigurationInjected(String key){
  return key.startsWith(""String_Node_Str"") || key.startsWith(""String_Node_Str"") || key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"");
}","public static boolean isHadoopConfigurationInjected(String key){
  return key.startsWith(""String_Node_Str"") || key.startsWith(""String_Node_Str"") || key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"")|| key.startsWith(""String_Node_Str"");
}",0.8586387434554974
31956,"public DTEarlyStopDecider(int treeDepth){
  if (treeDepth <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.treeDepth=treeDepth;
  trainErrorDecider=new MinAverageDecider(this.treeDepth,this.treeDepth * this.magicNumber){
    @Override public boolean getDecide(){
      return this.gain < this.maxGain / 1000;
    }
  }
;
  validationErrorDecider=new MinAverageDecider(this.treeDepth,this.treeDepth * this.magicNumber){
    @Override public boolean getDecide(){
      return this.gain < 0;
    }
  }
;
}","public DTEarlyStopDecider(int treeDepth){
  if (treeDepth <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.treeDepth=treeDepth;
  trainErrorDecider=new MinAverageDecider(this.treeDepth,this.treeDepth * MAGIC_NUMBER){
    @Override public boolean getDecide(){
      return this.gain < this.maxGain / 1000;
    }
  }
;
  validationErrorDecider=new MinAverageDecider(this.treeDepth,this.treeDepth * MAGIC_NUMBER){
    @Override public boolean getDecide(){
      return this.gain < 0;
    }
  }
;
}",0.9506641366223908
31957,"private boolean canStop(){
  return this.validationGainContinueNegCount >= magicNumber || this.trainGainContinueLowerCount >= magicNumber;
}","private boolean canStop(){
  return this.validationGainContinueNegCount >= MAGIC_NUMBER || this.trainGainContinueLowerCount >= MAGIC_NUMBER;
}",0.851063829787234
31958,"/** 
 * Get the minimal value in the queue. Should be called when the queue is full.
 * @return the value of the minimal value of the queue
 */
double getQueueMin(){
  double queueMin=this.min;
  this.clear();
  return queueMin;
}","/** 
 * Get the minimal value in the queue. Should be called when the queue is full.
 * @return the value of the minimal value of the queue
 */
@SuppressWarnings(""String_Node_Str"") double getQueueMin(){
  double queueMin=this.min;
  this.clear();
  return queueMin;
}",0.9255533199195172
31959,"/** 
 * run pig mode scoring
 * @param evalConfig
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") private void runPigScore(EvalConfig evalConfig) throws IOException {
  SourceType sourceType=evalConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getEvalNormalizedPath(evalConfig),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getEvalScorePath(evalConfig),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getEvalPerformancePath(evalConfig),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(Constants.SOURCE_TYPE,sourceType.toString());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataPath());
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalNormalizedPath(evalConfig));
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalScorePath(evalConfig));
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalPerformancePath(evalConfig));
  paramsMap.put(""String_Node_Str"",evalConfig.getName());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataDelimiter());
  paramsMap.put(""String_Node_Str"",evalConfig.getPerformanceScoreSelector().trim());
  String pigScript=""String_Node_Str"";
  Map<String,String> confMap=new HashMap<String,String>();
  String maxMinScoreFolder=ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(""String_Node_Str"" + File.separator + ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ new Random().nextLong())).toString();
  confMap.put(Constants.SHIFU_EVAL_MAXMIN_SCORE_OUTPUT,maxMinScoreFolder);
  if (modelConfig.isClassification()) {
    pigScript=""String_Node_Str"";
  }
  try {
    PigExecutor.getExecutor().submitJob(modelConfig,pathFinder.getScriptPath(pigScript),paramsMap,evalConfig.getDataSet().getSource(),confMap,super.pathFinder);
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
  Iterator<JobStats> iter=PigStats.get().getJobGraph().iterator();
  while (iter.hasNext()) {
    JobStats jobStats=iter.next();
    this.evalRecords=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_RECORDS);
    log.info(""String_Node_Str"" + evalRecords);
    if (this.evalRecords == 0L) {
      continue;
    }
    this.pigPosTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_POSTAGS);
    this.pigNegTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_NEGTAGS);
    this.pigPosWeightTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_WPOSTAGS) / (Constants.EVAL_COUNTER_WEIGHT_SCALE * 1.0d);
    this.pigNegWeightTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_WNEGTAGS) / (Constants.EVAL_COUNTER_WEIGHT_SCALE * 1.0d);
    if (modelConfig.isRegression()) {
      locateMaxMinScoreFromFile(sourceType,maxMinScoreFolder);
      ShifuFileUtils.deleteFile(maxMinScoreFolder,sourceType);
    }
    break;
  }
}","/** 
 * run pig mode scoring
 * @param evalConfig
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") private void runPigScore(EvalConfig evalConfig) throws IOException {
  SourceType sourceType=evalConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getEvalNormalizedPath(evalConfig),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getEvalScorePath(evalConfig),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getEvalPerformancePath(evalConfig),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(Constants.SOURCE_TYPE,sourceType.toString());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataPath());
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalNormalizedPath(evalConfig));
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalScorePath(evalConfig));
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalPerformancePath(evalConfig));
  paramsMap.put(""String_Node_Str"",evalConfig.getName());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataDelimiter());
  paramsMap.put(""String_Node_Str"",evalConfig.getPerformanceScoreSelector().trim());
  String pigScript=""String_Node_Str"";
  Map<String,String> confMap=new HashMap<String,String>();
  String maxMinScoreFolder=ShifuFileUtils.getFileSystemBySourceType(sourceType).makeQualified(new Path(""String_Node_Str"" + File.separator + ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ new Random().nextLong())).toString();
  confMap.put(Constants.SHIFU_EVAL_MAXMIN_SCORE_OUTPUT,maxMinScoreFolder);
  if (modelConfig.isClassification()) {
    pigScript=""String_Node_Str"";
  }
  try {
    PigExecutor.getExecutor().submitJob(modelConfig,pathFinder.getScriptPath(pigScript),paramsMap,evalConfig.getDataSet().getSource(),confMap,super.pathFinder);
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
  Iterator<JobStats> iter=PigStats.get().getJobGraph().iterator();
  while (iter.hasNext()) {
    JobStats jobStats=iter.next();
    this.evalRecords=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_RECORDS);
    log.info(""String_Node_Str"",evalRecords);
    if (this.evalRecords == 0L) {
      continue;
    }
    this.pigPosTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_POSTAGS);
    this.pigNegTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_NEGTAGS);
    this.pigPosWeightTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_WPOSTAGS) / (Constants.EVAL_COUNTER_WEIGHT_SCALE * 1.0d);
    this.pigNegWeightTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_WNEGTAGS) / (Constants.EVAL_COUNTER_WEIGHT_SCALE * 1.0d);
    long totalRunTime=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.TOTAL_MODEL_RUNTIME);
    log.info(""String_Node_Str"",totalRunTime / this.evalRecords);
    if (modelConfig.isRegression()) {
      locateMaxMinScoreFromFile(sourceType,maxMinScoreFolder);
      ShifuFileUtils.deleteFile(maxMinScoreFolder,sourceType);
    }
    break;
  }
}",0.9687644252961994
31960,"public Tuple exec(Tuple input) throws IOException {
  if (modelRunner == null) {
    List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource(),evalConfig.getGbtConvertToProb());
    modelRunner=new ModelRunner(modelConfig,columnConfigList,this.headers,evalConfig.getDataSet().getDataDelimiter(),models);
    modelCnt=models.size();
  }
  Map<String,String> rawDataMap=CommonUtils.convertDataIntoMap(input,this.headers);
  if (MapUtils.isEmpty(rawDataMap)) {
    return null;
  }
  String tag=rawDataMap.get(modelConfig.getTargetColumnName(evalConfig));
  long startTime=System.currentTimeMillis();
  CaseScoreResult cs=modelRunner.compute(rawDataMap);
  long runInterval=System.currentTimeMillis() - startTime;
  if (cs == null) {
    if (System.currentTimeMillis() % 50 == 0) {
      log.warn(""String_Node_Str"" + input.toDelimitedString(""String_Node_Str""));
    }
    return null;
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  tuple.append(StringUtils.trimToEmpty(tag));
  String weight=null;
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
    weight=rawDataMap.get(evalConfig.getDataSet().getWeightColumnName());
  }
 else {
    weight=""String_Node_Str"";
  }
  incrementTagCounters(tag,weight,runInterval);
  tuple.append(weight);
  if (modelConfig.isRegression()) {
    tuple.append(cs.getAvgScore());
    tuple.append(cs.getMaxScore());
    tuple.append(cs.getMinScore());
    tuple.append(cs.getMedianScore());
    for (    Integer score : cs.getScores()) {
      tuple.append(score);
    }
    if (cs.getMedianScore() > maxScore) {
      maxScore=cs.getMedianScore();
    }
    if (cs.getMedianScore() < minScore) {
      minScore=cs.getMedianScore();
    }
  }
 else {
    for (int i=0; i < cs.getScores().size(); i++) {
      tuple.append(cs.getScores().get(i));
    }
  }
  List<String> metaColumns=evalConfig.getScoreMetaColumns(modelConfig);
  if (CollectionUtils.isNotEmpty(metaColumns)) {
    for (    String meta : metaColumns) {
      tuple.append(rawDataMap.get(meta));
    }
  }
  return tuple;
}","public Tuple exec(Tuple input) throws IOException {
  if (modelRunner == null) {
    List<BasicML> models=CommonUtils.loadBasicModels(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource(),evalConfig.getGbtConvertToProb());
    modelRunner=new ModelRunner(modelConfig,columnConfigList,this.headers,evalConfig.getDataSet().getDataDelimiter(),models);
    modelCnt=models.size();
  }
  Map<String,String> rawDataMap=CommonUtils.convertDataIntoMap(input,this.headers);
  if (MapUtils.isEmpty(rawDataMap)) {
    return null;
  }
  String tag=rawDataMap.get(modelConfig.getTargetColumnName(evalConfig));
  long startTime=System.nanoTime();
  CaseScoreResult cs=modelRunner.compute(rawDataMap);
  long runInterval=(System.nanoTime() - startTime) / 1000L;
  if (cs == null) {
    if (System.currentTimeMillis() % 50 == 0) {
      log.warn(""String_Node_Str"" + input.toDelimitedString(""String_Node_Str""));
    }
    return null;
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  tuple.append(StringUtils.trimToEmpty(tag));
  String weight=null;
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName())) {
    weight=rawDataMap.get(evalConfig.getDataSet().getWeightColumnName());
  }
 else {
    weight=""String_Node_Str"";
  }
  incrementTagCounters(tag,weight,runInterval);
  tuple.append(weight);
  if (modelConfig.isRegression()) {
    tuple.append(cs.getAvgScore());
    tuple.append(cs.getMaxScore());
    tuple.append(cs.getMinScore());
    tuple.append(cs.getMedianScore());
    for (    Integer score : cs.getScores()) {
      tuple.append(score);
    }
    if (cs.getMedianScore() > maxScore) {
      maxScore=cs.getMedianScore();
    }
    if (cs.getMedianScore() < minScore) {
      minScore=cs.getMedianScore();
    }
  }
 else {
    for (int i=0; i < cs.getScores().size(); i++) {
      tuple.append(cs.getScores().get(i));
    }
  }
  List<String> metaColumns=evalConfig.getScoreMetaColumns(modelConfig);
  if (CollectionUtils.isNotEmpty(metaColumns)) {
    for (    String meta : metaColumns) {
      tuple.append(rawDataMap.get(meta));
    }
  }
  return tuple;
}",0.9896519285042332
31961,"@BeforeMethod public void setUp() throws Exception {
  BasicConfigurator.configure();
  LogManager.getRootLogger().setLevel(Level.DEBUG);
  ClassLoader classLoader=getClass().getClassLoader();
  URL url=classLoader.getResource(""String_Node_Str"");
  File file=new File(this.getClass().getClassLoader().getResource(DATA_FILE_NAME).getFile());
  Scanner scanner=new Scanner(file);
  while (scanner.hasNext()) {
    String line=scanner.nextLine();
    String[] info=line.split(""String_Node_Str"");
    if (info.length != 2) {
      LOG.error(""String_Node_Str"" + line);
    }
    trainErrorList.add(Double.valueOf(info[0]));
    validationErrorList.add(Double.valueOf(info[1]));
  }
  scanner.close();
}","@SuppressWarnings(""String_Node_Str"") @BeforeMethod public void setUp() throws Exception {
  BasicConfigurator.configure();
  LogManager.getRootLogger().setLevel(Level.DEBUG);
  ClassLoader classLoader=getClass().getClassLoader();
  File file=new File(this.getClass().getClassLoader().getResource(DATA_FILE_NAME).getFile());
  Scanner scanner=new Scanner(file);
  while (scanner.hasNext()) {
    String line=scanner.nextLine();
    String[] info=line.split(""String_Node_Str"");
    if (info.length != 2) {
      LOG.error(""String_Node_Str"" + line);
    }
    trainErrorList.add(Double.valueOf(info[0]));
    validationErrorList.add(Double.valueOf(info[1]));
  }
  scanner.close();
}",0.933914306463326
31962,"/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    CommonUtils.updateColumnConfigFlags(this.modelConfig,this.columnConfigList);
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    AbstractStatsExecutor statsExecutor=null;
    if (modelConfig.isMapReduceRunMode()) {
      if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
        statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
      }
 else       if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
        statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
      }
 else       if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
        statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
      }
 else       if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
        statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
      }
 else       if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
        statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
      }
 else {
        statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
      }
    }
 else     if (modelConfig.isLocalRunMode()) {
      statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
    }
 else {
      throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
    }
    statsExecutor.doStats();
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}","/** 
 * runner for statistics
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.STATS);
    CommonUtils.updateColumnConfigFlags(this.modelConfig,this.columnConfigList);
    saveColumnConfigListAndColumnStats(false);
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    AbstractStatsExecutor statsExecutor=null;
    if (modelConfig.isMapReduceRunMode()) {
      if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.DynamicBinning)) {
        statsExecutor=new DIBStatsExecutor(this,modelConfig,columnConfigList);
      }
 else       if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPat)) {
        statsExecutor=new MunroPatStatsExecutor(this,modelConfig,columnConfigList);
      }
 else       if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.MunroPatI)) {
        statsExecutor=new MunroPatIStatsExecutor(this,modelConfig,columnConfigList);
      }
 else       if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDT)) {
        statsExecutor=new SPDTStatsExecutor(this,modelConfig,columnConfigList);
      }
 else       if (modelConfig.getBinningAlgorithm().equals(ModelStatsConf.BinningAlgorithm.SPDTI)) {
        statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
      }
 else {
        statsExecutor=new SPDTIStatsExecutor(this,modelConfig,columnConfigList);
      }
    }
 else     if (modelConfig.isLocalRunMode()) {
      statsExecutor=new AkkaStatsWorker(this,modelConfig,columnConfigList);
    }
 else {
      throw new ShifuException(ShifuErrorCode.ERROR_UNSUPPORT_MODE);
    }
    statsExecutor.doStats();
    syncDataToHdfs(modelConfig.getDataSet().getSource());
    clearUp(ModelStep.STATS);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}",0.9881879869313898
31963,"public String getAbsolutePath(String path){
  String shifuHome=Environment.getProperty(Environment.SHIFU_HOME);
  if (shifuHome == null || shifuHome.length() == 0) {
    return path;
  }
 else {
    String pathStr=(new Path(path)).isAbsolute() ? path : new Path(Environment.getProperty(Environment.SHIFU_HOME),path).toString();
    File file=new File(pathStr);
    if (file.exists()) {
      return pathStr;
    }
 else {
      return path;
    }
  }
}","public String getAbsolutePath(String path){
  String shifuHome=Environment.getProperty(Environment.SHIFU_HOME);
  if (shifuHome == null || shifuHome.length() == 0) {
    return path;
  }
 else {
    return (new Path(path)).isAbsolute() ? path : new Path(Environment.getProperty(Environment.SHIFU_HOME),path).toString();
  }
}",0.8185328185328186
31964,"@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  final String rawTag=input.get(tagColumnNum).toString();
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(config.getColumnName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        int index=config.getBinCategory().indexOf(val);
        if (index == -1) {
          tuple.append(""String_Node_Str"");
        }
 else {
          tuple.append(val);
        }
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        if (config.isMeta()) {
          tuple.append(val);
        }
 else {
          tuple.append(null);
        }
      }
 else {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType);
        tuple.append(df.format(normVal));
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}","@SuppressWarnings(""String_Node_Str"") public Tuple exec(Tuple input) throws IOException {
  if (input == null || input.size() == 0) {
    return null;
  }
  final String rawTag=input.get(tagColumnNum).toString();
  if (!super.tagSet.contains(rawTag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  if (!this.isForClean) {
    boolean isNotSampled=DataSampler.isNotSampled(modelConfig.isRegression(),super.tagSet,super.posTagSet,super.negTagSet,modelConfig.getNormalizeSampleRate(),modelConfig.isNormalizeSampleNegOnly(),rawTag);
    if (isNotSampled) {
      return null;
    }
  }
  Tuple tuple=TupleFactory.getInstance().newTuple();
  final NormType normType=modelConfig.getNormalizeType();
  for (int i=0; i < input.size(); i++) {
    ColumnConfig config=columnConfigList.get(i);
    String val=(input.get(i) == null) ? ""String_Node_Str"" : input.get(i).toString().trim();
    if (weightExpr != null) {
      weightContext.set(config.getColumnName(),val);
    }
    if (tagColumnNum == i) {
      if (modelConfig.isRegression()) {
        int type=0;
        if (super.posTagSet.contains(rawTag)) {
          type=1;
        }
 else         if (super.negTagSet.contains(rawTag)) {
          type=0;
        }
 else {
          log.error(""String_Node_Str"" + rawTag);
          warn(""String_Node_Str"" + rawTag,WarnInNormalizeUDF.INVALID_TAG);
          return null;
        }
        tuple.append(type);
      }
 else {
        int index=-1;
        for (int j=0; j < tags.size(); j++) {
          Set<String> tagSet=tags.get(j);
          if (tagSet.contains(rawTag)) {
            index=j;
            break;
          }
        }
        if (index == -1) {
          log.error(""String_Node_Str"" + rawTag);
          return null;
        }
        tuple.append(index);
      }
      continue;
    }
    if (this.isForClean) {
      if (config.isCategorical()) {
        int index=config.getBinCategory().indexOf(val);
        if (index == -1) {
          tuple.append(""String_Node_Str"");
        }
 else {
          tuple.append(val);
        }
      }
 else {
        Double normVal=0d;
        try {
          normVal=Double.parseDouble(val);
        }
 catch (        Exception e) {
          log.debug(""String_Node_Str"" + val + ""String_Node_Str"");
          normVal=Normalizer.defaultMissingValue(config);
        }
        tuple.append(df.format(normVal));
      }
    }
 else {
      if (!CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
        if (config.isMeta()) {
          tuple.append(val);
        }
 else {
          tuple.append(null);
        }
      }
 else {
        Double normVal=Normalizer.normalize(config,val,cutoff,normType);
        tuple.append(df.format(normVal));
      }
    }
  }
  double weight=evaluateWeight(weightExpr,weightContext);
  tuple.append(weight);
  return tuple;
}",0.999833138661772
31965,"@SuppressWarnings(""String_Node_Str"") @Test public void testTreeModel() throws Exception {
  InputStream is=null;
  try {
    is=new FileInputStream(""String_Node_Str"");
    IndependentTreeModel model=IndependentTreeModel.loadFromStream(is);
    PMML pmml=PMMLUtils.loadPMML(""String_Node_Str"");
    MiningModelEvaluator evaluator=new MiningModelEvaluator(pmml);
    List<Map<FieldName,FieldValue>> input=CsvUtil.load(evaluator,""String_Node_Str"",""String_Node_Str"");
    for (    Map<FieldName,FieldValue> map : input) {
      Map<String,Object> newMap=new HashMap<String,Object>();
      Map<FieldName,Double> regressionTerm=(Map<FieldName,Double>)evaluator.evaluate(map);
      for (      Map.Entry<FieldName,Double> entry : regressionTerm.entrySet()) {
        System.out.println(entry.getValue() * 1000);
      }
      for (      Entry<FieldName,FieldValue> entry : map.entrySet()) {
        FieldName key=entry.getKey();
        FieldValue value=entry.getValue();
switch (value.getOpType()) {
case CONTINUOUS:
          newMap.put(key.getValue(),Double.parseDouble(value.getValue().toString()));
        break;
case CATEGORICAL:
      newMap.put(key.getValue(),value.getValue().toString());
    break;
}
}
double[] results=model.compute(newMap);
System.out.println(results[0] * 1000);
System.out.println(""String_Node_Str"");
}
}
  finally {
IOUtils.closeQuietly(is);
}
}","@SuppressWarnings(""String_Node_Str"") @Test public void testTreeModel() throws Exception {
  InputStream is=null;
  try {
    is=new FileInputStream(""String_Node_Str"");
    IndependentTreeModel model=IndependentTreeModel.loadFromStream(is);
    PMML pmml=PMMLUtils.loadPMML(""String_Node_Str"");
    MiningModelEvaluator evaluator=new MiningModelEvaluator(pmml);
    List<Map<FieldName,FieldValue>> input=CsvUtil.load(evaluator,""String_Node_Str"",""String_Node_Str"");
    for (    Map<FieldName,FieldValue> map : input) {
      Map<String,Object> newMap=new HashMap<String,Object>();
      Map<FieldName,Double> regressionTerm=(Map<FieldName,Double>)evaluator.evaluate(map);
      double pmmlScore=0d;
      for (      Map.Entry<FieldName,Double> entry : regressionTerm.entrySet()) {
        pmmlScore=entry.getValue() * 1000;
      }
      for (      Entry<FieldName,FieldValue> entry : map.entrySet()) {
        FieldName key=entry.getKey();
        FieldValue value=entry.getValue();
switch (value.getOpType()) {
case CONTINUOUS:
          newMap.put(key.getValue(),Double.parseDouble(value.getValue().toString()));
        break;
case CATEGORICAL:
      newMap.put(key.getValue(),value.getValue().toString());
    break;
}
}
double[] results=model.compute(newMap);
double ownScore=results[0] * 1000;
Assert.assertTrue(Math.abs(pmmlScore - ownScore) <= 1);
}
}
  finally {
IOUtils.closeQuietly(is);
}
}",0.9328519855595668
31966,"@Override public void finish(){
  this.modelRunner.close();
  if (modelConfig.isClassification()) {
    return;
  }
  BufferedWriter writer=null;
  Configuration jobConf=UDFContext.getUDFContext().getJobConf();
  String scoreOutput=jobConf.get(Constants.SHIFU_EVAL_MAXMIN_SCORE_OUTPUT);
  log.debug(""String_Node_Str"" + scoreOutput + ""String_Node_Str""+ jobConf.get(""String_Node_Str"")+ ""String_Node_Str""+ jobConf.get(""String_Node_Str"")+ ""String_Node_Str""+ jobConf.get(""String_Node_Str"")+ ""String_Node_Str""+ jobConf.get(""String_Node_Str""));
  try {
    FileSystem fileSystem=FileSystem.get(jobConf);
    fileSystem.mkdirs(new Path(scoreOutput));
    String taskMaxMinScoreFile=scoreOutput + File.separator + ""String_Node_Str""+ jobConf.get(""String_Node_Str"");
    writer=ShifuFileUtils.getWriter(taskMaxMinScoreFile,SourceType.HDFS);
    writer.write(maxScore + ""String_Node_Str"" + minScore);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
}","@Override public void finish(){
  if (this.modelRunner != null) {
    this.modelRunner.close();
  }
  if (modelConfig.isClassification()) {
    return;
  }
  BufferedWriter writer=null;
  Configuration jobConf=UDFContext.getUDFContext().getJobConf();
  String scoreOutput=jobConf.get(Constants.SHIFU_EVAL_MAXMIN_SCORE_OUTPUT);
  log.debug(""String_Node_Str"" + scoreOutput + ""String_Node_Str""+ jobConf.get(""String_Node_Str"")+ ""String_Node_Str""+ jobConf.get(""String_Node_Str"")+ ""String_Node_Str""+ jobConf.get(""String_Node_Str"")+ ""String_Node_Str""+ jobConf.get(""String_Node_Str""));
  try {
    FileSystem fileSystem=FileSystem.get(jobConf);
    fileSystem.mkdirs(new Path(scoreOutput));
    String taskMaxMinScoreFile=scoreOutput + File.separator + ""String_Node_Str""+ jobConf.get(""String_Node_Str"");
    writer=ShifuFileUtils.getWriter(taskMaxMinScoreFile,SourceType.HDFS);
    writer.write(maxScore + ""String_Node_Str"" + minScore);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
}",0.9740143369175628
31967,"private int initColumnConfigList() throws IOException {
  String[] fields=null;
  boolean isSchemaProvided=true;
  if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
    fields=CommonUtils.getHeaders(modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
  }
 else {
    fields=CommonUtils.takeFirstLine(modelConfig.getDataSetRawPath(),StringUtils.isBlank(modelConfig.getHeaderDelimiter()) ? modelConfig.getDataSetDelimiter() : modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      isSchemaProvided=true;
      LOG.warn(""String_Node_Str"");
      LOG.warn(""String_Node_Str"");
    }
 else {
      isSchemaProvided=false;
      LOG.warn(""String_Node_Str"");
      LOG.warn(""String_Node_Str"");
      LOG.warn(""String_Node_Str"");
    }
  }
  columnConfigList=new ArrayList<ColumnConfig>();
  for (int i=0; i < fields.length; i++) {
    ColumnConfig config=new ColumnConfig();
    config.setColumnNum(i);
    if (isSchemaProvided) {
      config.setColumnName(fields[i]);
    }
 else {
      config.setColumnName(i + ""String_Node_Str"");
    }
    columnConfigList.add(config);
  }
  CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
  boolean hasTarget=false;
  for (  ColumnConfig config : columnConfigList) {
    if (config.isTarget()) {
      hasTarget=true;
    }
  }
  if (!hasTarget) {
    LOG.error(""String_Node_Str"" + modelConfig.getTargetColumnName());
    LOG.error(""String_Node_Str"",modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter());
    return 1;
  }
  return 0;
}","private int initColumnConfigList() throws IOException {
  String[] fields=null;
  boolean isSchemaProvided=true;
  if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
    fields=CommonUtils.getHeaders(modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
  }
 else {
    fields=CommonUtils.takeFirstLine(modelConfig.getDataSetRawPath(),StringUtils.isBlank(modelConfig.getHeaderDelimiter()) ? modelConfig.getDataSetDelimiter() : modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      isSchemaProvided=true;
      LOG.warn(""String_Node_Str"");
      LOG.warn(""String_Node_Str"");
    }
 else {
      isSchemaProvided=false;
      LOG.warn(""String_Node_Str"");
      LOG.warn(""String_Node_Str"");
      LOG.warn(""String_Node_Str"");
    }
  }
  columnConfigList=new ArrayList<ColumnConfig>();
  for (int i=0; i < fields.length; i++) {
    ColumnConfig config=new ColumnConfig();
    config.setColumnNum(i);
    if (isSchemaProvided) {
      config.setColumnName(CommonUtils.getRelativePigHeaderColumnName(fields[i]));
    }
 else {
      config.setColumnName(i + ""String_Node_Str"");
    }
    columnConfigList.add(config);
  }
  CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
  boolean hasTarget=false;
  for (  ColumnConfig config : columnConfigList) {
    if (config.isTarget()) {
      hasTarget=true;
    }
  }
  if (!hasTarget) {
    LOG.error(""String_Node_Str"" + modelConfig.getTargetColumnName());
    LOG.error(""String_Node_Str"",modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter());
    return 1;
  }
  return 0;
}",0.9870206489675516
31968,"private void validateEvalColumnConfig(EvalConfig evalConfig) throws IOException {
  if (this.columnConfigList == null) {
    return;
  }
  String[] evalColumnNames=null;
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    evalColumnNames=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
  }
 else {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      evalColumnNames=fields;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      evalColumnNames=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        evalColumnNames[i]=i + ""String_Node_Str"";
      }
    }
  }
  Set<String> names=new HashSet<String>();
  names.addAll(Arrays.asList(evalColumnNames));
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isFinalSelect() && !names.contains(config.getColumnName())) {
      throw new IllegalArgumentException(""String_Node_Str"" + config.getColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
    }
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName()) && !names.contains(evalConfig.getDataSet().getTargetColumnName())) {
    throw new IllegalArgumentException(""String_Node_Str"" + evalConfig.getDataSet().getTargetColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName()) && !names.contains(evalConfig.getDataSet().getWeightColumnName())) {
    throw new IllegalArgumentException(""String_Node_Str"" + evalConfig.getDataSet().getWeightColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
  }
}","private void validateEvalColumnConfig(EvalConfig evalConfig) throws IOException {
  if (this.columnConfigList == null) {
    return;
  }
  String[] evalColumnNames=null;
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    evalColumnNames=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
  }
 else {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      evalColumnNames=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        evalColumnNames[i]=CommonUtils.getRelativePigHeaderColumnName(fields[i]);
      }
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      evalColumnNames=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        evalColumnNames[i]=i + ""String_Node_Str"";
      }
    }
  }
  Set<String> names=new HashSet<String>();
  names.addAll(Arrays.asList(evalColumnNames));
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isFinalSelect() && !names.contains(config.getColumnName())) {
      throw new IllegalArgumentException(""String_Node_Str"" + config.getColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
    }
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getTargetColumnName()) && !names.contains(evalConfig.getDataSet().getTargetColumnName())) {
    throw new IllegalArgumentException(""String_Node_Str"" + evalConfig.getDataSet().getTargetColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getWeightColumnName()) && !names.contains(evalConfig.getDataSet().getWeightColumnName())) {
    throw new IllegalArgumentException(""String_Node_Str"" + evalConfig.getDataSet().getWeightColumnName() + ""String_Node_Str""+ evalConfig.getDataSet().getHeaderPath());
  }
}",0.8714502492954693
31969,"/** 
 * initialize the columnConfig file
 * @throws IOException
 */
private int initColumnConfigList() throws IOException {
  String[] fields=null;
  boolean isSchemaProvided=true;
  if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
    fields=CommonUtils.getHeaders(modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
  }
 else {
    fields=CommonUtils.takeFirstLine(modelConfig.getDataSetRawPath(),StringUtils.isBlank(modelConfig.getHeaderDelimiter()) ? modelConfig.getDataSetDelimiter() : modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      isSchemaProvided=true;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      isSchemaProvided=false;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
  }
  columnConfigList=new ArrayList<ColumnConfig>();
  for (int i=0; i < fields.length; i++) {
    ColumnConfig config=new ColumnConfig();
    config.setColumnNum(i);
    if (isSchemaProvided) {
      config.setColumnName(fields[i]);
    }
 else {
      config.setColumnName(i + ""String_Node_Str"");
    }
    columnConfigList.add(config);
  }
  CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
  boolean hasTarget=false;
  for (  ColumnConfig config : columnConfigList) {
    if (config.isTarget()) {
      hasTarget=true;
    }
  }
  if (!hasTarget) {
    log.error(""String_Node_Str"" + modelConfig.getTargetColumnName());
    if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
      log.error(""String_Node_Str"",modelConfig.getDataSetRawPath());
    }
 else {
      log.error(""String_Node_Str"",modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter());
    }
    return 1;
  }
  return 0;
}","/** 
 * initialize the columnConfig file
 * @throws IOException
 */
private int initColumnConfigList() throws IOException {
  String[] fields=null;
  boolean isSchemaProvided=true;
  if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
    fields=CommonUtils.getHeaders(modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
  }
 else {
    fields=CommonUtils.takeFirstLine(modelConfig.getDataSetRawPath(),StringUtils.isBlank(modelConfig.getHeaderDelimiter()) ? modelConfig.getDataSetDelimiter() : modelConfig.getHeaderDelimiter(),modelConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      isSchemaProvided=true;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      isSchemaProvided=false;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
  }
  columnConfigList=new ArrayList<ColumnConfig>();
  for (int i=0; i < fields.length; i++) {
    ColumnConfig config=new ColumnConfig();
    config.setColumnNum(i);
    if (isSchemaProvided) {
      config.setColumnName(CommonUtils.getRelativePigHeaderColumnName(fields[i]));
    }
 else {
      config.setColumnName(i + ""String_Node_Str"");
    }
    columnConfigList.add(config);
  }
  CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
  boolean hasTarget=false;
  for (  ColumnConfig config : columnConfigList) {
    if (config.isTarget()) {
      hasTarget=true;
    }
  }
  if (!hasTarget) {
    log.error(""String_Node_Str"" + modelConfig.getTargetColumnName());
    if (StringUtils.isNotBlank(modelConfig.getHeaderPath())) {
      log.error(""String_Node_Str"",modelConfig.getDataSetRawPath());
    }
 else {
      log.error(""String_Node_Str"",modelConfig.getHeaderPath(),modelConfig.getHeaderDelimiter());
    }
    return 1;
  }
  return 0;
}",0.988517745302714
31970,"public EvalScoreUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (evalConfig.getModelsPath() != null) {
    this.columnConfigList=ShifuFileUtils.searchColumnConfig(evalConfig,columnConfigList);
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    this.headers=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
  }
 else {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      this.headers=fields;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      this.headers=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        this.headers[i]=i + ""String_Node_Str"";
      }
    }
  }
  this.modelCnt=CommonUtils.getBasicModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
}","public EvalScoreUDF(String source,String pathModelConfig,String pathColumnConfig,String evalSetName) throws IOException {
  super(source,pathModelConfig,pathColumnConfig);
  evalConfig=modelConfig.getEvalConfigByName(evalSetName);
  if (evalConfig.getModelsPath() != null) {
    this.columnConfigList=ShifuFileUtils.searchColumnConfig(evalConfig,columnConfigList);
  }
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    this.headers=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
  }
 else {
    String delimiter=StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter();
    String[] fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),delimiter,evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(modelConfig.getTargetColumnName())) {
      this.headers=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        this.headers[i]=CommonUtils.getRelativePigHeaderColumnName(fields[i]);
      }
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      this.headers=new String[fields.length];
      for (int i=0; i < fields.length; i++) {
        this.headers[i]=i + ""String_Node_Str"";
      }
    }
  }
  this.modelCnt=CommonUtils.getBasicModelsCnt(modelConfig,this.columnConfigList,evalConfig,evalConfig.getDataSet().getSource());
}",0.948318804483188
31971,"public static String[] getFinalHeaders(EvalConfig evalConfig) throws IOException {
  String[] fields=null;
  boolean isSchemaProvided=true;
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    fields=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
  }
 else {
    fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(evalConfig.getDataSet().getTargetColumnName())) {
      isSchemaProvided=true;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      isSchemaProvided=false;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
  }
  for (int i=0; i < fields.length; i++) {
    if (!isSchemaProvided) {
      fields[i]=i + ""String_Node_Str"";
    }
  }
  return fields;
}","public static String[] getFinalHeaders(EvalConfig evalConfig) throws IOException {
  String[] fields=null;
  boolean isSchemaProvided=true;
  if (StringUtils.isNotBlank(evalConfig.getDataSet().getHeaderPath())) {
    fields=CommonUtils.getHeaders(evalConfig.getDataSet().getHeaderPath(),evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
  }
 else {
    fields=CommonUtils.takeFirstLine(evalConfig.getDataSet().getDataPath(),StringUtils.isBlank(evalConfig.getDataSet().getHeaderDelimiter()) ? evalConfig.getDataSet().getDataDelimiter() : evalConfig.getDataSet().getHeaderDelimiter(),evalConfig.getDataSet().getSource());
    if (StringUtils.join(fields,""String_Node_Str"").contains(evalConfig.getDataSet().getTargetColumnName())) {
      isSchemaProvided=true;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
 else {
      isSchemaProvided=false;
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
      log.warn(""String_Node_Str"");
    }
  }
  for (int i=0; i < fields.length; i++) {
    if (!isSchemaProvided) {
      fields[i]=i + ""String_Node_Str"";
    }
 else {
      fields[i]=getRelativePigHeaderColumnName(fields[i]);
    }
  }
  return fields;
}",0.9694688414889168
31972,"/** 
 * Run for the variable selection
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.VARSELECT);
    if (isToReset) {
      resetAllFinalSelect();
    }
 else {
      String alg=super.getModelConfig().getTrain().getAlgorithm();
      if (!CommonUtils.isDesicionTreeAlgorithm(alg)) {
        validateNormalize();
      }
      syncDataToHdfs(super.modelConfig.getDataSet().getSource());
      VariableSelector selector=new VariableSelector(this.modelConfig,this.columnConfigList);
      if (!modelConfig.getVarSelectWrapperEnabled()) {
        if (modelConfig.isRegression()) {
          CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
          this.columnConfigList=selector.selectByFilter();
        }
 else {
          for (          ColumnConfig config : this.columnConfigList) {
            if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
              config.setFinalSelect(true);
            }
          }
        }
      }
 else {
        if (super.getModelConfig().getDataSet().getSource() == SourceType.HDFS && super.getModelConfig().isMapReduceRunMode()) {
          if (Constants.WRAPPER_BY_SE.equalsIgnoreCase(modelConfig.getVarSelect().getWrapperBy()) || Constants.WRAPPER_BY_REMOVE.equalsIgnoreCase(modelConfig.getVarSelect().getWrapperBy())) {
            validateDistributedWrapperVarSelect();
            syncDataToHdfs(super.modelConfig.getDataSet().getSource());
            distributedSEWrapper();
          }
 else           if (Constants.WRAPPER_BY_VOTED.equalsIgnoreCase(modelConfig.getVarSelect().getWrapperBy())) {
            votedVariablesSelection();
          }
 else           if (Constants.WRAPPER_BY_FI.equalsIgnoreCase(modelConfig.getVarSelect().getWrapperBy())) {
            List<BasicML> models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
            if (models == null || models.size() < 1) {
              TrainModelProcessor trainModelProcessor=new TrainModelProcessor();
              trainModelProcessor.setForVarSelect(true);
              trainModelProcessor.run();
            }
            List<Map<Integer,MutablePair<String,Double>>> importanceList=new ArrayList<Map<Integer,MutablePair<String,Double>>>();
            Map<Integer,MutablePair<String,Double>> mergedResult=null;
            log.info(""String_Node_Str"" + models.size());
            for (            BasicML basicModel : models) {
              if (basicModel instanceof TreeModel) {
                TreeModel model=(TreeModel)basicModel;
                Map<Integer,MutablePair<String,Double>> importances=model.getFeatureImportances();
                importanceList.add(importances);
              }
            }
            if (importanceList.size() < 1) {
              log.error(""String_Node_Str"");
              return -1;
            }
            mergedResult=this.mergeImportanceList(importanceList);
            this.writeFeatureImportance(mergedResult);
            this.postProcessFIVarSelect(mergedResult);
          }
        }
 else {
          wrapper(selector);
        }
      }
    }
    clearUp(ModelStep.VARSELECT);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}","/** 
 * Run for the variable selection
 */
@Override public int run() throws Exception {
  log.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    setUp(ModelStep.VARSELECT);
    if (isToReset) {
      resetAllFinalSelect();
    }
 else {
      String alg=super.getModelConfig().getTrain().getAlgorithm();
      if (!CommonUtils.isDesicionTreeAlgorithm(alg)) {
        validateNormalize();
      }
      syncDataToHdfs(super.modelConfig.getDataSet().getSource());
      VariableSelector selector=new VariableSelector(this.modelConfig,this.columnConfigList);
      if (!modelConfig.getVarSelectWrapperEnabled()) {
        if (modelConfig.isRegression()) {
          CommonUtils.updateColumnConfigFlags(modelConfig,columnConfigList);
          this.columnConfigList=selector.selectByFilter();
        }
 else {
          for (          ColumnConfig config : this.columnConfigList) {
            if (CommonUtils.isGoodCandidate(modelConfig.isRegression(),config)) {
              config.setFinalSelect(true);
            }
          }
        }
      }
 else {
        if (super.getModelConfig().getDataSet().getSource() == SourceType.HDFS && super.getModelConfig().isMapReduceRunMode()) {
          if (Constants.WRAPPER_BY_SE.equalsIgnoreCase(modelConfig.getVarSelect().getWrapperBy()) || Constants.WRAPPER_BY_REMOVE.equalsIgnoreCase(modelConfig.getVarSelect().getWrapperBy())) {
            validateDistributedWrapperVarSelect();
            syncDataToHdfs(super.modelConfig.getDataSet().getSource());
            distributedSEWrapper();
          }
 else           if (Constants.WRAPPER_BY_VOTED.equalsIgnoreCase(modelConfig.getVarSelect().getWrapperBy())) {
            votedVariablesSelection();
          }
 else           if (Constants.WRAPPER_BY_FI.equalsIgnoreCase(modelConfig.getVarSelect().getWrapperBy())) {
            List<BasicML> models=CommonUtils.loadBasicModels(this.modelConfig,this.columnConfigList,null);
            if (models == null || models.size() < 1) {
              TrainModelProcessor trainModelProcessor=new TrainModelProcessor();
              trainModelProcessor.setForVarSelect(true);
              trainModelProcessor.run();
            }
            List<Map<Integer,MutablePair<String,Double>>> importanceList=new ArrayList<Map<Integer,MutablePair<String,Double>>>();
            Map<Integer,MutablePair<String,Double>> mergedResult=null;
            log.info(""String_Node_Str"" + models.size());
            for (            BasicML basicModel : models) {
              if (basicModel instanceof TreeModel) {
                TreeModel model=(TreeModel)basicModel;
                Map<Integer,MutablePair<String,Double>> importances=model.getFeatureImportances();
                importanceList.add(importances);
              }
            }
            if (importanceList.size() < 1) {
              log.error(""String_Node_Str"");
              return -1;
            }
            mergedResult=this.mergeImportanceList(importanceList);
            this.writeFeatureImportance(mergedResult);
            if (super.modelConfig.getVarSelect().getFilterBySE()) {
              this.postProcessFIVarSelect(mergedResult);
            }
          }
        }
 else {
          wrapper(selector);
        }
      }
    }
    clearUp(ModelStep.VARSELECT);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return -1;
  }
  log.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return 0;
}",0.9877658025050976
31973,"private void postProcessFIVarSelect(Map<Integer,MutablePair<String,Double>> importances){
  int selectCnt=0;
  for (  ColumnConfig config : super.columnConfigList) {
    if (config.isFinalSelect()) {
      config.setFinalSelect(false);
    }
    if (config.isForceSelect()) {
      config.setFinalSelect(true);
      selectCnt++;
      log.info(""String_Node_Str"",config.getColumnName());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  Float wrapperRatio=this.modelConfig.getVarSelect().getWrapperRatio();
  int targetCnt=(int)(inputNodeCount * (1.0f - wrapperRatio));
  List<Integer> candidateColumnIdList=new ArrayList<Integer>();
  candidateColumnIdList.addAll(importances.keySet());
  int i=0;
  while (selectCnt < targetCnt && i < targetCnt) {
    Integer columnId=candidateColumnIdList.get(i++);
    ColumnConfig columnConfig=this.columnConfigList.get(columnId);
    if (!columnConfig.isForceSelect() && !columnConfig.isForceRemove()) {
      columnConfig.setFinalSelect(true);
      selectCnt++;
      log.info(""String_Node_Str"",columnConfig.getColumnName());
    }
  }
  log.info(""String_Node_Str"",selectCnt);
}","private void postProcessFIVarSelect(Map<Integer,MutablePair<String,Double>> importances){
  int selectCnt=0;
  for (  ColumnConfig config : super.columnConfigList) {
    if (config.isForceSelect()) {
      config.setFinalSelect(true);
      selectCnt++;
      log.info(""String_Node_Str"",config.getColumnName());
    }
  }
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  int inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  Float wrapperRatio=this.modelConfig.getVarSelect().getWrapperRatio();
  int targetCnt=(int)(inputNodeCount * (1.0f - wrapperRatio));
  List<Integer> candidateColumnIdList=new ArrayList<Integer>();
  candidateColumnIdList.addAll(importances.keySet());
  int i=0;
  while (selectCnt < targetCnt && i < targetCnt) {
    Integer columnId=candidateColumnIdList.get(i++);
    ColumnConfig columnConfig=this.columnConfigList.get(columnId);
    if (!columnConfig.isForceSelect() && !columnConfig.isForceRemove()) {
      columnConfig.setFinalSelect(true);
      selectCnt++;
      log.info(""String_Node_Str"",columnConfig.getColumnName());
    }
  }
  log.info(""String_Node_Str"",selectCnt);
}",0.9690301548492256
31974,"/** 
 * Build the usage option for parameter check
 */
@SuppressWarnings(""String_Node_Str"") private static Options buildModelSetOptions(String[] args){
  Options opts=new Options();
  Option opt_cmt=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_M);
  Option opt_new=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(NEW);
  Option opt_type=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_TYPE);
  Option opt_run=OptionBuilder.withDescription(""String_Node_Str"").create(EVAL_CMD_RUN);
  Option opt_dry=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DRY);
  Option opt_debug=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DEBUG);
  Option opt_model=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(INIT_CMD_MODEL);
  Option opt_concise=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(EXPORT_CONCISE);
  Option opt_reset=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESET);
  Option opt_list=OptionBuilder.hasArg(false).create(LIST);
  Option opt_delete=OptionBuilder.hasArg().create(DELETE);
  Option opt_score=OptionBuilder.hasArg().create(SCORE);
  Option opt_confmat=OptionBuilder.hasArg().create(CONFMAT);
  Option opt_perf=OptionBuilder.hasArg().create(PERF);
  Option opt_norm=OptionBuilder.hasArg().create(NORM);
  Option opt_eval=OptionBuilder.hasArg(false).create(EVAL_CMD);
  Option opt_init=OptionBuilder.hasArg(false).create(INIT_CMD);
  Option opt_save=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SAVE);
  Option opt_switch=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SWITCH);
  Option opt_eval_model=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(EVAL_MODEL);
  opts.addOption(opt_cmt);
  opts.addOption(opt_new);
  opts.addOption(opt_type);
  opts.addOption(opt_run);
  opts.addOption(opt_perf);
  opts.addOption(opt_norm);
  opts.addOption(opt_dry);
  opts.addOption(opt_debug);
  opts.addOption(opt_model);
  opts.addOption(opt_concise);
  opts.addOption(opt_reset);
  opts.addOption(opt_eval);
  opts.addOption(opt_init);
  opts.addOption(opt_list);
  opts.addOption(opt_delete);
  opts.addOption(opt_score);
  opts.addOption(opt_confmat);
  opts.addOption(opt_save);
  opts.addOption(opt_switch);
  opts.addOption(opt_eval_model);
  return opts;
}","/** 
 * Build the usage option for parameter check
 */
@SuppressWarnings(""String_Node_Str"") private static Options buildModelSetOptions(String[] args){
  Options opts=new Options();
  Option opt_cmt=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_M);
  Option opt_new=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(NEW);
  Option opt_type=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(MODELSET_CMD_TYPE);
  Option opt_run=OptionBuilder.hasOptionalArg().withDescription(""String_Node_Str"").create(EVAL_CMD_RUN);
  Option opt_dry=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DRY);
  Option opt_debug=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(TRAIN_CMD_DEBUG);
  Option opt_model=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(INIT_CMD_MODEL);
  Option opt_concise=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(EXPORT_CONCISE);
  Option opt_reset=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(RESET);
  Option opt_list=OptionBuilder.hasArg(false).create(LIST);
  Option opt_delete=OptionBuilder.hasArg().create(DELETE);
  Option opt_score=OptionBuilder.hasArg().create(SCORE);
  Option opt_confmat=OptionBuilder.hasArg().create(CONFMAT);
  Option opt_perf=OptionBuilder.hasArg().create(PERF);
  Option opt_norm=OptionBuilder.hasArg().create(NORM);
  Option opt_eval=OptionBuilder.hasArg(false).create(EVAL_CMD);
  Option opt_init=OptionBuilder.hasArg(false).create(INIT_CMD);
  Option opt_save=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SAVE);
  Option opt_switch=OptionBuilder.hasArg(false).withDescription(""String_Node_Str"").create(SWITCH);
  Option opt_eval_model=OptionBuilder.hasArg().withDescription(""String_Node_Str"").create(EVAL_MODEL);
  opts.addOption(opt_cmt);
  opts.addOption(opt_new);
  opts.addOption(opt_type);
  opts.addOption(opt_run);
  opts.addOption(opt_perf);
  opts.addOption(opt_norm);
  opts.addOption(opt_dry);
  opts.addOption(opt_debug);
  opts.addOption(opt_model);
  opts.addOption(opt_concise);
  opts.addOption(opt_reset);
  opts.addOption(opt_eval);
  opts.addOption(opt_init);
  opts.addOption(opt_list);
  opts.addOption(opt_delete);
  opts.addOption(opt_score);
  opts.addOption(opt_confmat);
  opts.addOption(opt_save);
  opts.addOption(opt_switch);
  opts.addOption(opt_eval_model);
  return opts;
}",0.9965341488277268
31975,"/** 
 * @param evalSetName
 * @param isDryRun
 * @throws Exception
 */
public static int runEvalSet(String evalSetName,boolean isDryRun) throws Exception {
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.RUN,evalSetName);
  return p.run();
}","/** 
 * @param evalSetName
 * @param isDryRun
 * @throws Exception
 */
public static int runEvalSet(String evalSetName,boolean isDryRun) throws Exception {
  log.info(""String_Node_Str"",evalSetName);
  EvalModelProcessor p=new EvalModelProcessor(EvalStep.RUN,evalSetName);
  return p.run();
}",0.9202226345083488
31976,"public String genFieldSelector(){
  List<String> fields=new ArrayList<String>();
  for (  String var : selectedVars) {
    if (this.varsMapping.containsKey(var)) {
      fields.add(var + ""String_Node_Str"" + this.varsMapping.get(var));
    }
 else {
      fields.add(var);
    }
  }
  return StringUtils.join(fields,""String_Node_Str"");
}","public String genFieldSelector(){
  List<String> fields=new ArrayList<String>();
  for (  String var : selectedVars) {
    if (this.varsMapping.containsKey(var)) {
      fields.add(var + ""String_Node_Str"" + this.varsMapping.get(var));
    }
 else {
      fields.add(var + ""String_Node_Str"" + var);
    }
  }
  return StringUtils.join(fields,""String_Node_Str"");
}",0.9627507163323782
31977,"public void join(String uidColumnName,String outputPath,List<ColumnFile> columnFileList) throws IOException {
  String pigCode=genPigJoinCode(uidColumnName,outputPath,columnFileList);
  PigExecutor.getExecutor().submitJob(RawSourceData.SourceType.HDFS,pigCode);
}","public void join(String uidColumnName,String outputPath,List<ColumnFile> columnFileList) throws IOException {
  String pigCode=genPigJoinCode(uidColumnName,outputPath,columnFileList);
  LOG.debug(""String_Node_Str"" + pigCode);
  PigExecutor.getExecutor().submitJob(RawSourceData.SourceType.HDFS,pigCode);
}",0.926056338028169
31978,"public String genPigJoinCode(String uidColumnName,String outputPath,List<ColumnFile> columnFileList) throws IOException {
  ByteArrayOutputStream byos=new ByteArrayOutputStream();
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(byos));
  try {
    List<String> relations=new ArrayList<String>();
    int i=0;
    for (    ColumnFile columnFile : columnFileList) {
      String relation=DATA_PREFIX + (i++);
      writeLine(writer,relation + ""String_Node_Str"" + columnFile.getFilePath()+ ""String_Node_Str"");
      if (columnFile.hasSelectedVar(uidColumnName)) {
        writeLine(writer,relation + ""String_Node_Str"" + relation+ ""String_Node_Str""+ columnFile.genFieldSelector()+ ""String_Node_Str"");
      }
 else {
        writeLine(writer,relation + ""String_Node_Str"" + relation+ ""String_Node_Str""+ uidColumnName+ ""String_Node_Str""+ columnFile.genFieldSelector()+ ""String_Node_Str"");
      }
      relations.add(relation);
    }
    writeLine(writer,""String_Node_Str"" + genGroupByClauses(relations,uidColumnName) + ""String_Node_Str"");
    writeLine(writer,""String_Node_Str"" + genFlattenClauses(relations) + ""String_Node_Str"");
    writeLine(writer,""String_Node_Str"" + genRenameClauses(columnFileList,relations));
    writeLine(writer,""String_Node_Str"" + outputPath + ""String_Node_Str"");
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    IOUtils.closeQuietly(writer);
    IOUtils.closeQuietly(byos);
  }
  return byos.toString();
}","public String genPigJoinCode(String uidColumnName,String outputPath,List<ColumnFile> columnFileList) throws IOException {
  ByteArrayOutputStream byos=new ByteArrayOutputStream();
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(byos));
  try {
    List<String> relations=new ArrayList<String>();
    int i=0;
    for (    ColumnFile columnFile : columnFileList) {
      String relation=DATA_PREFIX + (i++);
      writeLine(writer,relation + ""String_Node_Str"" + columnFile.getFilePath()+ ""String_Node_Str"");
      if (columnFile.hasSelectedVar(uidColumnName)) {
        writeLine(writer,relation + ""String_Node_Str"" + relation+ ""String_Node_Str""+ columnFile.genFieldSelector()+ ""String_Node_Str"");
      }
 else {
        writeLine(writer,relation + ""String_Node_Str"" + relation+ ""String_Node_Str""+ uidColumnName+ ""String_Node_Str""+ uidColumnName+ ""String_Node_Str""+ columnFile.genFieldSelector()+ ""String_Node_Str"");
      }
      relations.add(relation);
    }
    writeLine(writer,""String_Node_Str"" + genGroupByClauses(relations,uidColumnName) + ""String_Node_Str"");
    writeLine(writer,""String_Node_Str"" + genFlattenClauses(relations) + ""String_Node_Str"");
    writeLine(writer,""String_Node_Str"" + genRenameClauses(columnFileList,relations) + ""String_Node_Str"");
    writeLine(writer,""String_Node_Str"" + outputPath + ""String_Node_Str"");
    writeLine(writer,""String_Node_Str"" + outputPath + ""String_Node_Str"");
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    IOUtils.closeQuietly(writer);
    IOUtils.closeQuietly(byos);
  }
  return byos.toString();
}",0.958974358974359
31979,"private Map<Integer,Data> getCountInfoMap(SourceType source,String autoTypePath) throws IOException {
  String outputFilePattern=autoTypePath + Path.SEPARATOR + ""String_Node_Str"";
  if (!ShifuFileUtils.isFileExists(outputFilePattern,source)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Map<Integer,Data> distinctCountMap=new HashMap<Integer,Data>();
  List<Scanner> scanners=null;
  try {
    FileStatus[] globStatus=ShifuFileUtils.getFileSystemBySourceType(source).globStatus(new Path(outputFilePattern));
    if (globStatus == null || globStatus.length == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    scanners=ShifuFileUtils.getDataScanners(globStatus[0].getPath().toString(),source);
    Scanner scanner=scanners.get(0);
    String str=null;
    while (scanner.hasNext()) {
      str=scanner.nextLine().trim();
      if (str.contains(TAB_STR)) {
        String[] splits1=str.split(TAB_STR);
        String[] splits2=splits1[1].split(""String_Node_Str"");
        distinctCountMap.put(Integer.valueOf(splits1[0]),new Data(Long.valueOf(splits2[0]),Long.valueOf(splits2[1]),Long.valueOf(splits2[2]),Long.valueOf(splits2[3]),splits2[4].split(""String_Node_Str"")));
      }
    }
    return distinctCountMap;
  }
  finally {
    if (scanners != null) {
      for (      Scanner scanner : scanners) {
        if (scanner != null) {
          scanner.close();
        }
      }
    }
  }
}","private Map<Integer,Data> getCountInfoMap(SourceType source,String autoTypePath) throws IOException {
  String outputFilePattern=autoTypePath + Path.SEPARATOR + ""String_Node_Str"";
  if (!ShifuFileUtils.isFileExists(outputFilePattern,source)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Map<Integer,Data> distinctCountMap=new HashMap<Integer,Data>();
  List<Scanner> scanners=null;
  try {
    FileStatus[] globStatus=ShifuFileUtils.getFileSystemBySourceType(source).globStatus(new Path(outputFilePattern));
    if (globStatus == null || globStatus.length == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    scanners=ShifuFileUtils.getDataScanners(globStatus[0].getPath().toString(),source);
    Scanner scanner=scanners.get(0);
    String str=null;
    while (scanner.hasNext()) {
      str=scanner.nextLine().trim();
      if (str.contains(TAB_STR)) {
        String[] splits1=str.split(TAB_STR);
        String[] splits2=splits1[1].split(""String_Node_Str"",-1);
        distinctCountMap.put(Integer.valueOf(splits1[0]),new Data(Long.valueOf(splits2[0]),Long.valueOf(splits2[1]),Long.valueOf(splits2[2]),Long.valueOf(splits2[3]),splits2[4].split(""String_Node_Str"")));
      }
    }
    return distinctCountMap;
  }
  finally {
    if (scanners != null) {
      for (      Scanner scanner : scanners) {
        if (scanner != null) {
          scanner.close();
        }
      }
    }
  }
}",0.9989447766443896
31980,"@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<DTMasterParams,DTWorkerParams> context){
  this.count+=1;
  if ((this.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  double baggingSampleRate=this.modelConfig.getBaggingSampleRate();
  if (!modelConfig.isFixInitialInput() && Double.compare(Math.random(),baggingSampleRate) >= 0) {
    return;
  }
  long hashcode=0;
  short[] inputs=new short[this.inputCount];
  float ideal=0f;
  float significance=1f;
  int index=0, inputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    if (index == this.columnConfigList.size()) {
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        ideal=getFloatValue(input);
      }
 else {
        if (!isAfterVarSelect) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                int categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                shortValue=(short)(categoricalIndex);
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                int categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                shortValue=(short)(categoricalIndex);
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
      }
    }
    index+=1;
  }
  long longBaggingSampleRate=Double.valueOf(baggingSampleRate * 100).longValue();
  if (this.modelConfig.isFixInitialInput() && hashcode % 100 >= longBaggingSampleRate) {
    return;
  }
  this.sampleCount+=1;
  if (this.isOneVsAll) {
    ideal=updateOneVsAllTargetValue(ideal);
  }
  float output=ideal;
  float predict=ideal;
  Data data=new Data(inputs,predict,output,output,significance,sampleWeights());
  boolean isTesting=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isTesting=(Boolean)context.getAttachment();
  }
  this.addDataPairToDataSet(hashcode,data,isTesting);
}","@Override public void load(GuaguaWritableAdapter<LongWritable> currentKey,GuaguaWritableAdapter<Text> currentValue,WorkerContext<DTMasterParams,DTWorkerParams> context){
  this.count+=1;
  if ((this.count) % 5000 == 0) {
    LOG.info(""String_Node_Str"",this.count);
  }
  double baggingSampleRate=this.modelConfig.getBaggingSampleRate();
  if (!modelConfig.isFixInitialInput() && Double.compare(Math.random(),baggingSampleRate) >= 0) {
    return;
  }
  long hashcode=0;
  short[] inputs=new short[this.inputCount];
  float ideal=0f;
  float significance=1f;
  int index=0, inputIndex=0;
  for (  String input : DEFAULT_SPLITTER.split(currentValue.getWritable().toString())) {
    if (index == this.columnConfigList.size()) {
      significance=input.length() == 0 ? 1f : NumberFormatUtils.getFloat(input,1f);
      break;
    }
 else {
      ColumnConfig columnConfig=this.columnConfigList.get(index);
      if (columnConfig != null && columnConfig.isTarget()) {
        ideal=getFloatValue(input);
      }
 else {
        if (!isAfterVarSelect) {
          if (!columnConfig.isMeta() && !columnConfig.isTarget() && CommonUtils.isGoodCandidate(columnConfig)) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
 else {
          if (columnConfig != null && !columnConfig.isMeta() && !columnConfig.isTarget() && columnConfig.isFinalSelect()) {
            if (columnConfig.isNumerical()) {
              float floatValue=getFloatValue(input);
              short binIndex=(short)getBinIndex(floatValue,columnConfig.getBinBoundary());
              inputs[inputIndex]=binIndex;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
 else             if (columnConfig.isCategorical()) {
              short shortValue=(short)(columnConfig.getBinCategory().size());
              if (input.length() == 0) {
                shortValue=(short)(columnConfig.getBinCategory().size());
              }
 else {
                Integer categoricalIndex=this.columnCategoryIndexMapping.get(columnConfig.getColumnNum()).get(input);
                if (categoricalIndex == null) {
                  shortValue=-1;
                }
 else {
                  shortValue=(short)(categoricalIndex.intValue());
                }
                if (shortValue == -1) {
                  shortValue=(short)(columnConfig.getBinCategory().size());
                }
              }
              inputs[inputIndex]=shortValue;
              if (!this.inputIndexMap.containsKey(columnConfig.getColumnNum())) {
                this.inputIndexMap.put(columnConfig.getColumnNum(),inputIndex);
              }
            }
            hashcode=hashcode * 31 + input.hashCode();
            inputIndex+=1;
          }
        }
      }
    }
    index+=1;
  }
  long longBaggingSampleRate=Double.valueOf(baggingSampleRate * 100).longValue();
  if (this.modelConfig.isFixInitialInput() && hashcode % 100 >= longBaggingSampleRate) {
    return;
  }
  this.sampleCount+=1;
  if (this.isOneVsAll) {
    ideal=updateOneVsAllTargetValue(ideal);
  }
  float output=ideal;
  float predict=ideal;
  Data data=new Data(inputs,predict,output,output,significance,sampleWeights());
  boolean isTesting=false;
  if (context.getAttachment() != null && context.getAttachment() instanceof Boolean) {
    isTesting=(Boolean)context.getAttachment();
  }
  this.addDataPairToDataSet(hashcode,data,isTesting);
}",0.9561056792178072
31981,"private void writeModelToFileSystem(List<TreeNode> trees,Path out){
  FSDataOutputStream fos=null;
  try {
    fos=FileSystem.get(new Configuration()).create(out);
    LOG.info(""String_Node_Str"",out);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(this.validParams.get(""String_Node_Str"").toString());
    fos.writeBoolean(this.modelConfig.isClassification());
    fos.writeBoolean(this.modelConfig.getTrain().isOneVsAll());
    fos.writeInt(this.inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      if (columnConfig.isCategorical() && CollectionUtils.isNotEmpty(columnConfig.getBinBoundary())) {
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),columnConfig.getBinCategory());
      }
      if (columnConfig.isNumerical() && columnConfig.getMean() != null) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    fos.writeInt(numericalMeanMapping.keySet().size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue() == null ? 0d : entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      List<String> categories=entry.getValue();
      if (categories != null) {
        fos.writeInt(entry.getKey());
        fos.writeInt(categories.size());
        for (        String category : categories) {
          fos.writeUTF(category);
        }
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping();
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    int treeLength=trees.size();
    fos.writeInt(treeLength);
    for (    TreeNode treeNode : trees) {
      treeNode.write(fos);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}","private void writeModelToFileSystem(List<TreeNode> trees,Path out){
  FSDataOutputStream fos=null;
  try {
    fos=FileSystem.get(new Configuration()).create(out);
    LOG.info(""String_Node_Str"",out);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(this.validParams.get(""String_Node_Str"").toString());
    fos.writeBoolean(this.modelConfig.isClassification());
    fos.writeBoolean(this.modelConfig.getTrain().isOneVsAll());
    fos.writeInt(this.inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      if (columnConfig.isCategorical() && CollectionUtils.isNotEmpty(columnConfig.getBinCategory())) {
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),columnConfig.getBinCategory());
      }
      if (columnConfig.isNumerical() && columnConfig.getMean() != null) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    fos.writeInt(numericalMeanMapping.keySet().size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue() == null ? 0d : entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      List<String> categories=entry.getValue();
      if (categories != null) {
        fos.writeInt(entry.getKey());
        fos.writeInt(categories.size());
        for (        String category : categories) {
          fos.writeUTF(category);
        }
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping();
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    int treeLength=trees.size();
    fos.writeInt(treeLength);
    for (    TreeNode treeNode : trees) {
      treeNode.write(fos);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}",0.997752808988764
31982,"public ScoreObject score(final MLDataPair pair,Map<String,String> rawDataMap){
  if (pair == null) {
    return null;
  }
  List<Callable<MLData>> tasks=new ArrayList<Callable<MLData>>();
  for (  final BasicML model : models) {
    if (model instanceof BasicNetwork) {
      final BasicNetwork network=(BasicNetwork)model;
      if (network.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + network.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof SVM) {
      final SVM svm=(SVM)model;
      if (svm.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + svm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return svm.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof LR) {
      final LR lr=(LR)model;
      if (lr.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + lr.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return lr.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof TreeModel) {
      final TreeModel tm=(TreeModel)model;
      if (tm.getInputCount() != pair.getInput().size()) {
        throw new RuntimeException(""String_Node_Str"" + tm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          MLData result=tm.compute(pair.getInput());
          return result;
        }
      }
);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  List<Integer> scores=new ArrayList<Integer>();
  List<Integer> rfTreeSizeList=new ArrayList<Integer>();
  if (CollectionUtils.isNotEmpty(tasks)) {
    List<MLData> modelResults=this.executorManager.submitTasksAndWaitResults(tasks);
    for (int i=0; i < this.models.size(); i++) {
      BasicML model=this.models.get(i);
      MLData score=modelResults.get(i);
      if (model instanceof BasicNetwork) {
        if (modelConfig != null && modelConfig.isRegression()) {
          scores.add(toScore(score.getData(0)));
        }
 else         if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
          scores.add(toScore(score.getData(0)));
        }
 else {
          double[] outputs=score.getData();
          for (          double d : outputs) {
            scores.add(toScore(d));
          }
        }
      }
 else       if (model instanceof SVM) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof LR) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof TreeModel) {
        if (modelConfig.isClassification() && !modelConfig.getTrain().isOneVsAll()) {
          double[] scoreArray=score.getData();
          for (          double sc : scoreArray) {
            scores.add((int)sc);
          }
        }
 else {
          scores.add(toScore(score.getData(0)));
        }
        final TreeModel tm=(TreeModel)model;
        if (!tm.isClassfication() && !tm.isGBDT()) {
          rfTreeSizeList.add(tm.getTrees().size());
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Integer tag=(int)pair.getIdeal().getData(0);
  if (scores.size() == 0) {
    log.error(""String_Node_Str"");
    return null;
  }
  return new ScoreObject(scores,tag,rfTreeSizeList);
}","public ScoreObject score(final MLDataPair pair,Map<String,String> rawDataMap){
  if (pair == null) {
    return null;
  }
  List<Callable<MLData>> tasks=new ArrayList<Callable<MLData>>();
  for (  final BasicML model : models) {
    if (model instanceof BasicNetwork) {
      final BasicNetwork network=(BasicNetwork)model;
      if (network.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + network.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return network.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof SVM) {
      final SVM svm=(SVM)model;
      if (svm.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + svm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return svm.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof LR) {
      final LR lr=(LR)model;
      if (lr.getInputCount() != pair.getInput().size()) {
        log.error(""String_Node_Str"" + lr.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
        continue;
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          return lr.compute(pair.getInput());
        }
      }
);
    }
 else     if (model instanceof TreeModel) {
      final TreeModel tm=(TreeModel)model;
      if (tm.getInputCount() != pair.getInput().size()) {
        throw new RuntimeException(""String_Node_Str"" + tm.getInputCount() + ""String_Node_Str""+ pair.getInput().size());
      }
      tasks.add(new Callable<MLData>(){
        @Override public MLData call() throws Exception {
          MLData result=tm.compute(pair.getInput());
          return result;
        }
      }
);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  List<Integer> scores=new ArrayList<Integer>();
  List<Integer> rfTreeSizeList=new ArrayList<Integer>();
  if (CollectionUtils.isNotEmpty(tasks)) {
    List<MLData> modelResults=this.executorManager.submitTasksAndWaitResults(tasks);
    if (CollectionUtils.isEmpty(modelResults) || modelResults.size() != this.models.size()) {
      log.error(""String_Node_Str"");
      return null;
    }
    for (int i=0; i < this.models.size(); i++) {
      BasicML model=this.models.get(i);
      MLData score=modelResults.get(i);
      if (model instanceof BasicNetwork) {
        if (modelConfig != null && modelConfig.isRegression()) {
          scores.add(toScore(score.getData(0)));
        }
 else         if (modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll()) {
          scores.add(toScore(score.getData(0)));
        }
 else {
          double[] outputs=score.getData();
          for (          double d : outputs) {
            scores.add(toScore(d));
          }
        }
      }
 else       if (model instanceof SVM) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof LR) {
        scores.add(toScore(score.getData(0)));
      }
 else       if (model instanceof TreeModel) {
        if (modelConfig.isClassification() && !modelConfig.getTrain().isOneVsAll()) {
          double[] scoreArray=score.getData();
          for (          double sc : scoreArray) {
            scores.add((int)sc);
          }
        }
 else {
          scores.add(toScore(score.getData(0)));
        }
        final TreeModel tm=(TreeModel)model;
        if (!tm.isClassfication() && !tm.isGBDT()) {
          rfTreeSizeList.add(tm.getTrees().size());
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Integer tag=(int)pair.getIdeal().getData(0);
  if (scores.size() == 0) {
    log.error(""String_Node_Str"");
    return null;
  }
  return new ScoreObject(scores,tag,rfTreeSizeList);
}",0.9806031785758978
31983,"@Override public Schema outputSchema(Schema input){
  try {
    Schema tupleSchema=new Schema();
    tupleSchema.add(new FieldSchema(""String_Node_Str"",DataType.INTEGER));
    tupleSchema.add(new FieldSchema(""String_Node_Str"",DataType.CHARARRAY));
    tupleSchema.add(new FieldSchema(""String_Node_Str"",DataType.BOOLEAN));
    if (this.isAppendRandom) {
      tupleSchema.add(new FieldSchema(""String_Node_Str"",DataType.INTEGER));
    }
    return new Schema(new Schema.FieldSchema(""String_Node_Str"",new Schema(new Schema.FieldSchema(""String_Node_Str"",tupleSchema,DataType.TUPLE)),DataType.BAG));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
}","@Override public Schema outputSchema(Schema input){
  try {
    Schema tupleSchema=new Schema();
    tupleSchema.add(new FieldSchema(""String_Node_Str"",DataType.INTEGER));
    tupleSchema.add(new FieldSchema(""String_Node_Str"",DataType.CHARARRAY));
    tupleSchema.add(new FieldSchema(""String_Node_Str"",DataType.BOOLEAN));
    if (this.isAppendRandom) {
      tupleSchema.add(new FieldSchema(""String_Node_Str"",DataType.INTEGER));
    }
    tupleSchema.add(new FieldSchema(""String_Node_Str"",DataType.DOUBLE));
    return new Schema(new Schema.FieldSchema(""String_Node_Str"",new Schema(new Schema.FieldSchema(""String_Node_Str"",tupleSchema,DataType.TUPLE)),DataType.BAG));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    return null;
  }
}",0.9492703266157052
31984,"public AddColumnNumAndFilterUDF(String source,String pathModelConfig,String pathColumnConfig,String withScoreStr,String isAppendRandom) throws Exception {
  super(source,pathModelConfig,pathColumnConfig);
  this.isAppendRandom=Boolean.TRUE.toString().equalsIgnoreCase(isAppendRandom);
}","public AddColumnNumAndFilterUDF(String source,String pathModelConfig,String pathColumnConfig,String withScoreStr,String isAppendRandom) throws Exception {
  super(source,pathModelConfig,pathColumnConfig,withScoreStr);
  this.isAppendRandom=Boolean.TRUE.toString().equalsIgnoreCase(isAppendRandom);
}",0.9777777777777776
31985,"@SuppressWarnings(""String_Node_Str"") public DataBag exec(Tuple input) throws IOException {
  DataBag bag=BagFactory.getInstance().newDefaultBag();
  TupleFactory tupleFactory=TupleFactory.getInstance();
  if (input == null) {
    return null;
  }
  int size=input.size();
  if (size == 0 || input.size() < this.columnConfigList.size()) {
    log.info(""String_Node_Str"" + input.size() + ""String_Node_Str""+ columnConfigList.size());
    throw new ShifuException(ShifuErrorCode.ERROR_NO_EQUAL_COLCONFIG);
  }
  if (input.get(tagColumnNum) == null) {
    throw new ShifuException(ShifuErrorCode.ERROR_NO_TARGET_COLUMN);
  }
  String tag=input.get(tagColumnNum).toString();
  if (!super.tagSet.contains(tag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  Double rate=modelConfig.getBinningSampleRate();
  if (modelConfig.isBinningSampleNegOnly()) {
    if (super.negTagSet.contains(tag) && random.nextDouble() > rate) {
      return null;
    }
  }
 else {
    if (random.nextDouble() > rate) {
      return null;
    }
  }
  for (int i=0; i < size; i++) {
    ColumnConfig config=columnConfigList.get(i);
    if (config.isCandidate()) {
      boolean isPositive=false;
      ;
      if (modelConfig.isRegression()) {
        if (super.posTagSet.contains(tag)) {
          isPositive=true;
        }
 else         if (super.negTagSet.contains(tag)) {
          isPositive=false;
        }
 else {
          continue;
        }
      }
      if (!isValidRecord(modelConfig.isRegression(),isPositive,config)) {
        continue;
      }
      Tuple tuple=tupleFactory.newTuple(TOTAL_COLUMN_CNT);
      tuple.set(COLUMN_ID_INDX,i);
      tuple.set(COLUMN_VAL_INDX,(input.get(i) == null ? null : input.get(i).toString()));
      if (modelConfig.isRegression()) {
        if (super.posTagSet.contains(tag)) {
          tuple.set(COLUMN_TAG_INDX,true);
        }
        if (super.negTagSet.contains(tag)) {
          tuple.set(COLUMN_TAG_INDX,false);
        }
      }
 else {
        tuple.set(COLUMN_TAG_INDX,true);
      }
      if (this.isAppendRandom) {
        tuple.set(COLUMN_SEED_INDX,Math.abs(random.nextInt() % 300));
      }
      bag.add(tuple);
    }
  }
  return bag;
}","@SuppressWarnings(""String_Node_Str"") @Override public DataBag exec(Tuple input) throws IOException {
  DataBag bag=BagFactory.getInstance().newDefaultBag();
  TupleFactory tupleFactory=TupleFactory.getInstance();
  if (input == null) {
    return null;
  }
  int size=input.size();
  if (size == 0 || input.size() < this.columnConfigList.size()) {
    log.info(""String_Node_Str"" + input.size() + ""String_Node_Str""+ columnConfigList.size());
    throw new ShifuException(ShifuErrorCode.ERROR_NO_EQUAL_COLCONFIG);
  }
  if (input.get(tagColumnNum) == null) {
    throw new ShifuException(ShifuErrorCode.ERROR_NO_TARGET_COLUMN);
  }
  String tag=input.get(tagColumnNum).toString();
  if (!super.tagSet.contains(tag)) {
    if (isPigEnabled(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"")) {
      PigStatusReporter.getInstance().getCounter(Constants.SHIFU_GROUP_COUNTER,""String_Node_Str"").increment(1);
    }
    return null;
  }
  Double rate=modelConfig.getBinningSampleRate();
  if (modelConfig.isBinningSampleNegOnly()) {
    if (super.negTagSet.contains(tag) && random.nextDouble() > rate) {
      return null;
    }
  }
 else {
    if (random.nextDouble() > rate) {
      return null;
    }
  }
  for (int i=0; i < size; i++) {
    ColumnConfig config=columnConfigList.get(i);
    if (config.isCandidate()) {
      boolean isPositive=false;
      ;
      if (modelConfig.isRegression()) {
        if (super.posTagSet.contains(tag)) {
          isPositive=true;
        }
 else         if (super.negTagSet.contains(tag)) {
          isPositive=false;
        }
 else {
          continue;
        }
      }
      if (!isValidRecord(modelConfig.isRegression(),isPositive,config)) {
        continue;
      }
      Tuple tuple=tupleFactory.newTuple(TOTAL_COLUMN_CNT);
      tuple.set(COLUMN_ID_INDX,i);
      tuple.set(COLUMN_VAL_INDX,(input.get(i) == null ? null : input.get(i).toString()));
      if (modelConfig.isRegression()) {
        if (super.posTagSet.contains(tag)) {
          tuple.set(COLUMN_TAG_INDX,true);
        }
        if (super.negTagSet.contains(tag)) {
          tuple.set(COLUMN_TAG_INDX,false);
        }
      }
 else {
        tuple.set(COLUMN_TAG_INDX,true);
      }
      tuple.set(COLUMN_WEIGHT_INDX,getWeightColumnVal(input));
      if (this.isAppendRandom) {
        tuple.set(COLUMN_SEED_INDX,Math.abs(random.nextInt() % 300));
      }
      bag.add(tuple);
    }
  }
  return bag;
}",0.969964293215711
31986,"@Override public List<ColumnConfig> process() throws IOException {
  LOG.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    LOG.info(""String_Node_Str"");
    JSONUtils.writeValue(new File(pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    JSONUtils.writeValue(new File(pathFinder.getColumnConfigPath(SourceType.LOCAL)),columnConfigList);
    if (SourceType.HDFS.equals(modelConfig.getDataSet().getSource())) {
      CommonUtils.copyConfFromLocalToHDFS(modelConfig);
    }
    SourceType sourceType=modelConfig.getDataSet().getSource();
    ShifuFileUtils.deleteFile(pathFinder.getNormalizedDataPath(),sourceType);
    ShifuFileUtils.deleteFile(pathFinder.getNormalizedValidationDataPath(),sourceType);
    ShifuFileUtils.deleteFile(pathFinder.getSelectedRawDataPath(),sourceType);
    Map<String,String> paramsMap=new HashMap<String,String>();
    paramsMap.put(""String_Node_Str"",modelConfig.getNormalizeSampleRate().toString());
    paramsMap.put(""String_Node_Str"",((Boolean)modelConfig.isNormalizeSampleNegOnly()).toString());
    paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
    try {
      String normPigPath=null;
      if (modelConfig.getNormalize().getIsParquet()) {
        if (modelConfig.getBasic().getPostTrainOn()) {
          normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
        }
 else {
          LOG.info(""String_Node_Str"");
          normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
        }
      }
 else {
        if (modelConfig.getBasic().getPostTrainOn()) {
        }
        normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
      }
      paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
      PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,modelConfig.getDataSet().getSource(),super.pathFinder);
      if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
        paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
        paramsMap.put(Constants.PATH_RAW_DATA,modelConfig.getValidationDataSetRawPath());
        paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getNormalizedValidationDataPath());
        PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,modelConfig.getDataSet().getSource(),super.pathFinder);
      }
    }
 catch (    IOException e) {
      throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
    }
catch (    Throwable e) {
      throw new RuntimeException(e);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  LOG.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return columnConfigList;
}","@Override public List<ColumnConfig> process() throws IOException {
  LOG.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  try {
    LOG.info(""String_Node_Str"");
    JSONUtils.writeValue(new File(pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
    JSONUtils.writeValue(new File(pathFinder.getColumnConfigPath(SourceType.LOCAL)),columnConfigList);
    if (SourceType.HDFS.equals(modelConfig.getDataSet().getSource())) {
      CommonUtils.copyConfFromLocalToHDFS(modelConfig);
    }
    SourceType sourceType=modelConfig.getDataSet().getSource();
    ShifuFileUtils.deleteFile(pathFinder.getNormalizedDataPath(),sourceType);
    ShifuFileUtils.deleteFile(pathFinder.getNormalizedValidationDataPath(),sourceType);
    ShifuFileUtils.deleteFile(pathFinder.getSelectedRawDataPath(),sourceType);
    Map<String,String> paramsMap=new HashMap<String,String>();
    paramsMap.put(""String_Node_Str"",modelConfig.getNormalizeSampleRate().toString());
    paramsMap.put(""String_Node_Str"",((Boolean)modelConfig.isNormalizeSampleNegOnly()).toString());
    paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
    try {
      String normPigPath=null;
      if (modelConfig.getNormalize().getIsParquet()) {
        if (modelConfig.getBasic().getPostTrainOn()) {
          normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
        }
 else {
          LOG.info(""String_Node_Str"");
          normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
        }
      }
 else {
        if (modelConfig.getBasic().getPostTrainOn()) {
        }
        normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
      }
      paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
      paramsMap.put(Constants.IS_NORM_FOR_CLEAN,""String_Node_Str"");
      PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,modelConfig.getDataSet().getSource(),super.pathFinder);
      if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
        paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
        paramsMap.put(Constants.PATH_RAW_DATA,modelConfig.getValidationDataSetRawPath());
        paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getNormalizedValidationDataPath());
        PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap,modelConfig.getDataSet().getSource(),super.pathFinder);
      }
    }
 catch (    IOException e) {
      throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
    }
catch (    Throwable e) {
      throw new RuntimeException(e);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  LOG.info(""String_Node_Str"",(System.currentTimeMillis() - start));
  return columnConfigList;
}",0.9875640087783468
31987,"/** 
 * running pig normalize process
 * @throws IOException
 */
private void runPigNormalize() throws IOException {
  SourceType sourceType=modelConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getNormalizedDataPath(),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getNormalizedValidationDataPath(),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getSelectedRawDataPath(),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(""String_Node_Str"",modelConfig.getNormalizeSampleRate().toString());
  paramsMap.put(""String_Node_Str"",((Boolean)modelConfig.isNormalizeSampleNegOnly()).toString());
  paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
  try {
    String normPigPath=null;
    if (modelConfig.getNormalize().getIsParquet()) {
      if (modelConfig.getBasic().getPostTrainOn()) {
        normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
      }
 else {
        log.info(""String_Node_Str"");
        normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
      }
    }
 else {
      if (modelConfig.getBasic().getPostTrainOn()) {
      }
      normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
    }
    paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
    PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap);
    if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
      paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
      paramsMap.put(Constants.PATH_RAW_DATA,modelConfig.getValidationDataSetRawPath());
      paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getNormalizedValidationDataPath());
      PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap);
    }
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * running pig normalize process
 * @throws IOException
 */
private void runPigNormalize() throws IOException {
  SourceType sourceType=modelConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getNormalizedDataPath(),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getNormalizedValidationDataPath(),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getSelectedRawDataPath(),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(""String_Node_Str"",modelConfig.getNormalizeSampleRate().toString());
  paramsMap.put(""String_Node_Str"",((Boolean)modelConfig.isNormalizeSampleNegOnly()).toString());
  paramsMap.put(""String_Node_Str"",CommonUtils.escapePigString(modelConfig.getDataSetDelimiter()));
  try {
    String normPigPath=null;
    if (modelConfig.getNormalize().getIsParquet()) {
      if (modelConfig.getBasic().getPostTrainOn()) {
        normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
      }
 else {
        log.info(""String_Node_Str"");
        normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
      }
    }
 else {
      if (modelConfig.getBasic().getPostTrainOn()) {
      }
      normPigPath=pathFinder.getAbsolutePath(""String_Node_Str"");
    }
    paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
    paramsMap.put(Constants.IS_NORM_FOR_CLEAN,""String_Node_Str"");
    PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap);
    if (StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath())) {
      paramsMap.put(Constants.IS_COMPRESS,""String_Node_Str"");
      paramsMap.put(Constants.PATH_RAW_DATA,modelConfig.getValidationDataSetRawPath());
      paramsMap.put(Constants.PATH_NORMALIZED_DATA,pathFinder.getNormalizedValidationDataPath());
      PigExecutor.getExecutor().submitJob(modelConfig,normPigPath,paramsMap);
    }
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.9834170854271356
31988,"private void writeModelToFileSystem(List<TreeNode> trees,Path out){
  FSDataOutputStream fos=null;
  try {
    fos=FileSystem.get(new Configuration()).create(out);
    LOG.info(""String_Node_Str"",out);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(this.validParams.get(""String_Node_Str"").toString());
    fos.writeBoolean(this.modelConfig.isClassification());
    fos.writeBoolean(this.modelConfig.getTrain().isOneVsAll());
    fos.writeInt(this.inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      if (columnConfig.isCategorical()) {
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),columnConfig.getBinCategory());
      }
      if (columnConfig.isNumerical()) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    fos.writeInt(numericalMeanMapping.size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      List<String> categories=entry.getValue();
      fos.writeInt(categories.size());
      for (      String category : categories) {
        fos.writeUTF(category);
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping();
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    int treeLength=trees.size();
    fos.writeInt(treeLength);
    for (    TreeNode treeNode : trees) {
      treeNode.write(fos);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}","private void writeModelToFileSystem(List<TreeNode> trees,Path out){
  FSDataOutputStream fos=null;
  try {
    fos=FileSystem.get(new Configuration()).create(out);
    LOG.info(""String_Node_Str"",out);
    fos.writeUTF(modelConfig.getAlgorithm());
    fos.writeUTF(this.validParams.get(""String_Node_Str"").toString());
    fos.writeBoolean(this.modelConfig.isClassification());
    fos.writeBoolean(this.modelConfig.getTrain().isOneVsAll());
    fos.writeInt(this.inputCount);
    Map<Integer,String> columnIndexNameMapping=new HashMap<Integer,String>();
    Map<Integer,List<String>> columnIndexCategoricalListMapping=new HashMap<Integer,List<String>>();
    Map<Integer,Double> numericalMeanMapping=new HashMap<Integer,Double>();
    for (    ColumnConfig columnConfig : this.columnConfigList) {
      columnIndexNameMapping.put(columnConfig.getColumnNum(),columnConfig.getColumnName());
      if (columnConfig.isCategorical()) {
        columnIndexCategoricalListMapping.put(columnConfig.getColumnNum(),columnConfig.getBinCategory());
      }
      if (columnConfig.isNumerical()) {
        numericalMeanMapping.put(columnConfig.getColumnNum(),columnConfig.getMean());
      }
    }
    fos.writeInt(numericalMeanMapping.size());
    for (    Entry<Integer,Double> entry : numericalMeanMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeDouble(entry.getValue() == null ? 0d : entry.getValue());
    }
    fos.writeInt(columnIndexNameMapping.size());
    for (    Entry<Integer,String> entry : columnIndexNameMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeUTF(entry.getValue());
    }
    fos.writeInt(columnIndexCategoricalListMapping.size());
    for (    Entry<Integer,List<String>> entry : columnIndexCategoricalListMapping.entrySet()) {
      List<String> categories=entry.getValue();
      if (categories != null) {
        fos.writeInt(entry.getKey());
        fos.writeInt(categories.size());
        for (        String category : categories) {
          fos.writeUTF(category);
        }
      }
    }
    Map<Integer,Integer> columnMapping=getColumnMapping();
    fos.writeInt(columnMapping.size());
    for (    Entry<Integer,Integer> entry : columnMapping.entrySet()) {
      fos.writeInt(entry.getKey());
      fos.writeInt(entry.getValue());
    }
    int treeLength=trees.size();
    fos.writeInt(treeLength);
    for (    TreeNode treeNode : trees) {
      treeNode.write(fos);
    }
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeStream(fos);
  }
}",0.9671156893819336
31989,"@Override public Void process() throws IOException {
  LOG.info(""String_Node_Str"");
  JSONUtils.writeValue(new File(pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
  JSONUtils.writeValue(new File(pathFinder.getColumnConfigPath(SourceType.LOCAL)),columnConfigList);
  EvalModelProcessor processor=new EvalModelProcessor(EvalStep.RUN);
  try {
    processor.run();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return null;
}","@Override public Void process() throws IOException {
  LOG.info(""String_Node_Str"");
  JSONUtils.writeValue(new File(pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
  JSONUtils.writeValue(new File(pathFinder.getColumnConfigPath(SourceType.LOCAL)),columnConfigList);
  EvalModelProcessor processor=new EvalModelProcessor(EvalStep.RUN,super.otherConfigs);
  try {
    processor.run();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return null;
}",0.97989417989418
31990,"public BasicModelProcessor(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,Map<String,Object> otherConfigs){
  this.modelConfig=modelConfig;
  this.columnConfigList=columnConfigList;
  this.otherConfigs=otherConfigs;
  this.pathFinder=new PathFinder(modelConfig,otherConfigs);
}","public BasicModelProcessor(ModelConfig modelConfig,List<ColumnConfig> columnConfigList,Map<String,Object> otherConfigs){
  this.modelConfig=modelConfig;
  this.columnConfigList=columnConfigList;
  this.setOtherConfigs(otherConfigs);
  this.pathFinder=new PathFinder(modelConfig,otherConfigs);
}",0.8253424657534246
31991,"/** 
 * initialize the config file, pathFinder and other input
 * @param step Shifu running step
 * @throws Exception
 */
protected void setUp(ModelStep step) throws Exception {
  if (hasInitialized()) {
    return;
  }
  loadModelConfig();
  validateModelConfig(step);
  pathFinder=new PathFinder(modelConfig,this.otherConfigs);
  checkAlgorithmParam();
  log.info(String.format(""String_Node_Str"",modelConfig.getDataSet().getSource()));
switch (step) {
case INIT:
    break;
default :
  loadColumnConfig();
validateColumnConfig();
break;
}
}","/** 
 * initialize the config file, pathFinder and other input
 * @param step Shifu running step
 * @throws Exception
 */
protected void setUp(ModelStep step) throws Exception {
  if (hasInitialized()) {
    return;
  }
  loadModelConfig();
  validateModelConfig(step);
  pathFinder=new PathFinder(modelConfig,this.getOtherConfigs());
  checkAlgorithmParam();
  log.info(String.format(""String_Node_Str"",modelConfig.getDataSet().getSource()));
switch (step) {
case INIT:
    break;
default :
  loadColumnConfig();
validateColumnConfig();
break;
}
}",0.9733700642791552
31992,"/** 
 * run pig mode scoring
 * @param evalConfig
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") private void runPigScore(EvalConfig evalConfig) throws IOException {
  SourceType sourceType=evalConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getEvalNormalizedPath(evalConfig),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getEvalScorePath(evalConfig),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getEvalPerformancePath(evalConfig),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(Constants.SOURCE_TYPE,sourceType.toString());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataPath());
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalNormalizedPath(evalConfig));
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalScorePath(evalConfig));
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalPerformancePath(evalConfig));
  paramsMap.put(""String_Node_Str"",evalConfig.getName());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataDelimiter());
  paramsMap.put(""String_Node_Str"",evalConfig.getPerformanceScoreSelector().trim());
  String pigScript=""String_Node_Str"";
  if (modelConfig.isClassification()) {
    pigScript=""String_Node_Str"";
  }
  try {
    PigExecutor.getExecutor().submitJob(modelConfig,pathFinder.getAbsolutePath(pigScript),paramsMap,evalConfig.getDataSet().getSource());
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
  Iterator<JobStats> iter=PigStats.get().getJobGraph().iterator();
  while (iter.hasNext()) {
    JobStats jobStats=iter.next();
    this.evalRecords=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_RECORDS);
    log.info(""String_Node_Str"" + evalRecords);
    if (this.evalRecords == 0L) {
      continue;
    }
    this.pigPosTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_POSTAGS);
    this.pigNegTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_NEGTAGS);
    this.pigPosWeightTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_WPOSTAGS) / (Constants.EVAL_COUNTER_WEIGHT_SCALE * 1.0d);
    this.pigNegWeightTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_WNEGTAGS) / (Constants.EVAL_COUNTER_WEIGHT_SCALE * 1.0d);
    break;
  }
}","/** 
 * run pig mode scoring
 * @param evalConfig
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") private void runPigScore(EvalConfig evalConfig) throws IOException {
  SourceType sourceType=evalConfig.getDataSet().getSource();
  ShifuFileUtils.deleteFile(pathFinder.getEvalNormalizedPath(evalConfig),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getEvalScorePath(evalConfig),sourceType);
  ShifuFileUtils.deleteFile(pathFinder.getEvalPerformancePath(evalConfig),sourceType);
  Map<String,String> paramsMap=new HashMap<String,String>();
  paramsMap.put(Constants.SOURCE_TYPE,sourceType.toString());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataPath());
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalNormalizedPath(evalConfig));
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalScorePath(evalConfig));
  paramsMap.put(""String_Node_Str"",pathFinder.getEvalPerformancePath(evalConfig));
  paramsMap.put(""String_Node_Str"",evalConfig.getName());
  paramsMap.put(""String_Node_Str"",evalConfig.getDataSet().getDataDelimiter());
  paramsMap.put(""String_Node_Str"",evalConfig.getPerformanceScoreSelector().trim());
  String pigScript=""String_Node_Str"";
  if (modelConfig.isClassification()) {
    pigScript=""String_Node_Str"";
  }
  try {
    PigExecutor.getExecutor().submitJob(modelConfig,pathFinder.getAbsolutePath(pigScript),paramsMap,evalConfig.getDataSet().getSource(),super.pathFinder);
  }
 catch (  IOException e) {
    throw new ShifuException(ShifuErrorCode.ERROR_RUNNING_PIG_JOB,e);
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
  Iterator<JobStats> iter=PigStats.get().getJobGraph().iterator();
  while (iter.hasNext()) {
    JobStats jobStats=iter.next();
    this.evalRecords=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_RECORDS);
    log.info(""String_Node_Str"" + evalRecords);
    if (this.evalRecords == 0L) {
      continue;
    }
    this.pigPosTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_POSTAGS);
    this.pigNegTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_NEGTAGS);
    this.pigPosWeightTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_WPOSTAGS) / (Constants.EVAL_COUNTER_WEIGHT_SCALE * 1.0d);
    this.pigNegWeightTags=jobStats.getHadoopCounters().getGroup(Constants.SHIFU_GROUP_COUNTER).getCounter(Constants.COUNTER_WNEGTAGS) / (Constants.EVAL_COUNTER_WEIGHT_SCALE * 1.0d);
    break;
  }
}",0.9967162449294958
31993,"@Override public Void process() throws IOException {
  LOG.info(""String_Node_Str"");
  JSONUtils.writeValue(new File(pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
  JSONUtils.writeValue(new File(pathFinder.getColumnConfigPath(SourceType.LOCAL)),columnConfigList);
  TrainModelProcessor processor=new TrainModelProcessor();
  try {
    processor.run();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return null;
}","@Override public Void process() throws IOException {
  LOG.info(""String_Node_Str"");
  JSONUtils.writeValue(new File(pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
  JSONUtils.writeValue(new File(pathFinder.getColumnConfigPath(SourceType.LOCAL)),columnConfigList);
  TrainModelProcessor processor=new TrainModelProcessor(super.otherConfigs);
  try {
    processor.run();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return null;
}",0.9805194805194806
31994,"@Override public Void process() throws IOException {
  LOG.info(""String_Node_Str"");
  JSONUtils.writeValue(new File(pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
  JSONUtils.writeValue(new File(pathFinder.getColumnConfigPath(SourceType.LOCAL)),columnConfigList);
  VarSelectModelProcessor processor=new VarSelectModelProcessor();
  try {
    processor.run();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return null;
}","@Override public Void process() throws IOException {
  LOG.info(""String_Node_Str"");
  JSONUtils.writeValue(new File(pathFinder.getModelConfigPath(SourceType.LOCAL)),modelConfig);
  JSONUtils.writeValue(new File(pathFinder.getColumnConfigPath(SourceType.LOCAL)),columnConfigList);
  VarSelectModelProcessor processor=new VarSelectModelProcessor(super.otherConfigs);
  try {
    processor.run();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return null;
}",0.9808510638297872
31995,"@Test public void testUDFEnoughInput() throws Exception {
  Tuple tuple=TupleFactory.getInstance().newTuple(31);
  for (int i=0; i < 31; i++) {
    tuple.set(i,0);
  }
  tuple.set(0,""String_Node_Str"");
  DataBag dataBag=instance.exec(tuple);
  Assert.assertEquals(30,dataBag.size());
  Assert.assertEquals(dataBag.iterator().next().size(),4);
}","@Test public void testUDFEnoughInput() throws Exception {
  Tuple tuple=TupleFactory.getInstance().newTuple(31);
  for (int i=0; i < 31; i++) {
    tuple.set(i,0);
  }
  tuple.set(0,""String_Node_Str"");
  DataBag dataBag=instance.exec(tuple);
  Assert.assertEquals(30,dataBag.size());
  Assert.assertEquals(dataBag.iterator().next().size(),5);
}",0.997093023255814
31996,"@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      Map<String,Integer> categoryMap=new HashMap<String,Integer>();
      for (int i=0; i < config.getBinCategory().size(); i++) {
        categoryMap.put(config.getBinCategory().get(i),i);
      }
      this.categoryIndexMap.put(config.getColumnNum(),categoryMap);
    }
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getCrossValidationRate();
  if (Double.compare(validationRate,0d) != 0) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new LinkedList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new LinkedList<Data>());
  }
 else {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new LinkedList<Data>());
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.numericInputCount=inputOutputIndex[0];
  this.categoricalInputCount=inputOutputIndex[1];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[2] : modelConfig.getTags().size();
  this.isAfterVarSelect=inputOutputIndex[3] == 1 ? true : false;
  this.isCrossValidation=StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath());
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else {
    this.loss=new SquaredLoss();
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  if (this.isRF || (this.isGBDT && this.gbdtSampleWithReplacement)) {
    this.rng=new PoissonDistribution[treeNum];
    for (int i=0; i < treeNum; i++) {
      this.rng[i]=new PoissonDistribution(this.modelConfig.getTrain().getBaggingSampleRate());
    }
  }
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT);
}","@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      Map<String,Integer> categoryMap=new HashMap<String,Integer>();
      for (int i=0; i < config.getBinCategory().size(); i++) {
        categoryMap.put(config.getBinCategory().get(i),i);
      }
      this.categoryIndexMap.put(config.getColumnNum(),categoryMap);
    }
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getCrossValidationRate();
  if (Double.compare(validationRate,0d) != 0) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new LinkedList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new LinkedList<Data>());
  }
 else {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new LinkedList<Data>());
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.numericInputCount=inputOutputIndex[0];
  this.categoricalInputCount=inputOutputIndex[1];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[2] : modelConfig.getTags().size();
  this.isAfterVarSelect=inputOutputIndex[3] == 1 ? true : false;
  this.isCrossValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else {
    this.loss=new SquaredLoss();
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  if (this.isRF || (this.isGBDT && this.gbdtSampleWithReplacement)) {
    this.rng=new PoissonDistribution[treeNum];
    for (int i=0; i < treeNum; i++) {
      this.rng[i]=new PoissonDistribution(this.modelConfig.getTrain().getBaggingSampleRate());
    }
  }
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT);
}",0.9907958852192744
31997,"@Override public void init(WorkerContext<LogisticRegressionParams,LogisticRegressionParams> context){
  loadConfigFiles(context.getProps());
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNum=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNum=inputOutputIndex[1];
  this.candidateNum=inputOutputIndex[2];
  this.isCrossValidation=StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath());
  if (this.inputNum == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double crossValidationRate=this.modelConfig.getCrossValidationRate();
  String tmpFolder=context.getProps().getProperty(""String_Node_Str"",""String_Node_Str"");
  this.trainingData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - crossValidationRate)),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
  this.testingData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * crossValidationRate),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      LogisticRegressionWorker.this.testingData.close();
      LogisticRegressionWorker.this.trainingData.close();
    }
  }
));
}","@Override public void init(WorkerContext<LogisticRegressionParams,LogisticRegressionParams> context){
  loadConfigFiles(context.getProps());
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNum=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNum=inputOutputIndex[1];
  this.candidateNum=inputOutputIndex[2];
  this.isCrossValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  if (this.inputNum == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double crossValidationRate=this.modelConfig.getCrossValidationRate();
  String tmpFolder=context.getProps().getProperty(""String_Node_Str"",""String_Node_Str"");
  this.trainingData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - crossValidationRate)),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
  this.testingData=new BytableMemoryDiskList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * crossValidationRate),tmpFolder + File.separator + ""String_Node_Str""+ System.currentTimeMillis(),Data.class.getName());
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      LogisticRegressionWorker.this.testingData.close();
      LogisticRegressionWorker.this.trainingData.close();
    }
  }
));
}",0.9734927234927236
31998,"@Override public void init(WorkerContext<NNParams,NNParams> context){
  this.props=context.getProps();
  loadConfigFiles(context.getProps());
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  this.validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    this.validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.poissonSampler=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(NNConstants.NN_POISON_SAMPLER));
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  Integer epochsPerIterationInteger=this.modelConfig.getTrain().getEpochsPerIteration();
  this.epochsPerIteration=epochsPerIterationInteger == null ? 1 : epochsPerIterationInteger.intValue();
  LOG.info(""String_Node_Str"",epochsPerIteration);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[1] : (modelConfig.getTrain().isOneVsAll() ? inputOutputIndex[1] : modelConfig.getTags().size());
  this.candidateCount=inputOutputIndex[2];
  this.isDry=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  this.isCrossValidation=StringUtils.isNotBlank(modelConfig.getValidationDataSetRawPath());
  if (isOnDisk()) {
    LOG.info(""String_Node_Str"");
    try {
      initDiskDataSet();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      @Override public void run(){
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.testingData)).close();
      }
    }
));
  }
 else {
    LOG.info(""String_Node_Str"");
    double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
    long memoryStoreSize=(long)(Runtime.getRuntime().maxMemory() * memoryFraction);
    LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
    double crossValidationRate=this.modelConfig.getCrossValidationRate();
    try {
      this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * (1 - crossValidationRate)),DTrainUtils.getTrainingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      this.testingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * crossValidationRate),DTrainUtils.getTestingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.testingData)).close();
        }
      }
));
    }
 catch (    IOException e) {
      throw new GuaguaRuntimeException(e);
    }
  }
}","@Override public void init(WorkerContext<NNParams,NNParams> context){
  this.props=context.getProps();
  loadConfigFiles(context.getProps());
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  this.validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    this.validParams=gs.getParams(trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.poissonSampler=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(NNConstants.NN_POISON_SAMPLER));
  this.rng=new PoissonDistribution(1.0d);
  Double upSampleWeight=modelConfig.getTrain().getUpSampleWeight();
  if (Double.compare(upSampleWeight,1d) != 0) {
    LOG.info(""String_Node_Str"",upSampleWeight);
    this.upSampleRng=new PoissonDistribution(upSampleWeight - 1);
  }
  Integer epochsPerIterationInteger=this.modelConfig.getTrain().getEpochsPerIteration();
  this.epochsPerIteration=epochsPerIterationInteger == null ? 1 : epochsPerIterationInteger.intValue();
  LOG.info(""String_Node_Str"",epochsPerIteration);
  int[] inputOutputIndex=DTrainUtils.getInputOutputCandidateCounts(this.columnConfigList);
  this.inputNodeCount=inputOutputIndex[0] == 0 ? inputOutputIndex[2] : inputOutputIndex[0];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[1] : (modelConfig.getTrain().isOneVsAll() ? inputOutputIndex[1] : modelConfig.getTags().size());
  this.candidateCount=inputOutputIndex[2];
  this.isDry=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.SHIFU_DRY_DTRAIN));
  this.isCrossValidation=(modelConfig.getValidationDataSetRawPath() != null && !""String_Node_Str"".equals(modelConfig.getValidationDataSetRawPath()));
  if (isOnDisk()) {
    LOG.info(""String_Node_Str"");
    try {
      initDiskDataSet();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
      @Override public void run(){
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
        ((BufferedFloatMLDataSet)(AbstractNNWorker.this.testingData)).close();
      }
    }
));
  }
 else {
    LOG.info(""String_Node_Str"");
    double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
    long memoryStoreSize=(long)(Runtime.getRuntime().maxMemory() * memoryFraction);
    LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
    double crossValidationRate=this.modelConfig.getCrossValidationRate();
    try {
      this.trainingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * (1 - crossValidationRate)),DTrainUtils.getTrainingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      this.testingData=new MemoryDiskFloatMLDataSet((long)(memoryStoreSize * crossValidationRate),DTrainUtils.getTestingFile().toString(),this.inputNodeCount,this.outputNodeCount);
      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
        @Override public void run(){
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.trainingData)).close();
          ((MemoryDiskFloatMLDataSet)(AbstractNNWorker.this.testingData)).close();
        }
      }
));
    }
 catch (    IOException e) {
      throw new GuaguaRuntimeException(e);
    }
  }
}",0.9849867530173684
31999,"@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      Map<String,Integer> categoryMap=new HashMap<String,Integer>();
      for (int i=0; i < config.getBinCategory().size(); i++) {
        categoryMap.put(config.getBinCategory().get(i),i);
      }
      this.categoryIndexMap.put(config.getColumnNum(),categoryMap);
    }
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getCrossValidationRate();
  if (Double.compare(validationRate,0d) != 0) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new LinkedList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new LinkedList<Data>());
  }
 else {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new LinkedList<Data>());
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.numericInputCount=inputOutputIndex[0];
  this.categoricalInputCount=inputOutputIndex[1];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[2] : modelConfig.getTags().size();
  this.isAfterVarSelect=inputOutputIndex[3] == 1 ? true : false;
  this.rng=new PoissonDistribution[treeNum];
  for (int i=0; i < treeNum; i++) {
    this.rng[i]=new PoissonDistribution(this.modelConfig.getTrain().getBaggingSampleRate());
  }
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else {
    this.loss=new SquaredLoss();
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT);
}","@Override public void init(WorkerContext<DTMasterParams,DTWorkerParams> context){
  Properties props=context.getProps();
  try {
    SourceType sourceType=SourceType.valueOf(props.getProperty(CommonConstants.MODELSET_SOURCE_TYPE,SourceType.HDFS.toString()));
    this.modelConfig=CommonUtils.loadModelConfig(props.getProperty(CommonConstants.SHIFU_MODEL_CONFIG),sourceType);
    this.columnConfigList=CommonUtils.loadColumnConfigList(props.getProperty(CommonConstants.SHIFU_COLUMN_CONFIG),sourceType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  for (  ColumnConfig config : this.columnConfigList) {
    if (config.isCategorical()) {
      Map<String,Integer> categoryMap=new HashMap<String,Integer>();
      for (int i=0; i < config.getBinCategory().size(); i++) {
        categoryMap.put(config.getBinCategory().get(i),i);
      }
      this.categoryIndexMap.put(config.getColumnNum(),categoryMap);
    }
  }
  this.isContinuousEnabled=Boolean.TRUE.toString().equalsIgnoreCase(context.getProps().getProperty(CommonConstants.CONTINUOUS_TRAINING));
  this.workerThreadCount=modelConfig.getTrain().getWorkerThreadCount();
  this.threadPool=Executors.newFixedThreadPool(this.workerThreadCount);
  context.addCompletionCallBack(new WorkerCompletionCallBack<DTMasterParams,DTWorkerParams>(){
    @Override public void callback(    WorkerContext<DTMasterParams,DTWorkerParams> context){
      DTWorker.this.threadPool.shutdownNow();
      try {
        DTWorker.this.threadPool.awaitTermination(2,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
);
  this.trainerId=Integer.valueOf(context.getProps().getProperty(CommonConstants.SHIFU_TRAINER_ID,""String_Node_Str""));
  this.isOneVsAll=modelConfig.isClassification() && modelConfig.getTrain().isOneVsAll();
  GridSearch gs=new GridSearch(modelConfig.getTrain().getParams());
  Map<String,Object> validParams=this.modelConfig.getTrain().getParams();
  if (gs.hasHyperParam()) {
    validParams=gs.getParams(this.trainerId);
    LOG.info(""String_Node_Str"",validParams);
  }
  this.treeNum=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double memoryFraction=Double.valueOf(context.getProps().getProperty(""String_Node_Str"",""String_Node_Str""));
  LOG.info(""String_Node_Str"",Runtime.getRuntime().maxMemory(),memoryFraction);
  double validationRate=this.modelConfig.getCrossValidationRate();
  if (Double.compare(validationRate,0d) != 0) {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * (1 - validationRate)),new LinkedList<Data>());
    this.validationData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction * validationRate),new LinkedList<Data>());
  }
 else {
    this.trainingData=new MemoryLimitedList<Data>((long)(Runtime.getRuntime().maxMemory() * memoryFraction),new LinkedList<Data>());
  }
  int[] inputOutputIndex=DTrainUtils.getNumericAndCategoricalInputAndOutputCounts(this.columnConfigList);
  this.numericInputCount=inputOutputIndex[0];
  this.categoricalInputCount=inputOutputIndex[1];
  this.outputNodeCount=modelConfig.isRegression() ? inputOutputIndex[2] : modelConfig.getTags().size();
  this.isAfterVarSelect=inputOutputIndex[3] == 1 ? true : false;
  int numClasses=this.modelConfig.isClassification() ? this.modelConfig.getTags().size() : 2;
  String imStr=validParams.get(""String_Node_Str"").toString();
  int minInstancesPerNode=Integer.valueOf(validParams.get(""String_Node_Str"").toString());
  double minInfoGain=Double.valueOf(validParams.get(""String_Node_Str"").toString());
  if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Entropy(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new Gini(numClasses,minInstancesPerNode,minInfoGain);
  }
 else   if (imStr.equalsIgnoreCase(""String_Node_Str"")) {
    impurity=new FriedmanMSE(minInstancesPerNode,minInfoGain);
  }
 else {
    impurity=new Variance(minInstancesPerNode,minInfoGain);
  }
  this.isRF=ALGORITHM.RF.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  this.isGBDT=ALGORITHM.GBT.toString().equalsIgnoreCase(modelConfig.getAlgorithm());
  String lossStr=validParams.get(""String_Node_Str"").toString();
  if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new LogLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new AbsoluteLoss();
  }
 else   if (lossStr.equalsIgnoreCase(""String_Node_Str"")) {
    this.loss=new HalfGradSquaredLoss();
  }
 else {
    this.loss=new SquaredLoss();
  }
  if (this.isGBDT) {
    this.learningRate=Double.valueOf(validParams.get(NNTrainer.LEARNING_RATE).toString());
    Object swrObj=validParams.get(""String_Node_Str"");
    if (swrObj != null) {
      this.gbdtSampleWithReplacement=Boolean.TRUE.toString().equalsIgnoreCase(swrObj.toString());
    }
  }
  if (this.isRF || (this.isGBDT && this.gbdtSampleWithReplacement)) {
    this.rng=new PoissonDistribution[treeNum];
    for (int i=0; i < treeNum; i++) {
      this.rng[i]=new PoissonDistribution(this.modelConfig.getTrain().getBaggingSampleRate());
    }
  }
  LOG.info(""String_Node_Str"",isAfterVarSelect,treeNum,impurity.getClass().getName(),loss.getClass().getName(),this.learningRate,this.gbdtSampleWithReplacement,this.isRF,this.isGBDT);
}",0.929354898680052
32000,"@Override public DTWorkerParams doCompute(WorkerContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return new DTWorkerParams();
  }
  DTMasterParams lastMasterResult=context.getLastMasterResult();
  final List<TreeNode> trees=lastMasterResult.getTrees();
  final Map<Integer,TreeNode> todoNodes=lastMasterResult.getTodoNodes();
  if (todoNodes == null) {
    return new DTWorkerParams();
  }
  Map<Integer,NodeStats> statistics=initTodoNodeStats(todoNodes);
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  if (this.isGBDT && !this.gbdtSampleWithReplacement && lastMasterResult.isSwitchToNextTree()) {
    this.random=new Random();
  }
  for (  Data data : this.trainingData) {
    if (this.isRF) {
      for (      TreeNode treeNode : trees) {
        Node predictNode=predictNodeIndex(treeNode.getNode(),data);
        if (predictNode.getPredict() != null) {
          trainError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
          weightedTrainCount+=data.significance;
        }
      }
    }
    if (this.isGBDT) {
      if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
        recoverGBTData(context,data.output,data.predict,data);
        trainError+=data.significance * loss.computeError(data.predict,data.label);
        weightedTrainCount+=data.significance;
      }
 else {
        int currTreeIndex=trees.size() - 1;
        if (lastMasterResult.isSwitchToNextTree()) {
          if (currTreeIndex >= 1) {
            Node node=trees.get(currTreeIndex - 1).getNode();
            Node predictNode=predictNodeIndex(node,data);
            if (predictNode.getPredict() != null) {
              double predict=predictNode.getPredict().getPredict();
              if (currTreeIndex == 1) {
                data.predict=(float)predict;
              }
 else {
                data.predict+=(float)(this.learningRate * predict);
              }
              data.output=-1f * loss.computeGradient(data.predict,data.label);
            }
            if (!this.gbdtSampleWithReplacement) {
              if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
              }
 else {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
              }
            }
          }
        }
        Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data);
        if (currTreeIndex >= 1) {
          trainError+=data.significance * loss.computeError(data.predict,data.label);
          weightedTrainCount+=data.significance;
        }
 else {
          if (predictNode.getPredict() != null) {
            trainError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=data.significance;
          }
        }
      }
    }
  }
  if (validationData != null) {
    for (    Data data : this.validationData) {
      if (this.isRF) {
        for (        TreeNode treeNode : trees) {
          Node predictNode=predictNodeIndex(treeNode.getNode(),data);
          if (predictNode.getPredict() != null) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
      if (this.isGBDT) {
        if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
          recoverGBTData(context,data.output,data.predict,data);
          validationError+=data.significance * loss.computeError(data.predict,data.label);
          weightedValidationCount+=data.significance;
        }
 else {
          int currTreeIndex=trees.size() - 1;
          if (lastMasterResult.isSwitchToNextTree()) {
            if (currTreeIndex >= 1) {
              Node node=trees.get(currTreeIndex - 1).getNode();
              Node predictNode=predictNodeIndex(node,data);
              if (predictNode.getPredict() != null) {
                double predict=predictNode.getPredict().getPredict();
                if (currTreeIndex == 1) {
                  data.predict=(float)predict;
                }
 else {
                  data.predict+=(float)(this.learningRate * predict);
                }
                data.output=-1f * loss.computeGradient(data.predict,data.label);
              }
              if (!this.gbdtSampleWithReplacement) {
                if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                  data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
                }
 else {
                  data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
                }
              }
            }
          }
          Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data);
          if (currTreeIndex >= 1) {
            validationError+=data.significance * loss.computeError(data.predict,data.label);
            weightedValidationCount+=data.significance;
          }
 else {
            if (predictNode.getPredict() != null) {
              validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
              weightedValidationCount+=data.significance;
            }
          }
        }
      }
    }
  }
  CompletionService<Map<Integer,NodeStats>> completionService=new ExecutorCompletionService<Map<Integer,NodeStats>>(this.threadPool);
  Set<Entry<Integer,TreeNode>> treeNodeEntrySet=todoNodes.entrySet();
  Iterator<Entry<Integer,TreeNode>> treeNodeIterator=treeNodeEntrySet.iterator();
  int roundNodeNumer=treeNodeEntrySet.size() / this.workerThreadCount;
  int modeNodeNumber=treeNodeEntrySet.size() % this.workerThreadCount;
  int realThreadCount=0;
  LOG.info(""String_Node_Str"",todoNodes.size());
  for (int i=0; i < this.workerThreadCount; i++) {
    final Map<Integer,TreeNode> localTodoNodes=new HashMap<Integer,TreeNode>();
    final Map<Integer,NodeStats> localStatistics=new HashMap<Integer,DTWorkerParams.NodeStats>();
    for (int j=0; j < roundNodeNumer; j++) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
    }
    if (modeNodeNumber > 0) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
      modeNodeNumber-=1;
    }
    LOG.info(""String_Node_Str"",i,localTodoNodes.size(),localStatistics.size());
    if (localTodoNodes.size() == 0) {
      continue;
    }
    realThreadCount+=1;
    completionService.submit(new Callable<Map<Integer,NodeStats>>(){
      @Override public Map<Integer,NodeStats> call() throws Exception {
        List<Integer> nodeIndexes=new ArrayList<Integer>(trees.size());
        for (        Data data : DTWorker.this.trainingData) {
          nodeIndexes.clear();
          if (DTWorker.this.isRF) {
            for (            TreeNode treeNode : trees) {
              Node predictNode=predictNodeIndex(treeNode.getNode(),data);
              nodeIndexes.add(predictNode.getId());
            }
          }
          if (DTWorker.this.isGBDT) {
            int currTreeIndex=trees.size() - 1;
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data);
            nodeIndexes.add(predictNode.getId());
          }
          for (          Map.Entry<Integer,TreeNode> entry : localTodoNodes.entrySet()) {
            Node todoNode=entry.getValue().getNode();
            int treeId=entry.getValue().getTreeId();
            int currPredictIndex=0;
            if (DTWorker.this.isRF) {
              currPredictIndex=nodeIndexes.get(entry.getValue().getTreeId());
            }
            if (DTWorker.this.isGBDT) {
              currPredictIndex=nodeIndexes.get(0);
            }
            if (todoNode.getId() == currPredictIndex) {
              List<Integer> features=entry.getValue().getFeatures();
              if (features.isEmpty()) {
                features=getAllValidFeatures();
              }
              for (              Integer columnNum : features) {
                ColumnConfig config=DTWorker.this.columnConfigList.get(columnNum);
                double[] featuerStatistic=localStatistics.get(entry.getKey()).getFeatureStatistics().get(columnNum);
                float weight=data.subsampleWeights[treeId % data.subsampleWeights.length];
                if (config.isNumerical()) {
                  float value=data.numericInputs[DTWorker.this.numericInputIndexMap.get(columnNum)];
                  int binIndex=getBinIndex(value,config.getBinBoundary());
                  DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
                }
 else                 if (config.isCategorical()) {
                  String category=data.categoricalInputs[DTWorker.this.categoricalInputIndexMap.get(columnNum)];
                  Integer binIndex=DTWorker.this.categoryIndexMap.get(columnNum).get(category);
                  if (binIndex == null) {
                    binIndex=config.getBinCategory().size();
                  }
                  DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
                }
 else {
                  throw new IllegalStateException(""String_Node_Str"");
                }
              }
            }
          }
        }
        return localStatistics;
      }
    }
);
  }
  int rCnt=0;
  while (rCnt < realThreadCount) {
    try {
      statistics.putAll(completionService.take().get());
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    rCnt+=1;
  }
  LOG.info(""String_Node_Str"",count,trainError,statistics.size());
  return new DTWorkerParams(weightedTrainCount,weightedValidationCount,trainError,validationError,statistics);
}","@Override public DTWorkerParams doCompute(WorkerContext<DTMasterParams,DTWorkerParams> context){
  if (context.isFirstIteration()) {
    return new DTWorkerParams();
  }
  DTMasterParams lastMasterResult=context.getLastMasterResult();
  final List<TreeNode> trees=lastMasterResult.getTrees();
  final Map<Integer,TreeNode> todoNodes=lastMasterResult.getTodoNodes();
  if (todoNodes == null) {
    return new DTWorkerParams();
  }
  Map<Integer,NodeStats> statistics=initTodoNodeStats(todoNodes);
  double trainError=0d, validationError=0d;
  double weightedTrainCount=0d, weightedValidationCount=0d;
  if (this.isGBDT && !this.gbdtSampleWithReplacement && lastMasterResult.isSwitchToNextTree()) {
    this.random=new Random();
  }
  for (  Data data : this.trainingData) {
    if (this.isRF) {
      for (      TreeNode treeNode : trees) {
        Node predictNode=predictNodeIndex(treeNode.getNode(),data);
        if (predictNode.getPredict() != null) {
          trainError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
          weightedTrainCount+=data.significance;
        }
      }
    }
    if (this.isGBDT) {
      if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
        recoverGBTData(context,data.output,data.predict,data);
        trainError+=data.significance * loss.computeError(data.predict,data.label);
        weightedTrainCount+=data.significance;
      }
 else {
        int currTreeIndex=trees.size() - 1;
        if (lastMasterResult.isSwitchToNextTree()) {
          if (currTreeIndex >= 1) {
            Node node=trees.get(currTreeIndex - 1).getNode();
            Node predictNode=predictNodeIndex(node,data);
            if (predictNode.getPredict() != null) {
              double predict=predictNode.getPredict().getPredict();
              if (currTreeIndex == 1) {
                data.predict=(float)predict;
              }
 else {
                data.predict+=(float)(this.learningRate * predict);
              }
              data.output=-1f * loss.computeGradient(data.predict,data.label);
            }
            if (!this.gbdtSampleWithReplacement) {
              if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
              }
 else {
                data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
              }
            }
          }
        }
        Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data);
        if (currTreeIndex >= 1) {
          trainError+=data.significance * loss.computeError(data.predict,data.label);
          weightedTrainCount+=data.significance;
        }
 else {
          if (predictNode.getPredict() != null) {
            trainError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedTrainCount+=data.significance;
          }
        }
      }
    }
  }
  if (validationData != null) {
    for (    Data data : this.validationData) {
      if (this.isRF) {
        for (        TreeNode treeNode : trees) {
          Node predictNode=predictNodeIndex(treeNode.getNode(),data);
          if (predictNode.getPredict() != null) {
            validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
            weightedValidationCount+=data.significance;
          }
        }
      }
      if (this.isGBDT) {
        if (this.isContinuousEnabled && lastMasterResult.isContinuousRunningStart()) {
          recoverGBTData(context,data.output,data.predict,data);
          validationError+=data.significance * loss.computeError(data.predict,data.label);
          weightedValidationCount+=data.significance;
        }
 else {
          int currTreeIndex=trees.size() - 1;
          if (lastMasterResult.isSwitchToNextTree()) {
            if (currTreeIndex >= 1) {
              Node node=trees.get(currTreeIndex - 1).getNode();
              Node predictNode=predictNodeIndex(node,data);
              if (predictNode.getPredict() != null) {
                double predict=predictNode.getPredict().getPredict();
                if (currTreeIndex == 1) {
                  data.predict=(float)predict;
                }
 else {
                  data.predict+=(float)(this.learningRate * predict);
                }
                data.output=-1f * loss.computeGradient(data.predict,data.label);
              }
              if (!this.gbdtSampleWithReplacement) {
                if (random.nextDouble() <= modelConfig.getTrain().getBaggingSampleRate()) {
                  data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=1f;
                }
 else {
                  data.subsampleWeights[currTreeIndex % data.subsampleWeights.length]=0f;
                }
              }
            }
          }
          Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data);
          if (currTreeIndex >= 1) {
            validationError+=data.significance * loss.computeError(data.predict,data.label);
            weightedValidationCount+=data.significance;
          }
 else {
            if (predictNode.getPredict() != null) {
              validationError+=data.significance * loss.computeError((float)(predictNode.getPredict().getPredict()),data.label);
              weightedValidationCount+=data.significance;
            }
          }
        }
      }
    }
  }
  CompletionService<Map<Integer,NodeStats>> completionService=new ExecutorCompletionService<Map<Integer,NodeStats>>(this.threadPool);
  Set<Entry<Integer,TreeNode>> treeNodeEntrySet=todoNodes.entrySet();
  Iterator<Entry<Integer,TreeNode>> treeNodeIterator=treeNodeEntrySet.iterator();
  int roundNodeNumer=treeNodeEntrySet.size() / this.workerThreadCount;
  int modeNodeNumber=treeNodeEntrySet.size() % this.workerThreadCount;
  int realThreadCount=0;
  LOG.info(""String_Node_Str"",todoNodes.size());
  for (int i=0; i < this.workerThreadCount; i++) {
    final Map<Integer,TreeNode> localTodoNodes=new HashMap<Integer,TreeNode>();
    final Map<Integer,NodeStats> localStatistics=new HashMap<Integer,DTWorkerParams.NodeStats>();
    for (int j=0; j < roundNodeNumer; j++) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
    }
    if (modeNodeNumber > 0) {
      Entry<Integer,TreeNode> tmpTreeNode=treeNodeIterator.next();
      localTodoNodes.put(tmpTreeNode.getKey(),tmpTreeNode.getValue());
      localStatistics.put(tmpTreeNode.getKey(),statistics.get(tmpTreeNode.getKey()));
      modeNodeNumber-=1;
    }
    LOG.info(""String_Node_Str"",i,localTodoNodes.size(),localStatistics.size());
    if (localTodoNodes.size() == 0) {
      continue;
    }
    realThreadCount+=1;
    completionService.submit(new Callable<Map<Integer,NodeStats>>(){
      @Override public Map<Integer,NodeStats> call() throws Exception {
        List<Integer> nodeIndexes=new ArrayList<Integer>(trees.size());
        for (        Data data : DTWorker.this.trainingData) {
          nodeIndexes.clear();
          if (DTWorker.this.isRF) {
            for (            TreeNode treeNode : trees) {
              Node predictNode=predictNodeIndex(treeNode.getNode(),data);
              nodeIndexes.add(predictNode.getId());
            }
          }
          if (DTWorker.this.isGBDT) {
            int currTreeIndex=trees.size() - 1;
            Node predictNode=predictNodeIndex(trees.get(currTreeIndex).getNode(),data);
            nodeIndexes.add(predictNode.getId());
          }
          for (          Map.Entry<Integer,TreeNode> entry : localTodoNodes.entrySet()) {
            Node todoNode=entry.getValue().getNode();
            int treeId=entry.getValue().getTreeId();
            int currPredictIndex=0;
            if (DTWorker.this.isRF) {
              currPredictIndex=nodeIndexes.get(entry.getValue().getTreeId());
            }
            if (DTWorker.this.isGBDT) {
              currPredictIndex=nodeIndexes.get(0);
            }
            if (todoNode.getId() == currPredictIndex) {
              List<Integer> features=entry.getValue().getFeatures();
              if (features.isEmpty()) {
                features=getAllValidFeatures();
              }
              for (              Integer columnNum : features) {
                ColumnConfig config=DTWorker.this.columnConfigList.get(columnNum);
                double[] featuerStatistic=localStatistics.get(entry.getKey()).getFeatureStatistics().get(columnNum);
                float weight=data.subsampleWeights[treeId % data.subsampleWeights.length];
                if (config.isNumerical()) {
                  float value=data.numericInputs[DTWorker.this.numericInputIndexMap.get(columnNum)];
                  int binIndex=getBinIndex(value,config.getBinBoundary());
                  DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
                }
 else                 if (config.isCategorical()) {
                  String category=data.categoricalInputs[DTWorker.this.categoricalInputIndexMap.get(columnNum)];
                  Integer binIndex=DTWorker.this.categoryIndexMap.get(columnNum).get(category);
                  if (binIndex == null) {
                    binIndex=config.getBinCategory().size();
                  }
                  DTWorker.this.impurity.featureUpdate(featuerStatistic,binIndex,data.output,data.significance,weight);
                }
 else {
                  throw new IllegalStateException(""String_Node_Str"");
                }
              }
            }
          }
        }
        return localStatistics;
      }
    }
);
  }
  int rCnt=0;
  while (rCnt < realThreadCount) {
    try {
      statistics.putAll(completionService.take().get());
    }
 catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    rCnt+=1;
  }
  LOG.info(""String_Node_Str"",count,trainError,statistics.size(),weightedTrainCount,weightedValidationCount,trainError,validationError);
  return new DTWorkerParams(weightedTrainCount,weightedValidationCount,trainError,validationError,statistics);
}",0.9966519992347428
