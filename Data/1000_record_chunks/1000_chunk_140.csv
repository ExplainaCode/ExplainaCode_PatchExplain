record_number,buggy_code,fixed_code,code_similarity
139001,"public void finish(ItemRecord[] records) throws IOException {
  for (  ItemRecord record : records) {
    record.clear();
  }
  IFile defintionFile=ResourceManager.getLibrariesFolder().getFile(""String_Node_Str"");
  if (!defintionFile.exists()) {
    DefinitionHandler.getInstance();
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (versionFile != null) {
        ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
        List<IMigrationTask> migrationTasks=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
        MigrationTaskManager.doMigrationTask(migrationTasks);
      }
      CorePlugin.getDefault().refreshWorkSpace();
      CorePlugin.getDefault().refreshDQView();
    }
  }
);
}","public void finish(ItemRecord[] records) throws IOException {
  ItemRecord.clear();
  IFile defintionFile=ResourceManager.getLibrariesFolder().getFile(""String_Node_Str"");
  if (!defintionFile.exists()) {
    DefinitionHandler.getInstance();
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (versionFile != null) {
        ProductVersion version=WorkspaceVersionHelper.getVesion(new Path(versionFile.getAbsolutePath()));
        List<IMigrationTask> migrationTasks=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
        MigrationTaskManager.doMigrationTask(migrationTasks);
      }
      CorePlugin.getDefault().refreshWorkSpace();
      CorePlugin.getDefault().refreshDQView();
    }
  }
);
}",0.9615384615384616
139002,"/** 
 * DOC bZhou Comment method ""checkDependency"".
 * @param record
 */
private void checkDependency(ItemRecord record){
  List<ModelElement> dependencyElements=new ArrayList<ModelElement>();
  ModelElement element=record.getElement();
  if (element != null) {
    ModelElementHelper.iterateClientDependencies(element,dependencyElements);
    for (    ModelElement melement : dependencyElements) {
      if (melement.eIsProxy()) {
        InternalEObject inObject=(InternalEObject)melement;
        record.addError(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ inObject.eProxyURI().toFileString());
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""checkDependency"".
 * @param record
 */
private void checkDependency(ItemRecord record){
  for (  ModelElement melement : record.getDependencyMap().values()) {
    if (melement.eIsProxy()) {
      InternalEObject inObject=(InternalEObject)melement;
      record.addError(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ inObject.eProxyURI().toFileString());
    }
  }
}",0.6458333333333334
139003,"@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  File sfile=(File)item.getData();
  if (sfile.isFile()) {
    ItemRecord record=new ItemRecord(sfile);
    List<File> dependencyFiles=record.getDependencyFiles();
    for (    File file : dependencyFiles) {
      repositoryTree.setChecked(file,item.getChecked());
    }
    repositoryTree.refresh();
    checkforErrors();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  ItemRecord record=(ItemRecord)item.getData();
  if (record.getFile().isFile()) {
    for (    File file : record.getDependencyMap().keySet()) {
      ItemRecord findRecord=ItemRecord.findRecord(file);
      if (findRecord != null) {
        repositoryTree.setChecked(findRecord,item.getChecked());
      }
    }
  }
  repositoryTree.refresh();
  checkforErrors();
}",0.5805714285714285
139004,"/** 
 * DOC sgandon Comment method ""dirTextModified"".
 */
protected void dirTextModified(){
  File file=new File(dirTxt.getText());
  if (file.exists()) {
    repositoryTree.setInput(file);
    repositoryTree.expandAll();
    TreeItem[] topItems=repositoryTree.getTree().getItems();
    for (    TreeItem treeItem : topItems) {
      repositoryTree.setSubtreeChecked(treeItem.getData(),true);
    }
    repositoryTree.refresh();
    writer.setBasePath(dirTxt.getText());
  }
 else {
    repositoryTree.setInput(null);
  }
  checkforErrors();
}","/** 
 * DOC sgandon Comment method ""dirTextModified"".
 */
protected void dirTextModified(){
  File file=new File(dirTxt.getText());
  if (file.exists()) {
    repositoryTree.setInput(new ItemRecord(file));
    repositoryTree.expandAll();
    TreeItem[] topItems=repositoryTree.getTree().getItems();
    for (    TreeItem treeItem : topItems) {
      repositoryTree.setSubtreeChecked(treeItem.getData(),true);
    }
    repositoryTree.refresh();
    writer.setBasePath(dirTxt.getText());
  }
 else {
    repositoryTree.setInput(null);
  }
  checkforErrors();
}",0.9782214156079856
139005,"/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  IPath dirPath=new Path(dirTxt.getText());
  if (!dirPath.toFile().exists()) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  IPath versionPath=dirPath.append(EResourceConstant.LIBRARIES.getPath()).append(""String_Node_Str"");
  if (!versionPath.toFile().exists()) {
    dErrors.add(""String_Node_Str"");
  }
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyFiles()) {
      if (!repositoryTree.getChecked(depFile)) {
        dErrors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ depFile.getName());
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}","/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  IPath dirPath=new Path(dirTxt.getText());
  if (!dirPath.toFile().exists()) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  IPath versionPath=dirPath.append(EResourceConstant.LIBRARIES.getPath()).append(""String_Node_Str"");
  if (!versionPath.toFile().exists()) {
    dErrors.add(""String_Node_Str"");
  }
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyMap().keySet()) {
      ModelElement element=record.getDependencyMap().get(depFile);
      ItemRecord findRecord=ItemRecord.findRecord(depFile);
      if (findRecord == null || !repositoryTree.getChecked(findRecord)) {
        dErrors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ element.getName());
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.9205658324265504
139006,"/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public ItemRecord[] getElements(){
  List<ItemRecord> itemRecords=new ArrayList<ItemRecord>();
  Object[] checkedElements=repositoryTree.getCheckedElements();
  for (  Object obj : checkedElements) {
    if (obj instanceof File) {
      File file=(File)obj;
      if (file.isFile()) {
        itemRecords.add(new ItemRecord(file));
      }
    }
  }
  return itemRecords.toArray(new ItemRecord[itemRecords.size()]);
}","/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public ItemRecord[] getElements(){
  List<ItemRecord> itemRecords=new ArrayList<ItemRecord>();
  Object[] checkedElements=repositoryTree.getCheckedElements();
  for (  Object obj : checkedElements) {
    if (obj instanceof ItemRecord) {
      ItemRecord record=(ItemRecord)obj;
      if (record.getFile().isFile()) {
        itemRecords.add(record);
      }
    }
  }
  return itemRecords.toArray(new ItemRecord[itemRecords.size()]);
}",0.8916155419222904
139007,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
        populateElement();
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  overwriteBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      dirTxt.setText(dirTxt.getText());
      populateElement();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      if (sfile.isFile()) {
        ItemRecord record=new ItemRecord(sfile);
        List<File> dependencyFiles=record.getDependencyFiles();
        for (        File file : dependencyFiles) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
        checkforErrors();
      }
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dirTextModified();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
        populateElement();
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  overwriteBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      dirTxt.setText(dirTxt.getText());
      populateElement();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      ItemRecord record=(ItemRecord)item.getData();
      if (record.getFile().isFile()) {
        for (        File file : record.getDependencyMap().keySet()) {
          ItemRecord findRecord=ItemRecord.findRecord(file);
          if (findRecord != null) {
            repositoryTree.setChecked(findRecord,item.getChecked());
          }
        }
      }
      repositoryTree.refresh();
      checkforErrors();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dirTextModified();
    }
  }
);
}",0.914344685242518
139008,"/** 
 * DOC bZhou Comment method ""isAnalysis"".
 * @param element
 * @return
 */
public static boolean isAnalysis(ModelElement element){
  return ANALYSIS.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isAnalysis"". Decide it's an analysis or not.
 * @param element
 * @return
 */
public static boolean isAnalysis(ModelElement element){
  return ANALYSIS.doSwitch(element) != null;
}",0.9191919191919192
139009,"/** 
 * DOC bZhou Comment method ""isID"".
 * @param element
 * @return
 */
public static boolean isID(ModelElement element){
  return INDICATOR_DEFINITION.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isID"". Decide it's an indicator defintion or not.
 * @param element
 * @return
 */
public static boolean isID(ModelElement element){
  return INDICATOR_DEFINITION.doSwitch(element) != null;
}",0.8943488943488943
139010,"/** 
 * DOC bZhou Comment method ""isReport"".
 * @param element
 * @return
 */
public static boolean isReport(ModelElement element){
  return REPORT.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isReport"". Decide it's a report or not.
 * @param element
 * @return
 */
public static boolean isReport(ModelElement element){
  return REPORT.doSwitch(element) != null;
}",0.9238845144356956
139011,"/** 
 * DOC bZhou Comment method ""isDataProvider"".
 * @param element
 * @return
 */
public static boolean isDataProvider(ModelElement element){
  return SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isDataProvider"". Decide it's a data provider or not.
 * @param element
 * @return
 */
public static boolean isDataProvider(ModelElement element){
  return SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(element) != null;
}",0.9234042553191488
139012,"/** 
 * DOC bZhou Comment method ""isPattern"".
 * @param element
 * @return
 */
public static boolean isPattern(ModelElement element){
  return PATTERN.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isPattern"". Decide it's a pattern or not.
 * @param element
 * @return
 */
public static boolean isPattern(ModelElement element){
  return PATTERN.doSwitch(element) != null;
}",0.922680412371134
139013,"/** 
 * DOC bZhou Comment method ""isDQRule"".
 * @param element
 * @return
 */
public static boolean isDQRule(ModelElement element){
  return DQ_RULE.doSwitch(element) != null;
}","/** 
 * DOC bZhou Comment method ""isDQRule"". Decide it's a dq rule or not.
 * @param element
 * @return
 */
public static boolean isDQRule(ModelElement element){
  return DQ_RULE.doSwitch(element) != null;
}",0.921875
139014,"public ReturnCode save(IndicatorDefinition indicator){
  UDIndicatorWriter writer=ElementWriterFactory.getInstance().createUDIndicatorWriter();
  ReturnCode saved=writer.save(indicator);
  return saved;
}","public ReturnCode save(IndicatorDefinition indicator){
  IndicatorDefinitionWriter writer=ElementWriterFactory.getInstance().createIndicatorDefinitionWriter();
  ReturnCode saved=writer.save(indicator);
  return saved;
}",0.8679245283018868
139015,"@Override protected boolean checkFile(IFile file){
  return file != null && FactoriesUtil.UDI.equalsIgnoreCase(file.getFileExtension());
}","@Override protected boolean checkFile(IFile file){
  return file != null && FactoriesUtil.DEFINITION.equalsIgnoreCase(file.getFileExtension());
}",0.9681978798586572
139016,"/** 
 * DOC bZhou Comment method ""create"".
 * @param element
 * @return
 */
public AElementPersistance create(ModelElement element){
  if (element instanceof Analysis) {
    return createAnalysisWrite();
  }
 else   if (element instanceof Report) {
    return createReportWriter();
  }
 else   if (element instanceof DataProvider) {
    return createDataProviderWriter();
  }
 else   if (element instanceof Pattern) {
    return createPatternWriter();
  }
 else   if (element instanceof IndicatorDefinition) {
    return createUDIndicatorWriter();
  }
 else   if (element instanceof Rule) {
    return createdRuleWriter();
  }
 else   if (element instanceof SoftwareSystem) {
    return createSoftwareSystemWriter();
  }
 else   if (element instanceof IndicatorDefinition) {
    return createSYSIndicatorWriter();
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""create"".
 * @param element
 * @return
 */
public AElementPersistance create(ModelElement element){
  if (ModelElementIdentifier.isAnalysis(element)) {
    return createAnalysisWrite();
  }
 else   if (ModelElementIdentifier.isReport(element)) {
    return createReportWriter();
  }
 else   if (ModelElementIdentifier.isDataProvider(element)) {
    return createDataProviderWriter();
  }
 else   if (ModelElementIdentifier.isPattern(element)) {
    return createPatternWriter();
  }
 else   if (ModelElementIdentifier.isID(element)) {
    if (ModelElementIdentifier.isDQRule(element)) {
      return createdRuleWriter();
    }
    return createIndicatorDefinitionWriter();
  }
 else   if (ModelElementIdentifier.isSoftware(element)) {
    return createSoftwareSystemWriter();
  }
  return null;
}",0.5904990980156344
139017,"/** 
 * DOC xqliu Comment method ""createAndStoreUDI"".
 * @param parameters
 * @param selectionFolder
 */
private static void createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition id=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category);
  for (  String key : parameters.regex.keySet()) {
    TdExpression expression=BooleanExpressionHelper.createTdExpression(key,parameters.regex.get(key));
    id.getSqlGenericExpression().add(expression);
  }
  boolean validStatus=UDIHelper.isUDIValid(id);
  TaggedValueHelper.setValidStatus(validStatus,id);
  String fname=DqRepositoryViewService.createFilename(parameters.name,FactoriesUtil.UDI);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  ElementWriterFactory.getInstance().createUDIndicatorWriter().save(id,pfile);
}","/** 
 * DOC xqliu Comment method ""createAndStoreUDI"".
 * @param parameters
 * @param selectionFolder
 */
private static void createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition id=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category);
  for (  String key : parameters.regex.keySet()) {
    TdExpression expression=BooleanExpressionHelper.createTdExpression(key,parameters.regex.get(key));
    id.getSqlGenericExpression().add(expression);
  }
  boolean validStatus=UDIHelper.isUDIValid(id);
  TaggedValueHelper.setValidStatus(validStatus,id);
  String fname=DqRepositoryViewService.createFilename(parameters.name,FactoriesUtil.DEFINITION);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().save(id,pfile);
}",0.9843812575090108
139018,"/** 
 * DOC bZhou Comment method ""extractFolder"".
 * @param oldObject
 * @return
 */
private IFolder extractFolder(ModelElement oldObject){
  Resource resource=oldObject.eResource();
  if (resource != null) {
    IPath path=new Path(resource.getURI().toPlatformString(false));
    IFile oldFile=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
    IFolder parent=(IFolder)oldFile.getParent();
    if (ModelElementIdentifier.isID(oldObject)) {
      parent=ResourceManager.getUDIFolder();
    }
    return parent;
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""extractFolder"".
 * @param oldObject
 * @return
 */
private IFolder extractFolder(ModelElement oldObject){
  Resource resource=oldObject.eResource();
  if (resource != null) {
    IPath path=new Path(resource.getURI().toPlatformString(false));
    IFile oldFile=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
    IFolder parent=(IFolder)oldFile.getParent();
    if (ModelElementIdentifier.isID(oldObject) && !ModelElementIdentifier.isDQRule(oldObject)) {
      parent=ResourceManager.getUDIFolder();
    }
    return parent;
  }
  return null;
}",0.95829636202307
139019,"@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
case MDM_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
 else if (fileName.endsWith(FactoriesUtil.PROV)) {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
 else if (fileName.endsWith(FactoriesUtil.UDI)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
}
}
return image != null ? image : super.getImage(element);
}","@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
case MDM_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
 else if (fileName.endsWith(FactoriesUtil.PROV)) {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
}
}
return image != null ? image : super.getImage(element);
}",0.995866454689984
139020,"public ItemRecord(File file){
  this.file=file;
  try {
    if (file.isFile()) {
      init();
    }
  }
 catch (  Exception e) {
    addError(e.getMessage());
  }
}","public ItemRecord(File file){
  this.file=file;
  try {
    if (file.isFile()) {
      init();
    }
  }
 catch (  Exception e) {
    Log.error(e,e);
  }
}",0.93125
139021,"public void run(){
  try {
    for (    IFile file : selectedFiles) {
      ResourceFileMap resourceFileMap=ModelElementFileFactory.getResourceFileMap(file);
      if (resourceFileMap != null) {
        ModelElement[] elements=new ModelElement[]{resourceFileMap.getModelElement(file)};
        ReturnCode rc=check(file);
        int result=DeleteModelElementConfirmDialog.showDialog(null,elements,rc.getMessage());
        runStatus=rc.isOk() && result == Window.OK;
        if (runStatus) {
          resourceFileMap.delete(file);
        }
      }
    }
    CorePlugin.getDefault().refreshDQView();
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void run(){
  try {
    for (    IFile file : selectedFiles) {
      ResourceFileMap resourceFileMap=ModelElementFileFactory.getResourceFileMap(file);
      if (resourceFileMap != null) {
        ModelElement[] elements=new ModelElement[]{resourceFileMap.getModelElement(file)};
        ReturnCode rc=check(file);
        int result=DeleteModelElementConfirmDialog.showDialog(null,elements,rc.getMessage());
        runStatus=rc.isOk() && result == Window.OK;
        if (runStatus) {
          resourceFileMap.delete(file);
        }
 else {
          break;
        }
      }
    }
    CorePlugin.getDefault().refreshDQView();
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.9739776951672864
139022,"/** 
 * DOC bZhou Comment method ""update"".
 * @param oldObject
 * @param newObject
 * @return
 */
private ModelElement update(ModelElement oldObject,ModelElement newObject){
  newObject.setName(""String_Node_Str"" + newObject.getName());
  String author=ReponsitoryContextBridge.getAuthor();
  if (!StringUtils.isEmpty(author)) {
    MetadataHelper.setAuthor(newObject,author);
  }
  if (newObject instanceof TdReport) {
    List<Analysis> anaLs=ReportHelper.getAnalyses((TdReport)oldObject);
    for (    Analysis analysis : anaLs) {
      DependenciesHandler.getInstance().setDependencyOn((TdReport)newObject,analysis);
      ((TdReport)newObject).addAnalysis(analysis);
    }
  }
  if (newObject instanceof Analysis) {
    AnalysisHelper.getDataFilter((Analysis)newObject).clear();
    AnalysisHelper.setStringDataFilter((Analysis)newObject,AnalysisHelper.getStringDataFilter((Analysis)oldObject));
  }
  return newObject;
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param oldObject
 * @param newObject
 * @return
 */
private ModelElement update(ModelElement oldObject,ModelElement newObject){
  newObject.setName(""String_Node_Str"" + newObject.getName());
  String author=ReponsitoryContextBridge.getAuthor();
  if (!StringUtils.isEmpty(author)) {
    MetadataHelper.setAuthor(newObject,author);
  }
  if (ModelElementIdentifier.isReport(newObject)) {
    List<Analysis> anaLs=ReportHelper.getAnalyses((TdReport)oldObject);
    for (    Analysis analysis : anaLs) {
      DependenciesHandler.getInstance().setDependencyOn((TdReport)newObject,analysis);
      ((TdReport)newObject).addAnalysis(analysis);
    }
  }
  if (ModelElementIdentifier.isAnalysis(newObject)) {
    AnalysisHelper.getDataFilter((Analysis)newObject).clear();
    AnalysisHelper.setStringDataFilter((Analysis)newObject,AnalysisHelper.getStringDataFilter((Analysis)oldObject));
  }
  if (ModelElementIdentifier.isID(newObject)) {
    IndicatorDefinition oldID=(IndicatorDefinition)oldObject;
    IndicatorDefinition newID=(IndicatorDefinition)newObject;
    TaggedValueHelper.setValidStatus(true,newID);
    newID.setLabel(""String_Node_Str"");
    Collection<IndicatorCategory> userDefinedIndicatorCategoryList=DefinitionHandler.getInstance().getUserDefinedIndicatorCategoryList();
    IndicatorCategory category=UDIHelper.getUDICategory(oldID);
    if (userDefinedIndicatorCategoryList.contains(category)) {
      UDIHelper.setUDICategory(newID,category);
    }
 else {
      UDIHelper.setUDICategory(newID,DefinitionHandler.getInstance().getUserDefinedCountIndicatorCategory());
    }
  }
  return newObject;
}",0.6697602474864656
139023,"@Override public void run(){
  if (files != null && files.length > 0) {
    for (    IFile file : files) {
      ModelElement oldObject=ModelElementFileFactory.getModelElement(file);
      if (oldObject != null) {
        ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(oldObject);
        newObject=update(oldObject,newObject);
        IFile newFile=getNewFile(file);
        ElementWriterFactory.getInstance().create(newFile.getFileExtension()).save(newObject,newFile);
      }
    }
    CorePlugin.getDefault().refreshDQView();
  }
}","@Override public void run(){
  for (  ModelElement oldObject : elementList) {
    if (oldObject != null) {
      ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(oldObject);
      IFolder folder=extractFolder(oldObject);
      if (folder != null) {
        newObject=update(oldObject,newObject);
        AElementPersistance elementWriter=ElementWriterFactory.getInstance().create(oldObject);
        if (elementWriter != null) {
          TypedReturnCode<IFile> trc=elementWriter.create(newObject,folder);
          selectAndReveal(trc.getObject());
        }
      }
    }
  }
  CorePlugin.getDefault().refreshDQView();
}",0.3902040816326531
139024,"public DuplicateCWMResourceAction(IFile[] files){
  super(DefaultMessagesImpl.getString(""String_Node_Str""));
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.EDIT_COPY));
  this.files=files;
}","/** 
 * DOC bZhou DuplicateCWMResourceAction constructor comment.
 * @param elements
 */
public DuplicateCWMResourceAction(ModelElement[] elements){
  this();
  for (  ModelElement element : elements) {
    elementList.add(element);
  }
}",0.1958997722095672
139025,"private boolean synAnalyzedElements(AnalyzedElementSynDialog anaEleSynDialog,Analysis synAnalysis,TdDataProvider oldDataProvider,TdDataProvider newDataProv){
  Map<ModelElement,ModelElement> synEleMap=anaEleSynDialog.getSynedEleMap();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(synAnalysis);
  synAnalysis.getContext().setConnection(newDataProv);
  List<ModelElement> tempList=new ArrayList<ModelElement>();
  tempList.add(oldDataProvider);
  DependenciesHandler.getInstance().removeDependenciesBetweenModels(synAnalysis,tempList);
  PrvResourceFileHelper.getInstance().save(oldDataProvider);
  EList<Indicator> indcList=synAnalysis.getResults().getIndicators();
  Indicator[] copiedIndArray=new Indicator[indcList.size()];
  System.arraycopy(indcList.toArray(),0,copiedIndArray,0,indcList.size());
  synAnalysis.getContext().getAnalysedElements().clear();
  synAnalysis.getResults().getIndicators().clear();
  boolean isExistSynedElement=false;
  for (  Indicator indicator : copiedIndArray) {
    if (indicator instanceof ColumnSetMultiValueIndicator) {
      ColumnSetMultiValueIndicator compositeInd=(ColumnSetMultiValueIndicator)indicator;
      ModelElement[] mes=new ModelElement[compositeInd.getAnalyzedColumns().size()];
      ((ColumnSetMultiValueIndicator)indicator).getAnalyzedColumns().toArray(mes);
      compositeInd.getAnalyzedColumns().clear();
      for (      ModelElement me : mes) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          DataminingType dataminingType=MetadataHelper.getDataminingType((TdColumn)me);
          if (dataminingType == null) {
            dataminingType=MetadataHelper.getDefaultDataminingType(((TdColumn)me).getJavaType());
          }
          MetadataHelper.setDataminingType(dataminingType,newColumn);
          compositeInd.getAnalyzedColumns().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
    }
 else     if (indicator instanceof ColumnsCompareIndicator) {
      ColumnsCompareIndicator compInd=(ColumnsCompareIndicator)indicator;
      if ((compInd.getColumnSetA() == null || compInd.getColumnSetA().size() == 0) || (compInd.getColumnSetB() == null || compInd.getColumnSetB().size() == 0)) {
        return false;
      }
      ModelElement[] mesA=new ModelElement[compInd.getColumnSetA().size()];
      compInd.getColumnSetA().toArray(mesA);
      compInd.getColumnSetA().clear();
      for (      ModelElement me : mesA) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          compInd.getColumnSetA().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
      ModelElement[] mesB=new ModelElement[compInd.getColumnSetB().size()];
      compInd.getColumnSetB().toArray(mesB);
      compInd.getColumnSetB().clear();
      for (      ModelElement me : mesB) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          compInd.getColumnSetB().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
      ModelElement oldAnaEle=compInd.getAnalyzedElement();
      compInd.setAnalyzedElement(null);
      ColumnSet oldColSetA=ColumnHelper.getColumnSetOwner((Column)mesA[0]);
      ColumnSet oldColSetB=ColumnHelper.getColumnSetOwner((Column)mesB[0]);
      if (oldColSetA == oldAnaEle) {
        if (synEleMap.get(mesA[0]) != null) {
          compInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(mesA[0])));
        }
      }
      if (oldColSetB == oldAnaEle) {
        if (synEleMap.get(mesB[0]) != null) {
          compInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(mesB[0])));
        }
      }
    }
 else     if (indicator instanceof ColumnDependencyIndicator) {
      ColumnDependencyIndicator funDepInd=(ColumnDependencyIndicator)indicator;
      if (funDepInd.getColumnA() == null || funDepInd.getColumnB() == null) {
        return false;
      }
      if (synEleMap.get(funDepInd.getColumnA()) != null) {
        TdColumn newColumn=(TdColumn)synEleMap.get(funDepInd.getColumnA());
        funDepInd.setColumnA(newColumn);
        anaBuilder.addElementToAnalyze(newColumn,indicator);
        isExistSynedElement=true;
      }
      if (synEleMap.get(funDepInd.getColumnB()) != null) {
        TdColumn newColumn=(TdColumn)synEleMap.get(funDepInd.getColumnB());
        funDepInd.setColumnB(newColumn);
        anaBuilder.addElementToAnalyze(newColumn,indicator);
        isExistSynedElement=true;
      }
      ModelElement oldAnaEle=funDepInd.getAnalyzedElement();
      funDepInd.setAnalyzedElement(null);
      ColumnSet oldColSetA=ColumnHelper.getColumnSetOwner(funDepInd.getColumnA());
      ColumnSet oldColSetB=ColumnHelper.getColumnSetOwner(funDepInd.getColumnB());
      if (oldColSetA == oldAnaEle) {
        if (synEleMap.get(funDepInd.getColumnA()) != null) {
          funDepInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(funDepInd.getColumnA())));
        }
      }
      if (oldColSetB == oldAnaEle) {
        if (synEleMap.get(funDepInd.getColumnB()) != null) {
          funDepInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(funDepInd.getColumnB())));
        }
      }
    }
 else {
      ModelElement me=indicator.getAnalyzedElement();
      if (synEleMap.get(me) != null) {
        indicator.setAnalyzedElement(synEleMap.get(me));
        anaBuilder.addElementToAnalyze(synEleMap.get(me),indicator);
        isExistSynedElement=true;
      }
    }
  }
  return isExistSynedElement;
}","private boolean synAnalyzedElements(AnalyzedElementSynDialog anaEleSynDialog,Analysis synAnalysis,TdDataProvider oldDataProvider,TdDataProvider newDataProv){
  Map<ModelElement,ModelElement> synEleMap=anaEleSynDialog.getSynedEleMap();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(synAnalysis);
  synAnalysis.getContext().setConnection(newDataProv);
  List<ModelElement> tempList=new ArrayList<ModelElement>();
  tempList.add(oldDataProvider);
  DependenciesHandler.getInstance().removeDependenciesBetweenModels(synAnalysis,tempList);
  PrvResourceFileHelper.getInstance().save(oldDataProvider);
  EList<Indicator> indcList=synAnalysis.getResults().getIndicators();
  Indicator[] copiedIndArray=new Indicator[indcList.size()];
  System.arraycopy(indcList.toArray(),0,copiedIndArray,0,indcList.size());
  boolean isExistSynedElement=false;
  AnalysisType analysisType=synAnalysis.getParameters().getAnalysisType();
  if (analysisType == AnalysisType.MULTIPLE_COLUMN) {
    EList<ModelElement> meLs=synAnalysis.getContext().getAnalysedElements();
    ModelElement[] mes=new ModelElement[meLs.size()];
    System.arraycopy(meLs.toArray(),0,mes,0,meLs.size());
    synAnalysis.getContext().getAnalysedElements().clear();
    for (int i=0; i < mes.length; i++) {
      if (synEleMap.get(mes[i]) != null) {
        TdColumn newColumn=(TdColumn)synEleMap.get(mes[i]);
        synAnalysis.getContext().getAnalysedElements().add(newColumn);
        isExistSynedElement=true;
      }
    }
  }
  if (!isExistSynedElement)   synAnalysis.getContext().getAnalysedElements().clear();
  synAnalysis.getResults().getIndicators().clear();
  for (  Indicator indicator : copiedIndArray) {
    if (indicator instanceof ColumnSetMultiValueIndicator) {
      ColumnSetMultiValueIndicator compositeInd=(ColumnSetMultiValueIndicator)indicator;
      ModelElement[] mes=new ModelElement[compositeInd.getAnalyzedColumns().size()];
      ((ColumnSetMultiValueIndicator)indicator).getAnalyzedColumns().toArray(mes);
      compositeInd.getAnalyzedColumns().clear();
      for (      ModelElement me : mes) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          DataminingType dataminingType=MetadataHelper.getDataminingType((TdColumn)me);
          if (dataminingType == null) {
            dataminingType=MetadataHelper.getDefaultDataminingType(((TdColumn)me).getJavaType());
          }
          MetadataHelper.setDataminingType(dataminingType,newColumn);
          compositeInd.getAnalyzedColumns().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
    }
 else     if (indicator instanceof ColumnsCompareIndicator) {
      ColumnsCompareIndicator compInd=(ColumnsCompareIndicator)indicator;
      if ((compInd.getColumnSetA() == null || compInd.getColumnSetA().size() == 0) || (compInd.getColumnSetB() == null || compInd.getColumnSetB().size() == 0)) {
        return false;
      }
      ModelElement[] mesA=new ModelElement[compInd.getColumnSetA().size()];
      compInd.getColumnSetA().toArray(mesA);
      compInd.getColumnSetA().clear();
      for (      ModelElement me : mesA) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          compInd.getColumnSetA().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
      ModelElement[] mesB=new ModelElement[compInd.getColumnSetB().size()];
      compInd.getColumnSetB().toArray(mesB);
      compInd.getColumnSetB().clear();
      for (      ModelElement me : mesB) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          compInd.getColumnSetB().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
      ModelElement oldAnaEle=compInd.getAnalyzedElement();
      compInd.setAnalyzedElement(null);
      ColumnSet oldColSetA=ColumnHelper.getColumnSetOwner((Column)mesA[0]);
      ColumnSet oldColSetB=ColumnHelper.getColumnSetOwner((Column)mesB[0]);
      if (oldColSetA == oldAnaEle) {
        if (synEleMap.get(mesA[0]) != null) {
          compInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(mesA[0])));
        }
      }
      if (oldColSetB == oldAnaEle) {
        if (synEleMap.get(mesB[0]) != null) {
          compInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(mesB[0])));
        }
      }
    }
 else     if (indicator instanceof ColumnDependencyIndicator) {
      ColumnDependencyIndicator funDepInd=(ColumnDependencyIndicator)indicator;
      if (funDepInd.getColumnA() == null || funDepInd.getColumnB() == null) {
        return false;
      }
      if (synEleMap.get(funDepInd.getColumnA()) != null) {
        TdColumn newColumn=(TdColumn)synEleMap.get(funDepInd.getColumnA());
        funDepInd.setColumnA(newColumn);
        anaBuilder.addElementToAnalyze(newColumn,indicator);
        isExistSynedElement=true;
      }
      if (synEleMap.get(funDepInd.getColumnB()) != null) {
        TdColumn newColumn=(TdColumn)synEleMap.get(funDepInd.getColumnB());
        funDepInd.setColumnB(newColumn);
        anaBuilder.addElementToAnalyze(newColumn,indicator);
        isExistSynedElement=true;
      }
      ModelElement oldAnaEle=funDepInd.getAnalyzedElement();
      funDepInd.setAnalyzedElement(null);
      ColumnSet oldColSetA=ColumnHelper.getColumnSetOwner(funDepInd.getColumnA());
      ColumnSet oldColSetB=ColumnHelper.getColumnSetOwner(funDepInd.getColumnB());
      if (oldColSetA == oldAnaEle) {
        if (synEleMap.get(funDepInd.getColumnA()) != null) {
          funDepInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(funDepInd.getColumnA())));
        }
      }
      if (oldColSetB == oldAnaEle) {
        if (synEleMap.get(funDepInd.getColumnB()) != null) {
          funDepInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(funDepInd.getColumnB())));
        }
      }
    }
 else {
      ModelElement me=indicator.getAnalyzedElement();
      if (synEleMap.get(me) != null) {
        indicator.setAnalyzedElement(synEleMap.get(me));
        if (analysisType == AnalysisType.MULTIPLE_COLUMN)         synAnalysis.getResults().getIndicators().add(indicator);
 else         anaBuilder.addElementToAnalyze(synEleMap.get(me),indicator);
        isExistSynedElement=true;
      }
    }
  }
  return isExistSynedElement;
}",0.9264020568857464
139026,"private void createTableDetail(Table table){
  createNameCommentDetail(table);
  List<PrimaryKey> primaryKeys=TableHelper.getPrimaryKeys(table);
  newLabelAndText(gContainer,DefaultMessagesImpl.getString(""String_Node_Str""),primaryKeys.isEmpty() ? null : String.valueOf(primaryKeys.get(0).getFeature().size()));
  newLabelAndText(gContainer,DefaultMessagesImpl.getString(""String_Node_Str""),primaryKeys.isEmpty() ? null : primaryKeys.get(0).getName());
  List<ForeignKey> foreignKeys=TableHelper.getForeignKeys(table);
  newLabelAndText(gContainer,DefaultMessagesImpl.getString(""String_Node_Str""),foreignKeys.isEmpty() ? null : foreignKeys.get(0).getName());
  newLabelAndText(gContainer,DefaultMessagesImpl.getString(""String_Node_Str""),foreignKeys.isEmpty() ? null : String.valueOf(foreignKeys.get(0).getFeature().size()));
}","private void createTableDetail(Table table){
  createNameCommentDetail(table);
  List<PrimaryKey> primaryKeys=TableHelper.getPrimaryKeys(table);
  newLabelAndText(gContainer,DefaultMessagesImpl.getString(""String_Node_Str""),primaryKeys.isEmpty() ? null : String.valueOf(primaryKeys.get(0).getFeature().size()));
  newLabelAndText(gContainer,DefaultMessagesImpl.getString(""String_Node_Str""),primaryKeys.isEmpty() ? null : primaryKeys.get(0).getName());
  List<ForeignKey> foreignKeys=TableHelper.getForeignKeys(table);
  newLabelAndText(gContainer,DefaultMessagesImpl.getString(""String_Node_Str""),foreignKeys.isEmpty() ? null : String.valueOf(foreignKeys.get(0).getFeature().size()));
  newLabelAndText(gContainer,DefaultMessagesImpl.getString(""String_Node_Str""),foreignKeys.isEmpty() ? null : foreignKeys.get(0).getName());
}",0.9563106796116504
139027,"private List<Object[]> initDataSet(Indicator indicator,EMap<Indicator,AnalyzedDataSet> indicToRowMap,Object object){
  AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
  List<Object[]> valueObjectList=null;
  if (analyzedDataSet == null) {
    analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
    indicToRowMap.put(indicator,analyzedDataSet);
    analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
    analyzedDataSet.setRecordSize(0);
  }
  if (indicator instanceof FrequencyIndicator || indicator instanceof MinLengthIndicator || indicator instanceof MaxLengthIndicator) {
    Map<Object,List<Object[]>> valueObjectListMap=analyzedDataSet.getFrequencyData();
    if (valueObjectListMap == null) {
      valueObjectListMap=new HashMap<Object,List<Object[]>>();
      analyzedDataSet.setFrequencyData(valueObjectListMap);
    }
    String key=null;
    if (object == null) {
      key=""String_Node_Str"";
    }
 else     if (indicator instanceof MinLengthIndicator || indicator instanceof MaxLengthIndicator) {
      key=String.valueOf(object.toString().length());
    }
 else     if (object.equals(""String_Node_Str"")) {
      key=""String_Node_Str"";
    }
 else     if (indicator instanceof PatternLowFreqIndicator) {
      key=((PatternLowFreqIndicator)indicator).convertCharacters(object.toString());
    }
 else     if (indicator instanceof PatternFreqIndicator) {
      key=((PatternFreqIndicator)indicator).convertCharacters(object.toString());
    }
 else {
      key=object.toString();
    }
    valueObjectList=valueObjectListMap.get(key);
    if (valueObjectList == null) {
      valueObjectList=new ArrayList<Object[]>();
      valueObjectListMap.put(key,valueObjectList);
    }
  }
 else   if (indicator.isInValidRow() || indicator.isValidRow()) {
    List<Object> patternData=analyzedDataSet.getPatternData();
    if (patternData == null) {
      patternData=new ArrayList<Object>();
      patternData.add(new ArrayList<Object[]>());
      patternData.add(new ArrayList<Object[]>());
      analyzedDataSet.setPatternData(patternData);
    }
    if (indicator.isInValidRow()) {
      if (patternData.get(AnalyzedDataSetImpl.INVALID_VALUE) instanceof List<?>) {
        valueObjectList=(ArrayList<Object[]>)patternData.get(AnalyzedDataSetImpl.INVALID_VALUE);
      }
    }
 else {
      valueObjectList=(ArrayList<Object[]>)patternData.get(AnalyzedDataSetImpl.VALID_VALUE);
    }
  }
 else {
    valueObjectList=analyzedDataSet.getData();
    if (valueObjectList == null) {
      valueObjectList=new ArrayList<Object[]>();
      analyzedDataSet.setData(valueObjectList);
    }
  }
  return valueObjectList;
}","private List<Object[]> initDataSet(Indicator indicator,EMap<Indicator,AnalyzedDataSet> indicToRowMap,Object object){
  AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
  List<Object[]> valueObjectList=null;
  if (analyzedDataSet == null) {
    analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
    indicToRowMap.put(indicator,analyzedDataSet);
    analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
    analyzedDataSet.setRecordSize(0);
  }
  if (indicator instanceof FrequencyIndicator || indicator instanceof MinLengthIndicator || indicator instanceof MaxLengthIndicator) {
    Map<Object,List<Object[]>> valueObjectListMap=analyzedDataSet.getFrequencyData();
    if (valueObjectListMap == null) {
      valueObjectListMap=new HashMap<Object,List<Object[]>>();
      analyzedDataSet.setFrequencyData(valueObjectListMap);
    }
    String key=null;
    if (object == null) {
      key=SpecialValueDisplay.NULL_FIELD;
    }
 else     if (indicator instanceof MinLengthIndicator || indicator instanceof MaxLengthIndicator) {
      key=String.valueOf(object.toString().length());
    }
 else     if (object.equals(""String_Node_Str"")) {
      key=SpecialValueDisplay.EMPTY_FIELD;
    }
 else     if (indicator instanceof PatternLowFreqIndicator) {
      key=((PatternLowFreqIndicator)indicator).convertCharacters(object.toString());
    }
 else     if (indicator instanceof PatternFreqIndicator) {
      key=((PatternFreqIndicator)indicator).convertCharacters(object.toString());
    }
 else {
      key=object.toString();
    }
    valueObjectList=valueObjectListMap.get(key);
    if (valueObjectList == null) {
      valueObjectList=new ArrayList<Object[]>();
      valueObjectListMap.put(key,valueObjectList);
    }
  }
 else   if (indicator.isInValidRow() || indicator.isValidRow()) {
    List<Object> patternData=analyzedDataSet.getPatternData();
    if (patternData == null) {
      patternData=new ArrayList<Object>();
      patternData.add(new ArrayList<Object[]>());
      patternData.add(new ArrayList<Object[]>());
      analyzedDataSet.setPatternData(patternData);
    }
    if (indicator.isInValidRow()) {
      if (patternData.get(AnalyzedDataSetImpl.INVALID_VALUE) instanceof List<?>) {
        valueObjectList=(ArrayList<Object[]>)patternData.get(AnalyzedDataSetImpl.INVALID_VALUE);
      }
    }
 else {
      valueObjectList=(ArrayList<Object[]>)patternData.get(AnalyzedDataSetImpl.VALID_VALUE);
    }
  }
 else {
    valueObjectList=analyzedDataSet.getData();
    if (valueObjectList == null) {
      valueObjectList=new ArrayList<Object[]>();
      analyzedDataSet.setData(valueObjectList);
    }
  }
  return valueObjectList;
}",0.9044870601377768
139028,"@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    EList<Indicator> indicators=analysis.getResults().getIndicators();
    for (    Indicator indicator : indicators) {
      if (this.catalogOrSchema != null) {
        changeCatalog(this.catalogOrSchema,connection);
      }
      Expression query=dbms().getInstantiatedExpression(indicator);
      if (query == null || !executeQuery(indicator,connection,query)) {
        ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
      }
 else {
        indicator.setComputed(true);
      }
    }
    connection.close();
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}","@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    EList<Indicator> indicators=analysis.getResults().getIndicators();
    for (    Indicator indicator : indicators) {
      if (!indicator.prepare()) {
        return traceError(""String_Node_Str"");
      }
      if (this.catalogOrSchema != null) {
        changeCatalog(this.catalogOrSchema,connection);
      }
      Expression query=dbms().getInstantiatedExpression(indicator);
      if (query == null || !executeQuery(indicator,connection,query)) {
        ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
      }
 else {
        indicator.setComputed(true);
      }
    }
    connection.close();
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}",0.9629005059021922
139029,"/** 
 * DOC scorreia Comment method ""executeQuery"".
 * @param indicator
 * @param connection
 * @param query
 * @return
 */
private boolean executeQuery(Indicator indicator,Connection connection,Expression query){
  try {
    List<Object[]> myResultSet=executeQuery(catalogOrSchema,connection,query.getBody());
    if (indicator instanceof AllMatchIndicator) {
      AllMatchIndicator matchIndicator=(AllMatchIndicator)indicator;
      EList<Column> columns=matchIndicator.getAnalyzedColumns();
      List<String>[] patternList=new List[columns.size()];
      EList<RegexpMatchingIndicator> indicators=matchIndicator.getCompositeRegexMatchingIndicators();
      for (int i=0; i < columns.size(); i++) {
        for (        RegexpMatchingIndicator rmi : indicators) {
          if (rmi.getAnalyzedElement() == columns.get(i)) {
            if (null == patternList[i]) {
              patternList[i]=new ArrayList<String>();
            }
            String regex=getRegexWithoutQuotes(getPatterns(rmi).get(0));
            patternList[i].add(regex);
          }
        }
      }
      matchIndicator.setPatterns(patternList);
    }
    return indicator.storeSqlResults(myResultSet);
  }
 catch (  SQLException e) {
    log.error(e,e);
    return false;
  }
}","/** 
 * DOC scorreia Comment method ""executeQuery"".
 * @param indicator
 * @param connection
 * @param query
 * @return
 */
private boolean executeQuery(Indicator indicator,Connection connection,Expression query){
  try {
    List<Object[]> myResultSet=executeQuery(catalogOrSchema,connection,query.getBody());
    return indicator.storeSqlResults(myResultSet);
  }
 catch (  SQLException e) {
    log.error(e,e);
    return false;
  }
}",0.5153301886792453
139030,"public void addElements(final ModelElementIndicator[] elements){
  this.addItemElements(elements);
  updateBindConnection(masterPage,tree);
}","public void addElements(final ModelElementIndicator[] elements){
  TdColumn[] columns=new TdColumn[elements.length];
  for (int i=0; i < elements.length; i++) {
    columns[i]=(TdColumn)elements[i].getModelElement();
  }
  List<Column> oriColumns=getColumnSetMultiValueList();
  for (  Column column : columns) {
    if (!oriColumns.contains(column)) {
      oriColumns.add(column);
    }
  }
  setInput(oriColumns.toArray());
  updateBindConnection(masterPage,tree);
}",0.3573770491803278
139031,"/** 
 * DOC yyi Comment method ""computeCounts"".
 * @param objects
 * @return
 */
private boolean computeCounts(List<Object[]> objects){
  boolean ok=true;
  Long matchCount=0L;
  for (  Object[] row : objects) {
    boolean isAMatch=false;
    for (int i=0; i < row.length - 1; i++) {
      if (null != patterns[i]) {
        for (        String regex : patterns[i]) {
          Pattern p=Pattern.compile(regex);
          Matcher m=p.matcher(String.valueOf(row[i]));
          if (!m.find()) {
            isAMatch=false;
            break;
          }
          isAMatch=true;
        }
        if (false == isAMatch)         break;
      }
    }
    if (isAMatch) {
      if (null != row[row.length - 1]) {
        Long val=Long.valueOf(String.valueOf(row[row.length - 1]));
        matchCount+=val;
      }
 else {
        ok=false;
      }
    }
  }
  setMatchingValueCount(matchCount);
  setNotMatchingValueCount(getCount() - matchCount);
  return ok;
}","/** 
 * DOC yyi Comment method ""computeCounts"".
 * @param objects
 * @return
 */
private boolean computeCounts(List<Object[]> objects){
  boolean ok=true;
  Long matchCount=0L;
  for (  Object[] row : objects) {
    boolean isAMatch=false;
    for (int i=0; i < row.length - 1; i++) {
      if (null != patterns[i]) {
        for (        java.util.regex.Pattern p : patterns[i]) {
          Matcher m=p.matcher(String.valueOf(row[i]));
          if (!m.find()) {
            isAMatch=false;
            break;
          }
          isAMatch=true;
        }
        if (false == isAMatch)         break;
      }
    }
    if (isAMatch) {
      if (null != row[row.length - 1]) {
        Long val=Long.valueOf(String.valueOf(row[row.length - 1]));
        matchCount+=val;
      }
 else {
        ok=false;
      }
    }
  }
  setMatchingValueCount(matchCount);
  setNotMatchingValueCount(getCount() - matchCount);
  return ok;
}",0.9623741388447272
139032,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new ColumnModelElementTreeMenuProvider(tree).createTreeMenu();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new AnalysisColumnColumnMenuProvider(tree).createTreeMenu();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}",0.9887880405766152
139033,"@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
    tree.setMenu(null);
  }
 else {
    new ColumnModelElementTreeMenuProvider(tree).createTreeMenu();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
    tree.setMenu(null);
  }
 else {
    new AnalysisColumnColumnMenuProvider(tree).createTreeMenu();
  }
}",0.94
139034,"private Runnable getRefreshRunnable(final Resource resource){
  return new Runnable(){
    public void run(){
      IFile propFile=PropertyHelper.getPropertyFile(resource);
      if (propFile.exists()) {
        Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propFile);
        updateProperty(resource,propertyResource);
        updateElement(resource,propertyResource);
      }
    }
  }
;
}","private Runnable getRefreshRunnable(final Resource resource){
  return new Runnable(){
    public void run(){
      IFile propFile=PropertyHelper.getPropertyFile(resource);
      if (propFile != null && propFile.exists()) {
        Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propFile);
        updateProperty(resource,propertyResource);
        updateElement(resource,propertyResource);
      }
    }
  }
;
}",0.976905311778291
139035,"public void run(){
  IFile propFile=PropertyHelper.getPropertyFile(resource);
  if (propFile.exists()) {
    Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propFile);
    updateProperty(resource,propertyResource);
    updateElement(resource,propertyResource);
  }
}","public void run(){
  IFile propFile=PropertyHelper.getPropertyFile(resource);
  if (propFile != null && propFile.exists()) {
    Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propFile);
    updateProperty(resource,propertyResource);
    updateElement(resource,propertyResource);
  }
}",0.9673202614379084
139036,"private boolean synAnalyzedElements(AnalyzedElementSynDialog anaEleSynDialog,Analysis synAnalysis,TdDataProvider oldDataProvider,TdDataProvider newDataProv){
  Map<ModelElement,ModelElement> synEleMap=anaEleSynDialog.getSynedEleMap();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(synAnalysis);
  synAnalysis.getContext().setConnection(newDataProv);
  List<ModelElement> tempList=new ArrayList<ModelElement>();
  tempList.add(oldDataProvider);
  DependenciesHandler.getInstance().removeDependenciesBetweenModels(synAnalysis,tempList);
  PrvResourceFileHelper.getInstance().save(oldDataProvider);
  EList<Indicator> indcList=synAnalysis.getResults().getIndicators();
  Indicator[] copiedIndArray=new Indicator[indcList.size()];
  System.arraycopy(indcList.toArray(),0,copiedIndArray,0,indcList.size());
  synAnalysis.getContext().getAnalysedElements().clear();
  synAnalysis.getResults().getIndicators().clear();
  boolean isExistSynedElement=false;
  for (  Indicator indicator : copiedIndArray) {
    if (indicator instanceof ColumnSetMultiValueIndicator) {
      ColumnSetMultiValueIndicator compositeInd=(ColumnSetMultiValueIndicator)indicator;
      ModelElement[] mes=new ModelElement[compositeInd.getAnalyzedColumns().size()];
      ((ColumnSetMultiValueIndicator)indicator).getAnalyzedColumns().toArray(mes);
      compositeInd.getAnalyzedColumns().clear();
      for (      ModelElement me : mes) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          DataminingType dataminingType=MetadataHelper.getDataminingType((TdColumn)me);
          if (dataminingType == null) {
            dataminingType=MetadataHelper.getDefaultDataminingType(((TdColumn)me).getJavaType());
          }
          MetadataHelper.setDataminingType(dataminingType,newColumn);
          compositeInd.getAnalyzedColumns().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
    }
 else     if (indicator instanceof ColumnsCompareIndicator) {
      ColumnsCompareIndicator compInd=(ColumnsCompareIndicator)indicator;
      if ((compInd.getColumnSetA() == null || compInd.getColumnSetA().size() == 0) || (compInd.getColumnSetB() == null || compInd.getColumnSetB().size() == 0)) {
        return false;
      }
      ModelElement[] mesA=new ModelElement[compInd.getColumnSetA().size()];
      compInd.getColumnSetA().toArray(mesA);
      compInd.getColumnSetA().clear();
      for (      ModelElement me : mesA) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          compInd.getColumnSetA().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
      ModelElement[] mesB=new ModelElement[compInd.getColumnSetB().size()];
      compInd.getColumnSetB().toArray(mesB);
      compInd.getColumnSetB().clear();
      for (      ModelElement me : mesB) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          compInd.getColumnSetB().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
      ModelElement oldAnaEle=compInd.getAnalyzedElement();
      compInd.setAnalyzedElement(null);
      ColumnSet oldColSetA=ColumnHelper.getColumnSetOwner((Column)mesA[0]);
      ColumnSet oldColSetB=ColumnHelper.getColumnSetOwner((Column)mesB[0]);
      if (oldColSetA == oldAnaEle) {
        if (synEleMap.get(mesA[0]) != null) {
          compInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(mesA[0])));
        }
      }
      if (oldColSetB == oldAnaEle) {
        if (synEleMap.get(mesB[0]) != null) {
          compInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(mesB[0])));
        }
      }
    }
 else {
      ModelElement me=indicator.getAnalyzedElement();
      if (synEleMap.get(me) != null) {
        indicator.setAnalyzedElement(synEleMap.get(me));
        anaBuilder.addElementToAnalyze(synEleMap.get(me),indicator);
        isExistSynedElement=true;
      }
    }
  }
  return isExistSynedElement;
}","private boolean synAnalyzedElements(AnalyzedElementSynDialog anaEleSynDialog,Analysis synAnalysis,TdDataProvider oldDataProvider,TdDataProvider newDataProv){
  Map<ModelElement,ModelElement> synEleMap=anaEleSynDialog.getSynedEleMap();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(synAnalysis);
  synAnalysis.getContext().setConnection(newDataProv);
  List<ModelElement> tempList=new ArrayList<ModelElement>();
  tempList.add(oldDataProvider);
  DependenciesHandler.getInstance().removeDependenciesBetweenModels(synAnalysis,tempList);
  PrvResourceFileHelper.getInstance().save(oldDataProvider);
  EList<Indicator> indcList=synAnalysis.getResults().getIndicators();
  Indicator[] copiedIndArray=new Indicator[indcList.size()];
  System.arraycopy(indcList.toArray(),0,copiedIndArray,0,indcList.size());
  synAnalysis.getContext().getAnalysedElements().clear();
  synAnalysis.getResults().getIndicators().clear();
  boolean isExistSynedElement=false;
  for (  Indicator indicator : copiedIndArray) {
    if (indicator instanceof ColumnSetMultiValueIndicator) {
      ColumnSetMultiValueIndicator compositeInd=(ColumnSetMultiValueIndicator)indicator;
      ModelElement[] mes=new ModelElement[compositeInd.getAnalyzedColumns().size()];
      ((ColumnSetMultiValueIndicator)indicator).getAnalyzedColumns().toArray(mes);
      compositeInd.getAnalyzedColumns().clear();
      for (      ModelElement me : mes) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          DataminingType dataminingType=MetadataHelper.getDataminingType((TdColumn)me);
          if (dataminingType == null) {
            dataminingType=MetadataHelper.getDefaultDataminingType(((TdColumn)me).getJavaType());
          }
          MetadataHelper.setDataminingType(dataminingType,newColumn);
          compositeInd.getAnalyzedColumns().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
    }
 else     if (indicator instanceof ColumnsCompareIndicator) {
      ColumnsCompareIndicator compInd=(ColumnsCompareIndicator)indicator;
      if ((compInd.getColumnSetA() == null || compInd.getColumnSetA().size() == 0) || (compInd.getColumnSetB() == null || compInd.getColumnSetB().size() == 0)) {
        return false;
      }
      ModelElement[] mesA=new ModelElement[compInd.getColumnSetA().size()];
      compInd.getColumnSetA().toArray(mesA);
      compInd.getColumnSetA().clear();
      for (      ModelElement me : mesA) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          compInd.getColumnSetA().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
      ModelElement[] mesB=new ModelElement[compInd.getColumnSetB().size()];
      compInd.getColumnSetB().toArray(mesB);
      compInd.getColumnSetB().clear();
      for (      ModelElement me : mesB) {
        if (synEleMap.get(me) != null) {
          TdColumn newColumn=(TdColumn)synEleMap.get(me);
          compInd.getColumnSetB().add(newColumn);
          anaBuilder.addElementToAnalyze(newColumn,indicator);
          isExistSynedElement=true;
        }
      }
      ModelElement oldAnaEle=compInd.getAnalyzedElement();
      compInd.setAnalyzedElement(null);
      ColumnSet oldColSetA=ColumnHelper.getColumnSetOwner((Column)mesA[0]);
      ColumnSet oldColSetB=ColumnHelper.getColumnSetOwner((Column)mesB[0]);
      if (oldColSetA == oldAnaEle) {
        if (synEleMap.get(mesA[0]) != null) {
          compInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(mesA[0])));
        }
      }
      if (oldColSetB == oldAnaEle) {
        if (synEleMap.get(mesB[0]) != null) {
          compInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(mesB[0])));
        }
      }
    }
 else     if (indicator instanceof ColumnDependencyIndicator) {
      ColumnDependencyIndicator funDepInd=(ColumnDependencyIndicator)indicator;
      if (funDepInd.getColumnA() == null || funDepInd.getColumnB() == null) {
        return false;
      }
      if (synEleMap.get(funDepInd.getColumnA()) != null) {
        TdColumn newColumn=(TdColumn)synEleMap.get(funDepInd.getColumnA());
        funDepInd.setColumnA(newColumn);
        anaBuilder.addElementToAnalyze(newColumn,indicator);
        isExistSynedElement=true;
      }
      if (synEleMap.get(funDepInd.getColumnB()) != null) {
        TdColumn newColumn=(TdColumn)synEleMap.get(funDepInd.getColumnB());
        funDepInd.setColumnB(newColumn);
        anaBuilder.addElementToAnalyze(newColumn,indicator);
        isExistSynedElement=true;
      }
      ModelElement oldAnaEle=funDepInd.getAnalyzedElement();
      funDepInd.setAnalyzedElement(null);
      ColumnSet oldColSetA=ColumnHelper.getColumnSetOwner(funDepInd.getColumnA());
      ColumnSet oldColSetB=ColumnHelper.getColumnSetOwner(funDepInd.getColumnB());
      if (oldColSetA == oldAnaEle) {
        if (synEleMap.get(funDepInd.getColumnA()) != null) {
          funDepInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(funDepInd.getColumnA())));
        }
      }
      if (oldColSetB == oldAnaEle) {
        if (synEleMap.get(funDepInd.getColumnB()) != null) {
          funDepInd.setAnalyzedElement(ColumnHelper.getColumnSetOwner((Column)synEleMap.get(funDepInd.getColumnB())));
        }
      }
    }
 else {
      ModelElement me=indicator.getAnalyzedElement();
      if (synEleMap.get(me) != null) {
        indicator.setAnalyzedElement(synEleMap.get(me));
        anaBuilder.addElementToAnalyze(synEleMap.get(me),indicator);
        isExistSynedElement=true;
      }
    }
  }
  return isExistSynedElement;
}",0.8274358211913966
139037,"private void addTreeListener(final Tree tree){
  tree.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      if (e.getSource() instanceof Tree) {
        Tree currentTree=(Tree)e.getSource();
        if (currentTree.getSelection().length > 0) {
          enabledButtons(true);
        }
      }
    }
    public void focusLost(    FocusEvent e){
      if (e.getSource() instanceof Tree) {
        Tree currentTree=(Tree)e.getSource();
        if (currentTree.getSelection().length <= 0) {
          enabledButtons(false);
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean con=false;
      if (e.item instanceof TreeItem) {
        enabledButtons(true);
        TreeItem item=(TreeItem)e.item;
        if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
          tree.setMenu(null);
          return;
        }
 else         if (item.getData(INDICATOR_UNIT_KEY) != null) {
          IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
          IndicatorEnum type=indicatorUnit.getType();
          con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
        }
      }
      createTreeMenu(tree,con);
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      if (e.getSource() instanceof Tree) {
        Tree currentTree=(Tree)e.getSource();
        if (currentTree.getSelection().length > 0) {
          enabledButtons(true);
        }
      }
    }
    public void focusLost(    FocusEvent e){
      if (e.getSource() instanceof Tree) {
        Tree currentTree=(Tree)e.getSource();
        if (currentTree.getSelection().length <= 0) {
          enabledButtons(false);
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean con=false;
      if (e.item instanceof TreeItem) {
        enabledButtons(true);
        TreeItem item=(TreeItem)e.item;
        if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
          tree.setMenu(null);
          return;
        }
 else {
          new AnalysisColumnSetMenuProvider(tree).createTreeMenu();
        }
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
}",0.8960573476702509
139038,"/** 
 * Remove the selected elements(eg:TdColumn or Indicator) from tree.
 * @param newTree
 */
private void removeSelectedElements(final Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  for (  TreeItem item : selection) {
    TdColumn tdColumn=(TdColumn)item.getData(COLUMN_INDICATOR_KEY);
    deleteColumnItems(tdColumn);
    removeItemBranch(item);
  }
}","/** 
 * Remove the selected elements(eg:TdColumn or Indicator) from tree.
 * @param newTree
 */
private void removeSelectedElements(final Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  for (  TreeItem item : selection) {
    ModelElementIndicator meIndicator=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      deleteIndicatorItems(meIndicator,indicatorUnit);
    }
 else {
      TdColumn tdColumn=(TdColumn)item.getData(COLUMN_INDICATOR_KEY);
      deleteColumnItems(tdColumn);
    }
    removeItemBranch(item);
  }
}",0.7153846153846154
139039,"@Override public void widgetSelected(SelectionEvent e){
  boolean con=false;
  if (e.item instanceof TreeItem) {
    enabledButtons(true);
    TreeItem item=(TreeItem)e.item;
    if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
      tree.setMenu(null);
      return;
    }
 else     if (item.getData(INDICATOR_UNIT_KEY) != null) {
      IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
      IndicatorEnum type=indicatorUnit.getType();
      con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
    }
  }
  createTreeMenu(tree,con);
}","@Override public void widgetSelected(SelectionEvent e){
  boolean con=false;
  if (e.item instanceof TreeItem) {
    enabledButtons(true);
    TreeItem item=(TreeItem)e.item;
    if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
      tree.setMenu(null);
      return;
    }
 else {
      new AnalysisColumnSetMenuProvider(tree).createTreeMenu();
    }
  }
}",0.5906838453914767
139040,"/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(120);
  column2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(80);
  column3.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(80);
  column4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  parent.layout();
  createTreeMenu(newTree,false);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
      updateBindConnection(masterPage,tree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  addTargetDND(newTree);
  addTreeListener(newTree);
  return newTree;
}","/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(120);
  column2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(80);
  column3.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(80);
  column4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  parent.layout();
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
      updateBindConnection(masterPage,tree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  addTargetDND(newTree);
  addTreeListener(newTree);
  return newTree;
}",0.9870027569909412
139041,"/** 
 * DOC zshen Comment method ""createButtonSection"".
 * @param topComp create the button with delButton,moveUpButton,moveDownButton
 */
private void createButtonSection(Composite topComp){
  Composite buttonsComp=masterPage.getEditor().getToolkit().createComposite(topComp,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData();
  buttonGridData.heightHint=25;
  buttonGridData.horizontalAlignment=GridData.CENTER;
  buttonGridData.verticalAlignment=GridData.FILL;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.grabExcessVerticalSpace=true;
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  buttons=new Button[]{delButton,moveUpButton,moveDownButton};
  enabledButtons(false);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(masterPage.getTreeViewer(),-1);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(masterPage.getTreeViewer(),1);
    }
  }
);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Tree currentTree=tree;
      Object[] selectItem=currentTree.getSelection();
      List<Column> columnList=masterPage.getTreeViewer().getColumnSetMultiValueList();
      for (int i=0; i < selectItem.length; i++) {
        Object removeElement=((TreeItem)selectItem[i]).getData(AnalysisColumnNominalIntervalTreeViewer.COLUMN_INDICATOR_KEY);
        columnList.remove(removeElement);
      }
      masterPage.getTreeViewer().setInput(convertList(columnList).toArray());
      enabledButtons(false);
    }
  }
);
}","/** 
 * DOC zshen Comment method ""createButtonSection"".
 * @param topComp create the button with delButton,moveUpButton,moveDownButton
 */
private void createButtonSection(Composite topComp){
  Composite buttonsComp=masterPage.getEditor().getToolkit().createComposite(topComp,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData();
  buttonGridData.heightHint=25;
  buttonGridData.horizontalAlignment=GridData.CENTER;
  buttonGridData.verticalAlignment=GridData.FILL;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.grabExcessVerticalSpace=true;
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  buttons.put(""String_Node_Str"",delButton);
  buttons.put(""String_Node_Str"",moveUpButton);
  buttons.put(""String_Node_Str"",moveDownButton);
  enabledButtons(false);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(masterPage.getTreeViewer(),-1);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(masterPage.getTreeViewer(),1);
    }
  }
);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Tree currentTree=tree;
      Object[] selectItem=currentTree.getSelection();
      List<Column> columnList=masterPage.getTreeViewer().getColumnSetMultiValueList();
      for (int i=0; i < selectItem.length; i++) {
        Object removeElement=((TreeItem)selectItem[i]).getData(AnalysisColumnNominalIntervalTreeViewer.COLUMN_INDICATOR_KEY);
        columnList.remove(removeElement);
      }
      masterPage.getTreeViewer().setInput(convertList(columnList).toArray());
      enabledButtons(false);
    }
  }
);
}",0.9615136529778542
139042,"/** 
 * DOC zshen Comment method ""enabledButtons"".
 * @param enabled the state of buttons .change the state of buttons.
 */
public void enabledButtons(boolean enabled){
  for (  Button button : buttons) {
    button.setEnabled(enabled);
  }
}","/** 
 * DOC zshen Comment method ""enabledButtons"".
 * @param enabled the state of buttons .change the state of buttons.
 */
public void enabledButtons(boolean enabled){
  boolean moveEnabled=enabled;
  TreeItem[] selectItems=getTree().getSelection();
  if (!isSelectedColumn(selectItems)) {
    moveEnabled=false;
  }
  buttons.get(""String_Node_Str"").setEnabled(enabled);
  buttons.get(""String_Node_Str"").setEnabled(moveEnabled);
  buttons.get(""String_Node_Str"").setEnabled(moveEnabled);
}",0.5116279069767442
139043,"@Override protected void removeItemBranch(TreeItem item){
  IndicatorUnit unit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
  super.removeItemBranch(item);
  if (null != unit) {
    masterPage.getAllMatchIndicator().getCompositeRegexMatchingIndicators().remove(unit.getIndicator());
    masterPage.updateIndicatorSection();
  }
}","@Override protected void removeItemBranch(TreeItem item){
  IndicatorUnit unit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
  ModelElementIndicator meIndicator=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
  super.removeItemBranch(item);
  if (null != unit) {
    meIndicator.removeIndicatorUnit(unit);
    masterPage.getAllMatchIndicator().getCompositeRegexMatchingIndicators().remove(unit.getIndicator());
    masterPage.updateIndicatorSection();
  }
}",0.8222222222222222
139044,"private void createAnalyzedColumnSetsSection(String mainTitle,String description){
  columnsComparisonSection=masterPage.createSection(form,parentComp,mainTitle,description);
  Composite sectionClient=toolkit.createComposite(columnsComparisonSection);
  sectionClient.setLayout(new GridLayout());
  if (showCheckButton) {
    checkComputeButton=new Button(sectionClient,SWT.CHECK);
    GridData layoutData=new GridData(GridData.FILL_BOTH);
    layoutData.horizontalAlignment=SWT.CENTER;
    checkComputeButton.setLayoutData(layoutData);
    checkComputeButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    checkComputeButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    checkComputeButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        masterPage.setDirty(true);
      }
    }
);
    checkComputeButton.setSelection(checkComputButton);
  }
  Composite columnComp=toolkit.createComposite(sectionClient);
  columnComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  columnComp.setLayout(new GridLayout());
  Composite compareToplevelComp=toolkit.createComposite(columnComp);
  GridLayout compareToplevelLayout=new GridLayout();
  compareToplevelLayout.numColumns=2;
  compareToplevelComp.setLayout(compareToplevelLayout);
  masterPage.createConnBindWidget(compareToplevelComp);
  columnReverseButtion=new Button(compareToplevelComp,SWT.NONE);
  columnReverseButtion.setText(""String_Node_Str"");
  columnReverseButtion.addMouseListener(new MouseListener(){
    public void mouseDoubleClick(    MouseEvent e){
    }
    public void mouseDown(    MouseEvent e){
      handleColumnReverseAction();
    }
    public void mouseUp(    MouseEvent e){
    }
  }
);
  columnReverseButtion.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == 13) {
        handleColumnReverseAction();
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  SashForm sashForm=new SashForm(sectionClient,SWT.NULL);
  sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  String hyperlinkTextLeft=null;
  String hyperlinkTextRight=null;
  if (masterPage instanceof ColumnDependencyMasterDetailsPage) {
    hyperlinkTextLeft=DefaultMessagesImpl.getString(""String_Node_Str"");
    hyperlinkTextRight=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
 else {
    hyperlinkTextLeft=DefaultMessagesImpl.getString(""String_Node_Str"");
    hyperlinkTextRight=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  Composite leftComp=toolkit.createComposite(sashForm);
  leftComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  leftComp.setLayout(new GridLayout());
  leftTable=this.createSectionPart(leftComp,columnListA,DefaultMessagesImpl.getString(""String_Node_Str""),hyperlinkTextLeft);
  Composite rightComp=toolkit.createComposite(sashForm);
  rightComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  rightComp.setLayout(new GridLayout());
  rightTable=this.createSectionPart(rightComp,columnListB,DefaultMessagesImpl.getString(""String_Node_Str""),hyperlinkTextRight);
  updateBindConnection(masterPage,tableViewerPosStack);
  columnsComparisonSection.setClient(sectionClient);
}","private void createAnalyzedColumnSetsSection(String mainTitle,String description){
  columnsComparisonSection=masterPage.createSection(form,parentComp,mainTitle,description);
  Composite sectionClient=toolkit.createComposite(columnsComparisonSection);
  sectionClient.setLayout(new GridLayout());
  if (showCheckButton) {
    checkComputeButton=new Button(sectionClient,SWT.CHECK);
    GridData layoutData=new GridData(GridData.FILL_BOTH);
    layoutData.horizontalAlignment=SWT.CENTER;
    checkComputeButton.setLayoutData(layoutData);
    checkComputeButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    checkComputeButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    checkComputeButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        masterPage.setDirty(true);
      }
    }
);
    checkComputeButton.setSelection(checkComputButton);
  }
  Composite columnComp=toolkit.createComposite(sectionClient);
  columnComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  columnComp.setLayout(new GridLayout());
  Composite compareToplevelComp=toolkit.createComposite(columnComp);
  GridLayout compareToplevelLayout=new GridLayout();
  compareToplevelLayout.numColumns=2;
  compareToplevelComp.setLayout(compareToplevelLayout);
  masterPage.createConnBindWidget(compareToplevelComp);
  if (masterPage instanceof ColumnDependencyMasterDetailsPage) {
    columnReverseButtion=new Button(compareToplevelComp,SWT.NONE);
    columnReverseButtion.setText(""String_Node_Str"");
    columnReverseButtion.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        handleColumnReverseAction();
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnReverseButtion.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
        if (e.keyCode == 13) {
          handleColumnReverseAction();
        }
      }
      public void keyReleased(      KeyEvent e){
      }
    }
);
  }
  SashForm sashForm=new SashForm(sectionClient,SWT.NULL);
  sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  String hyperlinkTextLeft=null;
  String hyperlinkTextRight=null;
  if (masterPage instanceof ColumnDependencyMasterDetailsPage) {
    hyperlinkTextLeft=DefaultMessagesImpl.getString(""String_Node_Str"");
    hyperlinkTextRight=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
 else {
    hyperlinkTextLeft=DefaultMessagesImpl.getString(""String_Node_Str"");
    hyperlinkTextRight=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  Composite leftComp=toolkit.createComposite(sashForm);
  leftComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  leftComp.setLayout(new GridLayout());
  leftTable=this.createSectionPart(leftComp,columnListA,DefaultMessagesImpl.getString(""String_Node_Str""),hyperlinkTextLeft);
  Composite rightComp=toolkit.createComposite(sashForm);
  rightComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  rightComp.setLayout(new GridLayout());
  rightTable=this.createSectionPart(rightComp,columnListB,DefaultMessagesImpl.getString(""String_Node_Str""),hyperlinkTextRight);
  updateBindConnection(masterPage,tableViewerPosStack);
  columnsComparisonSection.setClient(sectionClient);
}",0.9819395962968585
139045,"@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  File sfile=(File)item.getData();
  IFile sIFile=file2IFile(sfile);
  if (sIFile != null) {
    File[] dependencies=computeDependencies(sIFile);
    for (    File file : dependencies) {
      repositoryTree.setChecked(file,item.getChecked());
    }
    repositoryTree.refresh();
  }
  checkForErrors();
}","@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  File sfile=(File)item.getData();
  IFile sIFile=ResourceService.file2IFile(sfile);
  if (sIFile != null) {
    File[] dependencies=computeDependencies(sIFile);
    for (    File file : dependencies) {
      repositoryTree.setChecked(file,item.getChecked());
    }
    repositoryTree.refresh();
  }
  checkForErrors();
}",0.98014888337469
139046,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      IFile sIFile=file2IFile(sfile);
      if (sIFile != null) {
        File[] dependencies=computeDependencies(sIFile);
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
      }
      checkForErrors();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      writer.setBasePath(dirTxt.getText());
      checkForErrors();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      IFile sIFile=ResourceService.file2IFile(sfile);
      if (sIFile != null) {
        File[] dependencies=computeDependencies(sIFile);
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
      }
      checkForErrors();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      writer.setBasePath(dirTxt.getText());
      checkForErrors();
    }
  }
);
}",0.9963636363636365
139047,"/** 
 * this check that the folder entered in the target export location exist otherwhise set an erro message and disable export.
 */
protected void checkForErrors(){
  errors=new ArrayList<String>();
  if (!new File(dirTxt.getText()).exists()) {
    errors.add(Messages.getString(""String_Node_Str""));
  }
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    File file=record.getFile();
    IFile iFile=file2IFile(file);
    File[] dependencies=computeDependencies(iFile);
    for (    File depFile : dependencies) {
      if (!repositoryTree.getChecked(depFile)) {
        errors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ depFile.getName());
      }
    }
  }
  if (!errors.isEmpty()) {
    setErrorMessage(errors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}","/** 
 * this check that the folder entered in the target export location exist otherwhise set an erro message and disable export.
 */
protected void checkForErrors(){
  errors=new ArrayList<String>();
  if (!new File(dirTxt.getText()).exists()) {
    errors.add(Messages.getString(""String_Node_Str""));
  }
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    File file=record.getFile();
    IFile iFile=ResourceService.file2IFile(file);
    File[] dependencies=computeDependencies(iFile);
    for (    File depFile : dependencies) {
      if (!repositoryTree.getChecked(depFile)) {
        errors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ depFile.getName());
      }
    }
  }
  if (!errors.isEmpty()) {
    setErrorMessage(errors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.9907192575406032
139048,"@Override public void widgetSelected(SelectionEvent e){
  dirTxt.setText(dirTxt.getText());
  populateElement();
}","@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  File sfile=(File)item.getData();
  if (sfile.isFile()) {
    ItemRecord record=new ItemRecord(sfile);
    List<File> dependencyFiles=record.getDependencyFiles();
    for (    File file : dependencyFiles) {
      repositoryTree.setChecked(file,item.getChecked());
    }
    repositoryTree.refresh();
    checkforErrors();
  }
}",0.2556390977443609
139049,"/** 
 * update the page state that is the finish button enable state according to the error message being present or not.
 */
private void updatePageStatus(){
  boolean valid=getErrorMessage() == null;
  setPageComplete(valid);
  repositoryTree.getTree().setEnabled(valid);
}","/** 
 * update the page state that is the finish button enable state according to the error message being present or not.
 */
private void updatePageStatus(){
  boolean valid=getErrorMessage() == null;
  setPageComplete(valid);
}",0.9087301587301588
139050,"/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  IPath dirPath=new Path(dirTxt.getText());
  if (!dirPath.toFile().exists()) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else   if (repositoryTree.getTree().getItems().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else   if (repositoryTree.getCheckedElements().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    IPath versionPath=dirPath.append(EResourceConstant.LIBRARIES.getPath()).append(""String_Node_Str"");
    if (!versionPath.toFile().exists()) {
      setErrorMessage(""String_Node_Str"");
    }
 else {
      setErrorMessage(null);
    }
  }
  updatePageStatus();
}","/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  IPath dirPath=new Path(dirTxt.getText());
  if (!dirPath.toFile().exists()) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  IPath versionPath=dirPath.append(EResourceConstant.LIBRARIES.getPath()).append(""String_Node_Str"");
  if (!versionPath.toFile().exists()) {
    dErrors.add(""String_Node_Str"");
  }
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyFiles()) {
      if (!repositoryTree.getChecked(depFile)) {
        dErrors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ depFile.getName());
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.720216606498195
139051,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
        populateElement();
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  overwriteBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      dirTxt.setText(dirTxt.getText());
      populateElement();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dirTextModified();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
        populateElement();
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  overwriteBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      dirTxt.setText(dirTxt.getText());
      populateElement();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      if (sfile.isFile()) {
        ItemRecord record=new ItemRecord(sfile);
        List<File> dependencyFiles=record.getDependencyFiles();
        for (        File file : dependencyFiles) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
        checkforErrors();
      }
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dirTextModified();
    }
  }
);
}",0.8685202639019792
139052,"/** 
 * DOC bZhou Comment method ""init"".
 */
private void init(){
  if (resourceSet == null) {
    resourceSet=new ResourceSetImpl();
  }
  if (element == null && file != null) {
    URI fileURI=URI.createFileURI(file.getAbsolutePath());
    Resource resource=resourceSet.getResource(fileURI,true);
    EList<EObject> contents=resource.getContents();
    if (contents != null && !contents.isEmpty()) {
      EObject object=contents.get(0);
      if (object instanceof ModelElement) {
        element=(ModelElement)object;
      }
    }
  }
  if (property == null && file != null) {
    property=(Property)EObjectHelper.retrieveEObject(getPropertyPath(),PropertiesPackage.eINSTANCE.getProperty());
  }
}","/** 
 * DOC bZhou Comment method ""init"".
 */
private void init(){
  if (resourceSet == null) {
    resourceSet=new ResourceSetImpl();
  }
  if (element == null && file != null) {
    URI fileURI=URI.createFileURI(file.getAbsolutePath());
    Resource resource=resourceSet.getResource(fileURI,true);
    EList<EObject> contents=resource.getContents();
    if (contents != null && !contents.isEmpty()) {
      EObject object=contents.get(0);
      if (object instanceof ModelElement) {
        element=(ModelElement)object;
      }
    }
  }
  if (property == null && file != null) {
    property=(Property)EObjectHelper.retrieveEObject(getPropertyPath(),PropertiesPackage.eINSTANCE.getProperty());
  }
  computeDependencies();
}",0.9825052484254724
139053,"public DQRespositoryView(){
  super();
  DQStructureManager manager=DQStructureManager.getInstance();
  if (manager.isNeedCreateStructure()) {
    manager.createDQStructure();
  }
  if (manager.isNeedMigration()) {
    MigrationTaskManager.doMigrationTask(MigrationTaskManager.findValidTasks());
  }
}","public DQRespositoryView(){
  super();
  DQStructureManager manager=DQStructureManager.getInstance();
  if (manager.isNeedCreateStructure()) {
    manager.createDQStructure();
  }
  if (manager.isNeedMigration()) {
    MigrationTaskManager.doMigrationTask(MigrationTaskManager.findNonDBValidTasks());
  }
}",0.9917627677100496
139054,"private void createNewLineWithJavaUDI(){
  EList<TaggedValue> tvs=definition.getTaggedValue();
  String classNameStr=null;
  String jarPathStr=""String_Node_Str"";
  for (  TaggedValue tv : tvs) {
    if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
      classNameStr=tv.getValue();
      continue;
    }
    if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
      jarPathStr=tv.getValue();
    }
  }
  if (classNameStr == null) {
    return;
  }
  final Composite lineComp=new Composite(expressionComp,SWT.NONE);
  lineComp.setLayout(new GridLayout(2,false));
  final CCombo combo=new CCombo(lineComp,SWT.BORDER);
  combo.setLayoutData(new GridData());
  ((GridData)combo.getLayoutData()).widthHint=150;
  combo.setEditable(false);
  combo.setItems(allDBTypeList.toArray(new String[allDBTypeList.size()]));
  combo.setText(PatternLanguageType.JAVA.getName());
  combo.addSelectionListener(new LangCombSelectionListener());
  tempExpressionMap.put(combo,BooleanExpressionHelper.createExpression(combo.getText(),null));
  Composite detailComp=new Composite(combo.getParent(),SWT.NONE);
  widgetMap.put(combo,detailComp);
  detailComp.setLayout(new GridLayout(4,false));
  Text classNameText=new Text(detailComp,SWT.BORDER);
  classNameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)classNameText.getLayoutData()).widthHint=250;
  classNameText.setText(classNameStr);
  classNameText.addModifyListener(new NeedToSetDirtyListener());
  final Text jarPathText=new Text(detailComp,SWT.BORDER);
  jarPathText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)jarPathText.getLayoutData()).widthHint=350;
  jarPathText.setText(jarPathStr);
  jarPathText.addModifyListener(new NeedToSetDirtyListener());
  Button button=new Button(detailComp,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(combo.getParent().getShell(),SWT.NONE);
      dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      String path=dialog.open();
      if (path != null) {
        jarPathText.setText(path);
      }
    }
  }
);
  combo.setData(PluginConstant.CLASS_NAME_TEXT,classNameText);
  combo.setData(PluginConstant.JAR_FILE_PATH,jarPathText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
}","private void createNewLineWithJavaUDI(){
  EList<TaggedValue> tvs=definition.getTaggedValue();
  String classNameStr=null;
  String jarPathStr=""String_Node_Str"";
  for (  TaggedValue tv : tvs) {
    if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
      classNameStr=tv.getValue();
      continue;
    }
    if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
      jarPathStr=tv.getValue();
    }
  }
  if (classNameStr == null) {
    return;
  }
  final Composite lineComp=new Composite(expressionComp,SWT.NONE);
  lineComp.setLayout(new GridLayout(2,false));
  final CCombo combo=new CCombo(lineComp,SWT.BORDER);
  combo.setLayoutData(new GridData());
  ((GridData)combo.getLayoutData()).widthHint=150;
  combo.setEditable(false);
  combo.setItems(allDBTypeList.toArray(new String[allDBTypeList.size()]));
  combo.setText(PatternLanguageType.JAVA.getName());
  combo.addSelectionListener(new LangCombSelectionListener());
  tempExpressionMap.put(combo,BooleanExpressionHelper.createExpression(combo.getText(),null));
  final Composite detailComp=new Composite(combo.getParent(),SWT.NONE);
  widgetMap.put(combo,detailComp);
  detailComp.setLayout(new GridLayout(4,false));
  final Text classNameText=new Text(detailComp,SWT.BORDER);
  classNameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)classNameText.getLayoutData()).widthHint=250;
  classNameText.setText(classNameStr);
  classNameText.addModifyListener(new NeedToSetDirtyListener());
  final Text jarPathText=new Text(detailComp,SWT.BORDER);
  jarPathText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)jarPathText.getLayoutData()).widthHint=350;
  jarPathText.setText(jarPathStr);
  jarPathText.addModifyListener(new NeedToSetDirtyListener());
  Button button=new Button(detailComp,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(combo.getParent().getShell(),SWT.NONE);
      dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      String path=dialog.open();
      if (path != null) {
        jarPathText.setText(path);
        validateJavaUDI(detailComp,classNameText,jarPathText);
      }
    }
  }
);
  classNameText.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      validateJavaUDI(detailComp,classNameText,jarPathText);
    }
  }
);
  combo.setData(PluginConstant.CLASS_NAME_TEXT,classNameText);
  combo.setData(PluginConstant.JAR_FILE_PATH,jarPathText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
}",0.9423923444976076
139055,"@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  File sfile=(File)item.getData();
  IFile sIFile=file2IFile(sfile);
  if (sIFile != null) {
    File[] dependencies=computeDependencies(sIFile);
    for (    File file : dependencies) {
      repositoryTree.setChecked(file,item.getChecked());
    }
    repositoryTree.refresh();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  File sfile=(File)item.getData();
  IFile sIFile=file2IFile(sfile);
  if (sIFile != null) {
    File[] dependencies=computeDependencies(sIFile);
    for (    File file : dependencies) {
      repositoryTree.setChecked(file,item.getChecked());
    }
    repositoryTree.refresh();
  }
  checkForErrors();
}",0.974025974025974
139056,"public void modifyText(ModifyEvent e){
  checkForErrors();
  updatePageStatus();
}","public void modifyText(ModifyEvent e){
  checkForErrors();
}",0.8450704225352113
139057,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      IFile sIFile=file2IFile(sfile);
      if (sIFile != null) {
        File[] dependencies=computeDependencies(sIFile);
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
      }
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkForErrors();
      updatePageStatus();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      IFile sIFile=file2IFile(sfile);
      if (sIFile != null) {
        File[] dependencies=computeDependencies(sIFile);
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
      }
      checkForErrors();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkForErrors();
    }
  }
);
}",0.9883666821777572
139058,"/** 
 * this check that the folder entered in the target export location exist otherwhise set an erro message and disable export.
 */
protected void checkForErrors(){
  if (!new File(dirTxt.getText()).exists()) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    setErrorMessage(null);
  }
}","/** 
 * this check that the folder entered in the target export location exist otherwhise set an erro message and disable export.
 */
protected void checkForErrors(){
  errors=new ArrayList<String>();
  if (!new File(dirTxt.getText()).exists()) {
    errors.add(Messages.getString(""String_Node_Str""));
  }
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    File file=record.getFile();
    IFile iFile=file2IFile(file);
    File[] dependencies=computeDependencies(iFile);
    for (    File depFile : dependencies) {
      if (!repositoryTree.getChecked(depFile)) {
        errors.add(""String_Node_Str"" + record.getElement().getName() + ""String_Node_Str""+ depFile.getName());
      }
    }
  }
  if (!errors.isEmpty()) {
    setErrorMessage(errors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.5072587532023911
139059,"public void createControl(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  top.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSelectComposite(top);
  createRepositoryTree(top);
  addListeners();
  initControlState();
  temporaryDisableTreeSelection();
  setControl(top);
}","public void createControl(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  top.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSelectComposite(top);
  createRepositoryTree(top);
  addListeners();
  initControlState();
  setControl(top);
}",0.945226917057903
139060,"/** 
 * DOC sgandon Comment method ""dirTextModified"".
 */
protected void dirTextModified(){
  File file=new File(dirTxt.getText());
  if (file.exists()) {
    repositoryTree.setInput(file);
    repositoryTree.expandAll();
    TreeItem[] topItems=repositoryTree.getTree().getItems();
    for (    TreeItem treeItem : topItems) {
      repositoryTree.setSubtreeChecked(treeItem.getData(),true);
    }
    repositoryTree.getTree().setEnabled(false);
    repositoryTree.refresh();
  }
 else {
    repositoryTree.setInput(null);
  }
  checkforErrors();
  updatePageStatus();
}","/** 
 * DOC sgandon Comment method ""dirTextModified"".
 */
protected void dirTextModified(){
  File file=new File(dirTxt.getText());
  if (file.exists()) {
    repositoryTree.setInput(file);
    repositoryTree.expandAll();
    TreeItem[] topItems=repositoryTree.getTree().getItems();
    for (    TreeItem treeItem : topItems) {
      repositoryTree.setSubtreeChecked(treeItem.getData(),true);
    }
    repositoryTree.getTree().setEnabled(true);
    repositoryTree.refresh();
  }
 else {
    repositoryTree.setInput(null);
  }
  checkforErrors();
  updatePageStatus();
}",0.9938650306748468
139061,"public void finish(ItemRecord[] records) throws IOException {
  if (PluginChecker.isTDCPLoaded()) {
    IPath projResPath=ResourceManager.getRootProject().getLocation().append(""String_Node_Str"");
    IPath projDesPath=new Path(destination).append(ResourceManager.getRootProjectName()).append(""String_Node_Str"");
    File projFile=projResPath.toFile();
    if (projFile.exists()) {
      copyFile(projFile,projDesPath.toFile());
    }
  }
}","public void finish(ItemRecord[] records) throws IOException {
  if (PluginChecker.isTDCPLoaded()) {
    IFile projFile=ResourceManager.getRootProject().getFile(""String_Node_Str"");
    copyFileToDest(projFile);
  }
  IFile versionFile=WorkspaceVersionHelper.getVersionFile();
  copyFileToDest(versionFile);
}",0.485254691689008
139062,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  if (elements instanceof ItemRecord[]) {
    ItemRecord[] recoreds=(ItemRecord[])elements;
    for (    ItemRecord record : recoreds) {
      checkDependency(record);
      if (checkExisted) {
        checkExisted(record);
      }
      if (!record.isValid()) {
        inValidRecords.add(record);
      }
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  if (elements.length != 0) {
    ItemRecord anyRecord=elements[0];
    String path=anyRecord.getFile().getAbsolutePath();
    String subStr=StringUtils.substringBeforeLast(path,anyRecord.getProjectName());
    String versionPath=subStr + anyRecord.getProjectName() + ""String_Node_Str"";
    versionFile=new File(versionPath);
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.6182965299684543
139063,"public void finish(ItemRecord[] records) throws IOException {
  for (  ItemRecord record : records) {
    record.clear();
  }
  IFile defintionFile=ResourceManager.getLibrariesFolder().getFile(""String_Node_Str"");
  if (!defintionFile.exists()) {
    DefinitionHandler.getInstance();
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      CorePlugin.getDefault().refreshWorkSpace();
      CorePlugin.getDefault().refreshDQView();
    }
  }
);
}","public void finish(ItemRecord[] records) throws IOException {
  for (  ItemRecord record : records) {
    record.clear();
  }
  IFile defintionFile=ResourceManager.getLibrariesFolder().getFile(""String_Node_Str"");
  if (!defintionFile.exists()) {
    DefinitionHandler.getInstance();
  }
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (versionFile != null) {
        ProductVersion version=WorkspaceVersionHelper.getVesion(versionFile);
        List<IMigrationTask> migrationTasks=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
        MigrationTaskManager.doMigrationTask(migrationTasks);
      }
      CorePlugin.getDefault().refreshWorkSpace();
      CorePlugin.getDefault().refreshDQView();
    }
  }
);
}",0.7562349155269509
139064,"public void run(){
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView();
}","public void run(){
  if (versionFile != null) {
    ProductVersion version=WorkspaceVersionHelper.getVesion(versionFile);
    List<IMigrationTask> migrationTasks=MigrationTaskManager.findWorkspaceTaskByType(MigrationTaskType.FILE,version);
    MigrationTaskManager.doMigrationTask(migrationTasks);
  }
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView();
}",0.4351297405189621
139065,"public void write(ItemRecord record,String destination) throws IOException, CoreException {
  IPath itemPath=PropertyHelper.getElementPath(record.getProperty());
  IPath itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath).getLocation();
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  Map<IPath,IPath> resMap=new HashMap<IPath,IPath>();
  resMap.put(record.getFilePath(),itemDesPath);
  resMap.put(record.getPropertyPath(),propDesPath);
  for (  IPath resPath : resMap.keySet()) {
    File resFile=resPath.toFile();
    File desFile=resMap.get(resPath).toFile();
    if (desFile.exists()) {
      log.warn(desFile.getAbsoluteFile() + ""String_Node_Str"");
    }
    FilesUtils.copyFile(resFile,desFile);
    String oldProjectLabel=record.getProjectName();
    String curProjectLabel=ResourceManager.getRootProjectName();
    if (!StringUtils.equals(oldProjectLabel,curProjectLabel)) {
      String content=FileUtils.readFileToString(desFile);
      content=StringUtils.replace(content,""String_Node_Str"" + oldProjectLabel + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
      FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
    }
  }
}","public void write(ItemRecord record,String destination) throws IOException, CoreException {
  IPath itemPath=PropertyHelper.getElementPath(record.getProperty());
  IPath itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath).getLocation();
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  Map<IPath,IPath> resMap=new HashMap<IPath,IPath>();
  resMap.put(record.getFilePath(),itemDesPath);
  resMap.put(record.getPropertyPath(),propDesPath);
  for (  IPath resPath : resMap.keySet()) {
    File resFile=resPath.toFile();
    File desFile=resMap.get(resPath).toFile();
    if (desFile.exists()) {
      log.warn(desFile.getAbsoluteFile() + ""String_Node_Str"");
    }
    FilesUtils.copyFile(resFile,desFile);
    String oldProjectLabel=record.getProjectName();
    String curProjectLabel=ResourceManager.getRootProjectName();
    if (!StringUtils.equals(oldProjectLabel,curProjectLabel)) {
      String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
      content=StringUtils.replace(content,""String_Node_Str"" + oldProjectLabel + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
      FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
    }
  }
}",0.9929022082018928
139066,"/** 
 * DOC bZhou Comment method ""getProjectName"".
 * @return
 */
public String getProjectName(){
  if (projectName == null && property != null) {
    InternalEObject author=(InternalEObject)property.getAuthor();
    if (author != null) {
      Resource projResource=author.eResource();
      if (projResource != null) {
        URI projectUri=projResource.getURI();
        IPath projectPath=new Path(projectUri.toFileString());
        if (projectPath.toFile().exists()) {
          Object projOBJ=EObjectHelper.retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
          if (projOBJ != null) {
            Project project=(Project)projOBJ;
            this.projectName=project.getLabel();
          }
        }
      }
    }
  }
  return this.projectName == null ? ReponsitoryContextBridge.PROJECT_DEFAULT_NAME : this.projectName;
}","/** 
 * DOC bZhou Comment method ""getProjectName"".
 * @return
 */
public String getProjectName(){
  if (projectName == null && property != null) {
    InternalEObject author=(InternalEObject)property.getAuthor();
    if (author != null) {
      Resource projResource=author.eResource();
      if (projResource != null) {
        URI projectUri=projResource.getURI();
        IPath projectPath=new Path(projectUri.toFileString());
        if (projectPath.toFile().exists()) {
          Object projOBJ=EObjectHelper.retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
          if (projOBJ != null) {
            Project project=(Project)projOBJ;
            this.projectName=project.getTechnicalLabel();
          }
        }
      }
    }
  }
  return this.projectName == null ? ReponsitoryContextBridge.PROJECT_DEFAULT_NAME : this.projectName;
}",0.9947704822777454
139067,"/** 
 * DOC bZhou Comment method ""getProperty"".
 * @param propertyFile
 * @return Null if can't find.
 */
public static Property getProperty(IFile propertyFile){
  URI propURI=URI.createPlatformResourceURI(propertyFile.getFullPath().toString(),false);
  Resource resource=EMFSharedResources.getInstance().getResource(propURI,true);
  if (resource.getContents().isEmpty()) {
    resource=new ResourceSetImpl().getResource(propURI,true);
  }
  if (resource.getContents() != null) {
    Object object=EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty());
    if (object != null) {
      return (Property)object;
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""getProperty"".
 * @param element
 * @return
 */
public static Property getProperty(ModelElement element){
  IFile propertyFile=PropertyHelper.getPropertyFile(element);
  return propertyFile != null ? getProperty(propertyFile) : null;
}",0.2101910828025477
139068,"public ReturnCode serialize(Property property,URI uri){
  ReturnCode rc=new ReturnCode();
  URI propertiesURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  Resource propertyResource=util.createResource(propertiesURI);
  propertyResource.getContents().add(property);
  propertyResource.getContents().add(property.getItem());
  propertyResource.getContents().add(property.getItem().getState());
  rc.setOk(util.saveResource(propertyResource));
  return rc;
}","public ReturnCode serialize(Property property,URI uri){
  ReturnCode rc=new ReturnCode();
  URI propertiesURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  Resource propertyResource=property.eResource();
  if (propertyResource == null) {
    propertyResource=util.createResource(propertiesURI);
  }
  propertyResource.getContents().add(property);
  propertyResource.getContents().add(property.getItem());
  propertyResource.getContents().add(property.getItem().getState());
  rc.setOk(util.saveResource(propertyResource));
  return rc;
}",0.9240862230552952
139069,"/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 */
public void savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=initProperty(element);
  TDQItem item=initItem(element,property);
  item.setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(property,uri);
  String propertyPath=property.eResource().getURI().toPlatformString(true);
  MetadataHelper.setPropertyPath(propertyPath,element);
}","/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 */
public void savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=PropertyHelper.getProperty(element);
  if (property == null) {
    property=initProperty(element);
  }
  Item item=property.getItem();
  if (item == null) {
    item=initItem(element,property);
  }
  ((TDQItem)item).setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(property,uri);
  String propertyPath=property.eResource().getURI().toPlatformString(true);
  MetadataHelper.setPropertyPath(propertyPath,element);
}",0.7734439834024897
139070,"private Runnable getRefreshRunnable(final Resource resource){
  return new Runnable(){
    public void run(){
      IFile propertyFile=getPropertyFile(resource);
      if (propertyFile != null) {
        Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propertyFile);
        updateProperty(resource,propertyResource);
        updateElement(resource,propertyResource);
      }
    }
  }
;
}","private Runnable getRefreshRunnable(final Resource resource){
  return new Runnable(){
    public void run(){
      IFile propertyFile=PropertyHelper.getPropertyFile(resource);
      if (propertyFile != null) {
        Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propertyFile);
        updateProperty(resource,propertyResource);
        updateElement(resource,propertyResource);
      }
    }
  }
;
}",0.9824150058616647
139071,"public void run(){
  IFile propertyFile=getPropertyFile(resource);
  if (propertyFile != null) {
    Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propertyFile);
    updateProperty(resource,propertyResource);
    updateElement(resource,propertyResource);
  }
}","public void run(){
  IFile propertyFile=PropertyHelper.getPropertyFile(resource);
  if (propertyFile != null) {
    Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propertyFile);
    updateProperty(resource,propertyResource);
    updateElement(resource,propertyResource);
  }
}",0.9749582637729548
139072,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.write(record,destPath);
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.write(record);
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}",0.993805918788713
139073,"/** 
 * DOC bZhou ExportWizard constructor comment.
 */
public ExportWizard(EImexType type,String specifiedPath){
  setWindowTitle(""String_Node_Str"");
  this.exportPage=new ExportWizardPage(specifiedPath);
  this.writer=ExportWriterFactory.create(type);
}","/** 
 * DOC bZhou ExportWizard constructor comment.
 */
public ExportWizard(EImexType type,String specifiedPath){
  setWindowTitle(""String_Node_Str"");
  this.writer=ExportWriterFactory.create(type);
  this.exportPage=new ExportWizardPage(writer,specifiedPath);
}",0.7620889748549323
139074,"@Override public boolean performFinish(){
  final String destPath=exportPage.getFilePath();
  final ItemRecord[] records=exportPage.getElements();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.write(record,destPath);
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}","@Override public boolean performFinish(){
  final ItemRecord[] records=exportPage.getElements();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.write(record);
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}",0.974088713219148
139075,"public ExportWizardPage(String specifiedPath){
  super(Messages.getString(""String_Node_Str""));
  setMessage(Messages.getString(""String_Node_Str""));
  this.specifiedPath=specifiedPath;
}","public ExportWizardPage(IImexWriter writer,String specifiedPath){
  super(Messages.getString(""String_Node_Str""));
  setMessage(Messages.getString(""String_Node_Str""));
  this.writer=writer;
  this.specifiedPath=specifiedPath;
}",0.9002433090024331
139076,"public void modifyText(ModifyEvent e){
  checkForErrors();
}","public void modifyText(ModifyEvent e){
  writer.setBasePath(dirTxt.getText());
  checkForErrors();
}",0.75
139077,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      IFile sIFile=file2IFile(sfile);
      if (sIFile != null) {
        File[] dependencies=computeDependencies(sIFile);
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
      }
      checkForErrors();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkForErrors();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      IFile sIFile=file2IFile(sfile);
      if (sIFile != null) {
        File[] dependencies=computeDependencies(sIFile);
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
      }
      checkForErrors();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      writer.setBasePath(dirTxt.getText());
      checkForErrors();
    }
  }
);
}",0.9898617511520738
139078,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.write(record,null);
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.write(record);
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}",0.9959183673469388
139079,"@Override public boolean performFinish(){
  final ItemRecord[] records=importPage.getElements();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.write(record,null);
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}","@Override public boolean performFinish(){
  final ItemRecord[] records=importPage.getElements();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.write(record);
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}",0.9974476773864216
139080,"/** 
 * DOC sgandon Comment method ""dirTextModified"".
 */
protected void dirTextModified(){
  File file=new File(dirTxt.getText());
  if (file.exists()) {
    repositoryTree.setInput(file);
    repositoryTree.expandAll();
    TreeItem[] topItems=repositoryTree.getTree().getItems();
    for (    TreeItem treeItem : topItems) {
      repositoryTree.setSubtreeChecked(treeItem.getData(),true);
    }
    repositoryTree.getTree().setEnabled(true);
    repositoryTree.refresh();
  }
 else {
    repositoryTree.setInput(null);
  }
  checkforErrors();
  updatePageStatus();
}","/** 
 * DOC sgandon Comment method ""dirTextModified"".
 */
protected void dirTextModified(){
  File file=new File(dirTxt.getText());
  if (file.exists()) {
    repositoryTree.setInput(file);
    repositoryTree.expandAll();
    TreeItem[] topItems=repositoryTree.getTree().getItems();
    for (    TreeItem treeItem : topItems) {
      repositoryTree.setSubtreeChecked(treeItem.getData(),true);
    }
    repositoryTree.refresh();
    writer.setBasePath(dirTxt.getText());
  }
 else {
    repositoryTree.setInput(null);
  }
  checkforErrors();
}",0.8930817610062893
139081,"/** 
 * update the page state that is the finish button enable state according to the error message being present or not.
 */
private void updatePageStatus(){
  setPageComplete(getErrorMessage() == null);
}","/** 
 * update the page state that is the finish button enable state according to the error message being present or not.
 */
private void updatePageStatus(){
  boolean valid=getErrorMessage() == null;
  setPageComplete(valid);
  repositoryTree.getTree().setEnabled(valid);
}",0.7858627858627859
139082,"/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  if (!new File(dirTxt.getText()).exists()) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else   if (repositoryTree.getTree().getItems().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else   if (repositoryTree.getCheckedElements().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    setErrorMessage(null);
  }
}","/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
private void checkforErrors(){
  IPath dirPath=new Path(dirTxt.getText());
  if (!dirPath.toFile().exists()) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else   if (repositoryTree.getTree().getItems().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else   if (repositoryTree.getCheckedElements().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    IPath versionPath=dirPath.append(EResourceConstant.LIBRARIES.getPath()).append(""String_Node_Str"");
    if (!versionPath.toFile().exists()) {
      setErrorMessage(""String_Node_Str"");
    }
 else {
      setErrorMessage(null);
    }
  }
  updatePageStatus();
}",0.815806246016571
139083,"/** 
 * DOC bZhou Comment method ""copyFileToDest"".
 * @param source
 * @throws IOException
 */
private void copyFileToDest(IFile source) throws IOException {
  IPath desPath=new Path(destination).append(source.getFullPath());
  if (source.exists()) {
    copyFile(source.getLocation().toFile(),desPath.toFile());
  }
}","/** 
 * DOC bZhou Comment method ""copyFileToDest"".
 * @param source
 * @throws IOException
 */
private void copyFileToDest(IFile source) throws IOException {
  IPath desPath=new Path(basePath).append(source.getFullPath());
  if (source.exists()) {
    copyFile(source.getLocation().toFile(),desPath.toFile());
  }
}",0.9699842022116903
139084,"public void write(ItemRecord recored,String destination) throws IOException, CoreException {
  this.destination=destination;
  IPath itemDesPath=new Path(destination).append(recored.getFullPath());
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  File resItemFile=recored.getFile();
  File desItemFile=itemDesPath.toFile();
  copyFile(resItemFile,desItemFile);
  File resPropFile=recored.getPropertyPath().toFile();
  File desPropFile=propDesPath.toFile();
  copyFile(resPropFile,desPropFile);
}","public void write(ItemRecord recored) throws IOException, CoreException {
  IPath itemDesPath=new Path(basePath).append(recored.getFullPath());
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  File resItemFile=recored.getFile();
  File desItemFile=itemDesPath.toFile();
  copyFile(resItemFile,desItemFile);
  File resPropFile=recored.getPropertyPath().toFile();
  File desPropFile=propDesPath.toFile();
  copyFile(resPropFile,desPropFile);
}",0.8109640831758034
139085,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  if (elements.length != 0) {
    ItemRecord anyRecord=elements[0];
    String path=anyRecord.getFile().getAbsolutePath();
    String subStr=StringUtils.substringBeforeLast(path,anyRecord.getProjectName());
    String versionPath=subStr + anyRecord.getProjectName() + ""String_Node_Str"";
    versionFile=new File(versionPath);
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    checkDependency(record);
    if (checkExisted) {
      checkExisted(record);
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  if (elements.length != 0) {
    ItemRecord anyRecord=elements[0];
    retrieveProjectName(anyRecord);
  }
  versionFile=new Path(basePath).append(""String_Node_Str"").toFile();
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.6591422121896162
139086,"public void write(ItemRecord record,String destination) throws IOException, CoreException {
  IPath itemPath=PropertyHelper.getElementPath(record.getProperty());
  IPath itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath).getLocation();
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  Map<IPath,IPath> resMap=new HashMap<IPath,IPath>();
  resMap.put(record.getFilePath(),itemDesPath);
  resMap.put(record.getPropertyPath(),propDesPath);
  for (  IPath resPath : resMap.keySet()) {
    File resFile=resPath.toFile();
    File desFile=resMap.get(resPath).toFile();
    if (desFile.exists()) {
      log.warn(desFile.getAbsoluteFile() + ""String_Node_Str"");
    }
    FilesUtils.copyFile(resFile,desFile);
    String oldProjectLabel=record.getProjectName();
    String curProjectLabel=ResourceManager.getRootProjectName();
    if (!StringUtils.equals(oldProjectLabel,curProjectLabel)) {
      String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
      content=StringUtils.replace(content,""String_Node_Str"" + oldProjectLabel + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
      FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
    }
  }
}","public void write(ItemRecord record) throws IOException, CoreException {
  IPath itemPath=PropertyHelper.getElementPath(record.getProperty());
  IPath itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath).getLocation();
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  Map<IPath,IPath> resMap=new HashMap<IPath,IPath>();
  resMap.put(record.getFilePath(),itemDesPath);
  resMap.put(record.getPropertyPath(),propDesPath);
  for (  IPath resPath : resMap.keySet()) {
    File resFile=resPath.toFile();
    File desFile=resMap.get(resPath).toFile();
    if (desFile.exists()) {
      log.warn(desFile.getAbsoluteFile() + ""String_Node_Str"");
    }
    FilesUtils.copyFile(resFile,desFile);
    String curProjectLabel=ResourceManager.getRootProjectName();
    if (!StringUtils.equals(projectName,curProjectLabel)) {
      String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
      content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
      FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
    }
  }
}",0.7563636363636363
139087,"/** 
 * DOC bZhou Comment method ""getElementPath"".
 * @param property
 * @return
 */
public static IPath getElementPath(Property property){
  TDQItem item=(TDQItem)property.getItem();
  IPath proPath=getItemWorkspaceBasePath(property);
  proPath=proPath.append(item.getState().getPath());
  proPath=proPath.append(item.getFilename());
  return proPath;
}","/** 
 * DOC bZhou Comment method ""getElementPath"".
 * @param property
 * @return
 */
public static IPath getElementPath(Property property){
  TDQItem item=(TDQItem)property.getItem();
  IPath itemPath=getItemWorkspaceBasePath(property);
  String path=item.getState().getPath();
  if (path == null || StringUtils.isEmpty(path)) {
    IPath propPath=new Path(property.eResource().getURI().toFileString());
    IPath mathPath=new Path(itemPath.lastSegment());
    int matchIndex=indexOfPath(propPath,mathPath);
    IPath relativePath=propPath.uptoSegment(matchIndex + 1);
    path=propPath.makeRelativeTo(relativePath).removeLastSegments(1).toString();
  }
  itemPath=itemPath.append(path);
  itemPath=itemPath.append(item.getFilename());
  return itemPath;
}",0.5009009009009009
139088,"/** 
 * DOC bZhou Comment method ""findMigrationTaskByType"".
 * @param type
 * @return
 */
public static List<IMigrationTask> findWorkspaceTaskByType(MigrationTaskType type){
  List<IMigrationTask> wTasks=findTasksByCategory(MigrationTaskCategory.WORKSPACE);
  List<IMigrationTask> validTasks=new ArrayList<IMigrationTask>();
  for (  IMigrationTask task : wTasks) {
    IWorkspaceMigrationTask wTask=(IWorkspaceMigrationTask)task;
    if (wTask.getMigrationTaskType() == type) {
      validTasks.add(task);
    }
  }
  if (type == MigrationTaskType.DATABASE) {
    ProductVersion workspaceVersion=DataBaseVersionHelper.getVersion();
    ProductVersion currentVersion=CorePlugin.getDefault().getProductVersion();
    return findValidTasks(workspaceVersion,currentVersion,validTasks);
  }
  return validTasks;
}","/** 
 * DOC bZhou Comment method ""findMigrationTaskByType"".
 * @param type
 * @return
 */
public static List<IMigrationTask> findWorkspaceTaskByType(MigrationTaskType type,ProductVersion specifiedVersion){
  List<IMigrationTask> wTasks=findTasksByCategory(MigrationTaskCategory.WORKSPACE);
  List<IMigrationTask> validTasks=new ArrayList<IMigrationTask>();
  for (  IMigrationTask task : wTasks) {
    IWorkspaceMigrationTask wTask=(IWorkspaceMigrationTask)task;
    if (wTask.getMigrationTaskType() == type) {
      validTasks.add(task);
    }
  }
  if (specifiedVersion != null) {
    ProductVersion currentVersion=CorePlugin.getDefault().getProductVersion();
    return findValidTasks(specifiedVersion,currentVersion,validTasks);
  }
  return validTasks;
}",0.8864795918367347
139089,"/** 
 * DOC bZhou Get version file by IFile.
 * @param versionFile
 * @return
 */
public static ProductVersion getVesion(IFile versionFile){
  try {
    versionFile.refreshLocal(IResource.DEPTH_ONE,new NullProgressMonitor());
    if (versionFile.exists()) {
      Properties pros=new Properties();
      pros.load(versionFile.getContents());
      String version=pros.getProperty(VERSION);
      if (version != null && !""String_Node_Str"".equals(version)) {
        return ProductVersion.fromString(version);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return new ProductVersion(0,0,0);
}","/** 
 * DOC bZhou Comment method ""getVesion"".
 * @param versionFile
 * @return
 */
public static ProductVersion getVesion(File versionFile){
  try {
    if (versionFile.exists()) {
      Properties pros=new Properties();
      pros.load(new FileInputStream(versionFile));
      String version=pros.getProperty(VERSION);
      if (version != null && !""String_Node_Str"".equals(version)) {
        return ProductVersion.fromString(version);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return new ProductVersion(0,0,0);
}",0.6499133448873483
139090,"public IndicatorThresholdsForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style,parameters);
  Indicator currentIndicator=(Indicator)parameters.eContainer();
  IndicatorEnum currentIndicatorType=IndicatorEnum.findIndicatorEnum(currentIndicator.eClass());
  ModelElement analyzedElement=currentIndicator.getAnalyzedElement();
  if (null != analyzedElement) {
    if (SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(analyzedElement) != null) {
      isRangeForDate=false;
      isDatetime=false;
    }
 else {
      int sqltype=((TdColumn)analyzedElement).getJavaType();
      isRangeForDate=Java2SqlType.isDateInSQL(sqltype) && currentIndicatorType.isAChildOf(IndicatorEnum.RangeIndicatorEnum);
      if (isRangeForDate) {
        isDatetime=Java2SqlType.isDateTimeSQL(sqltype);
      }
    }
  }
  isOptionForRowCount=currentIndicatorType == IndicatorEnum.RowCountIndicatorEnum;
  setupForm();
}","public IndicatorThresholdsForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style,parameters);
  Indicator currentIndicator=(Indicator)parameters.eContainer();
  IndicatorEnum currentIndicatorType=IndicatorEnum.findIndicatorEnum(currentIndicator.eClass());
  ModelElement analyzedElement=currentIndicator.getAnalyzedElement();
  if (null != analyzedElement) {
    if (SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(analyzedElement) != null) {
      isRangeForDate=false;
      isDatetime=false;
    }
 else     if (SwitchHelpers.XMLELEMENT_SWITCH.doSwitch(analyzedElement) != null) {
      isRangeForDate=false;
      isDatetime=false;
    }
 else {
      int sqltype=((TdColumn)analyzedElement).getJavaType();
      isRangeForDate=Java2SqlType.isDateInSQL(sqltype) && currentIndicatorType.isAChildOf(IndicatorEnum.RangeIndicatorEnum);
      if (isRangeForDate) {
        isDatetime=Java2SqlType.isDateTimeSQL(sqltype);
      }
    }
  }
  isOptionForRowCount=currentIndicatorType == IndicatorEnum.RowCountIndicatorEnum;
  setupForm();
}",0.929252383341696
139091,"/** 
 * Method ""indexOf"".
 * @return true if ok
 */
public int indexOf(String str){
  IFolder librariesFolder=ResourceManager.getLibrariesFolder();
  IFile definitionFile=librariesFolder.getFile(TALENDDEFINITIONFILENAME);
  if (definitionFile.exists()) {
    File file=new File(definitionFile.getLocationURI());
    try {
      String content=FileUtils.readFileToString(file,EMFUtil.ENCODING);
      return content.indexOf(str);
    }
 catch (    IOException e) {
      log.error(e.getMessage(),e);
      return -1;
    }
  }
  return -1;
}","/** 
 * Method ""indexOf"".
 * @return the index of the first occurrence of the character in the character sequence represented by this object,or <code>-1</code> if the character does not occur.
 */
public int indexOf(String str){
  IFolder librariesFolder=ResourceManager.getLibrariesFolder();
  IFile definitionFile=librariesFolder.getFile(TALENDDEFINITIONFILENAME);
  if (definitionFile.exists()) {
    File file=new File(definitionFile.getLocationURI());
    try {
      String content=FileUtils.readFileToString(file,EMFUtil.ENCODING);
      return content.indexOf(str);
    }
 catch (    IOException e) {
      log.error(e.getMessage(),e);
      return -1;
    }
  }
  return -1;
}",0.866938775510204
139092,"private void processRowButtonSelect(boolean selection,List<Button> rowButtons){
  for (  Button btn : rowButtons) {
    ModelElementIndicator columnIndicator=(ModelElementIndicator)btn.getData(MODELELEMENTINDICATORFLAG);
    IIndicatorNode node=(IIndicatorNode)btn.getData();
    IndicatorEnum indicEnum=node.getIndicatorEnum();
    if (selection && ModelElementIndicatorRule.match(node,columnIndicator,language)) {
      btn.setSelection(true);
      if (indicEnum != null) {
        columnIndicator.addTempIndicatorEnum(node.getIndicatorEnum());
      }
    }
 else {
      btn.setSelection(false);
      columnIndicator.removeTempIndicatorEnum(node.getIndicatorEnum());
    }
  }
}","private void processRowButtonSelect(boolean selection,List<Button> rowButtons){
  for (  Button btn : rowButtons) {
    if (btn.isEnabled()) {
      ModelElementIndicator columnIndicator=(ModelElementIndicator)btn.getData(MODELELEMENTINDICATORFLAG);
      IIndicatorNode node=(IIndicatorNode)btn.getData();
      IndicatorEnum indicEnum=node.getIndicatorEnum();
      if (selection && ModelElementIndicatorRule.match(node,columnIndicator,language)) {
        btn.setSelection(true);
        if (indicEnum != null) {
          columnIndicator.addTempIndicatorEnum(node.getIndicatorEnum());
        }
      }
 else {
        btn.setSelection(false);
        columnIndicator.removeTempIndicatorEnum(node.getIndicatorEnum());
      }
    }
  }
}",0.96
139093,"/** 
 * DOC zshen Comment method ""moveElement"".
 * @param columnsElementViewer
 * @param isDown move the element of the columnList to up or down.
 */
private void moveElement(AnalysisColumnSetTreeViewer columnsElementViewer,boolean isDown){
  Tree currentTree=columnsElementViewer.getTree();
  Object[] selectItem=currentTree.getSelection();
  List<Column> columnList=columnsElementViewer.getColumnSetMultiValueList();
  int index=0;
  boolean moveFlag=false;
  List<Integer> indexArray=new ArrayList<Integer>();
  if (isDown) {
    for (int i=selectItem.length - 1; i >= 0; i--) {
      index=currentTree.indexOf((TreeItem)selectItem[i]);
      if ((index + 1) >= columnList.size()) {
        return;
      }
 else {
        Column moveElement=(Column)((TreeItem)selectItem[i]).getData(AnalysisColumnNominalIntervalTreeViewer.COLUMN_INDICATOR_KEY);
        columnList.remove(moveElement);
        columnList.add((index + 1),moveElement);
        indexArray.add(index + 1);
      }
    }
  }
 else {
    for (int i=0; i < selectItem.length; i++) {
      index=currentTree.indexOf((TreeItem)selectItem[i]);
      if ((index - 1) < 0) {
        return;
      }
 else {
        Column moveElement=(Column)((TreeItem)selectItem[i]).getData(AnalysisColumnNominalIntervalTreeViewer.COLUMN_INDICATOR_KEY);
        columnList.remove(moveElement);
        columnList.add((index - 1),moveElement);
        indexArray.add(index - 1);
      }
    }
  }
  columnsElementViewer.setInput(convertList(columnList).toArray());
  currentTree=columnsElementViewer.getTree();
  for (int i=0; i < indexArray.size(); i++) {
    currentTree.select(currentTree.getItem(indexArray.get(i)));
  }
}","/** 
 * DOC zshen Comment method ""moveElement"".
 * @param columnsElementViewer
 * @param step move the element of the columnList to up or down.
 */
private void moveElement(AnalysisColumnSetTreeViewer columnsElementViewer,int step){
  Tree currentTree=columnsElementViewer.getTree();
  Object[] selectItem=currentTree.getSelection();
  List<Column> columnList=columnsElementViewer.getColumnSetMultiValueList();
  int index=0;
  List<Integer> indexArray=new ArrayList<Integer>();
  for (int i=0; i < selectItem.length; i++) {
    index=currentTree.indexOf((TreeItem)selectItem[i]);
    if (index + step > -1 && index + step < columnList.size()) {
      Column moveElement=(Column)((TreeItem)selectItem[i]).getData(AnalysisColumnNominalIntervalTreeViewer.COLUMN_INDICATOR_KEY);
      columnList.remove(moveElement);
      columnList.add((index + step),moveElement);
      indexArray.add(index + step);
    }
 else {
      return;
    }
  }
  columnsElementViewer.setInput(columnList.toArray());
  currentTree=columnsElementViewer.getTree();
  for (int i=0; i < indexArray.size(); i++) {
    currentTree.select(currentTree.getItem(indexArray.get(i)));
  }
}",0.6246458923512748
139094,"public void setInput(Object[] objs){
  if (objs != null && objs.length != 0) {
    if (!(objs[0] instanceof TdColumn)) {
      return;
    }
  }
  List<Column> columnList=new ArrayList<Column>();
  for (  Object obj : objs) {
    columnList.add((TdColumn)obj);
  }
  this.setElements(columnList);
}","public void setInput(Object[] objs){
  if (objs != null && objs.length != 0) {
    if (!(objs[0] instanceof TdColumn)) {
      return;
    }
  }
  List<Column> columnList=new ArrayList<Column>();
  for (  Object obj : objs) {
    columnList.add((TdColumn)obj);
  }
  Collections.reverse(columnList);
  this.setElements(columnList);
}",0.9445324881141046
139095,"/** 
 * DOC zshen Comment method ""createButtonSection"".
 * @param topComp create the button with delButton,moveUpButton,moveDownButton
 */
private void createButtonSection(Composite topComp){
  Composite buttonsComp=masterPage.getEditor().getToolkit().createComposite(topComp,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData();
  buttonGridData.heightHint=25;
  buttonGridData.horizontalAlignment=GridData.CENTER;
  buttonGridData.verticalAlignment=GridData.FILL;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.grabExcessVerticalSpace=true;
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  buttons=new Button[]{delButton,moveUpButton,moveDownButton};
  enabledButtons(false);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(masterPage.getTreeViewer(),false);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(masterPage.getTreeViewer(),true);
    }
  }
);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Tree currentTree=tree;
      Object[] selectItem=currentTree.getSelection();
      List<Column> columnList=masterPage.getTreeViewer().getColumnSetMultiValueList();
      for (int i=0; i < selectItem.length; i++) {
        Object removeElement=((TreeItem)selectItem[i]).getData(AnalysisColumnNominalIntervalTreeViewer.COLUMN_INDICATOR_KEY);
        columnList.remove(removeElement);
      }
      masterPage.getTreeViewer().setInput(convertList(columnList).toArray());
      enabledButtons(false);
    }
  }
);
}","/** 
 * DOC zshen Comment method ""createButtonSection"".
 * @param topComp create the button with delButton,moveUpButton,moveDownButton
 */
private void createButtonSection(Composite topComp){
  Composite buttonsComp=masterPage.getEditor().getToolkit().createComposite(topComp,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData();
  buttonGridData.heightHint=25;
  buttonGridData.horizontalAlignment=GridData.CENTER;
  buttonGridData.verticalAlignment=GridData.FILL;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.grabExcessVerticalSpace=true;
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  buttons=new Button[]{delButton,moveUpButton,moveDownButton};
  enabledButtons(false);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(masterPage.getTreeViewer(),-1);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(masterPage.getTreeViewer(),1);
    }
  }
);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Tree currentTree=tree;
      Object[] selectItem=currentTree.getSelection();
      List<Column> columnList=masterPage.getTreeViewer().getColumnSetMultiValueList();
      for (int i=0; i < selectItem.length; i++) {
        Object removeElement=((TreeItem)selectItem[i]).getData(AnalysisColumnNominalIntervalTreeViewer.COLUMN_INDICATOR_KEY);
        columnList.remove(removeElement);
      }
      masterPage.getTreeViewer().setInput(convertList(columnList).toArray());
      enabledButtons(false);
    }
  }
);
}",0.9973799126637556
139096,"public boolean execute(){
  String oriQuery=""String_Node_Str"";
  String accessQuery=""String_Node_Str"";
  TalendDefinitionFileUpdate talendDefinitionFileUpdate=new TalendDefinitionFileUpdate();
  if (-1 == talendDefinitionFileUpdate.indexOf(accessQuery)) {
    talendDefinitionFileUpdate.add(oriQuery,oriQuery + System.getProperty(""String_Node_Str"") + accessQuery);
    return talendDefinitionFileUpdate.replace(this.getClass().getName());
  }
  return true;
}","public boolean execute(){
  String categorie=""String_Node_Str"";
  String accessQuery=""String_Node_Str"";
  TalendDefinitionFileUpdate talendDefinitionFileUpdate=new TalendDefinitionFileUpdate();
  if (-1 == talendDefinitionFileUpdate.indexOf(accessQuery)) {
    talendDefinitionFileUpdate.add(categorie,categorie + System.getProperty(""String_Node_Str"") + accessQuery);
    return talendDefinitionFileUpdate.replace(this.getClass().getName());
  }
  return true;
}",0.6080347448425625
139097,"private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  for (int i=0; i < branchNodes.length; i++) {
    final TreeItemContainer treeItem;
    if (parentItem == null) {
      treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
    }
 else {
      treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
    }
    TreeEditor editor;
    Button checkButton;
    Button rowCheckButton=null;
    Button commonCheckButton;
    List<Button> rowButtonList=new ArrayList<Button>();
    IIndicatorNode indicatorNode=branchNodes[i];
    for (int j=0; j < treeColumns.length; j++) {
      IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
      if (j == 0) {
        treeItem.setText(0,indicatorNode.getLabel());
        if (indicatorEnum != null) {
          treeItem.setData(INDICATORITEM,indicatorNode);
        }
        continue;
      }
 else       if (j == 1 && treeColumns.length > 2) {
        editor=new TreeEditor(tree);
        rowCheckButton=new Button(tree,SWT.CHECK);
        rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
        Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
        treeItem.setBackground(j,systemColor);
        rowCheckButton.setBackground(systemColor);
        commonCheckButton=rowCheckButton;
      }
 else {
        editor=new TreeEditor(tree);
        checkButton=new Button(tree,SWT.CHECK);
        checkButton.setData(indicatorNode);
        if (((ModelElementIndicator)treeColumns[j].getData()).contains(indicatorEnum)) {
          checkButton.setSelection(true);
        }
        final ModelElementIndicator currentIndicator=(ModelElementIndicator)treeColumns[j].getData();
        checkButton.setEnabled(ModelElementIndicatorRule.match(indicatorNode,currentIndicator,this.language));
        if (null != indicatorNode.getIndicatorInstance() && dbms.getSqlExpression(indicatorNode.getIndicatorInstance().getIndicatorDefinition()) == null) {
          checkButton.setEnabled(false);
        }
        checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,currentIndicator));
        if (indicatorEnum != null) {
          checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),currentIndicator.getElementName()));
        }
        checkButton.setData(MODELELEMENTINDICATORFLAG,currentIndicator);
        commonCheckButton=checkButton;
        rowButtonList.add(checkButton);
      }
      commonCheckButton.pack();
      editor.minimumWidth=commonCheckButton.getSize().x;
      editor.horizontalAlignment=SWT.CENTER;
      editor.setEditor(commonCheckButton,treeItem,j);
      treeItem.setButton(j,commonCheckButton);
    }
    if (rowCheckButton != null) {
      boolean allChecked=true;
      rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
      for (      Button btn : rowButtonList) {
        if (!btn.getSelection()) {
          allChecked=false;
        }
      }
      rowCheckButton.setSelection(allChecked);
    }
    if (indicatorNode.hasChildren()) {
      createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
    }
    treeItem.setExpanded(true);
  }
}","private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  for (int i=0; i < branchNodes.length; i++) {
    IIndicatorNode indicatorNode=branchNodes[i];
    if (!indicatorNode.getLabel().equals(""String_Node_Str"")) {
      final TreeItemContainer treeItem;
      if (parentItem == null) {
        treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
      }
 else {
        treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
      }
      TreeEditor editor;
      Button checkButton;
      Button rowCheckButton=null;
      Button commonCheckButton;
      List<Button> rowButtonList=new ArrayList<Button>();
      for (int j=0; j < treeColumns.length; j++) {
        IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
        if (j == 0) {
          treeItem.setText(0,indicatorNode.getLabel());
          if (indicatorEnum != null) {
            treeItem.setData(INDICATORITEM,indicatorNode);
          }
          continue;
        }
 else         if (j == 1 && treeColumns.length > 2) {
          editor=new TreeEditor(tree);
          rowCheckButton=new Button(tree,SWT.CHECK);
          rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
          Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
          treeItem.setBackground(j,systemColor);
          rowCheckButton.setBackground(systemColor);
          commonCheckButton=rowCheckButton;
        }
 else {
          editor=new TreeEditor(tree);
          checkButton=new Button(tree,SWT.CHECK);
          checkButton.setData(indicatorNode);
          if (((ModelElementIndicator)treeColumns[j].getData()).contains(indicatorEnum)) {
            checkButton.setSelection(true);
          }
          final ModelElementIndicator currentIndicator=(ModelElementIndicator)treeColumns[j].getData();
          checkButton.setEnabled(ModelElementIndicatorRule.match(indicatorNode,currentIndicator,this.language));
          if (null != indicatorNode.getIndicatorInstance() && null != indicatorNode.getIndicatorInstance().getIndicatorDefinition() && dbms.getSqlExpression(indicatorNode.getIndicatorInstance().getIndicatorDefinition()) == null) {
            checkButton.setEnabled(false);
          }
          checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,currentIndicator));
          if (indicatorEnum != null) {
            checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),currentIndicator.getElementName()));
          }
          checkButton.setData(MODELELEMENTINDICATORFLAG,currentIndicator);
          commonCheckButton=checkButton;
          rowButtonList.add(checkButton);
        }
        commonCheckButton.pack();
        editor.minimumWidth=commonCheckButton.getSize().x;
        editor.horizontalAlignment=SWT.CENTER;
        editor.setEditor(commonCheckButton,treeItem,j);
        treeItem.setButton(j,commonCheckButton);
      }
      if (rowCheckButton != null) {
        boolean allChecked=true;
        rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
        for (        Button btn : rowButtonList) {
          if (!btn.getSelection()) {
            allChecked=false;
          }
        }
        rowCheckButton.setSelection(allChecked);
      }
      if (indicatorNode.hasChildren()) {
        createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
      }
      treeItem.setExpanded(true);
    }
  }
}",0.9426658905704308
139098,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
          colName=dbms().getPatternFinderFunction(colName,charactersMapping);
          if (colName == null) {
            colName=dbms().getPatternFinderDefaultFunction(colName);
          }
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
          colName=dbms().getPatternFinderFunction(colName,charactersMapping);
          if (colName == null) {
            colName=dbms().getPatternFinderDefaultFunction(colName);
          }
          if (colName == null) {
            return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
          }
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9916348944403346
139099,"private TableViewer createSectionPart(Composite parentComp,final List<Column> columnList,String title,String hyperlinkText){
  Section columnSetElementSection=masterPage.createSection(form,parentComp,title,null);
  Composite sectionComp=toolkit.createComposite(columnSetElementSection);
  sectionComp.setLayout(new GridLayout());
  Hyperlink selectColumnBtn=toolkit.createHyperlink(sectionComp,hyperlinkText,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(selectColumnBtn);
  Composite columsComp=toolkit.createComposite(sectionComp,SWT.NULL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).grab(true,true).applyTo(columsComp);
  columsComp.setLayout(new GridLayout());
  final TableViewer columnsElementViewer=createTreeViewer(columnList,columsComp);
  tableViewerPosStack.add(columnsElementViewer);
  TableViewerDNDDecorate dndDecorate=new TableViewerDNDDecorate(allowColumnDupcation);
  dndDecorate.installDND(columnsElementViewer,true,TableViewerDNDDecorate.COLUMN_VALIDATETYPE);
  Composite buttonsComp=toolkit.createComposite(columsComp,SWT.NULL);
  buttonsComp.setLayout(new GridLayout(4,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  GridData buttonGridData=new GridData(GridData.FILL_BOTH);
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  Button sortButton=new Button(buttonsComp,SWT.NULL);
  sortButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sortButton.setLayoutData(buttonGridData);
  final Button[] buttons=new Button[]{delButton,moveUpButton,moveDownButton};
  columnsElementViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      enabledButtons(buttons,event.getSelection() != null);
    }
  }
);
  createTableViewerMenu(columnsElementViewer,columnList,buttons);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      columnList.removeAll(((IStructuredSelection)columnsElementViewer.getSelection()).toList());
      columnsElementViewer.setInput(columnList);
      enabledButtons(buttons,false);
      masterPage.setDirty(true);
    }
  }
);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,false);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,true);
    }
  }
);
  sortButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      sortElement(columnList,columnsElementViewer);
    }
  }
);
  this.enabledButtons(new Button[]{delButton,moveUpButton,moveDownButton},false);
  final List<Column> columnsOfSectionPart=columnList;
  selectColumnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog(columnsElementViewer,columnsOfSectionPart);
      enabledButtons(buttons,false);
    }
  }
);
  columnSetElementSection.setClient(sectionComp);
  return columnsElementViewer;
}","private TableViewer createSectionPart(Composite parentComp,final List<Column> columnList,String title,String hyperlinkText){
  Section columnSetElementSection=masterPage.createSection(form,parentComp,title,null);
  Composite sectionComp=toolkit.createComposite(columnSetElementSection);
  sectionComp.setLayout(new GridLayout());
  Hyperlink selectColumnBtn=toolkit.createHyperlink(sectionComp,hyperlinkText,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(selectColumnBtn);
  Composite columsComp=toolkit.createComposite(sectionComp,SWT.NULL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).grab(true,true).applyTo(columsComp);
  columsComp.setLayout(new GridLayout());
  final TableViewer columnsElementViewer=createTreeViewer(columnList,columsComp);
  tableViewerPosStack.add(columnsElementViewer);
  ComparisonTableViewerDNDDecorate dndDecorate=new ComparisonTableViewerDNDDecorate(this,masterPage,tableViewerPosStack,allowColumnDupcation);
  dndDecorate.installDND(columnsElementViewer,true,ComparisonTableViewerDNDDecorate.COLUMN_VALIDATETYPE);
  Composite buttonsComp=toolkit.createComposite(columsComp,SWT.NULL);
  buttonsComp.setLayout(new GridLayout(4,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  GridData buttonGridData=new GridData(GridData.FILL_BOTH);
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  Button sortButton=new Button(buttonsComp,SWT.NULL);
  sortButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sortButton.setLayoutData(buttonGridData);
  final Button[] buttons=new Button[]{delButton,moveUpButton,moveDownButton};
  columnsElementViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      enabledButtons(buttons,event.getSelection() != null);
    }
  }
);
  createTableViewerMenu(columnsElementViewer,columnList,buttons);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      columnList.removeAll(((IStructuredSelection)columnsElementViewer.getSelection()).toList());
      columnsElementViewer.setInput(columnList);
      enabledButtons(buttons,false);
      masterPage.setDirty(true);
    }
  }
);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,false);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,true);
    }
  }
);
  sortButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      sortElement(columnList,columnsElementViewer);
    }
  }
);
  this.enabledButtons(new Button[]{delButton,moveUpButton,moveDownButton},false);
  final List<Column> columnsOfSectionPart=columnList;
  selectColumnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog(columnsElementViewer,columnsOfSectionPart);
      enabledButtons(buttons,false);
    }
  }
);
  columnSetElementSection.setClient(sectionComp);
  return columnsElementViewer;
}",0.9911882510013352
139100,"public void addElements(final List<Column> columns,int index){
  this.addItemElements(columns,index);
}","public void addElements(final List<Column> columns,int index){
  this.addItemElements(columns,index);
  updateBindConnection(masterPage,tree);
}",0.8340080971659919
139101,"private void addItemElements(final ModelElementIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    final ModelElementIndicator meIndicator=(ModelElementIndicator)elements[i];
    treeItem.setText(0,getModelElemetnDisplayName(meIndicator));
    treeItem.setData(MODELELEMENT_INDICATOR_KEY,meIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(meIndicator.getModelElement());
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),meIndicator.getModelElement());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Label addPatternLabl=new Label(tree,SWT.NONE);
    addPatternLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addPatternLabl.setImage(ImageLib.getImage(ImageLib.ADD_PATTERN));
    addPatternLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternLabl.pack();
    addPatternLabl.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DataManager dm=getAnalysis().getContext().getConnection();
        if (dm == null) {
          masterPage.doSave(null);
        }
        if (dm != null && dm instanceof TdDataProvider) {
          TdDataProvider dp=(TdDataProvider)dm;
          if (ConnectionUtils.isMdmConnection(DataProviderHelper.getTdProviderConnection(dp).getObject())) {
            MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
            return;
          }
        }
        IFolder libProject=ResourceManager.getLibrariesFolder();
        CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(libProject);
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,meIndicator,getAnalysis());
              if (addIndicatorUnit != null) {
                createOneUnit(treeItem,addIndicatorUnit);
                setDirty(true);
              }
 else {
                Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
                MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"") + pattern.getName());
              }
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=addPatternLabl.getImage().getBounds().width;
    addPatternEditor.setEditor(addPatternLabl,treeItem,2);
    TreeEditor addUdiEditor=addColumnUdi(treeItem,meIndicator,3);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteModelElementItems(meIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(modelElementIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,4);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor,addUdiEditor});
    if (meIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,meIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","private void addItemElements(final ModelElementIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    treeItem.setImage(getColumnElementImage(elements[i]));
    final ModelElementIndicator meIndicator=(ModelElementIndicator)elements[i];
    treeItem.setText(0,getModelElemetnDisplayName(meIndicator));
    treeItem.setData(MODELELEMENT_INDICATOR_KEY,meIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(meIndicator.getModelElement());
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),meIndicator.getModelElement());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Label addPatternLabl=new Label(tree,SWT.NONE);
    addPatternLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addPatternLabl.setImage(ImageLib.getImage(ImageLib.ADD_PATTERN));
    addPatternLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternLabl.pack();
    addPatternLabl.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DataManager dm=getAnalysis().getContext().getConnection();
        if (dm == null) {
          masterPage.doSave(null);
        }
        if (dm != null && dm instanceof TdDataProvider) {
          TdDataProvider dp=(TdDataProvider)dm;
          if (ConnectionUtils.isMdmConnection(DataProviderHelper.getTdProviderConnection(dp).getObject())) {
            MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
            return;
          }
        }
        IFolder libProject=ResourceManager.getLibrariesFolder();
        CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(libProject);
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,meIndicator,getAnalysis());
              if (addIndicatorUnit != null) {
                createOneUnit(treeItem,addIndicatorUnit);
                setDirty(true);
              }
 else {
                Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
                MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"") + pattern.getName());
              }
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=addPatternLabl.getImage().getBounds().width;
    addPatternEditor.setEditor(addPatternLabl,treeItem,2);
    TreeEditor addUdiEditor=addColumnUdi(treeItem,meIndicator,3);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteModelElementItems(meIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(modelElementIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,4);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor,addUdiEditor});
    if (meIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,meIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}",0.9925975030383384
139102,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.initPath(record,destPath);
        writer.write();
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.write(record,destPath);
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}",0.9603760913364674
139103,"@Override public boolean performFinish(){
  File[] files=exportPage.getElements();
  final String destPath=exportPage.getFilePath();
  final ItemRecord[] records=new ItemRecord[files.length];
  for (int i=0; i < files.length; i++) {
    records[i]=new ItemRecord(files[i]);
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.initPath(record,destPath);
            writer.write();
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}","@Override public boolean performFinish(){
  final String destPath=exportPage.getFilePath();
  final ItemRecord[] records=exportPage.getElements();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.write(record,destPath);
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}",0.8678943154523618
139104,"/** 
 * DOC bZhou Comment method ""computInput"".
 * @return
 */
private Object computInput(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  return specifiedPath == null ? workspace.getRoot().getLocation().toFile() : workspace.getRoot().getFolder(new Path(specifiedPath)).getLocation().toFile();
}","/** 
 * DOC bZhou Comment method ""computInput"".
 * @return
 */
private Object computInput(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  return specifiedPath == null ? ResourceManager.getRootProject().getLocation().toFile() : workspace.getRoot().getFolder(new Path(specifiedPath)).getLocation().toFile();
}",0.7232
139105,"/** 
 * DOC bZhou Comment method ""computeDependencies"".
 * @param elements
 * @return
 */
protected File[] computeDependencies(IFile... elements){
  List<ModelElement> dependencyElements=new ArrayList<ModelElement>();
  List<File> dependencyFiles=new ArrayList<File>();
  ModelElement[] modelElements=ModelElementFileFactory.getModelElements(elements);
  for (  ModelElement melement : modelElements) {
    ModelElementHelper.iterateClientDependencies(melement,dependencyElements);
  }
  for (  ModelElement element : dependencyElements) {
    ResourceFileMap fileMap=ModelElementFileFactory.getResourceFileMap(element);
    IFile file=fileMap.findCorrespondingFile(element);
    if (file != null && file.exists()) {
      dependencyFiles.add(file.getLocation().toFile());
    }
  }
  return dependencyFiles.toArray(new File[dependencyFiles.size()]);
}","/** 
 * DOC bZhou Comment method ""computeDependencies"".
 * @param elements
 * @return
 */
protected File[] computeDependencies(IFile... elements){
  List<ModelElement> dependencyElements=new ArrayList<ModelElement>();
  List<File> dependencyFiles=new ArrayList<File>();
  ModelElement[] modelElements=ModelElementFileFactory.getModelElements(elements);
  for (  ModelElement melement : modelElements) {
    ModelElementHelper.iterateClientDependencies(melement,dependencyElements);
  }
  for (  ModelElement element : dependencyElements) {
    ResourceFileMap fileMap=ModelElementFileFactory.getResourceFileMap(element);
    if (fileMap != null) {
      IFile file=fileMap.findCorrespondingFile(element);
      if (file != null && file.exists()) {
        dependencyFiles.add(file.getLocation().toFile());
      }
    }
  }
  return dependencyFiles.toArray(new File[dependencyFiles.size()]);
}",0.904297994269341
139106,"/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public File[] getElements(){
  Object[] checkedElements=repositoryTree.getCheckedElements();
  List<File> files=new ArrayList<File>();
  if (checkedElements != null) {
    for (    Object obj : checkedElements) {
      if (obj instanceof File) {
        File file=(File)obj;
        if (file.isFile()) {
          files.add(file);
        }
      }
    }
  }
  return files.toArray(new File[files.size()]);
}","/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public ItemRecord[] getElements(){
  List<ItemRecord> itemRecords=new ArrayList<ItemRecord>();
  Object[] checkedElements=repositoryTree.getCheckedElements();
  for (  Object obj : checkedElements) {
    if (obj instanceof File) {
      File file=(File)obj;
      if (file.isFile()) {
        itemRecords.add(new ItemRecord(file));
      }
    }
  }
  return itemRecords.toArray(new ItemRecord[itemRecords.size()]);
}",0.519453207150368
139107,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.initPath(record,null);
        writer.write();
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.write(record,null);
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}",0.9705648369132855
139108,"@Override public boolean performFinish(){
  File[] files=importPage.getElements();
  final ItemRecord[] records=new ItemRecord[files.length];
  for (int i=0; i < files.length; i++) {
    records[i]=new ItemRecord(files[i]);
  }
  ItemRecord[] invalidRecords=writer.populate(records);
  importPage.updateErrorList(invalidRecords);
  if (invalidRecords.length > 0) {
    importPage.removeInvalidRecords();
    return false;
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.initPath(record,null);
            writer.write();
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}","@Override public boolean performFinish(){
  final ItemRecord[] records=importPage.getElements();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.write(record,null);
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}",0.8218588640275387
139109,"/** 
 * DOC bZhou Comment method ""updateErrorList"".
 * @param records
 */
public void updateErrorList(ItemRecord[] records){
  errors.clear();
  invalidRecords=records;
  for (  ItemRecord record : records) {
    errors.addAll(record.getErrors());
  }
  errorsList.setInput(errors);
  errorsList.refresh();
}","/** 
 * DOC bZhou Comment method ""updateErrorList"".
 * @param records
 */
public void updateErrorList(ItemRecord[] records){
  errors.clear();
  for (  ItemRecord record : records) {
    errors.addAll(record.getErrors());
  }
  errorsList.setInput(errors);
  errorsList.refresh();
}",0.9559322033898304
139110,"/** 
 * DOC bZhou Comment method ""createErrorsList"".
 * @param top
 */
private void createErrorsList(Composite top){
  Group errorGroup=new Group(top,SWT.NONE);
  errorGroup.setLayout(new GridLayout());
  errorGroup.setText(Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=150;
  errorGroup.setLayoutData(gridData);
  errorsList=new TableViewer(errorGroup,SWT.BORDER);
  errorsList.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
  errorsList.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      return errors.toArray();
    }
  }
);
  errorsList.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      return element.toString();
    }
    @Override public Image getImage(    Object element){
      return ImageLib.getImage(ImageLib.ICON_ERROR_INFO);
    }
  }
);
  errorsList.setInput(this);
  errorsList.setSorter(new ViewerSorter());
}","/** 
 * DOC bZhou Comment method ""createErrorsList"".
 * @param top
 */
private void createErrorsList(Composite top){
  Group errorGroup=new Group(top,SWT.NONE);
  errorGroup.setLayout(new GridLayout());
  errorGroup.setText(Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=100;
  errorGroup.setLayoutData(gridData);
  errorsList=new TableViewer(errorGroup,SWT.BORDER);
  errorsList.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
  errorsList.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      return errors.toArray();
    }
  }
);
  errorsList.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      return element.toString();
    }
    @Override public Image getImage(    Object element){
      return ImageLib.getImage(ImageLib.ICON_ERROR_INFO);
    }
  }
);
  errorsList.setInput(this);
  errorsList.setSorter(new ViewerSorter());
}",0.9991394148020654
139111,"/** 
 * DOC sgandon Comment method ""removeInvalidRecords"".
 */
public void removeInvalidRecords(){
  if (invalidRecords != null) {
    for (    ItemRecord record : invalidRecords) {
      File file=record.getFile();
      repositoryTree.setChecked(file,false);
    }
    repositoryTree.refresh();
  }
}","/** 
 * DOC bZhou Comment method ""removeInvalidRecords"".
 * @param invalidRecords
 */
public void removeInvalidRecords(ItemRecord[] invalidRecords){
  if (invalidRecords != null) {
    for (    ItemRecord record : invalidRecords) {
      File file=record.getFile();
      repositoryTree.setChecked(file,false);
    }
    repositoryTree.refresh();
  }
}",0.9021406727828746
139112,"public void createControl(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  top.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSelectComposite(top);
  createRepositoryTree(top);
  createErrorsList(top);
  initControlState();
  addListeners();
  setControl(top);
}","public void createControl(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  top.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSelectComposite(top);
  createRepositoryTree(top);
  createErrorsList(top);
  createOptionComposite(top);
  initControlState();
  addListeners();
  setControl(top);
}",0.956140350877193
139113,"public ImportWizardPage(IImexWriter writer){
  super(Messages.getString(""String_Node_Str""));
  setMessage(Messages.getString(""String_Node_Str""));
}","public ImportWizardPage(IImexWriter writer){
  super(Messages.getString(""String_Node_Str""));
  setMessage(Messages.getString(""String_Node_Str""));
  this.writer=writer;
}",0.930379746835443
139114,"@Override public void widgetSelected(SelectionEvent e){
  String result=openFileDialog();
  if (result != null) {
    archTxt.setText(result);
  }
}","@Override public void widgetSelected(SelectionEvent e){
  dirTxt.setText(dirTxt.getText());
  populateElement();
}",0.6183206106870229
139115,"/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public File[] getElements(){
  Object[] checkedElements=repositoryTree.getCheckedElements();
  List<File> files=new ArrayList<File>();
  if (checkedElements != null) {
    for (    Object obj : checkedElements) {
      if (obj instanceof File) {
        File file=(File)obj;
        if (file.isFile()) {
          files.add(file);
        }
      }
    }
  }
  return files.toArray(new File[files.size()]);
}","/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public ItemRecord[] getElements(){
  List<ItemRecord> itemRecords=new ArrayList<ItemRecord>();
  Object[] checkedElements=repositoryTree.getCheckedElements();
  for (  Object obj : checkedElements) {
    if (obj instanceof File) {
      File file=(File)obj;
      if (file.isFile()) {
        itemRecords.add(new ItemRecord(file));
      }
    }
  }
  return itemRecords.toArray(new ItemRecord[itemRecords.size()]);
}",0.519453207150368
139116,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dirTextModified();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
        populateElement();
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  overwriteBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      dirTxt.setText(dirTxt.getText());
      populateElement();
    }
  }
);
  dirTxt.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dirTextModified();
    }
  }
);
}",0.9337575932889788
139117,"public void menuDetected(MenuDetectEvent e){
  int column=cursor.getColumn();
  if (column == TABLE_COLUMN_INDEX) {
    cursor.setMenu(menu2);
    menu2.setVisible(true);
  }
 else   if (column == VIEW_COLUMN_INDEXES) {
    cursor.setMenu(menu1);
    menu1.setVisible(true);
  }
 else   if (column == VIEW_COLUMN_INDEX) {
    cursor.setMenu(menu);
    menu.setVisible(true);
  }
}","public void menuDetected(MenuDetectEvent e){
  int column=cursor.getColumn();
  if (column == TABLE_COLUMN_INDEX) {
    cursor.setMenu(menu2);
    menu2.setVisible(true);
  }
 else   if (column == VIEW_COLUMN_INDEXES) {
    cursor.setMenu(menu1);
    menu1.setVisible(true);
  }
 else   if (column == VIEW_COLUMN_INDEX) {
    cursor.setMenu(menu);
    menu.setVisible(true);
  }
 else {
    cursor.setMenu(null);
  }
}",0.9523809523809524
139118,"protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        runTableAnalysis(tableItem.getText(0));
      }
    }
);
    cursor.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}","protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        runTableAnalysis(tableItem.getText(0));
      }
    }
);
    cursor.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}",0.9958595561444188
139119,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  indicatorItem.setImage(0,getIndicatorIamge(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,4);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  indicatorItem.setImage(0,getIndicatorImage(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,4);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}",0.9992867332382313
139120,"/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  IPath itemPath=PropertyHelper.getElementPath(record.getProperty());
  IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
  ModelElement element=record.getElement();
  if (element != null && itemFile.exists()) {
    record.addError(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ itemFile.getFullPath().toString());
  }
}","/** 
 * DOC bZhou Comment method ""checkExisted"".
 * @param record
 */
private void checkExisted(ItemRecord record){
  Property property=record.getProperty();
  if (property != null) {
    IPath itemPath=PropertyHelper.getElementPath(property);
    IFile itemFile=ResourcesPlugin.getWorkspace().getRoot().getFile(itemPath);
    ModelElement element=record.getElement();
    if (element != null && itemFile.exists()) {
      record.addError(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ itemFile.getFullPath().toString());
    }
  }
}",0.9037328094302554
139121,"public ItemRecord(File file){
  this.file=file;
  init();
}","public ItemRecord(File file){
  this.file=file;
  try {
    init();
  }
 catch (  Exception e) {
    addError(e.getMessage());
  }
}",0.6178010471204188
139122,"@Override protected void initialize(){
  String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(parameters);
  if (indicatorThreshold != null) {
    lowerText.setText(indicatorThreshold[0] == null ? ""String_Node_Str"" : indicatorThreshold[0]);
    higherText.setText(indicatorThreshold[1] == null ? ""String_Node_Str"" : indicatorThreshold[1]);
  }
  String[] indicatorPersentThreshold=IndicatorHelper.getIndicatorThresholdInPercent(parameters);
  if (indicatorPersentThreshold != null && isContainRowCount) {
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[0])) {
      Double min=StringFormatUtil.parseDouble(indicatorPersentThreshold[0]);
      min=min > 1 ? min : min * 100;
      pLowerText.setText(String.valueOf(min));
    }
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[1])) {
      Double max=StringFormatUtil.parseDouble(indicatorPersentThreshold[1]);
      max=max > 1 ? max : max * 100;
      pHigherText.setText(String.valueOf(max));
    }
  }
}","@Override protected void initialize(){
  String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(parameters);
  if (indicatorThreshold != null) {
    lowerText.setText(indicatorThreshold[0] == null ? ""String_Node_Str"" : indicatorThreshold[0]);
    higherText.setText(indicatorThreshold[1] == null ? ""String_Node_Str"" : indicatorThreshold[1]);
  }
  String[] indicatorPersentThreshold=IndicatorHelper.getIndicatorThresholdInPercent(parameters);
  if (indicatorPersentThreshold != null && isContainRowCount) {
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[0])) {
      Double min=StringFormatUtil.parseDouble(indicatorPersentThreshold[0]);
      min=min > 1 ? min : StringFormatUtil.formatPercentDecimalDouble(min);
      pLowerText.setText(String.valueOf(min));
    }
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[1])) {
      Double max=StringFormatUtil.parseDouble(indicatorPersentThreshold[1]);
      max=max > 1 ? max : StringFormatUtil.formatPercentDecimalDouble(max);
      pHigherText.setText(String.valueOf(max));
    }
  }
}",0.944390243902439
139123,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  indicatorItem.setImage(0,getIndicatorIamge(unit));
  String indicatorName=indicatorUnit.getIndicatorName();
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,4);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(MODELELEMENT_INDICATOR_KEY,treeItem.getData(MODELELEMENT_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  indicatorItem.setImage(0,getIndicatorIamge(unit));
  String indicatorName=getIndicatorName(indicatorUnit);
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ModelElementIndicator meIndicator=(ModelElementIndicator)treeItem.getData(MODELELEMENT_INDICATOR_KEY);
      deleteIndicatorItems(meIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(modelElementIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,4);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(MODELELEMENT_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}",0.993760028525584
139124,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
          colName=dbms().getPatternFinderFunction(colName,charactersMapping);
          if (colName == null) {
            colName=dbms().getPatternFinderDefaultFunction(colName);
          }
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (dbms().getDbmsName().equals(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
          colName=dbms().getPatternFinderFunction(colName,charactersMapping);
          if (colName == null) {
            colName=dbms().getPatternFinderDefaultFunction(colName);
          }
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9994260789715336
139125,"public void run(){
  MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
}","@Override protected IStatus run(IProgressMonitor monitor){
  SubMonitor progress=SubMonitor.convert(monitor,fExtensions.length * 10 + 5);
  progress.setTaskName(this.getName());
  for (  IEcosComponent extension : fExtensions) {
    if (progress.isCanceled()) {
      return Status.CANCEL_STATUS;
    }
    fMonitor=progress.newChild(10);
    downloadExtension(extension,fMonitor);
  }
  progress.setTaskName(EcosConstants.RELOAD_PALETTE);
  return Status.OK_STATUS;
}",0.0503937007874015
139126,"private void downloadExtension(IEcosComponent extension,IProgressMonitor monitor){
  String componentUrl=extension.getLatestRevision().getUrl();
  monitor.setTaskName(EcosConstants.DOWNLOAD_TASK_NAME + componentUrl);
  String targetFolder=ResourceManager.getExchangeFolder().getLocation().toOSString();
  try {
    String fileName=extension.getLatestRevision().getFileName();
    File localZipFile=new File(targetFolder,fileName);
    if (extension.getInstalledLocation() != null && extension.getInstalledRevision() != null) {
      if (extension.getInstalledRevision().getName().equals(extension.getLatestRevision().getName())) {
        if (localZipFile.exists() && checkIfExisted(extension.getInstalledLocation())) {
          monitor.done();
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
);
          return;
        }
      }
 else {
        FileUtils.deleteDirectory(new File(extension.getInstalledLocation()));
        extension.setInstalledLocation(null);
        extension.setInstalledRevision(null);
      }
    }
    URL url=new URL(componentUrl);
    monitor.setTaskName(EcosConstants.DOWNLOAD_TASK_NAME + url.toString());
    ComponentDownloader downloader=new ComponentDownloader();
    downloader.addDownloadListener(this);
    downloader.download(url,localZipFile);
    if (!monitor.isCanceled()) {
      File componentFile=ComponentInstaller.unzip(localZipFile.getAbsolutePath(),targetFolder);
      extension.setInstalledRevision(extension.getLatestRevision());
      extension.setInstalledLocation(componentFile.getAbsolutePath());
      monitor.done();
      extensionDownloadCompleted(extension);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void downloadExtension(IEcosComponent extension,IProgressMonitor monitor){
  String componentUrl=extension.getLatestRevision().getUrl();
  monitor.setTaskName(EcosConstants.DOWNLOAD_TASK_NAME + componentUrl);
  String targetFolder=ResourceManager.getExchangeFolder().getLocation().toOSString();
  try {
    String fileName=extension.getLatestRevision().getFileName();
    File localZipFile=new File(targetFolder,fileName);
    if (extension.getInstalledLocation() != null && extension.getInstalledRevision() != null) {
      if (extension.getInstalledRevision().getName().equals(extension.getLatestRevision().getName())) {
        if (localZipFile.exists() && checkIfExisted(extension.getInstalledLocation())) {
          monitor.done();
          extensionDownloadCompleted(extension);
          return;
        }
      }
 else {
        FileUtils.deleteDirectory(new File(extension.getInstalledLocation()));
        extension.setInstalledLocation(null);
        extension.setInstalledRevision(null);
      }
    }
    URL url=new URL(componentUrl);
    monitor.setTaskName(EcosConstants.DOWNLOAD_TASK_NAME + url.toString());
    ComponentDownloader downloader=new ComponentDownloader();
    downloader.addDownloadListener(this);
    downloader.download(url,localZipFile);
    if (!monitor.isCanceled()) {
      File componentFile=ComponentInstaller.unzip(localZipFile.getAbsolutePath(),targetFolder);
      extension.setInstalledRevision(extension.getLatestRevision());
      extension.setInstalledLocation(componentFile.getAbsolutePath());
      monitor.done();
      extensionDownloadCompleted(extension);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.918259905791078
139127,"/** 
 * DOC bZhou Comment method ""getAvailableCategory"".
 * @param version
 * @return empty list if no any category.
 * @throws Exception
 */
public static List<IEcosCategory> getAvailableCategory(String version) throws Exception {
  return EcosystemService.getCategoryList(version);
}","/** 
 * DOC bZhou Comment method ""getAvailableCategory"".
 * @param version
 * @return empty list if no any category.
 * @throws Exception
 */
public static List<IEcosCategory> getAvailableCategory(String version) throws Exception {
  if (ecosCategories == null) {
    ecosCategories=EcosystemService.getCategoryList(version);
  }
  return ecosCategories;
}",0.8673946957878315
139128,"public void init(IWorkbench workbench){
  isBlockWeb=Platform.getPreferencesService().getBoolean(CorePlugin.PLUGIN_ID,BLOCK_WEB_BROWSER,true,new IScopeContext[]{new InstanceScope()});
}","public void init(IWorkbench workbench){
  isBlockWeb=Platform.getPreferencesService().getBoolean(CorePlugin.PLUGIN_ID,BLOCK_WEB_BROWSER,false,new IScopeContext[]{new InstanceScope()});
}",0.981132075471698
139129,"@Override protected void performDefaults(){
  blockWebBtn.setSelection(true);
  isBlockWeb=true;
}","@Override protected void performDefaults(){
  blockWebBtn.setSelection(false);
  isBlockWeb=true;
}",0.964467005076142
139130,"private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  for (int i=0; i < branchNodes.length; i++) {
    final TreeItemContainer treeItem;
    if (parentItem == null) {
      treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
    }
 else {
      treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
    }
    TreeEditor editor;
    Button checkButton;
    Button rowCheckButton=null;
    Button commonCheckButton;
    List<Button> rowButtonList=new ArrayList<Button>();
    IIndicatorNode indicatorNode=branchNodes[i];
    for (int j=0; j < treeColumns.length; j++) {
      IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
      if (j == 0) {
        treeItem.setText(0,indicatorNode.getLabel());
        if (indicatorEnum != null) {
          treeItem.setData(INDICATORITEM,indicatorNode);
        }
        continue;
      }
 else       if (j == 1 && treeColumns.length > 2) {
        editor=new TreeEditor(tree);
        rowCheckButton=new Button(tree,SWT.CHECK);
        rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
        Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
        treeItem.setBackground(j,systemColor);
        rowCheckButton.setBackground(systemColor);
        commonCheckButton=rowCheckButton;
      }
 else {
        editor=new TreeEditor(tree);
        checkButton=new Button(tree,SWT.CHECK);
        checkButton.setData(indicatorNode);
        if (((ModelElementIndicator)treeColumns[j].getData()).contains(indicatorEnum)) {
          checkButton.setSelection(true);
        }
        final ModelElementIndicator currentIndicator=(ModelElementIndicator)treeColumns[j].getData();
        checkButton.setEnabled(ModelElementIndicatorRule.match(indicatorNode,currentIndicator,this.language));
        checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,currentIndicator));
        if (indicatorEnum != null) {
          checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),currentIndicator.getElementName()));
        }
        checkButton.setData(MODELELEMENTINDICATORFLAG,currentIndicator);
        commonCheckButton=checkButton;
        rowButtonList.add(checkButton);
      }
      commonCheckButton.pack();
      editor.minimumWidth=commonCheckButton.getSize().x;
      editor.horizontalAlignment=SWT.CENTER;
      editor.setEditor(commonCheckButton,treeItem,j);
      treeItem.setButton(j,commonCheckButton);
    }
    if (rowCheckButton != null) {
      boolean allChecked=true;
      rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
      for (      Button btn : rowButtonList) {
        if (!btn.getSelection()) {
          allChecked=false;
        }
      }
      rowCheckButton.setSelection(allChecked);
    }
    if (indicatorNode.hasChildren()) {
      createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
    }
    treeItem.setExpanded(true);
  }
}","private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  for (int i=0; i < branchNodes.length; i++) {
    final TreeItemContainer treeItem;
    if (parentItem == null) {
      treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
    }
 else {
      treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
    }
    TreeEditor editor;
    Button checkButton;
    Button rowCheckButton=null;
    Button commonCheckButton;
    List<Button> rowButtonList=new ArrayList<Button>();
    IIndicatorNode indicatorNode=branchNodes[i];
    for (int j=0; j < treeColumns.length; j++) {
      IndicatorEnum indicatorEnum=indicatorNode.getIndicatorEnum();
      if (j == 0) {
        treeItem.setText(0,indicatorNode.getLabel());
        if (indicatorEnum != null) {
          treeItem.setData(INDICATORITEM,indicatorNode);
        }
        continue;
      }
 else       if (j == 1 && treeColumns.length > 2) {
        editor=new TreeEditor(tree);
        rowCheckButton=new Button(tree,SWT.CHECK);
        rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,indicatorEnum,null));
        Color systemColor=tree.getDisplay().getSystemColor(SWT.COLOR_YELLOW);
        treeItem.setBackground(j,systemColor);
        rowCheckButton.setBackground(systemColor);
        commonCheckButton=rowCheckButton;
      }
 else {
        editor=new TreeEditor(tree);
        checkButton=new Button(tree,SWT.CHECK);
        checkButton.setData(indicatorNode);
        if (((ModelElementIndicator)treeColumns[j].getData()).contains(indicatorEnum)) {
          checkButton.setSelection(true);
        }
        final ModelElementIndicator currentIndicator=(ModelElementIndicator)treeColumns[j].getData();
        checkButton.setEnabled(ModelElementIndicatorRule.match(indicatorNode,currentIndicator,this.language));
        if (dbms.getDbmsName().equalsIgnoreCase(SupportDBUrlType.ACCESS.getLanguage()) && null != indicatorNode.getIndicatorInstance() && dbms.getSqlExpression(indicatorNode.getIndicatorInstance().getIndicatorDefinition()) == null) {
          checkButton.setEnabled(false);
        }
        checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,indicatorEnum,currentIndicator));
        if (indicatorEnum != null) {
          checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str"",indicatorEnum.getLabel(),currentIndicator.getElementName()));
        }
        checkButton.setData(MODELELEMENTINDICATORFLAG,currentIndicator);
        commonCheckButton=checkButton;
        rowButtonList.add(checkButton);
      }
      commonCheckButton.pack();
      editor.minimumWidth=commonCheckButton.getSize().x;
      editor.horizontalAlignment=SWT.CENTER;
      editor.setEditor(commonCheckButton,treeItem,j);
      treeItem.setButton(j,commonCheckButton);
    }
    if (rowCheckButton != null) {
      boolean allChecked=true;
      rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
      for (      Button btn : rowButtonList) {
        if (!btn.getSelection()) {
          allChecked=false;
        }
      }
      rowCheckButton.setSelection(allChecked);
    }
    if (indicatorNode.hasChildren()) {
      createChildrenNode(tree,treeItem,treeColumns,indicatorNode.getChildren());
    }
    treeItem.setExpanded(true);
  }
}",0.9559028315023984
139131,"/** 
 * DOC xqliu IndicatorSelectDialog constructor comment.
 * @param parentShell
 * @param title
 * @param modelElementIndicators
 * @deprecated
 */
public IndicatorSelectDialog(Shell parentShell,String title,ModelElementIndicator[] modelElementIndicators){
  this(parentShell,title,modelElementIndicators,null);
  Object editorPart=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editorPart instanceof AnalysisEditor) {
    AnalysisEditor analyEditor=(AnalysisEditor)editorPart;
    if (analyEditor.getMasterPage() instanceof ColumnMasterDetailsPage)     this.language=ExecutionLanguage.get(((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getExecCombo().getText());
  }
}","/** 
 * DOC xqliu IndicatorSelectDialog constructor comment.
 * @param parentShell
 * @param title
 * @param modelElementIndicators
 * @deprecated
 */
public IndicatorSelectDialog(Shell parentShell,String title,ModelElementIndicator[] modelElementIndicators){
  this(parentShell,title,modelElementIndicators,null);
  Object editorPart=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editorPart instanceof AnalysisEditor) {
    AnalysisEditor analyEditor=(AnalysisEditor)editorPart;
    if (analyEditor.getMasterPage() instanceof ColumnMasterDetailsPage) {
      this.language=ExecutionLanguage.get(((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getExecCombo().getText());
      DataManager connection=((ColumnMasterDetailsPage)analyEditor.getMasterPage()).getAnalysis().getContext().getConnection();
      this.dbms=DbmsLanguageFactory.createDbmsLanguage(connection);
    }
  }
}",0.8778173190984578
139132,"/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new TooltipTree(parent,SWT.MULTI | SWT.BORDER){
    @Override protected boolean isValidItem(    TreeItem item){
      if (item == null) {
        return false;
      }
      Object itemData=item.getData(INDICATOR_UNIT_KEY);
      if (itemData != null) {
        IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
        if (indicatorUnit != null && !(indicatorUnit.getIndicator() instanceof CompositeIndicator)) {
          return true;
        }
        return false;
      }
 else {
        return false;
      }
    }
    protected String getItemTooltipText(    TreeItem item){
      String expCont=isExpressionNull(item);
      if (expCont == null) {
        return DefaultMessagesImpl.getString(""String_Node_Str"");
      }
      return expCont;
    }
  }
;
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(120);
  column2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  column2.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(80);
  column3.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(80);
  column4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column5=new TreeColumn(newTree,SWT.CENTER);
  column5.setWidth(80);
  column5.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  parent.layout();
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  newTree.setData(this);
  return newTree;
}","/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new TooltipTree(parent,SWT.SINGLE | SWT.BORDER | SWT.FULL_SELECTION){
    @Override protected boolean isValidItem(    TreeItem item){
      if (item == null) {
        return false;
      }
      Object itemData=item.getData(INDICATOR_UNIT_KEY);
      if (itemData != null) {
        IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
        if (indicatorUnit != null && !(indicatorUnit.getIndicator() instanceof CompositeIndicator)) {
          return true;
        }
        return false;
      }
 else {
        return false;
      }
    }
    protected String getItemTooltipText(    TreeItem item){
      String expCont=isExpressionNull(item);
      if (expCont == null) {
        return DefaultMessagesImpl.getString(""String_Node_Str"");
      }
      return expCont;
    }
  }
;
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(120);
  column2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  column2.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(80);
  column3.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(80);
  column4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column5=new TreeColumn(newTree,SWT.CENTER);
  column5.setWidth(80);
  column5.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  parent.layout();
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  newTree.setData(this);
  return newTree;
}",0.9932945909700492
139133,"/** 
 * DOC yyi 7466 2010-03-22 change the order of appearence of indicators
 * @param newTree
 * @param step
 */
protected void moveSelectedElements(Tree newTree,int step){
  TreeItem[] selection=newTree.getSelection();
  List<Integer> indexElement=new ArrayList<Integer>();
  List<Integer> indexIndicator=new ArrayList<Integer>();
  int indexColumn=-1;
  String movedType=null;
  for (  TreeItem item : selection) {
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      IndicatorUnit[] units=data.getIndicatorUnits();
      int index=-1;
      for (int i=0; i < units.length; i++) {
        if (indicatorUnit == units[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < units.length) {
        Indicator[] inds=new Indicator[units.length];
        for (int i=0; i < units.length; i++) {
          inds[i]=units[i].getIndicator();
        }
        Indicator tmpIndicator=inds[index + step];
        inds[index + step]=inds[index];
        inds[index]=tmpIndicator;
        data.setIndicators(inds);
        movedType=""String_Node_Str"";
        indexIndicator.add(index + step);
        for (int ic=0; ic < modelElementIndicators.length; ic++) {
          if (modelElementIndicators[ic] == data) {
            indexColumn=ic;
          }
        }
      }
    }
 else {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      int index=-1;
      for (int i=0; i < modelElementIndicators.length; i++) {
        if (data == modelElementIndicators[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < modelElementIndicators.length) {
        ModelElementIndicator tmpElement=modelElementIndicators[index + step];
        modelElementIndicators[index + step]=modelElementIndicators[index];
        modelElementIndicators[index]=tmpElement;
        movedType=""String_Node_Str"";
        indexElement.add(index + step);
      }
    }
  }
  if (null != movedType) {
    setElements(modelElementIndicators);
    if (movedType.equals(""String_Node_Str"")) {
      for (      int i : indexElement) {
        tree.select(tree.getItem(i));
      }
    }
 else     if (movedType.equals(""String_Node_Str"")) {
      for (      int i : indexIndicator) {
        tree.select(tree.getItem(indexColumn).getItem(i));
      }
    }
  }
}","/** 
 * DOC yyi 7466 2010-03-22 change the order of appearence of indicators
 * @param newTree
 * @param step
 */
protected void moveSelectedElements(Tree newTree,int step){
  TreeItem[] selection=newTree.getSelection();
  if (selection.length > 0) {
    TreeItem item=selection[0];
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
    if (indicatorUnit != null) {
      data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      TypedReturnCode<IndicatorUnit[]> code=sortIndicatorUnits(data.getIndicatorUnits(),indicatorUnit,step);
      if (code.isOk()) {
        if (null != code.getObject()) {
          Indicator[] inds=new Indicator[code.getObject().length];
          for (int i=0; i < code.getObject().length; i++) {
            inds[i]=code.getObject()[i].getIndicator();
          }
          data.setIndicators(inds);
        }
        setElements(modelElementIndicators);
        selectElement(tree.getItems(),indicatorUnit);
      }
    }
 else {
      data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      int index=-1;
      for (int i=0; i < modelElementIndicators.length; i++) {
        if (data == modelElementIndicators[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < modelElementIndicators.length) {
        ModelElementIndicator tmpElement=modelElementIndicators[index + step];
        modelElementIndicators[index + step]=modelElementIndicators[index];
        modelElementIndicators[index]=tmpElement;
        setElements(modelElementIndicators);
        selectElement(tree.getItems(),data);
      }
    }
  }
}",0.2581547064305685
139134,"/** 
 * DOC Administrator Comment method ""getRowsMatchStatement"".
 * @return
 */
public String getRowsMatchStatement(){
  Table tablea=(Table)indicator.getAnalyzedElement();
  String tableA=tablea.getName();
  String query=""String_Node_Str"";
  if (ColumnsetPackage.eINSTANCE.getRowMatchingIndicator() == indicator.eClass()) {
    Table tableb=(Table)ColumnHelper.getColumnSetOwner(((RowMatchingIndicator)indicator).getColumnSetB().get(0));
    String tableB=tableb.getName();
    EList<Column> columnSetA=((RowMatchingIndicator)indicator).getColumnSetA();
    EList<Column> columnSetB=((RowMatchingIndicator)indicator).getColumnSetB();
    String clauseA=""String_Node_Str"" + dbmsLanguage.from() + getFullyQualifiedTableName(tablea);
    String clauseB=""String_Node_Str"" + dbmsLanguage.from() + getFullyQualifiedTableName(tableb);
    String where=null;
    String onClause=""String_Node_Str"";
    String realWhereClause=""String_Node_Str"";
    String columnsName=""String_Node_Str"";
    String columnsName2=""String_Node_Str"";
    for (int i=0; i < columnSetA.size(); i++) {
      String fullColumnAName=getFullyQualifiedTableName(tablea) + ""String_Node_Str"" + dbmsLanguage.quote(columnSetA.get(i).getName());
      where=dbmsLanguage.and();
      if (i == 0) {
        where=dbmsLanguage.where();
        columnsName+=""String_Node_Str"" + fullColumnAName + ""String_Node_Str"";
        columnsName2+=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetA.get(i).getName());
      }
 else {
        onClause+=where;
        realWhereClause+=where;
        columnsName+=""String_Node_Str"" + fullColumnAName + ""String_Node_Str"";
        columnsName2+=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetA.get(i).getName())+ ""String_Node_Str"";
      }
      realWhereClause+=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetB.get(i).getName())+ dbmsLanguage.isNull();
      onClause+=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetA.get(i).getName())+ ""String_Node_Str""+ ""String_Node_Str""+ dbmsLanguage.getDelimiter()+ dbmsLanguage.quote(columnSetB.get(i).getName())+ ""String_Node_Str"";
    }
    columnsName+=""String_Node_Str"";
    clauseA+=(tableA.equals(tableB) ? whereDataFilter(tableA,(getdataFilterIndex(null) == AnalysisHelper.DATA_FILTER_A ? AnalysisHelper.DATA_FILTER_A : AnalysisHelper.DATA_FILTER_B)) : whereDataFilter(tableA,null)) + ""String_Node_Str"";
    clauseB+=(tableB.equals(tableA) ? whereDataFilter(tableB,(getdataFilterIndex(null) == AnalysisHelper.DATA_FILTER_A ? AnalysisHelper.DATA_FILTER_B : AnalysisHelper.DATA_FILTER_A)) : whereDataFilter(tableB,null)) + ""String_Node_Str"";
    query=""String_Node_Str"" + getFullyQualifiedTableName(tablea) + (tableA.equals(tableB) ? whereDataFilter(tableA,(getdataFilterIndex(null) == AnalysisHelper.DATA_FILTER_A ? AnalysisHelper.DATA_FILTER_A : AnalysisHelper.DATA_FILTER_B)) : whereDataFilter(tableA,null));
    for (int i=0; i < columnSetA.size(); i++) {
      String clause=""String_Node_Str"";
      String fullColumnAName=getFullyQualifiedTableName(tablea) + ""String_Node_Str"" + dbmsLanguage.quote(columnSetA.get(i).getName());
      String columnNameByAlias=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetA.get(i).getName());
      clause=""String_Node_Str"" + columnNameByAlias + dbmsLanguage.from()+ clauseA+ ""String_Node_Str""+ clauseB+ onClause+ realWhereClause+ ""String_Node_Str"";
      if (i == 0) {
        clause=""String_Node_Str"" + fullColumnAName + ""String_Node_Str""+ clause;
      }
 else {
        clause=""String_Node_Str"" + fullColumnAName + ""String_Node_Str""+ clause;
      }
      query+=clause;
    }
    query+=""String_Node_Str"";
  }
  return query;
}","/** 
 * DOC Administrator Comment method ""getRowsMatchStatement"".
 * @return
 */
public String getRowsMatchStatement(){
  Table tablea=(Table)indicator.getAnalyzedElement();
  String tableA=tablea.getName();
  String query=""String_Node_Str"";
  if (ColumnsetPackage.eINSTANCE.getRowMatchingIndicator() == indicator.eClass()) {
    Table tableb=(Table)ColumnHelper.getColumnSetOwner(((RowMatchingIndicator)indicator).getColumnSetB().get(0));
    String tableB=tableb.getName();
    EList<Column> columnSetA=((RowMatchingIndicator)indicator).getColumnSetA();
    EList<Column> columnSetB=((RowMatchingIndicator)indicator).getColumnSetB();
    String clauseA=""String_Node_Str"" + dbmsLanguage.from() + getFullyQualifiedTableName(tablea);
    String clauseB=""String_Node_Str"" + dbmsLanguage.from() + getFullyQualifiedTableName(tableb);
    String where=null;
    String onClause=""String_Node_Str"";
    String realWhereClause=""String_Node_Str"";
    String columnsName=""String_Node_Str"";
    String columnsName2=""String_Node_Str"";
    for (int i=0; i < columnSetA.size(); i++) {
      String fullColumnAName=getFullyQualifiedTableName(tablea) + ""String_Node_Str"" + dbmsLanguage.quote(columnSetA.get(i).getName());
      where=dbmsLanguage.and();
      if (i == 0) {
        where=dbmsLanguage.where();
        columnsName+=""String_Node_Str"" + fullColumnAName + ""String_Node_Str"";
        columnsName2+=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetA.get(i).getName());
      }
 else {
        onClause+=where;
        realWhereClause+=where;
        columnsName+=""String_Node_Str"" + fullColumnAName + ""String_Node_Str"";
        columnsName2+=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetA.get(i).getName())+ ""String_Node_Str"";
      }
      realWhereClause+=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetB.get(i).getName())+ dbmsLanguage.isNull();
      onClause+=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetA.get(i).getName())+ ""String_Node_Str""+ ""String_Node_Str""+ dbmsLanguage.getDelimiter()+ dbmsLanguage.quote(columnSetB.get(i).getName())+ ""String_Node_Str"";
    }
    columnsName+=""String_Node_Str"";
    clauseA+=(tableA.equals(tableB) ? whereDataFilter(tableA,(getdataFilterIndex(null) == AnalysisHelper.DATA_FILTER_A ? AnalysisHelper.DATA_FILTER_A : AnalysisHelper.DATA_FILTER_B)) : whereDataFilter(tableA,null)) + ""String_Node_Str"";
    clauseB+=(tableB.equals(tableA) ? whereDataFilter(tableB,(getdataFilterIndex(null) == AnalysisHelper.DATA_FILTER_A ? AnalysisHelper.DATA_FILTER_B : AnalysisHelper.DATA_FILTER_A)) : whereDataFilter(tableB,null)) + ""String_Node_Str"";
    query=""String_Node_Str"" + getFullyQualifiedTableName(tablea);
    for (int i=0; i < columnSetA.size(); i++) {
      String clause=""String_Node_Str"";
      String fullColumnAName=getFullyQualifiedTableName(tablea) + ""String_Node_Str"" + dbmsLanguage.quote(columnSetA.get(i).getName());
      String columnNameByAlias=""String_Node_Str"" + dbmsLanguage.getDelimiter() + dbmsLanguage.quote(columnSetA.get(i).getName());
      clause=""String_Node_Str"" + columnNameByAlias + dbmsLanguage.from()+ clauseA+ ""String_Node_Str""+ clauseB+ onClause+ realWhereClause+ ""String_Node_Str"";
      if (i == 0) {
        clause=""String_Node_Str"" + fullColumnAName + ""String_Node_Str""+ clause;
      }
 else {
        clause=""String_Node_Str"" + fullColumnAName + ""String_Node_Str""+ clause;
      }
      query+=clause;
    }
    query+=""String_Node_Str"" + (tableA.equals(tableB) ? andDataFilter(tableA,(getdataFilterIndex(null) == AnalysisHelper.DATA_FILTER_A ? AnalysisHelper.DATA_FILTER_A : AnalysisHelper.DATA_FILTER_B)) : andDataFilter(tableA,null));
    ;
  }
  return query;
}",0.7831517406324741
139135,"@Override public void widgetSelected(SelectionEvent e){
  if (invalidRecords != null) {
    for (    ItemRecord record : invalidRecords) {
      File file=record.getFile();
      if (repositoryTree.getChecked(file)) {
        repositoryTree.setChecked(file,!removeInvalidBTN.getSelection());
      }
    }
    repositoryTree.refresh();
  }
  super.widgetSelected(e);
}","@Override public void widgetSelected(SelectionEvent e){
  if (invalidRecords != null) {
    for (    ItemRecord record : invalidRecords) {
      File file=record.getFile();
      repositoryTree.setChecked(file,false);
    }
    repositoryTree.refresh();
  }
  super.widgetSelected(e);
}",0.72782874617737
139136,"/** 
 * DOC bZhou Comment method ""updateErrorList"".
 * @param records
 */
public void updateErrorList(ItemRecord[] records){
  errors.clear();
  invalidRecords=records;
  for (  ItemRecord record : records) {
    errors.addAll(record.getErrors());
  }
  errorsList.setInput(errors);
  errorsList.refresh();
}","/** 
 * DOC bZhou Comment method ""updateErrorList"".
 * @param records
 */
public void updateErrorList(ItemRecord[] records){
  errors.clear();
  invalidRecords=records;
  for (  ItemRecord record : records) {
    errors.addAll(record.getErrors());
  }
  errorsList.setInput(errors);
  errorsList.refresh();
  removeInvalidBTN.setEnabled(true);
}",0.9433384379785604
139137,"/** 
 * DOC bZhou Comment method ""createErrorsList"".
 * @param top
 */
private void createErrorsList(Composite top){
  Group errorGroup=new Group(top,SWT.NONE);
  errorGroup.setLayout(new GridLayout());
  errorGroup.setText(""String_Node_Str"");
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=150;
  errorGroup.setLayoutData(gridData);
  removeInvalidBTN=new Button(errorGroup,SWT.CHECK);
  removeInvalidBTN.setText(""String_Node_Str"");
  errorsList=new TableViewer(errorGroup,SWT.BORDER);
  errorsList.getControl().setLayoutData(gridData);
  errorsList.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      return errors.toArray();
    }
  }
);
  errorsList.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      return element.toString();
    }
    @Override public Image getImage(    Object element){
      return ImageLib.getImage(ImageLib.ICON_ERROR_INFO);
    }
  }
);
  errorsList.setInput(this);
  errorsList.setSorter(new ViewerSorter());
}","/** 
 * DOC bZhou Comment method ""createErrorsList"".
 * @param top
 */
private void createErrorsList(Composite top){
  Group errorGroup=new Group(top,SWT.NONE);
  errorGroup.setLayout(new GridLayout());
  errorGroup.setText(""String_Node_Str"");
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=150;
  errorGroup.setLayoutData(gridData);
  errorsList=new TableViewer(errorGroup,SWT.BORDER);
  errorsList.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
  errorsList.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      return errors.toArray();
    }
  }
);
  errorsList.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      return element.toString();
    }
    @Override public Image getImage(    Object element){
      return ImageLib.getImage(ImageLib.ICON_ERROR_INFO);
    }
  }
);
  errorsList.setInput(this);
  errorsList.setSorter(new ViewerSorter());
  removeInvalidBTN=new Button(errorGroup,SWT.PUSH);
  removeInvalidBTN.setText(""String_Node_Str"");
  removeInvalidBTN.setEnabled(false);
  removeInvalidBTN.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
}",0.842391304347826
139138,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
        File file=new File(result);
        repositoryTree.setInput(file);
        repositoryTree.setAllChecked(true);
        repositoryTree.expandAll();
        repositoryTree.refresh();
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  removeInvalidBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (invalidRecords != null) {
        for (        ItemRecord record : invalidRecords) {
          File file=record.getFile();
          if (repositoryTree.getChecked(file)) {
            repositoryTree.setChecked(file,!removeInvalidBTN.getSelection());
          }
        }
        repositoryTree.refresh();
      }
      super.widgetSelected(e);
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
        File file=new File(result);
        repositoryTree.setInput(file);
        repositoryTree.setAllChecked(true);
        repositoryTree.expandAll();
        repositoryTree.refresh();
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  removeInvalidBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (invalidRecords != null) {
        for (        ItemRecord record : invalidRecords) {
          File file=record.getFile();
          repositoryTree.setChecked(file,false);
        }
        repositoryTree.refresh();
      }
      super.widgetSelected(e);
    }
  }
);
}",0.9504716981132076
139139,"/** 
 * DOC yyi create Up Down and Delete Buttons
 * @param parent
 */
private void createUpDownButtons(Composite parent){
  if (null != buttonsComp) {
    buttonsComp.dispose();
  }
  buttonsComp=masterPage.getEditor().getToolkit().createComposite(parent,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData();
  buttonGridData.heightHint=25;
  buttonGridData.horizontalAlignment=GridData.CENTER;
  buttonGridData.verticalAlignment=GridData.FILL;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.grabExcessVerticalSpace=true;
  Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(tree);
    }
  }
);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveSelectedElements(tree,-1);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveSelectedElements(tree,1);
    }
  }
);
  parent.layout();
}","/** 
 * DOC yyi create Up Down and Delete Buttons
 * @param parent
 */
private void createUpDownButtons(Composite parent){
  if (null != buttonsComp) {
    buttonsComp.dispose();
  }
  buttonsComp=masterPage.getEditor().getToolkit().createComposite(parent,SWT.NONE);
  buttonsComp.setLayout(new GridLayout(3,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridData buttonGridData=new GridData(SWT.CENTER,SWT.CENTER,true,false);
  Button delButton=new Button(buttonsComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setLayoutData(buttonGridData);
  Button moveUpButton=new Button(buttonsComp,SWT.NONE);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  Button moveDownButton=new Button(buttonsComp,SWT.NONE);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(tree);
    }
  }
);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveSelectedElements(tree,-1);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveSelectedElements(tree,1);
    }
  }
);
  parent.layout();
}",0.8878386893509767
139140,"/** 
 * DOC yyi 7466 2010-03-22 change the order of appearence of indicators
 * @param newTree
 * @param step
 */
protected void moveSelectedElements(Tree newTree,int step){
  TreeItem[] selection=newTree.getSelection();
  boolean moved=false;
  for (  TreeItem item : selection) {
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      IndicatorUnit[] units=data.getIndicatorUnits();
      int index=-1;
      for (int i=0; i < units.length; i++) {
        if (indicatorUnit == units[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < units.length) {
        Indicator[] inds=new Indicator[units.length];
        for (int i=0; i < units.length; i++) {
          inds[i]=units[i].getIndicator();
        }
        Indicator tmpIndicator=inds[index + step];
        inds[index + step]=inds[index];
        inds[index]=tmpIndicator;
        data.setIndicators(inds);
        moved=true;
      }
    }
 else {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      int index=-1;
      for (int i=0; i < modelElementIndicators.length; i++) {
        if (data == modelElementIndicators[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < modelElementIndicators.length) {
        ModelElementIndicator tmpElement=modelElementIndicators[index + step];
        modelElementIndicators[index + step]=modelElementIndicators[index];
        modelElementIndicators[index]=tmpElement;
        moved=true;
      }
    }
  }
  if (moved)   setElements(modelElementIndicators);
}","/** 
 * DOC yyi 7466 2010-03-22 change the order of appearence of indicators
 * @param newTree
 * @param step
 */
protected void moveSelectedElements(Tree newTree,int step){
  TreeItem[] selection=newTree.getSelection();
  List<Integer> indexElement=new ArrayList<Integer>();
  List<Integer> indexIndicator=new ArrayList<Integer>();
  int indexColumn=-1;
  String movedType=null;
  for (  TreeItem item : selection) {
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      IndicatorUnit[] units=data.getIndicatorUnits();
      int index=-1;
      for (int i=0; i < units.length; i++) {
        if (indicatorUnit == units[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < units.length) {
        Indicator[] inds=new Indicator[units.length];
        for (int i=0; i < units.length; i++) {
          inds[i]=units[i].getIndicator();
        }
        Indicator tmpIndicator=inds[index + step];
        inds[index + step]=inds[index];
        inds[index]=tmpIndicator;
        data.setIndicators(inds);
        movedType=""String_Node_Str"";
        indexIndicator.add(index + step);
        for (int ic=0; ic < modelElementIndicators.length; ic++) {
          if (modelElementIndicators[ic] == data) {
            indexColumn=ic;
          }
        }
      }
    }
 else {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      int index=-1;
      for (int i=0; i < modelElementIndicators.length; i++) {
        if (data == modelElementIndicators[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < modelElementIndicators.length) {
        ModelElementIndicator tmpElement=modelElementIndicators[index + step];
        modelElementIndicators[index + step]=modelElementIndicators[index];
        modelElementIndicators[index]=tmpElement;
        movedType=""String_Node_Str"";
        indexElement.add(index + step);
      }
    }
  }
  if (null != movedType) {
    setElements(modelElementIndicators);
    if (movedType.equals(""String_Node_Str"")) {
      for (      int i : indexElement) {
        tree.select(tree.getItem(i));
      }
    }
 else     if (movedType.equals(""String_Node_Str"")) {
      for (      int i : indexIndicator) {
        tree.select(tree.getItem(indexColumn).getItem(i));
      }
    }
  }
}",0.7928637627432809
139141,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount();
  if (c.compareTo(0L) == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Double sum=null;
  try {
    sum=Double.valueOf(getSumStr());
  }
 catch (  Exception e) {
    return Double.NaN;
  }
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return sum / c;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount();
  if (c.compareTo(0L) == 0) {
    return Double.NaN;
  }
  Double sum=null;
  try {
    sum=Double.valueOf(getSumStr());
  }
 catch (  Exception e) {
    return Double.NaN;
  }
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return sum / c;
}",0.5147058823529411
139142,"private static String createStandardNumber(Object input){
  return NumberFormat.getInstance().format(input);
}","private static String createStandardNumber(Object input){
  return NumberFormat.getInstance(Locale.US).format(input);
}",0.960698689956332
139143,"@Override protected void handleRemoveElement(ModelElementChangeLeftTarget removeElement){
  ColumnSet removeColumnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumnSet == null) {
    return;
  }
  popRemoveElementConfirm();
  PackageHelper.removeColumnSet(removeColumnSet,(Package)selectedObj);
}","@Override protected void handleRemoveElement(ModelElementChangeLeftTarget removeElement){
  ColumnSet removeColumnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumnSet != null) {
    popRemoveElementConfirm();
    if (isValidTableHandle(removeColumnSet) || isValidViewHandle(removeColumnSet)) {
      PackageHelper.removeColumnSet(removeColumnSet,(Package)selectedObj);
    }
  }
}",0.8504551365409623
139144,"@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  ColumnSet columnSetSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    Package catalog=(Package)selectedObj;
    PackageHelper.addColumnSet(columnSetSwitch,catalog);
  }
}","@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  ColumnSet columnSetSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    if (isValidTableHandle(columnSetSwitch) || isValidViewHandle(columnSetSwitch)) {
      PackageHelper.addColumnSet(columnSetSwitch,(Package)selectedObj);
    }
  }
}",0.7544757033248082
139145,"/** 
 * This method is created right before 4.0 release to avoid exporting a non consistent repository. this should be removed when implementing consistency check on the export. This will disable selection on the reposiroty tree and check all the items to force complete selection and avoid partial unchecked selection.
 */
private void temporaryDisableTreeSelection(){
  TreeItem topItem=repositoryTree.getTree().getTopItem();
  if (topItem != null) {
    repositoryTree.setSubtreeChecked(topItem.getData(),true);
  }
  repositoryTree.getTree().setEnabled(false);
}","/** 
 * This method is created right before 4.0 release to avoid exporting a non consistent repository. this should be removed when implementing consistency check on the export. This will disable selection on the reposiroty tree and check all the items to force complete selection and avoid partial unchecked selection.
 */
private void temporaryDisableTreeSelection(){
  TreeItem topItem=repositoryTree.getTree().getTopItem();
  TreeItem[] topItems=repositoryTree.getTree().getItems();
  for (  TreeItem treeItem : topItems) {
    repositoryTree.setSubtreeChecked(treeItem.getData(),true);
  }
  repositoryTree.getTree().setEnabled(false);
}",0.9039735099337748
139146,"/** 
 * DOC sgandon Comment method ""dirTextModified"".
 */
protected void dirTextModified(){
  File file=new File(dirTxt.getText());
  if (file.exists()) {
    repositoryTree.setInput(file);
    repositoryTree.expandAll();
    TreeItem topItem=repositoryTree.getTree().getTopItem();
    if (topItem != null) {
      repositoryTree.setSubtreeChecked(topItem.getData(),true);
    }
    repositoryTree.getTree().setEnabled(false);
    repositoryTree.refresh();
  }
 else {
    repositoryTree.setInput(null);
  }
  checkforErrors();
  updatePageStatus();
}","/** 
 * DOC sgandon Comment method ""dirTextModified"".
 */
protected void dirTextModified(){
  File file=new File(dirTxt.getText());
  if (file.exists()) {
    repositoryTree.setInput(file);
    repositoryTree.expandAll();
    TreeItem[] topItems=repositoryTree.getTree().getItems();
    for (    TreeItem treeItem : topItems) {
      repositoryTree.setSubtreeChecked(treeItem.getData(),true);
    }
    repositoryTree.getTree().setEnabled(false);
    repositoryTree.refresh();
  }
 else {
    repositoryTree.setInput(null);
  }
  checkforErrors();
  updatePageStatus();
}",0.9037433155080212
139147,"/** 
 * @return query string for full table select
 */
private String createTableSelect(){
  TableNode node=(TableNode)_selectedNodes[0];
  StringBuffer query=new StringBuffer(""String_Node_Str"");
  String sep=""String_Node_Str"";
  List columnNames=node.getColumnNames();
  Iterator it=columnNames.iterator();
  while (it.hasNext()) {
    query.append(sep);
    String column=(String)it.next();
    query.append(column);
    sep=""String_Node_Str"";
  }
  query.append(""String_Node_Str"");
  query.append(node.getQualifiedName());
  return query.toString();
}","/** 
 * @return query string for full table select
 */
private String createTableSelect(){
  TableNode node=(TableNode)_selectedNodes[0];
  StringBuffer query=new StringBuffer(""String_Node_Str"");
  String sep=""String_Node_Str"";
  List columnNames=node.getColumnNames();
  Iterator it=columnNames.iterator();
  while (it.hasNext()) {
    query.append(sep);
    String column=(String)it.next();
    query.append(quote(column,getQuoteString(node)));
    sep=""String_Node_Str"";
  }
  query.append(""String_Node_Str"");
  query.append(node.getQualifiedName());
  return query.toString();
}",0.9647887323943662
139148,"/** 
 * @return query string for full table select
 */
private String createColumnSelect(){
  StringBuffer query=new StringBuffer(""String_Node_Str"");
  String sep=""String_Node_Str"";
  String table=""String_Node_Str"";
  for (int i=0; i < _selectedNodes.length; i++) {
    INode node=_selectedNodes[i];
    if (node instanceof ColumnNode) {
      ColumnNode column=(ColumnNode)node;
      if (table.length() == 0) {
        table=column.getQualifiedParentTableName();
      }
      if (column.getQualifiedParentTableName().equals(table)) {
        query.append(sep);
        query.append(column.getName());
        sep=""String_Node_Str"";
      }
    }
  }
  query.append(""String_Node_Str"");
  query.append(table);
  return query.toString();
}","/** 
 * @return query string for full table select
 */
private String createColumnSelect(){
  StringBuffer query=new StringBuffer(""String_Node_Str"");
  String sep=""String_Node_Str"";
  String table=""String_Node_Str"";
  for (int i=0; i < _selectedNodes.length; i++) {
    INode node=_selectedNodes[i];
    if (node instanceof ColumnNode) {
      ColumnNode column=(ColumnNode)node;
      if (table.length() == 0) {
        table=column.getQualifiedParentTableName();
      }
      if (column.getQualifiedParentTableName().equals(table)) {
        query.append(sep);
        query.append(quote(column.getName(),getQuoteString(column)));
        sep=""String_Node_Str"";
      }
    }
  }
  query.append(""String_Node_Str"");
  query.append(table);
  return query.toString();
}",0.960212201591512
139149,"/** 
 * DOC bZhou ExportWizard constructor comment.
 */
public ExportWizard(String specifiedPath){
  exportPage=new ExportWizardPage(specifiedPath);
  setWindowTitle(""String_Node_Str"");
}","/** 
 * DOC bZhou ExportWizard constructor comment.
 */
public ExportWizard(EImexType type,String specifiedPath){
  setWindowTitle(""String_Node_Str"");
  this.exportPage=new ExportWizardPage(specifiedPath);
  this.writer=ExportWriterFactory.create(type);
}",0.6199095022624435
139150,"@Override public boolean performFinish(){
  File[] files=exportPage.getElements();
  IImexWriter writer=ExportWriterFactory.create(type);
  try {
    for (    File file : files) {
      writer.initPath(new ItemRecord(file),exportPage.getFilePath());
      writer.write();
    }
    writer.finish(null);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}","@Override public boolean performFinish(){
  File[] files=exportPage.getElements();
  final String destPath=exportPage.getFilePath();
  final ItemRecord[] records=new ItemRecord[files.length];
  for (int i=0; i < files.length; i++) {
    records[i]=new ItemRecord(files[i]);
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.initPath(record,destPath);
            writer.write();
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}",0.2671353251318102
139151,"/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public File[] getElements(){
  Object[] checkedElements=repositoryTree.getCheckedElements();
  List<File> files=new ArrayList<File>();
  if (checkedElements != null) {
    for (    Object obj : checkedElements) {
      if (obj instanceof File) {
        files.add((File)obj);
      }
    }
  }
  return files.toArray(new File[files.size()]);
}","/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public File[] getElements(){
  Object[] checkedElements=repositoryTree.getCheckedElements();
  List<File> files=new ArrayList<File>();
  if (checkedElements != null) {
    for (    Object obj : checkedElements) {
      if (obj instanceof File) {
        File file=(File)obj;
        if (file.isFile()) {
          files.add(file);
        }
      }
    }
  }
  return files.toArray(new File[files.size()]);
}",0.9053591790193842
139152,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.initPath(record,null);
        writer.write();
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",records.length);
  try {
    for (    ItemRecord record : records) {
      if (monitor.isCanceled()) {
        break;
      }
      monitor.subTask(""String_Node_Str"" + record.getElement().getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        writer.initPath(record,null);
        writer.write();
      }
      monitor.worked(1);
    }
    writer.finish(records);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  monitor.done();
}",0.9197707736389684
139153,"@Override public boolean performFinish(){
  File[] files=importPage.getElements();
  final ItemRecord[] records=new ItemRecord[files.length];
  for (int i=0; i < files.length; i++) {
    records[i]=new ItemRecord(files[i]);
  }
  ItemRecord[] invalidRecords=writer.populate(records);
  importPage.updateErrorList(invalidRecords);
  if (invalidRecords.length > 0) {
    return false;
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.initPath(record,null);
            writer.write();
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}","@Override public boolean performFinish(){
  File[] files=importPage.getElements();
  final ItemRecord[] records=new ItemRecord[files.length];
  for (int i=0; i < files.length; i++) {
    records[i]=new ItemRecord(files[i]);
  }
  ItemRecord[] invalidRecords=writer.populate(records);
  importPage.updateErrorList(invalidRecords);
  if (invalidRecords.length > 0) {
    return false;
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.initPath(record,null);
            writer.write();
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}",0.9517896274653032
139154,"public void run(IAction action){
  ExportWizard wizard=new ExportWizard();
  wizard.setType(EImexType.FILE);
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(550,500);
  dialog.open();
}","public void run(IAction action){
  ExportWizard wizard=new ExportWizard(EImexType.FILE);
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(550,500);
  dialog.open();
}",0.9502487562189056
139155,"/** 
 * Getter for fullPath.
 * @return the fullPath
 */
public IPath getFullPath(){
  if (file.isFile()) {
    IPath path=new Path(file.getAbsolutePath());
    path=path.makeRelativeTo(ResourceManager.getRootProject().getLocation());
    return path.removeLastSegments(1);
  }
  return null;
}","/** 
 * Getter for fullPath.
 * @return the fullPath
 */
public IPath getFullPath(){
  if (file.isFile()) {
    IPath path=new Path(file.getAbsolutePath());
    path=path.makeRelativeTo(ResourceManager.getRootProject().getLocation());
    return path;
  }
  return null;
}",0.96113074204947
139156,"/** 
 * DOC Zqin Comment method ""isOutOfRange"".
 * @return
 */
public boolean isOutOfRange(String inputValue){
  outOfRange=false;
  if (inputValue == null || indicator == null) {
    return false;
  }
  IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
  if (indicatorEnum != null) {
switch (indicatorEnum) {
case ModeIndicatorEnum:
      String expectedValue=IndicatorHelper.getExpectedValue(indicator);
    if (expectedValue != null) {
      Boolean ignoreCaseOption=IndicatorHelper.ignoreCaseOption(indicator);
      outOfRange=!StringUtils.equals(value,expectedValue);
      if (ignoreCaseOption) {
        outOfRange=!(ignoreCaseOption && StringUtils.equalsIgnoreCase(value,expectedValue));
      }
    }
  break;
default :
outOfRange=checkRange(inputValue);
}
}
return outOfRange;
}","/** 
 * DOC Zqin Comment method ""isOutOfRange"".
 * @return
 */
public boolean isOutOfRange(String inputValue){
  outOfRange=false;
  if (inputValue == null || indicator == null) {
    return false;
  }
  IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
  if (indicatorEnum != null) {
switch (indicatorEnum) {
case ModeIndicatorEnum:
      String expectedValue=IndicatorHelper.getExpectedValue(indicator);
    if (expectedValue != null) {
      Boolean ignoreCaseOption=IndicatorHelper.ignoreCaseOption(indicator);
      if (ignoreCaseOption != null && ignoreCaseOption) {
        outOfRange=!(ignoreCaseOption && StringUtils.equalsIgnoreCase(value,expectedValue));
      }
 else {
        outOfRange=!StringUtils.equals(value,expectedValue);
      }
    }
  break;
default :
outOfRange=checkRange(inputValue);
}
}
return outOfRange;
}",0.8268090154211151
139157,"/** 
 * DOC bZhou Comment method ""iterateClientDependencies"".
 * @param element
 * @param returnElements
 */
public static void iterateClientDependencies(ModelElement element,List<ModelElement> returnElements){
  if (returnElements != null) {
    for (    Dependency dependency : element.getClientDependency()) {
      EList<ModelElement> supplier=dependency.getSupplier();
      if (supplier != null) {
        for (        ModelElement subElement : supplier) {
          iterateClientDependencies(subElement,returnElements);
        }
        returnElements.addAll(supplier);
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""iterateClientDependencies"".
 * @param element
 * @param returnElements
 */
public static void iterateClientDependencies(ModelElement element,List<ModelElement> returnElements){
  if (returnElements != null) {
    for (    Dependency dependency : element.getClientDependency()) {
      if (dependency.eIsProxy()) {
        returnElements.add(dependency);
        continue;
      }
      EList<ModelElement> supplier=dependency.getSupplier();
      if (supplier != null) {
        for (        ModelElement subElement : supplier) {
          iterateClientDependencies(subElement,returnElements);
        }
        returnElements.addAll(supplier);
      }
    }
  }
}",0.922007722007722
139158,"private void unload(IResource res){
  if (res instanceof IFile) {
    IFile resFile=(IFile)res;
    ResourceFileMap fileMap=ModelElementFileFactory.getResourceFileMap(resFile);
    String uriStr=fileMap.getFileResource(resFile).getURI().toString();
    fileMap.remove(resFile);
    EMFSharedResources.getInstance().unloadResource(uriStr);
  }
}","private void unload(IResource res){
  if (res instanceof IFile) {
    IFile resFile=(IFile)res;
    ResourceFileMap fileMap=ModelElementFileFactory.getResourceFileMap(resFile);
    if (fileMap != null) {
      String uriStr=fileMap.getFileResource(resFile).getURI().toString();
      fileMap.remove(resFile);
      EMFSharedResources.getInstance().unloadResource(uriStr);
    }
  }
}",0.9105914718019256
139159,"@Override public boolean performFinish(){
  IFile[] files=exportPage.getElements();
  IImexWriter writer=ExportWriterFactory.create(type);
  try {
    for (    IFile file : files) {
      writer.initPath(new ItemRecord(file),exportPage.getFilePath());
      writer.write();
    }
    writer.finish();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}","@Override public boolean performFinish(){
  File[] files=exportPage.getElements();
  IImexWriter writer=ExportWriterFactory.create(type);
  try {
    for (    File file : files) {
      writer.initPath(new ItemRecord(file),exportPage.getFilePath());
      writer.write();
    }
    writer.finish(null);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}",0.9920212765957448
139160,"/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public IFile[] getElements(){
  Object[] checkedElements=repositoryTree.getCheckedElements();
  List<IFile> files=new ArrayList<IFile>();
  if (checkedElements != null) {
    for (    Object obj : checkedElements) {
      if (obj instanceof File) {
        File file=(File)obj;
        IFile file2iFile=file2IFile(file);
        if (file2iFile != null) {
          files.add(file2iFile);
        }
      }
    }
  }
  return files.toArray(new IFile[files.size()]);
}","/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public File[] getElements(){
  Object[] checkedElements=repositoryTree.getCheckedElements();
  List<File> files=new ArrayList<File>();
  if (checkedElements != null) {
    for (    Object obj : checkedElements) {
      if (obj instanceof File) {
        files.add((File)obj);
      }
    }
  }
  return files.toArray(new File[files.size()]);
}",0.8491978609625669
139161,"/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  String absolutePath=file.getAbsolutePath();
  boolean tdqProject=false;
  File[] listFiles=file.listFiles();
  if (listFiles != null) {
    for (    File afile : listFiles) {
      if (StringUtils.equals(afile.getName(),""String_Node_Str"")) {
        tdqProject=true;
        break;
      }
    }
  }
  return absolutePath.indexOf(EResourceConstant.DATA_PROFILING.getName()) > 0 || absolutePath.indexOf(EResourceConstant.LIBRARIES.getName()) > 0 || absolutePath.indexOf(EResourceConstant.METADATA.getName()) > 0 || StringUtils.equals(file.getName(),ReponsitoryContextBridge.PROJECT_DEFAULT_NAME) || tdqProject;
}","/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  String absolutePath=file.getAbsolutePath();
  boolean tdqProject=false;
  File[] listFiles=file.listFiles();
  if (listFiles != null) {
    for (    File afile : listFiles) {
      if (StringUtils.equals(afile.getName(),""String_Node_Str"")) {
        tdqProject=true;
        break;
      }
    }
  }
  return (absolutePath.indexOf(EResourceConstant.DATA_PROFILING.getName()) > 0 || absolutePath.indexOf(EResourceConstant.LIBRARIES.getName()) > 0 || absolutePath.indexOf(EResourceConstant.METADATA.getName()) > 0 || StringUtils.equals(file.getName(),ReponsitoryContextBridge.PROJECT_DEFAULT_NAME) || tdqProject) && !file.getName().startsWith(""String_Node_Str"");
}",0.9664252797893352
139162,"public ImportWizard(){
  this.importPage=new ImportWizardPage();
  setWindowTitle(""String_Node_Str"");
}","public ImportWizard(EImexType type){
  setWindowTitle(""String_Node_Str"");
  this.writer=ImportWriterFactory.create(type);
  this.importPage=new ImportWizardPage(writer);
}",0.5182481751824818
139163,"@Override public boolean performFinish(){
  File[] files=importPage.getElements();
  IImexWriter writer=ImportWriterFactory.create(type);
  try {
    for (    File file : files) {
      writer.initPath(new ItemRecord(file),null);
      writer.write();
    }
    writer.finish();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}","@Override public boolean performFinish(){
  File[] files=importPage.getElements();
  final ItemRecord[] records=new ItemRecord[files.length];
  for (int i=0; i < files.length; i++) {
    records[i]=new ItemRecord(files[i]);
  }
  ItemRecord[] invalidRecords=writer.populate(records);
  importPage.updateErrorList(invalidRecords);
  if (invalidRecords.length > 0) {
    return false;
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",records.length);
      try {
        for (        ItemRecord record : records) {
          if (monitor.isCanceled()) {
            break;
          }
          monitor.subTask(""String_Node_Str"" + record.getElement().getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            writer.initPath(record,null);
            writer.write();
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          monitor.worked(1);
        }
        writer.finish(records);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(op);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return true;
}",0.1565995525727069
139164,"protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        runTableAnalysis(tableItem.getText(0));
      }
    }
);
    cursor.addListener(SWT.MouseUp,new Listener(){
      public void handleEvent(      Event e){
        if (1 < e.button) {
          int column=cursor.getColumn();
          if (column == TABLE_COLUMN_INDEX) {
            cursor.setMenu(menu2);
            menu2.setVisible(true);
          }
 else {
            cursor.setMenu(null);
          }
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}","protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        runTableAnalysis(tableItem.getText(0));
      }
    }
);
    cursor.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}",0.786950626146606
139165,"/** 
 * return the String size limit for the given ecore attribute. This looks for an annotation url : htttp://talend.org/UiConstraints and search for the key string.max.size
 * @param tag the tag value to get the size limit from.
 * @param defaultValue the default value returned if limit not found in feature
 * @return the string limit found or the default valueADDED sgandon 16/03/2010 bug 11760
 */
public static int getStringMaxSize(String tag,int defaultValue){
  Assert.isNotNull(tag);
  int result=defaultValue;
  EAnnotation guiAnnotation=CorePackage.Literals.MODEL_ELEMENT__TAGGED_VALUE.getEAnnotation(EmfHelper.UI_CONSTRAINTS_ANNOTATION_URL);
  if (guiAnnotation != null) {
    String docuValue=guiAnnotation.getDetails().get(EmfHelper.STRING_MAX_SIZE_ANNOTATION_KEY + ""String_Node_Str"" + tag);
    try {
      result=Integer.parseInt(docuValue);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + tag,e);
    }
  }
  return result;
}","/** 
 * return the String size limit for the given ecore attribute. This looks for an annotation url : htttp://talend.org/UiConstraints and search for the key string.max.size
 * @param tag the tag value to get the size limit from.
 * @param defaultValue the default value returned if limit not found in feature
 * @return the string limit found or the default value ADDED sgandon 16/03/2010 bug 11760
 */
public static int getStringMaxSize(String tag,int defaultValue){
  Assert.isNotNull(tag);
  int result=defaultValue;
  EAnnotation guiAnnotation=CorePackage.Literals.MODEL_ELEMENT__TAGGED_VALUE.getEAnnotation(EmfHelper.UI_CONSTRAINTS_ANNOTATION_URL);
  if (guiAnnotation != null) {
    String docuValue=guiAnnotation.getDetails().get(EmfHelper.STRING_MAX_SIZE_ANNOTATION_KEY + ""String_Node_Str"" + tag);
    try {
      result=Integer.parseInt(docuValue);
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"" + tag,e);
    }
  }
  return result;
}",0.9948132780082988
139166,"protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        runTableAnalysis(tableItem.getText(0));
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}","protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        runTableAnalysis(tableItem.getText(0));
      }
    }
);
    cursor.addListener(SWT.MouseUp,new Listener(){
      public void handleEvent(      Event e){
        if (1 < e.button) {
          int column=cursor.getColumn();
          if (column == TABLE_COLUMN_INDEX) {
            cursor.setMenu(menu2);
            menu2.setVisible(true);
          }
 else {
            cursor.setMenu(null);
          }
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}",0.9887036040882194
139167,"public void widgetSelected(SelectionEvent e){
  int column=cursor.getColumn();
  if (column == TABLE_COLUMN_INDEX) {
    cursor.setMenu(menu2);
    menu2.setVisible(true);
  }
 else {
    cursor.setMenu(null);
  }
}","public void widgetSelected(SelectionEvent e){
  TableItem tableItem=cursor.getRow();
  runTableAnalysis(tableItem.getText(0));
}",0.4839650145772595
139168,"/** 
 * DOC bZhou Comment method ""getIndicatorPercentValue"".
 * @param indicator, never null
 * @return null in case of error
 */
public static String getIndicatorPercentValue(Indicator indicator){
  try {
    double userCount=NumberFormat.getInstance().parse(getIndicatorValue(indicator)).doubleValue();
    double count=Double.valueOf(indicator.getCount());
    return computePercent(userCount,count);
  }
 catch (  NumberFormatException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
    return null;
  }
catch (  ParseException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
    return null;
  }
}","/** 
 * DOC bZhou Comment method ""getIndicatorPercentValue"".
 * @param indicator, never null
 * @return null in case of error
 */
public static String getIndicatorPercentValue(Indicator indicator){
  try {
    String indicatorValue=getIndicatorValue(indicator);
    if (indicatorValue != null) {
      double userCount=NumberFormat.getInstance().parse(indicatorValue).doubleValue();
      double count=Double.valueOf(indicator.getCount());
      return computePercent(userCount,count);
    }
  }
 catch (  NumberFormatException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
  }
catch (  ParseException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
  }
  return null;
}",0.8940646130728775
139169,"public void clear(){
  this.registedResourceMap.clear();
}","public void clear(){
  registedResourceMap.clear();
}",0.954954954954955
139170,"/** 
 * DOC rli Comment method ""createResource"".
 * @param file
 * @return
 */
public Resource getFileResource(IFile file){
  Resource res=registedResourceMap.get(file);
  if (res != null) {
    return res;
  }
  URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
  Resource rs=EMFSharedResources.getInstance().getResource(uri,true);
  this.registedResourceMap.put(file,rs);
  return rs;
}","/** 
 * DOC rli Comment method ""createResource"".
 * @param file
 * @return
 */
public Resource getFileResource(IFile file){
  Resource res;
  if (exist(file)) {
    res=registedResourceMap.get(file);
  }
 else {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    res=EMFSharedResources.getInstance().getResource(uri,true);
    register(file,res);
  }
  return res;
}",0.7995079950799509
139171,"public void remove(IFile file){
  this.registedResourceMap.remove(file);
}","public void remove(IFile file){
  registedResourceMap.remove(file);
}",0.965034965034965
139172,"public void deleteResource(){
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  final IResource[] resources=selectedFiles;
  if (!checkDeleteContent(resources)) {
    return;
  }
  List<Map<String,String>> driverList=driverPreferCustInfo();
  for (  Map<String,String> driverInfoMap : driverList) {
    String connectionURI=driverInfoMap.get(""String_Node_Str"");
    for (    ModelElement tdDataProvider : modelElementList) {
      if (tdDataProvider.eResource().getURI().toString().trim().equals(connectionURI.trim())) {
        String customDriverId=driverInfoMap.get(""String_Node_Str"");
        if (driverManager.getDriver(customDriverId) != null) {
          driverManager.removeDriver(driverManager.getDriver(customDriverId));
        }
      }
    }
  }
  delRelatedResource(isDeleteContent,resources);
  EObjectHelper.removeDependencys(resources);
  for (  IResource res : resources) {
    try {
      if (res.isLinked()) {
        File file=new File(res.getRawLocation().toOSString());
        if (file.exists()) {
          file.delete();
        }
      }
      res.delete(true,new NullProgressMonitor());
      res.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
  }
  CorePlugin.getDefault().refreshDQView();
}","public void deleteResource(){
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  final IResource[] resources=selectedFiles;
  if (!checkDeleteContent(resources)) {
    return;
  }
  List<Map<String,String>> driverList=driverPreferCustInfo();
  for (  Map<String,String> driverInfoMap : driverList) {
    String connectionURI=driverInfoMap.get(""String_Node_Str"");
    for (    ModelElement tdDataProvider : modelElementList) {
      if (tdDataProvider.eResource().getURI().toString().trim().equals(connectionURI.trim())) {
        String customDriverId=driverInfoMap.get(""String_Node_Str"");
        if (driverManager.getDriver(customDriverId) != null) {
          driverManager.removeDriver(driverManager.getDriver(customDriverId));
        }
      }
    }
  }
  delRelatedResource(isDeleteContent,resources);
  EObjectHelper.removeDependencys(resources);
  for (  IResource res : resources) {
    unload(res);
    delete(res);
  }
  CorePlugin.getDefault().refreshDQView();
}",0.8374088374088374
139173,"public void finish() throws IOException {
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView();
}","public void finish() throws IOException {
  IFile defintionFile=ResourceManager.getLibrariesFolder().getFile(""String_Node_Str"");
  if (!defintionFile.exists()) {
    DefinitionHandler.getInstance();
  }
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView();
}",0.6211764705882353
139174,"/** 
 * DOC xqliu Comment method ""initTempExpressionList"". ADD xqliu 2010-03-23 feature 11201
 */
private void initTempExpressionList(IndicatorDefinition definition){
  if (tempExpressionList == null) {
    tempExpressionList=new ArrayList<Expression>();
  }
 else {
    tempExpressionList.clear();
  }
  if (definition != null) {
    EList<Expression> expressions=definition.getSqlGenericExpression();
    for (    Expression exp : expressions) {
      Expression newExp=BooleanExpressionHelper.createExpression(exp.getLanguage(),exp.getBody());
      newExp.setVersion(exp.getVersion());
      tempExpressionList.add(newExp);
    }
  }
}","/** 
 * DOC xqliu Comment method ""initTempExpressionList"". ADD xqliu 2010-03-23 feature 11201
 */
private void initTempExpressionList(IndicatorDefinition definition){
  if (tempExpressionList == null) {
    tempExpressionList=new ArrayList<Expression>();
  }
 else {
    tempExpressionList.clear();
  }
  if (definition != null) {
    EList<Expression> expressions=definition.getSqlGenericExpression();
    for (    Expression exp : expressions) {
      tempExpressionList.add(cloneExpression(exp));
    }
  }
}",0.8539130434782609
139175,"public void modifyText(ModifyEvent e){
  Text dbVersionText=(Text)e.getSource();
  Expression expression=tempExpressionMap.get(combo);
  expression.setVersion(dbVersionText.getText().trim());
  setDirty(true);
}","public void modifyText(ModifyEvent e){
  setDirty(true);
  Text dbVersionText=null;
  if (e.getSource() != null && e.getSource() instanceof Text) {
    dbVersionText=(Text)e.getSource();
  }
  Expression expression=tempExpressionMap.get(this.combo);
  if (expression != null && dbVersionText != null) {
    expression.setVersion(dbVersionText.getText().trim());
  }
}",0.5847750865051903
139176,"@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (!checkBeforeSave())   return;
  EList<Expression> expressions=definition.getSqlGenericExpression();
  expressions.clear();
  Iterator<CCombo> it=tempExpressionMap.keySet().iterator();
  CCombo javaUIDCombo=null;
  while (it.hasNext()) {
    CCombo cb=it.next();
    if (cb.getText().equals(PatternLanguageType.JAVA.getName())) {
      javaUIDCombo=cb;
    }
 else     if (tempExpressionMap.get(cb).getBody() != null && !PluginConstant.EMPTY_STRING.equals(tempExpressionMap.get(cb).getBody())) {
      expressions.add(tempExpressionMap.get(cb));
    }
  }
  EList<TaggedValue> tvs=definition.getTaggedValue();
  if (javaUIDCombo != null) {
    boolean isNewTaggedValue=true;
    for (    TaggedValue tv : tvs) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        tv.setValue(((Text)javaUIDCombo.getData(PluginConstant.CLASS_NAME_TEXT)).getText());
        isNewTaggedValue=false;
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        tv.setValue(((Text)javaUIDCombo.getData(PluginConstant.JAR_FILE_PATH)).getText());
      }
    }
    if (isNewTaggedValue) {
      TaggedValue classNameTV=TaggedValueHelper.createTaggedValue(PluginConstant.CLASS_NAME_TEXT,((Text)javaUIDCombo.getData(PluginConstant.CLASS_NAME_TEXT)).getText());
      TaggedValue jarPathTV=TaggedValueHelper.createTaggedValue(PluginConstant.JAR_FILE_PATH,((Text)javaUIDCombo.getData(PluginConstant.JAR_FILE_PATH)).getText());
      definition.getTaggedValue().add(classNameTV);
      definition.getTaggedValue().add(jarPathTV);
    }
  }
 else {
    TaggedValue tvCN=null;
    TaggedValue tvJARP=null;
    for (    TaggedValue tv : tvs) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        tvCN=tv;
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        tvJARP=tv;
      }
    }
    if (tvCN != null) {
      tvs.remove(tvCN);
    }
    if (tvJARP != null) {
      tvs.remove(tvJARP);
    }
  }
  if (hasAggregateExpression) {
    EList<Expression> aggregate1argFunctions=definition.getAggregate1argFunctions();
    aggregate1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getAggregateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        aggregate1argFunctions.add(expression);
      }
    }
  }
  if (hasDateExpression) {
    EList<Expression> date1argFunctions=definition.getDate1argFunctions();
    date1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getDateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        date1argFunctions.add(expression);
      }
    }
  }
  if (hasCharactersMapping) {
    EList<CharactersMapping> charactersMappings=definition.getCharactersMapping();
    charactersMappings.clear();
    for (    CharactersMapping cm : charactersMappingMapTemp.values()) {
      String c=cm.getCharactersToReplace();
      String r=cm.getReplacementCharacters();
      if (checkMappingString(c,r)) {
        charactersMappings.add(cm);
      }
 else {
        MessageUI.openError(""String_Node_Str"" + cm.getLanguage() + ""String_Node_Str"");
        return;
      }
    }
  }
  ReturnCode rc=UDIHelper.validate(definition);
  if (rc.isOk()) {
    UDIResourceFileHelper.getInstance().save(definition);
    initTempExpressionList(definition);
    initTempExpressionMap();
    definitionComp=createDefinitionComp(definitionSection);
    definitionSection.setClient(definitionComp);
    definitionSection.pack();
    definitionSection.redraw();
    this.isDirty=false;
  }
 else {
    MessageDialog.openError(null,""String_Node_Str"",rc.getMessage());
  }
}","@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (!checkBeforeSave())   return;
  EList<Expression> expressions=definition.getSqlGenericExpression();
  expressions.clear();
  Iterator<CCombo> it=tempExpressionMap.keySet().iterator();
  CCombo javaUIDCombo=null;
  while (it.hasNext()) {
    CCombo cb=it.next();
    if (cb.getText().equals(PatternLanguageType.JAVA.getName())) {
      javaUIDCombo=cb;
    }
 else     if (tempExpressionMap.get(cb).getBody() != null && !PluginConstant.EMPTY_STRING.equals(tempExpressionMap.get(cb).getBody())) {
      expressions.add(cloneExpression(tempExpressionMap.get(cb)));
    }
  }
  EList<TaggedValue> tvs=definition.getTaggedValue();
  if (javaUIDCombo != null) {
    boolean isNewTaggedValue=true;
    for (    TaggedValue tv : tvs) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        tv.setValue(((Text)javaUIDCombo.getData(PluginConstant.CLASS_NAME_TEXT)).getText());
        isNewTaggedValue=false;
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        tv.setValue(((Text)javaUIDCombo.getData(PluginConstant.JAR_FILE_PATH)).getText());
      }
    }
    if (isNewTaggedValue) {
      TaggedValue classNameTV=TaggedValueHelper.createTaggedValue(PluginConstant.CLASS_NAME_TEXT,((Text)javaUIDCombo.getData(PluginConstant.CLASS_NAME_TEXT)).getText());
      TaggedValue jarPathTV=TaggedValueHelper.createTaggedValue(PluginConstant.JAR_FILE_PATH,((Text)javaUIDCombo.getData(PluginConstant.JAR_FILE_PATH)).getText());
      definition.getTaggedValue().add(classNameTV);
      definition.getTaggedValue().add(jarPathTV);
    }
  }
 else {
    TaggedValue tvCN=null;
    TaggedValue tvJARP=null;
    for (    TaggedValue tv : tvs) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        tvCN=tv;
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        tvJARP=tv;
      }
    }
    if (tvCN != null) {
      tvs.remove(tvCN);
    }
    if (tvJARP != null) {
      tvs.remove(tvJARP);
    }
  }
  if (hasAggregateExpression) {
    EList<Expression> aggregate1argFunctions=definition.getAggregate1argFunctions();
    aggregate1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getAggregateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        aggregate1argFunctions.add(expression);
      }
    }
  }
  if (hasDateExpression) {
    EList<Expression> date1argFunctions=definition.getDate1argFunctions();
    date1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getDateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        date1argFunctions.add(expression);
      }
    }
  }
  if (hasCharactersMapping) {
    EList<CharactersMapping> charactersMappings=definition.getCharactersMapping();
    charactersMappings.clear();
    for (    CharactersMapping cm : charactersMappingMapTemp.values()) {
      String c=cm.getCharactersToReplace();
      String r=cm.getReplacementCharacters();
      if (checkMappingString(c,r)) {
        charactersMappings.add(cm);
      }
 else {
        MessageUI.openError(""String_Node_Str"" + cm.getLanguage() + ""String_Node_Str"");
        return;
      }
    }
  }
  ReturnCode rc=UDIHelper.validate(definition);
  if (rc.isOk()) {
    UDIResourceFileHelper.getInstance().save(definition);
    this.isDirty=false;
  }
 else {
    MessageDialog.openError(null,""String_Node_Str"",rc.getMessage());
  }
}",0.966312753965133
139177,"@Override protected void initialize(){
  String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(parameters);
  if (indicatorThreshold != null) {
    lowerText.setText(indicatorThreshold[0] == null ? ""String_Node_Str"" : indicatorThreshold[0]);
    higherText.setText(indicatorThreshold[1] == null ? ""String_Node_Str"" : indicatorThreshold[1]);
  }
  String[] indicatorPersentThreshold=IndicatorHelper.getIndicatorThresholdInPercent(parameters);
  if (indicatorPersentThreshold != null && isContainRowCount) {
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[0])) {
      Double min=StringFormatUtil.parseDouble(indicatorPersentThreshold[0]);
      pLowerText.setText(String.valueOf(min * 100));
    }
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[1])) {
      Double max=StringFormatUtil.parseDouble(indicatorPersentThreshold[1]);
      pHigherText.setText(String.valueOf(max * 100));
    }
  }
}","@Override protected void initialize(){
  String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(parameters);
  if (indicatorThreshold != null) {
    lowerText.setText(indicatorThreshold[0] == null ? ""String_Node_Str"" : indicatorThreshold[0]);
    higherText.setText(indicatorThreshold[1] == null ? ""String_Node_Str"" : indicatorThreshold[1]);
  }
  String[] indicatorPersentThreshold=IndicatorHelper.getIndicatorThresholdInPercent(parameters);
  if (indicatorPersentThreshold != null && isContainRowCount) {
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[0])) {
      Double min=StringFormatUtil.parseDouble(indicatorPersentThreshold[0]);
      min=min > 1 ? min : min * 100;
      pLowerText.setText(String.valueOf(min));
    }
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[1])) {
      Double max=StringFormatUtil.parseDouble(indicatorPersentThreshold[1]);
      max=max > 1 ? max : max * 100;
      pHigherText.setText(String.valueOf(max));
    }
  }
}",0.8931937172774869
139178,"/** 
 * DOC bZhou Comment method ""updateProperty"".
 * @param elementResource
 * @param propertyResource
 */
private void updateProperty(final Resource elementResource,Resource propertyResource){
  EList<EObject> contents=propertyResource.getContents();
  Property property=(Property)EcoreUtil.getObjectByType(contents,PropertiesPackage.eINSTANCE.getProperty());
  if (property != null) {
    URI elementURI=elementResource.getURI();
    IPath path=new Path(elementURI.toPlatformString(true));
    IPath rootPath=PropertyHelper.getItemWorkspaceBasePath(property);
    if (rootPath != null) {
      path=path.makeRelativeTo(rootPath);
      path=path.removeLastSegments(1);
      property.getItem().getState().setPath(path.toString());
    }
  }
  URI desUri=elementResource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  EMFSharedResources.getInstance().saveToUri(propertyResource,desUri.trimSegments(1));
}","/** 
 * DOC bZhou Comment method ""updateProperty"".
 * @param elementResource
 * @param propertyResource
 */
private void updateProperty(final Resource elementResource,Resource propertyResource){
  EList<EObject> contents=propertyResource.getContents();
  Property property=(Property)EcoreUtil.getObjectByType(contents,PropertiesPackage.eINSTANCE.getProperty());
  if (property != null) {
    URI elementURI=elementResource.getURI();
    IPath newPath=new Path(elementURI.toPlatformString(true));
    IPath rootPath=PropertyHelper.getItemWorkspaceBasePath(property);
    if (rootPath != null) {
      newPath=newPath.makeRelativeTo(rootPath);
      newPath=newPath.removeLastSegments(1);
      String oldPath=property.getItem().getState().getPath();
      if (!StringUtils.equals(oldPath,newPath.toString())) {
        property.getItem().getState().setPath(newPath.toString());
        URI desUri=elementResource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
        EMFSharedResources.getInstance().saveToUri(propertyResource,desUri.trimSegments(1));
      }
    }
  }
}",0.8585318424890618
139179,"public void finish() throws IOException {
  CorePlugin.getDefault().refreshWorkSpace();
}","public void finish() throws IOException {
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView();
}",0.8054298642533937
139180,"/** 
 * DOC bZhou Comment method ""getItemWorkspaceBasePath"".
 * @param property
 * @return
 */
public static IPath getItemWorkspaceBasePath(Property property){
  IPath itemBasePath=getItemTypedPath(property);
  return ResourceManager.getRootProject().getFolder(itemBasePath).getFullPath();
}","/** 
 * DOC bZhou Comment method ""getItemWorkspaceBasePath"".
 * @param property
 * @return
 */
public static IPath getItemWorkspaceBasePath(Property property){
  IPath itemBasePath=getItemTypedPath(property);
  return itemBasePath != null ? ResourceManager.getRootProject().getFolder(itemBasePath).getFullPath() : null;
}",0.9509803921568628
139181,"/** 
 * DOC bZhou Comment method ""addConnetionAliasToSQLPlugin"".
 * @param dataproviders
 */
public void addConnetionAliasToSQLPlugin(DataProvider... dataproviders){
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  for (  DataProvider dataProvider : dataproviders) {
    try {
      TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(dataProvider);
      TdProviderConnection providerConnection=tdPc.getObject();
      Alias alias=new Alias(dataProvider.getName());
      String clearTextUser=DataProviderHelper.getUser(providerConnection);
      String user=""String_Node_Str"".equals(clearTextUser) ? ""String_Node_Str"" : clearTextUser;
      String password=DataProviderHelper.getClearTextPassword(providerConnection);
      String url=providerConnection.getConnectionString();
      User previousUser=new User(user,password);
      alias.setDefaultUser(previousUser);
      alias.setAutoLogon(false);
      alias.setConnectAtStartup(true);
      alias.setUrl(url);
      ManagedDriver manDr=sqlPlugin.getDriverModel().getDriver(EDriverName.getId(providerConnection.getDriverClassName()));
      alias.setDriver(manDr);
      if (!aliasManager.contains(alias)) {
        aliasManager.addAlias(alias);
      }
    }
 catch (    ExplorerException e) {
      log.error(e,e);
    }
  }
  try {
    aliasManager.saveAliases();
  }
 catch (  ExplorerException e) {
    log.error(e,e);
  }
  aliasManager.modelChanged();
}","/** 
 * DOC bZhou Comment method ""addConnetionAliasToSQLPlugin"".
 * @param dataproviders
 */
public void addConnetionAliasToSQLPlugin(DataProvider... dataproviders){
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  for (  DataProvider dataProvider : dataproviders) {
    try {
      TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(dataProvider);
      TdProviderConnection providerConnection=tdPc.getObject();
      Alias alias=new Alias(dataProvider.getName());
      String clearTextUser=DataProviderHelper.getUser(providerConnection);
      String user=""String_Node_Str"".equals(clearTextUser) ? ""String_Node_Str"" : clearTextUser;
      String password=DataProviderHelper.getClearTextPassword(providerConnection);
      String url=providerConnection.getConnectionString();
      User previousUser=new User(user,password);
      alias.setDefaultUser(previousUser);
      alias.setAutoLogon(false);
      alias.setConnectAtStartup(true);
      alias.setUrl(url);
      ManagedDriver manDr=sqlPlugin.getDriverModel().getDriver(EDriverName.getId(providerConnection.getDriverClassName()));
      if (manDr != null) {
        alias.setDriver(manDr);
      }
      if (!aliasManager.contains(alias)) {
        aliasManager.addAlias(alias);
      }
    }
 catch (    ExplorerException e) {
      log.error(e,e);
    }
  }
  try {
    aliasManager.saveAliases();
  }
 catch (  ExplorerException e) {
    log.error(e,e);
  }
  aliasManager.modelChanged();
}",0.9769555339175592
139182,"/** 
 * DOC bZhou Comment method ""updateProperty"".
 * @param elementResource
 * @param propertyResource
 */
private void updateProperty(final Resource elementResource,Resource propertyResource){
  EList<EObject> contents=propertyResource.getContents();
  Property property=(Property)EcoreUtil.getObjectByType(contents,PropertiesPackage.eINSTANCE.getProperty());
  if (property != null) {
    URI elementURI=elementResource.getURI();
    IPath path=new Path(elementURI.toPlatformString(true));
    path=path.makeRelativeTo(PropertyHelper.getItemWorkspaceBasePath(property));
    path=path.removeLastSegments(1);
    property.getItem().getState().setPath(path.toString());
  }
  URI desUri=elementResource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  EMFSharedResources.getInstance().saveToUri(propertyResource,desUri.trimSegments(1));
}","/** 
 * DOC bZhou Comment method ""updateProperty"".
 * @param elementResource
 * @param propertyResource
 */
private void updateProperty(final Resource elementResource,Resource propertyResource){
  EList<EObject> contents=propertyResource.getContents();
  Property property=(Property)EcoreUtil.getObjectByType(contents,PropertiesPackage.eINSTANCE.getProperty());
  if (property != null) {
    URI elementURI=elementResource.getURI();
    IPath path=new Path(elementURI.toPlatformString(true));
    IPath rootPath=PropertyHelper.getItemWorkspaceBasePath(property);
    if (rootPath != null) {
      path=path.makeRelativeTo(rootPath);
      path=path.removeLastSegments(1);
      property.getItem().getState().setPath(path.toString());
    }
  }
  URI desUri=elementResource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  EMFSharedResources.getInstance().saveToUri(propertyResource,desUri.trimSegments(1));
}",0.8997260273972603
139183,"@Override protected void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> userDefinedIndicators=AnalysisHelper.getUserDefinedIndicators(analysis);
  for (  IndicatorDefinition udi : userDefinedIndicators) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
    if (dependencyReturn.isOk()) {
      EMFUtil.saveSingleResource(udi.eResource());
    }
  }
  List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
  for (  Pattern pattern : patterns) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
    if (dependencyReturn.isOk()) {
      EMFUtil.saveSingleResource(pattern.eResource());
    }
  }
}","@Override protected void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> udis=AnalysisHelper.getUserDefinedIndicators(analysis);
  for (  IndicatorDefinition udi : udis) {
    InternalEObject iudi=(InternalEObject)udi;
    if (!iudi.eIsProxy()) {
      DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
    }
  }
  List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
  for (  Pattern pattern : patterns) {
    InternalEObject iptn=(InternalEObject)pattern;
    if (!iptn.eIsProxy()) {
      DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
    }
  }
}",0.680939226519337
139184,"@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        log.error(e,e);
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        log.error(e,e);
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
  if (needSortContainers.contains(element)) {
    return sort(super.getChildren(element));
  }
  return super.getChildren(element);
}","@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file.getFileExtension())) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
  if (needSortContainers.contains(element)) {
    return sort(super.getChildren(element));
  }
  return super.getChildren(element);
}",0.990990990990991
139185,"private void setConnectionState(final AbstractAnalysisMetadataPage masterPage,final TdDataProvider tdProvider){
  final IFile prvFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(tdProvider);
  String prvFileName=prvFile.getName();
  Object value=masterPage.getConnCombo().getData(prvFileName);
  Integer index=0;
  if (value != null && value instanceof Integer) {
    index=(Integer)value;
  }
  masterPage.getConnCombo().select(index);
  if (selectionListener == null) {
    selectionListener=new SelectionListener(){
      private int prevSelect=masterPage.getConnCombo().getSelectionIndex();
      private TdDataProvider dataProvider=tdProvider;
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dataProvider=callChangeConnectionAction(masterPage,prevSelect,dataProvider);
        prevSelect=masterPage.getConnCombo().getSelectionIndex();
      }
    }
;
    masterPage.getConnCombo().addSelectionListener(selectionListener);
  }
}","private void setConnectionState(final AbstractAnalysisMetadataPage masterPage,final DataManager dataManager){
  final IFile prvFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(dataManager);
  if (prvFile != null && prvFile.exists()) {
    String prvFileName=prvFile.getName();
    Object value=masterPage.getConnCombo().getData(prvFileName);
    Integer index=0;
    if (value != null && value instanceof Integer) {
      index=(Integer)value;
    }
    masterPage.getConnCombo().select(index);
    if (selectionListener == null) {
      selectionListener=new SelectionListener(){
        private int prevSelect=masterPage.getConnCombo().getSelectionIndex();
        private TdDataProvider dataProvider=(TdDataProvider)dataManager;
        public void widgetDefaultSelected(        SelectionEvent e){
        }
        public void widgetSelected(        SelectionEvent e){
          dataProvider=callChangeConnectionAction(masterPage,prevSelect,dataProvider);
          prevSelect=masterPage.getConnCombo().getSelectionIndex();
        }
      }
;
      masterPage.getConnCombo().addSelectionListener(selectionListener);
    }
  }
 else {
    masterPage.getConnCombo().setText(""String_Node_Str"");
  }
}",0.8832667554371949
139186,"@Override public void widgetSelected(SelectionEvent e){
  File[] dependencies=computeDependencies(getElements());
  if (dependBTN.getSelection()) {
    for (    File file : dependencies) {
      repositoryTree.setChecked(file,true);
    }
  }
 else {
    for (    File file : dependencies) {
      repositoryTree.setChecked(file,false);
    }
  }
  repositoryTree.setExpandedElements(repositoryTree.getCheckedElements());
  repositoryTree.refresh();
}","@Override public void widgetSelected(SelectionEvent e){
  TreeItem item=(TreeItem)e.item;
  File sfile=(File)item.getData();
  IFile sIFile=file2IFile(sfile);
  if (sIFile != null) {
    File[] dependencies=computeDependencies(sIFile);
    for (    File file : dependencies) {
      repositoryTree.setChecked(file,item.getChecked());
    }
    repositoryTree.refresh();
  }
}",0.5108958837772397
139187,"/** 
 * DOC bZhou Comment method ""createOptionComposite"".
 * @param top
 */
private void createOptionComposite(Composite top){
  Group optionGroup=new Group(top,SWT.NONE);
  optionGroup.setLayout(new RowLayout());
  optionGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  optionGroup.setText(""String_Node_Str"");
  dependBTN=new Button(optionGroup,SWT.CHECK);
  dependBTN.setText(""String_Node_Str"");
}","/** 
 * DOC bZhou Comment method ""createOptionComposite"".
 * @param top
 */
private void createOptionComposite(Composite top){
  Group optionGroup=new Group(top,SWT.NONE);
  optionGroup.setLayout(new RowLayout());
  optionGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  optionGroup.setText(""String_Node_Str"");
}",0.8822733423545331
139188,"/** 
 * DOC bZhou Comment method ""computeDependencies"".
 * @param elements
 * @return
 */
protected File[] computeDependencies(IFile[] elements){
  List<ModelElement> dependencyElements=new ArrayList<ModelElement>();
  List<File> dependencyFiles=new ArrayList<File>();
  ModelElement[] modelElements=ModelElementFileFactory.getModelElements(elements);
  for (  ModelElement melement : modelElements) {
    ModelElementHelper.iterateClientDependencies(melement,dependencyElements);
  }
  for (  ModelElement element : dependencyElements) {
    ResourceFileMap fileMap=ModelElementFileFactory.getResourceFileMap(element);
    IFile file=fileMap.findCorrespondingFile(element);
    if (file != null && file.exists()) {
      dependencyFiles.add(file.getLocation().toFile());
    }
  }
  return dependencyFiles.toArray(new File[dependencyFiles.size()]);
}","/** 
 * DOC bZhou Comment method ""computeDependencies"".
 * @param elements
 * @return
 */
protected File[] computeDependencies(IFile... elements){
  List<ModelElement> dependencyElements=new ArrayList<ModelElement>();
  List<File> dependencyFiles=new ArrayList<File>();
  ModelElement[] modelElements=ModelElementFileFactory.getModelElements(elements);
  for (  ModelElement melement : modelElements) {
    ModelElementHelper.iterateClientDependencies(melement,dependencyElements);
  }
  for (  ModelElement element : dependencyElements) {
    ResourceFileMap fileMap=ModelElementFileFactory.getResourceFileMap(element);
    IFile file=fileMap.findCorrespondingFile(element);
    if (file != null && file.exists()) {
      dependencyFiles.add(file.getLocation().toFile());
    }
  }
  return dependencyFiles.toArray(new File[dependencyFiles.size()]);
}",0.8220786846741045
139189,"/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public IFile[] getElements(){
  Object[] checkedElements=repositoryTree.getCheckedElements();
  List<IFile> files=new ArrayList<IFile>();
  if (checkedElements != null) {
    for (    Object obj : checkedElements) {
      if (obj instanceof File) {
        File file=(File)obj;
        if (file.isFile()) {
          IPath path=new Path(file.getAbsolutePath());
          path=path.makeRelativeTo(ResourceManager.getRootProject().getLocation());
          files.add(ResourceManager.getRootProject().getFile(path));
        }
      }
    }
  }
  return files.toArray(new IFile[files.size()]);
}","/** 
 * DOC bZhou Comment method ""getElements"".
 * @return
 */
public IFile[] getElements(){
  Object[] checkedElements=repositoryTree.getCheckedElements();
  List<IFile> files=new ArrayList<IFile>();
  if (checkedElements != null) {
    for (    Object obj : checkedElements) {
      if (obj instanceof File) {
        File file=(File)obj;
        IFile file2iFile=file2IFile(file);
        if (file2iFile != null) {
          files.add(file2iFile);
        }
      }
    }
  }
  return files.toArray(new IFile[files.size()]);
}",0.7662447257383966
139190,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  dependBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      File[] dependencies=computeDependencies(getElements());
      if (dependBTN.getSelection()) {
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,true);
        }
      }
 else {
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,false);
        }
      }
      repositoryTree.setExpandedElements(repositoryTree.getCheckedElements());
      repositoryTree.refresh();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  dirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(dirBTN.getSelection());
    }
  }
);
  archBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setArchState(archBTN.getSelection());
    }
  }
);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        archTxt.setText(result);
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      File sfile=(File)item.getData();
      IFile sIFile=file2IFile(sfile);
      if (sIFile != null) {
        File[] dependencies=computeDependencies(sIFile);
        for (        File file : dependencies) {
          repositoryTree.setChecked(file,item.getChecked());
        }
        repositoryTree.refresh();
      }
    }
  }
);
}",0.8670776818742294
139191,"public void createControl(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  top.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSelectComposite(top);
  createOptionComposite(top);
  createRepositoryTree(top);
  addListeners();
  initControlState();
  setControl(top);
}","public void createControl(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  top.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSelectComposite(top);
  createRepositoryTree(top);
  addListeners();
  initControlState();
  setControl(top);
}",0.9526813880126184
139192,"public Object[] getChildren(Object parentElement){
  List<File> objects=new ArrayList<File>();
  if (parentElement instanceof File) {
    File[] files=((File)parentElement).listFiles();
    if (files != null) {
      for (      File file : files) {
        if (isValidFile(file) && isTOPFile(file)) {
          objects.add(file);
        }
      }
    }
  }
  return objects.toArray();
}","public Object[] getChildren(Object parentElement){
  List<File> objects=new ArrayList<File>();
  if (parentElement instanceof File) {
    File[] files=((File)parentElement).listFiles();
    if (files != null) {
      for (      File file : files) {
        if (file.isDirectory() && isValidDirectory(file)) {
          objects.add(file);
        }
        if (file.isFile() && isValidFile(file)) {
          objects.add(file);
        }
      }
    }
  }
  return objects.toArray();
}",0.835820895522388
139193,"/** 
 * DOC bZhou Comment method ""isValidFile"".
 * @param file
 * @return
 */
private boolean isValidFile(File file){
  IPath path=new Path(file.getName());
  return !StringUtils.equals(path.getFileExtension(),FactoriesUtil.PROPERTIES_EXTENSION) && !file.getName().startsWith(""String_Node_Str"");
}","/** 
 * DOC bZhou Comment method ""isValidFile"".
 * @param file
 * @return
 */
private boolean isValidFile(File file){
  IPath path=new Path(file.getAbsolutePath());
  IPath propPath=path.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  File propFile=propPath.toFile();
  return propFile.exists() && !StringUtils.equals(path.getFileExtension(),FactoriesUtil.PROPERTIES_EXTENSION);
}",0.6874115983026874
139194,"/** 
 * DOC bZhou Comment method ""decorateCategoryPlot"".
 * @param chart
 */
public static void decorateCategoryPlot(JFreeChart chart){
  Font font=null;
  CategoryPlot plot=chart.getCategoryPlot();
  CategoryItemRenderer render=plot.getRenderer();
  CategoryAxis domainAxis=plot.getDomainAxis();
  ValueAxis valueAxis=plot.getRangeAxis();
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
  String label=chart.getCategoryPlot().getDomainAxis().getLabel();
  if (DefaultMessagesImpl.getString(""String_Node_Str"").equals(label) || DefaultMessagesImpl.getString(""String_Node_Str"").equals(label)) {
    int rowCount=chart.getCategoryPlot().getDataset().getRowCount();
    domainAxis.setTickLabelFont(new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE));
    domainAxis.setCategoryLabelPositions(CategoryLabelPositions.createDownRotationLabelPositions(Math.PI / 10.0));
    domainAxis.setUpperMargin(0.1);
    ((BarRenderer)plot.getRenderer()).setItemMargin(-0.50 * rowCount);
  }
}","/** 
 * DOC bZhou Comment method ""decorateCategoryPlot"".
 * @param chart
 */
public static void decorateCategoryPlot(JFreeChart chart){
  CategoryPlot plot=chart.getCategoryPlot();
  CategoryItemRenderer render=plot.getRenderer();
  CategoryAxis domainAxis=plot.getDomainAxis();
  ValueAxis valueAxis=plot.getRangeAxis();
  Font font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
  if (render instanceof BarRenderer) {
    int rowCount=chart.getCategoryPlot().getDataset().getRowCount();
    domainAxis.setTickLabelFont(new Font(""String_Node_Str"",Font.PLAIN,10));
    domainAxis.setUpperMargin(0.1);
    domainAxis.setMaximumCategoryLabelLines(2);
    ((BarRenderer)render).setItemMargin(-0.50 * rowCount);
  }
}",0.8306709265175719
139195,"private Resource getResourceFromFile(){
  EMFUtil util=new EMFUtil();
  Resource definitionsFile=null;
  URI uri=URI.createPlatformResourceURI(WORKSPACE_PATH + FILENAME,false);
  try {
    definitionsFile=util.getResourceSet().getResource(uri,true);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + uri);
    }
  }
 catch (  RuntimeException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (definitionsFile == null) {
    needCopy=true;
    uri=URI.createPlatformPluginURI(PLUGIN_PATH,false);
    try {
      definitionsFile=util.getResourceSet().getResource(uri,true);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + uri);
      }
    }
 catch (    RuntimeException e) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  if (definitionsFile == null) {
    definitionsFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + PLUGIN_PATH),true);
  }
  if (definitionsFile == null) {
    log.error(""String_Node_Str"" + PLUGIN_PATH + ""String_Node_Str""+ uri);
    return null;
  }
  return definitionsFile;
}","private Resource getResourceFromFile(){
  EMFUtil util=new EMFUtil();
  Resource definitionsFile=null;
  IPath definitionPath=ResourceManager.getLibrariesFolder().getFullPath().append(FILENAME);
  URI uri=URI.createPlatformResourceURI(definitionPath.toString(),false);
  try {
    definitionsFile=util.getResourceSet().getResource(uri,true);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + uri);
    }
  }
 catch (  RuntimeException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (definitionsFile == null) {
    needCopy=true;
    uri=URI.createPlatformPluginURI(PLUGIN_PATH,false);
    try {
      definitionsFile=util.getResourceSet().getResource(uri,true);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + uri);
      }
    }
 catch (    RuntimeException e) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  if (definitionsFile == null) {
    definitionsFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + PLUGIN_PATH),true);
  }
  if (definitionsFile == null) {
    log.error(""String_Node_Str"" + PLUGIN_PATH + ""String_Node_Str""+ uri);
    return null;
  }
  return definitionsFile;
}",0.922337870296237
139196,"/** 
 * DOC scorreia Comment method ""initSoftwareDeploymentResource"".
 * @return
 */
private Resource initSoftwareDeploymentResource(){
  URI sUri=URI.createPlatformResourceURI(""String_Node_Str"" + ReponsitoryContextBridge.getProjectName() + ""String_Node_Str""+ SoftwaredeploymentPackage.eNAME,false);
  Resource resource=resourceSet.getResource(sUri,false);
  if (resource == null) {
    resource=resourceSet.createResource(sUri);
  }
  return resource;
}","/** 
 * DOC scorreia Comment method ""initSoftwareDeploymentResource"".
 * @return
 */
private Resource initSoftwareDeploymentResource(){
  String softwareFile=""String_Node_Str"" + SoftwaredeploymentPackage.eNAME;
  String softwarePath=ResourceManager.getLibrariesFolder().getFullPath().append(softwareFile).toString();
  URI sUri=URI.createPlatformResourceURI(softwarePath,false);
  Resource resource=resourceSet.getResource(sUri,false);
  if (resource == null) {
    resource=resourceSet.createResource(sUri);
  }
  return resource;
}",0.713272543059777
139197,"protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,getMetadataTitle(),""String_Node_Str"");
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(NAME_LABEL,parent);
  nameText.setTextLimit(EmfHelper.getStringMaxSize(CorePackage.Literals.MODEL_ELEMENT__NAME,200));
  purposeText=createMetadataTextFiled(PURPOSE_LABEL,parent);
  purposeText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.PURPOSE,200));
  toolkit.createLabel(parent,DESCRIPTION_LABEL);
  descriptionText=toolkit.createText(parent,null,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  GridDataFactory.fillDefaults().hint(META_FIELD_WIDTH,60).applyTo(descriptionText);
  descriptionText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.DESCRIPTION,200));
  authorText=createMetadataTextFiled(AUTHOR_LABEL,parent);
  if (!isDefaultProject()) {
    authorText.setEnabled(false);
    authorText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
  toolkit.createLabel(parent,STATUS_LABEL);
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  String statusValue=DevelopmentStatus.DRAFT.getLiteral();
  TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.DEV_STATUS,getCurrentModelElement(this.getEditor()).getTaggedValue());
  if (taggedValue != null) {
    statusValue=taggedValue.getValue();
  }
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    List<String> statusArray=MetadataHelper.toArray(statusList);
    String[] tempString=new String[statusList.size()];
    statusCombo.setItems(statusArray.toArray(tempString));
    if (statusArray.contains(statusValue)) {
      statusCombo.remove(statusValue);
      statusCombo.add(statusValue,0);
    }
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusCombo.add(status.getLiteral());
    }
    statusCombo.add(statusValue,0);
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  section.setClient(parent);
  return section;
}","protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,getMetadataTitle(),""String_Node_Str"");
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(NAME_LABEL,parent);
  nameText.setTextLimit(EmfHelper.getStringMaxSize(CorePackage.Literals.MODEL_ELEMENT__NAME,200));
  purposeText=createMetadataTextFiled(PURPOSE_LABEL,parent);
  purposeText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.PURPOSE,200));
  toolkit.createLabel(parent,DESCRIPTION_LABEL);
  descriptionText=toolkit.createText(parent,null,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  GridDataFactory.fillDefaults().hint(META_FIELD_WIDTH,60).applyTo(descriptionText);
  descriptionText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.DESCRIPTION,200));
  authorText=createMetadataTextFiled(AUTHOR_LABEL,parent);
  if (!ReponsitoryContextBridge.isDefautProject()) {
    authorText.setEnabled(false);
    authorText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
  toolkit.createLabel(parent,STATUS_LABEL);
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  String statusValue=DevelopmentStatus.DRAFT.getLiteral();
  TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.DEV_STATUS,getCurrentModelElement(this.getEditor()).getTaggedValue());
  if (taggedValue != null) {
    statusValue=taggedValue.getValue();
  }
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    List<String> statusArray=MetadataHelper.toArray(statusList);
    String[] tempString=new String[statusList.size()];
    statusCombo.setItems(statusArray.toArray(tempString));
    if (statusArray.contains(statusValue)) {
      statusCombo.remove(statusValue);
      statusCombo.add(statusValue,0);
    }
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusCombo.add(status.getLiteral());
    }
    statusCombo.add(statusValue,0);
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  section.setClient(parent);
  return section;
}",0.995557074504443
139198,"public void createControl(Composite parent){
  if (getParameter().getFolderProvider() == null || getParameter().getFolderProvider().isNull()) {
    FolderProvider defaultFolder=new FolderProvider();
    defaultFolder.setFolderResource(getStoredFolder());
    getParameter().setFolderProvider(defaultFolder);
  }
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setTextLimit(EmfHelper.getStringMaxSize(CorePackage.Literals.MODEL_ELEMENT__NAME,200));
  Label purposeLab=new Label(container,SWT.NONE);
  purposeLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  purposeText=new Text(container,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.PURPOSE,200));
  Label descriptionLab=new Label(container,SWT.NONE);
  descriptionLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.DESCRIPTION,200));
  Label authorLab=new Label(container,SWT.NONE);
  authorLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  authorText=new Text(container,SWT.BORDER);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  String author=ReponsitoryContextBridge.getAuthor();
  authorText.setText(author);
  getParameter().setAuthor(author);
  authorText.setEnabled(isDefaultProject());
  Label statusLab=new Label(container,SWT.NONE);
  statusLab.setText(""String_Node_Str"");
  statusText=new CCombo(container,SWT.BORDER);
  statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    String[] tempString=new String[statusList.size()];
    statusText.setItems(MetadataHelper.toArray(statusList).toArray(tempString));
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusText.add(status.getLiteral());
    }
  }
  statusText.select(0);
  getParameter().setStatus(statusText.getText());
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createExtendedControl(container);
  addListeners();
  setControl(container);
}","public void createControl(Composite parent){
  if (getParameter().getFolderProvider() == null || getParameter().getFolderProvider().isNull()) {
    FolderProvider defaultFolder=new FolderProvider();
    defaultFolder.setFolderResource(getStoredFolder());
    getParameter().setFolderProvider(defaultFolder);
  }
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setTextLimit(EmfHelper.getStringMaxSize(CorePackage.Literals.MODEL_ELEMENT__NAME,200));
  Label purposeLab=new Label(container,SWT.NONE);
  purposeLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  purposeText=new Text(container,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.PURPOSE,200));
  Label descriptionLab=new Label(container,SWT.NONE);
  descriptionLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.DESCRIPTION,200));
  Label authorLab=new Label(container,SWT.NONE);
  authorLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  authorText=new Text(container,SWT.BORDER);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  String author=ReponsitoryContextBridge.getAuthor();
  authorText.setText(author);
  getParameter().setAuthor(author);
  authorText.setEnabled(ReponsitoryContextBridge.isDefautProject());
  Label statusLab=new Label(container,SWT.NONE);
  statusLab.setText(""String_Node_Str"");
  statusText=new CCombo(container,SWT.BORDER);
  statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    String[] tempString=new String[statusList.size()];
    statusText.setItems(MetadataHelper.toArray(statusList).toArray(tempString));
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusText.add(status.getLiteral());
    }
  }
  statusText.select(0);
  getParameter().setStatus(statusText.getText());
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createExtendedControl(container);
  addListeners();
  setControl(container);
}",0.9962867752070836
139199,"public void recomputeIndicators(){
  correlationAnalysisHandler=new ColumnCorrelationAnalysisHandler();
  correlationAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=correlationAnalysisHandler.getStringDataFilter();
  analyzedColumns=correlationAnalysisHandler.getAnalyzedColumns();
  CountAvgNullIndicator currentCountAvgNullIndicator;
  if (correlationAnalysisHandler.getIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    currentCountAvgNullIndicator=columnsetFactory.createCountAvgNullIndicator();
    columnSetMultiIndicator=currentCountAvgNullIndicator;
  }
 else {
    columnSetMultiIndicator=(ColumnSetMultiValueIndicator)correlationAnalysisHandler.getIndicator();
  }
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    DataminingType dataminingType=correlationAnalysisHandler.getDatamingType(tdColumn);
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,tdColumn);
  }
}","public void recomputeIndicators(){
  correlationAnalysisHandler=new ColumnCorrelationAnalysisHandler();
  correlationAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=correlationAnalysisHandler.getStringDataFilter();
  analyzedColumns=correlationAnalysisHandler.getAnalyzedColumns();
  CountAvgNullIndicator currentCountAvgNullIndicator;
  if (correlationAnalysisHandler.getIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    currentCountAvgNullIndicator=columnsetFactory.createCountAvgNullIndicator();
    currentCountAvgNullIndicator.setRowCountIndicator(IndicatorsFactory.eINSTANCE.createRowCountIndicator());
    currentCountAvgNullIndicator.setDistinctCountIndicator(IndicatorsFactory.eINSTANCE.createDistinctCountIndicator());
    currentCountAvgNullIndicator.setDuplicateCountIndicator(IndicatorsFactory.eINSTANCE.createDuplicateCountIndicator());
    currentCountAvgNullIndicator.setUniqueCountIndicator(IndicatorsFactory.eINSTANCE.createUniqueCountIndicator());
    columnSetMultiIndicator=currentCountAvgNullIndicator;
  }
 else {
    columnSetMultiIndicator=(ColumnSetMultiValueIndicator)correlationAnalysisHandler.getIndicator();
  }
  initializeIndicator(columnSetMultiIndicator);
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    DataminingType dataminingType=correlationAnalysisHandler.getDatamingType(tdColumn);
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,tdColumn);
  }
}",0.8103821196827685
139200,"public void recomputeIndicators(){
  columnSetAnalysisHandler=new ColumnSetAnalysisHandler();
  columnSetAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=columnSetAnalysisHandler.getStringDataFilter();
  analyzedColumns=columnSetAnalysisHandler.getAnalyzedColumns();
  SimpleStatIndicator ssIndicator;
  if (columnSetAnalysisHandler.getIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ssIndicator=columnsetFactory.createSimpleStatIndicator();
    simpleStatIndicator=ssIndicator;
  }
 else {
    simpleStatIndicator=(SimpleStatIndicator)columnSetAnalysisHandler.getIndicator();
  }
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    MetadataHelper.setDataminingType(DataminingType.NOMINAL,tdColumn);
  }
}","public void recomputeIndicators(){
  columnSetAnalysisHandler=new ColumnSetAnalysisHandler();
  columnSetAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=columnSetAnalysisHandler.getStringDataFilter();
  analyzedColumns=columnSetAnalysisHandler.getAnalyzedColumns();
  if (columnSetAnalysisHandler.getIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    simpleStatIndicator=columnsetFactory.createSimpleStatIndicator();
    simpleStatIndicator.setRowCountIndicator(IndicatorsFactory.eINSTANCE.createRowCountIndicator());
    simpleStatIndicator.setDistinctCountIndicator(IndicatorsFactory.eINSTANCE.createDistinctCountIndicator());
    simpleStatIndicator.setDuplicateCountIndicator(IndicatorsFactory.eINSTANCE.createDuplicateCountIndicator());
    simpleStatIndicator.setUniqueCountIndicator(IndicatorsFactory.eINSTANCE.createUniqueCountIndicator());
  }
 else {
    simpleStatIndicator=(SimpleStatIndicator)columnSetAnalysisHandler.getIndicator();
  }
  initializeIndicator(simpleStatIndicator);
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    MetadataHelper.setDataminingType(DataminingType.NOMINAL,tdColumn);
  }
}",0.6864330637915543
139201,"protected void evalSchemaIndicLow(final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final Catalog tdCatalog,final TdSchema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=tdCatalog != null;
  String catName=hasCatalog ? tdCatalog.getName() : null;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  TableBuilder tableBuilder=new TableBuilder(connection);
  int tableCount=0;
  final String[] tablePatterns=tablePattern != null && tablePattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.tablePattern,FILTER_SEP) : new String[]{this.tablePattern};
  for (  String pat : tablePatterns) {
    String trimPat=pat != null && !""String_Node_Str"".equals(pat) ? pat.trim() : null;
    List<? extends NamedColumnSet> tables=tableBuilder.getColumnSets(catName,schemaName,trimPat);
    for (    NamedColumnSet t : tables) {
      tableCount++;
      evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
    }
  }
  schemaIndic.setTableCount(tableCount);
  ViewBuilder viewBuilder=new ViewBuilder(connection);
  int viewCount=0;
  final String[] viewPatterns=viewPattern != null && viewPattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.viewPattern,FILTER_SEP) : new String[]{this.viewPattern};
  for (  String pat : viewPatterns) {
    String trimPat=pat != null && !""String_Node_Str"".equals(pat) ? pat.trim() : pat;
    List<? extends NamedColumnSet> views=viewBuilder.getColumnSets(catName,schemaName,trimPat);
    for (    NamedColumnSet t : views) {
      viewCount++;
      evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
    }
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema) {
    this.addToConnectionIndicator(catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(schemaIndic);
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
}","protected void evalSchemaIndicLow(final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final Catalog tdCatalog,final TdSchema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=tdCatalog != null;
  String catName=hasCatalog ? tdCatalog.getName() : null;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  TableBuilder tableBuilder=new TableBuilder(connection);
  int tableCount=0;
  final String[] tablePatterns=tablePattern != null && tablePattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.tablePattern,FILTER_SEP) : new String[]{this.tablePattern};
  for (  String pat : tablePatterns) {
    String trimPat=pat != null && !""String_Node_Str"".equals(pat) ? pat.trim().toUpperCase() : null;
    List<? extends NamedColumnSet> tables=tableBuilder.getColumnSets(catName,schemaName,trimPat);
    for (    NamedColumnSet t : tables) {
      tableCount++;
      evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
    }
  }
  schemaIndic.setTableCount(tableCount);
  ViewBuilder viewBuilder=new ViewBuilder(connection);
  int viewCount=0;
  final String[] viewPatterns=viewPattern != null && viewPattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.viewPattern,FILTER_SEP) : new String[]{this.viewPattern};
  for (  String pat : viewPatterns) {
    String trimPat=pat != null && !""String_Node_Str"".equals(pat) ? pat.trim().toUpperCase() : null;
    List<? extends NamedColumnSet> views=viewBuilder.getColumnSets(catName,schemaName,trimPat);
    for (    NamedColumnSet t : views) {
      viewCount++;
      evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
    }
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema) {
    this.addToConnectionIndicator(catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(schemaIndic);
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
}",0.9929901862607652
139202,"/** 
 * DOC bZhou Comment method ""getElementPath"".
 * @param property
 * @return
 */
public static IPath getElementPath(Property property){
  TDQItem item=(TDQItem)property.getItem();
  IPath proPath=getItemWorkspaceBasePath(item);
  proPath=proPath.append(item.getState().getPath());
  proPath=proPath.append(item.getFilename());
  return proPath;
}","/** 
 * DOC bZhou Comment method ""getElementPath"".
 * @param property
 * @return
 */
public static IPath getElementPath(Property property){
  TDQItem item=(TDQItem)property.getItem();
  IPath proPath=getItemWorkspaceBasePath(property);
  proPath=proPath.append(item.getState().getPath());
  proPath=proPath.append(item.getFilename());
  return proPath;
}",0.9829545454545454
139203,"/** 
 * DOC bZhou Comment method ""getItemWorkspaceBasePath"".
 * @param fileExtension
 * @return
 */
public static IPath getItemWorkspaceBasePath(String fileExtension){
  IPath itemBasePath=getItemBasePath(fileExtension);
  return ResourceManager.getRootProject().getFolder(itemBasePath).getFullPath();
}","/** 
 * DOC bZhou Comment method ""getItemWorkspaceBasePath"".
 * @param property
 * @return
 */
public static IPath getItemWorkspaceBasePath(Property property){
  IPath itemBasePath=getItemTypedPath(property);
  return ResourceManager.getRootProject().getFolder(itemBasePath).getFullPath();
}",0.835016835016835
139204,"/** 
 * DOC bZhou Comment method ""updateProperty"".
 * @param elementResource
 * @param propertyResource
 */
private void updateProperty(final Resource elementResource,Resource propertyResource){
  EList<EObject> contents=propertyResource.getContents();
  Property property=(Property)EcoreUtil.getObjectByType(contents,PropertiesPackage.eINSTANCE.getProperty());
  if (property != null) {
    URI elementURI=elementResource.getURI();
    String fileExtension=elementURI.fileExtension();
    IPath path=new Path(elementURI.toPlatformString(true));
    path=path.makeRelativeTo(PropertyHelper.getItemWorkspaceBasePath(fileExtension));
    path=path.removeLastSegments(1);
    property.getItem().getState().setPath(path.toString());
  }
  URI desUri=elementResource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  EMFSharedResources.getInstance().saveToUri(propertyResource,desUri.trimSegments(1));
}","/** 
 * DOC bZhou Comment method ""updateProperty"".
 * @param elementResource
 * @param propertyResource
 */
private void updateProperty(final Resource elementResource,Resource propertyResource){
  EList<EObject> contents=propertyResource.getContents();
  Property property=(Property)EcoreUtil.getObjectByType(contents,PropertiesPackage.eINSTANCE.getProperty());
  if (property != null) {
    URI elementURI=elementResource.getURI();
    IPath path=new Path(elementURI.toPlatformString(true));
    path=path.makeRelativeTo(PropertyHelper.getItemWorkspaceBasePath(property));
    path=path.removeLastSegments(1);
    property.getItem().getState().setPath(path.toString());
  }
  URI desUri=elementResource.getURI().trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  EMFSharedResources.getInstance().saveToUri(propertyResource,desUri.trimSegments(1));
}",0.8952590959206174
139205,"public void initPath(ItemRecord resource,String destination){
  this.resource=resource;
  if (resource != null) {
    IPath itemResPath=new Path(resource.getFile().getAbsolutePath());
    IPath propResPath=new Path(resource.getPropertyFilePath());
    Object propOBJ=retrieveEObject(propResPath,PropertiesPackage.eINSTANCE.getProperty());
    if (propOBJ != null) {
      Property property=(Property)propOBJ;
      InternalEObject author=(InternalEObject)property.getAuthor();
      if (author != null) {
        Resource projResource=author.eResource();
        if (projResource != null) {
          URI projectUri=projResource.getURI();
          IPath projectPath=new Path(projectUri.toFileString());
          if (projectPath.toFile().exists()) {
            Object projOBJ=retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
            if (projOBJ != null) {
              Project project=(Project)projOBJ;
              resource.setProjectName(project.getLabel());
            }
          }
        }
      }
      IPath itemDesPath=PropertyHelper.getElementPath(property);
      itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemDesPath).getLocation();
      IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
      resMap.put(itemResPath,itemDesPath);
      resMap.put(propResPath,propDesPath);
    }
  }
}","public void initPath(ItemRecord resource,String destination){
  this.resource=resource;
  if (resource != null) {
    IPath itemResPath=new Path(resource.getFile().getAbsolutePath());
    IPath propResPath=new Path(resource.getPropertyFilePath());
    Object propOBJ=EObjectHelper.retrieveEObject(propResPath,PropertiesPackage.eINSTANCE.getProperty());
    if (propOBJ != null) {
      Property property=(Property)propOBJ;
      InternalEObject author=(InternalEObject)property.getAuthor();
      if (author != null) {
        Resource projResource=author.eResource();
        if (projResource != null) {
          URI projectUri=projResource.getURI();
          IPath projectPath=new Path(projectUri.toFileString());
          if (projectPath.toFile().exists()) {
            Object projOBJ=EObjectHelper.retrieveEObject(projectPath,PropertiesPackage.eINSTANCE.getProject());
            if (projOBJ != null) {
              Project project=(Project)projOBJ;
              resource.setProjectName(project.getLabel());
            }
          }
        }
      }
      IPath itemDesPath=PropertyHelper.getElementPath(property);
      itemDesPath=ResourcesPlugin.getWorkspace().getRoot().getFile(itemDesPath).getLocation();
      IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
      resMap.put(itemResPath,itemDesPath);
      resMap.put(propResPath,propDesPath);
    }
  }
}",0.9901269393511988
139206,"@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  if (!(target instanceof IResource)) {
    return Status.CANCEL_STATUS;
  }
  IResource targetRes=(IResource)target;
  for (  IResource res : getSelectedResources()) {
    if (res.getType() == IResource.FILE) {
      IFile sourceFile=(IFile)res;
switch (targetRes.getType()) {
case IResource.FOLDER:
        IFolder targetFolder=(IFolder)targetRes;
      if (ResourceService.allowDND(sourceFile,targetFolder)) {
        return Status.OK_STATUS;
      }
    break;
case IResource.FILE:
  IFile targetFile=(IFile)targetRes;
if (FactoriesUtil.isAnalysisFile(sourceFile.getFileExtension()) && FactoriesUtil.isReportFile(targetFile.getFileExtension())) {
  return Status.OK_STATUS;
}
break;
default :
break;
}
}
}
return Status.CANCEL_STATUS;
}","@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  if (!(target instanceof IResource)) {
    return Status.CANCEL_STATUS;
  }
  IResource targetRes=(IResource)target;
  for (  IResource res : getSelectedResources()) {
    if (res.getType() == IResource.FILE) {
      IFile sourceFile=(IFile)res;
switch (targetRes.getType()) {
case IResource.FOLDER:
        IFolder targetFolder=(IFolder)targetRes;
      if (allowDND(sourceFile,targetFolder)) {
        return Status.OK_STATUS;
      }
    break;
case IResource.FILE:
  IFile targetFile=(IFile)targetRes;
if (FactoriesUtil.isAnalysisFile(sourceFile.getFileExtension()) && FactoriesUtil.isReportFile(targetFile.getFileExtension())) {
  return Status.OK_STATUS;
}
break;
default :
break;
}
}
}
return Status.CANCEL_STATUS;
}",0.9903147699757868
139207,"/** 
 * DOC bZhou Comment method ""getOneFolder"".
 * @param file
 * @return null if can't find.
 */
static IFolder getOneFolder(IFile file){
}","/** 
 * DOC bZhou Comment method ""getFolder"".
 * @param name
 * @return
 */
public static IFolder getOneFolder(EResourceConstant constant){
}",0.7588652482269503
139208,"/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  String absolutePath=file.getAbsolutePath();
  boolean tdqProject=false;
  File[] listFiles=file.listFiles();
  if (listFiles != null) {
    for (    File afile : listFiles) {
      if (StringUtils.equals(afile.getName(),""String_Node_Str"")) {
        tdqProject=true;
        break;
      }
    }
  }
  return absolutePath.indexOf(EResourceConstant.DATA_PROFILING.getName()) > 0 || absolutePath.indexOf(EResourceConstant.LIBRARIES.getName()) > 0 || absolutePath.indexOf(EResourceConstant.METADATA.getName()) > 0 || StringUtils.equals(file.getName(),""String_Node_Str"") || tdqProject;
}","/** 
 * DOC bZhou Comment method ""isTOPFile"".
 * @param file
 * @return
 */
private boolean isValidDirectory(File file){
  String absolutePath=file.getAbsolutePath();
  boolean tdqProject=false;
  File[] listFiles=file.listFiles();
  if (listFiles != null) {
    for (    File afile : listFiles) {
      if (StringUtils.equals(afile.getName(),""String_Node_Str"")) {
        tdqProject=true;
        break;
      }
    }
  }
  return absolutePath.indexOf(EResourceConstant.DATA_PROFILING.getName()) > 0 || absolutePath.indexOf(EResourceConstant.LIBRARIES.getName()) > 0 || absolutePath.indexOf(EResourceConstant.METADATA.getName()) > 0 || StringUtils.equals(file.getName(),ReponsitoryContextBridge.PROJECT_DEFAULT_NAME) || tdqProject;
}",0.9597222222222224
139209,"public void write() throws IOException, CoreException {
  for (  IPath resPath : resMap.keySet()) {
    File resFile=resPath.toFile();
    File desFile=resMap.get(resPath).toFile();
    if (!desFile.exists()) {
      FilesUtils.copyFile(resFile,desFile);
      String oldProjectLabel=resource.getProjectName() == null ? ""String_Node_Str"" : resource.getProjectName();
      String curProjectLabel=ResourceManager.getRootProjectName();
      if (!StringUtils.equals(oldProjectLabel,curProjectLabel)) {
        String content=FileUtils.readFileToString(desFile);
        content=StringUtils.replace(content,""String_Node_Str"" + oldProjectLabel + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
        FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
      }
    }
 else {
      log.warn(desFile.getAbsoluteFile() + ""String_Node_Str"");
    }
  }
}","public void write() throws IOException, CoreException {
  for (  IPath resPath : resMap.keySet()) {
    File resFile=resPath.toFile();
    File desFile=resMap.get(resPath).toFile();
    if (!desFile.exists()) {
      FilesUtils.copyFile(resFile,desFile);
      String oldProjectLabel=resource.getProjectName() == null ? ReponsitoryContextBridge.PROJECT_DEFAULT_NAME : resource.getProjectName();
      String curProjectLabel=ResourceManager.getRootProjectName();
      if (!StringUtils.equals(oldProjectLabel,curProjectLabel)) {
        String content=FileUtils.readFileToString(desFile);
        content=StringUtils.replace(content,""String_Node_Str"" + oldProjectLabel + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
        FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
      }
    }
 else {
      log.warn(desFile.getAbsoluteFile() + ""String_Node_Str"");
    }
  }
}",0.9677777777777776
139210,"private void createNewLineWithJavaUDI(){
  EList<TaggedValue> tvs=definition.getTaggedValue();
  String classNameStr=null;
  String jarPathStr=""String_Node_Str"";
  for (  TaggedValue tv : tvs) {
    if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
      classNameStr=tv.getValue();
      continue;
    }
    if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
      jarPathStr=tv.getValue();
    }
  }
  if (classNameStr == null) {
    return;
  }
  final Composite lineComp=new Composite(expressionComp,SWT.NONE);
  lineComp.setLayout(new GridLayout(2,false));
  final CCombo combo=new CCombo(lineComp,SWT.BORDER);
  combo.setLayoutData(new GridData());
  ((GridData)combo.getLayoutData()).widthHint=150;
  combo.setEditable(false);
  combo.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
  combo.setText(PatternLanguageType.JAVA.getName());
  combo.addSelectionListener(new LangCombSelectionListener());
  tempExpressionMap.put(combo,BooleanExpressionHelper.createExpression(combo.getText(),null));
  Composite detailComp=new Composite(combo.getParent(),SWT.NONE);
  widgetMap.put(combo,detailComp);
  detailComp.setLayout(new GridLayout(4,false));
  Text classNameText=new Text(detailComp,SWT.BORDER);
  classNameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)classNameText.getLayoutData()).widthHint=250;
  classNameText.setText(classNameStr);
  classNameText.addModifyListener(new NeedToSetDirtyListener());
  final Text jarPathText=new Text(detailComp,SWT.BORDER);
  jarPathText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)jarPathText.getLayoutData()).widthHint=350;
  jarPathText.setText(jarPathStr);
  jarPathText.addModifyListener(new NeedToSetDirtyListener());
  Button button=new Button(detailComp,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(combo.getParent().getShell(),SWT.NONE);
      dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      String path=dialog.open();
      if (path != null) {
        jarPathText.setText(path);
      }
    }
  }
);
  combo.setData(PluginConstant.CLASS_NAME_TEXT,classNameText);
  combo.setData(PluginConstant.JAR_FILE_PATH,jarPathText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
}","private void createNewLineWithJavaUDI(){
  EList<TaggedValue> tvs=definition.getTaggedValue();
  String classNameStr=null;
  String jarPathStr=""String_Node_Str"";
  for (  TaggedValue tv : tvs) {
    if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
      classNameStr=tv.getValue();
      continue;
    }
    if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
      jarPathStr=tv.getValue();
    }
  }
  if (classNameStr == null) {
    return;
  }
  final Composite lineComp=new Composite(expressionComp,SWT.NONE);
  lineComp.setLayout(new GridLayout(2,false));
  final CCombo combo=new CCombo(lineComp,SWT.BORDER);
  combo.setLayoutData(new GridData());
  ((GridData)combo.getLayoutData()).widthHint=150;
  combo.setEditable(false);
  combo.setItems(allDBTypeList.toArray(new String[allDBTypeList.size()]));
  combo.setText(PatternLanguageType.JAVA.getName());
  combo.addSelectionListener(new LangCombSelectionListener());
  tempExpressionMap.put(combo,BooleanExpressionHelper.createExpression(combo.getText(),null));
  Composite detailComp=new Composite(combo.getParent(),SWT.NONE);
  widgetMap.put(combo,detailComp);
  detailComp.setLayout(new GridLayout(4,false));
  Text classNameText=new Text(detailComp,SWT.BORDER);
  classNameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)classNameText.getLayoutData()).widthHint=250;
  classNameText.setText(classNameStr);
  classNameText.addModifyListener(new NeedToSetDirtyListener());
  final Text jarPathText=new Text(detailComp,SWT.BORDER);
  jarPathText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)jarPathText.getLayoutData()).widthHint=350;
  jarPathText.setText(jarPathStr);
  jarPathText.addModifyListener(new NeedToSetDirtyListener());
  Button button=new Button(detailComp,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(combo.getParent().getShell(),SWT.NONE);
      dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      String path=dialog.open();
      if (path != null) {
        jarPathText.setText(path);
      }
    }
  }
);
  combo.setData(PluginConstant.CLASS_NAME_TEXT,classNameText);
  combo.setData(PluginConstant.JAR_FILE_PATH,jarPathText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
}",0.9963488843813388
139211,"private void updateOtherCombos(CCombo combo){
  rebuildRemainDBTypeList();
  Collection<CCombo> allCombos=tempExpressionMap.keySet();
  for (  CCombo cb : allCombos) {
    if (combo != cb) {
      String tx=cb.getText();
      cb.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
      cb.setText(tx);
    }
  }
}","/** 
 * DOC xqliu Comment method ""updateOtherCombos"". MOD xqliu 2010-03-23 feature 11201
 * @param combo
 */
private void updateOtherCombos(CCombo combo){
  Collection<CCombo> allCombos=tempExpressionMap.keySet();
  for (  CCombo cb : allCombos) {
    if (combo != cb) {
      String tx=cb.getText();
      cb.setItems(allDBTypeList.toArray(new String[allDBTypeList.size()]));
      cb.setText(tx);
    }
  }
}",0.2439678284182305
139212,"@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (!checkBeforeSave())   return;
  EList<Expression> expressions=definition.getSqlGenericExpression();
  expressions.clear();
  Iterator<CCombo> it=tempExpressionMap.keySet().iterator();
  CCombo javaUIDCombo=null;
  while (it.hasNext()) {
    CCombo cb=it.next();
    if (cb.getText().equals(PatternLanguageType.JAVA.getName())) {
      javaUIDCombo=cb;
    }
 else     if (tempExpressionMap.get(cb).getBody() != null && !PluginConstant.EMPTY_STRING.equals(tempExpressionMap.get(cb).getBody())) {
      expressions.add(tempExpressionMap.get(cb));
    }
  }
  EList<TaggedValue> tvs=definition.getTaggedValue();
  if (javaUIDCombo != null) {
    boolean isNewTaggedValue=true;
    for (    TaggedValue tv : tvs) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        tv.setValue(((Text)javaUIDCombo.getData(PluginConstant.CLASS_NAME_TEXT)).getText());
        isNewTaggedValue=false;
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        tv.setValue(((Text)javaUIDCombo.getData(PluginConstant.JAR_FILE_PATH)).getText());
      }
    }
    if (isNewTaggedValue) {
      TaggedValue classNameTV=TaggedValueHelper.createTaggedValue(PluginConstant.CLASS_NAME_TEXT,((Text)javaUIDCombo.getData(PluginConstant.CLASS_NAME_TEXT)).getText());
      TaggedValue jarPathTV=TaggedValueHelper.createTaggedValue(PluginConstant.JAR_FILE_PATH,((Text)javaUIDCombo.getData(PluginConstant.JAR_FILE_PATH)).getText());
      definition.getTaggedValue().add(classNameTV);
      definition.getTaggedValue().add(jarPathTV);
    }
  }
 else {
    TaggedValue tvCN=null;
    TaggedValue tvJARP=null;
    for (    TaggedValue tv : tvs) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        tvCN=tv;
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        tvJARP=tv;
      }
    }
    if (tvCN != null) {
      tvs.remove(tvCN);
    }
    if (tvJARP != null) {
      tvs.remove(tvJARP);
    }
  }
  if (hasAggregateExpression) {
    EList<Expression> aggregate1argFunctions=definition.getAggregate1argFunctions();
    aggregate1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getAggregateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        aggregate1argFunctions.add(expression);
      }
    }
  }
  if (hasDateExpression) {
    EList<Expression> date1argFunctions=definition.getDate1argFunctions();
    date1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getDateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        date1argFunctions.add(expression);
      }
    }
  }
  if (hasCharactersMapping) {
    EList<CharactersMapping> charactersMappings=definition.getCharactersMapping();
    charactersMappings.clear();
    for (    CharactersMapping cm : charactersMappingMapTemp.values()) {
      String c=cm.getCharactersToReplace();
      String r=cm.getReplacementCharacters();
      if (checkMappingString(c,r)) {
        charactersMappings.add(cm);
      }
 else {
        MessageUI.openError(""String_Node_Str"" + cm.getLanguage() + ""String_Node_Str"");
        return;
      }
    }
  }
  ReturnCode rc=UDIHelper.validate(definition);
  if (rc.isOk()) {
    UDIResourceFileHelper.getInstance().save(definition);
    this.isDirty=false;
  }
 else {
    MessageDialog.openError(null,""String_Node_Str"",rc.getMessage());
  }
}","@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (!checkBeforeSave())   return;
  EList<Expression> expressions=definition.getSqlGenericExpression();
  expressions.clear();
  Iterator<CCombo> it=tempExpressionMap.keySet().iterator();
  CCombo javaUIDCombo=null;
  while (it.hasNext()) {
    CCombo cb=it.next();
    if (cb.getText().equals(PatternLanguageType.JAVA.getName())) {
      javaUIDCombo=cb;
    }
 else     if (tempExpressionMap.get(cb).getBody() != null && !PluginConstant.EMPTY_STRING.equals(tempExpressionMap.get(cb).getBody())) {
      expressions.add(tempExpressionMap.get(cb));
    }
  }
  EList<TaggedValue> tvs=definition.getTaggedValue();
  if (javaUIDCombo != null) {
    boolean isNewTaggedValue=true;
    for (    TaggedValue tv : tvs) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        tv.setValue(((Text)javaUIDCombo.getData(PluginConstant.CLASS_NAME_TEXT)).getText());
        isNewTaggedValue=false;
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        tv.setValue(((Text)javaUIDCombo.getData(PluginConstant.JAR_FILE_PATH)).getText());
      }
    }
    if (isNewTaggedValue) {
      TaggedValue classNameTV=TaggedValueHelper.createTaggedValue(PluginConstant.CLASS_NAME_TEXT,((Text)javaUIDCombo.getData(PluginConstant.CLASS_NAME_TEXT)).getText());
      TaggedValue jarPathTV=TaggedValueHelper.createTaggedValue(PluginConstant.JAR_FILE_PATH,((Text)javaUIDCombo.getData(PluginConstant.JAR_FILE_PATH)).getText());
      definition.getTaggedValue().add(classNameTV);
      definition.getTaggedValue().add(jarPathTV);
    }
  }
 else {
    TaggedValue tvCN=null;
    TaggedValue tvJARP=null;
    for (    TaggedValue tv : tvs) {
      if (tv.getTag().equals(PluginConstant.CLASS_NAME_TEXT)) {
        tvCN=tv;
        continue;
      }
      if (tv.getTag().equals(PluginConstant.JAR_FILE_PATH)) {
        tvJARP=tv;
      }
    }
    if (tvCN != null) {
      tvs.remove(tvCN);
    }
    if (tvJARP != null) {
      tvs.remove(tvJARP);
    }
  }
  if (hasAggregateExpression) {
    EList<Expression> aggregate1argFunctions=definition.getAggregate1argFunctions();
    aggregate1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getAggregateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        aggregate1argFunctions.add(expression);
      }
    }
  }
  if (hasDateExpression) {
    EList<Expression> date1argFunctions=definition.getDate1argFunctions();
    date1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getDateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        date1argFunctions.add(expression);
      }
    }
  }
  if (hasCharactersMapping) {
    EList<CharactersMapping> charactersMappings=definition.getCharactersMapping();
    charactersMappings.clear();
    for (    CharactersMapping cm : charactersMappingMapTemp.values()) {
      String c=cm.getCharactersToReplace();
      String r=cm.getReplacementCharacters();
      if (checkMappingString(c,r)) {
        charactersMappings.add(cm);
      }
 else {
        MessageUI.openError(""String_Node_Str"" + cm.getLanguage() + ""String_Node_Str"");
        return;
      }
    }
  }
  ReturnCode rc=UDIHelper.validate(definition);
  if (rc.isOk()) {
    UDIResourceFileHelper.getInstance().save(definition);
    initTempExpressionList(definition);
    initTempExpressionMap();
    definitionComp=createDefinitionComp(definitionSection);
    definitionSection.setClient(definitionComp);
    definitionSection.pack();
    definitionSection.redraw();
    this.isDirty=false;
  }
 else {
    MessageDialog.openError(null,""String_Node_Str"",rc.getMessage());
  }
}",0.9684708355228586
139213,"/** 
 * DOC bZhou Comment method ""creatNewLine"". MOD mzhao feature 11128 Be able to add Java UDI, 2010-01-27
 * @param expression
 */
private void createNewLine(){
  final Composite lineComp=new Composite(expressionComp,SWT.NONE);
  lineComp.setLayout(new GridLayout(5,false));
  final CCombo combo=new CCombo(lineComp,SWT.BORDER);
  combo.setLayoutData(new GridData());
  ((GridData)combo.getLayoutData()).widthHint=150;
  combo.setEditable(false);
  combo.setItems(allDBTypeList.toArray(new String[allDBTypeList.size()]));
  combo.select(0);
  combo.addSelectionListener(new LangCombSelectionListener());
  createDbVersionText(combo,lineComp,null,30);
  Expression expression=BooleanExpressionHelper.createExpression(combo.getText(),null);
  tempExpressionMap.put(combo,expression);
  if (combo.getText().equals(PatternLanguageType.JAVA.getName())) {
    updateLineForJava(combo);
  }
 else {
    updateLineForExpression(combo);
  }
  updateOtherCombos(combo);
}","/** 
 * DOC bZhou Comment method ""creatNewLine"". MOD mzhao feature 11128 Be able to add Java UDI, 2010-01-27
 * @param expression
 */
private void createNewLine(){
  final Composite lineComp=new Composite(expressionComp,SWT.NONE);
  lineComp.setLayout(new GridLayout(5,false));
  final CCombo combo=new CCombo(lineComp,SWT.BORDER);
  combo.setLayoutData(new GridData());
  ((GridData)combo.getLayoutData()).widthHint=150;
  combo.setEditable(false);
  combo.setItems(allDBTypeList.toArray(new String[allDBTypeList.size()]));
  combo.select(0);
  combo.addSelectionListener(new LangCombSelectionListener());
  createDbVersionText(combo,lineComp,null,30);
  Expression expression=BooleanExpressionHelper.createExpression(combo.getText(),null);
  tempExpressionMap.put(combo,expression);
  if (combo.getText().equals(PatternLanguageType.JAVA.getName())) {
    updateLineForJava(combo);
  }
 else {
    updateLineForExpression(combo,expression);
  }
  updateOtherCombos(combo);
}",0.9943269726663228
139214,"private void createAddButton(final Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      rebuildRemainDBTypeList();
      createNewLine();
      definitionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
}","private void createAddButton(final Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      createNewLine();
      definitionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
}",0.9731489015459724
139215,"private void updateLineForJava(final CCombo combo){
  Composite detailComp=widgetMap.get(combo);
  if (detailComp != null) {
    detailComp.dispose();
  }
  detailComp=new Composite(combo.getParent(),SWT.NONE);
  widgetMap.put(combo,detailComp);
  detailComp.setLayout(new GridLayout(4,false));
  Text classNameText=new Text(detailComp,SWT.BORDER);
  classNameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  classNameText.addModifyListener(new NeedToSetDirtyListener());
  ((GridData)classNameText.getLayoutData()).widthHint=250;
  final Text jarPathText=new Text(detailComp,SWT.BORDER);
  jarPathText.setLayoutData(new GridData(GridData.FILL_BOTH));
  jarPathText.addModifyListener(new NeedToSetDirtyListener());
  ((GridData)jarPathText.getLayoutData()).widthHint=350;
  Button button=new Button(detailComp,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(combo.getParent().getShell(),SWT.NONE);
      dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      String path=dialog.open();
      if (path != null) {
        jarPathText.setText(path);
      }
    }
  }
);
  combo.setData(PluginConstant.CLASS_NAME_TEXT,classNameText);
  combo.setData(PluginConstant.JAR_FILE_PATH,jarPathText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
  definitionSection.setExpanded(false);
  definitionSection.setExpanded(true);
}","/** 
 * DOC mzhao Comment method ""updateLineForJava"".
 * @param combo
 */
private void updateLineForJava(final CCombo combo){
  Composite detailComp=widgetMap.get(combo);
  if (detailComp != null) {
    detailComp.dispose();
  }
  detailComp=new Composite(combo.getParent(),SWT.NONE);
  widgetMap.put(combo,detailComp);
  detailComp.setLayout(new GridLayout(4,false));
  Text classNameText=new Text(detailComp,SWT.BORDER);
  classNameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  classNameText.addModifyListener(new NeedToSetDirtyListener());
  ((GridData)classNameText.getLayoutData()).widthHint=250;
  final Text jarPathText=new Text(detailComp,SWT.BORDER);
  jarPathText.setLayoutData(new GridData(GridData.FILL_BOTH));
  jarPathText.addModifyListener(new NeedToSetDirtyListener());
  ((GridData)jarPathText.getLayoutData()).widthHint=350;
  Button button=new Button(detailComp,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(combo.getParent().getShell(),SWT.NONE);
      dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      String path=dialog.open();
      if (path != null) {
        jarPathText.setText(path);
      }
    }
  }
);
  combo.setData(PluginConstant.CLASS_NAME_TEXT,classNameText);
  combo.setData(PluginConstant.JAR_FILE_PATH,jarPathText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
  definitionSection.setExpanded(false);
  definitionSection.setExpanded(true);
}",0.9771039603960396
139216,"public void widgetSelected(SelectionEvent e){
  rebuildRemainDBTypeList();
  createNewLine();
  definitionSection.setExpanded(true);
  setDirty(true);
}","public void widgetSelected(SelectionEvent e){
  createNewLine();
  definitionSection.setExpanded(true);
  setDirty(true);
}",0.8945454545454545
139217,"private void updateLineForExpression(final CCombo combo){
  Composite detailComp=widgetMap.get(combo);
  if (detailComp != null) {
    detailComp.dispose();
  }
  detailComp=new Composite(combo.getParent(),SWT.NONE);
  widgetMap.put(combo,detailComp);
  detailComp.setLayout(new GridLayout(3,false));
  final Text patternText=new Text(detailComp,SWT.BORDER);
  patternText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)patternText.getLayoutData()).widthHint=600;
  patternText.addModifyListener(new ExpressTextModListener(combo));
  createExpressionEditButton(detailComp,patternText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
  detailComp.getParent().layout();
  definitionSection.setExpanded(false);
  definitionSection.setExpanded(true);
}","/** 
 * DOC xqliu Comment method ""updateLineForExpression"". // MOD xqliu 2010-03-23 feature 11201
 * @param combo
 * @param expression
 */
private void updateLineForExpression(final CCombo combo,Expression expression){
  Composite detailComp=widgetMap.get(combo);
  if (detailComp != null) {
    detailComp.dispose();
  }
  detailComp=new Composite(combo.getParent(),SWT.NONE);
  widgetMap.put(combo,detailComp);
  detailComp.setLayout(new GridLayout(3,false));
  final Text patternText=new Text(detailComp,SWT.BORDER);
  patternText.setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)patternText.getLayoutData()).widthHint=600;
  patternText.addModifyListener(new ExpressTextModListener(combo));
  patternText.setText(expression.getBody() == null ? ""String_Node_Str"" : expression.getBody());
  createExpressionEditButton(detailComp,patternText);
  createExpressionDelButton(detailComp,combo);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(detailComp);
  detailComp.getParent().layout();
  definitionSection.setExpanded(false);
  definitionSection.setExpanded(true);
}",0.8698734177215189
139218,"/** 
 * DOC bZhou Comment method ""createPatternDefinitionComp"". MOD mzhao feature 11128 Be able to add Java UDI, 2010-01-27
 * @param definitionSection
 * @return
 */
private Composite createDefinitionComp(Composite definitionSection){
  Composite composite=toolkit.createComposite(definitionSection);
  composite.setLayout(new GridLayout());
  expressionComp=new Composite(composite,SWT.NONE);
  expressionComp.setLayout(new GridLayout());
  expressionComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  addTitleComp(expressionComp);
  if (tempExpressionMap.size() == 0) {
    if (definition != null) {
      EList<Expression> expList=definition.getSqlGenericExpression();
      for (      Expression expression : expList) {
        createNewLineWithExpression(expression);
      }
      createNewLineWithJavaUDI();
    }
  }
  createAddButton(composite);
  return composite;
}","/** 
 * DOC bZhou Comment method ""createPatternDefinitionComp"". MOD mzhao feature 11128 Be able to add Java UDI, 2010-01-27
 * @param definitionSection
 * @return
 */
private Composite createDefinitionComp(Composite definitionSection){
  Composite composite=toolkit.createComposite(definitionSection);
  composite.setLayout(new GridLayout());
  expressionComp=new Composite(composite,SWT.NONE);
  expressionComp.setLayout(new GridLayout());
  expressionComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  addTitleComp(expressionComp);
  if (tempExpressionMap.size() == 0) {
    if (definition != null) {
      for (      Expression expression : tempExpressionList) {
        createNewLineWithExpression(expression);
      }
      createNewLineWithJavaUDI();
    }
  }
  createAddButton(composite);
  return composite;
}",0.9208211143695014
139219,"@Override public void initialize(FormEditor editor){
  super.initialize(editor);
  String[] supportTypes=PatternLanguageType.getAllLanguageTypes();
  allDBTypeList=new ArrayList<String>();
  allDBTypeList.addAll(Arrays.asList(supportTypes));
  remainDBTypeList=new ArrayList<String>();
  remainDBTypeList.addAll(allDBTypeList);
  remainDBTypeListAF=new ArrayList<String>();
  remainDBTypeListAF.addAll(allDBTypeList);
  remainDBTypeListCM=new ArrayList<String>();
  remainDBTypeListCM.addAll(allDBTypeList);
  if (tempExpressionMap == null) {
    tempExpressionMap=new HashMap<CCombo,Expression>();
  }
 else {
    tempExpressionMap.clear();
  }
  if (widgetMap == null) {
    widgetMap=new HashMap<CCombo,Composite>();
  }
 else {
    widgetMap.clear();
  }
  definition=(IndicatorDefinition)getCurrentModelElement(getEditor());
  if (definition != null && definition.getCategories().size() > 0) {
    category=definition.getCategories().get(0);
  }
 else {
    category=DefinitionHandler.getInstance().getUserDefinedCountIndicatorCategory();
  }
  if (definition != null) {
    hasAggregateExpression=definition.getAggregate1argFunctions().size() > 0;
    hasDateExpression=definition.getDate1argFunctions().size() > 0;
    hasCharactersMapping=definition.getCharactersMapping().size() > 0;
  }
  systemIndicator=this.getEditor().getEditorInput() instanceof IndicatorEditorInput;
  afExpressionMap=new HashMap<String,AggregateDateExpression>();
  afExpressionMapTemp=new HashMap<String,AggregateDateExpression>();
  charactersMappingMap=new HashMap<String,CharactersMapping>();
  charactersMappingMapTemp=new HashMap<String,CharactersMapping>();
}","@Override public void initialize(FormEditor editor){
  super.initialize(editor);
  String[] supportTypes=PatternLanguageType.getAllLanguageTypes();
  allDBTypeList=new ArrayList<String>();
  allDBTypeList.addAll(Arrays.asList(supportTypes));
  remainDBTypeListAF=new ArrayList<String>();
  remainDBTypeListAF.addAll(allDBTypeList);
  remainDBTypeListCM=new ArrayList<String>();
  remainDBTypeListCM.addAll(allDBTypeList);
  initTempExpressionMap();
  if (widgetMap == null) {
    widgetMap=new HashMap<CCombo,Composite>();
  }
 else {
    widgetMap.clear();
  }
  definition=(IndicatorDefinition)getCurrentModelElement(getEditor());
  if (definition != null && definition.getCategories().size() > 0) {
    category=definition.getCategories().get(0);
  }
 else {
    category=DefinitionHandler.getInstance().getUserDefinedCountIndicatorCategory();
  }
  if (definition != null) {
    hasAggregateExpression=definition.getAggregate1argFunctions().size() > 0;
    hasDateExpression=definition.getDate1argFunctions().size() > 0;
    hasCharactersMapping=definition.getCharactersMapping().size() > 0;
  }
  systemIndicator=this.getEditor().getEditorInput() instanceof IndicatorEditorInput;
  afExpressionMap=new HashMap<String,AggregateDateExpression>();
  afExpressionMapTemp=new HashMap<String,AggregateDateExpression>();
  charactersMappingMap=new HashMap<String,CharactersMapping>();
  charactersMappingMapTemp=new HashMap<String,CharactersMapping>();
  initTempExpressionList(definition);
}",0.900923861102262
139220,"/** 
 * DOC xqliu Comment method ""isMdmConnection"".
 * @param connection
 * @return
 */
public static boolean isMdmConnection(TdProviderConnection connection){
  TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.DBTYPE,connection.getTaggedValue());
  if (tv != null) {
    return SupportDBUrlType.MDM.getDBKey().equals(tv.getValue());
  }
  return false;
}","/** 
 * DOC xqliu Comment method ""isMdmConnection"".
 * @param connection
 * @return
 */
public static boolean isMdmConnection(DataProvider dataprovider){
  ProviderConnection providerConnection=DataProviderHelper.getTdProviderConnection(dataprovider).getObject();
  if (providerConnection != null) {
    return isMdmConnection(providerConnection);
  }
  return false;
}",0.5748987854251012
139221,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new ModelElementTreeMenuProvider(tree).createTreeMenu();
      }
      System.out.println(1);
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new ModelElementTreeMenuProvider(tree).createTreeMenu();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}",0.9922974767596282
139222,"/** 
 * DOC yyi 7466 2010-03-22 change the order of appearence of indicators
 * @param newTree
 * @param step
 */
protected void moveSelectedElements(Tree newTree,int step){
  TreeItem[] selection=newTree.getSelection();
  boolean moved=false;
  for (  TreeItem item : selection) {
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      IndicatorUnit[] units=data.getIndicatorUnits();
      int index=-1;
      for (int i=0; i < units.length; i++) {
        if (indicatorUnit == units[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < modelElementIndicators.length) {
        Indicator[] inds=new Indicator[units.length];
        for (int i=0; i < units.length; i++) {
          inds[i]=units[i].getIndicator();
        }
        Indicator tmpIndicator=inds[index + step];
        inds[index + step]=inds[index];
        inds[index]=tmpIndicator;
        data.setIndicators(inds);
        moved=true;
      }
    }
 else {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      int index=-1;
      for (int i=0; i < modelElementIndicators.length; i++) {
        if (data == modelElementIndicators[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < modelElementIndicators.length) {
        ModelElementIndicator tmpElement=modelElementIndicators[index + step];
        modelElementIndicators[index + step]=modelElementIndicators[index];
        modelElementIndicators[index]=tmpElement;
        moved=true;
      }
    }
  }
  if (moved)   setElements(modelElementIndicators);
}","/** 
 * DOC yyi 7466 2010-03-22 change the order of appearence of indicators
 * @param newTree
 * @param step
 */
protected void moveSelectedElements(Tree newTree,int step){
  TreeItem[] selection=newTree.getSelection();
  boolean moved=false;
  for (  TreeItem item : selection) {
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      IndicatorUnit[] units=data.getIndicatorUnits();
      int index=-1;
      for (int i=0; i < units.length; i++) {
        if (indicatorUnit == units[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < units.length) {
        Indicator[] inds=new Indicator[units.length];
        for (int i=0; i < units.length; i++) {
          inds[i]=units[i].getIndicator();
        }
        Indicator tmpIndicator=inds[index + step];
        inds[index + step]=inds[index];
        inds[index]=tmpIndicator;
        data.setIndicators(inds);
        moved=true;
      }
    }
 else {
      ModelElementIndicator data=(ModelElementIndicator)item.getData(MODELELEMENT_INDICATOR_KEY);
      int index=-1;
      for (int i=0; i < modelElementIndicators.length; i++) {
        if (data == modelElementIndicators[i]) {
          index=i;
          break;
        }
      }
      if (index + step > -1 && index + step < modelElementIndicators.length) {
        ModelElementIndicator tmpElement=modelElementIndicators[index + step];
        modelElementIndicators[index + step]=modelElementIndicators[index];
        modelElementIndicators[index]=tmpElement;
        moved=true;
      }
    }
  }
  if (moved)   setElements(modelElementIndicators);
}",0.9930226067541168
139223,"/** 
 * DOC bZhou Comment method ""decorateCategoryPlot"".
 * @param chart
 */
public static void decorateCategoryPlot(JFreeChart chart){
  CategoryPlot plot=chart.getCategoryPlot();
  CategoryItemRenderer render=plot.getRenderer();
  CategoryAxis domainAxis=plot.getDomainAxis();
  ValueAxis valueAxis=plot.getRangeAxis();
  Font font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
  if (render instanceof BarRenderer) {
    int rowCount=chart.getCategoryPlot().getDataset().getRowCount();
    domainAxis.setTickLabelFont(new Font(""String_Node_Str"",Font.PLAIN,10));
    domainAxis.setUpperMargin(0.1);
    domainAxis.setMaximumCategoryLabelLines(2);
    ((BarRenderer)render).setItemMargin(-0.50 * rowCount);
  }
}","/** 
 * DOC bZhou Comment method ""decorateCategoryPlot"".
 * @param chart
 */
public static void decorateCategoryPlot(JFreeChart chart){
  CategoryPlot plot=chart.getCategoryPlot();
  CategoryItemRenderer render=plot.getRenderer();
  CategoryAxis domainAxis=plot.getDomainAxis();
  ValueAxis valueAxis=plot.getRangeAxis();
  Font font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
  if (render instanceof BarRenderer) {
    int rowCount=chart.getCategoryPlot().getDataset().getRowCount();
    domainAxis.setTickLabelFont(new Font(""String_Node_Str"",Font.PLAIN,10));
    domainAxis.setUpperMargin(0.1);
    domainAxis.setMaximumCategoryLabelLines(3);
    ((BarRenderer)render).setItemMargin(-0.50 * rowCount);
  }
}",0.9993006993006992
139224,"@Override public void create(){
  super.create();
  getShell().setText(TITLE);
  boolean isBlock=Platform.getPreferencesService().getBoolean(CorePlugin.PLUGIN_ID,WebBrowserPreferencePage.BLOCK_WEB_BROWSER,true,new IScopeContext[]{new InstanceScope()});
  if (!isBlock) {
    showHelp();
  }
}","@Override public void create(){
  super.create();
  getShell().setText(TITLE);
  if (!DQPreferenceManager.isBlockWeb()) {
    showHelp();
  }
}",0.5977011494252874
139225,"public void openIndicatorSelectDialog(Shell shell){
  final IndicatorSelectDialog dialog=new IndicatorSelectDialog(shell,DefaultMessagesImpl.getString(""String_Node_Str""),modelElementIndicators);
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    @Override public void shellActivated(    ShellEvent e){
      dialog.getShell().setFocus();
      IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorSelectorHelpContextID());
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
    }
  }
);
  if (dialog.open() == Window.OK) {
    ModelElementIndicator[] result=dialog.getResult();
    for (    ModelElementIndicator modelElementIndicator : result) {
      modelElementIndicator.storeTempIndicator();
    }
    this.setElements(result);
    return;
  }
}","public void openIndicatorSelectDialog(Shell shell){
  final IndicatorSelectDialog dialog=new IndicatorSelectDialog(shell,DefaultMessagesImpl.getString(""String_Node_Str""),modelElementIndicators);
  dialog.create();
  if (!DQPreferenceManager.isBlockWeb()) {
    dialog.getShell().addShellListener(new ShellAdapter(){
      @Override public void shellActivated(      ShellEvent e){
        dialog.getShell().setFocus();
        IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorSelectorHelpContextID());
        PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
      }
    }
);
  }
  if (dialog.open() == Window.OK) {
    ModelElementIndicator[] result=dialog.getResult();
    for (    ModelElementIndicator modelElementIndicator : result) {
      modelElementIndicator.storeTempIndicator();
    }
    this.setElements(result);
    return;
  }
}",0.9630064591896652
139226,"/** 
 * DOC bZhou Comment method ""showHelp"".
 */
public void showHelp(){
  boolean isBlock=Platform.getPreferencesService().getBoolean(CorePlugin.PLUGIN_ID,WebBrowserPreferencePage.BLOCK_WEB_BROWSER,true,new IScopeContext[]{new InstanceScope()});
  if (isValidHref(href) && !isBlock) {
    if (getTray() == null) {
      openTray(new HelpTray());
    }
    ((HelpTray)getTray()).getHelpPart().showURL(href);
  }
}","/** 
 * DOC bZhou Comment method ""showHelp"".
 */
public void showHelp(){
  if (isValidHref(href) && !DQPreferenceManager.isBlockWeb()) {
    if (getTray() == null) {
      openTray(new HelpTray());
    }
    ((HelpTray)getTray()).getHelpPart().showURL(href);
  }
}",0.638109305760709
139227,"private void createSimpleStatistics(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  dataset.addValue(columnSetMultiValueIndicator.getRowCountIndicator().getCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  dataset.addValue(columnSetMultiValueIndicator.getDistinctCountIndicator().getDistinctValueCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  dataset.addValue(columnSetMultiValueIndicator.getDuplicateCountIndicator().getDuplicateValueCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  dataset.addValue(columnSetMultiValueIndicator.getUniqueCountIndicator().getUniqueValueCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  JFreeChart chart=TopChartFactory.createBarChart(DefaultMessagesImpl.getString(""String_Node_Str""),dataset,true);
  if (chart != null) {
    Plot plot=chart.getPlot();
    if (plot instanceof CategoryPlot) {
      ChartDecorator.decorateCategoryPlot(chart);
      ((CategoryPlot)plot).getRenderer().setSeriesPaint(0,ChartDecorator.IndiBindColor.INDICATOR_ROW_COUNT.getColor());
      ((CategoryPlot)plot).getRenderer().setSeriesPaint(1,ChartDecorator.IndiBindColor.INDICATOR_DISTINCT_COUNT.getColor());
      ((CategoryPlot)plot).getRenderer().setSeriesPaint(2,ChartDecorator.IndiBindColor.INDICATOR_UNIQUE_COUNT.getColor());
      ((CategoryPlot)plot).getRenderer().setSeriesPaint(3,ChartDecorator.IndiBindColor.INDICATOR_DUPLICATE_COUNT.getColor());
    }
  }
  ChartComposite chartComp=new ChartComposite(composite,SWT.NONE,chart);
  chartComp.setLayoutData(new GridData(GridData.FILL_BOTH));
}","private void createSimpleStatistics(final ScrolledForm form,final Composite composite){
  List<IndicatorUnit> units=new ArrayList<IndicatorUnit>();
  units.add(new IndicatorUnit(IndicatorEnum.RowCountIndicatorEnum,simpleStatIndicator.getRowCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DistinctCountIndicatorEnum,simpleStatIndicator.getDistinctCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DuplicateCountIndicatorEnum,simpleStatIndicator.getDuplicateCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.UniqueIndicatorEnum,simpleStatIndicator.getUniqueCountIndicator(),null));
  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(EIndicatorChartType.SIMPLE_STATISTICS,units);
  JFreeChart chart=chartTypeState.getChart();
  ChartDecorator.decorate(chart);
  if (chart != null) {
    ChartComposite cc=new ChartComposite(composite,SWT.NONE,chart,true);
    GridData gd=new GridData();
    gd.widthHint=PluginConstant.CHART_STANDARD_WIDHT;
    gd.heightHint=PluginConstant.CHART_STANDARD_HEIGHT;
    cc.setLayoutData(gd);
  }
}",0.139178844815588
139228,"public void createPreviewCharts(final ScrolledForm form,final Composite parentComp,final boolean isCreate){
  Section previewSection=createSection(form,parentComp,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  previewSection.setLayoutData(new GridData(480,300));
  Composite sectionClient=toolkit.createComposite(previewSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite simpleComposite=toolkit.createComposite(sectionClient);
  simpleComposite.setLayout(new GridLayout(1,true));
  simpleComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSimpleStatistics(form,simpleComposite,getSimpleStatIndicator());
  previewSection.setClient(sectionClient);
}","public void createPreviewCharts(final ScrolledForm form,final Composite parentComp,final boolean isCreate){
  Section previewSection=createSection(form,parentComp,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  previewSection.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(previewSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite simpleComposite=toolkit.createComposite(sectionClient);
  simpleComposite.setLayout(new GridLayout(1,true));
  simpleComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSimpleStatistics(form,simpleComposite);
  previewSection.setClient(sectionClient);
}",0.6746532156368222
139229,"private Section createTableSectionPart(Composite parentComp,String title,ColumnSetMultiValueIndicator columnSetMultiIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  sectionTableComp.setLayout(new GridLayout());
  TableViewer columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
  Table table=columnsElementViewer.getTable();
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  List<String> tableColumnNames=columnSetMultiIndicator.getColumnHeaders();
  for (  String tableColumnName : tableColumnNames) {
    final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
    columnHeader.setText(tableColumnName);
  }
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  TableSectionViewerProvider provider=new TableSectionViewerProvider();
  List<Object[]> tableRows=columnSetMultiIndicator.getListRows();
  columnsElementViewer.setContentProvider(provider);
  columnsElementViewer.setLabelProvider(provider);
  columnsElementViewer.setInput(tableRows);
  for (int i=0; i < tableColumnNames.size(); i++) {
    table.getColumn(i).pack();
  }
  columnSetElementSection.setClient(sectionTableComp);
  addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  return columnSetElementSection;
}","private Section createTableSectionPart(Composite parentComp,String title,ColumnSetMultiValueIndicator columnSetMultiIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  sectionTableComp.setLayout(new GridLayout());
  TableViewer columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
  Table table=columnsElementViewer.getTable();
  List<String> tableColumnNames=columnSetMultiIndicator.getColumnHeaders();
  for (  String tableColumnName : tableColumnNames) {
    final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
    columnHeader.setText(tableColumnName);
  }
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  TableSectionViewerProvider provider=new TableSectionViewerProvider();
  List<Object[]> tableRows=columnSetMultiIndicator.getListRows();
  columnsElementViewer.setContentProvider(provider);
  columnsElementViewer.setLabelProvider(provider);
  columnsElementViewer.setInput(tableRows);
  for (int i=0; i < tableColumnNames.size(); i++) {
    table.getColumn(i).pack();
  }
  columnSetElementSection.setClient(sectionTableComp);
  setupTableGridDataLimitedSize(table,tableRows.size());
  addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  return columnSetElementSection;
}",0.961564396493594
139230,"private Section createSimpleStatisticsPart(Composite parentComp,String title,SimpleStatIndicator simpleStatIndicator){
  Section section=createSection(form,parentComp,title,DefaultMessagesImpl.getString(""String_Node_Str""));
  section.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  Composite simpleComposite=toolkit.createComposite(sectionClient);
  simpleComposite.setLayout(new GridLayout(2,true));
  simpleComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSimpleTable2(form,simpleComposite,simpleStatIndicator);
  section.setClient(sectionClient);
  return section;
}","private Section createSimpleStatisticsPart(Composite parentComp,String title,SimpleStatIndicator simpleStatIndicator){
  Section section=createSection(form,parentComp,title,null);
  section.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  Composite simpleComposite=toolkit.createComposite(sectionClient);
  simpleComposite.setLayout(new GridLayout(2,true));
  simpleComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  createSimpleTable2(form,simpleComposite,simpleStatIndicator);
  section.setClient(sectionClient);
  return section;
}",0.9682539682539684
139231,"private Section createTableSectionPart(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  sectionTableComp.setLayout(new GridLayout());
  TableViewer columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
  Table table=columnsElementViewer.getTable();
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  List<String> tableColumnNames=ssIndicator.getColumnHeaders();
  for (  String tableColumnName : tableColumnNames) {
    final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
    columnHeader.setText(tableColumnName);
  }
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  TableSectionViewerProvider provider=new TableSectionViewerProvider();
  List<Object[]> tableRows=ssIndicator.getListRows();
  columnsElementViewer.setContentProvider(provider);
  columnsElementViewer.setLabelProvider(provider);
  columnsElementViewer.setInput(tableRows);
  for (int i=0; i < tableColumnNames.size(); i++) {
    table.getColumn(i).pack();
  }
  columnSetElementSection.setClient(sectionTableComp);
  addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  return columnSetElementSection;
}","private Section createTableSectionPart(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  sectionTableComp.setLayout(new GridLayout());
  TableViewer columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
  Table table=columnsElementViewer.getTable();
  List<String> tableColumnNames=ssIndicator.getColumnHeaders();
  for (  String tableColumnName : tableColumnNames) {
    final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
    columnHeader.setText(tableColumnName);
  }
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  TableSectionViewerProvider provider=new TableSectionViewerProvider();
  List<Object[]> tableRows=ssIndicator.getListRows();
  columnsElementViewer.setContentProvider(provider);
  columnsElementViewer.setLabelProvider(provider);
  columnsElementViewer.setInput(tableRows);
  for (int i=0; i < tableColumnNames.size(); i++) {
    table.getColumn(i).pack();
  }
  columnSetElementSection.setClient(sectionTableComp);
  setupTableGridDataLimitedSize(table,tableRows.size());
  addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  return columnSetElementSection;
}",0.9603616133518776
139232,"@Override public void mouseDown(MouseEvent e){
  if (table.getMenu() != null) {
    table.getMenu().setVisible(false);
  }
  ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    if (dataEntity == null) {
      return;
    }
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      if (ExecutionLanguage.JAVA != currentEngine) {
        MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.getLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              DataManager connection=analysis.getContext().getConnection();
              TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(connection);
              String query=itemEntity.getQuery();
              String editorName=indicator.getName();
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
          if (isPatternFrequencyIndicator(indicator)) {
            MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
            itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
            itemCreatePatt.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                PatternTransformer pattTransformer=new PatternTransformer(language);
                createPattern(analysis,itemEntity,pattTransformer);
              }
            }
);
          }
        }
        if (PluginChecker.isTDCPLoaded()) {
          final IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
          if (service != null) {
            service.setIndicator(indicator);
            service.setAnalysis(analysis);
            MenuItem item=null;
            if (isDUDIndicator(indicator)) {
              item=new MenuItem(menu,SWT.PUSH);
              item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            }
 else             if (isPatternMatchingIndicator(indicator)) {
              item=new MenuItem(menu,SWT.PUSH);
              item.setText(""String_Node_Str"");
            }
            if (item != null) {
              item.setImage(ImageLib.getImage(ImageLib.ICON_PROCESS));
              item.addSelectionListener(getAdapter(service));
            }
          }
        }
      }
 else       if (isDatePatternFrequencyIndicator(indicator) && ExecutionLanguage.JAVA == currentEngine) {
        final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
        MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
        itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
        itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
        itemCreatePatt.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
            IFolder folder=ResourceManager.getPatternRegexFolder();
            String model=dataEntity.getLabel();
            String regex=dateIndicator.getRegex(model);
            new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",language.getDbmsName()).run();
          }
        }
);
      }
      menu.setVisible(true);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (table.getMenu() != null) {
    table.getMenu().setVisible(false);
  }
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
    if (indicator != null && dataEntity != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      if (!isJAVALanguage) {
        MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.getLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              String query=itemEntity.getQuery();
              String editorName=indicator.getName();
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
          if (isPatternFrequencyIndicator(indicator)) {
            MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
            itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
            itemCreatePatt.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                PatternTransformer pattTransformer=new PatternTransformer(language);
                createPattern(analysis,itemEntity,pattTransformer);
              }
            }
);
          }
        }
        if (PluginChecker.isTDCPLoaded() && !isMDMAnalysis) {
          final IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
          if (service != null) {
            service.setIndicator(indicator);
            service.setAnalysis(analysis);
            MenuItem item=null;
            if (isDUDIndicator(indicator)) {
              item=new MenuItem(menu,SWT.PUSH);
              item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            }
 else             if (isPatternMatchingIndicator(indicator)) {
              item=new MenuItem(menu,SWT.PUSH);
              item.setText(""String_Node_Str"");
            }
            if (item != null) {
              item.setImage(ImageLib.getImage(ImageLib.ICON_PROCESS));
              item.addSelectionListener(getAdapter(service));
            }
          }
        }
      }
 else       if (isDatePatternFrequencyIndicator(indicator) && isJAVALanguage) {
        final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
        MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
        itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
        itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
        itemCreatePatt.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
            IFolder folder=ResourceManager.getPatternRegexFolder();
            String model=dataEntity.getLabel();
            String regex=dateIndicator.getRegex(model);
            new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",language.getDbmsName()).run();
          }
        }
);
      }
      menu.setVisible(true);
    }
  }
}",0.932026792359216
139233,"public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final Table table=tbViewer.getTable();
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        if (dataEntity == null) {
          return;
        }
        final Indicator indicator=dataEntity.getIndicator();
        if (indicator != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          if (ExecutionLanguage.JAVA != currentEngine) {
            MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
            for (            final MenuItemEntity itemEntity : itemEntities) {
              MenuItem item=new MenuItem(menu,SWT.PUSH);
              item.setText(itemEntity.getLabel());
              item.setImage(itemEntity.getIcon());
              item.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  DataManager connection=analysis.getContext().getConnection();
                  TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(connection);
                  String query=itemEntity.getQuery();
                  String editorName=indicator.getName();
                  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
              if (isPatternFrequencyIndicator(indicator)) {
                MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                  @Override public void widgetSelected(                  SelectionEvent e){
                    DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                    PatternTransformer pattTransformer=new PatternTransformer(language);
                    createPattern(analysis,itemEntity,pattTransformer);
                  }
                }
);
              }
            }
            if (PluginChecker.isTDCPLoaded()) {
              final IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
              if (service != null) {
                service.setIndicator(indicator);
                service.setAnalysis(analysis);
                MenuItem item=null;
                if (isDUDIndicator(indicator)) {
                  item=new MenuItem(menu,SWT.PUSH);
                  item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                }
 else                 if (isPatternMatchingIndicator(indicator)) {
                  item=new MenuItem(menu,SWT.PUSH);
                  item.setText(""String_Node_Str"");
                }
                if (item != null) {
                  item.setImage(ImageLib.getImage(ImageLib.ICON_PROCESS));
                  item.addSelectionListener(getAdapter(service));
                }
              }
            }
          }
 else           if (isDatePatternFrequencyIndicator(indicator) && ExecutionLanguage.JAVA == currentEngine) {
            final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
            MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
            itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
            itemCreatePatt.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                IFolder folder=ResourceManager.getPatternRegexFolder();
                String model=dataEntity.getLabel();
                String regex=dateIndicator.getRegex(model);
                new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",language.getDbmsName()).run();
              }
            }
);
          }
          menu.setVisible(true);
        }
      }
    }
    private SelectionAdapter getAdapter(    final IDatabaseJobService service){
      return new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          service.executeJob();
        }
      }
;
    }
  }
);
  TableUtils.addTooltipOnTableItem(table);
}","public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  final boolean isJAVALanguage=ExecutionLanguage.JAVA == currentEngine;
  final Table table=tbViewer.getTable();
  final TdDataProvider tdDataProvider=(TdDataProvider)analysis.getContext().getConnection();
  final boolean isMDMAnalysis=ConnectionUtils.isMdmConnection(tdDataProvider);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
        if (indicator != null && dataEntity != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          if (!isJAVALanguage) {
            MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
            for (            final MenuItemEntity itemEntity : itemEntities) {
              MenuItem item=new MenuItem(menu,SWT.PUSH);
              item.setText(itemEntity.getLabel());
              item.setImage(itemEntity.getIcon());
              item.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  String query=itemEntity.getQuery();
                  String editorName=indicator.getName();
                  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
              if (isPatternFrequencyIndicator(indicator)) {
                MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                  @Override public void widgetSelected(                  SelectionEvent e){
                    DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                    PatternTransformer pattTransformer=new PatternTransformer(language);
                    createPattern(analysis,itemEntity,pattTransformer);
                  }
                }
);
              }
            }
            if (PluginChecker.isTDCPLoaded() && !isMDMAnalysis) {
              final IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
              if (service != null) {
                service.setIndicator(indicator);
                service.setAnalysis(analysis);
                MenuItem item=null;
                if (isDUDIndicator(indicator)) {
                  item=new MenuItem(menu,SWT.PUSH);
                  item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                }
 else                 if (isPatternMatchingIndicator(indicator)) {
                  item=new MenuItem(menu,SWT.PUSH);
                  item.setText(""String_Node_Str"");
                }
                if (item != null) {
                  item.setImage(ImageLib.getImage(ImageLib.ICON_PROCESS));
                  item.addSelectionListener(getAdapter(service));
                }
              }
            }
          }
 else           if (isDatePatternFrequencyIndicator(indicator) && isJAVALanguage) {
            final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
            MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
            itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
            itemCreatePatt.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                IFolder folder=ResourceManager.getPatternRegexFolder();
                String model=dataEntity.getLabel();
                String regex=dateIndicator.getRegex(model);
                new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",language.getDbmsName()).run();
              }
            }
);
          }
          menu.setVisible(true);
        }
      }
    }
    private SelectionAdapter getAdapter(    final IDatabaseJobService service){
      return new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          service.executeJob();
        }
      }
;
    }
  }
);
  TableUtils.addTooltipOnTableItem(table);
}",0.9099215413645844
139234,"/** 
 * DOC Zqin Comment method ""isOutOfRange"".
 * @return
 */
public boolean isOutOfRange(String inputValue){
  outOfRange=false;
  if (inputValue == null || indicator == null) {
    return false;
  }
  IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
switch (indicatorEnum) {
case ModeIndicatorEnum:
    String expectedValue=IndicatorHelper.getExpectedValue(indicator);
  if (expectedValue != null) {
    Boolean ignoreCaseOption=IndicatorHelper.ignoreCaseOption(indicator);
    outOfRange=!StringUtils.equals(value,expectedValue);
    if (ignoreCaseOption) {
      outOfRange=!(ignoreCaseOption && StringUtils.equalsIgnoreCase(value,expectedValue));
    }
  }
break;
default :
outOfRange=checkRange(inputValue);
}
return outOfRange;
}","/** 
 * DOC Zqin Comment method ""isOutOfRange"".
 * @return
 */
public boolean isOutOfRange(String inputValue){
  outOfRange=false;
  if (inputValue == null || indicator == null) {
    return false;
  }
  IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
  if (indicatorEnum != null) {
switch (indicatorEnum) {
case ModeIndicatorEnum:
      String expectedValue=IndicatorHelper.getExpectedValue(indicator);
    if (expectedValue != null) {
      Boolean ignoreCaseOption=IndicatorHelper.ignoreCaseOption(indicator);
      outOfRange=!StringUtils.equals(value,expectedValue);
      if (ignoreCaseOption) {
        outOfRange=!(ignoreCaseOption && StringUtils.equalsIgnoreCase(value,expectedValue));
      }
    }
  break;
default :
outOfRange=checkRange(inputValue);
}
}
return outOfRange;
}",0.9679043423536816
139235,"public boolean isMdmFlag(){
  return mdmFlag;
}","private boolean isMdmFlag(){
  FolderProvider folderProvider=connectionParam.getFolderProvider();
  return folderProvider != null && ResourceManager.isMdmConnectionFolder(folderProvider.getFolderResource());
}",0.2421875
139236,"/** 
 * Constructor for DatabaseWizard. Analyse Iselection to extract DatabaseConnection and the pathToSave. Start the Lock Strategy.
 * @param selection
 * @param existingNames
 */
public DatabaseConnectionWizard(DBConnectionParameter connectionParam){
  this.connectionParam=connectionParam;
  mdmFlag=ResourceManager.isMdmConnectionFolder(connectionParam.getFolderProvider().getFolderResource());
}","/** 
 * Constructor for DatabaseWizard. Analyse Iselection to extract DatabaseConnection and the pathToSave. Start the Lock Strategy.
 * @param selection
 * @param existingNames
 */
public DatabaseConnectionWizard(DBConnectionParameter connectionParam){
  this.connectionParam=connectionParam;
}",0.8477011494252874
139237,"/** 
 * Adding the page to the wizard and set Title, Description and PageComplete.
 */
public void addPages(){
  String winTitle=mdmFlag ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"");
  setWindowTitle(winTitle);
  setDefaultPageImageDescriptor(ImageLib.getImageDescriptor(ImageLib.REFRESH_IMAGE));
  propertiesWizardPage=new DatabaseMetadataWizardPage();
  databaseWizardPage=new DatabaseWizardPage();
  databaseWizardPage.setMdmFlag(mdmFlag);
  String propTitle=mdmFlag ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"");
  String propDesc=DefaultMessagesImpl.getString(""String_Node_Str"");
  propertiesWizardPage.setTitle(propTitle);
  propertiesWizardPage.setDescription(propDesc);
  propertiesWizardPage.setPageComplete(false);
  String dataTitle=mdmFlag ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"");
  String dataDesc=mdmFlag ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"");
  databaseWizardPage.setTitle(dataTitle);
  databaseWizardPage.setDescription(dataDesc);
  try {
    addPage(propertiesWizardPage);
    addPage(databaseWizardPage);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","/** 
 * Adding the page to the wizard and set Title, Description and PageComplete.
 */
public void addPages(){
  String winTitle=isMdmFlag() ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"");
  setWindowTitle(winTitle);
  setDefaultPageImageDescriptor(ImageLib.getImageDescriptor(ImageLib.REFRESH_IMAGE));
  propertiesWizardPage=new DatabaseMetadataWizardPage();
  databaseWizardPage=new DatabaseWizardPage();
  databaseWizardPage.setMdmFlag(isMdmFlag());
  String propTitle=isMdmFlag() ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"");
  String propDesc=DefaultMessagesImpl.getString(""String_Node_Str"");
  propertiesWizardPage.setTitle(propTitle);
  propertiesWizardPage.setDescription(propDesc);
  propertiesWizardPage.setPageComplete(false);
  String dataTitle=isMdmFlag() ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"");
  String dataDesc=isMdmFlag() ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"");
  databaseWizardPage.setTitle(dataTitle);
  databaseWizardPage.setDescription(dataDesc);
  try {
    addPage(propertiesWizardPage);
    addPage(databaseWizardPage);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.98868778280543
139238,"/** 
 * Open a compare editor UI, will clear the information which hasn't relationship with current selected level first(For example: if we compare the catalog level, will clear it's table(view) from every catalog), then will compare current level object.
 * @param rightResource
 * @param oldDataProviderFile
 * @return
 * @throws ReloadCompareException
 */
public static DiffModel openDiffCompareEditor(Resource leftResource,Resource rightResource,Map<String,Object> opt,IUIHandler guiHandler,IFile efmDiffResultFile,String dbName,Object selectedObject,boolean compareEachOther) throws ReloadCompareException {
  MatchModel match=null;
  try {
    match=MatchService.doResourceMatch(leftResource,rightResource,opt);
  }
 catch (  InterruptedException e) {
    throw new ReloadCompareException(e);
  }
  final DiffModel diff=DiffService.doDiff(match);
  final ComparisonResourceSnapshot snapshot=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
  snapshot.setDate(Calendar.getInstance().getTime());
  snapshot.setMatch(match);
  snapshot.setDiff(diff);
  IFile createDiffResourceFile=efmDiffResultFile;
  try {
    final String fullPath=createDiffResourceFile.getLocation().toOSString();
    ModelUtils.save(snapshot,fullPath);
  }
 catch (  IOException e) {
    throw new ReloadCompareException(e);
  }
  if (guiHandler != null) {
    guiHandler.popComparisonUI(createDiffResourceFile.getLocation(),dbName,selectedObject,compareEachOther);
  }
  return diff;
}","/** 
 * Open a compare editor UI, will clear the information which hasn't relationship with current selected level first(For example: if we compare the catalog level, will clear it's table(view) from every catalog), then will compare current level object.
 * @param rightResource
 * @param oldDataProviderFile
 * @return
 * @throws ReloadCompareException
 */
public static DiffModel openDiffCompareEditor(Resource leftResource,Resource rightResource,Map<String,Object> opt,IUIHandler guiHandler,IFile efmDiffResultFile,String dbName,Object selectedObject,boolean compareEachOther) throws ReloadCompareException {
  MatchModel match=null;
  try {
    match=MatchService.doResourceMatch(leftResource,rightResource,opt);
  }
 catch (  InterruptedException e) {
    throw new ReloadCompareException(e);
  }
  final DiffModel diff=DiffService.doDiff(match);
  if (leftResource.getContents() == null || leftResource.getContents().size() == 0) {
    MessageDialog.openError(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),""String_Node_Str"",""String_Node_Str"");
    return null;
  }
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    EList<DiffElement> subDiffElements=de.getSubDiffElements();
    for (    DiffElement difElement : subDiffElements) {
      if (difElement instanceof ModelElementChangeRightTarget) {
        ((ModelElementChangeRightTarget)difElement).setLeftParent(leftResource.getContents().get(0));
      }
    }
  }
  final ComparisonResourceSnapshot snapshot=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
  snapshot.setDate(Calendar.getInstance().getTime());
  snapshot.setMatch(match);
  snapshot.setDiff(diff);
  IFile createDiffResourceFile=efmDiffResultFile;
  try {
    final String fullPath=createDiffResourceFile.getLocation().toOSString();
    ModelUtils.save(snapshot,fullPath);
  }
 catch (  IOException e) {
    throw new ReloadCompareException(e);
  }
  if (guiHandler != null) {
    guiHandler.popComparisonUI(createDiffResourceFile.getLocation(),dbName,selectedObject,compareEachOther);
  }
  return diff;
}",0.8199554069119287
139239,"/** 
 * DOC bZhou Comment method ""getIndicatorPercentValue"".
 * @param indicator
 * @return
 */
public static String getIndicatorPercentValue(Indicator indicator){
  try {
    double userCount=Double.valueOf(getIndicatorValue(indicator));
    double count=Double.valueOf(indicator.getCount());
    return computePercent(userCount,count);
  }
 catch (  NullPointerException e) {
    return null;
  }
}","/** 
 * DOC bZhou Comment method ""getIndicatorPercentValue"".
 * @param indicator, never null
 * @return null in case of error
 */
public static String getIndicatorPercentValue(Indicator indicator){
  try {
    double userCount=NumberFormat.getInstance().parse(getIndicatorValue(indicator)).doubleValue();
    double count=Double.valueOf(indicator.getCount());
    return computePercent(userCount,count);
  }
 catch (  NumberFormatException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
    return null;
  }
catch (  ParseException e) {
    log.warn(""String_Node_Str"" + indicator.getName(),e);
    return null;
  }
}",0.516003879728419
139240,"private static String createStandardNumber(Object input){
  DecimalFormat format=(DecimalFormat)DecimalFormat.getNumberInstance();
  format.applyPattern(""String_Node_Str"");
  try {
    return format.format(new Double(input.toString()));
  }
 catch (  Exception ne) {
    return ""String_Node_Str"";
  }
}","private static String createStandardNumber(Object input){
  return NumberFormat.getInstance().format(input);
}",0.4854368932038835
139241,"/** 
 * Method ""getAnalyzedTable"".
 * @param indicator
 * @return the table name (within quotes)
 */
private String getAnalyzedTable(Indicator indicator){
  return quote(this.catalogOrSchema) + dbms().getDelimiter() + quote(indicator.getAnalyzedElement().getName());
}","/** 
 * Method ""getAnalyzedTable"".
 * @param indicator
 * @return the table name (within quotes)
 */
private String getAnalyzedTable(Indicator indicator){
  String analyzedTableName=null;
  ColumnSet columnSetOwner=(ColumnSet)indicator.getAnalyzedElement();
  if (columnSetOwner == null) {
    log.error(""String_Node_Str"" + indicator.getName());
  }
 else {
    String schemaName=getQuotedSchemaName(columnSetOwner);
    String table=quote(columnSetOwner.getName());
    String catalogName=getQuotedCatalogName(columnSetOwner);
    if (catalogName == null && schemaName != null) {
      final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
      final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
      catalogName=parentCatalog != null ? parentCatalog.getName() : null;
    }
    analyzedTableName=dbms().toQualifiedName(catalogName,schemaName,table);
  }
  return analyzedTableName;
}",0.2916666666666667
139242,"/** 
 * DOC bZhou Comment method ""getPropertyFile"".
 * @param resource
 * @return
 */
private IFile getPropertyFile(Resource resource){
  if (resource != null) {
    EList<EObject> modelElements=resource.getContents();
    ModelElement modelElement=(ModelElement)EcoreUtil.getObjectByType(modelElements,CorePackage.eINSTANCE.getModelElement());
    if (modelElement != null) {
      String propertyPath=MetadataHelper.getPropertyPath(modelElement);
      return (IFile)ResourcesPlugin.getWorkspace().getRoot().findMember(propertyPath);
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""getPropertyFile"".
 * @param resource
 * @return
 */
private IFile getPropertyFile(Resource resource){
  if (resource != null) {
    EList<EObject> modelElements=resource.getContents();
    ModelElement modelElement=(ModelElement)EcoreUtil.getObjectByType(modelElements,CorePackage.eINSTANCE.getModelElement());
    if (modelElement != null) {
      String propertyPath=MetadataHelper.getPropertyPath(modelElement);
      if (propertyPath != null) {
        return (IFile)ResourcesPlugin.getWorkspace().getRoot().findMember(propertyPath);
      }
    }
  }
  return null;
}",0.9623287671232876
139243,"@Override public void processDelta(final IResourceDelta rootDelta){
  final List<IFile> added=new ArrayList<IFile>();
  final List<IFile> removed=new ArrayList<IFile>();
  IResourceDeltaVisitor visitor=new IResourceDeltaVisitor(){
    public boolean visit(    IResourceDelta delta){
      if (delta.getKind() == IResourceDelta.ADDED) {
        IResource resource=delta.getResource();
        if (resource.getType() == IResource.FILE && FactoriesUtil.isEmfFile(resource.getFileExtension())) {
          added.add((IFile)resource);
        }
      }
      if (delta.getKind() == IResourceDelta.REMOVED) {
        IResource resource=delta.getResource();
        if (resource.getType() == IResource.FILE && FactoriesUtil.isEmfFile(resource.getFileExtension())) {
          removed.add((IFile)resource);
        }
      }
      return true;
    }
  }
;
  try {
    rootDelta.accept(visitor);
  }
 catch (  CoreException e1) {
    log.error(e1);
  }
  List<Runnable> refreshedRannables=new ArrayList<Runnable>();
  for (  IFile file : removed) {
    try {
      refreshedRannables.add(getDeleteRunnable(file));
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
  for (  IFile file : added) {
    Resource resource=null;
    try {
      resource=RepResourceFileHelper.getInstance().getFileResource(file);
      refreshedRannables.add(getRefreshRunnable(resource));
    }
 catch (    Exception e) {
      log.error(e);
      e.printStackTrace();
    }
  }
  if (refreshedRannables != null && refreshedRannables.size() > 0) {
    postEventExecute(refreshedRannables);
  }
}","@Override public void processDelta(final IResourceDelta rootDelta){
  final List<IFile> added=new ArrayList<IFile>();
  final List<IFile> removed=new ArrayList<IFile>();
  IResourceDeltaVisitor visitor=new IResourceDeltaVisitor(){
    public boolean visit(    IResourceDelta delta){
      IResource resource=delta.getResource();
      if (FactoriesUtil.isEmfFile(resource.getFileExtension())) {
        if (delta.getKind() == IResourceDelta.ADDED) {
          added.add((IFile)resource);
        }
        if (delta.getKind() == IResourceDelta.REMOVED) {
          removed.add((IFile)resource);
        }
      }
      return true;
    }
  }
;
  try {
    rootDelta.accept(visitor);
  }
 catch (  CoreException e1) {
    log.error(e1);
  }
  List<Runnable> refreshedRannables=new ArrayList<Runnable>();
  for (  IFile file : removed) {
    try {
      refreshedRannables.add(getDeleteRunnable(file));
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
  for (  IFile file : added) {
    Resource resource=null;
    try {
      resource=RepResourceFileHelper.getInstance().getFileResource(file);
      refreshedRannables.add(getRefreshRunnable(resource));
    }
 catch (    Exception e) {
      log.error(e);
      e.printStackTrace();
    }
  }
  if (refreshedRannables != null && refreshedRannables.size() > 0) {
    postEventExecute(refreshedRannables);
  }
}",0.2908474576271186
139244,"public void run(){
  IFile propertyFile=getPropertyFile(resource);
  if (propertyFile != null) {
    Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propertyFile);
    updateProperty(resource,propertyResource);
    updateElement(resource,propertyResource);
    clear(propertyFile);
  }
}","public void run(){
  IFile propertyFile=getPropertyFile(resource);
  if (propertyFile != null) {
    Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propertyFile);
    updateProperty(resource,propertyResource);
    updateElement(resource,propertyResource);
  }
}",0.9589490968801314
139245,"private Runnable getRefreshRunnable(final Resource resource){
  return new Runnable(){
    public void run(){
      IFile propertyFile=getPropertyFile(resource);
      if (propertyFile != null) {
        Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propertyFile);
        updateProperty(resource,propertyResource);
        updateElement(resource,propertyResource);
        clear(propertyFile);
      }
    }
  }
;
}","private Runnable getRefreshRunnable(final Resource resource){
  return new Runnable(){
    public void run(){
      IFile propertyFile=getPropertyFile(resource);
      if (propertyFile != null) {
        Resource propertyResource=RepResourceFileHelper.getInstance().getFileResource(propertyFile);
        updateProperty(resource,propertyResource);
        updateElement(resource,propertyResource);
      }
    }
  }
;
}",0.938869665513264
139246,"public boolean visit(IResourceDelta delta){
  if (delta.getKind() == IResourceDelta.ADDED) {
    IResource resource=delta.getResource();
    if (resource.getType() == IResource.FILE && FactoriesUtil.isEmfFile(resource.getFileExtension())) {
      added.add((IFile)resource);
    }
  }
  if (delta.getKind() == IResourceDelta.REMOVED) {
    IResource resource=delta.getResource();
    if (resource.getType() == IResource.FILE && FactoriesUtil.isEmfFile(resource.getFileExtension())) {
      removed.add((IFile)resource);
    }
  }
  return true;
}","public boolean visit(IResourceDelta delta){
  IResource resource=delta.getResource();
  if (FactoriesUtil.isEmfFile(resource.getFileExtension())) {
    if (delta.getKind() == IResourceDelta.ADDED) {
      added.add((IFile)resource);
    }
    if (delta.getKind() == IResourceDelta.REMOVED) {
      removed.add((IFile)resource);
    }
  }
  return true;
}",0.4733333333333333
139247,"/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 */
public void savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=initProperty(element);
  TDQItem item=initItem(element,property);
  item.setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(property,uri);
}","/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 */
public void savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=initProperty(element);
  TDQItem item=initItem(element,property);
  item.setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(property,uri);
  String propertyPath=property.eResource().getURI().toPlatformString(true);
  MetadataHelper.setPropertyPath(propertyPath,element);
}",0.8580645161290322
139248,"/** 
 * DOC BZhou ColumnNominalWizard constructor comment.
 * @param parameter
 */
public ColumnNominalWizard(AnalysisParameter parameter){
  super(parameter);
}","/** 
 * DOC BZhou ColumnNominalWizard constructor comment.
 * @param parameter
 */
public ColumnNominalWizard(AnalysisParameter parameter){
  super(parameter);
  setIndicator(ColumnsetFactory.eINSTANCE.createWeakCorrelationIndicator());
}",0.8070175438596491
139249,"/** 
 * DOC BZhou ColumnNumbericWizard constructor comment.
 * @param parameter
 */
public ColumnNumbericWizard(AnalysisParameter parameter){
  super(parameter);
}","/** 
 * DOC BZhou ColumnNumbericWizard constructor comment.
 * @param parameter
 */
public ColumnNumbericWizard(AnalysisParameter parameter){
  super(parameter);
  setIndicator(ColumnsetFactory.eINSTANCE.createCountAvgNullIndicator());
}",0.815
139250,"public ColumnSetWizard(AnalysisParameter parameter){
  super(parameter);
}","public ColumnSetWizard(AnalysisParameter parameter){
  super(parameter);
  setIndicator(ColumnsetFactory.eINSTANCE.createSimpleStatIndicator());
}",0.6727272727272727
139251,"public ColumnTimeWizard(AnalysisParameter parameter){
  super(parameter);
}","public ColumnTimeWizard(AnalysisParameter parameter){
  super(parameter);
  setIndicator(ColumnsetFactory.eINSTANCE.createMinMaxDateIndicator());
}",0.6756756756756757
139252,"@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  Indicator indicator=getMatchedIndicator();
  if (indicator != null) {
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
    analysis.getResults().getIndicators().add(indicator);
  }
  return analysis;
}","@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  if (indicator != null) {
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
    analysis.getResults().getIndicators().add(indicator);
  }
  return analysis;
}",0.931297709923664
139253,"/** 
 * Method ""getExpression"".
 * @param patternComponent
 * @param language a language (see DbmsLanguage)
 * @return the expression for the given language or null
 */
public static Expression getExpression(PatternComponent patternComponent,String language){
  if (patternComponent != null && patternComponent.eClass().equals(PatternPackage.eINSTANCE.getRegularExpression())) {
    RegularExpression regExp=(RegularExpression)patternComponent;
    Expression expr=regExp.getExpression();
    if (language.equals(regExp.getExpression().getLanguage())) {
      return expr;
    }
  }
  return null;
}","/** 
 * Method ""getExpression"".
 * @param patternComponent
 * @param language a language (see DbmsLanguage)
 * @return the expression for the given language or null
 */
public static Expression getExpression(PatternComponent patternComponent,String language){
  if (patternComponent != null && patternComponent.eClass().equals(PatternPackage.eINSTANCE.getRegularExpression())) {
    RegularExpression regExp=(RegularExpression)patternComponent;
    Expression expr=regExp.getExpression();
    if (language.equalsIgnoreCase(regExp.getExpression().getLanguage())) {
      return expr;
    }
  }
  return null;
}",0.9917218543046358
139254,"@Override public void run(){
  if (files != null && files.length > 0) {
    for (    IFile file : files) {
      ModelElement oldObject=ModelElementFileFactory.getModelElement(file);
      if (oldObject != null) {
        ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(oldObject);
        newObject=update(oldObject,newObject);
        IFile newFile=getNewFile(file);
        ElementWriterFactory.getInstance().create(newFile.getFileExtension()).save(newObject,newFile);
      }
    }
  }
}","@Override public void run(){
  if (files != null && files.length > 0) {
    for (    IFile file : files) {
      ModelElement oldObject=ModelElementFileFactory.getModelElement(file);
      if (oldObject != null) {
        ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(oldObject);
        newObject=update(oldObject,newObject);
        IFile newFile=getNewFile(file);
        ElementWriterFactory.getInstance().create(newFile.getFileExtension()).save(newObject,newFile);
      }
    }
    CorePlugin.getDefault().refreshDQView();
  }
}",0.958904109589041
139255,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return !FilesUtils.isSVNFolder(folder) && !folder.getName().endsWith(XSD_FOLDER_NAME);
  }
  if (element instanceof IFile && isShowFile) {
    IFile file=(IFile)element;
    return !file.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION);
  }
  return isShowFile;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return !FilesUtils.isSVNFolder(folder) && !folder.getName().endsWith(XSD_FOLDER_NAME) && !folder.getName().endsWith(REPORTS_FOLDER_NAME);
  }
  if (element instanceof IFile && isShowFile) {
    IFile file=(IFile)element;
    return !file.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION);
  }
  return isShowFile;
}",0.9448648648648648
139256,"/** 
 * Method ""containsRowCount"".
 * @param analysis
 * @return true if this analysis contains the row count indicator
 */
public static boolean containsRowCount(Analysis analysis){
  final AnalysisResult results=analysis.getResults();
  if (results == null) {
    return false;
  }
  final EList<Indicator> indicators=results.getIndicators();
  for (  Indicator indicator : indicators) {
    if (IndicatorsPackage.eINSTANCE.getRowCountIndicator().equals(indicator.eClass())) {
      return true;
    }
    if (IndicatorsPackage.eINSTANCE.getCountsIndicator().equals(indicator.eClass())) {
      CountsIndicator cInd=(CountsIndicator)indicator;
      if (cInd.getRowCountIndicator() != null) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Method ""containsRowCount"".
 * @param analysis
 * @return true if this analysis contains the row count indicator
 */
public static boolean containsRowCount(Analysis analysis){
  final AnalysisResult results=analysis.getResults();
  if (results == null) {
    return false;
  }
  final EList<Indicator> indicators=results.getIndicators();
  for (  Indicator indicator : indicators) {
    if (IndicatorsPackage.eINSTANCE.getRowCountIndicator().equals(indicator.eClass())) {
      return true;
    }
    if (IndicatorsPackage.eINSTANCE.getCountsIndicator().equals(indicator.eClass())) {
      CountsIndicator cInd=(CountsIndicator)indicator;
      if (cInd.getRowCountIndicator() != null) {
        return true;
      }
    }
    if (ColumnsetPackage.eINSTANCE.getSimpleStatIndicator().equals(indicator.eClass())) {
      return true;
    }
  }
  return false;
}",0.9288806431663574
139257,"/** 
 * DOC bZhou Comment method ""getModelElement"".
 * @param file
 * @return
 */
public static ModelElement getModelElement(IFile file){
  ModelElement modelElement=null;
  if (FactoriesUtil.isProvFile(file)) {
    TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().findProvider(file);
    modelElement=returnValue.getObject();
  }
 else   if (FactoriesUtil.isAnalysisFile(file)) {
    modelElement=AnaResourceFileHelper.getInstance().findAnalysis(file);
  }
 else   if (FactoriesUtil.isReportFile(file)) {
    modelElement=RepResourceFileHelper.getInstance().findReport(file);
  }
 else   if (FactoriesUtil.isDQRuleFile(file)) {
    modelElement=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
  }
 else   if (FactoriesUtil.isPatternFile(file)) {
    modelElement=PatternResourceFileHelper.getInstance().findPattern(file);
  }
 else   if (FactoriesUtil.isUDIFile(file)) {
    modelElement=UDIResourceFileHelper.getInstance().findUDI(file);
  }
  return modelElement;
}","/** 
 * DOC bZhou Comment method ""getModelElement"".
 * @param file
 * @return
 */
public static ModelElement getModelElement(IFile file){
  ModelElement modelElement=null;
  String fileExtension=file.getFileExtension();
  if (FactoriesUtil.isProvFile(fileExtension)) {
    TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().findProvider(file);
    modelElement=returnValue.getObject();
  }
 else   if (FactoriesUtil.isAnalysisFile(fileExtension)) {
    modelElement=AnaResourceFileHelper.getInstance().findAnalysis(file);
  }
 else   if (FactoriesUtil.isReportFile(fileExtension)) {
    modelElement=RepResourceFileHelper.getInstance().findReport(file);
  }
 else   if (FactoriesUtil.isDQRuleFile(fileExtension)) {
    modelElement=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
  }
 else   if (FactoriesUtil.isPatternFile(fileExtension)) {
    modelElement=PatternResourceFileHelper.getInstance().findPattern(file);
  }
 else   if (FactoriesUtil.isUDIFile(fileExtension)) {
    modelElement=UDIResourceFileHelper.getInstance().findUDI(file);
  }
  return modelElement;
}",0.9519774011299436
139258,"/** 
 * DOC bZhou Comment method ""getResourceFileMap"".
 * @param file
 * @return
 */
public static ResourceFileMap getResourceFileMap(IFile file){
  ResourceFileMap modelElement=null;
  if (FactoriesUtil.isProvFile(file)) {
    modelElement=PrvResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isAnalysisFile(file)) {
    modelElement=AnaResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isReportFile(file)) {
    modelElement=RepResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isDQRuleFile(file)) {
    modelElement=DQRuleResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isPatternFile(file)) {
    modelElement=PatternResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isUDIFile(file)) {
    modelElement=UDIResourceFileHelper.getInstance();
  }
  return modelElement;
}","/** 
 * DOC bZhou Comment method ""getResourceFileMap"".
 * @param element
 * @return
 */
public static ResourceFileMap getResourceFileMap(ModelElement element){
  ResourceFileMap resourceMap=null;
  if (element instanceof TdDataProvider) {
    resourceMap=PrvResourceFileHelper.getInstance();
  }
 else   if (element instanceof Analysis) {
    resourceMap=AnaResourceFileHelper.getInstance();
  }
 else   if (element instanceof Report) {
    resourceMap=RepResourceFileHelper.getInstance();
  }
 else   if (element instanceof DQRule) {
    resourceMap=DQRuleResourceFileHelper.getInstance();
  }
 else   if (element instanceof Pattern) {
    resourceMap=PatternResourceFileHelper.getInstance();
  }
 else   if (element instanceof UserDefIndicator) {
    resourceMap=UDIResourceFileHelper.getInstance();
  }
  return resourceMap;
}",0.6686602870813397
139259,"public ReturnCode serialize(TDQItem item,URI uri){
  ReturnCode rc=new ReturnCode();
  URI itemURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.ITEM_EXTENSION);
  Resource itemResource=util.createResource(itemURI);
  String itemPath=itemURI.trimSegments(1).toPlatformString(true);
  itemPath=itemPath.substring(itemPath.indexOf(File.separatorChar,2) + 1);
  item.getState().setPath(itemPath);
  util.saveResource(itemResource);
  rc.setOk(true);
  return rc;
}","public ReturnCode serialize(Property property,URI uri){
  ReturnCode rc=new ReturnCode();
  URI propertiesURI=uri.trimFileExtension().appendFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  Resource propertyResource=util.createResource(propertiesURI);
  propertyResource.getContents().add(property);
  propertyResource.getContents().add(property.getItem());
  propertyResource.getContents().add(property.getItem().getState());
  rc.setOk(util.saveResource(propertyResource));
  return rc;
}",0.4244306418219462
139260,"public ReturnCode save(ModelElement element){
  ReturnCode rc=new ReturnCode();
  addResourceContent(element);
  addDependencies(element);
  savePerperties(element);
  rc.setOk(util.saveResource(element.eResource()));
  if (rc.isOk()) {
    rc.setMessage(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
    ProxyRepositoryManager.getInstance().save();
  }
 else {
    rc.setMessage(util.getLastErrorMessage());
  }
  return rc;
}","public ReturnCode save(ModelElement element){
  ReturnCode rc=new ReturnCode();
  addDependencies(element);
  addResourceContent(element);
  savePerperties(element);
  rc.setOk(util.saveResource(element.eResource()));
  if (rc.isOk()) {
    rc.setMessage(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
    ProxyRepositoryManager.getInstance().save();
  }
 else {
    rc.setMessage(util.getLastErrorMessage());
  }
  return rc;
}",0.9365079365079364
139261,"/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 */
public void savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=initProperty(element);
  TDQItem item=initItem(element,property);
  item.setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(property,uri);
  String propertyPath=property.eResource().getURI().toPlatformString(true);
  TaggedValueHelper.setTaggedValue(element,TaggedValueHelper.PROPERTY_FILE,propertyPath);
}","/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 */
public void savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=initProperty(element);
  TDQItem item=initItem(element,property);
  item.setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(property,uri);
}",0.8278008298755186
139262,"public Property initProperty(ModelElement element){
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  String author=MetadataHelper.getAuthor(element);
  String purpose=MetadataHelper.getPurpose(element);
  String description=MetadataHelper.getDescription(element);
  String version=MetadataHelper.getVersion(element);
  String status=MetadataHelper.getDevStatus(element);
  User user=null;
  RepositoryContext context=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (context != null) {
    user=context.getUser();
    user.setLogin(author);
    property.setAuthor(user);
  }
 else {
  }
  property.setId(EcoreUtil.generateUUID());
  property.setLabel(element.getName());
  property.setPurpose(purpose);
  property.setDescription(description);
  property.setStatusCode(status);
  property.setVersion(version);
  property.setCreationDate(new Date());
  computePropertyMaxInformationLevel(property);
  return property;
}","public Property initProperty(ModelElement element){
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  String author=MetadataHelper.getAuthor(element);
  String purpose=MetadataHelper.getPurpose(element);
  String description=MetadataHelper.getDescription(element);
  String version=MetadataHelper.getVersion(element);
  String status=MetadataHelper.getDevStatus(element);
  RepositoryContext context=(RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (context != null) {
    User user=context.getUser();
    user.setLogin(author);
    property.setAuthor(user);
  }
  property.setId(EcoreUtil.generateUUID());
  property.setLabel(element.getName());
  property.setPurpose(purpose);
  property.setDescription(description);
  property.setStatusCode(status);
  property.setVersion(version);
  property.setCreationDate(new Date());
  computePropertyMaxInformationLevel(property);
  return property;
}",0.9819121447028424
139263,"public ReturnCode serialize(TDQItem item,URI uri);","/** 
 * DOC bZhou Comment method ""serialize"".
 * @param property
 * @param uri
 * @return
 */
public ReturnCode serialize(Property property,URI uri);",0.4120603015075377
139264,"/** 
 * DOC scorreia Comment method ""getEMFObject"".
 * @param file
 * @param folderProperty
 * @return
 */
private ModelElement getModelElement(IFile file){
  if (FactoriesUtil.isPatternFile(file)) {
    return PatternResourceFileHelper.getInstance().findPattern(file);
  }
 else   if (FactoriesUtil.isDQRuleFile(file)) {
    return DQRuleResourceFileHelper.getInstance().findWhereRule(file);
  }
  log.error(""String_Node_Str"" + file.getFullPath().toOSString());
  return null;
}","/** 
 * DOC scorreia Comment method ""getEMFObject"".
 * @param file
 * @param folderProperty
 * @return
 */
private ModelElement getModelElement(IFile file){
  String fileExtension=file.getFileExtension();
  if (FactoriesUtil.isPatternFile(fileExtension)) {
    return PatternResourceFileHelper.getInstance().findPattern(file);
  }
 else   if (FactoriesUtil.isDQRuleFile(fileExtension)) {
    return DQRuleResourceFileHelper.getInstance().findWhereRule(file);
  }
  log.error(""String_Node_Str"" + file.getFullPath().toOSString());
  return null;
}",0.935546875
139265,"/** 
 * DOC xqliu Comment method ""addColumnUdi"".
 * @param treeItem
 * @param meIndicator
 * @param columnIndex
 */
private void addColumnUdi(final TreeItem treeItem,final ModelElementIndicator meIndicator,int columnIndex){
  TreeEditor addUdiEditor=new TreeEditor(tree);
  Label addUdiLabl=new Label(tree,SWT.NONE);
  addUdiLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  addUdiLabl.setImage(ImageLib.getImage(ImageLib.IND_DEFINITION));
  addUdiLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  addUdiLabl.pack();
  addUdiLabl.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      DataManager dm=getAnalysis().getContext().getConnection();
      if (dm == null) {
        masterPage.doSave(null);
      }
      if (dm != null && dm instanceof TdDataProvider) {
        TdDataProvider dp=(TdDataProvider)dm;
        if (ConnectionUtils.isMdmConnection(DataProviderHelper.getTdProviderConnection(dp).getObject())) {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
      }
      IFolder udiProject=ResourceManager.getUDIFolder();
      CheckedTreeSelectionDialog dialog=UDIUtils.createUdiCheckedTreeSelectionDialog(udiProject);
      if (dialog.open() == Window.OK) {
        for (        Object obj : dialog.getResult()) {
          if (obj instanceof IFile) {
            IFile file=(IFile)obj;
            IndicatorUnit[] addIndicatorUnits=null;
            try {
              addIndicatorUnits=UDIUtils.createIndicatorUnit(file,meIndicator,getAnalysis());
            }
 catch (            Throwable e1) {
              log.warn(e1,e1);
            }
            if (addIndicatorUnits != null && addIndicatorUnits.length > 0) {
              for (              IndicatorUnit unit : addIndicatorUnits) {
                createOneUnit(treeItem,unit);
              }
              setDirty(true);
            }
          }
        }
      }
    }
  }
);
  addUdiEditor.minimumWidth=addUdiLabl.getImage().getBounds().width;
  addUdiEditor.setEditor(addUdiLabl,treeItem,columnIndex);
}","/** 
 * DOC xqliu Comment method ""addColumnUdi"". ADD xqliu 2010-02-23 feature 11617
 * @param treeItem
 * @param meIndicator
 * @param columnIndex
 * @return
 */
private TreeEditor addColumnUdi(final TreeItem treeItem,final ModelElementIndicator meIndicator,int columnIndex){
  TreeEditor addUdiEditor=new TreeEditor(tree);
  Label addUdiLabl=new Label(tree,SWT.NONE);
  addUdiLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  addUdiLabl.setImage(ImageLib.getImage(ImageLib.IND_DEFINITION));
  addUdiLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  addUdiLabl.pack();
  addUdiLabl.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      DataManager dm=getAnalysis().getContext().getConnection();
      if (dm == null) {
        masterPage.doSave(null);
      }
      if (dm != null && dm instanceof TdDataProvider) {
        TdDataProvider dp=(TdDataProvider)dm;
        if (ConnectionUtils.isMdmConnection(DataProviderHelper.getTdProviderConnection(dp).getObject())) {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
      }
      IFolder udiProject=ResourceManager.getUDIFolder();
      CheckedTreeSelectionDialog dialog=UDIUtils.createUdiCheckedTreeSelectionDialog(udiProject);
      if (dialog.open() == Window.OK) {
        for (        Object obj : dialog.getResult()) {
          if (obj instanceof IFile) {
            IFile file=(IFile)obj;
            IndicatorUnit[] addIndicatorUnits=null;
            try {
              addIndicatorUnits=UDIUtils.createIndicatorUnit(file,meIndicator,getAnalysis());
            }
 catch (            Throwable e1) {
              log.warn(e1,e1);
            }
            if (addIndicatorUnits != null && addIndicatorUnits.length > 0) {
              for (              IndicatorUnit unit : addIndicatorUnits) {
                createOneUnit(treeItem,unit);
              }
              setDirty(true);
            }
          }
        }
      }
    }
  }
);
  addUdiEditor.minimumWidth=addUdiLabl.getImage().getBounds().width;
  addUdiEditor.setEditor(addUdiLabl,treeItem,columnIndex);
  return addUdiEditor;
}",0.9809589355356734
139266,"private void addItemElements(final ModelElementIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    final ModelElementIndicator meIndicator=(ModelElementIndicator)elements[i];
    treeItem.setText(0,getModelElemetnDisplayName(meIndicator));
    treeItem.setData(MODELELEMENT_INDICATOR_KEY,meIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(meIndicator.getModelElement());
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),meIndicator.getModelElement());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Label addPatternLabl=new Label(tree,SWT.NONE);
    addPatternLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addPatternLabl.setImage(ImageLib.getImage(ImageLib.ADD_PATTERN));
    addPatternLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternLabl.pack();
    addPatternLabl.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DataManager dm=getAnalysis().getContext().getConnection();
        if (dm == null) {
          masterPage.doSave(null);
        }
        if (dm != null && dm instanceof TdDataProvider) {
          TdDataProvider dp=(TdDataProvider)dm;
          if (ConnectionUtils.isMdmConnection(DataProviderHelper.getTdProviderConnection(dp).getObject())) {
            MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
            return;
          }
        }
        IFolder libProject=ResourceManager.getLibrariesFolder();
        CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(libProject);
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,meIndicator,getAnalysis());
              if (addIndicatorUnit != null) {
                createOneUnit(treeItem,addIndicatorUnit);
                setDirty(true);
              }
 else {
                Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
                MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"") + pattern.getName());
              }
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=addPatternLabl.getImage().getBounds().width;
    addPatternEditor.setEditor(addPatternLabl,treeItem,2);
    addColumnUdi(treeItem,meIndicator,3);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteModelElementItems(meIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(modelElementIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,4);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (meIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,meIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","private void addItemElements(final ModelElementIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    final ModelElementIndicator meIndicator=(ModelElementIndicator)elements[i];
    treeItem.setText(0,getModelElemetnDisplayName(meIndicator));
    treeItem.setData(MODELELEMENT_INDICATOR_KEY,meIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(meIndicator.getModelElement());
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),meIndicator.getModelElement());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Label addPatternLabl=new Label(tree,SWT.NONE);
    addPatternLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addPatternLabl.setImage(ImageLib.getImage(ImageLib.ADD_PATTERN));
    addPatternLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternLabl.pack();
    addPatternLabl.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DataManager dm=getAnalysis().getContext().getConnection();
        if (dm == null) {
          masterPage.doSave(null);
        }
        if (dm != null && dm instanceof TdDataProvider) {
          TdDataProvider dp=(TdDataProvider)dm;
          if (ConnectionUtils.isMdmConnection(DataProviderHelper.getTdProviderConnection(dp).getObject())) {
            MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
            return;
          }
        }
        IFolder libProject=ResourceManager.getLibrariesFolder();
        CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(libProject);
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,meIndicator,getAnalysis());
              if (addIndicatorUnit != null) {
                createOneUnit(treeItem,addIndicatorUnit);
                setDirty(true);
              }
 else {
                Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
                MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"") + pattern.getName());
              }
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=addPatternLabl.getImage().getBounds().width;
    addPatternEditor.setEditor(addPatternLabl,treeItem,2);
    TreeEditor addUdiEditor=addColumnUdi(treeItem,meIndicator,3);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteModelElementItems(meIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(modelElementIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,4);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor,addUdiEditor});
    if (meIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,meIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}",0.9958966396806032
139267,"/** 
 * DOC yyi Comment method ""getJavaRegexp"".
 * @param pattern
 * @return
 */
public static String getJavaRegexp(Pattern pattern){
  EList<PatternComponent> components=pattern.getComponents();
  for (  PatternComponent patternComponent : components) {
    if (patternComponent != null) {
      Expression expression=getExpression(patternComponent,""String_Node_Str"");
      if (expression != null) {
        return expression.getBody();
      }
    }
  }
  return null;
}","/** 
 * DOC yyi Comment method ""getJavaRegexp"".
 * @param pattern
 * @return
 */
public static String getJavaRegexp(Pattern pattern){
  return getRegexp(pattern,""String_Node_Str"");
}",0.5312977099236641
139268,"/** 
 * Method ""getRegexp"".
 * @param pattern a pattern
 * @return the body of the regular expression applicable to this dbms or null
 */
public static String getSQLRegexp(Pattern pattern){
  EList<PatternComponent> components=pattern.getComponents();
  for (  PatternComponent patternComponent : components) {
    if (patternComponent != null) {
      Expression expression=getExpression(patternComponent,""String_Node_Str"");
      if (expression != null) {
        return expression.getBody();
      }
    }
  }
  return null;
}","/** 
 * Method ""getRegexp"".
 * @param pattern a pattern
 * @return the body of the regular expression applicable to this dbms or null
 */
public static String getSQLRegexp(Pattern pattern){
  return getRegexp(pattern,""String_Node_Str"");
}",0.5136897001303781
139269,"/** 
 * DOC yyi Comment method ""runTableAnalysis"".
 * @param tableName
 */
protected void runTableAnalysis(String tableName){
  Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
  TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPack);
  try {
    List<TdTable> tdTables=DqRepositoryViewService.getTables(tdDataProvider,catalogObj,tableName,true);
    if (!tdTables.isEmpty()) {
      TdTable table=tdTables.get(0);
      if (!CatalogHelper.getTables(catalogObj).contains(table)) {
        CatalogHelper.addTables(tdTables,catalogObj);
      }
      List<TdColumn> columns=DqRepositoryViewService.getColumns(tdDataProvider,table,null,true);
      new AnalyzeColumnSetAction(columns.toArray(new TdColumn[columns.size()])).run();
    }
 else {
      MessageUI.openWarning(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
  }
 catch (  TalendException e) {
    e.printStackTrace();
  }
}","/** 
 * DOC yyi Comment method ""runTableAnalysis"".
 * @param tableName
 */
protected void runTableAnalysis(String tableName){
  Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
  TdTable tdTable=getTable(parentPack,tableName);
  if (null == tdTable) {
    FolderNodeHelper.getTableFolderNode(parentPack).loadChildren();
    tdTable=getTable(parentPack,tableName);
  }
  try {
    List<TdColumn> columns=0 == ColumnSetHelper.getColumns(tdTable).size() ? DqRepositoryViewService.getColumns(tdDataProvider,tdTable,null,true) : ColumnSetHelper.getColumns(tdTable);
    new AnalyzeColumnSetAction(columns.toArray(new TdColumn[columns.size()])).run();
  }
 catch (  TalendException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
}",0.4044289044289044
139270,"public void openIndicatorSelectDialog(Shell shell){
  final IndicatorSelectDialog dialog=new IndicatorSelectDialog(shell,DefaultMessagesImpl.getString(""String_Node_Str""),modelElementIndicators);
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    @Override public void shellActivated(    ShellEvent e){
      dialog.getShell().setFocus();
      IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorSelectorHelpContextID());
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
    }
  }
);
  if (dialog.open() == Window.OK) {
    ModelElementIndicator[] result=dialog.getResult();
    for (    ModelElementIndicator modelElementIndicator : result) {
      modelElementIndicator.storeTempIndicator();
      this.masterPage.chageExecuteLanguageToJava();
    }
    this.setElements(result);
    return;
  }
}","public void openIndicatorSelectDialog(Shell shell){
  final IndicatorSelectDialog dialog=new IndicatorSelectDialog(shell,DefaultMessagesImpl.getString(""String_Node_Str""),modelElementIndicators);
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    @Override public void shellActivated(    ShellEvent e){
      dialog.getShell().setFocus();
      IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorSelectorHelpContextID());
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
    }
  }
);
  if (dialog.open() == Window.OK) {
    ModelElementIndicator[] result=dialog.getResult();
    for (    ModelElementIndicator modelElementIndicator : result) {
      modelElementIndicator.storeTempIndicator();
    }
    this.setElements(result);
    return;
  }
}",0.9184397163120568
139271,"public boolean hasChildren(Object element){
  if (element instanceof TdView || element instanceof TdTable) {
    return false;
  }
  return !super.hasChildren(element);
}","public boolean hasChildren(Object element){
  if (element instanceof TdView || element instanceof TdTable) {
    return false;
  }
  return superHasChildren(element);
}",0.9881656804733728
139272,"private void initCheckedModelElement(List<? extends ModelElement> modelElementList){
  List<ModelElement> containerList=new ArrayList<ModelElement>();
  for (int i=0; i < modelElementList.size(); i++) {
    ModelElement modelElement=modelElementList.get(i);
    mdmFlag=mdmFlag || modelElement instanceof TdXMLElement;
    ModelElement container=ModelElementHelper.getContainer(modelElement);
    if (!containerList.contains(container)) {
      containerList.add(container);
    }
    ModelElementKey modelElementKey=new ModelElementKeyImpl(container);
    ModelElementCheckedMap meCheckedMap=modelElementCheckedMap.get(modelElementKey);
    if (meCheckedMap == null) {
      meCheckedMap=new ModelElementCheckedMapImpl();
      this.modelElementCheckedMap.put(modelElementKey,meCheckedMap);
    }
    meCheckedMap.putModelElementChecked(modelElement,Boolean.TRUE);
  }
  this.setInitialElementSelections(containerList);
}","private void initCheckedModelElement(List<? extends ModelElement> modelElementList){
  List<ModelElement> containerList=new ArrayList<ModelElement>();
  for (int i=0; i < modelElementList.size(); i++) {
    ModelElement modelElement=modelElementList.get(i);
    ModelElement container=ModelElementHelper.getContainer(modelElement);
    if (!containerList.contains(container)) {
      containerList.add(container);
    }
    ModelElementKey modelElementKey=new ModelElementKeyImpl(container);
    ModelElementCheckedMap meCheckedMap=modelElementCheckedMap.get(modelElementKey);
    if (meCheckedMap == null) {
      meCheckedMap=new ModelElementCheckedMapImpl();
      this.modelElementCheckedMap.put(modelElementKey,meCheckedMap);
    }
    meCheckedMap.putModelElementChecked(modelElement,Boolean.TRUE);
  }
  this.setInitialElementSelections(containerList);
}",0.96578799775659
139273,"@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=((IContainer)parentElement);
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(""String_Node_Str"" + container.getLocation());
    }
    if (ResourceManager.getConnectionFolder().equals(container) || ResourceManager.getMDMConnectionFolder().equals(container)) {
      ComparatorsFactory.sort(members,ComparatorsFactory.FILEMODEL_COMPARATOR_ID);
    }
    return clearMdmFolder(members,mdmFlag);
  }
 else   if (parentElement instanceof NamedColumnSet) {
    return null;
  }
 else   if (parentElement instanceof NamedColumnSetFolderNode) {
    NamedColumnSetFolderNode folerNode=(NamedColumnSetFolderNode)parentElement;
    folerNode.loadChildren();
    Object[] children=folerNode.getChildren();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof ColumnSet)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        ColumnSet columnSet=(ColumnSet)children[i];
        ModelElementKey key=new ModelElementKeyImpl(columnSet);
        if (modelElementCheckedMap.containsKey(key)) {
          currentCheckedModelElement.add(columnSet);
        }
      }
    }
    return ComparatorsFactory.sort(children,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (parentElement instanceof TdXMLDocument || parentElement instanceof TdXMLElement) {
    boolean isXmlDocument=parentElement instanceof TdXMLDocument;
    List<? extends ModelElement> modelElements=isXmlDocument ? DqRepositoryViewService.getXMLElements((TdXMLDocument)parentElement) : DqRepositoryViewService.getXMLElements((TdXMLElement)parentElement);
    Object[] children=XmlElementHelper.clearLeafNode(modelElements).toArray();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof TdXMLElement)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        TdXMLElement xmlElement=(TdXMLElement)children[i];
        ModelElementKey key=new ModelElementKeyImpl(xmlElement);
        if (modelElementCheckedMap.containsKey(key)) {
          currentCheckedModelElement.add(xmlElement);
        }
      }
    }
    return children.length == 0 ? null : children;
  }
  return super.getChildren(parentElement);
}","@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=(IContainer)parentElement;
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(""String_Node_Str"" + container.getLocation());
    }
    if (ResourceManager.getConnectionFolder().equals(container) || ResourceManager.getMDMConnectionFolder().equals(container)) {
      ComparatorsFactory.sort(members,ComparatorsFactory.FILEMODEL_COMPARATOR_ID);
    }
    return members;
  }
 else   if (parentElement instanceof NamedColumnSet) {
    return null;
  }
 else   if (parentElement instanceof NamedColumnSetFolderNode) {
    NamedColumnSetFolderNode folerNode=(NamedColumnSetFolderNode)parentElement;
    folerNode.loadChildren();
    Object[] children=folerNode.getChildren();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof ColumnSet)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        ColumnSet columnSet=(ColumnSet)children[i];
        ModelElementKey key=new ModelElementKeyImpl(columnSet);
        if (modelElementCheckedMap.containsKey(key)) {
          currentCheckedModelElement.add(columnSet);
        }
      }
    }
    return ComparatorsFactory.sort(children,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (parentElement instanceof TdXMLDocument || parentElement instanceof TdXMLElement) {
    boolean isXmlDocument=parentElement instanceof TdXMLDocument;
    List<? extends ModelElement> modelElements=isXmlDocument ? DqRepositoryViewService.getXMLElements((TdXMLDocument)parentElement) : DqRepositoryViewService.getXMLElements((TdXMLElement)parentElement);
    Object[] children=XmlElementHelper.clearLeafNode(modelElements).toArray();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof TdXMLElement)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        TdXMLElement xmlElement=(TdXMLElement)children[i];
        ModelElementKey key=new ModelElementKeyImpl(xmlElement);
        if (modelElementCheckedMap.containsKey(key)) {
          currentCheckedModelElement.add(xmlElement);
        }
      }
    }
    return children.length == 0 ? null : children;
  }
  return super.getChildren(parentElement);
}",0.994641384995878
139274,"/** 
 * DOC scorreia Comment method ""getSqlExpression"".
 * @param indicatorDefinition
 * @param defaultLanguage
 * @return
 */
private static Expression getSqlExpression(IndicatorDefinition indicatorDefinition,String language,EList<Expression> sqlGenericExpression){
  for (  Expression sqlGenExpr : sqlGenericExpression) {
    if (DbmsLanguageFactory.compareDbmsLanguage(language,sqlGenExpr.getLanguage())) {
      return sqlGenExpr;
    }
  }
  return null;
}","/** 
 * DOC xqliu Comment method ""getSqlExpression"". ADD xqliu 2010-02-25 feature 11201
 * @param indicatorDefinition
 * @param language
 * @param sqlGenericExpression
 * @param dbVersion
 * @return
 */
private static Expression getSqlExpression(IndicatorDefinition indicatorDefinition,String language,EList<Expression> sqlGenericExpression,ProductVersion dbVersion){
  List<Expression> tempExpressions=new ArrayList<Expression>();
  for (  Expression sqlGenExpr : sqlGenericExpression) {
    if (DbmsLanguageFactory.compareDbmsLanguage(language,sqlGenExpr.getLanguage())) {
      tempExpressions.add(sqlGenExpr);
    }
  }
  Expression defaultExpression=null;
  for (  Expression exp : tempExpressions) {
    if (exp.getVersion() == null || ""String_Node_Str"".equals(exp.getVersion())) {
      defaultExpression=exp;
    }
 else {
      if (dbVersion.toString().startsWith(exp.getVersion()) || exp.getVersion().startsWith(dbVersion.toString())) {
        return exp;
      }
    }
  }
  return defaultExpression;
}",0.5749152542372882
139275,"private List<String> getFunctions(IndicatorDefinition indicatorDefinition,final EList<Expression> functions){
  Expression sqlGenExpr=getSqlExpression(indicatorDefinition,this.dbmsName,functions);
  if (sqlGenExpr != null) {
    final String body=sqlGenExpr.getBody();
    final String[] fonc=body.split(""String_Node_Str"");
    return Arrays.asList(fonc);
  }
  sqlGenExpr=getSqlExpression(indicatorDefinition,getDefaultLanguage(),functions);
  if (sqlGenExpr != null) {
    final String body=sqlGenExpr.getBody();
    final String[] fonc=body.split(""String_Node_Str"");
    return Arrays.asList(fonc);
  }
  return Collections.emptyList();
}","private List<String> getFunctions(IndicatorDefinition indicatorDefinition,final EList<Expression> functions){
  Expression sqlGenExpr=MATCH_DB_VERSION ? getSqlExpression(indicatorDefinition,this.dbmsName,functions,this.getDbVersion()) : getSqlExpression(indicatorDefinition,this.dbmsName,functions);
  if (sqlGenExpr != null) {
    final String body=sqlGenExpr.getBody();
    final String[] fonc=body.split(""String_Node_Str"");
    return Arrays.asList(fonc);
  }
  sqlGenExpr=MATCH_DB_VERSION ? getSqlExpression(indicatorDefinition,getDefaultLanguage(),functions,this.getDbVersion()) : getSqlExpression(indicatorDefinition,getDefaultLanguage(),functions);
  if (sqlGenExpr != null) {
    final String body=sqlGenExpr.getBody();
    final String[] fonc=body.split(""String_Node_Str"");
    return Arrays.asList(fonc);
  }
  return Collections.emptyList();
}",0.8575250836120402
139276,"/** 
 * DOC xqliu Comment method ""getValidStatement"". 2009-10-29 bug 9702
 * @param dataFilterAsString
 * @param indicator
 * @return
 */
public String getValidStatement(String dataFilterAsString,Indicator indicator){
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    traceError(""String_Node_Str"" + indicator.getName());
    return ""String_Node_Str"";
  }
  NamedColumnSet set=SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (set == null) {
    traceError(""String_Node_Str"" + indicator.getName());
    return ""String_Node_Str"";
  }
  String setName=quote(set.getName());
  if (!belongToSameSchemata(set)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + setName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  String setAliasA=""String_Node_Str"";
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
        setAliasA=""String_Node_Str"".equals(setAliasA) ? joinCopy.getTableAliasA() : setAliasA;
      }
    }
  }
  String schemaName=getQuotedSchemaName(set);
  String catalogName=getQuotedCatalogName(set);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(set);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  setName=dbms().toQualifiedName(catalogName,schemaName,setName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(set,joinConditions) : ""String_Node_Str"";
  String genericSql=sqlGenericExpression.getBody();
  setAliasA=""String_Node_Str"".equals(setAliasA) ? ""String_Node_Str"" : setAliasA + ""String_Node_Str"";
  genericSql=genericSql.replace(""String_Node_Str"",setAliasA);
  completedSqlString=dbms().fillGenericQueryWithJoin(genericSql,setName,joinclause);
  try {
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 catch (  ParseException e) {
    log.warn(e);
  }
  return completedSqlString;
}","/** 
 * DOC xqliu Comment method ""getValidStatement"". 2009-10-29 bug 9702
 * @param dataFilterAsString
 * @param indicator
 * @return
 */
public String getValidStatement(String dataFilterAsString,Indicator indicator){
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    traceError(""String_Node_Str"" + indicator.getName());
    return ""String_Node_Str"";
  }
  NamedColumnSet set=SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (set == null) {
    traceError(""String_Node_Str"" + indicator.getName());
    return ""String_Node_Str"";
  }
  String setName=quote(set.getName());
  if (!belongToSameSchemata(set)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + setName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  String setAliasA=""String_Node_Str"";
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
        setAliasA=""String_Node_Str"".equals(setAliasA) ? joinCopy.getTableAliasA() : setAliasA;
      }
    }
  }
  String schemaName=getQuotedSchemaName(set);
  String catalogName=getQuotedCatalogName(set);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(set);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  setName=dbms().toQualifiedName(catalogName,schemaName,setName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(set,joinConditions,catalogName,schemaName) : ""String_Node_Str"";
  String genericSql=sqlGenericExpression.getBody();
  setAliasA=""String_Node_Str"".equals(setAliasA) ? ""String_Node_Str"" : setAliasA + ""String_Node_Str"";
  genericSql=genericSql.replace(""String_Node_Str"",setAliasA);
  completedSqlString=dbms().fillGenericQueryWithJoin(genericSql,setName,joinclause);
  try {
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 catch (  ParseException e) {
    log.warn(e);
  }
  return completedSqlString;
}",0.9967988865692414
139277,"private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  NamedColumnSet set=SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (set == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String setName=quote(set.getName());
  if (!belongToSameSchemata(set)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + setName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(set);
  String catalogName=getQuotedCatalogName(set);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(set);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  setName=dbms().toQualifiedName(catalogName,schemaName,setName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(set,joinConditions) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),setName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  NamedColumnSet set=SwitchHelpers.NAMED_COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (set == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String setName=quote(set.getName());
  if (!belongToSameSchemata(set)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + setName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(set);
  String catalogName=getQuotedCatalogName(set);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(set);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  setName=dbms().toQualifiedName(catalogName,schemaName,setName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(set,joinConditions,catalogName,schemaName) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),setName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9965481014558006
139278,"private void buildJoinClause(StringBuilder builder,String tableA,String tableAliasA,String columnAName,boolean hasTableAliasA,String tableB,String tableAliasB,String columnBName,boolean hasTableAliasB,String operator){
  boolean hasAlreadyOneJoin=builder.toString().contains(this.join());
  if (hasTableAliasA && !hasAlreadyOneJoin) {
    builder.append(surroundWithSpaces(tableAliasA));
  }
  join(builder,quote(tableA),tableAliasA,quote(columnAName),hasTableAliasA,quote(tableB),tableAliasB,quote(columnBName),hasTableAliasB,operator);
}","private void buildJoinClause(StringBuilder builder,String tableA,String tableAliasA,String columnAName,boolean hasTableAliasA,String tableB,String tableAliasB,String columnBName,boolean hasTableAliasB,String operator){
  boolean hasAlreadyOneJoin=builder.toString().contains(this.join());
  if (hasTableAliasA && !hasAlreadyOneJoin) {
    builder.append(surroundWithSpaces(tableAliasA));
  }
  join(builder,quote(tableA),tableAliasA,quote(columnAName),hasTableAliasA,tableB,tableAliasB,quote(columnBName),hasTableAliasB,operator);
}",0.9822595704948646
139279,"public String createJoinConditionAsString(ModelElement leftTable,List<JoinElement> joinElements){
  if (joinElements.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder();
  for (  JoinElement joinElement : joinElements) {
    ModelElement colA=joinElement.getColA();
    String tableA=getTableName(colA);
    String tableAliasA=joinElement.getTableAliasA();
    String columnAName=getColumnName(colA);
    boolean hasTableAliasA=!StringUtils.isEmpty(tableAliasA);
    ModelElement colB=joinElement.getColB();
    String tableB=getTableName(colB);
    String tableAliasB=joinElement.getTableAliasB();
    String columnBName=getColumnName(colB);
    boolean hasTableAliasB=!StringUtils.isEmpty(tableAliasB);
    String operator=joinElement.getOperator();
    if (joinClauseStartsWithWrongTable(leftTable,getTable(colB)) && !hasTableAliasA && !hasTableAliasB) {
      buildJoinClause(builder,tableB,tableAliasB,columnBName,hasTableAliasB,tableA,tableAliasA,columnAName,hasTableAliasA,operator);
    }
 else {
      buildJoinClause(builder,tableA,tableAliasA,columnAName,hasTableAliasA,tableB,tableAliasB,columnBName,hasTableAliasB,operator);
    }
  }
  return builder.toString();
}","public String createJoinConditionAsString(ModelElement leftTable,List<JoinElement> joinElements,String catalogName,String schemaName){
  if (joinElements.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder();
  for (  JoinElement joinElement : joinElements) {
    ModelElement colA=joinElement.getColA();
    String tableA=getTableName(colA);
    String tableAliasA=joinElement.getTableAliasA();
    String columnAName=getColumnName(colA);
    boolean hasTableAliasA=!StringUtils.isEmpty(tableAliasA);
    ModelElement colB=joinElement.getColB();
    String tableB=getTableName(colB);
    String tableAliasB=joinElement.getTableAliasB();
    String columnBName=getColumnName(colB);
    boolean hasTableAliasB=!StringUtils.isEmpty(tableAliasB);
    String operator=joinElement.getOperator();
    if (joinClauseStartsWithWrongTable(leftTable,getTable(colB)) && !hasTableAliasA && !hasTableAliasB) {
      tableA=toQualifiedName(catalogName,schemaName,tableA);
      buildJoinClause(builder,tableB,tableAliasB,columnBName,hasTableAliasB,tableA,tableAliasA,columnAName,hasTableAliasA,operator);
    }
 else {
      tableB=toQualifiedName(catalogName,schemaName,tableB);
      buildJoinClause(builder,tableA,tableAliasA,columnAName,hasTableAliasA,tableB,tableAliasB,columnBName,hasTableAliasB,operator);
    }
  }
  return builder.toString();
}",0.9386810644041652
139280,"public String getVersion(){
  return ""String_Node_Str"";
}","public String getVersion(){
  return DatabaseConstant.MDM_VERSION;
}",0.672
139281,"public boolean execute(){
  IFile talendDefinitionFile=DefinitionHandler.getTalendDefinitionFile();
  if (talendDefinitionFile.exists()) {
    try {
      talendDefinitionFile.delete(true,null);
      IFolder librariesFolder=ResourceManager.getLibrariesFolder();
      DefinitionHandler.getInstance().copyDefinitionsIntoFolder(librariesFolder);
    }
 catch (    Exception e) {
      log.error(e,e);
      return false;
    }
  }
  return true;
}","public boolean execute(){
  IFile talendDefinitionFile=DefinitionHandler.getTalendDefinitionFile();
  if (talendDefinitionFile.exists()) {
    try {
      talendDefinitionFile.delete(true,null);
      DefinitionHandler.getInstance();
    }
 catch (    Exception e) {
      log.error(e,e);
      return false;
    }
  }
  return true;
}",0.7861715749039693
139282,"/** 
 * DOC bZhou Comment method ""copyDefinitionsIntoFolder"".
 * @param ifolder
 * @return
 */
public Resource copyDefinitionsIntoFolder(IFolder ifolder){
  File folder=new File(ifolder.getLocationURI());
  return copyDefinitionsIntoFolder(folder);
}","/** 
 * DOC bZhou Comment method ""copyDefinitionsIntoFolder"".
 * @param destinationUri
 * @return
 */
public Resource copyDefinitionsIntoFolder(URI destinationUri){
  Resource resource=getIndicatorsDefinitions().eResource();
  EMFUtil.changeUri(resource,destinationUri);
  if (EMFUtil.saveResource(resource)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + resource.getURI());
    }
  }
 else {
    log.error(""String_Node_Str"" + resource.getURI());
  }
  return resource;
}",0.4010767160161507
139283,"public static Boolean hasChildren(TdXMLElement element){
  XMLSchemaBuilder xmlScheBuilder=XMLSchemaBuilder.getSchemaBuilder(element.getOwnedDocument());
  return !xmlScheBuilder.isLeafNode(element).isOk();
}","public static Boolean hasChildren(TdXMLElement element){
  XMLSchemaBuilder xmlScheBuilder=XMLSchemaBuilder.getSchemaBuilder(element.getOwnedDocument());
  return xmlScheBuilder.isLeafNode(element).isOk();
}",0.9975903614457832
139284,"public boolean hasChildren(Object element){
  if (element instanceof TdView || element instanceof TdTable) {
    return false;
  }
  return super.hasChildren(element);
}","public boolean hasChildren(Object element){
  if (element instanceof TdView || element instanceof TdTable) {
    return false;
  }
  return !super.hasChildren(element);
}",0.9970501474926252
139285,"/** 
 * DOC xqliu IndicatorSelectDialog constructor comment.
 * @param parentShell
 * @param title
 * @param modelElementIndicators
 */
public IndicatorSelectDialog(Shell parentShell,String title,ModelElementIndicator[] modelElementIndicators,ExecutionLanguage language){
  super(parentShell);
  this.title=title;
  this.modelElementIndicators=modelElementIndicators;
  this.language=language;
  int shellStyle=getShellStyle();
  setShellStyle(shellStyle | SWT.MAX | SWT.RESIZE);
}","/** 
 * DOC xqliu IndicatorSelectDialog constructor comment.
 * @param parentShell
 * @param title
 * @param modelElementIndicators
 */
public IndicatorSelectDialog(Shell parentShell,String title,ModelElementIndicator[] modelElementIndicators){
  super(parentShell);
  this.title=title;
  this.modelElementIndicators=modelElementIndicators;
  int shellStyle=getShellStyle();
  setShellStyle(shellStyle | SWT.MAX | SWT.RESIZE);
}",0.9416941694169416
139286,"@Override protected Indicator getMatchedIndicator(){
  return ColumnsetFactory.eINSTANCE.createSimpleStatIndicator();
}","@Override protected Indicator getMatchedIndicator(){
  SimpleStatIndicator ssIndicator=ColumnsetFactory.eINSTANCE.createSimpleStatIndicator();
  ssIndicator.setRowCountIndicator(IndicatorsFactory.eINSTANCE.createRowCountIndicator());
  ssIndicator.setDistinctCountIndicator(IndicatorsFactory.eINSTANCE.createDistinctCountIndicator());
  ssIndicator.setDuplicateCountIndicator(IndicatorsFactory.eINSTANCE.createDuplicateCountIndicator());
  ssIndicator.setUniqueCountIndicator(IndicatorsFactory.eINSTANCE.createUniqueCountIndicator());
  return ssIndicator;
}",0.2333825701624815
139287,"private static AnalysisCategories loadFromFile(){
  EMFUtil util=new EMFUtil();
  String pathName=""String_Node_Str"";
  URI uri=URI.createPlatformPluginURI(pathName,false);
  Resource catFile=null;
  try {
    catFile=util.getResourceSet().getResource(uri,true);
  }
 catch (  RuntimeException e) {
    log.error(e.getMessage());
  }
  if (catFile == null) {
    catFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + pathName),true);
  }
  if (catFile == null) {
    log.error(""String_Node_Str"" + pathName + ""String_Node_Str""+ uri);
    return null;
  }
  EList<EObject> contents=catFile.getContents();
  if (contents == null) {
    log.error(""String_Node_Str"" + uri);
    return null;
  }
  CategorySwitch<AnalysisCategories> catSwitch=new CategorySwitch<AnalysisCategories>(){
    @Override public AnalysisCategories caseAnalysisCategories(    AnalysisCategories object){
      return object;
    }
  }
;
  return catSwitch.doSwitch(contents.get(0));
}","/** 
 * DOC bZhou Comment method ""loadFromFile"".
 * @return
 */
private static AnalysisCategories loadFromFile(){
  EMFUtil util=new EMFUtil();
  String pathName=""String_Node_Str"";
  URI uri=URI.createPlatformPluginURI(pathName,false);
  Resource catFile=null;
  try {
    catFile=util.getResourceSet().getResource(uri,true);
  }
 catch (  RuntimeException e) {
    log.error(e.getMessage());
  }
  if (catFile == null) {
    catFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + pathName),true);
  }
  if (catFile == null) {
    log.error(""String_Node_Str"" + pathName + ""String_Node_Str""+ uri);
    return null;
  }
  EList<EObject> contents=catFile.getContents();
  if (contents == null) {
    log.error(""String_Node_Str"" + uri);
    return null;
  }
  CategorySwitch<AnalysisCategories> catSwitch=new CategorySwitch<AnalysisCategories>(){
    @Override public AnalysisCategories caseAnalysisCategories(    AnalysisCategories object){
      return object;
    }
  }
;
  return catSwitch.doSwitch(contents.get(0));
}",0.9688715953307392
139288,"@Override public void loadChildren(){
  if (getCategoriesIDMaps() != null) {
    setChildren(getCategoriesIDMaps().keySet().toArray(new IndicatorCategory[getCategoriesIDMaps().keySet().size()]));
  }
}","@Override public void loadChildren(){
  Map<IndicatorCategory,List<IndicatorDefinition>> categoriesIDMaps=CategoryHandler.getCategoriesIDMaps();
  if (categoriesIDMaps != null) {
    setChildren(categoriesIDMaps.keySet().toArray(new IndicatorCategory[categoriesIDMaps.keySet().size()]));
  }
}",0.5465587044534413
139289,"public void doSave(IProgressMonitor monitor){
  if (masterPage != null && masterPage.isDirty()) {
    masterPage.doSave(monitor);
  }
  super.doSave(monitor);
}","public void doSave(IProgressMonitor monitor){
  if (masterPage != null && masterPage.isDirty()) {
    masterPage.doSave(monitor);
    setPartName(masterPage.getIntactElemenetName());
  }
  super.doSave(monitor);
}",0.8579088471849866
139290,"public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
  }
  super.doSave(monitor);
}","public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
    setPartName(((ConnectionInfoPage)masterPage).getIntactElemenetName());
  }
  super.doSave(monitor);
}",0.7863247863247863
139291,"public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
  }
  super.doSave(monitor);
}","public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
    setPartName(((DQRuleMasterDetailsPage)masterPage).getIntactElemenetName());
  }
  super.doSave(monitor);
}",0.7752808988764045
139292,"@Override public void doSave(IProgressMonitor monitor){
  masterPage.doSave(monitor);
  super.doSave(monitor);
}","@Override public void doSave(IProgressMonitor monitor){
  masterPage.doSave(monitor);
  setPartName(masterPage.getIntactElemenetName());
  super.doSave(monitor);
}",0.8145454545454546
139293,"public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
  }
  super.doSave(monitor);
}","public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
    setPartName(((PatternMasterDetailsPage)masterPage).getIntactElemenetName());
  }
  super.doSave(monitor);
}",0.773109243697479
139294,"/** 
 * Method ""fillListOfCatalogs"" gets the list of catalogs only when the list is empty. When the list is not empty, no call is executed to the connection.
 * @param connection
 * @param catalogNames the list of catalogs of the given connection
 * @throws SQLException
 */
private static void fillListOfCatalogs(Connection connection,List<String> catalogNames) throws SQLException {
  if (catalogNames.isEmpty()) {
    ResultSet catalogSet=null;
    DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
    if (connectionMetadata.getDatabaseProductName() != null && connectionMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.ODBC_ORACLE_PRODUCT_NAME) < 0) {
      catalogSet=connectionMetadata.getCatalogs();
    }
    try {
      if (catalogSet != null) {
        while (catalogSet.next()) {
          String catalogName=catalogSet.getString(MetaDataConstants.TABLE_CAT.name());
          if (catalogName != null || !""String_Node_Str"".equals(catalogName)) {
            catalogNames.add(catalogName);
          }
        }
      }
    }
 catch (    SQLException e) {
      log.warn(""String_Node_Str"",e);
    }
 finally {
      if (catalogSet != null) {
        catalogSet.close();
      }
    }
  }
}","/** 
 * Method ""fillListOfCatalogs"" gets the list of catalogs only when the list is empty. When the list is not empty, no call is executed to the connection.
 * @param connection
 * @param catalogNames the list of catalogs of the given connection
 * @throws SQLException
 */
private static void fillListOfCatalogs(Connection connection,List<String> catalogNames) throws SQLException {
  if (catalogNames.isEmpty()) {
    ResultSet catalogSet=null;
    if (!(ConnectionUtils.isOdbcOracle(connection) || ConnectionUtils.isOdbcIngres(connection))) {
      catalogSet=getConnectionMetadata(connection).getCatalogs();
    }
    try {
      if (catalogSet != null) {
        while (catalogSet.next()) {
          String catalogName=catalogSet.getString(MetaDataConstants.TABLE_CAT.name());
          if (catalogName != null || !""String_Node_Str"".equals(catalogName)) {
            catalogNames.add(catalogName);
          }
        }
      }
    }
 catch (    SQLException e) {
      log.warn(""String_Node_Str"",e);
    }
 finally {
      if (catalogSet != null) {
        catalogSet.close();
      }
    }
  }
}",0.8246808510638298
139295,"/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<TdSchema>> getSchemas(Connection connection) throws SQLException {
  Map<String,List<TdSchema>> catalogName2schemas=new HashMap<String,List<TdSchema>>();
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  final List<String> catalogNames=new ArrayList<String>();
  fillListOfCatalogs(connection,catalogNames);
  boolean odbcMssqlFlag=ConnectionUtils.isOdbcMssql(connection);
  boolean postgresqlFlag=ConnectionUtils.isPostgresql(connection);
  ResultSet schemas=null;
  try {
    schemas=connectionMetadata.getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        String schemaName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          try {
            schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(1);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (catName != null) {
            createSchema(schemaName,catName,catalogName2schemas);
          }
        }
        if (odbcMssqlFlag || postgresqlFlag) {
          try {
            schemaName=schemas.getString(1);
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
        }
        if (catName == null) {
          if (catalogNames.isEmpty()) {
            if (schemaName == null) {
              schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
            }
            createSchema(schemaName,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemaName,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty()) {
        TdSchema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}","/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<TdSchema>> getSchemas(Connection connection) throws SQLException {
  Map<String,List<TdSchema>> catalogName2schemas=new HashMap<String,List<TdSchema>>();
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  final List<String> catalogNames=new ArrayList<String>();
  fillListOfCatalogs(connection,catalogNames);
  boolean odbcMssqlFlag=ConnectionUtils.isOdbcMssql(connection);
  boolean postgresqlFlag=ConnectionUtils.isPostgresql(connection);
  ResultSet schemas=null;
  try {
    schemas=connectionMetadata.getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        String schemaName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          try {
            schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(1);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (catName != null) {
            createSchema(schemaName,catName,catalogName2schemas);
          }
        }
        if (odbcMssqlFlag || postgresqlFlag) {
          try {
            schemaName=schemas.getString(1);
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
        }
        if (catName == null) {
          if (catalogNames.isEmpty()) {
            if (schemaName == null) {
              schemaName=getSchemaName(schemas);
            }
            createSchema(schemaName,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemaName,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty()) {
        TdSchema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}",0.9882389838482044
139296,"/** 
 * Method ""changeCatalog"".
 * @param catalogName unquoted catalog's name
 * @param connection
 * @throws SQLException
 */
protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!ConnectionUtils.isOdbcMssql(connection)) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SQLException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
}","/** 
 * Method ""changeCatalog"".
 * @param catalogName unquoted catalog's name
 * @param connection
 * @throws SQLException
 */
protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!(ConnectionUtils.isOdbcMssql(connection) || ConnectionUtils.isOdbcOracle(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SQLException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
}",0.962046204620462
139297,"private void setPercentUIEnable(){
  IEditorPart editor=CorePlugin.getDefault().getCurrentActiveEditor();
  AbstractMetadataFormPage masterPage=null;
  boolean tableMasterPage=false;
  boolean columnSetMasterPage=false;
  AnalysisEditor anaEditor=null;
  if (editor != null) {
    anaEditor=(AnalysisEditor)editor;
    Object temp=anaEditor.getMasterPage();
    if (temp != null) {
      tableMasterPage=temp instanceof TableMasterDetailsPage;
      columnSetMasterPage=temp instanceof ColumnSetMasterPage;
      if (tableMasterPage) {
        masterPage=(TableMasterDetailsPage)temp;
      }
 else       if (columnSetMasterPage) {
        masterPage=(ColumnSetMasterPage)temp;
      }
 else {
        masterPage=(ColumnMasterDetailsPage)temp;
      }
    }
  }
  if (masterPage != null) {
    Analysis ana;
    if (tableMasterPage) {
      ana=((TableMasterDetailsPage)masterPage).getAnalysisHandler().getAnalysis();
    }
 else     if (columnSetMasterPage) {
      ana=((ColumnSetMasterPage)masterPage).getColumnSetAnalysisHandler().getAnalysis();
    }
 else {
      ana=((ColumnMasterDetailsPage)masterPage).getAnalysisHandler().getAnalysis();
    }
    isContainRowCount=AnalysisHelper.containsRowCount(ana);
  }
  pLowerText.setEnabled(isContainRowCount);
  pHigherText.setEnabled(isContainRowCount);
}","private void setPercentUIEnable(){
  IEditorPart editor=CorePlugin.getDefault().getCurrentActiveEditor();
  AbstractMetadataFormPage masterPage=null;
  boolean tableMasterPage=false;
  boolean columnSetMasterPage=false;
  boolean columnCorrelationMasterPage=false;
  AnalysisEditor anaEditor=null;
  if (editor != null) {
    anaEditor=(AnalysisEditor)editor;
    Object temp=anaEditor.getMasterPage();
    if (temp != null) {
      tableMasterPage=temp instanceof TableMasterDetailsPage;
      columnSetMasterPage=temp instanceof ColumnSetMasterPage;
      columnCorrelationMasterPage=temp instanceof ColumnCorrelationNominalAndIntervalMasterPage;
      if (tableMasterPage) {
        masterPage=(TableMasterDetailsPage)temp;
      }
 else       if (columnSetMasterPage) {
        masterPage=(ColumnSetMasterPage)temp;
      }
 else       if (columnCorrelationMasterPage) {
        masterPage=(ColumnCorrelationNominalAndIntervalMasterPage)temp;
      }
 else {
        masterPage=(ColumnMasterDetailsPage)temp;
      }
    }
  }
  if (masterPage != null) {
    Analysis ana;
    if (tableMasterPage) {
      ana=((TableMasterDetailsPage)masterPage).getAnalysisHandler().getAnalysis();
    }
 else     if (columnSetMasterPage) {
      ana=((ColumnSetMasterPage)masterPage).getColumnSetAnalysisHandler().getAnalysis();
    }
 else     if (columnCorrelationMasterPage) {
      ana=((ColumnCorrelationNominalAndIntervalMasterPage)masterPage).getColumnCorrelationAnalysisHandler().getAnalysis();
    }
 else {
      ana=((ColumnMasterDetailsPage)masterPage).getAnalysisHandler().getAnalysis();
    }
    isContainRowCount=AnalysisHelper.containsRowCount(ana);
  }
  pLowerText.setEnabled(isContainRowCount);
  pHigherText.setEnabled(isContainRowCount);
}",0.8545276234063419
139298,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount() - getNullCount();
  if (c.compareTo(0L) == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Double sum=null;
  try {
    sum=Double.valueOf(getSumStr());
  }
 catch (  Exception e) {
    return Double.NaN;
  }
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return sum / c;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount();
  if (c.compareTo(0L) == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Double sum=null;
  try {
    sum=Double.valueOf(getSumStr());
  }
 catch (  Exception e) {
    return Double.NaN;
  }
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return sum / c;
}",0.9802555168408827
139299,"@Override protected ReturnCode canRun(){
  ModelElementIndicator[] modelElementIndicators=treeViewer.getModelElementIndicator();
  if (modelElementIndicators == null || modelElementIndicators.length == 0) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  for (  ModelElementIndicator modelElementIndicator : modelElementIndicators) {
    if (modelElementIndicator.getIndicators().length == 0) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}","@Override protected ReturnCode canRun(){
  ReturnCode checkMdmExecutionEngine=checkMdmExecutionEngine();
  if (!checkMdmExecutionEngine.isOk()) {
    return checkMdmExecutionEngine;
  }
  ModelElementIndicator[] modelElementIndicators=treeViewer.getModelElementIndicator();
  if (modelElementIndicators == null || modelElementIndicators.length == 0) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  for (  ModelElementIndicator modelElementIndicator : modelElementIndicators) {
    if (modelElementIndicator.getIndicators().length == 0) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}",0.8859166011014948
139300,"@Override protected ReturnCode canSave(){
  ModelElementIndicator[] modelElementIndicators=treeViewer.getModelElementIndicator();
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    analysis.getContext().setConnection(ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]));
  }
  if (analysisHandler.isMdmConnection() && ExecutionLanguage.JAVA.getLiteral().equals(this.execLang)) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  List<ModelElement> analyzedElement=new ArrayList<ModelElement>();
  for (  ModelElementIndicator modelElementIndicator : treeViewer.getModelElementIndicator()) {
    analyzedElement.add(modelElementIndicator.getModelElement());
  }
  if (!analyzedElement.isEmpty()) {
    if (!ModelElementHelper.isFromSameConnection(analyzedElement)) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
    if (!ModelElementHelper.isFromSameTable(analyzedElement) && !""String_Node_Str"".equals(dataFilterComp.getDataFilterString())) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}","@Override protected ReturnCode canSave(){
  ReturnCode checkMdmExecutionEngine=checkMdmExecutionEngine();
  if (!checkMdmExecutionEngine.isOk()) {
    return checkMdmExecutionEngine;
  }
  List<ModelElement> analyzedElement=new ArrayList<ModelElement>();
  for (  ModelElementIndicator modelElementIndicator : treeViewer.getModelElementIndicator()) {
    analyzedElement.add(modelElementIndicator.getModelElement());
  }
  if (!analyzedElement.isEmpty()) {
    if (!ModelElementHelper.isFromSameConnection(analyzedElement)) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
    if (!ModelElementHelper.isFromSameTable(analyzedElement) && !""String_Node_Str"".equals(dataFilterComp.getDataFilterString())) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}",0.1729937530033637
139301,"public static IFolderNode[] getFolderNodes(EObject eObject){
  IFolderNode[] folderNodes=catalogFolderNodeMap.get(eObject);
  if (folderNodes != null) {
    return folderNodes;
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch(eObject) != null) {
    return createTableViewNodes(eObject);
  }
 else   if (SwitchHelpers.SCHEMA_SWITCH.doSwitch(eObject) != null) {
    return createTableViewNodes(eObject);
  }
 else   if (SwitchHelpers.TABLE_SWITCH.doSwitch(eObject) != null) {
    return createColumFolderNodes(eObject);
  }
 else   if (SwitchHelpers.VIEW_SWITCH.doSwitch(eObject) != null) {
    return createColumFolderNodes(eObject);
  }
  return folderNodes;
}","public static IFolderNode[] getFolderNodes(EObject eObject){
  IFolderNode[] folderNodes=catalogFolderNodeMap.get(eObject);
  if (folderNodes != null) {
    return folderNodes;
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch(eObject) != null) {
    return createTableViewNodes(eObject);
  }
 else   if (SwitchHelpers.SCHEMA_SWITCH.doSwitch(eObject) != null) {
    return createTableViewNodes(eObject);
  }
 else   if (SwitchHelpers.TABLE_SWITCH.doSwitch(eObject) != null) {
    return createColumFolderNodes(eObject);
  }
 else   if (SwitchHelpers.VIEW_SWITCH.doSwitch(eObject) != null) {
    return createColumFolderNodes(eObject);
  }
  return folderNodes == null ? new IFolderNode[]{} : folderNodes;
}",0.9680232558139537
139302,"public boolean hasChildren(Object element){
  if (element instanceof EObject) {
    EObject eobject=(EObject)element;
    if (SwitchHelpers.XMLELEMENT_SWITCH.doSwitch(eobject) != null) {
      return DqRepositoryViewService.hasChildren((TdXMLElement)element);
    }
    if (SwitchHelpers.COLUMN_SWITCH.doSwitch(eobject) != null) {
      return false;
    }
    if (eobject instanceof IndicatorDefinition) {
      return false;
    }
  }
  return true;
}","public boolean hasChildren(Object element){
  if (element instanceof EObject) {
    EObject eobject=(EObject)element;
    if (SwitchHelpers.XMLELEMENT_SWITCH.doSwitch(eobject) != null) {
      return DqRepositoryViewService.hasChildren((TdXMLElement)element);
    }
    return checkLeaf(eobject);
  }
  return true;
}",0.7350649350649351
139303,"@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,2)) {
    return false;
  }
  String s=String.valueOf(objects.get(0)[0]);
  String c=String.valueOf(objects.get(0)[1]);
  this.setSumStr(s);
  this.setCount(Long.valueOf(c));
  return true;
}","@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,2)) {
    return false;
  }
  String s=String.valueOf(objects.get(0)[0]);
  String c=String.valueOf(objects.get(0)[1]);
  if (!NumberUtils.isNumber(s)) {
    s=""String_Node_Str"";
  }
  if (!NumberUtils.isNumber(c)) {
    c=""String_Node_Str"";
  }
  this.setSumStr(s);
  this.setCount(Long.valueOf(c));
  return true;
}",0.8189655172413793
139304,"/** 
 * yyi 2009-11-30 10187 check schema is exist in DB
 * @param catName
 * @return
 */
public boolean checkSchema(TdSchema schema){
  EObject container=schema.eContainer();
  if (container != null) {
    TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
    if (catalog != null) {
      try {
        connection.setCatalog(catalog.getName());
        DatabaseContentRetriever.getCatalogs(connection);
        List<TdSchema> schemas=connection.getMetaData().getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0) ? DatabaseContentRetriever.getMSSQLSchemas(connection).get(catalog.getName()) : DatabaseContentRetriever.getSchemas(connection).get(catalog.getName());
        for (        TdSchema tdSchema : schemas) {
          if (tdSchema.getName().equals(schema.getName()))           return true;
        }
        return false;
      }
 catch (      SQLException e) {
        log.error(e);
      }
    }
  }
  return checkSchemaByName(schema.getName());
}","/** 
 * yyi 2009-11-30 10187 check schema is exist in DB
 * @param catName
 * @return
 */
public boolean checkSchema(TdSchema schema){
  EObject container=schema.eContainer();
  if (container != null) {
    TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
    if (catalog != null) {
      try {
        connection.setCatalog(catalog.getName());
        DatabaseContentRetriever.getCatalogs(connection);
        List<TdSchema> schemas=null;
        if (connection.getMetaData().getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
          schemas=DatabaseContentRetriever.getMSSQLSchemas(connection).get(catalog.getName());
        }
 else         if (ConnectionUtils.isPostgresql(connection)) {
          schemas=DatabaseContentRetriever.getSchemas(connection).get(null);
        }
 else {
          schemas=DatabaseContentRetriever.getSchemas(connection).get(catalog.getName());
        }
        if (schemas != null) {
          for (          TdSchema tdSchema : schemas) {
            if (tdSchema.getName().equals(schema.getName()))             return true;
          }
        }
        return false;
      }
 catch (      SQLException e) {
        log.error(e);
      }
    }
  }
  return checkSchemaByName(schema.getName());
}",0.8664898320070734
139305,"/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<TdSchema>> getSchemas(Connection connection) throws SQLException {
  Map<String,List<TdSchema>> catalogName2schemas=new HashMap<String,List<TdSchema>>();
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  final List<String> catalogNames=new ArrayList<String>();
  fillListOfCatalogs(connection,catalogNames);
  boolean odbcMssqlFlag=ConnectionUtils.isOdbcMssql(connection);
  ResultSet schemas=null;
  try {
    schemas=connectionMetadata.getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        String schemaName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          try {
            schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(1);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (catName != null) {
            createSchema(schemaName,catName,catalogName2schemas);
          }
        }
        if (odbcMssqlFlag) {
          try {
            schemaName=schemas.getString(1);
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
        }
        if (catName == null) {
          if (catalogNames.isEmpty()) {
            if (schemaName == null) {
              schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
            }
            createSchema(schemaName,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemaName,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty()) {
        TdSchema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}","/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<TdSchema>> getSchemas(Connection connection) throws SQLException {
  Map<String,List<TdSchema>> catalogName2schemas=new HashMap<String,List<TdSchema>>();
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  final List<String> catalogNames=new ArrayList<String>();
  fillListOfCatalogs(connection,catalogNames);
  boolean odbcMssqlFlag=ConnectionUtils.isOdbcMssql(connection);
  boolean postgresqlFlag=ConnectionUtils.isPostgresql(connection);
  ResultSet schemas=null;
  try {
    schemas=connectionMetadata.getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        String schemaName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          try {
            schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(1);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (catName != null) {
            createSchema(schemaName,catName,catalogName2schemas);
          }
        }
        if (odbcMssqlFlag || postgresqlFlag) {
          try {
            schemaName=schemas.getString(1);
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
        }
        if (catName == null) {
          if (catalogNames.isEmpty()) {
            if (schemaName == null) {
              schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
            }
            createSchema(schemaName,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemaName,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty()) {
        TdSchema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}",0.9865612648221344
139306,"/** 
 * DOC xqliu Comment method ""storeSqlResultsMatching"".
 * @param objects
 * @return
 */
public boolean storeSqlResultsMatching(List<Object[]> objects){
  if (!checkResults(objects,2)) {
    return false;
  }
  Long match=Long.valueOf(String.valueOf(objects.get(0)[0]));
  Long total=Long.valueOf(String.valueOf(objects.get(0)[1]));
  if (match != null) {
    this.setMatchingValueCount(match);
  }
  if (total != null) {
    this.setCount(total);
  }
  if (total != null && match != null) {
    this.setNotMatchingValueCount(total - match);
  }
  return true;
}","/** 
 * DOC xqliu Comment method ""storeSqlResultsMatching"".
 * @param objects
 * @return
 */
private boolean storeSqlResultsMatching(List<Object[]> objects){
  if (!checkResults(objects,2)) {
    return false;
  }
  Long match=Long.valueOf(String.valueOf(objects.get(0)[0]));
  Long total=Long.valueOf(String.valueOf(objects.get(0)[1]));
  if (match != null) {
    this.setMatchingValueCount(match);
  }
  if (total != null) {
    this.setCount(total);
  }
  if (total != null && match != null) {
    this.setNotMatchingValueCount(total - match);
  }
  return true;
}",0.9902912621359224
139307,"/** 
 * DOC xqliu Comment method ""storeSqlResultsFrequency"".
 * @param objects
 * @return
 */
public boolean storeSqlResultsFrequency(List<Object[]> objects){
  int nbColumns=2;
  if (hasDateGrainParameter()) {
    DateGrain dategrain=getParameters().getDateParameters().getDateAggregationType();
switch (dategrain) {
case DAY:
      nbColumns++;
case WEEK:
    nbColumns++;
case MONTH:
  nbColumns++;
case QUARTER:
nbColumns++;
case YEAR:
break;
default :
break;
}
}
if (objects.isEmpty()) {
if (log.isInfoEnabled()) {
log.info(""String_Node_Str"" + ""String_Node_Str"");
}
this.setValueToFreq(new HashMap<Object,Long>());
return true;
}
if (!checkResults(objects,nbColumns)) {
return false;
}
HashMap<Object,Long> mapVal2Freq=new HashMap<Object,Long>();
boolean debug=log.isDebugEnabled();
StringBuffer matrix=debug ? new StringBuffer() : null;
for (Object[] value2freq : objects) {
if (value2freq.length != nbColumns) {
log.error(""String_Node_Str"");
return false;
}
Object value=getValueFields(value2freq);
Long freq=Long.valueOf(String.valueOf(value2freq[nbColumns - 1]));
mapVal2Freq.put(value,freq);
if (debug) {
matrix.append(""String_Node_Str"").append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(""String_Node_Str"").append(freq);
}
}
if (debug) {
log.debug(matrix);
}
this.setValueToFreq(mapVal2Freq);
return true;
}","/** 
 * DOC xqliu Comment method ""storeSqlResultsFrequency"".
 * @param objects
 * @return
 */
private boolean storeSqlResultsFrequency(List<Object[]> objects){
  int nbColumns=2;
  if (hasDateGrainParameter()) {
    DateGrain dategrain=getParameters().getDateParameters().getDateAggregationType();
switch (dategrain) {
case DAY:
      nbColumns++;
case WEEK:
    nbColumns++;
case MONTH:
  nbColumns++;
case QUARTER:
nbColumns++;
case YEAR:
break;
default :
break;
}
}
if (objects.isEmpty()) {
if (log.isInfoEnabled()) {
log.info(""String_Node_Str"" + ""String_Node_Str"");
}
this.setValueToFreq(new HashMap<Object,Long>());
return true;
}
if (!checkResults(objects,nbColumns)) {
return false;
}
HashMap<Object,Long> mapVal2Freq=new HashMap<Object,Long>();
boolean debug=log.isDebugEnabled();
StringBuffer matrix=debug ? new StringBuffer() : null;
for (Object[] value2freq : objects) {
if (value2freq.length != nbColumns) {
log.error(""String_Node_Str"");
return false;
}
Object value=getValueFields(value2freq);
Long freq=Long.valueOf(String.valueOf(value2freq[nbColumns - 1]));
mapVal2Freq.put(value,freq);
if (debug) {
matrix.append(""String_Node_Str"").append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(""String_Node_Str"").append(freq);
}
}
if (debug) {
log.debug(matrix);
}
this.setValueToFreq(mapVal2Freq);
return true;
}",0.9958970533383066
139308,"/** 
 * DOC xqliu Comment method ""storeSqlResultsRowCount"".
 * @param objects
 * @return
 */
public boolean storeSqlResultsRowCount(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  Long c=Long.valueOf(String.valueOf(objects.get(0)[0]));
  this.setUserCount(c);
  return true;
}","/** 
 * DOC xqliu Comment method ""storeSqlResultsRowCount"".
 * @param objects
 * @return
 */
private boolean storeSqlResultsRowCount(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  Long c=Long.valueOf(String.valueOf(objects.get(0)[0]));
  this.setUserCount(c);
  return true;
}",0.9823434991974318
139309,"/** 
 * yyi 2009-11-30 10187 check schema is exist in DB
 * @param catName
 * @return
 */
public boolean checkSchema(TdSchema schema){
  TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(schema.eContainer());
  if (catalog != null) {
    try {
      connection.setCatalog(catalog.getName());
      DatabaseContentRetriever.getCatalogs(connection);
      List<TdSchema> schemas=connection.getMetaData().getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0) ? DatabaseContentRetriever.getMSSQLSchemas(connection).get(catalog.getName()) : DatabaseContentRetriever.getSchemas(connection).get(catalog.getName());
      for (      TdSchema tdSchema : schemas) {
        if (tdSchema.getName().equals(schema.getName()))         return true;
      }
      return false;
    }
 catch (    SQLException e) {
      log.error(e);
    }
  }
  return checkSchemaByName(schema.getName());
}","/** 
 * yyi 2009-11-30 10187 check schema is exist in DB
 * @param catName
 * @return
 */
public boolean checkSchema(TdSchema schema){
  EObject container=schema.eContainer();
  if (container != null) {
    TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
    if (catalog != null) {
      try {
        connection.setCatalog(catalog.getName());
        DatabaseContentRetriever.getCatalogs(connection);
        List<TdSchema> schemas=connection.getMetaData().getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0) ? DatabaseContentRetriever.getMSSQLSchemas(connection).get(catalog.getName()) : DatabaseContentRetriever.getSchemas(connection).get(catalog.getName());
        for (        TdSchema tdSchema : schemas) {
          if (tdSchema.getName().equals(schema.getName()))           return true;
        }
        return false;
      }
 catch (      SQLException e) {
        log.error(e);
      }
    }
  }
  return checkSchemaByName(schema.getName());
}",0.9288747346072188
139310,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    TdSchema schema=(TdSchema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(schema.eContainer());
    if (catalog != null) {
      catName=catalog.getName();
    }
    connection.setCatalog(catName);
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    TdSchema schema=(TdSchema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    EObject container=schema.eContainer();
    if (container != null) {
      TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
      if (catalog != null) {
        catName=catalog.getName();
      }
    }
    connection.setCatalog(catName);
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}",0.8227848101265823
139311,"/** 
 * DOC xqliu Comment method ""getRowsStatement"".
 * @param valid
 * @return
 */
private String getRowsStatement(boolean valid){
  String dataFilterClause=this.getDataFilterClause();
  Indicator indicator2=this.indicator;
  TableAnalysisSqlExecutor tasExecutor=new TableAnalysisSqlExecutor();
  tasExecutor.setCachedAnalysis(this.analysis);
  if (valid) {
    return tasExecutor.getValidStatement(dataFilterClause,indicator2);
  }
 else {
    String non=valid ? ""String_Node_Str"" : ""String_Node_Str"";
    NamedColumnSet set=(NamedColumnSet)indicator2.getAnalyzedElement();
    String whereClause=((WhereRule)indicator2.getIndicatorDefinition()).getWhereExpression();
    return ""String_Node_Str"" + getFullyQualifiedTableName(set) + dbmsLanguage.where()+ non+ ""String_Node_Str""+ whereClause+ ""String_Node_Str"";
  }
}","/** 
 * DOC xqliu Comment method ""getRowsStatement"".
 * @param valid
 * @return
 */
private String getRowsStatement(boolean valid){
  String dataFilterClause=this.getDataFilterClause();
  Indicator indicator2=this.indicator;
  TableAnalysisSqlExecutor tasExecutor=new TableAnalysisSqlExecutor();
  tasExecutor.setCachedAnalysis(this.analysis);
  if (valid) {
    return tasExecutor.getValidStatement(dataFilterClause,indicator2);
  }
 else {
    NamedColumnSet set=(NamedColumnSet)indicator2.getAnalyzedElement();
    String whereClause=((WhereRule)indicator2.getIndicatorDefinition()).getWhereExpression();
    return ""String_Node_Str"" + getFullyQualifiedTableName(set) + dbmsLanguage.where()+ dbmsLanguage.not()+ ""String_Node_Str""+ whereClause+ ""String_Node_Str""+ andDataFilterClause();
  }
}",0.93424317617866
139312,"/** 
 * return Column or TdXMLElement analysis executor. ADD xqliu bug 10238 2009-12-24
 * @param analysis
 * @param executionEngine
 * @return
 */
private static AnalysisExecutor getModelElementAnalysisExecutor(Analysis analysis,ExecutionLanguage executionEngine){
  TypedReturnCode<TdProviderConnection> rc=DataProviderHelper.getTdProviderConnection((DataProvider)analysis.getContext().getConnection());
  boolean mdm=ConnectionUtils.isMdmConnection(rc.getObject());
  boolean sql=ExecutionLanguage.SQL.equals(executionEngine);
  if (mdm) {
    return sql ? new MdmAnalysisSqlExecutor() : new MdmAnalysisExecutor();
  }
 else {
    if (analysis != null) {
      try {
        TypedReturnCode<Connection> connection=getConnection(analysis);
        if (connection.isOk()) {
          if (ConnectionUtils.isOdbcConnection(connection.getObject())) {
            ConnectionUtils.closeConnection(connection.getObject());
            return new ColumnAnalysisExecutor();
          }
        }
 else {
          ConnectionUtils.closeConnection(connection.getObject());
          log.error(connection.getMessage());
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
    return sql ? new ColumnAnalysisSqlExecutor() : new ColumnAnalysisExecutor();
  }
}","/** 
 * return Column or TdXMLElement analysis executor. ADD xqliu bug 10238 2009-12-24
 * @param analysis
 * @param executionEngine
 * @return
 */
private static AnalysisExecutor getModelElementAnalysisExecutor(Analysis analysis,ExecutionLanguage executionEngine){
  TypedReturnCode<TdProviderConnection> rc=DataProviderHelper.getTdProviderConnection((DataProvider)analysis.getContext().getConnection());
  boolean mdm=ConnectionUtils.isMdmConnection(rc.getObject());
  boolean sql=ExecutionLanguage.SQL.equals(executionEngine);
  if (mdm) {
    return sql ? new MdmAnalysisSqlExecutor() : new MdmAnalysisExecutor();
  }
 else {
    return sql ? new ColumnAnalysisSqlExecutor() : new ColumnAnalysisExecutor();
  }
}",0.714214463840399
139313,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    TdSchema schema=(TdSchema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(catName)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    connection.setCatalog(catName);
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    TdSchema schema=(TdSchema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(schema.eContainer());
    if (catalog != null) {
      catName=catalog.getName();
    }
    if (!checkSchema(catName)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    connection.setCatalog(catName);
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}",0.9358196010407632
139314,"/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param analyzedColumns
 * @return the quoted table name
 */
private String getTableName(final EList<Column> analyzedColumns){
  ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(analyzedColumns.get(0));
  String tableName=columnSetOwner.getName();
  Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
  if (pack == null) {
    log.error(""String_Node_Str"" + tableName);
  }
 else {
    this.catalogOrSchema=pack.getName();
  }
  return quote(tableName);
}","/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param analyzedColumns
 * @return the quoted table name
 */
private String getTableName(final EList<Column> analyzedColumns){
  ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(analyzedColumns.get(0));
  String tableName=columnSetOwner.getName();
  Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
  if (pack == null) {
    log.error(""String_Node_Str"" + tableName);
  }
 else {
    this.catalogOrSchema=pack.getName();
  }
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  return dbms().toQualifiedName(catalogName,schemaName,tableName);
}",0.6882859033752482
139315,"@Override public void reloadInputModel(){
  TdColumn column=null;
  modelInput.clear();
  synedEleMap.clear();
  for (  ModelElement element : analyzedElements) {
    try {
      column=(TdColumn)element;
      synedEleMap.put(column,null);
      ColumnSet anaColumnSet=ColumnHelper.getColumnSetOwner(column);
      Package anaPackage=ColumnSetHelper.getParentCatalogOrSchema(anaColumnSet);
      if (anaPackage == null) {
        return;
      }
      Package connPackage=null;
      for (      Package pk : newDataProvider.getDataPackage()) {
        if (pk instanceof TdCatalog && anaPackage instanceof TdSchema) {
          Catalog catl=CatalogHelper.getParentCatalog(anaPackage);
          if (pk.getName().equalsIgnoreCase(catl.getName())) {
            connPackage=pk;
            break;
          }
        }
 else         if (pk.getName().equalsIgnoreCase(anaPackage.getName())) {
          connPackage=pk;
          break;
        }
      }
      if (connPackage == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      List<?> connColumnSetList=null;
      if (connPackage instanceof TdCatalog && anaPackage instanceof TdSchema) {
        for (        TdSchema sche : CatalogHelper.getSchemas((TdCatalog)connPackage)) {
          if (sche.getName().equalsIgnoreCase(anaPackage.getName())) {
            if (anaColumnSet instanceof TdTable) {
              connColumnSetList=PackageHelper.getTables(sche);
            }
 else {
              connColumnSetList=PackageHelper.getViews(sche);
            }
            break;
          }
        }
      }
 else {
        if (anaColumnSet instanceof TdTable) {
          connColumnSetList=PackageHelper.getTables(connPackage);
        }
 else {
          connColumnSetList=PackageHelper.getViews(connPackage);
        }
      }
      ColumnSet connColumnSet=null;
      for (      Object colSet : connColumnSetList) {
        if (((ColumnSet)colSet).getName().equalsIgnoreCase(anaColumnSet.getName())) {
          connColumnSet=(ColumnSet)colSet;
          break;
        }
      }
      if (connColumnSet == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaColumnSet);
        synTreeModel.setNewDataProvElement(connPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      TdColumn connColumn=null;
      for (      TdColumn loopColumn : ColumnSetHelper.getColumns(connColumnSet)) {
        if (loopColumn.getName().equalsIgnoreCase(column.getName())) {
          connColumn=loopColumn;
          break;
        }
      }
      if (connColumn == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column);
        synTreeModel.setNewDataProvElement(connColumnSet);
        modelInput.add(synTreeModel);
        continue;
      }
      synedEleMap.put(column,connColumn);
      if (!connColumn.getSqlDataType().getName().equals(column.getSqlDataType().getName())) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column.getSqlDataType());
        modelInput.add(synTreeModel);
        continue;
      }
    }
 catch (    Exception e) {
      log.error(e,e);
      e.printStackTrace();
    }
  }
}","@Override public void reloadInputModel(){
  TdColumn column=null;
  modelInput.clear();
  synedEleMap.clear();
  for (  ModelElement element : analyzedElements) {
    try {
      column=(TdColumn)element;
      synedEleMap.put(column,null);
      ColumnSet anaColumnSet=ColumnHelper.getColumnSetOwner(column);
      Package anaPackage=ColumnSetHelper.getParentCatalogOrSchema(anaColumnSet);
      if (anaPackage == null) {
        return;
      }
      Package connPackage=null;
      for (      Package pk : newDataProvider.getDataPackage()) {
        if (pk instanceof TdCatalog && anaPackage instanceof TdSchema) {
          Catalog catl=CatalogHelper.getParentCatalog(anaPackage);
          if (null != catl && pk.getName().equalsIgnoreCase(catl.getName())) {
            connPackage=pk;
            break;
          }
        }
 else         if (null != anaPackage && pk.getName().equalsIgnoreCase(anaPackage.getName())) {
          connPackage=pk;
          break;
        }
      }
      if (connPackage == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      List<?> connColumnSetList=null;
      if (connPackage instanceof TdCatalog && anaPackage instanceof TdSchema) {
        for (        TdSchema sche : CatalogHelper.getSchemas((TdCatalog)connPackage)) {
          if (sche.getName().equalsIgnoreCase(anaPackage.getName())) {
            if (anaColumnSet instanceof TdTable) {
              connColumnSetList=PackageHelper.getTables(sche);
            }
 else {
              connColumnSetList=PackageHelper.getViews(sche);
            }
            break;
          }
        }
      }
 else {
        if (anaColumnSet instanceof TdTable) {
          connColumnSetList=PackageHelper.getTables(connPackage);
        }
 else {
          connColumnSetList=PackageHelper.getViews(connPackage);
        }
      }
      ColumnSet connColumnSet=null;
      for (      Object colSet : connColumnSetList) {
        if (((ColumnSet)colSet).getName().equalsIgnoreCase(anaColumnSet.getName())) {
          connColumnSet=(ColumnSet)colSet;
          break;
        }
      }
      if (connColumnSet == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(anaColumnSet);
        synTreeModel.setNewDataProvElement(connPackage);
        modelInput.add(synTreeModel);
        continue;
      }
      TdColumn connColumn=null;
      for (      TdColumn loopColumn : ColumnSetHelper.getColumns(connColumnSet)) {
        if (loopColumn.getName().equalsIgnoreCase(column.getName())) {
          connColumn=loopColumn;
          break;
        }
      }
      if (connColumn == null) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column);
        synTreeModel.setNewDataProvElement(connColumnSet);
        modelInput.add(synTreeModel);
        continue;
      }
      synedEleMap.put(column,connColumn);
      if (!connColumn.getSqlDataType().getName().equals(column.getSqlDataType().getName())) {
        SynTreeModel synTreeModel=new SynTreeModel(column);
        synTreeModel.setOldDataProvElement(column.getSqlDataType());
        modelInput.add(synTreeModel);
        continue;
      }
    }
 catch (    Exception e) {
      log.error(e,e);
      e.printStackTrace();
    }
  }
}",0.9944379391100704
139316,"/** 
 */
public void openColumnsSelectionDialog(){
  List<Column> columnList=treeViewer.getColumnSetMultiValueList();
  if (columnList == null) {
    columnList=new ArrayList<Column>();
  }
  ColumnsSelectionDialog dialog=new ColumnsSelectionDialog(this,null,DefaultMessagesImpl.getString(""String_Node_Str""),columnList,DefaultMessagesImpl.getString(""String_Node_Str""));
  if (dialog.open() == Window.OK) {
    Object[] columns=dialog.getResult();
    treeViewer.setInput(columns);
    return;
  }
}","/** 
 */
public void openColumnsSelectionDialog(){
  List<Column> columnList=treeViewer.getColumnSetMultiValueList();
  if (columnList == null) {
    columnList=new ArrayList<Column>();
  }
  ColumnsSelectionDialog dialog=new ColumnsSelectionDialog(this,null,DefaultMessagesImpl.getString(""String_Node_Str""),columnList,DefaultMessagesImpl.getString(""String_Node_Str""));
  if (dialog.open() == Window.OK) {
    Object[] columns=dialog.getResult();
    treeViewer.setInput(columns);
    indicatorsViewer.setInput(simpleStatIndicator);
    return;
  }
}",0.950381679389313
139317,"@Override public void mouseDown(MouseEvent e){
  deleteColumnItems(column);
  removeItemBranch(treeItem);
}","@Override public void mouseDown(MouseEvent e){
  deleteColumnItems(column);
  removeItemBranch(treeItem);
  updateBindConnection(masterPage,tree);
}",0.8392156862745098
139318,"private void addItemElements(final List<Column> columns,int index){
  for (int i=0; i < columns.size(); i++) {
    final TdColumn column=(TdColumn)columns.get(i);
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE,index);
    MetadataHelper.setDataminingType(DataminingType.NOMINAL,column);
    columnSetMultiValueList.add(index,column);
    String columnName=column.getName();
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ column.getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,column);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(column);
        removeItemBranch(treeItem);
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,1);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{delLabelEditor});
    delLabelEditor.layout();
    treeItem.setExpanded(true);
  }
  tree.layout();
  tree.redraw();
  this.setDirty(true);
  tree.forceFocus();
}","private void addItemElements(final List<Column> columns,int index){
  for (int i=0; i < columns.size(); i++) {
    final TdColumn column=(TdColumn)columns.get(i);
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE,index);
    MetadataHelper.setDataminingType(DataminingType.NOMINAL,column);
    columnSetMultiValueList.add(index,column);
    String columnName=column.getName();
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ column.getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,column);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(column);
        removeItemBranch(treeItem);
        updateBindConnection(masterPage,tree);
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,1);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{delLabelEditor});
    delLabelEditor.layout();
    treeItem.setExpanded(true);
  }
  tree.layout();
  tree.redraw();
  this.setDirty(true);
  tree.forceFocus();
}",0.98583910816511
139319,"/** 
 * DOC xzhao Comment method ""createTreeMenu"".
 * @param newTree
 * @param containEdit
 */
private void createTreeMenu(final Tree newTree,boolean containEdit){
  Menu oldMenu=newTree.getMenu();
  if (oldMenu != null && !oldMenu.isDisposed()) {
    oldMenu.dispose();
  }
  menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  MenuItem showMenuItem=new MenuItem(menu,SWT.CASCADE);
  showMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  showMenuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  showMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] selection=newTree.getSelection();
      if (selection.length == 1) {
        DQRespositoryView dqview=CorePlugin.getDefault().getRepositoryView();
        try {
          TdColumn tdColumn=(TdColumn)selection[0].getData(COLUMN_INDICATOR_KEY);
          dqview.showSelectedElements(tdColumn);
        }
 catch (        Exception ex) {
          log.error(ex,ex);
        }
      }
    }
  }
);
  if (containEdit) {
    editPatternMenuItem=new MenuItem(menu,SWT.CASCADE);
    editPatternMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    editPatternMenuItem.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
    editPatternMenuItem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        TreeItem[] selection=tree.getSelection();
        if (selection.length > 0) {
          TreeItem treeItem=selection[0];
          IndicatorUnit indicatorUnit=(IndicatorUnit)treeItem.getData(INDICATOR_UNIT_KEY);
          PatternMatchingIndicator indicator=(PatternMatchingIndicator)indicatorUnit.getIndicator();
          Pattern pattern=indicator.getParameters().getDataValidDomain().getPatterns().get(0);
          IFolder patternFolder=ResourceManager.getPatternFolder();
          IFolder sqlPatternFolder=ResourceManager.getPatternSQLFolder();
          IFile file=PatternResourceFileHelper.getInstance().getPatternFile(pattern,new IFolder[]{patternFolder,sqlPatternFolder});
          IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          try {
            activePage.openEditor(new FileEditorInput(file),""String_Node_Str"");
          }
 catch (          PartInitException e1) {
            log.error(e1,e1);
          }
        }
      }
    }
);
  }
  newTree.setMenu(menu);
}","/** 
 * DOC xzhao Comment method ""createTreeMenu"".
 * @param newTree
 * @param containEdit
 */
private void createTreeMenu(final Tree newTree,boolean containEdit){
  Menu oldMenu=newTree.getMenu();
  if (oldMenu != null && !oldMenu.isDisposed()) {
    oldMenu.dispose();
  }
  menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
      updateBindConnection(masterPage,tree);
    }
  }
);
  MenuItem showMenuItem=new MenuItem(menu,SWT.CASCADE);
  showMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  showMenuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  showMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] selection=newTree.getSelection();
      if (selection.length == 1) {
        DQRespositoryView dqview=CorePlugin.getDefault().getRepositoryView();
        try {
          TdColumn tdColumn=(TdColumn)selection[0].getData(COLUMN_INDICATOR_KEY);
          dqview.showSelectedElements(tdColumn);
        }
 catch (        Exception ex) {
          log.error(ex,ex);
        }
      }
    }
  }
);
  if (containEdit) {
    editPatternMenuItem=new MenuItem(menu,SWT.CASCADE);
    editPatternMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    editPatternMenuItem.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
    editPatternMenuItem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        TreeItem[] selection=tree.getSelection();
        if (selection.length > 0) {
          TreeItem treeItem=selection[0];
          IndicatorUnit indicatorUnit=(IndicatorUnit)treeItem.getData(INDICATOR_UNIT_KEY);
          PatternMatchingIndicator indicator=(PatternMatchingIndicator)indicatorUnit.getIndicator();
          Pattern pattern=indicator.getParameters().getDataValidDomain().getPatterns().get(0);
          IFolder patternFolder=ResourceManager.getPatternFolder();
          IFolder sqlPatternFolder=ResourceManager.getPatternSQLFolder();
          IFile file=PatternResourceFileHelper.getInstance().getPatternFile(pattern,new IFolder[]{patternFolder,sqlPatternFolder});
          IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          try {
            activePage.openEditor(new FileEditorInput(file),""String_Node_Str"");
          }
 catch (          PartInitException e1) {
            log.error(e1,e1);
          }
        }
      }
    }
);
  }
  newTree.setMenu(menu);
}",0.99211494655686
139320,"/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(80);
  column2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  parent.layout();
  createTreeMenu(newTree,false);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  addSourceDND(newTree);
  addTargetDND(newTree);
  addTreeListener(newTree);
  return newTree;
}","/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(80);
  column2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  parent.layout();
  createTreeMenu(newTree,false);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
      updateBindConnection(masterPage,tree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  addSourceDND(newTree);
  addTargetDND(newTree);
  addTreeListener(newTree);
  return newTree;
}",0.9772151898734176
139321,"@Override protected void handleRemove(){
  removeSelectedElements(newTree);
}","@Override protected void handleRemove(){
  removeSelectedElements(newTree);
  updateBindConnection(masterPage,tree);
}",0.7897435897435897
139322,"public static Package getCatalogOrSchema(EObject element){
  if (element == null) {
    return null;
  }
  TdCatalog res=SwitchHelpers.CATALOG_SWITCH.doSwitch(element);
  if (res != null) {
    return res;
  }
  return SwitchHelpers.SCHEMA_SWITCH.doSwitch(element);
}","public static Package getCatalogOrSchema(EObject element){
  if (element == null) {
    return null;
  }
  EObject eContainer=element.eContainer();
  if (eContainer != null) {
    return getCatalogOrSchema(eContainer);
  }
  TdCatalog res=SwitchHelpers.CATALOG_SWITCH.doSwitch(element);
  if (res != null) {
    return res;
  }
  return SwitchHelpers.SCHEMA_SWITCH.doSwitch(element);
}",0.8190184049079755
139323,"/** 
 * DOC rli Comment method ""reloadElementOfPackage"".
 * @param toReloadObj
 * @return
 * @throws ReloadCompareException
 */
private List<ColumnSet> reloadElementOfPackage(Package toReloadObj) throws ReloadCompareException {
  List<ColumnSet> columnSetList=new ArrayList<ColumnSet>();
  try {
    TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(toReloadObj);
    TdSchema schemaObj=SwitchHelpers.SCHEMA_SWITCH.doSwitch(toReloadObj);
    if (catalogObj != null) {
      if (isCompareTabel) {
        List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,catalogObj,null,true);
        CatalogHelper.addTables(tables,catalogObj);
        columnSetList.addAll(tables);
      }
      if (isCompareView) {
        List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,catalogObj,null,true);
        CatalogHelper.addViews(views,catalogObj);
        columnSetList.addAll(views);
      }
    }
 else     if (schemaObj != null) {
      if (isCompareTabel) {
        List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,schemaObj,null,true);
        SchemaHelper.addTables(tables,schemaObj);
        columnSetList.addAll(tables);
      }
      if (isCompareView) {
        List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,schemaObj,null,true);
        SchemaHelper.addViews(views,schemaObj);
        columnSetList.addAll(views);
      }
    }
 else {
      if (isCompareTabel) {
        List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,(Schema)toReloadObj,null,true);
        SchemaHelper.addTables(tables,(Schema)toReloadObj);
        columnSetList.addAll(tables);
      }
      if (isCompareView) {
        List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,(Schema)toReloadObj,null,true);
        SchemaHelper.addViews(views,(Schema)toReloadObj);
        columnSetList.addAll(views);
      }
    }
  }
 catch (  TalendException e1) {
    throw new ReloadCompareException(e1);
  }
  return columnSetList;
}","/** 
 * DOC rli Comment method ""reloadElementOfPackage"".
 * @param toReloadObj
 * @return
 * @throws ReloadCompareException
 */
private List<ColumnSet> reloadElementOfPackage(Package toReloadObj) throws ReloadCompareException {
  List<ColumnSet> columnSetList=new ArrayList<ColumnSet>();
  try {
    TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(toReloadObj);
    TdSchema schemaObj=SwitchHelpers.SCHEMA_SWITCH.doSwitch(toReloadObj);
    if (catalogObj != null) {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addTables(tables,catalogObj);
      columnSetList.addAll(tables);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addViews(views,catalogObj);
      columnSetList.addAll(views);
    }
 else     if (schemaObj != null) {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,schemaObj,null,true);
      SchemaHelper.addTables(tables,schemaObj);
      columnSetList.addAll(tables);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,schemaObj,null,true);
      SchemaHelper.addViews(views,schemaObj);
      columnSetList.addAll(views);
    }
 else {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,(Schema)toReloadObj,null,true);
      SchemaHelper.addTables(tables,(Schema)toReloadObj);
      columnSetList.addAll(tables);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,(Schema)toReloadObj,null,true);
      SchemaHelper.addViews(views,(Schema)toReloadObj);
      columnSetList.addAll(views);
    }
  }
 catch (  TalendException e1) {
    throw new ReloadCompareException(e1);
  }
  return columnSetList;
}",0.9349359811863078
139324,"public boolean execute(){
  IFile talendDefinitionFile=DefinitionHandler.getTalendDefinitionFile();
  if (talendDefinitionFile.exists()) {
    try {
    }
 catch (    Exception e) {
      log.error(e,e);
      return false;
    }
  }
  return true;
}","public boolean execute(){
  IFile talendDefinitionFile=DefinitionHandler.getTalendDefinitionFile();
  if (talendDefinitionFile.exists()) {
    try {
      talendDefinitionFile.delete(true,null);
      IFolder librariesFolder=ResourceManager.getLibrariesFolder();
      DefinitionHandler.getInstance().copyDefinitionsIntoFolder(librariesFolder);
    }
 catch (    Exception e) {
      log.error(e,e);
      return false;
    }
  }
  return true;
}",0.7183908045977011
139325,"private void createSimpleTable2(final ScrolledForm form,final Composite composite,final SimpleStatIndicator simpleStatIndicator){
  List<IndicatorUnit> units=new ArrayList<IndicatorUnit>();
  units.add(new IndicatorUnit(IndicatorEnum.RowCountIndicatorEnum,masterPage.getSimpleStatIndicator().getRowCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DistinctCountIndicatorEnum,masterPage.getSimpleStatIndicator().getDistinctCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DuplicateCountIndicatorEnum,masterPage.getSimpleStatIndicator().getDuplicateCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.UniqueIndicatorEnum,masterPage.getSimpleStatIndicator().getUniqueCountIndicator(),null));
  EIndicatorChartType simpleStatType=EIndicatorChartType.SIMPLE_STATISTICS;
  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(simpleStatType,units);
  ChartWithData chartData=new ChartWithData(simpleStatType,chartTypeState.getChart(),chartTypeState.getDataEntity());
  TableViewer tableviewer=chartTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  DataExplorer dataExplorer=chartTypeState.getDataExplorer();
  ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,masterPage.getAnalysis());
  JFreeChart chart=chartTypeState.getChart();
  ChartDecorator.decorate(chart);
  if (chart != null) {
    ChartComposite cc=new ChartComposite(composite,SWT.NONE,chart,true);
    GridData gd=new GridData();
    gd.widthHint=PluginConstant.CHART_STANDARD_WIDHT;
    gd.heightHint=PluginConstant.CHART_STANDARD_HEIGHT;
    cc.setLayoutData(gd);
  }
}","private void createSimpleTable2(final ScrolledForm form,final Composite composite,final SimpleStatIndicator simpleStatIndicator){
  List<IndicatorUnit> units=new ArrayList<IndicatorUnit>();
  units.add(new IndicatorUnit(IndicatorEnum.RowCountIndicatorEnum,masterPage.getSimpleStatIndicator().getRowCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DistinctCountIndicatorEnum,masterPage.getSimpleStatIndicator().getDistinctCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.DuplicateCountIndicatorEnum,masterPage.getSimpleStatIndicator().getDuplicateCountIndicator(),null));
  units.add(new IndicatorUnit(IndicatorEnum.UniqueIndicatorEnum,masterPage.getSimpleStatIndicator().getUniqueCountIndicator(),null));
  EIndicatorChartType simpleStatType=EIndicatorChartType.SIMPLE_STATISTICS;
  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(simpleStatType,units);
  ChartWithData chartData=new ChartWithData(simpleStatType,chartTypeState.getChart(),chartTypeState.getDataEntity());
  TableViewer tableviewer=chartTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  TableUtils.addTooltipOnTableItem(tableviewer.getTable());
  JFreeChart chart=chartTypeState.getChart();
  ChartDecorator.decorate(chart);
  if (chart != null) {
    ChartComposite cc=new ChartComposite(composite,SWT.NONE,chart,true);
    GridData gd=new GridData();
    gd.widthHint=PluginConstant.CHART_STANDARD_WIDHT;
    gd.heightHint=PluginConstant.CHART_STANDARD_HEIGHT;
    cc.setLayoutData(gd);
  }
}",0.9483627204030228
139326,"private static boolean checkQuotes(String[] values){
  for (  String value : values) {
    if (!value.matches(""String_Node_Str""))     return false;
  }
  return true;
}","private static boolean checkQuotes(String[] values){
  for (  String value : values) {
    if (!checkQuotationMarks(value))     return false;
  }
  return true;
}",0.8606060606060606
139327,"public static List<ReturnCode> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    ReturnCode rc=verifyImportFile(importFile);
    if (!rc.isOk()) {
      importEvent.add(rc);
    }
 else {
      try {
        CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
        reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
        reader.setTextQualifier(TEXT_QUAL);
        reader.setUseTextQualifier(USE_TEXT_QUAL);
        reader.readHeaders();
        while (reader.readRecord()) {
          String name=reader.get(PatternToExcelEnum.Label.getLiteral());
          if (names.contains(name)) {
            if (skip) {
              importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
              continue;
            }
            if (rename) {
              name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
            }
          }
          PatternParameters patternParameters=new ImportFactory().new PatternParameters();
          patternParameters.name=name;
          patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
          patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
          patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
          patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
          for (          PatternLanguageType languagetype : PatternLanguageType.values()) {
            String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
            if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
              patternParameters.regex.put(languagetype.getLiteral(),cellStr);
            }
          }
          String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
          names.add(name);
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
        }
        reader.close();
      }
 catch (      Exception e) {
        log.error(e,e);
        importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  return importEvent;
}","public static List<ReturnCode> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    ReturnCode rc=verifyImportFile(importFile);
    if (!rc.isOk()) {
      importEvent.add(rc);
    }
 else {
      try {
        CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
        reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
        reader.setTextQualifier(TEXT_QUAL);
        reader.setUseTextQualifier(USE_TEXT_QUAL);
        reader.readHeaders();
        while (reader.readRecord()) {
          String name=reader.get(PatternToExcelEnum.Label.getLiteral());
          if (names.contains(name)) {
            if (skip) {
              importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
              continue;
            }
            if (rename) {
              name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
            }
          }
          PatternParameters patternParameters=new ImportFactory().new PatternParameters();
          patternParameters.name=name;
          patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
          patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
          patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
          patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
          for (          PatternLanguageType languagetype : PatternLanguageType.values()) {
            String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
            if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
              patternParameters.regex.put(languagetype.getLiteral(),cellStr);
            }
          }
          try {
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(name);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
          }
 catch (          Exception e) {
            importEvent.add(new ReturnCode(""String_Node_Str"" + name,false));
          }
        }
        reader.close();
      }
 catch (      Exception e) {
        log.error(e,e);
        importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  return importEvent;
}",0.9822496263079222
139328,"@Override public boolean canDrop(ModelElement modelElement){
  return false;
}","@Override public boolean canDrop(ModelElement modelElement){
  List<TdColumn> existColumns=new ArrayList<TdColumn>();
  for (  Column columnFromMultiValueList : this.getColumnSetMultiValueList()) {
    existColumns.add((TdColumn)columnFromMultiValueList);
  }
  if (existColumns.contains(modelElement)) {
    return false;
  }
  return true;
}",0.3230403800475059
139329,"@Override public void dropModelElements(List<? extends ModelElement> modelElements,int index){
}","@Override public void dropModelElements(List<? extends ModelElement> modelElements,int index){
  List<Column> columns=new ArrayList<Column>();
  for (  ModelElement element : modelElements) {
    TdColumn column=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (column != null) {
      columns.add(column);
    }
  }
  this.addElements(columns,index);
}",0.4229074889867841
139330,"@Override public boolean canDrop(ModelElement modelElement){
  return false;
}","@Override public boolean canDrop(ModelElement modelElement){
  List<TdColumn> existColumns=new ArrayList<TdColumn>();
  for (  Column columnFromMultiValueList : this.getColumnSetMultiValueList()) {
    existColumns.add((TdColumn)columnFromMultiValueList);
  }
  if (existColumns.contains(modelElement)) {
    return false;
  }
  return true;
}",0.3230403800475059
139331,"@Override public void dropModelElements(List<? extends ModelElement> modelElements,int index){
}","@Override public void dropModelElements(List<? extends ModelElement> modelElements,int index){
  List<Column> columns=new ArrayList<Column>();
  for (  ModelElement element : modelElements) {
    TdColumn column=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (column != null) {
      columns.add(column);
    }
  }
  this.addElements(columns,index);
}",0.4229074889867841
139332,"@Override public boolean canDrop(Column column){
  return false;
}","@Override public boolean canDrop(ModelElement modelElement){
  List<ModelElement> existModelElements=new ArrayList<ModelElement>();
  for (  ModelElementIndicator modelElementIndicator : this.getModelElementIndicator()) {
    existModelElements.add(modelElementIndicator.getModelElement());
  }
  if (existModelElements.contains(modelElement)) {
    return false;
  }
  if (modelElement instanceof TdXMLElement) {
    return XmlElementHelper.isLeafNode((TdXMLElement)modelElement);
  }
  return true;
}",0.1725352112676056
139333,"@Override public boolean canDrop(ModelElement modelElement){
  return false;
}","@Override public boolean canDrop(ModelElement modelElement){
  return true;
}",0.9548387096774194
139334,"@Override public void dropModelElements(List<? extends ModelElement> modelElements,int index){
}","@Override public void dropModelElements(List<? extends ModelElement> modelElements,int index){
  List<Column> columns=new ArrayList<Column>();
  for (  ModelElement element : modelElements) {
    TdColumn column=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (column != null) {
      columns.add(column);
    }
  }
  JoinElementColumnDialog joinElementColumnDialog=new JoinElementColumnDialog(null);
  if (joinElementColumnDialog.open() == Window.OK) {
    JoinElement join=(JoinElement)this.myTableViewer.getElementAt(index);
    if (join == null) {
      join=this.addJoinElement();
    }
    if (join != null) {
      boolean dirty=false;
      for (      Column column : columns) {
        if (column != null) {
          if (!updateColumnSetPackage(column)) {
            break;
          }
          if (COLUMN_A.equals(joinElementColumnDialog.getAb())) {
            join.setColA(column);
            join.setColumnAliasA(column.getName());
            join.setTableAliasA(ColumnHelper.getColumnSetFullName(column));
            dirty=true;
          }
 else {
            join.setColB(column);
            join.setColumnAliasB(column.getName());
            join.setTableAliasB(ColumnHelper.getColumnSetFullName(column));
            dirty=true;
          }
        }
      }
      if (dirty) {
        this.masterPage.setDirty(true);
        this.myTableViewer.update(join,null);
      }
    }
  }
}",0.1270681667769689
139335,"/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<TdSchema>> getSchemas(Connection connection) throws SQLException {
  Map<String,List<TdSchema>> catalogName2schemas=new HashMap<String,List<TdSchema>>();
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  final List<String> catalogNames=new ArrayList<String>();
  fillListOfCatalogs(connection,catalogNames);
  boolean odbcMssqlFlag=ConnectionUtils.isOdbcMssql(connection);
  ResultSet schemas=null;
  try {
    schemas=connectionMetadata.getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        String schemaName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          try {
            schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(1);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (catName != null) {
            createSchema(schemaName,catName,catalogName2schemas);
          }
        }
        if (odbcMssqlFlag) {
          try {
            schemaName=schemas.getString(1);
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
        }
        if (catName == null) {
          if (catalogNames.isEmpty()) {
            createSchema(schemaName,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemaName,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty()) {
        TdSchema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}","/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<TdSchema>> getSchemas(Connection connection) throws SQLException {
  Map<String,List<TdSchema>> catalogName2schemas=new HashMap<String,List<TdSchema>>();
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  final List<String> catalogNames=new ArrayList<String>();
  fillListOfCatalogs(connection,catalogNames);
  boolean odbcMssqlFlag=ConnectionUtils.isOdbcMssql(connection);
  ResultSet schemas=null;
  try {
    schemas=connectionMetadata.getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        String schemaName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          try {
            schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(1);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (catName != null) {
            createSchema(schemaName,catName,catalogName2schemas);
          }
        }
        if (odbcMssqlFlag) {
          try {
            schemaName=schemas.getString(1);
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
        }
        if (catName == null) {
          if (catalogNames.isEmpty()) {
            if (schemaName == null) {
              schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
            }
            createSchema(schemaName,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemaName,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty()) {
        TdSchema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}",0.9780543727481166
139336,"/** 
 * yyi 2009-11-30 10187 check schema is exist in DB
 * @param catName
 * @return
 */
public boolean checkSchema(TdSchema schema){
  TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(schema.eContainer());
  if (catalog != null) {
    try {
      connection.setCatalog(catalog.getName());
      List<TdSchema> schemas=DatabaseContentRetriever.getSchemas(connection).get(catalog.getName());
      for (      TdSchema tdSchema : schemas) {
        if (tdSchema.getName().equals(schema.getName()))         return true;
      }
      return false;
    }
 catch (    SQLException e) {
      log.error(e);
    }
  }
  return checkSchemaByName(schema.getName());
}","/** 
 * yyi 2009-11-30 10187 check schema is exist in DB
 * @param catName
 * @return
 */
public boolean checkSchema(TdSchema schema){
  TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(schema.eContainer());
  if (catalog != null) {
    try {
      connection.setCatalog(catalog.getName());
      DatabaseContentRetriever.getCatalogs(connection);
      List<TdSchema> schemas=connection.getMetaData().getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0) ? DatabaseContentRetriever.getMSSQLSchemas(connection).get(catalog.getName()) : DatabaseContentRetriever.getSchemas(connection).get(catalog.getName());
      for (      TdSchema tdSchema : schemas) {
        if (tdSchema.getName().equals(schema.getName()))         return true;
      }
      return false;
    }
 catch (    SQLException e) {
      log.error(e);
    }
  }
  return checkSchemaByName(schema.getName());
}",0.8538461538461538
139337,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
case DefValueCountIndicatorEnum:
    map.put(MENU_VIEW_ROWS,getRowsStatement());
  break;
case UniqueIndicatorEnum:
map.put(MENU_VIEW_ROWS,getRowsStatementWithSubQuery());
map.put(MENU_VIEW_VALUES,getValuesStatement(this.columnName));
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,getDistinctValuesStatement(this.columnName));
break;
case DuplicateCountIndicatorEnum:
map.put(MENU_VIEW_ROWS,getRowsStatementWithSubQuery());
map.put(MENU_VIEW_VALUES,getValuesStatement(this.columnName));
break;
default :
}
return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (!isXml()) {
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
case DefValueCountIndicatorEnum:
      map.put(MENU_VIEW_ROWS,getRowsStatement());
    break;
case UniqueIndicatorEnum:
  map.put(MENU_VIEW_ROWS,getRowsStatementWithSubQuery());
map.put(MENU_VIEW_VALUES,getValuesStatement(this.columnName));
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,getDistinctValuesStatement(this.columnName));
break;
case DuplicateCountIndicatorEnum:
map.put(MENU_VIEW_ROWS,getRowsStatementWithSubQuery());
map.put(MENU_VIEW_VALUES,getValuesStatement(this.columnName));
break;
default :
}
}
return map;
}",0.9672774869109948
139338,"/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    IFolder dataProfilingFolder=createNewFolder(project,EResourceConstant.DATA_PROFILING);
    IFolder analysisFoler=createNewFolder(dataProfilingFolder,EResourceConstant.ANALYSIS);
    IFolder reportFoler=createNewFolder(dataProfilingFolder,EResourceConstant.REPORTS);
    IFolder librariesFoler=createNewFolder(project,EResourceConstant.LIBRARIES);
    IFolder patternFoler=createNewFolder(librariesFoler,EResourceConstant.PATTERNS);
    IFolder patternRegexFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_REGEX);
    IFolder patternSQLFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_SQL);
    IFolder sourceFileFoler=createNewFolder(librariesFoler,EResourceConstant.SOURCE_FILES);
    IFolder rulesFoler=createNewFolder(librariesFoler,EResourceConstant.RULES);
    IFolder rulesSQLFoler=createNewFolder(rulesFoler,EResourceConstant.RULES_SQL);
    IFolder exchangeFoler=createNewFolder(librariesFoler,EResourceConstant.EXCHANGE);
    IFolder indicatorFoler=createNewFolder(librariesFoler,EResourceConstant.INDICATORS);
    IFolder udiFoler=createNewFolder(indicatorFoler,EResourceConstant.USER_DEFINED_INDICATORS);
    IFolder jrxmlFolder=createNewFolder(librariesFoler,EResourceConstant.JRXML_TEMPLATE);
    IFolder metadataFolder=createNewFolder(project,EResourceConstant.METADATA);
    IFolder connectionFolder=createNewFolder(metadataFolder,EResourceConstant.DB_CONNECTIONS);
    IFolder mdmConnectionFolder=createNewFolder(metadataFolder,EResourceConstant.MDM_CONNECTIONS);
    copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null);
    copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null);
    copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null);
    copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null);
    WorkspaceVersionHelper.storeVersion();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}","/** 
 * DOC bZhou Comment method ""createDQStructure"".
 */
public void createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject project=ResourceManager.getRootProject();
    if (!project.exists()) {
      project=createNewProject(ResourceManager.getRootProjectName());
    }
    IFolder dataProfilingFolder=createNewFolder(project,EResourceConstant.DATA_PROFILING);
    IFolder analysisFoler=createNewFolder(dataProfilingFolder,EResourceConstant.ANALYSIS);
    IFolder reportFoler=createNewFolder(dataProfilingFolder,EResourceConstant.REPORTS);
    IFolder librariesFoler=createNewFolder(project,EResourceConstant.LIBRARIES);
    IFolder patternFoler=createNewFolder(librariesFoler,EResourceConstant.PATTERNS);
    IFolder patternRegexFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_REGEX);
    IFolder patternSQLFoler=createNewFolder(patternFoler,EResourceConstant.PATTERN_SQL);
    IFolder sourceFileFoler=createNewFolder(librariesFoler,EResourceConstant.SOURCE_FILES);
    IFolder rulesFoler=createNewFolder(librariesFoler,EResourceConstant.RULES);
    IFolder rulesSQLFoler=createNewFolder(rulesFoler,EResourceConstant.RULES_SQL);
    IFolder exchangeFoler=createNewFolder(librariesFoler,EResourceConstant.EXCHANGE);
    IFolder indicatorFoler=createNewFolder(librariesFoler,EResourceConstant.INDICATORS);
    IFolder udiFoler=createNewFolder(indicatorFoler,EResourceConstant.USER_DEFINED_INDICATORS);
    IFolder jrxmlFolder=createNewFolder(librariesFoler,EResourceConstant.JRXML_TEMPLATE);
    IFolder metadataFolder=createNewFolder(project,EResourceConstant.METADATA);
    IFolder connectionFolder=createNewFolder(metadataFolder,EResourceConstant.DB_CONNECTIONS);
    IFolder mdmConnectionFolder=createNewFolder(metadataFolder,EResourceConstant.MDM_CONNECTIONS);
    copyFilesToFolder(plugin,PATTERN_PATH,true,patternRegexFoler,null);
    copyFilesToFolder(plugin,SQL_LIKE_PATH,true,patternSQLFoler,null);
    copyFilesToFolder(plugin,DEMO_PATH,true,sourceFileFoler,null);
    copyFilesToFolder(plugin,RULES_PATH,true,rulesSQLFoler,null);
    WorkspaceVersionHelper.storeVersion();
    ResourceService.refreshStructure();
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    ProxyRepositoryManager.getInstance().save();
  }
}",0.9911699779249448
139339,"/** 
 * yyi 2009-11-30 10187 check schema is exist in DB
 * @param catName
 * @return
 */
public boolean checkSchema(String catName){
  if (0 == schemasName.size()) {
    Collection<TdSchema> schemas=new CatalogBuilder(connection).getSchemata();
    for (    TdSchema ts : schemas) {
      schemasName.add(ts.getName());
    }
  }
  if (!schemasName.contains(catName)) {
    return false;
  }
  return true;
}","/** 
 * yyi 2009-11-30 10187 check schema is exist in DB
 * @param catName
 * @return
 */
public boolean checkSchema(TdSchema schema){
  TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(schema.eContainer());
  if (catalog != null) {
    try {
      connection.setCatalog(catalog.getName());
      List<TdSchema> schemas=DatabaseContentRetriever.getSchemas(connection).get(catalog.getName());
      for (      TdSchema tdSchema : schemas) {
        if (tdSchema.getName().equals(schema.getName()))         return true;
      }
      return false;
    }
 catch (    SQLException e) {
      log.error(e);
    }
  }
  return checkSchemaByName(schema.getName());
}",0.4241860465116279
139340,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  elementIndics=this.elementToIndicators.values().iterator().next();
  if (elementIndics.isEmpty()) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  ConnectionIndicator connectionIndicator=getConnectionIndicator();
  this.resetCounts(connectionIndicator);
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(dataProvider);
  if (catalogs.isEmpty()) {
    List<TdSchema> schemata=DataProviderHelper.getTdSchema(dataProvider);
    for (    TdSchema tdSchema : schemata) {
      if (!checkSchema(tdSchema.getName())) {
        ok.setReturnCode(Messages.getString(""String_Node_Str"",tdSchema.getName()),false);
        return ok;
      }
    }
    for (    TdSchema tdSchema : schemata) {
      evalSchemaIndic(tdSchema,ok);
    }
  }
 else {
    for (    TdCatalog tdCatalog : catalogs) {
      if (!checkCatalog(tdCatalog.getName())) {
        ok.setReturnCode(Messages.getString(""String_Node_Str"",tdCatalog.getName()),false);
        return ok;
      }
    }
    for (    TdCatalog tdCatalog : catalogs) {
      String catName=tdCatalog.getName();
      try {
        connection.setCatalog(catName);
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + sqlStatement,e);
      }
      CatalogIndicator catalogIndic=SchemaFactory.eINSTANCE.createCatalogIndicator();
      DefinitionHandler.getInstance().setDefaultIndicatorDefinition(catalogIndic);
      List<TdSchema> schemas=CatalogHelper.getSchemas(tdCatalog);
      if (schemas.isEmpty()) {
        evalCatalogIndic(catalogIndic,tdCatalog,ok);
      }
 else {
        catalogIndic.setAnalyzedElement(tdCatalog);
        for (        TdSchema tdSchema : schemas) {
          SchemaIndicator schemaIndic=SchemaFactory.eINSTANCE.createSchemaIndicator();
          DefinitionHandler.getInstance().setDefaultIndicatorDefinition(schemaIndic);
          evalSchemaIndicLow(catalogIndic,schemaIndic,tdCatalog,tdSchema,ok);
        }
        catalogIndic.setSchemaCount(schemas.size());
      }
    }
  }
  if (log.isDebugEnabled()) {
    printCounts(connectionIndicator);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  elementIndics=this.elementToIndicators.values().iterator().next();
  if (elementIndics.isEmpty()) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  ConnectionIndicator connectionIndicator=getConnectionIndicator();
  this.resetCounts(connectionIndicator);
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(dataProvider);
  if (catalogs.isEmpty()) {
    List<TdSchema> schemata=DataProviderHelper.getTdSchema(dataProvider);
    for (    TdSchema tdSchema : schemata) {
      if (!checkSchema(tdSchema)) {
        ok.setReturnCode(Messages.getString(""String_Node_Str"",tdSchema.getName()),false);
        return ok;
      }
    }
    for (    TdSchema tdSchema : schemata) {
      evalSchemaIndic(tdSchema,ok);
    }
  }
 else {
    for (    TdCatalog tdCatalog : catalogs) {
      if (!checkCatalog(tdCatalog.getName())) {
        ok.setReturnCode(Messages.getString(""String_Node_Str"",tdCatalog.getName()),false);
        return ok;
      }
    }
    for (    TdCatalog tdCatalog : catalogs) {
      String catName=tdCatalog.getName();
      try {
        connection.setCatalog(catName);
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + sqlStatement,e);
      }
      CatalogIndicator catalogIndic=SchemaFactory.eINSTANCE.createCatalogIndicator();
      DefinitionHandler.getInstance().setDefaultIndicatorDefinition(catalogIndic);
      List<TdSchema> schemas=CatalogHelper.getSchemas(tdCatalog);
      if (schemas.isEmpty()) {
        evalCatalogIndic(catalogIndic,tdCatalog,ok);
      }
 else {
        catalogIndic.setAnalyzedElement(tdCatalog);
        for (        TdSchema tdSchema : schemas) {
          SchemaIndicator schemaIndic=SchemaFactory.eINSTANCE.createSchemaIndicator();
          DefinitionHandler.getInstance().setDefaultIndicatorDefinition(schemaIndic);
          evalSchemaIndicLow(catalogIndic,schemaIndic,tdCatalog,tdSchema,ok);
        }
        catalogIndic.setSchemaCount(schemas.size());
      }
    }
  }
  if (log.isDebugEnabled()) {
    printCounts(connectionIndicator);
  }
  return ok;
}",0.9979658258746948
139341,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    TdSchema schema=(TdSchema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(schema.eContainer());
    if (catalog != null) {
      catName=catalog.getName();
    }
    if (!checkSchema(catName)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    connection.setCatalog(catName);
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    TdSchema schema=(TdSchema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    TdCatalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(schema.eContainer());
    if (catalog != null) {
      catName=catalog.getName();
    }
    connection.setCatalog(catName);
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}",0.8055442315532002
139342,"private void impactExistingAnalyses(DataProvider oldDataProvider) throws PartInitException {
  EList<Dependency> clientDependencies=oldDataProvider.getSupplierDependency();
  List<Analysis> unsynedAnalyses=new ArrayList<Analysis>();
  for (  Dependency dep : clientDependencies) {
    StringBuffer impactedAnaStr=new StringBuffer();
    for (    ModelElement mod : dep.getClient()) {
      if (!(mod instanceof Analysis)) {
        continue;
      }
      Analysis ana=(Analysis)mod;
      unsynedAnalyses.add(ana);
      impactedAnaStr.append(ana.getName());
    }
    for (    Analysis analysis : unsynedAnalyses) {
      EMFSharedResources.getInstance().unloadResource(analysis.eResource().getURI().toString());
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      Path path=new Path(analysis.getFileName());
      IFile file=root.getFile(path);
      analysis=AnaResourceFileHelper.getInstance().readFromFile(file);
      Map<EObject,Collection<Setting>> referenceMaps=EcoreUtil.UnresolvedProxyCrossReferencer.find(analysis.eResource());
      Iterator<EObject> it=referenceMaps.keySet().iterator();
      ModelElement eobj=null;
      while (it.hasNext()) {
        eobj=(ModelElement)it.next();
        Collection<Setting> settings=referenceMaps.get(eobj);
        for (        Setting setting : settings) {
          if (setting.getEObject() instanceof AnalysisContext) {
            analysis.getContext().getAnalysedElements().remove(eobj);
          }
 else           if (setting.getEObject() instanceof Indicator) {
            analysis.getResults().getIndicators().remove(setting.getEObject());
          }
        }
      }
      AnaResourceFileHelper.getInstance().save(analysis);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editors=activePage.getEditorReferences();
  if (editors != null) {
    for (    IEditorReference editorRef : editors) {
      if (editorRef.getId().equals(ANALYSIS_EDITOR_ID)) {
        boolean isConfirm=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (!isConfirm) {
          return;
        }
      }
    }
    for (    IEditorReference editorRef : editors) {
      IEditorInput editorInput=editorRef.getEditorInput();
      if (editorRef.getId().equals(ANALYSIS_EDITOR_ID)) {
        activePage.closeEditor(editorRef.getEditor(false),false);
        activePage.openEditor(editorInput,ANALYSIS_EDITOR_ID);
      }
    }
  }
}","private void impactExistingAnalyses(DataProvider oldDataProvider) throws PartInitException {
  EList<Dependency> clientDependencies=oldDataProvider.getSupplierDependency();
  List<Analysis> unsynedAnalyses=new ArrayList<Analysis>();
  for (  Dependency dep : clientDependencies) {
    StringBuffer impactedAnaStr=new StringBuffer();
    for (    ModelElement mod : dep.getClient()) {
      if (!(mod instanceof Analysis)) {
        continue;
      }
      Analysis ana=(Analysis)mod;
      unsynedAnalyses.add(ana);
      impactedAnaStr.append(ana.getName());
    }
    for (    Analysis analysis : unsynedAnalyses) {
      Resource eResource=analysis.eResource();
      if (eResource == null) {
        continue;
      }
      EMFSharedResources.getInstance().unloadResource(eResource.getURI().toString());
      IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
      Path path=new Path(analysis.getFileName());
      IFile file=root.getFile(path);
      analysis=AnaResourceFileHelper.getInstance().readFromFile(file);
      Map<EObject,Collection<Setting>> referenceMaps=EcoreUtil.UnresolvedProxyCrossReferencer.find(eResource);
      Iterator<EObject> it=referenceMaps.keySet().iterator();
      ModelElement eobj=null;
      while (it.hasNext()) {
        eobj=(ModelElement)it.next();
        Collection<Setting> settings=referenceMaps.get(eobj);
        for (        Setting setting : settings) {
          if (setting.getEObject() instanceof AnalysisContext) {
            analysis.getContext().getAnalysedElements().remove(eobj);
          }
 else           if (setting.getEObject() instanceof Indicator) {
            analysis.getResults().getIndicators().remove(setting.getEObject());
          }
        }
      }
      AnaResourceFileHelper.getInstance().save(analysis);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editors=activePage.getEditorReferences();
  if (editors != null) {
    for (    IEditorReference editorRef : editors) {
      if (editorRef.getId().equals(ANALYSIS_EDITOR_ID)) {
        boolean isConfirm=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (!isConfirm) {
          return;
        }
      }
    }
    for (    IEditorReference editorRef : editors) {
      IEditorInput editorInput=editorRef.getEditorInput();
      if (editorRef.getId().equals(ANALYSIS_EDITOR_ID)) {
        activePage.closeEditor(editorRef.getEditor(false),false);
        activePage.openEditor(editorInput,ANALYSIS_EDITOR_ID);
      }
    }
  }
}",0.9693530079455164
139343,"@Override public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      try {
        IFolder folder=(IFolder)obj;
        if (ResourceManager.isRulesSQLFolder(folder)) {
          menu.add(new CreateDQRulesAction(folder));
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new DeleteDQRuleAction(selectedFiles));
  }
}","@Override public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      try {
        IFolder folder=(IFolder)obj;
        if (ResourceService.isSubFolder(ResourceManager.getRulesSQLFolder(),folder)) {
          menu.add(new CreateDQRulesAction(folder));
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new DeleteDQRuleAction(selectedFiles));
  }
}",0.9767750497677504
139344,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    IFolder folder=(IFolder)obj;
    if (ResourceManager.isAnalysisFolder(folder)) {
      CreateNewAnalysisAction createAnalysisAction=new CreateNewAnalysisAction(folder);
      menu.add(createAnalysisAction);
    }
  }
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    IFolder folder=(IFolder)obj;
    if (ResourceService.isSubFolder(ResourceManager.getAnalysisFolder(),folder)) {
      CreateNewAnalysisAction createAnalysisAction=new CreateNewAnalysisAction(folder);
      menu.add(createAnalysisAction);
    }
  }
}",0.9631966351209252
139345,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    IFolder folder=(IFolder)obj;
    if (ResourceManager.isConnectionFolder(folder) || ResourceManager.isMdmConnectionFolder(folder)) {
      CreateConnectionAction createConnectionAction=new CreateConnectionAction(folder);
      menu.add(createConnectionAction);
    }
  }
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    IFolder folder=(IFolder)obj;
    if (ResourceService.isSubFolder(ResourceManager.getConnectionFolder(),folder) || ResourceService.isSubFolder(ResourceManager.getMDMConnectionFolder(),folder)) {
      CreateConnectionAction createConnectionAction=new CreateConnectionAction(folder);
      menu.add(createConnectionAction);
    }
  }
}",0.8382352941176471
139346,"public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      IPath fullPath=((IFolder)obj).getFullPath();
      IPath sourceFileFolderPath=ResourceManager.getSourceFileFolder().getFullPath();
      if (fullPath.equals(sourceFileFolderPath)) {
        menu.add(new AddSqlFileAction((IFolder)obj));
        if (fullPath.segmentCount() > sourceFileFolderPath.segmentCount()) {
          menu.add(new RenameFolderAction((IFolder)obj));
        }
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (""String_Node_Str"".equalsIgnoreCase(file.getFileExtension())) {
        menu.add(new RenameSqlFileAction((IFile)obj));
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new OpenSqlFileAction(selectedFiles));
    menu.add(new DeleteSqlFileAction(selectedFiles));
  }
}","public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      IFolder folder=(IFolder)obj;
      IFolder sourceFolder=ResourceManager.getSourceFileFolder();
      if (ResourceService.isSubFolder(sourceFolder,folder)) {
        menu.add(new AddSqlFileAction((IFolder)obj));
        if (folder.getFullPath().segmentCount() > sourceFolder.getFullPath().segmentCount()) {
          menu.add(new RenameFolderAction((IFolder)obj));
        }
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (""String_Node_Str"".equalsIgnoreCase(file.getFileExtension())) {
        menu.add(new RenameSqlFileAction((IFile)obj));
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new OpenSqlFileAction(selectedFiles));
    menu.add(new DeleteSqlFileAction(selectedFiles));
  }
}",0.6072520751419834
139347,"public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      try {
        IFolder folder=(IFolder)obj;
        ExpressionType type=null;
        if (ResourceManager.isPatternRegex(folder)) {
          type=ExpressionType.REGEXP;
        }
 else         if (ResourceManager.isPatternSQLFolder(folder)) {
          type=ExpressionType.SQL_LIKE;
        }
        if (type != null) {
          menu.add(new CreatePatternAction((IFolder)obj,type));
          menu.add(new ImportPatternsAction((IFolder)obj,type));
          menu.add(new ExportPatternsAction((IFolder)obj,false));
          menu.add(new ExportPatternsAction((IFolder)obj,true));
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (EXTENSION_PATTERN.equalsIgnoreCase(file.getFileExtension())) {
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
  }
}","public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      try {
        IFolder folder=(IFolder)obj;
        ExpressionType type=null;
        if (ResourceService.isSubFolder(ResourceManager.getPatternRegexFolder(),folder)) {
          type=ExpressionType.REGEXP;
        }
 else         if (ResourceService.isSubFolder(ResourceManager.getPatternSQLFolder(),folder)) {
          type=ExpressionType.SQL_LIKE;
        }
        if (type != null) {
          menu.add(new CreatePatternAction((IFolder)obj,type));
          menu.add(new ImportPatternsAction((IFolder)obj,type));
          menu.add(new ExportPatternsAction((IFolder)obj,false));
          menu.add(new ExportPatternsAction((IFolder)obj,true));
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (EXTENSION_PATTERN.equalsIgnoreCase(file.getFileExtension())) {
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
  }
}",0.969814241486068
139348,"@Override public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      try {
        IFolder folder=(IFolder)obj;
        if (ResourceManager.isUDIFolder(folder)) {
          menu.add(new CreateUDIAction(folder));
          menu.add(new ImportUDIAction(folder));
          menu.add(new ExportUDIAction(folder,false));
          menu.add(new ExportUDIAction(folder,true));
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
}","@Override public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      try {
        IFolder folder=(IFolder)obj;
        if (ResourceService.isSubFolder(ResourceManager.getUDIFolder(),folder)) {
          menu.add(new CreateUDIAction(folder));
          menu.add(new ImportUDIAction(folder));
          menu.add(new ExportUDIAction(folder,false));
          menu.add(new ExportUDIAction(folder,true));
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
}",0.9738219895287958
139349,"private boolean checkRange(String inString){
  String[] definedRange=getDefinedRange(inString);
  if (definedRange != null && definedRange.length >= 2) {
    range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str""+ definedRange[1]+ ""String_Node_Str"";
    ModelElement temp=indicator.getAnalyzedElement();
    int sqltype=temp instanceof TdTable ? Types.INTEGER : ((TdColumn)temp).getJavaType();
    boolean isChildOfRange=IndicatorsPackage.eINSTANCE.getValueIndicator().isSuperTypeOf(indicator.eClass());
    if (Java2SqlType.isDateInSQL(sqltype) && isChildOfRange) {
      try {
        SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
        Date dValue=format.parse(value);
        if (""String_Node_Str"".equals(definedRange[0])) {
          Date max=format.parse(definedRange[1]);
          range=""String_Node_Str"" + definedRange[1] + ""String_Node_Str"";
          return dValue.after(max);
        }
 else         if (""String_Node_Str"".equals(definedRange[1])) {
          Date min=format.parse(definedRange[0]);
          range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str"";
          return dValue.before(min);
        }
 else {
          Date min=format.parse(definedRange[0]);
          Date max=format.parse(definedRange[1]);
          return dValue.after(max) || dValue.before(min);
        }
      }
 catch (      Exception e) {
        log.error(e,e);
        return false;
      }
    }
 else {
      Double min=StringFormatUtil.formatDouble(definedRange[0]);
      Double max=StringFormatUtil.formatDouble(definedRange[1]);
      Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
      if (min == null || Double.isNaN(min)) {
        min=Double.NEGATIVE_INFINITY;
      }
      if (max == null || Double.isNaN(max)) {
        max=Double.POSITIVE_INFINITY;
      }
      return dValue < min || dValue > max;
    }
  }
  return false;
}","private boolean checkRange(String inString){
  String[] definedRange=getDefinedRange(inString);
  if (definedRange != null && definedRange.length >= 2) {
    range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str""+ definedRange[1]+ ""String_Node_Str"";
    ModelElement temp=indicator.getAnalyzedElement();
    int sqltype=temp instanceof TdTable ? Types.INTEGER : ((TdColumn)temp).getJavaType();
    boolean isChildOfRange=IndicatorsPackage.eINSTANCE.getValueIndicator().isSuperTypeOf(indicator.eClass());
    if (Java2SqlType.isDateInSQL(sqltype) && isChildOfRange) {
      try {
        SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
        Date dValue=format.parse(value);
        if (""String_Node_Str"".equals(definedRange[0])) {
          Date max=format.parse(definedRange[1]);
          range=""String_Node_Str"" + definedRange[1] + ""String_Node_Str"";
          return dValue.after(max);
        }
 else         if (""String_Node_Str"".equals(definedRange[1])) {
          Date min=format.parse(definedRange[0]);
          range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str"";
          return dValue.before(min);
        }
 else {
          Date min=format.parse(definedRange[0]);
          Date max=format.parse(definedRange[1]);
          return dValue.after(max) || dValue.before(min);
        }
      }
 catch (      Exception e) {
        log.error(e,e);
        return false;
      }
    }
 else {
      Double min=StringFormatUtil.formatDouble(definedRange[0]);
      Double max=StringFormatUtil.formatDouble(definedRange[1]);
      Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
      if (min == null || Double.isNaN(min)) {
        min=Double.NEGATIVE_INFINITY;
      }
      if (max == null || Double.isNaN(max)) {
        max=Double.POSITIVE_INFINITY;
      }
      if (isPercent) {
        return dValue < min * 100 || dValue > max * 100;
      }
      return dValue < min || dValue > max;
    }
  }
  return false;
}",0.9693877551020408
139350,"protected String[] getDefinedRange(String inString){
  boolean flag=inString.indexOf('%') > 0;
  String[] threshold=IndicatorHelper.getDataThreshold(indicator);
  if (threshold == null) {
    if (flag) {
      threshold=IndicatorHelper.getIndicatorThresholdInPercent(indicator);
    }
 else {
      threshold=IndicatorHelper.getIndicatorThreshold(indicator);
    }
  }
  return threshold;
}","protected String[] getDefinedRange(String inString){
  isPercent=inString.indexOf('%') > 0;
  String[] threshold=IndicatorHelper.getDataThreshold(indicator);
  if (threshold == null) {
    if (isPercent) {
      threshold=IndicatorHelper.getIndicatorThresholdInPercent(indicator);
    }
 else {
      threshold=IndicatorHelper.getIndicatorThreshold(indicator);
    }
  }
  return threshold;
}",0.9565217391304348
139351,"public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  TableIndicatorUnit unit : units) {
    String columnKey=unit.getIndicatorName();
    double value=Double.parseDouble(unit.getValue().toString());
    customerdataset.addValue(getRowCount() - value,ROW_KEY_NOT_PASS,columnKey);
    customerdataset.addValue(value,ROW_KEY_PASS,columnKey);
    WhereRuleChartDataEntity entity=new WhereRuleChartDataEntity();
    entity.setRowCount(getRowCount());
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(columnKey);
    entity.setNumMatch(String.valueOf(value));
    entity.setNumNoMatch(String.valueOf(getRowCount() - value));
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  TableIndicatorUnit unit : units) {
    String columnKey=unit.getIndicatorName();
    double value=Double.parseDouble(unit.getValue().toString());
    customerdataset.addValue(getRowCount() - value,ROW_KEY_NOT_PASS,columnKey);
    customerdataset.addValue(value,ROW_KEY_PASS,columnKey);
    WhereRuleChartDataEntity entity=new WhereRuleChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(columnKey);
    entity.setNumMatch(String.valueOf(value));
    entity.setNumNoMatch(String.valueOf(getRowCount() - value));
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}",0.974983964079538
139352,"@Override protected void initialize(){
  String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(parameters);
  if (indicatorThreshold != null) {
    lowerText.setText(indicatorThreshold[0]);
    higherText.setText(indicatorThreshold[1]);
  }
  String[] indicatorPersentThreshold=IndicatorHelper.getIndicatorThresholdInPercent(parameters);
  if (indicatorPersentThreshold != null && isContainRowCount) {
    pLowerText.setText(indicatorPersentThreshold[0]);
    pHigherText.setText(indicatorPersentThreshold[1]);
  }
}","@Override protected void initialize(){
  String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(parameters);
  if (indicatorThreshold != null) {
    lowerText.setText(indicatorThreshold[0] == null ? ""String_Node_Str"" : indicatorThreshold[0]);
    higherText.setText(indicatorThreshold[1] == null ? ""String_Node_Str"" : indicatorThreshold[1]);
  }
  String[] indicatorPersentThreshold=IndicatorHelper.getIndicatorThresholdInPercent(parameters);
  if (indicatorPersentThreshold != null && isContainRowCount) {
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[0])) {
      Double min=StringFormatUtil.parseDouble(indicatorPersentThreshold[0]);
      pLowerText.setText(String.valueOf(min * 100));
    }
    if (StringUtils.isNotEmpty(indicatorPersentThreshold[1])) {
      Double max=StringFormatUtil.parseDouble(indicatorPersentThreshold[1]);
      pHigherText.setText(String.valueOf(max * 100));
    }
  }
}",0.6955922865013774
139353,"@Override public boolean performFinish(){
  boolean isMinEmpty=CheckValueUtils.isEmpty(lowerText.getText());
  boolean isMaxEmpty=CheckValueUtils.isEmpty(higherText.getText());
  if (isContainRowCount) {
    boolean isPerMinEmpty=CheckValueUtils.isEmpty(pLowerText.getText());
    boolean isPerMaxEmpty=CheckValueUtils.isEmpty(pHigherText.getText());
    if (isMinEmpty && isMaxEmpty && isPerMinEmpty&& isPerMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      if (isMinEmpty && isMaxEmpty) {
        removeRange(VALUE_THRESHOLD);
      }
 else {
        IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
      }
      if (isPerMinEmpty && isPerMaxEmpty) {
        removeRange(PERCENTAGE_THRESHOLD);
      }
 else {
        IndicatorHelper.setIndicatorThresholdInPercent(parameters,pLowerText.getText(),pHigherText.getText());
      }
    }
  }
 else {
    if (isMinEmpty && isMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
    }
  }
  return true;
}","@Override public boolean performFinish(){
  boolean isMinEmpty=CheckValueUtils.isEmpty(lowerText.getText());
  boolean isMaxEmpty=CheckValueUtils.isEmpty(higherText.getText());
  if (isContainRowCount) {
    String plower=pLowerText.getText();
    String phigher=pHigherText.getText();
    boolean isPerMinEmpty=CheckValueUtils.isEmpty(plower);
    boolean isPerMaxEmpty=CheckValueUtils.isEmpty(phigher);
    if (isMinEmpty && isMaxEmpty && isPerMinEmpty&& isPerMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      if (isMinEmpty && isMaxEmpty) {
        removeRange(VALUE_THRESHOLD);
      }
 else {
        IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
      }
      if (isPerMinEmpty && isPerMaxEmpty) {
        removeRange(PERCENTAGE_THRESHOLD);
      }
 else {
        String lower=""String_Node_Str"", higher=""String_Node_Str"";
        if (StringUtils.isNotEmpty(plower)) {
          lower=String.valueOf(Double.valueOf(plower) / 100);
        }
        if (StringUtils.isNotEmpty(phigher)) {
          higher=String.valueOf(Double.valueOf(phigher) / 100);
        }
        IndicatorHelper.setIndicatorThresholdInPercent(parameters,lower,higher);
      }
    }
  }
 else {
    if (isMinEmpty && isMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
    }
  }
  return true;
}",0.819258693160107
139354,"@Override public String caseTextValue(TextValue object){
  return String.valueOf(object.getValue());
}","@Override public String caseTextValue(TextValue object){
  return object.getValue();
}",0.9148936170212766
139355,"public static String getIndicatorValue(Indicator indicator){
  IndicatorsSwitch<String> mySwitch=new IndicatorsSwitch<String>(){
    @Override public String caseAverageLengthIndicator(    AverageLengthIndicator object){
      return createStandardNumber(object.getAverageLength());
    }
    @Override public String caseBlankCountIndicator(    BlankCountIndicator object){
      return String.valueOf(object.getBlankCount());
    }
    @Override public String caseDefValueCountIndicator(    DefValueCountIndicator object){
      return String.valueOf(object.getDefaultValCount());
    }
    @Override public String caseDistinctCountIndicator(    DistinctCountIndicator object){
      return String.valueOf(object.getDistinctValueCount());
    }
    @Override public String caseDuplicateCountIndicator(    DuplicateCountIndicator object){
      return String.valueOf(object.getDuplicateValueCount());
    }
    @Override public String caseMaxLengthIndicator(    MaxLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseMeanIndicator(    MeanIndicator object){
      return createStandardNumber(object.getMean());
    }
    @Override public String caseMedianIndicator(    MedianIndicator object){
      return createStandardNumber(object.getMedian());
    }
    @Override public String caseMinLengthIndicator(    MinLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseModeIndicator(    ModeIndicator object){
      return String.valueOf(object.getMode());
    }
    @Override public String caseNullCountIndicator(    NullCountIndicator object){
      return String.valueOf(object.getNullCount());
    }
    @Override public String casePatternMatchingIndicator(    PatternMatchingIndicator object){
      Long matchingValueCount=object.getMatchingValueCount();
      Long notMatchingValueCount=object.getNotMatchingValueCount();
      Double total=matchingValueCount.doubleValue() + notMatchingValueCount.doubleValue();
      return Double.valueOf(total > 0 ? matchingValueCount.doubleValue() * 100 / total : Double.NaN).toString();
    }
    @Override public String caseRowCountIndicator(    RowCountIndicator object){
      return String.valueOf(object.getCount());
    }
    @Override public String caseUniqueCountIndicator(    UniqueCountIndicator object){
      return String.valueOf(object.getUniqueValueCount());
    }
    @Override public String caseValueIndicator(    ValueIndicator object){
      return object.getValue();
    }
  }
;
  return mySwitch.doSwitch(indicator);
}","/** 
 * DOC bZhou Comment method ""getIndicatorValue"".
 * @param indicator
 * @return
 */
public static String getIndicatorValue(Indicator indicator){
  IndicatorsSwitch<String> mySwitch=new IndicatorsSwitch<String>(){
    @Override public String caseAverageLengthIndicator(    AverageLengthIndicator object){
      return createStandardNumber(object.getAverageLength());
    }
    @Override public String caseBlankCountIndicator(    BlankCountIndicator object){
      return String.valueOf(object.getBlankCount());
    }
    @Override public String caseDefValueCountIndicator(    DefValueCountIndicator object){
      return String.valueOf(object.getDefaultValCount());
    }
    @Override public String caseDistinctCountIndicator(    DistinctCountIndicator object){
      return String.valueOf(object.getDistinctValueCount());
    }
    @Override public String caseDuplicateCountIndicator(    DuplicateCountIndicator object){
      return String.valueOf(object.getDuplicateValueCount());
    }
    @Override public String caseMaxLengthIndicator(    MaxLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseMeanIndicator(    MeanIndicator object){
      return createStandardNumber(object.getMean());
    }
    @Override public String caseMedianIndicator(    MedianIndicator object){
      return createStandardNumber(object.getMedian());
    }
    @Override public String caseMinLengthIndicator(    MinLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseModeIndicator(    ModeIndicator object){
      return String.valueOf(object.getMode());
    }
    @Override public String caseNullCountIndicator(    NullCountIndicator object){
      return String.valueOf(object.getNullCount());
    }
    @Override public String casePatternMatchingIndicator(    PatternMatchingIndicator object){
      return String.valueOf(object.getMatchingValueCount());
    }
    @Override public String caseRowCountIndicator(    RowCountIndicator object){
      return String.valueOf(object.getCount());
    }
    @Override public String caseUniqueCountIndicator(    UniqueCountIndicator object){
      return String.valueOf(object.getUniqueValueCount());
    }
    @Override public String caseValueIndicator(    ValueIndicator object){
      return object.getValue();
    }
  }
;
  IndicatorSqlSwitch<String> sqlSwitch=new IndicatorSqlSwitch<String>(){
    @Override public String caseWhereRuleIndicator(    WhereRuleIndicator object){
      return String.valueOf(object.getUserCount());
    }
  }
;
  String result=mySwitch.doSwitch(indicator);
  return result == null ? sqlSwitch.doSwitch(indicator) : result;
}",0.7093614616688642
139356,"@Override public String casePatternMatchingIndicator(PatternMatchingIndicator object){
  Long matchingValueCount=object.getMatchingValueCount();
  Long notMatchingValueCount=object.getNotMatchingValueCount();
  Double total=matchingValueCount.doubleValue() + notMatchingValueCount.doubleValue();
  return Double.valueOf(total > 0 ? matchingValueCount.doubleValue() * 100 / total : Double.NaN).toString();
}","@Override public String casePatternMatchingIndicator(PatternMatchingIndicator object){
  return String.valueOf(object.getMatchingValueCount());
}",0.4827586206896552
139357,"/** 
 * DOC yyi Comment method ""runTableAnalysis"".
 * @param tableName
 */
protected void runTableAnalysis(String tableName){
  Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
  try {
    TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPack);
    List<TdTable> tdTables=DqRepositoryViewService.getTables(tdDataProvider,catalogObj,tableName,true);
    if (!tdTables.isEmpty()) {
      CatalogHelper.addTables(tdTables,catalogObj);
      TdTable table=tdTables.get(0);
      TableAnalysisWizard taw=(TableAnalysisWizard)WizardFactory.createAnalysisWizard(AnalysisType.TABLE,null);
      taw.setTdDataProvider(tdDataProvider);
      taw.setNamedColumnSet(new TdTable[]{table});
      taw.setShowTableSelectPage(false);
      WizardDialog dialog=new WizardDialog(null,taw);
      dialog.setPageSize(500,340);
      dialog.open();
    }
 else {
      MessageUI.openWarning(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
  }
 catch (  TalendException e) {
    e.printStackTrace();
  }
}","/** 
 * DOC yyi Comment method ""runTableAnalysis"".
 * @param tableName
 */
protected void runTableAnalysis(String tableName){
  Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
  TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPack);
  try {
    List<TdTable> tdTables=DqRepositoryViewService.getTables(tdDataProvider,catalogObj,tableName,true);
    if (!tdTables.isEmpty()) {
      TdTable table=tdTables.get(0);
      if (!CatalogHelper.getTables(catalogObj).contains(table)) {
        CatalogHelper.addTables(tdTables,catalogObj);
      }
      List<TdColumn> columns=DqRepositoryViewService.getColumns(tdDataProvider,table,null,true);
      new AnalyzeColumnSetAction(columns.toArray(new TdColumn[columns.size()])).run();
    }
 else {
      MessageUI.openWarning(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
  }
 catch (  TalendException e) {
    e.printStackTrace();
  }
}",0.6727181038830056
139358,"/** 
 * DOC bZhou DQStructureManager constructor comment.
 */
private DQStructureManager(){
  ResourceManager.refreshStructure();
}","/** 
 * DOC bZhou DQStructureManager constructor comment.
 */
private DQStructureManager(){
  ResourceService.refreshStructure();
}",0.9618320610687024
139359,"/** 
 * Method ""isNeedCreateStructure"" created by bzhou@talend.com.
 * @return true if need to create new resource structure.
 */
public boolean isNeedCreateStructure(){
  if (isSecludedVersion()) {
    return !ResourceManager.checkSecludedResource();
  }
  return !ResourceManager.checkResource();
}","/** 
 * Method ""isNeedCreateStructure"" created by bzhou@talend.com.
 * @return true if need to create new resource structure.
 */
public boolean isNeedCreateStructure(){
  if (isSecludedVersion()) {
    return !ResourceService.checkSecludedResource();
  }
  return !ResourceService.checkResource();
}",0.9533333333333334
139360,"public boolean execute(){
  try {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder folder=manager.createNewFolder(ResourceManager.getLibrariesFolder(),EResourceConstant.INDICATORS.getName());
    ResourceManager.setNoSubFolderProperty(folder);
    folder=manager.createNewFolder(folder,EResourceConstant.USER_DEFINED_INDICATORS.getName());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}","public boolean execute(){
  try {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder folder=manager.createNewFolder(ResourceManager.getLibrariesFolder(),EResourceConstant.INDICATORS.getName());
    ResourceService.setNoSubFolderProperty(folder);
    folder=manager.createNewFolder(folder,EResourceConstant.USER_DEFINED_INDICATORS.getName());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}",0.9850427350427352
139361,"public boolean execute(){
  IFolder libraryFolder=ResourceManager.getLibrariesFolder();
  try {
    IFolder patternFolder=ResourceManager.getPatternFolder();
    IFolder newRegexSubfolder=createSubfolder(patternFolder,EResourceConstant.PATTERN_REGEX.getName());
    moveItems(patternFolder,newRegexSubfolder);
    IFolder oldSqlPatternsFolder=libraryFolder.getFolder(SQL_PATTERNS);
    IFolder newSqlSubfolder=createSubfolder(patternFolder,EResourceConstant.PATTERN_SQL.getName());
    moveItems(oldSqlPatternsFolder,newSqlSubfolder);
    oldSqlPatternsFolder.delete(true,null);
    IFolder oldDqRulesFolder=libraryFolder.getFolder(DQ_RULES);
    IFolder newRulesFolder=createSubfolder(libraryFolder,EResourceConstant.RULES.getName());
    IFolder newRulesSQLSubfolder=createSubfolder(newRulesFolder,EResourceConstant.RULES_SQL.getName());
    moveItems(oldDqRulesFolder,newRulesSQLSubfolder);
    oldDqRulesFolder.delete(true,null);
    IFolder oldJrxmlFolder=libraryFolder.getFolder(JRXML_REPORTS);
    IFolder newJrxmlFolder=createSubfolder(libraryFolder,EResourceConstant.JRXML_TEMPLATE.getName());
    moveItems(oldJrxmlFolder,newJrxmlFolder);
    oldJrxmlFolder.delete(true,null);
    ResourceManager.refreshStructure();
  }
 catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
  return true;
}","public boolean execute(){
  IFolder libraryFolder=ResourceManager.getLibrariesFolder();
  try {
    IFolder patternFolder=ResourceManager.getPatternFolder();
    IFolder newRegexSubfolder=createSubfolder(patternFolder,EResourceConstant.PATTERN_REGEX.getName());
    moveItems(patternFolder,newRegexSubfolder);
    IFolder oldSqlPatternsFolder=libraryFolder.getFolder(SQL_PATTERNS);
    IFolder newSqlSubfolder=createSubfolder(patternFolder,EResourceConstant.PATTERN_SQL.getName());
    moveItems(oldSqlPatternsFolder,newSqlSubfolder);
    oldSqlPatternsFolder.delete(true,null);
    IFolder oldDqRulesFolder=libraryFolder.getFolder(DQ_RULES);
    IFolder newRulesFolder=createSubfolder(libraryFolder,EResourceConstant.RULES.getName());
    IFolder newRulesSQLSubfolder=createSubfolder(newRulesFolder,EResourceConstant.RULES_SQL.getName());
    moveItems(oldDqRulesFolder,newRulesSQLSubfolder);
    oldDqRulesFolder.delete(true,null);
    IFolder oldJrxmlFolder=libraryFolder.getFolder(JRXML_REPORTS);
    IFolder newJrxmlFolder=createSubfolder(libraryFolder,EResourceConstant.JRXML_TEMPLATE.getName());
    moveItems(oldJrxmlFolder,newJrxmlFolder);
    oldJrxmlFolder.delete(true,null);
    ResourceService.refreshStructure();
  }
 catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
  return true;
}",0.9207920792079208
139362,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
      return true;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return ResourceManager.isSubFolder(ResourceManager.getPatternFolder(),folder);
  }
  return false;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
      return true;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return ResourceService.isSubFolder(ResourceManager.getPatternFolder(),folder);
  }
  return false;
}",0.9835680751173708
139363,"/** 
 * DOC xqliu Comment method ""createPatternCheckedTreeSelectionDialog"".
 * @param libProject
 * @return
 */
public static CheckedTreeSelectionDialog createPatternCheckedTreeSelectionDialog(IFolder libProject){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(libProject);
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object patte : selection) {
        if (patte instanceof IFile) {
          IFile file=(IFile)patte;
          if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
            Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new DQFolderFliter(true));
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceManager.isSubFolder(ResourceManager.getPatternFolder(),folder);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  return dialog;
}","/** 
 * DOC xqliu Comment method ""createPatternCheckedTreeSelectionDialog"".
 * @param libProject
 * @return
 */
public static CheckedTreeSelectionDialog createPatternCheckedTreeSelectionDialog(IFolder libProject){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(libProject);
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object patte : selection) {
        if (patte instanceof IFile) {
          IFile file=(IFile)patte;
          if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
            Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new DQFolderFliter(true));
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceService.isSubFolder(ResourceManager.getPatternFolder(),folder);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  return dialog;
}",0.9963350785340314
139364,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    currentSelection=(IFolder)obj;
    if (!ResourceManager.isNoSubFolder(currentSelection)) {
      CreateUserFolderAction createSubFolderAction=new CreateUserFolderAction();
      menu.add(createSubFolderAction);
    }
  }
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    currentSelection=(IFolder)obj;
    if (!ResourceService.isNoSubFolder(currentSelection)) {
      CreateUserFolderAction createSubFolderAction=new CreateUserFolderAction();
      menu.add(createSubFolderAction);
    }
  }
}",0.9849137931034484
139365,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    currentSelection=(IFolder)obj;
    if (!ResourceManager.isReadOnlyFolder(currentSelection)) {
      DeleteFolderAction createSubFolderAction=new DeleteFolderAction(currentSelection);
      menu.add(createSubFolderAction);
    }
  }
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    currentSelection=(IFolder)obj;
    if (!ResourceService.isReadOnlyFolder(currentSelection)) {
      DeleteFolderAction createSubFolderAction=new DeleteFolderAction(currentSelection);
      menu.add(createSubFolderAction);
    }
  }
}",0.9852631578947368
139366,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
      return true;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return ResourceManager.isSubFolder(ResourceManager.getRulesFolder(),folder);
  }
  return false;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
      return true;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return ResourceService.isSubFolder(ResourceManager.getRulesFolder(),folder);
  }
  return false;
}",0.983451536643026
139367,"/** 
 * DOC xqliu Comment method ""showAddDQRuleDialog"".
 * @param treeItem
 * @param tableIndicator
 */
private void showAddDQRuleDialog(final TreeItem treeItem,final TableIndicator tableIndicator){
  IndicatorCheckedTreeSelectionDialog dialog=new IndicatorCheckedTreeSelectionDialog(null,new DQRuleLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(ResourceManager.getLibrariesFolder());
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object whereRule : selection) {
        if (whereRule instanceof IFile) {
          IFile file=(IFile)whereRule;
          if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
            WhereRule findWhereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findWhereRule);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceManager.isSubFolder(ResourceManager.getRulesFolder(),folder);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  dialog.create();
  IFolder whereRuleFolder=ResourceManager.getRulesFolder();
  Object[] ownedWhereRuleFiles=getOwnedWhereRuleFiles(tableIndicator,whereRuleFolder);
  dialog.setCheckedElements(ownedWhereRuleFiles);
  if (dialog.open() == Window.OK) {
    removeUncheckedWhereRuleIndicator(ownedWhereRuleFiles,dialog.getResult(),tableIndicator,whereRuleFolder);
    Object[] results=clearAddedResult(ownedWhereRuleFiles,dialog.getResult());
    for (    Object obj : results) {
      if (obj instanceof IFile) {
        IFile file=(IFile)obj;
        TableIndicatorUnit addIndicatorUnit=DQRuleUtilities.createIndicatorUnit(file,tableIndicator,getAnalysis());
        if (addIndicatorUnit != null) {
          createOneUnit(treeItem,addIndicatorUnit);
          setDirty(true);
        }
 else {
          WhereRule whereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
          MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",whereRule.getName()));
        }
      }
    }
  }
}","/** 
 * DOC xqliu Comment method ""showAddDQRuleDialog"".
 * @param treeItem
 * @param tableIndicator
 */
private void showAddDQRuleDialog(final TreeItem treeItem,final TableIndicator tableIndicator){
  IndicatorCheckedTreeSelectionDialog dialog=new IndicatorCheckedTreeSelectionDialog(null,new DQRuleLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(ResourceManager.getLibrariesFolder());
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object whereRule : selection) {
        if (whereRule instanceof IFile) {
          IFile file=(IFile)whereRule;
          if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
            WhereRule findWhereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findWhereRule);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceService.isSubFolder(ResourceManager.getRulesFolder(),folder);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  dialog.create();
  IFolder whereRuleFolder=ResourceManager.getRulesFolder();
  Object[] ownedWhereRuleFiles=getOwnedWhereRuleFiles(tableIndicator,whereRuleFolder);
  dialog.setCheckedElements(ownedWhereRuleFiles);
  if (dialog.open() == Window.OK) {
    removeUncheckedWhereRuleIndicator(ownedWhereRuleFiles,dialog.getResult(),tableIndicator,whereRuleFolder);
    Object[] results=clearAddedResult(ownedWhereRuleFiles,dialog.getResult());
    for (    Object obj : results) {
      if (obj instanceof IFile) {
        IFile file=(IFile)obj;
        TableIndicatorUnit addIndicatorUnit=DQRuleUtilities.createIndicatorUnit(file,tableIndicator,getAnalysis());
        if (addIndicatorUnit != null) {
          createOneUnit(treeItem,addIndicatorUnit);
          setDirty(true);
        }
 else {
          WhereRule whereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
          MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",whereRule.getName()));
        }
      }
    }
  }
}",0.9975895316804408
139368,"/** 
 * DOC bZhou Comment method ""initWorkspace"".
 */
private void initWorkspace(){
  ResourceManager.initResourcePersistence();
  SQLExplorerPlugin.getDefault().initAllDrivers();
  List<TdDataProvider> providers=PrvResourceFileHelper.getInstance().getAllDataProviders();
  for (  DataProvider provider : providers) {
    CorePlugin.getDefault().addConnetionAliasToSQLPlugin(provider);
  }
}","/** 
 * DOC bZhou Comment method ""initWorkspace"".
 */
private void initWorkspace(){
  ResourceService.initResourcePersistence();
  SQLExplorerPlugin.getDefault().initAllDrivers();
  List<TdDataProvider> providers=PrvResourceFileHelper.getInstance().getAllDataProviders();
  for (  DataProvider provider : providers) {
    CorePlugin.getDefault().addConnetionAliasToSQLPlugin(provider);
  }
}",0.9820971867007672
139369,"@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  if (!(target instanceof IResource)) {
    return Status.CANCEL_STATUS;
  }
  IResource targetRes=(IResource)target;
  for (  IResource res : getSelectedResources()) {
    if (res.getType() == IResource.FILE) {
      if ((targetRes.getType() == IResource.FOLDER)) {
        IFolder targetFolder=(IFolder)targetRes;
        IFolder sourceFolder=(IFolder)res.getParent();
        if (ResourceManager.isSubFolder(targetFolder,sourceFolder)) {
          return Status.OK_STATUS;
        }
        if (ResourceManager.isSubFolder(sourceFolder,targetFolder) && !ResourceManager.isNoSubFolder(sourceFolder)) {
          return Status.OK_STATUS;
        }
      }
 else       if ((targetRes.getType() == IResource.FILE) && FactoriesUtil.isAnalysisFile((IFile)res)) {
        IFile tfile=(IFile)targetRes;
        if (FactoriesUtil.isReportFile(tfile)) {
          return Status.OK_STATUS;
        }
      }
    }
  }
  return Status.CANCEL_STATUS;
}","@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  if (!(target instanceof IResource)) {
    return Status.CANCEL_STATUS;
  }
  IResource targetRes=(IResource)target;
  for (  IResource res : getSelectedResources()) {
    if (res.getType() == IResource.FILE) {
      IFile sourceFile=(IFile)res;
switch (targetRes.getType()) {
case IResource.FOLDER:
        IFolder targetFolder=(IFolder)targetRes;
      if (ResourceService.allowDND(sourceFile,targetFolder)) {
        return Status.OK_STATUS;
      }
    break;
case IResource.FILE:
  IFile targetFile=(IFile)targetRes;
if (FactoriesUtil.isAnalysisFile(sourceFile) && FactoriesUtil.isReportFile(targetFile)) {
  return Status.OK_STATUS;
}
break;
default :
break;
}
}
}
return Status.CANCEL_STATUS;
}",0.5185589519650655
139370,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
      return true;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return ResourceManager.isSubFolder(ResourceManager.getRulesFolder(),folder);
  }
  return false;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
      return true;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return ResourceService.isSubFolder(ResourceManager.getRulesFolder(),folder);
  }
  return false;
}",0.983451536643026
139371,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  FillLayout layout=new FillLayout();
  container.setLayout(layout);
  cViewer=new ContainerCheckedTreeViewer(container,SWT.NONE);
  cViewer.setLabelProvider(new DQRuleLabelProvider());
  cViewer.setContentProvider(new WorkbenchContentProvider());
  cViewer.setInput(ResourceManager.getLibrariesFolder());
  cViewer.addFilter(new DQFolderFliter(true));
  cViewer.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceManager.isSubFolder(ResourceManager.getRulesFolder(),folder);
      }
      return false;
    }
  }
);
  setControl(container);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  FillLayout layout=new FillLayout();
  container.setLayout(layout);
  cViewer=new ContainerCheckedTreeViewer(container,SWT.NONE);
  cViewer.setLabelProvider(new DQRuleLabelProvider());
  cViewer.setContentProvider(new WorkbenchContentProvider());
  cViewer.setInput(ResourceManager.getLibrariesFolder());
  cViewer.addFilter(new DQFolderFliter(true));
  cViewer.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return ResourceService.isSubFolder(ResourceManager.getRulesFolder(),folder);
      }
      return false;
    }
  }
);
  setControl(container);
}",0.9930898321816388
139372,"/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    Object defaultvalue=null;
    try {
      defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
    Expression defExpression=BooleanExpressionHelper.createExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
    String colName=null;
    try {
      colName=columns.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (colName == null) {
        colName=e1.getMessage();
      }
    }
    TdColumn column=ColumnHelper.createTdColumn(colName);
    try {
      column.setLength(columns.getInt(GetColumn.COLUMN_SIZE.name()));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    try {
      column.setIsNullable(NullableType.get(columns.getInt(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    try {
      column.setJavaType(columns.getInt(GetColumn.DATA_TYPE.name()));
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    try {
      String colComment=getComment(colName,columns);
      ColumnHelper.setComment(colComment,column);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    TdSqlDataType sqlDataType=DatabaseContentRetriever.createDataType(columns);
    column.setSqlDataType(sqlDataType);
    column.setInitialValue(defExpression);
    tableColumns.add(column);
  }
  columns.close();
  return tableColumns;
}","/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    String colName=null;
    try {
      colName=columns.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (colName == null) {
        colName=e1.getMessage();
      }
    }
    TdColumn column=ColumnHelper.createTdColumn(colName);
    int dataType=0;
    try {
      dataType=columns.getInt(GetColumn.DATA_TYPE.name());
      column.setJavaType(dataType);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    String typeName=null;
    try {
      typeName=columns.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    try {
      column.setLength(columns.getInt(GetColumn.COLUMN_SIZE.name()));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    int decimalDigits=0;
    try {
      decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
    int numPrecRadix=0;
    try {
      numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
    try {
      String colComment=getComment(colName,columns);
      ColumnHelper.setComment(colComment,column);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    Object defaultvalue=null;
    try {
      defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
    Expression defExpression=BooleanExpressionHelper.createExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
    try {
      column.setIsNullable(NullableType.get(columns.getInt(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    TdSqlDataType sqlDataType=DatabaseContentRetriever.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
    column.setSqlDataType(sqlDataType);
    column.setInitialValue(defExpression);
    tableColumns.add(column);
  }
  columns.close();
  return tableColumns;
}",0.6528282304099636
139373,"public static TdSqlDataType createDataType(ResultSet columns) throws SQLException {
  TdSqlDataType sqlDataType=RelationalFactory.eINSTANCE.createTdSqlDataType();
  try {
    sqlDataType.setName(columns.getString(GetColumn.TYPE_NAME.name()));
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  try {
    sqlDataType.setJavaDataType(columns.getInt(GetColumn.DATA_TYPE.name()));
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  try {
    sqlDataType.setNumericPrecision(columns.getInt(GetColumn.DECIMAL_DIGITS.name()));
    sqlDataType.setNumericPrecisionRadix(columns.getInt(GetColumn.NUM_PREC_RADIX.name()));
  }
 catch (  Exception e) {
    log.warn(e);
  }
  return sqlDataType;
}","/** 
 * DOC xqliu Comment method ""createDataType"".
 * @param dataType
 * @param typeName
 * @param decimalDigits
 * @param numPrecRadix
 * @return
 */
public static TdSqlDataType createDataType(int dataType,String typeName,int decimalDigits,int numPrecRadix){
  TdSqlDataType sqlDataType=RelationalFactory.eINSTANCE.createTdSqlDataType();
  sqlDataType.setName(typeName);
  sqlDataType.setJavaDataType(dataType);
  sqlDataType.setNumericPrecision(decimalDigits);
  sqlDataType.setNumericPrecisionRadix(numPrecRadix);
  return sqlDataType;
}",0.2815533980582524
139374,"/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<TdSchema>> getSchemas(Connection connection) throws SQLException {
  Map<String,List<TdSchema>> catalogName2schemas=new HashMap<String,List<TdSchema>>();
  ResultSet schemas=null;
  try {
    schemas=getConnectionMetadata(connection).getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          if (catName != null) {
            createSchema(schemas,catName,catalogName2schemas);
          }
        }
        if (catName == null) {
          final List<String> catalogNames=new ArrayList<String>();
          fillListOfCatalogs(connection,catalogNames);
          if (catalogNames.isEmpty()) {
            createSchema(schemas,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemas,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty()) {
        TdSchema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}","/** 
 * Method ""getSchemas"" returns a map of catalogs to schemas. Warning: if no catalog is found, catalog name (i.e. key of the map) can be null.
 * @param connection the connection
 * @return a map [catalog's name -> list of Schemas ].
 * @throws SQLException
 */
public static Map<String,List<TdSchema>> getSchemas(Connection connection) throws SQLException {
  Map<String,List<TdSchema>> catalogName2schemas=new HashMap<String,List<TdSchema>>();
  DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
  final List<String> catalogNames=new ArrayList<String>();
  fillListOfCatalogs(connection,catalogNames);
  boolean odbcMssqlFlag=ConnectionUtils.isOdbcMssql(connection);
  ResultSet schemas=null;
  try {
    schemas=connectionMetadata.getSchemas();
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  try {
    if (schemas != null) {
      final int columnCount=schemas.getMetaData() == null ? 0 : schemas.getMetaData().getColumnCount();
      boolean hasSchema=false;
      while (schemas.next()) {
        String catName=null;
        String schemaName=null;
        if (columnCount > 1) {
          try {
            catName=schemas.getString(MetaDataConstants.TABLE_CATALOG.name());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"",e);
          }
          try {
            schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (schemaName == null) {
            try {
              schemaName=schemas.getString(1);
            }
 catch (            Exception e) {
              log.warn(e,e);
            }
          }
          if (catName != null) {
            createSchema(schemaName,catName,catalogName2schemas);
          }
        }
        if (odbcMssqlFlag) {
          try {
            schemaName=schemas.getString(1);
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
        }
        if (catName == null) {
          if (catalogNames.isEmpty()) {
            createSchema(schemaName,null,catalogName2schemas);
          }
 else {
            for (            String catalogName : catalogNames) {
              createSchema(schemaName,catalogName,catalogName2schemas);
            }
          }
        }
        hasSchema=true;
      }
      if (!hasSchema && catalogName2schemas.isEmpty()) {
        TdSchema schema=createSchema(""String_Node_Str"");
        MultiMapHelper.addUniqueObjectToListMap(null,schema,catalogName2schemas);
      }
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (schemas != null) {
      schemas.close();
    }
  }
  return catalogName2schemas;
}",0.6805028936340052
139375,"/** 
 * Method ""changeCatalog"".
 * @param catalogName unquoted catalog's name
 * @param connection
 * @throws SQLException
 */
protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    connection.setCatalog(catalogName);
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SQLException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
}","/** 
 * Method ""changeCatalog"".
 * @param catalogName unquoted catalog's name
 * @param connection
 * @throws SQLException
 */
protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!ConnectionUtils.isOdbcMssql(connection)) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
catch (  SQLException e) {
    return traceError(""String_Node_Str"" + catalogName + ""String_Node_Str""+ e.getMessage());
  }
}",0.9276672694394212
139376,"/** 
 * DOC xqliu Comment method ""getVersion"".
 * @return
 */
public static ProductVersion getVersion(){
  Connection connection=null;
  try {
    connection=ConnectionUtils.createConnection(url,driver,props);
    if (connection != null) {
      Statement stat=connection.createStatement();
      ResultSet result=stat.executeQuery(""String_Node_Str"" + dbName + ""String_Node_Str"");
      result.next();
      String versionStr=result.getString(1);
      return ProductVersion.fromString(versionStr);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""getVersion"".
 * @param url
 * @param driver
 * @param props
 * @return
 */
public static ProductVersion getVersion(String url,String driver,Properties props){
  Connection connection=null;
  try {
    connection=ConnectionUtils.createConnection(url,driver,props);
    if (connection != null) {
      Statement stat=connection.createStatement();
      ResultSet result=stat.executeQuery(""String_Node_Str"" + dbName + ""String_Node_Str"");
      result.next();
      String versionStr=result.getString(1);
      return ProductVersion.fromString(versionStr);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}",0.9389312977099236
139377,"/** 
 * DOC bZhou Comment method ""updateVersionInDB"".
 * @param url
 * @param driver
 * @param props
 * @return
 */
public static boolean updateVersionInDB(String url,String driver,Properties props){
  Connection connection=null;
  try {
    connection=ConnectionUtils.createConnection(url,driver,props);
    if (connection != null) {
      Statement stat=connection.createStatement();
      ProductVersion curVersion=WorkspaceVersionHelper.getVesion();
      return stat.execute(""String_Node_Str"" + curVersion + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
  return false;
}","/** 
 * DOC bZhou Comment method ""updateVersionInDB"".
 * @param url
 * @param driver
 * @param props
 * @return
 */
public static boolean updateVersionInDB(String url,String driver,Properties props){
  Connection connection=null;
  ProductVersion curVersion=CorePlugin.getDefault().getProductVersion();
  String sql=""String_Node_Str"" + curVersion + ""String_Node_Str"";
  try {
    connection=ConnectionUtils.createConnection(url,driver,props);
    if (connection != null) {
      Statement stat=connection.createStatement();
      return stat.executeUpdate(sql) > 0;
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
  return false;
}",0.6817895400126024
139378,"protected String getFullyQualifiedTableName(NamedColumnSet set){
  String catalogName=CatalogHelper.getParentCatalog(set) == null ? null : CatalogHelper.getParentCatalog(set).getName();
  String schemaName=SchemaHelper.getParentSchema(set) == null ? null : SchemaHelper.getParentSchema(set).getName();
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,set.getName());
}","/** 
 * DOC bZhou Comment method ""getFullyQualifiedTableName"".
 * @param set
 * @return
 */
protected String getFullyQualifiedTableName(ColumnSet set){
  TdSchema parentSchema=SchemaHelper.getParentSchema(set);
  TdCatalog parentCatalog=CatalogHelper.getParentCatalog(set);
  if (parentSchema != null) {
    parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
  }
  String schemaName=parentSchema == null ? null : parentSchema.getName();
  String catalogName=parentCatalog == null ? null : parentCatalog.getName();
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,set.getName());
}",0.4220183486238532
139379,"/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    List<TdDataProvider> allDataProviders=PrvResourceFileHelper.getInstance().getAllDataProviders(ResourceManager.getMetadataFolder());
    for (    TdDataProvider dataProvider : allDataProviders) {
      if (dataProvider == tdDataProvider) {
        addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,editorName);
      }
    }
  }
 else {
    try {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
      SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
      editorPart.setText(query);
      return editorPart;
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    List<TdDataProvider> allDataProviders=PrvResourceFileHelper.getInstance().getAllDataProviders(ResourceManager.getMetadataFolder());
    for (    TdDataProvider dataProvider : allDataProviders) {
      if (dataProvider == tdDataProvider) {
        addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,editorName);
      }
    }
  }
 else {
    try {
      TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
      if (connection != null) {
        String userName=DataProviderHelper.getUser(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ editorName+ ""String_Node_Str"");
        input.setUser(alias.getUser(userName));
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}",0.9072826435675329
139380,"/** 
 * DOC yyi Comment method ""runTableAnalysis"".
 * @param tableName
 */
protected void runTableAnalysis(String tableName){
  Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
  try {
    TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPack);
    List<TdTable> tableList=DqRepositoryViewService.getTables(tdDataProvider,catalogObj,tableName,false);
    for (    TdTable table : tableList) {
      if (table.getName().equals(tableName)) {
        TableAnalysisWizard taw=(TableAnalysisWizard)WizardFactory.createAnalysisWizard(AnalysisType.TABLE,null);
        taw.setTdDataProvider(tdDataProvider);
        taw.setNamedColumnSet(new TdTable[]{table});
        taw.setShowTableSelectPage(false);
        WizardDialog dialog=new WizardDialog(null,taw);
        dialog.setPageSize(500,340);
        dialog.open();
        break;
      }
    }
  }
 catch (  TalendException e) {
    e.printStackTrace();
  }
}","/** 
 * DOC yyi Comment method ""runTableAnalysis"".
 * @param tableName
 */
protected void runTableAnalysis(String tableName){
  Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
  try {
    TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPack);
    List<TdTable> tdTables=DqRepositoryViewService.getTables(tdDataProvider,catalogObj,tableName,true);
    if (!tdTables.isEmpty()) {
      CatalogHelper.addTables(tdTables,catalogObj);
      TdTable table=tdTables.get(0);
      TableAnalysisWizard taw=(TableAnalysisWizard)WizardFactory.createAnalysisWizard(AnalysisType.TABLE,null);
      taw.setTdDataProvider(tdDataProvider);
      taw.setNamedColumnSet(new TdTable[]{table});
      taw.setShowTableSelectPage(false);
      WizardDialog dialog=new WizardDialog(null,taw);
      dialog.setPageSize(500,340);
      dialog.open();
    }
 else {
      MessageUI.openWarning(""String_Node_Str"" + tableName + ""String_Node_Str"");
    }
  }
 catch (  TalendException e) {
    e.printStackTrace();
  }
}",0.8168168168168168
139381,"/** 
 * DOC Administrator Comment method ""getRowsNotMatchStatement"".
 * @return
 */
public String getRowsNotMatchStatement(){
  String queryMatch=getRowsMatchStatement();
  String query=null;
  query=queryMatch.replace(dbmsLanguage.in(),""String_Node_Str"");
  if (query.indexOf(dbmsLanguage.and()) > 0) {
    query=query.replace(dbmsLanguage.and(),dbmsLanguage.or());
  }
  return query;
}","/** 
 * DOC yyi Comment method ""getRowsNotMatchStatement"".
 * @return
 */
public String getRowsNotMatchStatement(){
  Table tablea=(Table)indicator.getAnalyzedElement();
  String tableA=tablea.getName();
  String query=""String_Node_Str"" + dbmsLanguage.from() + getFullyQualifiedTableName(tablea);
  if (ColumnsetPackage.eINSTANCE.getRowMatchingIndicator() == indicator.eClass()) {
    Table tableb=(Table)ColumnHelper.getColumnSetOwner(((RowMatchingIndicator)indicator).getColumnSetB().get(0));
    String tableB=tableb.getName();
    EList<Column> columnSetA=((RowMatchingIndicator)indicator).getColumnSetA();
    EList<Column> columnSetB=((RowMatchingIndicator)indicator).getColumnSetB();
    String where=null;
    for (int i=0; i < columnSetA.size(); i++) {
      where=dbmsLanguage.or();
      if (i == 0) {
        where=dbmsLanguage.where();
      }
      String fullColumnAName=dbmsLanguage.quote(tableA) + ""String_Node_Str"" + dbmsLanguage.quote(columnSetA.get(i).getName());
      String fullColumnBName=dbmsLanguage.quote(tableB) + ""String_Node_Str"" + dbmsLanguage.quote(columnSetB.get(i).getName());
      String clause=""String_Node_Str"" + fullColumnBName + dbmsLanguage.from()+ getFullyQualifiedTableName(tableb)+ dbmsLanguage.where()+ fullColumnBName+ dbmsLanguage.isNotNull();
      query+=where + fullColumnAName + dbmsLanguage.notIn()+ inBrackets(clause);
      String listNulls=dbmsLanguage.or() + fullColumnAName + dbmsLanguage.isNull();
      query+=listNulls;
    }
  }
  return query;
}",0.1699208443271767
139382,"/** 
 * DOC jet adapt to   {@link GenericSQLHandler}("""").createGenericSqlWithRegexFunction() method<p>
 * @see GenericSQLHandler
 * @param function UDF function name.
 * @return special sql statement
 */
public String createGenericSqlWithRegexFunction(String function){
  return new GenericSQLHandler(""String_Node_Str"").createGenericSqlWithRegexFunction(function);
}","/** 
 * DOC jet adapt to   {@link GenericSQLHandler}("""").createGenericSqlWithRegexFunction() method <p>
 * @see GenericSQLHandler
 * @param function UDF function name.
 * @return special sql statement
 */
public String createGenericSqlWithRegexFunction(String function){
  return new GenericSQLHandler(""String_Node_Str"").createGenericSqlWithRegexFunction(function);
}",0.9986357435197816
139383,"private String[] getColumnSetOwnerNames(){
  List<String> existingTables=new ArrayList<String>();
  for (  ModelElement element : getAnalyzedColumns()) {
    if (element instanceof Column) {
      String tableName=ColumnHelper.getColumnSetFullName((Column)element);
      if (!existingTables.contains(tableName)) {
        existingTables.add(tableName);
      }
    }
 else     if (element instanceof Table) {
      String tableName=((Table)element).getName();
      if (!existingTables.contains(tableName)) {
        existingTables.add(tableName);
      }
    }
  }
  return existingTables.toArray(new String[existingTables.size()]);
}","private String[] getColumnSetOwnerNames(){
  List<String> existingTables=new ArrayList<String>();
  for (  ModelElement element : getAnalyzedColumns()) {
    if (element instanceof Column && element.eContainer() instanceof Table) {
      String tableName=ColumnHelper.getColumnSetFullName((Column)element);
      if (!existingTables.contains(tableName)) {
        existingTables.add(tableName);
      }
    }
 else     if (element instanceof Table) {
      String tableName=((Table)element).getName();
      if (!existingTables.contains(tableName)) {
        existingTables.add(tableName);
      }
    }
  }
  return existingTables.toArray(new String[existingTables.size()]);
}",0.9687738004569688
139384,"@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    if (parallel) {
      ok=runAnalysisIndicatorsParallel(connection,elementToIndicator,indicators);
    }
 else {
      ok=runAnalysisIndicators(connection,elementToIndicator,indicators);
    }
    connection.close();
    setRowCountAndNullCount(elementToIndicator);
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}","@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    if (canParallel()) {
      ok=runAnalysisIndicatorsParallel(connection,elementToIndicator,indicators);
    }
 else {
      ok=runAnalysisIndicators(connection,elementToIndicator,indicators);
    }
    connection.close();
    setRowCountAndNullCount(elementToIndicator);
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}",0.9894313034725716
139385,"/** 
 * DOC bZhou Comment method ""getVersion"".
 * @param url
 * @param driver
 * @param props
 * @return
 */
public static ProductVersion getVersion(String url,String driver,Properties props){
  Connection connection=null;
  try {
    connection=ConnectionUtils.createConnection(url,driver,props);
    if (connection != null) {
      Statement stat=connection.createStatement();
      ResultSet result=stat.executeQuery(""String_Node_Str"" + dbName + ""String_Node_Str"");
      result.next();
      String versionStr=result.getString(1);
      return ProductVersion.fromString(versionStr);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""getVersion"".
 * @param url
 * @param driver
 * @param props
 * @return
 */
public static ProductVersion getVersion(String url,String driver,Properties props){
  Connection connection=null;
  try {
    connection=ConnectionUtils.createConnection(url,driver,props);
    if (connection != null) {
      Statement stat=connection.createStatement();
      ResultSet result=stat.executeQuery(""String_Node_Str"" + getDbName() + ""String_Node_Str"");
      result.next();
      String versionStr=result.getString(1);
      return ProductVersion.fromString(versionStr);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}",0.9957957957957958
139386,"/** 
 * DOC bZhou Comment method ""checkConnection"".
 * @return
 */
public static boolean checkConnection(){
  int index=url.indexOf(dbName);
  String surl=""String_Node_Str"";
  if (index > 0) {
    surl=url.substring(0,index);
  }
  ReturnCode checkConnection=ConnectionService.checkConnection(surl,driver,props);
  return checkConnection.isOk();
}","/** 
 * DOC bZhou Comment method ""checkConnection"".
 * @return
 */
public static boolean checkConnection(){
  int index=getUrl().indexOf(getDbName());
  String surl=""String_Node_Str"";
  if (index > 0) {
    surl=getUrl().substring(0,index);
  }
  ReturnCode checkConnection=ConnectionService.checkConnection(surl,getDriver(),getProps());
  return checkConnection.isOk();
}",0.9318497913769124
139387,"/** 
 * DOC bZhou Comment method ""storeVersion"".
 * @return
 */
public static boolean storeVersion(){
  if (PluginChecker.isTDQLoaded()) {
    Preferences resourcePreferences=ResourcesPlugin.getPlugin().getPluginPreferences();
    if (dbType != null && dbType.equals(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey())) {
      if (user != null && pass != null) {
        Properties props=new Properties();
        props.setProperty(""String_Node_Str"",user);
        props.setProperty(""String_Node_Str"",pass);
        return updateVersionInDB(url + dbName,driver,props);
      }
    }
  }
  return false;
}","/** 
 * DOC bZhou Comment method ""storeVersion"".
 * @return
 */
public static boolean storeVersion(){
  if (PluginChecker.isTDQLoaded()) {
    if (getDbType() != null && getDbType().equals(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey())) {
      return updateVersionInDB(getUrl() + getDbName(),getDriver(),getProps());
    }
  }
  return false;
}",0.4930924548352816
139388,"/** 
 * DOC bZhou Comment method ""checkDatabase"".
 * @return
 */
public static boolean checkDatabase(){
  ReturnCode checkConnection=ConnectionService.checkConnection(url + dbName,driver,props);
  return checkConnection.isOk();
}","/** 
 * DOC bZhou Comment method ""checkDatabase"".
 * @return
 */
public static boolean checkDatabase(){
  ReturnCode checkConnection=ConnectionService.checkConnection(getUrl() + getDbName(),getDriver(),getProps());
  return checkConnection.isOk();
}",0.9288702928870292
139389,"/** 
 * DOC Administrator Comment method ""getRowsMatchStatement"".
 * @return
 */
public String getRowsMatchStatement(){
  Table tablea=(Table)indicator.getAnalyzedElement();
  String tableA=tablea.getName();
  String query=""String_Node_Str"" + dbmsLanguage.from() + getFullyQualifiedTableName(tablea);
  if (ColumnsetPackage.eINSTANCE.getRowMatchingIndicator() == indicator.eClass()) {
    Table tableb=(Table)ColumnHelper.getColumnSetOwner(((RowMatchingIndicator)indicator).getColumnSetB().get(0));
    String tableB=tableb.getName();
    EList<Column> columnSetA=((RowMatchingIndicator)indicator).getColumnSetA();
    EList<Column> columnSetB=((RowMatchingIndicator)indicator).getColumnSetB();
    String where=null;
    for (int i=0; i < columnSetA.size(); i++) {
      where=dbmsLanguage.and();
      if (i == 0) {
        where=dbmsLanguage.where();
      }
      String clause=""String_Node_Str"" + dbmsLanguage.quote(tableB) + ""String_Node_Str""+ dbmsLanguage.quote(columnSetB.get(i).getName())+ dbmsLanguage.from()+ getFullyQualifiedTableName(tableb);
      query+=where + dbmsLanguage.quote(tableA) + ""String_Node_Str""+ dbmsLanguage.quote(columnSetA.get(i).getName())+ dbmsLanguage.in()+ inBrackets(clause);
    }
  }
  return query;
}","/** 
 * DOC Administrator Comment method ""getRowsMatchStatement"".
 * @return
 */
public String getRowsMatchStatement(){
  Table tablea=(Table)indicator.getAnalyzedElement();
  String tableA=tablea.getName();
  String query=""String_Node_Str"" + dbmsLanguage.from() + getFullyQualifiedTableName(tablea);
  if (ColumnsetPackage.eINSTANCE.getRowMatchingIndicator() == indicator.eClass()) {
    Table tableb=(Table)ColumnHelper.getColumnSetOwner(((RowMatchingIndicator)indicator).getColumnSetB().get(0));
    String tableB=tableb.getName();
    EList<Column> columnSetA=((RowMatchingIndicator)indicator).getColumnSetA();
    EList<Column> columnSetB=((RowMatchingIndicator)indicator).getColumnSetB();
    String where=null;
    for (int i=0; i < columnSetA.size(); i++) {
      where=dbmsLanguage.and();
      if (i == 0) {
        where=dbmsLanguage.where();
      }
      String fullColumnName=dbmsLanguage.quote(tableB) + ""String_Node_Str"" + dbmsLanguage.quote(columnSetB.get(i).getName());
      String clause=""String_Node_Str"" + fullColumnName + dbmsLanguage.from()+ getFullyQualifiedTableName(tableb)+ dbmsLanguage.where()+ fullColumnName+ dbmsLanguage.isNotNull();
      query+=where + dbmsLanguage.quote(tableA) + ""String_Node_Str""+ dbmsLanguage.quote(columnSetA.get(i).getName())+ dbmsLanguage.in()+ inBrackets(clause);
    }
  }
  return query;
}",0.894980694980695
139390,"public ModelElement initCWMResourceBuilder(){
  DataProviderBuilder dpBuilder=new DataProviderBuilder();
  String driverPath=connectionParam.getDriverPath();
  if (driverPath != null) {
    LinkedList<String> jars=new LinkedList<String>();
    for (    String driverpath : driverPath.split(""String_Node_Str"")) {
      jars.add(driverpath);
    }
    String name=connectionParam.getJdbcUrl().substring(0,12);
    driver=dpBuilder.buildDriverForSQLExploer(name,connectionParam.getDriverClassName(),connectionParam.getJdbcUrl(),jars);
  }
  ReturnCode rc=dpBuilder.initializeDataProvider(connectionParam);
  if (rc.isOk()) {
    return dpBuilder.getDataProvider();
  }
 else {
    MessageDialog.openInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + rc.getMessage());
  }
  return null;
}","public ModelElement initCWMResourceBuilder(){
  DataProviderBuilder dpBuilder=new DataProviderBuilder();
  String driverPath=connectionParam.getDriverPath();
  if (driverPath != null) {
    LinkedList<String> jars=new LinkedList<String>();
    for (    String driverpath : driverPath.split(""String_Node_Str"")) {
      jars.add(driverpath);
    }
    String jdbcUrl=connectionParam.getJdbcUrl();
    if (jdbcUrl != null && jdbcUrl.length() > 12) {
      String name=jdbcUrl.substring(0,12);
      driver=dpBuilder.buildDriverForSQLExploer(name,connectionParam.getDriverClassName(),connectionParam.getJdbcUrl(),jars);
    }
  }
  ReturnCode rc=dpBuilder.initializeDataProvider(connectionParam);
  if (rc.isOk()) {
    return dpBuilder.getDataProvider();
  }
 else {
    MessageDialog.openInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + rc.getMessage());
  }
  return null;
}",0.9456762749445676
139391,"public void updateButtonState(){
  boolean complete=true;
  String dbTypeName=this.connectionParam.getSqlTypeName();
  if (!SupportDBUrlType.MSSQLDEFAULTURL.getDBKey().equals(dbTypeName)) {
    if (SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey().equals(dbTypeName)) {
      String driverName=this.connectionParam.getDriverClassName() == null ? ""String_Node_Str"" : this.connectionParam.getDriverClassName();
      String connURL=this.connectionParam.getJdbcUrl() == null ? ""String_Node_Str"" : this.connectionParam.getJdbcUrl();
      String userName=this.userid == null ? ""String_Node_Str"" : this.userid;
      if (""String_Node_Str"".equals(driverName) || ""String_Node_Str"".equals(connURL)) {
        complete=false;
      }
 else {
        complete=SupportDBUrlType.SQLITE3DEFAULTURL.getDbDriver().equals(driverName) ? true : !""String_Node_Str"".equals(userName);
      }
    }
 else     if (SupportDBUrlType.SQLITE3DEFAULTURL.getDBKey().equals(dbTypeName)) {
      String filename=this.connectionParam.getFilePath();
      complete&=filename != null && !filename.trim().equals(""String_Node_Str"");
    }
 else {
      complete&=this.userid != null && !this.userid.trim().equals(""String_Node_Str"");
    }
  }
  if (checkButton != null) {
    checkButton.setEnabled(complete);
  }
  setPageComplete(complete);
}","public void updateButtonState(){
  boolean complete=true;
  String dbTypeName=this.connectionParam.getSqlTypeName();
  if (!SupportDBUrlType.MSSQLDEFAULTURL.getDBKey().equals(dbTypeName)) {
    if (SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey().equals(dbTypeName)) {
      String driverName=this.connectionParam.getDriverClassName() == null ? ""String_Node_Str"" : this.connectionParam.getDriverClassName();
      String connURL=this.connectionParam.getJdbcUrl() == null ? ""String_Node_Str"" : this.connectionParam.getJdbcUrl();
      complete=!(""String_Node_Str"".equals(driverName) || ""String_Node_Str"".equals(connURL));
    }
 else     if (SupportDBUrlType.SQLITE3DEFAULTURL.getDBKey().equals(dbTypeName)) {
      String filename=this.connectionParam.getFilePath();
      complete&=filename != null && !filename.trim().equals(""String_Node_Str"");
    }
 else {
      complete&=this.userid != null && !this.userid.trim().equals(""String_Node_Str"");
    }
  }
  if (checkButton != null) {
    checkButton.setEnabled(complete);
  }
  setPageComplete(complete);
}",0.8682432432432432
139392,"public static List<String> getShouldNotIncludeIndicatorDefinitionUuidList(){
  if (shouldNotIncludeIndicatorDefinitionUuidList == null) {
    shouldNotIncludeIndicatorDefinitionUuidList=new ArrayList<String>();
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
  }
  return shouldNotIncludeIndicatorDefinitionUuidList;
}","public static List<String> getShouldNotIncludeIndicatorDefinitionUuidList(){
  if (shouldNotIncludeIndicatorDefinitionUuidList == null) {
    shouldNotIncludeIndicatorDefinitionUuidList=new ArrayList<String>();
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
    shouldNotIncludeIndicatorDefinitionUuidList.add(""String_Node_Str"");
  }
  return shouldNotIncludeIndicatorDefinitionUuidList;
}",0.8947368421052632
139393,"private String getTableNameFromColumn(Column column){
  ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
  if (columnSetOwner == null) {
    log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
  }
 else {
    Package schema=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
    catalogOrSchema=schema.getName();
    return columnSetOwner.getName();
  }
  return null;
}","private String getTableNameFromColumn(Column column){
  ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
  if (columnSetOwner == null) {
    log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
  }
 else {
    Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
    if (SwitchHelpers.SCHEMA_SWITCH.doSwitch(pack) != null) {
      schemaName=pack.getName();
      Package catalog=ColumnSetHelper.getParentCatalogOrSchema(pack);
      if (SwitchHelpers.CATALOG_SWITCH.doSwitch(catalog) != null) {
        catalogName=catalog.getName();
      }
    }
    if (SwitchHelpers.CATALOG_SWITCH.doSwitch(pack) != null) {
      catalogName=pack.getName();
    }
    return columnSetOwner.getName();
  }
  return null;
}",0.446535500427716
139394,"private boolean executeQuery(Indicator indicator,Connection connection,Expression query) throws AnalysisExecutionException {
  try {
    List<Object[]> myResultSet=executeQuery(catalogOrSchema,connection,query.getBody());
    indicator.storeSqlResults(myResultSet);
  }
 catch (  SQLException e) {
    log.error(e,e);
    return false;
  }
  return true;
}","private boolean executeQuery(Indicator indicator,Connection connection,Expression query) throws AnalysisExecutionException {
  try {
    List<Object[]> myResultSet=executeQuery(catalogName,connection,query.getBody());
    indicator.storeSqlResults(myResultSet);
  }
 catch (  SQLException e) {
    log.error(e,e);
    return false;
  }
  return true;
}",0.9858757062146892
139395,"/** 
 * DOC jet Comment method ""getNBDistinct"".
 * @param myResultSet
 * @return
 */
private static Long getNBDistinct(List<Object[]> myResultSet){
  if (myResultSet.size() == 1 && myResultSet.get(0).length == 2) {
    return (Long)myResultSet.get(0)[1];
  }
  return null;
}","/** 
 * DOC jet Comment method ""getNBDistinct"".
 * @param myResultSet
 * @return
 */
private static Long getNBDistinct(List<Object[]> myResultSet){
  if (myResultSet.size() == 1 && myResultSet.get(0).length == 2) {
    return Long.valueOf(String.valueOf(myResultSet.get(0)[1]));
  }
  return null;
}",0.951219512195122
139396,"private static Long getNB(List<Object[]> myResultSet){
  if (myResultSet.size() == 1 && myResultSet.get(0).length == 2) {
    return (Long)myResultSet.get(0)[0];
  }
  return null;
}","private static Long getNB(List<Object[]> myResultSet){
  if (myResultSet.size() == 1 && myResultSet.get(0).length == 2) {
    return Long.valueOf(String.valueOf(myResultSet.get(0)[0]));
  }
  return null;
}",0.9278350515463918
139397,"/** 
 * Method ""fillListOfCatalogs"" gets the list of catalogs only when the list is empty. When the list is not empty, no call is executed to the connection.
 * @param connection
 * @param catalogNames the list of catalogs of the given connection
 * @throws SQLException
 */
private static void fillListOfCatalogs(Connection connection,List<String> catalogNames) throws SQLException {
  if (catalogNames.isEmpty()) {
    ResultSet catalogSet=null;
    DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
    if (connectionMetadata.getDriverName() != null && connectionMetadata.getDriverName().toLowerCase().indexOf(DatabaseConstant.ODBC_ORACLE_DRIVER_NAME) < 0) {
      catalogSet=connectionMetadata.getCatalogs();
    }
    try {
      if (catalogSet != null) {
        while (catalogSet.next()) {
          String catalogName=catalogSet.getString(MetaDataConstants.TABLE_CAT.name());
          if (catalogName != null || !""String_Node_Str"".equals(catalogName)) {
            catalogNames.add(catalogName);
          }
        }
      }
    }
 catch (    SQLException e) {
      log.warn(""String_Node_Str"",e);
    }
 finally {
      if (catalogSet != null) {
        catalogSet.close();
      }
    }
  }
}","/** 
 * Method ""fillListOfCatalogs"" gets the list of catalogs only when the list is empty. When the list is not empty, no call is executed to the connection.
 * @param connection
 * @param catalogNames the list of catalogs of the given connection
 * @throws SQLException
 */
private static void fillListOfCatalogs(Connection connection,List<String> catalogNames) throws SQLException {
  if (catalogNames.isEmpty()) {
    ResultSet catalogSet=null;
    DatabaseMetaData connectionMetadata=getConnectionMetadata(connection);
    if (connectionMetadata.getDatabaseProductName() != null && connectionMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.ODBC_ORACLE_PRODUCT_NAME) < 0) {
      catalogSet=connectionMetadata.getCatalogs();
    }
    try {
      if (catalogSet != null) {
        while (catalogSet.next()) {
          String catalogName=catalogSet.getString(MetaDataConstants.TABLE_CAT.name());
          if (catalogName != null || !""String_Node_Str"".equals(catalogName)) {
            catalogNames.add(catalogName);
          }
        }
      }
    }
 catch (    SQLException e) {
      log.warn(""String_Node_Str"",e);
    }
 finally {
      if (catalogSet != null) {
        catalogSet.close();
      }
    }
  }
}",0.980169971671388
139398,"@Override protected boolean preDo(){
  List<TdColumn> tempList=new ArrayList<TdColumn>();
  for (  TdColumn column : getColumns()) {
    if (ColumnHelper.isPrimaryKey(column) || ColumnHelper.isForeignKey(column)) {
      continue;
    }
    if (!Java2SqlType.isTextInSQL(column.getJavaType())) {
      tempList.add(column);
    }
  }
  if (!tempList.isEmpty()) {
    ElementListSelectionDialog dialog=new ElementListSelectionDialog(null,new DQRepositoryViewLabelProvider());
    dialog.setElements(tempList.toArray());
    dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
    dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    dialog.setSize(80,20);
    dialog.create();
    if (Window.OK == dialog.open()) {
      for (      TdColumn column : tempList) {
        MetadataHelper.setDataminingType(DataminingType.NOMINAL,column);
      }
      return true;
    }
 else {
      return false;
    }
  }
  return true;
}","@Override protected boolean preDo(){
  List<TdColumn> tempList=new ArrayList<TdColumn>();
  for (  TdColumn column : getColumns()) {
    if (!Java2SqlType.isTextInSQL(column.getJavaType())) {
      tempList.add(column);
    }
  }
  if (!tempList.isEmpty()) {
    ElementListSelectionDialog dialog=new ElementListSelectionDialog(null,new DQRepositoryViewLabelProvider());
    dialog.setElements(tempList.toArray());
    dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
    dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    dialog.setSize(80,20);
    dialog.create();
    if (Window.OK == dialog.open()) {
      for (      TdColumn column : tempList) {
        MetadataHelper.setDataminingType(DataminingType.NOMINAL,column);
      }
      return true;
    }
 else {
      return false;
    }
  }
  return true;
}",0.9424778761061948
139399,"/** 
 * Method ""getDataminingType"" gets the type of the content of a column.
 * @param column
 * @return the DataminingType or null if none has been set.
 */
public static DataminingType getDataminingType(TdColumn column){
  if (ColumnHelper.isPrimaryKey(column) || ColumnHelper.isForeignKey(column)) {
    return DataminingType.NOMINAL;
  }
  return DataminingType.get(column.getContentType());
}","/** 
 * Method ""getDataminingType"" gets the type of the content of a column.
 * @param column
 * @return the DataminingType or null if none has been set.
 */
public static DataminingType getDataminingType(TdColumn column){
  String contentType=column.getContentType();
  if ((contentType == null || contentType.equals(""String_Node_Str"")) && (ColumnHelper.isPrimaryKey(column) || ColumnHelper.isForeignKey(column))) {
    return DataminingType.NOMINAL;
  }
 else {
    return DataminingType.get(column.getContentType());
  }
}",0.789587852494577
139400,"private void createStatisticalSection(Composite topComp){
  statisticalSection=this.createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  catalogTableViewer=new TableViewer(sectionClient,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  Table table=catalogTableViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<TdCatalog> catalogs=getCatalogs();
  boolean containSubSchema=false;
  for (  Catalog catalog : catalogs) {
    List<TdSchema> schemas=CatalogHelper.getSchemas(catalog);
    if (schemas.size() > 0) {
      containSubSchema=true;
      break;
    }
  }
  if (catalogs.size() > 0 && containSubSchema) {
    createCatalogSchemaColumns(table);
    provider=new CatalogSchemaViewerProvier();
    addColumnSorters(catalogTableViewer,catalogTableViewer.getTable().getColumns(),catalogWithSchemaSorters);
    final TableViewer schemaTableViewer=createSecondStatisticalTable(sectionClient);
    schemaTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
    catalogTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        StructuredSelection selection=(StructuredSelection)event.getSelection();
        CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
        schemaTableViewer.setInput(firstElement.getSchemaIndicators());
        schemaTableViewer.getTable().setVisible(true);
        addColumnSorters(schemaTableViewer,schemaTableViewer.getTable().getColumns(),schemaSorters);
      }
    }
);
  }
 else {
    if (catalogs.size() > 0) {
      createCatalogTableColumns(table);
      provider=new CatalogViewerProvier();
    }
 else {
      createSchemaTableColumns(table);
      provider=new SchemaViewerProvier();
    }
    addColumnSorters(catalogTableViewer,catalogTableViewer.getTable().getColumns(),schemaSorters);
    catalogTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
  }
  catalogTableViewer.setLabelProvider(provider);
  catalogTableViewer.setContentProvider(provider);
  doSetInput();
  tableAndViewComposite=new Composite(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tableAndViewComposite);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.horizontalSpacing=50;
  tableAndViewComposite.setLayout(layout);
  tableAndViewComposite.setVisible(false);
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}","private void createStatisticalSection(Composite topComp){
  statisticalSection=this.createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  catalogTableViewer=new TableViewer(sectionClient,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  Table table=catalogTableViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<TdCatalog> catalogs=getCatalogs();
  boolean containSubSchema=false;
  for (  Catalog catalog : catalogs) {
    List<TdSchema> schemas=CatalogHelper.getSchemas(catalog);
    if (schemas.size() > 0) {
      containSubSchema=true;
      break;
    }
  }
  if (catalogs.size() > 0 && containSubSchema) {
    createCatalogSchemaColumns(table);
    provider=new CatalogSchemaViewerProvier();
    addColumnSorters(catalogTableViewer,catalogTableViewer.getTable().getColumns(),catalogWithSchemaSorters);
    final TableViewer schemaTableViewer=createSecondStatisticalTable(sectionClient);
    schemaTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
    catalogTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        StructuredSelection selection=(StructuredSelection)event.getSelection();
        CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
        if (firstElement != null) {
          schemaTableViewer.setInput(firstElement.getSchemaIndicators());
          schemaTableViewer.getTable().setVisible(true);
          addColumnSorters(schemaTableViewer,schemaTableViewer.getTable().getColumns(),schemaSorters);
        }
      }
    }
);
  }
 else {
    if (catalogs.size() > 0) {
      createCatalogTableColumns(table);
      provider=new CatalogViewerProvier();
    }
 else {
      createSchemaTableColumns(table);
      provider=new SchemaViewerProvier();
    }
    addColumnSorters(catalogTableViewer,catalogTableViewer.getTable().getColumns(),schemaSorters);
    catalogTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
  }
  catalogTableViewer.setLabelProvider(provider);
  catalogTableViewer.setContentProvider(provider);
  doSetInput();
  tableAndViewComposite=new Composite(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tableAndViewComposite);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.horizontalSpacing=50;
  tableAndViewComposite.setLayout(layout);
  tableAndViewComposite.setVisible(false);
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}",0.9745644599303136
139401,"/** 
 * DOC qzhang Comment method ""doSetInput"".
 */
public void doSetInput(){
  List<CatalogIndicator> indicatorList=null;
  if (this.analysis.getResults().getIndicators().size() > 0) {
    indicatorList=getCatalogIndicators();
    if (indicatorList.size() == 0) {
      catalogTableViewer.setInput(getSchemaIndicators());
    }
 else {
      List<SchemaIndicator> schemaIndicators=new ArrayList<SchemaIndicator>();
      schemaIndicators.addAll(getSchemaIndicators());
      schemaIndicators.addAll(indicatorList);
      catalogTableViewer.setInput(schemaIndicators);
    }
  }
 else {
    indicatorList=new ArrayList<CatalogIndicator>();
  }
}","/** 
 * DOC qzhang Comment method ""doSetInput"".
 */
public void doSetInput(){
  List<CatalogIndicator> indicatorList=null;
  if (this.analysis.getResults().getIndicators().size() > 0) {
    indicatorList=getCatalogIndicators();
    if (indicatorList.size() == 0) {
      catalogTableViewer.setInput(getSchemaIndicators());
    }
 else {
      catalogTableViewer.setInput(indicatorList);
    }
  }
 else {
    indicatorList=new ArrayList<CatalogIndicator>();
  }
}",0.7870036101083032
139402,"public void selectionChanged(SelectionChangedEvent event){
  StructuredSelection selection=(StructuredSelection)event.getSelection();
  CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
  schemaTableViewer.setInput(firstElement.getSchemaIndicators());
  schemaTableViewer.getTable().setVisible(true);
  addColumnSorters(schemaTableViewer,schemaTableViewer.getTable().getColumns(),schemaSorters);
}","public void selectionChanged(SelectionChangedEvent event){
  StructuredSelection selection=(StructuredSelection)event.getSelection();
  CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
  if (firstElement != null) {
    schemaTableViewer.setInput(firstElement.getSchemaIndicators());
    schemaTableViewer.getTable().setVisible(true);
    addColumnSorters(schemaTableViewer,schemaTableViewer.getTable().getColumns(),schemaSorters);
  }
}",0.954954954954955
139403,"@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  if (getAnalysisBuilder() != null) {
    TdDataProvider tdProvider=getParameter().getTdDataProvider();
    getAnalysisBuilder().setAnalysisConnection(tdProvider);
    ConnectionIndicator indicator=SchemaFactory.eINSTANCE.createConnectionIndicator();
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
    indicator.setAnalyzedElement(tdProvider);
    List<TdSchema> tdSchemas=DataProviderHelper.getTdSchema(tdProvider);
    if (tdSchemas.size() != 0) {
      addSchemaIndicator(tdSchemas,indicator);
    }
    List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(tdProvider);
    for (    TdCatalog tdCatalog : tdCatalogs) {
      CatalogIndicator createCatalogIndicator=SchemaFactory.eINSTANCE.createCatalogIndicator();
      DefinitionHandler.getInstance().setDefaultIndicatorDefinition(createCatalogIndicator);
      createCatalogIndicator.setAnalyzedElement(tdCatalog);
      indicator.addSchemaIndicator(createCatalogIndicator);
      addSchemaIndicator(CatalogHelper.getSchemas(tdCatalog),indicator);
    }
    getAnalysisBuilder().addElementToAnalyze(tdProvider,indicator);
  }
  return analysis;
}","@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  if (getAnalysisBuilder() != null) {
    TdDataProvider tdProvider=getParameter().getTdDataProvider();
    getAnalysisBuilder().setAnalysisConnection(tdProvider);
    ConnectionIndicator indicator=SchemaFactory.eINSTANCE.createConnectionIndicator();
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
    indicator.setAnalyzedElement(tdProvider);
    List<TdSchema> tdSchemas=DataProviderHelper.getTdSchema(tdProvider);
    if (tdSchemas.size() != 0) {
      addSchemaIndicator(tdSchemas,indicator);
    }
    List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(tdProvider);
    for (    TdCatalog tdCatalog : tdCatalogs) {
      CatalogIndicator createCatalogIndicator=SchemaFactory.eINSTANCE.createCatalogIndicator();
      DefinitionHandler.getInstance().setDefaultIndicatorDefinition(createCatalogIndicator);
      createCatalogIndicator.setAnalyzedElement(tdCatalog);
      indicator.addCatalogIndicator(createCatalogIndicator);
      addSchemaIndicator(CatalogHelper.getSchemas(tdCatalog),indicator);
    }
    getAnalysisBuilder().addElementToAnalyze(tdProvider,indicator);
  }
  return analysis;
}",0.9948351211760031
139404,"public static ModelElement getModelElement(IFile file){
  ModelElement modelElement=null;
  if (FactoriesUtil.isProvFile(file)) {
    TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().findProvider(file);
    modelElement=returnValue.getObject();
  }
 else   if (FactoriesUtil.isAnalysisFile(file)) {
    modelElement=AnaResourceFileHelper.getInstance().findAnalysis(file);
  }
 else   if (FactoriesUtil.isReportFile(file)) {
    modelElement=RepResourceFileHelper.getInstance().findReport(file);
  }
 else   if (FactoriesUtil.isDQRuleFile(file)) {
    modelElement=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
  }
 else   if (FactoriesUtil.isPatternFile(file)) {
    modelElement=PatternResourceFileHelper.getInstance().findPattern(file);
  }
 else   if (FactoriesUtil.isUDIFile(file)) {
    modelElement=UDIResourceFileHelper.getInstance().findUDI(file);
  }
  return modelElement;
}","/** 
 * DOC bZhou Comment method ""getModelElement"".
 * @param file
 * @return
 */
public static ModelElement getModelElement(IFile file){
  ModelElement modelElement=null;
  if (FactoriesUtil.isProvFile(file)) {
    TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().findProvider(file);
    modelElement=returnValue.getObject();
  }
 else   if (FactoriesUtil.isAnalysisFile(file)) {
    modelElement=AnaResourceFileHelper.getInstance().findAnalysis(file);
  }
 else   if (FactoriesUtil.isReportFile(file)) {
    modelElement=RepResourceFileHelper.getInstance().findReport(file);
  }
 else   if (FactoriesUtil.isDQRuleFile(file)) {
    modelElement=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
  }
 else   if (FactoriesUtil.isPatternFile(file)) {
    modelElement=PatternResourceFileHelper.getInstance().findPattern(file);
  }
 else   if (FactoriesUtil.isUDIFile(file)) {
    modelElement=UDIResourceFileHelper.getInstance().findUDI(file);
  }
  return modelElement;
}",0.9577319587628866
139405,"public static ModelElement[] getModelElements(IFile[] files){
  List<ModelElement> modelElements=new ArrayList<ModelElement>();
  ModelElement element;
  for (  IFile file : files) {
    element=getModelElement(file);
    if (element != null) {
      modelElements.add(element);
    }
  }
  return modelElements.toArray(new ModelElement[modelElements.size()]);
}","/** 
 * DOC bZhou Comment method ""getModelElements"".
 * @param files
 * @return
 */
public static ModelElement[] getModelElements(IFile[] files){
  List<ModelElement> modelElements=new ArrayList<ModelElement>();
  ModelElement element;
  for (  IFile file : files) {
    element=getModelElement(file);
    if (element != null) {
      modelElements.add(element);
    }
  }
  return modelElements.toArray(new ModelElement[modelElements.size()]);
}",0.8960396039603961
139406,"public static ResourceFileMap getResourceFileMap(IFile file){
  ResourceFileMap modelElement=null;
  if (FactoriesUtil.isProvFile(file)) {
    modelElement=PrvResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isAnalysisFile(file)) {
    modelElement=AnaResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isReportFile(file)) {
    modelElement=RepResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isDQRuleFile(file)) {
    modelElement=DQRuleResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isPatternFile(file)) {
    modelElement=PatternResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isUDIFile(file)) {
    modelElement=UDIResourceFileHelper.getInstance();
  }
  return modelElement;
}","/** 
 * DOC bZhou Comment method ""getResourceFileMap"".
 * @param file
 * @return
 */
public static ResourceFileMap getResourceFileMap(IFile file){
  ResourceFileMap modelElement=null;
  if (FactoriesUtil.isProvFile(file)) {
    modelElement=PrvResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isAnalysisFile(file)) {
    modelElement=AnaResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isReportFile(file)) {
    modelElement=RepResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isDQRuleFile(file)) {
    modelElement=DQRuleResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isPatternFile(file)) {
    modelElement=PatternResourceFileHelper.getInstance();
  }
 else   if (FactoriesUtil.isUDIFile(file)) {
    modelElement=UDIResourceFileHelper.getInstance();
  }
  return modelElement;
}",0.9469081823860088
139407,"/** 
 * DOC bZhou Comment method ""createInvalidIcon"".
 * @param originalImg
 * @return
 */
public static ImageDescriptor createInvalidIcon(ImageDescriptor originalImg){
  ImageDescriptor warnImg=getImageDescriptor(WARN_OVR);
  DecorationOverlayIcon icon=new DecorationOverlayIcon(originalImg.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
  return icon;
}","/** 
 * DOC bZhou Comment method ""createInvalidIcon"".
 * @param originalImg
 * @return
 */
public static ImageDescriptor createInvalidIcon(ImageDescriptor originalImg){
  ImageDescriptor warnImg=getImageDescriptor(WARN_OVR);
  return originalImg != null ? createIcon(originalImg,warnImg) : null;
}",0.7828746177370031
139408,"protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file)) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      if (pattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(pattern);
        if (!validStatus) {
          return ImageLib.createInvalidIcon(ImageLib.PATTERN_REG);
        }
 else {
          return ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
        }
      }
    }
 else     if (FactoriesUtil.isReportFile(file)) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
 else     if (FactoriesUtil.isUDIFile(file)) {
      IndicatorDefinition udi=UDIResourceFileHelper.getInstance().findUDI(file);
      if (udi != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(udi) | UDIHelper.isUDIValid(udi);
        if (!validStatus) {
          return ImageLib.createInvalidIcon(ImageLib.IND_DEFINITION);
        }
 else {
          return ImageLib.getImageDescriptor(ImageLib.IND_DEFINITION);
        }
      }
    }
  }
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isMetadataFolder(folder)) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
 else     if (ResourceManager.isLibrariesFolder(folder)) {
      return ImageLib.getImageDescriptor(ImageLib.LIBRARIES);
    }
 else     if (ResourceManager.isDataProfilingFolder(folder)) {
      return ImageLib.getImageDescriptor(ImageLib.DATA_PROFILING);
    }
 else     if (ResourceManager.isConnectionFolder(folder)) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
 else     if (ResourceManager.isExchangeFolder(folder)) {
      return ImageLib.getImageDescriptor(ImageLib.EXCHANGE);
    }
  }
  return super.decorateImage(input,element);
}","protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  ImageDescriptor image=super.decorateImage(input,element);
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file)) {
      image=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      if (pattern != null) {
        if (!TaggedValueHelper.getValidStatus(pattern)) {
          image=ImageLib.createInvalidIcon(ImageLib.PATTERN_REG);
        }
      }
    }
 else     if (FactoriesUtil.isReportFile(file)) {
      image=ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
 else     if (FactoriesUtil.isUDIFile(file)) {
      image=ImageLib.getImageDescriptor(ImageLib.IND_DEFINITION);
      IndicatorDefinition udi=UDIResourceFileHelper.getInstance().findUDI(file);
      if (udi != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(udi) | UDIHelper.isUDIValid(udi);
        if (!validStatus) {
          image=ImageLib.createInvalidIcon(ImageLib.IND_DEFINITION);
        }
      }
    }
    if (FactoriesUtil.isEmfFile(file)) {
      Property property=ModelElementFileFactory.getProperty(file);
      if (property != null) {
        Item item=property.getItem();
        Boolean lockByOthers=ImplementationHelper.getRepositoryManager().isLockByOthers(item);
        Boolean lockByUserOwn=ImplementationHelper.getRepositoryManager().isLockByUserOwn(item);
        if (lockByOthers || lockByUserOwn) {
          log.info(property.getLabel() + ""String_Node_Str"");
          image=ImageLib.createLockedIcon(image);
        }
      }
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isMetadataFolder(folder)) {
      image=ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
 else     if (ResourceManager.isLibrariesFolder(folder)) {
      image=ImageLib.getImageDescriptor(ImageLib.LIBRARIES);
    }
 else     if (ResourceManager.isDataProfilingFolder(folder)) {
      image=ImageLib.getImageDescriptor(ImageLib.DATA_PROFILING);
    }
 else     if (ResourceManager.isConnectionFolder(folder)) {
      image=ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
 else     if (ResourceManager.isExchangeFolder(folder)) {
      image=ImageLib.getImageDescriptor(ImageLib.EXCHANGE);
    }
  }
  return image;
}",0.5850277264325323
139409,"/** 
 * Initialises the Plugin
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  try {
    getLog().addLogListener(new ILogListener(){
      public void logging(      IStatus status,      String plugin){
        System.err.println(status.getMessage());
        Throwable t=status.getException();
        if (t != null) {
          System.err.println(t.getMessage());
          t.printStackTrace(System.err);
        }
      }
    }
);
    driverManager=new DriverManager();
    driverManager.loadDrivers();
    aliasManager=new AliasManager();
    aliasManager.loadAliases();
    initAllDrivers();
    try {
      resourceBundle=ResourceBundle.getBundle(""String_Node_Str"");
    }
 catch (    MissingResourceException x) {
      resourceBundle=null;
    }
    _history=new SQLHistory();
  }
 catch (  Exception e) {
    error(""String_Node_Str"",e);
    throw e;
  }
}","/** 
 * Initialises the Plugin
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  try {
    getLog().addLogListener(new ILogListener(){
      public void logging(      IStatus status,      String plugin){
        System.err.println(status.getMessage());
        Throwable t=status.getException();
        if (t != null) {
          System.err.println(t.getMessage());
          t.printStackTrace(System.err);
        }
      }
    }
);
    driverManager=new DriverManager();
    driverManager.loadDrivers();
    aliasManager=new AliasManager();
    aliasManager.loadAliases();
    try {
      resourceBundle=ResourceBundle.getBundle(""String_Node_Str"");
    }
 catch (    MissingResourceException x) {
      resourceBundle=null;
    }
    _history=new SQLHistory();
  }
 catch (  Exception e) {
    error(""String_Node_Str"",e);
    throw e;
  }
}",0.987695749440716
139410,"/** 
 * DOC qzhang Comment method ""initAllDrivers"".
 */
private void initAllDrivers(){
  DriverManager driverModel=getDriverModel();
  Collection<ManagedDriver> drivers=driverModel.getDrivers();
  for (  ManagedDriver mand : drivers) {
    String id2=mand.getId();
    EDriverName[] values=EDriverName.values();
    for (    EDriverName supportDBUrlType : values) {
      if (id2.equals(supportDBUrlType.getSqlEid())) {
        LinkedList<String> jars=mand.getJars();
        if (jars.isEmpty()) {
          mand.setJars(supportDBUrlType.getJars());
        }
        mand.setDriverClassName(supportDBUrlType.getDbDriver());
        try {
          mand.registerSQLDriver();
        }
 catch (        Exception e) {
        }
        break;
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""initAllDrivers"".
 */
public void initAllDrivers(){
  DriverManager driverModel=getDriverModel();
  Collection<ManagedDriver> drivers=driverModel.getDrivers();
  for (  ManagedDriver mand : drivers) {
    String id2=mand.getId();
    EDriverName[] values=EDriverName.values();
    for (    EDriverName supportDBUrlType : values) {
      if (id2.equals(supportDBUrlType.getSqlEid())) {
        LinkedList<String> jars=mand.getJars();
        if (jars.isEmpty()) {
          mand.setJars(supportDBUrlType.getJars());
        }
        mand.setDriverClassName(supportDBUrlType.getDbDriver());
        try {
          mand.registerSQLDriver();
        }
 catch (        Exception e) {
        }
        break;
      }
    }
  }
}",0.9868247694334652
139411,"/** 
 * DOC mzhao Comment method ""recursiveExpandTree"".
 * @param commonViewer
 * @param provider
 * @param item
 */
private void recursiveExpandTree(Object item){
  if (provider == null) {
    provider=(ITreeContentProvider)getCommonViewer().getContentProvider();
  }
  if (item instanceof EObject) {
    Object parent=provider.getParent(item);
    Object[] tbFolderNodes=provider.getChildren(parent);
    boolean isFind=false;
    IFolderNode fn=null;
    for (    Object folderNode : tbFolderNodes) {
      fn=(IFolderNode)folderNode;
      Object[] folderChilds=provider.getChildren(fn);
      for (      Object child : folderChilds) {
        if (child == item) {
          isFind=true;
          break;
        }
      }
      if (isFind) {
        break;
      }
    }
    if (fn != null) {
      recursiveExpandTree(fn);
      getCommonViewer().expandToLevel(fn,1);
    }
 else {
      Object emfParent=provider.getParent(item);
      if (emfParent instanceof Resource) {
        Resource cwmResource=(Resource)emfParent;
        IFile resourceFile=null;
        URI uri=cwmResource.getURI();
        uri=cwmResource.getResourceSet().getURIConverter().normalize(uri);
        String scheme=uri.scheme();
        if (""String_Node_Str"".equals(scheme) && uri.segmentCount() > 1 && ""String_Node_Str"".equals(uri.segment(0))) {
          StringBuffer platformResourcePath=new StringBuffer();
          for (int j=1, size=uri.segmentCount(); j < size; ++j) {
            platformResourcePath.append('/');
            platformResourcePath.append(uri.segment(j));
          }
          resourceFile=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformResourcePath.toString()));
        }
        emfParent=resourceFile;
      }
      recursiveExpandTree(emfParent);
      getCommonViewer().expandToLevel(emfParent,1);
    }
  }
 else   if (item instanceof IFolderNode) {
    IFolderNode folderNode=(IFolderNode)item;
    Object eo=folderNode.getParent();
    recursiveExpandTree(eo);
    getCommonViewer().expandToLevel(eo,1);
  }
 else {
    Object workspaceParent=provider.getParent(item);
    if (workspaceParent == null) {
      return;
    }
    getCommonViewer().expandToLevel(workspaceParent,1);
    recursiveExpandTree(workspaceParent);
  }
}","/** 
 * DOC mzhao Comment method ""recursiveExpandTree"".
 * @param commonViewer
 * @param provider
 * @param item
 */
private void recursiveExpandTree(Object item){
  if (contentProvider == null) {
    contentProvider=(ITreeContentProvider)getCommonViewer().getContentProvider();
  }
  if (item instanceof EObject) {
    Object parent=contentProvider.getParent(item);
    Object[] tbFolderNodes=contentProvider.getChildren(parent);
    boolean isFind=false;
    IFolderNode fn=null;
    for (    Object folderNode : tbFolderNodes) {
      fn=(IFolderNode)folderNode;
      Object[] folderChilds=contentProvider.getChildren(fn);
      for (      Object child : folderChilds) {
        if (child == item) {
          isFind=true;
          break;
        }
      }
      if (isFind) {
        break;
      }
    }
    if (fn != null) {
      recursiveExpandTree(fn);
      getCommonViewer().expandToLevel(fn,1);
    }
 else {
      Object emfParent=contentProvider.getParent(item);
      if (emfParent instanceof Resource) {
        Resource cwmResource=(Resource)emfParent;
        IFile resourceFile=null;
        URI uri=cwmResource.getURI();
        uri=cwmResource.getResourceSet().getURIConverter().normalize(uri);
        String scheme=uri.scheme();
        if (""String_Node_Str"".equals(scheme) && uri.segmentCount() > 1 && ""String_Node_Str"".equals(uri.segment(0))) {
          StringBuffer platformResourcePath=new StringBuffer();
          for (int j=1, size=uri.segmentCount(); j < size; ++j) {
            platformResourcePath.append('/');
            platformResourcePath.append(uri.segment(j));
          }
          resourceFile=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformResourcePath.toString()));
        }
        emfParent=resourceFile;
      }
      recursiveExpandTree(emfParent);
      getCommonViewer().expandToLevel(emfParent,1);
    }
  }
 else   if (item instanceof IFolderNode) {
    IFolderNode folderNode=(IFolderNode)item;
    Object eo=folderNode.getParent();
    recursiveExpandTree(eo);
    getCommonViewer().expandToLevel(eo,1);
  }
 else {
    Object workspaceParent=contentProvider.getParent(item);
    if (workspaceParent == null) {
      return;
    }
    getCommonViewer().expandToLevel(workspaceParent,1);
    recursiveExpandTree(workspaceParent);
  }
}",0.9862295081967212
139412,"/** 
 * DOC bZhou Comment method ""initWorkspace"".
 */
private void initWorkspace(){
  ResourceManager.initResourcePersistence();
}","/** 
 * DOC bZhou Comment method ""initWorkspace"".
 */
private void initWorkspace(){
  ResourceManager.initResourcePersistence();
  SQLExplorerPlugin.getDefault().initAllDrivers();
  List<TdDataProvider> providers=PrvResourceFileHelper.getInstance().getAllDataProviders();
  for (  DataProvider provider : providers) {
    CorePlugin.getDefault().addConnetionAliasToSQLPlugin(provider);
  }
}",0.4990403071017274
139413,"public void selectionChanged(SelectionChangedEvent event){
  TreeSelection selection=(TreeSelection)event.getSelection();
  if (selection.size() != 1) {
    return;
  }
  Object selectedElement=selection.getFirstElement();
  if (selectedElement instanceof TdTable || selectedElement instanceof TdView) {
    if (provider == null) {
      provider=(ITreeContentProvider)getCommonViewer().getContentProvider();
    }
    for (    Object child : provider.getChildren(selectedElement)) {
      if (child instanceof IFolderNode && ((IFolderNode)child).getFolderNodeType() == ColumnFolderNode.COLUMNFOLDER_NODE_TYPE) {
        ((IFolderNode)child).loadChildren();
        break;
      }
    }
  }
}","public void selectionChanged(SelectionChangedEvent event){
  TreeSelection selection=(TreeSelection)event.getSelection();
  if (selection.size() != 1) {
    return;
  }
  Object selectedElement=selection.getFirstElement();
  if (selectedElement instanceof TdTable || selectedElement instanceof TdView) {
    if (contentProvider == null) {
      contentProvider=(ITreeContentProvider)getCommonViewer().getContentProvider();
    }
    for (    Object child : contentProvider.getChildren(selectedElement)) {
      if (child instanceof IFolderNode && ((IFolderNode)child).getFolderNodeType() == ColumnFolderNode.COLUMNFOLDER_NODE_TYPE) {
        ((IFolderNode)child).loadChildren();
        break;
      }
    }
  }
}",0.9807829181494662
139414,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  MenuManager menuMgr=new MenuManager(""String_Node_Str"");
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      ISelection selection=getCommonViewer().getSelection();
      getNavigatorActionService().setContext(new ActionContext(selection));
      getNavigatorActionService().fillContextMenu(manager);
    }
  }
);
  Menu menu=menuMgr.createContextMenu(getCommonViewer().getTree());
  getCommonViewer().getTree().setMenu(menu);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  this.addViewerFilter(FolderObjFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  getCommonViewer().setSorter(null);
  getCommonViewer().getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
        }
      }
      super.treeExpanded(e);
    }
  }
);
  getCommonViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      Tree tree=(Tree)e.getSource();
      Point point=new Point(e.x,e.y);
      TreeItem item=tree.getItem(point);
      if (item != null) {
        Object obj=item.getData();
        if (obj instanceof AbstractFolderNode) {
          AbstractFolderNode node=(AbstractFolderNode)obj;
          node.loadChildren();
          Object[] children=node.getChildren();
          if (children != null) {
            if (item.getText().indexOf(""String_Node_Str"") > 0) {
              item.setText(item.getText().substring(0,item.getText().indexOf(""String_Node_Str"")) + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
 else {
              item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
          }
        }
        if (obj instanceof Analysis) {
          Analysis analysis=(Analysis)obj;
          List<RenderedObject> tempList=new ArrayList<RenderedObject>();
          tempList.add(analysis);
          IFolder analysesFolder=ResourceManager.getAnalysisFolder();
          IFile file=AnaResourceFileHelper.getInstance().findCorrespondingFile(tempList,analysesFolder).get(0);
          CorePlugin.getDefault().openEditor(file,""String_Node_Str"");
        }
        if (obj instanceof IndicatorDefinition) {
          IndicatorDefinition indicatorDefinition=(IndicatorDefinition)obj;
          indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(indicatorDefinition.getLabel());
          IndicatorEditorInput input=new IndicatorEditorInput(indicatorDefinition);
          try {
            CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,IndicatorEditor.class.getName());
          }
 catch (          PartInitException e1) {
            log.error(e1,e1);
          }
        }
      }
      super.mouseDoubleClick(e);
    }
  }
);
  getCommonViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      TreeSelection selection=(TreeSelection)event.getSelection();
      if (selection.size() != 1) {
        return;
      }
      Object selectedElement=selection.getFirstElement();
      if (selectedElement instanceof TdTable || selectedElement instanceof TdView) {
        if (provider == null) {
          provider=(ITreeContentProvider)getCommonViewer().getContentProvider();
        }
        for (        Object child : provider.getChildren(selectedElement)) {
          if (child instanceof IFolderNode && ((IFolderNode)child).getFolderNodeType() == ColumnFolderNode.COLUMNFOLDER_NODE_TYPE) {
            ((IFolderNode)child).loadChildren();
            break;
          }
        }
      }
    }
  }
);
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  MenuManager menuMgr=new MenuManager(""String_Node_Str"");
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      ISelection selection=getCommonViewer().getSelection();
      getNavigatorActionService().setContext(new ActionContext(selection));
      getNavigatorActionService().fillContextMenu(manager);
    }
  }
);
  Menu menu=menuMgr.createContextMenu(getCommonViewer().getTree());
  getCommonViewer().getTree().setMenu(menu);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  this.addViewerFilter(FolderObjFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  getCommonViewer().setSorter(null);
  getCommonViewer().getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
        }
      }
      super.treeExpanded(e);
    }
  }
);
  getCommonViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      Tree tree=(Tree)e.getSource();
      Point point=new Point(e.x,e.y);
      TreeItem item=tree.getItem(point);
      if (item != null) {
        Object obj=item.getData();
        if (obj instanceof AbstractFolderNode) {
          AbstractFolderNode node=(AbstractFolderNode)obj;
          node.loadChildren();
          Object[] children=node.getChildren();
          if (children != null) {
            if (item.getText().indexOf(""String_Node_Str"") > 0) {
              item.setText(item.getText().substring(0,item.getText().indexOf(""String_Node_Str"")) + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
 else {
              item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
          }
        }
        if (obj instanceof Analysis) {
          Analysis analysis=(Analysis)obj;
          List<RenderedObject> tempList=new ArrayList<RenderedObject>();
          tempList.add(analysis);
          IFolder analysesFolder=ResourceManager.getAnalysisFolder();
          IFile file=AnaResourceFileHelper.getInstance().findCorrespondingFile(tempList,analysesFolder).get(0);
          CorePlugin.getDefault().openEditor(file,""String_Node_Str"");
        }
        if (obj instanceof IndicatorDefinition) {
          IndicatorDefinition indicatorDefinition=(IndicatorDefinition)obj;
          indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(indicatorDefinition.getLabel());
          IndicatorEditorInput input=new IndicatorEditorInput(indicatorDefinition);
          try {
            CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,IndicatorEditor.class.getName());
          }
 catch (          PartInitException e1) {
            log.error(e1,e1);
          }
        }
      }
      super.mouseDoubleClick(e);
    }
  }
);
  getCommonViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      TreeSelection selection=(TreeSelection)event.getSelection();
      if (selection.size() != 1) {
        return;
      }
      Object selectedElement=selection.getFirstElement();
      if (selectedElement instanceof TdTable || selectedElement instanceof TdView) {
        if (contentProvider == null) {
          contentProvider=(ITreeContentProvider)getCommonViewer().getContentProvider();
        }
        for (        Object child : contentProvider.getChildren(selectedElement)) {
          if (child instanceof IFolderNode && ((IFolderNode)child).getFolderNodeType() == ColumnFolderNode.COLUMNFOLDER_NODE_TYPE) {
            ((IFolderNode)child).loadChildren();
            break;
          }
        }
      }
    }
  }
);
}",0.9968253968253968
139415,"public DQRespositoryView(){
  super();
  DQStructureManager manager=DQStructureManager.getInstance();
  if (manager.isNeedCreateStructure()) {
    manager.createDQStructure();
  }
 else {
    List<IWorkspaceMigrationTask> tasks=MigrationTaskManager.findValidMigrationTasks();
    MigrationTaskManager.doMigrationTask(tasks);
  }
}","public DQRespositoryView(){
  super();
  DQStructureManager manager=DQStructureManager.getInstance();
  if (manager.isNeedCreateStructure()) {
    manager.createDQStructure();
  }
  if (manager.isNeedMigration()) {
    MigrationTaskManager.doMigrationTask(MigrationTaskManager.findValidTasks());
  }
}",0.6085578446909667
139416,"@Override public String getRangeAsString(){
  StringBuilder msg=new StringBuilder();
  if (isOutOfRange(getNumMatch()) || isOutOfRange(getNumNoMatch())) {
    msg.append(""String_Node_Str"" + range);
    msg.append(""String_Node_Str"");
  }
  if (isOutOfRange(getPerMatch()) || isOutOfRange(getPerNoMatch())) {
    msg.append(""String_Node_Str"" + range);
  }
  return msg.length() == 0 ? null : msg.toString();
}","@Override public String getRangeAsString(){
  StringBuilder msg=new StringBuilder();
  if (isOutOfRange(getNumMatch())) {
    msg.append(""String_Node_Str"" + range);
    msg.append(""String_Node_Str"");
  }
  if (isOutOfRange(getPerMatch())) {
    msg.append(""String_Node_Str"" + range);
  }
  return msg.length() == 0 ? null : msg.toString();
}",0.5641711229946524
139417,"@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getName().endsWith(NewSourcePatternActionProvider.EXTENSION_PATTERN)) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      List<IEcosCategory> availableCategory=Collections.EMPTY_LIST;
      try {
        availableCategory=ComponentSearcher.getAvailableCategory(CorePlugin.getDefault().getProductVersion().toString());
      }
 catch (      SocketTimeoutException e) {
        log.error(e,e);
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        log.error(e,e);
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
  if (needSortContainers.contains(element)) {
    return sort(super.getChildren(element));
  }
  return super.getChildren(element);
}","@Override public Object[] getChildren(Object element){
  if (element instanceof IWorkspaceRoot) {
    Object currentOpenProject=null;
    for (    Object child : super.getChildren(element)) {
      if (child instanceof IProject) {
        if (((IProject)child).getName().equals(ResourceManager.getRootProjectName())) {
          currentOpenProject=child;
          break;
        }
      }
    }
    List<Object> folders=new ArrayList<Object>();
    try {
      Object[] rootFolders=new Object[0];
      rootFolders=((IProject)currentOpenProject).members(false);
      for (      Object folder : rootFolders) {
        if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(DQStructureManager.PREFIX_TDQ)) {
          if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
            continue;
          }
          folders.add(folder);
        }
      }
    }
 catch (    CoreException e) {
      log.error(e);
    }
    return folders.toArray();
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.isPatternFile(file)) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      RegularExpression[] regularExp=new RegularExpression[pattern.getComponents().size()];
      int peIdx=0;
      for (      PatternComponent patCom : pattern.getComponents()) {
        regularExp[peIdx]=(RegularExpression)patCom;
        peIdx++;
      }
      return regularExp;
    }
  }
 else   if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (ResourceManager.isExchangeFolder(folder)) {
      try {
        if (timeoutFlag) {
          String version=CorePlugin.getDefault().getProductVersion().toString();
          return ComponentSearcher.getAvailableCategory(version).toArray();
        }
 else {
          return new String[]{""String_Node_Str""};
        }
      }
 catch (      SocketTimeoutException e) {
        log.error(e,e);
        timeoutFlag=false;
        return new String[]{""String_Node_Str"" + e.getMessage()};
      }
catch (      Exception e) {
        log.error(e,e);
        timeoutFlag=false;
        return new String[]{e.getMessage()};
      }
    }
 else     if (ResourceManager.isIndicatorFolder(folder)) {
      return getIndicatorsChildren(folder);
    }
  }
 else   if (element instanceof IEcosCategory) {
    return ((IEcosCategory)element).getComponent().toArray();
  }
 else   if (element instanceof IndicatorCategory) {
    return getIndicatorsChildren((IndicatorCategory)element);
  }
  if (needSortContainers.contains(element)) {
    return sort(super.getChildren(element));
  }
  return super.getChildren(element);
}",0.8728103579588729
139418,"public Composite generate(Composite parent,boolean isWithHelp){
  Composite frameComp=createAWTSWTComposite(parent);
  frame=SWT_AWT.new_Frame(frameComp);
  frame.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  pr=new LineRender(graphbuilder);
  sr=new LineRender(graphbuilder);
  PersistentLayout layout=new PersistentLayoutImpl(new FRLayout(graph));
  VisualizationModel vm=new DefaultVisualizationModel(layout);
  vv=new VisualizationViewer(vm,pr);
  sv=new SatelliteVisualizationViewer(vv,vm,sr,new Dimension(200,200));
  configureVViewer(vv);
  JPanel controllers=createToolControllers(vv);
  if (this.isPreview)   controllers.setVisible(false);
  JPanel panel=new GraphZoomScrollPane(vv);
  if (isWithHelp) {
    helpDialog=createSatelliteDialog(vv,sv);
    controllers.add(createShowSatelliteCheck(helpDialog));
  }
  frame.add(panel);
  frame.add(controllers,BorderLayout.SOUTH);
  frame.validate();
  addListeners();
  return frameComp;
}","public Composite generate(Composite parent,boolean isWithHelp){
  Composite frameComp=createAWTSWTComposite(parent);
  frame=SWT_AWT.new_Frame(frameComp);
  frame.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  pr=new LineRender(graphbuilder);
  sr=new LineRender(graphbuilder);
  PersistentLayout layout=new PersistentLayoutImpl(new ISOMLayout(graph));
  VisualizationModel vm=new DefaultVisualizationModel(layout);
  vv=new VisualizationViewer(vm,pr);
  sv=new SatelliteVisualizationViewer(vv,vm,sr,new Dimension(200,200));
  configureVViewer(vv);
  JPanel controllers=createToolControllers(vv);
  if (this.isPreview)   controllers.setVisible(false);
  JPanel panel=new GraphZoomScrollPane(vv);
  if (isWithHelp) {
    helpDialog=createSatelliteDialog(vv,sv);
    controllers.add(createShowSatelliteCheck(helpDialog));
  }
  frame.add(panel);
  frame.add(controllers,BorderLayout.SOUTH);
  frame.validate();
  addListeners();
  return frameComp;
}",0.9968814968814969
139419,"/** 
 * DOC bZhou Comment method ""getPatternes"".
 * @param folder
 * @param allPattern
 */
public void getPatternes(IFolder folder,List<Pattern> allPattern){
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        getPatternes(folder.getFolder(resource.getName()),allPattern);
        continue;
      }
      IFile file=(IFile)resource;
      if (file.getFileExtension().equals(FactoriesUtil.PATTERN)) {
        Resource fileResource=getFileResource(file);
        Pattern pattern=retirePattern(fileResource);
        if (pattern != null) {
          allPattern.add(pattern);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}","/** 
 * DOC bZhou Comment method ""getPatternes"".
 * @param folder
 * @param allPattern
 */
public void getPatternes(IFolder folder,List<Pattern> allPattern){
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        getPatternes(folder.getFolder(resource.getName()),allPattern);
        continue;
      }
      IFile file=(IFile)resource;
      if (FactoriesUtil.isPatternFile(file)) {
        Resource fileResource=getFileResource(file);
        Pattern pattern=retirePattern(fileResource);
        if (pattern != null) {
          allPattern.add(pattern);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}",0.598893499308437
139420,"public void openIndicatorOptionDialog(Shell shell,TreeItem indicatorItem){
  if (isDirty()) {
    masterPage.doSave(null);
  }
  IndicatorUnit indicatorUnit=(IndicatorUnit)indicatorItem.getData(INDICATOR_UNIT_KEY);
  IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
  if (FormEnum.isExsitingForm(indicatorUnit)) {
    String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
    OpeningHelpWizardDialog optionDialog=new OpeningHelpWizardDialog(shell,wizard,href);
    optionDialog.create();
    if (Window.OK == optionDialog.open()) {
      setDirty(wizard.isDirty());
      createIndicatorParameters(indicatorItem,indicatorUnit);
    }
  }
 else {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
}","public void openIndicatorOptionDialog(Shell shell,TreeItem indicatorItem){
  if (isDirty()) {
    masterPage.doSave(null);
  }
  IndicatorUnit indicatorUnit=(IndicatorUnit)indicatorItem.getData(INDICATOR_UNIT_KEY);
  IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
  if (FormEnum.isExsitingForm(indicatorUnit)) {
    String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
    OpeningHelpWizardDialog optionDialog=new OpeningHelpWizardDialog(shell,wizard,href);
    if (Window.OK == optionDialog.open()) {
      setDirty(wizard.isDirty());
      createIndicatorParameters(indicatorItem,indicatorUnit);
    }
  }
 else {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
}",0.9834254143646408
139421,"public void showHelp(){
  getShell().setFocus();
  if (href != null) {
    IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorHelpContextID());
    IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
    if (href.endsWith(HelpPlugin.HELP_FILE_SUFFIX) && context != null) {
      helpSystem.displayHelp(context);
      ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
      if (lastActiveInstance != null) {
        lastActiveInstance.showURL(href);
      }
    }
  }
}","/** 
 * DOC bZhou Comment method ""showHelp"".
 */
public void showHelp(){
  if (isValidHref(href)) {
    if (getTray() == null) {
      openTray(new HelpTray());
    }
    ((HelpTray)getTray()).getHelpPart().showURL(href);
  }
}",0.1686121919584954
139422,"@Override public void create(){
  super.create();
  if (this.page == null) {
    getShell().addShellListener(new ShellAdapter(){
      public void shellActivated(      ShellEvent e){
        showHelp();
      }
    }
);
  }
}","@Override public void create(){
  super.create();
  if (href != null) {
    showHelp();
  }
}",0.5660377358490566
139423,"public OpeningHelpWizardDialog(Shell parentShell,IWizard newWizard,String href,WizardPage page){
  super(parentShell,newWizard);
  this.href=href;
  this.page=page;
}","/** 
 * DOC bZhou OpeningHelpWizardDialog constructor comment.
 * @param parentShell
 * @param newWizard
 * @param href
 * @param page
 */
public OpeningHelpWizardDialog(Shell parentShell,IWizard newWizard,String href,WizardPage page){
  super(parentShell,newWizard);
  this.href=href;
  this.page=page;
}",0.7048832271762208
139424,"@Override public void widgetSelected(SelectionEvent e){
  Object formObject=e.item.getData();
  if (formObject != null) {
    AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
    form.showHelp();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  Object formObject=e.item.getData();
  if (formObject != null && getCurrentDialog() != null) {
    AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
    String helpHref=form.getFormEnum().getHelpHref();
    getCurrentDialog().setHref(helpHref);
    getCurrentDialog().showHelp();
  }
}",0.7394366197183099
139425,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  tabFolder=new TabFolder(container,SWT.FLAT);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Object formObject=e.item.getData();
      if (formObject != null) {
        AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
        form.showHelp();
      }
    }
  }
);
  FormEnum[] forms=FormEnum.getForms(indicatorUnit);
  if (forms != null) {
    validFroms=createForm(tabFolder,listener,forms);
    setControl(createView(validFroms));
  }
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  tabFolder=new TabFolder(container,SWT.FLAT);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Object formObject=e.item.getData();
      if (formObject != null && getCurrentDialog() != null) {
        AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
        String helpHref=form.getFormEnum().getHelpHref();
        getCurrentDialog().setHref(helpHref);
        getCurrentDialog().showHelp();
      }
    }
  }
);
  FormEnum[] forms=FormEnum.getForms(indicatorUnit);
  if (forms != null) {
    validFroms=createForm(tabFolder,listener,forms);
    setControl(createView(validFroms));
  }
}",0.8954423592493298
139426,"@Override public void widgetSelected(SelectionEvent e){
  Object formObject=e.item.getData();
  if (formObject != null) {
    AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
    form.showHelp();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  Object formObject=e.item.getData();
  if (formObject != null && getCurrentDialog() != null) {
    AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
    String helpHref=form.getFormEnum().getHelpHref();
    getCurrentDialog().setHref(helpHref);
    getCurrentDialog().showHelp();
  }
}",0.7394366197183099
139427,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  tabFolder=new TabFolder(container,SWT.FLAT);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Object formObject=e.item.getData();
      if (formObject != null) {
        AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
        form.showHelp();
      }
    }
  }
);
  FormEnum[] forms=FormEnum.getForms(indicatorUnit);
  if (forms != null) {
    validFroms=createForm(tabFolder,listener,forms);
    setControl(createView(validFroms));
  }
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  tabFolder=new TabFolder(container,SWT.FLAT);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Object formObject=e.item.getData();
      if (formObject != null && getCurrentDialog() != null) {
        AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
        String helpHref=form.getFormEnum().getHelpHref();
        getCurrentDialog().setHref(helpHref);
        getCurrentDialog().showHelp();
      }
    }
  }
);
  FormEnum[] forms=FormEnum.getForms(indicatorUnit);
  if (forms != null) {
    validFroms=createForm(tabFolder,listener,forms);
    setControl(createView(validFroms));
  }
}",0.8954423592493298
139428,"/** 
 * DOC qzhang AddSqlFileAction constructor comment.
 * @param selectedFiles
 */
public DeleteSqlFileAction(List<IFile> selectedFiles){
  setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.DELETE_ACTION));
  this.folder=selectedFiles;
}","/** 
 * DOC qzhang AddSqlFileAction constructor comment.
 * @param selectedFiles
 */
public DeleteSqlFileAction(List<IFile> selectedFiles){
  setText(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.DELETE_ACTION));
  this.folder=selectedFiles;
}",0.9466437177280552
139429,"public DeleteDQRuleAction(List<IFile> selectedFiles){
  setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.DELETE_ACTION));
  this.folder=selectedFiles;
}","public DeleteDQRuleAction(List<IFile> selectedFiles){
  setText(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.DELETE_ACTION));
  this.folder=selectedFiles;
}",0.9242053789731052
139430,"/** 
 * Method ""getColumnSets"" returns tables or views. MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern table name patterns separated by a comma; must match the table name as it is stored in thedatabase
 * @return the tables with for the given catalog, schemas, table name pattern.
 * @throws SQLException
 */
public List<T> getColumnSets(String catalogName,String schemaPattern,String tablePattern) throws SQLException {
  List<T> tables=new ArrayList<T>();
  ResultSet tablesSet=getConnectionMetadata(connection).getTables(catalogName,schemaPattern,tablePattern,this.tableType);
  while (tablesSet.next()) {
    T table=createTable(catalogName,schemaPattern,tablesSet);
    tables.add(table);
  }
  tablesSet.close();
  return tables;
}","/** 
 * Method ""getColumnSets"" returns tables or views. MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern table name patterns separated by a comma; must match the table name as it is stored in thedatabase
 * @return the tables with for the given catalog, schemas, table name pattern.
 * @throws SQLException
 */
public List<T> getColumnSets(String catalogName,String schemaPattern,String tablePattern) throws SQLException {
  List<T> tables=new ArrayList<T>();
  ResultSet tablesSet=getConnectionMetadata(connection).getTables(catalogName,schemaPattern,tablePattern,this.tableType);
  try {
    while (tablesSet.next()) {
      T table=createTable(catalogName,schemaPattern,tablesSet);
      tables.add(table);
    }
  }
 catch (  SQLException e) {
    throw e;
  }
catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (tablesSet != null) {
      tablesSet.close();
    }
  }
  return tables;
}",0.9212315073970412
139431,"private void initializeSchemaLow() throws SQLException {
  if (!catalogsInitialized) {
    initializeCatalog();
  }
  Map<String,List<TdSchema>> catalog2schemas=null;
  if (connection.getMetaData().getDriverName().equals(MSSQL_JDBC2_0)) {
    catalog2schemas=DatabaseContentRetriever.getMSSQLSchemas(connection);
  }
 else {
    catalog2schemas=DatabaseContentRetriever.getSchemas(connection);
  }
  Set<String> catNames=catalog2schemas.keySet();
  for (  String catName : catNames) {
    List<TdSchema> schemas=catalog2schemas.get(catName);
    if (catName != null) {
      if (schemas != null) {
        TdCatalog catalog=name2catalog.get(catName);
        if (catalog != null && schemas != null) {
          if (!(schemas.size() == 1 && schemas.get(0) == null)) {
            CatalogHelper.addSchemas(schemas,catalog);
          }
        }
      }
    }
 else {
      this.schemata.addAll(schemas);
      if (catNames.size() == 1) {
        if (this.name2catalog.size() == 1) {
          TdCatalog cat=this.name2catalog.values().iterator().next();
          CatalogHelper.addSchemas(schemas,cat);
        }
      }
    }
  }
  schemaInitialized=true;
}","private void initializeSchemaLow() throws SQLException {
  if (!catalogsInitialized) {
    initializeCatalog();
  }
  Map<String,List<TdSchema>> catalog2schemas=null;
  if (connection.getMetaData().getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
    catalog2schemas=DatabaseContentRetriever.getMSSQLSchemas(connection);
  }
 else {
    catalog2schemas=DatabaseContentRetriever.getSchemas(connection);
  }
  Set<String> catNames=catalog2schemas.keySet();
  for (  String catName : catNames) {
    List<TdSchema> schemas=catalog2schemas.get(catName);
    if (catName != null) {
      if (schemas != null) {
        TdCatalog catalog=name2catalog.get(catName);
        if (catalog != null && schemas != null) {
          if (!(schemas.size() == 1 && schemas.get(0) == null)) {
            CatalogHelper.addSchemas(schemas,catalog);
          }
        }
      }
    }
 else {
      this.schemata.addAll(schemas);
      if (catNames.size() == 1) {
        if (this.name2catalog.size() == 1) {
          TdCatalog cat=this.name2catalog.values().iterator().next();
          CatalogHelper.addSchemas(schemas,cat);
        }
      }
    }
  }
  schemaInitialized=true;
}",0.987612131567706
139432,"/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    Object defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
    String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
    Expression defExpression=BooleanExpressionHelper.createExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
    String colName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(colName);
    column.setLength(columns.getInt(GetColumn.COLUMN_SIZE.name()));
    column.setIsNullable(NullableType.get(columns.getInt(GetColumn.NULLABLE.name())));
    column.setJavaType(columns.getInt(GetColumn.DATA_TYPE.name()));
    String colComment=getComment(colName,columns);
    ColumnHelper.setComment(colComment,column);
    TdSqlDataType sqlDataType=DatabaseContentRetriever.createDataType(columns);
    column.setSqlDataType(sqlDataType);
    column.setInitialValue(defExpression);
    tableColumns.add(column);
  }
  columns.close();
  return tableColumns;
}","/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    Object defaultvalue=null;
    try {
      defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
    Expression defExpression=BooleanExpressionHelper.createExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
    String colName=null;
    try {
      colName=columns.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (colName == null) {
        colName=e1.getMessage();
      }
    }
    TdColumn column=ColumnHelper.createTdColumn(colName);
    try {
      column.setLength(columns.getInt(GetColumn.COLUMN_SIZE.name()));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    try {
      column.setIsNullable(NullableType.get(columns.getInt(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    try {
      column.setJavaType(columns.getInt(GetColumn.DATA_TYPE.name()));
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    try {
      String colComment=getComment(colName,columns);
      ColumnHelper.setComment(colComment,column);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    TdSqlDataType sqlDataType=DatabaseContentRetriever.createDataType(columns);
    column.setSqlDataType(sqlDataType);
    column.setInitialValue(defExpression);
    tableColumns.add(column);
  }
  columns.close();
  return tableColumns;
}",0.8804464477355656
139433,"public List<ForeignKey> getForeignKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<ForeignKey> pks=new ArrayList<ForeignKey>();
  ResultSet foreignKeys=null;
  try {
    foreignKeys=ConnectionUtils.getConnectionMetadata(connection).getImportedKeys(catalogName,schemaPattern,tableName);
    try {
      while (foreignKeys.next()) {
        ForeignKey pk=createForeignKey(foreignKeys);
        pks.add(pk);
      }
    }
 catch (    SQLException e) {
      throw e;
    }
 finally {
      foreignKeys.close();
    }
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  return pks;
}","public List<ForeignKey> getForeignKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<ForeignKey> pks=new ArrayList<ForeignKey>();
  ResultSet foreignKeys=null;
  try {
    foreignKeys=ConnectionUtils.getConnectionMetadata(connection).getImportedKeys(catalogName,schemaPattern,tableName);
    try {
      while (foreignKeys.next()) {
        ForeignKey pk=createForeignKey(foreignKeys);
        pks.add(pk);
      }
    }
 catch (    SQLException e) {
      throw e;
    }
 finally {
      if (foreignKeys != null) {
        foreignKeys.close();
      }
    }
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  return pks;
}",0.9675960813865864
139434,"/** 
 * DOC scorreia Comment method ""getPrimaryKeys"".
 * @param catalogName
 * @param schemaPattern
 * @param table
 * @throws SQLException
 */
public List<PrimaryKey> getPrimaryKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<PrimaryKey> pks=new ArrayList<PrimaryKey>();
  ResultSet primaryKeys=null;
  try {
    primaryKeys=ConnectionUtils.getConnectionMetadata(connection).getPrimaryKeys(catalogName,schemaPattern,tableName);
    try {
      while (primaryKeys.next()) {
        PrimaryKey pk=createPrimaryKey(primaryKeys);
        pks.add(pk);
      }
    }
 catch (    SQLException e) {
      throw e;
    }
 finally {
      primaryKeys.close();
    }
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  return pks;
}","/** 
 * DOC scorreia Comment method ""getPrimaryKeys"".
 * @param catalogName
 * @param schemaPattern
 * @param table
 * @throws SQLException
 */
public List<PrimaryKey> getPrimaryKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<PrimaryKey> pks=new ArrayList<PrimaryKey>();
  ResultSet primaryKeys=null;
  try {
    primaryKeys=ConnectionUtils.getConnectionMetadata(connection).getPrimaryKeys(catalogName,schemaPattern,tableName);
    try {
      while (primaryKeys.next()) {
        PrimaryKey pk=createPrimaryKey(primaryKeys);
        pks.add(pk);
      }
    }
 catch (    SQLException e) {
      throw e;
    }
 finally {
      if (primaryKeys != null) {
        primaryKeys.close();
      }
    }
  }
 catch (  Exception e1) {
    log.warn(""String_Node_Str"",e1);
  }
  return pks;
}",0.9733415995040298
139435,"/** 
 * DOC xqliu Comment method ""getConnectionMetadata"". 2009-07-13 bug 7888.
 * @param conn
 * @return
 * @throws SQLException
 */
public static DatabaseMetaData getConnectionMetadata(Connection conn) throws SQLException {
  DatabaseMetaData dbMetaData=conn.getMetaData();
  if (dbMetaData == null || dbMetaData.getConnection() == null || dbMetaData.getConnection() != conn) {
    dbMetaData=createFakeDatabaseMetaData(conn);
  }
  return dbMetaData;
}","/** 
 * DOC xqliu Comment method ""getConnectionMetadata"". 2009-07-13 bug 7888.
 * @param conn
 * @return
 * @throws SQLException
 */
public static DatabaseMetaData getConnectionMetadata(Connection conn) throws SQLException {
  DatabaseMetaData dbMetaData=conn.getMetaData();
  if (dbMetaData != null && dbMetaData.getDatabaseProductName() != null && dbMetaData.getDatabaseProductName().equals(DatabaseConstant.IBM_DB2_ZOS_PRODUCT_NAME)) {
    dbMetaData=createFakeDatabaseMetaData(conn);
    log.info(""String_Node_Str"");
  }
  return dbMetaData;
}",0.7472527472527473
139436,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  initEcosTimeout();
}",0.9049773755656108
139437,"/** 
 * DOC bZhou Comment method ""update"".
 * @param oldObject
 * @param newObject
 * @return
 */
private ModelElement update(ModelElement oldObject,ModelElement newObject){
  newObject.setName(""String_Node_Str"" + newObject.getName());
  String author=ReponsitoryContextBridge.getAuthor();
  if (!StringUtils.isEmpty(author)) {
    MetadataHelper.setAuthor(newObject,author);
  }
  if (newObject instanceof TdReport) {
    List<Analysis> anaLs=ReportHelper.getAnalyses((TdReport)oldObject);
    for (    Analysis analysis : anaLs) {
      DependenciesHandler.getInstance().setDependencyOn((TdReport)newObject,analysis);
      ((TdReport)newObject).addAnalysis(analysis);
    }
  }
  return newObject;
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param oldObject
 * @param newObject
 * @return
 */
private ModelElement update(ModelElement oldObject,ModelElement newObject){
  newObject.setName(""String_Node_Str"" + newObject.getName());
  String author=ReponsitoryContextBridge.getAuthor();
  if (!StringUtils.isEmpty(author)) {
    MetadataHelper.setAuthor(newObject,author);
  }
  if (newObject instanceof TdReport) {
    List<Analysis> anaLs=ReportHelper.getAnalyses((TdReport)oldObject);
    for (    Analysis analysis : anaLs) {
      DependenciesHandler.getInstance().setDependencyOn((TdReport)newObject,analysis);
      ((TdReport)newObject).addAnalysis(analysis);
    }
  }
  if (newObject instanceof Analysis) {
    AnalysisHelper.getDataFilter((Analysis)newObject).clear();
    AnalysisHelper.setStringDataFilter((Analysis)newObject,AnalysisHelper.getStringDataFilter((Analysis)oldObject));
  }
  return newObject;
}",0.8629379225568531
139438,"@Override public void create(){
  super.create();
  if (href != null) {
    showHelp();
  }
}","@Override public void create(){
  super.create();
  if (href != null && page == null) {
    showHelp();
  }
}",0.9207920792079208
139439,"/** 
 * DOC bZhou Comment method ""getPatternes"".
 * @param folder
 * @param allPattern
 */
public void getPatternes(IFolder folder,List<Pattern> allPattern){
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        getPatternes(folder.getFolder(resource.getName()),allPattern);
        continue;
      }
      IFile file=(IFile)resource;
      if (FactoriesUtil.isPatternFile(file)) {
        Resource fileResource=getFileResource(file);
        Pattern pattern=retirePattern(fileResource);
        if (pattern != null) {
          allPattern.add(pattern);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}","/** 
 * DOC bZhou Comment method ""getPatternes"".
 * @param folder
 * @param allPattern
 */
public void getPatternes(IFolder folder,List<Pattern> allPattern){
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        getPatternes(folder.getFolder(resource.getName()),allPattern);
        continue;
      }
      IFile file=(IFile)resource;
      if (file.exists() && FactoriesUtil.isPatternFile(file)) {
        Resource fileResource=getFileResource(file);
        Pattern pattern=retirePattern(fileResource);
        if (pattern != null) {
          allPattern.add(pattern);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}",0.9882189882189882
139440,"/** 
 * DataProviderBuilder constructor.
 * @param conn the connection
 * @param driver the JDBC driver
 * @param databaseUrl the database connection string (must not be null)
 * @param driverProperties the properties passed to the driver (could be null)
 * @throws SQLException
 */
public DataProviderBuilder(Connection conn,Driver driver,String databaseUrl,Properties driverProperties) throws SQLException {
  super(conn);
  this.dataProvider=DatabaseContentRetriever.getDataProvider(driver,databaseUrl,driverProperties);
  String identifierQuote=ConnectionUtils.getConnectionMetadata(conn).getIdentifierQuoteString();
  DataProviderHelper.setIdentifierQuoteString(identifierQuote,dataProvider);
}","/** 
 * DataProviderBuilder constructor.
 * @param conn the connection
 * @param driver the JDBC driver
 * @param databaseUrl the database connection string (must not be null)
 * @param driverProperties the properties passed to the driver (could be null)
 * @throws SQLException
 */
public DataProviderBuilder(Connection conn,Driver driver,String databaseUrl,Properties driverProperties) throws SQLException {
  super(conn);
  this.dataProvider=DatabaseContentRetriever.getDataProvider(driver,databaseUrl,driverProperties);
  String identifierQuote=ConnectionUtils.getConnectionMetadata(conn).getIdentifierQuoteString();
  DataProviderHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dataProvider);
}",0.9681440443213296
139441,"private void initializeSchemaLow() throws SQLException {
  if (!catalogsInitialized) {
    initializeCatalog();
  }
  Map<String,List<TdSchema>> catalog2schemas=null;
  if (connection.getMetaData().getDriverName().equals(MSSQL_JDBC2_0)) {
    catalog2schemas=DatabaseContentRetriever.getMSSQLSchemas(connection);
  }
 else {
    catalog2schemas=DatabaseContentRetriever.getSchemas(connection);
  }
  Set<String> catNames=catalog2schemas.keySet();
  for (  String catName : catNames) {
    List<TdSchema> schemas=catalog2schemas.get(catName);
    if (catName != null) {
      TdCatalog catalog=name2catalog.get(catName);
      if (catalog != null && schemas != null) {
        CatalogHelper.addSchemas(schemas,catalog);
      }
    }
 else {
      this.schemata.addAll(schemas);
      if (catNames.size() == 1) {
        if (this.name2catalog.size() == 1) {
          TdCatalog cat=this.name2catalog.values().iterator().next();
          CatalogHelper.addSchemas(schemas,cat);
        }
      }
    }
  }
  schemaInitialized=true;
}","private void initializeSchemaLow() throws SQLException {
  if (!catalogsInitialized) {
    initializeCatalog();
  }
  Map<String,List<TdSchema>> catalog2schemas=null;
  if (connection.getMetaData().getDriverName().equals(MSSQL_JDBC2_0)) {
    catalog2schemas=DatabaseContentRetriever.getMSSQLSchemas(connection);
  }
 else {
    catalog2schemas=DatabaseContentRetriever.getSchemas(connection);
  }
  Set<String> catNames=catalog2schemas.keySet();
  for (  String catName : catNames) {
    List<TdSchema> schemas=catalog2schemas.get(catName);
    if (catName != null) {
      if (schemas != null) {
        TdCatalog catalog=name2catalog.get(catName);
        if (catalog != null && schemas != null) {
          if (!(schemas.size() == 1 && schemas.get(0) == null)) {
            CatalogHelper.addSchemas(schemas,catalog);
          }
        }
      }
    }
 else {
      this.schemata.addAll(schemas);
      if (catNames.size() == 1) {
        if (this.name2catalog.size() == 1) {
          TdCatalog cat=this.name2catalog.values().iterator().next();
          CatalogHelper.addSchemas(schemas,cat);
        }
      }
    }
  }
  schemaInitialized=true;
}",0.9428440786465476
139442,"/** 
 * DOC xqliu Comment method ""getRowsStatement"".
 * @param valid
 * @return
 */
private String getRowsStatement(boolean valid){
  String non=valid ? ""String_Node_Str"" : ""String_Node_Str"";
  Table table=(Table)indicator.getAnalyzedElement();
  String whereClause=((WhereRule)((WhereRuleIndicator)indicator).getIndicatorDefinition()).getWhereExpression();
  return ""String_Node_Str"" + getFullyQualifiedTableName(table) + dbmsLanguage.where()+ non+ ""String_Node_Str""+ whereClause+ ""String_Node_Str"";
}","/** 
 * DOC xqliu Comment method ""getRowsStatement"".
 * @param valid
 * @return
 */
private String getRowsStatement(boolean valid){
  String dataFilterClause=this.getDataFilterClause();
  Indicator indicator2=this.indicator;
  TableAnalysisSqlExecutor tasExecutor=new TableAnalysisSqlExecutor();
  tasExecutor.setCachedAnalysis(this.analysis);
  if (valid) {
    return tasExecutor.getValidStatement(dataFilterClause,indicator2);
  }
 else {
    String non=valid ? ""String_Node_Str"" : ""String_Node_Str"";
    Table table=(Table)indicator2.getAnalyzedElement();
    String whereClause=((WhereRule)indicator2.getIndicatorDefinition()).getWhereExpression();
    return ""String_Node_Str"" + getFullyQualifiedTableName(table) + dbmsLanguage.where()+ non+ ""String_Node_Str""+ whereClause+ ""String_Node_Str"";
  }
}",0.7212863705972435
139443,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case WhereRuleIndicatorEnum:
    map.put(MENU_VIEW_INVALID_ROWS,getRowsStatement(false));
  map.put(MENU_VIEW_VALID_ROWS,getRowsStatement(true));
break;
default :
}
return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case WhereRuleIndicatorEnum:
    if (!includeJoinCondition(this.indicator)) {
      map.put(MENU_VIEW_INVALID_ROWS,getRowsStatement(false));
    }
  map.put(MENU_VIEW_VALID_ROWS,getRowsStatement(true));
break;
default :
}
return map;
}",0.9142857142857144
139444,"/** 
 * DOC bZhou Comment method ""initEcosTimeout"".
 */
private void initEcosTimeout(){
  getPluginPreferences().setDefault(PreferenceConstants.ECOS_TIME_OUT_VALUE,EcosConstants.DEFAULT_TIME_OUT_VALUE);
}","/** 
 * DOC bZhou Comment method ""initEcosTimeout"".
 */
private void initEcosTimeout(){
  String defaultString=getPluginPreferences().getString(PreferenceConstants.ECOS_TIME_OUT_VALUE);
  if (StringUtils.isEmpty(defaultString)) {
    getPluginPreferences().setValue(PreferenceConstants.ECOS_TIME_OUT_VALUE,EcosConstants.DEFAULT_TIME_OUT_VALUE);
    if (getPluginPreferences().needsSaving()) {
      savePluginPreferences();
    }
  }
}",0.4663536776212832
139445,"/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param skip
 * @param rename
 * @return
 */
public static List<ReturnCode> importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  List<ReturnCode> information=new ArrayList<ReturnCode>();
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    if (!verifyImportFile(importFile)) {
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
 else {
      String name=""String_Node_Str"";
      try {
        CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
        reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
        reader.setTextQualifier(TEXT_QUAL);
        reader.setUseTextQualifier(USE_TEXT_QUAL);
        reader.readHeaders();
        if (checkFileHeader(reader.getHeaders())) {
          java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
          while (reader.readRecord()) {
            name=reader.get(PatternToExcelEnum.Label.getLiteral());
            if (names.contains(name)) {
              if (skip) {
                information.add(new ReturnCode(""String_Node_Str"" + name + ""String_Node_Str"",false));
                continue;
              }
              if (rename) {
                name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=name;
            udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
            udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
            udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
            udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
            udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
            for (            PatternLanguageType languagetype : PatternLanguageType.values()) {
              String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
              if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
                udiParameters.regex.put(languagetype.getLiteral(),cellStr);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(name);
            information.add(new ReturnCode(""String_Node_Str"" + name + ""String_Node_Str"",true));
          }
          reader.close();
        }
 else {
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
        }
      }
 catch (      Exception e) {
        log.error(e,e);
        information.add(new ReturnCode(""String_Node_Str"" + name + ""String_Node_Str"",false));
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
    }
catch (    IOException e) {
      log.error(e,e);
    }
  }
  return information;
}","/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param skip
 * @param rename
 * @return
 */
public static List<ReturnCode> importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  List<ReturnCode> information=new ArrayList<ReturnCode>();
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    ReturnCode rc=verifyImportFile(importFile);
    if (!rc.isOk()) {
      information.add(rc);
    }
 else {
      String name=""String_Node_Str"";
      try {
        CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
        reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
        reader.setTextQualifier(TEXT_QUAL);
        reader.setUseTextQualifier(USE_TEXT_QUAL);
        reader.readHeaders();
        java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
        while (reader.readRecord()) {
          name=reader.get(PatternToExcelEnum.Label.getLiteral());
          if (names.contains(name)) {
            if (skip) {
              information.add(new ReturnCode(""String_Node_Str"" + name + ""String_Node_Str"",false));
              continue;
            }
            if (rename) {
              name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
            }
          }
          UDIParameters udiParameters=new ImportFactory().new UDIParameters();
          udiParameters.name=name;
          udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
          udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
          udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
          udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
          udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
          for (          PatternLanguageType languagetype : PatternLanguageType.values()) {
            String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
            if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
              udiParameters.regex.put(languagetype.getLiteral(),cellStr);
            }
          }
          createAndStoreUDI(udiParameters,selectionFolder);
          names.add(name);
          information.add(new ReturnCode(""String_Node_Str"" + name + ""String_Node_Str"",true));
        }
        reader.close();
      }
 catch (      Exception e) {
        log.error(e,e);
        information.add(new ReturnCode(""String_Node_Str"" + name + ""String_Node_Str"",false));
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
    }
catch (    IOException e) {
      log.error(e,e);
    }
  }
  return information;
}",0.9583412956239252
139446,"public static List<ReturnCode> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    if (!verifyImportFile(importFile)) {
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
 else {
      try {
        CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
        reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
        reader.setTextQualifier(TEXT_QUAL);
        reader.setUseTextQualifier(USE_TEXT_QUAL);
        reader.readHeaders();
        if (!checkFileHeader(reader.getHeaders())) {
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
        }
 else {
          while (reader.readRecord()) {
            String name=reader.get(PatternToExcelEnum.Label.getLiteral());
            if (names.contains(name)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
                continue;
              }
              if (rename) {
                name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=name;
            patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
            patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
            patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
            patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
            for (            PatternLanguageType languagetype : PatternLanguageType.values()) {
              String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
              if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
                patternParameters.regex.put(languagetype.getLiteral(),cellStr);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(name);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
          }
          reader.close();
        }
      }
 catch (      Exception e) {
        log.error(e,e);
        importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  return importEvent;
}","public static List<ReturnCode> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    ReturnCode rc=verifyImportFile(importFile);
    if (!rc.isOk()) {
      importEvent.add(rc);
    }
 else {
      try {
        CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
        reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
        reader.setTextQualifier(TEXT_QUAL);
        reader.setUseTextQualifier(USE_TEXT_QUAL);
        reader.readHeaders();
        while (reader.readRecord()) {
          String name=reader.get(PatternToExcelEnum.Label.getLiteral());
          if (names.contains(name)) {
            if (skip) {
              importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
              continue;
            }
            if (rename) {
              name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
            }
          }
          PatternParameters patternParameters=new ImportFactory().new PatternParameters();
          patternParameters.name=name;
          patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
          patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
          patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
          patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
          for (          PatternLanguageType languagetype : PatternLanguageType.values()) {
            String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
            if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
              patternParameters.regex.put(languagetype.getLiteral(),cellStr);
            }
          }
          String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
          names.add(name);
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
        }
        reader.close();
      }
 catch (      Exception e) {
        log.error(e,e);
        importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  return importEvent;
}",0.7713625866050808
139447,"/** 
 * DOC yyi Comment method ""varifyImportFile"".
 * @param importFile
 */
private static boolean verifyImportFile(File importFile){
  CsvReader reader;
  try {
    reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
    reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
    reader.setTextQualifier(TEXT_QUAL);
    reader.setUseTextQualifier(false);
    while (reader.readRecord()) {
      if (!checkQuotes(reader.getValues())) {
        return false;
      }
    }
    reader.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
  return true;
}","/** 
 * DOC yyi Comment method ""varifyImportFile"".
 * @param importFile
 */
private static ReturnCode verifyImportFile(File importFile){
  ReturnCode rc=new ReturnCode(true);
  CsvReader reader;
  try {
    reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
    reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
    reader.setTextQualifier(TEXT_QUAL);
    reader.setUseTextQualifier(true);
    reader.readHeaders();
    if (!checkFileHeader(reader.getHeaders())) {
      rc.setReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      return rc;
    }
    reader.setUseTextQualifier(false);
    while (reader.readRecord()) {
      if (!checkQuotes(reader.getValues())) {
        rc.setReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
        return rc;
      }
    }
    reader.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return rc;
}",0.7352941176470589
139448,"@Override protected String getInstantiatedClause(){
  String function=getFunction();
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : function + dbmsLanguage.equal() + ""String_Node_Str""+ entity.getKey()+ ""String_Node_Str"";
  return clause;
}","@Override protected String getInstantiatedClause(){
  String function=getFunction();
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : SOUNDEX_PREFIX + ""String_Node_Str"" + function+ ""String_Node_Str""+ dbmsLanguage.equal()+ SOUNDEX_PREFIX+ ""String_Node_Str""+ entity.getKey()+ ""String_Node_Str"";
  return clause;
}",0.8854489164086687
139449,"/** 
 * Save the resource to destinationUri and saved the related resources.
 * @param res
 * @param destinationUri
 * @return
 */
public URI saveToUri(Resource res,URI destinationUri){
  EcoreUtil.resolveAll(res);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(res);
  List<Resource> needSaves=new ArrayList<Resource>();
  for (  EObject object : find.keySet()) {
    Resource resource=object.eResource();
    if (resource == null) {
      continue;
    }
    EcoreUtil.resolveAll(resource);
    needSaves.add(resource);
  }
  URI changeUri=EMFUtil.changeUri(res,destinationUri);
  needSaves.add(res);
  for (  Resource toSave : needSaves) {
    EMFUtil.saveResource(toSave);
  }
  return changeUri;
}","/** 
 * Save the resource to destinationUri and saved the related resources.
 * @param res
 * @param destinationUri
 * @return
 */
public URI saveToUri(Resource res,URI destinationUri){
  EcoreUtil.resolveAll(res);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(res);
  List<Resource> needSaves=new ArrayList<Resource>();
  for (  EObject object : find.keySet()) {
    Resource resource=object.eResource();
    if (resource == null) {
      continue;
    }
    EcoreUtil.resolveAll(resource);
    needSaves.add(resource);
  }
  URI changeUri=EMFUtil.changeUri(res,destinationUri);
  needSaves.add(res);
  for (  Resource toSave : needSaves) {
    saveResource(toSave);
  }
  return changeUri;
}",0.9945205479452056
139450,"public boolean saveResource(Resource resource){
  return EMFUtil.saveResource(resource);
}","/** 
 * Method ""saveResource"" saves the resources of the resourceSet.
 * @return true when ok
 */
public boolean saveResource(Resource resource){
  String oldProp=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  boolean status=EMFUtil.saveResource(resource);
  System.setProperty(""String_Node_Str"",oldProp);
  return status;
}",0.3554603854389722
139451,"private static String createAndStorePattern(PatternParameters parameters,IFolder selectionFolder,ExpressionType type){
  Pattern pattern=PatternResourceFileHelper.getInstance().createPattern(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status);
  for (  String key : parameters.regex.keySet()) {
    RegularExpression regularExpr=BooleanExpressionHelper.createRegularExpression(key,parameters.regex.get(key),type);
    pattern.getComponents().add(regularExpr);
  }
  boolean validStatus=PatternUtilities.isPatternValid(pattern);
  TaggedValueHelper.setValidStatus(validStatus,pattern);
  String fname=DqRepositoryViewService.createFilename(parameters.name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  EMFSharedResources.getInstance().addEObjectToResourceSet(pfile.getFullPath().toString(),pattern);
  EMFSharedResources.getInstance().saveLastResource();
  return ResourceManager.getPatternFolder().getLocationURI().relativize(selectionFolder.getLocationURI()).toString();
}","private static String createAndStorePattern(PatternParameters parameters,IFolder selectionFolder,ExpressionType type){
  Pattern pattern=PatternResourceFileHelper.getInstance().createPattern(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status);
  for (  String key : parameters.regex.keySet()) {
    RegularExpression regularExpr=BooleanExpressionHelper.createRegularExpression(key,parameters.regex.get(key),type);
    pattern.getComponents().add(regularExpr);
  }
  boolean validStatus=PatternUtilities.isPatternValid(pattern);
  TaggedValueHelper.setValidStatus(validStatus,pattern);
  String fname=DqRepositoryViewService.createFilename(parameters.name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  ElementWriterFactory.getInstance().createPatternWriter().save(pattern,pfile);
  return ResourceManager.getPatternFolder().getLocationURI().relativize(selectionFolder.getLocationURI()).toString();
}",0.9350556153570148
139452,"/** 
 * DOC xqliu Comment method ""createAndStoreUDI"".
 * @param parameters
 * @param selectionFolder
 */
private static void createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition id=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category);
  for (  String key : parameters.regex.keySet()) {
    Expression expression=BooleanExpressionHelper.createExpression(key,parameters.regex.get(key));
    id.getSqlGenericExpression().add(expression);
  }
  boolean validStatus=UDIHelper.isUDIValid(id);
  TaggedValueHelper.setValidStatus(validStatus,id);
  String fname=DqRepositoryViewService.createFilename(parameters.name,FactoriesUtil.UDI);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  EMFSharedResources.getInstance().addEObjectToResourceSet(pfile.getFullPath().toString(),id);
  EMFSharedResources.getInstance().saveLastResource();
}","/** 
 * DOC xqliu Comment method ""createAndStoreUDI"".
 * @param parameters
 * @param selectionFolder
 */
private static void createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition id=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category);
  for (  String key : parameters.regex.keySet()) {
    Expression expression=BooleanExpressionHelper.createExpression(key,parameters.regex.get(key));
    id.getSqlGenericExpression().add(expression);
  }
  boolean validStatus=UDIHelper.isUDIValid(id);
  TaggedValueHelper.setValidStatus(validStatus,id);
  String fname=DqRepositoryViewService.createFilename(parameters.name,FactoriesUtil.UDI);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  ElementWriterFactory.getInstance().createUDIndicatorWriter().save(id,pfile);
}",0.9163064833005894
139453,"/** 
 * Method ""getDataProvider"".
 * @param driver the driver for the database connection
 * @param databaseUrl the database url
 * @param driverProperties the properties given to the driver
 * @return the data provider with a null name. Its name has to be set elsewhere.
 * @throws SQLException
 */
public static TdDataProvider getDataProvider(Driver driver,String databaseUrl,Properties driverProperties) throws SQLException {
  TdDataProvider provider=DataProviderHelper.createTdDataProvider(null);
  DriverPropertyInfo[] driverProps=driver.getPropertyInfo(databaseUrl,driverProperties);
  if (driverProps != null) {
    for (int i=0; i < driverProps.length; i++) {
      DriverPropertyInfo prop=driverProps[i];
      if (TaggedValueHelper.PASSWORD.equals(prop.name)) {
        continue;
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + prop.description);
        log.debug(prop.name + ""String_Node_Str"" + prop.value);
      }
      if (log.isDebugEnabled()) {
        if (prop.choices != null) {
          for (int j=0; j < prop.choices.length; j++) {
            log.debug(""String_Node_Str"" + j + ""String_Node_Str""+ prop.choices[j]);
          }
        }
      }
    }
  }
  return provider;
}","/** 
 * Method ""getDataProvider"".
 * @param driver the driver for the database connection
 * @param databaseUrl the database url
 * @param driverProperties the properties given to the driver
 * @return the data provider with a null name. Its name has to be set elsewhere.
 * @throws SQLException
 */
public static TdDataProvider getDataProvider(Driver driver,String databaseUrl,Properties driverProperties) throws SQLException {
  TdDataProvider provider=DataProviderHelper.createTdDataProvider(null);
  DriverPropertyInfo[] driverProps=null;
  if (!databaseUrl.toLowerCase().startsWith(""String_Node_Str"")) {
    driverProps=driver.getPropertyInfo(databaseUrl,driverProperties);
  }
  if (driverProps != null) {
    for (int i=0; i < driverProps.length; i++) {
      DriverPropertyInfo prop=driverProps[i];
      if (TaggedValueHelper.PASSWORD.equals(prop.name)) {
        continue;
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + prop.description);
        log.debug(prop.name + ""String_Node_Str"" + prop.value);
      }
      if (log.isDebugEnabled()) {
        if (prop.choices != null) {
          for (int j=0; j < prop.choices.length; j++) {
            log.debug(""String_Node_Str"" + j + ""String_Node_Str""+ prop.choices[j]);
          }
        }
      }
    }
  }
  return provider;
}",0.963949843260188
139454,"/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
protected void updateDetailList(){
  if (!""String_Node_Str"".equals(comboCategory.getText())) {
    IndicatorCategory ic=UDIHelper.getUDICategory(definition);
    for (    TaggedValue value : ic.getTaggedValue()) {
      if (""String_Node_Str"".equals(value.getTag())) {
        labelPurpose.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + value.getValue());
      }
 else       if (DefaultMessagesImpl.getString(""String_Node_Str"").equals(value.getTag())) {
        labelDescription.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + value.getValue());
      }
    }
    labelPurpose.getParent().layout();
  }
}","/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
protected void updateDetailList(){
  if (!""String_Node_Str"".equals(comboCategory.getText())) {
    IndicatorCategory ic=UDIHelper.getUDICategory(definition);
    String purposeText=""String_Node_Str"";
    String descriptionText=""String_Node_Str"";
    for (    TaggedValue value : ic.getTaggedValue()) {
      if (""String_Node_Str"".equals(value.getTag())) {
        purposeText=DefaultMessagesImpl.getString(""String_Node_Str"") + value.getValue();
      }
 else       if (DefaultMessagesImpl.getString(""String_Node_Str"").equals(value.getTag())) {
        descriptionText=DefaultMessagesImpl.getString(""String_Node_Str"") + value.getValue();
      }
    }
    labelDetail.setText(purposeText + System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"")+ descriptionText);
  }
}",0.8292367399741267
139455,"/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
private void createDetailList(Composite composite){
  Composite compoDetail=new Composite(composite,SWT.NONE);
  compoDetail.setLayout(new GridLayout(1,false));
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.heightHint=100;
  data.horizontalIndent=20;
  compoDetail.setLayoutData(data);
  Font font0=new Font(null,""String_Node_Str"",9,SWT.None);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  labelPurpose=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelPurpose.setLayoutData(data);
  labelPurpose.setFont(font0);
  labelDescription=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelDescription.setLayoutData(data);
  labelDescription.setFont(font0);
}","/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
private void createDetailList(Composite composite){
  Composite compoDetail=new Composite(composite,SWT.NONE);
  compoDetail.setLayout(new GridLayout(1,false));
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.heightHint=300;
  data.widthHint=300;
  compoDetail.setLayoutData(data);
  labelDetail=new Label(compoDetail,SWT.WRAP);
  labelDetail.setLayoutData(data);
}",0.5621019108280255
139456,"@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (masterPage.isDirty() && (newPageIndex == RESULT_PAGE_INDEX)) {
    masterPage.doSave(null);
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnAnalysisResultPage) {
    ((ColumnAnalysisResultPage)resultPage).refresh((ColumnMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnCorrelationNominalIntervalResultPage) {
    ((ColumnCorrelationNominalIntervalResultPage)resultPage).refresh((ColumnCorrelationNominalAndIntervalMasterPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnsComparisonAnalysisResultPage) {
    ((ColumnsComparisonAnalysisResultPage)resultPage).refresh((ColumnsComparisonMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnDependencyResultPage) {
    ((ColumnDependencyResultPage)resultPage).refresh((ColumnDependencyMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof TableAnalysisResultPage) {
    ((TableAnalysisResultPage)resultPage).refresh((TableMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (masterPage != null) {
    setRunActionButtonState(true);
    setSaveActionButtonState(false);
  }
}","@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (newPageIndex == RESULT_PAGE_INDEX) {
    if (masterPage.isDirty()) {
      masterPage.doSave(null);
    }
    setSaveActionButtonState(false);
  }
  if (isRefreshResultPage) {
    resultPage.refresh(masterPage);
    isRefreshResultPage=false;
  }
}",0.1921776919362626
139457,"protected void addPages(){
  TdEditorToolBar toolbar=getToolBar();
  if (toolbar != null) {
    saveAction=new DefaultSaveAction(this);
    runAction=new RunAnalysisAction();
    refreshAction=new RefreshChartAction();
    toolbar.addActions(saveAction,runAction,refreshAction);
  }
switch (analysisType) {
case COLUMN_CORRELATION:
    masterPage=new ColumnCorrelationNominalAndIntervalMasterPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
  resultPage=new ColumnCorrelationNominalIntervalResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
  addPage(masterPage);
  addPage(resultPage);
}
 catch (PartInitException e) {
  ExceptionHandler.process(e,Level.ERROR);
}
break;
case MULTIPLE_COLUMN:
masterPage=new ColumnMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new ColumnAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CONNECTION:
masterPage=new ConnectionMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
try {
addPage(masterPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CATALOG:
masterPage=new CatalogMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
try {
addPage(masterPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case SCHEMA:
masterPage=new SchemaAnalysisMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
try {
addPage(masterPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case COLUMNS_COMPARISON:
masterPage=new ColumnsComparisonMasterDetailsPage(this,MASTER_PAGE,DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new ColumnsComparisonAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case TABLE:
masterPage=new TableMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new TableAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case TABLE_FUNCTIONAL_DEPENDENCY:
masterPage=new ColumnDependencyMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new ColumnDependencyResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
default :
}
if (masterPage.getAnalysis() != null) {
setPartName(masterPage.getIntactElemenetName());
}
 else {
setPartName(getEditorInput().getName());
}
}","protected void addPages(){
  TdEditorToolBar toolbar=getToolBar();
  if (toolbar != null) {
    saveAction=new DefaultSaveAction(this);
    runAction=new RunAnalysisAction();
    refreshAction=new RefreshChartAction();
    toolbar.addActions(saveAction,runAction,refreshAction);
  }
switch (analysisType) {
case COLUMN_CORRELATION:
    masterPage=new ColumnCorrelationNominalAndIntervalMasterPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
  resultPage=new ColumnCorrelationNominalIntervalResultPage(this,RESULT_PAGE,ANALYSIS_RESULTS);
break;
case MULTIPLE_COLUMN:
masterPage=new ColumnMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new ColumnAnalysisResultPage(this,RESULT_PAGE,ANALYSIS_RESULTS);
break;
case CONNECTION:
masterPage=new ConnectionMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
break;
case CATALOG:
masterPage=new CatalogMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
break;
case SCHEMA:
masterPage=new SchemaAnalysisMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
break;
case COLUMNS_COMPARISON:
masterPage=new ColumnsComparisonMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new ColumnsComparisonAnalysisResultPage(this,RESULT_PAGE,ANALYSIS_RESULTS);
break;
case TABLE:
masterPage=new TableMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new TableAnalysisResultPage(this,RESULT_PAGE,ANALYSIS_RESULTS);
break;
case TABLE_FUNCTIONAL_DEPENDENCY:
masterPage=new ColumnDependencyMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new ColumnDependencyResultPage(this,RESULT_PAGE,ANALYSIS_RESULTS);
break;
default :
}
try {
if (masterPage != null) {
addPage(masterPage);
setPartName(masterPage.getIntactElemenetName());
}
if (resultPage != null) {
addPage(resultPage);
}
 else {
setRefreshActionButtonState(false);
}
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
}",0.2713715605965133
139458,"@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnMasterDetailsPage)masterPage;
  this.summaryComp.dispose();
  this.resultComp.dispose();
  createFormContent(getManagedForm());
}","@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnMasterDetailsPage)masterPage;
  if (summaryComp != null && !summaryComp.isDisposed()) {
    summaryComp.dispose();
  }
  if (resultComp != null && !resultComp.isDisposed()) {
    resultComp.dispose();
  }
  createFormContent(getManagedForm());
}",0.7605633802816901
139459,"@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnCorrelationNominalAndIntervalMasterPage)masterPage;
  this.summaryComp.dispose();
  this.graphicsAndTableComp.dispose();
  createFormContent(getManagedForm());
}","@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnCorrelationNominalAndIntervalMasterPage)masterPage;
  if (summaryComp != null && !summaryComp.isDisposed()) {
    summaryComp.dispose();
  }
  if (graphicsAndTableComp != null && !graphicsAndTableComp.isDisposed()) {
    graphicsAndTableComp.dispose();
  }
  createFormContent(getManagedForm());
}",0.7607361963190185
139460,"@Override public void refresh(){
}","@Override public void refresh(){
  switchToResultPage();
}",0.7391304347826086
139461,"@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnDependencyMasterDetailsPage)masterPage;
  this.summaryComp.dispose();
  this.analyzedColumnSetsComp.dispose();
  this.analysisResultsComp.dispose();
  createFormContent(getManagedForm());
}","@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnDependencyMasterDetailsPage)masterPage;
  if (summaryComp != null && !summaryComp.isDisposed()) {
    summaryComp.dispose();
  }
  if (analyzedColumnSetsComp != null && !analyzedColumnSetsComp.isDisposed()) {
    analyzedColumnSetsComp.dispose();
  }
  if (analysisResultsComp != null && !analysisResultsComp.isDisposed()) {
    analysisResultsComp.dispose();
  }
  createFormContent(getManagedForm());
}",0.6886912325285895
139462,"@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnsComparisonMasterDetailsPage)masterPage;
  this.summaryComp.dispose();
  this.analyzedColumnSetsComp.dispose();
  this.analysisResultsComp.dispose();
  createFormContent(getManagedForm());
}","@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnsComparisonMasterDetailsPage)masterPage;
  if (summaryComp != null && !summaryComp.isDisposed()) {
    summaryComp.dispose();
  }
  if (analyzedColumnSetsComp != null && !analyzedColumnSetsComp.isDisposed()) {
    analyzedColumnSetsComp.dispose();
  }
  if (analysisResultsComp != null && !analysisResultsComp.isDisposed()) {
    analysisResultsComp.dispose();
  }
  createFormContent(getManagedForm());
}",0.6894803548795945
139463,"@Override public void refresh(){
}","@Override public void refresh(){
  switchToResultPage();
}",0.7391304347826086
139464,"@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(TableMasterDetailsPage)masterPage;
  this.summaryComp.dispose();
  this.resultComp.dispose();
  createFormContent(getManagedForm());
}","@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(TableMasterDetailsPage)masterPage;
  if (summaryComp != null && !summaryComp.isDisposed()) {
    summaryComp.dispose();
  }
  if (resultComp != null && !resultComp.isDisposed()) {
    resultComp.dispose();
  }
  createFormContent(getManagedForm());
}",0.7597173144876325
139465,"public void showResults(){
  for (  ModelMatcher patternMatcher : this.modelMatchers) {
    if (patternMatcher.getScore() > 0) {
      System.out.print(patternMatcher.getModel() + ""String_Node_Str"" + patternMatcher.getScore()+ ""String_Node_Str"");
    }
  }
}","public void showResults(){
  for (  ModelMatcher patternMatcher : this.modelMatchers) {
    if (patternMatcher.getScore() > 0) {
      if (logger.isInfoEnabled()) {
        logger.info(patternMatcher.getModel() + ""String_Node_Str"" + patternMatcher.getScore()+ ""String_Node_Str"");
      }
    }
  }
}",0.8438061041292639
139466,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  GridData gridData=new GridData(GridData.FILL_BOTH);
  container.setLayout(layout);
  container.setLayoutData(gridData);
  Composite fileComp=new Composite(container,SWT.NONE);
  layout=new GridLayout(3,false);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  fileComp.setLayout(layout);
  fileComp.setLayoutData(gridData);
  Label label=new Label(fileComp,SWT.NONE);
  if (isForExchange) {
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
 else {
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  fileText=new Text(fileComp,SWT.BORDER);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  fileText.setLayoutData(gridData);
  fileText.setEditable(false);
  Button button=new Button(fileComp,SWT.PUSH);
  button.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String path=""String_Node_Str"";
      if (isForExchange) {
        DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
        if (fileText.getText() != null) {
          dialog.setFilterPath(fileText.getText());
        }
        path=dialog.open();
      }
 else {
        FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
        dialog.setFilterExtensions(new String[]{""String_Node_Str""});
        if (fileText.getText() != null) {
          dialog.setFileName(fileText.getText());
        }
        path=dialog.open();
        if (path != null && !path.endsWith(""String_Node_Str"")) {
          path=path + ""String_Node_Str"";
        }
      }
      if (path != null) {
        fileText.setText(path);
      }
    }
  }
);
  Group group=new Group(container,SWT.NONE);
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  group.setLayoutData(new GridData(GridData.FILL_BOTH));
  selectedPatternsTree=new DQCheckedTreeViewer(group);
  selectedPatternsTree.setInput(this.folder);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(selectedPatternsTree.getTree());
  try {
    selectedPatternsTree.setCheckedElements(folder.members());
  }
 catch (  CoreException e1) {
    log.error(e1,e1);
  }
  Control buttonComposite=createSelectionButtons(container);
  Composite monitorComp=new Composite(container,SWT.NONE);
  monitorComp.setLayout(new GridLayout());
  monitorComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  ProgressBar bar=new ProgressBar(monitorComp,SWT.NONE);
  bar.setLayoutData(new GridData(GridData.FILL_BOTH));
  bar.setVisible(false);
  setControl(container);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  GridData gridData=new GridData(GridData.FILL_BOTH);
  container.setLayout(layout);
  container.setLayoutData(gridData);
  Composite fileComp=new Composite(container,SWT.NONE);
  layout=new GridLayout(3,false);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  fileComp.setLayout(layout);
  fileComp.setLayoutData(gridData);
  Label label=new Label(fileComp,SWT.NONE);
  if (isForExchange) {
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
 else {
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  fileText=new Text(fileComp,SWT.BORDER);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  fileText.setLayoutData(gridData);
  fileText.setEditable(false);
  Button button=new Button(fileComp,SWT.PUSH);
  button.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String path=""String_Node_Str"";
      if (isForExchange) {
        DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
        if (fileText.getText() != null) {
          dialog.setFilterPath(fileText.getText());
        }
        path=dialog.open();
      }
 else {
        FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
        dialog.setFilterExtensions(new String[]{""String_Node_Str""});
        if (fileText.getText() != null) {
          dialog.setFileName(fileText.getText());
        }
        path=dialog.open();
        if (path != null && !path.endsWith(""String_Node_Str"")) {
          path=path + ""String_Node_Str"";
        }
      }
      if (path != null) {
        fileText.setText(path);
      }
    }
  }
);
  Group group=new Group(container,SWT.NONE);
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  group.setLayoutData(new GridData(GridData.FILL_BOTH));
  selectedPatternsTree=new DQCheckedTreeViewer(group);
  selectedPatternsTree.addFilter(new DQFolderFliter(true));
  selectedPatternsTree.setInput(this.folder);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(selectedPatternsTree.getTree());
  try {
    selectedPatternsTree.setCheckedElements(folder.members());
  }
 catch (  CoreException e1) {
    log.error(e1,e1);
  }
  Control buttonComposite=createSelectionButtons(container);
  Composite monitorComp=new Composite(container,SWT.NONE);
  monitorComp.setLayout(new GridLayout());
  monitorComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  ProgressBar bar=new ProgressBar(monitorComp,SWT.NONE);
  bar.setLayoutData(new GridData(GridData.FILL_BOTH));
  bar.setVisible(false);
  setControl(container);
}",0.9893579283433842
139467,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return !folder.getName().endsWith(SVN_FOLDER_NAME);
  }
  return isShowFile;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    return !folder.getName().endsWith(SVN_FOLDER_NAME);
  }
  if (element instanceof IFile && isShowFile) {
    IFile file=(IFile)element;
    return !file.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION);
  }
  return isShowFile;
}",0.7269890795631825
139468,"@Override public void run(){
  if (files != null && files.length > 0) {
    for (    IFile file : files) {
      ModelElement oldObject=getOldEObject(file);
      if (oldObject != null) {
        ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(oldObject);
        IFile newFile=getNewFile(file);
        newObject.setName(""String_Node_Str"" + newObject.getName());
        if (oldObject instanceof TdReport) {
          List<Analysis> anaLs=ReportHelper.getAnalyses((TdReport)oldObject);
          for (          Analysis analysis : anaLs) {
            DependenciesHandler.getInstance().setDependencyOn((TdReport)newObject,analysis);
            ((TdReport)newObject).addAnalysis(analysis);
          }
        }
        AElementPersistance elementPersistance=ElementWriterFactory.getInstance().create(newFile.getFileExtension());
        elementPersistance.save(newObject,newFile);
      }
    }
  }
}","@Override public void run(){
  if (files != null && files.length > 0) {
    for (    IFile file : files) {
      ModelElement oldObject=ModelElementFileFactory.getModelElement(file);
      if (oldObject != null) {
        ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(oldObject);
        newObject=update(oldObject,newObject);
        IFile newFile=getNewFile(file);
        ElementWriterFactory.getInstance().create(newFile.getFileExtension()).save(newObject,newFile);
      }
    }
  }
}",0.4900752908966461
139469,"private String getFunction(){
  Expression instantiatedExpression=dbmsLanguage.getInstantiatedExpression(indicator);
  final String body=instantiatedExpression.getBody();
  Pattern p=Pattern.compile(REGEX,Pattern.CASE_INSENSITIVE);
  Matcher matcher=p.matcher(body);
  matcher.find();
  String group=matcher.group(1);
  return group;
}","private String getFunction(){
  Expression instantiatedExpression=dbmsLanguage.getInstantiatedExpression(indicator);
  final String body=instantiatedExpression.getBody();
  Pattern p=Pattern.compile(REGEX,Pattern.CASE_INSENSITIVE);
  Matcher matcher=p.matcher(body);
  matcher.find();
  String group=matcher.group(2);
  group=group == null ? matcher.group(1) : group;
  return group;
}",0.9305555555555556
139470,"/** 
 * Method ""getInstantiatedClause"".
 * @return the where clause from the instantiated query
 */
protected String getInstantiatedClause(){
  String function=getFunction();
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : function + dbmsLanguage.equal() + ""String_Node_Str""+ entity.getKey()+ ""String_Node_Str"";
  return clause;
}","/** 
 * Method ""getInstantiatedClause"".
 * @return the where clause from the instantiated query
 */
protected String getInstantiatedClause(){
  String function=getFunction();
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getJavaType();
  Object value=null;
  if (Java2SqlType.isNumbericInSQL(javaType) && dbmsLanguage instanceof DB2DbmsLanguage) {
    value=entity.getKey();
  }
 else {
    value=""String_Node_Str"" + entity.getKey() + ""String_Node_Str"";
  }
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : function + dbmsLanguage.equal() + value;
  return clause;
}",0.6329113924050633
139471,"protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.layout();
  form.reflow(true);
}","protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator){
  tableAndViewComposite.setVisible(true);
  List<TableIndicator> indicatorTableList=(List<TableIndicator>)schemaIndicator.getTableIndicators();
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(providerConnection,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
          log.error(findSqlExplorerTableNode.getMessage());
        }
      }
    }
);
    cursor.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        int column=cursor.getColumn();
        if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(indicatorTableList);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}",0.9948288159771754
139472,"public ColumnSetKey(ColumnSet columnSetOwner){
  Package parent=EObjectHelper.getParent(columnSetOwner);
  if (parent != null) {
    this.catalogName=parent.getName();
  }
 else {
    this.catalogName=""String_Node_Str"";
  }
  this.columnSetName=columnSetOwner.getName();
}","public ColumnSetKey(ColumnSet columnSetOwner){
  Package parent=EObjectHelper.getParent(columnSetOwner);
  if (parent != null) {
    this.catalogName=parent.getName();
  }
 else {
    this.catalogName=""String_Node_Str"";
  }
  this.columnSetName=columnSetOwner.getName();
  this.columnSetOwner=columnSetOwner;
}",0.9347079037800688
139473,"public PackageKey(Package pckg){
  schemaName=SwitchHelpers.SCHEMA_SWITCH.doSwitch(pckg) == null ? ""String_Node_Str"" : SwitchHelpers.SCHEMA_SWITCH.doSwitch(pckg).getName();
  catalogName=SwitchHelpers.CATALOG_SWITCH.doSwitch(pckg) == null ? ""String_Node_Str"" : SwitchHelpers.CATALOG_SWITCH.doSwitch(pckg).getName();
}","public PackageKey(Package pckg){
  schemaName=SwitchHelpers.SCHEMA_SWITCH.doSwitch(pckg) == null ? ""String_Node_Str"" : SwitchHelpers.SCHEMA_SWITCH.doSwitch(pckg).getName();
  catalogName=SwitchHelpers.CATALOG_SWITCH.doSwitch(pckg) == null ? ""String_Node_Str"" : SwitchHelpers.CATALOG_SWITCH.doSwitch(pckg).getName();
  this.pakg=pckg;
}",0.97239263803681
139474,"/** 
 * DOC yyi Comment method ""checkIndicatorFields"".
 * @return
 */
protected ReturnCode checkIndicatorFields(){
  String min=lowerText.getText().trim();
  String max=higherText.getText().trim();
  ReturnCode rc=new ReturnCode(true);
  String statusLabelText=""String_Node_Str"";
  if (isRangeForDate) {
    if ((!CheckValueUtils.isDateValue(min) && !CheckValueUtils.isEmpty(min)) || (!CheckValueUtils.isDateValue(max) && !CheckValueUtils.isEmpty(max))) {
      rc.setOk(false);
      statusLabelText+=MSG_ONLY_DATE + System.getProperty(""String_Node_Str"");
    }
  }
 else {
    if ((!CheckValueUtils.isNumberValue(min) && !CheckValueUtils.isEmpty(min)) || (!CheckValueUtils.isNumberValue(max) && !CheckValueUtils.isEmpty(max))) {
      rc.setOk(false);
      statusLabelText+=MSG_ONLY_NUMBER + System.getProperty(""String_Node_Str"");
    }
  }
  if (CheckValueUtils.isAoverB(min,max)) {
    rc.setOk(false);
    statusLabelText+=UIMessages.MSG_LOWER_LESS_HIGHER + System.getProperty(""String_Node_Str"");
  }
  rc.setMessage(statusLabelText);
  return rc;
}","/** 
 * DOC yyi Comment method ""checkIndicatorFields"".
 * @return
 */
protected ReturnCode checkIndicatorFields(){
  String min=null != lowerText ? lowerText.getText().trim() : ""String_Node_Str"";
  String max=null != higherText ? higherText.getText().trim() : ""String_Node_Str"";
  ReturnCode rc=new ReturnCode(true);
  String statusLabelText=""String_Node_Str"";
  if (isRangeForDate) {
    if ((!CheckValueUtils.isDateValue(min) && !CheckValueUtils.isEmpty(min)) || (!CheckValueUtils.isDateValue(max) && !CheckValueUtils.isEmpty(max))) {
      rc.setOk(false);
      statusLabelText+=MSG_ONLY_DATE + System.getProperty(""String_Node_Str"");
    }
  }
 else {
    if ((!CheckValueUtils.isNumberValue(min) && !CheckValueUtils.isEmpty(min)) || (!CheckValueUtils.isNumberValue(max) && !CheckValueUtils.isEmpty(max))) {
      rc.setOk(false);
      statusLabelText+=MSG_ONLY_NUMBER + System.getProperty(""String_Node_Str"");
    }
  }
  if (CheckValueUtils.isAoverB(min,max)) {
    rc.setOk(false);
    statusLabelText+=UIMessages.MSG_LOWER_LESS_HIGHER + System.getProperty(""String_Node_Str"");
  }
  rc.setMessage(statusLabelText);
  return rc;
}",0.939297124600639
139475,"/** 
 * DOC yyi Comment method ""checkIndicatorInPrecentFields"".
 * @return
 */
protected ReturnCode checkIndicatorInPrecentFields(){
  String pmin=pLowerText.getText();
  String pmax=pHigherText.getText();
  ReturnCode rc=new ReturnCode(true);
  String statusLabelText=""String_Node_Str"";
  if ((!CheckValueUtils.isEmpty(pmin) && !CheckValueUtils.isRealNumberValue(pmin)) || (!CheckValueUtils.isEmpty(pmax) && !CheckValueUtils.isRealNumberValue(pmax))) {
    rc.setOk(false);
    statusLabelText+=MSG_ONLY_REAL_NUMBER + System.getProperty(""String_Node_Str"");
  }
  if (CheckValueUtils.isOutRange(MIN,MAX,pmin) || CheckValueUtils.isOutRange(MIN,MAX,pmax)) {
    rc.setOk(false);
    statusLabelText+=UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE + System.getProperty(""String_Node_Str"");
  }
  if (CheckValueUtils.isAoverB(pmin,pmax)) {
    rc.setOk(false);
    statusLabelText+=UIMessages.MSG_LOWER_LESS_HIGHER + System.getProperty(""String_Node_Str"");
  }
  rc.setMessage(statusLabelText);
  return rc;
}","/** 
 * DOC yyi Comment method ""checkIndicatorInPrecentFields"".
 * @return
 */
protected ReturnCode checkIndicatorInPrecentFields(){
  String pmin=null != pLowerText ? pLowerText.getText().trim() : ""String_Node_Str"";
  String pmax=null != pHigherText ? pHigherText.getText().trim() : ""String_Node_Str"";
  ReturnCode rc=new ReturnCode(true);
  String statusLabelText=""String_Node_Str"";
  if ((!CheckValueUtils.isEmpty(pmin) && !CheckValueUtils.isRealNumberValue(pmin)) || (!CheckValueUtils.isEmpty(pmax) && !CheckValueUtils.isRealNumberValue(pmax))) {
    rc.setOk(false);
    statusLabelText+=MSG_ONLY_REAL_NUMBER + System.getProperty(""String_Node_Str"");
  }
  if (CheckValueUtils.isOutRange(MIN,MAX,pmin) || CheckValueUtils.isOutRange(MIN,MAX,pmax)) {
    rc.setOk(false);
    statusLabelText+=UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE + System.getProperty(""String_Node_Str"");
  }
  if (CheckValueUtils.isAoverB(pmin,pmax)) {
    rc.setOk(false);
    statusLabelText+=UIMessages.MSG_LOWER_LESS_HIGHER + System.getProperty(""String_Node_Str"");
  }
  rc.setMessage(statusLabelText);
  return rc;
}",0.9346685741535526
139476,"@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  EList<Expression> expressiones=definition.getSqlGenericExpression();
  expressiones.clear();
  for (  Expression expression : tempExpression) {
    if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
      expressiones.add(expression);
    }
  }
  if (hasAggregateExpression) {
    EList<Expression> aggregate1argFunctions=definition.getAggregate1argFunctions();
    aggregate1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getAggregateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        aggregate1argFunctions.add(expression);
      }
    }
  }
  if (hasDateExpression) {
    EList<Expression> date1argFunctions=definition.getDate1argFunctions();
    date1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getDateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        date1argFunctions.add(expression);
      }
    }
  }
  if (hasCharactersMapping) {
    EList<CharactersMapping> charactersMappings=definition.getCharactersMapping();
    charactersMappings.clear();
    for (    CharactersMapping cm : charactersMappingMapTemp.values()) {
      String c=cm.getCharactersToReplace();
      String r=cm.getReplacementCharacters();
      if (c != null && !""String_Node_Str"".equals(c) && r != null && !""String_Node_Str"".equals(r)) {
        charactersMappings.add(cm);
      }
    }
  }
  UDIResourceFileHelper.getInstance().save(definition);
  this.isDirty=false;
}","@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  EList<Expression> expressiones=definition.getSqlGenericExpression();
  expressiones.clear();
  for (  Expression expression : tempExpression) {
    if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
      expressiones.add(expression);
    }
  }
  if (hasAggregateExpression) {
    EList<Expression> aggregate1argFunctions=definition.getAggregate1argFunctions();
    aggregate1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getAggregateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        aggregate1argFunctions.add(expression);
      }
    }
  }
  if (hasDateExpression) {
    EList<Expression> date1argFunctions=definition.getDate1argFunctions();
    date1argFunctions.clear();
    for (    AggregateDateExpression ade : afExpressionMapTemp.values()) {
      Expression expression=ade.getDateExpression();
      if (expression.getBody() != null && !""String_Node_Str"".equals(expression.getBody())) {
        date1argFunctions.add(expression);
      }
    }
  }
  if (hasCharactersMapping) {
    EList<CharactersMapping> charactersMappings=definition.getCharactersMapping();
    charactersMappings.clear();
    for (    CharactersMapping cm : charactersMappingMapTemp.values()) {
      String c=cm.getCharactersToReplace();
      String r=cm.getReplacementCharacters();
      if (checkMappingString(c,r)) {
        charactersMappings.add(cm);
      }
 else {
        MessageUI.openError(""String_Node_Str"" + cm.getLanguage() + ""String_Node_Str"");
        return;
      }
    }
  }
  UDIResourceFileHelper.getInstance().save(definition);
  this.isDirty=false;
}",0.9347462353597324
139477,"protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,getMetadataTitle(),""String_Node_Str"");
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(NAME_LABEL,nameText,parent);
  purposeText=createMetadataTextFiled(PURPOSE_LABEL,purposeText,parent);
  descriptionText=createMetadataTextFiled(DESCRIPTION_LABEL,descriptionText,parent);
  authorText=createMetadataTextFiled(AUTHOR_LABEL,authorText,parent);
  if (!isDefaultProject()) {
    authorText.setEnabled(false);
    authorText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
  toolkit.createLabel(parent,STATUS_LABEL);
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.DEV_STATUS,getCurrentModelElement(this.getEditor()).getTaggedValue());
  String statusValue=taggedValue.getValue();
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    List<String> statusArray=MetadataHelper.toArray(statusList);
    String[] tempString=new String[statusList.size()];
    statusCombo.setItems(statusArray.toArray(tempString));
    if (statusArray.contains(statusValue)) {
      statusCombo.remove(statusValue);
      statusCombo.add(statusValue,0);
    }
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusCombo.add(status.getLiteral());
    }
    statusCombo.remove(statusValue);
    statusCombo.add(statusValue,0);
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  section.setClient(parent);
  return section;
}","protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,getMetadataTitle(),""String_Node_Str"");
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(NAME_LABEL,nameText,parent);
  purposeText=createMetadataTextFiled(PURPOSE_LABEL,purposeText,parent);
  descriptionText=createMetadataTextFiled(DESCRIPTION_LABEL,descriptionText,parent);
  authorText=createMetadataTextFiled(AUTHOR_LABEL,authorText,parent);
  if (!isDefaultProject()) {
    authorText.setEnabled(false);
    authorText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
  toolkit.createLabel(parent,STATUS_LABEL);
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  String statusValue=DevelopmentStatus.DRAFT.getLiteral();
  TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.DEV_STATUS,getCurrentModelElement(this.getEditor()).getTaggedValue());
  if (taggedValue != null) {
    statusValue=taggedValue.getValue();
  }
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    List<String> statusArray=MetadataHelper.toArray(statusList);
    String[] tempString=new String[statusList.size()];
    statusCombo.setItems(statusArray.toArray(tempString));
    if (statusArray.contains(statusValue)) {
      statusCombo.remove(statusValue);
      statusCombo.add(statusValue,0);
    }
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusCombo.add(status.getLiteral());
    }
    statusCombo.remove(statusValue);
    statusCombo.add(statusValue,0);
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  section.setClient(parent);
  return section;
}",0.9721387051513328
139478,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
      return true;
    }
 else {
      return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath());
    }
  }
  return false;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
      return true;
    }
 else {
      return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
    }
  }
  return false;
}",0.9441141498216408
139479,"@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  final IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath());
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(getTitle());
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    if (file.exists() && SQLExplorerPlugin.isEditorSerialName(filePath.lastSegment())) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        IPath append=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(append);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      createIFile(progressMonitor,file,getViewer().getDocument().get());
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}","@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  final IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(getTitle());
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    if (file.exists() && SQLExplorerPlugin.isEditorSerialName(filePath.lastSegment())) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        IPath append=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(append);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      createIFile(progressMonitor,file,getViewer().getDocument().get());
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}",0.9926916498211786
139480,"public Image getImage(Object element){
  if (element instanceof IFolderNode) {
    return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
  }
 else   if (element instanceof TdDataProvider) {
    return ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
  }
 else   if (element instanceof TdColumn) {
    if (ColumnHelper.isPrimaryKey((TdColumn)element)) {
      return ImageLib.getImage(ImageLib.PK_COLUMN);
    }
  }
 else   if (element instanceof IEcosComponent) {
    return ImageLib.getImage(ImageLib.EXCHANGE);
  }
 else   if (element instanceof IEcosCategory) {
    return ImageLib.getImage(ImageLib.EXCHANGE);
  }
 else   if (element instanceof IndicatorDefinition) {
    return ImageLib.getImage(ImageLib.IND_DEFINITION);
  }
  return super.getImage(element);
}","public Image getImage(Object element){
  if (element instanceof IFolderNode) {
    return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
  }
 else   if (element instanceof TdDataProvider) {
    return ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
  }
 else   if (element instanceof TdColumn) {
    if (ColumnHelper.isPrimaryKey((TdColumn)element)) {
      return ImageLib.getImage(ImageLib.PK_COLUMN);
    }
  }
 else   if (element instanceof IEcosComponent) {
    return ImageLib.getImage(ImageLib.EXCHANGE);
  }
 else   if (element instanceof IEcosCategory) {
    return ImageLib.getImage(ImageLib.EXCHANGE);
  }
 else   if (element instanceof IndicatorDefinition) {
    return ImageLib.getImage(ImageLib.IND_DEFINITION);
  }
 else   if (element instanceof TdView) {
    return ImageLib.getImage(ImageLib.VIEW);
  }
  return super.getImage(element);
}",0.9441687344913152
139481,"/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ContentViewer#handleDispose(org.eclipse.swt.events.DisposeEvent)
 */
@Override protected void handleDispose(DisposeEvent event){
  super.handleDispose(event);
  if (exportMenu != null)   exportMenu.dispose();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ContentViewer#handleDispose(org.eclipse.swt.events.DisposeEvent)
 */
@Override protected void handleDispose(DisposeEvent event){
  super.handleDispose(event);
  exportMenu.dispose();
}",0.9486166007905138
139482,"/** 
 * DOC qzhang Comment method ""refreshSumSection"".
 * @param summarySection
 */
private void refreshSumSection(){
  fillDataProvider();
  if (sumSectionClient != null && !sumSectionClient.isDisposed()) {
    Control[] children=sumSectionClient.getChildren();
    for (    Control control : children) {
      control.dispose();
    }
  }
  Composite leftComp=new Composite(sumSectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(leftComp);
  leftComp.setLayout(new GridLayout());
  Composite rightComp=new Composite(sumSectionClient,SWT.NONE);
  rightComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(rightComp);
  TdProviderConnection providerConnection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String connectionStr=providerConnection.getConnectionString();
  Properties pameterProperties=SupportDBUrlStore.getInstance().getDBPameterProperties(connectionStr);
  String labelContent=pameterProperties.getProperty(org.talend.dq.PluginConstant.DBTYPE_PROPERTY);
  Label leftLabel=new Label(leftComp,SWT.NONE);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  labelContent=pameterProperties.getProperty(org.talend.dq.PluginConstant.HOSTNAME_PROPERTY);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  labelContent=pameterProperties.getProperty(org.talend.dq.PluginConstant.PORT_PROPERTY);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  labelContent=DataProviderHelper.getUser(providerConnection);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  List<TdCatalog> tdCatalogs=getCatalogs();
  List<TdSchema> tdSchema=DataProviderHelper.getTdSchema(tdDataProvider);
  leftLabel=new Label(leftComp,SWT.NONE);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdCatalogs.size()));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdSchema.size()));
  leftLabel.setLayoutData(new GridData());
  ExecutionInformations resultMetadata=analysis.getResults().getResultMetadata();
  Label rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",getFormatDateStr(analysis.getCreationDate())));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",getFormatDateStr(resultMetadata.getExecutionDate())));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",resultMetadata.getExecutionDuration() / 1000.0d));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  String executeStatus=(resultMetadata.isLastRunOk() ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"",resultMetadata.getMessage()));
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (resultMetadata.getExecutionNumber() == 0 ? PluginConstant.EMPTY_STRING : executeStatus));
  if (!resultMetadata.isLastRunOk()) {
    rightLabel.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  }
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",resultMetadata.getExecutionNumber()));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",getFormatDateStr(resultMetadata.getExecutionDate())));
  rightLabel.setLayoutData(new GridData());
  sumSectionClient.layout();
}","/** 
 * DOC qzhang Comment method ""refreshSumSection"".
 * @param summarySection
 */
private void refreshSumSection(){
  fillDataProvider();
  if (tdDataProvider == null) {
    return;
  }
  if (sumSectionClient != null && !sumSectionClient.isDisposed()) {
    Control[] children=sumSectionClient.getChildren();
    for (    Control control : children) {
      control.dispose();
    }
  }
  Composite leftComp=new Composite(sumSectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(leftComp);
  leftComp.setLayout(new GridLayout());
  Composite rightComp=new Composite(sumSectionClient,SWT.NONE);
  rightComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(rightComp);
  TdProviderConnection providerConnection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String connectionStr=providerConnection.getConnectionString();
  Properties pameterProperties=SupportDBUrlStore.getInstance().getDBPameterProperties(connectionStr);
  String labelContent=pameterProperties.getProperty(org.talend.dq.PluginConstant.DBTYPE_PROPERTY);
  Label leftLabel=new Label(leftComp,SWT.NONE);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  labelContent=pameterProperties.getProperty(org.talend.dq.PluginConstant.HOSTNAME_PROPERTY);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  labelContent=pameterProperties.getProperty(org.talend.dq.PluginConstant.PORT_PROPERTY);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  labelContent=DataProviderHelper.getUser(providerConnection);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  List<TdCatalog> tdCatalogs=getCatalogs();
  List<TdSchema> tdSchema=DataProviderHelper.getTdSchema(tdDataProvider);
  leftLabel=new Label(leftComp,SWT.NONE);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdCatalogs.size()));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  leftLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",tdSchema.size()));
  leftLabel.setLayoutData(new GridData());
  ExecutionInformations resultMetadata=analysis.getResults().getResultMetadata();
  Label rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",getFormatDateStr(analysis.getCreationDate())));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",getFormatDateStr(resultMetadata.getExecutionDate())));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",resultMetadata.getExecutionDuration() / 1000.0d));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  String executeStatus=(resultMetadata.isLastRunOk() ? DefaultMessagesImpl.getString(""String_Node_Str"") : DefaultMessagesImpl.getString(""String_Node_Str"",resultMetadata.getMessage()));
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + (resultMetadata.getExecutionNumber() == 0 ? PluginConstant.EMPTY_STRING : executeStatus));
  if (!resultMetadata.isLastRunOk()) {
    rightLabel.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  }
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",resultMetadata.getExecutionNumber()));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str"",getFormatDateStr(resultMetadata.getExecutionDate())));
  rightLabel.setLayoutData(new GridData());
  sumSectionClient.layout();
}",0.9945738186751074
139483,"private void createTableViewerMenu(final TableViewer columnsElementViewer,final List<Column> columnList,final Button[] buttons){
  Table table=columnsElementViewer.getTable();
  Menu menu=new Menu(table);
  MenuItem menuItem=new MenuItem(menu,SWT.PUSH);
  menuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  menuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  menuItem.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      columnList.remove(((IStructuredSelection)columnsElementViewer.getSelection()).getFirstElement());
      columnsElementViewer.setInput(columnList);
      enabledButtons(buttons,false);
    }
  }
);
  MenuItem showMenuItem=new MenuItem(menu,SWT.CASCADE);
  showMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  showMenuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  showMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showSelectedElements(columnsElementViewer);
    }
  }
);
  table.setMenu(menu);
}","private void createTableViewerMenu(final TableViewer columnsElementViewer,final List<Column> columnList,final Button[] buttons){
  Table table=columnsElementViewer.getTable();
  Menu menu=new Menu(table);
  MenuItem menuItem=new MenuItem(menu,SWT.PUSH);
  menuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  menuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  menuItem.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (columnList.remove(((IStructuredSelection)columnsElementViewer.getSelection()).getFirstElement())) {
        columnsElementViewer.setInput(columnList);
        enabledButtons(buttons,false);
        masterPage.setDirty(true);
      }
    }
  }
);
  MenuItem showMenuItem=new MenuItem(menu,SWT.CASCADE);
  showMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  showMenuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  showMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showSelectedElements(columnsElementViewer);
    }
  }
);
  table.setMenu(menu);
}",0.9749230092388912
139484,"public boolean execute(){
  IFile definitionFile=ResourceManager.getLibrariesFolder().getFile(talendDefinitionFileName);
  if (definitionFile.exists()) {
    try {
      definitionFile.delete(true,null);
    }
 catch (    CoreException e) {
      log.error(e.getMessage(),e);
      return false;
    }
  }
  DefinitionHandler.getInstance();
  if (definitionFile != null) {
    File file=new File(definitionFile.getLocationURI());
    try {
      String content=FileUtils.readFileToString(file);
      content=StringUtils.replace(content,oldSoundexQuery,newSoundexQuery);
      FileUtils.writeStringToFile(file,content);
    }
 catch (    IOException e) {
      log.error(e.getMessage(),e);
      return false;
    }
  }
  return true;
}","public boolean execute(){
  IFile definitionFile=ResourceManager.getLibrariesFolder().getFile(talendDefinitionFileName);
  if (definitionFile.exists()) {
    try {
      definitionFile.delete(true,null);
    }
 catch (    CoreException e) {
      log.error(e.getMessage(),e);
      return false;
    }
  }
  DefinitionHandler.getInstance();
  if (definitionFile != null) {
    File file=new File(definitionFile.getLocationURI());
    try {
      String content=FileUtils.readFileToString(file);
      content=StringUtils.replace(content,oldSoundexQuery,newSoundexQuery);
      content=StringUtils.replace(content,oldPSoundexQuery,newPSoundexQuery);
      FileUtils.writeStringToFile(file,content);
    }
 catch (    IOException e) {
      log.error(e.getMessage(),e);
      return false;
    }
  }
  return true;
}",0.9496774193548388
139485,"@Override protected void handleRemoveElement(RemoveModelElement removeElement){
  TdColumn removeColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumn == null) {
    return;
  }
  popRemoveElementConfirm();
  ColumnSet columnSet=(ColumnSet)selectedObj;
  ColumnSetHelper.removeColumn(removeColumn,columnSet);
  if (ColumnHelper.isPrimaryKey(removeColumn)) {
    removeColumn.getUniqueKey().clear();
  }
}","@Override protected void handleRemoveElement(RemoveModelElement removeElement){
  TdColumn removeColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumn == null) {
    return;
  }
  popRemoveElementConfirm();
  ColumnSet columnSet=(ColumnSet)selectedObj;
  ColumnSetHelper.removeColumn(removeColumn,columnSet);
  if (ColumnHelper.isPrimaryKey(removeColumn)) {
    EList<UniqueKey> uniqueKeys=removeColumn.getUniqueKey();
    if (!uniqueKeys.isEmpty()) {
      UniqueKey pk=uniqueKeys.get(0);
      if (columnSet.getOwnedElement().contains(pk)) {
        columnSet.getOwnedElement().remove(pk);
      }
      uniqueKeys.clear();
    }
  }
}",0.7768888888888889
139486,"protected void handleDiffPackageElement(DiffElement difElement){
  AddModelElement addElement=addModelSwitch.doSwitch(difElement);
  if (addElement != null) {
    handleAddElement(addElement);
    return;
  }
  RemoveModelElement removeElement=removeModelSwitch.doSwitch(difElement);
  if (removeElement != null) {
    handleRemoveElement(removeElement);
  }
  RemoveReferenceValue refValue=removeReferenceValue.doSwitch(difElement);
  if (refValue != null) {
    handleRemoveRefElement(refValue);
  }
  if (difElement instanceof UpdateAttribute) {
    handleUpdateElement((UpdateAttribute)difElement);
    return;
  }
}","protected void handleDiffPackageElement(DiffElement difElement){
  AddModelElement addElement=addModelSwitch.doSwitch(difElement);
  if (addElement != null) {
    handleAddElement(addElement);
    return;
  }
  RemoveModelElement removeElement=removeModelSwitch.doSwitch(difElement);
  if (removeElement != null) {
    handleRemoveElement(removeElement);
  }
  RemoveReferenceValue refValue=removeReferenceValue.doSwitch(difElement);
  if (refValue != null) {
  }
  if (difElement instanceof UpdateAttribute) {
    handleUpdateElement((UpdateAttribute)difElement);
    return;
  }
}",0.9683860232945092
139487,"@Override protected void handleRemoveElement(RemoveModelElement removeElement){
  TdColumn removeColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumn == null) {
    return;
  }
  popRemoveElementConfirm();
  ColumnSetHelper.removeColumn(removeColumn,(ColumnSet)selectedObj);
}","@Override protected void handleRemoveElement(RemoveModelElement removeElement){
  TdColumn removeColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumn == null) {
    return;
  }
  popRemoveElementConfirm();
  ColumnSet columnSet=(ColumnSet)selectedObj;
  ColumnSetHelper.removeColumn(removeColumn,columnSet);
  if (ColumnHelper.isPrimaryKey(removeColumn)) {
    removeColumn.getUniqueKey().clear();
  }
}",0.7398692810457517
139488,"public void hookLeftPanelContextMenu(){
  contentMergeViewer.hookContextMenu();
}","public void hookLeftPanelContextMenu(boolean compareEachOther){
  contentMergeViewer.hookContextMenu(compareEachOther);
}",0.801980198019802
139489,"@Override protected void createToolItems(ToolBarManager tbm){
  final Action nextDiff=new AbstractCompareAction(ResourceBundle.getBundle(BUNDLE_NAME),""String_Node_Str""){
    @Override public void run(){
      navigate(true);
    }
  }
;
  final ActionContributionItem nextDiffContribution=new ActionContributionItem(nextDiff);
  nextDiffContribution.setVisible(true);
  tbm.appendToGroup(""String_Node_Str"",nextDiffContribution);
  final Action previousDiff=new AbstractCompareAction(ResourceBundle.getBundle(BUNDLE_NAME),""String_Node_Str""){
    @Override public void run(){
      navigate(false);
    }
  }
;
  final ActionContributionItem previousDiffContribution=new ActionContributionItem(previousDiff);
  previousDiffContribution.setVisible(true);
  tbm.appendToGroup(""String_Node_Str"",previousDiffContribution);
  IContributionItem[] icItems=tbm.getItems();
  for (  IContributionItem conbItem : icItems) {
    if (conbItem instanceof ActionContributionItem) {
      IAction action=((ActionContributionItem)conbItem).getAction();
      if (action != null && action instanceof ChangePropertyAction) {
        tbm.remove(conbItem);
        conbItem.dispose();
        continue;
      }
      String actionId=action.getActionDefinitionId();
      if (action != null) {
        if (COPY_LEFT_TO_RIGHT_ID.equals(actionId) || COPY_RIGHT_TO_LEFT_ID.equals(actionId)) {
          tbm.remove(conbItem);
          conbItem.dispose();
        }
      }
    }
  }
  tbm.update(true);
}","@Override protected void createToolItems(ToolBarManager tbm){
  final Action nextDiff=new AbstractCompareAction(ResourceBundle.getBundle(BUNDLE_NAME),""String_Node_Str""){
    @Override public void run(){
      navigate(true);
    }
  }
;
  final ActionContributionItem nextDiffContribution=new ActionContributionItem(nextDiff);
  nextDiffContribution.setVisible(true);
  tbm.appendToGroup(""String_Node_Str"",nextDiffContribution);
  final Action previousDiff=new AbstractCompareAction(ResourceBundle.getBundle(BUNDLE_NAME),""String_Node_Str""){
    @Override public void run(){
      navigate(false);
    }
  }
;
  final ActionContributionItem previousDiffContribution=new ActionContributionItem(previousDiff);
  previousDiffContribution.setVisible(true);
  tbm.appendToGroup(""String_Node_Str"",previousDiffContribution);
  IContributionItem[] icItems=tbm.getItems();
  for (  IContributionItem conbItem : icItems) {
    if (conbItem instanceof ActionContributionItem) {
      IAction action=((ActionContributionItem)conbItem).getAction();
      if (action != null) {
        String actionId=action.getActionDefinitionId();
        if (action instanceof ChangePropertyAction) {
          tbm.remove(conbItem);
          conbItem.dispose();
        }
        if (COPY_LEFT_TO_RIGHT_ID.equals(actionId)) {
          tbm.remove(conbItem);
          conbItem.dispose();
        }
      }
    }
  }
  tbm.update(true);
}",0.8206371191135734
139490,"public void hookContextMenu(){
  MenuManager menuMgr=new MenuManager(""String_Node_Str"",""String_Node_Str"");
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      manager.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
      IStructuredSelection selection=(IStructuredSelection)diffTabLeft.getSelection();
      EObject selectedElement=null;
      if (selection.toList().size() == 1) {
        selectedElement=(EObject)selection.getFirstElement();
        if (selectedElement instanceof Package) {
          SubelementCompareAction subEleCompTableAction=new SubelementCompareAction(Messages.getString(""String_Node_Str""),diffTabLeft,selectedOjbect,SubelementCompareAction.TABLE_COMPARE);
          SubelementCompareAction subEleCompViewAction=new SubelementCompareAction(Messages.getString(""String_Node_Str""),diffTabLeft,selectedOjbect,SubelementCompareAction.VIEW_COMPARE);
          manager.add(subEleCompTableAction);
          manager.add(subEleCompViewAction);
        }
 else         if (selectedElement instanceof ColumnSet) {
          addRenameMenuAction(manager,selectedElement);
          SubelementCompareAction subEleCompColumnAction=new SubelementCompareAction(Messages.getString(""String_Node_Str""),diffTabLeft,selectedOjbect,SubelementCompareAction.COLUMN_COMPARE);
          manager.add(subEleCompColumnAction);
        }
 else         if (selectedElement instanceof Column) {
          addRenameMenuAction(manager,selectedElement);
        }
      }
    }
  }
);
  Menu menu=menuMgr.createContextMenu(diffTabLeft.getControl());
  diffTabLeft.getControl().setMenu(menu);
  CompareUIPlugin.getActiveWorkbenchWindow().getActivePage().getActiveEditor().getSite().registerContextMenu(menuMgr,diffTabLeft);
  diffTabLeft.getTree().addKeyListener(new CompareKeyListener());
  diffTabLeft.getTree().addMouseListener(new CompareMouseListener());
}","public void hookContextMenu(boolean compareEachOther){
  if (!compareEachOther) {
    MenuManager menuMgr=new MenuManager(""String_Node_Str"",""String_Node_Str"");
    menuMgr.setRemoveAllWhenShown(true);
    menuMgr.addMenuListener(new IMenuListener(){
      public void menuAboutToShow(      IMenuManager manager){
        manager.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
        IStructuredSelection selection=(IStructuredSelection)diffTabLeft.getSelection();
        EObject selectedElement=null;
        if (selection.toList().size() == 1) {
          selectedElement=(EObject)selection.getFirstElement();
          if (selectedElement instanceof Package) {
            SubelementCompareAction subEleCompTableAction=new SubelementCompareAction(Messages.getString(""String_Node_Str""),diffTabLeft,selectedOjbect,SubelementCompareAction.TABLE_COMPARE);
            SubelementCompareAction subEleCompViewAction=new SubelementCompareAction(Messages.getString(""String_Node_Str""),diffTabLeft,selectedOjbect,SubelementCompareAction.VIEW_COMPARE);
            manager.add(subEleCompTableAction);
            manager.add(subEleCompViewAction);
          }
 else           if (selectedElement instanceof ColumnSet) {
            addRenameMenuAction(manager,selectedElement);
            SubelementCompareAction subEleCompColumnAction=new SubelementCompareAction(Messages.getString(""String_Node_Str""),diffTabLeft,selectedOjbect,SubelementCompareAction.COLUMN_COMPARE);
            manager.add(subEleCompColumnAction);
          }
 else           if (selectedElement instanceof Column) {
            addRenameMenuAction(manager,selectedElement);
          }
        }
      }
    }
);
    Menu menu=menuMgr.createContextMenu(diffTabLeft.getControl());
    diffTabLeft.getControl().setMenu(menu);
    CompareUIPlugin.getActiveWorkbenchWindow().getActivePage().getActiveEditor().getSite().registerContextMenu(menuMgr,diffTabLeft);
    diffTabLeft.getTree().addKeyListener(new CompareKeyListener());
    diffTabLeft.getTree().addMouseListener(new CompareMouseListener());
  }
}",0.9705809641532755
139491,"/** 
 * DOC xqliu CompareModelStructureMergeViewer constructor comment.
 * @param parent
 * @param compareConfiguration
 */
public CompareModelStructureMergeViewer(Composite parent,CompareConfiguration compareConfiguration){
  super(parent,compareConfiguration);
}","/** 
 * DOC xqliu CompareModelStructureMergeViewer constructor comment.
 * @param parent
 * @param compareConfiguration
 */
public CompareModelStructureMergeViewer(Composite parent,CompareConfiguration compareConfiguration){
  super(parent,compareConfiguration);
  final ToolBarManager tbm=CompareViewerPane.getToolBarManager(getControl().getParent());
  IContributionItem[] items=tbm.getItems();
  for (  IContributionItem item : items) {
    if (item instanceof ActionContributionItem) {
      IAction action=((ActionContributionItem)item).getAction();
      if (action instanceof ExportMenu) {
        tbm.remove(item);
        item.dispose();
      }
    }
  }
  tbm.update(true);
}",0.5557894736842105
139492,"@Override protected void createResultSection(Composite parent){
  resultSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(resultSection);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  resultSection.setClient(sectionClient);
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
  Table resultTable=new Table(sectionClient,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  resultTable.setLinesVisible(true);
  resultTable.setHeaderVisible(true);
  final TableColumn columnHeader0=new TableColumn(resultTable,SWT.CENTER);
  columnHeader0.setWidth(150);
  columnHeader0.setAlignment(SWT.CENTER);
  final TableColumn columnHeader1=new TableColumn(resultTable,SWT.CENTER);
  columnHeader1.setWidth(120);
  columnHeader1.setAlignment(SWT.CENTER);
  Analysis analysis=this.masterPage.getAnalysisHandler().getAnalysis();
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  rowMatchingIndicatorA=(RowMatchingIndicator)indicators.get(0);
  rowMatchingIndicatorB=(RowMatchingIndicator)indicators.get(1);
  String tableNameA=ColumnHelper.getColumnSetOwner(rowMatchingIndicatorA.getColumnSetA().get(0)).getName();
  String tableNameB=ColumnHelper.getColumnSetOwner(rowMatchingIndicatorA.getColumnSetB().get(0)).getName();
  columnHeader1.setText(tableNameA);
  if (!isHasDeactivatedIndicator) {
    final TableColumn columnHeader2=new TableColumn(resultTable,SWT.CENTER);
    columnHeader2.setWidth(120);
    columnHeader2.setAlignment(SWT.CENTER);
    columnHeader2.setText(tableNameB);
  }
  createTableItems(resultTable);
  creatChart(sectionClient,tableNameA,tableNameB);
  StringBuilder description=new StringBuilder();
  description.append(setAMatchPercent);
  description.append(DefaultMessagesImpl.getString(""String_Node_Str"",tableNameA,tableNameB));
  if (!isHasDeactivatedIndicator) {
    description.append(""String_Node_Str"");
    description.append(setBMatchPercent);
    description.append(DefaultMessagesImpl.getString(""String_Node_Str"",tableNameB,tableNameA));
  }
 else {
    description.append(""String_Node_Str"");
  }
  resultSection.setDescription(description.toString());
  resultSection.layout();
}","@Override protected void createResultSection(Composite parent){
  resultSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(resultSection);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  resultSection.setClient(sectionClient);
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
  Table resultTable=new Table(sectionClient,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  resultTable.setLinesVisible(true);
  resultTable.setHeaderVisible(true);
  final TableColumn columnHeader0=new TableColumn(resultTable,SWT.CENTER);
  columnHeader0.setWidth(150);
  columnHeader0.setAlignment(SWT.CENTER);
  final TableColumn columnHeader1=new TableColumn(resultTable,SWT.CENTER);
  columnHeader1.setWidth(120);
  columnHeader1.setAlignment(SWT.CENTER);
  Analysis analysis=this.masterPage.getAnalysisHandler().getAnalysis();
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  rowMatchingIndicatorA=(RowMatchingIndicator)indicators.get(0);
  rowMatchingIndicatorB=(RowMatchingIndicator)indicators.get(1);
  int sizeA=rowMatchingIndicatorA.getColumnSetA().size();
  int sizeB=rowMatchingIndicatorA.getColumnSetB().size();
  if (sizeA > 0 && sizeB > 0) {
    String tableNameA=ColumnHelper.getColumnSetOwner(rowMatchingIndicatorA.getColumnSetA().get(0)).getName();
    String tableNameB=ColumnHelper.getColumnSetOwner(rowMatchingIndicatorA.getColumnSetB().get(0)).getName();
    columnHeader1.setText(tableNameA);
    if (!isHasDeactivatedIndicator) {
      final TableColumn columnHeader2=new TableColumn(resultTable,SWT.CENTER);
      columnHeader2.setWidth(120);
      columnHeader2.setAlignment(SWT.CENTER);
      columnHeader2.setText(tableNameB);
    }
    createTableItems(resultTable);
    creatChart(sectionClient,tableNameA,tableNameB);
    StringBuilder description=new StringBuilder();
    description.append(setAMatchPercent);
    description.append(DefaultMessagesImpl.getString(""String_Node_Str"",tableNameA,tableNameB));
    if (!isHasDeactivatedIndicator) {
      description.append(""String_Node_Str"");
      description.append(setBMatchPercent);
      description.append(DefaultMessagesImpl.getString(""String_Node_Str"",tableNameB,tableNameA));
    }
 else {
      description.append(""String_Node_Str"");
    }
    resultSection.setDescription(description.toString());
  }
  resultSection.layout();
}",0.953915171288744
139493,"protected void handleDiffPackageElement(DiffElement difElement){
  AddModelElement addElement=addModelSwitch.doSwitch(difElement);
  if (addElement != null) {
    handleAddElement(addElement);
    return;
  }
  RemoveModelElement removeElement=removeModelSwitch.doSwitch(difElement);
  if (removeElement != null) {
    handleRemoveElement(removeElement);
  }
  RemoveReferenceValue refValue=removeReferenceValue.doSwitch(difElement);
  if (refValue != null) {
  }
  if (difElement instanceof UpdateAttribute) {
    handleUpdateElement((UpdateAttribute)difElement);
    return;
  }
}","protected void handleDiffPackageElement(DiffElement difElement){
  AddModelElement addElement=addModelSwitch.doSwitch(difElement);
  if (addElement != null) {
    handleAddElement(addElement);
    return;
  }
  RemoveModelElement removeElement=removeModelSwitch.doSwitch(difElement);
  if (removeElement != null) {
    handleRemoveElement(removeElement);
  }
  if (difElement instanceof UpdateAttribute) {
    handleUpdateElement((UpdateAttribute)difElement);
    return;
  }
}",0.9008498583569404
139494,"private void initSwitchValue(){
  addModelSwitch=new DiffSwitch<AddModelElement>(){
    public AddModelElement caseAddModelElement(    AddModelElement object){
      return object;
    }
  }
;
  updateModelSwitch=new DiffSwitch<UpdateModelElement>(){
    public UpdateModelElement caseUpdateModelElement(    UpdateModelElement object){
      return object;
    }
  }
;
  removeModelSwitch=new DiffSwitch<RemoveModelElement>(){
    public RemoveModelElement caseRemoveModelElement(    RemoveModelElement object){
      return object;
    }
  }
;
  removeReferenceValue=new DiffSwitch<RemoveReferenceValue>(){
    public RemoveReferenceValue caseRemoveReferenceValue(    RemoveReferenceValue object){
      return object;
    }
  }
;
  packageSwitch=new RelationalSwitch<Package>(){
    public Package casePackage(    Package object){
      return object;
    }
  }
;
}","private void initSwitchValue(){
  addModelSwitch=new DiffSwitch<AddModelElement>(){
    public AddModelElement caseAddModelElement(    AddModelElement object){
      return object;
    }
  }
;
  updateModelSwitch=new DiffSwitch<UpdateModelElement>(){
    public UpdateModelElement caseUpdateModelElement(    UpdateModelElement object){
      return object;
    }
  }
;
  removeModelSwitch=new DiffSwitch<RemoveModelElement>(){
    public RemoveModelElement caseRemoveModelElement(    RemoveModelElement object){
      return object;
    }
  }
;
  packageSwitch=new RelationalSwitch<Package>(){
    public Package casePackage(    Package object){
      return object;
    }
  }
;
}",0.8791208791208791
139495,"public static List<String> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  List<String> importInformation=new ArrayList<String>();
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importInformation.add(DefaultMessagesImpl.getString(""String_Node_Str"",name));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
        names.add(name);
        importInformation.add(""String_Node_Str"" + name + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importInformation.add(""String_Node_Str"");
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importInformation.add(""String_Node_Str"" + contents + ""String_Node_Str"");
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importInformation.add(""String_Node_Str"" + contents + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importInformation.add(""String_Node_Str"");
    }
catch (    IOException e) {
      log.error(e,e);
      importInformation.add(""String_Node_Str"");
    }
  }
  return importInformation;
}","public static List<String> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  List<String> importInformation=new ArrayList<String>();
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      if (checkFileHeader(reader.getHeaders())) {
        while (reader.readRecord()) {
          String name=reader.get(PatternToExcelEnum.Label.getLiteral());
          if (name.matches(""String_Node_Str"") || (!name.startsWith(""String_Node_Str"") && !name.endsWith(""String_Node_Str""))) {
            if (names.contains(name)) {
              if (skip) {
                importInformation.add(DefaultMessagesImpl.getString(""String_Node_Str"",name));
                continue;
              }
              if (rename) {
                name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=name;
            patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
            patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
            patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
            patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
            for (            PatternLanguageType languagetype : PatternLanguageType.values()) {
              String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
              if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
                patternParameters.regex.put(languagetype.getLiteral(),cellStr);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(name);
            importInformation.add(""String_Node_Str"" + name + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
          }
 else {
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"");
              }
            }
);
          }
        }
        reader.close();
      }
 else {
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"");
          }
        }
);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
      importInformation.add(""String_Node_Str"");
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importInformation.add(""String_Node_Str"" + contents + ""String_Node_Str"");
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importInformation.add(""String_Node_Str"" + contents + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importInformation.add(""String_Node_Str"");
    }
catch (    IOException e) {
      log.error(e,e);
      importInformation.add(""String_Node_Str"");
    }
  }
  return importInformation;
}",0.9180858148606222
139496,"@Override public boolean performFinish(){
  File file=new File(page.getSourceFile());
  final List<String> information=ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename());
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(String[])information.toArray(new String[0]));
    }
  }
);
  return true;
}","@Override public boolean performFinish(){
  File file=new File(page.getSourceFile());
  final List<String> information=ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename());
  if (0 < information.size()) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),(String[])information.toArray(new String[0]));
      }
    }
);
  }
  return true;
}",0.951167728237792
139497,"/** 
 * DOC bZhou Comment method ""updateVersionInDB"".
 * @param url
 * @param driver
 * @param props
 * @return
 */
public static boolean updateVersionInDB(String url,String driver,Properties props){
  Connection connection=null;
  try {
    connection=ConnectionUtils.createConnection(url,driver,props);
    if (connection != null) {
      Statement stat=connection.createStatement();
      ProductVersion curVersion=WorkspaceVersionHelper.getVesion();
      return stat.execute(DefaultMessagesImpl.getString(""String_Node_Str"",curVersion.toString()));
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
  return false;
}","/** 
 * DOC bZhou Comment method ""updateVersionInDB"".
 * @param url
 * @param driver
 * @param props
 * @return
 */
public static boolean updateVersionInDB(String url,String driver,Properties props){
  Connection connection=null;
  try {
    connection=ConnectionUtils.createConnection(url,driver,props);
    if (connection != null) {
      Statement stat=connection.createStatement();
      ProductVersion curVersion=WorkspaceVersionHelper.getVesion();
      return stat.execute(""String_Node_Str"" + curVersion + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
  return false;
}",0.96569250317662
139498,"private void movePatternsIntoPatternsRegex(IFolder oldSubFolder,IFolder newSubfolder,final String folderProperty) throws CoreException {
  TdqPropertieManager.getInstance().addFolderProperties(newSubfolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
  for (  IResource oldResource : oldSubFolder.members()) {
    if (newSubfolder.getName().equals(oldResource.getName())) {
      continue;
    }
    if (oldResource instanceof IFolder) {
      IFolder oldFolder=(IFolder)oldResource;
      IFolder newFolder=DQStructureManager.getInstance().createNewFolder(newSubfolder,oldFolder.getName());
      TdqPropertieManager.getInstance().addFolderProperties(newFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
      movePatternsIntoPatternsRegex(oldFolder,newFolder,folderProperty);
      oldFolder.delete(true,null);
    }
    if (oldResource instanceof IFile) {
      IFile file=(IFile)oldResource;
      final ModelElement pattern=getModelElement(file,folderProperty);
      final EList<Dependency> supplierDependency=pattern.getSupplierDependency();
      if (supplierDependency.isEmpty()) {
        oldResource.copy(newSubfolder.getFolder(oldResource.getName()).getFullPath(),true,null);
      }
 else {
        for (        Dependency dependency : supplierDependency) {
          URI newUri=URI.createPlatformResourceURI(newSubfolder.getFullPath().toOSString(),true);
          EMFUtil.changeUri(pattern.eResource(),newUri);
          final EList<ModelElement> clientAnalyses=dependency.getClient();
          for (          ModelElement modelElement : clientAnalyses) {
            Analysis analysis=DataqualitySwitchHelper.ANALYSIS_SWITCH.doSwitch(modelElement);
            if (analysis != null) {
              AnaResourceFileHelper.getInstance().save(analysis);
            }
          }
        }
      }
      oldResource.delete(true,null);
    }
  }
}","private void movePatternsIntoPatternsRegex(IFolder oldSubFolder,IFolder newSubfolder,final String folderProperty) throws CoreException {
  if (!oldSubFolder.exists())   return;
  TdqPropertieManager.getInstance().addFolderProperties(newSubfolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
  for (  IResource oldResource : oldSubFolder.members()) {
    if (newSubfolder.getName().equals(oldResource.getName())) {
      continue;
    }
    if (oldResource instanceof IFolder) {
      IFolder oldFolder=(IFolder)oldResource;
      IFolder newFolder=DQStructureManager.getInstance().createNewFolder(newSubfolder,oldFolder.getName());
      TdqPropertieManager.getInstance().addFolderProperties(newFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
      movePatternsIntoPatternsRegex(oldFolder,newFolder,folderProperty);
      oldFolder.delete(true,null);
    }
    if (oldResource instanceof IFile) {
      IFile file=(IFile)oldResource;
      final ModelElement pattern=getModelElement(file,folderProperty);
      final EList<Dependency> supplierDependency=pattern.getSupplierDependency();
      if (supplierDependency.isEmpty()) {
        oldResource.copy(newSubfolder.getFolder(oldResource.getName()).getFullPath(),true,null);
      }
 else {
        for (        Dependency dependency : supplierDependency) {
          URI newUri=URI.createPlatformResourceURI(newSubfolder.getFullPath().toOSString(),true);
          EMFUtil.changeUri(pattern.eResource(),newUri);
          final EList<ModelElement> clientAnalyses=dependency.getClient();
          for (          ModelElement modelElement : clientAnalyses) {
            Analysis analysis=DataqualitySwitchHelper.ANALYSIS_SWITCH.doSwitch(modelElement);
            if (analysis != null) {
              AnaResourceFileHelper.getInstance().save(analysis);
            }
          }
        }
      }
      oldResource.delete(true,null);
    }
  }
}",0.9894957983193278
139499,"/** 
 * Method ""updateDependencies"" updates dependencies between elements in TOP.
 * @param analysesSubFolder
 * @throws CoreException
 */
private void updateDependencies(IFolder analysesSubFolder) throws CoreException {
  for (  IResource resource : analysesSubFolder.members()) {
    if (resource instanceof IFolder) {
      IFolder folder=(IFolder)resource;
      updateDependencies(folder);
    }
    if (resource instanceof IFile) {
      IFile file=(IFile)resource;
      final Analysis analysis=AnaResourceFileHelper.getInstance().findAnalysis(file);
      final List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
      for (      Pattern pattern : patterns) {
        DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        AnaResourceFileHelper.getInstance().save(analysis);
      }
      final List<IndicatorDefinition> userDefinedIndicators=AnalysisHelper.getUserDefinedIndicators(analysis);
      for (      IndicatorDefinition indicatorDefinition : userDefinedIndicators) {
        DependenciesHandler.getInstance().setDependencyOn(analysis,indicatorDefinition);
        AnaResourceFileHelper.getInstance().save(analysis);
      }
    }
  }
}","/** 
 * Method ""updateDependencies"" updates dependencies between elements in TOP.
 * @param analysesSubFolder
 * @throws CoreException
 */
private void updateDependencies(IFolder analysesSubFolder) throws CoreException {
  for (  IResource resource : analysesSubFolder.members()) {
    if (resource instanceof IFolder) {
      IFolder folder=(IFolder)resource;
      updateDependencies(folder);
    }
    if (resource instanceof IFile) {
      IFile file=(IFile)resource;
      final Analysis analysis=AnaResourceFileHelper.getInstance().findAnalysis(file);
      if (analysis != null) {
        final List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
        for (        Pattern pattern : patterns) {
          DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
          AnaResourceFileHelper.getInstance().save(analysis);
        }
        final List<IndicatorDefinition> userDefinedIndicators=AnalysisHelper.getUserDefinedIndicators(analysis);
        for (        IndicatorDefinition indicatorDefinition : userDefinedIndicators) {
          DependenciesHandler.getInstance().setDependencyOn(analysis,indicatorDefinition);
          AnaResourceFileHelper.getInstance().save(analysis);
        }
      }
    }
  }
}",0.9663105998356616
139500,"/** 
 * Method ""isPrimaryKey"".
 * @param column a column
 * @return true if the given column is a primary key
 */
public static boolean isPrimaryKey(Column column){
  return column != null && getPrimaryKey(column) != null;
}","/** 
 * Method ""isPrimaryKey"".
 * @param column a column
 * @return true if the given column is a primary key
 */
public static boolean isPrimaryKey(Column column){
  return getPrimaryKey(column) != null;
}",0.8604651162790697
139501,"/** 
 * DOC mzhao Comment method ""isForeignKey"",Feature 8690.
 * @param column
 * @return
 */
public static boolean isForeignKey(Column column){
  return column != null && getForeignKey(column) != null;
}","/** 
 * DOC mzhao Comment method ""isForeignKey"",Feature 8690.
 * @param column
 * @return
 */
public static boolean isForeignKey(Column column){
  return getForeignKey(column) != null;
}",0.953846153846154
139502,"public boolean execute(){
  IProject rootProject=ResourceManager.getRootProject();
  IFolder libraryFolder=rootProject.getFolder(ResourceManager.LIBRARIES_FOLDER_NAME);
  try {
    IFolder oldPatternFolder=libraryFolder.getFolder(DQStructureManager.PATTERNS);
    IFolder newPatternFolder=libraryFolder.getFolder(DQStructureManager.PATTERNS);
    String folderProperty=DQStructureManager.PATTERNS_FOLDER_PROPERTY;
    IFolder newRegexSubfolder=createSubfolder(newPatternFolder,DQStructureManager.REGEX,folderProperty);
    movePatternsIntoPatternsRegex(oldPatternFolder,newRegexSubfolder,folderProperty);
    IFolder oldSqlPatternsFolder=libraryFolder.getFolder(DQStructureManager.SQL_PATTERNS);
    IFolder newSqlSubfolder=DQStructureManager.getInstance().createNewReadOnlyFolder(newPatternFolder,DQStructureManager.SQL);
    folderProperty=DQStructureManager.SQLPATTERNS_FOLDER_PROPERTY;
    movePatternsIntoPatternsRegex(oldSqlPatternsFolder,newSqlSubfolder,folderProperty);
    oldSqlPatternsFolder.delete(true,null);
    IFolder oldDqRulesFolder=libraryFolder.getFolder(DQStructureManager.DQ_RULES);
    IFolder newRulesFolder=createSubfolder(libraryFolder,DQStructureManager.RULES,folderProperty);
    folderProperty=DQStructureManager.DQRULES_FOLDER_PROPERTY;
    IFolder newRulesSQLSubfolder=createSubfolder(newRulesFolder,DQStructureManager.SQL,folderProperty);
    movePatternsIntoPatternsRegex(oldDqRulesFolder,newRulesSQLSubfolder,folderProperty);
    oldDqRulesFolder.delete(true,null);
    rootProject.refreshLocal(IResource.DEPTH_INFINITE,null);
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}","public boolean execute(){
  IProject rootProject=ResourceManager.getRootProject();
  IFolder libraryFolder=rootProject.getFolder(ResourceManager.LIBRARIES_FOLDER_NAME);
  try {
    IFolder oldPatternFolder=libraryFolder.getFolder(DQStructureManager.PATTERNS);
    IFolder newPatternFolder=libraryFolder.getFolder(DQStructureManager.PATTERNS);
    String folderProperty=DQStructureManager.PATTERNS_FOLDER_PROPERTY;
    IFolder newRegexSubfolder=createSubfolder(newPatternFolder,DQStructureManager.REGEX,folderProperty);
    moveItems(oldPatternFolder,newRegexSubfolder,folderProperty);
    IFolder oldSqlPatternsFolder=libraryFolder.getFolder(DQStructureManager.SQL_PATTERNS);
    IFolder newSqlSubfolder=DQStructureManager.getInstance().createNewReadOnlyFolder(newPatternFolder,DQStructureManager.SQL);
    folderProperty=DQStructureManager.SQLPATTERNS_FOLDER_PROPERTY;
    moveItems(oldSqlPatternsFolder,newSqlSubfolder,folderProperty);
    oldSqlPatternsFolder.delete(true,null);
    IFolder oldDqRulesFolder=libraryFolder.getFolder(DQStructureManager.DQ_RULES);
    IFolder newRulesFolder=createSubfolder(libraryFolder,DQStructureManager.RULES,folderProperty);
    folderProperty=DQStructureManager.DQRULES_FOLDER_PROPERTY;
    IFolder newRulesSQLSubfolder=createSubfolder(newRulesFolder,DQStructureManager.SQL,folderProperty);
    moveItems(oldDqRulesFolder,newRulesSQLSubfolder,folderProperty);
    oldDqRulesFolder.delete(true,null);
    rootProject.refreshLocal(IResource.DEPTH_INFINITE,null);
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}",0.9724770642201837
139503,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  indicatorItem.setImage(0,getIndicatorIamge(unit));
  String label=indicatorUnit.getIndicatorName();
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum indicatorType=indicatorUnit.getType();
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  indicatorItem.setImage(0,getIndicatorIamge(unit));
  String indicatorName=indicatorUnit.getIndicatorName();
  String label=indicatorName == null ? ""String_Node_Str"" : indicatorName;
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=delLabel.getImage().getBounds().width;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorType.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}",0.9831501831501832
139504,"public boolean execute(){
  Collection<Analysis> allAnalysis=AnaResourceFileHelper.getInstance().getAllAnalysis();
  Collection<WhereRule> allDQRules=DQRuleResourceFileHelper.getInstance().getAllDQRules();
  Collection<Pattern> allPatternes=PatternResourceFileHelper.getInstance().getAllPatternes();
  List<TdDataProvider> allDataProviders=PrvResourceFileHelper.getInstance().getAllDataProviders();
  Collection<TdReport> allReports=RepResourceFileHelper.getInstance().getAllReports();
  Collection<IndicatorDefinition> allUDIs=UDIResourceFileHelper.getInstance().getAllUDIs();
  List<ModelElement> allElement=new ArrayList<ModelElement>();
  allElement.addAll(allAnalysis);
  allElement.addAll(allDQRules);
  allElement.addAll(allDataProviders);
  allElement.addAll(allReports);
  allElement.addAll(allUDIs);
  saveProperties(allElement);
  return true;
}","public boolean execute(){
  Collection<Analysis> allAnalysis=AnaResourceFileHelper.getInstance().getAllAnalysis();
  Collection<WhereRule> allDQRules=DQRuleResourceFileHelper.getInstance().getAllDQRules();
  Collection<Pattern> allPatternes=PatternResourceFileHelper.getInstance().getAllPatternes();
  List<TdDataProvider> allDataProviders=PrvResourceFileHelper.getInstance().getAllDataProviders();
  Collection<TdReport> allReports=RepResourceFileHelper.getInstance().getAllReports();
  Collection<IndicatorDefinition> allUDIs=UDIResourceFileHelper.getInstance().getAllUDIs();
  List<ModelElement> allElement=new ArrayList<ModelElement>();
  allElement.addAll(allAnalysis);
  allElement.addAll(allDQRules);
  allElement.addAll(allPatternes);
  allElement.addAll(allDataProviders);
  allElement.addAll(allReports);
  allElement.addAll(allUDIs);
  saveProperties(allElement);
  return true;
}",0.979965655409273
139505,"private void searchAllAnalysis(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllAnalysis(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.ANA.equals(file.getFileExtension())) {
      findAnalysis(file);
    }
  }
}","private void searchAllAnalysis(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllAnalysis(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (checkFile(file)) {
      findAnalysis(file);
    }
  }
}",0.9157608695652174
139506,"/** 
 * DOC xy Comment method ""findPathAnalysis"".
 * @param file
 * @return
 */
public Analysis findAnalysis(IFile file){
  Analysis analysisEntity=allAnalysisMap.get(file);
  if (analysisEntity != null) {
    return analysisEntity;
  }
  return readFromFile(file);
}","/** 
 * DOC xy Comment method ""findPathAnalysis"".
 * @param file
 * @return
 */
public Analysis findAnalysis(IFile file){
  if (checkFile(file)) {
    Analysis analysisEntity=allAnalysisMap.get(file);
    if (analysisEntity == null) {
      analysisEntity=readFromFile(file);
    }
    return analysisEntity;
  }
  return null;
}",0.8221476510067114
139507,"private void searchAllWhereRules(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllWhereRules(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
      findWhereRule(file);
    }
  }
}","private void searchAllWhereRules(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllWhereRules(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (checkFile(file)) {
      findWhereRule(file);
    }
  }
}",0.8785046728971962
139508,"/** 
 * DOC xqliu Comment method ""findWhereRule"".
 * @param file
 * @return
 */
public WhereRule findWhereRule(IFile file){
  WhereRule whereRule=whereRulesMap.get(file);
  if (whereRule != null) {
    return whereRule;
  }
  Resource fileResource=getFileResource(file);
  whereRule=retireDQRule(fileResource);
  if (whereRule != null) {
    whereRulesMap.put(file,whereRule);
  }
  return whereRule;
}","/** 
 * DOC xqliu Comment method ""findWhereRule"".
 * @param file
 * @return
 */
public WhereRule findWhereRule(IFile file){
  if (checkFile(file)) {
    WhereRule whereRule=whereRulesMap.get(file);
    if (whereRule == null) {
      whereRule=retireDQRule(getFileResource(file));
    }
    whereRulesMap.put(file,whereRule);
    return whereRule;
  }
  return null;
}",0.6527958387516255
139509,"/** 
 * DOC zqin Comment method ""searchAllPatternes"".
 * @param folder
 * @throws CoreException
 */
private void searchAllPatternes(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllPatternes(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
      findPattern(file);
    }
  }
}","/** 
 * DOC zqin Comment method ""searchAllPatternes"".
 * @param folder
 * @throws CoreException
 */
private void searchAllPatternes(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllPatternes(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (checkFile(file)) {
      findPattern(file);
    }
  }
}",0.8980891719745223
139510,"/** 
 * DOC xy Comment method ""findPathAnalysis"".
 * @param file
 * @return
 */
public Pattern findPattern(IFile file){
  Pattern pattern=patternsMap.get(file);
  if (pattern != null) {
    return pattern;
  }
  Resource fileResource=getFileResource(file);
  pattern=retirePattern(fileResource);
  if (pattern != null) {
    patternsMap.put(file,pattern);
  }
  return pattern;
}","/** 
 * DOC xy Comment method ""findPathAnalysis"".
 * @param file
 * @return
 */
public Pattern findPattern(IFile file){
  if (checkFile(file)) {
    Pattern pattern=patternsMap.get(file);
    if (pattern == null) {
      pattern=retirePattern(getFileResource(file));
    }
    patternsMap.put(file,pattern);
    return pattern;
  }
  return null;
}",0.6382393397524071
139511,"private List<IFile> searchAllDataProvider(IFolder folder,List<IFile> allPRVFiles){
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        searchAllDataProvider(folder.getFolder(resource.getName()),allPRVFiles);
        continue;
      }
      IFile file=(IFile)resource;
      if (FactoriesUtil.PROV.equals(file.getFileExtension())) {
        allPRVFiles.add(file);
      }
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return allPRVFiles;
}","private List<IFile> searchAllDataProvider(IFolder folder,List<IFile> allPRVFiles){
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        searchAllDataProvider(folder.getFolder(resource.getName()),allPRVFiles);
        continue;
      }
      IFile file=(IFile)resource;
      if (checkFile(file)) {
        allPRVFiles.add(file);
      }
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return allPRVFiles;
}",0.718351324828263
139512,"/** 
 * Method ""readFromFile"".
 * @param file the file to read
 * @return the Data provider if found.
 */
public TypedReturnCode<TdDataProvider> findProvider(IFile file){
  TypedReturnCode<TdDataProvider> rc=providerMap.get(file);
  if (rc != null) {
    return rc;
  }
  return readFromFile(file);
}","/** 
 * Method ""readFromFile"".
 * @param file the file to read
 * @return the Data provider if found.
 */
public TypedReturnCode<TdDataProvider> findProvider(IFile file){
  if (checkFile(file)) {
    TypedReturnCode<TdDataProvider> rc=providerMap.get(file);
    if (rc == null) {
      rc=readFromFile(file);
    }
    return rc;
  }
  return null;
}",0.7938461538461539
139513,"private void searchAllReports(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource instanceof IFolder) {
      continue;
    }
    if (resource.getType() == IResource.FOLDER) {
      searchAllReports(folder.getFolder(resource.getName()));
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.REP.equals(file.getFileExtension())) {
      findReport(file);
    }
  }
}","private void searchAllReports(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource instanceof IFolder) {
      continue;
    }
    if (resource.getType() == IResource.FOLDER) {
      searchAllReports(folder.getFolder(resource.getName()));
    }
    IFile file=(IFile)resource;
    if (checkFile(file)) {
      findReport(file);
    }
  }
}",0.9242053789731052
139514,"public TdReport findReport(IFile file){
  if (file != null && FactoriesUtil.REP.equals(file.getFileExtension())) {
    TdReport report=allRepMap.get(file);
    if (report != null) {
      return report;
    }
    return readFromFile(file);
  }
  return null;
}","public TdReport findReport(IFile file){
  if (checkFile(file)) {
    TdReport report=allRepMap.get(file);
    if (report == null) {
      report=readFromFile(file);
    }
    return report;
  }
  return null;
}",0.4425531914893617
139515,"public IndicatorDefinition findUDI(IFile file){
  IndicatorDefinition id=idsMap.get(file);
  if (id != null) {
    return id;
  }
  Resource fileResource=getFileResource(file);
  id=retireUDI(fileResource);
  if (id != null) {
    idsMap.put(file,id);
  }
  return id;
}","public IndicatorDefinition findUDI(IFile file){
  if (checkFile(file)) {
    IndicatorDefinition id=idsMap.get(file);
    if (id == null) {
      id=retireUDI(getFileResource(file));
    }
    idsMap.put(file,id);
    return id;
  }
  return null;
}",0.5857418111753372
139516,"private void searchAllUDIs(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllUDIs(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.UDI.equals(file.getFileExtension())) {
      findUDI(file);
    }
  }
}","private void searchAllUDIs(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllUDIs(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (checkFile(file)) {
      findUDI(file);
    }
  }
}",0.8704225352112676
139517,"/** 
 * {@inheritDoc}
 * @see CompareEditorInput#createOutlineContents(Composite,int)
 */
@Override public Control createOutlineContents(Composite parent,int direction){
  final Splitter splitter=new Splitter(parent,direction);
  final CompareViewerPane pane=new CompareViewerPane(splitter,SWT.NONE);
  structureMergeViewer=new ModelStructureMergeViewer(pane,getCompareConfiguration());
  structureMergeViewer.setLabelProvider(new CompareModelStructureLabelProvider());
  pane.setContent(structureMergeViewer.getTree());
  structureMergeViewer.setInput(inputSnapshot);
  return splitter;
}","/** 
 * {@inheritDoc}
 * @see CompareEditorInput#createOutlineContents(Composite,int)
 */
@Override public Control createOutlineContents(Composite parent,int direction){
  final Splitter splitter=new Splitter(parent,direction);
  final CompareViewerPane pane=new CompareViewerPane(splitter,SWT.NONE);
  structureMergeViewer=new CompareModelStructureMergeViewer(pane,getCompareConfiguration());
  structureMergeViewer.setLabelProvider(new CompareModelStructureLabelProvider());
  pane.setContent(structureMergeViewer.getTree());
  structureMergeViewer.setInput(inputSnapshot);
  return splitter;
}",0.9940928270042194
139518,"private void moveItems(IFolder oldSubFolder,IFolder newSubfolder,final String folderProperty) throws CoreException {
  if (!oldSubFolder.exists())   return;
  TdqPropertieManager.getInstance().addFolderProperties(newSubfolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
  for (  IResource oldResource : oldSubFolder.members()) {
    if (newSubfolder.getName().equals(oldResource.getName())) {
      continue;
    }
    if (oldResource instanceof IFolder) {
      IFolder oldFolder=(IFolder)oldResource;
      IFolder newFolder=DQStructureManager.getInstance().createNewFolder(newSubfolder,oldFolder.getName());
      TdqPropertieManager.getInstance().addFolderProperties(newFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
      moveItems(oldFolder,newFolder,folderProperty);
      oldFolder.delete(true,null);
    }
    if (oldResource instanceof IFile) {
      IFile file=(IFile)oldResource;
      final ModelElement eltFromLibraryFolder=getModelElement(file,folderProperty);
      final EList<Dependency> supplierDependency=eltFromLibraryFolder.getSupplierDependency();
      if (supplierDependency.isEmpty()) {
        oldResource.copy(newSubfolder.getFolder(oldResource.getName()).getFullPath(),true,null);
      }
 else {
        List<Analysis> analyses=new ArrayList<Analysis>();
        for (        Dependency dependency : supplierDependency) {
          URI newUri=URI.createPlatformResourceURI(newSubfolder.getFullPath().toOSString(),true);
          EMFUtil.changeUri(eltFromLibraryFolder.eResource(),newUri);
          final EList<ModelElement> clientAnalyses=dependency.getClient();
          for (          ModelElement modelElement : clientAnalyses) {
            Analysis analysis=DataqualitySwitchHelper.ANALYSIS_SWITCH.doSwitch(modelElement);
            if (analysis != null) {
              analyses.add(analysis);
            }
          }
        }
        for (        Analysis analysis : analyses) {
          final EList<Dependency> clientDependency=analysis.getClientDependency();
          List<Dependency> newClientDeps=new ArrayList<Dependency>();
          for (          Dependency dependency : clientDependency) {
            if (!dependency.eIsProxy()) {
              newClientDeps.add(dependency);
            }
          }
          clientDependency.clear();
          clientDependency.addAll(newClientDeps);
          AnaResourceFileHelper.getInstance().save(analysis);
        }
      }
      oldResource.delete(true,null);
    }
  }
}","private void moveItems(IFolder oldSubFolder,IFolder newSubfolder,final String folderProperty) throws CoreException {
  if (!oldSubFolder.exists())   return;
  TdqPropertieManager.getInstance().addFolderProperties(newSubfolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
  for (  IResource oldResource : oldSubFolder.members()) {
    if (newSubfolder.getName().equals(oldResource.getName())) {
      continue;
    }
    if (oldResource instanceof IFolder) {
      IFolder oldFolder=(IFolder)oldResource;
      IFolder newFolder=DQStructureManager.getInstance().createNewFolder(newSubfolder,oldFolder.getName());
      TdqPropertieManager.getInstance().addFolderProperties(newFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
      moveItems(oldFolder,newFolder,folderProperty);
      oldFolder.delete(true,null);
    }
    if (oldResource instanceof IFile) {
      IFile file=(IFile)oldResource;
      final ModelElement eltFromLibraryFolder=getModelElement(file,folderProperty);
      final EList<Dependency> supplierDependency=eltFromLibraryFolder.getSupplierDependency();
      if (supplierDependency.isEmpty()) {
        oldResource.copy(newSubfolder.getFolder(oldResource.getName()).getFullPath(),true,null);
      }
 else {
        List<Analysis> analyses=new ArrayList<Analysis>();
        for (        Dependency dependency : supplierDependency) {
          URI newUri=URI.createPlatformResourceURI(newSubfolder.getFullPath().toOSString(),true);
          EMFUtil.changeUri(eltFromLibraryFolder.eResource(),newUri);
          final EList<ModelElement> clientAnalyses=dependency.getClient();
          for (          ModelElement modelElement : clientAnalyses) {
            Analysis analysis=DataqualitySwitchHelper.ANALYSIS_SWITCH.doSwitch(modelElement);
            if (analysis != null) {
              analyses.add(analysis);
            }
          }
        }
        for (        Analysis analysis : analyses) {
          final EList<Dependency> clientDependency=analysis.getClientDependency();
          List<Dependency> newClientDeps=new ArrayList<Dependency>();
          for (          Dependency dependency : clientDependency) {
            if (!dependency.eIsProxy()) {
              newClientDeps.add(dependency);
            }
          }
          clientDependency.clear();
          clientDependency.addAll(newClientDeps);
          AnaResourceFileHelper.getInstance().save(analysis);
        }
      }
      remove(file);
    }
  }
}",0.9921733895243828
139519,"/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ContentViewer#handleDispose(org.eclipse.swt.events.DisposeEvent)
 */
@Override protected void handleDispose(DisposeEvent event){
  super.handleDispose(event);
  exportMenu.dispose();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.ContentViewer#handleDispose(org.eclipse.swt.events.DisposeEvent)
 */
@Override protected void handleDispose(DisposeEvent event){
  super.handleDispose(event);
  if (exportMenu != null)   exportMenu.dispose();
}",0.9486166007905138
139520,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
          colName=dbms().getPatternFinderFunction(colName,charactersMapping);
          if (colName == null) {
            colName=dbms().getPatternFinderDefaultFunction(colName);
          }
        }
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass) || UDIHelper.isMatching(indicator)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
          colName=dbms().getPatternFinderFunction(colName,charactersMapping);
          if (colName == null) {
            colName=dbms().getPatternFinderDefaultFunction(colName);
          }
        }
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9978995378983376
139521,"/** 
 * DOC xqliu Comment method ""removeDependency"".
 * @param analysis
 * @param unit
 */
protected void removeDependency(Analysis analysis,IndicatorUnit unit){
  List<ModelElement> reomveElements=new ArrayList<ModelElement>();
  Indicator indicator=unit.getIndicator();
  if (indicator instanceof UserDefIndicator) {
    reomveElements.add(indicator.getIndicatorDefinition());
    if (IndicatorCategoryHelper.isUserDefMatching(UDIHelper.getUDICategory(indicator))) {
      reomveElements.addAll(indicator.getParameters().getDataValidDomain().getPatterns());
    }
  }
 else   if (indicator instanceof PatternMatchingIndicator) {
    reomveElements.addAll(indicator.getParameters().getDataValidDomain().getPatterns());
  }
  DependenciesHandler.getInstance().removeDependenciesBetweenModels(analysis,reomveElements);
  for (  ModelElement me : reomveElements) {
    EMFUtil.saveSingleResource(me.eResource());
  }
}","/** 
 * DOC xqliu Comment method ""removeDependency"".
 * @param analysis
 * @param unit
 */
protected void removeDependency(Analysis analysis,IndicatorUnit unit){
  List<ModelElement> reomveElements=new ArrayList<ModelElement>();
  Indicator indicator=unit.getIndicator();
  if (indicator instanceof UserDefIndicator) {
    reomveElements.add(indicator.getIndicatorDefinition());
  }
 else   if (indicator instanceof PatternMatchingIndicator) {
    reomveElements.addAll(indicator.getParameters().getDataValidDomain().getPatterns());
  }
  DependenciesHandler.getInstance().removeDependenciesBetweenModels(analysis,reomveElements);
  for (  ModelElement me : reomveElements) {
    EMFUtil.saveSingleResource(me.eResource());
  }
}",0.886322188449848
139522,"public static IndicatorUnit[] createIndicatorUnit(IFile pfile,ColumnIndicator columnIndicator,Analysis analysis){
  List<IndicatorUnit> addIndicatorUnits=new ArrayList<IndicatorUnit>();
  IndicatorDefinition udid=UDIResourceFileHelper.getInstance().findUDI(pfile);
  IndicatorCategory ic=UDIHelper.getUDICategory(udid);
  for (  Indicator indicator : columnIndicator.getIndicators()) {
    if (udid.getName().equals(indicator.getName())) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"") + udid.getName());
      return null;
    }
  }
  Indicator udi=UDIFactory.createUserDefIndicator(udid);
  udi.setIndicatorDefinition(udid);
  IndicatorEnum indicatorType=IndicatorEnum.findIndicatorEnum(udi.eClass());
  if (DefinitionHandler.getInstance().getUserDefinedMatchIndicatorCategory().equals(ic)) {
    IFolder libProject=ResourceManager.getLibrariesFolder();
    CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(libProject);
    if (dialog.open() == Window.OK) {
      for (      Object obj : dialog.getResult()) {
        if (obj instanceof IFile) {
          IFile file=(IFile)obj;
          IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,columnIndicator,analysis,udid);
          if (addIndicatorUnit == null) {
            Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
            MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"") + pattern.getName());
          }
 else {
            addIndicatorUnits.add(addIndicatorUnit);
          }
        }
      }
    }
  }
 else {
    addIndicatorUnits.add(columnIndicator.addSpecialIndicator(indicatorType,udi));
  }
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,udid);
  return addIndicatorUnits.toArray(new IndicatorUnit[addIndicatorUnits.size()]);
}","public static IndicatorUnit[] createIndicatorUnit(IFile pfile,ColumnIndicator columnIndicator,Analysis analysis){
  List<IndicatorUnit> addIndicatorUnits=new ArrayList<IndicatorUnit>();
  IndicatorDefinition udid=UDIResourceFileHelper.getInstance().findUDI(pfile);
  IndicatorCategory ic=UDIHelper.getUDICategory(udid);
  for (  Indicator indicator : columnIndicator.getIndicators()) {
    if (udid.getName().equals(indicator.getName())) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"") + udid.getName());
      return null;
    }
  }
  Indicator udi=UDIFactory.createUserDefIndicator(udid);
  udi.setIndicatorDefinition(udid);
  IndicatorEnum indicatorType=IndicatorEnum.findIndicatorEnum(udi.eClass());
  addIndicatorUnits.add(columnIndicator.addSpecialIndicator(indicatorType,udi));
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,udid);
  return addIndicatorUnits.toArray(new IndicatorUnit[addIndicatorUnits.size()]);
}",0.5368606701940035
139523,"public static int getCurrentFolding(){
  return currentFolding == 0 ? FOLDING_1 : currentFolding;
}","public static int getCurrentFolding(){
  int sectionFoldState=ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_MASTER_PAGE_FOLDING);
  if (currentFolding == 0 && sectionFoldState != 0) {
    currentFolding=sectionFoldState;
  }
  if (currentFolding == 0 && sectionFoldState == 0) {
    currentFolding=FOLDING_1;
  }
  return currentFolding;
}",0.3194748358862144
139524,"public static boolean isCurrentAnalyzedElements(){
  return currentAnalyzedElements;
}","public static Boolean isCurrentAnalyzedElements(){
  return currentAnalyzedElements == null ? true : currentAnalyzedElements;
}",0.7981220657276995
139525,"public static void setCurrentAnalyzedElements(boolean currentAnalyzedElements){
  EditorPreferencePage.currentAnalyzedElements=currentAnalyzedElements;
}","public static void setCurrentAnalyzedElements(Boolean currentAnalyzedElements){
  EditorPreferencePage.currentAnalyzedElements=currentAnalyzedElements;
}",0.9934640522875816
139526,"public static boolean isCurrentIndicators(){
  return currentIndicators;
}","public static Boolean isCurrentIndicators(){
  return currentIndicators == null ? true : currentIndicators;
}",0.7978142076502732
139527,"@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Group group1=new Group(mainComposite,SWT.SHADOW_ETCHED_IN);
  group1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout gridLayout1=new GridLayout();
  group1.setLayout(gridLayout1);
  GridData gridData1=new GridData(GridData.FILL_HORIZONTAL);
  group1.setLayoutData(gridData1);
  Label label1=new Label(group1,SWT.NONE);
  label1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button1=new Button(group1,SWT.RADIO);
  button1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button1.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_1);
    }
  }
);
  button2=new Button(group1,SWT.RADIO);
  button2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button2.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_2);
    }
  }
);
  button3=new Button(group1,SWT.RADIO);
  button3.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button3.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_3);
    }
  }
);
  setCurrentFolding(ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_MASTER_PAGE_FOLDING));
switch (getCurrentFolding()) {
case FOLDING_1:
    button1.setSelection(true);
  break;
case FOLDING_2:
button2.setSelection(true);
break;
case FOLDING_3:
button3.setSelection(true);
break;
default :
button1.setSelection(true);
}
Group group2=new Group(mainComposite,SWT.SHADOW_ETCHED_IN);
group2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
GridLayout gridLayout2=new GridLayout();
group2.setLayout(gridLayout2);
GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
group2.setLayoutData(gridData2);
Label label2=new Label(group2,SWT.NONE);
label2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
button4=new Button(group2,SWT.CHECK);
button4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
setCurrentAnalyzedElements(ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_RESULT_PAGE_ANALYZED_ELEMENTS) == 0 ? true : false);
button4.setSelection(isCurrentAnalyzedElements());
button4.addSelectionListener(new SelectionListener(){
public void widgetDefaultSelected(SelectionEvent arg0){
}
public void widgetSelected(SelectionEvent arg0){
setCurrentAnalyzedElements(button4.getSelection());
}
}
);
button5=new Button(group2,SWT.CHECK);
button5.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
setCurrentIndicators(ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_RESULT_PAGE_INDICATORS) == 0 ? true : false);
button5.setSelection(isCurrentIndicators());
button5.addSelectionListener(new SelectionListener(){
public void widgetDefaultSelected(SelectionEvent arg0){
}
public void widgetSelected(SelectionEvent arg0){
setCurrentIndicators(button5.getSelection());
}
}
);
Composite pageSizeComp=new Composite(mainComposite,SWT.NONE);
pageSizeComp.setLayout(new GridLayout(2,false));
Label dfofLable=new Label(pageSizeComp,SWT.NONE);
dfofLable.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
pageSizeText=new Text(pageSizeComp,SWT.BORDER);
String pageSize=ResourcesPlugin.getPlugin().getPluginPreferences().getString(ANALYZED_ITEMS_PER_PAGE);
if (pageSize == null || pageSize.equals(""String_Node_Str"")) {
pageSize=DEFAULT_PAGE_SIZE;
}
pageSizeText.setText(pageSize);
pageSizeText.setLayoutData(new GridData());
((GridData)pageSizeText.getLayoutData()).widthHint=100;
return mainComposite;
}","@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Group group1=new Group(mainComposite,SWT.SHADOW_ETCHED_IN);
  group1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout gridLayout1=new GridLayout();
  group1.setLayout(gridLayout1);
  GridData gridData1=new GridData(GridData.FILL_HORIZONTAL);
  group1.setLayoutData(gridData1);
  Label label1=new Label(group1,SWT.NONE);
  label1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button1=new Button(group1,SWT.RADIO);
  button1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button1.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_1);
    }
  }
);
  button2=new Button(group1,SWT.RADIO);
  button2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button2.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_2);
    }
  }
);
  button3=new Button(group1,SWT.RADIO);
  button3.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button3.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_3);
    }
  }
);
switch (getCurrentFolding()) {
case FOLDING_1:
    button1.setSelection(true);
  break;
case FOLDING_2:
button2.setSelection(true);
break;
case FOLDING_3:
button3.setSelection(true);
break;
default :
button1.setSelection(true);
}
Group group2=new Group(mainComposite,SWT.SHADOW_ETCHED_IN);
group2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
GridLayout gridLayout2=new GridLayout();
group2.setLayout(gridLayout2);
GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
group2.setLayoutData(gridData2);
Label label2=new Label(group2,SWT.NONE);
label2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
button4=new Button(group2,SWT.CHECK);
button4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
setCurrentAnalyzedElements(ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_RESULT_PAGE_ANALYZED_ELEMENTS) == 0 ? true : false);
button4.setSelection(isCurrentAnalyzedElements());
button4.addSelectionListener(new SelectionListener(){
public void widgetDefaultSelected(SelectionEvent arg0){
}
public void widgetSelected(SelectionEvent arg0){
setCurrentAnalyzedElements(button4.getSelection());
}
}
);
button5=new Button(group2,SWT.CHECK);
button5.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
setCurrentIndicators(ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_RESULT_PAGE_INDICATORS) == 0 ? true : false);
button5.setSelection(isCurrentIndicators());
button5.addSelectionListener(new SelectionListener(){
public void widgetDefaultSelected(SelectionEvent arg0){
}
public void widgetSelected(SelectionEvent arg0){
setCurrentIndicators(button5.getSelection());
}
}
);
Composite pageSizeComp=new Composite(mainComposite,SWT.NONE);
pageSizeComp.setLayout(new GridLayout(2,false));
Label dfofLable=new Label(pageSizeComp,SWT.NONE);
dfofLable.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
pageSizeText=new Text(pageSizeComp,SWT.BORDER);
String pageSize=ResourcesPlugin.getPlugin().getPluginPreferences().getString(ANALYZED_ITEMS_PER_PAGE);
if (pageSize == null || pageSize.equals(""String_Node_Str"")) {
pageSize=DEFAULT_PAGE_SIZE;
}
pageSizeText.setText(pageSize);
pageSizeText.setLayoutData(new GridData());
((GridData)pageSizeText.getLayoutData()).widthHint=100;
return mainComposite;
}",0.9864389753892516
139528,"public static void setCurrentIndicators(boolean currentIndicators){
  EditorPreferencePage.currentIndicators=currentIndicators;
}","public static void setCurrentIndicators(Boolean currentIndicators){
  EditorPreferencePage.currentIndicators=currentIndicators;
}",0.992248062015504
139529,"public static String getString(String key){
  return null == MESSAGEMAP.get(key) ? key : DefaultMessagesImpl.getString(MESSAGEMAP.get(key));
}","public static String getString(String key){
  String message=key;
  String messageKey=MESSAGEMAP.get(key);
  if (null != messageKey && !DefaultMessagesImpl.getString(messageKey).startsWith(KEY_NOT_FOUND_PREFIX) && !DefaultMessagesImpl.getString(messageKey).endsWith(KEY_NOT_FOUND_SUFFIX)) {
    message=DefaultMessagesImpl.getString(messageKey);
  }
  return message;
}",0.3913894324853229
139530,"public Collection<Analysis> getAllAnalysis(IFolder analysesFolder){
  if (resourcesNumberChanged) {
    try {
      allAnalysisMap.clear();
      searchAllAnalysis(analysesFolder);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
    resourcesNumberChanged=false;
  }
  return allAnalysisMap.values();
}","public Collection<Analysis> getAllAnalysis(){
  IFolder analysisFolder=ResourceManager.getDataProfilingFolder().getFolder(""String_Node_Str"");
  return getAllAnalysis(analysisFolder);
}",0.4731610337972167
139531,"public Collection<WhereRule> getAllDQRules(IFolder patternFodler){
  return Collections.EMPTY_LIST;
}","public Collection<WhereRule> getAllDQRules(){
  IFolder rulesFolder=ResourceManager.getLibrariesFolder().getFolder(""String_Node_Str"");
  return getAllDQRules(rulesFolder);
}",0.5547445255474452
139532,"/** 
 * DOC zqin Comment method ""getAllAnalysis"".
 * @return
 */
public Collection<Pattern> getAllPatternes(IFolder patternFodler){
  if (resourcesNumberChanged) {
    try {
      searchAllPatternes(patternFodler);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
    resourcesNumberChanged=false;
  }
  return patternsMap.values();
}","public Collection<Pattern> getAllPatternes(){
  IFolder patternFolder=ResourceManager.getLibrariesFolder().getFolder(""String_Node_Str"");
  return getAllPatternes(patternFolder);
}",0.4196597353497164
139533,"public List<TdDataProvider> getAllDataProviders(IFolder folder){
  List<IFile> allPRVFiles=new ArrayList<IFile>();
  searchAllDataProvider(folder,allPRVFiles);
  List<TdDataProvider> allDataProviders=new ArrayList<TdDataProvider>();
  if (!allPRVFiles.isEmpty()) {
    for (    IFile file : allPRVFiles) {
      TypedReturnCode<TdDataProvider> rc=readFromFile(file);
      if (rc.isOk()) {
        TdDataProvider dataProvider=rc.getObject();
        allDataProviders.add(dataProvider);
      }
    }
  }
  return allDataProviders;
}","public List<TdDataProvider> getAllDataProviders(){
  return getAllDataProviders(ResourceManager.getMetadataFolder());
}",0.2488479262672811
139534,"public Collection<TdReport> getAllReports(IFolder reportsFolder){
  try {
    searchAllReports(reportsFolder);
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return allRepMap.values();
}","public Collection<TdReport> getAllReports(){
  IFolder reportFolder=ResourceManager.getDataProfilingFolder().getFolder(""String_Node_Str"");
  return getAllReports(reportFolder);
}",0.5159574468085106
139535,"public Collection<IndicatorDefinition> getAllUDIs(IFolder patternFodler){
  if (resourcesNumberChanged) {
    try {
      searchAllUDIs(patternFodler);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
    resourcesNumberChanged=false;
  }
  return idsMap.values();
}","public Collection<IndicatorDefinition> getAllUDIs(){
  IFolder udiFolder=ResourceManager.getLibrariesFolder().getFolder(""String_Node_Str"");
  return getAllUDIs(udiFolder);
}",0.4131868131868131
139536,"public ReturnCode save(ModelElement element){
  ReturnCode rc=new ReturnCode();
  addResourceContent(element);
  addDependencies(element);
  Property property=savePerperties(element);
  String propertyPath=property.eResource().getURI().toPlatformString(true);
  TaggedValueHelper.setTaggedValue(element,TaggedValueHelper.PROPERTY_FILE,propertyPath);
  rc.setOk(util.saveResource(element.eResource()));
  if (rc.isOk()) {
    rc.setMessage(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
    ProxyRepositoryManager.getInstance().save();
  }
 else {
    rc.setMessage(util.getLastErrorMessage());
  }
  return rc;
}","public ReturnCode save(ModelElement element){
  ReturnCode rc=new ReturnCode();
  addResourceContent(element);
  addDependencies(element);
  savePerperties(element);
  rc.setOk(util.saveResource(element.eResource()));
  if (rc.isOk()) {
    rc.setMessage(""String_Node_Str"" + element.getName() + ""String_Node_Str"");
    ProxyRepositoryManager.getInstance().save();
  }
 else {
    rc.setMessage(util.getLastErrorMessage());
  }
  return rc;
}",0.7954971857410882
139537,"public TypedReturnCode<IFile> create(ModelElement element,IFolder folder){
  TypedReturnCode<IFile> trc=new TypedReturnCode<IFile>();
  if (getFileExtension() == null) {
    trc.setMessage(""String_Node_Str"");
    log.error(""String_Node_Str"");
  }
 else {
    String fname=DqRepositoryViewService.createLogicalFileNmae(element,getFileExtension());
    IFile file=folder.getFile(fname);
    if (file.exists()) {
      trc.setReturnCode(""String_Node_Str"",false);
    }
 else {
      ReturnCode rc=save(element,file);
      trc.setReturnCode(rc.getMessage(),rc.isOk(),file);
    }
  }
  return trc;
}","public TypedReturnCode<IFile> create(ModelElement element,IFolder folder){
  TypedReturnCode<IFile> trc=new TypedReturnCode<IFile>();
  if (getFileExtension() == null) {
    trc.setMessage(""String_Node_Str"");
    log.error(""String_Node_Str"");
  }
 else {
    String fname=DqRepositoryViewService.createLogicalFileName(element,getFileExtension());
    IFile file=folder.getFile(fname);
    if (file.exists()) {
      trc.setReturnCode(""String_Node_Str"",false);
    }
 else {
      ReturnCode rc=save(element,file);
      trc.setReturnCode(rc.getMessage(),rc.isOk(),file);
    }
  }
  return trc;
}",0.9966442953020134
139538,"/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 * @return
 */
public Property savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=initProperty(element);
  TDQItem item=initItem(element,property);
  item.setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(property,uri);
  return property;
}","/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 */
public void savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=initProperty(element);
  TDQItem item=initItem(element,property);
  item.setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(property,uri);
  String propertyPath=property.eResource().getURI().toPlatformString(true);
  TaggedValueHelper.setTaggedValue(element,TaggedValueHelper.PROPERTY_FILE,propertyPath);
}",0.7995991983967936
139539,"public static IChartTypeStates getChartState(EIndicatorChartType type,List<IndicatorUnit> units){
switch (type) {
case SIMPLE_STATISTICS:
case UDI_COUNT:
    return new SimpleStatisticsState(units);
case TEXT_STATISTICS:
  return new TextStatisticsState(units);
case MODE_INDICATOR:
return new ModeStatisticsState(units);
case FREQUENCE_STATISTICS:
case UDI_FREQUENCY:
return new FrequencyStatisticsState(units);
case LOW_FREQUENCE_STATISTICS:
return new LowFrequencyStatisticsState(units);
case PATTERN_FREQUENCE_STATISTICS:
return new PatternFrequencyStatisticsState(units);
case PATTERN_LOW_FREQUENCE_STATISTICS:
return new PatternLowFrequencyStatisticsState(units);
case PATTERN_MATCHING:
case UDI_MATCHING:
return new REGEXPatternStatisticsState(units);
case SQL_PATTERN_MATCHING:
return new SQLPatternStatisticsState(units);
case SUMMARY_STATISTICS:
return new SummaryStatisticsState(units);
case SOUNDEX_FREQUENCY_TABLE:
return new SoundexFrequencyTableState(units);
case SOUNDEX_LOW_FREQUENCY_TABLE:
return new SoundexLowFrequencyTableState(units);
default :
return null;
}
}","public static IChartTypeStates getChartState(EIndicatorChartType type,List<IndicatorUnit> units){
switch (type) {
case SIMPLE_STATISTICS:
    return new SimpleStatisticsState(units);
case UDI_COUNT:
  return new UDISimpleStatisticsState(units);
case TEXT_STATISTICS:
return new TextStatisticsState(units);
case MODE_INDICATOR:
return new ModeStatisticsState(units);
case FREQUENCE_STATISTICS:
return new FrequencyStatisticsState(units);
case UDI_FREQUENCY:
return new UDIFrequencyStatisticsState(units);
case LOW_FREQUENCE_STATISTICS:
return new LowFrequencyStatisticsState(units);
case PATTERN_FREQUENCE_STATISTICS:
return new PatternFrequencyStatisticsState(units);
case PATTERN_LOW_FREQUENCE_STATISTICS:
return new PatternLowFrequencyStatisticsState(units);
case PATTERN_MATCHING:
return new REGEXPatternStatisticsState(units);
case UDI_MATCHING:
return new UDIMatchStatisticsState(units);
case SQL_PATTERN_MATCHING:
return new SQLPatternStatisticsState(units);
case SUMMARY_STATISTICS:
return new SummaryStatisticsState(units);
case SOUNDEX_FREQUENCY_TABLE:
return new SoundexFrequencyTableState(units);
case SOUNDEX_LOW_FREQUENCY_TABLE:
return new SoundexLowFrequencyTableState(units);
default :
return null;
}
}",0.9095652173913044
139540,"protected void handleDiffPackageElement(DiffElement difElement){
  AddModelElement addElement=addModelSwitch.doSwitch(difElement);
  if (addElement != null) {
    handleAddElement(addElement);
    return;
  }
  RemoveModelElement removeElement=removeModelSwitch.doSwitch(difElement);
  if (removeElement != null) {
    handleRemoveElement(removeElement);
  }
  if (difElement instanceof UpdateAttribute) {
    handleUpdateElement((UpdateAttribute)difElement);
    return;
  }
}","protected void handleDiffPackageElement(DiffElement difElement){
  AddModelElement addElement=addModelSwitch.doSwitch(difElement);
  if (addElement != null) {
    handleAddElement(addElement);
    return;
  }
  RemoveModelElement removeElement=removeModelSwitch.doSwitch(difElement);
  if (removeElement != null) {
    handleRemoveElement(removeElement);
  }
  RemoveReferenceValue refValue=removeReferenceValue.doSwitch(difElement);
  if (refValue != null) {
    handleRemoveRefElement(refValue);
  }
  if (difElement instanceof UpdateAttribute) {
    handleUpdateElement((UpdateAttribute)difElement);
    return;
  }
}",0.8696444849589791
139541,"private void initSwitchValue(){
  addModelSwitch=new DiffSwitch<AddModelElement>(){
    public AddModelElement caseAddModelElement(    AddModelElement object){
      return object;
    }
  }
;
  updateModelSwitch=new DiffSwitch<UpdateModelElement>(){
    public UpdateModelElement caseUpdateModelElement(    UpdateModelElement object){
      return object;
    }
  }
;
  removeModelSwitch=new DiffSwitch<RemoveModelElement>(){
    public RemoveModelElement caseRemoveModelElement(    RemoveModelElement object){
      return object;
    }
  }
;
  packageSwitch=new RelationalSwitch<Package>(){
    public Package casePackage(    Package object){
      return object;
    }
  }
;
}","private void initSwitchValue(){
  addModelSwitch=new DiffSwitch<AddModelElement>(){
    public AddModelElement caseAddModelElement(    AddModelElement object){
      return object;
    }
  }
;
  updateModelSwitch=new DiffSwitch<UpdateModelElement>(){
    public UpdateModelElement caseUpdateModelElement(    UpdateModelElement object){
      return object;
    }
  }
;
  removeModelSwitch=new DiffSwitch<RemoveModelElement>(){
    public RemoveModelElement caseRemoveModelElement(    RemoveModelElement object){
      return object;
    }
  }
;
  removeReferenceValue=new DiffSwitch<RemoveReferenceValue>(){
    public RemoveReferenceValue caseRemoveReferenceValue(    RemoveReferenceValue object){
      return object;
    }
  }
;
  packageSwitch=new RelationalSwitch<Package>(){
    public Package casePackage(    Package object){
      return object;
    }
  }
;
}",0.8791208791208791
139542,"public void pack(){
  composite.layout();
  composite.pack();
  pageNavComp.layout();
}","public void pack(){
  composite.layout();
  pageNavComp.layout();
}",0.8701298701298701
139543,"public TypedReturnCode<IFile> create(ModelElement element,IFolder folder){
  TypedReturnCode<IFile> trc=new TypedReturnCode<IFile>();
  if (getFileExtension() == null) {
    trc.setMessage(""String_Node_Str"");
    log.error(""String_Node_Str"");
  }
 else {
    String fname=DqRepositoryViewService.createLogicalFileName(element,getFileExtension());
    IFile file=folder.getFile(fname);
    if (file.exists()) {
      trc.setReturnCode(""String_Node_Str"",false);
    }
 else {
      ReturnCode rc=save(element,file);
      trc.setReturnCode(rc.getMessage(),rc.isOk(),file);
    }
  }
  return trc;
}","public TypedReturnCode<IFile> create(ModelElement element,IFolder folder){
  TypedReturnCode<IFile> trc=new TypedReturnCode<IFile>();
  if (getFileExtension() == null) {
    trc.setMessage(""String_Node_Str"");
    log.error(""String_Node_Str"");
  }
 else {
    String fname=DqRepositoryViewService.createLogicalFileName(element,getFileExtension());
    IFile file=folder.getFile(fname);
    if (file.exists()) {
      String oriName=element.getName();
      element.setName(element.getName() + DateFormatUtils.format(new Date(),""String_Node_Str""));
      fname=DqRepositoryViewService.createLogicalFileName(element,getFileExtension());
      file=folder.getFile(fname);
      element.setName(oriName);
      ReturnCode rc=save(element,file);
      trc.setReturnCode(rc.getMessage(),rc.isOk(),file);
    }
 else {
      ReturnCode rc=save(element,file);
      trc.setReturnCode(rc.getMessage(),rc.isOk(),file);
    }
  }
  return trc;
}",0.7285807717462394
139544,"@Override public boolean checkFieldsValue(){
  if (nameText.getText().trim() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (nameText.getText().contains(""String_Node_Str"")) {
    updateStatus(IStatus.ERROR,MSG_INVALID);
    return false;
  }
  if (!checkDuplicateModelName()) {
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return super.checkFieldsValue();
}","@Override public boolean checkFieldsValue(){
  if (nameText.getText().trim() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (nameText.getText().contains(""String_Node_Str"")) {
    updateStatus(IStatus.ERROR,MSG_INVALID);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return super.checkFieldsValue();
}",0.9254498714652956
139545,"@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    List<Analysis> analyses=ReportHelper.getAnalyses(findReport);
    Map<String,Analysis> resourcesMap=new HashMap<String,Analysis>();
    for (    Analysis ana : analyses) {
      String uriString=ana.eResource().getURI().toString();
      resourcesMap.put(uriString,ana);
    }
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          String uriKey=findAnalysis.eResource().getURI().toString();
          if (resourcesMap.containsKey(uriKey)) {
            findReport.removeAnalysis(resourcesMap.get(uriKey));
          }
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if (resources != null && (target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      if (folder.equals(res.getParent())) {
        continue;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      Resource resource=EMFSharedResources.getInstance().getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFSharedResources.getInstance().saveToUri(resource,desUri);
      }
      try {
        fileRes.delete(true,null);
        ModelElementFileFactory.getResourceFileMap(fileRes).setResourcesNumberChanged(true);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
    }
  }
  ProxyRepositoryManager.getInstance().save();
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}","@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    List<Analysis> analyses=ReportHelper.getAnalyses(findReport);
    Map<String,Analysis> resourcesMap=new HashMap<String,Analysis>();
    for (    Analysis ana : analyses) {
      String uriString=ana.eResource().getURI().toString();
      resourcesMap.put(uriString,ana);
    }
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          String uriKey=findAnalysis.eResource().getURI().toString();
          if (resourcesMap.containsKey(uriKey)) {
            findReport.removeAnalysis(resourcesMap.get(uriKey));
          }
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if (resources != null && (target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      if (folder.equals(res.getParent())) {
        continue;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      Resource resource=EMFSharedResources.getInstance().getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFSharedResources.getInstance().saveToUri(resource,desUri);
      }
      try {
        closeEditorIfOpened(fileRes);
        fileRes.delete(true,null);
        ModelElementFileFactory.getResourceFileMap(fileRes).setResourcesNumberChanged(true);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
    }
  }
  ProxyRepositoryManager.getInstance().save();
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}",0.9945760776477304
139546,"/** 
 * Creates a new project resource with the special name.MOD mzhao 2009-03-18 make this method as public.For  {@link org.talend.dataprofiler.core.migration.impl.TDCPFolderMergeTask} use.
 * @return the created project resource, or <code>null</code> if the project was not created
 * @throws InterruptedException
 * @throws InvocationTargetException
 * @throws CoreException
 */
public IProject createNewProject(String projectName) throws InvocationTargetException, InterruptedException, CoreException {
  final IProject newProjectHandle=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProjectDescription description=workspace.newProjectDescription(newProjectHandle.getName());
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      CreateProjectOperation op=new CreateProjectOperation(description,DefaultMessagesImpl.getString(""String_Node_Str""));
      try {
        PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op,monitor,WorkspaceUndoUtil.getUIInfoAdapter(null));
      }
 catch (      ExecutionException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  if (!newProjectHandle.exists()) {
    ProgressUI.popProgressDialog(op);
  }
  TdqPropertieManager.getInstance().addFolderProperties(newProjectHandle,PROJECT_TDQ_KEY,PROJECT_TDQ_PROPERTY);
  return newProjectHandle;
}","/** 
 * Creates a new project resource with the special name.MOD mzhao 2009-03-18 make this method as public.For  {@link org.talend.dataprofiler.core.migration.impl.TDCPFolderMergeTask} use.
 * @return the created project resource, or <code>null</code> if the project was not created
 * @throws InterruptedException
 * @throws InvocationTargetException
 * @throws CoreException
 */
public IProject createNewProject(String projectName) throws InvocationTargetException, InterruptedException, CoreException {
  final IProject newProjectHandle=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProjectDescription description=workspace.newProjectDescription(newProjectHandle.getName());
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      CreateProjectOperation createProjOp=new CreateProjectOperation(description,DefaultMessagesImpl.getString(""String_Node_Str""));
      try {
        PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(createProjOp,monitor,WorkspaceUndoUtil.getUIInfoAdapter(null));
      }
 catch (      ExecutionException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  if (!newProjectHandle.exists()) {
    ProgressUI.popProgressDialog(op);
  }
  TdqPropertieManager.getInstance().addFolderProperties(newProjectHandle,PROJECT_TDQ_KEY,PROJECT_TDQ_PROPERTY);
  return newProjectHandle;
}",0.9921052631578948
139547,"public void run(IProgressMonitor monitor) throws InvocationTargetException {
  CreateProjectOperation op=new CreateProjectOperation(description,DefaultMessagesImpl.getString(""String_Node_Str""));
  try {
    PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op,monitor,WorkspaceUndoUtil.getUIInfoAdapter(null));
  }
 catch (  ExecutionException e) {
    throw new InvocationTargetException(e);
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException {
  CreateProjectOperation createProjOp=new CreateProjectOperation(description,DefaultMessagesImpl.getString(""String_Node_Str""));
  try {
    PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(createProjOp,monitor,WorkspaceUndoUtil.getUIInfoAdapter(null));
  }
 catch (  ExecutionException e) {
    throw new InvocationTargetException(e);
  }
}",0.9724770642201837
139548,"/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") public void copyFilesToFolder(Plugin plugin,String srcPath,boolean recurse,IFolder desFolder,String suffix) throws IOException, CoreException {
  if (plugin == null) {
    return;
  }
  Enumeration paths=null;
  paths=plugin.getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=plugin.getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
    }
 catch (    IOException e) {
      log.error(e,e);
    }
    if (file.isDirectory() && recurse) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      IFolder folder=desFolder.getFolder(file.getName());
      if (!folder.exists()) {
        folder.create(true,true,null);
      }
      TdqPropertieManager.getInstance().addFolderProperties(folder,FOLDER_CLASSIFY_KEY,TdqPropertieManager.getInstance().getFolderPropertyValue(desFolder,FOLDER_CLASSIFY_KEY).toString());
      copyFilesToFolder(plugin,currentPath,recurse,folder,suffix);
      continue;
    }
    if (suffix != null && !file.getName().endsWith(suffix)) {
      continue;
    }
    String fileName=new Path(fileURL.getPath()).lastSegment();
    InputStream openStream=null;
    openStream=fileURL.openStream();
    copyFileToFolder(openStream,fileName,desFolder);
  }
}","/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") public void copyFilesToFolder(Plugin plugin,String srcPath,boolean recurse,IFolder desFolder,String suffix) throws IOException, CoreException {
  if (plugin == null) {
    return;
  }
  Enumeration paths=null;
  paths=plugin.getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=plugin.getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
      if (file.isDirectory() && recurse) {
        if (file.getName().startsWith(""String_Node_Str"")) {
          continue;
        }
        IFolder folder=desFolder.getFolder(file.getName());
        if (!folder.exists()) {
          folder.create(true,true,null);
        }
        TdqPropertieManager.getInstance().addFolderProperties(folder,FOLDER_CLASSIFY_KEY,TdqPropertieManager.getInstance().getFolderPropertyValue(desFolder,FOLDER_CLASSIFY_KEY).toString());
        copyFilesToFolder(plugin,currentPath,recurse,folder,suffix);
        continue;
      }
      if (suffix != null && !file.getName().endsWith(suffix)) {
        continue;
      }
      String fileName=new Path(fileURL.getPath()).lastSegment();
      InputStream openStream=null;
      openStream=fileURL.openStream();
      copyFileToFolder(openStream,fileName,desFolder);
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}",0.9470134874759152
139549,"public static void copyConfigFiles(IProject project,Plugin plugin){
  Enumeration paths=null;
  paths=plugin.getBundle().getEntryPaths(CONFIG_PATH);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=plugin.getBundle().getEntry(currentPath);
    URL fileURL=null;
    File srcFile=null;
    File destFile=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      srcFile=new File(fileURL.getFile());
      if (!srcFile.getName().endsWith(FactoriesUtil.XML)) {
        continue;
      }
      destFile=new File(project.getLocation().toOSString() + File.separator + srcFile.getName());
      FileUtils.copyFile(srcFile,destFile);
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}","public static void copyConfigFiles(IProject project,Plugin plugin){
  Enumeration paths=plugin.getBundle().getEntryPaths(CONFIG_PATH);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=plugin.getBundle().getEntry(currentPath);
    URL fileURL=null;
    File srcFile=null;
    File destFile=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      srcFile=new File(fileURL.getFile());
      if (!srcFile.getName().endsWith(FactoriesUtil.XML)) {
        continue;
      }
      destFile=new File(project.getLocation().toOSString() + File.separator + srcFile.getName());
      FileUtils.copyFile(srcFile,destFile);
    }
 catch (    IOException e) {
      log.error(e,e);
    }
  }
}",0.991812865497076
139550,"/** 
 * DOC mzhao Create new folder by project or folder.
 * @param parentFolder
 * @param folderName
 * @return
 * @throws CoreException
 */
public IFolder createNewFoler(IContainer parent,String folderName) throws CoreException {
  IFolder desFolder=null;
  if (parent instanceof IProject) {
    desFolder=((IProject)parent).getFolder(folderName);
  }
 else   if (parent instanceof IFolder) {
    desFolder=((IFolder)parent).getFolder(folderName);
  }
  if (!desFolder.exists()) {
    desFolder.create(false,true,null);
  }
  TdqPropertieManager.getInstance().addFolderProperties(desFolder,FOLDER_READONLY_KEY,FOLDER_READONLY_PROPERTY);
  return desFolder;
}","/** 
 * DOC mzhao Create new folder by project or folder.
 * @param parentFolder
 * @param folderName
 * @return
 * @throws CoreException
 */
public IFolder createNewFoler(IContainer parent,String folderName) throws CoreException {
}",0.5218365061590146
139551,"/** 
 * DOC bZhou Comment method ""getPropertiesURL"".
 * @param propFileStr
 * @return
 * @throws MalformedURLException
 */
private URL getPropertiesURL(String propFileStr) throws MalformedURLException {
  Bundle bundle=Platform.getBundle(""String_Node_Str"");
  URL[] findEntries=FileLocator.findEntries(bundle,new Path(""String_Node_Str"" + propFileStr));
  return findEntries[0];
}","private URL getPropertiesURL(String propFileStr) throws MalformedURLException {
  IProject rootProject=ResourceManager.getRootProject();
  IFile file=rootProject.getFile(propFileStr);
  return file.getLocationURI().toURL();
}",0.1887417218543046
139552,"private void searchAllWhereRules(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllWhereRules(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    findWhereRule(file);
  }
}","private void searchAllWhereRules(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllWhereRules(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
      findWhereRule(file);
    }
  }
}",0.8991596638655462
139553,"/** 
 * DOC zqin Comment method ""searchAllPatternes"".
 * @param folder
 * @throws CoreException
 */
private void searchAllPatternes(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllPatternes(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    findPattern(file);
  }
}","/** 
 * DOC zqin Comment method ""searchAllPatternes"".
 * @param folder
 * @throws CoreException
 */
private void searchAllPatternes(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllPatternes(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
      findPattern(file);
    }
  }
}",0.9106945975744212
139554,"private void searchAllReports(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource instanceof IFolder) {
      continue;
    }
    if (resource.getType() == IResource.FOLDER) {
      searchAllReports(folder.getFolder(resource.getName()));
    }
    IFile file=(IFile)resource;
    findReport(file);
  }
}","private void searchAllReports(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource instanceof IFolder) {
      continue;
    }
    if (resource.getType() == IResource.FOLDER) {
      searchAllReports(folder.getFolder(resource.getName()));
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.REP.equals(file.getFileExtension())) {
      findReport(file);
    }
  }
}",0.9118773946360154
139555,"private void searchAllUDIs(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllUDIs(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    findUDI(file);
  }
}","private void searchAllUDIs(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllUDIs(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.UDI.equals(file.getFileExtension())) {
      findUDI(file);
    }
  }
}",0.8977777777777778
139556,"private URL getPropertiesURL(String propFileStr) throws MalformedURLException {
  IProject rootProject=ResourceManager.getRootProject();
  IFile file=rootProject.getFile(propFileStr);
  return file.getLocationURI().toURL();
}","/** 
 * DOC bZhou Comment method ""getPropertiesURL"".
 * @param propFileStr
 * @return
 * @throws MalformedURLException
 */
private URL getPropertiesURL(String propFileStr) throws MalformedURLException {
  Bundle bundle=Platform.getBundle(""String_Node_Str"");
  URL[] findEntries=FileLocator.findEntries(bundle,new Path(""String_Node_Str"" + propFileStr));
  return findEntries[0];
}",0.3245033112582781
139557,"/** 
 * DOC qzhang Comment method ""getPatternFile"".
 * @param pattern
 */
public IFile getPatternFile(Pattern pattern,IFolder[] folders){
  IFile file=null;
  if (resourcesNumberChanged) {
    try {
      for (int i=0; i < folders.length; i++) {
        searchAllPatternes(folders[i]);
      }
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
    resourcesNumberChanged=false;
  }
  Set<IFile> keySet=patternsMap.keySet();
  for (  IFile file2 : keySet) {
    Pattern pattern2=patternsMap.get(file2);
    RegularExpression e2=(RegularExpression)pattern.getComponents().get(0);
    RegularExpression e=(RegularExpression)pattern2.getComponents().get(0);
    String et=e.getExpressionType();
    String et2=e2.getExpressionType();
    if (pattern2.getName().equals(pattern.getName())) {
      boolean b=et == null && et2 == null;
      b=b || (et != null && et.equals(et2));
      if (b) {
        file=file2;
      }
    }
  }
  return file;
}","/** 
 * DOC qzhang Comment method ""getPatternFile"".
 * @param pattern
 */
public IFile getPatternFile(Pattern pattern,IFolder[] folders){
  IFile file=null;
  if (resourcesNumberChanged) {
    try {
      for (int i=0; i < folders.length; i++) {
        searchAllPatternes(folders[i]);
      }
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
    resourcesNumberChanged=false;
  }
  Set<IFile> keySet=patternsMap.keySet();
  for (  IFile file2 : keySet) {
    Pattern pattern2=patternsMap.get(file2);
    EList<PatternComponent> components=pattern.getComponents();
    EList<PatternComponent> components2=pattern2.getComponents();
    if (!components.isEmpty() && !components2.isEmpty()) {
      RegularExpression e2=(RegularExpression)components.get(0);
      RegularExpression e=(RegularExpression)components2.get(0);
      String et=e.getExpressionType();
      String et2=e2.getExpressionType();
      if (pattern2.getName().equals(pattern.getName())) {
        boolean b=et == null && et2 == null;
        b=b || (et != null && et.equals(et2));
        if (b) {
          file=file2;
        }
      }
    }
  }
  return file;
}",0.8410061699098244
139558,"/** 
 * DOC qzhang Comment method ""isPatternValid"".
 * @param pattern
 * @return
 */
public static boolean isPatternValid(Pattern pattern){
  boolean valid=true;
  EList<PatternComponent> components=pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String body=regularExpress.getExpression().getBody();
    valid=((body != null) && body.matches(""String_Node_Str""));
    if (!valid) {
      break;
    }
  }
  return valid;
}","/** 
 * DOC qzhang Comment method ""isPatternValid"".
 * @param pattern
 * @return
 */
public static boolean isPatternValid(Pattern pattern){
  boolean valid=false;
  EList<PatternComponent> components=pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String body=regularExpress.getExpression().getBody();
    valid=((body != null) && body.matches(""String_Node_Str""));
    if (!valid) {
      break;
    }
  }
  return valid;
}",0.9934272300469484
139559,"/** 
 * DOC xqliu Comment method ""createTable"".
 * @param composite
 */
private void createTable(Composite composite){
  final TableViewer tableViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
  Table resultTable=tableViewer.getTable();
  resultTable.setLinesVisible(true);
  resultTable.setHeaderVisible(true);
  TableStructureEntity tableStructure=getTableStructure();
  String[] fieldNames=tableStructure.getFieldNames();
  Integer[] fieldWidths=tableStructure.getFieldWidths();
  for (int i=0; i < fieldNames.length; ++i) {
    TableColumn columnHeader=new TableColumn(resultTable,SWT.LEFT);
    columnHeader.setText(fieldNames[i]);
    columnHeader.setWidth(fieldWidths[i]);
  }
  CustomerDefaultCategoryDataset dataset=initCustomerDataset();
  ChartDataEntity[] dataEntities=dataset.getDataEntities();
  int i=0;
  for (  ChartDataEntity dataEntity : dataEntities) {
    TableItem item=new TableItem(resultTable,SWT.NULL);
    Number match=dataset.getValue(0,i);
    Number notMatch=dataset.getValue(1,i);
    Number row=match.intValue() + notMatch.intValue();
    item.setText(0,dataset.getColumnKey(i).toString());
    item.setText(1,String.valueOf(match.intValue()));
    item.setText(2,StringFormatUtil.format(String.valueOf(match.doubleValue() / row.doubleValue()),StringFormatUtil.PERCENT).toString());
    item.setText(3,String.valueOf(row));
    item.setData(dataEntity);
    i++;
  }
  GridData gd=new GridData();
  gd.heightHint=180;
  gd.widthHint=450;
  resultTable.setLayoutData(gd);
  ChartTableFactory.addMenuAndTip(tableViewer,new ColumnDependencyExplorer(),this.masterPage.analysis);
}","/** 
 * DOC xqliu Comment method ""createTable"".
 * @param composite
 */
private void createTable(Composite composite){
  final TableViewer tableViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
  Table resultTable=tableViewer.getTable();
  resultTable.setLinesVisible(true);
  resultTable.setHeaderVisible(true);
  TableStructureEntity tableStructure=getTableStructure();
  String[] fieldNames=tableStructure.getFieldNames();
  Integer[] fieldWidths=tableStructure.getFieldWidths();
  for (int i=0; i < fieldNames.length; ++i) {
    TableColumn columnHeader=new TableColumn(resultTable,SWT.LEFT);
    columnHeader.setText(fieldNames[i]);
    columnHeader.setWidth(fieldWidths[i]);
  }
  CustomerDefaultCategoryDataset dataset=initCustomerDataset();
  ChartDataEntity[] dataEntities=dataset.getDataEntities();
  int i=0;
  if (dataEntities != null) {
    if (dataset.getColumnCount() < dataEntities.length) {
      MessageDialog.openError(this.getEditor().getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    }
 else {
      for (      ChartDataEntity dataEntity : dataEntities) {
        TableItem item=new TableItem(resultTable,SWT.NULL);
        Number match=dataset.getValue(0,i);
        Number notMatch=dataset.getValue(1,i);
        Number row=match.intValue() + notMatch.intValue();
        item.setText(0,dataset.getColumnKey(i).toString());
        item.setText(1,String.valueOf(match.intValue()));
        item.setText(2,StringFormatUtil.format(String.valueOf(match.doubleValue() / row.doubleValue()),StringFormatUtil.PERCENT).toString());
        item.setText(3,String.valueOf(row));
        item.setData(dataEntity);
        i++;
      }
    }
  }
  GridData gd=new GridData();
  gd.heightHint=180;
  gd.widthHint=450;
  resultTable.setLayoutData(gd);
  ChartTableFactory.addMenuAndTip(tableViewer,new ColumnDependencyExplorer(),this.masterPage.analysis);
}",0.917823431426985
139560,"@Override public boolean performFinish(){
  IPath absolutePath=new Path(parameter.getFolderProvider().getFolder().getAbsolutePath());
  String portableString=absolutePath.append(parameter.getFileName()).addFileExtension(""String_Node_Str"").toPortableString();
  sqlFile=new File(portableString);
  try {
    sqlFile.createNewFile();
    return true;
  }
 catch (  IOException e) {
    log.error(e,e);
  }
  return false;
}","@Override public boolean performFinish(){
  IPath absolutePath=new Path(parameter.getFolderProvider().getFolder().getAbsolutePath());
  String portableString=absolutePath.append(parameter.getFileName()).addFileExtension(""String_Node_Str"").toPortableString();
  sqlFile=new File(portableString);
  try {
    sqlFile.createNewFile();
    ProxyRepositoryManager.getInstance().save();
    return true;
  }
 catch (  IOException e) {
    log.error(e,e);
  }
  return false;
}",0.9450056116722784
139561,"/** 
 * DOC xqliu Comment method ""createAndStoreUDI"".
 * @param parameters
 * @param selectionFolder
 */
private static void createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition id=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category);
  for (  String key : parameters.regex.keySet()) {
    Expression expression=BooleanExpressionHelper.createExpression(key,parameters.regex.get(key));
    id.getSqlGenericExpression().add(expression);
  }
  String fname=DqRepositoryViewService.createFilename(parameters.name,FactoriesUtil.UDI);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      TdqPropertieManager.getInstance().addFolderProperties(folder,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.UDI_FOLDER_PROPERTY);
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  EMFSharedResources.getInstance().addEObjectToResourceSet(pfile.getFullPath().toString(),id);
  EMFSharedResources.getInstance().saveLastResource();
}","/** 
 * DOC xqliu Comment method ""createAndStoreUDI"".
 * @param parameters
 * @param selectionFolder
 */
private static void createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition id=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category);
  for (  String key : parameters.regex.keySet()) {
    Expression expression=BooleanExpressionHelper.createExpression(key,parameters.regex.get(key));
    id.getSqlGenericExpression().add(expression);
  }
  boolean validStatus=UDIHelper.isUDIValid(id);
  TaggedValueHelper.setValidStatus(validStatus,id);
  String fname=DqRepositoryViewService.createFilename(parameters.name,FactoriesUtil.UDI);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      TdqPropertieManager.getInstance().addFolderProperties(folder,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.UDI_FOLDER_PROPERTY);
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  EMFSharedResources.getInstance().addEObjectToResourceSet(pfile.getFullPath().toString(),id);
  EMFSharedResources.getInstance().saveLastResource();
}",0.9644128113879004
139562,"protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.PATTERN.equalsIgnoreCase(file.getFileExtension())) {
      Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      if (findPattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
        if (!validStatus) {
          ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
 else     if (FactoriesUtil.REP.equalsIgnoreCase(file.getFileExtension())) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
 else     if (FactoriesUtil.UDI.equalsIgnoreCase(file.getFileExtension())) {
      IndicatorDefinition findUDI=UDIResourceFileHelper.getInstance().findUDI(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.IND_DEFINITION);
      if (findUDI != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findUDI) | UDIHelper.verifyExpression(findUDI);
        if (!validStatus) {
          ImageDescriptor warnImg=ImageLib.getImageDescriptor(ImageLib.WARN_OVR);
          PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
  }
  if (element instanceof IFolder) {
    String folderName=((IFolder)element).getName();
    if (ResourceManager.METADATA_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
 else     if (ResourceManager.LIBRARIES_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.LIBRARIES);
    }
 else     if (ResourceManager.DATA_PROFILING_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.DATA_PROFILING);
    }
 else     if (org.talend.dataquality.PluginConstant.DB_CONNECTIONS.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
 else     if (DQStructureManager.EXCHANGE.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.EXCHANGE);
    }
  }
  return super.decorateImage(input,element);
}","protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.PATTERN.equalsIgnoreCase(file.getFileExtension())) {
      Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      if (findPattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
        if (!validStatus) {
          ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
 else     if (FactoriesUtil.REP.equalsIgnoreCase(file.getFileExtension())) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
 else     if (FactoriesUtil.UDI.equalsIgnoreCase(file.getFileExtension())) {
      IndicatorDefinition findUDI=UDIResourceFileHelper.getInstance().findUDI(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.IND_DEFINITION);
      if (findUDI != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findUDI) | UDIHelper.isUDIValid(findUDI);
        if (!validStatus) {
          ImageDescriptor warnImg=ImageLib.getImageDescriptor(ImageLib.WARN_OVR);
          PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
  }
  if (element instanceof IFolder) {
    String folderName=((IFolder)element).getName();
    if (ResourceManager.METADATA_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
 else     if (ResourceManager.LIBRARIES_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.LIBRARIES);
    }
 else     if (ResourceManager.DATA_PROFILING_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.DATA_PROFILING);
    }
 else     if (org.talend.dataquality.PluginConstant.DB_CONNECTIONS.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
 else     if (DQStructureManager.EXCHANGE.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.EXCHANGE);
    }
  }
  return super.decorateImage(input,element);
}",0.9951887490747594
139563,"protected IFile getPropertyFile(IEditorPart editor){
  if (isCommonFormEditor(editor)) {
    IFileEditorInput fileInput=(IFileEditorInput)editor.getEditorInput();
    URI uri=URI.createPlatformResourceURI(fileInput.getFile().getFullPath().toString(),false);
    Resource resource=EMFSharedResources.getInstance().getResource(uri,true);
    if (resource != null) {
      ModelElement modelElement=null;
      EList<EObject> modelElements=resource.getContents();
      for (      EObject obj : modelElements) {
        if (obj instanceof ModelElement) {
          modelElement=(ModelElement)obj;
          TaggedValue taggedvalue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.PROPERTY_FILE,modelElement.getTaggedValue());
          if (taggedvalue != null) {
            String propertyPath=taggedvalue.getValue();
            propertyFile=(IFile)ResourcesPlugin.getWorkspace().getRoot().findMember(propertyPath);
            break;
          }
        }
      }
    }
  }
  return propertyFile;
}","protected IFile getPropertyFile(IEditorPart editor){
  if (isCommonFormEditor(editor)) {
    if (!(editor.getEditorInput() instanceof IFileEditorInput)) {
      return null;
    }
    IFileEditorInput fileInput=(IFileEditorInput)editor.getEditorInput();
    URI uri=URI.createPlatformResourceURI(fileInput.getFile().getFullPath().toString(),false);
    Resource resource=EMFSharedResources.getInstance().getResource(uri,true);
    if (resource != null) {
      ModelElement modelElement=null;
      EList<EObject> modelElements=resource.getContents();
      for (      EObject obj : modelElements) {
        if (obj instanceof ModelElement) {
          modelElement=(ModelElement)obj;
          TaggedValue taggedvalue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.PROPERTY_FILE,modelElement.getTaggedValue());
          if (taggedvalue != null) {
            String propertyPath=taggedvalue.getValue();
            propertyFile=(IFile)ResourcesPlugin.getWorkspace().getRoot().findMember(propertyPath);
            break;
          }
        }
      }
    }
  }
  return propertyFile;
}",0.9564801530368244
139564,"/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 * @return
 */
public Property savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=initProperty(element);
  TDQItem item=initItem(element,property);
  item.setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(item,uri);
  serialize(property,uri);
  return property;
}","/** 
 * DOC bZhou Comment method ""savePerperties"".
 * @param element
 * @return
 */
public Property savePerperties(ModelElement element){
  Resource resource=element.eResource();
  String fileName=resource.getURI().lastSegment();
  Property property=initProperty(element);
  TDQItem item=initItem(element,property);
  item.setFilename(fileName);
  URI uri=element.eResource().getURI();
  serialize(property,uri);
  return property;
}",0.9561304836895388
139565,"public boolean createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject rootProject=ResourceManager.getRootProject();
    if (!rootProject.exists()) {
      rootProject=createNewProject(ResourceManager.getRootProjectName());
    }
    copyConfigFiles(rootProject,plugin);
    IFolder dataProfilingFolder=this.createNewFoler(rootProject,ResourceManager.DATA_PROFILING_FOLDER_NAME);
    IFolder createNewFoler=this.createNewFoler(dataProfilingFolder,ANALYSIS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,ANALYSIS_FOLDER_PROPERTY);
    createNewFoler=this.createNewFoler(dataProfilingFolder,REPORTS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,REPORT_FOLDER_PROPERTY);
    IFolder librariesFoler=this.createNewFoler(rootProject,ResourceManager.LIBRARIES_FOLDER_NAME);
    IFolder patternFoler=this.createNewFoler(librariesFoler,PATTERNS);
    createNewFoler=this.createNewFoler(patternFoler,REGEX);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,PATTERNS_FOLDER_PROPERTY);
    WorkspaceVersionHelper.storeVersion();
    this.copyFilesToFolder(plugin,PATTERN_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(patternFoler,SQL);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,SQLPATTERNS_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,SQL_LIKE_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,SOURCE_FILES);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,SOURCEFILES_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,DEMO_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,RULES);
    createNewFoler=this.createNewFoler(createNewFoler,SQL);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,DQRULES_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,DQ_RULES_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,EXCHANGE);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,NO_SUBFOLDER_KEY,NO_SUBFOLDER_PROPERTY);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,EXCHANGE_FOLDER_PROPERTY);
    createNewFoler=this.createNewFoler(librariesFoler,INDICATORS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,INDICATORS_FOLDER_PROPERTY);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,NO_SUBFOLDER_KEY,NO_SUBFOLDER_PROPERTY);
    createNewFoler=this.createNewFoler(librariesFoler.getFolder(INDICATORS),USER_DEFINED_INDICATORS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,UDI_FOLDER_PROPERTY);
    checkJRXMLFolderExist();
    IFolder metadataFolder=this.createNewFoler(rootProject,ResourceManager.METADATA_FOLDER_NAME);
    createNewFoler=this.createNewFoler(metadataFolder,PluginConstant.DB_CONNECTIONS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,DBCONNECTION_FOLDER_PROPERTY);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}","public boolean createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject rootProject=ResourceManager.getRootProject();
    if (!rootProject.exists()) {
      rootProject=createNewProject(ResourceManager.getRootProjectName());
    }
    copyConfigFiles(rootProject,plugin);
    IFolder dataProfilingFolder=this.createNewReadOnlyFolder(rootProject,ResourceManager.DATA_PROFILING_FOLDER_NAME);
    IFolder createNewFoler=this.createNewReadOnlyFolder(dataProfilingFolder,ANALYSIS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,ANALYSIS_FOLDER_PROPERTY);
    createNewFoler=this.createNewReadOnlyFolder(dataProfilingFolder,REPORTS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,REPORT_FOLDER_PROPERTY);
    IFolder librariesFoler=this.createNewReadOnlyFolder(rootProject,ResourceManager.LIBRARIES_FOLDER_NAME);
    IFolder patternFoler=this.createNewReadOnlyFolder(librariesFoler,PATTERNS);
    createNewFoler=this.createNewReadOnlyFolder(patternFoler,REGEX);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,PATTERNS_FOLDER_PROPERTY);
    WorkspaceVersionHelper.storeVersion();
    this.copyFilesToFolder(plugin,PATTERN_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewReadOnlyFolder(patternFoler,SQL);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,SQLPATTERNS_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,SQL_LIKE_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewReadOnlyFolder(librariesFoler,SOURCE_FILES);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,SOURCEFILES_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,DEMO_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewReadOnlyFolder(librariesFoler,RULES);
    createNewFoler=this.createNewReadOnlyFolder(createNewFoler,SQL);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,DQRULES_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,DQ_RULES_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewReadOnlyFolder(librariesFoler,EXCHANGE);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,NO_SUBFOLDER_KEY,NO_SUBFOLDER_PROPERTY);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,EXCHANGE_FOLDER_PROPERTY);
    createNewFoler=this.createNewReadOnlyFolder(librariesFoler,INDICATORS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,INDICATORS_FOLDER_PROPERTY);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,NO_SUBFOLDER_KEY,NO_SUBFOLDER_PROPERTY);
    createNewFoler=this.createNewReadOnlyFolder(librariesFoler.getFolder(INDICATORS),USER_DEFINED_INDICATORS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,UDI_FOLDER_PROPERTY);
    checkJRXMLFolderExist();
    IFolder metadataFolder=this.createNewReadOnlyFolder(rootProject,ResourceManager.METADATA_FOLDER_NAME);
    createNewFoler=this.createNewReadOnlyFolder(metadataFolder,PluginConstant.DB_CONNECTIONS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,FOLDER_CLASSIFY_KEY,DBCONNECTION_FOLDER_PROPERTY);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}",0.9671004532826436
139566,"public boolean execute(){
  try {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder createNewFoler=manager.createNewFoler(ResourceManager.getLibrariesFolder(),DQStructureManager.DQ_RULES);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.DQRULES_FOLDER_PROPERTY);
    manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.DQ_RULES_PATH,true,createNewFoler,null);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}","public boolean execute(){
  try {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder createNewFoler=manager.createNewReadOnlyFolder(ResourceManager.getLibrariesFolder(),DQStructureManager.DQ_RULES);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.DQRULES_FOLDER_PROPERTY);
    manager.copyFilesToFolder(CorePlugin.getDefault(),DQStructureManager.DQ_RULES_PATH,true,createNewFoler,null);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}",0.9873203719357564
139567,"public boolean execute(){
  try {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder createNewFoler=manager.createNewFoler(ResourceManager.getLibrariesFolder(),DQStructureManager.EXCHANGE);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.EXCHANGE_FOLDER_PROPERTY);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}","public boolean execute(){
  try {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder createNewFoler=manager.createNewReadOnlyFolder(ResourceManager.getLibrariesFolder(),DQStructureManager.EXCHANGE);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.EXCHANGE_FOLDER_PROPERTY);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}",0.9843260188087776
139568,"public boolean execute(){
  try {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder createNewFoler=manager.createNewFoler(ResourceManager.getLibrariesFolder(),DQStructureManager.INDICATORS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.INDICATORS_FOLDER_PROPERTY);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.NO_SUBFOLDER_KEY,DQStructureManager.NO_SUBFOLDER_PROPERTY);
    createNewFoler=manager.createNewFoler(createNewFoler,DQStructureManager.USER_DEFINED_INDICATORS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.UDI_FOLDER_PROPERTY);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}","public boolean execute(){
  try {
    DQStructureManager manager=DQStructureManager.getInstance();
    IFolder createNewFoler=manager.createNewReadOnlyFolder(ResourceManager.getLibrariesFolder(),DQStructureManager.INDICATORS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.INDICATORS_FOLDER_PROPERTY);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.NO_SUBFOLDER_KEY,DQStructureManager.NO_SUBFOLDER_PROPERTY);
    createNewFoler=manager.createNewReadOnlyFolder(createNewFoler,DQStructureManager.USER_DEFINED_INDICATORS);
    TdqPropertieManager.getInstance().addFolderProperties(createNewFoler,DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.UDI_FOLDER_PROPERTY);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}",0.9832214765100672
139569,"/** 
 * DOC scorreia Comment method ""createSubfolder"".
 * @param newPatternFolder
 * @return
 * @throws CoreException
 */
private IFolder createSubfolder(IFolder newPatternFolder,final String folderName,String folderProp) throws CoreException {
  TdqPropertieManager.getInstance().addFolderProperties(newPatternFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProp);
  return DQStructureManager.getInstance().createNewFoler(newPatternFolder,folderName);
}","/** 
 * DOC scorreia Comment method ""createSubfolder"".
 * @param newPatternFolder
 * @return
 * @throws CoreException
 */
private IFolder createSubfolder(IFolder newPatternFolder,final String folderName,String folderProp) throws CoreException {
  TdqPropertieManager.getInstance().addFolderProperties(newPatternFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProp);
  return DQStructureManager.getInstance().createNewFolder(newPatternFolder,folderName);
}",0.9989094874591058
139570,"public boolean execute(){
  if (log.isInfoEnabled()) {
    log.info(this.getName() + ""String_Node_Str"");
  }
  IProject rootProject=ResourceManager.getRootProject();
  IFolder libraryFolder=rootProject.getFolder(ResourceManager.LIBRARIES_FOLDER_NAME);
  try {
    IFolder oldPatternFolder=libraryFolder.getFolder(DQStructureManager.PATTERNS);
    IFolder newPatternFolder=libraryFolder.getFolder(DQStructureManager.PATTERNS);
    String folderProperty=DQStructureManager.PATTERNS_FOLDER_PROPERTY;
    IFolder newRegexSubfolder=createSubfolder(newPatternFolder,DQStructureManager.REGEX,folderProperty);
    movePatternsIntoPatternsRegex(oldPatternFolder,newRegexSubfolder,folderProperty);
    IFolder oldSqlPatternsFolder=libraryFolder.getFolder(DQStructureManager.SQL_PATTERNS);
    IFolder newSqlSubfolder=DQStructureManager.getInstance().createNewFoler(newPatternFolder,DQStructureManager.SQL);
    folderProperty=DQStructureManager.SQLPATTERNS_FOLDER_PROPERTY;
    movePatternsIntoPatternsRegex(oldSqlPatternsFolder,newSqlSubfolder,folderProperty);
    oldSqlPatternsFolder.delete(true,null);
    IFolder oldDqRulesFolder=libraryFolder.getFolder(DQStructureManager.DQ_RULES);
    IFolder newRulesFolder=createSubfolder(libraryFolder,DQStructureManager.RULES,folderProperty);
    folderProperty=DQStructureManager.DQRULES_FOLDER_PROPERTY;
    IFolder newRulesSQLSubfolder=createSubfolder(newRulesFolder,DQStructureManager.SQL,folderProperty);
    movePatternsIntoPatternsRegex(oldDqRulesFolder,newRulesSQLSubfolder,folderProperty);
    oldDqRulesFolder.delete(true,null);
    rootProject.refreshLocal(IResource.DEPTH_INFINITE,null);
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}","public boolean execute(){
  IProject rootProject=ResourceManager.getRootProject();
  IFolder libraryFolder=rootProject.getFolder(ResourceManager.LIBRARIES_FOLDER_NAME);
  try {
    IFolder oldPatternFolder=libraryFolder.getFolder(DQStructureManager.PATTERNS);
    IFolder newPatternFolder=libraryFolder.getFolder(DQStructureManager.PATTERNS);
    String folderProperty=DQStructureManager.PATTERNS_FOLDER_PROPERTY;
    IFolder newRegexSubfolder=createSubfolder(newPatternFolder,DQStructureManager.REGEX,folderProperty);
    movePatternsIntoPatternsRegex(oldPatternFolder,newRegexSubfolder,folderProperty);
    IFolder oldSqlPatternsFolder=libraryFolder.getFolder(DQStructureManager.SQL_PATTERNS);
    IFolder newSqlSubfolder=DQStructureManager.getInstance().createNewReadOnlyFolder(newPatternFolder,DQStructureManager.SQL);
    folderProperty=DQStructureManager.SQLPATTERNS_FOLDER_PROPERTY;
    movePatternsIntoPatternsRegex(oldSqlPatternsFolder,newSqlSubfolder,folderProperty);
    oldSqlPatternsFolder.delete(true,null);
    IFolder oldDqRulesFolder=libraryFolder.getFolder(DQStructureManager.DQ_RULES);
    IFolder newRulesFolder=createSubfolder(libraryFolder,DQStructureManager.RULES,folderProperty);
    folderProperty=DQStructureManager.DQRULES_FOLDER_PROPERTY;
    IFolder newRulesSQLSubfolder=createSubfolder(newRulesFolder,DQStructureManager.SQL,folderProperty);
    movePatternsIntoPatternsRegex(oldDqRulesFolder,newRulesSQLSubfolder,folderProperty);
    oldDqRulesFolder.delete(true,null);
    rootProject.refreshLocal(IResource.DEPTH_INFINITE,null);
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
    return false;
  }
  return true;
}",0.971210340775558
139571,"private void movePatternsIntoPatternsRegex(IFolder oldSubFolder,IFolder newSubfolder,final String folderProperty) throws CoreException {
  TdqPropertieManager.getInstance().addFolderProperties(newSubfolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
  for (  IResource oldResource : oldSubFolder.members()) {
    if (newSubfolder.getName().equals(oldResource.getName())) {
      continue;
    }
    if (oldResource instanceof IFolder) {
      IFolder oldFolder=(IFolder)oldResource;
      IFolder newFolder=DQStructureManager.getInstance().createNewFoler(newSubfolder,oldFolder.getName());
      TdqPropertieManager.getInstance().addFolderProperties(newFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
      movePatternsIntoPatternsRegex(oldFolder,newFolder,folderProperty);
      oldFolder.delete(true,null);
    }
    if (oldResource instanceof IFile) {
      IFile file=(IFile)oldResource;
      final ModelElement pattern=getModelElement(file,folderProperty);
      final EList<Dependency> supplierDependency=pattern.getSupplierDependency();
      if (supplierDependency.isEmpty()) {
        oldResource.copy(newSubfolder.getFolder(oldResource.getName()).getFullPath(),true,null);
      }
 else {
        for (        Dependency dependency : supplierDependency) {
          URI newUri=URI.createPlatformResourceURI(newSubfolder.getFullPath().toOSString(),true);
          EMFUtil.changeUri(pattern.eResource(),newUri);
          final EList<ModelElement> clientAnalyses=dependency.getClient();
          for (          ModelElement modelElement : clientAnalyses) {
            Analysis analysis=DataqualitySwitchHelper.ANALYSIS_SWITCH.doSwitch(modelElement);
            if (analysis != null) {
              AnaResourceFileHelper.getInstance().save(analysis);
            }
          }
        }
      }
      oldResource.delete(true,null);
    }
  }
}","private void movePatternsIntoPatternsRegex(IFolder oldSubFolder,IFolder newSubfolder,final String folderProperty) throws CoreException {
  TdqPropertieManager.getInstance().addFolderProperties(newSubfolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
  for (  IResource oldResource : oldSubFolder.members()) {
    if (newSubfolder.getName().equals(oldResource.getName())) {
      continue;
    }
    if (oldResource instanceof IFolder) {
      IFolder oldFolder=(IFolder)oldResource;
      IFolder newFolder=DQStructureManager.getInstance().createNewFolder(newSubfolder,oldFolder.getName());
      TdqPropertieManager.getInstance().addFolderProperties(newFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,folderProperty);
      movePatternsIntoPatternsRegex(oldFolder,newFolder,folderProperty);
      oldFolder.delete(true,null);
    }
    if (oldResource instanceof IFile) {
      IFile file=(IFile)oldResource;
      final ModelElement pattern=getModelElement(file,folderProperty);
      final EList<Dependency> supplierDependency=pattern.getSupplierDependency();
      if (supplierDependency.isEmpty()) {
        oldResource.copy(newSubfolder.getFolder(oldResource.getName()).getFullPath(),true,null);
      }
 else {
        for (        Dependency dependency : supplierDependency) {
          URI newUri=URI.createPlatformResourceURI(newSubfolder.getFullPath().toOSString(),true);
          EMFUtil.changeUri(pattern.eResource(),newUri);
          final EList<ModelElement> clientAnalyses=dependency.getClient();
          for (          ModelElement modelElement : clientAnalyses) {
            Analysis analysis=DataqualitySwitchHelper.ANALYSIS_SWITCH.doSwitch(modelElement);
            if (analysis != null) {
              AnaResourceFileHelper.getInstance().save(analysis);
            }
          }
        }
      }
      oldResource.delete(true,null);
    }
  }
}",0.9997345367666578
139572,"/** 
 * DOC scorreia Comment method ""updateDependencies"".
 * @param analysesSubFolder
 * @throws CoreException
 */
private void updateDependencies(IFolder analysesSubFolder) throws CoreException {
  for (  IResource resource : analysesSubFolder.members()) {
    if (resource instanceof IFolder) {
      IFolder folder=(IFolder)resource;
      updateDependencies(folder);
    }
    if (resource instanceof IFile) {
      IFile file=(IFile)resource;
      final Analysis analysis=AnaResourceFileHelper.getInstance().findAnalysis(file);
      final List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
      for (      Pattern pattern : patterns) {
        DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        AnaResourceFileHelper.getInstance().save(analysis);
      }
    }
  }
}","/** 
 * Method ""updateDependencies"" updates dependencies between elements in TOP.
 * @param analysesSubFolder
 * @throws CoreException
 */
private void updateDependencies(IFolder analysesSubFolder) throws CoreException {
  for (  IResource resource : analysesSubFolder.members()) {
    if (resource instanceof IFolder) {
      IFolder folder=(IFolder)resource;
      updateDependencies(folder);
    }
    if (resource instanceof IFile) {
      IFile file=(IFile)resource;
      final Analysis analysis=AnaResourceFileHelper.getInstance().findAnalysis(file);
      final List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
      for (      Pattern pattern : patterns) {
        DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
        AnaResourceFileHelper.getInstance().save(analysis);
      }
      final List<IndicatorDefinition> userDefinedIndicators=AnalysisHelper.getUserDefinedIndicators(analysis);
      for (      IndicatorDefinition indicatorDefinition : userDefinedIndicators) {
        DependenciesHandler.getInstance().setDependencyOn(analysis,indicatorDefinition);
        AnaResourceFileHelper.getInstance().save(analysis);
      }
    }
  }
}",0.7645290581162325
139573,"public boolean execute(){
  log.info(this.getName() + ""String_Node_Str"");
  try {
    IProject rootProject=ResourceManager.getRootProject();
    IFolder dataprofilingFolder=rootProject.getFolder(ResourceManager.DATA_PROFILING_FOLDER_NAME);
    IFolder analysesFolder=dataprofilingFolder.getFolder(DQStructureManager.ANALYSIS);
    updateDependencies(analysesFolder);
    return true;
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
    return false;
  }
}","public boolean execute(){
  try {
    IProject rootProject=ResourceManager.getRootProject();
    IFolder dataprofilingFolder=rootProject.getFolder(ResourceManager.DATA_PROFILING_FOLDER_NAME);
    IFolder analysesFolder=dataprofilingFolder.getFolder(DQStructureManager.ANALYSIS);
    updateDependencies(analysesFolder);
    return true;
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
    return false;
  }
}",0.9465478841870824
139574,"private void createSimpleTable(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  NumberFormat doubleFormat=new DecimalFormat(""String_Node_Str"");
  final Table table=new Table(composite,SWT.FULL_SELECTION | SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  table.setLayoutData(gd);
  table.setVisible(true);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  String[] titles={DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str""};
  for (  String title : titles) {
    TableColumn column=new TableColumn(table,SWT.NONE);
    column.setText(title);
    column.setWidth(100);
  }
  String[] label={DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
  long[] count={columnSetMultiValueIndicator.getCount(),columnSetMultiValueIndicator.getDistinctCount(),columnSetMultiValueIndicator.getUniqueCount(),columnSetMultiValueIndicator.getDuplicateCount()};
  double[] percent=new double[4];
  for (int i=0; i < count.length; i++) {
    percent[i]=(double)count[i] / count[0];
  }
  for (int itemCount=0; itemCount < 4; itemCount++) {
    TableItem item=new TableItem(table,SWT.NONE);
    if (count[0] == 0) {
      item.setText(new String[]{label[itemCount],String.valueOf(count[itemCount]),""String_Node_Str""});
      continue;
    }
    item.setText(new String[]{label[itemCount],String.valueOf(count[itemCount]),doubleFormat.format(percent[itemCount] * 100) + ""String_Node_Str""});
  }
  for (int i=0; i < table.getColumnCount(); i++) {
    table.getColumn(i).pack();
  }
}","private void createSimpleTable(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  NumberFormat doubleFormat=new DecimalFormat(""String_Node_Str"");
  final Table table=new Table(composite,SWT.FULL_SELECTION | SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  table.setLayoutData(gd);
  table.setVisible(true);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  String[] titles={DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str""};
  for (  String title : titles) {
    TableColumn column=new TableColumn(table,SWT.NONE);
    column.setText(title);
    column.setWidth(100);
  }
  String[] label={DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
  Long countAll=columnSetMultiValueIndicator.getCount();
  Long distinctCount=columnSetMultiValueIndicator.getDistinctCount();
  Long uniqueCount=columnSetMultiValueIndicator.getUniqueCount();
  Long duplicateCount=columnSetMultiValueIndicator.getDuplicateCount();
  if (countAll != null && distinctCount != null && uniqueCount != null && duplicateCount != null) {
    long[] count={countAll,distinctCount,uniqueCount,duplicateCount};
    double[] percent=new double[4];
    for (int i=0; i < count.length; i++) {
      percent[i]=(double)count[i] / count[0];
    }
    for (int itemCount=0; itemCount < 4; itemCount++) {
      TableItem item=new TableItem(table,SWT.NONE);
      if (count[0] == 0) {
        item.setText(new String[]{label[itemCount],String.valueOf(count[itemCount]),""String_Node_Str""});
        continue;
      }
      item.setText(new String[]{label[itemCount],String.valueOf(count[itemCount]),doubleFormat.format(percent[itemCount] * 100) + ""String_Node_Str""});
    }
  }
  for (int i=0; i < table.getColumnCount(); i++) {
    table.getColumn(i).pack();
  }
}",0.8464341488807913
139575,"@Override protected void createToolItems(ToolBarManager tbm){
  final Action nextDiff=new AbstractCompareAction(ResourceBundle.getBundle(BUNDLE_NAME),""String_Node_Str""){
    @Override public void run(){
      navigate(true);
    }
  }
;
  final ActionContributionItem nextDiffContribution=new ActionContributionItem(nextDiff);
  nextDiffContribution.setVisible(true);
  tbm.appendToGroup(""String_Node_Str"",nextDiffContribution);
  final Action previousDiff=new AbstractCompareAction(ResourceBundle.getBundle(BUNDLE_NAME),""String_Node_Str""){
    @Override public void run(){
      navigate(false);
    }
  }
;
  final ActionContributionItem previousDiffContribution=new ActionContributionItem(previousDiff);
  previousDiffContribution.setVisible(true);
  tbm.appendToGroup(""String_Node_Str"",previousDiffContribution);
  IContributionItem[] icItems=tbm.getItems();
  for (  IContributionItem conbItem : icItems) {
    if (conbItem instanceof ActionContributionItem) {
      IAction a=((ActionContributionItem)conbItem).getAction();
      if (a != null && a instanceof ChangePropertyAction) {
        tbm.remove(conbItem);
        conbItem.dispose();
        continue;
      }
      if (((ActionContributionItem)conbItem).getAction() != null && ((ActionContributionItem)conbItem).getAction().getActionDefinitionId() != null) {
        if (((ActionContributionItem)conbItem).getAction().getActionDefinitionId().equals(COPY_LEFT_TO_RIGHT_ID)) {
          tbm.remove(conbItem);
          conbItem.dispose();
        }
      }
    }
  }
  tbm.update(true);
}","@Override protected void createToolItems(ToolBarManager tbm){
  final Action nextDiff=new AbstractCompareAction(ResourceBundle.getBundle(BUNDLE_NAME),""String_Node_Str""){
    @Override public void run(){
      navigate(true);
    }
  }
;
  final ActionContributionItem nextDiffContribution=new ActionContributionItem(nextDiff);
  nextDiffContribution.setVisible(true);
  tbm.appendToGroup(""String_Node_Str"",nextDiffContribution);
  final Action previousDiff=new AbstractCompareAction(ResourceBundle.getBundle(BUNDLE_NAME),""String_Node_Str""){
    @Override public void run(){
      navigate(false);
    }
  }
;
  final ActionContributionItem previousDiffContribution=new ActionContributionItem(previousDiff);
  previousDiffContribution.setVisible(true);
  tbm.appendToGroup(""String_Node_Str"",previousDiffContribution);
  IContributionItem[] icItems=tbm.getItems();
  for (  IContributionItem conbItem : icItems) {
    if (conbItem instanceof ActionContributionItem) {
      IAction action=((ActionContributionItem)conbItem).getAction();
      if (action != null && action instanceof ChangePropertyAction) {
        tbm.remove(conbItem);
        conbItem.dispose();
        continue;
      }
      String actionId=action.getActionDefinitionId();
      if (action != null) {
        if (COPY_LEFT_TO_RIGHT_ID.equals(actionId) || COPY_RIGHT_TO_LEFT_ID.equals(actionId)) {
          tbm.remove(conbItem);
          conbItem.dispose();
        }
      }
    }
  }
  tbm.update(true);
}",0.8861010234400792
139576,"public static List<Pattern> getPatterns(Analysis analysis){
  List<Pattern> rets=new ArrayList<Pattern>();
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  for (  Indicator indicator : indicators) {
    if (indicator instanceof PatternMatchingIndicator) {
      rets.addAll(((PatternMatchingIndicator)indicator).getParameters().getDataValidDomain().getPatterns());
    }
 else     if (indicator instanceof UserDefIndicator) {
      if (IndicatorCategoryHelper.isUserDefMatching(getIndicatorCategory(indicator.getIndicatorDefinition()))) {
        rets.addAll(((UserDefIndicator)indicator).getParameters().getDataValidDomain().getPatterns());
      }
    }
  }
  return rets;
}","public static List<Pattern> getPatterns(Analysis analysis){
  List<Pattern> rets=new ArrayList<Pattern>();
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  for (  Indicator indicator : indicators) {
    if (indicator instanceof PatternMatchingIndicator) {
      rets.addAll(((PatternMatchingIndicator)indicator).getParameters().getDataValidDomain().getPatterns());
    }
  }
  return rets;
}",0.7146714671467147
139577,"public static Map<IndicatorCategory,List<IndicatorDefinition>> getCategoriesIDMaps(){
  if (categoriesIDMaps == null) {
    categoriesIDMaps=buildCategories();
  }
  return categoriesIDMaps;
}","private static Map<IndicatorCategory,List<IndicatorDefinition>> getCategoriesIDMaps(){
  if (categoriesIDMaps == null) {
    categoriesIDMaps=buildCategories();
  }
  return categoriesIDMaps;
}",0.9766233766233766
139578,"public static List<IndicatorDefinition> getShowIndicatorsDefinitions(){
  if (showIndicatorDefinitions == null) {
    showIndicatorDefinitions=new ArrayList<IndicatorDefinition>();
    EList<IndicatorDefinition> indicatorDefinitions=DefinitionHandler.getInstance().getIndicatorsDefinitions().getIndicatorDefinitions();
    for (    IndicatorDefinition indicatorDefinition : indicatorDefinitions) {
      if (!indicatorDefinition.getSqlGenericExpression().isEmpty() && !getShouldNotIncludeIndicatorDefinitionUuidList().contains(ResourceHelper.getUUID(indicatorDefinition))) {
        showIndicatorDefinitions.add(indicatorDefinition);
      }
    }
  }
  return showIndicatorDefinitions;
}","private static List<IndicatorDefinition> getShowIndicatorsDefinitions(){
  ArrayList<IndicatorDefinition> showIndicatorDefinitions=new ArrayList<IndicatorDefinition>();
  EList<IndicatorDefinition> indicatorDefinitions=DefinitionHandler.getInstance().getIndicatorsDefinitions().getIndicatorDefinitions();
  for (  IndicatorDefinition indicatorDefinition : indicatorDefinitions) {
    if (!indicatorDefinition.getSqlGenericExpression().isEmpty() && !getShouldNotIncludeIndicatorDefinitionUuidList().contains(ResourceHelper.getUUID(indicatorDefinition))) {
      showIndicatorDefinitions.add(indicatorDefinition);
    }
  }
  return showIndicatorDefinitions;
}",0.8231797919762258
139579,"@Override public void mouseDoubleClick(MouseEvent e){
  Tree tree=(Tree)e.getSource();
  Point point=new Point(e.x,e.y);
  TreeItem item=tree.getItem(point);
  if (item != null) {
    Object obj=item.getData();
    if (obj instanceof AbstractFolderNode) {
      AbstractFolderNode node=(AbstractFolderNode)obj;
      node.loadChildren();
      Object[] children=node.getChildren();
      if (children != null) {
        if (item.getText().indexOf(""String_Node_Str"") > 0) {
          item.setText(item.getText().substring(0,item.getText().indexOf(""String_Node_Str"")) + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
        }
 else {
          item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
        }
      }
    }
    if (obj instanceof Analysis) {
      Analysis analysis=(Analysis)obj;
      List<RenderedObject> tempList=new ArrayList<RenderedObject>();
      tempList.add(analysis);
      IFolder analysesFolder=ResourceManager.getDataProfilingFolder().getFolder(DQStructureManager.ANALYSIS);
      IFile file=AnaResourceFileHelper.getInstance().findCorrespondingFile(tempList,analysesFolder).get(0);
      CorePlugin.getDefault().openEditor(file,""String_Node_Str"");
    }
    if (obj instanceof IndicatorDefinition) {
      IndicatorDefinition indicatorDefinition=(IndicatorDefinition)obj;
      IndicatorEditorInput input=new IndicatorEditorInput(indicatorDefinition);
      try {
        CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,IndicatorEditor.class.getName());
      }
 catch (      PartInitException e1) {
        log.error(e1,e1);
      }
    }
  }
  super.mouseDoubleClick(e);
}","@Override public void mouseDoubleClick(MouseEvent e){
  Tree tree=(Tree)e.getSource();
  Point point=new Point(e.x,e.y);
  TreeItem item=tree.getItem(point);
  if (item != null) {
    Object obj=item.getData();
    if (obj instanceof AbstractFolderNode) {
      AbstractFolderNode node=(AbstractFolderNode)obj;
      node.loadChildren();
      Object[] children=node.getChildren();
      if (children != null) {
        if (item.getText().indexOf(""String_Node_Str"") > 0) {
          item.setText(item.getText().substring(0,item.getText().indexOf(""String_Node_Str"")) + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
        }
 else {
          item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
        }
      }
    }
    if (obj instanceof Analysis) {
      Analysis analysis=(Analysis)obj;
      List<RenderedObject> tempList=new ArrayList<RenderedObject>();
      tempList.add(analysis);
      IFolder analysesFolder=ResourceManager.getDataProfilingFolder().getFolder(DQStructureManager.ANALYSIS);
      IFile file=AnaResourceFileHelper.getInstance().findCorrespondingFile(tempList,analysesFolder).get(0);
      CorePlugin.getDefault().openEditor(file,""String_Node_Str"");
    }
    if (obj instanceof IndicatorDefinition) {
      IndicatorDefinition indicatorDefinition=(IndicatorDefinition)obj;
      indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(indicatorDefinition.getLabel());
      IndicatorEditorInput input=new IndicatorEditorInput(indicatorDefinition);
      try {
        CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,IndicatorEditor.class.getName());
      }
 catch (      PartInitException e1) {
        log.error(e1,e1);
      }
    }
  }
  super.mouseDoubleClick(e);
}",0.9675213675213676
139580,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  MenuManager menuMgr=new MenuManager(""String_Node_Str"");
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      ISelection selection=getCommonViewer().getSelection();
      getNavigatorActionService().setContext(new ActionContext(selection));
      getNavigatorActionService().fillContextMenu(manager);
    }
  }
);
  commonViewer=getCommonViewer();
  Menu menu=menuMgr.createContextMenu(commonViewer.getTree());
  commonViewer.getTree().setMenu(menu);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  this.addViewerFilter(FolderObjFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  this.getCommonViewer().setSorter(null);
  this.getCommonViewer().getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
        }
      }
      super.treeExpanded(e);
    }
  }
);
  this.getCommonViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      Tree tree=(Tree)e.getSource();
      Point point=new Point(e.x,e.y);
      TreeItem item=tree.getItem(point);
      if (item != null) {
        Object obj=item.getData();
        if (obj instanceof AbstractFolderNode) {
          AbstractFolderNode node=(AbstractFolderNode)obj;
          node.loadChildren();
          Object[] children=node.getChildren();
          if (children != null) {
            if (item.getText().indexOf(""String_Node_Str"") > 0) {
              item.setText(item.getText().substring(0,item.getText().indexOf(""String_Node_Str"")) + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
 else {
              item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
          }
        }
        if (obj instanceof Analysis) {
          Analysis analysis=(Analysis)obj;
          List<RenderedObject> tempList=new ArrayList<RenderedObject>();
          tempList.add(analysis);
          IFolder analysesFolder=ResourceManager.getDataProfilingFolder().getFolder(DQStructureManager.ANALYSIS);
          IFile file=AnaResourceFileHelper.getInstance().findCorrespondingFile(tempList,analysesFolder).get(0);
          CorePlugin.getDefault().openEditor(file,""String_Node_Str"");
        }
        if (obj instanceof IndicatorDefinition) {
          IndicatorDefinition indicatorDefinition=(IndicatorDefinition)obj;
          IndicatorEditorInput input=new IndicatorEditorInput(indicatorDefinition);
          try {
            CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,IndicatorEditor.class.getName());
          }
 catch (          PartInitException e1) {
            log.error(e1,e1);
          }
        }
      }
      super.mouseDoubleClick(e);
    }
  }
);
  commonViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      TreeSelection selection=(TreeSelection)event.getSelection();
      if (selection.size() != 1) {
        return;
      }
      Object selectedElement=selection.getFirstElement();
      if (selectedElement instanceof TdTable || selectedElement instanceof TdView) {
        if (provider == null) {
          provider=(ITreeContentProvider)commonViewer.getContentProvider();
        }
        for (        Object child : provider.getChildren(selectedElement)) {
          if (child instanceof IFolderNode && ((IFolderNode)child).getFolderNodeType() == ColumnFolderNode.COLUMNFOLDER_NODE_TYPE) {
            ((IFolderNode)child).loadChildren();
            break;
          }
        }
      }
    }
  }
);
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  MenuManager menuMgr=new MenuManager(""String_Node_Str"");
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      ISelection selection=getCommonViewer().getSelection();
      getNavigatorActionService().setContext(new ActionContext(selection));
      getNavigatorActionService().fillContextMenu(manager);
    }
  }
);
  commonViewer=getCommonViewer();
  Menu menu=menuMgr.createContextMenu(commonViewer.getTree());
  commonViewer.getTree().setMenu(menu);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  this.addViewerFilter(FolderObjFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  this.getCommonViewer().setSorter(null);
  this.getCommonViewer().getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
        }
      }
      super.treeExpanded(e);
    }
  }
);
  this.getCommonViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      Tree tree=(Tree)e.getSource();
      Point point=new Point(e.x,e.y);
      TreeItem item=tree.getItem(point);
      if (item != null) {
        Object obj=item.getData();
        if (obj instanceof AbstractFolderNode) {
          AbstractFolderNode node=(AbstractFolderNode)obj;
          node.loadChildren();
          Object[] children=node.getChildren();
          if (children != null) {
            if (item.getText().indexOf(""String_Node_Str"") > 0) {
              item.setText(item.getText().substring(0,item.getText().indexOf(""String_Node_Str"")) + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
 else {
              item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
          }
        }
        if (obj instanceof Analysis) {
          Analysis analysis=(Analysis)obj;
          List<RenderedObject> tempList=new ArrayList<RenderedObject>();
          tempList.add(analysis);
          IFolder analysesFolder=ResourceManager.getDataProfilingFolder().getFolder(DQStructureManager.ANALYSIS);
          IFile file=AnaResourceFileHelper.getInstance().findCorrespondingFile(tempList,analysesFolder).get(0);
          CorePlugin.getDefault().openEditor(file,""String_Node_Str"");
        }
        if (obj instanceof IndicatorDefinition) {
          IndicatorDefinition indicatorDefinition=(IndicatorDefinition)obj;
          indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(indicatorDefinition.getLabel());
          IndicatorEditorInput input=new IndicatorEditorInput(indicatorDefinition);
          try {
            CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,IndicatorEditor.class.getName());
          }
 catch (          PartInitException e1) {
            log.error(e1,e1);
          }
        }
      }
      super.mouseDoubleClick(e);
    }
  }
);
  commonViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      TreeSelection selection=(TreeSelection)event.getSelection();
      if (selection.size() != 1) {
        return;
      }
      Object selectedElement=selection.getFirstElement();
      if (selectedElement instanceof TdTable || selectedElement instanceof TdView) {
        if (provider == null) {
          provider=(ITreeContentProvider)commonViewer.getContentProvider();
        }
        for (        Object child : provider.getChildren(selectedElement)) {
          if (child instanceof IFolderNode && ((IFolderNode)child).getFolderNodeType() == ColumnFolderNode.COLUMNFOLDER_NODE_TYPE) {
            ((IFolderNode)child).loadChildren();
            break;
          }
        }
      }
    }
  }
);
}",0.9861372180451128
139581,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public String getRange(){
  if (upperValue != null && lowerValue != null) {
    if (Java2SqlType.isNumbericInSQL(upperValue.getDatatype())) {
      Double upper=upperValue.getRealValue();
      Double lower=lowerValue.getRealValue();
      if (upper != null && lower != null) {
        double range=upper - lower;
        return String.valueOf(range);
      }
    }
 else     if (Java2SqlType.isDateInSQL(upperValue.getDatatype())) {
      Date upper=null;
      Date lower=null;
      try {
        upper=DateUtils.parse(DateUtils.PATTERN_3,upperValue.getValue());
        lower=DateUtils.parse(DateUtils.PATTERN_3,lowerValue.getValue());
      }
 catch (      ParseException e) {
        throw new RuntimeException(e);
      }
      if (upper != null && lower != null) {
        return String.valueOf(ElapsedTime.getNbDays(upper,lower));
      }
    }
  }
  return null;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public String getRange(){
  if (upperValue != null && lowerValue != null) {
    if (Java2SqlType.isNumbericInSQL(upperValue.getDatatype())) {
      Double upper=upperValue.getRealValue();
      Double lower=lowerValue.getRealValue();
      if (upper != null && lower != null) {
        double range=upper - lower;
        return String.valueOf(range);
      }
    }
 else     if (Java2SqlType.isDateInSQL(upperValue.getDatatype())) {
      Date upper=null;
      Date lower=null;
      try {
        upper=DateUtils.parse(DateUtils.PATTERN_3,upperValue.getValue());
        lower=DateUtils.parse(DateUtils.PATTERN_3,lowerValue.getValue());
      }
 catch (      ParseException e) {
        throw new RuntimeException(e);
      }
      if (upper != null && lower != null) {
        return String.valueOf(ElapsedTime.getNbDays(lower,upper));
      }
    }
  }
  return null;
}",0.9936842105263158
139582,"private void write(List<TdqProperties> properties) throws IOException, SAXException, IntrospectionException {
  File file=getPropertiesFile(PROPERTIES_FILE);
  FileWriter outputWriter=new FileWriter(file);
  outputWriter.write(""String_Node_Str"");
  BeanWriter beanWriter=new BeanWriter(outputWriter);
  beanWriter.getXMLIntrospector().getConfiguration().setAttributesForPrimitives(false);
  beanWriter.getBindingConfiguration().setMapIDs(false);
  beanWriter.enablePrettyPrint();
  beanWriter.write(""String_Node_Str"",properties);
  outputWriter.close();
}","private void write(List<TdqProperties> properties) throws IOException, SAXException, IntrospectionException {
  File file=getPropertiesFile(PROPERTIES_FILE);
  FileWriter outputWriter=new FileWriter(file);
  outputWriter.write(""String_Node_Str"");
  BeanWriter beanWriter=new BeanWriter(outputWriter);
  beanWriter.getXMLIntrospector().getConfiguration().setAttributesForPrimitives(false);
  beanWriter.getBindingConfiguration().setMapIDs(false);
  beanWriter.enablePrettyPrint();
  beanWriter.write(""String_Node_Str"",properties);
  outputWriter.close();
  refreshFile(PROPERTIES_FILE);
  refreshFile(PROPERTIES_RULE_FILE);
}",0.9414758269720102
139583,"/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
protected void updateDetailList(){
  if (!""String_Node_Str"".equals(comboCategory.getText())) {
    IndicatorCategory ic=UDIHelper.getUDICategory(definition);
    for (    TaggedValue value : ic.getTaggedValue()) {
      if (""String_Node_Str"".equals(value.getTag())) {
        labelPurpose.setText(""String_Node_Str"" + value.getValue());
      }
 else       if (""String_Node_Str"".equals(value.getTag())) {
        labelDescription.setText(""String_Node_Str"" + value.getValue() + value.getValue());
      }
    }
    labelPurpose.getParent().layout();
  }
}","/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
protected void updateDetailList(){
  if (!""String_Node_Str"".equals(comboCategory.getText())) {
    IndicatorCategory ic=UDIHelper.getUDICategory(definition);
    for (    TaggedValue value : ic.getTaggedValue()) {
      if (""String_Node_Str"".equals(value.getTag())) {
        labelPurpose.setText(""String_Node_Str"" + value.getValue());
      }
 else       if (""String_Node_Str"".equals(value.getTag())) {
        labelDescription.setText(""String_Node_Str"" + value.getValue());
      }
    }
    labelPurpose.getParent().layout();
  }
}",0.9843621399176956
139584,"protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.PATTERN.equalsIgnoreCase(file.getFileExtension())) {
      Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      if (findPattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
        if (!validStatus) {
          ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
 else     if (FactoriesUtil.REP.equalsIgnoreCase(file.getFileExtension())) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
 else     if (FactoriesUtil.UDI.equalsIgnoreCase(file.getFileExtension())) {
      IndicatorDefinition findUDI=UDIResourceFileHelper.getInstance().findUDI(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.IND_DEFINITION);
      if (findUDI != null) {
        boolean validStatus=UDIHelper.verifyExpression(findUDI);
        if (!validStatus) {
          ImageDescriptor warnImg=ImageLib.getImageDescriptor(ImageLib.WARN_OVR);
          PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
  }
  if (element instanceof IFolder) {
    String folderName=((IFolder)element).getName();
    if (ResourceManager.METADATA_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
 else     if (ResourceManager.LIBRARIES_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.LIBRARIES);
    }
 else     if (ResourceManager.DATA_PROFILING_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.DATA_PROFILING);
    }
 else     if (org.talend.dataquality.PluginConstant.DB_CONNECTIONS.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
 else     if (DQStructureManager.EXCHANGE.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.EXCHANGE);
    }
  }
  return super.decorateImage(input,element);
}","protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.PATTERN.equalsIgnoreCase(file.getFileExtension())) {
      Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      if (findPattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
        if (!validStatus) {
          ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
 else     if (FactoriesUtil.REP.equalsIgnoreCase(file.getFileExtension())) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
 else     if (FactoriesUtil.UDI.equalsIgnoreCase(file.getFileExtension())) {
      IndicatorDefinition findUDI=UDIResourceFileHelper.getInstance().findUDI(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.IND_DEFINITION);
      if (findUDI != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findUDI) | UDIHelper.verifyExpression(findUDI);
        if (!validStatus) {
          ImageDescriptor warnImg=ImageLib.getImageDescriptor(ImageLib.WARN_OVR);
          PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
  }
  if (element instanceof IFolder) {
    String folderName=((IFolder)element).getName();
    if (ResourceManager.METADATA_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
 else     if (ResourceManager.LIBRARIES_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.LIBRARIES);
    }
 else     if (ResourceManager.DATA_PROFILING_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.DATA_PROFILING);
    }
 else     if (org.talend.dataquality.PluginConstant.DB_CONNECTIONS.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
 else     if (DQStructureManager.EXCHANGE.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.EXCHANGE);
    }
  }
  return super.decorateImage(input,element);
}",0.9918002236302648
139585,"/** 
 * DOC xqliu Comment method ""runAnalysisIndicatorsParallel"".
 * @param connection
 * @param elementToIndicator
 * @param indicators
 * @return
 * @throws SQLException
 */
private boolean runAnalysisIndicatorsParallel(Connection connection,Map<ModelElement,List<Indicator>> elementToIndicator,Collection<Indicator> indicators) throws SQLException {
  boolean ok=true;
  List<Thread> runners=new ArrayList<Thread>();
  try {
    for (    Indicator indicator : indicators) {
      ColumnAnalysisSqlParallelExecutor columnSqlParallel=ColumnAnalysisSqlParallelExecutor.createInstance(this,connection,elementToIndicator,indicator);
      Thread thread=new Thread(columnSqlParallel);
      runners.add(thread);
      thread.start();
    }
    while (true) {
      boolean stop=true;
      for (      Thread thread : runners) {
        if (thread.isAlive()) {
          stop=false;
          Thread.sleep(1000);
        }
      }
      if (stop) {
        break;
      }
    }
  }
 catch (  InterruptedException e) {
    log.error(e,e);
  }
  runners=null;
  return ok;
}","/** 
 * DOC xqliu Comment method ""runAnalysisIndicatorsParallel"".
 * @param connection
 * @param elementToIndicator
 * @param indicators
 * @return
 * @throws SQLException
 */
private boolean runAnalysisIndicatorsParallel(Connection connection,Map<ModelElement,List<Indicator>> elementToIndicator,Collection<Indicator> indicators) throws SQLException {
  boolean ok=true;
  List<Thread> runners=new ArrayList<Thread>();
  List<ColumnAnalysisSqlParallelExecutor> columnSqlExecutor=new ArrayList<ColumnAnalysisSqlParallelExecutor>();
  try {
    for (    Indicator indicator : indicators) {
      ColumnAnalysisSqlParallelExecutor columnSqlParallel=ColumnAnalysisSqlParallelExecutor.createInstance(this,connection,elementToIndicator,indicator);
      columnSqlExecutor.add(columnSqlParallel);
      Thread thread=new Thread(columnSqlParallel);
      runners.add(thread);
      thread.start();
    }
    while (true) {
      boolean stop=true;
      for (      Thread thread : runners) {
        if (thread.isAlive()) {
          stop=false;
          Thread.sleep(1000);
        }
      }
      if (stop) {
        break;
      }
    }
  }
 catch (  InterruptedException e) {
    log.error(e,e);
  }
  runners=null;
  for (  ColumnAnalysisSqlParallelExecutor executor : columnSqlExecutor) {
    if (executor.getException() != null) {
      columnSqlExecutor=null;
      throw new SQLException(executor.getException().toString());
    }
  }
  columnSqlExecutor=null;
  return ok;
}",0.8389630793401414
139586,"public void run(){
  try {
    if (indicator instanceof CompositeIndicator) {
      return;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
    Expression query=dbms().getInstantiatedExpression(indicator);
    if (query == null || !executeQuery(indicator,connection,query.getBody())) {
      ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
    }
 else {
      indicator.setComputed(true);
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
}","public void run(){
  try {
    if (indicator instanceof CompositeIndicator) {
      return;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
    Expression query=dbms().getInstantiatedExpression(indicator);
    if (query == null || !executeQuery(indicator,connection,query.getBody())) {
      ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
    }
 else {
      indicator.setComputed(true);
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
  }
 catch (  SQLException e) {
    this.setException(e);
  }
}",0.9838895281933256
139587,"@Override public void init(IViewSite site,IMemento memento) throws PartInitException {
  super.init(site,memento);
  if (memento == null) {
    setLinkingEnabled(false);
  }
  getViewSite().getActionBars().getToolBarManager().add(new RefreshDQReponsitoryViewAction());
}","@Override public void init(IViewSite site,IMemento memento) throws PartInitException {
  super.init(site,memento);
  if (memento == null) {
    setLinkingEnabled(false);
  }
  getViewSite().getActionBars().getToolBarManager().add(new RefreshDQReponsitoryViewAction(this));
}",0.9926470588235294
139588,"@Override public void run(){
  ProxyRepositoryManager.getInstance().refresh();
  super.run();
}","@Override public void run(){
  ProxyRepositoryManager.getInstance().refresh();
  dqRespositoryView.getCommonViewer().refresh();
  super.run();
}",0.7949790794979079
139589,"public RefreshDQReponsitoryViewAction(){
  super(PlatformUI.getWorkbench().getActiveWorkbenchWindow());
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.REFRESH_SPACE));
}","public RefreshDQReponsitoryViewAction(DQRespositoryView dqRespositoryView){
  super(PlatformUI.getWorkbench().getActiveWorkbenchWindow());
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.REFRESH_SPACE));
  this.dqRespositoryView=dqRespositoryView;
}",0.8200455580865603
139590,"/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
private void createDetailList(Composite composite){
  Composite compoDetail=new Composite(composite,SWT.NONE);
  compoDetail.setLayout(new GridLayout(1,false));
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.heightHint=100;
  data.horizontalIndent=20;
  compoDetail.setLayoutData(data);
  Font font0=new Font(null,""String_Node_Str"",9,SWT.BOLD);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  labelPurpose=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelPurpose.setLayoutData(data);
  labelPurpose.setFont(font0);
  labelDescription=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelDescription.setLayoutData(data);
  labelDescription.setFont(font0);
}","/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
private void createDetailList(Composite composite){
  Composite compoDetail=new Composite(composite,SWT.NONE);
  compoDetail.setLayout(new GridLayout(1,false));
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.heightHint=100;
  data.horizontalIndent=20;
  compoDetail.setLayoutData(data);
  Font font0=new Font(null,""String_Node_Str"",9,SWT.None);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  labelPurpose=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelPurpose.setLayoutData(data);
  labelPurpose.setFont(font0);
  labelDescription=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelDescription.setLayoutData(data);
  labelDescription.setFont(font0);
}",0.9950556242274412
139591,"/** 
 * DOC yyi Comment method ""editUDIndicator"" 2009-09-04.
 * @param tree
 */
private void editUDIndicator(Tree tree){
  TreeItem[] selection=tree.getSelection();
  if (selection.length > 0) {
    TreeItem treeItem=selection[0];
    IndicatorUnit indicatorUnit=(IndicatorUnit)treeItem.getData(INDICATOR_UNIT_KEY);
    UserDefIndicator indicator=(UserDefIndicator)indicatorUnit.getIndicator();
    IFolder userFolder=ResourceManager.getLibrariesFolder().getFolder(DQStructureManager.USER_DEFINED_INDICATORS);
    IFile file=UDIResourceFileHelper.getInstance().getUDIFile(indicator.getIndicatorDefinition(),new IFolder[]{userFolder});
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    try {
      activePage.openEditor(new FileEditorInput(file),""String_Node_Str"");
    }
 catch (    PartInitException e1) {
      log.error(e1,e1);
    }
  }
}","/** 
 * DOC yyi Comment method ""editUDIndicator"" 2009-09-04.
 * @param tree
 */
private void editUDIndicator(Tree tree){
  TreeItem[] selection=tree.getSelection();
  if (selection.length > 0) {
    TreeItem treeItem=selection[0];
    IndicatorUnit indicatorUnit=(IndicatorUnit)treeItem.getData(INDICATOR_UNIT_KEY);
    UserDefIndicator indicator=(UserDefIndicator)indicatorUnit.getIndicator();
    IFolder userFolder=ResourceManager.getLibrariesFolder().getFolder(DQStructureManager.INDICATORS).getFolder(DQStructureManager.USER_DEFINED_INDICATORS);
    IFile file=UDIResourceFileHelper.getInstance().getUDIFile(indicator.getIndicatorDefinition(),new IFolder[]{userFolder});
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    try {
      activePage.openEditor(new FileEditorInput(file),""String_Node_Str"");
    }
 catch (    PartInitException e1) {
      log.error(e1,e1);
    }
  }
}",0.9634478996181124
139592,"/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
protected void updateDetailList(){
  if (!""String_Node_Str"".equals(comboCategory.getText())) {
    IndicatorCategory ic=UDIHelper.getUDICategory(definition);
    for (    TaggedValue value : ic.getTaggedValue()) {
      if (""String_Node_Str"".equals(value.getTag())) {
        labelPurpose.setText(value.getValue());
      }
 else       if (""String_Node_Str"".equals(value.getTag())) {
        labelDescription.setText(value.getValue());
      }
    }
    labelPurpose.getParent().layout();
  }
}","/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
protected void updateDetailList(){
  if (!""String_Node_Str"".equals(comboCategory.getText())) {
    IndicatorCategory ic=UDIHelper.getUDICategory(definition);
    for (    TaggedValue value : ic.getTaggedValue()) {
      if (""String_Node_Str"".equals(value.getTag())) {
        labelPurpose.setText(""String_Node_Str"" + value.getValue());
      }
 else       if (""String_Node_Str"".equals(value.getTag())) {
        labelDescription.setText(""String_Node_Str"" + value.getValue() + value.getValue());
      }
    }
    labelPurpose.getParent().layout();
  }
}",0.9497872340425532
139593,"/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
private void createDetailList(Composite composite){
  Composite compoDetail=new Composite(composite,SWT.NONE);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.heightHint=100;
  data.horizontalIndent=20;
  compoDetail.setLayoutData(data);
  compoDetail.setLayout(new GridLayout(2,false));
  data=new GridData(GridData.FILL_HORIZONTAL);
  Label label0=new Label(compoDetail,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(label0);
  label0.setText(""String_Node_Str"");
  labelPurpose=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelPurpose.setLayoutData(data);
  Label label1=new Label(compoDetail,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(label1);
  label1.setText(""String_Node_Str"");
  labelDescription=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelDescription.setLayoutData(data);
}","/** 
 * DOC yyi 2009-09-23 Feature 9059
 * @param composite
 */
private void createDetailList(Composite composite){
  Composite compoDetail=new Composite(composite,SWT.NONE);
  compoDetail.setLayout(new GridLayout(1,false));
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.heightHint=100;
  data.horizontalIndent=20;
  compoDetail.setLayoutData(data);
  Font font0=new Font(null,""String_Node_Str"",9,SWT.BOLD);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  labelPurpose=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelPurpose.setLayoutData(data);
  labelPurpose.setFont(font0);
  labelDescription=new Label(compoDetail,SWT.WRAP | SWT.HORIZONTAL);
  labelDescription.setLayoutData(data);
  labelDescription.setFont(font0);
}",0.4061085972850679
139594,"/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  String folderName=mainPage.getName();
  if (defaultLabel == null) {
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(path);
    IFolder newFolder=folder.getFolder(folderName);
    try {
      newFolder.create(false,true,null);
      Object persistentProperty=TdqPropertieManager.getInstance().getFolderPropertyValue(newFolder,DQStructureManager.FOLDER_CLASSIFY_KEY);
      if (persistentProperty != null) {
        TdqPropertieManager.getInstance().addFolderProperties(newFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,persistentProperty.toString());
      }
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
      findView.getCommonViewer().refresh();
      findView.getCommonViewer().setExpandedState(newFolder,true);
    }
 catch (    CoreException e) {
      MessageDialog.openError(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      ExceptionHandler.process(e);
      return false;
    }
  }
  return true;
}","/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  String folderName=mainPage.getName();
  if (defaultLabel == null) {
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(path);
    IFolder newFolder=folder.getFolder(folderName);
    try {
      newFolder.create(false,true,null);
      Object persistentProperty=TdqPropertieManager.getInstance().getFolderPropertyValue(folder,DQStructureManager.FOLDER_CLASSIFY_KEY);
      if (persistentProperty != null) {
        TdqPropertieManager.getInstance().addFolderProperties(newFolder,DQStructureManager.FOLDER_CLASSIFY_KEY,persistentProperty.toString());
      }
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
      findView.getCommonViewer().refresh();
      findView.getCommonViewer().setExpandedState(newFolder,true);
    }
 catch (    CoreException e) {
      MessageDialog.openError(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      ExceptionHandler.process(e);
      return false;
    }
  }
  return true;
}",0.9979550102249488
139595,"@Override public void widgetSelected(SelectionEvent e){
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  DataManager dataManager=analysis.getContext().getConnection();
  try {
    IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
    if (service != null) {
      DBConnectionParameter parameter=buildParameter(dataManager);
      service.setConnectionParameter(parameter);
      service.setSelectedColumn(column);
      service.executeJob();
    }
  }
 catch (  Exception e2) {
    e2.printStackTrace();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  DataManager dataManager=analysis.getContext().getConnection();
  try {
    IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
    if (service != null) {
      DBConnectionParameter parameter=buildParameter(dataManager);
      service.setConnectionParameter(parameter);
      service.setSelectedColumn(column);
      service.setAnalysis(analysis);
      service.executeJob();
    }
  }
 catch (  Exception e2) {
    e2.printStackTrace();
  }
}",0.9694467382328654
139596,"public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final Table table=tbViewer.getTable();
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (e.button == 3 && ExecutionLanguage.JAVA != currentEngine) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        if (dataEntity == null) {
          return;
        }
        final Indicator indicator=dataEntity.getIndicator();
        if (indicator != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                DataManager connection=analysis.getContext().getConnection();
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(connection);
                String query=itemEntity.getQuery();
                String editorName=indicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
            if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator))) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  PatternTransformer pattTransformer=new PatternTransformer(language);
                  createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
          if (PluginChecker.isTDCPLoaded()) {
            if (indicator instanceof DuplicateCountIndicator || indicator instanceof UniqueCountIndicator || indicator instanceof DistinctCountIndicator) {
              MenuItem rmDuplicated=new MenuItem(menu,SWT.PUSH);
              rmDuplicated.setText(""String_Node_Str"");
              rmDuplicated.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
                  DataManager dataManager=analysis.getContext().getConnection();
                  try {
                    IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
                    if (service != null) {
                      DBConnectionParameter parameter=buildParameter(dataManager);
                      service.setConnectionParameter(parameter);
                      service.setSelectedColumn(column);
                      service.executeJob();
                    }
                  }
 catch (                  Exception e2) {
                    e2.printStackTrace();
                  }
                }
                private DBConnectionParameter buildParameter(                DataManager dataManager){
                  DBConnectionParameter parameter=ParameterFactory.createDBConnectionParameter();
                  DataProvider dataProvider=(DataProvider)dataManager;
                  TdProviderConnection providerConnection=(TdProviderConnection)dataProvider.getResourceConnection().get(0);
                  Properties prop=new Properties();
                  prop.setProperty(TaggedValueHelper.USER,DataProviderHelper.getUser(providerConnection));
                  prop.setProperty(TaggedValueHelper.PASSWORD,DataProviderHelper.getClearTextPassword(providerConnection));
                  parameter.setParameters(prop);
                  parameter.setHost(DataProviderHelper.getHost(providerConnection));
                  parameter.setPort(DataProviderHelper.getPort(providerConnection));
                  parameter.setDbName(DataProviderHelper.getDBName(providerConnection));
                  parameter.setJdbcUrl(providerConnection.getConnectionString());
                  parameter.setDriverClassName(providerConnection.getDriverClassName());
                  parameter.setSqlTypeName(DataProviderHelper.getDBType(providerConnection));
                  return parameter;
                }
              }
);
            }
          }
          menu.setVisible(true);
        }
      }
    }
  }
);
  addTooltipOnTableItem(table);
}","public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final Table table=tbViewer.getTable();
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (e.button == 3 && ExecutionLanguage.JAVA != currentEngine) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        if (dataEntity == null) {
          return;
        }
        final Indicator indicator=dataEntity.getIndicator();
        if (indicator != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                DataManager connection=analysis.getContext().getConnection();
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(connection);
                String query=itemEntity.getQuery();
                String editorName=indicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
            if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator))) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  PatternTransformer pattTransformer=new PatternTransformer(language);
                  createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
          if (PluginChecker.isTDCPLoaded()) {
            if (indicator instanceof DuplicateCountIndicator || indicator instanceof UniqueCountIndicator || indicator instanceof DistinctCountIndicator) {
              MenuItem rmDuplicated=new MenuItem(menu,SWT.PUSH);
              rmDuplicated.setText(""String_Node_Str"");
              rmDuplicated.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
                  DataManager dataManager=analysis.getContext().getConnection();
                  try {
                    IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
                    if (service != null) {
                      DBConnectionParameter parameter=buildParameter(dataManager);
                      service.setConnectionParameter(parameter);
                      service.setSelectedColumn(column);
                      service.setAnalysis(analysis);
                      service.executeJob();
                    }
                  }
 catch (                  Exception e2) {
                    e2.printStackTrace();
                  }
                }
                private DBConnectionParameter buildParameter(                DataManager dataManager){
                  DBConnectionParameter parameter=ParameterFactory.createDBConnectionParameter();
                  DataProvider dataProvider=(DataProvider)dataManager;
                  TdProviderConnection providerConnection=(TdProviderConnection)dataProvider.getResourceConnection().get(0);
                  Properties prop=new Properties();
                  prop.setProperty(TaggedValueHelper.USER,DataProviderHelper.getUser(providerConnection));
                  prop.setProperty(TaggedValueHelper.PASSWORD,DataProviderHelper.getClearTextPassword(providerConnection));
                  parameter.setParameters(prop);
                  parameter.setHost(DataProviderHelper.getHost(providerConnection));
                  parameter.setPort(DataProviderHelper.getPort(providerConnection));
                  parameter.setDbName(DataProviderHelper.getDBName(providerConnection));
                  parameter.setJdbcUrl(providerConnection.getConnectionString());
                  parameter.setDriverClassName(providerConnection.getDriverClassName());
                  parameter.setSqlTypeName(DataProviderHelper.getDBType(providerConnection));
                  return parameter;
                }
              }
);
            }
          }
          menu.setVisible(true);
        }
      }
    }
  }
);
  addTooltipOnTableItem(table);
}",0.9949710598728532
139597,"@Override public void mouseDown(MouseEvent e){
  if (table.getMenu() != null) {
    table.getMenu().setVisible(false);
  }
  ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (e.button == 3 && ExecutionLanguage.JAVA != currentEngine) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    if (dataEntity == null) {
      return;
    }
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            DataManager connection=analysis.getContext().getConnection();
            TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(connection);
            String query=itemEntity.getQuery();
            String editorName=indicator.getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
        if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator))) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
              PatternTransformer pattTransformer=new PatternTransformer(language);
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      if (PluginChecker.isTDCPLoaded()) {
        if (indicator instanceof DuplicateCountIndicator || indicator instanceof UniqueCountIndicator || indicator instanceof DistinctCountIndicator) {
          MenuItem rmDuplicated=new MenuItem(menu,SWT.PUSH);
          rmDuplicated.setText(""String_Node_Str"");
          rmDuplicated.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              TdColumn column=(TdColumn)indicator.getAnalyzedElement();
              DataManager dataManager=analysis.getContext().getConnection();
              try {
                IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
                if (service != null) {
                  DBConnectionParameter parameter=buildParameter(dataManager);
                  service.setConnectionParameter(parameter);
                  service.setSelectedColumn(column);
                  service.executeJob();
                }
              }
 catch (              Exception e2) {
                e2.printStackTrace();
              }
            }
            private DBConnectionParameter buildParameter(            DataManager dataManager){
              DBConnectionParameter parameter=ParameterFactory.createDBConnectionParameter();
              DataProvider dataProvider=(DataProvider)dataManager;
              TdProviderConnection providerConnection=(TdProviderConnection)dataProvider.getResourceConnection().get(0);
              Properties prop=new Properties();
              prop.setProperty(TaggedValueHelper.USER,DataProviderHelper.getUser(providerConnection));
              prop.setProperty(TaggedValueHelper.PASSWORD,DataProviderHelper.getClearTextPassword(providerConnection));
              parameter.setParameters(prop);
              parameter.setHost(DataProviderHelper.getHost(providerConnection));
              parameter.setPort(DataProviderHelper.getPort(providerConnection));
              parameter.setDbName(DataProviderHelper.getDBName(providerConnection));
              parameter.setJdbcUrl(providerConnection.getConnectionString());
              parameter.setDriverClassName(providerConnection.getDriverClassName());
              parameter.setSqlTypeName(DataProviderHelper.getDBType(providerConnection));
              return parameter;
            }
          }
);
        }
      }
      menu.setVisible(true);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (table.getMenu() != null) {
    table.getMenu().setVisible(false);
  }
  ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (e.button == 3 && ExecutionLanguage.JAVA != currentEngine) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    if (dataEntity == null) {
      return;
    }
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            DataManager connection=analysis.getContext().getConnection();
            TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(connection);
            String query=itemEntity.getQuery();
            String editorName=indicator.getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
        if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator))) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
              PatternTransformer pattTransformer=new PatternTransformer(language);
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      if (PluginChecker.isTDCPLoaded()) {
        if (indicator instanceof DuplicateCountIndicator || indicator instanceof UniqueCountIndicator || indicator instanceof DistinctCountIndicator) {
          MenuItem rmDuplicated=new MenuItem(menu,SWT.PUSH);
          rmDuplicated.setText(""String_Node_Str"");
          rmDuplicated.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              TdColumn column=(TdColumn)indicator.getAnalyzedElement();
              DataManager dataManager=analysis.getContext().getConnection();
              try {
                IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
                if (service != null) {
                  DBConnectionParameter parameter=buildParameter(dataManager);
                  service.setConnectionParameter(parameter);
                  service.setSelectedColumn(column);
                  service.setAnalysis(analysis);
                  service.executeJob();
                }
              }
 catch (              Exception e2) {
                e2.printStackTrace();
              }
            }
            private DBConnectionParameter buildParameter(            DataManager dataManager){
              DBConnectionParameter parameter=ParameterFactory.createDBConnectionParameter();
              DataProvider dataProvider=(DataProvider)dataManager;
              TdProviderConnection providerConnection=(TdProviderConnection)dataProvider.getResourceConnection().get(0);
              Properties prop=new Properties();
              prop.setProperty(TaggedValueHelper.USER,DataProviderHelper.getUser(providerConnection));
              prop.setProperty(TaggedValueHelper.PASSWORD,DataProviderHelper.getClearTextPassword(providerConnection));
              parameter.setParameters(prop);
              parameter.setHost(DataProviderHelper.getHost(providerConnection));
              parameter.setPort(DataProviderHelper.getPort(providerConnection));
              parameter.setDbName(DataProviderHelper.getDBName(providerConnection));
              parameter.setJdbcUrl(providerConnection.getConnectionString());
              parameter.setDriverClassName(providerConnection.getDriverClassName());
              parameter.setSqlTypeName(DataProviderHelper.getDBType(providerConnection));
              return parameter;
            }
          }
);
        }
      }
      menu.setVisible(true);
    }
  }
}",0.9947441810575994
139598,"public JFreeChart getChart(){
  return TopChartFactory.createBarChart(DefaultMessagesImpl.getString(""String_Node_Str""),getDataset(),true);
}","public JFreeChart getChart(){
  return TopChartFactory.createBarChart(DefaultMessagesImpl.getString(""String_Node_Str""),getDataset(),false);
}",0.9750889679715302
139599,"@SuppressWarnings(""String_Node_Str"") protected String getFreqRowsStatement(){
  String clause=""String_Node_Str"";
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getJavaType();
  if (Java2SqlType.isTextInSQL(javaType)) {
    clause=getInstantiatedClause();
  }
 else   if (Java2SqlType.isDateInSQL(javaType)) {
    IndicatorParameters parameters=indicator.getParameters();
    DateGrain dateGrain=parameters.getDateParameters().getDateAggregationType();
switch (dateGrain) {
case DAY:
      clause=dbmsLanguage.extractDay(this.columnName) + dbmsLanguage.equal() + getDayCharacters(entity.getLabel());
case WEEK:
    if (clause.length() == 0) {
      clause=concatWhereClause(clause,dbmsLanguage.extractWeek(this.columnName) + dbmsLanguage.equal() + getWeekCharacters(entity.getLabel()));
    }
case MONTH:
  clause=concatWhereClause(clause,dbmsLanguage.extractMonth(this.columnName) + dbmsLanguage.equal() + getMonthCharacters(dateGrain,entity.getLabel()));
case QUARTER:
if (clause.length() == 0) {
  clause=concatWhereClause(clause,dbmsLanguage.extractQuarter(this.columnName) + dbmsLanguage.equal() + getQuarterCharacters(entity.getLabel()));
}
case YEAR:
clause=concatWhereClause(clause,buildWhereClause());
break;
case NONE:
default :
clause=getDefaultQuotedStatement(""String_Node_Str"");
break;
}
}
 else if (Java2SqlType.isNumbericInSQL(javaType)) {
IndicatorParameters parameters=indicator.getParameters();
if (parameters != null) {
Domain bins=parameters.getBins();
if (bins != null) {
final EList<RangeRestriction> ranges=bins.getRanges();
for (RangeRestriction rangeRestriction : ranges) {
if (entity.getLabel() != null && entity.getLabel().equals(rangeRestriction.getName())) {
clause=createWhereClause(rangeRestriction);
break;
}
}
}
 else {
clause=getInstantiatedClause();
}
}
 else {
clause=getInstantiatedClause();
}
}
 else {
clause=getDefaultQuotedStatement(""String_Node_Str"");
}
return ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(clause)+ andDataFilterClause();
}","protected String getFreqRowsStatement(){
  String clause=""String_Node_Str"";
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getJavaType();
  if (Java2SqlType.isTextInSQL(javaType)) {
    clause=getInstantiatedClause();
  }
 else   if (Java2SqlType.isDateInSQL(javaType)) {
    clause=entity.isLabelNull() ? getInstantiatedClause() : getClauseWithDate(clause);
  }
 else   if (Java2SqlType.isNumbericInSQL(javaType)) {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters != null) {
      Domain bins=parameters.getBins();
      if (bins != null) {
        final EList<RangeRestriction> ranges=bins.getRanges();
        for (        RangeRestriction rangeRestriction : ranges) {
          if (entity.getLabel() != null && entity.getLabel().equals(rangeRestriction.getName())) {
            clause=createWhereClause(rangeRestriction);
            break;
          }
        }
      }
 else {
        clause=getInstantiatedClause();
      }
    }
 else {
      clause=getInstantiatedClause();
    }
  }
 else {
    clause=getDefaultQuotedStatement(""String_Node_Str"");
  }
  return ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(clause)+ andDataFilterClause();
}",0.5230213662353296
139600,"/** 
 * DOC scorreia Comment method ""getValueFields"".
 * @param value2freq
 * @return
 */
protected Object getValueFields(Object[] value2freq){
  int nbFields=value2freq.length;
  if (nbFields == 2) {
    return value2freq[0];
  }
  StringBuffer buf=new StringBuffer();
  if (nbFields == 3) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object quarter=value2freq[1];
    buf.append(String.valueOf(quarter));
    return buf.toString();
  }
  if (nbFields == 4) {
    buf.append(format4digit(value2freq[0]));
    buf.append(format2digit(value2freq[2]));
    return buf.toString();
  }
  if (nbFields == 5) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object month=String.valueOf(value2freq[2]);
    buf.append(format2digit(month));
    String week=String.valueOf(value2freq[3]);
    buf.append(format2digit(week));
    return buf.toString();
  }
  if (nbFields == 6) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object month=String.valueOf(value2freq[2]);
    buf.append(format2digit(month));
    String day=String.valueOf(value2freq[4]);
    buf.append(format2digit(day));
    return buf.toString();
  }
  return null;
}","/** 
 * DOC scorreia Comment method ""getValueFields"".
 * @param value2freq
 * @return
 */
protected Object getValueFields(Object[] value2freq){
  int nbFields=value2freq.length;
  if (nbFields == 2) {
    return value2freq[0];
  }
  StringBuffer buf=new StringBuffer();
  if (nbFields == 3) {
    Object year=value2freq[0];
    Object quarter=value2freq[1];
    if (year == null && quarter == null) {
      return null;
    }
    buf.append(format4digit(year));
    buf.append(String.valueOf(quarter));
    return buf.toString();
  }
  if (nbFields == 4) {
    Object year=value2freq[0];
    Object month=value2freq[2];
    if (year == null && month == null) {
      return null;
    }
    buf.append(format4digit(year));
    buf.append(format2digit(month));
    return buf.toString();
  }
  if (nbFields == 5) {
    Object year=value2freq[0];
    Object month=value2freq[2];
    Object week=value2freq[3];
    if (year == null && month == null && week == null) {
      return null;
    }
    buf.append(format4digit(year));
    buf.append(format2digit(month));
    buf.append(format2digit(week));
    return buf.toString();
  }
  if (nbFields == 6) {
    Object year=value2freq[0];
    Object month=value2freq[2];
    Object day=value2freq[4];
    if (year == null && month == null && day == null) {
      return null;
    }
    buf.append(format4digit(year));
    buf.append(format2digit(month));
    buf.append(format2digit(day));
    return buf.toString();
  }
  return null;
}",0.6023108460678345
139601,"protected void addPages(){
  TdEditorToolBar toolbar=getToolBar();
  if (toolbar != null) {
    saveAction=new DefaultSaveAction(this);
    runAction=new RunAnalysisAction();
    refreshAction=new RefreshChartAction();
    toolbar.addActions(saveAction,runAction,refreshAction);
  }
switch (analysisType) {
case COLUMN_CORRELATION:
    masterPage=new ColumnCorrelationNominalAndIntervalMasterPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
  resultPage=new ColumnCorrelationNominalIntervalResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
  addPage(masterPage);
  addPage(resultPage);
}
 catch (PartInitException e) {
  ExceptionHandler.process(e,Level.ERROR);
}
break;
case MULTIPLE_COLUMN:
masterPage=new ColumnMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new ColumnAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CONNECTION:
masterPage=new ConnectionMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
try {
addPage(masterPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CATALOG:
masterPage=new CatalogMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
try {
addPage(masterPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case SCHEMA:
masterPage=new SchemaAnalysisMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
try {
addPage(masterPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case COLUMNS_COMPARISON:
masterPage=new ColumnsComparisonMasterDetailsPage(this,MASTER_PAGE,DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new ColumnsComparisonAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case TABLE:
masterPage=new TableMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new TableAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case TABLE_FUNCTIONAL_DEPENDENCY:
masterPage=new ColumnDependencyMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new ColumnDependencyResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
default :
}
if (masterPage.getAnalysis() != null) {
setPartName(masterPage.getIntactElemenetName());
}
 else {
setPartName(getEditorInput().getName());
}
}","protected void addPages(){
  TdEditorToolBar toolbar=getToolBar();
  if (toolbar != null) {
    saveAction=new DefaultSaveAction(this);
    runAction=new RunAnalysisAction();
    refreshAction=new RefreshChartAction();
    toolbar.addActions(saveAction,runAction,refreshAction);
  }
switch (analysisType) {
case COLUMN_CORRELATION:
    masterPage=new ColumnCorrelationNominalAndIntervalMasterPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
  resultPage=new ColumnCorrelationNominalIntervalResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
  addPage(masterPage);
  addPage(resultPage);
}
 catch (PartInitException e) {
  ExceptionHandler.process(e,Level.ERROR);
}
break;
case MULTIPLE_COLUMN:
masterPage=new ColumnMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new ColumnAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CONNECTION:
masterPage=new ConnectionMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
try {
addPage(masterPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CATALOG:
masterPage=new CatalogMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
try {
addPage(masterPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case SCHEMA:
masterPage=new SchemaAnalysisMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
try {
addPage(masterPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case COLUMNS_COMPARISON:
masterPage=new ColumnsComparisonMasterDetailsPage(this,MASTER_PAGE,DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new ColumnsComparisonAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case TABLE:
masterPage=new TableMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new TableAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case TABLE_FUNCTIONAL_DEPENDENCY:
masterPage=new ColumnDependencyMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
resultPage=new ColumnDependencyResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
setRefreshActionButtonState(false);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
default :
}
if (masterPage.getAnalysis() != null) {
setPartName(masterPage.getIntactElemenetName());
}
 else {
setPartName(getEditorInput().getName());
}
}",0.9872926226614896
139602,"@Override protected void addFieldsListeners(){
  for (  final Button button : allBtns) {
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String timeUnit=button.getText();
        DateGrain dateGrain=DateGrain.get(timeUnit);
        DateParameters dateParameters=parameters.getDateParameters();
        if (dateParameters == null) {
          dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
        }
        dateParameters.setDateAggregationType(dateGrain);
      }
    }
);
  }
}","@Override protected void addFieldsListeners(){
  for (  final Button button : allBtns) {
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String timeUnit=button.getText();
        DateGrain dateGrain=DateGrain.get(timeUnit);
        DateParameters dateParameters=parameters.getDateParameters();
        if (dateParameters == null) {
          dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
        }
        dateParameters.setDateAggregationType(dateGrain);
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
);
  }
}",0.9660314830157416
139603,"@Override public void widgetSelected(SelectionEvent e){
  String timeUnit=button.getText();
  DateGrain dateGrain=DateGrain.get(timeUnit);
  DateParameters dateParameters=parameters.getDateParameters();
  if (dateParameters == null) {
    dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
  }
  dateParameters.setDateAggregationType(dateGrain);
}","@Override public void widgetSelected(SelectionEvent e){
  String timeUnit=button.getText();
  DateGrain dateGrain=DateGrain.get(timeUnit);
  DateParameters dateParameters=parameters.getDateParameters();
  if (dateParameters == null) {
    dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
  }
  dateParameters.setDateAggregationType(dateGrain);
  updateStatus(IStatus.OK,MSG_OK);
}",0.9540078843626808
139604,"private static Object getInstance(String propertyName){
  try {
    return getConfigurationElement().createExecutableExtension(propertyName);
  }
 catch (  CoreException e) {
    return new RepositoryManager();
  }
}","private static synchronized Object getInstance(String propertyName){
  try {
    IConfigurationElement configurationElement=getConfigurationElement();
    if (configurationElement != null)     return configurationElement.createExecutableExtension(propertyName);
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return new RepositoryManager();
}",0.7017543859649122
139605,"@Override protected void createFormContent(IManagedForm managedForm){
  setFormTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  setMetadataTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  super.createFormContent(managedForm);
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createDefinitionSection(topComp);
  if (isSystemIndicator()) {
    if (IndicatorCategoryHelper.isCorrelation(category)) {
      createAdditionalFunctionsSection(topComp);
    }
    if (this.hasCharactersMapping) {
      createCharactersMappingSection(topComp);
    }
  }
 else {
    createCategorySection(topComp);
  }
  foldingSections(new Section[]{metadataSection,additionalFunctionsSection,definitionSection,charactersMappingSection,categorySection});
}","@Override protected void createFormContent(IManagedForm managedForm){
  setFormTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  setMetadataTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  super.createFormContent(managedForm);
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createDefinitionSection(topComp);
  if (isSystemIndicator()) {
    if (IndicatorCategoryHelper.isCorrelation(category)) {
      createAdditionalFunctionsSection(topComp);
    }
    if (this.hasCharactersMapping) {
      createCharactersMappingSection(topComp);
    }
  }
 else {
    createCategorySection(topComp);
  }
  foldingSections(new Section[]{metadataSection,additionalFunctionsSection,definitionSection,charactersMappingSection,categorySection});
  currentEditor.registerSections(new Section[]{metadataSection,additionalFunctionsSection,definitionSection,charactersMappingSection,categorySection});
}",0.9121387283236996
139606,"public void modifyText(ModifyEvent e){
  setDirty(true);
}","public void modifyText(ModifyEvent e){
  setDirty(true);
  saveTextChange();
}",0.8529411764705882
139607,"/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  infomatioinSection=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite sectionClient=toolkit.createComposite(infomatioinSection);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  passwordText=new Text(sectionClient,SWT.BORDER | SWT.PASSWORD);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=DataProviderHelper.getUser(connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=DataProviderHelper.getClearTextPassword(connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  if (trc.getObject().getDriverClassName().startsWith(""String_Node_Str"")) {
    loginText.setEnabled(false);
    passwordText.setEnabled(false);
  }
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  infomatioinSection.setClient(sectionClient);
}","/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  infomatioinSection=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite sectionClient=toolkit.createComposite(infomatioinSection);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  passwordText=new Text(sectionClient,SWT.BORDER | SWT.PASSWORD);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=DataProviderHelper.getUser(connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=DataProviderHelper.getClearTextPassword(connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  if (trc.getObject().getDriverClassName().startsWith(""String_Node_Str"")) {
    loginText.setEnabled(false);
    passwordText.setEnabled(false);
  }
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      saveTextChange();
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  infomatioinSection.setClient(sectionClient);
}",0.9948141745894556
139608,"@Override public boolean performOk(){
  boolean ok=super.performOk();
  saveLanguageType();
  getPreferenceStore().setValue(header.getText(),execCombo.getText());
  return ok;
}","@Override public boolean performOk(){
  boolean ok=super.performOk();
  LocalToLanguageEnum language=LocalToLanguageEnum.findLocal(execCombo.getText());
  getPreferenceStore().setValue(PluginConstant.LANGUAGE_SELECTOR,language.getShortOfLocale());
  CorePlugin.getDefault().savePluginPreferences();
  saveLanguageType();
  return ok;
}",0.4140625
139609,"@Override protected void performDefaults(){
  execCombo.deselectAll();
  getPreferenceStore().setValue(header.getText(),execCombo.getText());
  super.performDefaults();
}","@Override protected void performDefaults(){
  execCombo.deselectAll();
  getPreferenceStore().setValue(PluginConstant.LANGUAGE_SELECTOR,LocalToLanguageEnum.ENGLISH.getShortOfLocale());
  execCombo.setText(LocalToLanguageEnum.ENGLISH.getLocale());
  super.performDefaults();
}",0.6337078651685393
139610,"@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  header=new Label(mainComposite,SWT.WRAP);
  header.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  header.setLayoutData(gd);
  execCombo=new Combo(mainComposite,SWT.READ_ONLY);
  for (  LocalToLanguageEnum oneEnum : LocalToLanguageEnum.values()) {
    execCombo.add(oneEnum.getLocale());
    String language=getPreferenceStore().getString(header.getText());
    execCombo.setText(language == null ? LocalToLanguageEnum.ENGLISH.getLocale() : language);
  }
  GridData d=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  execCombo.setLayoutData(d);
  Label label=new Label(mainComposite,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData g=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  label.setLayoutData(g);
  Button allUpdate=new Button(mainComposite,SWT.FLAT);
  allUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  allUpdate.setLayoutData(new GridData());
  Button validatedUpdate=new Button(mainComposite,SWT.NONE);
  validatedUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  validatedUpdate.setLayoutData(new GridData());
  allUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(false,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  validatedUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(true,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  return mainComposite;
}","@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  header=new Label(mainComposite,SWT.WRAP);
  header.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  header.setLayoutData(gd);
  execCombo=new Combo(mainComposite,SWT.READ_ONLY);
  for (  LocalToLanguageEnum oneEnum : LocalToLanguageEnum.values()) {
    execCombo.add(oneEnum.getLocale());
  }
  String language=getPreferenceStore().getString(PluginConstant.LANGUAGE_SELECTOR);
  LocalToLanguageEnum languageType=LocalToLanguageEnum.findLocalByShort(language);
  execCombo.setText(language == null ? LocalToLanguageEnum.ENGLISH.getLocale() : languageType.getLocale());
  GridData d=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  execCombo.setLayoutData(d);
  Label label=new Label(mainComposite,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData g=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  label.setLayoutData(g);
  Button allUpdate=new Button(mainComposite,SWT.FLAT);
  allUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  allUpdate.setLayoutData(new GridData());
  Button validatedUpdate=new Button(mainComposite,SWT.NONE);
  validatedUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  validatedUpdate.setLayoutData(new GridData());
  allUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(false,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  validatedUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(true,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  return mainComposite;
}",0.9616741123912532
139611,"/** 
 * DOC hcheng Comment method ""saveLanguageType"".
 */
private void saveLanguageType(){
  FileInputStream fin=null;
  FileOutputStream fout=null;
  try {
    URL url=Platform.getConfigurationLocation().getURL();
    log(url.getFile());
    Properties p=new Properties();
    File iniFile=new File(url.getFile(),""String_Node_Str"");
    fin=new FileInputStream(iniFile);
    p.load(fin);
    String languageType=PluginConstant.LANGUAGE_SELECTOR;
    if (languageType.equals(p.getProperty(EclipseStarter.PROP_NL))) {
      return;
    }
    p.setProperty(EclipseStarter.PROP_NL,languageType);
    fout=new FileOutputStream(iniFile);
    p.store(fout,""String_Node_Str"");
    fout.flush();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (fin != null) {
      try {
        fin.close();
      }
 catch (      Exception e) {
      }
    }
    if (fout != null) {
      try {
        fout.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * DOC hcheng Comment method ""saveLanguageType"".
 */
private void saveLanguageType(){
  FileInputStream fin=null;
  FileOutputStream fout=null;
  try {
    URL url=Platform.getConfigurationLocation().getURL();
    log(url.getFile());
    Properties p=new Properties();
    File iniFile=new File(url.getFile(),""String_Node_Str"");
    fin=new FileInputStream(iniFile);
    p.load(fin);
    String languageType=CorePlugin.getDefault().getPluginPreferences().getString(PluginConstant.LANGUAGE_SELECTOR);
    if (languageType.equals(p.getProperty(EclipseStarter.PROP_NL))) {
      return;
    }
    p.setProperty(EclipseStarter.PROP_NL,languageType);
    fout=new FileOutputStream(iniFile);
    p.store(fout,""String_Node_Str"");
    fout.flush();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (fin != null) {
      try {
        fin.close();
      }
 catch (      Exception e) {
      }
    }
    if (fout != null) {
      try {
        fout.close();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.9714285714285714
139612,"/** 
 * DOC scorreia Comment method ""getYearCharacters"".
 * @param label
 * @return
 */
private String getYearCharacters(String label){
  if (label.equals(""String_Node_Str"")) {
    return null;
  }
 else {
    return label.substring(0,4);
  }
}","/** 
 * DOC scorreia Comment method ""getYearCharacters"".
 * @param label
 * @return
 */
private String getYearCharacters(String label){
  if (label != null && label.length() >= 4) {
    return label.substring(0,4);
  }
  return null;
}",0.7891440501043842
139613,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  anaColumnCompareViewer=new AnalysisColumnCompareTreeViewer((AbstractAnalysisMetadataPage)this,topComp,getColumnLeftSet(),getColumnRightSet(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),false);
  anaColumnCompareViewer.addPropertyChangeListener(this);
  createDataFilterSection(form,topComp);
  columnListA=anaColumnCompareViewer.getColumnListA();
  columnListB=anaColumnCompareViewer.getColumnListB();
  columnsComparisonSection=anaColumnCompareViewer.getColumnsComparisonSection();
  anaColumnCompareViewer.addPropertyChangeListener(this);
  currentEditor.registerSections(new Section[]{columnsComparisonSection,dataFilterSection});
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  anaColumnCompareViewer=new AnalysisColumnCompareTreeViewer((AbstractAnalysisMetadataPage)this,topComp,getColumnLeftSet(),getColumnRightSet(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),false,true);
  anaColumnCompareViewer.addPropertyChangeListener(this);
  createDataFilterSection(form,topComp);
  columnListA=anaColumnCompareViewer.getColumnListA();
  columnListB=anaColumnCompareViewer.getColumnListB();
  columnsComparisonSection=anaColumnCompareViewer.getColumnsComparisonSection();
  anaColumnCompareViewer.addPropertyChangeListener(this);
  currentEditor.registerSections(new Section[]{columnsComparisonSection,dataFilterSection});
}",0.9976646426903316
139614,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  anaColumnCompareViewer=new AnalysisColumnCompareTreeViewer(this,topComp,(Analysis)this.currentModelElement);
  columnsComparisonSection=anaColumnCompareViewer.getColumnsComparisonSection();
  anaColumnCompareViewer.refreash();
  anaColumnCompareViewer.addPropertyChangeListener(this);
  createDataFilterSection(form,topComp);
  foldingSections(new Section[]{metadataSection,columnsComparisonSection,dataFilterSection});
  currentEditor.registerSections(new Section[]{columnsComparisonSection});
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  anaColumnCompareViewer=new AnalysisColumnCompareTreeViewer(this,topComp,(Analysis)this.currentModelElement,false);
  columnsComparisonSection=anaColumnCompareViewer.getColumnsComparisonSection();
  anaColumnCompareViewer.refreash();
  anaColumnCompareViewer.addPropertyChangeListener(this);
  createDataFilterSection(form,topComp);
  foldingSections(new Section[]{metadataSection,columnsComparisonSection,dataFilterSection});
  currentEditor.registerSections(new Section[]{columnsComparisonSection});
}",0.9965831435079726
139615,"public AnalysisColumnCompareTreeViewer(AbstractAnalysisMetadataPage masterPage,Composite topComp,Analysis analysis){
  this(masterPage,topComp,new ArrayList<Column>(),new ArrayList<Column>(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),true);
  if (analysis.getResults().getIndicators().size() > 0) {
    EList<Indicator> indicators=analysis.getResults().getIndicators();
    RowMatchingIndicator rowMatchingIndicatorA=(RowMatchingIndicator)indicators.get(0);
    columnListA.addAll(rowMatchingIndicatorA.getColumnSetA());
    RowMatchingIndicator rowMatchingIndicatorB=(RowMatchingIndicator)indicators.get(1);
    columnListB.addAll(rowMatchingIndicatorA.getColumnSetB());
  }
  this.analysis=analysis;
  checkComputButton=analysis.getParameters().getDeactivatedIndicators().size() != 0;
}","public AnalysisColumnCompareTreeViewer(AbstractAnalysisMetadataPage masterPage,Composite topComp,Analysis analysis,boolean allowColumnDupcation){
  this(masterPage,topComp,new ArrayList<Column>(),new ArrayList<Column>(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),true,allowColumnDupcation);
  if (analysis.getResults().getIndicators().size() > 0) {
    EList<Indicator> indicators=analysis.getResults().getIndicators();
    RowMatchingIndicator rowMatchingIndicatorA=(RowMatchingIndicator)indicators.get(0);
    columnListA.addAll(rowMatchingIndicatorA.getColumnSetA());
    RowMatchingIndicator rowMatchingIndicatorB=(RowMatchingIndicator)indicators.get(1);
    columnListB.addAll(rowMatchingIndicatorA.getColumnSetB());
  }
  this.analysis=analysis;
  checkComputButton=analysis.getParameters().getDeactivatedIndicators().size() != 0;
}",0.9711981566820276
139616,"private TableViewer createSectionPart(Composite parentComp,final List<Column> columnList,String title,String hyperlinkText){
  Section columnSetElementSection=masterPage.createSection(form,parentComp,title,true,null);
  Composite sectionComp=toolkit.createComposite(columnSetElementSection);
  sectionComp.setLayout(new GridLayout());
  Hyperlink selectColumnBtn=toolkit.createHyperlink(sectionComp,hyperlinkText,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(selectColumnBtn);
  Composite columsComp=toolkit.createComposite(sectionComp,SWT.NULL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).grab(true,true).applyTo(columsComp);
  columsComp.setLayout(new GridLayout());
  final TableViewer columnsElementViewer=createTreeViewer(columnList,columsComp);
  tableViewerPosStack.add(columnsElementViewer);
  TableViewerDNDDecorate dndDecorate=new TableViewerDNDDecorate();
  dndDecorate.installDND(columnsElementViewer,true,TableViewerDNDDecorate.COLUMN_VALIDATETYPE);
  Composite buttonsComp=toolkit.createComposite(columsComp,SWT.NULL);
  buttonsComp.setLayout(new GridLayout(4,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  GridData buttonGridData=new GridData(GridData.FILL_BOTH);
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  Button sortButton=new Button(buttonsComp,SWT.NULL);
  sortButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sortButton.setLayoutData(buttonGridData);
  final Button[] buttons=new Button[]{delButton,moveUpButton,moveDownButton};
  columnsElementViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      enabledButtons(buttons,event.getSelection() != null);
    }
  }
);
  createTableViewerMenu(columnsElementViewer,columnList,buttons);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      columnList.remove(((IStructuredSelection)columnsElementViewer.getSelection()).getFirstElement());
      columnsElementViewer.setInput(columnList);
      enabledButtons(buttons,false);
      masterPage.setDirty(true);
    }
  }
);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,false);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,true);
    }
  }
);
  sortButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      sortElement(columnList,columnsElementViewer);
    }
  }
);
  this.enabledButtons(new Button[]{delButton,moveUpButton,moveDownButton},false);
  final List<Column> columnsOfSectionPart=columnList;
  selectColumnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog(columnsElementViewer,columnsOfSectionPart);
      enabledButtons(buttons,false);
    }
  }
);
  columnSetElementSection.setClient(sectionComp);
  return columnsElementViewer;
}","private TableViewer createSectionPart(Composite parentComp,final List<Column> columnList,String title,String hyperlinkText){
  Section columnSetElementSection=masterPage.createSection(form,parentComp,title,true,null);
  Composite sectionComp=toolkit.createComposite(columnSetElementSection);
  sectionComp.setLayout(new GridLayout());
  Hyperlink selectColumnBtn=toolkit.createHyperlink(sectionComp,hyperlinkText,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(selectColumnBtn);
  Composite columsComp=toolkit.createComposite(sectionComp,SWT.NULL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).grab(true,true).applyTo(columsComp);
  columsComp.setLayout(new GridLayout());
  final TableViewer columnsElementViewer=createTreeViewer(columnList,columsComp);
  tableViewerPosStack.add(columnsElementViewer);
  TableViewerDNDDecorate dndDecorate=new TableViewerDNDDecorate(allowColumnDupcation);
  dndDecorate.installDND(columnsElementViewer,true,TableViewerDNDDecorate.COLUMN_VALIDATETYPE);
  Composite buttonsComp=toolkit.createComposite(columsComp,SWT.NULL);
  buttonsComp.setLayout(new GridLayout(4,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  GridData buttonGridData=new GridData(GridData.FILL_BOTH);
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  Button sortButton=new Button(buttonsComp,SWT.NULL);
  sortButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sortButton.setLayoutData(buttonGridData);
  final Button[] buttons=new Button[]{delButton,moveUpButton,moveDownButton};
  columnsElementViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      enabledButtons(buttons,event.getSelection() != null);
    }
  }
);
  createTableViewerMenu(columnsElementViewer,columnList,buttons);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      columnList.remove(((IStructuredSelection)columnsElementViewer.getSelection()).getFirstElement());
      columnsElementViewer.setInput(columnList);
      enabledButtons(buttons,false);
      masterPage.setDirty(true);
    }
  }
);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,false);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,true);
    }
  }
);
  sortButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      sortElement(columnList,columnsElementViewer);
    }
  }
);
  this.enabledButtons(new Button[]{delButton,moveUpButton,moveDownButton},false);
  final List<Column> columnsOfSectionPart=columnList;
  selectColumnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog(columnsElementViewer,columnsOfSectionPart);
      enabledButtons(buttons,false);
    }
  }
);
  columnSetElementSection.setClient(sectionComp);
  return columnsElementViewer;
}",0.9973067600323188
139617,"public TableViewerDNDDecorate(){
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  transferTypes=new Transfer[]{transfer,TextTransfer.getInstance()};
}","public TableViewerDNDDecorate(boolean allowDuplication){
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  transferTypes=new Transfer[]{transfer,TextTransfer.getInstance()};
  this.allowDuplication=allowDuplication;
}",0.8457943925233645
139618,"@SuppressWarnings(""String_Node_Str"") private static boolean validateColumnType(StructuredSelection selection,TableViewer targetViewer){
  boolean isValidation=true;
  List selectionList=selection.toList();
  List elements=(List)targetViewer.getInput();
  for (  Object element : elements) {
    if (selectionList.contains(element)) {
      isValidation=false;
      break;
    }
  }
  for (  Object obj : selectionList) {
    if (!(obj instanceof Column)) {
      isValidation=false;
      break;
    }
  }
  return isValidation;
}","@SuppressWarnings(""String_Node_Str"") private boolean validateColumnType(StructuredSelection selection,TableViewer targetViewer){
  boolean isValidation=true;
  List selectionList=selection.toList();
  if (!allowDuplication) {
    List elements=(List)targetViewer.getInput();
    for (    Object element : elements) {
      if (selectionList.contains(element)) {
        isValidation=false;
        break;
      }
    }
  }
  for (  Object obj : selectionList) {
    if (!(obj instanceof Column)) {
      isValidation=false;
      break;
    }
  }
  return isValidation;
}",0.941923774954628
139619,"/** 
 * DOC hcheng Comment method ""createAnalysisParamSection"".
 * @param form
 * @param anasisDataComp
 */
void createAnalysisParamSection(final ScrolledForm form,Composite anasisDataComp){
  analysisParamSection=createSection(form,anasisDataComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Composite sectionClient=toolkit.createComposite(analysisParamSection);
  sectionClient.setLayout(new GridLayout(2,false));
  toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  final CCombo execCombo=new CCombo(sectionClient,SWT.BORDER);
  execCombo.setEditable(false);
  for (  ExecutionLanguage language : ExecutionLanguage.VALUES) {
    String temp=language.getLiteral();
    execCombo.add(temp);
  }
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  execCombo.setText(executionLanguage.getLiteral());
  treeViewer.setLanguage(ExecutionLanguage.get(executionLanguage.getLiteral()));
  execCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      execLang=execCombo.getText();
      if (ExecutionLanguage.JAVA.equals(ExecutionLanguage.get(execLang)) && includeUDI()) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        execCombo.setText(ExecutionLanguage.SQL.getLiteral());
        return;
      }
      setDirty(true);
      treeViewer.setLanguage(ExecutionLanguage.get(execLang));
    }
  }
);
  analysisParamSection.setClient(sectionClient);
}","/** 
 * DOC hcheng Comment method ""createAnalysisParamSection"".
 * @param form
 * @param anasisDataComp
 */
void createAnalysisParamSection(final ScrolledForm form,Composite anasisDataComp){
  analysisParamSection=createSection(form,anasisDataComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Composite sectionClient=toolkit.createComposite(analysisParamSection);
  sectionClient.setLayout(new GridLayout(2,false));
  toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  final CCombo execCombo=new CCombo(sectionClient,SWT.BORDER);
  execCombo.setEditable(false);
  for (  ExecutionLanguage language : ExecutionLanguage.VALUES) {
    String temp=language.getLiteral();
    execCombo.add(temp);
  }
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  execCombo.setText(executionLanguage.getLiteral());
  execLang=executionLanguage.getLiteral();
  treeViewer.setLanguage(ExecutionLanguage.get(executionLanguage.getLiteral()));
  execCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      execLang=execCombo.getText();
      if (ExecutionLanguage.JAVA.equals(ExecutionLanguage.get(execLang)) && includeUDI()) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        execCombo.setText(ExecutionLanguage.SQL.getLiteral());
        return;
      }
      setDirty(true);
      treeViewer.setLanguage(ExecutionLanguage.get(execLang));
    }
  }
);
  analysisParamSection.setClient(sectionClient);
}",0.986007159127888
139620,"@Override public boolean handle(Object data){
  super.handle(data);
  if (data != null) {
    if (!this.uniqueObjects.add(data)) {
      duplicateObjects.add(data);
    }
  }
  return true;
}","@Override public boolean handle(Object data){
  super.handle(data);
  if (!this.uniqueObjects.add(data)) {
    duplicateObjects.add(data);
  }
  return true;
}",0.9085714285714286
139621,"/** 
 * DOC scorreia Comment method ""getRegex"".
 * @return
 */
private String getRegex(){
  if (this.parameters != null) {
    final Domain dataValidDomain=parameters.getDataValidDomain();
    if (dataValidDomain != null) {
      final EList<Pattern> patterns=dataValidDomain.getPatterns();
      for (      Pattern p : patterns) {
        if (p != null) {
          final String r=DomainHelper.getSQLRegexp(p);
          return r.substring(1,r.length() - 2);
        }
      }
    }
  }
  return null;
}","/** 
 * DOC scorreia Comment method ""getRegex"".
 * @return
 */
private String getRegex(){
  if (this.parameters != null) {
    final Domain dataValidDomain=parameters.getDataValidDomain();
    if (dataValidDomain != null) {
      final EList<Pattern> patterns=dataValidDomain.getPatterns();
      for (      Pattern p : patterns) {
        if (p != null) {
          final String r=DomainHelper.getSQLRegexp(p);
          if (r != null) {
            int startIdx=('\'' == r.charAt(0)) ? 1 : 0;
            int endIdx=('\'' == r.charAt(r.length() - 1)) ? r.length() - 1 : r.length();
            return r.substring(startIdx,endIdx);
          }
        }
      }
    }
  }
  return null;
}",0.8197820620284996
139622,"private void buildJoinClause(StringBuilder builder,String tableA,String tableAliasA,String columnAName,boolean hasTableAliasA,String tableB,String tableAliasB,String columnBName,boolean hasTableAliasB,String operator){
  if (hasTableAliasA) {
    builder.append(surroundWithSpaces(tableAliasA));
  }
  builder.append(""String_Node_Str"");
  builder.append(surroundWithSpaces(quote(tableB)));
  if (hasTableAliasB) {
    builder.append(surroundWithSpaces(tableAliasB));
  }
  builder.append(""String_Node_Str"");
  String tA=hasTableAliasA ? tableAliasA : quote(tableA);
  String tB=hasTableAliasB ? tableAliasB : quote(tableB);
  String cA=quote(columnAName);
  String cB=quote(columnBName);
  createJoinClause(builder,tA,cA,tB,cB,operator);
}","private void buildJoinClause(StringBuilder builder,String tableA,String tableAliasA,String columnAName,boolean hasTableAliasA,String tableB,String tableAliasB,String columnBName,boolean hasTableAliasB,String operator){
  boolean hasAlreadyOneJoin=builder.toString().contains(this.join());
  if (hasTableAliasA && !hasAlreadyOneJoin) {
    builder.append(surroundWithSpaces(tableAliasA));
  }
  builder.append(join());
  builder.append(surroundWithSpaces(quote(tableB)));
  if (hasTableAliasB) {
    builder.append(surroundWithSpaces(tableAliasB));
  }
  builder.append(""String_Node_Str"");
  String tA=hasTableAliasA ? tableAliasA : quote(tableA);
  String tB=hasTableAliasB ? tableAliasB : quote(tableB);
  String cA=quote(columnAName);
  String cB=quote(columnBName);
  createJoinClause(builder,tA,cA,tB,cB,operator);
}",0.7286722257857601
139623,"/** 
 * Method ""createJoinClause"" appends a join condition to the builder.
 * @param builder
 * @param tableA the name of the table or null
 * @param columnAName a column name (or an alias)
 * @param tableB the name of the second table or null
 * @param columnBName the column name (or an alias)
 * @param operator the operator used in the joinWhen using a column alias instead of a name, the table name must be set to null (because it's not required)
 */
private void createJoinClause(StringBuilder builder,String tableA,String columnAName,String tableB,String columnBName,String operator){
  builder.append('(');
  if (tableA != null) {
    builder.append(surroundWithSpaces(tableA + ""String_Node_Str""));
  }
  builder.append(surroundWithSpaces(columnAName));
  builder.append(operator);
  if (tableB != null) {
    builder.append(surroundWithSpaces(tableB + ""String_Node_Str""));
  }
  builder.append(surroundWithSpaces(columnBName));
  builder.append(')');
}","/** 
 * Method ""createJoinClause"" appends a join condition to the builder.
 * @param builder
 * @param tableA the name of the table or null
 * @param columnAName a column name (or an alias)
 * @param tableB the name of the second table or null
 * @param columnBName the column name (or an alias)
 * @param operator the operator used in the join
 */
private void createJoinClause(StringBuilder builder,String tableA,String columnAName,String tableB,String columnBName,String operator){
  builder.append('(');
  if (tableA != null) {
    builder.append(tableA + ""String_Node_Str"");
  }
  builder.append(columnAName);
  builder.append(operator);
  if (tableB != null) {
    builder.append(tableB + ""String_Node_Str"");
  }
  builder.append(columnBName);
  builder.append(')');
}",0.8922190201729107
139624,"@Override protected void createResultSection(Composite parent){
  resultSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),true,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(resultSection);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  resultSection.setClient(sectionClient);
  Analysis analysis=this.masterPage.getAnalysisHandler().getAnalysis();
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  if (indicators.size() > 0) {
    columnDependencyIndicator=(ColumnDependencyIndicator)indicators.get(0);
  }
  createTable(sectionClient);
  creatChart(sectionClient,analysis);
  resultSection.layout();
}","@Override protected void createResultSection(Composite parent){
  resultSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),true,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(resultSection);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  resultSection.setClient(sectionClient);
  Analysis analysis=this.masterPage.getAnalysisHandler().getAnalysis();
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  if (indicators.size() > 0) {
    columnDependencyIndicator=(ColumnDependencyIndicator)indicators.get(0);
  }
  createTable(sectionClient);
  createChart(sectionClient,analysis);
  resultSection.layout();
}",0.999340804218853
139625,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  anaColumnCompareViewer=new AnalysisColumnCompareTreeViewer((AbstractAnalysisMetadataPage)this,topComp,getColumnLeftSet(),getColumnRightSet(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),false,true);
  anaColumnCompareViewer.addPropertyChangeListener(this);
  createDataFilterSection(form,topComp);
  columnListA=anaColumnCompareViewer.getColumnListA();
  columnListB=anaColumnCompareViewer.getColumnListB();
  columnsComparisonSection=anaColumnCompareViewer.getColumnsComparisonSection();
  anaColumnCompareViewer.addPropertyChangeListener(this);
  currentEditor.registerSections(new Section[]{columnsComparisonSection,dataFilterSection});
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  anaColumnCompareViewer=new AnalysisColumnCompareTreeViewer((AbstractAnalysisMetadataPage)this,topComp,getColumnLeftSet(),getColumnRightSet(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),false,true);
  anaColumnCompareViewer.addPropertyChangeListener(this);
  createDataFilterSection(form,topComp);
  columnListA=anaColumnCompareViewer.getColumnListA();
  columnListB=anaColumnCompareViewer.getColumnListB();
  columnsComparisonSection=anaColumnCompareViewer.getColumnsComparisonSection();
  anaColumnCompareViewer.addPropertyChangeListener(this);
  currentEditor.registerSections(new Section[]{columnsComparisonSection,dataFilterSection});
  foldingSections(new Section[]{metadataSection,columnsComparisonSection,dataFilterSection});
}",0.9580357142857144
139626,"@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  final SashForm sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  createAnalysisParamSection(form,topComp);
  Composite previewComp=toolkit.createComposite(sForm);
  previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewComp.setLayout(new GridLayout());
  previewComp.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      super.controlResized(e);
      sForm.redraw();
      form.reflow(true);
    }
  }
);
  createPreviewSection(form,previewComp);
  foldingSections(new Section[]{metadataSection,analysisColumnSection,dataFilterSection});
  currentEditor.registerSections(new Section[]{analysisColumnSection,metadataSection,dataFilterSection,analysisParamSection,previewSection});
}","@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  final SashForm sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  createAnalysisParamSection(form,topComp);
  Composite previewComp=toolkit.createComposite(sForm);
  previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewComp.setLayout(new GridLayout());
  previewComp.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      super.controlResized(e);
      sForm.redraw();
      form.reflow(true);
    }
  }
);
  createPreviewSection(form,previewComp);
  foldingSections(new Section[]{metadataSection,analysisColumnSection,dataFilterSection,analysisParamSection,previewSection});
  currentEditor.registerSections(new Section[]{analysisColumnSection,metadataSection,dataFilterSection,analysisParamSection,previewSection});
}",0.9879919946631088
139627,"/** 
 * yyi 2009-09-16 To check the expression is null, empty or less than 16 characters Feature : 8866
 */
public static boolean verifyExpression(IndicatorDefinition indicatorDefinition){
  if (0 == indicatorDefinition.getSqlGenericExpression().size()) {
    return false;
  }
  for (  Expression exp : indicatorDefinition.getSqlGenericExpression()) {
    if (null == exp.getBody()) {
      return false;
    }
 else     if (16 > exp.getBody().length()) {
      return false;
    }
  }
  return true;
}","/** 
 * yyi 2009-09-22 To check the expression is null, empty or less than 16 characters Feature : 8866
 */
public static boolean verifyExpression(IndicatorDefinition indicatorDefinition){
  if (0 == indicatorDefinition.getSqlGenericExpression().size()) {
    return false;
  }
  for (  Expression exp : indicatorDefinition.getSqlGenericExpression()) {
    if (null == exp.getBody()) {
      return false;
    }
 else     if (16 > exp.getBody().length() && !""String_Node_Str"".equals(exp.getBody())) {
      return false;
    }
  }
  return true;
}",0.9542857142857144
139628,"public void save(){
  ImplementationHelper.getRepositoryManager().save();
}","public void save(){
}",0.4375
139629,"public void refresh(){
  ImplementationHelper.getRepositoryManager().refresh();
}","public void refresh(){
}",0.4571428571428571
139630,"@Override public boolean reset(){
  this.setValue(VALUE_EDEFAULT);
  this.frequenceTable.clear();
  return super.reset();
}","@Override public boolean reset(){
  this.computed=COMPUTED_EDEFAULT;
  this.setValue(VALUE_EDEFAULT);
  this.frequenceTable.clear();
  return super.reset();
}",0.8754448398576512
139631,"@Override public boolean handle(Object data){
  this.setComputed(COMPUTED_EDEFAULT);
  boolean ok=super.handle(data);
  if (data == null) {
    return ok;
  }
  return ok && AlgoUtils.incrementValueCounts(data,this.frequenceTable);
}","@Override public boolean handle(Object data){
  boolean ok=super.handle(data);
  if (data == null) {
    return ok;
  }
  return ok && AlgoUtils.incrementValueCounts(data,this.frequenceTable);
}",0.9086651053864168
139632,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount();
  if (c.compareTo(0L) == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Double sum=null;
  try {
    sum=Double.valueOf(getSumStr());
  }
 catch (  Exception e) {
    sum=Double.valueOf(0);
  }
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return sum / c;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount() - getNullCount();
  if (c.compareTo(0L) == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Double sum=null;
  try {
    sum=Double.valueOf(getSumStr());
  }
 catch (  Exception e) {
    return Double.NaN;
  }
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return sum / c;
}",0.952601156069364
139633,"@Override public boolean handle(Object data){
  medianComputed=false;
  boolean ok=super.handle(data);
  if (data == null) {
    return ok;
  }
  return ok && AlgoUtils.incrementValueCounts(data,this.getFrequenceTable());
}","@Override public boolean handle(Object data){
  boolean ok=super.handle(data);
  if (data == null) {
    return ok;
  }
  return ok && AlgoUtils.incrementValueCounts(data,this.getFrequenceTable());
}",0.943127962085308
139634,"@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  int javaType=this.getColumnType();
  if (objects.size() == 1) {
    String med=String.valueOf(objects.get(0)[0]);
    if (med == null) {
      log.error(""String_Node_Str"");
      return false;
    }
    this.setMedian(MedianIndicatorImpl.getRealValue(javaType,med));
    return true;
  }
 else   if (objects.size() == 2) {
    Double r1=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(0)[0]));
    Double r2=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(1)[0]));
    if (r1 == null || r2 == null) {
      log.error(""String_Node_Str"" + r1 + ""String_Node_Str""+ r2);
      return false;
    }
    this.setMedian((r1 + r2) / 2);
    this.medianComputed=true;
    return true;
  }
  return false;
}","@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  int javaType=this.getColumnType();
  if (objects.size() == 1) {
    String med=String.valueOf(objects.get(0)[0]);
    if (med == null) {
      log.error(""String_Node_Str"");
      return false;
    }
    this.setMedian(MedianIndicatorImpl.getRealValue(javaType,med));
    return true;
  }
 else   if (objects.size() == 2) {
    Double r1=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(0)[0]));
    Double r2=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(1)[0]));
    if (r1 == null || r2 == null) {
      log.error(""String_Node_Str"" + r1 + ""String_Node_Str""+ r2);
      return false;
    }
    this.setMedian((r1 + r2) / 2);
    return true;
  }
  return false;
}",0.9822695035460992
139635,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMedian(){
  if (!medianComputed) {
    computeMedian();
  }
  return getMedianGen();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public Double getMedian(){
  return median;
}",0.7837837837837838
139636,"@Override public boolean reset(){
  this.median=MEDIAN_EDEFAULT;
  if (frequenceTable != null) {
    this.frequenceTable.clear();
  }
  this.computed=false;
  this.medianComputed=false;
  return super.reset();
}","@Override public boolean reset(){
  this.median=MEDIAN_EDEFAULT;
  if (frequenceTable != null) {
    this.frequenceTable.clear();
  }
  this.computed=COMPUTED_EDEFAULT;
  return super.reset();
}",0.8790123456790123
139637,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public boolean computeMedian(){
  medianComputed=computeNumericMedian();
  return medianComputed;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public boolean computeMedian(){
  return computeNumericMedian();
}",0.8643533123028391
139638,"@Override public boolean finalizeComputation(){
  boolean ok=super.finalizeComputation();
  if (genericSum == null) {
    return false;
  }
  this.sumStr=genericSum.getAsString();
  return ok;
}","@Override public boolean finalizeComputation(){
  boolean ok=super.finalizeComputation();
  if (genericSum == null) {
    return false;
  }
  this.sumStr=genericSum.getAsString();
  int javaType=this.getColumnType();
  this.setDatatype(javaType);
  return ok;
}",0.8527472527472527
139639,"void reset(){
  this.sum=getDefaultValue();
}","@Override public boolean reset(){
  if (genericSum != null) {
    this.genericSum.reset();
  }
  this.sumStr=SUM_STR_EDEFAULT;
  this.computed=COMPUTED_EDEFAULT;
  return super.reset();
}",0.2844827586206896
139640,"@Override public boolean reset(){
  this.setValue(VALUE_EDEFAULT);
  this.frequenceTable.clear();
  return super.reset();
}","@Override public boolean reset(){
  this.computed=COMPUTED_EDEFAULT;
  this.setValue(VALUE_EDEFAULT);
  this.frequenceTable.clear();
  return super.reset();
}",0.8754448398576512
139641,"@Override public boolean handle(Object data){
  this.setComputed(COMPUTED_EDEFAULT);
  boolean ok=super.handle(data);
  if (data == null) {
    return ok;
  }
  return ok && AlgoUtils.incrementValueCounts(data,this.frequenceTable);
}","@Override public boolean handle(Object data){
  boolean ok=super.handle(data);
  if (data == null) {
    return ok;
  }
  return ok && AlgoUtils.incrementValueCounts(data,this.frequenceTable);
}",0.9086651053864168
139642,"/** 
 * DOC scorreia Comment method ""getYearCharacters"".
 * @param label
 * @return
 */
private String getYearCharacters(String label){
  return label.substring(0,4);
}","/** 
 * DOC scorreia Comment method ""getYearCharacters"".
 * @param label
 * @return
 */
private String getYearCharacters(String label){
  if (label.equals(""String_Node_Str"")) {
    return null;
  }
 else {
    return label.substring(0,4);
  }
}",0.8155339805825242
139643,"@Override public Color getForeground(Object element,int columnIndex){
  PatternChartDataEntity entity=(PatternChartDataEntity)element;
  String currentText=getColumnText(element,columnIndex);
  boolean isCurrentCol=currentText.equals(entity.getNumMatch()) || currentText.equals(entity.getNumNoMatch()) || currentText.equals(entity.getPerMatch())|| currentText.equals(entity.getPerNoMatch());
  if (isCurrentCol && entity.isOutOfRange(currentText)) {
    return Display.getDefault().getSystemColor(SWT.COLOR_RED);
  }
  return null;
}","@Override public Color getForeground(Object element,int columnIndex){
  PatternChartDataEntity entity=(PatternChartDataEntity)element;
  String currentText=getColumnText(element,columnIndex);
  boolean isCurrentCol=currentText.equals(entity.getNumMatch()) || currentText.equals(entity.getPerMatch());
  if (isCurrentCol && entity.isOutOfRange(currentText)) {
    return Display.getDefault().getSystemColor(SWT.COLOR_RED);
  }
  return null;
}",0.9066666666666666
139644,"@Override public Image getColumnImage(Object element,int columnIndex){
  PatternChartDataEntity entity=(PatternChartDataEntity)element;
  String currentText=getColumnText(element,columnIndex);
  boolean isCurrentCol=currentText.equals(entity.getNumMatch()) || currentText.equals(entity.getNumNoMatch()) || currentText.equals(entity.getPerMatch())|| currentText.equals(entity.getPerNoMatch());
  if (isCurrentCol && entity.isOutOfRange(currentText)) {
    return ImageLib.getImage(ImageLib.LEVEL_WARNING);
  }
  return null;
}","@Override public Image getColumnImage(Object element,int columnIndex){
  PatternChartDataEntity entity=(PatternChartDataEntity)element;
  String currentText=getColumnText(element,columnIndex);
  boolean isCurrentCol=currentText.equals(entity.getNumMatch()) || currentText.equals(entity.getPerMatch());
  if (isCurrentCol && entity.isOutOfRange(currentText)) {
    return ImageLib.getImage(ImageLib.LEVEL_WARNING);
  }
  return null;
}",0.9051094890510948
139645,"protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,getMetadataTitle(),true,""String_Node_Str"");
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(NAME_LABEL,nameText,parent);
  purposeText=createMetadataTextFiled(PURPOSE_LABEL,purposeText,parent);
  descriptionText=createMetadataTextFiled(DESCRIPTION_LABEL,descriptionText,parent);
  authorText=createMetadataTextFiled(AUTHOR_LABEL,authorText,parent);
  toolkit.createLabel(parent,STATUS_LABEL);
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  for (  DevelopmentStatus status : DevelopmentStatus.values()) {
    statusCombo.add(status.getLiteral());
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  section.setClient(parent);
  return section;
}","protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,getMetadataTitle(),true,""String_Node_Str"");
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(NAME_LABEL,nameText,parent);
  purposeText=createMetadataTextFiled(PURPOSE_LABEL,purposeText,parent);
  descriptionText=createMetadataTextFiled(DESCRIPTION_LABEL,descriptionText,parent);
  authorText=createMetadataTextFiled(AUTHOR_LABEL,authorText,parent);
  authorText.setEditable(isDefaultProject());
  toolkit.createLabel(parent,STATUS_LABEL);
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  for (  DevelopmentStatus status : DevelopmentStatus.values()) {
    statusCombo.add(status.getLiteral());
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  section.setClient(parent);
  return section;
}",0.9853503184713376
139646,"public void createControl(Composite parent){
  if (getParameter().getFolderProvider() == null || getParameter().getFolderProvider().isNull()) {
    FolderProvider defaultFolder=new FolderProvider();
    defaultFolder.setFolderResource(getStoredFolder());
    getParameter().setFolderProvider(defaultFolder);
  }
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label purposeLab=new Label(container,SWT.NONE);
  purposeLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  purposeText=new Text(container,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label descriptionLab=new Label(container,SWT.NONE);
  descriptionLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  Label authorLab=new Label(container,SWT.NONE);
  authorLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  authorText=new Text(container,SWT.BORDER);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  String author=ReponsitoryContextBridge.getAuthor();
  authorText.setText(author);
  getParameter().setAuthor(author);
  Label statusLab=new Label(container,SWT.NONE);
  statusLab.setText(""String_Node_Str"");
  statusText=new CCombo(container,SWT.BORDER);
  statusText.setText(DevelopmentStatus.DRAFT.getLiteral());
  statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  statusText.setEditable(false);
  for (  DevelopmentStatus status : DevelopmentStatus.values()) {
    statusText.add(status.getLiteral());
  }
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createExtendedControl(container);
  addListeners();
  setControl(container);
}","public void createControl(Composite parent){
  if (getParameter().getFolderProvider() == null || getParameter().getFolderProvider().isNull()) {
    FolderProvider defaultFolder=new FolderProvider();
    defaultFolder.setFolderResource(getStoredFolder());
    getParameter().setFolderProvider(defaultFolder);
  }
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label purposeLab=new Label(container,SWT.NONE);
  purposeLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  purposeText=new Text(container,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label descriptionLab=new Label(container,SWT.NONE);
  descriptionLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  Label authorLab=new Label(container,SWT.NONE);
  authorLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  authorText=new Text(container,SWT.BORDER);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  String author=ReponsitoryContextBridge.getAuthor();
  authorText.setText(author);
  getParameter().setAuthor(author);
  authorText.setEditable(isDefaultProject());
  Label statusLab=new Label(container,SWT.NONE);
  statusLab.setText(""String_Node_Str"");
  statusText=new CCombo(container,SWT.BORDER);
  statusText.setText(DevelopmentStatus.DRAFT.getLiteral());
  statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  statusText.setEditable(false);
  for (  DevelopmentStatus status : DevelopmentStatus.values()) {
    statusText.add(status.getLiteral());
  }
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createExtendedControl(container);
  addListeners();
  setControl(container);
}",0.991921320688444
139647,"/** 
 * DOC yyi 2009-09-11 Feature:9030
 * @param expressComp
 * @param patternText
 * @return
 */
private void createExpressionEditButton(Composite expressComp,final Text patternText){
  Button editButton=new Button(expressComp,SWT.PUSH);
  editButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String[] templates=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      ExpressionEditDialog editDialog=new ExpressionEditDialog(null,patternText.getText(),templates);
      editDialog.open();
      if (Dialog.OK == editDialog.getReturnCode()) {
        patternText.setText(editDialog.getResult());
      }
    }
  }
);
}","/** 
 * DOC yyi 2009-09-11 Feature:9030
 * @param expressComp
 * @param patternText
 * @return
 */
private void createExpressionEditButton(Composite expressComp,final Text patternText){
  Button editButton=new Button(expressComp,SWT.PUSH);
  editButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String[] templates=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      ExpressionEditDialog editDialog=new ExpressionEditDialog(null,patternText.getText(),templates);
      editDialog.open();
      if (Dialog.OK == editDialog.getReturnCode() && !patternText.getText().equals(editDialog.getResult())) {
        patternText.setText(editDialog.getResult());
      }
    }
  }
);
}",0.96862960924601
139648,"@Override public boolean handle(Object data){
  boolean ok=super.handle(data);
  if (isGreater(data)) {
    this.value=String.valueOf(data);
  }
  return ok;
}","@Override public boolean handle(Object data){
  boolean ok=super.handle(data);
  if (isGreater(data) || null == this.value) {
    this.value=String.valueOf(data);
  }
  return ok;
}",0.9352941176470588
139649,"@Override public boolean handle(Object data){
  boolean ok=super.handle(data);
  if (isLess(data)) {
    this.value=String.valueOf(data);
  }
  return ok;
}","@Override public boolean handle(Object data){
  boolean ok=super.handle(data);
  if (isLess(data) || null == this.value) {
    this.value=String.valueOf(data);
  }
  return ok;
}",0.934131736526946
139650,"private void init(){
  modleElementSuffixs=new ArrayList<String>();
  modleElementSuffixs.add(FactoriesUtil.ANA);
  modleElementSuffixs.add(FactoriesUtil.REP);
  modleElementSuffixs.add(FactoriesUtil.PROV);
  modleElementSuffixs.add(FactoriesUtil.SQL);
  modleElementSuffixs.add(FactoriesUtil.DQRULE);
  modleElementSuffixs.add(FactoriesUtil.PATTERN);
}","private void init(){
  modleElementSuffixs=new ArrayList<String>();
  modleElementSuffixs.add(FactoriesUtil.ANA);
  modleElementSuffixs.add(FactoriesUtil.REP);
  modleElementSuffixs.add(FactoriesUtil.PROV);
  modleElementSuffixs.add(FactoriesUtil.SQL);
  modleElementSuffixs.add(FactoriesUtil.UDI);
  modleElementSuffixs.add(FactoriesUtil.DQRULE);
  modleElementSuffixs.add(FactoriesUtil.PATTERN);
}",0.9388297872340424
139651,"@SuppressWarnings(""String_Node_Str"") protected String getFreqRowsStatement(){
  String clause=""String_Node_Str"";
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getJavaType();
  if (Java2SqlType.isTextInSQL(javaType)) {
    clause=getInstantiatedClause();
  }
 else   if (Java2SqlType.isDateInSQL(javaType)) {
    IndicatorParameters parameters=indicator.getParameters();
    DateGrain dateGrain=parameters.getDateParameters().getDateAggregationType();
switch (dateGrain) {
case DAY:
      clause=dbmsLanguage.extractDay(this.columnName) + dbmsLanguage.equal() + getDayCharacters(entity.getLabel());
case WEEK:
    if (clause.length() == 0) {
      clause=concatWhereClause(clause,dbmsLanguage.extractWeek(this.columnName) + dbmsLanguage.equal() + getWeekCharacters(entity.getLabel()));
    }
case MONTH:
  clause=concatWhereClause(clause,dbmsLanguage.extractMonth(this.columnName) + dbmsLanguage.equal() + getMonthCharacters(dateGrain,entity.getLabel()));
case QUARTER:
if (clause.length() == 0) {
  clause=concatWhereClause(clause,dbmsLanguage.extractQuarter(this.columnName) + dbmsLanguage.equal() + getQuarterCharacters(entity.getLabel()));
}
case YEAR:
clause=concatWhereClause(clause,dbmsLanguage.extractYear(this.columnName) + dbmsLanguage.equal() + getYearCharacters(entity.getLabel()));
break;
case NONE:
default :
clause=getDefaultQuotedStatement(""String_Node_Str"");
break;
}
}
 else if (Java2SqlType.isNumbericInSQL(javaType)) {
IndicatorParameters parameters=indicator.getParameters();
if (parameters != null) {
Domain bins=parameters.getBins();
if (bins != null) {
final EList<RangeRestriction> ranges=bins.getRanges();
for (RangeRestriction rangeRestriction : ranges) {
if (entity.getLabel() != null && entity.getLabel().equals(rangeRestriction.getName())) {
clause=createWhereClause(rangeRestriction);
break;
}
}
}
 else {
clause=getInstantiatedClause();
}
}
 else {
clause=getInstantiatedClause();
}
}
 else {
clause=getDefaultQuotedStatement(""String_Node_Str"");
}
return ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(clause)+ andDataFilterClause();
}","@SuppressWarnings(""String_Node_Str"") protected String getFreqRowsStatement(){
  String clause=""String_Node_Str"";
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getJavaType();
  if (Java2SqlType.isTextInSQL(javaType)) {
    clause=getInstantiatedClause();
  }
 else   if (Java2SqlType.isDateInSQL(javaType)) {
    IndicatorParameters parameters=indicator.getParameters();
    DateGrain dateGrain=parameters.getDateParameters().getDateAggregationType();
switch (dateGrain) {
case DAY:
      clause=dbmsLanguage.extractDay(this.columnName) + dbmsLanguage.equal() + getDayCharacters(entity.getLabel());
case WEEK:
    if (clause.length() == 0) {
      clause=concatWhereClause(clause,dbmsLanguage.extractWeek(this.columnName) + dbmsLanguage.equal() + getWeekCharacters(entity.getLabel()));
    }
case MONTH:
  clause=concatWhereClause(clause,dbmsLanguage.extractMonth(this.columnName) + dbmsLanguage.equal() + getMonthCharacters(dateGrain,entity.getLabel()));
case QUARTER:
if (clause.length() == 0) {
  clause=concatWhereClause(clause,dbmsLanguage.extractQuarter(this.columnName) + dbmsLanguage.equal() + getQuarterCharacters(entity.getLabel()));
}
case YEAR:
clause=concatWhereClause(clause,buildWhereClause());
break;
case NONE:
default :
clause=getDefaultQuotedStatement(""String_Node_Str"");
break;
}
}
 else if (Java2SqlType.isNumbericInSQL(javaType)) {
IndicatorParameters parameters=indicator.getParameters();
if (parameters != null) {
Domain bins=parameters.getBins();
if (bins != null) {
final EList<RangeRestriction> ranges=bins.getRanges();
for (RangeRestriction rangeRestriction : ranges) {
if (entity.getLabel() != null && entity.getLabel().equals(rangeRestriction.getName())) {
clause=createWhereClause(rangeRestriction);
break;
}
}
}
 else {
clause=getInstantiatedClause();
}
}
 else {
clause=getInstantiatedClause();
}
}
 else {
clause=getDefaultQuotedStatement(""String_Node_Str"");
}
return ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(clause)+ andDataFilterClause();
}",0.9726516052318668
139652,"/** 
 * DOC xqliu Comment method ""createTable"".
 * @param parent
 */
private Table createTable(Composite parent){
  int style=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.HIDE_SELECTION;
  final Table table=new Table(parentComposite,style);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  for (int i=0; i < headers.length; ++i) {
    TableColumn tableColumn=new TableColumn(table,SWT.LEFT,i);
    tableColumn.setText(headers[i]);
    tableColumn.setWidth(widths[i]);
  }
  myTableViewer=new TableViewer(table);
  myTableViewer.setUseHashlookup(true);
  myTableViewer.setColumnProperties(headers);
  CellEditor[] editors=new CellEditor[headers.length];
  for (int i=0; i < editors.length; ++i) {
switch (i) {
case 1:
case 3:
case 6:
case 8:
      editors[i]=new TextCellEditor(table);
    break;
case 4:
  editors[i]=new ComboBoxCellEditor(table,OPERATORS,SWT.READ_ONLY);
break;
default :
editors[i]=null;
}
}
myTableViewer.setCellEditors(editors);
myTableViewer.setCellModifier(new JoinElementCellModifier(headers,myTableViewer));
myTableViewer.setContentProvider(new JoinElementContentProvider());
myTableViewer.setLabelProvider(new JoinElementLabelProvider());
myTableViewer.setInput(this.myJoinElement);
ColumnViewerDND.installDND(table);
table.setData(this);
GridData tableGD=new GridData(GridData.FILL_BOTH);
tableGD.heightHint=130;
table.setLayoutData(tableGD);
return table;
}","/** 
 * DOC xqliu Comment method ""createTable"".
 * @param parent
 */
private Table createTable(Composite parent){
  int style=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.HIDE_SELECTION;
  final Table table=new Table(parentComposite,style);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  for (int i=0; i < headers.length; ++i) {
    TableColumn tableColumn=new TableColumn(table,SWT.LEFT,i);
    tableColumn.setText(headers[i]);
    tableColumn.setWidth(widths[i]);
  }
  myTableViewer=new TableViewer(table);
  myTableViewer.setUseHashlookup(true);
  myTableViewer.setColumnProperties(headers);
  CellEditor[] editors=new CellEditor[headers.length];
  for (int i=0; i < editors.length; ++i) {
switch (i) {
case 1:
case 3:
case 6:
case 8:
      editors[i]=new TextCellEditor(table);
    break;
case 4:
  editors[i]=new ComboBoxCellEditor(table,OPERATORS,SWT.READ_ONLY);
break;
default :
editors[i]=null;
}
}
myTableViewer.setCellEditors(editors);
myTableViewer.setCellModifier(new JoinElementCellModifier(headers,myTableViewer));
myTableViewer.setContentProvider(new JoinElementContentProvider());
myTableViewer.setLabelProvider(new JoinElementLabelProvider());
myTableViewer.setInput(this.myJoinElement);
table.setMenu(createMenus(table));
ColumnViewerDND.installDND(table);
table.setData(this);
GridData tableGD=new GridData(GridData.FILL_BOTH);
tableGD.heightHint=130;
table.setLayoutData(tableGD);
return table;
}",0.988391376451078
139653,"private void createAnalyzedColumnSetsSection(String mainTitle,String description){
  columnsComparisonSection=masterPage.createSection(form,parentComp,mainTitle,false,description);
  Composite sectionClient=toolkit.createComposite(columnsComparisonSection);
  sectionClient.setLayout(new GridLayout());
  if (showCheckButton) {
    checkComputeButton=new Button(sectionClient,SWT.CHECK);
    GridData layoutData=new GridData(GridData.FILL_BOTH);
    layoutData.horizontalAlignment=SWT.CENTER;
    checkComputeButton.setLayoutData(layoutData);
    checkComputeButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    checkComputeButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    checkComputeButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        setDirty(true);
      }
    }
);
    checkComputeButton.setSelection(checkComputButton);
  }
  Composite columnComp=toolkit.createComposite(sectionClient);
  columnComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  columnComp.setLayout(new GridLayout());
  masterPage.createConnBindWidget(columnComp);
  SashForm sashForm=new SashForm(sectionClient,SWT.NULL);
  sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  String hyperlinkTextLeft=null;
  String hyperlinkTextRight=null;
  if (masterPage instanceof ColumnDependencyMasterDetailsPage) {
    hyperlinkTextLeft=DefaultMessagesImpl.getString(""String_Node_Str"");
    hyperlinkTextRight=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
 else {
    hyperlinkTextLeft=DefaultMessagesImpl.getString(""String_Node_Str"");
    hyperlinkTextRight=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  Composite leftComp=toolkit.createComposite(sashForm);
  leftComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  leftComp.setLayout(new GridLayout());
  leftTable=this.createSectionPart(leftComp,columnListA,DefaultMessagesImpl.getString(""String_Node_Str""),hyperlinkTextLeft);
  Composite rightComp=toolkit.createComposite(sashForm);
  rightComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  rightComp.setLayout(new GridLayout());
  rightTable=this.createSectionPart(rightComp,columnListB,DefaultMessagesImpl.getString(""String_Node_Str""),hyperlinkTextRight);
  updateBindConnection(masterPage,tableViewerPosStack);
  columnsComparisonSection.setClient(sectionClient);
}","private void createAnalyzedColumnSetsSection(String mainTitle,String description){
  columnsComparisonSection=masterPage.createSection(form,parentComp,mainTitle,false,description);
  Composite sectionClient=toolkit.createComposite(columnsComparisonSection);
  sectionClient.setLayout(new GridLayout());
  if (showCheckButton) {
    checkComputeButton=new Button(sectionClient,SWT.CHECK);
    GridData layoutData=new GridData(GridData.FILL_BOTH);
    layoutData.horizontalAlignment=SWT.CENTER;
    checkComputeButton.setLayoutData(layoutData);
    checkComputeButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    checkComputeButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    checkComputeButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        masterPage.setDirty(true);
      }
    }
);
    checkComputeButton.setSelection(checkComputButton);
  }
  Composite columnComp=toolkit.createComposite(sectionClient);
  columnComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  columnComp.setLayout(new GridLayout());
  masterPage.createConnBindWidget(columnComp);
  SashForm sashForm=new SashForm(sectionClient,SWT.NULL);
  sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  String hyperlinkTextLeft=null;
  String hyperlinkTextRight=null;
  if (masterPage instanceof ColumnDependencyMasterDetailsPage) {
    hyperlinkTextLeft=DefaultMessagesImpl.getString(""String_Node_Str"");
    hyperlinkTextRight=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
 else {
    hyperlinkTextLeft=DefaultMessagesImpl.getString(""String_Node_Str"");
    hyperlinkTextRight=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  Composite leftComp=toolkit.createComposite(sashForm);
  leftComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  leftComp.setLayout(new GridLayout());
  leftTable=this.createSectionPart(leftComp,columnListA,DefaultMessagesImpl.getString(""String_Node_Str""),hyperlinkTextLeft);
  Composite rightComp=toolkit.createComposite(sashForm);
  rightComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  rightComp.setLayout(new GridLayout());
  rightTable=this.createSectionPart(rightComp,columnListB,DefaultMessagesImpl.getString(""String_Node_Str""),hyperlinkTextRight);
  updateBindConnection(masterPage,tableViewerPosStack);
  columnsComparisonSection.setClient(sectionClient);
}",0.9977030695343496
139654,"/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param skip
 * @param rename
 * @return
 */
public static String importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  String information=""String_Node_Str"";
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    String name=""String_Node_Str"";
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readRecord()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information=""String_Node_Str"" + name + ""String_Node_Str"";
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        createAndStoreUDI(udiParameters,selectionFolder);
        names.add(name);
        information=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information=""String_Node_Str"" + name + ""String_Node_Str"";
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
    }
catch (    IOException e) {
      log.error(e,e);
    }
  }
  return information;
}","/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param skip
 * @param rename
 * @return
 */
public static List<String> importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  List<String> information=new ArrayList<String>();
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    String name=""String_Node_Str"";
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readRecord()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information.add(""String_Node_Str"" + name + ""String_Node_Str"");
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        createAndStoreUDI(udiParameters,selectionFolder);
        names.add(name);
        information.add(""String_Node_Str"" + name + ""String_Node_Str"");
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information.add(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
    }
catch (    IOException e) {
      log.error(e,e);
    }
  }
  return information;
}",0.9898884603356616
139655,"public static String importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  StringBuffer importInformation=new StringBuffer();
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importInformation.append(""String_Node_Str"" + name + ""String_Node_Str"");
            importInformation.append(""String_Node_Str"");
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        String relativePath=createAndStorePattern(patternParameters,selectionFolder,type);
        names.add(name);
        importInformation.append(""String_Node_Str"" + name + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
        importInformation.append(""String_Node_Str"");
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importInformation.append(""String_Node_Str"");
      importInformation.append(""String_Node_Str"");
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importInformation.append(""String_Node_Str"" + contents + ""String_Node_Str"");
                importInformation.append(""String_Node_Str"");
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importInformation.append(""String_Node_Str"" + contents + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
            importInformation.append(""String_Node_Str"");
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importInformation.append(""String_Node_Str"");
      importInformation.append(""String_Node_Str"");
    }
catch (    IOException e) {
      log.error(e,e);
      importInformation.append(""String_Node_Str"");
      importInformation.append(""String_Node_Str"");
    }
  }
  return importInformation.toString();
}","public static List<String> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  List<String> importInformation=new ArrayList<String>();
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importInformation.add(""String_Node_Str"" + name + ""String_Node_Str"");
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
        names.add(name);
        importInformation.add(""String_Node_Str"" + name + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importInformation.add(""String_Node_Str"");
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importInformation.add(""String_Node_Str"" + contents + ""String_Node_Str"");
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importInformation.add(""String_Node_Str"" + contents + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importInformation.add(""String_Node_Str"");
    }
catch (    IOException e) {
      log.error(e,e);
      importInformation.add(""String_Node_Str"");
    }
  }
  return importInformation;
}",0.9418857481715754
139656,"public void run(){
  ImportInfoDialog.openImportInformation(null,information);
}","public void run(){
  ImportInfoDialog.openImportInformation(null,""String_Node_Str"",(String[])information.toArray(new String[0]));
}",0.7582938388625592
139657,"@Override public boolean performFinish(){
  File file=new File(page.getSourceFile());
  final StringBuffer information=new StringBuffer();
  information.append(ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename()));
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      ImportInfoDialog.openImportInformation(null,information);
    }
  }
);
  return true;
}","@Override public boolean performFinish(){
  File file=new File(page.getSourceFile());
  final List<String> information=ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename());
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      ImportInfoDialog.openImportInformation(null,""String_Node_Str"",(String[])information.toArray(new String[0]));
    }
  }
);
  return true;
}",0.7272727272727273
139658,"private void updateUI(IJobChangeEvent event){
  final StringBuffer information=new StringBuffer();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      File file=new File(componet.getInstalledLocation());
      List<File> files=new ArrayList<File>();
      extractFiles(file,files);
      ExpressionType type=ExpressionType.REGEXP;
      IFolder folder=getFolder(DQStructureManager.PATTERNS);
      if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.SQL_LIKE;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.SQL);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=null;
      }
      for (      File oneFile : files) {
        if (type == null) {
          IFolder udiFolder=getFolder(DQStructureManager.INDICATORS).getFolder(DQStructureManager.USER_DEFINED_INDICATORS);
          information.append(ImportFactory.importIndicatorToStucture(oneFile,udiFolder,true,true));
        }
 else {
          information.append(ImportFactory.importToStucture(oneFile,folder,type,true,true));
        }
        information.append(""String_Node_Str"");
      }
    }
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(null,information);
      }
    }
);
    CorePlugin.getDefault().refreshDQView();
  }
}","private void updateUI(IJobChangeEvent event){
  final List<String> information=new ArrayList<String>();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      File file=new File(componet.getInstalledLocation());
      List<File> files=new ArrayList<File>();
      extractFiles(file,files);
      ExpressionType type=ExpressionType.REGEXP;
      IFolder folder=getFolder(DQStructureManager.PATTERNS);
      if (""String_Node_Str"".equalsIgnoreCase(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(componet.getCategry().getName())) {
        type=ExpressionType.SQL_LIKE;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.SQL);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(componet.getCategry().getName())) {
        type=null;
      }
      for (      File oneFile : files) {
        if (type == null) {
          IFolder udiFolder=getFolder(DQStructureManager.INDICATORS).getFolder(DQStructureManager.USER_DEFINED_INDICATORS);
          information.addAll(ImportFactory.importIndicatorToStucture(oneFile,udiFolder,true,true));
        }
 else {
          information.addAll(ImportFactory.importToStucture(oneFile,folder,type,true,true));
        }
      }
    }
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(null,""String_Node_Str"",(String[])information.toArray(new String[0]));
      }
    }
);
    CorePlugin.getDefault().refreshDQView();
  }
}",0.8790343741800053
139659,"/** 
 * DOC Administrator ImportInfoDialog constructor comment.
 * @param parentShell
 * @param dialogTitle
 * @param dialogTitleImage
 * @param dialogMessage
 * @param dialogImageType
 * @param dialogButtonLabels
 * @param defaultIndex
 */
public ImportInfoDialog(Shell parentShell,String dialogTitle,Image dialogTitleImage,String dialogMessage,int dialogImageType,String[] dialogButtonLabels,int defaultIndex,StringBuffer information){
  super(parentShell,dialogTitle,dialogTitleImage,dialogMessage,dialogImageType,dialogButtonLabels,defaultIndex);
  this.information=information;
}","/** 
 * DOC Administrator ImportInfoDialog constructor comment.
 * @param parentShell
 * @param dialogTitle
 * @param dialogTitleImage
 * @param dialogMessage
 * @param dialogImageType
 * @param dialogButtonLabels
 * @param defaultIndex
 */
public ImportInfoDialog(Shell parentShell,String dialogTitle,Image dialogTitleImage,String dialogMessage,int dialogImageType,String[] dialogButtonLabels,int defaultIndex,String[] information){
  super(parentShell,dialogTitle,dialogTitleImage,dialogMessage,dialogImageType,dialogButtonLabels,defaultIndex);
  this.information=information;
}",0.993127147766323
139660,"/** 
 * DOC yyi Comment method ""openInformationDialog"".
 * @param information
 */
public static void openImportInformation(Shell parent,StringBuffer information){
  String message=""String_Node_Str"";
  ImportInfoDialog dialog=new ImportInfoDialog(parent,""String_Node_Str"",null,message,INFORMATION,new String[]{IDialogConstants.OK_LABEL},0,information);
  dialog.setShellStyle(SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.MAX| SWT.RESIZE);
  dialog.open();
  return;
}","/** 
 * DOC yyi Comment method ""openInformationDialog"".
 * @param information
 */
public static void openImportInformation(Shell parent,String message,String[] information){
  ImportInfoDialog dialog=new ImportInfoDialog(parent,""String_Node_Str"",null,message,INFORMATION,new String[]{IDialogConstants.OK_LABEL},0,information);
  dialog.setShellStyle(SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.MAX| SWT.RESIZE);
  dialog.open();
  return;
}",0.935093509350935
139661,"@Override protected Control createCustomArea(Composite parent){
  List list=new List(parent,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  String allinfo=this.information.toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
  String[] info=allinfo.toString().split(""String_Node_Str"");
  list.setItems(info);
  GridData data=new GridData();
  data.heightHint=120;
  data.widthHint=350;
  data.horizontalAlignment=GridData.FILL;
  data.verticalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  list.setLayoutData(data);
  return parent;
}","@Override protected Control createCustomArea(Composite parent){
  List list=new List(parent,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  list.setItems(this.information);
  GridData data=new GridData();
  data.heightHint=120;
  data.widthHint=350;
  data.horizontalAlignment=GridData.FILL;
  data.verticalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  list.setLayoutData(data);
  return parent;
}",0.8133971291866029
139662,"public OpenIndicatorDefinitionAction(IndicatorDefinition[] definitiones){
  super(""String_Node_Str"");
  setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_PASTE));
  this.definitiones=definitiones;
}","public OpenIndicatorDefinitionAction(IndicatorDefinition[] definitiones){
  super(""String_Node_Str"");
  this.definitiones=definitiones;
}",0.7025641025641025
139663,"@Override public void dropColumns(List<Column> columns,int index){
  JoinElementColumnDialog joinElementColumnDialog=new JoinElementColumnDialog(null);
  if (joinElementColumnDialog.open() == Window.OK) {
    JoinElement join=(JoinElement)this.myTableViewer.getElementAt(index);
    if (join != null) {
      for (      Column column : columns) {
        if (column != null) {
          if (COLUMN_A.equals(joinElementColumnDialog.getAb())) {
            join.setColA(column);
            join.setColumnAliasA(column.getName());
            join.setTableAliasA(ColumnHelper.getColumnSetFullName(column));
          }
 else {
            join.setColB(column);
            join.setColumnAliasB(column.getName());
            join.setTableAliasB(ColumnHelper.getColumnSetFullName(column));
          }
        }
      }
      this.setDirty(true);
      this.myTableViewer.update(join,null);
    }
  }
}","@Override public void dropColumns(List<Column> columns,int index){
  JoinElementColumnDialog joinElementColumnDialog=new JoinElementColumnDialog(null);
  if (joinElementColumnDialog.open() == Window.OK) {
    JoinElement join=(JoinElement)this.myTableViewer.getElementAt(index);
    if (join == null) {
      join=this.addJoinElement();
    }
    if (join != null) {
      for (      Column column : columns) {
        if (column != null) {
          if (COLUMN_A.equals(joinElementColumnDialog.getAb())) {
            join.setColA(column);
            join.setColumnAliasA(column.getName());
            join.setTableAliasA(ColumnHelper.getColumnSetFullName(column));
          }
 else {
            join.setColB(column);
            join.setColumnAliasB(column.getName());
            join.setTableAliasB(ColumnHelper.getColumnSetFullName(column));
          }
        }
      }
      this.setDirty(true);
      this.myTableViewer.update(join,null);
    }
  }
}",0.9656283566058004
139664,"/** 
 * DOC xqliu Comment method ""addJoinElement"".
 */
public void addJoinElement(){
  JoinElement newJoinElement=RulesFactory.eINSTANCE.createJoinElement();
  newJoinElement.setOperator(DEFAULT_OPERATOR);
  this.myTableViewer.add(newJoinElement);
  this.myJoinElement.add(newJoinElement);
  JoinConditionTableViewer.this.masterPage.setDirty(true);
}","/** 
 * DOC xqliu Comment method ""addJoinElement"".
 * @return
 */
public JoinElement addJoinElement(){
  JoinElement newJoinElement=RulesFactory.eINSTANCE.createJoinElement();
  newJoinElement.setOperator(DEFAULT_OPERATOR);
  this.myTableViewer.add(newJoinElement);
  this.myJoinElement.add(newJoinElement);
  JoinConditionTableViewer.this.masterPage.setDirty(true);
  return newJoinElement;
}",0.9313593539703904
139665,"/** 
 * DOC xqliu Comment method ""installDND"". bug 8791 2009-08-31.
 * @param myTable
 */
public static void installDND(final Table targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  DropTargetListener dndListener=new TableDropTargetEffect(targetControl){
    ISelectionReceiver receiver=null;
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
      Object object=selection.getFirstElement();
      if (object instanceof TdColumn) {
        receiver=new ColumnReceiverTable();
      }
      if (receiver == null) {
        event.detail=DND.DROP_NONE;
      }
 else {
        event.feedback=DND.FEEDBACK_EXPAND;
        receiver.doDropValidation(event,commonViewer);
      }
    }
    @Override public void dragOver(    DropTargetEvent event){
      if (receiver == null)       return;
      super.dragOver(event);
      receiver.doDropValidation(event,commonViewer);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void drop(    DropTargetEvent event){
      if (receiver == null)       return;
      int index=targetControl.getItemCount();
      super.drop(event);
      if (event.item == null) {
        index=0;
      }
 else {
        Widget widget=event.widget;
        Object data=event.data;
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetControl.getItems();
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
      }
      receiver.drop(event,commonViewer,index);
    }
  }
;
  dropTarget.addDropListener(dndListener);
}","/** 
 * DOC xqliu Comment method ""installDND"". bug 8791 2009-08-31.
 * @param myTable
 */
public static void installDND(final Table targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  DropTargetListener dndListener=new TableDropTargetEffect(targetControl){
    ISelectionReceiver receiver=null;
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
      Object object=selection.getFirstElement();
      if (object instanceof TdColumn) {
        receiver=new ColumnReceiverTable();
      }
      if (receiver == null) {
        event.detail=DND.DROP_NONE;
      }
 else {
        event.feedback=DND.FEEDBACK_EXPAND;
        receiver.doDropValidation(event,commonViewer);
      }
    }
    @Override public void dragOver(    DropTargetEvent event){
      if (receiver == null)       return;
      super.dragOver(event);
      receiver.doDropValidation(event,commonViewer);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void drop(    DropTargetEvent event){
      if (receiver == null)       return;
      int index=targetControl.getItemCount();
      super.drop(event);
      if (event.item == null) {
        index=-1;
      }
 else {
        Widget widget=event.widget;
        Object data=event.data;
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetControl.getItems();
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
      }
      receiver.drop(event,commonViewer,index);
    }
  }
;
  dropTarget.addDropListener(dndListener);
}",0.9993241721108358
139666,"private static void createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition id=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category);
  for (  String key : parameters.regex.keySet()) {
    Expression expression=BooleanExpressionHelper.createExpression(key,parameters.regex.get(key));
    id.getSqlGenericExpression().add(expression);
  }
  String fname=DqRepositoryViewService.createFilename(parameters.name,FactoriesUtil.UDI);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      folder.setPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.UDI_FOLDER_PROPERTY);
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  EMFSharedResources.getInstance().addEObjectToResourceSet(pfile.getFullPath().toString(),id);
  EMFSharedResources.getInstance().saveLastResource();
}","/** 
 * DOC xqliu Comment method ""createAndStoreUDI"".
 * @param parameters
 * @param selectionFolder
 */
private static void createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition id=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category);
  for (  String key : parameters.regex.keySet()) {
    Expression expression=BooleanExpressionHelper.createExpression(key,parameters.regex.get(key));
    id.getSqlGenericExpression().add(expression);
  }
  String fname=DqRepositoryViewService.createFilename(parameters.name,FactoriesUtil.UDI);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      folder.setPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.UDI_FOLDER_PROPERTY);
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  EMFSharedResources.getInstance().addEObjectToResourceSet(pfile.getFullPath().toString(),id);
  EMFSharedResources.getInstance().saveLastResource();
}",0.9586776859504132
139667,"public static void importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        createAndStoreUDI(udiParameters,selectionFolder);
        names.add(name);
      }
      reader.close();
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        }
      }
);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
    }
catch (    IOException e) {
      log.error(e,e);
    }
  }
}","/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param skip
 * @param rename
 * @return
 */
public static String importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  String information=""String_Node_Str"";
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    String name=""String_Node_Str"";
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readRecord()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information=""String_Node_Str"" + name + ""String_Node_Str"";
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        createAndStoreUDI(udiParameters,selectionFolder);
        names.add(name);
        information=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information=""String_Node_Str"" + name + ""String_Node_Str"";
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
    }
catch (    IOException e) {
      log.error(e,e);
    }
  }
  return information;
}",0.9307228915662652
139668,"private void updateUI(IJobChangeEvent event){
  final StringBuffer information=new StringBuffer();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      File file=new File(componet.getInstalledLocation());
      List<File> files=new ArrayList<File>();
      extractFiles(file,files);
      ExpressionType type=ExpressionType.REGEXP;
      IFolder folder=getFolder(DQStructureManager.PATTERNS);
      if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.SQL_LIKE;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.SQL);
      }
      for (      File oneFile : files) {
        information.append(ImportFactory.importToStucture(oneFile,folder,type,true,true));
        information.append(""String_Node_Str"");
      }
    }
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(null,information);
      }
    }
);
    CorePlugin.getDefault().refreshDQView();
  }
}","private void updateUI(IJobChangeEvent event){
  final StringBuffer information=new StringBuffer();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      File file=new File(componet.getInstalledLocation());
      List<File> files=new ArrayList<File>();
      extractFiles(file,files);
      ExpressionType type=ExpressionType.REGEXP;
      IFolder folder=getFolder(DQStructureManager.PATTERNS);
      if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.SQL_LIKE;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.SQL);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=null;
      }
      for (      File oneFile : files) {
        if (type == null) {
          IFolder udiFolder=getFolder(DQStructureManager.INDICATORS).getFolder(DQStructureManager.USER_DEFINED_INDICATORS);
          information.append(ImportFactory.importIndicatorToStucture(oneFile,udiFolder,true,true));
        }
 else {
          information.append(ImportFactory.importToStucture(oneFile,folder,type,true,true));
        }
        information.append(""String_Node_Str"");
      }
    }
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(null,information);
      }
    }
);
    CorePlugin.getDefault().refreshDQView();
  }
}",0.8572274881516587
139669,"private boolean executeQuery(Indicator indicator,Connection connection,Expression query) throws AnalysisExecutionException {
  try {
    List<Object[]> myResultSet=executeQuery(catalogOrSchema,connection,query.getBody());
    if (indicator instanceof ColumnDependencyIndicator) {
      ((ColumnDependencyIndicator)indicator).setACount(getNB(myResultSet));
      ((ColumnDependencyIndicator)indicator).setDistinctACount(getNBDistinct(myResultSet));
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
    return false;
  }
  return true;
}","private boolean executeQuery(Indicator indicator,Connection connection,Expression query) throws AnalysisExecutionException {
  try {
    List<Object[]> myResultSet=executeQuery(catalogOrSchema,connection,query.getBody());
    indicator.storeSqlResults(myResultSet);
  }
 catch (  SQLException e) {
    log.error(e,e);
    return false;
  }
  return true;
}",0.7511111111111111
139670,"public String addWhereToSqlStringStatement(String completedSqlString,List<String> whereExpressions){
  String query=completedSqlString;
  String where=this.buildWhereExpression(whereExpressions);
  if (where != null) {
    query=this.addWhereToStatement(query,where);
  }
  return query;
}","/** 
 * Method ""addWhereToSqlStringStatement"". The list
 * @param completedSqlString a generic SQL expression in which the where clause variable will be replaced.
 * @param whereExpressions the list of where expressions to concatenate (must not be null)
 * @return the SQL statement with the where clause
 */
public String addWhereToSqlStringStatement(String completedSqlString,List<String> whereExpressions){
  String query=completedSqlString;
  String where=this.buildWhereExpression(whereExpressions);
  if (where != null) {
    query=this.addWhereToStatement(query,where);
  }
  return query;
}",0.6516347237880497
139671,"@Override public boolean storeSqlResults(List<Object[]> objects){
  return true;
}","@Override public boolean storeSqlResults(List<Object[]> objects){
  this.setACount(getNB(objects));
  this.setDistinctACount(getNBDistinct(objects));
  return true;
}",0.6612903225806451
139672,"/** 
 * DOC rli Comment method ""createTempConnectionFile"".
 * @throws ReloadCompareException
 */
protected void createTempConnectionFile() throws ReloadCompareException {
  IFile tempConnectionFile=DQStructureComparer.getTempRefreshFile();
  TypedReturnCode<TdDataProvider> returnProvider=DQStructureComparer.getRefreshedDataProvider(oldDataProvider);
  if (!returnProvider.isOk()) {
    throw new ReloadCompareException(returnProvider.getMessage());
  }
  tempReloadProvider=returnProvider.getObject();
  tempReloadProvider.setComponent(oldDataProvider.getComponent());
  ElementWriterFactory.getInstance().createDataProviderWriter().save(tempReloadProvider,tempConnectionFile);
  tempReloadProvider.setComponent(null);
  oldDataProvider.getComponent();
}","/** 
 * DOC rli Comment method ""createTempConnectionFile"".
 * @throws ReloadCompareException
 */
protected void createTempConnectionFile() throws ReloadCompareException {
  IFile tempConnectionFile=DQStructureComparer.getTempRefreshFile();
  TypedReturnCode<TdDataProvider> returnProvider=DQStructureComparer.getRefreshedDataProvider(oldDataProvider);
  if (!returnProvider.isOk()) {
    throw new ReloadCompareException(returnProvider.getMessage());
  }
  tempReloadProvider=returnProvider.getObject();
  tempReloadProvider.setComponent(oldDataProvider.getComponent());
  ElementWriterFactory.getInstance().createDataProviderWriter().saveWithoutProperty(tempReloadProvider,tempConnectionFile);
  tempReloadProvider.setComponent(null);
  oldDataProvider.getComponent();
}",0.9901768172888016
139673,"private static ModelElement getModelElement(IFile file){
  ModelElement findModelElement=null;
  if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
    TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().findProvider(file);
    findModelElement=returnValue.getObject();
  }
 else   if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
    findModelElement=AnaResourceFileHelper.getInstance().findAnalysis(file);
  }
 else   if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
    findModelElement=RepResourceFileHelper.getInstance().findReport(file);
    if (findModelElement == null) {
      return findModelElement;
    }
    List<Resource> modifiedResources=new ArrayList<Resource>();
    for (    RenderedObject renderedObj : ((TdReport)findModelElement).getComponent()) {
      EList<Dependency> supplierDependencies=renderedObj.getSupplierDependency();
      for (      Dependency dependency : supplierDependencies) {
        EList<ModelElement> client=dependency.getClient();
        for (        ModelElement modelElement : client) {
          Resource clientResource=modelElement.eResource();
          URI resURI=clientResource.getURI();
          if (resURI.toString().equals(findModelElement.eResource().getURI().toString())) {
            modifiedResources.add(renderedObj.eResource());
            AnaResourceFileHelper.getInstance().clear();
          }
        }
        client.clear();
      }
    }
    for (    Resource resource : modifiedResources) {
      EMFUtil.saveSingleResource(resource);
    }
  }
 else   if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
    findModelElement=PatternResourceFileHelper.getInstance().findPattern(file);
  }
  return findModelElement;
}","private static ModelElement getModelElement(IFile file){
  ModelElement findModelElement=null;
  if (FactoriesUtil.PROV.equalsIgnoreCase(file.getFileExtension())) {
    TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().findProvider(file);
    findModelElement=returnValue.getObject();
  }
 else   if (FactoriesUtil.ANA.equalsIgnoreCase(file.getFileExtension())) {
    findModelElement=AnaResourceFileHelper.getInstance().findAnalysis(file);
  }
 else   if (FactoriesUtil.REP.equalsIgnoreCase(file.getFileExtension())) {
    findModelElement=RepResourceFileHelper.getInstance().findReport(file);
    if (findModelElement == null) {
      return findModelElement;
    }
    List<Resource> modifiedResources=new ArrayList<Resource>();
    for (    RenderedObject renderedObj : ((TdReport)findModelElement).getComponent()) {
      EList<Dependency> supplierDependencies=renderedObj.getSupplierDependency();
      for (      Dependency dependency : supplierDependencies) {
        EList<ModelElement> client=dependency.getClient();
        for (        ModelElement modelElement : client) {
          Resource clientResource=modelElement.eResource();
          URI resURI=clientResource.getURI();
          if (resURI.toString().equals(findModelElement.eResource().getURI().toString())) {
            modifiedResources.add(renderedObj.eResource());
            AnaResourceFileHelper.getInstance().clear();
          }
        }
        client.clear();
      }
    }
    for (    Resource resource : modifiedResources) {
      EMFUtil.saveSingleResource(resource);
    }
  }
 else   if (FactoriesUtil.PATTERN.equalsIgnoreCase(file.getFileExtension())) {
    findModelElement=PatternResourceFileHelper.getInstance().findPattern(file);
  }
  return findModelElement;
}",0.9072625698324024
139674,"private void searchAllAnalysis(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllAnalysis(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (file.getFileExtension().equals(FactoriesUtil.ANA)) {
      findAnalysis(file);
    }
  }
}","private void searchAllAnalysis(IFolder folder) throws CoreException {
  for (  IResource resource : folder.members()) {
    if (resource.getType() == IResource.FOLDER) {
      searchAllAnalysis(folder.getFolder(resource.getName()));
      continue;
    }
    IFile file=(IFile)resource;
    if (FactoriesUtil.ANA.equals(file.getFileExtension())) {
      findAnalysis(file);
    }
  }
}",0.935064935064935
139675,"private List<IFile> searchAllDataProvider(IFolder folder,List<IFile> allPRVFiles){
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        searchAllDataProvider(folder.getFolder(resource.getName()),allPRVFiles);
        continue;
      }
      IFile file=(IFile)resource;
      if (file.getFileExtension().equals(FactoriesUtil.PROV)) {
        allPRVFiles.add(file);
      }
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return allPRVFiles;
}","private List<IFile> searchAllDataProvider(IFolder folder,List<IFile> allPRVFiles){
  try {
    for (    IResource resource : folder.members()) {
      if (resource.getType() == IResource.FOLDER) {
        searchAllDataProvider(folder.getFolder(resource.getName()),allPRVFiles);
        continue;
      }
      IFile file=(IFile)resource;
      if (FactoriesUtil.PROV.equals(file.getFileExtension())) {
        allPRVFiles.add(file);
      }
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return allPRVFiles;
}",0.9506641366223908
139676,"public TdReport findReport(IFile file){
  if (file != null && file.getFileExtension().equals(FactoriesUtil.REP)) {
    TdReport report=allRepMap.get(file);
    if (report != null) {
      return report;
    }
    return readFromFile(file);
  }
  return null;
}","public TdReport findReport(IFile file){
  if (file != null && FactoriesUtil.REP.equals(file.getFileExtension())) {
    TdReport report=allRepMap.get(file);
    if (report != null) {
      return report;
    }
    return readFromFile(file);
  }
  return null;
}",0.903846153846154
139677,"public boolean check(IFile file){
  return file.getFileExtension().equalsIgnoreCase(getFileExtension());
}","public boolean check(IFile file){
  return getFileExtension().equalsIgnoreCase(file.getFileExtension());
}",0.9528301886792452
139678,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
      for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
        Pattern pattern=(Pattern)iterator.next();
        File patternFile=new File(resource,ExportFactory.toLocalFileName(pattern.getName() + ""String_Node_Str""));
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
      return true;
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        return true;
      }
      return false;
    }
  }
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (FactoriesUtil.PATTERN.equalsIgnoreCase(file.getFileExtension())) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
      for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
        Pattern pattern=(Pattern)iterator.next();
        File patternFile=new File(resource,ExportFactory.toLocalFileName(pattern.getName() + ""String_Node_Str""));
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
      return true;
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        return true;
      }
      return false;
    }
  }
}",0.9776931447225244
139679,"private static Set<IFile> getNestedPatternFiles(Set<IFile> list,IFolder folder){
  try {
    for (    IResource resource : folder.members()) {
      if (resource instanceof IFile) {
        IFile file=(IFile)resource;
        if (file.getFileExtension().equals(FactoriesUtil.PATTERN)) {
          list.add((IFile)resource);
        }
      }
 else {
        getNestedPatternFiles(list,(IFolder)resource);
      }
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return list;
}","private static Set<IFile> getNestedPatternFiles(Set<IFile> list,IFolder folder){
  try {
    for (    IResource resource : folder.members()) {
      if (resource instanceof IFile) {
        IFile file=(IFile)resource;
        if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
          list.add((IFile)resource);
        }
      }
 else {
        getNestedPatternFiles(list,(IFolder)resource);
      }
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return list;
}",0.6300813008130082
139680,"private ModelElement getOldEObject(IFile file){
  ModelElement object=null;
  if (file.getFileExtension().equals(FactoriesUtil.ANA)) {
    object=AnaResourceFileHelper.getInstance().findAnalysis(file);
  }
  if (file.getFileExtension().equals(FactoriesUtil.PATTERN)) {
    object=PatternResourceFileHelper.getInstance().findPattern(file);
  }
  if (file.getFileExtension().equals(FactoriesUtil.REP)) {
    object=RepResourceFileHelper.getInstance().findReport(file);
  }
  if (file.getFileExtension().equals(FactoriesUtil.DQRULE)) {
    object=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
  }
  if (file.getFileExtension().equals(FactoriesUtil.UDI)) {
    object=UDIResourceFileHelper.getInstance().findUDI(file);
  }
  return object;
}","private ModelElement getOldEObject(IFile file){
  ModelElement object=null;
  if (FactoriesUtil.ANA.equals(file.getFileExtension())) {
    object=AnaResourceFileHelper.getInstance().findAnalysis(file);
  }
  if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
    object=PatternResourceFileHelper.getInstance().findPattern(file);
  }
  if (FactoriesUtil.REP.equals(file.getFileExtension())) {
    object=RepResourceFileHelper.getInstance().findReport(file);
  }
  if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
    object=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
  }
  if (FactoriesUtil.UDI.equals(file.getFileExtension())) {
    object=UDIResourceFileHelper.getInstance().findUDI(file);
  }
  return object;
}",0.8095872170439414
139681,"/** 
 * DOC xqliu Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
  boolean isSelectFile=false;
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(EXTENSION_DQRULE)) {
        selectedFiles.add(file);
      }
    }
 else {
      isSelectFile=true;
      break;
    }
  }
  return isSelectFile;
}","/** 
 * DOC xqliu Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
  boolean isSelectFile=false;
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (EXTENSION_DQRULE.equalsIgnoreCase(file.getFileExtension())) {
        selectedFiles.add(file);
      }
    }
 else {
      isSelectFile=true;
      break;
    }
  }
  return isSelectFile;
}",0.9336569579288024
139682,"/** 
 * DOC qzhang Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
  boolean isSelectFile=false;
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(""String_Node_Str"")) {
        selectedFiles.add(file);
      }
    }
 else {
      isSelectFile=true;
      break;
    }
  }
  return isSelectFile;
}","/** 
 * DOC qzhang Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
  boolean isSelectFile=false;
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (""String_Node_Str"".equalsIgnoreCase(file.getFileExtension())) {
        selectedFiles.add(file);
      }
    }
 else {
      isSelectFile=true;
      break;
    }
  }
  return isSelectFile;
}",0.9338709677419356
139683,"public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      IPath fullPath=((IFolder)obj).getFullPath();
      IPath sourceFileFolderPath=ResourceManager.getLibrariesFolder().getFolder(DQStructureManager.SOURCE_FILES).getFullPath();
      if (fullPath.equals(sourceFileFolderPath)) {
        menu.add(new AddSqlFileAction((IFolder)obj));
        if (fullPath.segmentCount() > sourceFileFolderPath.segmentCount()) {
          menu.add(new RenameFolderAction((IFolder)obj));
        }
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(""String_Node_Str"")) {
        menu.add(new RenameSqlFileAction((IFile)obj));
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new OpenSqlFileAction(selectedFiles));
    menu.add(new DeleteSqlFileAction(selectedFiles));
  }
}","public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      IPath fullPath=((IFolder)obj).getFullPath();
      IPath sourceFileFolderPath=ResourceManager.getLibrariesFolder().getFolder(DQStructureManager.SOURCE_FILES).getFullPath();
      if (fullPath.equals(sourceFileFolderPath)) {
        menu.add(new AddSqlFileAction((IFolder)obj));
        if (fullPath.segmentCount() > sourceFileFolderPath.segmentCount()) {
          menu.add(new RenameFolderAction((IFolder)obj));
        }
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (""String_Node_Str"".equalsIgnoreCase(file.getFileExtension())) {
        menu.add(new RenameSqlFileAction((IFile)obj));
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new OpenSqlFileAction(selectedFiles));
    menu.add(new DeleteSqlFileAction(selectedFiles));
  }
}",0.9705882352941176
139684,"/** 
 * DOC qzhang Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
  boolean isSelectFile=false;
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(EXTENSION_PATTERN)) {
        selectedFiles.add(file);
      }
    }
 else {
      isSelectFile=true;
      break;
    }
  }
  return isSelectFile;
}","/** 
 * DOC qzhang Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
}",0.525564803804994
139685,"public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      try {
        IFolder folder=(IFolder)obj;
        ExpressionType type=null;
        String persistentProperty=folder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY);
        if (DQStructureManager.PATTERNS_FOLDER_PROPERTY.equals(persistentProperty)) {
          type=ExpressionType.REGEXP;
        }
 else         if (DQStructureManager.SQLPATTERNS_FOLDER_PROPERTY.equals(persistentProperty)) {
          type=ExpressionType.SQL_LIKE;
        }
        if (type != null) {
          menu.add(new ImportPatternsAction((IFolder)obj,type));
          menu.add(new ExportPatternsAction((IFolder)obj,false));
          menu.add(new ExportPatternsAction((IFolder)obj,true));
          menu.add(new CreatePatternAction((IFolder)obj,type));
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(EXTENSION_PATTERN)) {
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
  }
}","public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      try {
        IFolder folder=(IFolder)obj;
        ExpressionType type=null;
        String persistentProperty=folder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY);
        if (DQStructureManager.PATTERNS_FOLDER_PROPERTY.equals(persistentProperty)) {
          type=ExpressionType.REGEXP;
        }
 else         if (DQStructureManager.SQLPATTERNS_FOLDER_PROPERTY.equals(persistentProperty)) {
          type=ExpressionType.SQL_LIKE;
        }
        if (type != null) {
          menu.add(new ImportPatternsAction((IFolder)obj,type));
          menu.add(new ExportPatternsAction((IFolder)obj,false));
          menu.add(new ExportPatternsAction((IFolder)obj,true));
          menu.add(new CreatePatternAction((IFolder)obj,type));
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (EXTENSION_PATTERN.equalsIgnoreCase(file.getFileExtension())) {
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
  }
}",0.9712280701754386
139686,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (parentElement instanceof TreePath) {
    TreePath path=(TreePath)parentElement;
    if (path.getLastSegment() instanceof AnaElementFolderNode) {
      return true;
    }
  }
 else   if (parentElement instanceof IFolder) {
    IFolder folder=(IFolder)parentElement;
    if (""String_Node_Str"".equals(folder.getName())) {
      return false;
    }
  }
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    if (SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(eObj) != null || dependencySwitch.doSwitch(eObj) != null) {
      return false;
    }
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getName().indexOf(""String_Node_Str"") == 0) {
      return false;
    }
    if (file.getFileExtension().equals(FactoriesUtil.ITEM_EXTENSION) || file.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      return false;
    }
    return file.getFileExtension() != null;
  }
  return true;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (parentElement instanceof TreePath) {
    TreePath path=(TreePath)parentElement;
    if (path.getLastSegment() instanceof AnaElementFolderNode) {
      return true;
    }
  }
 else   if (parentElement instanceof IFolder) {
    IFolder folder=(IFolder)parentElement;
    if (""String_Node_Str"".equals(folder.getName())) {
      return false;
    }
  }
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    if (SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(eObj) != null || dependencySwitch.doSwitch(eObj) != null) {
      return false;
    }
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getName().indexOf(""String_Node_Str"") == 0) {
      return false;
    }
    if (FactoriesUtil.ITEM_EXTENSION.equals(file.getFileExtension()) || FactoriesUtil.PROPERTIES_EXTENSION.equals(file.getFileExtension())) {
      return false;
    }
    return file.getFileExtension() != null;
  }
  return true;
}",0.9403846153846154
139687,"protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      if (findPattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
        if (!validStatus) {
          ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
  }
  if (element instanceof IFolder) {
    String folderName=((IFolder)element).getName();
    if (ResourceManager.METADATA_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
 else     if (ResourceManager.LIBRARIES_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.LIBRARIES);
    }
 else     if (ResourceManager.DATA_PROFILING_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.DATA_PROFILING);
    }
 else     if (org.talend.dataquality.PluginConstant.DB_CONNECTIONS.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
 else     if (DQStructureManager.EXCHANGE.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.EXCHANGE);
    }
  }
  return super.decorateImage(input,element);
}","protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (FactoriesUtil.PATTERN.equalsIgnoreCase(file.getFileExtension())) {
      Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      if (findPattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
        if (!validStatus) {
          ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
 else     if (FactoriesUtil.REP.equalsIgnoreCase(file.getFileExtension())) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
  }
  if (element instanceof IFolder) {
    String folderName=((IFolder)element).getName();
    if (ResourceManager.METADATA_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
 else     if (ResourceManager.LIBRARIES_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.LIBRARIES);
    }
 else     if (ResourceManager.DATA_PROFILING_FOLDER_NAME.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.DATA_PROFILING);
    }
 else     if (org.talend.dataquality.PluginConstant.DB_CONNECTIONS.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
 else     if (DQStructureManager.EXCHANGE.equals(folderName)) {
      return ImageLib.getImageDescriptor(ImageLib.EXCHANGE);
    }
  }
  return super.decorateImage(input,element);
}",0.955366631243358
139688,"@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  if (!(target instanceof IResource)) {
    return Status.CANCEL_STATUS;
  }
  IResource targetRes=(IResource)target;
  for (  IResource res : getSelectedResources()) {
    if (res.getType() == IResource.FILE) {
      if ((targetRes.getType() == IResource.FOLDER)) {
        IFolder targetFolder=(IFolder)targetRes;
        IFolder sourceFolder=(IFolder)res.getParent();
        try {
          if (sourceFolder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY).equals(targetFolder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY))) {
            return Status.OK_STATUS;
          }
        }
 catch (        CoreException e) {
          log.error(e,e);
        }
      }
 else       if (res.getName().endsWith(org.talend.dq.PluginConstant.ANA_SUFFIX) && (targetRes.getType() == IResource.FILE)) {
        IFile tfile=(IFile)targetRes;
        if (tfile.getFileExtension().equals(FactoriesUtil.REP)) {
          return Status.OK_STATUS;
        }
      }
    }
  }
  return Status.CANCEL_STATUS;
}","@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  if (!(target instanceof IResource)) {
    return Status.CANCEL_STATUS;
  }
  IResource targetRes=(IResource)target;
  for (  IResource res : getSelectedResources()) {
    if (res.getType() == IResource.FILE) {
      if ((targetRes.getType() == IResource.FOLDER)) {
        IFolder targetFolder=(IFolder)targetRes;
        IFolder sourceFolder=(IFolder)res.getParent();
        try {
          if (sourceFolder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY).equals(targetFolder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY))) {
            return Status.OK_STATUS;
          }
        }
 catch (        CoreException e) {
          log.error(e,e);
        }
      }
 else       if (res.getName().endsWith(org.talend.dq.PluginConstant.ANA_SUFFIX) && (targetRes.getType() == IResource.FILE)) {
        IFile tfile=(IFile)targetRes;
        if (FactoriesUtil.REP.equals(tfile.getFileExtension())) {
          return Status.OK_STATUS;
        }
      }
    }
  }
  return Status.CANCEL_STATUS;
}",0.9776186213070726
139689,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedTree().getCheckedElements();
  List<IndicatorDefinition> seletedIndicators=new ArrayList<IndicatorDefinition>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.UDI)) {
        seletedIndicators.add(UDIResourceFileHelper.getInstance().findUDI(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedIndicators.toArray(new IndicatorDefinition[seletedIndicators.size()]));
      for (Iterator iterator=seletedIndicators.iterator(); iterator.hasNext(); ) {
        IndicatorDefinition id=(IndicatorDefinition)iterator.next();
        File idFile=new File(resource,id.getName() + ""String_Node_Str"");
        if (idFile.isFile() && idFile.exists()) {
          try {
            FilesUtils.zip(idFile,idFile.getPath() + ""String_Node_Str"");
            idFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
      return true;
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedIndicators.toArray(new IndicatorDefinition[seletedIndicators.size()]));
        return true;
      }
      return false;
    }
  }
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedTree().getCheckedElements();
  List<IndicatorDefinition> seletedIndicators=new ArrayList<IndicatorDefinition>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (FactoriesUtil.UDI.equalsIgnoreCase(file.getFileExtension())) {
        seletedIndicators.add(UDIResourceFileHelper.getInstance().findUDI(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedIndicators.toArray(new IndicatorDefinition[seletedIndicators.size()]));
      for (Iterator iterator=seletedIndicators.iterator(); iterator.hasNext(); ) {
        IndicatorDefinition id=(IndicatorDefinition)iterator.next();
        File idFile=new File(resource,id.getName() + ""String_Node_Str"");
        if (idFile.isFile() && idFile.exists()) {
          try {
            FilesUtils.zip(idFile,idFile.getPath() + ""String_Node_Str"");
            idFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
      return true;
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedIndicators.toArray(new IndicatorDefinition[seletedIndicators.size()]));
        return true;
      }
      return false;
    }
  }
}",0.9809056192034916
139690,"/** 
 * DOC qzhang Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
}","/** 
 * DOC qzhang Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
  boolean isSelectFile=false;
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (EXTENSION_PATTERN.equalsIgnoreCase(file.getFileExtension())) {
        selectedFiles.add(file);
      }
    }
 else {
      isSelectFile=true;
      break;
    }
  }
  return isSelectFile;
}",0.525564803804994
139691,"/** 
 * DOC jet according to current analysis generator chart dataset ""initDataset"".
 * @return
 */
private DefaultCategoryDataset initDataset(){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  Analysis analysis=this.getAnalysisHandler().getAnalysis();
  for (Iterator iterator=analysis.getResults().getIndicators().iterator(); iterator.hasNext(); ) {
    ColumnDependencyIndicator indicator=(ColumnDependencyIndicator)iterator.next();
    String label=getRowLabel(indicator);
    if (getAnalysisHandler().getResultMetadata().getExecutionNumber() > 0) {
      dataset.addValue(indicator.getACount() - indicator.getDistinctACount(),""String_Node_Str"",label);
      dataset.addValue(indicator.getDistinctACount(),""String_Node_Str"",label);
    }
  }
  return dataset;
}","/** 
 * DOC jet according to current analysis generator chart dataset ""initDataset"".
 * @return
 */
private DefaultCategoryDataset initDataset(){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  Analysis analysis=this.getAnalysisHandler().getAnalysis();
  for (Iterator iterator=analysis.getResults().getIndicators().iterator(); iterator.hasNext(); ) {
    ColumnDependencyIndicator indicator=(ColumnDependencyIndicator)iterator.next();
    String label=getRowLabel(indicator);
    if (getAnalysisHandler().getResultMetadata().getExecutionNumber() > 0) {
      dataset.addValue(indicator.getDistinctACount(),""String_Node_Str"",label);
      dataset.addValue(indicator.getACount() - indicator.getDistinctACount(),""String_Node_Str"",label);
    }
  }
  return dataset;
}",0.969309462915601
139692,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated not
 */
public Double getDependencyFactor(){
  if (getACount() != null && getDistinctACount() != null) {
    return getDistinctACount().doubleValue() / getACount().doubleValue();
  }
  return null;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated not
 */
public Double getDependencyFactor(){
  if (getACount() != null && getDistinctACount() != null) {
    return (getACount() == 0L) ? Double.NaN : getDistinctACount().doubleValue() / getACount().doubleValue();
  }
  return null;
}",0.938488576449912
139693,"public AbstractChartTypeStates(List<IndicatorUnit> units){
  Iterator<IndicatorUnit> it=units.iterator();
  while (it.hasNext()) {
    IndicatorUnit unit=it.next();
    if (!unit.isExcuted() && unit.getType() != IndicatorEnum.RangeIndicatorEnum && unit.getType() != IndicatorEnum.IQRIndicatorEnum) {
      it.remove();
    }
 else {
      IndicatorCommonUtil.getIndicatorValue(unit);
    }
  }
  if (units != null) {
    this.units.addAll(units);
  }
}","public AbstractChartTypeStates(List<IndicatorUnit> units){
  if (units != null) {
    this.units.addAll(check(units));
  }
}",0.40625
139694,"@Override protected boolean preDo(){
  List<TdColumn> tempList=new ArrayList<TdColumn>();
  for (  TdColumn column : getColumns()) {
    if (!Java2SqlType.isTextInSQL(column.getJavaType())) {
      tempList.add(column);
    }
  }
  if (!tempList.isEmpty()) {
    ElementListSelectionDialog dialog=new ElementListSelectionDialog(null,new DQRepositoryViewLabelProvider());
    dialog.setElements(tempList.toArray());
    dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
    dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    dialog.setSize(80,20);
    dialog.create();
    if (Window.OK == dialog.open()) {
      for (      TdColumn column : tempList) {
        MetadataHelper.setDataminingType(DataminingType.NOMINAL,column);
      }
      return true;
    }
 else {
      return false;
    }
  }
  return true;
}","@Override protected boolean preDo(){
  List<TdColumn> tempList=new ArrayList<TdColumn>();
  for (  TdColumn column : getColumns()) {
    if (ColumnHelper.isPrimaryKey(column) || ColumnHelper.isForeignKey(column)) {
      continue;
    }
    if (!Java2SqlType.isTextInSQL(column.getJavaType())) {
      tempList.add(column);
    }
  }
  if (!tempList.isEmpty()) {
    ElementListSelectionDialog dialog=new ElementListSelectionDialog(null,new DQRepositoryViewLabelProvider());
    dialog.setElements(tempList.toArray());
    dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
    dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    dialog.setSize(80,20);
    dialog.create();
    if (Window.OK == dialog.open()) {
      for (      TdColumn column : tempList) {
        MetadataHelper.setDataminingType(DataminingType.NOMINAL,column);
      }
      return true;
    }
 else {
      return false;
    }
  }
  return true;
}",0.9424778761061948
139695,"/** 
 * Method ""getDataminingType"" gets the type of the content of a column.
 * @param column
 * @return the DataminingType or null if none has been set.
 */
public static DataminingType getDataminingType(TdColumn column){
  return DataminingType.get(column.getContentType());
}","/** 
 * Method ""getDataminingType"" gets the type of the content of a column.
 * @param column
 * @return the DataminingType or null if none has been set.
 */
public static DataminingType getDataminingType(TdColumn column){
  if (ColumnHelper.isPrimaryKey(column) || ColumnHelper.isForeignKey(column)) {
    return DataminingType.NOMINAL;
  }
  return DataminingType.get(column.getContentType());
}",0.6814814814814815
139696,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
      for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
        Pattern pattern=(Pattern)iterator.next();
        File patternFile=new File(resource,pattern.getName() + ""String_Node_Str"");
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
      return true;
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        return true;
      }
      return false;
    }
  }
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
      for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
        Pattern pattern=(Pattern)iterator.next();
        File patternFile=new File(resource,ExportFactory.toLocalFileName(pattern.getName() + ""String_Node_Str""));
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
      return true;
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        return true;
      }
      return false;
    }
  }
}",0.9914951989026064
139697,"/** 
 * DOC xqliu Comment method ""removeDependency"".
 * @param analysis
 * @param unit
 */
protected void removeDependency(Analysis analysis,IndicatorUnit unit){
  List<ModelElement> reomveElements=new ArrayList<ModelElement>();
  Indicator indicator=unit.getIndicator();
  if (indicator instanceof UserDefIndicator) {
    reomveElements.add(indicator.getIndicatorDefinition());
    if (IndicatorCategoryHelper.isMatching(UDIHelper.getUDICategory(indicator))) {
      reomveElements.addAll(indicator.getParameters().getDataValidDomain().getPatterns());
    }
  }
 else   if (indicator instanceof PatternMatchingIndicator) {
    reomveElements.addAll(indicator.getParameters().getDataValidDomain().getPatterns());
  }
  DependenciesHandler.getInstance().removeDependenciesBetweenModels(analysis,reomveElements);
  for (  ModelElement me : reomveElements) {
    EMFUtil.saveSingleResource(me.eResource());
  }
}","/** 
 * DOC xqliu Comment method ""removeDependency"".
 * @param analysis
 * @param unit
 */
protected void removeDependency(Analysis analysis,IndicatorUnit unit){
  List<ModelElement> reomveElements=new ArrayList<ModelElement>();
  Indicator indicator=unit.getIndicator();
  if (indicator instanceof UserDefIndicator) {
    reomveElements.add(indicator.getIndicatorDefinition());
    if (IndicatorCategoryHelper.isUserDefMatching(UDIHelper.getUDICategory(indicator))) {
      reomveElements.addAll(indicator.getParameters().getDataValidDomain().getPatterns());
    }
  }
 else   if (indicator instanceof PatternMatchingIndicator) {
    reomveElements.addAll(indicator.getParameters().getDataValidDomain().getPatterns());
  }
  DependenciesHandler.getInstance().removeDependenciesBetweenModels(analysis,reomveElements);
  for (  ModelElement me : reomveElements) {
    EMFUtil.saveSingleResource(me.eResource());
  }
}",0.9961643835616438
139698,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (parentElement instanceof TreePath) {
    TreePath path=(TreePath)parentElement;
    if (path.getLastSegment() instanceof AnaElementFolderNode) {
      return true;
    }
  }
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    if (SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(eObj) != null || dependencySwitch.doSwitch(eObj) != null) {
      return false;
    }
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getName().indexOf(""String_Node_Str"") == 0) {
      return false;
    }
    if (file.getFileExtension().equals(FactoriesUtil.ITEM_EXTENSION) || file.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      return false;
    }
    return file.getFileExtension() != null;
  }
  return true;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (parentElement instanceof TreePath) {
    TreePath path=(TreePath)parentElement;
    if (path.getLastSegment() instanceof AnaElementFolderNode) {
      return true;
    }
  }
 else   if (parentElement instanceof IFolder) {
    IFolder folder=(IFolder)parentElement;
    if (""String_Node_Str"".equals(folder.getName())) {
      return false;
    }
  }
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    if (SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(eObj) != null || dependencySwitch.doSwitch(eObj) != null) {
      return false;
    }
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getName().indexOf(""String_Node_Str"") == 0) {
      return false;
    }
    if (file.getFileExtension().equals(FactoriesUtil.ITEM_EXTENSION) || file.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      return false;
    }
    return file.getFileExtension() != null;
  }
  return true;
}",0.9081364829396326
139699,"/** 
 * DOC zqin ExportPatternsAction constructor comment.
 */
public ExportPatternsAction(IFolder folder,boolean isForExchange){
  if (isForExchange) {
    setText(""String_Node_Str"");
  }
 else {
    setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.PATTERN_REG));
  this.folder=folder;
  this.isForExchange=isForExchange;
}","/** 
 * DOC zqin ExportPatternsAction constructor comment.
 */
public ExportPatternsAction(IFolder folder,boolean isForExchange){
  if (isForExchange) {
    setText(""String_Node_Str"");
  }
 else {
    setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.EXPORT));
  this.folder=folder;
  this.isForExchange=isForExchange;
}",0.983481575603558
139700,"/** 
 * DOC qzhang ImportPatternsAction constructor comment.
 */
public ImportPatternsAction(IFolder folder,ExpressionType type){
  setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.PATTERN_REG));
  this.folder=folder;
  this.type=type;
}","/** 
 * DOC qzhang ImportPatternsAction constructor comment.
 */
public ImportPatternsAction(IFolder folder,ExpressionType type){
  setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.IMPORT));
  this.folder=folder;
  this.type=type;
}",0.9785123966942147
139701,"public ExportIndicatorDefinitionAction(){
  super(""String_Node_Str"");
  setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_REDO));
}","public ExportIndicatorDefinitionAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.EXPORT));
}",0.7876923076923077
139702,"public ExportUDIAction(IFolder folder,boolean isForExchange){
  if (isForExchange) {
    setText(""String_Node_Str"");
  }
 else {
    setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.IND_DEFINITION));
  this.folder=folder;
  this.isForExchange=isForExchange;
}","public ExportUDIAction(IFolder folder,boolean isForExchange){
  if (isForExchange) {
    setText(""String_Node_Str"");
  }
 else {
    setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.EXPORT));
  this.folder=folder;
  this.isForExchange=isForExchange;
}",0.9724770642201837
139703,"public ImportIndicatorDefinitionAction(){
  super(""String_Node_Str"");
  setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_UNDO));
}","public ImportIndicatorDefinitionAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.IMPORT));
}",0.8
139704,"public ImportRemotePatternAction(IEcosComponent[] components){
  super(""String_Node_Str"");
  setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_TOOL_UNDO));
  this.components=components;
}","public ImportRemotePatternAction(IEcosComponent[] components){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.IMPORT));
  this.components=components;
}",0.8477751756440282
139705,"public ImportUDIAction(IFolder folder){
  setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.IND_DEFINITION));
  this.folder=folder;
}","public ImportUDIAction(IFolder folder){
  setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.IMPORT));
  this.folder=folder;
}",0.9591836734693876
139706,"@Override public boolean performOk(){
  boolean ok=super.performOk();
  getPreferenceStore().setValue(header.getText(),execCombo.getText());
  return ok;
}","@Override public boolean performOk(){
  boolean ok=super.performOk();
  saveLanguageType();
  getPreferenceStore().setValue(header.getText(),execCombo.getText());
  return ok;
}",0.933734939759036
139707,"@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  header=new Label(mainComposite,SWT.WRAP);
  header.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  header.setLayoutData(gd);
  execCombo=new CCombo(mainComposite,SWT.BORDER);
  execCombo.setEditable(false);
  for (  LocalToLanguageEnum oneEnum : LocalToLanguageEnum.values()) {
    execCombo.add(oneEnum.getLocale());
    String language=getPreferenceStore().getString(header.getText());
    execCombo.setText(language == null ? LocalToLanguageEnum.ENGLISH.getLocale() : language);
  }
  GridData d=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  execCombo.setLayoutData(d);
  Label label=new Label(mainComposite,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData g=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  label.setLayoutData(g);
  Button allUpdate=new Button(mainComposite,SWT.FLAT);
  allUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  allUpdate.setLayoutData(new GridData());
  Button validatedUpdate=new Button(mainComposite,SWT.NONE);
  validatedUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  validatedUpdate.setLayoutData(new GridData());
  allUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(false,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  validatedUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(true,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  return mainComposite;
}","@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  header=new Label(mainComposite,SWT.WRAP);
  header.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  header.setLayoutData(gd);
  execCombo=new Combo(mainComposite,SWT.READ_ONLY);
  for (  LocalToLanguageEnum oneEnum : LocalToLanguageEnum.values()) {
    execCombo.add(oneEnum.getLocale());
    String language=getPreferenceStore().getString(header.getText());
    execCombo.setText(language == null ? LocalToLanguageEnum.ENGLISH.getLocale() : language);
  }
  GridData d=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  execCombo.setLayoutData(d);
  Label label=new Label(mainComposite,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData g=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  label.setLayoutData(g);
  Button allUpdate=new Button(mainComposite,SWT.FLAT);
  allUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  allUpdate.setLayoutData(new GridData());
  Button validatedUpdate=new Button(mainComposite,SWT.NONE);
  validatedUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  validatedUpdate.setLayoutData(new GridData());
  allUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(false,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  validatedUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(true,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  return mainComposite;
}",0.9846596356663472
139708,"private static String createAndStorePattern(PatternParameters parameters,IFolder selectionFolder,ExpressionType type){
  Pattern pattern=PatternResourceFileHelper.getInstance().createPattern(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status);
  for (  String key : parameters.regex.keySet()) {
    RegularExpression regularExpr=BooleanExpressionHelper.createRegularExpression(key,parameters.regex.get(key),type);
    pattern.getComponents().add(regularExpr);
  }
  boolean validStatus=PatternUtilities.isPatternValid(pattern);
  TaggedValueHelper.setValidStatus(validStatus,pattern);
  String fname=DqRepositoryViewService.createFilename(parameters.name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    if (1 == folderNames.length && ""String_Node_Str"".equals(folderNames[0])) {
switch (type) {
case SQL_LIKE:
        folderNames[0]=DQStructureManager.SQL;
      break;
case REGEXP:
    folderNames[0]=DQStructureManager.REGEX;
  break;
}
}
for (String folderName : folderNames) {
IFolder folder=selectionFolder.getFolder(folderName);
if (!folder.exists()) {
folder.create(false,true,null);
}
folder.setPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.PATTERNS_FOLDER_PROPERTY);
selectionFolder=folder;
}
}
 catch (CoreException e) {
log.error(e,e);
}
IFile pfile=selectionFolder.getFile(fname);
EMFSharedResources.getInstance().addEObjectToResourceSet(pfile.getFullPath().toString(),pattern);
EMFSharedResources.getInstance().saveLastResource();
return selectionFolder.getName();
}","private static String createAndStorePattern(PatternParameters parameters,IFolder selectionFolder,ExpressionType type){
  Pattern pattern=PatternResourceFileHelper.getInstance().createPattern(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status);
  for (  String key : parameters.regex.keySet()) {
    RegularExpression regularExpr=BooleanExpressionHelper.createRegularExpression(key,parameters.regex.get(key),type);
    pattern.getComponents().add(regularExpr);
  }
  boolean validStatus=PatternUtilities.isPatternValid(pattern);
  TaggedValueHelper.setValidStatus(validStatus,pattern);
  String fname=DqRepositoryViewService.createFilename(parameters.name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      folder.setPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY,DQStructureManager.PATTERNS_FOLDER_PROPERTY);
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  EMFSharedResources.getInstance().addEObjectToResourceSet(pfile.getFullPath().toString(),pattern);
  EMFSharedResources.getInstance().saveLastResource();
  return ResourceManager.getLibrariesFolder().getFolder(DQStructureManager.PATTERNS).getLocationURI().relativize(selectionFolder.getLocationURI()).toString();
}",0.7730364873222016
139709,"public static String importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  String information=""String_Node_Str"";
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  String name=""String_Node_Str"";
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information=""String_Node_Str"" + name + ""String_Node_Str"";
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        String relativePath=createAndStorePattern(patternParameters,selectionFolder,type);
        names.add(name);
        information=""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ relativePath+ ""String_Node_Str"";
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information=""String_Node_Str"" + name + ""String_Node_Str"";
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
    }
catch (    IOException e) {
      log.error(e,e);
    }
  }
  return information;
}","public static String importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename){
  StringBuffer importInformation=new StringBuffer();
  Set<String> names=PatternUtilities.getAllPatternNames(selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importInformation.append(""String_Node_Str"" + name + ""String_Node_Str"");
            importInformation.append(""String_Node_Str"");
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        String relativePath=createAndStorePattern(patternParameters,selectionFolder,type);
        names.add(name);
        importInformation.append(""String_Node_Str"" + name + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
        importInformation.append(""String_Node_Str"");
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importInformation.append(""String_Node_Str"");
      importInformation.append(""String_Node_Str"");
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importInformation.append(""String_Node_Str"" + contents + ""String_Node_Str"");
                importInformation.append(""String_Node_Str"");
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importInformation.append(""String_Node_Str"" + contents + ""String_Node_Str""+ relativePath+ ""String_Node_Str"");
            importInformation.append(""String_Node_Str"");
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importInformation.append(""String_Node_Str"");
      importInformation.append(""String_Node_Str"");
    }
catch (    IOException e) {
      log.error(e,e);
      importInformation.append(""String_Node_Str"");
      importInformation.append(""String_Node_Str"");
    }
  }
  return importInformation.toString();
}",0.9092585006145024
139710,"@Override public boolean performFinish(){
  File file=new File(page.getSourceFile());
  ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename());
  return true;
}","@Override public boolean performFinish(){
  File file=new File(page.getSourceFile());
  final StringBuffer information=new StringBuffer();
  information.append(ImportFactory.importToStucture(file,folder,type,page.getSkip(),page.getRename()));
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      ImportInfoDialog.openImportInformation(null,information);
    }
  }
);
  return true;
}",0.569023569023569
139711,"private void updateUI(IJobChangeEvent event){
  final StringBuffer information=new StringBuffer();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      File file=new File(componet.getInstalledLocation());
      List<File> files=new ArrayList<File>();
      extractFiles(file,files);
      ExpressionType type=ExpressionType.REGEXP;
      if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.SQL_LIKE;
      }
      for (      File oneFile : files) {
        information.append(ImportFactory.importToStucture(oneFile,getFolder(DQStructureManager.PATTERNS),type,true,true));
        information.append(""String_Node_Str"");
      }
    }
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialog.openInformation(null,""String_Node_Str"",information.toString());
      }
    }
);
    CorePlugin.getDefault().refreshDQView();
  }
}","private void updateUI(IJobChangeEvent event){
  final StringBuffer information=new StringBuffer();
  setEnabled(true);
  if (fExtensionDownloaded > 0) {
    for (    IEcosComponent componet : fInstalledComponents) {
      File file=new File(componet.getInstalledLocation());
      List<File> files=new ArrayList<File>();
      extractFiles(file,files);
      ExpressionType type=ExpressionType.REGEXP;
      IFolder folder=getFolder(DQStructureManager.PATTERNS);
      if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.REGEXP;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.REGEX);
      }
 else       if (""String_Node_Str"".equals(componet.getCategry().getName())) {
        type=ExpressionType.SQL_LIKE;
        folder=getFolder(DQStructureManager.PATTERNS).getFolder(DQStructureManager.SQL);
      }
      for (      File oneFile : files) {
        information.append(ImportFactory.importToStucture(oneFile,folder,type,true,true));
        information.append(""String_Node_Str"");
      }
    }
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        ImportInfoDialog.openImportInformation(null,information);
      }
    }
);
    CorePlugin.getDefault().refreshDQView();
  }
}",0.7815498154981549
139712,"private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdTable tdTable=SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdTable == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String tableName=quote(tdTable.getName());
  if (!belongToSameSchemata(tdTable)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(tdTable);
  String catalogName=getQuotedCatalogName(tdTable);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(tdTable);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  tableName=dbms().toQualifiedName(catalogName,schemaName,tableName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(joinConditions) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),tableName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdTable tdTable=SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdTable == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String tableName=quote(tdTable.getName());
  if (!belongToSameSchemata(tdTable)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(tdTable);
  String catalogName=getQuotedCatalogName(tdTable);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(tdTable);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  tableName=dbms().toQualifiedName(catalogName,schemaName,tableName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(tdTable,joinConditions) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),tableName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9988023952095808
139713,"private String getTableName(ModelElement colA){
  TdColumn columnA=colA != null ? SwitchHelpers.COLUMN_SWITCH.doSwitch(colA) : null;
  return (columnA != null) ? ColumnHelper.getColumnSetFullName(columnA) : null;
}","private String getTableName(ModelElement col){
  TdColumn column=col != null ? SwitchHelpers.COLUMN_SWITCH.doSwitch(col) : null;
  return (column != null) ? ColumnHelper.getColumnSetFullName(column) : null;
}",0.985781990521327
139714,"public String createJoinConditionAsString(List<JoinElement> joinElements){
  if (joinElements.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder();
  for (  JoinElement joinElement : joinElements) {
    ModelElement colA=joinElement.getColA();
    String tableA=getTableName(colA);
    String tableAliasA=joinElement.getTableAliasA();
    String columnAName=getColumnName(colA);
    String columnAliasA=joinElement.getColumnAliasA();
    boolean hasTableAliasA=!StringUtils.isEmpty(tableAliasA);
    boolean hasColumnAliasA=!StringUtils.isEmpty(columnAliasA);
    ModelElement colB=joinElement.getColB();
    String tableB=getTableName(colB);
    String tableAliasB=joinElement.getTableAliasB();
    String columnBName=getColumnName(colB);
    String columnAliasB=joinElement.getColumnAliasB();
    boolean hasTableAliasB=!StringUtils.isEmpty(tableAliasB);
    boolean hasColumnAliasB=!StringUtils.isEmpty(columnAliasB);
    String operator=joinElement.getOperator();
    if (hasTableAliasA) {
      builder.append(surroundWithSpaces(tableAliasA));
    }
    builder.append(""String_Node_Str"");
    builder.append(surroundWithSpaces(quote(tableB)));
    if (hasTableAliasB) {
      builder.append(surroundWithSpaces(tableAliasB));
    }
    builder.append(""String_Node_Str"");
    String tA=hasTableAliasA ? null : quote(tableA);
    String tB=hasTableAliasB ? null : quote(tableB);
    String cA=hasColumnAliasA ? columnAliasA : quote(columnAName);
    String cB=hasColumnAliasB ? columnAliasB : quote(columnBName);
    createJoinClause(builder,tA,cA,tB,cB,operator);
  }
  return builder.toString();
}","public String createJoinConditionAsString(ModelElement leftTable,List<JoinElement> joinElements){
  if (joinElements.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder();
  for (  JoinElement joinElement : joinElements) {
    ModelElement colA=joinElement.getColA();
    String tableA=getTableName(colA);
    String tableAliasA=joinElement.getTableAliasA();
    String columnAName=getColumnName(colA);
    String columnAliasA=joinElement.getColumnAliasA();
    boolean hasTableAliasA=!StringUtils.isEmpty(tableAliasA);
    boolean hasColumnAliasA=!StringUtils.isEmpty(columnAliasA);
    ModelElement colB=joinElement.getColB();
    String tableB=getTableName(colB);
    String tableAliasB=joinElement.getTableAliasB();
    String columnBName=getColumnName(colB);
    String columnAliasB=joinElement.getColumnAliasB();
    boolean hasTableAliasB=!StringUtils.isEmpty(tableAliasB);
    boolean hasColumnAliasB=!StringUtils.isEmpty(columnAliasB);
    String operator=joinElement.getOperator();
    if (joinClauseStartsWithWrongTable(leftTable,getTable(colB)) && !hasTableAliasA && !hasTableAliasB) {
      buildJoinClause(builder,tableB,tableAliasB,columnBName,columnAliasB,hasTableAliasB,hasColumnAliasB,tableA,tableAliasA,columnAName,columnAliasA,hasTableAliasA,hasColumnAliasA,operator);
    }
 else {
      buildJoinClause(builder,tableA,tableAliasA,columnAName,columnAliasA,hasTableAliasA,hasColumnAliasA,tableB,tableAliasB,columnBName,columnAliasB,hasTableAliasB,hasColumnAliasB,operator);
    }
  }
  return builder.toString();
}",0.6473520249221184
139715,"private String getColumnName(ModelElement colA){
  TdColumn columnA=colA != null ? SwitchHelpers.COLUMN_SWITCH.doSwitch(colA) : null;
  return columnA != null ? columnA.getName() : null;
}","private String getColumnName(ModelElement col){
  TdColumn column=col != null ? SwitchHelpers.COLUMN_SWITCH.doSwitch(col) : null;
  return column != null ? column.getName() : null;
}",0.9837837837837838
139716,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass) || UDIHelper.isMatching(indicator)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass) || UDIHelper.isMatching(indicator)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9936802973977696
139717,"/** 
 * DOC scorreia Comment method ""getCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @throws AnalysisExecutionException
 */
private String getCompletedStringForQuantiles(Indicator indicator,Expression sqlExpression,String colName,String table,List<String> whereExpression) throws AnalysisExecutionException {
  String catalogOrSchema=getCatalogOrSchemaName(indicator.getAnalyzedElement());
  long count=getCount(cachedAnalysis,colName,table,catalogOrSchema,whereExpression);
  if (count == -1) {
    throw new AnalysisExecutionException(Messages.getString(""String_Node_Str"",dbms().toQualifiedName(catalogOrSchema,null,colName)));
  }
  if (count == 0) {
    this.errorMessage=Messages.getString(""String_Node_Str"",dbms().toQualifiedName(catalogOrSchema,null,colName));
    throw new AnalysisExecutionException(errorMessage);
  }
  Long midleCount=getOffsetInLimit(indicator,count);
  Integer nbRow=getNbReturnedRows(indicator,count);
  long nPlusSkip=midleCount + nbRow;
  return dbms().fillGenericQueryWithColumnTableLimitOffset(sqlExpression.getBody(),colName,table,String.valueOf(nbRow),String.valueOf(midleCount),String.valueOf(nPlusSkip));
}","/** 
 * DOC scorreia Comment method ""getCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @throws AnalysisExecutionException
 */
private String getCompletedStringForQuantiles(Indicator indicator,Expression sqlExpression,String colName,String table,List<String> whereExpression) throws AnalysisExecutionException {
  String catalogOrSchema=getCatalogOrSchemaName(indicator.getAnalyzedElement());
  long count=getCount(cachedAnalysis,colName,table,catalogOrSchema,whereExpression);
  if (count == -1) {
    this.errorMessage=Messages.getString(""String_Node_Str"",dbms().toQualifiedName(catalogOrSchema,null,colName));
    return null;
  }
  if (count == 0) {
    this.errorMessage=Messages.getString(""String_Node_Str"",dbms().toQualifiedName(catalogOrSchema,null,colName));
    return null;
  }
  Long midleCount=getOffsetInLimit(indicator,count);
  Integer nbRow=getNbReturnedRows(indicator,count);
  long nPlusSkip=midleCount + nbRow;
  return dbms().fillGenericQueryWithColumnTableLimitOffset(sqlExpression.getBody(),colName,table,String.valueOf(nbRow),String.valueOf(midleCount),String.valueOf(nPlusSkip));
}",0.9460132890365448
139718,"@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName()),IProgressMonitor.UNKNOWN);
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(false);
      }
    }
  }
);
  ReturnCode executed=null;
  AnalysisExecutorThread aet=new AnalysisExecutorThread(analysis,monitor);
  new Thread(aet).start();
  while (true) {
    if (aet.getExecuted() != null) {
      executed=aet.getExecuted();
      break;
    }
    if (monitor.isCanceled()) {
      executed=new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      break;
    }
  }
  aet=null;
  monitor.done();
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(true);
      }
    }
  }
);
  return getResultStatus(executed);
}","@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName()),IProgressMonitor.UNKNOWN);
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(false);
      }
    }
  }
);
  ReturnCode executed=null;
  AnalysisExecutorThread aet=new AnalysisExecutorThread(analysis,monitor);
  new Thread(aet).start();
  while (true) {
    if (aet.getExecuted() != null) {
      executed=aet.getExecuted();
      break;
    }
    if (monitor.isCanceled()) {
      executed=new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      break;
    }
  }
  aet=null;
  monitor.done();
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(true);
      }
    }
  }
);
  displayResultStatus(executed);
  return Status.OK_STATUS;
}",0.978021978021978
139719,"public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      String value=unit.getValue() == null ? ""String_Node_Str"" : unit.getValue().toString();
      map.put(unit.getType(),Double.parseDouble(value));
    }
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(unit.getType().getLabel());
    entity.setValue(String.valueOf(unit.getValue()));
    customerdataset.addDataEntity(entity);
  }
  if (isIntact()) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset();
    BoxAndWhiskerItem item=ChartDatasetUtils.createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
    List zerolist=new ArrayList();
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    map.remove(IndicatorEnum.RangeIndicatorEnum);
    map.remove(IndicatorEnum.IQRIndicatorEnum);
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}","public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      String value=unit.getValue() == null ? ""String_Node_Str"" : unit.getValue().toString();
      try {
        map.put(unit.getType(),Double.parseDouble(value));
      }
 catch (      Exception e) {
        log.error(e.getMessage(),e);
      }
    }
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(unit.getType().getLabel());
    entity.setValue(String.valueOf(unit.getValue()));
    customerdataset.addDataEntity(entity);
  }
  if (isIntact()) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset();
    BoxAndWhiskerItem item=ChartDatasetUtils.createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
    List zerolist=new ArrayList();
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    map.remove(IndicatorEnum.RangeIndicatorEnum);
    map.remove(IndicatorEnum.IQRIndicatorEnum);
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}",0.9764821166095052
139720,"public Collection<IndicatorDefinition> getAllUDIs(IFolder patternFodler){
  return Collections.EMPTY_LIST;
}","public Collection<IndicatorDefinition> getAllUDIs(IFolder patternFodler){
  if (resourcesNumberChanged) {
    try {
      searchAllUDIs(patternFodler);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
    resourcesNumberChanged=false;
  }
  return idsMap.values();
}",0.4
139721,"@Override protected String getFileExtension(){
  return null;
}","@Override protected String getFileExtension(){
  return FactoriesUtil.UDI;
}",0.8633093525179856
139722,"public TypedReturnCode<IFile> createAndSaveCWMFile(ModelElement cwmElement){
  IndicatorDefinition indicatorDefinition=(IndicatorDefinition)cwmElement;
  indicatorDefinition.getSqlGenericExpression().add(getExpression());
  UDIHelper.setUDICategory(indicatorDefinition,DefinitionHandler.getInstance().getUserDefinedCountIndicatorCategory());
  IFolder folder=parameter.getFolderProvider().getFolderResource();
  return ElementWriterFactory.getInstance().createPatternWriter().create(indicatorDefinition,folder);
}","public TypedReturnCode<IFile> createAndSaveCWMFile(ModelElement cwmElement){
  IndicatorDefinition indicatorDefinition=(IndicatorDefinition)cwmElement;
  indicatorDefinition.getSqlGenericExpression().add(getExpression());
  UDIHelper.setUDICategory(indicatorDefinition,DefinitionHandler.getInstance().getUserDefinedCountIndicatorCategory());
  IFolder folder=parameter.getFolderProvider().getFolderResource();
  return ElementWriterFactory.getInstance().createUDIndicatorWriter().create(indicatorDefinition,folder);
}",0.9825242718446602
139723,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || ""String_Node_Str"".equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass) || UDIHelper.isMatching(indicator)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9956162324649298
139724,"public IndicatorCategory getIndicatorCategoryByLabel(String label){
  if (USER_DEFINED_COUNT_CATEGORY_LABEL.equals(label)) {
    return getIndicatorCategory(USER_DEFINED_COUNT_CATEGORY);
  }
 else   if (USER_DEFINED_MATCH_CATEGORY_LABEL.equals(label)) {
    return getIndicatorCategory(USER_DEFINED_MATCH_CATEGORY);
  }
 else   if (USER_DEFINED_FREQUENCY_CATEGORY_LABEL.equals(label)) {
    return getIndicatorCategory(USER_DEFINED_FREQUENCY_CATEGORY);
  }
 else   if (USER_DEFINED_COMPARISON_CATEGORY_LABEL.equals(label)) {
    return getIndicatorCategory(USER_DEFINED_COMPARISON_CATEGORY);
  }
 else   if (USER_DEFINED_NOMINAL_CORRELATION_CATEGORY_LABEL.equals(label)) {
    return getIndicatorCategory(USER_DEFINED_NOMINAL_CORRELATION_CATEGORY);
  }
 else   if (USER_DEFINED_INTERVAL_CORRELATION_CATEGORY_LABEL.equals(label)) {
    return getIndicatorCategory(USER_DEFINED_INTERVAL_CORRELATION_CATEGORY);
  }
 else   if (USER_DEFINED_TIME_CORRELATION_CATEGORY_LABEL.equals(label)) {
    return getIndicatorCategory(USER_DEFINED_TIME_CORRELATION_CATEGORY);
  }
 else {
    return null;
  }
}","public IndicatorCategory getIndicatorCategoryByLabel(String label){
  return getUserDefinedIndicatorCategoryMap().get(label);
}",0.180327868852459
139725,"/** 
 * DOC jet Comment method ""removeRegexFunction"". <p>Just remove a UDF from .Talend.definition File.
 * @param dbmsName
 * @return
 */
public boolean removeRegexFunction(String dbmsName){
  IndicatorDefinition regexIndDef=this.getIndicatorDefinition(REGULAR_EXPRESSION_MATCHING);
  EList<Expression> sqlGenericExpression=regexIndDef.getSqlGenericExpression();
  for (  Expression expression : sqlGenericExpression) {
    if (dbmsName.equals(expression.getLanguage())) {
      sqlGenericExpression.remove(expression);
      DefinitionHandler.getInstance().saveResource();
      return true;
    }
  }
  return false;
}","/** 
 * DOC jet Comment method ""removeRegexFunction"". <p> Just remove a UDF from .Talend.definition File.
 * @param dbmsName
 * @return
 */
public boolean removeRegexFunction(String dbmsName){
  IndicatorDefinition regexIndDef=this.getIndicatorDefinition(REGULAR_EXPRESSION_MATCHING);
  EList<Expression> sqlGenericExpression=regexIndDef.getSqlGenericExpression();
  for (  Expression expression : sqlGenericExpression) {
    if (dbmsName.equals(expression.getLanguage())) {
      sqlGenericExpression.remove(expression);
      DefinitionHandler.getInstance().saveResource();
      return true;
    }
  }
  return false;
}",0.999195494770716
139726,"/** 
 * Create a new database node with the given name
 * @param name
 * @param alias
 */
public DatabaseNode(String name,MetaDataSession session) throws SQLException {
  super(name,session);
  setImageKey(""String_Node_Str"");
  try {
    SQLDatabaseMetaData metadata=_session.getMetaData();
    if (metadata.supportsCatalogs()) {
      _supportsCatalogs=true;
    }
    if (metadata.supportsSchemas()) {
      _supportsSchemas=true;
    }
    _databaseProductName=metadata.getDatabaseProductName();
    try {
      _databaseVersion=""String_Node_Str"" + metadata.getJDBCMetaData().getDatabaseMajorVersion() + ""String_Node_Str""+ metadata.getJDBCMetaData().getDatabaseMinorVersion()+ ""String_Node_Str"";
    }
 catch (    Exception e) {
      SQLExplorerPlugin.error(""String_Node_Str"",e);
      _databaseVersion=""String_Node_Str"";
    }
  }
 catch (  AbstractMethodError e) {
    SQLExplorerPlugin.error(""String_Node_Str"",e);
  }
}","/** 
 * Create a new database node with the given name
 * @param name
 * @param alias
 */
public DatabaseNode(String name,MetaDataSession session) throws SQLException {
  super(name,session);
  setImageKey(""String_Node_Str"");
  try {
    SQLDatabaseMetaData metadata=_session.getMetaData();
    if (metadata.supportsCatalogs()) {
      _supportsCatalogs=true;
    }
    if (metadata.supportsSchemas()) {
      _supportsSchemas=true;
    }
    _databaseProductName=metadata.getDatabaseProductName();
    try {
      _databaseVersion=""String_Node_Str"" + metadata.getJDBCMetaData().getDatabaseMajorVersion() + ""String_Node_Str""+ metadata.getJDBCMetaData().getDatabaseMinorVersion()+ ""String_Node_Str"";
    }
 catch (    Exception e) {
      if (e.getMessage().toLowerCase().indexOf(""String_Node_Str"") > -1) {
        log.warn(e.getMessage());
      }
 else {
        SQLExplorerPlugin.error(""String_Node_Str"",e);
      }
      _databaseVersion=""String_Node_Str"";
    }
  }
 catch (  AbstractMethodError e) {
    SQLExplorerPlugin.error(""String_Node_Str"",e);
  }
}",0.932527693856999
139727,"public TypedReturnCode<Dependency> setDependencyOn(Indicator indicator,Pattern pattern){
  return setUsageDependencyOn(indicator,pattern);
}","public TypedReturnCode<Dependency> setDependencyOn(Analysis analysis,IndicatorDefinition indicatorDefinition){
  return setUsageDependencyOn(analysis,indicatorDefinition);
}",0.7667731629392971
139728,"@Override protected void addDependencies(ModelElement element){
}","@Override protected void addDependencies(ModelElement element){
  Analysis analysis=(Analysis)element;
  List<IndicatorDefinition> userDefinedIndicators=AnalysisHelper.getUserDefinedIndicators(analysis);
  for (  IndicatorDefinition udi : userDefinedIndicators) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,udi);
    if (dependencyReturn.isOk()) {
      EMFUtil.saveSingleResource(udi.eResource());
    }
  }
  List<Pattern> patterns=AnalysisHelper.getPatterns(analysis);
  for (  Pattern pattern : patterns) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(analysis,pattern);
    if (dependencyReturn.isOk()) {
      EMFUtil.saveSingleResource(pattern.eResource());
    }
  }
}",0.1511627906976744
139729,"/** 
 * DOC rli Comment method ""deleteIndicatorItems"".
 * @param treeItem
 * @param inidicatorUnit
 */
private void deleteIndicatorItems(ColumnIndicator columnIndicator,IndicatorUnit inidicatorUnit){
  columnIndicator.removeIndicatorUnit(inidicatorUnit);
}","/** 
 * DOC rli Comment method ""deleteIndicatorItems"".
 * @param treeItem
 * @param inidicatorUnit
 */
private void deleteIndicatorItems(ColumnIndicator columnIndicator,IndicatorUnit inidicatorUnit){
  columnIndicator.removeIndicatorUnit(inidicatorUnit);
  removeDependency(getAnalysis(),inidicatorUnit);
}",0.9110320284697508
139730,"public void deleteResource(){
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  final IResource[] resources=selectedFiles;
  if (!checkDeleteContent(resources)) {
    return;
  }
  List<Map<String,String>> driverList=driverPreferCustInfo();
  for (  Map<String,String> driverInfoMap : driverList) {
    String connectionURI=driverInfoMap.get(""String_Node_Str"");
    for (    ModelElement tdDataProvider : modelElementList) {
      if (tdDataProvider.eResource().getURI().toString().trim().equals(connectionURI.trim())) {
        String customDriverId=driverInfoMap.get(""String_Node_Str"");
        if (driverManager.getDriver(customDriverId) != null) {
          driverManager.removeDriver(driverManager.getDriver(customDriverId));
        }
      }
    }
  }
  delRelatedResource(isDeleteContent,resources);
  EObjectHelper.removeDependencys(resources);
  for (  IResource res : resources) {
    try {
      res.delete(true,new NullProgressMonitor());
      res.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
  }
  CorePlugin.getDefault().refreshDQView();
}","public void deleteResource(){
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  final IResource[] resources=selectedFiles;
  if (!checkDeleteContent(resources)) {
    return;
  }
  List<Map<String,String>> driverList=driverPreferCustInfo();
  for (  Map<String,String> driverInfoMap : driverList) {
    String connectionURI=driverInfoMap.get(""String_Node_Str"");
    for (    ModelElement tdDataProvider : modelElementList) {
      if (tdDataProvider.eResource().getURI().toString().trim().equals(connectionURI.trim())) {
        String customDriverId=driverInfoMap.get(""String_Node_Str"");
        if (driverManager.getDriver(customDriverId) != null) {
          driverManager.removeDriver(driverManager.getDriver(customDriverId));
        }
      }
    }
  }
  delRelatedResource(isDeleteContent,resources);
  EObjectHelper.removeDependencys(resources);
  for (  IResource res : resources) {
    try {
      if (res.isLinked()) {
        File file=new File(res.getRawLocation().toOSString());
        if (file.exists()) {
          file.delete();
        }
      }
      res.delete(true,new NullProgressMonitor());
      res.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
  }
  CorePlugin.getDefault().refreshDQView();
}",0.9345118521494576
139731,"/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param skip
 * @param rename
 */
public static void importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Set<String> names=UDIUtils.getAllIndicatorNames(selectionFolder);
    File tempFile=null, copyFile=null;
    try {
      tempFile=new File(importFile.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
      int tempCount=0;
      while (tempFile.exists() || tempCount > 100) {
        tempFile=new File(importFile.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
        tempCount++;
      }
      if (tempFile.mkdirs()) {
        FilesUtils.unzip(importFile.getAbsolutePath(),tempFile.getAbsolutePath());
        File[] listFiles=tempFile.listFiles();
        for (int i=0; i < listFiles.length; ++i) {
          File file=listFiles[i];
          String fileExt=getFileExtName(file);
          if (FactoriesUtil.UDI.equalsIgnoreCase(fileExt)) {
            String fname=DqRepositoryViewService.createFilename(file.getName(),FactoriesUtil.UDI);
            copyFile=new File(selectionFolder.getLocation().toOSString() + ""String_Node_Str"" + fname);
            FilesUtils.copyFile(file,copyFile);
            if (copyFile.exists()) {
              IndicatorDefinition id=UDIResourceFileHelper.getInstance().findUDI(selectionFolder.getFile(fname));
              String name=id.getName();
              if (names.contains(name)) {
                if (skip) {
                  deleteFiles(copyFile);
                  continue;
                }
                if (rename) {
                  java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
                  name+=""String_Node_Str"" + simpleDateFormat.format(new Date()) + Math.random()+ ""String_Node_Str"";
                  id.setName(name);
                  names.add(name);
                }
              }
              UDIndicatorWriter.getInstance().createUDIndicatorFile(id,selectionFolder);
              deleteFiles(copyFile);
            }
          }
        }
        deleteFiles(tempFile);
      }
    }
 catch (    Exception e) {
      deleteFiles(copyFile,tempFile);
      log.error(e,e);
    }
  }
}","/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param skip
 * @param rename
 */
public static void importIndicatorToStucture(File importFile,IFolder selectionFolder,boolean skip,boolean rename){
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Set<String> names=UDIUtils.getAllIndicatorNames(selectionFolder);
    File tempFile=null, copyFile=null;
    try {
      tempFile=new File(importFile.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
      int tempCount=0;
      while (tempFile.exists() || tempCount > 100) {
        tempFile=new File(importFile.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
        tempCount++;
      }
      if (tempFile.mkdirs()) {
        FilesUtils.unzip(importFile.getAbsolutePath(),tempFile.getAbsolutePath());
        File[] listFiles=tempFile.listFiles();
        for (int i=0; i < listFiles.length; ++i) {
          File file=listFiles[i];
          String fileExt=getFileExtName(file);
          if (FactoriesUtil.UDI.equalsIgnoreCase(fileExt)) {
            String fname=DqRepositoryViewService.createFilename(file.getName(),FactoriesUtil.UDI);
            copyFile=new File(selectionFolder.getLocation().toOSString() + ""String_Node_Str"" + fname);
            FilesUtils.copyFile(file,copyFile);
            if (copyFile.exists()) {
              IndicatorDefinition id=UDIResourceFileHelper.getInstance().findUDI(selectionFolder.getFile(fname));
              String name=id.getName();
              if (names.contains(name)) {
                if (skip) {
                  deleteFiles(copyFile);
                  continue;
                }
                if (rename) {
                  java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
                  name+=""String_Node_Str"" + simpleDateFormat.format(new Date()) + Math.random()+ ""String_Node_Str"";
                  id.setName(name);
                }
              }
              UDIndicatorWriter.getInstance().createUDIndicatorFile(id,selectionFolder);
              deleteFiles(copyFile);
              names.add(name);
            }
          }
        }
        deleteFiles(tempFile);
      }
    }
 catch (    Exception e) {
      deleteFiles(copyFile,tempFile);
      log.error(e,e);
    }
  }
}",0.986357999173212
139732,"@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Group group1=new Group(mainComposite,SWT.SHADOW_ETCHED_IN);
  group1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout gridLayout1=new GridLayout();
  group1.setLayout(gridLayout1);
  GridData gridData1=new GridData(GridData.FILL_HORIZONTAL);
  group1.setLayoutData(gridData1);
  Label label1=new Label(group1,SWT.NONE);
  label1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  Button button1=new Button(group1,SWT.RADIO);
  button1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button1.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_1);
    }
  }
);
  Button button2=new Button(group1,SWT.RADIO);
  button2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button2.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_2);
    }
  }
);
  Button button3=new Button(group1,SWT.RADIO);
  button3.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button3.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_3);
    }
  }
);
  setCurrentFolding(ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_MASTER_PAGE_FOLDING));
switch (getCurrentFolding()) {
case FOLDING_1:
    button1.setSelection(true);
  break;
case FOLDING_2:
button2.setSelection(true);
break;
case FOLDING_3:
button3.setSelection(true);
break;
default :
button3.setSelection(true);
}
Group group2=new Group(mainComposite,SWT.SHADOW_ETCHED_IN);
group2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
GridLayout gridLayout2=new GridLayout();
group2.setLayout(gridLayout2);
GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
group2.setLayoutData(gridData2);
Label label2=new Label(group2,SWT.NONE);
label2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
final Button button4=new Button(group2,SWT.CHECK);
button4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
setCurrentAnalyzedElements(ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_RESULT_PAGE_ANALYZED_ELEMENTS) == 0 ? true : false);
button4.setSelection(isCurrentAnalyzedElements());
button4.addSelectionListener(new SelectionListener(){
public void widgetDefaultSelected(SelectionEvent arg0){
}
public void widgetSelected(SelectionEvent arg0){
setCurrentAnalyzedElements(button4.getSelection());
}
}
);
final Button button5=new Button(group2,SWT.CHECK);
button5.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
setCurrentIndicators(ResourcesPlugin.getPlugin().getPluginPreferences().getBoolean(EDITOR_RESULT_PAGE_INDICATORS));
button5.setSelection(isCurrentIndicators());
button5.addSelectionListener(new SelectionListener(){
public void widgetDefaultSelected(SelectionEvent arg0){
}
public void widgetSelected(SelectionEvent arg0){
setCurrentIndicators(button5.getSelection());
}
}
);
Composite pageSizeComp=new Composite(mainComposite,SWT.NONE);
pageSizeComp.setLayout(new GridLayout(2,false));
Label dfofLable=new Label(pageSizeComp,SWT.NONE);
dfofLable.setText(""String_Node_Str"");
pageSizeText=new Text(pageSizeComp,SWT.BORDER);
String pageSize=ResourcesPlugin.getPlugin().getPluginPreferences().getString(ANALYZED_ITEMS_PER_PAGE);
if (pageSize == null || pageSize.equals(""String_Node_Str"")) {
pageSize=DEFAULT_PAGE_SIZE;
}
pageSizeText.setText(pageSize);
pageSizeText.setLayoutData(new GridData());
((GridData)pageSizeText.getLayoutData()).widthHint=100;
return mainComposite;
}","@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Group group1=new Group(mainComposite,SWT.SHADOW_ETCHED_IN);
  group1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout gridLayout1=new GridLayout();
  group1.setLayout(gridLayout1);
  GridData gridData1=new GridData(GridData.FILL_HORIZONTAL);
  group1.setLayoutData(gridData1);
  Label label1=new Label(group1,SWT.NONE);
  label1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button1=new Button(group1,SWT.RADIO);
  button1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button1.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_1);
    }
  }
);
  button2=new Button(group1,SWT.RADIO);
  button2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button2.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_2);
    }
  }
);
  button3=new Button(group1,SWT.RADIO);
  button3.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button3.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
    public void widgetSelected(    SelectionEvent arg0){
      setCurrentFolding(FOLDING_3);
    }
  }
);
  setCurrentFolding(ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_MASTER_PAGE_FOLDING));
switch (getCurrentFolding()) {
case FOLDING_1:
    button1.setSelection(true);
  break;
case FOLDING_2:
button2.setSelection(true);
break;
case FOLDING_3:
button3.setSelection(true);
break;
default :
button3.setSelection(true);
}
Group group2=new Group(mainComposite,SWT.SHADOW_ETCHED_IN);
group2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
GridLayout gridLayout2=new GridLayout();
group2.setLayout(gridLayout2);
GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
group2.setLayoutData(gridData2);
Label label2=new Label(group2,SWT.NONE);
label2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
button4=new Button(group2,SWT.CHECK);
button4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
setCurrentAnalyzedElements(ResourcesPlugin.getPlugin().getPluginPreferences().getInt(EDITOR_RESULT_PAGE_ANALYZED_ELEMENTS) == 0 ? true : false);
button4.setSelection(isCurrentAnalyzedElements());
button4.addSelectionListener(new SelectionListener(){
public void widgetDefaultSelected(SelectionEvent arg0){
}
public void widgetSelected(SelectionEvent arg0){
setCurrentAnalyzedElements(button4.getSelection());
}
}
);
button5=new Button(group2,SWT.CHECK);
button5.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
setCurrentIndicators(ResourcesPlugin.getPlugin().getPluginPreferences().getBoolean(EDITOR_RESULT_PAGE_INDICATORS));
button5.setSelection(isCurrentIndicators());
button5.addSelectionListener(new SelectionListener(){
public void widgetDefaultSelected(SelectionEvent arg0){
}
public void widgetSelected(SelectionEvent arg0){
setCurrentIndicators(button5.getSelection());
}
}
);
Composite pageSizeComp=new Composite(mainComposite,SWT.NONE);
pageSizeComp.setLayout(new GridLayout(2,false));
Label dfofLable=new Label(pageSizeComp,SWT.NONE);
dfofLable.setText(""String_Node_Str"");
pageSizeText=new Text(pageSizeComp,SWT.BORDER);
String pageSize=ResourcesPlugin.getPlugin().getPluginPreferences().getString(ANALYZED_ITEMS_PER_PAGE);
if (pageSize == null || pageSize.equals(""String_Node_Str"")) {
pageSize=DEFAULT_PAGE_SIZE;
}
pageSizeText.setText(pageSize);
pageSizeText.setLayoutData(new GridData());
((GridData)pageSizeText.getLayoutData()).widthHint=100;
return mainComposite;
}",0.9941433021806854
139733,"@Override protected String createSqlStatement(Analysis analysis){
  CwmZQuery query=new CwmZQuery();
  EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
  if (analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  for (  ModelElement modelElement : analysedElements) {
    Table table=SwitchHelpers.TABLE_SWITCH.doSwitch(modelElement);
    if (table == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement.getName());
      return null;
    }
    if (!query.addSelect(table)) {
      this.errorMessage=Messages.getString(""String_Node_Str"");
      return null;
    }
    fromPart.add(table);
  }
  if (!query.addFrom(fromPart)) {
    this.errorMessage=Messages.getString(""String_Node_Str"");
    return null;
  }
  return query.generateStatement();
}","@Override protected String createSqlStatement(Analysis analysis){
  this.cachedAnalysis=analysis;
  CwmZQuery query=new CwmZQuery();
  EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
  if (analysedElements.isEmpty()) {
    this.errorMessage=Messages.getString(""String_Node_Str"",analysis.getName());
    return null;
  }
  Set<ColumnSet> fromPart=new HashSet<ColumnSet>();
  for (  ModelElement modelElement : analysedElements) {
    Table table=SwitchHelpers.TABLE_SWITCH.doSwitch(modelElement);
    if (table == null) {
      this.errorMessage=Messages.getString(""String_Node_Str"",modelElement.getName());
      return null;
    }
    if (!query.addSelect(table)) {
      this.errorMessage=Messages.getString(""String_Node_Str"");
      return null;
    }
    fromPart.add(table);
  }
  if (!query.addFrom(fromPart)) {
    this.errorMessage=Messages.getString(""String_Node_Str"");
    return null;
  }
  return query.generateStatement();
}",0.9832460732984292
139734,"private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdTable tdTable=SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdTable == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String tableName=quote(tdTable.getName());
  if (!belongToSameSchemata(tdTable)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(tdTable);
  String table=quote(tdTable.getName());
  String catalogName=getQuotedCatalogName(tdTable);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(tdTable);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(joinConditions) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),tableName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdTable tdTable=SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdTable == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String tableName=quote(tdTable.getName());
  if (!belongToSameSchemata(tdTable)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(tdTable);
  String catalogName=getQuotedCatalogName(tdTable);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(tdTable);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  tableName=dbms().toQualifiedName(catalogName,schemaName,tableName);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(joinConditions) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),tableName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9926920208799404
139735,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(indicator.getIndicatorDefinition().getLabel());
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9946344301506238
139736,"private void doRemove(){
  StructuredSelection selection=(StructuredSelection)tableViewer.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  FunctionEntity entity=(FunctionEntity)selection.getFirstElement();
  entityList.remove(entity);
  tableViewer.refresh();
  ResourcesPlugin.getPlugin().getPluginPreferences().setValue(entity.getLanguage(),""String_Node_Str"");
}","private void doRemove(){
  StructuredSelection selection=(StructuredSelection)tableViewer.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  FunctionEntity entity=(FunctionEntity)selection.getFirstElement();
  entityList.remove(entity);
  tableViewer.refresh();
  ResourcesPlugin.getPlugin().getPluginPreferences().setValue(entity.getLanguage(),""String_Node_Str"");
  DefinitionHandler.getInstance().removeRegexFunction(entity.getLanguage());
}",0.907563025210084
139737,"@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  int javaType=this.getColumnType();
  if (objects.size() == 1) {
    String med=String.valueOf(objects.get(0)[0]);
    if (med == null) {
      log.error(""String_Node_Str"");
      return false;
    }
    this.setValue(String.valueOf(MedianIndicatorImpl.getRealValue(javaType,med)));
    return true;
  }
 else   if (objects.size() == 2) {
    Double r1=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(0)[0]));
    Double r2=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(1)[0]));
    if (r1 == null || r2 == null) {
      log.error(""String_Node_Str"" + r1 + ""String_Node_Str""+ r2);
      return false;
    }
    this.setValue(String.valueOf((r1 + r2) / 2));
    return true;
  }
  return false;
}","@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  int javaType=this.getColumnType();
  this.setDatatype(javaType);
  if (objects.size() == 1) {
    String med=String.valueOf(objects.get(0)[0]);
    if (med == null) {
      log.error(""String_Node_Str"");
      return false;
    }
    this.setValue(String.valueOf(MedianIndicatorImpl.getRealValue(javaType,med)));
    return true;
  }
 else   if (objects.size() == 2) {
    Double r1=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(0)[0]));
    Double r2=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(1)[0]));
    if (r1 == null || r2 == null) {
      log.error(""String_Node_Str"" + r1 + ""String_Node_Str""+ r2);
      return false;
    }
    this.setValue(String.valueOf((r1 + r2) / 2));
    return true;
  }
  return false;
}",0.9828767123287672
139738,"@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  int javaType=this.getColumnType();
  if (objects.size() == 1) {
    String med=String.valueOf(objects.get(0)[0]);
    if (med == null) {
      log.error(""String_Node_Str"");
      return false;
    }
    this.setValue(String.valueOf(MedianIndicatorImpl.getRealValue(javaType,med)));
    return true;
  }
 else   if (objects.size() == 2) {
    Double r1=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(0)[0]));
    Double r2=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(1)[0]));
    if (r1 == null || r2 == null) {
      log.error(""String_Node_Str"" + r1 + ""String_Node_Str""+ r2);
      return false;
    }
    this.setValue(String.valueOf((r1 + r2) / 2));
    return true;
  }
  return false;
}","@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,1)) {
    return false;
  }
  int javaType=this.getColumnType();
  this.setDatatype(javaType);
  if (objects.size() == 1) {
    String med=String.valueOf(objects.get(0)[0]);
    if (med == null) {
      log.error(""String_Node_Str"");
      return false;
    }
    this.setValue(String.valueOf(MedianIndicatorImpl.getRealValue(javaType,med)));
    return true;
  }
 else   if (objects.size() == 2) {
    Double r1=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(0)[0]));
    Double r2=MedianIndicatorImpl.getRealValue(javaType,String.valueOf(objects.get(1)[0]));
    if (r1 == null || r2 == null) {
      log.error(""String_Node_Str"" + r1 + ""String_Node_Str""+ r2);
      return false;
    }
    this.setValue(String.valueOf((r1 + r2) / 2));
    return true;
  }
  return false;
}",0.9828767123287672
139739,"@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    for (    Indicator indicator : indicators) {
      if (indicator instanceof CompositeIndicator) {
        continue;
      }
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
      Expression query=dbms().getInstantiatedExpression(indicator);
      if (query == null || !executeQuery(indicator,connection,query.getBody())) {
        ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
      }
 else {
        indicator.setComputed(true);
      }
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
    connection.close();
    setRowCountAndNullCount(elementToIndicator);
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}","@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    if (parallel) {
      ok=runAnalysisIndicatorsParallel(connection,elementToIndicator,indicators);
    }
 else {
      ok=runAnalysisIndicators(connection,elementToIndicator,indicators);
    }
    connection.close();
    setRowCountAndNullCount(elementToIndicator);
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}",0.6531724406383806
139740,"@Override public void loadChildren(){
  EList<IndicatorDefinition> indicatorDefinitions=DefinitionHandler.getInstance().getIndicatorsDefinitions().getIndicatorDefinitions();
  setChildren(indicatorDefinitions.toArray(new IndicatorDefinition[indicatorDefinitions.size()]));
}","@Override public void loadChildren(){
  EList<IndicatorDefinition> indicatorDefinitions=DefinitionHandler.getInstance().getIndicatorsDefinitions().getIndicatorDefinitions();
  List<IndicatorDefinition> tempList=new ArrayList<IndicatorDefinition>();
  for (  IndicatorDefinition definition : indicatorDefinitions) {
    if (!definition.getSqlGenericExpression().isEmpty()) {
      tempList.add(definition);
    }
  }
  setChildren(tempList.toArray(new IndicatorDefinition[tempList.size()]));
}",0.6109660574412533
139741,"private ModelElement findMatchedModelElement(EObject parent,EObject similarElement){
  if (parent instanceof TdDataProvider) {
    if (similarElement instanceof TdSchema) {
      List<TdSchema> schemas=CatalogHelper.getSchemas((TdCatalog)selectedOjbect);
      if (schemas != null && schemas.size() > 0) {
        for (        TdSchema tdSchema : schemas) {
          if (tdSchema.getName().equalsIgnoreCase(((TdSchema)similarElement).getName())) {
            return tdSchema;
          }
        }
      }
      List<TdSchema> schames=DataProviderHelper.getTdSchema((DataProvider)parent);
      for (      TdSchema schame : schames) {
        if (schame.getName().equalsIgnoreCase(((TdSchema)similarElement).getName())) {
          return schame;
        }
      }
    }
    if (similarElement instanceof TdCatalog) {
      List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs((DataProvider)parent);
      for (      TdCatalog catalog : catalogs) {
        if (catalog.getName().equalsIgnoreCase(((TdCatalog)similarElement).getName())) {
          return catalog;
        }
      }
    }
  }
 else   if (parent instanceof Package) {
    List<ColumnSet> columnSets=new ArrayList<ColumnSet>();
    columnSets.addAll(PackageHelper.getTables((Package)parent));
    columnSets.addAll(PackageHelper.getViews((Package)parent));
    for (    ModelElement columnSet : columnSets) {
      if (((ColumnSet)columnSet).getName().equalsIgnoreCase(((ColumnSet)similarElement).getName())) {
        return columnSet;
      }
    }
  }
  return null;
}","private ModelElement findMatchedModelElement(EObject parent,EObject similarElement){
  if (parent instanceof TdDataProvider) {
    if (similarElement instanceof TdSchema) {
      if (selectedOjbect instanceof TdCatalog) {
        List<TdSchema> schemas=CatalogHelper.getSchemas((TdCatalog)selectedOjbect);
        if (schemas != null && schemas.size() > 0) {
          for (          TdSchema tdSchema : schemas) {
            if (tdSchema.getName().equalsIgnoreCase(((TdSchema)similarElement).getName())) {
              return tdSchema;
            }
          }
        }
      }
      List<TdSchema> schames=DataProviderHelper.getTdSchema((DataProvider)parent);
      for (      TdSchema schame : schames) {
        if (schame.getName().equalsIgnoreCase(((TdSchema)similarElement).getName())) {
          return schame;
        }
      }
    }
    if (similarElement instanceof TdCatalog) {
      List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs((DataProvider)parent);
      for (      TdCatalog catalog : catalogs) {
        if (catalog.getName().equalsIgnoreCase(((TdCatalog)similarElement).getName())) {
          return catalog;
        }
      }
    }
  }
 else   if (parent instanceof Package) {
    List<ColumnSet> columnSets=new ArrayList<ColumnSet>();
    columnSets.addAll(PackageHelper.getTables((Package)parent));
    columnSets.addAll(PackageHelper.getViews((Package)parent));
    for (    ModelElement columnSet : columnSets) {
      if (((ColumnSet)columnSet).getName().equalsIgnoreCase(((ColumnSet)similarElement).getName())) {
        return columnSet;
      }
    }
  }
  return null;
}",0.9357391579613802
139742,"public ModelElementCompareEditorLauncher(String connName,Object selObj){
  connectionName=connName;
  selectedObject=selObj;
}","public ModelElementCompareEditorLauncher(String connName,Object selObj,boolean ce){
  connectionName=connName;
  selectedObject=selObj;
  compareEachOther=ce;
}",0.8811188811188811
139743,"/** 
 * Open a compare editor UI, will clear the information which hasn't relationship with current selected level first(For example: if we compare the catalog level, will clear it's table(view) from every catalog), then will compare current level object.
 * @param rightResource
 * @param oldDataProviderFile
 * @return
 * @throws ReloadCompareException
 */
public static DiffModel openDiffCompareEditor(Resource leftResource,Resource rightResource,Map<String,Object> opt,IUIHandler guiHandler,IFile efmDiffResultFile,String dbName,Object selectedObject) throws ReloadCompareException {
  MatchModel match=null;
  try {
    match=MatchService.doResourceMatch(leftResource,rightResource,opt);
  }
 catch (  InterruptedException e) {
    throw new ReloadCompareException(e);
  }
  final DiffModel diff=DiffService.doDiff(match);
  final ModelInputSnapshot snapshot=DiffFactory.eINSTANCE.createModelInputSnapshot();
  snapshot.setDate(Calendar.getInstance().getTime());
  snapshot.setMatch(match);
  snapshot.setDiff(diff);
  IFile createDiffResourceFile=efmDiffResultFile;
  try {
    final String fullPath=createDiffResourceFile.getLocation().toOSString();
    ModelUtils.save(snapshot,fullPath);
  }
 catch (  IOException e) {
    throw new ReloadCompareException(e);
  }
  if (guiHandler != null) {
    guiHandler.popComparisonUI(createDiffResourceFile.getLocation(),dbName,selectedObject);
  }
  return diff;
}","/** 
 * Open a compare editor UI, will clear the information which hasn't relationship with current selected level first(For example: if we compare the catalog level, will clear it's table(view) from every catalog), then will compare current level object.
 * @param rightResource
 * @param oldDataProviderFile
 * @return
 * @throws ReloadCompareException
 */
public static DiffModel openDiffCompareEditor(Resource leftResource,Resource rightResource,Map<String,Object> opt,IUIHandler guiHandler,IFile efmDiffResultFile,String dbName,Object selectedObject,boolean compareEachOther) throws ReloadCompareException {
  MatchModel match=null;
  try {
    match=MatchService.doResourceMatch(leftResource,rightResource,opt);
  }
 catch (  InterruptedException e) {
    throw new ReloadCompareException(e);
  }
  final DiffModel diff=DiffService.doDiff(match);
  final ModelInputSnapshot snapshot=DiffFactory.eINSTANCE.createModelInputSnapshot();
  snapshot.setDate(Calendar.getInstance().getTime());
  snapshot.setMatch(match);
  snapshot.setDiff(diff);
  IFile createDiffResourceFile=efmDiffResultFile;
  try {
    final String fullPath=createDiffResourceFile.getLocation().toOSString();
    ModelUtils.save(snapshot,fullPath);
  }
 catch (  IOException e) {
    throw new ReloadCompareException(e);
  }
  if (guiHandler != null) {
    guiHandler.popComparisonUI(createDiffResourceFile.getLocation(),dbName,selectedObject,compareEachOther);
  }
  return diff;
}",0.9853556485355648
139744,"public void popComparisonUI(IUIHandler uiHandler) throws ReloadCompareException {
  this.guiHandler=uiHandler;
  if (!isValid()) {
    return;
  }
  oldDataProvider=findDataProvider();
  if (oldDataProvider == null) {
    return;
  }
  createTempConnectionFile();
  createCopyedProvider();
  Object needReloadObject=dbFolderNode == null ? selectedObj : dbFolderNode;
  DQStructureComparer.openDiffCompareEditor(getLeftResource(),getRightResource(),options,guiHandler,DQStructureComparer.getDiffResourceFile(),oldDataProvider.getName(),needReloadObject);
}","public void popComparisonUI(IUIHandler uiHandler) throws ReloadCompareException {
  this.guiHandler=uiHandler;
  if (!isValid()) {
    return;
  }
  oldDataProvider=findDataProvider();
  if (oldDataProvider == null) {
    return;
  }
  createTempConnectionFile();
  createCopyedProvider();
  Object needReloadObject=dbFolderNode == null ? selectedObj : dbFolderNode;
  DQStructureComparer.openDiffCompareEditor(getLeftResource(),getRightResource(),options,guiHandler,DQStructureComparer.getDiffResourceFile(),oldDataProvider.getName(),needReloadObject,false);
}",0.9946236559139784
139745,"@Override protected Resource getLeftResource() throws ReloadCompareException {
  DQStructureComparer.clearSubNode(copyedDataProvider);
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(copyedDataProvider);
  Resource leftResource=null;
  leftResource=copyedDataProvider.eResource();
  leftResource.getContents().clear();
  for (  TdCatalog catalog : tdCatalogs) {
    catalog.getDataManager().clear();
    leftResource.getContents().add(catalog);
  }
  EMFSharedResources.getInstance().saveResource(leftResource);
  return leftResource;
}","@Override protected Resource getLeftResource() throws ReloadCompareException {
  DQStructureComparer.clearSubNode(copyedDataProvider);
  List<Package> packages=new ArrayList<Package>();
  packages.addAll(DataProviderHelper.getTdCatalogs(copyedDataProvider));
  packages.addAll(DataProviderHelper.getTdSchema(copyedDataProvider));
  Resource leftResource=null;
  leftResource=copyedDataProvider.eResource();
  leftResource.getContents().clear();
  for (  Package catalog : packages) {
    catalog.getDataManager().clear();
    leftResource.getContents().add(catalog);
  }
  EMFSharedResources.getInstance().saveResource(leftResource);
  return leftResource;
}",0.5662251655629139
139746,"@Override protected Resource getRightResource() throws ReloadCompareException {
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(tempReloadProvider);
  Resource reloadResource=null;
  reloadResource=tempReloadProvider.eResource();
  reloadResource.getContents().clear();
  for (  TdCatalog catalog : tdCatalogs) {
    catalog.getDataManager().clear();
    reloadResource.getContents().add(catalog);
  }
  EMFSharedResources.getInstance().saveResource(reloadResource);
  return reloadResource;
}","@Override protected Resource getRightResource() throws ReloadCompareException {
  List<Package> packages=new ArrayList<Package>();
  packages.addAll(DataProviderHelper.getTdCatalogs(tempReloadProvider));
  packages.addAll(DataProviderHelper.getTdSchema(tempReloadProvider));
  Resource reloadResource=null;
  reloadResource=tempReloadProvider.eResource();
  reloadResource.getContents().clear();
  for (  Package catalog : packages) {
    catalog.getDataManager().clear();
    reloadResource.getContents().add(catalog);
  }
  EMFSharedResources.getInstance().saveResource(reloadResource);
  return reloadResource;
}",0.5721925133689839
139747,"public void widgetSelected(SelectionEvent e){
  tempJoinElements.remove(fje);
  expressComp.dispose();
  joinElementComp.layout();
  form.reflow(true);
  setDirty(true);
}","public void widgetSelected(SelectionEvent e){
  tempJoinElements.remove(fje);
  expressComp.dispose();
  joinConditionSection.setExpanded(true);
  setDirty(true);
}",0.8417910447761194
139748,"/** 
 * DOC xqliu Comment method ""creatNewJoinElementLine"".
 * @param joinElement
 */
private void creatNewJoinElementLine(JoinElement joinElement){
  final Composite expressComp=new Composite(joinElementComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(6,false));
  final JoinElement fje=joinElement;
  boolean flag=false;
  if (fje.getColA() != null && fje.getColB() != null && fje.getOperator() != null) {
    flag=true;
  }
  final Label labelL=new Label(expressComp,SWT.NONE);
  labelL.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(labelL);
  final Text textL=new Text(expressComp,SWT.BORDER);
  textL.setEditable(false);
  textL.setText(flag ? fje.getColA().getName() : PluginConstant.EMPTY_STRING);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(textL);
  ((GridData)textL.getLayoutData()).widthHint=100;
  DropTarget targetL=new DropTarget(textL,DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT);
  targetL.setTransfer(new Transfer[]{transfer});
  targetL.addDropListener(new ColumnDropTargetListener(fje,ColumnDropTargetListener.LEFT));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(OPERATORS);
  combo.setText(flag ? fje.getOperator() : DEFAULT_OPERATOR);
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      fje.setOperator(combo.getText());
      setDirty(true);
    }
  }
);
  final Label labelR=new Label(expressComp,SWT.NONE);
  labelR.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(labelR);
  final Text textR=new Text(expressComp,SWT.BORDER);
  textR.setEditable(false);
  textR.setText(flag ? fje.getColB().getName() : PluginConstant.EMPTY_STRING);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(textR);
  ((GridData)textR.getLayoutData()).widthHint=100;
  DropTarget targetR=new DropTarget(textR,DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT);
  targetR.setTransfer(new Transfer[]{transfer});
  targetR.addDropListener(new ColumnDropTargetListener(fje,ColumnDropTargetListener.RIGHT));
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempJoinElements.remove(fje);
      expressComp.dispose();
      joinElementComp.layout();
      form.reflow(true);
      setDirty(true);
    }
  }
);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}","/** 
 * DOC xqliu Comment method ""creatNewJoinElementLine"".
 * @param joinElement
 */
private void creatNewJoinElementLine(JoinElement joinElement){
  final Composite expressComp=new Composite(joinElementComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(6,false));
  final JoinElement fje=joinElement;
  boolean flag=false;
  if (fje.getColA() != null && fje.getColB() != null && fje.getOperator() != null) {
    flag=true;
  }
  final Label labelL=new Label(expressComp,SWT.NONE);
  labelL.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(labelL);
  final Text textL=new Text(expressComp,SWT.BORDER);
  textL.setEditable(false);
  textL.setText(flag ? fje.getColA().getName() : PluginConstant.EMPTY_STRING);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(textL);
  ((GridData)textL.getLayoutData()).widthHint=100;
  DropTarget targetL=new DropTarget(textL,DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT);
  targetL.setTransfer(new Transfer[]{transfer});
  targetL.addDropListener(new ColumnDropTargetListener(fje,ColumnDropTargetListener.LEFT));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(OPERATORS);
  combo.setText(flag ? fje.getOperator() : DEFAULT_OPERATOR);
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      fje.setOperator(combo.getText());
      setDirty(true);
    }
  }
);
  final Label labelR=new Label(expressComp,SWT.NONE);
  labelR.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(labelR);
  final Text textR=new Text(expressComp,SWT.BORDER);
  textR.setEditable(false);
  textR.setText(flag ? fje.getColB().getName() : PluginConstant.EMPTY_STRING);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(textR);
  ((GridData)textR.getLayoutData()).widthHint=100;
  DropTarget targetR=new DropTarget(textR,DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT);
  targetR.setTransfer(new Transfer[]{transfer});
  targetR.addDropListener(new ColumnDropTargetListener(fje,ColumnDropTargetListener.RIGHT));
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempJoinElements.remove(fje);
      expressComp.dispose();
      joinConditionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}",0.988560696602356
139749,"private void creatNewExpressLine(RegularExpression regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,false));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
  final RegularExpression finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  String body=regularExpress.getExpression().getBody();
  if (language == null) {
    combo.setText(remainDBTypeList.get(0));
  }
 else {
    combo.setText(PatternLanguageType.findNameByLanguage(language));
  }
  GridDataFactory.fillDefaults().span(2,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String lang=combo.getText();
      finalRegExpress.getExpression().setLanguage(PatternLanguageType.findLanguageByName(lang));
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(body == null ? PluginConstant.EMPTY_STRING : body);
  GridDataFactory.fillDefaults().span(6,1).grab(true,true).applyTo(patternText);
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      patternDefinitionSectionComp.layout();
      form.reflow(true);
      setDirty(true);
    }
  }
);
  if (!ExpressionType.SQL_LIKE.getLiteral().equals(expressionType)) {
    Button testPatternButton=new Button(expressComp,SWT.NONE);
    testPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    testPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(testPatternButton);
    testPatternButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        PatternTestView patternTestView=(PatternTestView)CorePlugin.getDefault().findView(PatternTestView.ID);
        patternTestView.setPatternExpression(PatternMasterDetailsPage.this,pattern,finalRegExpress);
      }
    }
);
  }
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}","private void creatNewExpressLine(RegularExpression regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,false));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
  final RegularExpression finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  String body=regularExpress.getExpression().getBody();
  if (language == null) {
    combo.setText(remainDBTypeList.get(0));
  }
 else {
    combo.setText(PatternLanguageType.findNameByLanguage(language));
  }
  GridDataFactory.fillDefaults().span(2,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String lang=combo.getText();
      finalRegExpress.getExpression().setLanguage(PatternLanguageType.findLanguageByName(lang));
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(body == null ? PluginConstant.EMPTY_STRING : body);
  GridDataFactory.fillDefaults().span(6,1).grab(true,true).applyTo(patternText);
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      patternDefinitionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
  if (!ExpressionType.SQL_LIKE.getLiteral().equals(expressionType)) {
    Button testPatternButton=new Button(expressComp,SWT.NONE);
    testPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    testPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(testPatternButton);
    testPatternButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        PatternTestView patternTestView=(PatternTestView)CorePlugin.getDefault().findView(PatternTestView.ID);
        patternTestView.setPatternExpression(PatternMasterDetailsPage.this,pattern,finalRegExpress);
      }
    }
);
  }
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}",0.9923424991298294
139750,"@Override public void fillContextMenu(IMenuManager menu){
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  TreePath[] treePath=currentSelection.getPaths();
  for (  TreePath paths : treePath) {
    Object path=paths.getSegment(1);
    if (path.toString().endsWith(""String_Node_Str"")) {
      return;
    }
 else {
      addTaskAction=new TdAddTaskAction(site.getViewSite().getShell(),currentSelection.getFirstElement());
      menu.add(addTaskAction);
    }
  }
}","@Override public void fillContextMenu(IMenuManager menu){
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  boolean showMenu=true;
  TreePath[] treePath=currentSelection.getPaths();
  for (  TreePath paths : treePath) {
    Object path=paths.getSegment(1);
    if (path.toString().endsWith(""String_Node_Str"")) {
      showMenu=false;
    }
  }
  if (showMenu) {
    addTaskAction=new TdAddTaskAction(site.getViewSite().getShell(),currentSelection.getFirstElement());
    menu.add(addTaskAction);
  }
}",0.9257473481195756
139751,"/** 
 * DOC xqliu Comment method ""createAddButton"".
 * @param parent top composite
 */
private void createAddButton(Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JoinElement newJoinElement=RulesFactory.eINSTANCE.createJoinElement();
      newJoinElement.setOperator(DEFAULT_OPERATOR);
      creatNewJoinElementLine(newJoinElement);
      tempJoinElements.add(newJoinElement);
      form.reflow(true);
      setDirty(true);
    }
  }
);
}","/** 
 * DOC xqliu Comment method ""createAddButton"".
 * @param parent top composite
 */
private void createAddButton(Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JoinElement newJoinElement=RulesFactory.eINSTANCE.createJoinElement();
      newJoinElement.setOperator(DEFAULT_OPERATOR);
      creatNewJoinElementLine(newJoinElement);
      tempJoinElements.add(newJoinElement);
      joinConditionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
}",0.97524467472654
139752,"public void widgetSelected(SelectionEvent e){
  remainDBTypeList.clear();
  remainDBTypeList.addAll(allDBTypeList);
  for (  Expression expression : tempExpression) {
    String language=expression.getLanguage();
    String languageName=PatternLanguageType.findNameByLanguage(language);
    remainDBTypeList.remove(languageName);
  }
  if (remainDBTypeList.size() == 0) {
    MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  String language=PatternLanguageType.findLanguageByName(remainDBTypeList.get(0));
  Expression expression=BooleanExpressionHelper.createExpression(language,null);
  creatNewExpressLine(expression);
  tempExpression.add(expression);
  form.reflow(true);
  setDirty(true);
}","public void widgetSelected(SelectionEvent e){
  remainDBTypeList.clear();
  remainDBTypeList.addAll(allDBTypeList);
  for (  Expression expression : tempExpression) {
    String language=expression.getLanguage();
    String languageName=PatternLanguageType.findNameByLanguage(language);
    remainDBTypeList.remove(languageName);
  }
  if (remainDBTypeList.size() == 0) {
    MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  String language=PatternLanguageType.findLanguageByName(remainDBTypeList.get(0));
  Expression expression=BooleanExpressionHelper.createExpression(language,null);
  creatNewExpressLine(expression);
  tempExpression.add(expression);
  definitionSection.setExpanded(true);
  setDirty(true);
}",0.9763975155279504
139753,"private void creatDefinitionSection(Composite topCmp){
  Section definitionSection=createSection(form,topCmp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Label label=new Label(definitionSection,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  definitionSection.setDescriptionControl(label);
  definitionComp=createDefinitionComp(definitionSection);
  definitionSection.setClient(definitionComp);
}","private void creatDefinitionSection(Composite topCmp){
  definitionSection=createSection(form,topCmp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Label label=new Label(definitionSection,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  definitionSection.setDescriptionControl(label);
  definitionComp=createDefinitionComp(definitionSection);
  definitionSection.setClient(definitionComp);
}",0.9909706546275396
139754,"private void createAddButton(final Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      remainDBTypeList.clear();
      remainDBTypeList.addAll(allDBTypeList);
      for (      Expression expression : tempExpression) {
        String language=expression.getLanguage();
        String languageName=PatternLanguageType.findNameByLanguage(language);
        remainDBTypeList.remove(languageName);
      }
      if (remainDBTypeList.size() == 0) {
        MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        return;
      }
      String language=PatternLanguageType.findLanguageByName(remainDBTypeList.get(0));
      Expression expression=BooleanExpressionHelper.createExpression(language,null);
      creatNewExpressLine(expression);
      tempExpression.add(expression);
      form.reflow(true);
      setDirty(true);
    }
  }
);
}","private void createAddButton(final Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      remainDBTypeList.clear();
      remainDBTypeList.addAll(allDBTypeList);
      for (      Expression expression : tempExpression) {
        String language=expression.getLanguage();
        String languageName=PatternLanguageType.findNameByLanguage(language);
        remainDBTypeList.remove(languageName);
      }
      if (remainDBTypeList.size() == 0) {
        MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        return;
      }
      String language=PatternLanguageType.findLanguageByName(remainDBTypeList.get(0));
      Expression expression=BooleanExpressionHelper.createExpression(language,null);
      creatNewExpressLine(expression);
      tempExpression.add(expression);
      definitionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
}",0.985820895522388
139755,"private void createAddButton(Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      remainDBTypeList.clear();
      remainDBTypeList.addAll(allDBTypeList);
      for (      PatternComponent patternComponent : tempPatternComponents) {
        String language=((RegularExpressionImpl)patternComponent).getExpression().getLanguage();
        String languageName=PatternLanguageType.findNameByLanguage(language);
        remainDBTypeList.remove(languageName);
      }
      if (remainDBTypeList.size() == 0) {
        MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        return;
      }
      String language=PatternLanguageType.findLanguageByName(remainDBTypeList.get(0));
      RegularExpression newRegularExpress=BooleanExpressionHelper.createRegularExpression(language,null);
      newRegularExpress.setExpressionType(expressionType);
      creatNewExpressLine(newRegularExpress);
      tempPatternComponents.add(newRegularExpress);
      form.reflow(true);
      setDirty(true);
    }
  }
);
}","private void createAddButton(Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      remainDBTypeList.clear();
      remainDBTypeList.addAll(allDBTypeList);
      for (      PatternComponent patternComponent : tempPatternComponents) {
        String language=((RegularExpressionImpl)patternComponent).getExpression().getLanguage();
        String languageName=PatternLanguageType.findNameByLanguage(language);
        remainDBTypeList.remove(languageName);
      }
      if (remainDBTypeList.size() == 0) {
        MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        return;
      }
      String language=PatternLanguageType.findLanguageByName(remainDBTypeList.get(0));
      RegularExpression newRegularExpress=BooleanExpressionHelper.createRegularExpression(language,null);
      newRegularExpress.setExpressionType(expressionType);
      creatNewExpressLine(newRegularExpress);
      tempPatternComponents.add(newRegularExpress);
      patternDefinitionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
}",0.9850448654037888
139756,"/** 
 * DOC rli Comment method ""ceatePatternDefinitionComp"".
 * @param form
 * @param section
 */
private Composite createPatternDefinitionComp(){
  Composite newComp=toolkit.createComposite(patternDefinitionSection);
  newComp.setLayout(new GridLayout());
  componentsComp=new Composite(newComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpression regularExpress=(RegularExpression)components.get(i);
    tempPatternComponents.add(regularExpress);
    creatNewExpressLine(regularExpress);
  }
  createAddButton(newComp);
  patternDefinitionSection.setClient(newComp);
  return newComp;
}","/** 
 * DOC rli Comment method ""ceatePatternDefinitionComp"".
 * @param form
 * @param section
 */
private Composite createPatternDefinitionComp(){
  Composite newComp=toolkit.createComposite(patternDefinitionSection);
  newComp.setLayout(new GridLayout());
  componentsComp=new Composite(newComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpression regularExpress=(RegularExpression)components.get(i);
    tempPatternComponents.add(regularExpress);
    creatNewExpressLine(regularExpress);
  }
  createAddButton(newComp);
  patternDefinitionSection.setClient(newComp);
  return newComp;
}",0.9957652752571085
139757,"private void creatNewExpressLine(RegularExpression regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,false));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
  final RegularExpression finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  String body=regularExpress.getExpression().getBody();
  if (language == null) {
    combo.setText(remainDBTypeList.get(0));
  }
 else {
    combo.setText(PatternLanguageType.findNameByLanguage(language));
  }
  GridDataFactory.fillDefaults().span(2,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String lang=combo.getText();
      finalRegExpress.getExpression().setLanguage(PatternLanguageType.findLanguageByName(lang));
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(body == null ? PluginConstant.EMPTY_STRING : body);
  GridDataFactory.fillDefaults().span(6,1).grab(true,false).applyTo(patternText);
  ((GridData)patternText.getLayoutData()).widthHint=600;
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      patternDefinitionSectionComp.layout();
      form.reflow(true);
      setDirty(true);
    }
  }
);
  if (!ExpressionType.SQL_LIKE.getLiteral().equals(expressionType)) {
    Button testPatternButton=new Button(expressComp,SWT.NONE);
    testPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    testPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(testPatternButton);
    testPatternButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        PatternTestView patternTestView=(PatternTestView)CorePlugin.getDefault().findView(PatternTestView.ID);
        patternTestView.setPatternExpression(PatternMasterDetailsPage.this,pattern,finalRegExpress);
      }
    }
);
  }
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}","private void creatNewExpressLine(RegularExpression regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,false));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
  final RegularExpression finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  String body=regularExpress.getExpression().getBody();
  if (language == null) {
    combo.setText(remainDBTypeList.get(0));
  }
 else {
    combo.setText(PatternLanguageType.findNameByLanguage(language));
  }
  GridDataFactory.fillDefaults().span(2,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String lang=combo.getText();
      finalRegExpress.getExpression().setLanguage(PatternLanguageType.findLanguageByName(lang));
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(body == null ? PluginConstant.EMPTY_STRING : body);
  GridDataFactory.fillDefaults().span(6,1).grab(true,true).applyTo(patternText);
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      patternDefinitionSectionComp.layout();
      form.reflow(true);
      setDirty(true);
    }
  }
);
  if (!ExpressionType.SQL_LIKE.getLiteral().equals(expressionType)) {
    Button testPatternButton=new Button(expressComp,SWT.NONE);
    testPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    testPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(testPatternButton);
    testPatternButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        PatternTestView patternTestView=(PatternTestView)CorePlugin.getDefault().findView(PatternTestView.ID);
        patternTestView.setPatternExpression(PatternMasterDetailsPage.this,pattern,finalRegExpress);
      }
    }
);
  }
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}",0.9811126373626372
139758,"public void setElements(final Object columns){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(this);
  addItemElements((List<Column>)columns,0);
  updateBindConnection(masterPage,tree);
}","public void setElements(final Object columns){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(this);
  columnSetMultiValueList.clear();
  addItemElements((List<Column>)columns,0);
  updateBindConnection(masterPage,tree);
}",0.9260042283298098
139759,"/** 
 * DOC jet according to current analysis generator chart dataset ""initDataset"".
 * @return
 */
private DefaultCategoryDataset initDataset(){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  Analysis analysis=this.getAnalysisHandler().getAnalysis();
  for (Iterator iterator=analysis.getResults().getIndicators().iterator(); iterator.hasNext(); ) {
    ColumnDependencyIndicator indicator=(ColumnDependencyIndicator)iterator.next();
    String label=getRowLabel(indicator);
    dataset.addValue(indicator.getACount() - indicator.getDistinctACount(),""String_Node_Str"",label);
    dataset.addValue(indicator.getDistinctACount(),""String_Node_Str"",label);
  }
  return dataset;
}","/** 
 * DOC jet according to current analysis generator chart dataset ""initDataset"".
 * @return
 */
private DefaultCategoryDataset initDataset(){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  Analysis analysis=this.getAnalysisHandler().getAnalysis();
  for (Iterator iterator=analysis.getResults().getIndicators().iterator(); iterator.hasNext(); ) {
    ColumnDependencyIndicator indicator=(ColumnDependencyIndicator)iterator.next();
    String label=getRowLabel(indicator);
    if (getAnalysisHandler().getResultMetadata().getExecutionNumber() > 0) {
      dataset.addValue(indicator.getACount() - indicator.getDistinctACount(),""String_Node_Str"",label);
      dataset.addValue(indicator.getDistinctACount(),""String_Node_Str"",label);
    }
  }
  return dataset;
}",0.919431279620853
139760,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      if (resource.isDirectory()) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
          Pattern pattern=(Pattern)iterator.next();
          File patternFile=new File(resource,pattern.getName() + ""String_Node_Str"");
          if (patternFile.isFile() && patternFile.exists()) {
            try {
              FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
              patternFile.delete();
            }
 catch (            Exception e) {
              log.error(e.getMessage(),e);
            }
          }
        }
        return true;
      }
      MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
      return false;
    }
 else {
      if (!resource.getName().endsWith(""String_Node_Str"")) {
        MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
        return false;
      }
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        return true;
      }
      return false;
    }
  }
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
      for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
        Pattern pattern=(Pattern)iterator.next();
        File patternFile=new File(resource,pattern.getName() + ""String_Node_Str"");
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
      return true;
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        return true;
      }
      return false;
    }
  }
}",0.8077797423591816
139761,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  GridData gridData=new GridData(GridData.FILL_BOTH);
  container.setLayout(layout);
  container.setLayoutData(gridData);
  Composite fileComp=new Composite(container,SWT.NONE);
  layout=new GridLayout(3,false);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  fileComp.setLayout(layout);
  fileComp.setLayoutData(gridData);
  Label label=new Label(fileComp,SWT.NONE);
  if (isForExchange) {
    label.setText(""String_Node_Str"");
  }
 else {
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  fileText=new Text(fileComp,SWT.BORDER);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  fileText.setLayoutData(gridData);
  Button button=new Button(fileComp,SWT.PUSH);
  button.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String path=""String_Node_Str"";
      if (isForExchange) {
        DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
        if (fileText.getText() != null) {
          dialog.setFilterPath(fileText.getText());
        }
        path=dialog.open();
      }
 else {
        FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
        dialog.setFilterExtensions(new String[]{""String_Node_Str""});
        if (fileText.getText() != null) {
          dialog.setFileName(fileText.getText());
        }
        path=dialog.open();
        if (path != null && !path.endsWith(""String_Node_Str"")) {
          path=path + ""String_Node_Str"";
        }
      }
      if (path != null) {
        fileText.setText(path);
      }
    }
  }
);
  Group group=new Group(container,SWT.NONE);
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  group.setLayoutData(new GridData(GridData.FILL_BOTH));
  selectedPatternsTree=new ContainerCheckedTreeViewer(group);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(selectedPatternsTree.getTree());
  selectedPatternsTree.setLabelProvider(new ResourceViewLabelProvider());
  selectedPatternsTree.setContentProvider(new WorkbenchContentProvider(){
    @Override public boolean hasChildren(    Object element){
      if (element instanceof IFile) {
        return false;
      }
      return super.hasChildren(element);
    }
  }
);
  selectedPatternsTree.setInput(this.folder);
  try {
    selectedPatternsTree.setCheckedElements(folder.members());
  }
 catch (  CoreException e1) {
    log.error(e1,e1);
  }
  Control buttonComposite=createSelectionButtons(container);
  Composite monitorComp=new Composite(container,SWT.NONE);
  monitorComp.setLayout(new GridLayout());
  monitorComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  ProgressBar bar=new ProgressBar(monitorComp,SWT.NONE);
  bar.setLayoutData(new GridData(GridData.FILL_BOTH));
  bar.setVisible(false);
  setControl(container);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  GridData gridData=new GridData(GridData.FILL_BOTH);
  container.setLayout(layout);
  container.setLayoutData(gridData);
  Composite fileComp=new Composite(container,SWT.NONE);
  layout=new GridLayout(3,false);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  fileComp.setLayout(layout);
  fileComp.setLayoutData(gridData);
  Label label=new Label(fileComp,SWT.NONE);
  if (isForExchange) {
    label.setText(""String_Node_Str"");
  }
 else {
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  fileText=new Text(fileComp,SWT.BORDER);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  fileText.setLayoutData(gridData);
  fileText.setEditable(false);
  Button button=new Button(fileComp,SWT.PUSH);
  button.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String path=""String_Node_Str"";
      if (isForExchange) {
        DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
        if (fileText.getText() != null) {
          dialog.setFilterPath(fileText.getText());
        }
        path=dialog.open();
      }
 else {
        FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
        dialog.setFilterExtensions(new String[]{""String_Node_Str""});
        if (fileText.getText() != null) {
          dialog.setFileName(fileText.getText());
        }
        path=dialog.open();
        if (path != null && !path.endsWith(""String_Node_Str"")) {
          path=path + ""String_Node_Str"";
        }
      }
      if (path != null) {
        fileText.setText(path);
      }
    }
  }
);
  Group group=new Group(container,SWT.NONE);
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  group.setLayoutData(new GridData(GridData.FILL_BOTH));
  selectedPatternsTree=new ContainerCheckedTreeViewer(group);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(selectedPatternsTree.getTree());
  selectedPatternsTree.setLabelProvider(new ResourceViewLabelProvider());
  selectedPatternsTree.setContentProvider(new WorkbenchContentProvider(){
    @Override public boolean hasChildren(    Object element){
      if (element instanceof IFile) {
        return false;
      }
      return super.hasChildren(element);
    }
  }
);
  selectedPatternsTree.setInput(this.folder);
  try {
    selectedPatternsTree.setCheckedElements(folder.members());
  }
 catch (  CoreException e1) {
    log.error(e1,e1);
  }
  Control buttonComposite=createSelectionButtons(container);
  Composite monitorComp=new Composite(container,SWT.NONE);
  monitorComp.setLayout(new GridLayout());
  monitorComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  ProgressBar bar=new ProgressBar(monitorComp,SWT.NONE);
  bar.setLayoutData(new GridData(GridData.FILL_BOTH));
  bar.setVisible(false);
  setControl(container);
}",0.9949699821515496
139762,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  File file=new File(targetFile);
  if (!file.exists()) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  boolean isContinue=true;
  if (file.exists() && !isForExchange) {
    isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  if (isContinue) {
    ExportFactory.export(file,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    if (isForExchange && file.isDirectory()) {
      for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
        Pattern pattern=(Pattern)iterator.next();
        File patternFile=new File(file,pattern.getName() + ""String_Node_Str"");
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      if (resource.isDirectory()) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
          Pattern pattern=(Pattern)iterator.next();
          File patternFile=new File(resource,pattern.getName() + ""String_Node_Str"");
          if (patternFile.isFile() && patternFile.exists()) {
            try {
              FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
              patternFile.delete();
            }
 catch (            Exception e) {
              log.error(e.getMessage(),e);
            }
          }
        }
        return true;
      }
      MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
      return false;
    }
 else {
      if (!resource.getName().endsWith(""String_Node_Str"")) {
        MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
        return false;
      }
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (isContinue) {
        ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
        return true;
      }
      return false;
    }
  }
}",0.4697773064687168
139763,"@Override protected void handleUpdateElement(UpdateAttribute updateAttribute){
}","@Override protected void handleUpdateElement(UpdateAttribute updateAttribute){
  EObject leftElement=updateAttribute.getLeftElement();
  ColumnSet columnSetSwitchLeft=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(leftElement);
  if (columnSetSwitchLeft == null) {
    columnSetSwitchLeft=(ColumnSet)leftElement.eContainer();
  }
  EObject rightElement=updateAttribute.getRightElement();
  ColumnSet columnSetSwitchRight=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(rightElement);
  if (columnSetSwitchRight == null) {
    columnSetSwitchRight=(ColumnSet)rightElement.eContainer();
  }
  if (columnSetSwitchLeft != null && columnSetSwitchRight != null) {
    Package pack=(Package)selectedObj;
    PackageHelper.removeColumnSet(columnSetSwitchLeft,pack);
    PackageHelper.addColumnSet(columnSetSwitchRight,pack);
  }
}",0.1799775028121484
139764,"public void run(){
  try {
    creatComparisonLevel.reloadCurrentLevelElement();
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
  }
}","public void run(){
  try {
    DataProvider oldDataProvider=creatComparisonLevel.reloadCurrentLevelElement();
    impactExistingAnalyses(oldDataProvider);
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
  }
catch (  PartInitException e) {
    log.error(e,e);
  }
}",0.6901408450704225
139765,"/** 
 * DOC bZhou Comment method ""getReportingDBFolder"".
 * @return
 */
public static IFolder getReportingDBFolder(){
  return getRootProject().getFolder(REPORTING_DB_FOLDER_NAME);
}","/** 
 * DOC bZhou Comment method ""getReportingDBFolder"".
 * @return
 */
public static IFolder getReportingDBFolder(){
  return ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(REPORTING_DB_FOLDER_NAME));
}",0.7889447236180904
139766,"@Override public void fillContextMenu(IMenuManager menu){
  menu.add(new ImportIndicatorDefinitionAction());
  menu.add(new ExportIndicatorDefinitionAction());
}","@Override public void fillContextMenu(IMenuManager menu){
}",0.5363636363636364
139767,"private void createSimpleStatistics(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  dataset.addValue(columnSetMultiValueIndicator.getCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  dataset.addValue(columnSetMultiValueIndicator.getDistinctCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  dataset.addValue(columnSetMultiValueIndicator.getUniqueCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  dataset.addValue(columnSetMultiValueIndicator.getDuplicateCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  JFreeChart chart=TopChartFactory.createBarChart(DefaultMessagesImpl.getString(""String_Node_Str""),dataset,true);
  ChartDecorator.decorate(chart);
  ChartComposite chartComp=new ChartComposite(composite,SWT.NONE,chart);
  chartComp.setLayoutData(new GridData(GridData.FILL_BOTH));
}","private void createSimpleStatistics(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  dataset.addValue(columnSetMultiValueIndicator.getCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  dataset.addValue(columnSetMultiValueIndicator.getDistinctCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  dataset.addValue(columnSetMultiValueIndicator.getUniqueCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  dataset.addValue(columnSetMultiValueIndicator.getDuplicateCount(),DefaultMessagesImpl.getString(""String_Node_Str""),""String_Node_Str"");
  JFreeChart chart=TopChartFactory.createBarChart(DefaultMessagesImpl.getString(""String_Node_Str""),dataset,true);
  if (chart != null) {
    Plot plot=chart.getPlot();
    if (plot instanceof CategoryPlot) {
      ChartDecorator.decorateCategoryPlot(chart);
      ((CategoryPlot)plot).getRenderer().setSeriesPaint(0,ChartDecorator.IndiBindColor.INDICATOR_ROW_COUNT.getColor());
      ((CategoryPlot)plot).getRenderer().setSeriesPaint(1,ChartDecorator.IndiBindColor.INDICATOR_DISTINCT_COUNT.getColor());
      ((CategoryPlot)plot).getRenderer().setSeriesPaint(2,ChartDecorator.IndiBindColor.INDICATOR_UNIQUE_COUNT.getColor());
      ((CategoryPlot)plot).getRenderer().setSeriesPaint(3,ChartDecorator.IndiBindColor.INDICATOR_DUPLICATE_COUNT.getColor());
    }
  }
  ChartComposite chartComp=new ChartComposite(composite,SWT.NONE,chart);
  chartComp.setLayoutData(new GridData(GridData.FILL_BOTH));
}",0.7559701492537313
139768,"/** 
 * DOC bZhou Comment method ""decorateCategoryPlot"".
 * @param chart
 */
private static void decorateCategoryPlot(JFreeChart chart){
  Font font=null;
  CategoryPlot plot=chart.getCategoryPlot();
  CategoryItemRenderer render=plot.getRenderer();
  CategoryAxis domainAxis=plot.getDomainAxis();
  ValueAxis valueAxis=plot.getRangeAxis();
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
}","/** 
 * DOC bZhou Comment method ""decorateCategoryPlot"".
 * @param chart
 */
public static void decorateCategoryPlot(JFreeChart chart){
  Font font=null;
  CategoryPlot plot=chart.getCategoryPlot();
  CategoryItemRenderer render=plot.getRenderer();
  CategoryAxis domainAxis=plot.getDomainAxis();
  ValueAxis valueAxis=plot.getRangeAxis();
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
}",0.9947643979057592
139769,"public static List<RevisionInfo> getRevisionList(String category,String version) throws Exception {
  StringBuffer url=new StringBuffer();
  url.append(REVISION_LIST_URL).append(""String_Node_Str"").append(category).append(""String_Node_Str"");
  String[] branch=getBranch(version);
  url.append(StringUtils.join(branch,""String_Node_Str""));
  String jsonContent=sendGetRequest(url.toString());
  System.out.println(url);
  return parseJsonObject(jsonContent,RevisionInfo.class);
}","public static List<RevisionInfo> getRevisionList(String category,String version) throws Exception {
  StringBuffer url=new StringBuffer();
  url.append(REVISION_LIST_URL).append(""String_Node_Str"").append(category).append(""String_Node_Str"");
  String[] branch=getBranch(version);
  if (branch != null) {
    url.append(StringUtils.join(branch,""String_Node_Str""));
    String jsonContent=sendGetRequest(url.toString());
    System.out.println(url);
    return parseJsonObject(jsonContent,RevisionInfo.class);
  }
  return Collections.EMPTY_LIST;
}",0.932419196865818
139770,"@SuppressWarnings(""String_Node_Str"") public static String[] getBranch(String version){
  version=getMainVersion(version);
  if (versionMap.isEmpty()) {
    getVersionList();
  }
  Collection<String> branch=versionMap.getCollection(version);
  return branch.toArray(new String[branch.size()]);
}","@SuppressWarnings(""String_Node_Str"") public static String[] getBranch(String version){
  version=getMainVersion(version);
  if (versionMap.isEmpty()) {
    getVersionList();
  }
  Collection<String> branch=versionMap.getCollection(version);
  return branch == null ? null : branch.toArray(new String[branch.size()]);
}",0.9607843137254902
139771,"public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){
  if (!getItemVisible(series,item)) {
    return;
  }
  PlotOrientation orientation=plot.getOrientation();
  double x=dataset.getXValue(series,item);
  double y=dataset.getYValue(series,item);
  double z=Double.NaN;
  if (dataset instanceof XYZDataset) {
    XYZDataset xyzData=(XYZDataset)dataset;
    z=xyzData.getZValue(series,item);
  }
  if (!Double.isNaN(z)) {
    RectangleEdge domainAxisLocation=plot.getDomainAxisEdge();
    RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();
    double transX=domainAxis.valueToJava2D(x,dataArea,domainAxisLocation);
    double transY=rangeAxis.valueToJava2D(y,dataArea,rangeAxisLocation);
    double transDomain=0.0;
    double transRange=0.0;
    double zero;
switch (getScaleType()) {
case SCALE_ON_DOMAIN_AXIS:
      zero=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);
    transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero;
  transRange=transDomain;
break;
case SCALE_ON_RANGE_AXIS:
zero=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);
transRange=zero - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);
transDomain=transRange;
break;
default :
double zero1=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);
double zero2=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);
transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero1;
transRange=zero2 - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);
}
transDomain=Math.abs(transDomain);
transRange=Math.abs(transRange);
double diag=Math.sqrt(dataArea.getHeight() * dataArea.getHeight() + dataArea.getWidth() * dataArea.getWidth());
transDomain+=diag / 100;
transRange+=diag / 100;
Ellipse2D circle=null;
if (orientation == PlotOrientation.VERTICAL) {
circle=new Ellipse2D.Double(transX - transDomain / 2.0,transY - transRange / 2.0,transDomain,transRange);
}
 else if (orientation == PlotOrientation.HORIZONTAL) {
circle=new Ellipse2D.Double(transY - transRange / 2.0,transX - transDomain / 2.0,transRange,transDomain);
}
g2.setPaint(getItemPaint(series,item));
g2.fill(circle);
g2.setStroke(getItemOutlineStroke(series,item));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(circle);
if (isItemLabelVisible(series,item)) {
if (orientation == PlotOrientation.VERTICAL) {
drawItemLabel(g2,orientation,dataset,series,item,transX,transY,false);
}
 else if (orientation == PlotOrientation.HORIZONTAL) {
drawItemLabel(g2,orientation,dataset,series,item,transY,transX,false);
}
}
EntityCollection entities=null;
if (info != null) {
entities=info.getOwner().getEntityCollection();
if (entities != null && circle.intersects(dataArea)) {
addEntity(entities,circle,dataset,series,item,circle.getCenterX(),circle.getCenterY());
}
}
int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);
int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);
updateCrosshairValues(crosshairState,x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);
}
}","public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){
  if (!getItemVisible(series,item)) {
    return;
  }
  PlotOrientation orientation=plot.getOrientation();
  double x=dataset.getXValue(series,item);
  double y=dataset.getYValue(series,item);
  double z=Double.NaN;
  if (dataset instanceof XYZDataset) {
    XYZDataset xyzData=(XYZDataset)dataset;
    z=xyzData.getZValue(series,item);
  }
  if (!Double.isNaN(z)) {
    RectangleEdge domainAxisLocation=plot.getDomainAxisEdge();
    RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();
    double transX=domainAxis.valueToJava2D(x,dataArea,domainAxisLocation);
    double transY=rangeAxis.valueToJava2D(y,dataArea,rangeAxisLocation);
    double transDomain=0.0;
    double transRange=0.0;
    double zero;
    double zSize=getBubbleSize(z);
    z=0;
switch (getScaleType()) {
case SCALE_ON_DOMAIN_AXIS:
      zero=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);
    transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero;
  transRange=transDomain;
break;
case SCALE_ON_RANGE_AXIS:
zero=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);
transRange=zero - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);
transDomain=transRange;
break;
default :
double zero1=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);
double zero2=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);
transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero1;
transRange=zero2 - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);
}
transDomain=Math.abs(transDomain);
transRange=Math.abs(transRange);
double diag=Math.sqrt(dataArea.getHeight() * dataArea.getHeight() + dataArea.getWidth() * dataArea.getWidth());
transDomain+=diag / 100;
transRange+=diag / 100;
Ellipse2D circle=null;
transDomain*=zSize;
transRange*=zSize;
if (orientation == PlotOrientation.VERTICAL) {
circle=new Ellipse2D.Double(transX - transDomain / 2.0,transY - transRange / 2.0,transDomain,transRange);
}
 else if (orientation == PlotOrientation.HORIZONTAL) {
circle=new Ellipse2D.Double(transY - transRange / 2.0,transX - transDomain / 2.0,transRange,transDomain);
}
g2.setPaint(getItemPaint(series,item));
g2.fill(circle);
g2.setStroke(getItemOutlineStroke(series,item));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(circle);
if (isItemLabelVisible(series,item)) {
if (orientation == PlotOrientation.VERTICAL) {
drawItemLabel(g2,orientation,dataset,series,item,transX,transY,false);
}
 else if (orientation == PlotOrientation.HORIZONTAL) {
drawItemLabel(g2,orientation,dataset,series,item,transY,transX,false);
}
}
EntityCollection entities=null;
if (info != null) {
entities=info.getOwner().getEntityCollection();
if (entities != null && circle.intersects(dataArea)) {
addEntity(entities,circle,dataset,series,item,circle.getCenterX(),circle.getCenterY());
}
}
int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);
int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);
updateCrosshairValues(crosshairState,x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);
}
}",0.9870817120622568
139772,"/** 
 * DataProviderBuilder constructor.
 * @param conn the connection
 * @param driver the JDBC driver
 * @param databaseUrl the database connection string (must not be null)
 * @param driverProperties the properties passed to the driver (could be null)
 * @throws SQLException
 */
public DataProviderBuilder(Connection conn,Driver driver,String databaseUrl,Properties driverProperties) throws SQLException {
  super(conn);
  this.dataProvider=DatabaseContentRetriever.getDataProvider(driver,databaseUrl,driverProperties);
  String identifierQuote=conn.getMetaData().getIdentifierQuoteString();
  DataProviderHelper.setIdentifierQuoteString(identifierQuote,dataProvider);
}","/** 
 * DataProviderBuilder constructor.
 * @param conn the connection
 * @param driver the JDBC driver
 * @param databaseUrl the database connection string (must not be null)
 * @param driverProperties the properties passed to the driver (could be null)
 * @throws SQLException
 */
public DataProviderBuilder(Connection conn,Driver driver,String databaseUrl,Properties driverProperties) throws SQLException {
  super(conn);
  this.dataProvider=DatabaseContentRetriever.getDataProvider(driver,databaseUrl,driverProperties);
  String identifierQuote=ConnectionUtils.getConnectionMetadata(conn).getIdentifierQuoteString();
  DataProviderHelper.setIdentifierQuoteString(identifierQuote,dataProvider);
}",0.8594319009468318
139773,"public List<ForeignKey> getForeignKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<ForeignKey> pks=new ArrayList<ForeignKey>();
  String driverName=connection.getMetaData().getDriverName();
  String dbLanguage=SupportDBUrlType.SQLITE3DEFAULTURL.getLanguage();
  if (!driverName.toLowerCase().contains(dbLanguage.toLowerCase())) {
    ResultSet foreignKeys=connection.getMetaData().getImportedKeys(catalogName,schemaPattern,tableName);
    try {
      while (foreignKeys.next()) {
        ForeignKey pk=createForeignKey(foreignKeys);
        pks.add(pk);
      }
    }
 catch (    SQLException e) {
      throw e;
    }
 finally {
      foreignKeys.close();
    }
  }
  return pks;
}","public List<ForeignKey> getForeignKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<ForeignKey> pks=new ArrayList<ForeignKey>();
  String driverName=ConnectionUtils.getConnectionMetadata(connection).getDriverName();
  String dbLanguage=SupportDBUrlType.SQLITE3DEFAULTURL.getLanguage();
  if (!driverName.toLowerCase().contains(dbLanguage.toLowerCase())) {
    ResultSet foreignKeys=ConnectionUtils.getConnectionMetadata(connection).getImportedKeys(catalogName,schemaPattern,tableName);
    try {
      while (foreignKeys.next()) {
        ForeignKey pk=createForeignKey(foreignKeys);
        pks.add(pk);
      }
    }
 catch (    SQLException e) {
      throw e;
    }
 finally {
      foreignKeys.close();
    }
  }
  return pks;
}",0.916
139774,"/** 
 * DOC scorreia Comment method ""getPrimaryKeys"".
 * @param catalogName
 * @param schemaPattern
 * @param table
 * @throws SQLException
 */
public List<PrimaryKey> getPrimaryKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<PrimaryKey> pks=new ArrayList<PrimaryKey>();
  ResultSet primaryKeys=connection.getMetaData().getPrimaryKeys(catalogName,schemaPattern,tableName);
  try {
    while (primaryKeys.next()) {
      PrimaryKey pk=createPrimaryKey(primaryKeys);
      pks.add(pk);
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    primaryKeys.close();
  }
  return pks;
}","/** 
 * DOC scorreia Comment method ""getPrimaryKeys"".
 * @param catalogName
 * @param schemaPattern
 * @param table
 * @throws SQLException
 */
public List<PrimaryKey> getPrimaryKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<PrimaryKey> pks=new ArrayList<PrimaryKey>();
  ResultSet primaryKeys=ConnectionUtils.getConnectionMetadata(connection).getPrimaryKeys(catalogName,schemaPattern,tableName);
  try {
    while (primaryKeys.next()) {
      PrimaryKey pk=createPrimaryKey(primaryKeys);
      pks.add(pk);
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    primaryKeys.close();
  }
  return pks;
}",0.9577248270561108
139775,"private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.ODBCDEFAULTURL.getDBKey(),SupportDBUrlType.ODBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDBKey(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDBKey(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDBKey(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SQLITE3DEFAULTURL.getDBKey(),SupportDBUrlType.SQLITE3DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDBKey(),SupportDBUrlType.TERADATADEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.AS400DEFAULTURL.getDBKey(),SupportDBUrlType.AS400DEFAULTURL);
}","private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.ODBCDEFAULTURL.getDBKey(),SupportDBUrlType.ODBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2ZOSDEFAULTURL.getDBKey(),SupportDBUrlType.DB2ZOSDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDBKey(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDBKey(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDBKey(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SQLITE3DEFAULTURL.getDBKey(),SupportDBUrlType.SQLITE3DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDBKey(),SupportDBUrlType.TERADATADEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.AS400DEFAULTURL.getDBKey(),SupportDBUrlType.AS400DEFAULTURL);
}",0.9673534072900158
139776,"private ReturnCode changedDatabaseConnection() throws ReloadCompareException {
  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  final EList<ModelElement> analyzedElements=synAnalysis.getContext().getAnalysedElements();
  if (analyzedElements == null || analyzedElements.size() == 0) {
    return new ReturnCode(Boolean.FALSE);
  }
  boolean retCode=MessageDialog.openQuestion(shell,""String_Node_Str"",""String_Node_Str"");
  if (retCode) {
    if (analyzedElements.get(0) instanceof Column) {
      anaEleSynDialog=new AnalyzedColumnsSynDialog(shell,synAnalysis,newDataProvider,analyzedElements);
    }
 else     if (analyzedElements.get(0) instanceof ColumnSet) {
      anaEleSynDialog=new AnalyzedColumnSetsSynDialog(shell,synAnalysis,newDataProvider,analyzedElements);
    }
 else     if (analyzedElements.get(0) instanceof Package) {
      anaEleSynDialog=new AnalyzedPackageSynDialog(shell,synAnalysis,newDataProvider,analyzedElements);
    }
    final List<SynTreeModel> treeModelLs=anaEleSynDialog.getSynInputModel();
    if (treeModelLs != null && treeModelLs.size() > 0) {
      boolean isReload=MessageDialog.openQuestion(shell,""String_Node_Str"",""String_Node_Str"");
      if (isReload) {
        ModelElement newDataProviderModel=treeModelLs.get(0).getNewDataProvElement();
        if (newDataProviderModel != null && (newDataProviderModel instanceof ColumnSet || newDataProviderModel instanceof Package)) {
          if (newDataProviderModel instanceof Package) {
            IRunnableWithProgress op=new IRunnableWithProgress(){
              public void run(              IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                try {
                  reloadByColumnSetFolderLevel(treeModelLs,anaEleSynDialog,newDataProvider);
                  if (analyzedElements.get(0) instanceof Column) {
                    reloadByColumnFolderLevel(treeModelLs,anaEleSynDialog,newDataProvider);
                  }
                }
 catch (                ReloadCompareException e) {
                  log.error(e,e);
                }
              }
            }
;
            try {
              ProgressUI.popProgressDialog(op);
            }
 catch (            InvocationTargetException e) {
              log.error(e,e);
            }
catch (            InterruptedException e) {
              log.error(e,e);
            }
          }
 else           if (newDataProviderModel instanceof ColumnSet) {
            IRunnableWithProgress op=new IRunnableWithProgress(){
              public void run(              IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                try {
                  reloadByColumnFolderLevel(treeModelLs,anaEleSynDialog,newDataProvider);
                }
 catch (                ReloadCompareException e) {
                  log.error(e,e);
                }
              }
            }
;
            try {
              ProgressUI.popProgressDialog(op);
            }
 catch (            InvocationTargetException e) {
              log.error(e,e);
            }
catch (            InterruptedException e) {
              log.error(e,e);
            }
          }
        }
      }
    }
    if (treeModelLs != null && treeModelLs.size() > 0) {
      int returnCode=anaEleSynDialog.open();
      if (returnCode != Window.OK) {
        return new ReturnCode(Boolean.FALSE);
      }
    }
    boolean isExistSynedElement=synAnalyzedElements(anaEleSynDialog,synAnalysis,oldDataProvider,newDataProvider);
    if (isExistSynedElement) {
      DependenciesHandler.getInstance().setDependencyOn(synAnalysis,newDataProvider);
      PrvResourceFileHelper.getInstance().save(newDataProvider);
    }
    AnaResourceFileHelper.getInstance().save(synAnalysis);
  }
 else {
    return new ReturnCode(Boolean.FALSE);
  }
  return new ReturnCode(Boolean.TRUE);
}","private ReturnCode changedDatabaseConnection() throws ReloadCompareException {
  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  final EList<ModelElement> analyzedElements=synAnalysis.getContext().getAnalysedElements();
  if (analyzedElements == null || analyzedElements.size() == 0) {
    return new ReturnCode(Boolean.TRUE);
  }
  boolean retCode=MessageDialog.openQuestion(shell,""String_Node_Str"",""String_Node_Str"");
  if (retCode) {
    if (analyzedElements.get(0) instanceof Column) {
      anaEleSynDialog=new AnalyzedColumnsSynDialog(shell,synAnalysis,newDataProvider,analyzedElements);
    }
 else     if (analyzedElements.get(0) instanceof ColumnSet) {
      anaEleSynDialog=new AnalyzedColumnSetsSynDialog(shell,synAnalysis,newDataProvider,analyzedElements);
    }
 else     if (analyzedElements.get(0) instanceof Package) {
      anaEleSynDialog=new AnalyzedPackageSynDialog(shell,synAnalysis,newDataProvider,analyzedElements);
    }
    final List<SynTreeModel> treeModelLs=anaEleSynDialog.getSynInputModel();
    if (treeModelLs != null && treeModelLs.size() > 0) {
      boolean isReload=MessageDialog.openQuestion(shell,""String_Node_Str"",""String_Node_Str"");
      if (isReload) {
        ModelElement newDataProviderModel=treeModelLs.get(0).getNewDataProvElement();
        if (newDataProviderModel != null && (newDataProviderModel instanceof ColumnSet || newDataProviderModel instanceof Package)) {
          if (newDataProviderModel instanceof Package) {
            IRunnableWithProgress op=new IRunnableWithProgress(){
              public void run(              IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                try {
                  reloadByColumnSetFolderLevel(treeModelLs,anaEleSynDialog,newDataProvider);
                  if (analyzedElements.get(0) instanceof Column) {
                    reloadByColumnFolderLevel(treeModelLs,anaEleSynDialog,newDataProvider);
                  }
                }
 catch (                ReloadCompareException e) {
                  log.error(e,e);
                }
              }
            }
;
            try {
              ProgressUI.popProgressDialog(op);
            }
 catch (            InvocationTargetException e) {
              log.error(e,e);
            }
catch (            InterruptedException e) {
              log.error(e,e);
            }
          }
 else           if (newDataProviderModel instanceof ColumnSet) {
            IRunnableWithProgress op=new IRunnableWithProgress(){
              public void run(              IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                try {
                  reloadByColumnFolderLevel(treeModelLs,anaEleSynDialog,newDataProvider);
                }
 catch (                ReloadCompareException e) {
                  log.error(e,e);
                }
              }
            }
;
            try {
              ProgressUI.popProgressDialog(op);
            }
 catch (            InvocationTargetException e) {
              log.error(e,e);
            }
catch (            InterruptedException e) {
              log.error(e,e);
            }
          }
        }
      }
    }
    if (treeModelLs != null && treeModelLs.size() > 0) {
      int returnCode=anaEleSynDialog.open();
      if (returnCode != Window.OK) {
        return new ReturnCode(Boolean.FALSE);
      }
    }
    boolean isExistSynedElement=synAnalyzedElements(anaEleSynDialog,synAnalysis,oldDataProvider,newDataProvider);
    if (isExistSynedElement) {
      DependenciesHandler.getInstance().setDependencyOn(synAnalysis,newDataProvider);
      PrvResourceFileHelper.getInstance().save(newDataProvider);
    }
    AnaResourceFileHelper.getInstance().save(synAnalysis);
  }
 else {
    return new ReturnCode(Boolean.FALSE);
  }
  return new ReturnCode(Boolean.TRUE);
}",0.1483664317745035
139777,"public Object[] getElements(Object inputElement){
  if (inputElement instanceof Package) {
    EObject eObj=(EObject)inputElement;
    Package pckg=SwitchHelpers.PACKAGE_SWITCH.doSwitch(eObj);
    if (pckg != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(pckg);
      Schema schema=SwitchHelpers.SCHEMA_SWITCH.doSwitch(pckg);
      List<TdTable> temp=PackageHelper.getTables(pckg);
      TdTable[] tables=temp.toArray(new TdTable[temp.size()]);
      if (tables.length <= 0) {
        TdDataProvider provider=DataProviderHelper.getTdDataProvider(pckg);
        if (provider == null) {
          return null;
        }
        try {
          List<TdTable> tableList=null;
          if (catalog != null) {
            tableList=DqRepositoryViewService.getTables(provider,catalog,null,true);
          }
          if (schema != null) {
            tableList=DqRepositoryViewService.getTables(provider,schema,null,true);
          }
          tables=tableList.toArray(new TdTable[tableList.size()]);
        }
 catch (        TalendException e) {
          MessageBoxExceptionHandler.process(e);
        }
        PrvResourceFileHelper.getInstance().save(provider);
      }
      return sort(tables,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
  }
  return null;
}","public Object[] getElements(Object inputElement){
  if (inputElement instanceof Package) {
    EObject eObj=(EObject)inputElement;
    Package pckg=SwitchHelpers.PACKAGE_SWITCH.doSwitch(eObj);
    if (pckg != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(pckg);
      Schema schema=SwitchHelpers.SCHEMA_SWITCH.doSwitch(pckg);
      List<TdTable> temp=PackageHelper.getTables(pckg);
      TdTable[] tables=temp.toArray(new TdTable[temp.size()]);
      if (tables.length <= 0) {
        TdDataProvider provider=DataProviderHelper.getTdDataProvider(pckg);
        if (provider == null) {
          return null;
        }
        try {
          List<TdTable> tableList=null;
          if (catalog != null) {
            tableList=DqRepositoryViewService.getTables(provider,catalog,null,true);
          }
          if (schema != null) {
            tableList=DqRepositoryViewService.getTables(provider,schema,null,true);
          }
          tables=tableList.toArray(new TdTable[tableList.size()]);
          pckg.getOwnedElement().addAll(tableList);
        }
 catch (        TalendException e) {
          MessageBoxExceptionHandler.process(e);
        }
        PrvResourceFileHelper.getInstance().save(provider);
      }
      return sort(tables,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
  }
  return null;
}",0.9802731411229136
139778,"/** 
 * DOC bZhou Comment method ""createEcosComponent"".
 * @param component
 */
private void createEcosComponent(IEcosComponent component){
  newLabelAndText(gContainer,""String_Node_Str"",component.getName());
  newLabelAndText(gContainer,""String_Node_Str"",component.getAuthor());
  newLabelAndText(gContainer,""String_Node_Str"",component.getDescription());
  newLabelAndText(gContainer,""String_Node_Str"",ExpressionType.get(Integer.parseInt(component.getCategry())).getLiteral());
}","/** 
 * DOC bZhou Comment method ""createEcosComponent"".
 * @param component
 */
private void createEcosComponent(IEcosComponent component){
  newLabelAndText(gContainer,""String_Node_Str"",component.getName());
  newLabelAndText(gContainer,""String_Node_Str"",component.getAuthor());
  newLabelAndText(gContainer,""String_Node_Str"",component.getDescription());
  ExpressionType expressionType=ExpressionType.get(Integer.parseInt(component.getCategry()));
  String type=""String_Node_Str"";
  if (expressionType != null) {
    type=expressionType.getLiteral();
  }
  newLabelAndText(gContainer,""String_Node_Str"",type);
}",0.7454212454212454
139779,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  File file=new File(targetFile);
  if (!file.exists()) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  boolean isContinue=true;
  if (file.exists() && !isForExchange) {
    isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  if (isContinue) {
    ExportFactory.export(file,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    if (isForExchange && file.isDirectory()) {
      for (      File patternFile : file.listFiles()) {
        try {
          FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
          patternFile.delete();
        }
 catch (        Exception e) {
          log.error(e.getMessage(),e);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  File file=new File(targetFile);
  if (!file.exists()) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  boolean isContinue=true;
  if (file.exists() && !isForExchange) {
    isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  if (isContinue) {
    ExportFactory.export(file,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    if (isForExchange && file.isDirectory()) {
      for (Iterator iterator=seletedPatterns.iterator(); iterator.hasNext(); ) {
        Pattern pattern=(Pattern)iterator.next();
        File patternFile=new File(file,pattern.getName() + ""String_Node_Str"");
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.843437708194537
139780,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  File file=new File(targetFile);
  boolean isContinue=true;
  if (file.exists() && !isForExchange) {
    isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  if (isContinue) {
    ExportFactory.export(file,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    if (isForExchange && file.isDirectory()) {
      for (      File patternFile : file.listFiles()) {
        try {
          FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
          patternFile.delete();
        }
 catch (        Exception e) {
          log.error(e.getMessage(),e);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  File file=new File(targetFile);
  if (!file.exists()) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  boolean isContinue=true;
  if (file.exists() && !isForExchange) {
    isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  if (isContinue) {
    ExportFactory.export(file,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    if (isForExchange && file.isDirectory()) {
      for (      File patternFile : file.listFiles()) {
        try {
          FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
          patternFile.delete();
        }
 catch (        Exception e) {
          log.error(e.getMessage(),e);
        }
      }
    }
    return true;
  }
  return false;
}",0.9534267322983718
139781,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public String getRange(){
  if (upperValue != null && lowerValue != null) {
    double range=upperValue.getRealValue() - lowerValue.getRealValue();
    return String.valueOf(range);
  }
  return null;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public String getRange(){
  if (upperValue != null && lowerValue != null) {
    Double upper=upperValue.getRealValue();
    Double lower=lowerValue.getRealValue();
    if (upper != null && lower != null) {
      double range=upper - lower;
      return String.valueOf(range);
    }
  }
  return null;
}",0.7621951219512195
139782,"/** 
 * DOC scorreia Comment method ""executeQuery"".
 * @param indicator
 * @param connection
 * @param query
 * @return
 * @throws AnalysisExecutionException
 */
private boolean executeQuery(Indicator indicator,Connection connection,Expression query) throws AnalysisExecutionException {
  try {
    List<Object[]> myResultSet=executeQuery(catalogOrSchema,connection,query.getBody());
    String tableName=getAnalyzedTable(indicator);
    final String stringDataFilter=AnalysisHelper.getStringDataFilter(this.cachedAnalysis);
    List<String> whereClauses=new ArrayList<String>();
    if (stringDataFilter != null) {
      whereClauses.add(stringDataFilter);
    }
    boolean ok=indicator.storeSqlResults(myResultSet);
    Long count=getCount(cachedAnalysis,""String_Node_Str"",tableName,catalogOrSchema,whereClauses);
    ok=ok && count != null;
    indicator.setCount(count);
    if (ColumnsetPackage.eINSTANCE.getRowMatchingIndicator().equals(indicator.eClass())) {
      RowMatchingIndicator rowMatchingIndicator=(RowMatchingIndicator)indicator;
      Long notMatchingValueCount=rowMatchingIndicator.getNotMatchingValueCount();
      ok=ok && notMatchingValueCount != null;
      if (ok) {
        rowMatchingIndicator.setMatchingValueCount(count - notMatchingValueCount);
      }
    }
    return ok;
  }
 catch (  SQLException e) {
    log.error(e,e);
    return false;
  }
}","/** 
 * DOC scorreia Comment method ""executeQuery"".
 * @param indicator
 * @param connection
 * @param query
 * @return
 * @throws AnalysisExecutionException
 */
private boolean executeQuery(Indicator indicator,Connection connection,Expression query) throws AnalysisExecutionException {
  try {
    List<Object[]> myResultSet=executeQuery(catalogOrSchema,connection,query.getBody());
    String tableName=getAnalyzedTable(indicator);
    boolean reversion=STATIC_COUNT % 2 == 0 ? true : false;
    STATIC_COUNT++;
    final String stringDataFilter=reversion ? AnalysisHelper.getStringDataFilter(this.cachedAnalysis,AnalysisHelper.DATA_FILTER_B) : AnalysisHelper.getStringDataFilter(this.cachedAnalysis,AnalysisHelper.DATA_FILTER_A);
    List<String> whereClauses=new ArrayList<String>();
    if (stringDataFilter != null && !stringDataFilter.trim().equals(""String_Node_Str"")) {
      whereClauses.add(stringDataFilter);
    }
    boolean ok=indicator.storeSqlResults(myResultSet);
    Long count=getCount(cachedAnalysis,""String_Node_Str"",tableName,catalogOrSchema,whereClauses);
    ok=ok && count != null;
    indicator.setCount(count);
    if (ColumnsetPackage.eINSTANCE.getRowMatchingIndicator().equals(indicator.eClass())) {
      RowMatchingIndicator rowMatchingIndicator=(RowMatchingIndicator)indicator;
      Long notMatchingValueCount=rowMatchingIndicator.getNotMatchingValueCount();
      ok=ok && notMatchingValueCount != null;
      if (ok) {
        rowMatchingIndicator.setMatchingValueCount(count - notMatchingValueCount);
      }
    }
    return ok;
  }
 catch (  SQLException e) {
    log.error(e,e);
    return false;
  }
}",0.9132450331125828
139783,"/** 
 * DOC scorreia Comment method ""createInstantiatedSqlExpression"".
 * @param sqlGenericExpression
 * @param columnSetA
 * @param columnSetB
 * @param useNulls
 * @return
 */
private Expression createInstantiatedSqlExpression(Expression sqlGenericExpression,EList<Column> columnSetA,EList<Column> columnSetB,boolean useNulls){
  String aliasA=""String_Node_Str"";
  String aliasB=""String_Node_Str"";
  String tableNameA=getTableName(columnSetA) + ""String_Node_Str"" + aliasA;
  String tableNameB=getTableName(columnSetB) + ""String_Node_Str"" + aliasB;
  String genericSQL=sqlGenericExpression.getBody();
  String joinClause=createJoinClause(aliasA,columnSetA,aliasB,columnSetB,useNulls);
  String whereClause=createWhereClause(aliasB,columnSetB);
  if (useNulls) {
    whereClause+=dbms().and() + '(' + createNotNullCondition(aliasA,columnSetA)+ ')';
  }
  String instantiatedSQL=dbms().fillGenericQueryWithJoin(genericSQL,tableNameA,tableNameB,joinClause,whereClause);
  Expression instantiatedExpression=CoreFactory.eINSTANCE.createExpression();
  instantiatedExpression.setLanguage(sqlGenericExpression.getLanguage());
  instantiatedExpression.setBody(instantiatedSQL);
  return instantiatedExpression;
}","/** 
 * DOC scorreia Comment method ""createInstantiatedSqlExpression"".
 * @param sqlGenericExpression
 * @param columnSetA
 * @param columnSetB
 * @param useNulls
 * @return
 */
private Expression createInstantiatedSqlExpression(Expression sqlGenericExpression,EList<Column> columnSetA,EList<Column> columnSetB,boolean useNulls){
  String aliasA=""String_Node_Str"";
  String aliasB=""String_Node_Str"";
  boolean reversion=STATIC_COUNT % 2 == 0 ? true : false;
  STATIC_COUNT++;
  String dataFilterA=AnalysisHelper.getStringDataFilter(this.cachedAnalysis,AnalysisHelper.DATA_FILTER_A);
  String dataFilterB=AnalysisHelper.getStringDataFilter(this.cachedAnalysis,AnalysisHelper.DATA_FILTER_B);
  if (reversion) {
    dataFilterA=AnalysisHelper.getStringDataFilter(this.cachedAnalysis,AnalysisHelper.DATA_FILTER_B);
    dataFilterB=AnalysisHelper.getStringDataFilter(this.cachedAnalysis,AnalysisHelper.DATA_FILTER_A);
  }
  String tableNameA=addDataFilterWithTableName(getTableName(columnSetA),dataFilterA) + ""String_Node_Str"" + aliasA;
  String tableNameB=addDataFilterWithTableName(getTableName(columnSetB),dataFilterB) + ""String_Node_Str"" + aliasB;
  String genericSQL=sqlGenericExpression.getBody();
  String joinClause=createJoinClause(aliasA,columnSetA,aliasB,columnSetB,useNulls);
  String whereClause=createWhereClause(aliasB,columnSetB);
  if (useNulls) {
    whereClause+=dbms().and() + '(' + createNotNullCondition(aliasA,columnSetA)+ ')';
  }
  String instantiatedSQL=dbms().fillGenericQueryWithJoin(genericSQL,tableNameA,tableNameB,joinClause,whereClause);
  Expression instantiatedExpression=CoreFactory.eINSTANCE.createExpression();
  instantiatedExpression.setLanguage(sqlGenericExpression.getLanguage());
  instantiatedExpression.setBody(instantiatedSQL);
  return instantiatedExpression;
}",0.743598270701696
139784,"protected void firePropertyChange(final int propertyId){
  if (masterPage.isActive()) {
    setRunActionButtonState(!isDirty() && masterPage.canRun().isOk());
  }
  super.firePropertyChange(propertyId);
}","protected void firePropertyChange(final int propertyId){
  if (masterPage.isActive()) {
    setRunActionButtonState(true);
  }
  super.firePropertyChange(propertyId);
}",0.8924731182795699
139785,"@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (masterPage.isDirty() && (newPageIndex == RESULT_PAGE_INDEX)) {
    masterPage.doSave(null);
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnAnalysisResultPage) {
    ((ColumnAnalysisResultPage)resultPage).refresh((ColumnMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnCorrelationNominalIntervalResultPage) {
    ((ColumnCorrelationNominalIntervalResultPage)resultPage).refresh((ColumnCorrelationNominalAndIntervalMasterPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnsComparisonAnalysisResultPage) {
    ((ColumnsComparisonAnalysisResultPage)resultPage).refresh((ColumnsComparisonMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof TableAnalysisResultPage) {
    ((TableAnalysisResultPage)resultPage).refresh((TableMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (masterPage != null) {
    setRunActionButtonState(masterPage.canRun().isOk());
  }
}","@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (masterPage.isDirty() && (newPageIndex == RESULT_PAGE_INDEX)) {
    masterPage.doSave(null);
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnAnalysisResultPage) {
    ((ColumnAnalysisResultPage)resultPage).refresh((ColumnMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnCorrelationNominalIntervalResultPage) {
    ((ColumnCorrelationNominalIntervalResultPage)resultPage).refresh((ColumnCorrelationNominalAndIntervalMasterPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof ColumnsComparisonAnalysisResultPage) {
    ((ColumnsComparisonAnalysisResultPage)resultPage).refresh((ColumnsComparisonMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && resultPage != null && newPageIndex == resultPage.getIndex() && resultPage instanceof TableAnalysisResultPage) {
    ((TableAnalysisResultPage)resultPage).refresh((TableMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (masterPage != null) {
    setRunActionButtonState(true);
  }
}",0.989451476793249
139786,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<Column> getNumericColumns(){
  EList<Column> computedColumns=new BasicEList<Column>();
  for (  Column column : analyzedColumns) {
    final TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(column);
    final DataminingType dmType=MetadataHelper.getDataminingType(tdColumn);
    if (DataminingType.INTERVAL.equals(dmType) && Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
      computedColumns.add(tdColumn);
    }
  }
  return computedColumns;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<Column> getNumericColumns(){
  EList<Column> computedColumns=new BasicEList<Column>();
  if (analyzedColumns != null) {
    for (    Column column : analyzedColumns) {
      final TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(column);
      final DataminingType dmType=MetadataHelper.getDataminingType(tdColumn);
      if (DataminingType.INTERVAL.equals(dmType) && Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
        computedColumns.add(tdColumn);
      }
    }
  }
  return computedColumns;
}",0.9470945359930616
139787,"private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDBKey(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDBKey(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDBKey(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SQLITE3DEFAULTURL.getDBKey(),SupportDBUrlType.SQLITE3DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDBKey(),SupportDBUrlType.TERADATADEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.AS400DEFAULTURL.getDBKey(),SupportDBUrlType.AS400DEFAULTURL);
}","private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.ODBCDEFAULTURL.getDBKey(),SupportDBUrlType.ODBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDBKey(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDBKey(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDBKey(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SQLITE3DEFAULTURL.getDBKey(),SupportDBUrlType.SQLITE3DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDBKey(),SupportDBUrlType.TERADATADEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.AS400DEFAULTURL.getDBKey(),SupportDBUrlType.AS400DEFAULTURL);
}",0.966474771418896
139788,"@Override protected void handleUpdateElement(UpdateAttribute updateAttribute){
  EObject leftElement=updateAttribute.getLeftElement();
  TdColumn columnSetSwitchLeft=SwitchHelpers.COLUMN_SWITCH.doSwitch(leftElement);
  EObject rightElement=updateAttribute.getRightElement();
  TdColumn columnSetSwitchRight=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitchLeft != null && columnSetSwitchRight != null) {
    ColumnSet columnSet=(ColumnSet)selectedObj;
    ColumnSetHelper.removeColumn(columnSetSwitchLeft,columnSet);
    ColumnSetHelper.addColumn(columnSetSwitchRight,columnSet);
  }
}","@Override protected void handleUpdateElement(UpdateAttribute updateAttribute){
  EObject leftElement=updateAttribute.getLeftElement();
  TdColumn columnSetSwitchLeft=SwitchHelpers.COLUMN_SWITCH.doSwitch(leftElement);
  if (columnSetSwitchLeft == null) {
    columnSetSwitchLeft=(TdColumn)leftElement.eContainer();
  }
  EObject rightElement=updateAttribute.getRightElement();
  TdColumn columnSetSwitchRight=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitchRight == null) {
    columnSetSwitchRight=(TdColumn)rightElement.eContainer();
  }
  if (columnSetSwitchLeft != null && columnSetSwitchRight != null) {
    ColumnSet columnSet=(ColumnSet)selectedObj;
    ColumnSetHelper.removeColumn(columnSetSwitchLeft,columnSet);
    ColumnSetHelper.addColumn(columnSetSwitchRight,columnSet);
  }
}",0.8559381588193956
139789,"public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      String value=unit.getValue().toString();
      map.put(unit.getType(),Double.parseDouble(value));
    }
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(unit.getType().getLabel());
    entity.setValue(String.valueOf(unit.getValue()));
    customerdataset.addDataEntity(entity);
  }
  if (isIntact()) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset();
    BoxAndWhiskerItem item=ChartDatasetUtils.createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
    List zerolist=new ArrayList();
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    map.remove(IndicatorEnum.RangeIndicatorEnum);
    map.remove(IndicatorEnum.IQRIndicatorEnum);
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}","public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      String value=unit.getValue() == null ? ""String_Node_Str"" : unit.getValue().toString();
      map.put(unit.getType(),Double.parseDouble(value));
    }
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(unit.getType().getLabel());
    entity.setValue(String.valueOf(unit.getValue()));
    customerdataset.addDataEntity(entity);
  }
  if (isIntact()) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset();
    BoxAndWhiskerItem item=ChartDatasetUtils.createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
    List zerolist=new ArrayList();
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    map.remove(IndicatorEnum.RangeIndicatorEnum);
    map.remove(IndicatorEnum.IQRIndicatorEnum);
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}",0.9883248730964468
139790,"/** 
 * DOC scorreia Comment method ""isGreater"".
 * @param data
 * @return
 */
private boolean isGreater(Object data){
  throw new UnsupportedOperationException(""String_Node_Str"" + data);
}","/** 
 * DOC scorreia Comment method ""isGreater"".
 * @param data
 * @return
 */
private boolean isGreater(Object data){
  try {
    double thisValue=Double.valueOf(this.value);
    double dataValue=Double.valueOf(data.toString());
    return thisValue < dataValue;
  }
 catch (  Exception e) {
    return false;
  }
}",0.5346534653465347
139791,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount();
  if (c.compareTo(0L) == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Double sum=Double.valueOf(getSumStr());
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return sum / c;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Double getMean(){
  Long c=getCount();
  if (c.compareTo(0L) == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Double sum=null;
  try {
    sum=Double.valueOf(getSumStr());
  }
 catch (  Exception e) {
    sum=Double.valueOf(0);
  }
  if (sum == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return sum / c;
}",0.7922077922077922
139792,"/** 
 * DOC scorreia Comment method ""isLess"".
 * @param data
 * @return
 */
private boolean isLess(Object data){
  throw new UnsupportedOperationException(""String_Node_Str"" + data);
}","/** 
 * DOC scorreia Comment method ""isLess"".
 * @param data
 * @return
 */
private boolean isLess(Object data){
  try {
    double thisValue=Double.valueOf(this.value);
    double dataValue=Double.valueOf(data.toString());
    return thisValue > dataValue;
  }
 catch (  Exception e) {
    return false;
  }
}",0.5233265720081136
139793,"@Override public boolean prepare(){
  final TextParameters textParameter=this.getParameters().getTextParameter();
  if (textParameter != null) {
    this.replacementChars=textParameter.getReplacementCharacters();
    this.charsToReplace=textParameter.getCharactersToReplace();
  }
  return super.prepare();
}","@Override public boolean prepare(){
  final TextParameters textParameter=this.getParameters() == null ? null : this.getParameters().getTextParameter();
  if (textParameter != null) {
    this.replacementChars=textParameter.getReplacementCharacters();
    this.charsToReplace=textParameter.getCharactersToReplace();
  }
  return super.prepare();
}",0.9418960244648318
139794,"@Override public boolean prepare(){
  final TextParameters textParameter=this.getParameters().getTextParameter();
  if (textParameter != null) {
    this.replacementChars=textParameter.getReplacementCharacters();
    this.charsToReplace=textParameter.getCharactersToReplace();
  }
  return super.prepare();
}","@Override public boolean prepare(){
  final TextParameters textParameter=this.getParameters() == null ? null : this.getParameters().getTextParameter();
  if (textParameter != null) {
    this.replacementChars=textParameter.getReplacementCharacters();
    this.charsToReplace=textParameter.getCharactersToReplace();
  }
  return super.prepare();
}",0.9418960244648318
139795,"@Override public Double getRealValue(){
  if (IndicatorValueType.REAL_VALUE.equals(this.getValueType())) {
    return Double.valueOf(value);
  }
  return null;
}","@Override public Double getRealValue(){
  if (IndicatorValueType.REAL_VALUE.equals(this.getValueType())) {
    return value == null ? null : Double.valueOf(value);
  }
  return null;
}",0.9333333333333332
139796,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        colName=dbms().getPatternFinderDefaultFunction(colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=getQuotedTableName(tdColumn);
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (!Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
        }
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(""String_Node_Str"" + colName + ""String_Node_Str""+ indicator.getName()+ ""String_Node_Str"");
      }
      int javaType=tdColumn.getJavaType();
      if (!Java2SqlType.isNumbericInSQL(javaType)) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9935382807910712
139797,"public void setSessionSelectionNode(MetaDataSession metadataSession,ISelection selection){
  sessionSelectionMap.put(metadataSession,selection);
}","/** 
 * DOC bZhou Comment method ""setSessionSelectionNode"".
 * @param metadataSession
 * @param selection
 */
public void setSessionSelectionNode(MetaDataSession metadataSession,ISelection selection){
  sessionSelectionMap.put(metadataSession,selection);
  try {
    addSession(metadataSession);
  }
 catch (  SQLCannotConnectException e) {
    e.printStackTrace();
  }
}",0.5647969052224371
139798,"/** 
 * Add a new session to the database structure view. This will create a new tab for the session.
 * @param session
 */
private void addSession(final MetaDataSession session) throws SQLCannotConnectException {
  if (_allSessions.contains(session))   return;
  try {
    session.getMetaData();
    session.setAutoCommit(true);
  }
 catch (  SQLCannotConnectException e) {
    SQLExplorerPlugin.error(e);
    throw e;
  }
catch (  SQLException e) {
    SQLExplorerPlugin.error(e);
    MessageDialog.openError(getSite().getShell(),""String_Node_Str"",e.getMessage());
  }
  DatabaseNode rootNode=session.getRoot();
  if (rootNode == null)   return;
  _allSessions.add(session);
  if (_filterAction != null) {
    _filterAction.setEnabled(true);
  }
  if (_tabFolder == null || _tabFolder.isDisposed()) {
    clearParent();
    _tabFolder=new CTabFolder(_parent,SWT.TOP | SWT.CLOSE);
    _tabFolder.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        synchronizeDetailView(detailView);
      }
    }
);
    Display display=getSite().getShell().getDisplay();
    _tabFolder.setSelectionBackground(new Color[]{display.getSystemColor(SWT.COLOR_WHITE),new Color(null,211,225,250),new Color(null,175,201,246),IConstants.TAB_BORDER_COLOR},new int[]{25,50,75},true);
    _tabFolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
      public void close(      CTabFolderEvent event){
        CTabItem tabItem=(CTabItem)event.item;
        TabData tabData=(TabData)tabItem.getData();
        _allSessions.remove(tabData.session);
        event.doit=true;
      }
    }
);
    _parent.layout();
    _parent.redraw();
  }
  final CTabItem tabItem=new CTabItem(_tabFolder,SWT.NULL);
  TabData tabData=new TabData();
  tabItem.setData(tabData);
  tabData.session=session;
  String labelText=session.getUser().getDescription();
  tabItem.setText(labelText);
  Composite composite=new Composite(_tabFolder,SWT.NULL);
  composite.setLayout(new FillLayout());
  tabItem.setControl(composite);
  final TreeViewer treeViewer=new TreeViewer(composite,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  tabData.treeViewer=treeViewer;
  Transfer[] transfers=new Transfer[]{TableNodeTransfer.getInstance()};
  treeViewer.addDragSupport(DND.DROP_COPY,transfers,new DragSourceListener(){
    public void dragFinished(    DragSourceEvent event){
      System.out.println(""String_Node_Str"");
      TableNodeTransfer.getInstance().setSelection(null);
    }
    public void dragSetData(    DragSourceEvent event){
      Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
      event.data=sel;
    }
    public void dragStart(    DragSourceEvent event){
      event.doit=!treeViewer.getSelection().isEmpty();
      if (event.doit) {
        Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
        if (!(sel instanceof TableNode)) {
          event.doit=false;
        }
 else {
          TableNode tn=(TableNode)sel;
          TableNodeTransfer.getInstance().setSelection(tn);
          if (!tn.isTable())           event.doit=false;
        }
      }
    }
  }
);
  treeViewer.setUseHashlookup(true);
  treeViewer.setContentProvider(new DBTreeContentProvider());
  treeViewer.setLabelProvider(new DBTreeLabelProvider());
  treeViewer.setInput(rootNode);
  treeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent ev){
      DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
      synchronizeDetailView(detailView);
    }
  }
);
  treeViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      try {
        DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        if (detailView == null) {
          getSite().getPage().showView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        }
        getSite().getPage().bringToTop(detailView);
        synchronizeDetailView(detailView);
      }
 catch (      Exception e) {
      }
    }
  }
);
  treeViewer.addTreeListener(new ITreeViewerListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
      INode node=(INode)event.getElement();
      node.setExpanded(false);
      TreeViewer viewer=(TreeViewer)event.getSource();
      viewer.update(node,null);
    }
    public void treeExpanded(    TreeExpansionEvent event){
      INode node=(INode)event.getElement();
      node.setExpanded(true);
      TreeViewer viewer=(TreeViewer)event.getSource();
      viewer.update(node,null);
    }
  }
);
  _tabFolder.setSelection(_tabFolder.getItemCount() - 1);
  DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
  if (detailView != null) {
    synchronizeDetailView(detailView);
    getSite().getPage().bringToTop(detailView);
  }
  composite.layout();
  _tabFolder.layout();
  _tabFolder.redraw();
  getSite().getPage().bringToTop(this);
  final DBTreeActionGroup actionGroup=new DBTreeActionGroup(treeViewer);
  MenuManager menuManager=new MenuManager(""String_Node_Str"");
  menuManager.setRemoveAllWhenShown(true);
  Menu contextMenu=menuManager.createContextMenu(treeViewer.getTree());
  treeViewer.getTree().setMenu(contextMenu);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      actionGroup.fillContextMenu(manager);
    }
  }
);
  if (sessionSelectionMap.containsKey(tabData.session)) {
    tabData.treeViewer.setSelection(sessionSelectionMap.get(tabData.session));
    sessionSelectionMap.remove(tabData.session);
  }
}","/** 
 * Add a new session to the database structure view. This will create a new tab for the session.
 * @param session
 */
private void addSession(final MetaDataSession session) throws SQLCannotConnectException {
  if (_allSessions.contains(session))   return;
  try {
    session.getMetaData();
    session.setAutoCommit(true);
  }
 catch (  SQLCannotConnectException e) {
    SQLExplorerPlugin.error(e);
    throw e;
  }
catch (  SQLException e) {
    SQLExplorerPlugin.error(e);
    MessageDialog.openError(getSite().getShell(),""String_Node_Str"",e.getMessage());
  }
  DatabaseNode rootNode=session.getRoot();
  if (rootNode == null)   return;
  _allSessions.add(session);
  if (_filterAction != null) {
    _filterAction.setEnabled(true);
  }
  if (_tabFolder == null || _tabFolder.isDisposed()) {
    clearParent();
    _tabFolder=new CTabFolder(_parent,SWT.TOP | SWT.CLOSE);
    _tabFolder.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        synchronizeDetailView(detailView);
      }
    }
);
    Display display=getSite().getShell().getDisplay();
    _tabFolder.setSelectionBackground(new Color[]{display.getSystemColor(SWT.COLOR_WHITE),new Color(null,211,225,250),new Color(null,175,201,246),IConstants.TAB_BORDER_COLOR},new int[]{25,50,75},true);
    _tabFolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
      public void close(      CTabFolderEvent event){
        CTabItem tabItem=(CTabItem)event.item;
        TabData tabData=(TabData)tabItem.getData();
        _allSessions.remove(tabData.session);
        event.doit=true;
      }
    }
);
    _parent.layout();
    _parent.redraw();
  }
  final CTabItem tabItem=new CTabItem(_tabFolder,SWT.NULL);
  TabData tabData=new TabData();
  tabItem.setData(tabData);
  tabData.session=session;
  String labelText=session.getUser().getDescription();
  tabItem.setText(labelText);
  Composite composite=new Composite(_tabFolder,SWT.NULL);
  composite.setLayout(new FillLayout());
  tabItem.setControl(composite);
  final TreeViewer treeViewer=new TreeViewer(composite,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  tabData.treeViewer=treeViewer;
  Transfer[] transfers=new Transfer[]{TableNodeTransfer.getInstance()};
  treeViewer.addDragSupport(DND.DROP_COPY,transfers,new DragSourceListener(){
    public void dragFinished(    DragSourceEvent event){
      System.out.println(""String_Node_Str"");
      TableNodeTransfer.getInstance().setSelection(null);
    }
    public void dragSetData(    DragSourceEvent event){
      Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
      event.data=sel;
    }
    public void dragStart(    DragSourceEvent event){
      event.doit=!treeViewer.getSelection().isEmpty();
      if (event.doit) {
        Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
        if (!(sel instanceof TableNode)) {
          event.doit=false;
        }
 else {
          TableNode tn=(TableNode)sel;
          TableNodeTransfer.getInstance().setSelection(tn);
          if (!tn.isTable())           event.doit=false;
        }
      }
    }
  }
);
  treeViewer.setUseHashlookup(true);
  treeViewer.setContentProvider(new DBTreeContentProvider());
  treeViewer.setLabelProvider(new DBTreeLabelProvider());
  treeViewer.setInput(rootNode);
  treeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent ev){
      DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
      synchronizeDetailView(detailView);
    }
  }
);
  treeViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      try {
        DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        if (detailView == null) {
          getSite().getPage().showView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        }
        getSite().getPage().bringToTop(detailView);
        synchronizeDetailView(detailView);
      }
 catch (      Exception e) {
      }
    }
  }
);
  treeViewer.addTreeListener(new ITreeViewerListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
      INode node=(INode)event.getElement();
      node.setExpanded(false);
      TreeViewer viewer=(TreeViewer)event.getSource();
      viewer.update(node,null);
    }
    public void treeExpanded(    TreeExpansionEvent event){
      INode node=(INode)event.getElement();
      node.setExpanded(true);
      TreeViewer viewer=(TreeViewer)event.getSource();
      viewer.update(node,null);
    }
  }
);
  _tabFolder.setSelection(_tabFolder.getItemCount() - 1);
  DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
  if (detailView != null) {
    synchronizeDetailView(detailView);
    getSite().getPage().bringToTop(detailView);
  }
  composite.layout();
  _tabFolder.layout();
  _tabFolder.redraw();
  getSite().getPage().bringToTop(this);
  final DBTreeActionGroup actionGroup=new DBTreeActionGroup(treeViewer);
  MenuManager menuManager=new MenuManager(""String_Node_Str"");
  menuManager.setRemoveAllWhenShown(true);
  Menu contextMenu=menuManager.createContextMenu(treeViewer.getTree());
  treeViewer.getTree().setMenu(contextMenu);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      actionGroup.fillContextMenu(manager);
    }
  }
);
  if (sessionSelectionMap.containsKey(tabData.session)) {
    tabData.treeViewer.setSelection(sessionSelectionMap.get(tabData.session));
    sessionSelectionMap.remove(tabData.session);
    _allSessions.remove(tabData.session);
  }
}",0.9964818227508796
139799,"@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  final SashForm sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  setSaveButton(createSaveButton(topComp));
  if (false) {
    createAnalysisParamSection(form,topComp);
  }
  Composite previewComp=toolkit.createComposite(sForm);
  previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewComp.setLayout(new GridLayout());
  previewComp.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      super.controlResized(e);
      sForm.redraw();
      form.reflow(true);
    }
  }
);
  createPreviewSection(form,previewComp);
  foldingSections(new Section[]{metadataSection,analysisColumnSection,dataFilterSection});
  currentEditor.registerSections(new Section[]{analysisColumnSection,metadataSection,dataFilterSection,analysisParamSection,previewSection});
}","@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  final SashForm sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  createAnalysisParamSection(form,topComp);
  setSaveButton(createSaveButton(topComp));
  Composite previewComp=toolkit.createComposite(sForm);
  previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewComp.setLayout(new GridLayout());
  previewComp.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      super.controlResized(e);
      sForm.redraw();
      form.reflow(true);
    }
  }
);
  createPreviewSection(form,previewComp);
  foldingSections(new Section[]{metadataSection,analysisColumnSection,dataFilterSection});
  currentEditor.registerSections(new Section[]{analysisColumnSection,metadataSection,dataFilterSection,analysisParamSection,previewSection});
}",0.9645066753500487
139800,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT getDistinctCount(Object dataValue)
 */
public Long getDistinctCount(Object dataValue){
  Long freq=this.valueToDistinctFreq.get(dataValue);
  return (freq == null) ? 0L : freq;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT getDistinctCount(Object dataValue)
 */
public Long getDistinctCount(Object dataValue){
  Long freq=this.valueToDistinctFreq == null ? null : this.valueToDistinctFreq.get(dataValue);
  return (freq == null) ? 0L : freq;
}",0.922509225092251
139801,"public RunAnalysisAction(IRuningStatusListener listener){
  this();
  this.listener=listener;
}","public RunAnalysisAction(){
  super(DefaultMessagesImpl.getString(""String_Node_Str""));
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.REFRESH_IMAGE));
}",0.3488372093023256
139802,"protected void addPages(){
switch (analysisType) {
case COLUMN_CORRELATION:
    masterPage=new ColumnCorrelationNominalAndIntervalMasterPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
  setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new ColumnCorrelationNominalIntervalResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case MULTIPLE_COLUMN:
masterPage=new ColumnMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new ColumnAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CONNECTION:
masterPage=new ConnectionMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
try {
addPage(masterPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CATALOG:
masterPage=new CatalogMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
try {
addPage(masterPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case SCHEMA:
masterPage=new SchemaAnalysisMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
try {
addPage(masterPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case COLUMNS_COMPARISON:
masterPage=new ColumnsComparisonMasterDetailsPage(this,MASTER_PAGE,DefaultMessagesImpl.getString(""String_Node_Str""));
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new ColumnsComparisonAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case TABLE:
masterPage=new TableMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new TableAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
default :
}
TdEditorToolBar toolbar=getToolBar();
if (toolbar != null && masterPage != null) {
runAction=new RunAnalysisAction(masterPage);
refreshAction=new RefreshChartAction();
toolbar.addActions(runAction,refreshAction);
}
}","protected void addPages(){
switch (analysisType) {
case COLUMN_CORRELATION:
    masterPage=new ColumnCorrelationNominalAndIntervalMasterPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
  setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new ColumnCorrelationNominalIntervalResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case MULTIPLE_COLUMN:
masterPage=new ColumnMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new ColumnAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CONNECTION:
masterPage=new ConnectionMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
try {
addPage(masterPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case CATALOG:
masterPage=new CatalogMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
try {
addPage(masterPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case SCHEMA:
masterPage=new SchemaAnalysisMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
try {
addPage(masterPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case COLUMNS_COMPARISON:
masterPage=new ColumnsComparisonMasterDetailsPage(this,MASTER_PAGE,DefaultMessagesImpl.getString(""String_Node_Str""));
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new ColumnsComparisonAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
case TABLE:
masterPage=new TableMasterDetailsPage(this,MASTER_PAGE,ANALYSIS_SETTINGS);
setPartName(DefaultMessagesImpl.getString(""String_Node_Str""));
resultPage=new TableAnalysisResultPage(this,SECOND_PAGE,ANALYSIS_RESULTS);
try {
addPage(masterPage);
addPage(resultPage);
}
 catch (PartInitException e) {
ExceptionHandler.process(e,Level.ERROR);
}
break;
default :
}
TdEditorToolBar toolbar=getToolBar();
if (toolbar != null && masterPage != null) {
runAction=new RunAnalysisAction();
refreshAction=new RefreshChartAction();
toolbar.addActions(runAction,refreshAction);
}
}",0.9981082103670073
139803,"public void refresh(ColumnMasterDetailsPage masterPage){
  this.masterPage=masterPage;
  this.summaryComp.dispose();
  this.resultComp.dispose();
  createFormContent(getManagedForm());
}","@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnMasterDetailsPage)masterPage;
  this.summaryComp.dispose();
  this.resultComp.dispose();
  createFormContent(getManagedForm());
}",0.7184466019417476
139804,"public void linkActivated(HyperlinkEvent e){
  for (  Control control : chartComposite.getChildren()) {
    control.dispose();
  }
  boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
  if (!analysisStatue) {
    boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    if (returnCode) {
      new RunAnalysisAction(ColumnCorrelationNominalAndIntervalMasterPage.this).run();
      message.setVisible(false);
    }
 else {
      createPreviewCharts(form,chartComposite,false);
      message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      message.setVisible(true);
    }
  }
 else {
    createPreviewCharts(form,chartComposite,true);
  }
  chartComposite.layout();
  form.reflow(true);
}","public void linkActivated(HyperlinkEvent e){
  for (  Control control : chartComposite.getChildren()) {
    control.dispose();
  }
  boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
  if (!analysisStatue) {
    boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    if (returnCode) {
      new RunAnalysisAction().run();
      message.setVisible(false);
    }
 else {
      createPreviewCharts(form,chartComposite,false);
      message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      message.setVisible(true);
    }
  }
 else {
    createPreviewCharts(form,chartComposite,true);
  }
  chartComposite.layout();
  form.reflow(true);
}",0.971264367816092
139805,"void createPreviewSection(final ScrolledForm form,Composite parent){
  previewSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),true,DefaultMessagesImpl.getString(""String_Node_Str""));
  previewSection.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(previewSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  ImageHyperlink refreshBtn=toolkit.createImageHyperlink(sectionClient,SWT.NONE);
  refreshBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  refreshBtn.setImage(ImageLib.getImage(ImageLib.SECTION_PREVIEW));
  final Label message=toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  message.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  message.setVisible(false);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  chartComposite=toolkit.createComposite(sectionClient);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Analysis analysis=correlationAnalysisHandler.getAnalysis();
  refreshBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
      if (!analysisStatue) {
        boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        if (returnCode) {
          new RunAnalysisAction(ColumnCorrelationNominalAndIntervalMasterPage.this).run();
          message.setVisible(false);
        }
 else {
          createPreviewCharts(form,chartComposite,false);
          message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          message.setVisible(true);
        }
      }
 else {
        createPreviewCharts(form,chartComposite,true);
      }
      chartComposite.layout();
      form.reflow(true);
    }
  }
);
  previewSection.setClient(sectionClient);
}","void createPreviewSection(final ScrolledForm form,Composite parent){
  previewSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),true,DefaultMessagesImpl.getString(""String_Node_Str""));
  previewSection.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(previewSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  ImageHyperlink refreshBtn=toolkit.createImageHyperlink(sectionClient,SWT.NONE);
  refreshBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  refreshBtn.setImage(ImageLib.getImage(ImageLib.SECTION_PREVIEW));
  final Label message=toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  message.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  message.setVisible(false);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  chartComposite=toolkit.createComposite(sectionClient);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Analysis analysis=correlationAnalysisHandler.getAnalysis();
  refreshBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
      if (!analysisStatue) {
        boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        if (returnCode) {
          new RunAnalysisAction().run();
          message.setVisible(false);
        }
 else {
          createPreviewCharts(form,chartComposite,false);
          message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          message.setVisible(true);
        }
      }
 else {
        createPreviewCharts(form,chartComposite,true);
      }
      chartComposite.layout();
      form.reflow(true);
    }
  }
);
  previewSection.setClient(sectionClient);
}",0.9890590809628008
139806,"public void refresh(ColumnCorrelationNominalAndIntervalMasterPage masterPage){
  this.masterPage=masterPage;
  this.summaryComp.dispose();
  this.graphicsAndTableComp.dispose();
  createFormContent(getManagedForm());
}","@Override public void refresh(AbstractAnalysisMetadataPage masterPage){
  this.masterPage=(ColumnCorrelationNominalAndIntervalMasterPage)masterPage;
  this.summaryComp.dispose();
  this.graphicsAndTableComp.dispose();
  createFormContent(getManagedForm());
}",0.7815126050420168
139807,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  if (openStandardAnalysisDialog(AnalysisType.COLUMN_CORRELATION) == Window.OK) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      ColumnCorrelationNominalAndIntervalMasterPage page=(ColumnCorrelationNominalAndIntervalMasterPage)editor.getMasterPage();
      if (!this.selection.isEmpty()) {
        TdColumn[] columns=new TdColumn[selection.size()];
        Iterator it=this.selection.iterator();
        int i=0;
        while (it.hasNext()) {
          columns[i]=(TdColumn)it.next();
          i++;
        }
        page.getTreeViewer().setInput(columns);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  hasDateColumn=false;
  hasNumberColumn=false;
  if (openStandardAnalysisDialog(AnalysisType.COLUMN_CORRELATION) == Window.OK) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      ColumnCorrelationNominalAndIntervalMasterPage page=(ColumnCorrelationNominalAndIntervalMasterPage)editor.getMasterPage();
      if (!this.selection.isEmpty()) {
        TdColumn[] columns=new TdColumn[selection.size()];
        Iterator it=this.selection.iterator();
        int i=0;
        while (it.hasNext()) {
          columns[i]=(TdColumn)it.next();
          i++;
        }
        page.getTreeViewer().setInput(columns);
      }
    }
  }
}",0.9693486590038314
139808,"private int openStandardAnalysisDialog(AnalysisType type){
  AnalysisLabelParameter parameter=new AnalysisLabelParameter();
  if (isContainNumber()) {
    parameter.setCategoryLabel(AnalysisLabelParameter.NUMBERIC_CORRELATION);
  }
 else {
    parameter.setCategoryLabel(AnalysisLabelParameter.DATE_CORRELATION);
  }
  Wizard wizard=WizardFactory.createAnalysisWizard(type,parameter);
  wizard.setForcePreviousAndNextButtons(true);
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(500,340);
  return dialog.open();
}","private int openStandardAnalysisDialog(AnalysisType type){
  AnalysisLabelParameter parameter=new AnalysisLabelParameter();
  checkSelectedColumn();
  if (hasNumberColumn && hasDateColumn) {
    MessageUI.openError(""String_Node_Str"");
    return Window.CANCEL;
  }
 else   if (hasNumberColumn && !hasDateColumn) {
    parameter.setCategoryLabel(AnalysisLabelParameter.NUMBERIC_CORRELATION);
  }
 else   if (!hasNumberColumn && hasDateColumn) {
    parameter.setCategoryLabel(AnalysisLabelParameter.DATE_CORRELATION);
  }
 else {
    parameter.setCategoryLabel(AnalysisLabelParameter.NOMINAL_CORRELATION);
  }
  Wizard wizard=WizardFactory.createAnalysisWizard(type,parameter);
  wizard.setForcePreviousAndNextButtons(true);
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(500,340);
  return dialog.open();
}",0.7627365356622998
139809,"/** 
 * Method ""getCatalogName"".
 * @param analyzedElement
 * @return the catalog or schema quoted name
 */
private String getCatalogOrSchemaName(ModelElement analyzedElement){
  Package schema=super.schemata.get(analyzedElement);
  if (schema == null) {
    log.error(""String_Node_Str"" + analyzedElement.getName());
    return null;
  }
  if (RelationalPackage.eINSTANCE.getTdSchema().equals(schema.eClass())) {
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(schema);
    if (parentCatalog != null) {
      return parentCatalog.getName();
    }
  }
  return schema.getName();
}","/** 
 * Method ""getCatalogName"".
 * @param analyzedElement
 * @return the catalog or schema quoted name
 */
protected String getCatalogOrSchemaName(ModelElement analyzedElement){
  Package schema=super.schemata.get(analyzedElement);
  if (schema == null) {
    log.error(""String_Node_Str"" + analyzedElement.getName());
    return null;
  }
  if (RelationalPackage.eINSTANCE.getTdSchema().equals(schema.eClass())) {
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(schema);
    if (parentCatalog != null) {
      return parentCatalog.getName();
    }
  }
  return schema.getName();
}",0.9899497487437184
139810,"/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param columnSetA
 * @return
 */
private String getTableName(EList<Column> columnSetA){
  String tableName=null;
  for (  Column column : columnSetA) {
    ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
    if (columnSetOwner == null) {
      log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
      continue;
    }
 else {
      tableName=columnSetOwner.getName();
      Package pack=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner);
      if (pack == null) {
        log.error(""String_Node_Str"" + tableName);
        continue;
      }
      this.catalogOrSchema=pack.getName();
      break;
    }
  }
  return quote(tableName);
}","/** 
 * DOC scorreia Comment method ""getTableName"".
 * @param columnSetA
 * @return
 */
private String getTableName(EList<Column> columnSetA){
  String tableName=null;
  for (  Column column : columnSetA) {
    if (belongToSameSchemata((TdColumn)column)) {
      ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
      if (columnSetOwner == null) {
        log.error(""String_Node_Str"" + column.getName() + ""String_Node_Str"");
        continue;
      }
 else {
        tableName=columnSetOwner.getName();
        this.catalogOrSchema=getCatalogOrSchemaName(column);
        break;
      }
    }
  }
  return quote(tableName);
}",0.6987600291757841
139811,"public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      String value=unit.getValue().toString();
      map.put(unit.getType(),Double.parseDouble(value));
    }
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(unit.getType().getLabel());
    entity.setValue(String.valueOf(unit.getValue()));
    customerdataset.addDataEntity(entity);
  }
  if (isIntact()) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset();
    BoxAndWhiskerItem item=ChartDatasetUtils.createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
    List zerolist=new ArrayList();
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}","public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      String value=unit.getValue().toString();
      map.put(unit.getType(),Double.parseDouble(value));
    }
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(unit.getType().getLabel());
    entity.setValue(String.valueOf(unit.getValue()));
    customerdataset.addDataEntity(entity);
  }
  if (isIntact()) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset();
    BoxAndWhiskerItem item=ChartDatasetUtils.createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
    List zerolist=new ArrayList();
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    map.remove(IndicatorEnum.RangeIndicatorEnum);
    map.remove(IndicatorEnum.IQRIndicatorEnum);
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}",0.9741833508956796
139812,"public static int getPageSize(){
  try {
    return Integer.parseInt(ResourcesPlugin.getPlugin().getPluginPreferences().getString(PerformancePreferencePage.ANALYZED_ITEMS_PER_PAGE));
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
  return PAGE_SIZE;
}","public static int getPageSize(){
  try {
    String defaultPageSize=ResourcesPlugin.getPlugin().getPluginPreferences().getString(PerformancePreferencePage.ANALYZED_ITEMS_PER_PAGE);
    if (!""String_Node_Str"".equals(defaultPageSize)) {
      return Integer.parseInt(defaultPageSize);
    }
  }
 catch (  NumberFormatException e) {
    log.error(e,e);
  }
  return PAGE_SIZE;
}",0.711864406779661
139813,"public static List<TdView> getViews(Catalog catalog){
  return ViewHelper.getViews(catalog.getOwnedElement());
}","/** 
 * DOC bZhou Comment method ""getViews"".
 * @param pack
 * @return
 */
public static List<TdView> getViews(Package pack){
  return ViewHelper.getViews(pack.getOwnedElement());
}",0.6552901023890785
139814,"/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query,String editorName){
  SQLEditor sqlEditor=openInSqlEditor(tdDataProvider,query,editorName);
  Session session=sqlEditor.getSession();
  if (sqlEditor != null && session != null) {
    new ExecSQLAction(sqlEditor).run();
  }
}","/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query,String editorName){
  SQLEditor sqlEditor=openInSqlEditor(tdDataProvider,query,editorName);
  if (sqlEditor != null) {
    new ExecSQLAction(sqlEditor).run();
  }
}",0.928150765606596
139815,"@Override protected List<TdView> getColumnSetsWithFilter(TdCatalog catalog,TdSchema schema){
  if (catalog != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,catalog.getTaggedValue());
    return filterColumnSets(CatalogHelper.getViews(catalog),viewFilter);
  }
  if (schema != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,schema.getTaggedValue());
    return filterColumnSets(CatalogHelper.getViews(catalog),viewFilter);
  }
  return Collections.emptyList();
}","@Override protected List<TdView> getColumnSetsWithFilter(TdCatalog catalog,TdSchema schema){
  if (catalog != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,catalog.getTaggedValue());
    return filterColumnSets(CatalogHelper.getViews(catalog),viewFilter);
  }
  if (schema != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,schema.getTaggedValue());
    return filterColumnSets(CatalogHelper.getViews(schema),viewFilter);
  }
  return Collections.emptyList();
}",0.9879963065558632
139816,"public List<ForeignKey> getForeignKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<ForeignKey> pks=new ArrayList<ForeignKey>();
  ResultSet foreignKeys=connection.getMetaData().getImportedKeys(catalogName,schemaPattern,tableName);
  try {
    while (foreignKeys.next()) {
      ForeignKey pk=createForeignKey(foreignKeys);
      pks.add(pk);
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    foreignKeys.close();
  }
  return pks;
}","public List<ForeignKey> getForeignKeys(String catalogName,String schemaPattern,String tableName) throws SQLException {
  List<ForeignKey> pks=new ArrayList<ForeignKey>();
  String driverName=connection.getMetaData().getDriverName();
  String dbLanguage=SupportDBUrlType.SQLITE3DEFAULTURL.getLanguage();
  if (!driverName.toLowerCase().contains(dbLanguage.toLowerCase())) {
    ResultSet foreignKeys=connection.getMetaData().getImportedKeys(catalogName,schemaPattern,tableName);
    try {
      while (foreignKeys.next()) {
        ForeignKey pk=createForeignKey(foreignKeys);
        pks.add(pk);
      }
    }
 catch (    SQLException e) {
      throw e;
    }
 finally {
      foreignKeys.close();
    }
  }
  return pks;
}",0.7983606557377049
139817,"private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDBKey(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDBKey(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDBKey(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDBKey(),SupportDBUrlType.TERADATADEFAULTURL);
}","private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SYBASEDEFAULTURL.getDBKey(),SupportDBUrlType.SYBASEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INGRESDEFAULTURL.getDBKey(),SupportDBUrlType.INGRESDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.INFORMIXDEFAULTURL.getDBKey(),SupportDBUrlType.INFORMIXDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.SQLITE3DEFAULTURL.getDBKey(),SupportDBUrlType.SQLITE3DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.GENERICJDBCDEFAULTURL.getDBKey(),SupportDBUrlType.GENERICJDBCDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.TERADATADEFAULTURL.getDBKey(),SupportDBUrlType.TERADATADEFAULTURL);
}",0.9587750294464076
139818,"@Override protected List<TdView> getColumnSetsWithFilter(TdCatalog catalog,TdSchema schema){
  if (catalog != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,catalog.getTaggedValue());
    return filterColumnSets(CatalogHelper.getViews(catalog),viewFilter);
  }
  if (schema != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,schema.getTaggedValue());
    return filterColumnSets(CatalogHelper.getViews(schema),viewFilter);
  }
  return Collections.emptyList();
}","@Override protected List<TdView> getColumnSetsWithFilter(TdCatalog catalog,TdSchema schema){
  if (catalog != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,catalog.getTaggedValue());
    return filterColumnSets(CatalogHelper.getViews(catalog),viewFilter);
  }
  if (schema != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,schema.getTaggedValue());
    return filterColumnSets(SchemaHelper.getViews(schema),viewFilter);
  }
  return Collections.emptyList();
}",0.9879740980573544
139819,"/** 
 * DOC scorreia Comment method ""createInstantiatedSqlExpression"".
 * @param sqlGenericExpression
 * @param columnSetA
 * @param columnSetB
 * @param useNulls
 * @return
 */
private Expression createInstantiatedSqlExpression(Expression sqlGenericExpression,EList<Column> columnSetA,EList<Column> columnSetB,boolean useNulls){
  String tableNameA=getTableName(columnSetA);
  String tableNameB=getTableName(columnSetB);
  String genericSQL=sqlGenericExpression.getBody();
  String joinClause=createJoinClause(tableNameA,columnSetA,tableNameB,columnSetB,useNulls);
  String whereClause=createWhereClause(tableNameB,columnSetB);
  if (useNulls) {
    whereClause+=dbms().and() + '(' + createNotNullCondition(tableNameA,columnSetA)+ ')';
  }
  String instantiatedSQL=dbms().fillGenericQueryWithJoin(genericSQL,tableNameA,tableNameB,joinClause,whereClause);
  Expression instantiatedExpression=CoreFactory.eINSTANCE.createExpression();
  instantiatedExpression.setLanguage(sqlGenericExpression.getLanguage());
  instantiatedExpression.setBody(instantiatedSQL);
  return instantiatedExpression;
}","/** 
 * DOC scorreia Comment method ""createInstantiatedSqlExpression"".
 * @param sqlGenericExpression
 * @param columnSetA
 * @param columnSetB
 * @param useNulls
 * @return
 */
private Expression createInstantiatedSqlExpression(Expression sqlGenericExpression,EList<Column> columnSetA,EList<Column> columnSetB,boolean useNulls){
  String aliasA=""String_Node_Str"";
  String aliasB=""String_Node_Str"";
  String tableNameA=getTableName(columnSetA) + ""String_Node_Str"" + aliasA;
  String tableNameB=getTableName(columnSetB) + ""String_Node_Str"" + aliasB;
  String genericSQL=sqlGenericExpression.getBody();
  String joinClause=createJoinClause(aliasA,columnSetA,aliasB,columnSetB,useNulls);
  String whereClause=createWhereClause(aliasB,columnSetB);
  if (useNulls) {
    whereClause+=dbms().and() + '(' + createNotNullCondition(aliasA,columnSetA)+ ')';
  }
  String instantiatedSQL=dbms().fillGenericQueryWithJoin(genericSQL,tableNameA,tableNameB,joinClause,whereClause);
  Expression instantiatedExpression=CoreFactory.eINSTANCE.createExpression();
  instantiatedExpression.setLanguage(sqlGenericExpression.getLanguage());
  instantiatedExpression.setBody(instantiatedSQL);
  return instantiatedExpression;
}",0.8825065274151436
139820,"private void createStatisticalSection(Composite topComp){
  statisticalSection=this.createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  catalogTableViewer=new TableViewer(sectionClient,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  Table table=catalogTableViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<TdCatalog> catalogs=getCatalogs();
  boolean containSubSchema=false;
  for (  Catalog catalog : catalogs) {
    List<TdSchema> schemas=CatalogHelper.getSchemas(catalog);
    if (schemas.size() > 0) {
      containSubSchema=true;
      break;
    }
  }
  if (catalogs.size() > 0 && containSubSchema) {
    createCatalogSchemaColumns(table);
    provider=new CatalogSchemaViewerProvier();
    final TableViewer schemaTableViewer=createSecondStatisticalTable(sectionClient);
    schemaTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
    catalogTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        StructuredSelection selection=(StructuredSelection)event.getSelection();
        CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
        schemaTableViewer.setInput(firstElement.getSchemaIndicators());
        schemaTableViewer.getTable().setVisible(true);
      }
    }
);
  }
 else {
    if (catalogs.size() > 0) {
      createCatalogTableColumns(table);
      provider=new CatalogViewerProvier();
    }
 else {
      createSchemaTableColumns(table);
      provider=new SchemaViewerProvier();
    }
    catalogTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
  }
  catalogTableViewer.setLabelProvider(provider);
  catalogTableViewer.setContentProvider(provider);
  doSetInput();
  tableAndViewComposite=new Composite(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tableAndViewComposite);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.horizontalSpacing=50;
  tableAndViewComposite.setLayout(layout);
  tableAndViewComposite.setVisible(false);
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}","private void createStatisticalSection(Composite topComp){
  statisticalSection=this.createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  catalogTableViewer=new TableViewer(sectionClient,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  Table table=catalogTableViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<TdCatalog> catalogs=getCatalogs();
  boolean containSubSchema=false;
  for (  Catalog catalog : catalogs) {
    List<TdSchema> schemas=CatalogHelper.getSchemas(catalog);
    if (schemas.size() > 0) {
      containSubSchema=true;
      break;
    }
  }
  if (catalogs.size() > 0 && containSubSchema) {
    createCatalogSchemaColumns(table);
    provider=new CatalogSchemaViewerProvier();
    addColumnSorters(catalogTableViewer,catalogTableViewer.getTable().getColumns(),catalogWithSchemaSorters);
    final TableViewer schemaTableViewer=createSecondStatisticalTable(sectionClient);
    schemaTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
    catalogTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        StructuredSelection selection=(StructuredSelection)event.getSelection();
        CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
        schemaTableViewer.setInput(firstElement.getSchemaIndicators());
        schemaTableViewer.getTable().setVisible(true);
        addColumnSorters(schemaTableViewer,schemaTableViewer.getTable().getColumns(),schemaSorters);
      }
    }
);
  }
 else {
    if (catalogs.size() > 0) {
      createCatalogTableColumns(table);
      provider=new CatalogViewerProvier();
    }
 else {
      createSchemaTableColumns(table);
      provider=new SchemaViewerProvier();
    }
    addColumnSorters(catalogTableViewer,catalogTableViewer.getTable().getColumns(),schemaSorters);
    catalogTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
  }
  catalogTableViewer.setLabelProvider(provider);
  catalogTableViewer.setContentProvider(provider);
  doSetInput();
  tableAndViewComposite=new Composite(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tableAndViewComposite);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.horizontalSpacing=50;
  tableAndViewComposite.setLayout(layout);
  tableAndViewComposite.setVisible(false);
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}",0.9424860853432282
139821,"public void selectionChanged(SelectionChangedEvent event){
  StructuredSelection selection=(StructuredSelection)event.getSelection();
  CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
  schemaTableViewer.setInput(firstElement.getSchemaIndicators());
  schemaTableViewer.getTable().setVisible(true);
}","public void selectionChanged(SelectionChangedEvent event){
  StructuredSelection selection=(StructuredSelection)event.getSelection();
  CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
  schemaTableViewer.setInput(firstElement.getSchemaIndicators());
  schemaTableViewer.getTable().setVisible(true);
  addColumnSorters(schemaTableViewer,schemaTableViewer.getTable().getColumns(),schemaSorters);
}",0.8738379814077025
139822,"public static void getIndicatorValue(TableIndicatorUnit indicatorUnit){
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (indicatorUnit.isExcuted()) {
switch (type) {
case RowCountIndicatorEnum:
      tempObject=((RowCountIndicator)indicator).getCount();
    break;
case WhereRuleIndicatorEnum:
  tempObject=((WhereRuleIndicator)indicator).getUserCount();
default :
}
indicatorUnit.setValue(tempObject);
}
}","public static void getIndicatorValue(TableIndicatorUnit indicatorUnit){
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (indicatorUnit.isExcuted()) {
switch (type) {
case RowCountIndicatorEnum:
      tempObject=((RowCountIndicator)indicator).getCount();
    break;
case WhereRuleIndicatorEnum:
  Long userCount=((WhereRuleIndicator)indicator).getUserCount();
tempObject=userCount == null ? 0 : userCount;
default :
}
indicatorUnit.setValue(tempObject);
}
}",0.93359375
139823,"private IWorkbenchPage getActivePage(){
  if (getWorkbench() != null && getWorkbench().getActiveWorkbenchWindow() != null)   return getWorkbench().getActiveWorkbenchWindow().getActivePage();
  return null;
}","/** 
 * DOC bZhou Comment method ""getActivePage"".
 * @return the current actived page.
 */
public IWorkbenchPage getActivePage(){
  if (getWorkbench() != null && getWorkbench().getActiveWorkbenchWindow() != null)   return getWorkbench().getActiveWorkbenchWindow().getActivePage();
  return null;
}",0.7976190476190477
139824,"/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query,String editorName){
  SQLEditor sqlEditor=openInSqlEditor(tdDataProvider,query,editorName);
  if (sqlEditor != null) {
    ExecSQLAction execSQLAction=new ExecSQLAction(sqlEditor);
    execSQLAction.run();
  }
}","/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query,String editorName){
  SQLEditor sqlEditor=openInSqlEditor(tdDataProvider,query,editorName);
  Session session=sqlEditor.getSession();
  if (sqlEditor != null && session != null) {
    new ExecSQLAction(sqlEditor).run();
  }
}",0.8348214285714286
139825,"public IEditorPart openEditor(IFile file,String editorId){
  FileEditorInput input=new FileEditorInput(file);
  try {
    return this.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,editorId);
  }
 catch (  PartInitException e) {
    ExceptionHandler.process(e);
    return null;
  }
}","/** 
 * DOC bZhou Comment method ""openEditor"".
 * @param file
 * @param editorId
 * @return
 */
public IEditorPart openEditor(IFile file,String editorId){
  FileEditorInput input=new FileEditorInput(file);
  try {
    return this.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,editorId);
  }
 catch (  PartInitException e) {
    ExceptionHandler.process(e);
    return null;
  }
}",0.8666666666666667
139826,"/** 
 * DOC mzhao Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 */
public SQLEditor openInSqlEditor(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  SQLExplorerPlugin sqlexplorer=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=sqlexplorer.getAliasManager().getAliases();
  boolean isExisted=false;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      isExisted=true;
    }
  }
  if (!isExisted) {
    new ChangePerspectiveAction(PluginConstant.SE_ID).run();
  }
  SQLEditor editorPart=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        break;
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return editorPart;
}","/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias != null) {
    try {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
      SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
      editorPart.setText(query);
      return editorPart;
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}",0.3791505791505791
139827,"@SuppressWarnings(""String_Node_Str"") public static TypedReturnCode<TableNode> findSqlExplorerTableNode(TdProviderConnection providerConnection,Package parentPackageElement,String tableName,String activeTabName){
  ChangePerspectiveAction perspectiveAction=new ChangePerspectiveAction(PluginConstant.SE_ID);
  perspectiveAction.run();
  SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=default1.getAliasManager().getAliases();
  String url=providerConnection.getConnectionString();
  User currentUser=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      currentUser=alias.getDefaultUser();
      OpenPasswordConnectDialogAction openDlgAction=new OpenPasswordConnectDialogAction(alias,alias.getDefaultUser(),false);
      openDlgAction.run();
      break;
    }
  }
  if (currentUser == null) {
    return new TypedReturnCode<TableNode>(DefaultMessagesImpl.getString(""String_Node_Str"",tableName),false);
  }
  DatabaseNode root=currentUser.getMetaDataSession().getRoot();
  root.load();
  List<INode> catalogs=root.getCatalogs();
  List<INode> schemas=root.getSchemas();
  TdCatalog doSwitch=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPackageElement);
  INode catalogOrSchemaNode=null;
  if (doSwitch != null) {
    for (    INode catalogNode : catalogs) {
      if (parentPackageElement.getName().equalsIgnoreCase(catalogNode.getName())) {
        catalogOrSchemaNode=catalogNode;
        break;
      }
    }
  }
 else {
    for (    INode schemaNode : schemas) {
      if (parentPackageElement.getName().equalsIgnoreCase(schemaNode.getName())) {
        catalogOrSchemaNode=schemaNode;
      }
    }
  }
  INode[] childNodes=catalogOrSchemaNode.getChildNodes();
  TableFolderNode tableFolderNode=null;
  for (  INode node : childNodes) {
    if (""String_Node_Str"".equals(node.getQualifiedName())) {
      tableFolderNode=(TableFolderNode)node;
      break;
    }
  }
  INode[] tableNodes=tableFolderNode.getChildNodes();
  for (  INode node : tableNodes) {
    if (tableName.equalsIgnoreCase(node.getName())) {
      TypedReturnCode<TableNode> typedReturnCode=new TypedReturnCode<TableNode>(null,true);
      typedReturnCode.setObject((TableNode)node);
      DatabaseStructureView dsView=SQLExplorerPlugin.getDefault().getDatabaseStructureView();
      dsView.setSessionSelectionNode(currentUser.getMetaDataSession(),new StructuredSelection(node));
      DetailTabManager.setActiveTabName(activeTabName);
      return typedReturnCode;
    }
  }
  return new TypedReturnCode<TableNode>(DefaultMessagesImpl.getString(""String_Node_Str"",tableName),false);
}","@SuppressWarnings(""String_Node_Str"") public static TypedReturnCode<TableNode> findSqlExplorerTableNode(TdProviderConnection providerConnection,Package parentPackageElement,String tableName,String activeTabName){
  new ChangePerspectiveAction(PluginConstant.SE_ID).run();
  SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=default1.getAliasManager().getAliases();
  String url=providerConnection.getConnectionString();
  User currentUser=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      currentUser=alias.getDefaultUser();
      OpenPasswordConnectDialogAction openDlgAction=new OpenPasswordConnectDialogAction(alias,alias.getDefaultUser(),false);
      openDlgAction.run();
      break;
    }
  }
  if (currentUser == null) {
    return new TypedReturnCode<TableNode>(DefaultMessagesImpl.getString(""String_Node_Str"",tableName),false);
  }
  DatabaseNode root=currentUser.getMetaDataSession().getRoot();
  root.load();
  List<INode> catalogs=root.getCatalogs();
  List<INode> schemas=root.getSchemas();
  TdCatalog doSwitch=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPackageElement);
  INode catalogOrSchemaNode=null;
  if (doSwitch != null) {
    for (    INode catalogNode : catalogs) {
      if (parentPackageElement.getName().equalsIgnoreCase(catalogNode.getName())) {
        catalogOrSchemaNode=catalogNode;
        break;
      }
    }
  }
 else {
    for (    INode schemaNode : schemas) {
      if (parentPackageElement.getName().equalsIgnoreCase(schemaNode.getName())) {
        catalogOrSchemaNode=schemaNode;
      }
    }
  }
  INode[] childNodes=catalogOrSchemaNode.getChildNodes();
  TableFolderNode tableFolderNode=null;
  for (  INode node : childNodes) {
    if (""String_Node_Str"".equals(node.getQualifiedName())) {
      tableFolderNode=(TableFolderNode)node;
      break;
    }
  }
  INode[] tableNodes=tableFolderNode.getChildNodes();
  for (  INode node : tableNodes) {
    if (tableName.equalsIgnoreCase(node.getName())) {
      TypedReturnCode<TableNode> typedReturnCode=new TypedReturnCode<TableNode>(null,true);
      typedReturnCode.setObject((TableNode)node);
      DatabaseStructureView dsView=SQLExplorerPlugin.getDefault().getDatabaseStructureView();
      dsView.setSessionSelectionNode(currentUser.getMetaDataSession(),new StructuredSelection(node));
      DetailTabManager.setActiveTabName(activeTabName);
      return typedReturnCode;
    }
  }
  return new TypedReturnCode<TableNode>(DefaultMessagesImpl.getString(""String_Node_Str"",tableName),false);
}",0.9878495660559306
139828,"@Override public void run(){
  IWorkbenchWindow aww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage ap=aww.getActivePage();
  CreateSqlFileWizard fileWizard=(CreateSqlFileWizard)WizardFactory.createSqlFileWizard(folder);
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard);
  fileWizard.setWindowTitle(getText());
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
    ChangePerspectiveAction action=new ChangePerspectiveAction(SE_ID);
    action.run();
    try {
      ap.openEditor(new SQLEditorInput(fileWizard.getSqlFile()),""String_Node_Str"");
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
}","@Override public void run(){
  IWorkbenchWindow aww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage ap=aww.getActivePage();
  CreateSqlFileWizard fileWizard=(CreateSqlFileWizard)WizardFactory.createSqlFileWizard(folder);
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard);
  fileWizard.setWindowTitle(getText());
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
    try {
      ap.openEditor(new SQLEditorInput(fileWizard.getSqlFile()),""String_Node_Str"");
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
}",0.9415627051871308
139829,"@Override public void run(){
  IWorkbenchWindow aww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage ap=aww.getActivePage();
  ChangePerspectiveAction action=new ChangePerspectiveAction(SE_ID);
  action.run();
  IPath location=ResourcesPlugin.getWorkspace().getRoot().getLocation();
  for (  IFile file : folder) {
    String portableString=location.append(file.getFullPath()).toPortableString();
    try {
      editorInput=new SQLEditorInput(new File(portableString));
      ap.openEditor(editorInput,""String_Node_Str"");
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
}","@Override public void run(){
  IWorkbenchWindow aww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage ap=aww.getActivePage();
  IPath location=ResourcesPlugin.getWorkspace().getRoot().getLocation();
  for (  IFile file : folder) {
    String portableString=location.append(file.getFullPath()).toPortableString();
    try {
      editorInput=new SQLEditorInput(new File(portableString));
      ap.openEditor(editorInput,""String_Node_Str"");
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
}",0.9262792714657416
139830,"public void deleteResource(){
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  final IResource[] resources=selectedFiles;
  if (!checkDeleteContent(resources)) {
    return;
  }
  List<Map<String,String>> driverList=driverPreferCustInfo();
  for (  Map<String,String> driverInfoMap : driverList) {
    String connectionURI=driverInfoMap.get(""String_Node_Str"");
    for (    ModelElement tdDataProvider : modelElementList) {
      if (tdDataProvider.eResource().getURI().toString().trim().equals(connectionURI.trim())) {
        String customDriverId=driverInfoMap.get(""String_Node_Str"");
        if (driverManager.getDriver(customDriverId) != null) {
          driverManager.removeDriver(driverManager.getDriver(customDriverId));
        }
      }
    }
  }
  delRelatedResource(isDeleteContent,resources);
  EObjectHelper.removeDependencys(resources);
  for (  IResource res : resources) {
    try {
      res.delete(true,new NullProgressMonitor());
      res.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
  }
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  findView.getCommonViewer().refresh();
}","public void deleteResource(){
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  final IResource[] resources=selectedFiles;
  if (!checkDeleteContent(resources)) {
    return;
  }
  List<Map<String,String>> driverList=driverPreferCustInfo();
  for (  Map<String,String> driverInfoMap : driverList) {
    String connectionURI=driverInfoMap.get(""String_Node_Str"");
    for (    ModelElement tdDataProvider : modelElementList) {
      if (tdDataProvider.eResource().getURI().toString().trim().equals(connectionURI.trim())) {
        String customDriverId=driverInfoMap.get(""String_Node_Str"");
        if (driverManager.getDriver(customDriverId) != null) {
          driverManager.removeDriver(driverManager.getDriver(customDriverId));
        }
      }
    }
  }
  delRelatedResource(isDeleteContent,resources);
  EObjectHelper.removeDependencys(resources);
  for (  IResource res : resources) {
    try {
      res.delete(true,new NullProgressMonitor());
      res.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
  }
  CorePlugin.getDefault().refreshDQView();
}",0.9328388957560776
139831,"private void delRelatedResource(boolean isDeleteContent,IResource[] selectedResources){
  if (!isDeleteContent) {
    return;
  }
  for (  IResource selectedResource : selectedResources) {
    if (selectedResource.getType() != IResource.FILE) {
      continue;
    }
    String folderName=null;
    if (PluginConstant.HTML_SUFFIX.equalsIgnoreCase(selectedResource.getFileExtension())) {
      folderName=selectedResource.getFullPath().lastSegment() + ""String_Node_Str"";
    }
 else     if (FactoriesUtil.REP.equalsIgnoreCase(selectedResource.getFileExtension())) {
      folderName=""String_Node_Str"" + selectedResource.getFullPath().removeFileExtension().lastSegment();
    }
 else     if (FactoriesUtil.PROV.equalsIgnoreCase(selectedResource.getFileExtension())) {
      TypedReturnCode<TdDataProvider> findProvider=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedResource);
      TdSoftwareSystem softwareSystem=DataProviderHelper.getSoftwareSystem(findProvider.getObject());
      EMFSharedResources.getInstance().getSoftwareDeploymentResource().getContents().remove(softwareSystem);
      EMFSharedResources.getInstance().saveSoftwareDeploymentResource();
      continue;
    }
 else {
      continue;
    }
    IFolder folder=((IFolder)selectedResource.getParent()).getFolder(folderName);
    if (folder.exists()) {
      try {
        folder.delete(true,null);
      }
 catch (      CoreException e) {
        Log.warn(""String_Node_Str"" + folder.getLocationURI().toString(),e);
      }
    }
  }
}","private void delRelatedResource(boolean isDeleteContent,IResource[] selectedResources){
  if (!isDeleteContent) {
    return;
  }
  for (  IResource selectedResource : selectedResources) {
    if (selectedResource.getType() != IResource.FILE) {
      continue;
    }
    String folderName=null;
    if (PluginConstant.HTML_SUFFIX.equalsIgnoreCase(selectedResource.getFileExtension())) {
      folderName=selectedResource.getFullPath().lastSegment() + ""String_Node_Str"";
    }
 else     if (FactoriesUtil.REP.equalsIgnoreCase(selectedResource.getFileExtension())) {
      folderName=""String_Node_Str"" + selectedResource.getFullPath().removeFileExtension().lastSegment();
    }
 else     if (FactoriesUtil.PROV.equalsIgnoreCase(selectedResource.getFileExtension())) {
      TypedReturnCode<TdDataProvider> findProvider=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedResource);
      TdSoftwareSystem softwareSystem=DataProviderHelper.getSoftwareSystem(findProvider.getObject());
      EMFSharedResources.getInstance().getSoftwareDeploymentResource().getContents().remove(softwareSystem);
      EMFSharedResources.getInstance().saveSoftwareDeploymentResource();
      CorePlugin.getDefault().removeConnetionAliasFromSQLPlugin(findProvider.getObject());
      continue;
    }
 else {
      continue;
    }
    IFolder folder=((IFolder)selectedResource.getParent()).getFolder(folderName);
    if (folder.exists()) {
      try {
        folder.delete(true,null);
      }
 catch (      CoreException e) {
        Log.warn(""String_Node_Str"" + folder.getLocationURI().toString(),e);
      }
    }
  }
}",0.970917225950783
139832,"public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      IPath path=new Path(ResourceManager.LIBRARIES_FOLDER_NAME);
      path=path.append(DQStructureManager.SOURCE_FILES);
      IPath fullPath=((IFolder)obj).getFullPath();
      if (path.isPrefixOf(fullPath)) {
        menu.add(new AddSqlFileAction((IFolder)obj));
        if (fullPath.segmentCount() > path.segmentCount()) {
          menu.add(new RenameFolderAction((IFolder)obj));
        }
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(""String_Node_Str"")) {
        menu.add(new RenameSqlFileAction((IFile)obj));
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new OpenSqlFileAction(selectedFiles));
    menu.add(new DeleteSqlFileAction(selectedFiles));
  }
}","public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      IPath fullPath=((IFolder)obj).getFullPath();
      IPath sourceFileFolderPath=ResourceManager.getLibrariesFolder().getFolder(DQStructureManager.SOURCE_FILES).getFullPath();
      if (fullPath.equals(sourceFileFolderPath)) {
        menu.add(new AddSqlFileAction((IFolder)obj));
        if (fullPath.segmentCount() > sourceFileFolderPath.segmentCount()) {
          menu.add(new RenameFolderAction((IFolder)obj));
        }
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(""String_Node_Str"")) {
        menu.add(new RenameSqlFileAction((IFile)obj));
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new OpenSqlFileAction(selectedFiles));
    menu.add(new DeleteSqlFileAction(selectedFiles));
  }
}",0.8146570089475926
139833,"public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final Table table=tbViewer.getTable();
  tbViewer.getTable().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (e.button == 3 && ExecutionLanguage.JAVA != currentEngine) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        if (dataEntity == null) {
          return;
        }
        final Indicator indicator=dataEntity.getIndicator();
        if (indicator != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addListener(SWT.Selection,new Listener(){
              public void handleEvent(              Event event){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=indicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
            if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                public void widgetSelected(                SelectionEvent e){
                  createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
          createPatternFlag++;
          menu.setVisible(true);
        }
      }
    }
  }
);
  addTooltipOnTableItem(table);
}","public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final Table table=tbViewer.getTable();
  tbViewer.getTable().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (e.button == 3 && ExecutionLanguage.JAVA != currentEngine) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        if (dataEntity == null) {
          return;
        }
        final Indicator indicator=dataEntity.getIndicator();
        if (indicator != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addListener(SWT.Selection,new Listener(){
              public void handleEvent(              Event event){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=indicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
            if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                public void widgetSelected(                SelectionEvent e){
                  createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
          createPatternFlag++;
          menu.setVisible(true);
        }
      }
    }
  }
);
  addTooltipOnTableItem(table);
}",0.9828727131179448
139834,"@Override public void mouseDown(MouseEvent e){
  ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (e.button == 3 && ExecutionLanguage.JAVA != currentEngine) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    if (dataEntity == null) {
      return;
    }
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=itemEntity.getQuery();
            String editorName=indicator.getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
        if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (table.getMenu() != null) {
    table.getMenu().setVisible(false);
  }
  ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (e.button == 3 && ExecutionLanguage.JAVA != currentEngine) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    if (dataEntity == null) {
      return;
    }
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=itemEntity.getQuery();
            String editorName=indicator.getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
        if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}",0.9821008007536504
139835,"/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias != null) {
    try {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
      SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
      editorPart.setText(query);
      return editorPart;
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    List<TdDataProvider> allDataProviders=PrvResourceFileHelper.getInstance().getAllDataProviders(ResourceManager.getMetadataFolder());
    for (    TdDataProvider dataProvider : allDataProviders) {
      if (dataProvider == tdDataProvider) {
        addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,editorName);
      }
    }
  }
 else {
    try {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
      SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
      editorPart.setText(query);
      return editorPart;
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}",0.8282828282828283
139836,"@Override public boolean storeSqlResults(List<Object[]> objects){
  if (!checkResults(objects,2)) {
    return false;
  }
  Object c=objects.get(0)[0];
  this.setMode(c);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + c);
  }
  return true;
}","@Override public boolean storeSqlResults(List<Object[]> objects){
  if (objects != null && objects.isEmpty()) {
    this.setMode(""String_Node_Str"");
    return true;
  }
  if (!checkResults(objects,2)) {
    return false;
  }
  Object c=objects.get(0)[0];
  this.setMode(c);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + c);
  }
  return true;
}",0.8327974276527331
139837,"/** 
 * qzhang FolderSelectionDialog constructor comment.
 * @param parent
 * @param labelProvider
 * @param contentProvider
 */
public FolderSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  setComparator(new ResourceComparator(ResourceComparator.NAME));
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      if (selection.length == 1) {
        if (selection[0] instanceof IFolder) {
          IFolder folder=(IFolder)selection[0];
          IPath projectRelativePath=folder.getProjectRelativePath();
          if (""String_Node_Str"".equals(folder.getProject().getName())) {
            IPath path=new Path(""String_Node_Str"");
            if (path.isPrefixOf(projectRelativePath)) {
              return Status.OK_STATUS;
            }
          }
        }
      }
      return new Status(IStatus.ERROR,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str"");
    }
  }
);
}","/** 
 * qzhang FolderSelectionDialog constructor comment.
 * @param parent
 * @param labelProvider
 * @param contentProvider
 */
public FolderSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  setComparator(new ResourceComparator(ResourceComparator.NAME));
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      if (selection.length == 1) {
        if (selection[0] instanceof IFolder) {
          IFolder folder=(IFolder)selection[0];
          IPath projectRelativePath=folder.getProjectRelativePath();
          if (""String_Node_Str"".equals(folder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath())) {
            return Status.OK_STATUS;
          }
        }
      }
      return new Status(IStatus.ERROR,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str"");
    }
  }
);
}",0.8403361344537815
139838,"public IStatus validate(Object[] selection){
  if (selection.length == 1) {
    if (selection[0] instanceof IFolder) {
      IFolder folder=(IFolder)selection[0];
      IPath projectRelativePath=folder.getProjectRelativePath();
      if (""String_Node_Str"".equals(folder.getProject().getName())) {
        IPath path=new Path(""String_Node_Str"");
        if (path.isPrefixOf(projectRelativePath)) {
          return Status.OK_STATUS;
        }
      }
    }
  }
  return new Status(IStatus.ERROR,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str"");
}","public IStatus validate(Object[] selection){
  if (selection.length == 1) {
    if (selection[0] instanceof IFolder) {
      IFolder folder=(IFolder)selection[0];
      IPath projectRelativePath=folder.getProjectRelativePath();
      if (""String_Node_Str"".equals(folder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath())) {
        return Status.OK_STATUS;
      }
    }
  }
  return new Status(IStatus.ERROR,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str"");
}",0.8368932038834952
139839,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (IProject.class.isInstance(element)) {
    return ""String_Node_Str"".equals(((IProject)element).getName());
  }
 else   if (IFolder.class.isInstance(element)) {
    IPath path=new Path(""String_Node_Str"");
    IPath projectRelativePath=((IFolder)element).getProjectRelativePath();
    return path.isPrefixOf(projectRelativePath);
  }
  return false;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
      return true;
    }
 else {
      return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath());
    }
  }
  return false;
}",0.467065868263473
139840,"@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  final IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(root);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (IProject.class.isInstance(element)) {
        return ""String_Node_Str"".equals(((IProject)element).getName());
      }
 else       if (IFolder.class.isInstance(element)) {
        IPath path=new Path(""String_Node_Str"");
        IPath projectRelativePath=((IFolder)element).getProjectRelativePath();
        return path.isPrefixOf(projectRelativePath);
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(getTitle());
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    if (file.exists() && SQLExplorerPlugin.isEditorSerialName(filePath.lastSegment())) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        IPath append=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(append);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      createIFile(progressMonitor,file,getViewer().getDocument().get());
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}","@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  final IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=SQLExplorerPlugin.getDefault().getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath());
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(getTitle());
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    if (file.exists() && SQLExplorerPlugin.isEditorSerialName(filePath.lastSegment())) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        IPath append=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(append);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      createIFile(progressMonitor,file,getViewer().getDocument().get());
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}",0.8857868020304569
139841,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  getPreferenceStore().setDefault(PluginConstant.CHEAT_SHEET_VIEW,true);
  try {
    for (    BookMarkEnum bookMark : BookMarkEnum.VALUES) {
      BaseHelpSystem.getBookmarkManager().addBookmark(bookMark.getHref(),bookMark.getLabel());
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  getPreferenceStore().setDefault(PluginConstant.CHEAT_SHEET_VIEW,true);
  try {
    for (    BookMarkEnum bookMark : BookMarkEnum.VALUES) {
      BaseHelpSystem.getBookmarkManager().addBookmark(bookMark.getHref(),bookMark.getLabel());
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  org.talend.dataquality.PluginConstant.setRootProjectName(ResourceManager.getRootProjectName());
  SQLExplorerPlugin.getDefault().setRootProject(ResourceManager.getRootProject());
}",0.8135942327497425
139842,"public static IProject getRootProject(){
  IProject rootProject=null;
  try {
    IProjectAdapterService projectAdapter=(IProjectAdapterService)GlobalServiceRegister.getDefault().getService(IProjectAdapterService.class);
    if (projectAdapter != null) {
      rootProject=projectAdapter.getRootProject();
    }
  }
 catch (  RuntimeException e) {
    Log.warn(e,e);
    rootProject=ResourcesPlugin.getWorkspace().getRoot().getProject(DEFAULT_PROJECT_NAME);
  }
  PluginConstant.setRootProjectName(rootProject.getName());
  return rootProject;
}","public static IProject getRootProject(){
  IProject rootProject=null;
  try {
    IProjectAdapterService projectAdapter=(IProjectAdapterService)GlobalServiceRegister.getDefault().getService(IProjectAdapterService.class);
    if (projectAdapter != null) {
      rootProject=projectAdapter.getRootProject();
    }
  }
 catch (  RuntimeException e) {
    rootProject=ResourcesPlugin.getWorkspace().getRoot().getProject(DEFAULT_PROJECT_NAME);
  }
  return rootProject;
}",0.8862512363996043
139843,"private String getAlias(String colName,DateGrain dateAggregationType){
  if (dbms().supportAliasesInGroupBy()) {
    return ""String_Node_Str"" + unquote(colName) + dateAggregationType.getName()+ ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","private String getAlias(String colName,DateGrain dateAggregationType){
  if (dbms().supportAliasesInGroupBy()) {
    return ""String_Node_Str"" + dateAggregationType.getName() + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9601593625498008
139844,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  getPreferenceStore().setDefault(PluginConstant.CHEAT_SHEET_VIEW,true);
  try {
    for (    BookMarkEnum bookMark : BookMarkEnum.VALUES) {
      BaseHelpSystem.getBookmarkManager().addBookmark(bookMark.getHref(),bookMark.getLabel());
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  org.talend.dataquality.PluginConstant.setRootProjectName(ResourceManager.getRootProjectName());
  SQLExplorerPlugin.getDefault().setRootProject(ResourceManager.getRootProject());
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  getPreferenceStore().setDefault(PluginConstant.CHEAT_SHEET_VIEW,true);
  try {
    for (    BookMarkEnum bookMark : BookMarkEnum.VALUES) {
      BaseHelpSystem.getBookmarkManager().addBookmark(bookMark.getHref(),bookMark.getLabel());
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  IProject rootProject=ResourceManager.getRootProject();
  org.talend.dataquality.PluginConstant.setRootProjectName(rootProject.getName());
  SQLExplorerPlugin.getDefault().setRootProject(rootProject);
}",0.8780903665814151
139845,"/** 
 * DOC xqliu Comment method ""getColumns"". ADD xqliu 2009-04-27 bug 6507
 * @param columnSet
 * @param filter
 * @return
 */
public static List<TdColumn> getColumns(ColumnSet columnSet,boolean filter){
  if (filter) {
    return ColumnHelper.getColumnsWithFilter(columnSet,filter);
  }
 else {
    return getColumns(columnSet);
  }
}","public static List<TdColumn> getColumns(ColumnSet columnSet){
  return ColumnHelper.getColumns(columnSet.getFeature());
}",0.4847161572052402
139846,"/** 
 * Method ""getColumnSets"" returns tables or views. MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern table name patterns separated by a comma; must match the table name as it is stored in thedatabase
 * @return the tables with for the given catalog, schemas, table name pattern.
 * @throws SQLException
 */
public List<T> getColumnSets(String catalogName,String schemaPattern,String tablePattern) throws SQLException {
  if (debug)   incrementCount(catalogName,schemaPattern);
  List<T> tables=new ArrayList<T>();
  if (tablePattern == null) {
    addMatchingColumnSets(catalogName,schemaPattern,tablePattern,tables);
  }
 else {
    String[] patterns=cleanPatterns(tablePattern.split(""String_Node_Str""));
    for (    String pattern : patterns) {
      addMatchingColumnSets(catalogName,schemaPattern,pattern,tables);
    }
  }
  return tables;
}","/** 
 * Method ""getColumnSets"" returns tables or views. MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern table name patterns separated by a comma; must match the table name as it is stored in thedatabase
 * @return the tables with for the given catalog, schemas, table name pattern.
 * @throws SQLException
 */
public List<T> getColumnSets(String catalogName,String schemaPattern,String tablePattern) throws SQLException {
  List<T> tables=new ArrayList<T>();
  ResultSet tablesSet=getConnectionMetadata(connection).getTables(catalogName,schemaPattern,tablePattern,this.tableType);
  while (tablesSet.next()) {
    T table=createTable(catalogName,schemaPattern,tablesSet);
    tables.add(table);
  }
  tablesSet.close();
  return tables;
}",0.7506132461161079
139847,"/** 
 * Method ""getColumns"". MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  if (debug)   incrementCount(catalogName,schemaPattern,tablePattern);
  if (columnPattern == null) {
    addMatchingColumns(catalogName,schemaPattern,tablePattern,columnPattern,tableColumns);
  }
 else {
    String[] patterns=cleanPatterns(columnPattern.split(""String_Node_Str""));
    for (    String pattern : patterns) {
      addMatchingColumns(catalogName,schemaPattern,tablePattern,pattern,tableColumns);
    }
  }
  return tableColumns;
}","/** 
 * Method ""getColumns"".
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  while (columns.next()) {
    Object defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
    String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
    Expression defExpression=BooleanExpressionHelper.createExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
    String colName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(colName);
    column.setLength(columns.getInt(GetColumn.COLUMN_SIZE.name()));
    column.setIsNullable(NullableType.get(columns.getInt(GetColumn.NULLABLE.name())));
    column.setJavaType(columns.getInt(GetColumn.DATA_TYPE.name()));
    String colComment=getComment(colName,columns);
    TaggedValueHelper.setComment(colComment,column);
    TdSqlDataType sqlDataType=DatabaseContentRetriever.createDataType(columns);
    column.setSqlDataType(sqlDataType);
    column.setInitialValue(defExpression);
    tableColumns.add(column);
  }
  columns.close();
  return tableColumns;
}",0.5643678160919541
139848,"/** 
 * DOC xqliu Comment method ""initPreferences"".
 * @param cwm
 */
private void initPreferences(CWMPlugin cwm){
  Preferences prefs=cwm.getPluginPreferences();
  prefs.setDefault(PluginConstant.CONNECTION_TIMEOUT,false);
}","/** 
 * DOC xqliu Comment method ""initPreferences"".
 * @param cwm
 */
private void initPreferences(CWMPlugin cwm){
  Preferences prefs=cwm.getPluginPreferences();
  prefs.setDefault(PluginConstant.CONNECTION_TIMEOUT,false);
  prefs.setDefault(PluginConstant.FILTER_TABLE_VIEW_COLUMN,true);
}",0.872093023255814
139849,"@Override public void loadChildren(){
  ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(this.getParent());
  if (columnSet != null) {
    String columnFilter=TaggedValueHelper.getValue(TaggedValueHelper.COLUMN_FILTER,columnSet.getTaggedValue());
    List<TdColumn> columnList=filterColumns(ColumnSetHelper.getColumns(columnSet),columnFilter);
    if (columnList.size() > 0) {
      if (columnList.size() > TaggedValueHelper.COLUMN_MAX) {
        this.setChildren(null);
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",TaggedValueHelper.COLUMN_MAX));
      }
 else {
        this.setChildren(columnList.toArray());
      }
      return;
    }
    Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
    if (parentCatalogOrSchema == null) {
      return;
    }
    TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
    if (provider == null) {
      return;
    }
    try {
      columnList=DqRepositoryViewService.getColumns(provider,columnSet,null,true);
      if (columnList.size() > TaggedValueHelper.COLUMN_MAX) {
        this.setChildren(null);
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",TaggedValueHelper.COLUMN_MAX));
        return;
      }
    }
 catch (    TalendException e) {
      MessageBoxExceptionHandler.process(e);
    }
    this.setChildren(columnList.toArray());
    NeedSaveDataProviderHelper.register(provider.eResource().getURI().path(),provider);
  }
  super.loadChildren();
}","@Override public void loadChildren(){
  ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(this.getParent());
  if (columnSet != null) {
    List<TdColumn> columnList=null;
    if (FILTER_FLAG) {
      String columnFilter=TaggedValueHelper.getValue(TaggedValueHelper.COLUMN_FILTER,columnSet.getTaggedValue());
      columnList=filterColumns(ColumnSetHelper.getColumns(columnSet),columnFilter);
    }
 else {
      columnList=ColumnSetHelper.getColumns(columnSet);
    }
    if (columnList.size() > 0) {
      if (columnList.size() > TaggedValueHelper.COLUMN_MAX) {
        this.setChildren(null);
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",TaggedValueHelper.COLUMN_MAX));
      }
 else {
        this.setChildren(columnList.toArray());
      }
      return;
    }
 else {
      if (FILTER_FLAG) {
        this.setChildren(null);
        if (ColumnSetHelper.getColumns(columnSet).size() > 0) {
          return;
        }
      }
    }
    Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
    if (parentCatalogOrSchema == null) {
      return;
    }
    TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
    if (provider == null) {
      return;
    }
    try {
      columnList=DqRepositoryViewService.getColumns(provider,columnSet,null,true);
      if (columnList.size() > TaggedValueHelper.COLUMN_MAX) {
        this.setChildren(null);
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",TaggedValueHelper.COLUMN_MAX));
        return;
      }
    }
 catch (    TalendException e) {
      MessageBoxExceptionHandler.process(e);
    }
    this.setChildren(columnList.toArray());
    NeedSaveDataProviderHelper.register(provider.eResource().getURI().path(),provider);
  }
  super.loadChildren();
}",0.904409588635691
139850,"@Override protected List<TdTable> getColumnSets(TdCatalog catalog,TdSchema schema){
  if (catalog != null) {
    String tableFilter=TaggedValueHelper.getValue(TaggedValueHelper.TABLE_FILTER,catalog.getTaggedValue());
    return filterColumnSets(CatalogHelper.getTables(catalog),tableFilter);
  }
  if (schema != null) {
    String tableFilter=TaggedValueHelper.getValue(TaggedValueHelper.TABLE_FILTER,schema.getTaggedValue());
    return filterColumnSets(SchemaHelper.getTables(schema),tableFilter);
  }
  return Collections.emptyList();
}","@Override protected List<TdTable> getColumnSets(TdCatalog catalog,TdSchema schema){
  if (catalog != null) {
    return CatalogHelper.getTables(catalog);
  }
  if (schema != null) {
    return SchemaHelper.getTables(schema);
  }
  return Collections.emptyList();
}",0.4956413449564134
139851,"@Override protected List<TdView> getColumnSets(TdCatalog catalog,TdSchema schema){
  if (catalog != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,catalog.getTaggedValue());
    return filterColumnSets(CatalogHelper.getViews(catalog),viewFilter);
  }
  if (schema != null) {
    String viewFilter=TaggedValueHelper.getValue(TaggedValueHelper.VIEW_FILTER,schema.getTaggedValue());
    return filterColumnSets(CatalogHelper.getViews(catalog),viewFilter);
  }
  return Collections.emptyList();
}","@Override protected List<TdView> getColumnSets(TdCatalog catalog,TdSchema schema){
  if (catalog != null) {
    return CatalogHelper.getViews(catalog);
  }
  if (schema != null) {
    return SchemaHelper.getViews(schema);
  }
  return Collections.emptyList();
}",0.4943253467843632
139852,"public void run(IIntroSite site,Properties params){
  String property=params.getProperty(""String_Node_Str"");
  OpenCheatSheetAction action=new OpenCheatSheetAction(property);
  action.run();
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart findView=activePage.findView(IIntroConstants.INTRO_VIEW_ID);
  if (findView != null) {
    activePage.hideView(findView);
  }
}","public void run(IIntroSite site,Properties params){
  IPerspectiveDescriptor persDescription1=PlatformUI.getWorkbench().getPerspectiveRegistry().findPerspectiveWithId(PERSPECTIVE_ID);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().setPerspective(persDescription1);
  String property=params.getProperty(""String_Node_Str"");
  OpenCheatSheetAction action=new OpenCheatSheetAction(property);
  action.run();
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart findView=activePage.findView(IIntroConstants.INTRO_VIEW_ID);
  if (findView != null) {
    activePage.hideView(findView);
  }
}",0.7831655992680695
139853,"public AbstractMigrationTask(String id,String name){
  this.id=id;
  this.name=name;
}","public AbstractMigrationTask(String id,String name,String version){
  this.id=id;
  this.name=name;
  this.version=version;
}",0.8151658767772512
139854,"public static List<IWorkspaceMigrationTask> findValidMigrationTasks(){
  List<IWorkspaceMigrationTask> validTasks=new ArrayList<IWorkspaceMigrationTask>();
  IConfigurationElement[] elems=Platform.getExtensionRegistry().getConfigurationElementsFor(EXTENSION_ID);
  ProductVersion workspaceVersion=WorkspaceVersionHelper.getVesion();
  ProductVersion currentVersion=CorePlugin.getDefault().getProductVersion();
  for (  IConfigurationElement elem : elems) {
    String attribute=elem.getAttribute(ATTR_VERSION);
    ProductVersion taskVersion=ProductVersion.fromString(attribute);
    if (taskVersion.compareTo(workspaceVersion) > 0 && taskVersion.compareTo(currentVersion) <= 0) {
      try {
        validTasks.add((IWorkspaceMigrationTask)elem.createExecutableExtension(ATTR_CLASS));
      }
 catch (      CoreException e) {
        log.error(e,e);
      }
    }
  }
  sortTasks(validTasks);
  return validTasks;
}","/** 
 * DOC bZhou Comment method ""findValidMigrationTasks"".
 * @return
 */
public static List<IWorkspaceMigrationTask> findValidMigrationTasks(){
  List<IWorkspaceMigrationTask> validTasks=new ArrayList<IWorkspaceMigrationTask>();
  ProductVersion workspaceVersion=WorkspaceVersionHelper.getVesion();
  ProductVersion currentVersion=CorePlugin.getDefault().getProductVersion();
  List<IWorkspaceMigrationTask> allTasks=findAllMigrationTasks();
  for (  IWorkspaceMigrationTask task : allTasks) {
    ProductVersion taskVersion=ProductVersion.fromString(task.getVersion());
    if (taskVersion.compareTo(workspaceVersion) > 0 && taskVersion.compareTo(currentVersion) <= 0) {
      validTasks.add(task);
    }
  }
  return validTasks;
}",0.3951515151515151
139855,"public static List<IWorkspaceMigrationTask> findAllMigrationTasks(){
  List<IWorkspaceMigrationTask> allTasks=new ArrayList<IWorkspaceMigrationTask>();
  IConfigurationElement[] elems=Platform.getExtensionRegistry().getConfigurationElementsFor(EXTENSION_ID);
  for (  IConfigurationElement elem : elems) {
    try {
      allTasks.add((IWorkspaceMigrationTask)elem.createExecutableExtension(ATTR_CLASS));
    }
 catch (    CoreException e) {
      log.error(e,e);
    }
  }
  sortTasks(allTasks);
  return allTasks;
}","/** 
 * DOC bZhou Comment method ""findAllMigrationTasks"".
 * @return
 */
public static List<IWorkspaceMigrationTask> findAllMigrationTasks(){
  List<IWorkspaceMigrationTask> allTasks=new ArrayList<IWorkspaceMigrationTask>();
  IConfigurationElement[] elems=Platform.getExtensionRegistry().getConfigurationElementsFor(EXTENSION_ID);
  for (  IConfigurationElement elem : elems) {
    try {
      String taskName=elem.getAttribute(ATTR_NAME);
      String taskID=elem.getAttribute(ATTR_PID);
      String version=elem.getAttribute(ATTR_VERSION);
      IWorkspaceMigrationTask migrationTask=(IWorkspaceMigrationTask)elem.createExecutableExtension(ATTR_CLASS);
      migrationTask.setName(taskName);
      migrationTask.setId(taskID);
      migrationTask.setVersion(version);
      allTasks.add(migrationTask);
    }
 catch (    CoreException e) {
      e.printStackTrace();
      log.error(e,e);
    }
  }
  sortTasks(allTasks);
  return allTasks;
}",0.6889952153110048
139856,"private static void sortTasks(List<IWorkspaceMigrationTask> tasks){
  Collections.sort(tasks,new Comparator<IWorkspaceMigrationTask>(){
    public int compare(    IWorkspaceMigrationTask o1,    IWorkspaceMigrationTask o2){
      if (o1.getOrder() == null || o2.getOrder() == null) {
        return 0;
      }
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""sortTasks"".
 * @param tasks
 */
private static void sortTasks(List<IWorkspaceMigrationTask> tasks){
  Collections.sort(tasks,new Comparator<IWorkspaceMigrationTask>(){
    public int compare(    IWorkspaceMigrationTask o1,    IWorkspaceMigrationTask o2){
      if (o1.getOrder() == null || o2.getOrder() == null) {
        return 0;
      }
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
}",0.9193154034229828
139857,"private void synchronize(){
  final ResourceSet resourceSet=new ResourceSetImpl();
  try {
    final EObject alreadySavedModel=ModelUtils.load(selectedFileObject.toString(),resourceSet);
    TypedReturnCode<TdDataProvider> rc=null;
    EList<ProviderConnection> connections=((TdDataProvider)alreadySavedModel).getResourceConnection();
    ListIterator<ProviderConnection> li=connections.listIterator();
    if (li.hasNext()) {
      TdProviderConnection pc=(TdProviderConnection)li.next();
      String dbUrl=pc.getConnectionString();
      String driverClassName=pc.getDriverClassName();
      EList<EObject> pcObjects=pc.eContents();
      ListIterator<EObject> liEObject=pcObjects.listIterator();
      Properties parameters=new Properties();
      while (liEObject.hasNext()) {
        EObject eo=liEObject.next();
        if (eo instanceof TaggedValue) {
          String tag=((TaggedValue)eo).getTag();
          System.out.print(tag);
          String value=((TaggedValue)eo).getValue();
          System.out.println(""String_Node_Str"" + value);
          parameters.put(tag,value);
        }
      }
      System.out.println(dbUrl);
      System.out.println(driverClassName);
      DBConnectionParameter dbcp=new DBConnectionParameter();
      dbcp.setName(pc.getName());
      dbcp.setAuthor(TaggedValueHelper.getAuthor(pc));
      dbcp.setDescription(TaggedValueHelper.getDescription(pc));
      dbcp.setPurpose(TaggedValueHelper.getPurpose(pc));
      dbcp.setStatus(TaggedValueHelper.getValue(""String_Node_Str"",pc));
      dbcp.setDriverClassName(driverClassName);
      dbcp.setJdbcUrl(dbUrl);
      dbcp.setParameters(parameters);
      rc=ConnectionService.createConnection(dbcp);
    }
    System.out.println(alreadySavedModel.toString());
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getProject(org.talend.dataquality.PluginConstant.getRootProjectName()).getFolder(DQStructureManager.getMetaData()).getFolder(DQStructureManager.DB_CONNECTIONS);
    FolderProvider fp=new FolderProvider();
    fp.setFolderResource(folder);
    IFile file2=loadDataProviderAndStructureInMemory(rc.getObject(),fp);
    final EObject model2=ModelUtils.load(file2.toString(),resourceSet);
    Map<String,Object> options=new HashMap<String,Object>();
    options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
    options.put(MatchOptions.OPTION_SEARCH_WINDOW,500);
    final MatchModel match=MatchService.doMatch(alreadySavedModel,model2,options);
    final DiffModel diff=DiffService.doDiff(match,false);
    EList<UnMatchElement> unMatchedElements=match.getUnMatchedElements();
    for (    Object object : unMatchedElements) {
      UnMatchElement unMatched=(UnMatchElement)object;
      ModelElement modelElt=(ModelElement)unMatched.getElement();
      System.out.println(""String_Node_Str"" + modelElt.getName());
    }
    System.out.println(""String_Node_Str"" + match.getLeftModel());
    EList<DiffElement> ownedElements=diff.getOwnedElements();
    try {
      System.out.println(ModelUtils.serialize(match));
      System.out.println(ModelUtils.serialize(diff));
    }
 catch (    IOException e) {
      log.error(e,e);
    }
    String outputFile=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + outputFile + ""String_Node_Str"");
    final ModelInputSnapshot snapshot=DiffFactory.eINSTANCE.createModelInputSnapshot();
    snapshot.setDate(Calendar.getInstance().getTime());
    snapshot.setMatch(match);
    snapshot.setDiff(diff);
    ModelUtils.save(snapshot,outputFile);
  }
 catch (  IOException e) {
    System.out.print(e.getMessage());
  }
catch (  InterruptedException e) {
    System.out.print(e.getMessage());
    log.error(e,e);
  }
}","private void synchronize(){
  final ResourceSet resourceSet=new ResourceSetImpl();
  try {
    final EObject alreadySavedModel=ModelUtils.load(selectedFileObject.toString(),resourceSet);
    TypedReturnCode<TdDataProvider> rc=null;
    EList<ProviderConnection> connections=((TdDataProvider)alreadySavedModel).getResourceConnection();
    ListIterator<ProviderConnection> li=connections.listIterator();
    if (li.hasNext()) {
      TdProviderConnection pc=(TdProviderConnection)li.next();
      String dbUrl=pc.getConnectionString();
      String driverClassName=pc.getDriverClassName();
      EList<EObject> pcObjects=pc.eContents();
      ListIterator<EObject> liEObject=pcObjects.listIterator();
      Properties parameters=new Properties();
      while (liEObject.hasNext()) {
        EObject eo=liEObject.next();
        if (eo instanceof TaggedValue) {
          String tag=((TaggedValue)eo).getTag();
          System.out.print(tag);
          String value=((TaggedValue)eo).getValue();
          System.out.println(""String_Node_Str"" + value);
          parameters.put(tag,value);
        }
      }
      System.out.println(dbUrl);
      System.out.println(driverClassName);
      DBConnectionParameter dbcp=new DBConnectionParameter();
      dbcp.setName(pc.getName());
      dbcp.setAuthor(TaggedValueHelper.getAuthor(pc));
      dbcp.setDescription(TaggedValueHelper.getDescription(pc));
      dbcp.setPurpose(TaggedValueHelper.getPurpose(pc));
      dbcp.setStatus(TaggedValueHelper.getValue(""String_Node_Str"",pc));
      dbcp.setDriverClassName(driverClassName);
      dbcp.setJdbcUrl(dbUrl);
      dbcp.setParameters(parameters);
      rc=ConnectionService.createConnection(dbcp);
    }
    System.out.println(alreadySavedModel.toString());
    IFolder folder=ResourceManager.getMetadataFolder().getFolder(DQStructureManager.DB_CONNECTIONS);
    FolderProvider fp=new FolderProvider();
    fp.setFolderResource(folder);
    IFile file2=loadDataProviderAndStructureInMemory(rc.getObject(),fp);
    final EObject model2=ModelUtils.load(file2.toString(),resourceSet);
    Map<String,Object> options=new HashMap<String,Object>();
    options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
    options.put(MatchOptions.OPTION_SEARCH_WINDOW,500);
    final MatchModel match=MatchService.doMatch(alreadySavedModel,model2,options);
    final DiffModel diff=DiffService.doDiff(match,false);
    EList<UnMatchElement> unMatchedElements=match.getUnMatchedElements();
    for (    Object object : unMatchedElements) {
      UnMatchElement unMatched=(UnMatchElement)object;
      ModelElement modelElt=(ModelElement)unMatched.getElement();
      System.out.println(""String_Node_Str"" + modelElt.getName());
    }
    System.out.println(""String_Node_Str"" + match.getLeftModel());
    EList<DiffElement> ownedElements=diff.getOwnedElements();
    try {
      System.out.println(ModelUtils.serialize(match));
      System.out.println(ModelUtils.serialize(diff));
    }
 catch (    IOException e) {
      log.error(e,e);
    }
    String outputFile=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + outputFile + ""String_Node_Str"");
    final ModelInputSnapshot snapshot=DiffFactory.eINSTANCE.createModelInputSnapshot();
    snapshot.setDate(Calendar.getInstance().getTime());
    snapshot.setMatch(match);
    snapshot.setDiff(diff);
    ModelUtils.save(snapshot,outputFile);
  }
 catch (  IOException e) {
    System.out.print(e.getMessage());
  }
catch (  InterruptedException e) {
    System.out.print(e.getMessage());
    log.error(e,e);
  }
}",0.9781345142540824
139858,"/** 
 * DOC mzhao get file by name at the same location.
 * @param fileName
 * @return IFile
 */
private static IFile getFile(String fileName){
  IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getProject(org.talend.dataquality.PluginConstant.getRootProjectName()).getFolder(DQStructureManager.getMetaData()).getFolder(DQStructureManager.DB_CONNECTIONS);
  IFile file=folder.getFile(fileName);
  return file;
}","/** 
 * DOC mzhao get file by name at the same location.
 * @param fileName
 * @return IFile
 */
private static IFile getFile(String fileName){
  IFolder folder=ResourceManager.getMetadataFolder().getFolder(DQStructureManager.DB_CONNECTIONS);
  IFile file=folder.getFile(fileName);
  return file;
}",0.8016759776536313
139859,"public void doMigrationTask(){
  List<IWorkspaceMigrationTask> tasks=MigrationTaskManager.findValidMigrationTasks();
  if (!tasks.isEmpty()) {
    for (    IWorkspaceMigrationTask task : tasks) {
      if (!(task instanceof TDCPFolderMergeTask)) {
        task.execute();
      }
    }
    WorkspaceVersionHelper.storeVersion();
  }
}","public void doMigrationTask(){
  List<IWorkspaceMigrationTask> tasks=MigrationTaskManager.findValidMigrationTasks();
  if (!tasks.isEmpty()) {
    for (    IWorkspaceMigrationTask task : tasks) {
      if (!(task instanceof TDCPFolderMergeTask)) {
        log.warn(""String_Node_Str"" + task.getClass().getName());
        task.execute();
      }
    }
    WorkspaceVersionHelper.storeVersion();
  }
}",0.9113233287858116
139860,"public void checkDQStructure(){
  if (!getDefault().isUsed(org.talend.dataquality.PluginConstant.getRootProjectName())) {
    DQStructureManager manager=DQStructureManager.getInstance();
    getDefault().setUsed(manager.createDQStructure(),org.talend.dataquality.PluginConstant.getRootProjectName());
  }
}","public void checkDQStructure(){
  if (isNeedCreateStructure()) {
    DQStructureManager manager=DQStructureManager.getInstance();
    if (!manager.createDQStructure()) {
      log.error(""String_Node_Str"");
    }
  }
}",0.1988527724665392
139861,"public static boolean isTDQLoaded(){
  return isPluginLoaded(TDQ_ID);
}","/** 
 * DOC bZhou Comment method ""isTDQLoaded"". use it to test if the platform start by TDQ.
 * @return
 */
public static boolean isTDQLoaded(){
  return isPluginLoaded(TDQ_ID);
}",0.568
139862,"/** 
 * DOC xqliu Comment method ""isLibraiesSubfolder"".
 * @param folder
 * @param subs
 * @return
 */
public static boolean isLibraiesSubfolder(IFolder folder,String... subs){
  for (  String sub : subs) {
    IProject defaultRootProjectFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(org.talend.dataquality.PluginConstant.getRootProjectName());
    IPath path=defaultRootProjectFolder.getFolder(DQStructureManager.getLibraries()).getFullPath();
    path=path.append(sub);
    IPath fullPath=folder.getFullPath();
    boolean prefixOf=path.isPrefixOf(fullPath);
    if (prefixOf) {
      return prefixOf;
    }
  }
  return false;
}","/** 
 * DOC xqliu Comment method ""isLibraiesSubfolder"".
 * @param folder
 * @param subs
 * @return
 */
public static boolean isLibraiesSubfolder(IFolder folder,String... subs){
  for (  String sub : subs) {
    IPath path=ResourceManager.getLibrariesFolder().getFullPath();
    path=path.append(sub);
    IPath fullPath=folder.getFullPath();
    boolean prefixOf=path.isPrefixOf(fullPath);
    if (prefixOf) {
      return prefixOf;
    }
  }
  return false;
}",0.7807971014492754
139863,"/** 
 * Method ""storeIndicator"" stores the mapping between the analyzed element name and its indicators.
 * @param elementToAnalyze the element to analyze (column, data provider...)
 * @param indicator the indicator for the given element
 * @return true if ok
 */
public boolean storeIndicator(T elementToAnalyze,Indicator indicator){
  boolean ok=true;
  final List<Indicator> indicatorLeaves=IndicatorHelper.getIndicatorLeaves(indicator);
  this.allIndicators.addAll(indicatorLeaves);
  for (  Indicator leaf : indicatorLeaves) {
    if (!MultiMapHelper.addUniqueObjectToListMap(elementToAnalyze,leaf,elementToIndicators)) {
      ok=false;
    }
  }
  return ok;
}","/** 
 * Method ""storeIndicator"" stores the mapping between the analyzed element name and its indicators. if needed, this method must be called on the Child indicators of the given indicator.
 * @param elementToAnalyze the element to analyze (column, data provider...)
 * @param indicator the indicator for the given element
 * @return true if ok
 */
public boolean storeIndicator(T elementToAnalyze,Indicator indicator){
  this.allIndicators.add(indicator);
  return MultiMapHelper.addUniqueObjectToListMap(elementToAnalyze,indicator,elementToIndicators);
}",0.7222222222222222
139864,"public boolean execute(){
  try {
    IProject rootProject=ResourceManager.getRootProject();
    if (!rootProject.exists()) {
      rootProject=DQStructureManager.getInstance().createNewProject(ResourceManager.DEFAULT_PROJECT_NAME);
    }
    IResource[] resources=ResourcesPlugin.getWorkspace().getRoot().members();
    if (resources != null && resources.length > 0) {
      for (      IResource resource : resources) {
        if (resource.getName().equals(""String_Node_Str"") || resource.getName().equals(""String_Node_Str"") || resource.getName().equals(""String_Node_Str"")) {
          IPath destination=null;
          IFolder prefixFolder=rootProject.getFolder(DQStructureManager.PREFIX_TDQ + resource.getName());
          prefixFolder.create(IResource.FORCE,true,new NullProgressMonitor());
          for (          IResource rs : ((IProject)resource).members()) {
            if (rs.getName().equals(""String_Node_Str"")) {
              continue;
            }
            destination=prefixFolder.getFolder(rs.getName()).getFullPath();
            rs.copy(destination,IResource.FORCE,new NullProgressMonitor());
          }
          resource.delete(true,new NullProgressMonitor());
        }
      }
    }
    String pathName=ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString() + ""String_Node_Str"";
    File repFolder=new File(pathName);
    if (repFolder.exists()) {
      FileUtils.copyDirectory(repFolder,ResourceManager.getDataProfilingFolder().getLocation().toFile());
      FileUtils.forceDelete(new File(pathName));
    }
    fileContentUpgrade(rootProject);
  }
 catch (  InvocationTargetException e) {
    logger.error(e,e);
  }
catch (  InterruptedException e) {
    logger.error(e,e);
  }
catch (  CoreException e) {
    logger.error(e,e);
  }
catch (  IOException e) {
    logger.error(e,e);
  }
catch (  Throwable e) {
    logger.error(e);
  }
  return false;
}","public boolean execute(){
  try {
    IProject rootProject=ResourceManager.getRootProject();
    if (!rootProject.exists()) {
      rootProject=DQStructureManager.getInstance().createNewProject(ResourceManager.DEFAULT_PROJECT_NAME);
    }
    IResource[] resources=ResourcesPlugin.getWorkspace().getRoot().members();
    if (resources != null && resources.length > 0) {
      for (      IResource resource : resources) {
        if (resource.getName().equals(""String_Node_Str"") || resource.getName().equals(""String_Node_Str"") || resource.getName().equals(""String_Node_Str"")) {
          IPath destination=null;
          IFolder prefixFolder=rootProject.getFolder(DQStructureManager.PREFIX_TDQ + resource.getName());
          prefixFolder.create(IResource.FORCE,true,new NullProgressMonitor());
          for (          IResource rs : ((IProject)resource).members()) {
            if (rs.getName().equals(""String_Node_Str"")) {
              continue;
            }
            destination=prefixFolder.getFolder(rs.getName()).getFullPath();
            rs.copy(destination,IResource.FORCE,new NullProgressMonitor());
          }
          resource.delete(true,new NullProgressMonitor());
        }
      }
    }
    String pathName=ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString() + ""String_Node_Str"";
    File repFolder=new File(pathName);
    if (repFolder.exists()) {
      FileUtils.copyDirectory(repFolder,ResourceManager.getReportingDBFolder().getLocation().toFile());
      FileUtils.forceDelete(new File(pathName));
    }
    fileContentUpgrade(rootProject);
  }
 catch (  InvocationTargetException e) {
    logger.error(e,e);
  }
catch (  InterruptedException e) {
    logger.error(e,e);
  }
catch (  CoreException e) {
    logger.error(e,e);
  }
catch (  IOException e) {
    logger.error(e,e);
  }
catch (  Throwable e) {
    logger.error(e);
  }
  return false;
}",0.994198312236287
139865,"/** 
 * DOC scorreia Comment method ""addPatternToDomain"".
 * @param domain
 * @param tableFilter
 * @param tablePattern
 */
private static void addPatternToDomain(Domain domain,RegularExpression tableFilter,String tablePattern,PatternType type){
  Pattern pattern=createPattern(tablePattern);
  pattern.setName(type.label);
  pattern.getComponents().add(tableFilter);
  domain.getPatterns().add(pattern);
  domain.getOwnedElement().add(pattern);
}","/** 
 * Method ""addPatternToDomain"" creates a Pattern object with the given expression and stores it in the given domain. Beware that it is also added to the owned elements of the Domain. This means that is contained in the domain and cannot be shared among several domains.
 * @param domain
 * @param tableFilter
 * @param tablePattern
 */
private static void addPatternToDomain(Domain domain,RegularExpression tableFilter,String tablePattern,PatternType type){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  pattern.setName(type.label);
  pattern.getComponents().add(tableFilter);
  domain.getPatterns().add(pattern);
  domain.getOwnedElement().add(pattern);
}",0.6708185053380783
139866,"/** 
 * DOC scorreia Comment method ""createPattern"".
 * @param tablePattern
 * @return
 */
private static Pattern createPattern(String tablePattern){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  pattern.getComponents().add(BooleanExpressionHelper.createRegularExpression(null,tablePattern));
  return pattern;
}","/** 
 * Method ""createPattern"".
 * @param language
 * @param regexp
 * @return a new pattern from the given regular expression
 */
public static Pattern createPattern(String language,String regexp){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  pattern.getComponents().add(BooleanExpressionHelper.createRegularExpression(language,regexp));
  return pattern;
}",0.6173541963015647
139867,"/** 
 * <!-- begin-user-doc --> Returns the real value if the indicator is a real valued indicator. Can return null. <!-- end-user-doc -->
 * @model kind=""operation""
 * @generated
 */
Double getRealValue();","/** 
 * <!-- begin-user-doc --> Returns the real value if the indicator is a real valued indicator. Can return null. This method must be implemented in order to store the value in the datamart. <!-- end-user-doc -->
 * @model kind=""operation""
 * @generated
 */
Double getRealValue();",0.8425357873210634
139868,"/** 
 * <!-- begin-user-doc --> Returns the integer value if the indicator is an integer valued indicator. Can return null. <!-- end-user-doc -->
 * @model kind=""operation""
 * @generated
 */
Long getIntegerValue();","/** 
 * <!-- begin-user-doc --> Returns the integer value if the indicator is an integer valued indicator. Can return null. This method must be implemented in order to store the value in the datamart. <!-- end-user-doc -->
 * @model kind=""operation""
 * @generated
 */
Long getIntegerValue();",0.8475247524752475
139869,"public static IProject getRootProject(){
  IProjectAdapterService projectAdapter=(IProjectAdapterService)GlobalServiceRegister.getDefault().getService(IProjectAdapterService.class);
  IProject rootProject=null;
  if (projectAdapter != null) {
    rootProject=projectAdapter.getRootProject();
  }
 else {
    rootProject=ResourcesPlugin.getWorkspace().getRoot().getProject(DEFAULT_PROJECT_NAME);
  }
  PluginConstant.setRootProjectName(rootProject.getName());
  return rootProject;
}","public static IProject getRootProject(){
  IProject rootProject=null;
  try {
    IProjectAdapterService projectAdapter=(IProjectAdapterService)GlobalServiceRegister.getDefault().getService(IProjectAdapterService.class);
    if (projectAdapter != null) {
      rootProject=projectAdapter.getRootProject();
    }
  }
 catch (  RuntimeException e) {
    Log.warn(e,e);
    rootProject=ResourcesPlugin.getWorkspace().getRoot().getProject(DEFAULT_PROJECT_NAME);
  }
  PluginConstant.setRootProjectName(rootProject.getName());
  return rootProject;
}",0.878286270691334
139870,"public static List<TdTable> getTables(Catalog catalog){
  TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.TABLE_FILTER,catalog.getTaggedValue());
  String tableFilter=tv == null ? null : tv.getValue();
  return TableHelper.getTables(catalog.getOwnedElement(),tableFilter);
}","public static List<TdTable> getTables(Catalog catalog){
  return TableHelper.getTables(catalog.getOwnedElement());
}",0.5686274509803921
139871,"public static List<TdView> getViews(Catalog catalog){
  TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.VIEW_FILTER,catalog.getTaggedValue());
  String viewFilter=tv == null ? null : tv.getValue();
  return ViewHelper.getViews(catalog.getOwnedElement(),viewFilter);
}","public static List<TdView> getViews(Catalog catalog){
  return ViewHelper.getViews(catalog.getOwnedElement());
}",0.5642317380352645
139872,"public static List<TdTable> getTables(Schema schema){
  TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.TABLE_FILTER,schema.getTaggedValue());
  String tableFilter=tv == null ? null : tv.getValue();
  return TableHelper.getTables(schema.getOwnedElement(),tableFilter);
}","public static List<TdTable> getTables(Schema schema){
  return TableHelper.getTables(schema.getOwnedElement());
}",0.5635910224438903
139873,"public static List<TdView> getViews(Schema schema){
  TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.VIEW_FILTER,schema.getTaggedValue());
  String viewFilter=tv == null ? null : tv.getValue();
  return ViewHelper.getViews(schema.getOwnedElement(),viewFilter);
}","public static List<TdView> getViews(Schema schema){
  return ViewHelper.getViews(schema.getOwnedElement());
}",0.558974358974359
139874,"/** 
 * DOC xqliu Comment method ""getTables"". ADD xqliu 2009-04-27 bug 6507
 * @param elements
 * @param tableFilter
 * @return
 */
public static List<TdTable> getTables(Collection<? extends EObject> elements,String tableFilter){
  List<TdTable> tables=new ArrayList<TdTable>();
  boolean filter=(tableFilter == null || ""String_Node_Str"".equals(tableFilter)) ? false : true;
  for (  EObject elt : elements) {
    TdTable table=SwitchHelpers.TABLE_SWITCH.doSwitch(elt);
    if (table != null) {
      if (filter) {
        if (table.getName().toLowerCase().indexOf(tableFilter.toLowerCase()) > -1) {
          tables.add(table);
        }
      }
 else {
        tables.add(table);
      }
    }
  }
  return tables;
}","/** 
 * Method ""getTables"" extracts the tables from the list.
 * @param elements any elements that could contain TdTables
 * @return the list of TdTables found in the given list (never null, but can be empty).
 */
public static List<TdTable> getTables(Collection<? extends EObject> elements){
  List<TdTable> tables=new ArrayList<TdTable>();
  for (  EObject elt : elements) {
    TdTable table=SwitchHelpers.TABLE_SWITCH.doSwitch(elt);
    if (table != null) {
      tables.add(table);
    }
  }
  return tables;
}",0.5466342254663422
139875,"/** 
 * DOC xqliu Comment method ""getViews"". ADD xqliu 2009-04-27 bug 6507
 * @param elements
 * @param viewFilter
 * @return
 */
public static List<TdView> getViews(Collection<? extends EObject> elements,String viewFilter){
  List<TdView> views=new ArrayList<TdView>();
  boolean filter=(viewFilter == null || ""String_Node_Str"".equals(viewFilter)) ? false : true;
  for (  EObject elt : elements) {
    TdView view=SwitchHelpers.VIEW_SWITCH.doSwitch(elt);
    if (view != null) {
      if (filter) {
        if (view.getName().toLowerCase().indexOf(viewFilter.toLowerCase()) > -1) {
          views.add(view);
        }
      }
 else {
        views.add(view);
      }
    }
  }
  return views;
}","/** 
 * Method ""getViews"" extracts the views from the list.
 * @param elements any elements that could contain TdView
 * @return the list of TdView found in the given list (never null, but can be empty).
 */
public static List<TdView> getViews(Collection<? extends EObject> elements){
  List<TdView> views=new ArrayList<TdView>();
  for (  EObject elt : elements) {
    TdView table=SwitchHelpers.VIEW_SWITCH.doSwitch(elt);
    if (table != null) {
      views.add(table);
    }
  }
  return views;
}",0.5079365079365079
139876,"/** 
 * Method ""getColumnSets"" returns tables or views. MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern table name patterns separated by a comma; must match the table name as it is stored in thedatabase
 * @return the tables with for the given catalog, schemas, table name pattern.
 * @throws SQLException
 */
public List<T> getColumnSets(String catalogName,String schemaPattern,String tablePattern) throws SQLException {
  if (debug)   incrementCount(catalogName,schemaPattern);
  List<T> tables=new ArrayList<T>();
  if (tablePattern == null) {
    addMatchingColumnSets(catalogName,schemaPattern,tablePattern,tables);
  }
 else {
    String[] patterns=tablePattern.split(""String_Node_Str"");
    for (    String pattern : patterns) {
      addMatchingColumnSets(catalogName,schemaPattern,pattern,tables);
    }
  }
  return tables;
}","/** 
 * Method ""getColumnSets"" returns tables or views. MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern table name patterns separated by a comma; must match the table name as it is stored in thedatabase
 * @return the tables with for the given catalog, schemas, table name pattern.
 * @throws SQLException
 */
public List<T> getColumnSets(String catalogName,String schemaPattern,String tablePattern) throws SQLException {
  if (debug)   incrementCount(catalogName,schemaPattern);
  List<T> tables=new ArrayList<T>();
  if (tablePattern == null) {
    addMatchingColumnSets(catalogName,schemaPattern,tablePattern,tables);
  }
 else {
    String[] patterns=cleanPatterns(tablePattern.split(""String_Node_Str""));
    for (    String pattern : patterns) {
      addMatchingColumnSets(catalogName,schemaPattern,pattern,tables);
    }
  }
  return tables;
}",0.9060165159260716
139877,"/** 
 * Method ""getColumns"". MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  ResultSet columns=getConnectionMetadata(connection).getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
  int size=0;
  TdColumn column=null;
  while (columns.next()) {
    column=initColumn(columns);
    tableColumns.add(column);
    size++;
    if (size > TaggedValueHelper.COLUMN_MAX) {
      tableColumns.clear();
      column.setName(TaggedValueHelper.TABLE_VIEW_COLUMN_OVER_FLAG);
      tableColumns.add(column);
      break;
    }
  }
  columns.close();
  return tableColumns;
}","/** 
 * Method ""getColumns"". MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @param columnPattern a column name pattern; must match the column name as it is stored in the database
 * @throws SQLException
 * @see DatabaseMetaData#getColumns(String,String,String,String)
 */
public List<TdColumn> getColumns(String catalogName,String schemaPattern,String tablePattern,String columnPattern) throws SQLException {
  List<TdColumn> tableColumns=new ArrayList<TdColumn>();
  if (debug)   incrementCount(catalogName,schemaPattern,tablePattern);
  if (columnPattern == null) {
    addMatchingColumns(catalogName,schemaPattern,tablePattern,columnPattern,tableColumns);
  }
 else {
    String[] patterns=cleanPatterns(columnPattern.split(""String_Node_Str""));
    for (    String pattern : patterns) {
      addMatchingColumns(catalogName,schemaPattern,tablePattern,pattern,tableColumns);
    }
  }
  return tableColumns;
}",0.7506887052341598
139878,"public ModelElement initCWMResourceBuilder(){
  DataProviderBuilder dpBuilder=new DataProviderBuilder();
  if (driverPathes != null) {
    LinkedList<String> jars=new LinkedList<String>();
    for (    String driverpath : driverPathes.split(""String_Node_Str"")) {
      jars.add(driverpath);
    }
    String name=connectionParam.getJdbcUrl().substring(0,12);
    driver=dpBuilder.buildDriverForSQLExploer(name,connectionParam.getDriverClassName(),connectionParam.getJdbcUrl(),jars);
  }
  ReturnCode rc=dpBuilder.initializeDataProvider(connectionParam);
  if (rc.isOk()) {
    return dpBuilder.getDataProvider();
  }
 else {
    MessageDialog.openInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + rc.getMessage());
  }
  return null;
}","public ModelElement initCWMResourceBuilder(){
  DataProviderBuilder dpBuilder=new DataProviderBuilder();
  String driverPath=connectionParam.getDriverPath();
  if (driverPath != null) {
    LinkedList<String> jars=new LinkedList<String>();
    for (    String driverpath : driverPath.split(""String_Node_Str"")) {
      jars.add(driverpath);
    }
    String name=connectionParam.getJdbcUrl().substring(0,12);
    driver=dpBuilder.buildDriverForSQLExploer(name,connectionParam.getDriverClassName(),connectionParam.getJdbcUrl(),jars);
  }
  ReturnCode rc=dpBuilder.initializeDataProvider(connectionParam);
  if (rc.isOk()) {
    return dpBuilder.getDataProvider();
  }
 else {
    MessageDialog.openInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + rc.getMessage());
  }
  return null;
}",0.9657657657657658
139879,"/** 
 * Constructor for DatabaseWizard. Analyse Iselection to extract DatabaseConnection and the pathToSave. Start the Lock Strategy.
 * @param selection
 * @param existingNames
 */
public DatabaseConnectionWizard(DBConnectionParameter connectionParam){
  this.connectionParam=connectionParam;
  this.driverPathes=connectionParam.getDriverPath();
}","/** 
 * Constructor for DatabaseWizard. Analyse Iselection to extract DatabaseConnection and the pathToSave. Start the Lock Strategy.
 * @param selection
 * @param existingNames
 */
public DatabaseConnectionWizard(DBConnectionParameter connectionParam){
  this.connectionParam=connectionParam;
}",0.917573872472784
139880,"/** 
 * DOC xqliu Comment method ""showAddDQRuleDialog"".
 * @param treeItem
 * @param tableIndicator
 */
private void showAddDQRuleDialog(final TreeItem treeItem,final TableIndicator tableIndicator){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new DQRuleLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(ResourceManager.getLibrariesFolder());
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object whereRule : selection) {
        if (whereRule instanceof IFile) {
          IFile file=(IFile)whereRule;
          if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
            WhereRule findWhereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findWhereRule);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return DQRuleUtilities.isLibraiesSubfolder(folder,DQStructureManager.DQ_RULES);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  dialog.create();
  if (dialog.open() == Window.OK) {
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof IFile) {
        IFile file=(IFile)obj;
        TableIndicatorUnit addIndicatorUnit=DQRuleUtilities.createIndicatorUnit(file,tableIndicator,getAnalysis());
        if (addIndicatorUnit != null) {
          createOneUnit(treeItem,addIndicatorUnit);
          setDirty(true);
        }
 else {
          WhereRule whereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
          MessageUI.openError(""String_Node_Str"" + whereRule.getName() + ""String_Node_Str"");
        }
      }
    }
  }
}","/** 
 * DOC xqliu Comment method ""showAddDQRuleDialog"".
 * @param treeItem
 * @param tableIndicator
 */
private void showAddDQRuleDialog(final TreeItem treeItem,final TableIndicator tableIndicator){
  IndicatorCheckedTreeSelectionDialog dialog=new IndicatorCheckedTreeSelectionDialog(null,new DQRuleLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(ResourceManager.getLibrariesFolder());
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object whereRule : selection) {
        if (whereRule instanceof IFile) {
          IFile file=(IFile)whereRule;
          if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
            WhereRule findWhereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findWhereRule);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return DQRuleUtilities.isLibraiesSubfolder(folder,DQStructureManager.DQ_RULES);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  dialog.create();
  IFolder whereRuleFolder=ResourceManager.getLibrariesFolder().getFolder(DQStructureManager.DQ_RULES);
  Object[] ownedWhereRuleFiles=getOwnedWhereRuleFiles(tableIndicator,whereRuleFolder);
  dialog.setCheckedElements(ownedWhereRuleFiles);
  if (dialog.open() == Window.OK) {
    removeUncheckedWhereRuleIndicator(ownedWhereRuleFiles,dialog.getResult(),tableIndicator,whereRuleFolder);
    Object[] results=clearAddedResult(ownedWhereRuleFiles,dialog.getResult());
    for (    Object obj : results) {
      if (obj instanceof IFile) {
        IFile file=(IFile)obj;
        TableIndicatorUnit addIndicatorUnit=DQRuleUtilities.createIndicatorUnit(file,tableIndicator,getAnalysis());
        if (addIndicatorUnit != null) {
          createOneUnit(treeItem,addIndicatorUnit);
          setDirty(true);
        }
 else {
          WhereRule whereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
          MessageUI.openError(""String_Node_Str"" + whereRule.getName());
        }
      }
    }
  }
}",0.8923700700331736
139881,"public void createOneUnit(final TreeItem treeItem,TableIndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final TableIndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(TABLE_INDICATOR_KEY,treeItem.getData(TABLE_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.WhereRuleIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.DQ_RULE));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=null;
  if (!(unit.getIndicator() instanceof RowCountIndicator)) {
    delEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteIndicatorItems((TableIndicator)treeItem.getData(TABLE_INDICATOR_KEY),unit);
        if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(tableIndicators);
        }
 else {
          removeItemBranch(indicatorItem);
        }
      }
    }
);
    delEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delEditor.horizontalAlignment=SWT.CENTER;
    delEditor.setEditor(delLabel,indicatorItem,2);
  }
  if (delEditor == null) {
    indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor});
  }
 else {
    indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  }
  if (indicatorEnum != null && indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(TABLE_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}","public void createOneUnit(final TreeItem treeItem,TableIndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final TableIndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(TABLE_INDICATOR_KEY,treeItem.getData(TABLE_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.WhereRuleIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.DQ_RULE));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openIndicatorOptionDialog(null,indicatorItem);
    }
  }
);
  optionEditor.minimumWidth=optionLabel.getImage().getBounds().width;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=null;
  if (!(unit.getIndicator() instanceof RowCountIndicator)) {
    delEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteIndicatorItems((TableIndicator)treeItem.getData(TABLE_INDICATOR_KEY),unit);
        if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(tableIndicators);
        }
 else {
          removeItemBranch(indicatorItem);
          indicatorTreeItemMap.remove(unit);
        }
      }
    }
);
    delEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delEditor.horizontalAlignment=SWT.CENTER;
    delEditor.setEditor(delLabel,indicatorItem,2);
  }
  if (delEditor == null) {
    indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor});
  }
 else {
    indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  }
  if (indicatorEnum != null && indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(TABLE_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
  this.indicatorTreeItemMap.put(unit,indicatorItem);
}",0.9834403514700912
139882,"@Override public void mouseDown(MouseEvent e){
  deleteIndicatorItems((TableIndicator)treeItem.getData(TABLE_INDICATOR_KEY),unit);
  if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
    setElements(tableIndicators);
  }
 else {
    removeItemBranch(indicatorItem);
  }
}","@Override public void mouseDown(MouseEvent e){
  deleteIndicatorItems((TableIndicator)treeItem.getData(TABLE_INDICATOR_KEY),unit);
  if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
    setElements(tableIndicators);
  }
 else {
    removeItemBranch(indicatorItem);
    indicatorTreeItemMap.remove(unit);
  }
}",0.9449929478138224
139883,"private void addItemElements(final TableIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final TableIndicator tableIndicator=elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TABLE));
    treeItem.setText(0,tableIndicator.getTdTable().getName());
    treeItem.setData(TABLE_INDICATOR_KEY,tableIndicator);
    TreeEditor addDQRuleEditor=new TreeEditor(tree);
    Label addDQRuleLabl=new Label(tree,SWT.NONE);
    addDQRuleLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addDQRuleLabl.setImage(ImageLib.getImage(ImageLib.ADD_DQ));
    addDQRuleLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addDQRuleLabl.pack();
    addDQRuleLabl.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        showAddDQRuleDialog(treeItem,tableIndicator);
      }
    }
);
    addDQRuleEditor.minimumWidth=addDQRuleLabl.getImage().getBounds().width;
    addDQRuleEditor.setEditor(addDQRuleLabl,treeItem,1);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteTableItems(tableIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(tableIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,2);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{addDQRuleEditor,delLabelEditor});
    if (tableIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,tableIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","private void addItemElements(final TableIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final TableIndicator tableIndicator=elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TABLE));
    treeItem.setText(0,tableIndicator.getTdTable().getName());
    treeItem.setData(TABLE_INDICATOR_KEY,tableIndicator);
    TreeEditor addDQRuleEditor=new TreeEditor(tree);
    Label addDQRuleLabl=new Label(tree,SWT.NONE);
    addDQRuleLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addDQRuleLabl.setImage(ImageLib.getImage(ImageLib.ADD_DQ));
    addDQRuleLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addDQRuleLabl.pack();
    addDQRuleLabl.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        showAddDQRuleDialog(treeItem,tableIndicator);
      }
    }
);
    addDQRuleEditor.minimumWidth=addDQRuleLabl.getImage().getBounds().width;
    addDQRuleEditor.setEditor(addDQRuleLabl,treeItem,1);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteTableItems(tableIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(tableIndicators);
        }
 else {
          removeItemBranch(treeItem);
          indicatorTreeItemMap.remove(tableIndicator);
        }
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,2);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{addDQRuleEditor,delLabelEditor});
    if (tableIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,tableIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
    this.indicatorTreeItemMap.put(tableIndicator,treeItem);
  }
  this.setDirty(true);
}",0.9751028361117124
139884,"@Override public boolean canDrop(Object data,List<IFile> files){
  if (data != null && files.size() > 0 && data instanceof TableIndicator) {
    TableIndicator ti=(TableIndicator)data;
    TableIndicatorUnit[] tius=ti.getIndicatorUnits();
    if (tius != null) {
      int i=0, j=0;
      for (      TableIndicatorUnit tiu : tius) {
        i++;
        j=0;
        String name=tiu.getIndicator().getIndicatorDefinition().getName();
        for (        IFile file : files) {
          j++;
          if (DQRuleResourceFileHelper.getInstance().findWhereRule(file).getName().equals(name)) {
            return false;
          }
        }
      }
    }
    System.out.println(""String_Node_Str"");
    return true;
  }
  return false;
}","@Override public boolean canDrop(Object data,List<IFile> files){
  if (data != null && files.size() > 0 && data instanceof TableIndicator) {
    TableIndicator ti=(TableIndicator)data;
    TableIndicatorUnit[] tius=ti.getIndicatorUnits();
    if (tius != null) {
      int i=0, j=0;
      for (      TableIndicatorUnit tiu : tius) {
        i++;
        j=0;
        String name=tiu.getIndicator().getIndicatorDefinition().getName();
        for (        IFile file : files) {
          j++;
          if (DQRuleResourceFileHelper.getInstance().findWhereRule(file).getName().equals(name)) {
            return false;
          }
        }
      }
    }
    return true;
  }
  return false;
}",0.9698245614035088
139885,"private void removeSelectedElements(Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  if (isRowCountIndicator(selection)) {
    return;
  }
  boolean branchIndicatorExist=false;
  for (  TreeItem item : selection) {
    TableIndicatorUnit indicatorUnit=(TableIndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      deleteIndicatorItems((TableIndicator)item.getData(TABLE_INDICATOR_KEY),indicatorUnit);
    }
 else {
      deleteTableItems((TableIndicator)item.getData(TABLE_INDICATOR_KEY));
    }
    if (item.getParentItem() != null && item.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
      branchIndicatorExist=true;
      continue;
    }
 else {
      removeItemBranch(item);
    }
  }
  if (branchIndicatorExist) {
    setElements(tableIndicators);
  }
}","private void removeSelectedElements(Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  if (isRowCountIndicator(selection)) {
    return;
  }
  boolean branchIndicatorExist=false;
  for (  TreeItem item : selection) {
    TableIndicatorUnit indicatorUnit=(TableIndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      deleteIndicatorItems((TableIndicator)item.getData(TABLE_INDICATOR_KEY),indicatorUnit);
    }
 else {
      deleteTableItems((TableIndicator)item.getData(TABLE_INDICATOR_KEY));
    }
    if (item.getParentItem() != null && item.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
      branchIndicatorExist=true;
      continue;
    }
 else {
      removeItemBranch(item);
      removeTreeItem(item);
    }
  }
  if (branchIndicatorExist) {
    setElements(tableIndicators);
  }
}",0.9830917874396136
139886,"private void deleteIndicatorItems(TableIndicator tableIndicator,TableIndicatorUnit inidicatorUnit){
  tableIndicator.removeIndicatorUnit(inidicatorUnit);
}","private void deleteIndicatorItems(TableIndicator tableIndicator,TableIndicatorUnit inidicatorUnit){
  tableIndicator.removeIndicatorUnit(inidicatorUnit);
  this.indicatorTreeItemMap.remove(inidicatorUnit);
}",0.856353591160221
139887,"private void removeItemBranch(TreeItem item){
  TreeEditor[] editors=(TreeEditor[])item.getData(ITEM_EDITOR_KEY);
  if (editors != null) {
    for (int j=0; j < editors.length; j++) {
      editors[j].getEditor().dispose();
      editors[j].dispose();
    }
  }
  if (item.getItemCount() == 0) {
    item.dispose();
    this.setDirty(true);
    return;
  }
  TreeItem[] items=item.getItems();
  for (int i=0; i < items.length; i++) {
    removeItemBranch(items[i]);
  }
  item.dispose();
  this.setDirty(true);
}","private void removeItemBranch(TreeItem item){
  TreeEditor[] editors=(TreeEditor[])item.getData(ITEM_EDITOR_KEY);
  if (editors != null) {
    for (int j=0; j < editors.length; j++) {
      editors[j].getEditor().dispose();
      editors[j].dispose();
    }
  }
  if (item.getItemCount() == 0) {
    item.dispose();
    this.setDirty(true);
    return;
  }
  TreeItem[] items=item.getItems();
  for (int i=0; i < items.length; i++) {
    removeItemBranch(items[i]);
    removeTreeItem(items[i]);
  }
  item.dispose();
  this.setDirty(true);
}",0.9715370018975332
139888,"public Composite[] getPreviewChartCompsites(){
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
  return previewChartCompsites;
}","public Composite[] getPreviewChartCompsites(){
  if (previewChartList != null && !previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
  return previewChartCompsites;
}",0.9396551724137931
139889,"public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    double value=Double.parseDouble(unit.getValue().toString());
    String label=unit.getIndicatorName();
    customerdataset.addValue(value,label,""String_Node_Str"");
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(label);
    entity.setValue(String.valueOf(value));
    entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    final Object unitValue=unit.getValue();
    double value=unitValue != null ? Double.parseDouble(unitValue.toString()) : Double.NaN;
    String label=unit.getIndicatorName();
    customerdataset.addValue(value,label,""String_Node_Str"");
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(label);
    entity.setValue(String.valueOf(value));
    entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
    customerdataset.addDataEntity(entity);
  }
  return customerdataset;
}",0.940416367552046
139890,"public static void getIndicatorValue(TableIndicatorUnit indicatorUnit){
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (indicatorUnit.isExcuted()) {
switch (type) {
case RowCountIndicatorEnum:
      tempObject=((RowCountIndicator)indicator).getCount();
    break;
case WhereRuleIndicatorEnum:
  tempObject=((WhereRuleIndicator)indicator).getCount();
default :
}
indicatorUnit.setValue(tempObject);
}
}","public static void getIndicatorValue(TableIndicatorUnit indicatorUnit){
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (indicatorUnit.isExcuted()) {
switch (type) {
case RowCountIndicatorEnum:
      tempObject=((RowCountIndicator)indicator).getCount();
    break;
case WhereRuleIndicatorEnum:
  tempObject=((WhereRuleIndicator)indicator).getUserCount();
default :
}
indicatorUnit.setValue(tempObject);
}
}",0.9958762886597938
139891,"public TypedReturnCode<IFile> createAndSaveCWMFile(ModelElement cwmElement){
  WhereRule whereRule=(WhereRule)cwmElement;
  TaggedValueHelper.setValidStatus(true,whereRule);
  whereRule.setWhereExpression(parameter.getWhereClause());
  whereRule.setCriticalityLevel(CRITICALITY_LEVEL_DEFAULT);
  whereRule.getSqlGenericExpression().add(getExpression());
  IFolder folder=parameter.getFolderProvider().getFolderResource();
  return DqRuleWriter.getInstance().createDqRuleFile(whereRule,folder);
}","public TypedReturnCode<IFile> createAndSaveCWMFile(ModelElement cwmElement){
  WhereRule whereRule=(WhereRule)cwmElement;
  TaggedValueHelper.setValidStatus(true,whereRule);
  whereRule.setWhereExpression(parameter.getWhereClause());
  whereRule.setCriticalityLevel(CRITICALITY_LEVEL_DEFAULT);
  whereRule.getSqlGenericExpression().add(getExpression());
  IndicatorCategory ruleIndicatorCategory=DefinitionHandler.getInstance().getDQRuleIndicatorCategory();
  if (ruleIndicatorCategory != null && !whereRule.getCategories().contains(ruleIndicatorCategory)) {
    whereRule.getCategories().add(ruleIndicatorCategory);
  }
  IFolder folder=parameter.getFolderProvider().getFolderResource();
  return DqRuleWriter.getInstance().createDqRuleFile(whereRule,folder);
}",0.7875894988066826
139892,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new ColumnTreeMenuProvider(tree).createTreeMenu();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] selection=tree.getSelection();
      if (selection.length == 0) {
        return;
      }
      TreeItem item=selection[0];
      if (item != null) {
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
        if (columnobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (columnobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new ColumnTreeMenuProvider(tree).createTreeMenu();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
        if (columnobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (columnobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}",0.9673999469917838
139893,"@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem[] selection=tree.getSelection();
  if (selection.length == 0) {
    return;
  }
  TreeItem item=selection[0];
  if (item != null) {
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
    if (columnobj != null && indicatorobj == null) {
      openIndicatorSelectDialog(null);
    }
 else     if (columnobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(null,item);
    }
  }
}","@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem[] treeSelection=tree.getSelection();
  if (treeSelection.length > 0) {
    TreeItem item=treeSelection[0];
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
    if (columnobj != null && indicatorobj == null) {
      openIndicatorSelectDialog(null);
    }
 else     if (columnobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(null,item);
    }
  }
}",0.9442815249266864
139894,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new TableTreeMenuProvider(tree).createTreeMenu();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem item=tree.getSelection()[0];
      if (item != null) {
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object tableobj=item.getData(TABLE_INDICATOR_KEY);
        if (tableobj != null && indicatorobj == null) {
          showAddDQRuleDialog(item,(TableIndicator)tableobj);
        }
 else         if (tableobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new TableTreeMenuProvider(tree).createTreeMenu();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object tableobj=item.getData(TABLE_INDICATOR_KEY);
        if (tableobj != null && indicatorobj == null) {
          showAddDQRuleDialog(item,(TableIndicator)tableobj);
        }
 else         if (tableobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}",0.9670626349892008
139895,"@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem item=tree.getSelection()[0];
  if (item != null) {
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object tableobj=item.getData(TABLE_INDICATOR_KEY);
    if (tableobj != null && indicatorobj == null) {
      showAddDQRuleDialog(item,(TableIndicator)tableobj);
    }
 else     if (tableobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(null,item);
    }
  }
}","@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem[] treeSelection=tree.getSelection();
  if (treeSelection.length > 0) {
    TreeItem item=treeSelection[0];
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object tableobj=item.getData(TABLE_INDICATOR_KEY);
    if (tableobj != null && indicatorobj == null) {
      showAddDQRuleDialog(item,(TableIndicator)tableobj);
    }
 else     if (tableobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(null,item);
    }
  }
}",0.8868312757201646
139896,"/** 
 * Method ""createBubbleChart"".
 * @param indic the indicator
 * @param numericColumn the analyzed numeric column
 * @return the bubble chart
 */
public static JFreeChart createBubbleChart(final ColumnSetMultiValueIndicator indic,Column numericColumn){
  final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indic,numericColumn);
  DefaultXYZDataset dataset=new DefaultXYZDataset();
  final Iterator<String> iterator=createXYZDatasets.keySet().iterator();
  while (iterator.hasNext()) {
    final String next=iterator.next();
    createXYZDatasets.get(next).addSeriesToXYZDataset(dataset,next);
  }
  String chartName=DefaultMessagesImpl.getString(""String_Node_Str"",numericColumn.getName());
  JFreeChart chart=TopChartFactory.createBubbleChart(chartName,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),dataset,PlotOrientation.HORIZONTAL,true,true,true);
  final XYPlot plot=(XYPlot)chart.getPlot();
  final XYItemRenderer renderer=plot.getRenderer();
  renderer.setBaseToolTipGenerator(new StandardXYZToolTipGenerator(){
    @Override protected Object[] createItemArray(    XYZDataset dset,    int series,    int item){
      final Comparable<?> seriesKey=dset.getSeriesKey(series);
      final String seriesK=String.valueOf(seriesKey);
      final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
      String label=valueAggregator.getLabels(seriesK).get(item);
      final Object[] itemArray=super.createItemArray(dset,series,item);
      itemArray[0]=label;
      return itemArray;
    }
  }
);
  return chart;
}","/** 
 * Method ""createBubbleChart"".
 * @param indic the indicator
 * @param numericColumn the analyzed numeric column
 * @return the bubble chart
 */
public static JFreeChart createBubbleChart(final ColumnSetMultiValueIndicator indic,Column numericColumn){
  final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indic,numericColumn);
  DefaultXYZDataset dataset=new DefaultXYZDataset();
  final Iterator<String> iterator=createXYZDatasets.keySet().iterator();
  while (iterator.hasNext()) {
    final String next=iterator.next();
    createXYZDatasets.get(next).addSeriesToXYZDataset(dataset,next);
  }
  String chartName=DefaultMessagesImpl.getString(""String_Node_Str"",numericColumn.getName());
  JFreeChart chart=TopChartFactory.createBubbleChart(chartName,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),dataset,PlotOrientation.HORIZONTAL,true,true,true);
  final XYPlot plot=(XYPlot)chart.getPlot();
  final XYItemRenderer renderer=plot.getRenderer();
  renderer.setBaseToolTipGenerator(new StandardXYZToolTipGenerator(){
    private static final long serialVersionUID=1L;
    @Override protected Object[] createItemArray(    XYZDataset dset,    int series,    int item){
      final Comparable<?> seriesKey=dset.getSeriesKey(series);
      final String seriesK=String.valueOf(seriesKey);
      final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
      String label=valueAggregator.getLabels(seriesK).get(item);
      final Object[] itemArray=super.createItemArray(dset,series,item);
      itemArray[0]=label;
      itemArray[1]=""String_Node_Str"" + itemArray[1];
      itemArray[2]=""String_Node_Str"" + itemArray[2];
      itemArray[3]=""String_Node_Str"" + itemArray[3];
      return itemArray;
    }
  }
);
  return chart;
}",0.935147654892878
139897,"@Override protected Object[] createItemArray(XYZDataset dset,int series,int item){
  final Comparable<?> seriesKey=dset.getSeriesKey(series);
  final String seriesK=String.valueOf(seriesKey);
  final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
  String label=valueAggregator.getLabels(seriesK).get(item);
  final Object[] itemArray=super.createItemArray(dset,series,item);
  itemArray[0]=label;
  return itemArray;
}","@Override protected Object[] createItemArray(XYZDataset dset,int series,int item){
  final Comparable<?> seriesKey=dset.getSeriesKey(series);
  final String seriesK=String.valueOf(seriesKey);
  final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
  String label=valueAggregator.getLabels(seriesK).get(item);
  final Object[] itemArray=super.createItemArray(dset,series,item);
  itemArray[0]=label;
  itemArray[1]=""String_Node_Str"" + itemArray[1];
  itemArray[2]=""String_Node_Str"" + itemArray[2];
  itemArray[3]=""String_Node_Str"" + itemArray[3];
  return itemArray;
}",0.8563049853372434
139898,"/** 
 * DOC scorreia Comment method ""addPatternToDomain"".
 * @param domain
 * @param tableFilter
 * @param tablePattern
 */
private static void addPatternToDomain(Domain domain,RegularExpression tableFilter,String tablePattern,PatternType type){
  Pattern pattern=createPattern(tablePattern);
  pattern.setName(type.label);
  pattern.getComponents().add(tableFilter);
  domain.getPatterns().add(pattern);
  if (PatternType.EXPECTED_VALUE.compareTo(type) == 0) {
    domain.getOwnedElement().add(pattern);
  }
}","/** 
 * DOC scorreia Comment method ""addPatternToDomain"".
 * @param domain
 * @param tableFilter
 * @param tablePattern
 */
private static void addPatternToDomain(Domain domain,RegularExpression tableFilter,String tablePattern,PatternType type){
  Pattern pattern=createPattern(tablePattern);
  pattern.setName(type.label);
  pattern.getComponents().add(tableFilter);
  domain.getPatterns().add(pattern);
  domain.getOwnedElement().add(pattern);
}",0.9341692789968652
139899,"public static List<TdTable> getTables(Catalog catalog){
  return TableHelper.getTables(catalog.getOwnedElement());
}","public static List<TdTable> getTables(Catalog catalog){
  TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.TABLE_FILTER,catalog.getTaggedValue());
  String tableFilter=tv == null ? null : tv.getValue();
  return TableHelper.getTables(catalog.getOwnedElement(),tableFilter);
}",0.5686274509803921
139900,"public static List<TdView> getViews(Catalog catalog){
  return ViewHelper.getViews(catalog.getOwnedElement());
}","public static List<TdView> getViews(Catalog catalog){
  TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.VIEW_FILTER,catalog.getTaggedValue());
  String viewFilter=tv == null ? null : tv.getValue();
  return ViewHelper.getViews(catalog.getOwnedElement(),viewFilter);
}",0.5088161209068011
139901,"public static List<TdColumn> getColumns(ColumnSet columnSet){
  return ColumnHelper.getColumns(columnSet.getFeature());
}","/** 
 * DOC xqliu Comment method ""getColumns"". ADD xqliu 2009-04-27 bug 6507
 * @param columnSet
 * @param filter
 * @return
 */
public static List<TdColumn> getColumns(ColumnSet columnSet,boolean filter){
  if (filter) {
    return ColumnHelper.getColumnsWithFilter(columnSet,filter);
  }
 else {
    return getColumns(columnSet);
  }
}",0.4716157205240174
139902,"public static List<TdTable> getTables(Schema schema){
  return TableHelper.getTables(schema.getOwnedElement());
}","public static List<TdTable> getTables(Schema schema){
  TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.TABLE_FILTER,schema.getTaggedValue());
  String tableFilter=tv == null ? null : tv.getValue();
  return TableHelper.getTables(schema.getOwnedElement(),tableFilter);
}",0.5635910224438903
139903,"public static List<TdView> getViews(Schema schema){
  return ViewHelper.getViews(schema.getOwnedElement());
}","public static List<TdView> getViews(Schema schema){
  TaggedValue tv=TaggedValueHelper.getTaggedValue(TaggedValueHelper.VIEW_FILTER,schema.getTaggedValue());
  String viewFilter=tv == null ? null : tv.getValue();
  return ViewHelper.getViews(schema.getOwnedElement(),viewFilter);
}",0.5025641025641026
139904,"/** 
 * Method ""getTables"" extracts the tables from the list.
 * @param elements any elements that could contain TdTables
 * @return the list of TdTables found in the given list (never null, but can be empty).
 */
public static List<TdTable> getTables(Collection<? extends EObject> elements){
  List<TdTable> tables=new ArrayList<TdTable>();
  for (  EObject elt : elements) {
    TdTable table=SwitchHelpers.TABLE_SWITCH.doSwitch(elt);
    if (table != null) {
      tables.add(table);
    }
  }
  return tables;
}","/** 
 * DOC xqliu Comment method ""getTables"". ADD xqliu 2009-04-27 bug 6507
 * @param elements
 * @param tableFilter
 * @return
 */
public static List<TdTable> getTables(Collection<? extends EObject> elements,String tableFilter){
  List<TdTable> tables=new ArrayList<TdTable>();
  boolean filter=(tableFilter == null || ""String_Node_Str"".equals(tableFilter)) ? false : true;
  for (  EObject elt : elements) {
    TdTable table=SwitchHelpers.TABLE_SWITCH.doSwitch(elt);
    if (table != null) {
      if (filter) {
        if (table.getName().toLowerCase().indexOf(tableFilter.toLowerCase()) > -1) {
          tables.add(table);
        }
      }
 else {
        tables.add(table);
      }
    }
  }
  return tables;
}",0.5563665855636658
139905,"/** 
 * Method ""getViews"" extracts the views from the list.
 * @param elements any elements that could contain TdView
 * @return the list of TdView found in the given list (never null, but can be empty).
 */
public static List<TdView> getViews(Collection<? extends EObject> elements){
  List<TdView> views=new ArrayList<TdView>();
  for (  EObject elt : elements) {
    TdView table=SwitchHelpers.VIEW_SWITCH.doSwitch(elt);
    if (table != null) {
      views.add(table);
    }
  }
  return views;
}","/** 
 * DOC xqliu Comment method ""getViews"". ADD xqliu 2009-04-27 bug 6507
 * @param elements
 * @param viewFilter
 * @return
 */
public static List<TdView> getViews(Collection<? extends EObject> elements,String viewFilter){
  List<TdView> views=new ArrayList<TdView>();
  boolean filter=(viewFilter == null || ""String_Node_Str"".equals(viewFilter)) ? false : true;
  for (  EObject elt : elements) {
    TdView view=SwitchHelpers.VIEW_SWITCH.doSwitch(elt);
    if (view != null) {
      if (filter) {
        if (view.getName().toLowerCase().indexOf(viewFilter.toLowerCase()) > -1) {
          views.add(view);
        }
      }
 else {
        views.add(view);
      }
    }
  }
  return views;
}",0.5162907268170426
139906,"/** 
 * Method ""getColumnSets"" returns tables or views.
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @return the tables with for the given catalog, schemas, table name pattern.
 * @throws SQLException
 */
public List<T> getColumnSets(String catalogName,String schemaPattern,String tablePattern) throws SQLException {
  List<T> tables=new ArrayList<T>();
  ResultSet tablesSet=getConnectionMetadata(connection).getTables(catalogName,schemaPattern,tablePattern,this.tableType);
  while (tablesSet.next()) {
    T table=createTable(catalogName,schemaPattern,tablesSet);
    tables.add(table);
  }
  tablesSet.close();
  return tables;
}","/** 
 * Method ""getColumnSets"" returns tables or views. MOD xqliu 2009-04-27 bug 6507
 * @param catalogName a catalog name; must match the catalog name as it is stored in the database; """" retrievesthose without a catalog; null means that the catalog name should not be used to narrow the search
 * @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; """"retrieves those without a schema; null means that the schema name should not be used to narrow the search
 * @param tablePattern a table name pattern; must match the table name as it is stored in the database
 * @return the tables with for the given catalog, schemas, table name pattern.
 * @throws SQLException
 */
public List<T> getColumnSets(String catalogName,String schemaPattern,String tablePattern) throws SQLException {
  List<T> tables=new ArrayList<T>();
  ResultSet tablesSet=getConnectionMetadata(connection).getTables(catalogName,schemaPattern,null,this.tableType);
  boolean filter=(tablePattern == null || ""String_Node_Str"".equals(tablePattern)) ? false : true;
  int size=0;
  while (tablesSet.next()) {
    if (filter) {
      String tableName=tablesSet.getString(GetTable.TABLE_NAME.name()).toLowerCase();
      tablePattern=tablePattern.toLowerCase();
      if (tableName.indexOf(tablePattern) > -1) {
        T table=createTable(catalogName,schemaPattern,tablesSet);
        tables.add(table);
        size++;
      }
    }
 else {
      T table=createTable(catalogName,schemaPattern,tablesSet);
      tables.add(table);
      size++;
    }
    if (size > TaggedValueHelper.TABLE_VIEW_MAX) {
      tables.clear();
      T table=createTable();
      table.setName(TaggedValueHelper.TABLE_VIEW_COLUMN_OVER_FLAG);
      tables.add(table);
      break;
    }
  }
  tablesSet.close();
  return tables;
}",0.7129251700680272
139907,"@Override public boolean performFinish(){
  if (StringUtils.equals(numberTxt.getText(),String.valueOf(parameters.getTopN()))) {
    return false;
  }
  return true;
}","@Override public boolean performFinish(){
  if (!StringUtils.equals(numberTxt.getText(),String.valueOf(parameters.getTopN()))) {
    return false;
  }
  return true;
}",0.996996996996997
139908,"@Override public String getTopNQuery(String query,int n){
  return super.getTopNQuery(query,n);
}","@Override public String getTopNQuery(String query,int n){
  Matcher m=selectPattern.matcher(query);
  return m.replaceFirst(""String_Node_Str"" + n + ""String_Node_Str"");
}",0.5864661654135338
139909,"public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
    return true;
case DefValueCountIndicatorEnum:
  if (column.getInitialValue().getBody() != null) {
    return true;
  }
break;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
case PatternFreqIndicatorEnum:
case PatternLowFreqIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case SoundexIndicatorEnum:
case SoundexLowIndicatorEnum:
if (!Java2SqlType.isDateInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case RangeIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) || Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
default :
return false;
}
return false;
}","public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
    return true;
case DefValueCountIndicatorEnum:
  if (column.getInitialValue().getBody() != null) {
    return column.getInitialValue().getBody().length() != 0 || Java2SqlType.isTextInSQL(javaType);
  }
break;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
case PatternFreqIndicatorEnum:
case PatternLowFreqIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case SoundexIndicatorEnum:
case SoundexLowIndicatorEnum:
if (!Java2SqlType.isDateInSQL(javaType) && (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL)) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case RangeIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) || Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
default :
return false;
}
return false;
}",0.9777558082056352
139910,"@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    for (    Indicator indicator : indicators) {
      if (indicator instanceof CompositeIndicator) {
        continue;
      }
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
      Expression query=dbms().getInstantiatedExpression(indicator);
      if (query == null || !executeQuery(indicator,connection,query.getBody())) {
        ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
      }
 else {
        indicator.setComputed(true);
      }
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
    connection.close();
    Set<ModelElement> analyzedElements=elementToIndicator.keySet();
    for (    ModelElement modelElement : analyzedElements) {
      RowCountIndicator rowCount=getRowCountIndicator(modelElement,elementToIndicator);
      NullCountIndicator nullCount=getNullCountIndicator(modelElement,elementToIndicator);
      List<Indicator> list=elementToIndicator.get(modelElement);
      for (      Indicator ind : list) {
        if (rowCount != null) {
          ind.setCount(rowCount.getCount());
        }
        if (nullCount != null) {
          ind.setNullCount(nullCount.getNullCount());
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}","@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    for (    Indicator indicator : indicators) {
      if (indicator instanceof CompositeIndicator) {
        continue;
      }
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
      Expression query=dbms().getInstantiatedExpression(indicator);
      if (query == null || !executeQuery(indicator,connection,query.getBody())) {
        ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
      }
 else {
        indicator.setComputed(true);
      }
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
    connection.close();
    setRowCountAndNullCount(elementToIndicator);
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}",0.8340951868781931
139911,"@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    for (    Indicator indicator : indicators) {
      if (indicator instanceof CompositeIndicator) {
        continue;
      }
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
      Expression query=dbms().getInstantiatedExpression(indicator);
      if (query == null || !executeQuery(indicator,connection,query.getBody())) {
        ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
      }
 else {
        indicator.setComputed(true);
      }
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
    connection.close();
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}","@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<Connection> trc=this.getConnection(analysis);
  if (!trc.isOk()) {
    return traceError(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ trc.getMessage());
  }
  Connection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    for (    Indicator indicator : indicators) {
      if (indicator instanceof CompositeIndicator) {
        continue;
      }
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
      Expression query=dbms().getInstantiatedExpression(indicator);
      if (query == null || !executeQuery(indicator,connection,query.getBody())) {
        ok=traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ ((query == null) ? ""String_Node_Str"" : ""String_Node_Str"" + query.getBody()));
      }
 else {
        indicator.setComputed(true);
      }
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
    connection.close();
    ColumnAnalysisSqlExecutor finalization=new ColumnAnalysisSqlExecutor();
    finalization.setRowCountAndNullCount(elementToIndicator);
  }
 catch (  SQLException e) {
    log.error(e,e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
    ConnectionUtils.closeConnection(connection);
  }
  return ok;
}",0.9568210262828536
139912,"@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
        if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
          currentDataEntity=entity;
        }
 else {
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        }
      }
    }
    if (currentDataEntity != null) {
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=currentIndicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      menu.setVisible(true);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
        if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
          currentDataEntity=entity;
        }
 else {
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        }
      }
    }
    if (currentDataEntity != null) {
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=currentIndicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      menu.setVisible(true);
    }
  }
}",0.9927547898889068
139913,"private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
            if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
 else {
              if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            }
          }
        }
        if (currentDataEntity != null) {
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                Display.getDefault().asyncExec(new Runnable(){
                  public void run(){
                    TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                    String query=itemEntity.getQuery();
                    String editorName=currentIndicator.getName();
                    CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                  }
                }
);
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          menu.setVisible(true);
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
            if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
 else {
              if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            }
          }
        }
        if (currentDataEntity != null) {
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                Display.getDefault().asyncExec(new Runnable(){
                  public void run(){
                    TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                    String query=itemEntity.getQuery();
                    String editorName=currentIndicator.getName();
                    CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                  }
                }
);
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          menu.setVisible(true);
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.9938465745931904
139914,"private void creatChart(Composite parent,String tableA,String tableB){
  CustomerDefaultCategoryDataset dataset=new CustomerDefaultCategoryDataset();
  dataset.addValue(rowMatchingIndicatorA.getNotMatchingValueCount(),NOT_MATCHING,tableA);
  dataset.addValue(rowMatchingIndicatorA.getMatchingValueCount(),MATCHING,tableA);
  PatternChartDataEntity dataEntityA=new PatternChartDataEntity();
  dataEntityA.setLabel(tableA);
  dataEntityA.setIndicator(rowMatchingIndicatorA);
  dataEntityA.setNumMatch(rowMatchingIndicatorA.getMatchingValueCount().toString());
  dataEntityA.setNumNoMatch(rowMatchingIndicatorA.getNotMatchingValueCount().toString());
  dataset.addDataEntity(dataEntityA);
  if (!isHasDeactivatedIndicator) {
    dataset.addValue(rowMatchingIndicatorB.getNotMatchingValueCount(),NOT_MATCHING,tableB);
    dataset.addValue(rowMatchingIndicatorB.getMatchingValueCount(),MATCHING,tableB);
    PatternChartDataEntity dataEntityB=new PatternChartDataEntity();
    dataEntityB.setLabel(tableB);
    dataEntityB.setIndicator(rowMatchingIndicatorB);
    dataEntityB.setNumMatch(rowMatchingIndicatorB.getMatchingValueCount().toString());
    dataEntityB.setNumNoMatch(rowMatchingIndicatorB.getNotMatchingValueCount().toString());
    dataset.addDataEntity(dataEntityB);
  }
  JFreeChart chart=TopChartFactory.createStacked3DBarChart(DefaultMessagesImpl.getString(""String_Node_Str""),dataset,PlotOrientation.HORIZONTAL);
  ChartDecorator.decorate(chart);
  GridData gd=new GridData();
  gd.heightHint=180;
  gd.widthHint=450;
  final ChartComposite chartComp=new ChartComposite(parent,SWT.NONE,chart);
  chartComp.setLayoutData(gd);
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        CustomerDefaultCategoryDataset dataEntity=(CustomerDefaultCategoryDataset)cateEntity.getDataset();
        Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
        chartComp.setMenu(menu);
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
            if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
 else {
              if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            }
          }
        }
        if (currentDataEntity != null) {
          RowMatchExplorer explorer=new RowMatchExplorer();
          final Analysis analysis=getAnalysisHandler().getAnalysis();
          final Indicator indicator=currentDataEntity.getIndicator();
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem menuItem=new MenuItem(menu,SWT.NONE);
            menuItem.setText(itemEntity.getLabel());
            menuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
            menuItem.addSelectionListener(new SelectionAdapter(){
              public void widgetSelected(              SelectionEvent e){
                Display.getDefault().asyncExec(new Runnable(){
                  public void run(){
                    TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                    String query=itemEntity.getQuery();
                    String editorName=indicator.getAnalyzedElement().getName();
                    CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                  }
                }
);
              }
            }
);
          }
        }
        menu.setVisible(true);
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","private void creatChart(Composite parent,String tableA,String tableB){
  CustomerDefaultCategoryDataset dataset=new CustomerDefaultCategoryDataset();
  dataset.addValue(rowMatchingIndicatorA.getNotMatchingValueCount(),NOT_MATCHING,tableA);
  dataset.addValue(rowMatchingIndicatorA.getMatchingValueCount(),MATCHING,tableA);
  PatternChartDataEntity dataEntityA=new PatternChartDataEntity();
  dataEntityA.setLabel(tableA);
  dataEntityA.setIndicator(rowMatchingIndicatorA);
  dataEntityA.setNumMatch(rowMatchingIndicatorA.getMatchingValueCount().toString());
  dataEntityA.setNumNoMatch(rowMatchingIndicatorA.getNotMatchingValueCount().toString());
  dataset.addDataEntity(dataEntityA);
  if (!isHasDeactivatedIndicator) {
    dataset.addValue(rowMatchingIndicatorB.getNotMatchingValueCount(),NOT_MATCHING,tableB);
    dataset.addValue(rowMatchingIndicatorB.getMatchingValueCount(),MATCHING,tableB);
    PatternChartDataEntity dataEntityB=new PatternChartDataEntity();
    dataEntityB.setLabel(tableB);
    dataEntityB.setIndicator(rowMatchingIndicatorB);
    dataEntityB.setNumMatch(rowMatchingIndicatorB.getMatchingValueCount().toString());
    dataEntityB.setNumNoMatch(rowMatchingIndicatorB.getNotMatchingValueCount().toString());
    dataset.addDataEntity(dataEntityB);
  }
  JFreeChart chart=TopChartFactory.createStacked3DBarChart(DefaultMessagesImpl.getString(""String_Node_Str""),dataset,PlotOrientation.HORIZONTAL);
  ChartDecorator.decorate(chart);
  GridData gd=new GridData();
  gd.heightHint=180;
  gd.widthHint=450;
  final ChartComposite chartComp=new ChartComposite(parent,SWT.NONE,chart);
  chartComp.setLayoutData(gd);
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        CustomerDefaultCategoryDataset dataEntity=(CustomerDefaultCategoryDataset)cateEntity.getDataset();
        Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
        chartComp.setMenu(menu);
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
            if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
 else {
              if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            }
          }
        }
        if (currentDataEntity != null) {
          RowMatchExplorer explorer=new RowMatchExplorer();
          final Analysis analysis=getAnalysisHandler().getAnalysis();
          final Indicator indicator=currentDataEntity.getIndicator();
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem menuItem=new MenuItem(menu,SWT.NONE);
            menuItem.setText(itemEntity.getLabel());
            menuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
            menuItem.addSelectionListener(new SelectionAdapter(){
              public void widgetSelected(              SelectionEvent e){
                Display.getDefault().asyncExec(new Runnable(){
                  public void run(){
                    TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                    String query=itemEntity.getQuery();
                    String editorName=indicator.getAnalyzedElement().getName();
                    CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                  }
                }
);
              }
            }
);
          }
        }
        menu.setVisible(true);
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.9948388576671636
139915,"public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    CustomerDefaultCategoryDataset dataEntity=(CustomerDefaultCategoryDataset)cateEntity.getDataset();
    Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
    chartComp.setMenu(menu);
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
        if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
          currentDataEntity=entity;
        }
 else {
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        }
      }
    }
    if (currentDataEntity != null) {
      RowMatchExplorer explorer=new RowMatchExplorer();
      final Analysis analysis=getAnalysisHandler().getAnalysis();
      final Indicator indicator=currentDataEntity.getIndicator();
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem menuItem=new MenuItem(menu,SWT.NONE);
        menuItem.setText(itemEntity.getLabel());
        menuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
        menuItem.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=indicator.getAnalyzedElement().getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
          }
        }
);
      }
    }
    menu.setVisible(true);
  }
}","public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    CustomerDefaultCategoryDataset dataEntity=(CustomerDefaultCategoryDataset)cateEntity.getDataset();
    Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
    chartComp.setMenu(menu);
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
        if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
          currentDataEntity=entity;
        }
 else {
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        }
      }
    }
    if (currentDataEntity != null) {
      RowMatchExplorer explorer=new RowMatchExplorer();
      final Analysis analysis=getAnalysisHandler().getAnalysis();
      final Indicator indicator=currentDataEntity.getIndicator();
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem menuItem=new MenuItem(menu,SWT.NONE);
        menuItem.setText(itemEntity.getLabel());
        menuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
        menuItem.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=indicator.getAnalyzedElement().getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
          }
        }
);
      }
    }
    menu.setVisible(true);
  }
}",0.9904559915164368
139916,"@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
        if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
          currentDataEntity=entity;
        }
 else {
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        }
      }
    }
    if (currentDataEntity != null) {
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=currentIndicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
          }
        }
);
        createPatternFlag++;
      }
      menu.setVisible(true);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
        if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
          currentDataEntity=entity;
        }
 else {
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        }
      }
    }
    if (currentDataEntity != null) {
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=currentIndicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
          }
        }
);
        createPatternFlag++;
      }
      menu.setVisible(true);
    }
  }
}",0.9899170961236836
139917,"private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
            if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
 else {
              if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            }
          }
        }
        if (currentDataEntity != null) {
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                Display.getDefault().asyncExec(new Runnable(){
                  public void run(){
                    TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                    String query=itemEntity.getQuery();
                    String editorName=currentIndicator.getName();
                    CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                  }
                }
);
              }
            }
);
            createPatternFlag++;
          }
          menu.setVisible(true);
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
            if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
 else {
              if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            }
          }
        }
        if (currentDataEntity != null) {
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                Display.getDefault().asyncExec(new Runnable(){
                  public void run(){
                    TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                    String query=itemEntity.getQuery();
                    String editorName=currentIndicator.getName();
                    CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                  }
                }
);
              }
            }
);
            createPatternFlag++;
          }
          menu.setVisible(true);
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.9917233768622402
139918,"private void addMenuOnBubbleChart(ChartEntity chartEntity,Menu menu){
  XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
  DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
  int ind=xyItemEntity.getSeriesIndex();
  final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
  final String seriesK=String.valueOf(seriesKey);
  try {
    final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
    final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
    valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
    String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
    EList<Column> nominalList=indicator.getNominalColumns();
    final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
    MenuItem item=new MenuItem(menu,SWT.PUSH);
    item.setText(""String_Node_Str"");
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=queryString;
            String editorName=ColumnHelper.getColumnSetOwner(column).getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
      }
    }
);
  }
 catch (  Throwable e) {
    log.error(e,e);
  }
}","private void addMenuOnBubbleChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof XYItemEntity) {
    XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
    DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
    final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
    final String seriesK=String.valueOf(seriesKey);
    try {
      final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
      final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
      valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
      String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
      EList<Column> nominalList=indicator.getNominalColumns();
      final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
      MenuItem item=new MenuItem(menu,SWT.PUSH);
      item.setText(""String_Node_Str"");
      item.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
              String query=queryString;
              String editorName=ColumnHelper.getColumnSetOwner(column).getName();
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
        }
      }
);
    }
 catch (    Throwable e) {
      log.error(e,e);
    }
  }
}",0.9473684210526316
139919,"private void addSpecifiedListeners(){
  this.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      setRangeZoomable(event.getTrigger().getButton() == 1);
      setDomainZoomable(event.getTrigger().getButton() == 1);
      if (event.getTrigger().getButton() != 3) {
        return;
      }
      Menu menu=new Menu(getShell(),SWT.POP_UP);
      setMenu(menu);
      MenuItem itemShowInFullScreen=new MenuItem(menu,SWT.PUSH);
      itemShowInFullScreen.setText(""String_Node_Str"");
      itemShowInFullScreen.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              ChartUtils.showChartInFillScreen(createChart(),indicator);
            }
          }
);
        }
      }
);
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator().equals(indicator.eClass())) {
          addMenuOnBubbleChart(chartEntity,menu);
        }
 else         if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator().equals(indicator.eClass())) {
          addMenuOnGantChart(chartEntity,menu);
        }
      }
      menu.setVisible(true);
    }
    private void addMenuOnBubbleChart(    ChartEntity chartEntity,    Menu menu){
      XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
      DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
      int ind=xyItemEntity.getSeriesIndex();
      final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
      final String seriesK=String.valueOf(seriesKey);
      try {
        final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
        final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
        valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
        String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
        EList<Column> nominalList=indicator.getNominalColumns();
        final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(""String_Node_Str"");
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=queryString;
                String editorName=ColumnHelper.getColumnSetOwner(column).getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
          }
        }
);
      }
 catch (      Throwable e) {
        log.error(e,e);
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","private void addSpecifiedListeners(){
  this.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      setRangeZoomable(event.getTrigger().getButton() == 1);
      setDomainZoomable(event.getTrigger().getButton() == 1);
      if (event.getTrigger().getButton() != 3) {
        return;
      }
      Menu menu=new Menu(getShell(),SWT.POP_UP);
      setMenu(menu);
      MenuItem itemShowInFullScreen=new MenuItem(menu,SWT.PUSH);
      itemShowInFullScreen.setText(""String_Node_Str"");
      itemShowInFullScreen.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              ChartUtils.showChartInFillScreen(createChart(),indicator);
            }
          }
);
        }
      }
);
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator().equals(indicator.eClass())) {
          addMenuOnBubbleChart(chartEntity,menu);
        }
 else         if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator().equals(indicator.eClass())) {
          addMenuOnGantChart(chartEntity,menu);
        }
      }
      menu.setVisible(true);
    }
    private void addMenuOnBubbleChart(    ChartEntity chartEntity,    Menu menu){
      if (chartEntity instanceof XYItemEntity) {
        XYItemEntity xyItemEntity=(XYItemEntity)chartEntity;
        DefaultXYZDataset xyzDataSet=(DefaultXYZDataset)xyItemEntity.getDataset();
        final Comparable<?> seriesKey=xyzDataSet.getSeriesKey(xyItemEntity.getSeriesIndex());
        final String seriesK=String.valueOf(seriesKey);
        try {
          final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetUtils.createXYZDatasets(indicator,column);
          final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
          valueAggregator.addSeriesToXYZDataset(xyzDataSet,seriesK);
          String seriesLabel=valueAggregator.getLabels(seriesK).get(xyItemEntity.getItem());
          EList<Column> nominalList=indicator.getNominalColumns();
          final String queryString=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(""String_Node_Str"");
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=queryString;
                  String editorName=ColumnHelper.getColumnSetOwner(column).getName();
                  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
);
        }
 catch (        Throwable e) {
          log.error(e,e);
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.9708436724565755
139920,"private void addMenuOnGantChart(ChartEntity chartEntity,Menu menu){
  CategoryItemEntity itemEntity=(CategoryItemEntity)chartEntity;
  String seriesK=itemEntity.getRowKey().toString();
  String seriesLabel=itemEntity.getColumnKey().toString();
  EList<Column> nominalList=indicator.getNominalColumns();
  final String sql=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
  MenuItem item=new MenuItem(menu,SWT.PUSH);
  item.setText(""String_Node_Str"");
  item.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
          String query=sql;
          String editorName=ColumnHelper.getColumnSetOwner(column).getName();
          CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
        }
      }
);
    }
  }
);
}","private void addMenuOnGantChart(ChartEntity chartEntity,Menu menu){
  if (chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity itemEntity=(CategoryItemEntity)chartEntity;
    String seriesK=itemEntity.getRowKey().toString();
    String seriesLabel=itemEntity.getColumnKey().toString();
    EList<Column> nominalList=indicator.getNominalColumns();
    final String sql=MultiColumnSetValueExplorer.getInstance().getQueryStirng(column,analysis,nominalList,seriesK,seriesLabel);
    MenuItem item=new MenuItem(menu,SWT.PUSH);
    item.setText(""String_Node_Str"");
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=sql;
            String editorName=ColumnHelper.getColumnSetOwner(column).getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
      }
    }
);
  }
}",0.9568378009995456
139921,"private void addItemElements(final List<Column> columns,int index){
  for (int i=0; i < columns.size(); i++) {
    final TdColumn column=(TdColumn)columns.get(i);
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE,index);
    String columnName=column.getName();
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ column.getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,column);
    TreeEditor comboEditor=new TreeEditor(tree);
    tree.setData(DefaultMessagesImpl.getString(""String_Node_Str""),comboEditor);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(column);
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(column.getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),column);
    /** 
 * DOC zhaoxinyi AnalysisColumnNominalIntervalTreeViewer class global comment. Detailled comment
 */
class Selection extends SelectionAdapter {
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),column);
        setDirty(true);
      }
    }
    combo.addSelectionListener(new Selection());
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(column);
        removeItemBranch(treeItem);
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,2);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor});
    delLabelEditor.layout();
    treeItem.setExpanded(true);
  }
  tree.layout();
  tree.redraw();
  this.setDirty(true);
  tree.forceFocus();
}","private void addItemElements(final List<Column> columns,int index){
  for (int i=0; i < columns.size(); i++) {
    final TdColumn column=(TdColumn)columns.get(i);
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE,index);
    columnSetMultiValueList.add(index,column);
    String columnName=column.getName();
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ column.getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,column);
    TreeEditor comboEditor=new TreeEditor(tree);
    tree.setData(DefaultMessagesImpl.getString(""String_Node_Str""),comboEditor);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(column);
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(column.getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),column);
    /** 
 * DOC zhaoxinyi AnalysisColumnNominalIntervalTreeViewer class global comment. Detailled comment
 */
class Selection extends SelectionAdapter {
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),column);
        setDirty(true);
      }
    }
    combo.addSelectionListener(new Selection());
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(column);
        removeItemBranch(treeItem);
      }
    }
);
    delLabelEditor.minimumWidth=delLabel.getImage().getBounds().width;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,2);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor});
    delLabelEditor.layout();
    treeItem.setExpanded(true);
  }
  tree.layout();
  tree.redraw();
  this.setDirty(true);
  tree.forceFocus();
}",0.9914560988911107
139922,"@Override public void dropColumns(List<Column> columns,int index){
  this.columnSetMultiValueList.addAll(index,columns);
  this.addElements(columns,index);
}","@Override public void dropColumns(List<Column> columns,int index){
  this.addElements(columns,index);
}",0.7923076923076923
139923,"/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(120);
  column2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  column2.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(80);
  column4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  parent.layout();
  createTreeMenu(newTree,false);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  Transfer[] types=new Transfer[]{transfer};
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  final DragSource source=new DragSource(newTree,operations);
  source.setTransfer(types);
  final TreeItem[] dragSourceItem=new TreeItem[1];
  source.addDragListener(new DragSourceListener(){
    public void dragStart(    DragSourceEvent event){
      TreeItem[] selection=newTree.getSelection();
      dragSourceItem[0]=selection[0];
      if (selection.length > 0) {
        event.doit=true;
        transfer.setSelection(new StructuredSelection(selection[0].getData(COLUMN_INDICATOR_KEY)));
        getColumnSetMultiValueList().remove(selection[0].getData(COLUMN_INDICATOR_KEY));
      }
 else {
        event.doit=false;
      }
    }
    public void dragSetData(    DragSourceEvent event){
      event.data=dragSourceItem[0];
    }
    public void dragFinished(    DragSourceEvent event){
      if (event.detail == DND.DROP_MOVE) {
        removeItemBranch(dragSourceItem[0]);
        tree.forceFocus();
      }
      dragSourceItem[0]=null;
    }
  }
);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  return newTree;
}","/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(120);
  column2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  column2.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(80);
  column4.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  parent.layout();
  createTreeMenu(newTree,false);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  addSourceDND(newTree);
  addTargetDND(newTree);
  addTreeListener(newTree);
  return newTree;
}",0.6262108262108262
139924,"public void setElements(final List<Column> columns){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(this);
  this.columnSetMultiValueList=columns;
  addItemElements(columns,0);
}","public void setElements(final List<Column> columns){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(this);
  addItemElements(columns,0);
}",0.8947368421052632
139925,"/** 
 * DOC qzhang Comment method ""installDND"".
 */
public static void installDND(final Tree targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  DropTargetListener dndListener=new TreeDropTargetEffect(targetControl){
    ISelectionReceiver receiver=null;
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
      Object object=selection.getFirstElement();
      if (object instanceof IFile) {
        receiver=new PatternReceiver();
      }
      if (object instanceof TdColumn) {
        receiver=new ColumnReceiver();
      }
      if (receiver == null) {
        event.detail=DND.DROP_NONE;
      }
 else {
        event.feedback=DND.FEEDBACK_EXPAND;
        receiver.doDropValidation(event,commonViewer);
      }
    }
    @Override public void dragOver(    DropTargetEvent event){
      super.dragOver(event);
      receiver.doDropValidation(event,commonViewer);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void drop(    DropTargetEvent event){
      int index=targetControl.getItemCount();
      super.drop(event);
      if (event.item == null) {
      }
 else {
        TreeItem item=(TreeItem)event.item;
        TreeItem[] items=targetControl.getItems();
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
      }
      receiver.drop(event,commonViewer,index);
    }
  }
;
  dropTarget.addDropListener(dndListener);
}","/** 
 * DOC qzhang Comment method ""installDND"".
 */
public static void installDND(final Tree targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  DropTargetListener dndListener=new TreeDropTargetEffect(targetControl){
    ISelectionReceiver receiver=null;
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
      Object object=selection.getFirstElement();
      if (object instanceof IFile) {
        receiver=new PatternReceiver();
      }
      if (object instanceof TdColumn) {
        receiver=new ColumnReceiver();
      }
      if (receiver == null) {
        event.detail=DND.DROP_NONE;
      }
 else {
        event.feedback=DND.FEEDBACK_EXPAND;
        receiver.doDropValidation(event,commonViewer);
      }
    }
    @Override public void dragOver(    DropTargetEvent event){
      super.dragOver(event);
      receiver.doDropValidation(event,commonViewer);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void drop(    DropTargetEvent event){
      int index=targetControl.getItemCount();
      super.drop(event);
      if (event.item == null) {
        index=0;
      }
 else {
        TreeItem item=(TreeItem)event.item;
        TreeItem[] items=targetControl.getItems();
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
      }
      receiver.drop(event,commonViewer,index);
    }
  }
;
  dropTarget.addDropListener(dndListener);
}",0.9959436888570748
139926,"private void showHelp(){
  getShell().setFocus();
  IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorHelpContextID());
  IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
  helpSystem.displayHelp(context);
  ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
  if (lastActiveInstance != null) {
    lastActiveInstance.showURL(href);
  }
}","private void showHelp(){
  getShell().setFocus();
  IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorHelpContextID());
  IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
  if (href.endsWith(HelpPlugin.HELP_FILE_SUFFIX)) {
    helpSystem.displayHelp(context);
    ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
    if (lastActiveInstance != null) {
      lastActiveInstance.showURL(href);
    }
  }
}",0.9020044543429844
139927,"public void showHelp(){
  String href=getFormEnum().getHelpHref();
  ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
  if (lastActiveInstance != null) {
    lastActiveInstance.showURL(href);
  }
}","public void showHelp(){
  String href=getFormEnum().getHelpHref();
  ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
  if (lastActiveInstance != null && href.endsWith(HelpPlugin.HELP_FILE_SUFFIX)) {
    lastActiveInstance.showURL(href);
  }
}",0.9076305220883534
139928,"/** 
 * Creates a new project resource with the special name.MOD mzhao 2009-03-18 make this method as public.For  {@link org.talend.dataprofiler.core.migration.impl.TDCPFolderMergeTask} use.
 * @return the created project resource, or <code>null</code> if the project was not created
 * @throws InterruptedException
 * @throws InvocationTargetException
 * @throws CoreException
 */
public IProject createNewProject(String projectName,Shell shell) throws InvocationTargetException, InterruptedException, CoreException {
  final Shell currentShell=shell;
  final IProject newProjectHandle=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProjectDescription description=workspace.newProjectDescription(newProjectHandle.getName());
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      CreateProjectOperation op=new CreateProjectOperation(description,DefaultMessagesImpl.getString(""String_Node_Str""));
      try {
        PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op,monitor,WorkspaceUndoUtil.getUIInfoAdapter(currentShell));
      }
 catch (      ExecutionException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  if (!newProjectHandle.exists()) {
    ProgressUI.popProgressDialog(op,shell);
  }
  newProjectHandle.setPersistentProperty(PROJECT_TDQ_KEY,PROJECT_TDQ_PROPERTY);
  return newProjectHandle;
}","/** 
 * Creates a new project resource with the special name.MOD mzhao 2009-03-18 make this method as public.For  {@link org.talend.dataprofiler.core.migration.impl.TDCPFolderMergeTask} use.
 * @return the created project resource, or <code>null</code> if the project was not created
 * @throws InterruptedException
 * @throws InvocationTargetException
 * @throws CoreException
 */
public IProject createNewProject(String projectName) throws InvocationTargetException, InterruptedException, CoreException {
  final IProject newProjectHandle=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProjectDescription description=workspace.newProjectDescription(newProjectHandle.getName());
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      CreateProjectOperation op=new CreateProjectOperation(description,DefaultMessagesImpl.getString(""String_Node_Str""));
      try {
        PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op,monitor,WorkspaceUndoUtil.getUIInfoAdapter(null));
      }
 catch (      ExecutionException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  if (!newProjectHandle.exists()) {
    ProgressUI.popProgressDialog(op);
  }
  newProjectHandle.setPersistentProperty(PROJECT_TDQ_KEY,PROJECT_TDQ_PROPERTY);
  return newProjectHandle;
}",0.9787798408488064
139929,"public boolean createDQStructure(){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject rootProject=this.createNewProject(org.talend.dataquality.PluginConstant.getRootProjectName(),shell);
    IFolder dataProfilingFolder=this.createNewFoler(rootProject,getDataProfiling());
    IFolder createNewFoler=this.createNewFoler(dataProfilingFolder,ANALYSIS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,ANALYSIS_FOLDER_PROPERTY);
    createNewFoler=this.createNewFoler(dataProfilingFolder,REPORTS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,REPORT_FOLDER_PROPERTY);
    IFolder librariesFoler=this.createNewFoler(rootProject,getLibraries());
    createNewFoler=this.createNewFoler(librariesFoler,PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,PATTERNS_FOLDER_PROPERTY);
    WorkspaceVersionHelper.storeVersion();
    this.copyFilesToFolder(plugin,PATTERN_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,SQL_PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SQLPATTERNS_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,SQL_LIKE_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,SOURCE_FILES);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SOURCEFILES_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,DEMO_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,DQ_RULES);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,DQRULES_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,DQ_RULES_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,EXCHANGE);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,EXCHANGE_FOLDER_PROPERTY);
    createNewFoler.setPersistentProperty(DQStructureManager.NO_SUBFOLDER_KEY,DQStructureManager.NO_SUBFOLDER_PROPERTY);
    checkJRXMLFolderExist();
    IFolder metadataFolder=this.createNewFoler(rootProject,getMetaData());
    createNewFoler=this.createNewFoler(metadataFolder,DB_CONNECTIONS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,DBCONNECTION_FOLDER_PROPERTY);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}","public boolean createDQStructure(){
  Plugin plugin=CorePlugin.getDefault();
  try {
    IProject rootProject=createNewProject(org.talend.dataquality.PluginConstant.getRootProjectName());
    IFolder dataProfilingFolder=this.createNewFoler(rootProject,getDataProfiling());
    IFolder createNewFoler=this.createNewFoler(dataProfilingFolder,ANALYSIS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,ANALYSIS_FOLDER_PROPERTY);
    createNewFoler=this.createNewFoler(dataProfilingFolder,REPORTS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,REPORT_FOLDER_PROPERTY);
    IFolder librariesFoler=this.createNewFoler(rootProject,getLibraries());
    createNewFoler=this.createNewFoler(librariesFoler,PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,PATTERNS_FOLDER_PROPERTY);
    WorkspaceVersionHelper.storeVersion();
    this.copyFilesToFolder(plugin,PATTERN_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,SQL_PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SQLPATTERNS_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,SQL_LIKE_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,SOURCE_FILES);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SOURCEFILES_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,DEMO_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,DQ_RULES);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,DQRULES_FOLDER_PROPERTY);
    this.copyFilesToFolder(plugin,DQ_RULES_PATH,true,createNewFoler,null);
    createNewFoler=this.createNewFoler(librariesFoler,EXCHANGE);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,EXCHANGE_FOLDER_PROPERTY);
    createNewFoler.setPersistentProperty(DQStructureManager.NO_SUBFOLDER_KEY,DQStructureManager.NO_SUBFOLDER_PROPERTY);
    checkJRXMLFolderExist();
    IFolder metadataFolder=this.createNewFoler(rootProject,getMetaData());
    createNewFoler=this.createNewFoler(metadataFolder,DB_CONNECTIONS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,DBCONNECTION_FOLDER_PROPERTY);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}",0.9822970639032816
139930,"public void run(IProgressMonitor monitor) throws InvocationTargetException {
  CreateProjectOperation op=new CreateProjectOperation(description,DefaultMessagesImpl.getString(""String_Node_Str""));
  try {
    PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op,monitor,WorkspaceUndoUtil.getUIInfoAdapter(currentShell));
  }
 catch (  ExecutionException e) {
    throw new InvocationTargetException(e);
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException {
  CreateProjectOperation op=new CreateProjectOperation(description,DefaultMessagesImpl.getString(""String_Node_Str""));
  try {
    PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op,monitor,WorkspaceUndoUtil.getUIInfoAdapter(null));
  }
 catch (  ExecutionException e) {
    throw new InvocationTargetException(e);
  }
}",0.986046511627907
139931,"public boolean execute(){
  try {
    IProject rootProject=DQStructureManager.getInstance().createNewProject(org.talend.dataquality.PluginConstant.getRootProjectName(),PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
    rootProject.delete(true,true,new NullProgressMonitor());
    rootProject=DQStructureManager.getInstance().createNewProject(org.talend.dataquality.PluginConstant.getRootProjectName(),PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
    IResource[] resources=ResourcesPlugin.getWorkspace().getRoot().members();
    if (resources != null && resources.length > 0) {
      for (      IResource resource : resources) {
        if (resource instanceof IProject && !resource.getName().equals(org.talend.dataquality.PluginConstant.getRootProjectName())) {
          IPath destination=null;
          IFolder prefixFolder=rootProject.getFolder(DQStructureManager.PREFIX_TDQ + resource.getName());
          prefixFolder.create(IResource.FORCE,true,new NullProgressMonitor());
          for (          IResource rs : ((IProject)resource).members()) {
            if (rs.getName().equals(""String_Node_Str"")) {
              continue;
            }
            destination=prefixFolder.getFolder(rs.getName()).getFullPath();
            rs.copy(destination,IResource.FORCE,new NullProgressMonitor());
          }
          resource.delete(true,new NullProgressMonitor());
        }
      }
    }
  }
 catch (  InvocationTargetException e) {
    logger.error(e,e);
  }
catch (  InterruptedException e) {
    logger.error(e,e);
  }
catch (  CoreException e) {
    logger.error(e,e);
  }
  return false;
}","public boolean execute(){
  try {
    IProject rootProject=DQStructureManager.getInstance().createNewProject(org.talend.dataquality.PluginConstant.getRootProjectName());
    rootProject.delete(true,true,new NullProgressMonitor());
    rootProject=DQStructureManager.getInstance().createNewProject(org.talend.dataquality.PluginConstant.getRootProjectName());
    IResource[] resources=ResourcesPlugin.getWorkspace().getRoot().members();
    if (resources != null && resources.length > 0) {
      for (      IResource resource : resources) {
        if (resource instanceof IProject && !resource.getName().equals(org.talend.dataquality.PluginConstant.getRootProjectName())) {
          IPath destination=null;
          IFolder prefixFolder=rootProject.getFolder(DQStructureManager.PREFIX_TDQ + resource.getName());
          prefixFolder.create(IResource.FORCE,true,new NullProgressMonitor());
          for (          IResource rs : ((IProject)resource).members()) {
            if (rs.getName().equals(""String_Node_Str"")) {
              continue;
            }
            destination=prefixFolder.getFolder(rs.getName()).getFullPath();
            rs.copy(destination,IResource.FORCE,new NullProgressMonitor());
          }
          resource.delete(true,new NullProgressMonitor());
        }
      }
    }
  }
 catch (  InvocationTargetException e) {
    logger.error(e,e);
  }
catch (  InterruptedException e) {
    logger.error(e,e);
  }
catch (  CoreException e) {
    logger.error(e,e);
  }
  return false;
}",0.959493670886076
139932,"private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    final TdColumn column=columnIndicator.getTdColumn();
    IRunnableWithProgress rwp=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",column.getName()),IProgressMonitor.UNKNOWN);
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
            for (            EIndicatorChartType chartType : indicatorComposite.keySet()) {
              List<IndicatorUnit> units=indicatorComposite.get(chartType);
              if (!units.isEmpty()) {
                IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
                ChartWithData chartData=new ChartWithData(chartType,chartTypeState.getChart(),chartTypeState.getDataEntity());
                ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
                subComp.setText(chartData.getChartType().getLiteral());
                subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
                final Composite composite=toolkit.createComposite(subComp,SWT.NULL);
                composite.setLayout(new GridLayout(2,false));
                composite.setLayoutData(new GridData(GridData.FILL_BOTH));
                Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
                TableViewer tableviewer=chartTypeState.getTableForm(composite);
                tableviewer.setInput(chartData);
                DataExplorer dataExplorer=chartTypeState.getDataExplorer();
                ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
                JFreeChart chart=chartTypeState.getChart();
                ChartDecorator.decorate(chart);
                if (chart != null) {
                  ChartComposite cc=new ChartComposite(composite,SWT.NONE,chart,true);
                  GridData gd=new GridData();
                  gd.widthHint=550;
                  gd.heightHint=250;
                  cc.setLayoutData(gd);
                  addMouseListenerForChart(cc,dataExplorer,analysis);
                }
                subComp.setClient(composite);
                subComp.addExpansionListener(new ExpansionAdapter(){
                  @Override public void expansionStateChanged(                  ExpansionEvent e){
                    form.reflow(true);
                  }
                }
);
              }
            }
          }
        }
);
        monitor.done();
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,false,rwp);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
    for (    EIndicatorChartType chartType : indicatorComposite.keySet()) {
      List<IndicatorUnit> units=indicatorComposite.get(chartType);
      if (!units.isEmpty()) {
        IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
        ChartWithData chartData=new ChartWithData(chartType,chartTypeState.getChart(),chartTypeState.getDataEntity());
        ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
        subComp.setText(chartData.getChartType().getLiteral());
        subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
        final Composite composite=toolkit.createComposite(subComp,SWT.NULL);
        composite.setLayout(new GridLayout(2,false));
        composite.setLayoutData(new GridData(GridData.FILL_BOTH));
        Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
        TableViewer tableviewer=chartTypeState.getTableForm(composite);
        tableviewer.setInput(chartData);
        DataExplorer dataExplorer=chartTypeState.getDataExplorer();
        ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
        JFreeChart chart=chartTypeState.getChart();
        ChartDecorator.decorate(chart);
        if (chart != null) {
          ChartComposite cc=new ChartComposite(composite,SWT.NONE,chart,true);
          GridData gd=new GridData();
          gd.widthHint=550;
          gd.heightHint=250;
          cc.setLayoutData(gd);
          addMouseListenerForChart(cc,dataExplorer,analysis);
        }
        subComp.setClient(composite);
        subComp.addExpansionListener(new ExpansionAdapter(){
          @Override public void expansionStateChanged(          ExpansionEvent e){
            form.reflow(true);
          }
        }
);
      }
    }
  }
}",0.8236412010642341
139933,"protected void createResultSection(Composite parent){
  resultSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),true,null);
  Composite sectionClient=toolkit.createComposite(resultSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  for (  final ColumnIndicator columnIndicator : masterPage.getTreeViewer().getColumnIndicator()) {
    ExpandableComposite exComp=toolkit.createExpandableComposite(sectionClient,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",columnIndicator.getTdColumn().getName()));
    exComp.setLayout(new GridLayout());
    exComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setClient(comp);
    createResultDataComposite(comp,columnIndicator);
    exComp.addExpansionListener(new ExpansionAdapter(){
      public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
  resultSection.setClient(sectionClient);
}","protected void createResultSection(Composite parent){
  resultSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),true,null);
  final Composite sectionClient=toolkit.createComposite(resultSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  final ColumnIndicator[] columnIndicatores=masterPage.getTreeViewer().getColumnIndicator();
  IRunnableWithProgress rwp=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",columnIndicatores.length);
      for (      final ColumnIndicator columnIndicator : columnIndicatores) {
        monitor.subTask(columnIndicator.getTdColumn().getName());
        ExpandableComposite exComp=toolkit.createExpandableComposite(sectionClient,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
        exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",columnIndicator.getTdColumn().getName()));
        exComp.setLayout(new GridLayout());
        exComp.setLayoutData(new GridData(GridData.FILL_BOTH));
        final Composite comp=toolkit.createComposite(exComp);
        comp.setLayout(new GridLayout());
        comp.setLayoutData(new GridData(GridData.FILL_BOTH));
        exComp.setClient(comp);
        createResultDataComposite(comp,columnIndicator);
        exComp.addExpansionListener(new ExpansionAdapter(){
          public void expansionStateChanged(          ExpansionEvent e){
            form.reflow(true);
          }
        }
);
        monitor.worked(1);
      }
      monitor.done();
    }
  }
;
  try {
    ProgressUI.popProgressDialog(rwp,false,true);
  }
 catch (  Exception ex) {
    log.error(ex,ex);
  }
  resultSection.setClient(sectionClient);
}",0.7550047664442326
139934,"public void runProgressMonitorDialog(final boolean validated,final String language){
  updateCompleted=false;
  ProgressMonitorDialog progressDialog=new ProgressMonitorDialog(mainComposite.getShell());
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor){
      try {
        String version=getCurrentVersion(true);
        List<BabiliInfo> bList=BabiliUpdateUtil.getBabiliList(language,validated,version);
        for (        BabiliInfo info : bList) {
          String pluginId=info.getFilepath();
          int pos=pluginId.indexOf(""String_Node_Str"");
          if (pos != -1) {
            pluginId=pluginId.substring(0,pos);
            if (pluginId.endsWith(""String_Node_Str"")) {
              pluginId=pluginId.replace(""String_Node_Str"",""String_Node_Str"");
            }
          }
          BabiliTool.storeBabiliTranslation(info.getKey(),pluginId,info.getLabel());
          updateCompleted=true;
        }
        if (monitor.isCanceled()) {
          try {
            throw new InterruptedException(DefaultMessagesImpl.getString(""String_Node_Str""));
          }
 catch (          InterruptedException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 catch (      Exception e1) {
        ExceptionHandler.process(e1);
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    progressDialog.run(true,true,runnable);
  }
 catch (  InvocationTargetException e1) {
    ExceptionHandler.process(e1);
  }
catch (  InterruptedException e1) {
    ExceptionHandler.process(e1);
  }
  if (updateCompleted) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialog.openInformation(Display.getDefault().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
    }
);
  }
}","public void runProgressMonitorDialog(final boolean validated,final String language){
  updateCompleted=false;
  BabiliTool.clear();
  ProgressMonitorDialog progressDialog=new ProgressMonitorDialog(mainComposite.getShell());
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor){
      try {
        String version=getCurrentVersion(true);
        List<BabiliInfo> bList=BabiliUpdateUtil.getBabiliList(language,validated,version,monitor);
        for (        BabiliInfo info : bList) {
          BabiliUpdateUtil.checkProcessCancel(monitor);
          String pluginId=info.getFilepath();
          int pos=pluginId.indexOf(""String_Node_Str"");
          if (pos != -1) {
            pluginId=pluginId.substring(0,pos);
            if (pluginId.endsWith(""String_Node_Str"")) {
              pluginId=pluginId.replace(""String_Node_Str"",""String_Node_Str"");
            }
          }
          BabiliTool.storeBabiliTranslation(info.getKey(),pluginId,info.getLabel());
          updateCompleted=true;
        }
      }
 catch (      ImportBabiliCancelException e) {
        updateCompleted=false;
      }
catch (      Exception e1) {
        ExceptionHandler.process(e1);
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    progressDialog.run(true,true,runnable);
  }
 catch (  InvocationTargetException e1) {
    ExceptionHandler.process(e1);
  }
catch (  InterruptedException e1) {
    ExceptionHandler.process(e1);
  }
  if (updateCompleted) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialog.openInformation(Display.getDefault().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
    }
);
  }
 else {
    BabiliTool.clear();
  }
}",0.6023643202579259
139935,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new ColumnTreeMenuProvider(tree).createTreeMenu();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem item=tree.getSelection()[0];
      if (item != null) {
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
        if (columnobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (columnobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        tree.setMenu(null);
      }
 else {
        new ColumnTreeMenuProvider(tree).createTreeMenu();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] selection=tree.getSelection();
      if (selection.length == 0) {
        return;
      }
      TreeItem item=selection[0];
      if (item != null) {
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
        if (columnobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (columnobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}",0.971182332345812
139936,"@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem item=tree.getSelection()[0];
  if (item != null) {
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
    if (columnobj != null && indicatorobj == null) {
      openIndicatorSelectDialog(null);
    }
 else     if (columnobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(null,item);
    }
  }
}","@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem[] selection=tree.getSelection();
  if (selection.length == 0) {
    return;
  }
  TreeItem item=selection[0];
  if (item != null) {
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
    if (columnobj != null && indicatorobj == null) {
      openIndicatorSelectDialog(null);
    }
 else     if (columnobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(null,item);
    }
  }
}",0.905894519131334
139937,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  String s=""String_Node_Str"";
  Label nameLab=new Label(container,SWT.NONE);
  if (type != null) {
switch (type) {
case SQL_LIKE:
      s=""String_Node_Str"";
default :
  }
}
nameLab.setText(s);
expressionText=new Text(container,SWT.BORDER);
expressionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
setControl(container);
expressionText.setText(expression == null ? PluginConstant.EMPTY_STRING : expression);
nameLab=new Label(container,SWT.NONE);
nameLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
String[] types=PatternLanguageType.getAllLanguageTypes();
comboLang=new Combo(container,SWT.BORDER);
comboLang.setItems(types);
comboLang.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
if (types.length > 0 && language == null) {
  comboLang.setText(PatternLanguageType.ALL_DATABASE_TYPE.getName());
  PatternParameter parameter=(PatternParameter)getParameter();
  parameter.setLanguage(PatternLanguageType.ALL_DATABASE_TYPE.getName());
}
 else {
  comboLang.setText(language);
}
addHelpSurpport();
addListeners();
if (!checkFieldsValue()) {
  this.setPageComplete(false);
}
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  String s=""String_Node_Str"";
  Label nameLab=new Label(container,SWT.NONE);
  if (type != null) {
switch (type) {
case SQL_LIKE:
      s=""String_Node_Str"";
default :
  }
}
nameLab.setText(s);
expressionText=new Text(container,SWT.BORDER);
expressionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
setControl(container);
expressionText.setText(expression == null ? PluginConstant.EMPTY_STRING : expression);
nameLab=new Label(container,SWT.NONE);
nameLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
String[] types=PatternLanguageType.getAllLanguageTypes();
comboLang=new Combo(container,SWT.BORDER);
comboLang.setItems(types);
comboLang.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
if (types.length > 0 && language == null) {
  language=PatternLanguageType.ALL_DATABASE_TYPE.getName();
}
comboLang.setText(language);
PatternParameter parameter=(PatternParameter)getParameter();
parameter.setLanguage(language);
parameter.setExpression(expression);
addHelpSurpport();
addListeners();
if (!checkFieldsValue()) {
  this.setPageComplete(false);
}
}",0.902668759811617
139938,"@Override public void run(){
  PatternParameter parameter=new PatternParameter();
  FolderProvider folderProvider=new FolderProvider();
  folderProvider.setFolderResource(folder);
  parameter.setFolderProvider(folderProvider);
  CreatePatternWizard fileWizard;
  if (this.expression != null && this.lanuage != null) {
    fileWizard=(CreatePatternWizard)WizardFactory.createPatternWizard(type,parameter,expression,lanuage);
  }
 else {
    fileWizard=(CreatePatternWizard)WizardFactory.createPatternWizard(type,parameter);
  }
  IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getPatternHelpContextID());
  IHelpResource[] relatedTopics=context.getRelatedTopics();
  String href=relatedTopics[0].getHref();
switch (type) {
case SQL_LIKE:
    href=relatedTopics[1].getHref();
  break;
default :
break;
}
WizardDialog dialog=new OpeningHelpWizardDialog(Display.getDefault().getActiveShell(),fileWizard,href);
fileWizard.setWindowTitle(getText());
dialog.open();
}","@Override public void run(){
  if (folder.exists()) {
    PatternParameter parameter=new PatternParameter();
    FolderProvider folderProvider=new FolderProvider();
    folderProvider.setFolderResource(folder);
    parameter.setFolderProvider(folderProvider);
    CreatePatternWizard fileWizard;
    if (this.expression != null && this.lanuage != null) {
      fileWizard=(CreatePatternWizard)WizardFactory.createPatternWizard(type,parameter,expression,lanuage);
    }
 else {
      fileWizard=(CreatePatternWizard)WizardFactory.createPatternWizard(type,parameter);
    }
    IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getPatternHelpContextID());
    IHelpResource[] relatedTopics=context.getRelatedTopics();
    String href=relatedTopics[0].getHref();
switch (type) {
case SQL_LIKE:
      href=relatedTopics[1].getHref();
    break;
default :
  break;
}
WizardDialog dialog=new OpeningHelpWizardDialog(Display.getDefault().getActiveShell(),fileWizard,href);
fileWizard.setWindowTitle(getText());
dialog.open();
}
}",0.9706613625062158
139939,"public static void createPattern(Analysis analysis,MenuItemEntity itemEntity,final PatternTransformer pattTransformer){
  String language=pattTransformer.getDbmsLanguage().getDbmsName();
  String query=itemEntity.getQuery();
  String regex=pattTransformer.getRegexp(query.substring(query.indexOf('=') + 3,query.lastIndexOf(')') - 1));
  new CreatePatternAction(ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.getLibraries()).getFolder(DQStructureManager.PATTERNS),ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",language).run();
}","public static void createPattern(Analysis analysis,MenuItemEntity itemEntity,final PatternTransformer pattTransformer){
  String language=pattTransformer.getDbmsLanguage().getDbmsName();
  String query=itemEntity.getQuery();
  String regex=pattTransformer.getRegexp(query.substring(query.indexOf('=') + 3,query.lastIndexOf(')') - 1));
  IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getProject(org.talend.dataquality.PluginConstant.getRootProjectName()).getFolder(DQStructureManager.getLibraries()).getFolder(DQStructureManager.PATTERNS);
  new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",language).run();
}",0.8186946011281225
139940,"/** 
 * DOC scorreia Comment method ""createWhereClause"".
 * @param tableNameB
 * @param columnSetB
 * @return
 */
private String createWhereClause(String tableNameB,EList<Column> columnSetB){
  StringBuilder builder=new StringBuilder();
  int size=columnSetB.size();
  for (int i=0; i < size; i++) {
    builder.append(tableNameB).append('.').append(getQuotedColumnName(columnSetB.get(i))).append(dbms().isNull());
    if (i != size - 1) {
      builder.append(dbms().and());
    }
  }
  return builder.toString();
}","/** 
 * DOC scorreia Comment method ""createWhereClause"".
 * @param tableNameB
 * @param columnSetB
 * @return
 */
private String createWhereClause(String tableNameB,EList<Column> columnSetB){
  final String isNull=dbms().isNull();
  final String and=dbms().and();
  return conditionOnAllColumns(tableNameB,columnSetB,isNull,and);
}",0.5147579693034239
139941,"/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private boolean instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getRowMatchingIndicator().equals(indicator.eClass())) {
    RowMatchingIndicator rowMatchingIndicator=(RowMatchingIndicator)indicator;
    EList<Column> columnSetA=rowMatchingIndicator.getColumnSetA();
    EList<Column> columnSetB=rowMatchingIndicator.getColumnSetB();
    if (columnSetA.size() != columnSetB.size()) {
      return traceError(""String_Node_Str"");
    }
    IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
    Expression sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
    boolean useNulls=true;
    Expression instantiatedSqlExpression=createInstantiatedSqlExpression(sqlGenericExpression,columnSetA,columnSetB,useNulls);
    indicator.setInstantiatedExpression(instantiatedSqlExpression);
    return true;
  }
  return traceError(""String_Node_Str"" + indicator.getName());
}","/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private boolean instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getRowMatchingIndicator().equals(indicator.eClass())) {
    RowMatchingIndicator rowMatchingIndicator=(RowMatchingIndicator)indicator;
    EList<Column> columnSetA=rowMatchingIndicator.getColumnSetA();
    EList<Column> columnSetB=rowMatchingIndicator.getColumnSetB();
    if (columnSetA.size() != columnSetB.size()) {
      return traceError(""String_Node_Str"");
    }
    IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
    Expression sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
    boolean useNulls=false;
    Expression instantiatedSqlExpression=createInstantiatedSqlExpression(sqlGenericExpression,columnSetA,columnSetB,useNulls);
    indicator.setInstantiatedExpression(instantiatedSqlExpression);
    return true;
  }
  return traceError(""String_Node_Str"" + indicator.getName());
}",0.9965191447041272
139942,"/** 
 * DOC scorreia Comment method ""createInstantiatedSqlExpression"".
 * @param sqlGenericExpression
 * @param columnSetA
 * @param columnSetB
 * @param useNulls
 * @return
 */
private Expression createInstantiatedSqlExpression(Expression sqlGenericExpression,EList<Column> columnSetA,EList<Column> columnSetB,boolean useNulls){
  String tableNameA=getTableName(columnSetA);
  String tableNameB=getTableName(columnSetB);
  String genericSQL=sqlGenericExpression.getBody();
  String joinClause=createJoinClause(tableNameA,columnSetA,tableNameB,columnSetB,useNulls);
  String whereClause=createWhereClause(tableNameB,columnSetB);
  String instantiatedSQL=dbms().fillGenericQueryWithJoin(genericSQL,tableNameA,tableNameB,joinClause,whereClause);
  Expression instantiatedExpression=CoreFactory.eINSTANCE.createExpression();
  instantiatedExpression.setLanguage(sqlGenericExpression.getLanguage());
  instantiatedExpression.setBody(instantiatedSQL);
  return instantiatedExpression;
}","/** 
 * DOC scorreia Comment method ""createInstantiatedSqlExpression"".
 * @param sqlGenericExpression
 * @param columnSetA
 * @param columnSetB
 * @param useNulls
 * @return
 */
private Expression createInstantiatedSqlExpression(Expression sqlGenericExpression,EList<Column> columnSetA,EList<Column> columnSetB,boolean useNulls){
  String tableNameA=getTableName(columnSetA);
  String tableNameB=getTableName(columnSetB);
  String genericSQL=sqlGenericExpression.getBody();
  String joinClause=createJoinClause(tableNameA,columnSetA,tableNameB,columnSetB,useNulls);
  String whereClause=createWhereClause(tableNameB,columnSetB);
  if (useNulls) {
    whereClause+=dbms().and() + '(' + createNotNullCondition(tableNameA,columnSetA)+ ')';
  }
  String instantiatedSQL=dbms().fillGenericQueryWithJoin(genericSQL,tableNameA,tableNameB,joinClause,whereClause);
  Expression instantiatedExpression=CoreFactory.eINSTANCE.createExpression();
  instantiatedExpression.setLanguage(sqlGenericExpression.getLanguage());
  instantiatedExpression.setBody(instantiatedSQL);
  return instantiatedExpression;
}",0.9459980713596914
139943,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<Column> columnSetMultiValueList=treeViewer.getColumnSetMultiValueList();
  TdDataProvider tdProvider=null;
  if (columnSetMultiValueList != null) {
    if (columnSetMultiValueList.size() != 0) {
      tdProvider=DataProviderHelper.getTdDataProvider(SwitchHelpers.COLUMN_SWITCH.doSwitch(columnSetMultiValueList.get(0)));
      analysis.getContext().setConnection(tdProvider);
      columnSetMultiIndicator.getAnalyzedColumns().addAll(columnSetMultiValueList);
    }
    correlationAnalysisHandler.addIndicator(columnSetMultiValueList,columnSetMultiIndicator);
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      PrvResourceFileHelper.getInstance().save(tdProvider);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<Column> columnList=treeViewer.getColumnSetMultiValueList();
  TdDataProvider tdProvider=null;
  if (columnList != null && columnList.size() != 0) {
    tdProvider=DataProviderHelper.getTdDataProvider(SwitchHelpers.COLUMN_SWITCH.doSwitch(columnList.get(0)));
    analysis.getContext().setConnection(tdProvider);
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnList);
    correlationAnalysisHandler.addIndicator(columnList,columnSetMultiIndicator);
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      PrvResourceFileHelper.getInstance().save(tdProvider);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.8036937742031576
139944,"@Override protected ReturnCode canSave(){
  String message=null;
  List<Column> columnSetMultiValueList=getTreeViewer().getColumnSetMultiValueList();
  if (!columnSetMultiValueList.isEmpty()) {
    if (!ColumnHelper.isFromSameTable(columnSetMultiValueList)) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
    List<Column> columns=treeViewer.getColumnSetMultiValueList();
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      for (int i=0; i < columns.size(); i++) {
        TdColumn tdColumn=(TdColumn)columns.get(i);
        if (Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
          message=DefaultMessagesImpl.getString(""String_Node_Str"");
          break;
        }
      }
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      for (int i=0; i < columns.size(); i++) {
        TdColumn tdColumn=(TdColumn)columns.get(i);
        if (Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          message=DefaultMessagesImpl.getString(""String_Node_Str"");
          break;
        }
      }
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      for (int i=0; i < columns.size(); i++) {
        TdColumn tdColumn=(TdColumn)columns.get(i);
        if (correlationAnalysisHandler.getDatamingType(tdColumn) != DataminingType.NOMINAL) {
          message=""String_Node_Str"";
          break;
        }
      }
    }
  }
 else {
    message=""String_Node_Str"";
  }
  if (message == null) {
    return new ReturnCode(true);
  }
  return new ReturnCode(message,false);
}","@Override protected ReturnCode canSave(){
  String message=null;
  List<Column> columnSetMultiValueList=getTreeViewer().getColumnSetMultiValueList();
  if (!columnSetMultiValueList.isEmpty()) {
    if (!ColumnHelper.isFromSameTable(columnSetMultiValueList)) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
    List<Column> columns=treeViewer.getColumnSetMultiValueList();
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      for (int i=0; i < columns.size(); i++) {
        TdColumn tdColumn=(TdColumn)columns.get(i);
        if (Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
          message=DefaultMessagesImpl.getString(""String_Node_Str"");
          break;
        }
      }
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      for (int i=0; i < columns.size(); i++) {
        TdColumn tdColumn=(TdColumn)columns.get(i);
        if (Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
          message=DefaultMessagesImpl.getString(""String_Node_Str"");
          break;
        }
      }
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      for (int i=0; i < columns.size(); i++) {
        TdColumn tdColumn=(TdColumn)columns.get(i);
        if (correlationAnalysisHandler.getDatamingType(tdColumn) != DataminingType.NOMINAL) {
          message=""String_Node_Str"";
          break;
        }
      }
    }
  }
  if (message == null) {
    return new ReturnCode(true);
  }
  return new ReturnCode(message,false);
}",0.9869499241274658
139945,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  analysisHandler.clearAnalysis();
  ColumnIndicator[] columnIndicators=treeViewer.getColumnIndicator();
  TdDataProvider tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (columnIndicators != null) {
    if (columnIndicators.length != 0) {
      tdProvider=EObjectHelper.getTdDataProvider(columnIndicators[0].getTdColumn());
      analysis.getContext().setConnection(tdProvider);
    }
    for (    ColumnIndicator columnIndicator : columnIndicators) {
      analysisHandler.addIndicator(columnIndicator.getTdColumn(),columnIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),columnIndicator.getTdColumn());
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      PrvResourceFileHelper.getInstance().save(tdProvider);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  analysisHandler.clearAnalysis();
  ColumnIndicator[] columnIndicators=treeViewer.getColumnIndicator();
  TdDataProvider tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (columnIndicators != null && columnIndicators.length != 0) {
    tdProvider=DataProviderHelper.getTdDataProvider(columnIndicators[0].getTdColumn());
    analysis.getContext().setConnection(tdProvider);
    for (    ColumnIndicator columnIndicator : columnIndicators) {
      analysisHandler.addIndicator(columnIndicator.getTdColumn(),columnIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),columnIndicator.getTdColumn());
    }
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      PrvResourceFileHelper.getInstance().save(tdProvider);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.96051227321238
139946,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  setColumnABForMatchingIndicator(rowMatchingIndicatorA,columnListA,columnListB);
  setColumnABForMatchingIndicator(rowMatchingIndicatorB,columnListB,columnListA);
  for (int i=0; i < columnListA.size(); i++) {
    analysedElements.add(columnListA.get(i));
  }
  for (int i=0; i < columnListB.size(); i++) {
    analysedElements.add(columnListB.get(i));
  }
  if (analysedElements.size() > 0) {
    TdDataProvider tdDataProvider=DataProviderHelper.getTdDataProvider((Column)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (checkComputeButton.getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  ReturnCode save=AnaResourceFileHelper.getInstance().save(analysis);
  if (save.isOk()) {
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  setColumnABForMatchingIndicator(rowMatchingIndicatorA,columnListA,columnListB);
  setColumnABForMatchingIndicator(rowMatchingIndicatorB,columnListB,columnListA);
  for (int i=0; i < columnListA.size(); i++) {
    analysedElements.add(columnListA.get(i));
  }
  for (int i=0; i < columnListB.size(); i++) {
    analysedElements.add(columnListB.get(i));
  }
  if (analysedElements.size() > 0) {
    TdDataProvider tdDataProvider=DataProviderHelper.getTdDataProvider((Column)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (checkComputeButton.getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  ReturnCode save=AnaResourceFileHelper.getInstance().save(analysis);
  if (save.isOk()) {
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}",0.9625862695241556
139947,"@Override public void saveAnalysis() throws DataprofilerCoreException {
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  TdDataProvider tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null) {
    if (tableIndicators.length != 0) {
      tdProvider=EObjectHelper.getTdDataProvider(tableIndicators[0].getTdTable());
      analysis.getContext().setConnection(tdProvider);
    }
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getTdTable(),tableIndicator.getIndicators());
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      PrvResourceFileHelper.getInstance().save(tdProvider);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","@Override public void saveAnalysis() throws DataprofilerCoreException {
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  TdDataProvider tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=EObjectHelper.getTdDataProvider(tableIndicators[0].getTdTable());
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getTdTable(),tableIndicator.getIndicators());
    }
  }
 else {
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      PrvResourceFileHelper.getInstance().save(tdProvider);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
  }
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.8557983193277311
139948,"public void run(){
  try {
    creatComparisonLevel.popComparisonUI(new UiHandler());
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException {
  final IComparisonLevel creatComparisonLevel=ComparisonLevelFactory.creatComparisonLevel(selectedObject);
  try {
    creatComparisonLevel.popComparisonUI(new UiHandler());
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
  }
}",0.6454352441613588
139949,"private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdTable tdTable=SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdTable == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String tableName=quote(tdTable.getName());
  if (!belongToSameSchemata(tdTable)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (indicatorDefinition instanceof WhereRule) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(tdTable);
  String table=quote(tdTable.getName());
  String catalogName=getQuotedCatalogName(tdTable);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(tdTable);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(joinConditions) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),tableName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdTable tdTable=SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdTable == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String tableName=quote(tdTable.getName());
  if (!belongToSameSchemata(tdTable)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  final EList<JoinElement> joinConditions=indicator.getJoinConditions();
  if (RulesPackage.eINSTANCE.getWhereRule().equals(indicatorDefinition.eClass())) {
    WhereRule wr=(WhereRule)indicatorDefinition;
    whereExpression.add(wr.getWhereExpression());
    joinConditions.clear();
    if (!wr.getJoins().isEmpty()) {
      for (      JoinElement joinelt : wr.getJoins()) {
        JoinElement joinCopy=(JoinElement)EcoreUtil.copy(joinelt);
        joinConditions.add(joinCopy);
      }
    }
  }
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
  }
  String schemaName=getQuotedSchemaName(tdTable);
  String table=quote(tdTable.getName());
  String catalogName=getQuotedCatalogName(tdTable);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(tdTable);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  String joinclause=(!joinConditions.isEmpty()) ? dbms().createJoinConditionAsString(joinConditions) : ""String_Node_Str"";
  completedSqlString=dbms().fillGenericQueryWithJoin(sqlGenericExpression.getBody(),tableName,joinclause);
  completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=BooleanExpressionHelper.createExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.981426003594967
139950,"public String createJoinConditionAsString(List<JoinElement> joinElements){
  if (joinElements.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder();
  for (  JoinElement joinElement : joinElements) {
    ModelElement colA=joinElement.getColA();
    String tableA=getTableName(colA);
    String tableAliasA=joinElement.getTableAliasA();
    String columnAName=getColumnName(colA);
    String columnAliasA=joinElement.getColumnAliasA();
    boolean hasTableAliasA=StringUtils.isEmpty(tableAliasA);
    boolean hasColumnAliasA=StringUtils.isEmpty(columnAliasA);
    ModelElement colB=joinElement.getColB();
    String tableB=getTableName(colB);
    String tableAliasB=joinElement.getTableAliasB();
    String columnBName=getColumnName(colB);
    String columnAliasB=joinElement.getColumnAliasB();
    boolean hasTableAliasB=StringUtils.isEmpty(tableAliasB);
    boolean hasColumnAliasB=StringUtils.isEmpty(columnAliasB);
    String operator=joinElement.getOperator();
    createJoinClause(builder,columnAName,columnAliasA,hasColumnAliasA,tableB,tableAliasB,columnBName,columnAliasB,hasTableAliasB,hasColumnAliasB,operator);
  }
  return builder.toString();
}","public String createJoinConditionAsString(List<JoinElement> joinElements){
  if (joinElements.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder();
  for (  JoinElement joinElement : joinElements) {
    ModelElement colA=joinElement.getColA();
    String tableA=getTableName(colA);
    String tableAliasA=joinElement.getTableAliasA();
    String columnAName=getColumnName(colA);
    String columnAliasA=joinElement.getColumnAliasA();
    boolean hasTableAliasA=!StringUtils.isEmpty(tableAliasA);
    boolean hasColumnAliasA=!StringUtils.isEmpty(columnAliasA);
    ModelElement colB=joinElement.getColB();
    String tableB=getTableName(colB);
    String tableAliasB=joinElement.getTableAliasB();
    String columnBName=getColumnName(colB);
    String columnAliasB=joinElement.getColumnAliasB();
    boolean hasTableAliasB=!StringUtils.isEmpty(tableAliasB);
    boolean hasColumnAliasB=!StringUtils.isEmpty(columnAliasB);
    String operator=joinElement.getOperator();
    if (hasTableAliasA) {
      builder.append(surroundWithSpaces(tableAliasA));
    }
    builder.append(""String_Node_Str"");
    builder.append(surroundWithSpaces(quote(tableB)));
    if (hasTableAliasB) {
      builder.append(surroundWithSpaces(tableAliasB));
    }
    builder.append(""String_Node_Str"");
    String tA=hasTableAliasA ? null : quote(tableA);
    String tB=hasTableAliasB ? null : quote(tableB);
    String cA=hasColumnAliasA ? columnAliasA : quote(columnAName);
    String cB=hasColumnAliasB ? columnAliasB : quote(columnBName);
    createJoinClause(builder,tA,cA,tB,cB,operator);
  }
  return builder.toString();
}",0.7651006711409396
139951,"/** 
 * DOC scorreia Comment method ""createJoinClause"".
 * @param builder
 * @param columnAName
 * @param columnAliasA
 * @param hasColumnAliasA
 * @param tableB
 * @param tableAliasB
 * @param columnBName
 * @param columnAliasB
 * @param hasTableAliasB
 * @param hasColumnAliasB
 * @param operator
 */
private void createJoinClause(StringBuilder builder,String columnAName,String columnAliasA,boolean hasColumnAliasA,String tableB,String tableAliasB,String columnBName,String columnAliasB,boolean hasTableAliasB,boolean hasColumnAliasB,String operator){
  builder.append(""String_Node_Str"");
  builder.append(surroundWithSpaces(quote(tableB)));
  if (hasTableAliasB) {
    builder.append(surroundWithSpaces(tableAliasB));
  }
  builder.append(""String_Node_Str"");
  builder.append('(');
  if (hasColumnAliasA) {
    builder.append(surroundWithSpaces(columnAliasA));
  }
 else {
    builder.append(surroundWithSpaces(quote(columnAName)));
  }
  builder.append(operator);
  if (hasColumnAliasB) {
    builder.append(surroundWithSpaces(columnAliasB));
  }
 else {
    builder.append(surroundWithSpaces(quote(columnBName)));
  }
  builder.append(')');
}","/** 
 * Method ""createJoinClause"" appends a join condition to the builder.
 * @param builder
 * @param tableA the name of the table or null
 * @param columnAName a column name (or an alias)
 * @param tableB the name of the second table or null
 * @param columnBName the column name (or an alias)
 * @param operator the operator used in the joinWhen using a column alias instead of a name, the table name must be set to null (because it's not required)
 */
private void createJoinClause(StringBuilder builder,String tableA,String columnAName,String tableB,String columnBName,String operator){
  builder.append('(');
  if (tableA != null) {
    builder.append(surroundWithSpaces(tableA + ""String_Node_Str""));
  }
  builder.append(surroundWithSpaces(columnAName));
  builder.append(operator);
  if (tableB != null) {
    builder.append(surroundWithSpaces(tableB + ""String_Node_Str""));
  }
  builder.append(surroundWithSpaces(columnBName));
  builder.append(')');
}",0.3423423423423423
139952,"/** 
 * DOC xqliu Comment method ""createJoinConditionSection"".
 * @param topComp
 */
private void createJoinConditionSection(Composite topComp){
  joinConditionSection=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Label label=new Label(joinConditionSection,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  joinConditionSection.setDescriptionControl(label);
  createJoinConditionComp();
}","/** 
 * DOC xqliu Comment method ""createJoinConditionSection"".
 * @param comp
 */
private void createJoinConditionSection(Composite comp){
  joinConditionSection=createSection(form,comp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Label label=new Label(joinConditionSection,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  joinConditionSection.setDescriptionControl(label);
  createJoinConditionComp();
}",0.9836423118865868
139953,"/** 
 * DOC xqliu Comment method ""creatDQRuleDefinitionSection"".
 * @param topComp
 */
private void createDQRuleDefinitionSection(Composite topComp){
  dqRuleDefinitionSection=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Label label=new Label(dqRuleDefinitionSection,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  dqRuleDefinitionSection.setDescriptionControl(label);
  String temp=DefaultMessagesImpl.getString(""String_Node_Str"");
  createDQRuleDefinitionComp();
}","/** 
 * DOC xqliu Comment method ""creatDQRuleDefinitionSection"".
 * @param comp
 */
private void createDQRuleDefinitionSection(Composite comp){
  dqRuleDefinitionSection=createSection(form,comp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Label label=new Label(dqRuleDefinitionSection,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  dqRuleDefinitionSection.setDescriptionControl(label);
  createDQRuleDefinitionComp();
}",0.8689655172413793
139954,"public void setColumn(Column column){
switch (getIndex()) {
case LEFT:
    getJoinElement().setColA(column);
  getJoinElement().setColumnAliasA(column.getName());
getJoinElement().setTableAliasA(ColumnHelper.getColumnSetOwner(column).getName());
break;
case RIGHT:
getJoinElement().setColB(column);
getJoinElement().setColumnAliasB(column.getName());
getJoinElement().setTableAliasB(ColumnHelper.getColumnSetOwner(column).getName());
break;
default :
}
}","public void setColumn(Column column){
switch (getIndex()) {
case LEFT:
    getJoinElement().setColA(column);
  break;
case RIGHT:
getJoinElement().setColB(column);
break;
default :
}
}",0.5768025078369906
139955,"public Expression getExpression(){
  if (expression == null) {
    expression=BooleanExpressionHelper.createExpression(EXPRESSION_LANG,EXPRESSION_BODY);
  }
  return expression;
}","public Expression getExpression(){
  if (expression == null) {
    expression=(Expression)EcoreUtil.copy(DefinitionHandler.getInstance().getDQRuleDefaultIndicatorDefinition().getSqlGenericExpression().get(0));
  }
  return expression;
}",0.5493975903614458
139956,"public void preWindowOpen(){
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1024,768));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(false);
  String buildId=CorePlugin.getDefault().getProductVersion().toString();
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  configurer.setTitle(brandingService.getFullProductName() + ""String_Node_Str"" + buildId+ ""String_Node_Str"");
}","public void preWindowOpen(){
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setInitialSize(new Point(1024,768));
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(false);
  String buildId=CorePlugin.getDefault().getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION).toString();
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  configurer.setTitle(brandingService.getFullProductName() + ""String_Node_Str"" + buildId+ ""String_Node_Str"");
}",0.925589836660617
139957,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IPath projectRelativePath=((IFolder)element).getFullPath();
    if (projectRelativePath.toString().equals(PluginConstant.REPORT_FOLDER_PATH)) {
      return false;
    }
  }
  return true;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    try {
      if (DQStructureManager.REPORT_FOLDER_PROPERTY.equals(folder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY))) {
        return false;
      }
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
  return true;
}",0.4665757162346521
139958,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  File file=new File(targetFile);
  boolean isContinue=true;
  if (file.exists() && !isForExchange) {
    isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  if (isContinue) {
    ExportFactory.export(file,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    if (isForExchange && file.isDirectory()) {
      for (      File patternFile : file.listFiles()) {
        try {
          FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
        }
 catch (        Exception e) {
          log.error(e.getMessage(),e);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof IFile) {
      IFile file=(IFile)element;
      if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
        seletedPatterns.add(PatternResourceFileHelper.getInstance().findPattern(file));
      }
    }
  }
  File file=new File(targetFile);
  boolean isContinue=true;
  if (file.exists() && !isForExchange) {
    isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  if (isContinue) {
    ExportFactory.export(file,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    if (isForExchange && file.isDirectory()) {
      for (      File patternFile : file.listFiles()) {
        try {
          FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
          patternFile.delete();
        }
 catch (        Exception e) {
          log.error(e.getMessage(),e);
        }
      }
    }
    return true;
  }
  return false;
}",0.987127916331456
139959,"public void selectionChanged(IWorkbenchPart part,ISelection selection){
  clearContainer();
  boolean is=true;
  if (part instanceof DQRespositoryView) {
    StructuredSelection sel=(StructuredSelection)selection;
    Object fe=sel.getFirstElement();
    if (fe instanceof IFile) {
      IFile fe2=(IFile)fe;
      is=createFileDetail(is,fe2);
    }
 else     if (fe instanceof TdCatalog) {
      TdCatalog catalog=(TdCatalog)fe;
      createTdCatalogDetail(catalog);
      is=false;
    }
 else     if (fe instanceof TdSchema) {
      TdSchema schema=(TdSchema)fe;
      createTdSchemaDetail(schema);
      is=false;
    }
 else     if (fe instanceof TdTable) {
      ModelElement element=(ModelElement)fe;
      createTableDetail((Table)element);
      is=false;
    }
 else     if (fe instanceof TdView) {
      ModelElement element=(ModelElement)fe;
      createNameCommentDetail(element);
      is=false;
    }
 else     if (fe instanceof TdColumn) {
      TdColumn column=(TdColumn)fe;
      createTdColumn(column);
      is=false;
    }
    if (switchFlag) {
      if (fe instanceof EObject) {
        createTechnicalDetail((EObject)fe);
      }
 else       if (fe instanceof IFile) {
        createTechnicalDetail((IFile)fe);
      }
 else {
        createExtDefault();
      }
    }
  }
 else   if (part instanceof CommonFormEditor) {
    CommonFormEditor editor=(CommonFormEditor)part;
    IEditorInput editorInput=editor.getEditorInput();
    if (editorInput instanceof IFileEditorInput) {
      IFileEditorInput input=(IFileEditorInput)editorInput;
      IFile file=input.getFile();
      is=createFileDetail(is,file);
    }
  }
  if (is) {
    createDefault();
  }
  gContainer.layout();
  if (tContainer != null) {
    tContainer.layout();
  }
}","public void selectionChanged(IWorkbenchPart part,ISelection selection){
  clearContainer();
  boolean is=true;
  if (part instanceof DQRespositoryView) {
    StructuredSelection sel=(StructuredSelection)selection;
    Object fe=sel.getFirstElement();
    if (fe instanceof IFile) {
      IFile fe2=(IFile)fe;
      is=createFileDetail(is,fe2);
    }
 else     if (fe instanceof TdCatalog) {
      TdCatalog catalog=(TdCatalog)fe;
      createTdCatalogDetail(catalog);
      is=false;
    }
 else     if (fe instanceof TdSchema) {
      TdSchema schema=(TdSchema)fe;
      createTdSchemaDetail(schema);
      is=false;
    }
 else     if (fe instanceof TdTable) {
      ModelElement element=(ModelElement)fe;
      createTableDetail((Table)element);
      is=false;
    }
 else     if (fe instanceof TdView) {
      ModelElement element=(ModelElement)fe;
      createNameCommentDetail(element);
      is=false;
    }
 else     if (fe instanceof TdColumn) {
      TdColumn column=(TdColumn)fe;
      createTdColumn(column);
      is=false;
    }
 else     if (fe instanceof IEcosComponent) {
      IEcosComponent component=(IEcosComponent)fe;
      createEcosComponent(component);
      is=false;
    }
    if (PluginChecker.isTDQLoaded()) {
      if (fe instanceof EObject) {
        createTechnicalDetail((EObject)fe);
      }
 else       if (fe instanceof IFile) {
        createTechnicalDetail((IFile)fe);
      }
 else {
        createExtDefault();
      }
    }
  }
 else   if (part instanceof CommonFormEditor) {
    CommonFormEditor editor=(CommonFormEditor)part;
    IEditorInput editorInput=editor.getEditorInput();
    if (editorInput instanceof IFileEditorInput) {
      IFileEditorInput input=(IFileEditorInput)editorInput;
      IFile file=input.getFile();
      is=createFileDetail(is,file);
    }
  }
  if (is) {
    createDefault();
  }
  gContainer.layout();
  if (tContainer != null) {
    tContainer.layout();
  }
}",0.9442036836403034
139960,"@Override public void createPartControl(Composite parent){
  Composite comp=new Composite(parent,SWT.NONE);
  comp.setLayout(new FillLayout());
  ScrolledComposite scomp=new ScrolledComposite(comp,SWT.H_SCROLL | SWT.V_SCROLL);
  scomp.setLayout(new FillLayout());
  Composite composite=new Composite(scomp,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  scomp.setExpandHorizontal(true);
  scomp.setExpandVertical(true);
  scomp.setMinWidth(400);
  scomp.setMinHeight(350);
  scomp.setContent(composite);
  gContainer=new Group(composite,SWT.NONE);
  gContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout layout=new GridLayout(2,false);
  GridData data=new GridData(GridData.FILL_BOTH);
  gContainer.setLayout(layout);
  gContainer.setLayoutData(data);
  if (switchFlag) {
    tContainer=new Group(composite,SWT.NONE);
    tContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tContainer.setLayout(new GridLayout(2,false));
    tContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    createExtDefault();
  }
  createDefault();
  getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(this);
  initializeToolBar();
}","@Override public void createPartControl(Composite parent){
  Composite comp=new Composite(parent,SWT.NONE);
  comp.setLayout(new FillLayout());
  ScrolledComposite scomp=new ScrolledComposite(comp,SWT.H_SCROLL | SWT.V_SCROLL);
  scomp.setLayout(new FillLayout());
  Composite composite=new Composite(scomp,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  scomp.setExpandHorizontal(true);
  scomp.setExpandVertical(true);
  scomp.setMinWidth(400);
  scomp.setMinHeight(350);
  scomp.setContent(composite);
  gContainer=new Group(composite,SWT.NONE);
  gContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout layout=new GridLayout(2,false);
  GridData data=new GridData(GridData.FILL_BOTH);
  gContainer.setLayout(layout);
  gContainer.setLayoutData(data);
  if (PluginChecker.isTDQLoaded()) {
    tContainer=new Group(composite,SWT.NONE);
    tContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tContainer.setLayout(new GridLayout(2,false));
    tContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    createExtDefault();
  }
  createDefault();
  getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(this);
  initializeToolBar();
}",0.9861714737258
139961,"/** 
 * DOC qzhang RespositoryDetailView constructor comment.
 */
public RespositoryDetailView(){
  switchFlag=PluginChecker.isTDQLoaded();
}","/** 
 * DOC qzhang RespositoryDetailView constructor comment.
 */
public RespositoryDetailView(){
}",0.825
139962,"@Override protected ReturnCode canSave(){
  if (columnListA.size() != columnListB.size()) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  if (columnListA.size() > 0) {
    ColumnSet columnSetOwnerA=null;
    ColumnSet columnSetOwnerB=null;
    ColumnSet ownerA=null;
    ColumnSet ownerB=null;
    for (int i=0; i < columnListA.size(); i++) {
      if (!((TdColumn)columnListA.get(i)).getSqlDataType().getName().equals(((TdColumn)columnListB.get(i)).getSqlDataType().getName())) {
        return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      }
      ownerA=ColumnHelper.getColumnSetOwner(columnListA.get(i));
      ownerB=ColumnHelper.getColumnSetOwner(columnListB.get(i));
      if (i == 0) {
        columnSetOwnerA=ownerA;
        columnSetOwnerB=ownerB;
      }
 else {
        if ((columnSetOwnerA != ownerA) || (columnSetOwnerB != ownerB)) {
          return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
        }
      }
    }
    Package parentCatalogOrSchemaA=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwnerA);
    Package parentCatalogOrSchemaB=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwnerB);
    if (!parentCatalogOrSchemaA.getName().equals(parentCatalogOrSchemaB.getName())) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}","@Override protected ReturnCode canSave(){
  if (columnListA.size() != columnListB.size()) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  if (columnListA.size() > 0) {
    ColumnSet columnSetOwnerA=null;
    ColumnSet columnSetOwnerB=null;
    ColumnSet ownerA=null;
    ColumnSet ownerB=null;
    for (int i=0; i < columnListA.size(); i++) {
      String dataTypeNameA=((TdColumn)columnListA.get(i)).getSqlDataType().getName();
      String dataTypeNameB=((TdColumn)columnListB.get(i)).getSqlDataType().getName();
      if (!dataTypeNameA.equals(dataTypeNameB)) {
        if (!((dataTypeNameA.toLowerCase().contains(""String_Node_Str"") || dataTypeNameA.toLowerCase().contains(""String_Node_Str"")) && (dataTypeNameB.toLowerCase().contains(""String_Node_Str"") || dataTypeNameB.toLowerCase().contains(""String_Node_Str"")))) {
          return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
        }
      }
      ownerA=ColumnHelper.getColumnSetOwner(columnListA.get(i));
      ownerB=ColumnHelper.getColumnSetOwner(columnListB.get(i));
      if (i == 0) {
        columnSetOwnerA=ownerA;
        columnSetOwnerB=ownerB;
      }
 else {
        if ((columnSetOwnerA != ownerA) || (columnSetOwnerB != ownerB)) {
          return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
        }
      }
    }
    Package parentCatalogOrSchemaA=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwnerA);
    Package parentCatalogOrSchemaB=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwnerB);
    if (!parentCatalogOrSchemaA.getName().equals(parentCatalogOrSchemaB.getName())) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}",0.8514728682170543
139963,"public static boolean isFromSameConnection(List<Column> columns){
}","/** 
 * DOC bZhou Comment method ""isFromSameConnection"".
 * @param columns
 * @return
 */
public static boolean isFromSameConnection(List<Column> columns){
}",0.5982142857142857
139964,"public static boolean isFromSameTable(List<Column> columns){
}","/** 
 * DOC bZhou Comment method ""isFromSameTable"".
 * @param columns
 * @return
 */
public static boolean isFromSameTable(List<Column> columns){
}",0.5933014354066986
139965,"/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  infomatioinSection=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite sectionClient=toolkit.createComposite(infomatioinSection);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  passwordText=new Text(sectionClient,SWT.BORDER | SWT.PASSWORD);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=TaggedValueHelper.getValue(PluginConstant.USER_PROPERTY,connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=DataProviderHelper.getClearTextPassword(connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  if (trc.getObject().getDriverClassName().startsWith(""String_Node_Str"")) {
    loginText.setEnabled(false);
    passwordText.setEnabled(false);
  }
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  infomatioinSection.setClient(sectionClient);
}","/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  infomatioinSection=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite sectionClient=toolkit.createComposite(infomatioinSection);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  passwordText=new Text(sectionClient,SWT.BORDER | SWT.PASSWORD);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=DataProviderHelper.getClearTextUser(connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=DataProviderHelper.getClearTextPassword(connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  if (trc.getObject().getDriverClassName().startsWith(""String_Node_Str"")) {
    loginText.setEnabled(false);
    passwordText.setEnabled(false);
  }
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  infomatioinSection.setClient(sectionClient);
}",0.984920292977165
139966,"/** 
 * DOC qzhang Comment method ""activeData"".
 */
public void activeData(){
  if (SE_ID.equals(perspectiveId)) {
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getProject(org.talend.dataquality.PluginConstant.getRootProjectName()).getFolder(DQStructureManager.getMetaData()).getFolder(DQStructureManager.DB_CONNECTIONS);
    List<TdDataProvider> listTdDataProviders=DqRepositoryViewService.listTdDataProviders(folder,true);
    SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
    AliasManager aliasManager=default1.getAliasManager();
    aliasManager.getAliases().clear();
    Set<User> users=new HashSet<User>();
    try {
      aliasManager.closeAllConnections();
    }
 catch (    ExplorerException e1) {
      log.error(e1,e1);
    }
    for (    TdDataProvider tdDataProvider : listTdDataProviders) {
      try {
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        String url=providerConnection.getConnectionString();
        Alias alias=new Alias(tdDataProvider.getName());
        String user=TaggedValueHelper.getValue(""String_Node_Str"",providerConnection);
        String password=DataProviderHelper.getClearTextPassword(providerConnection);
        if (""String_Node_Str"".equals(user)) {
          user=""String_Node_Str"";
        }
        User previousUser=new User(user,password);
        alias.setDefaultUser(previousUser);
        users.add(previousUser);
        alias.setAutoLogon(false);
        alias.setConnectAtStartup(true);
        alias.setUrl(url);
        ManagedDriver manDr=default1.getDriverModel().getDriver(EDriverName.getId(providerConnection.getDriverClassName()));
        alias.setDriver(manDr);
        aliasManager.addAlias(alias);
      }
 catch (      ExplorerException e) {
        log.error(e,e);
      }
    }
    aliasManager.modelChanged();
  }
}","/** 
 * DOC qzhang Comment method ""activeData"".
 */
public void activeData(){
  if (SE_ID.equals(perspectiveId)) {
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getProject(org.talend.dataquality.PluginConstant.getRootProjectName()).getFolder(DQStructureManager.getMetaData()).getFolder(DQStructureManager.DB_CONNECTIONS);
    List<TdDataProvider> listTdDataProviders=DqRepositoryViewService.listTdDataProviders(folder,true);
    SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
    AliasManager aliasManager=default1.getAliasManager();
    aliasManager.getAliases().clear();
    Set<User> users=new HashSet<User>();
    try {
      aliasManager.closeAllConnections();
    }
 catch (    ExplorerException e1) {
      log.error(e1,e1);
    }
    for (    TdDataProvider tdDataProvider : listTdDataProviders) {
      try {
        TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
        TdProviderConnection providerConnection=tdPc.getObject();
        String url=providerConnection.getConnectionString();
        Alias alias=new Alias(tdDataProvider.getName());
        String user=DataProviderHelper.getClearTextUser(providerConnection);
        String password=DataProviderHelper.getClearTextPassword(providerConnection);
        if (""String_Node_Str"".equals(user)) {
          user=""String_Node_Str"";
        }
        User previousUser=new User(user,password);
        alias.setDefaultUser(previousUser);
        users.add(previousUser);
        alias.setAutoLogon(false);
        alias.setConnectAtStartup(true);
        alias.setUrl(url);
        ManagedDriver manDr=default1.getDriverModel().getDriver(EDriverName.getId(providerConnection.getDriverClassName()));
        alias.setDriver(manDr);
        aliasManager.addAlias(alias);
      }
 catch (      ExplorerException e) {
        log.error(e,e);
      }
    }
    aliasManager.modelChanged();
  }
}",0.9796653796653796
139967,"public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
  setDirty(true);
}","@SuppressWarnings(""String_Node_Str"") public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
  if (oldInput != null && newInput != null) {
    if (!((List)newInput).isEmpty()) {
      setDirty(true);
    }
  }
}",0.575
139968,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  setColumnABForMatchingIndicator(rowMatchingIndicatorA,columnListA,columnListB);
  setColumnABForMatchingIndicator(rowMatchingIndicatorB,columnListB,columnListA);
  for (int i=0; i < columnListA.size(); i++) {
    analysedElements.add(columnListA.get(i));
  }
  for (int i=0; i < columnListB.size(); i++) {
    analysedElements.add(columnListB.get(i));
  }
  if (analysedElements.size() > 0) {
    TdDataProvider tdDataProvider=EObjectHelper.getTdDataProvider((Column)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (checkComputeButton.getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  ReturnCode save=AnaResourceFileHelper.getInstance().save(analysis);
  if (save.isOk()) {
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  setColumnABForMatchingIndicator(rowMatchingIndicatorA,columnListA,columnListB);
  setColumnABForMatchingIndicator(rowMatchingIndicatorB,columnListB,columnListA);
  for (int i=0; i < columnListA.size(); i++) {
    analysedElements.add(columnListA.get(i));
  }
  for (int i=0; i < columnListB.size(); i++) {
    analysedElements.add(columnListB.get(i));
  }
  if (analysedElements.size() > 0) {
    TdDataProvider tdDataProvider=DataProviderHelper.getTdDataProvider((Column)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (checkComputeButton.getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  ReturnCode save=AnaResourceFileHelper.getInstance().save(analysis);
  if (save.isOk()) {
    log.info(""String_Node_Str"" + analysis.getFileName());
  }
}",0.9928166351606804
139969,"private void addItemElements(final ColumnIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Label addPatternLabl=new Label(tree,SWT.NONE);
    addPatternLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addPatternLabl.setImage(ImageLib.getImage(ImageLib.ADD_PATTERN));
    addPatternLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternLabl.pack();
    addPatternLabl.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DataManager dm=getAnalysis().getContext().getConnection();
        if (dm == null) {
          masterPage.doSave(null);
        }
        IProject libProject=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES);
        CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        dialog.setInput(libProject);
        dialog.setValidator(new ISelectionStatusValidator(){
          public IStatus validate(          Object[] selection){
            IStatus status=Status.OK_STATUS;
            for (            Object patte : selection) {
              if (patte instanceof IFile) {
                IFile file=(IFile)patte;
                if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                  Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
                  boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
                  if (!validStatus) {
                    status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
                  }
                }
              }
            }
            return status;
          }
        }
);
        dialog.addFilter(new ViewerFilter(){
          @Override public boolean select(          Viewer viewer,          Object parentElement,          Object element){
            if (element instanceof IFile) {
              IFile file=(IFile)element;
              if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                return true;
              }
            }
 else             if (element instanceof IFolder) {
              IFolder folder=(IFolder)element;
              return PatternUtilities.isLibraiesSubfolder(folder,DQStructureManager.PATTERNS,DQStructureManager.SQL_PATTERNS);
            }
            return false;
          }
        }
);
        dialog.setContainerMode(true);
        dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
        dialog.setSize(80,30);
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,columnIndicator,getAnalysis());
              if (addIndicatorUnit != null) {
                createOneUnit(treeItem,addIndicatorUnit);
                setDirty(true);
              }
 else {
                MessageUI.openError(file.getName() + ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternLabl,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","private void addItemElements(final ColumnIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Label addPatternLabl=new Label(tree,SWT.NONE);
    addPatternLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    addPatternLabl.setImage(ImageLib.getImage(ImageLib.ADD_PATTERN));
    addPatternLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternLabl.pack();
    addPatternLabl.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DataManager dm=getAnalysis().getContext().getConnection();
        if (dm == null) {
          masterPage.doSave(null);
        }
        IProject libProject=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES);
        CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        dialog.setInput(libProject);
        dialog.setValidator(new ISelectionStatusValidator(){
          public IStatus validate(          Object[] selection){
            IStatus status=Status.OK_STATUS;
            for (            Object patte : selection) {
              if (patte instanceof IFile) {
                IFile file=(IFile)patte;
                if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                  Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
                  boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
                  if (!validStatus) {
                    status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
                  }
                }
              }
            }
            return status;
          }
        }
);
        dialog.addFilter(new ViewerFilter(){
          @Override public boolean select(          Viewer viewer,          Object parentElement,          Object element){
            if (element instanceof IFile) {
              IFile file=(IFile)element;
              if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                return true;
              }
            }
 else             if (element instanceof IFolder) {
              IFolder folder=(IFolder)element;
              return PatternUtilities.isLibraiesSubfolder(folder,DQStructureManager.PATTERNS,DQStructureManager.SQL_PATTERNS);
            }
            return false;
          }
        }
);
        dialog.setContainerMode(true);
        dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
        dialog.setSize(80,30);
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,columnIndicator,getAnalysis());
              if (addIndicatorUnit != null) {
                createOneUnit(treeItem,addIndicatorUnit);
                setDirty(true);
              }
 else {
                Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
                MessageUI.openError(""String_Node_Str"" + pattern.getName() + ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternLabl,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}",0.9901771336553944
139970,"public Map<EIndicatorChartType,List<IndicatorUnit>> getIndicatorComposite(ColumnIndicator columnIndicator){
  this.clear();
  List<IndicatorUnit> tempList=new ArrayList<IndicatorUnit>();
  this.indicatorUnits=initChildIndicatorUnits(tempList,columnIndicator.getIndicatorUnits());
  for (  IndicatorUnit one : indicatorUnits) {
switch (one.getType()) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
case BlankCountIndicatorEnum:
      simpleList.add(one);
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  textList.add(one);
break;
case FrequencyIndicatorEnum:
frequencyList.add(one);
break;
case LowFrequencyIndicatorEnum:
lowFrequencyList.add(one);
break;
case PatternFreqIndicatorEnum:
patternFrequencylist.add(one);
break;
case PatternLowFreqIndicatorEnum:
patternLowFrequencyList.add(one);
break;
case MeanIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
case MedianIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
summaryList.add(one);
break;
case RegexpMatchingIndicatorEnum:
patternList.add(one);
break;
case SqlPatternMatchingIndicatorEnum:
sqlPatternList.add(one);
break;
case ModeIndicatorEnum:
modelIndicatorList.add(one);
break;
default :
}
}
separatedMap.put(EIndicatorChartType.SIMPLE_STATISTICS,simpleList);
separatedMap.put(EIndicatorChartType.TEXT_STATISTICS,textList);
separatedMap.put(EIndicatorChartType.FREQUENCE_STATISTICS,frequencyList);
separatedMap.put(EIndicatorChartType.LOW_FREQUENCE_STATISTICS,lowFrequencyList);
separatedMap.put(EIndicatorChartType.PATTERN_FREQUENCE_STATISTICS,patternFrequencylist);
separatedMap.put(EIndicatorChartType.PATTERN_LOW_FREQUENCE_STATISTICS,patternLowFrequencyList);
separatedMap.put(EIndicatorChartType.SUMMARY_STATISTICS,summaryList);
separatedMap.put(EIndicatorChartType.PATTERN_MATCHING,patternList);
separatedMap.put(EIndicatorChartType.SQL_PATTERN_MATCHING,sqlPatternList);
separatedMap.put(EIndicatorChartType.MODE_INDICATOR,modelIndicatorList);
return separatedMap;
}","public Map<EIndicatorChartType,List<IndicatorUnit>> getIndicatorComposite(ColumnIndicator columnIndicator){
  this.clear();
  List<IndicatorUnit> tempList=new ArrayList<IndicatorUnit>();
  this.indicatorUnits=initChildIndicatorUnits(tempList,columnIndicator.getIndicatorUnits());
  for (  IndicatorUnit one : indicatorUnits) {
switch (one.getType()) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
case BlankCountIndicatorEnum:
case DefValueCountIndicatorEnum:
      simpleList.add(one);
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  textList.add(one);
break;
case FrequencyIndicatorEnum:
frequencyList.add(one);
break;
case LowFrequencyIndicatorEnum:
lowFrequencyList.add(one);
break;
case PatternFreqIndicatorEnum:
patternFrequencylist.add(one);
break;
case PatternLowFreqIndicatorEnum:
patternLowFrequencyList.add(one);
break;
case MeanIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
case MedianIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
summaryList.add(one);
break;
case RegexpMatchingIndicatorEnum:
patternList.add(one);
break;
case SqlPatternMatchingIndicatorEnum:
sqlPatternList.add(one);
break;
case ModeIndicatorEnum:
modelIndicatorList.add(one);
break;
default :
}
}
separatedMap.put(EIndicatorChartType.SIMPLE_STATISTICS,simpleList);
separatedMap.put(EIndicatorChartType.TEXT_STATISTICS,textList);
separatedMap.put(EIndicatorChartType.FREQUENCE_STATISTICS,frequencyList);
separatedMap.put(EIndicatorChartType.LOW_FREQUENCE_STATISTICS,lowFrequencyList);
separatedMap.put(EIndicatorChartType.PATTERN_FREQUENCE_STATISTICS,patternFrequencylist);
separatedMap.put(EIndicatorChartType.PATTERN_LOW_FREQUENCE_STATISTICS,patternLowFrequencyList);
separatedMap.put(EIndicatorChartType.SUMMARY_STATISTICS,summaryList);
separatedMap.put(EIndicatorChartType.PATTERN_MATCHING,patternList);
separatedMap.put(EIndicatorChartType.SQL_PATTERN_MATCHING,sqlPatternList);
separatedMap.put(EIndicatorChartType.MODE_INDICATOR,modelIndicatorList);
return separatedMap;
}",0.992373468916108
139971,"private void addItemElements(final ColumnIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    elementItem=new TreeItem(tree,SWT.NONE);
    clmIndicator=(ColumnIndicator)elements[i];
    String columnName=clmIndicator.getTdColumn().getName();
    elementItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    elementItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ clmIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    elementItem.setData(COLUMN_INDICATOR_KEY,clmIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(clmIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(clmIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,elementItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    addPatternBtn=new Button(tree,SWT.NONE);
    addPatternBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternBtn.pack();
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternBtn,elementItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    del=new Label(tree,SWT.NONE);
    del.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    del.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    del.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    del.pack();
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(del,elementItem,3);
    elementItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (clmIndicator.hasIndicators()) {
      createIndicatorItems(elementItem,clmIndicator.getIndicatorUnits());
    }
    elementItem.setExpanded(true);
    addItemElementListeners();
  }
  this.setDirty(true);
}","private void addItemElements(final ColumnIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Button addPatternBtn=new Button(tree,SWT.NONE);
    addPatternBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    addPatternBtn.pack();
    addPatternBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        DataManager dm=getAnalysis().getContext().getConnection();
        if (dm == null) {
          masterPage.doSave(null);
        }
        IProject libProject=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES);
        CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        dialog.setInput(libProject);
        dialog.setValidator(new ISelectionStatusValidator(){
          public IStatus validate(          Object[] selection){
            IStatus status=Status.OK_STATUS;
            for (            Object patte : selection) {
              if (patte instanceof IFile) {
                IFile file=(IFile)patte;
                if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                  Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
                  boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
                  if (!validStatus) {
                    status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
                  }
                }
              }
            }
            return status;
          }
        }
);
        dialog.addFilter(new ViewerFilter(){
          @Override public boolean select(          Viewer viewer,          Object parentElement,          Object element){
            if (element instanceof IFile) {
              IFile file=(IFile)element;
              if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                return true;
              }
            }
 else             if (element instanceof IFolder) {
              IFolder folder=(IFolder)element;
              return PatternUtilities.isLibraiesSubfolder(folder,DQStructureManager.PATTERNS,DQStructureManager.SQL_PATTERNS);
            }
            return false;
          }
        }
);
        dialog.setContainerMode(true);
        dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
        dialog.setSize(80,30);
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,columnIndicator,getAnalysis());
              if (addIndicatorUnit != null) {
                createOneUnit(treeItem,addIndicatorUnit);
                setDirty(true);
              }
 else {
                MessageUI.openError(file.getName() + ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternBtn,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}",0.5158597662771286
139972,"/** 
 * DOC qzhang Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param columnIndicator
 * @param analysis
 * @return
 */
public static IndicatorUnit createIndicatorUnit(IFile pfile,ColumnIndicator columnIndicator,Analysis analysis){
  Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(pfile);
  String expressionType=DomainHelper.getExpressionType(pattern);
  boolean isSQLPattern=(ExpressionType.SQL_LIKE.getLiteral().equals(expressionType));
  PatternMatchingIndicator patternMatchingIndicator=isSQLPattern ? PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern) : PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(analysis);
  if (ExpressionType.REGEXP.getLiteral().equals(expressionType) && dbmsLanguage.getRegexp(pattern) == null) {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return null;
  }
  DataManager dm=analysis.getContext().getConnection();
  TypedReturnCode<Connection> trc=JavaSqlFactory.createConnection((TdDataProvider)dm);
  if (trc != null) {
    Connection conn=trc.getObject();
    try {
      SoftwareSystem softwareSystem=DatabaseContentRetriever.getSoftwareSystem(conn);
      dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(softwareSystem);
    }
 catch (    SQLException e) {
      log.error(e,e);
    }
  }
  if (!(dbmsLanguage.supportRegexp() || isDBDefinedUDF(dbmsLanguage))) {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return null;
  }
  if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(patternMatchingIndicator)) {
    log.error(""String_Node_Str"" + patternMatchingIndicator.getName());
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  return addIndicatorUnit;
}","/** 
 * DOC qzhang Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param columnIndicator
 * @param analysis
 * @return
 */
public static IndicatorUnit createIndicatorUnit(IFile pfile,ColumnIndicator columnIndicator,Analysis analysis){
  Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(pfile);
  for (  Indicator indicator : columnIndicator.getIndicators()) {
    if (pattern.getName().equals(indicator.getName())) {
      return null;
    }
  }
  String expressionType=DomainHelper.getExpressionType(pattern);
  boolean isSQLPattern=(ExpressionType.SQL_LIKE.getLiteral().equals(expressionType));
  PatternMatchingIndicator patternMatchingIndicator=isSQLPattern ? PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern) : PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(analysis);
  if (ExpressionType.REGEXP.getLiteral().equals(expressionType) && dbmsLanguage.getRegexp(pattern) == null) {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return null;
  }
  DataManager dm=analysis.getContext().getConnection();
  TypedReturnCode<Connection> trc=JavaSqlFactory.createConnection((TdDataProvider)dm);
  if (trc != null) {
    Connection conn=trc.getObject();
    try {
      SoftwareSystem softwareSystem=DatabaseContentRetriever.getSoftwareSystem(conn);
      dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(softwareSystem);
    }
 catch (    SQLException e) {
      log.error(e,e);
    }
  }
  if (!(dbmsLanguage.supportRegexp() || isDBDefinedUDF(dbmsLanguage))) {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return null;
  }
  if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(patternMatchingIndicator)) {
    log.error(""String_Node_Str"" + patternMatchingIndicator.getName());
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  return addIndicatorUnit;
}",0.966341895482728
139973,"@Override public void expansionStateChanged(ExpansionEvent e){
  composite.layout();
  composite.pack();
  form.reflow(true);
}","@Override public void expansionStateChanged(ExpansionEvent e){
  form.reflow(true);
}",0.8018867924528302
139974,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  previewChartList=new ArrayList<ExpandableComposite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",column.getName()));
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",column.getName()),IProgressMonitor.UNKNOWN);
          Display.getDefault().syncExec(new Runnable(){
            public void run(){
              Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
              for (              EIndicatorChartType chartType : indicatorComposite.keySet()) {
                List<IndicatorUnit> units=indicatorComposite.get(chartType);
                if (!units.isEmpty()) {
                  final IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
                  JFreeChart chart=chartTypeState.getFeatChart();
                  if (chart != null) {
                    final ChartComposite chartComp=new ChartComposite(comp,SWT.NONE,chart,true);
                    GridData gd=new GridData();
                    gd.widthHint=550;
                    gd.heightHint=250;
                    chartComp.setLayoutData(gd);
                    addListenerToChartComp(chartComp,chartTypeState);
                  }
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        composite.layout();
        composite.pack();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  previewChartList=new ArrayList<ExpandableComposite>();
  for (  final ColumnIndicator columnIndicator : treeViewer.getColumnIndicator()) {
    TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",column.getName()));
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
    for (    EIndicatorChartType chartType : indicatorComposite.keySet()) {
      List<IndicatorUnit> units=indicatorComposite.get(chartType);
      if (!units.isEmpty()) {
        final IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
        JFreeChart chart=chartTypeState.getFeatChart();
        if (chart != null) {
          final ChartComposite chartComp=new ChartComposite(comp,SWT.NONE,chart,true);
          GridData gd=new GridData();
          gd.widthHint=550;
          gd.heightHint=250;
          chartComp.setLayoutData(gd);
          addListenerToChartComp(chartComp,chartTypeState);
        }
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
  composite.layout();
  composite.pack();
  form.reflow(true);
}",0.7983789260385005
139975,"public static JFreeChart decorateCategoryPlot(JFreeChart chart){
}","public static JFreeChart decorateCategoryPlot(JFreeChart chart){
  if (chart == null) {
    return null;
  }
  Font font=null;
  CategoryPlot plot=chart.getCategoryPlot();
  CategoryItemRenderer render=plot.getRenderer();
  CategoryAxis domainAxis=plot.getDomainAxis();
  ValueAxis valueAxis=plot.getRangeAxis();
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
  return chart;
}",0.1194570135746606
139976,"public static JFreeChart decorateXYPlot(JFreeChart chart){
}","public static JFreeChart decorateXYPlot(JFreeChart chart){
  if (chart == null) {
    return null;
  }
  Font font=null;
  XYPlot plot=chart.getXYPlot();
  XYItemRenderer render=plot.getRenderer();
  ValueAxis domainAxis=plot.getDomainAxis();
  ValueAxis valueAxis=plot.getRangeAxis();
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_ITEM_LABEL_SIZE);
  render.setBaseItemLabelFont(font);
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_LABEL_SIZE);
  domainAxis.setLabelFont(font);
  valueAxis.setLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_TICK_LABEL_SIZE);
  domainAxis.setTickLabelFont(font);
  valueAxis.setTickLabelFont(font);
  font=new Font(""String_Node_Str"",Font.PLAIN,BASE_LEGEND_LABEL_SIZE);
  LegendTitle legend=chart.getLegend();
  if (legend != null) {
    legend.setItemFont(font);
  }
  font=new Font(""String_Node_Str"",Font.BOLD,BASE_TITLE_LABEL_SIZE);
  TextTitle title=chart.getTitle();
  if (title != null) {
    title.setFont(font);
  }
  font=null;
  return chart;
}",0.1119402985074626
139977,"/** 
 * Method ""getExpressionType"".
 * @param pattern
 * @return the expression type of the regular expression contained in the given pattern or null
 */
public static String getExpressionType(Pattern pattern){
  if (pattern != null) {
    PatternComponent component=pattern.getComponents().get(0);
    if (component == null) {
      return null;
    }
 else {
      RegularExpression regexp=DataqualitySwitchHelper.REGULAR_EXPR_SWITCH.doSwitch(component);
      if (regexp != null) {
        String expressionType=regexp.getExpressionType();
        if (StringUtils.isEmpty(expressionType)) {
          final Resource resource=regexp.eResource();
          if (resource != null) {
            if (resource.getURI().toFileString().contains(SQL_PATTERN_FOLDER)) {
              expressionType=ExpressionType.SQL_LIKE.getLiteral();
            }
 else             if (resource.getURI().toFileString().contains(PATTERN_FOLDER)) {
              expressionType=ExpressionType.REGEXP.getLiteral();
            }
          }
        }
        return expressionType;
      }
    }
  }
  return null;
}","/** 
 * Method ""getExpressionType"".
 * @param pattern
 * @return the expression type of the regular expression contained in the given pattern or null
 */
public static String getExpressionType(Pattern pattern){
  if (pattern != null) {
    PatternComponent component=pattern.getComponents().get(0);
    if (component == null) {
      return null;
    }
 else {
      RegularExpression regexp=DataqualitySwitchHelper.REGULAR_EXPR_SWITCH.doSwitch(component);
      if (regexp != null) {
        String expressionType=regexp.getExpressionType();
        if (StringUtils.isEmpty(expressionType)) {
          final Resource resource=regexp.eResource();
          if (resource != null) {
            if (resource.getURI().toString().contains(SQL_PATTERN_FOLDER)) {
              expressionType=ExpressionType.SQL_LIKE.getLiteral();
            }
 else             if (resource.getURI().toString().contains(PATTERN_FOLDER)) {
              expressionType=ExpressionType.REGEXP.getLiteral();
            }
          }
        }
        return expressionType;
      }
    }
  }
  return null;
}",0.9963269054178144
139978,"/** 
 * Method ""setReportType"".MOD mzhao 2009-02-16
 * @param report the report object to update
 * @param reportType the report type to set
 * @param jrxmlFullPath the full path to the jxrxml file (can be null when the type of report is different from theUSER_DEFINED)
 * @return true if everything is set correctly, false otherwise.
 */
public static boolean setReportType(TdReport report,Analysis analysis,ReportType reportType,String jrxmlFullPath){
  boolean ok=true;
switch (reportType) {
case BASIC:
    report.setReportType(reportType.getLabel(),null,analysis);
  break;
case EVOLUTION:
report.setReportType(reportType.getLabel(),null,analysis);
break;
case USER_MADE:
report.setReportType(reportType.getLabel(),jrxmlFullPath,analysis);
if (StringUtils.isBlank(jrxmlFullPath)) {
ok=false;
}
break;
default :
ok=false;
break;
}
return ok;
}","/** 
 * Method ""setReportType"". MOD mzhao 2009-02-16
 * @param report the report object to update
 * @param reportType the report type to set
 * @param jrxmlFullPath the full path to the jxrxml file (can be null when the type of report is different from theUSER_DEFINED)
 * @return true if everything is set correctly, false otherwise.
 */
public static boolean setReportType(TdReport report,Analysis analysis,ReportType reportType,String jrxmlFullPath){
  boolean ok=true;
switch (reportType) {
case BASIC:
    report.setReportType(reportType.getLabel(),null,analysis);
  break;
case EVOLUTION:
report.setReportType(reportType.getLabel(),null,analysis);
break;
case USER_MADE:
report.setReportType(reportType.getLabel(),jrxmlFullPath,analysis);
if (StringUtils.isBlank(jrxmlFullPath)) {
ok=false;
}
break;
default :
ok=false;
break;
}
return ok;
}",0.9994100294985252
139979,"private boolean checkRange(String inString){
  String[] definedRange=getDefinedRange(inString);
  if (definedRange != null && definedRange.length >= 2) {
    range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str""+ definedRange[1]+ ""String_Node_Str"";
    int sqltype=((TdColumn)indicator.getAnalyzedElement()).getJavaType();
    if (Java2SqlType.isDateInSQL(sqltype) && indicator.eContainer() instanceof RangeIndicator) {
      try {
        SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
        Date dValue=format.parse(value);
        if (""String_Node_Str"".equals(definedRange[0])) {
          Date max=format.parse(definedRange[1]);
          range=""String_Node_Str"" + definedRange[1] + ""String_Node_Str"";
          return dValue.after(max);
        }
 else         if (""String_Node_Str"".equals(definedRange[1])) {
          Date min=format.parse(definedRange[0]);
          range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str"";
          return dValue.before(min);
        }
 else {
          Date min=format.parse(definedRange[0]);
          Date max=format.parse(definedRange[1]);
          return dValue.after(max) || dValue.before(min);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        return false;
      }
    }
 else {
      Double min=StringFormatUtil.formatDouble(definedRange[0]);
      Double max=StringFormatUtil.formatDouble(definedRange[1]);
      Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
      if (min == null || Double.isNaN(min)) {
        min=Double.NEGATIVE_INFINITY;
      }
      if (max == null || Double.isNaN(max)) {
        max=Double.POSITIVE_INFINITY;
      }
      return dValue < min || dValue > max;
    }
  }
  return false;
}","private boolean checkRange(String inString){
  String[] definedRange=getDefinedRange(inString);
  if (definedRange != null && definedRange.length >= 2) {
    range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str""+ definedRange[1]+ ""String_Node_Str"";
    int sqltype=((TdColumn)indicator.getAnalyzedElement()).getJavaType();
    boolean isChildOfRange=IndicatorsPackage.eINSTANCE.getValueIndicator().isSuperTypeOf(indicator.eClass());
    if (Java2SqlType.isDateInSQL(sqltype) && isChildOfRange) {
      try {
        SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
        Date dValue=format.parse(value);
        if (""String_Node_Str"".equals(definedRange[0])) {
          Date max=format.parse(definedRange[1]);
          range=""String_Node_Str"" + definedRange[1] + ""String_Node_Str"";
          return dValue.after(max);
        }
 else         if (""String_Node_Str"".equals(definedRange[1])) {
          Date min=format.parse(definedRange[0]);
          range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str"";
          return dValue.before(min);
        }
 else {
          Date min=format.parse(definedRange[0]);
          Date max=format.parse(definedRange[1]);
          return dValue.after(max) || dValue.before(min);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        return false;
      }
    }
 else {
      Double min=StringFormatUtil.formatDouble(definedRange[0]);
      Double max=StringFormatUtil.formatDouble(definedRange[1]);
      Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
      if (min == null || Double.isNaN(min)) {
        min=Double.NEGATIVE_INFINITY;
      }
      if (max == null || Double.isNaN(max)) {
        max=Double.POSITIVE_INFINITY;
      }
      return dValue < min || dValue > max;
    }
  }
  return false;
}",0.9498069498069498
139980,"@Override public void run(){
  IEditorPart editor=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editor != null && editor instanceof AnalysisEditor) {
    AnalysisEditor anaEditor=(AnalysisEditor)editor;
    anaEditor.getMasterPage().refreshChart();
  }
}","@Override public void run(){
  IEditorPart editor=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editor != null && editor instanceof AnalysisEditor) {
    AnalysisEditor anaEditor=(AnalysisEditor)editor;
    anaEditor.getMasterPage().refresh();
  }
}",0.991652754590985
139981,"public void fireRuningItemChanged(boolean status){
  currentEditor.setRunActionButtonState(status);
  currentEditor.setRefreshResultPage(status);
  if (status) {
    refreshChart();
  }
}","public void fireRuningItemChanged(boolean status){
  currentEditor.setRunActionButtonState(status);
  currentEditor.setRefreshResultPage(status);
  if (status) {
    refresh();
  }
}",0.986449864498645
139982,"private void createStatisticalSection(Composite topComp){
  statisticalSection=this.createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  statisticalViewer=new TableViewer(sectionClient,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  Table table=statisticalViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<TdCatalog> catalogs=getCatalogs();
  boolean containSubSchema=false;
  for (  Catalog catalog : catalogs) {
    List<TdSchema> schemas=CatalogHelper.getSchemas(catalog);
    if (schemas.size() > 0) {
      containSubSchema=true;
      break;
    }
  }
  AbstractStatisticalViewerProvider provider;
  if (catalogs.size() > 0 && containSubSchema) {
    createCatalogSchemaColumns(table);
    provider=new CatalogSchemaViewerProvier();
    final TableViewer createSecondStatisticalTable=createSecondStatisticalTable(sectionClient);
    createSecondStatisticalTable.addSelectionChangedListener(new DisplayTableAndViewListener());
    statisticalViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        StructuredSelection selection=(StructuredSelection)event.getSelection();
        CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
        createSecondStatisticalTable.setInput(firstElement.getSchemaIndicators());
        createSecondStatisticalTable.getTable().setVisible(true);
      }
    }
);
  }
 else {
    if (catalogs.size() > 0) {
      createCatalogTableColumns(table);
      provider=new CatalogViewerProvier();
    }
 else {
      createSchemaTableColumns(table);
      provider=new SchemaViewerProvier();
    }
    statisticalViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
  }
  statisticalViewer.setLabelProvider(provider);
  statisticalViewer.setContentProvider(provider);
  doSetInput();
  tableAndViewComposite=new Composite(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tableAndViewComposite);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.horizontalSpacing=50;
  tableAndViewComposite.setLayout(layout);
  tableAndViewComposite.setVisible(false);
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}","private void createStatisticalSection(Composite topComp){
  statisticalSection=this.createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  catalogTableViewer=new TableViewer(sectionClient,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  Table table=catalogTableViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<TdCatalog> catalogs=getCatalogs();
  boolean containSubSchema=false;
  for (  Catalog catalog : catalogs) {
    List<TdSchema> schemas=CatalogHelper.getSchemas(catalog);
    if (schemas.size() > 0) {
      containSubSchema=true;
      break;
    }
  }
  AbstractStatisticalViewerProvider provider;
  if (catalogs.size() > 0 && containSubSchema) {
    createCatalogSchemaColumns(table);
    provider=new CatalogSchemaViewerProvier();
    final TableViewer schemaTableViewer=createSecondStatisticalTable(sectionClient);
    schemaTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
    catalogTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        StructuredSelection selection=(StructuredSelection)event.getSelection();
        CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
        schemaTableViewer.setInput(firstElement.getSchemaIndicators());
        schemaTableViewer.getTable().setVisible(true);
      }
    }
);
  }
 else {
    if (catalogs.size() > 0) {
      createCatalogTableColumns(table);
      provider=new CatalogViewerProvier();
    }
 else {
      createSchemaTableColumns(table);
      provider=new SchemaViewerProvier();
    }
    catalogTableViewer.addSelectionChangedListener(new DisplayTableAndViewListener());
  }
  catalogTableViewer.setLabelProvider(provider);
  catalogTableViewer.setContentProvider(provider);
  doSetInput();
  tableAndViewComposite=new Composite(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tableAndViewComposite);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.horizontalSpacing=50;
  tableAndViewComposite.setLayout(layout);
  tableAndViewComposite.setVisible(false);
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}",0.9335892514395392
139983,"/** 
 * DOC qzhang Comment method ""doSetInput"".
 */
public void doSetInput(){
  List<CatalogIndicator> indicatorList=null;
  if (this.analysis.getResults().getIndicators().size() > 0) {
    indicatorList=getCatalogIndicators();
    if (indicatorList.size() == 0) {
      statisticalViewer.setInput(getSchemaIndicators());
    }
 else {
      List<SchemaIndicator> schemaIndicators=new ArrayList<SchemaIndicator>();
      schemaIndicators.addAll(getSchemaIndicators());
      schemaIndicators.addAll(indicatorList);
      statisticalViewer.setInput(schemaIndicators);
    }
  }
 else {
    indicatorList=new ArrayList<CatalogIndicator>();
  }
  refreshSumSection();
}","/** 
 * DOC qzhang Comment method ""doSetInput"".
 */
public void doSetInput(){
  List<CatalogIndicator> indicatorList=null;
  if (this.analysis.getResults().getIndicators().size() > 0) {
    indicatorList=getCatalogIndicators();
    if (indicatorList.size() == 0) {
      catalogTableViewer.setInput(getSchemaIndicators());
    }
 else {
      List<SchemaIndicator> schemaIndicators=new ArrayList<SchemaIndicator>();
      schemaIndicators.addAll(getSchemaIndicators());
      schemaIndicators.addAll(indicatorList);
      catalogTableViewer.setInput(schemaIndicators);
    }
  }
 else {
    indicatorList=new ArrayList<CatalogIndicator>();
  }
}",0.9473684210526316
139984,"public void fireRuningItemChanged(boolean status){
  currentEditor.setRunActionButtonState(status);
  if (status) {
    doSetInput();
  }
}","public void fireRuningItemChanged(boolean status){
  currentEditor.setRunActionButtonState(status);
  if (status) {
    refresh();
  }
  statisticalSection.setExpanded(status);
}",0.8201892744479495
139985,"public void selectionChanged(SelectionChangedEvent event){
  StructuredSelection selection=(StructuredSelection)event.getSelection();
  CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
  createSecondStatisticalTable.setInput(firstElement.getSchemaIndicators());
  createSecondStatisticalTable.getTable().setVisible(true);
}","public void selectionChanged(SelectionChangedEvent event){
  StructuredSelection selection=(StructuredSelection)event.getSelection();
  CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
  schemaTableViewer.setInput(firstElement.getSchemaIndicators());
  schemaTableViewer.getTable().setVisible(true);
}",0.8970588235294118
139986,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  getPreferenceStore().setDefault(PluginConstant.CHEAT_SHEET_VIEW,true);
  try {
    for (    BookMarkEnum bookMark : BookMarkEnum.VALUES) {
      BaseHelpSystem.getBookmarkManager().addBookmark(bookMark.getHref(),bookMark.getLabel());
    }
    doMigrationTask();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  getPreferenceStore().setDefault(PluginConstant.CHEAT_SHEET_VIEW,true);
  try {
    for (    BookMarkEnum bookMark : BookMarkEnum.VALUES) {
      BaseHelpSystem.getBookmarkManager().addBookmark(bookMark.getHref(),bookMark.getLabel());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8578371810449574
139987,"public DQRespositoryView(){
  super();
  CorePlugin.getDefault().checkDQStructure();
  CorePlugin.getDefault().setRespositoryView(this);
}","public DQRespositoryView(){
  super();
  CorePlugin.getDefault().checkDQStructure();
  CorePlugin.getDefault().setRespositoryView(this);
  CorePlugin.getDefault().doMigrationTask();
}",0.8598130841121495
139988,"/** 
 * DOC Zqin Comment method ""isAoverB"".
 * @param a
 * @param b
 * @return
 */
public static boolean isAoverB(String a,String b){
  if (!isEmpty(a,b) && (isNumberValue(a,b) || isRealNumberValue(a,b))) {
    Double da=new Double(a);
    Double db=new Double(b);
    return da > db;
  }
  if (!isEmpty(a,b) && isDateValue(a) && isDateValue(b)) {
    try {
      Date ad=DateFormat.getDateInstance().parse(a);
      Date bd=DateFormat.getDateInstance().parse(b);
      return ad.after(bd);
    }
 catch (    Exception e) {
      e.printStackTrace();
      return false;
    }
  }
  return false;
}","/** 
 * DOC Zqin Comment method ""isAoverB"".
 * @param a
 * @param b
 * @return
 */
public static boolean isAoverB(String a,String b){
  if (!isEmpty(a,b) && (isNumberValue(a,b) || isRealNumberValue(a,b))) {
    Double da=new Double(a);
    Double db=new Double(b);
    return da > db;
  }
  if (!isEmpty(a,b) && isDateValue(a) && isDateValue(b)) {
    try {
      String[] patterns=new String[2];
      patterns[0]=""String_Node_Str"";
      patterns[1]=""String_Node_Str"";
      Date ad=DateUtils.parseDate(a,patterns);
      Date bd=DateUtils.parseDate(b,patterns);
      return ad.after(bd);
    }
 catch (    Exception e) {
      e.printStackTrace();
      return false;
    }
  }
  return false;
}",0.7848882035466461
139989,"@Override protected Control createDialogArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  dateTime=new DateTime(top,SWT.CALENDAR);
  dateTime.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (isDatetime) {
    dateTime=new DateTime(top,SWT.TIME | SWT.BORDER);
    dateTime.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  return top;
}","@Override protected Control createDialogArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  timed=new DateTime(top,SWT.CALENDAR);
  timed.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (isDatetime) {
    timet=new DateTime(top,SWT.TIME | SWT.BORDER);
    timet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  return top;
}",0.9358024691358025
139990,"@Override protected void okPressed(){
  Calendar cenlendar=Calendar.getInstance();
  SimpleDateFormat format=null;
  int year=dateTime.getYear();
  int month=dateTime.getMonth();
  int day=dateTime.getDay();
  int hour=dateTime.getHours();
  int mnts=dateTime.getMinutes();
  int secds=dateTime.getSeconds();
  cenlendar.set(year,month,day,hour,mnts,secds);
  if (isDatetime) {
    format=new SimpleDateFormat(""String_Node_Str"");
  }
 else {
    format=new SimpleDateFormat(""String_Node_Str"");
  }
  selectDate=format.format(cenlendar.getTime());
  super.okPressed();
}","@Override protected void okPressed(){
  Calendar cenlendar=Calendar.getInstance();
  SimpleDateFormat format=null;
  int year=timed.getYear();
  int month=timed.getMonth();
  int day=timed.getDay();
  if (timet != null) {
    format=new SimpleDateFormat(""String_Node_Str"");
    int hour=timet.getHours();
    int mnts=timet.getMinutes();
    int secds=timet.getSeconds();
    cenlendar.set(year,month,day,hour,mnts,secds);
  }
 else {
    format=new SimpleDateFormat(""String_Node_Str"");
    cenlendar.set(year,month,day);
  }
  selectDate=format.format(cenlendar.getTime());
  super.okPressed();
}",0.660377358490566
139991,"@Override public void refresh(){
  doSetInput();
  refreshSumSection();
  refreshStatisticSection();
}","@Override public void refresh(){
  doSetInput();
  refreshSumSection();
}",0.8342857142857143
139992,"public void run(){
  HideSeriesPanel hideSeriesPanel=new HideSeriesPanel(columnSetMultiIndicator,tdColumn);
  if (hideSeriesPanel != null) {
    Composite frameComp=toolkit.createComposite(comp,SWT.EMBEDDED);
    frameComp.setLayout(new GridLayout());
    GridData gd=new GridData();
    gd.heightHint=230;
    gd.widthHint=460;
    frameComp.setLayoutData(gd);
    Frame frame=SWT_AWT.new_Frame(frameComp);
    frame.setLayout(new java.awt.BorderLayout());
    frame.add(hideSeriesPanel);
    frame.validate();
  }
}","public void run(){
  HideSeriesChartComposite hcc=new HideSeriesChartComposite(comp,columnSetMultiIndicator,tdColumn,false);
  GridData gd=new GridData();
  gd.heightHint=230;
  gd.widthHint=460;
  hcc.setLayoutData(gd);
}",0.2976995940460081
139993,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  List<Column> numericOrDateList=new ArrayList<Column>();
  if (columnSetMultiIndicator instanceof CountAvgNullIndicator) {
    numericOrDateList=columnSetMultiIndicator.getNumericColumns();
  }
 else {
    numericOrDateList=columnSetMultiIndicator.getDateColumns();
  }
  for (  Column column : numericOrDateList) {
    final TdColumn tdColumn=(TdColumn)column;
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tdColumn.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnSetMultiIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (tdColumn != null) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + tdColumn.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              HideSeriesPanel hideSeriesPanel=new HideSeriesPanel(columnSetMultiIndicator,tdColumn);
              if (hideSeriesPanel != null) {
                Composite frameComp=toolkit.createComposite(comp,SWT.EMBEDDED);
                frameComp.setLayout(new GridLayout());
                GridData gd=new GridData();
                gd.heightHint=230;
                gd.widthHint=460;
                frameComp.setLayoutData(gd);
                Frame frame=SWT_AWT.new_Frame(frameComp);
                frame.setLayout(new java.awt.BorderLayout());
                frame.add(hideSeriesPanel);
                frame.validate();
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  List<Column> numericOrDateList=new ArrayList<Column>();
  if (columnSetMultiIndicator instanceof CountAvgNullIndicator) {
    numericOrDateList=columnSetMultiIndicator.getNumericColumns();
  }
 else {
    numericOrDateList=columnSetMultiIndicator.getDateColumns();
  }
  for (  Column column : numericOrDateList) {
    final TdColumn tdColumn=(TdColumn)column;
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tdColumn.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnSetMultiIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (tdColumn != null) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + tdColumn.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              HideSeriesChartComposite hcc=new HideSeriesChartComposite(comp,columnSetMultiIndicator,tdColumn,false);
              GridData gd=new GridData();
              gd.heightHint=230;
              gd.widthHint=460;
              hcc.setLayoutData(gd);
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.8765743073047859
139994,"public void run(){
  HideSeriesPanel hideSeriesPanel=new HideSeriesPanel(columnSetMultiValueIndicator,tdColumn);
  if (hideSeriesPanel != null) {
    Composite frameComp=toolkit.createComposite(comp,SWT.EMBEDDED);
    frameComp.setLayout(new GridLayout());
    GridData gd=new GridData();
    gd.heightHint=300;
    gd.widthHint=600;
    frameComp.setLayoutData(gd);
    Frame frame=SWT_AWT.new_Frame(frameComp);
    frame.setLayout(new java.awt.BorderLayout());
    frame.add(hideSeriesPanel);
    frame.validate();
  }
}","public void run(){
  HideSeriesChartComposite hcc=new HideSeriesChartComposite(comp,columnSetMultiValueIndicator,tdColumn,true);
  GridData gd=new GridData();
  gd.widthHint=900;
  gd.heightHint=450;
  hcc.setLayoutData(gd);
}",0.2085561497326203
139995,"private void createBubbleOrGanttChart(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  List<Composite> previewChartList=new ArrayList<Composite>();
  List<Column> bubOrGanttColumnList=new ArrayList<Column>();
  if (columnSetMultiValueIndicator instanceof CountAvgNullIndicator) {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getNumericColumns();
  }
 else {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getDateColumns();
  }
  for (  Column column : bubOrGanttColumnList) {
    final TdColumn tdColumn=(TdColumn)column;
    final ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tdColumn.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnSetMultiValueIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout(2,false));
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (tdColumn != null) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + tdColumn.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              HideSeriesPanel hideSeriesPanel=new HideSeriesPanel(columnSetMultiValueIndicator,tdColumn);
              if (hideSeriesPanel != null) {
                Composite frameComp=toolkit.createComposite(comp,SWT.EMBEDDED);
                frameComp.setLayout(new GridLayout());
                GridData gd=new GridData();
                gd.heightHint=300;
                gd.widthHint=600;
                frameComp.setLayoutData(gd);
                Frame frame=SWT_AWT.new_Frame(frameComp);
                frame.setLayout(new java.awt.BorderLayout());
                frame.add(hideSeriesPanel);
                frame.validate();
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","private void createBubbleOrGanttChart(final ScrolledForm form,final Composite composite,final ColumnSetMultiValueIndicator columnSetMultiValueIndicator){
  List<Composite> previewChartList=new ArrayList<Composite>();
  List<Column> bubOrGanttColumnList=new ArrayList<Column>();
  if (columnSetMultiValueIndicator instanceof CountAvgNullIndicator) {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getNumericColumns();
  }
 else {
    bubOrGanttColumnList=columnSetMultiValueIndicator.getDateColumns();
  }
  for (  Column column : bubOrGanttColumnList) {
    final TdColumn tdColumn=(TdColumn)column;
    final ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + tdColumn.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnSetMultiValueIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout(2,false));
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (tdColumn != null) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + tdColumn.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              HideSeriesChartComposite hcc=new HideSeriesChartComposite(comp,columnSetMultiValueIndicator,tdColumn,true);
              GridData gd=new GridData();
              gd.widthHint=900;
              gd.heightHint=450;
              hcc.setLayoutData(gd);
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.8599178184534927
139996,"@Override public void expansionStateChanged(ExpansionEvent e){
  getChartComposite().layout();
  form.reflow(true);
  composite.pack();
}","@Override public void expansionStateChanged(ExpansionEvent e){
  composite.layout();
  composite.pack();
  form.reflow(true);
}",0.803030303030303
139997,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  previewChartList=new ArrayList<ExpandableComposite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().syncExec(new Runnable(){
            public void run(){
              Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
              for (              EIndicatorChartType chartType : indicatorComposite.keySet()) {
                List<IndicatorUnit> units=indicatorComposite.get(chartType);
                if (!units.isEmpty()) {
                  final IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
                  JFreeChart chart=chartTypeState.getFeatChart();
                  if (chart != null) {
                    final ChartComposite chartComp=new ChartComposite(comp,SWT.NONE,chart,true);
                    GridData gd=new GridData();
                    gd.widthHint=550;
                    gd.heightHint=250;
                    chartComp.setLayoutData(gd);
                    addListenerToChartComp(chartComp,chartTypeState);
                  }
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
        composite.pack();
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  previewChartList=new ArrayList<ExpandableComposite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().syncExec(new Runnable(){
            public void run(){
              Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
              for (              EIndicatorChartType chartType : indicatorComposite.keySet()) {
                List<IndicatorUnit> units=indicatorComposite.get(chartType);
                if (!units.isEmpty()) {
                  final IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
                  JFreeChart chart=chartTypeState.getFeatChart();
                  if (chart != null) {
                    final ChartComposite chartComp=new ChartComposite(comp,SWT.NONE,chart,true);
                    GridData gd=new GridData();
                    gd.widthHint=550;
                    gd.heightHint=250;
                    chartComp.setLayoutData(gd);
                    addListenerToChartComp(chartComp,chartTypeState);
                  }
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        composite.layout();
        composite.pack();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9200952057123428
139998,"@Override protected Control createDialogArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout(2,false));
  Label dl=new Label(top,SWT.NONE);
  dl.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  dl.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  timed=new DateTime(top,SWT.CALENDAR);
  timed.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (isDatetime) {
    Label dt=new Label(top,SWT.NONE);
    dt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    timet=new DateTime(top,SWT.TIME);
    timet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  return top;
}","@Override protected Control createDialogArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout());
  dateTime=new DateTime(top,SWT.CALENDAR);
  dateTime.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (isDatetime) {
    dateTime=new DateTime(top,SWT.TIME | SWT.BORDER);
    dateTime.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  return top;
}",0.4921077065923863
139999,"@Override protected void okPressed(){
  Calendar cenlendar=Calendar.getInstance();
  SimpleDateFormat format=null;
  int year=timed.getYear();
  int month=timed.getMonth();
  int day=timed.getDay();
  if (timet != null) {
    format=new SimpleDateFormat(""String_Node_Str"");
    int hour=timet.getHours();
    int mnts=timet.getMinutes();
    int secds=timet.getSeconds();
    cenlendar.set(year,month,day,hour,mnts,secds);
  }
 else {
    format=new SimpleDateFormat(""String_Node_Str"");
    cenlendar.set(year,month,day);
  }
  selectDate=format.format(cenlendar.getTime());
  super.okPressed();
}","@Override protected void okPressed(){
  Calendar cenlendar=Calendar.getInstance();
  SimpleDateFormat format=null;
  int year=dateTime.getYear();
  int month=dateTime.getMonth();
  int day=dateTime.getDay();
  int hour=dateTime.getHours();
  int mnts=dateTime.getMinutes();
  int secds=dateTime.getSeconds();
  cenlendar.set(year,month,day,hour,mnts,secds);
  if (isDatetime) {
    format=new SimpleDateFormat(""String_Node_Str"");
  }
 else {
    format=new SimpleDateFormat(""String_Node_Str"");
  }
  selectDate=format.format(cenlendar.getTime());
  super.okPressed();
}",0.6483704974271012
140000,"@Override protected void addFields(){
  int colsForLayout=2;
  if (isRangeForDate) {
    colsForLayout=4;
  }
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(colsForLayout,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label lowerLabel=new Label(group,SWT.NONE);
  lowerLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  lowerText=new Text(group,SWT.BORDER);
  lowerText.setLayoutData(gdText);
  if (isRangeForDate) {
    lowerBTN=new Button(group,SWT.PUSH);
    lowerBTN.setText(""String_Node_Str"");
    lowerDelBTN=new Button(group,SWT.PUSH);
    lowerDelBTN.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    lowerText.setEditable(false);
    lowerText.setEnabled(false);
  }
  Label higherLabel=new Label(group,SWT.NONE);
  higherLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  higherText=new Text(group,SWT.BORDER);
  higherText.setLayoutData(gdText);
  if (isRangeForDate) {
    higherBTN=new Button(group,SWT.PUSH);
    higherBTN.setText(""String_Node_Str"");
    higherDelBTN=new Button(group,SWT.PUSH);
    higherDelBTN.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    higherText.setEditable(false);
    higherText.setEnabled(false);
  }
  if (!isOptionForRowCount && !isRangeForDate) {
    Group pGroup=new Group(this,SWT.NONE);
    pGroup.setLayout(new GridLayout(2,false));
    pGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pGroup.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    Label pLower=new Label(pGroup,SWT.NONE);
    pLower.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pLowerText=new Text(pGroup,SWT.BORDER);
    pLowerText.setLayoutData(gdText);
    Label pHigher=new Label(pGroup,SWT.NONE);
    pHigher.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pHigherText=new Text(pGroup,SWT.BORDER);
    pHigherText.setLayoutData(gdText);
    setPercentUIEnable();
  }
}","@Override protected void addFields(){
  int colsForLayout=2;
  if (isRangeForDate) {
    colsForLayout=4;
  }
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(colsForLayout,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label lowerLabel=new Label(group,SWT.NONE);
  lowerLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  lowerText=new Text(group,SWT.BORDER);
  lowerText.setLayoutData(gdText);
  if (isRangeForDate) {
    lowerBTN=new Button(group,SWT.PUSH);
    lowerBTN.setText(""String_Node_Str"");
    lowerBTN.setToolTipText(""String_Node_Str"");
    lowerDelBTN=new Button(group,SWT.PUSH);
    lowerDelBTN.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    lowerDelBTN.setToolTipText(""String_Node_Str"");
    lowerText.setEditable(false);
    lowerText.setEnabled(false);
  }
  Label higherLabel=new Label(group,SWT.NONE);
  higherLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  higherText=new Text(group,SWT.BORDER);
  higherText.setLayoutData(gdText);
  if (isRangeForDate) {
    higherBTN=new Button(group,SWT.PUSH);
    higherBTN.setText(""String_Node_Str"");
    higherBTN.setToolTipText(""String_Node_Str"");
    higherDelBTN=new Button(group,SWT.PUSH);
    higherDelBTN.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    higherDelBTN.setToolTipText(""String_Node_Str"");
    higherText.setEditable(false);
    higherText.setEnabled(false);
  }
  if (!isOptionForRowCount && !isRangeForDate) {
    Group pGroup=new Group(this,SWT.NONE);
    pGroup.setLayout(new GridLayout(2,false));
    pGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pGroup.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    Label pLower=new Label(pGroup,SWT.NONE);
    pLower.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pLowerText=new Text(pGroup,SWT.BORDER);
    pLowerText.setLayoutData(gdText);
    Label pHigher=new Label(pGroup,SWT.NONE);
    pHigher.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pHigherText=new Text(pGroup,SWT.BORDER);
    pHigherText.setLayoutData(gdText);
    setPercentUIEnable();
  }
}",0.954001839926403
