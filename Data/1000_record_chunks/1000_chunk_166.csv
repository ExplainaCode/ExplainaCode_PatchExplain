record_number,buggy_code,fixed_code,code_similarity
165001,"@Test public void parcelsCorrectly() throws JSONException {
  PaymentMethodToken paymentMethodToken=mock(PaymentMethodToken.class);
  when(paymentMethodToken.getToken()).thenReturn(stringFromFixture(""String_Node_Str""));
  UserAddress billingAddress=getAddressObject();
  UserAddress shippingAddress=getAddressObject();
  FullWallet wallet=mock(FullWallet.class);
  when(wallet.getPaymentMethodToken()).thenReturn(paymentMethodToken);
  when(wallet.getPaymentDescriptions()).thenReturn(new String[]{""String_Node_Str""});
  when(wallet.getEmail()).thenReturn(""String_Node_Str"");
  when(wallet.getBuyerBillingAddress()).thenReturn(billingAddress);
  when(wallet.getBuyerShippingAddress()).thenReturn(shippingAddress);
  when(wallet.getGoogleTransactionId()).thenReturn(""String_Node_Str"");
  AndroidPayCardNonce androidPayCardNonce=AndroidPayCardNonce.fromFullWallet(wallet);
  Parcel parcel=Parcel.obtain();
  androidPayCardNonce.writeToParcel(parcel,0);
  parcel.setDataPosition(0);
  AndroidPayCardNonce parceled=AndroidPayCardNonce.CREATOR.createFromParcel(parcel);
  assertEquals(""String_Node_Str"",parceled.getTypeLabel());
  assertEquals(""String_Node_Str"",parceled.getNonce());
  assertEquals(""String_Node_Str"",parceled.getDescription());
  assertEquals(""String_Node_Str"",parceled.getCardType());
  assertEquals(""String_Node_Str"",parceled.getLastTwo());
  assertEquals(""String_Node_Str"",parceled.getEmail());
  assertNotNull(parceled.getBillingAddress());
  assertNotNull(parceled.getShippingAddress());
  assertEquals(""String_Node_Str"",parceled.getGoogleTransactionId());
}","@Test public void parcelsCorrectly() throws JSONException {
  PaymentMethodToken paymentMethodToken=mock(PaymentMethodToken.class);
  when(paymentMethodToken.getToken()).thenReturn(stringFromFixture(""String_Node_Str""));
  UserAddress billingAddress=getAddressObject();
  UserAddress shippingAddress=getAddressObject();
  FullWallet wallet=mock(FullWallet.class);
  Cart cart=Cart.newBuilder().build();
  when(wallet.getPaymentMethodToken()).thenReturn(paymentMethodToken);
  when(wallet.getPaymentDescriptions()).thenReturn(new String[]{""String_Node_Str""});
  when(wallet.getEmail()).thenReturn(""String_Node_Str"");
  when(wallet.getBuyerBillingAddress()).thenReturn(billingAddress);
  when(wallet.getBuyerShippingAddress()).thenReturn(shippingAddress);
  when(wallet.getGoogleTransactionId()).thenReturn(""String_Node_Str"");
  AndroidPayCardNonce androidPayCardNonce=AndroidPayCardNonce.fromFullWallet(wallet,cart);
  Parcel parcel=Parcel.obtain();
  androidPayCardNonce.writeToParcel(parcel,0);
  parcel.setDataPosition(0);
  AndroidPayCardNonce parceled=AndroidPayCardNonce.CREATOR.createFromParcel(parcel);
  assertEquals(""String_Node_Str"",parceled.getTypeLabel());
  assertEquals(""String_Node_Str"",parceled.getNonce());
  assertEquals(""String_Node_Str"",parceled.getDescription());
  assertEquals(""String_Node_Str"",parceled.getCardType());
  assertEquals(""String_Node_Str"",parceled.getLastTwo());
  assertEquals(""String_Node_Str"",parceled.getEmail());
  assertNotNull(parceled.getBillingAddress());
  assertNotNull(parceled.getShippingAddress());
  assertEquals(""String_Node_Str"",parceled.getGoogleTransactionId());
  assertNotNull(parceled.getCart());
}",0.9749303621169916
165002,"private DropInRequest getDropInRequest(){
  DropInRequest paymentRequest=new DropInRequest().clientToken(mAuthorization).collectDeviceData(Settings.shouldCollectDeviceData(this)).androidPayCart(getAndroidPayCart()).androidPayShippingAddressRequired(Settings.isAndroidPayShippingAddressRequired(this)).androidPayPhoneNumberRequired(Settings.isAndroidPayPhoneNumberRequired(this)).androidPayAllowedCountriesForShipping(Settings.getAndroidPayAllowedCountriesForShipping(this));
  if (Settings.isPayPalAddressScopeRequested(this)) {
    paymentRequest.paypalAdditionalScopes(Collections.singletonList(PayPal.SCOPE_ADDRESS));
  }
  return paymentRequest;
}","private DropInRequest getDropInRequest(){
  DropInRequest dropInRequest=new DropInRequest().clientToken(mAuthorization).collectDeviceData(Settings.shouldCollectDeviceData(this)).androidPayCart(getAndroidPayCart()).androidPayShippingAddressRequired(Settings.isAndroidPayShippingAddressRequired(this)).androidPayPhoneNumberRequired(Settings.isAndroidPayPhoneNumberRequired(this)).androidPayAllowedCountriesForShipping(Settings.getAndroidPayAllowedCountriesForShipping(this));
  if (Settings.isPayPalAddressScopeRequested(this)) {
    dropInRequest.paypalAdditionalScopes(Collections.singletonList(PayPal.SCOPE_ADDRESS));
  }
  return dropInRequest;
}",0.9699769053117784
165003,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  safelyCloseLoadingView();
  if (resultCode == RESULT_OK) {
    if (requestCode == DROP_IN_REQUEST) {
      DropInResult result=data.getParcelableExtra(DropInResult.EXTRA_DROP_IN_RESULT);
      displayResult(result.getPaymentMethodNonce(),result.getDeviceData());
    }
 else     if (requestCode == CUSTOM_REQUEST || requestCode == PAYPAL_REQUEST) {
      displayResult((PaymentMethodNonce)data.getParcelableExtra(EXTRA_PAYMENT_METHOD_NONCE),data.getStringExtra(EXTRA_DEVICE_DATA));
    }
    if (mNonce instanceof CardNonce && Settings.isThreeDSecureEnabled(this)) {
      mLoading=ProgressDialog.show(this,getString(R.string.loading),getString(R.string.loading),true,false);
      ThreeDSecure.performVerification(mBraintreeFragment,mNonce.getNonce(),""String_Node_Str"");
    }
 else {
      mCreateTransactionButton.setEnabled(true);
    }
  }
 else   if (resultCode != RESULT_CANCELED) {
    safelyCloseLoadingView();
    showDialog(((Exception)data.getParcelableExtra(DropInActivity.EXTRA_ERROR)).getMessage());
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  safelyCloseLoadingView();
  if (resultCode == RESULT_OK) {
    if (requestCode == DROP_IN_REQUEST) {
      DropInResult result=data.getParcelableExtra(DropInResult.EXTRA_DROP_IN_RESULT);
      displayResult(result.getPaymentMethodNonce(),result.getDeviceData());
    }
 else     if (requestCode == CUSTOM_REQUEST || requestCode == PAYPAL_REQUEST) {
      displayResult((PaymentMethodNonce)data.getParcelableExtra(EXTRA_PAYMENT_METHOD_NONCE),data.getStringExtra(EXTRA_DEVICE_DATA));
    }
    if (mNonce instanceof CardNonce && Settings.isThreeDSecureEnabled(this)) {
      mLoading=ProgressDialog.show(this,getString(R.string.loading),getString(R.string.loading),true,false);
      ThreeDSecure.performVerification(mBraintreeFragment,mNonce.getNonce(),""String_Node_Str"");
    }
 else {
      mCreateTransactionButton.setEnabled(true);
    }
  }
 else   if (resultCode != RESULT_CANCELED) {
    safelyCloseLoadingView();
    showDialog(((Exception)data.getSerializableExtra(DropInActivity.EXTRA_ERROR)).getMessage());
  }
}",0.993975903614458
165004,"@Test public void onStop_flushesAnalyticsEvents() throws JSONException, InvalidArgumentException {
  String configuration=new TestConfigurationStringBuilder().analytics(""String_Node_Str"").build();
  mockConfigurationManager(Configuration.fromJson(configuration));
  Robolectric.getForegroundThreadScheduler().pause();
  Context context=spy(RuntimeEnvironment.application);
  when(mActivity.getApplicationContext()).thenReturn(context);
  BraintreeFragment fragment=BraintreeFragment.newInstance(mActivity,TOKENIZATION_KEY);
  Robolectric.getForegroundThreadScheduler().unPause();
  Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
  fragment.onStop();
  ArgumentCaptor<Intent> intentCaptor=ArgumentCaptor.forClass(Intent.class);
  verify(context).startService(intentCaptor.capture());
  Intent serviceIntent=intentCaptor.getValue();
  assertEquals(TOKENIZATION_KEY,serviceIntent.getStringExtra(AnalyticsIntentService.EXTRA_AUTHORIZATION));
  assertEquals(configuration,serviceIntent.getStringExtra(AnalyticsIntentService.EXTRA_CONFIGURATION));
}","@Test public void onStop_flushesAnalyticsEvents() throws JSONException, InvalidArgumentException {
  String configuration=new TestConfigurationStringBuilder().analytics(""String_Node_Str"").build();
  mockConfigurationManager(Configuration.fromJson(configuration));
  Robolectric.getForegroundThreadScheduler().pause();
  Context context=Mockito.spy(RuntimeEnvironment.application);
  when(mActivity.getApplicationContext()).thenReturn(context);
  BraintreeFragment fragment=BraintreeFragment.newInstance(mActivity,TOKENIZATION_KEY);
  Robolectric.getForegroundThreadScheduler().unPause();
  Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
  fragment.onStop();
  ArgumentCaptor<Intent> intentCaptor=ArgumentCaptor.forClass(Intent.class);
  verify(context).startService(intentCaptor.capture());
  Intent serviceIntent=intentCaptor.getValue();
  assertEquals(TOKENIZATION_KEY,serviceIntent.getStringExtra(AnalyticsIntentService.EXTRA_AUTHORIZATION));
  assertEquals(configuration,serviceIntent.getStringExtra(AnalyticsIntentService.EXTRA_CONFIGURATION));
}",0.9962756052141528
165005,"@Test(timeout=1000) public void showsPayPalAndVenmo() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(true,true,false);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),false);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_paypal_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_venmo_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider_2).getVisibility());
}","@Test(timeout=1000) public void showsPayPalAndVenmo() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(true,true,false);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),false);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_paypal_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_venmo_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider_2).getVisibility());
}",0.9343936381709742
165006,"@Test(timeout=1000) public void startsPayWithVenmo() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(true,true,false);
  Context mockContextForVenmo=new MockContextForVenmo().venmoInstalled().build();
  when(fragment.getApplicationContext()).thenReturn(mockContextForVenmo);
  SignatureVerificationTestUtils.disableSignatureVerification();
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY);
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),true);
  clickButton(R.id.bt_venmo_button);
  verify(fragment).sendAnalyticsEvent(""String_Node_Str"");
}","@Test(timeout=1000) public void startsPayWithVenmo() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(true,true,false);
  Context mockContextForVenmo=new MockContextForVenmo().venmoInstalled().build();
  when(fragment.getApplicationContext()).thenReturn(mockContextForVenmo);
  SignatureVerificationTestUtils.disableSignatureVerification();
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY);
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),true);
  clickButton(com.braintreepayments.api.dropin.R.id.bt_venmo_button);
  verify(fragment).sendAnalyticsEvent(""String_Node_Str"");
}",0.980345443716498
165007,"@Test(timeout=1000) public void onlyShowsAndroidPay() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(false,false,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  setupPaymentButton(fragment.getConfiguration(),true);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_paypal_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_venmo_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider_2).getVisibility());
}","@Test(timeout=1000) public void onlyShowsAndroidPay() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(false,false,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  setupPaymentButton(fragment.getConfiguration(),true);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_paypal_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_venmo_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider_2).getVisibility());
}",0.9315636665284116
165008,"@Test(timeout=1000) public void showsAllMethodsAndDividers() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(true,true,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  getInstrumentation().waitForIdleSync();
  setupPaymentButton(fragment.getConfiguration(),true);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_venmo_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_paypal_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider_2).getVisibility());
}","@Test(timeout=1000) public void showsAllMethodsAndDividers() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(true,true,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  getInstrumentation().waitForIdleSync();
  setupPaymentButton(fragment.getConfiguration(),true);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_venmo_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_paypal_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider_2).getVisibility());
}",0.9370469286531858
165009,"@Test(timeout=5000) public void startsPayWithPayPalWithAddressScope() throws InvalidArgumentException, JSONException, InterruptedException {
  Looper.prepare();
  getFragment(true,true,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).paypalAdditionalScopes(Collections.singletonList(PayPal.SCOPE_ADDRESS));
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  clickButton(R.id.bt_paypal_button);
  intending(hasAction(equalTo(Intent.ACTION_VIEW))).respondWith(new ActivityResult(0,null));
  intended(allOf(hasAction(equalTo(Intent.ACTION_VIEW)),hasData(hasScheme(""String_Node_Str"")),hasData(hasHost(""String_Node_Str"")),hasData(hasPath(""String_Node_Str"")),hasData(hasParamWithName(""String_Node_Str"")),hasData(hasScope(""String_Node_Str"")),hasData(hasParamWithName(""String_Node_Str"")),hasData(hasParamWithValue(""String_Node_Str"",""String_Node_Str"")),hasData(hasParamWithValue(""String_Node_Str"",""String_Node_Str"")),hasExtras(allOf(hasEntry(BraintreeBrowserSwitchActivity.EXTRA_BROWSER_SWITCH,true)))));
}","@Test(timeout=5000) public void startsPayWithPayPalWithAddressScope() throws InvalidArgumentException, JSONException, InterruptedException {
  Looper.prepare();
  getFragment(true,true,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).paypalAdditionalScopes(Collections.singletonList(PayPal.SCOPE_ADDRESS));
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  clickButton(com.braintreepayments.api.dropin.R.id.bt_paypal_button);
  intending(hasAction(equalTo(Intent.ACTION_VIEW))).respondWith(new ActivityResult(0,null));
  intended(allOf(hasAction(equalTo(Intent.ACTION_VIEW)),hasData(hasScheme(""String_Node_Str"")),hasData(hasHost(""String_Node_Str"")),hasData(hasPath(""String_Node_Str"")),hasData(hasParamWithName(""String_Node_Str"")),hasData(hasScope(""String_Node_Str"")),hasData(hasParamWithName(""String_Node_Str"")),hasData(hasParamWithValue(""String_Node_Str"",""String_Node_Str"")),hasData(hasParamWithValue(""String_Node_Str"",""String_Node_Str"")),hasExtras(allOf(hasEntry(BraintreeBrowserSwitchActivity.EXTRA_BROWSER_SWITCH,true)))));
}",0.9855579868708972
165010,"@Test(timeout=1000) public void showsLoadingIndicatorWhileWaitingForConfiguration() throws InvalidArgumentException {
  BraintreeFragment fragment=spy(BraintreeFragment.newInstance(mActivity,TOKENIZATION_KEY));
  when(fragment.getConfiguration()).thenReturn(null);
  fragment.mHttpClient=new BraintreeHttpClient(Authorization.fromString(TOKENIZATION_KEY)){
    @Override public void get(    String path,    HttpResponseCallback callback){
    }
  }
;
  getInstrumentation().waitForIdleSync();
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,new PaymentRequest().tokenizationKey(TOKENIZATION_KEY));
  mPaymentButton.mBraintreeFragment=fragment;
  getInstrumentation().waitForIdleSync();
  ViewSwitcher viewSwitcher=(ViewSwitcher)mPaymentButton.getView().findViewById(R.id.bt_payment_method_view_switcher);
  assertEquals(1,viewSwitcher.getDisplayedChild());
}","@Test(timeout=1000) public void showsLoadingIndicatorWhileWaitingForConfiguration() throws InvalidArgumentException {
  BraintreeFragment fragment=spy(BraintreeFragment.newInstance(mActivity,TOKENIZATION_KEY));
  when(fragment.getConfiguration()).thenReturn(null);
  fragment.mHttpClient=new BraintreeHttpClient(Authorization.fromString(TOKENIZATION_KEY)){
    @Override public void get(    String path,    HttpResponseCallback callback){
    }
  }
;
  getInstrumentation().waitForIdleSync();
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,new PaymentRequest().tokenizationKey(TOKENIZATION_KEY));
  mPaymentButton.mBraintreeFragment=fragment;
  getInstrumentation().waitForIdleSync();
  ViewSwitcher viewSwitcher=(ViewSwitcher)mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_method_view_switcher);
  assertEquals(1,viewSwitcher.getDisplayedChild());
}",0.9816768461965576
165011,"@Test(timeout=1000) public void showsPayPalAndAndroidPay() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(true,false,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  setupPaymentButton(fragment.getConfiguration(),true);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_paypal_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_venmo_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider_2).getVisibility());
}","@Test(timeout=1000) public void showsPayPalAndAndroidPay() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(true,false,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  setupPaymentButton(fragment.getConfiguration(),true);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_paypal_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_venmo_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider_2).getVisibility());
}",0.9321266968325792
165012,"@Test(timeout=1000) public void showsVenmoAndAndroidPay() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(false,true,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),true);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_paypal_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_venmo_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider_2).getVisibility());
}","@Test(timeout=1000) public void showsVenmoAndAndroidPay() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(false,true,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),true);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_paypal_button).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_venmo_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider_2).getVisibility());
}",0.934549781832606
165013,"@Test(timeout=5000) public void startsPayWithAndroidPay() throws JSONException, InvalidArgumentException, InterruptedException {
  Looper.prepare();
  BraintreeFragment fragment=getFragment(true,true,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),true);
  clickButton(R.id.bt_android_pay_button);
  verify(fragment).sendAnalyticsEvent(""String_Node_Str"");
}","@Test(timeout=5000) public void startsPayWithAndroidPay() throws JSONException, InvalidArgumentException, InterruptedException {
  Looper.prepare();
  BraintreeFragment fragment=getFragment(true,true,true);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY).androidPayCart(Cart.newBuilder().build());
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),true);
  clickButton(com.braintreepayments.api.dropin.R.id.bt_android_pay_button);
  verify(fragment).sendAnalyticsEvent(""String_Node_Str"");
}",0.9761042722664736
165014,"@Test(timeout=1000) public void onlyShowsVenmo() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(false,true,false);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY);
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),false);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_venmo_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_paypal_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider_2).getVisibility());
}","@Test(timeout=1000) public void onlyShowsVenmo() throws InvalidArgumentException, JSONException, InterruptedException {
  BraintreeFragment fragment=getFragment(false,true,false);
  PaymentRequest paymentRequest=new PaymentRequest().tokenizationKey(TOKENIZATION_KEY);
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,paymentRequest);
  getInstrumentation().waitForIdleSync();
  mPaymentButton.mBraintreeFragment=fragment;
  setupPaymentButton(fragment.getConfiguration(),false);
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_venmo_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_paypal_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider_2).getVisibility());
}",0.9315636665284116
165015,"@Test(timeout=5000) public void startsPayWithPayPal() throws InvalidArgumentException, JSONException, InterruptedException {
  Looper.prepare();
  getFragment(true,true,true);
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,new PaymentRequest().tokenizationKey(TOKENIZATION_KEY));
  getInstrumentation().waitForIdleSync();
  clickButton(R.id.bt_paypal_button);
  intending(hasAction(equalTo(Intent.ACTION_VIEW))).respondWith(new ActivityResult(0,null));
  intended(allOf(hasAction(equalTo(Intent.ACTION_VIEW)),hasData(hasScheme(""String_Node_Str"")),hasData(hasHost(""String_Node_Str"")),hasData(hasPath(""String_Node_Str"")),hasData(hasParamWithName(""String_Node_Str"")),hasData(not(hasScope(""String_Node_Str""))),hasData(hasParamWithName(""String_Node_Str"")),hasData(hasParamWithValue(""String_Node_Str"",""String_Node_Str"")),hasData(hasParamWithValue(""String_Node_Str"",""String_Node_Str"")),hasExtras(allOf(hasEntry(BraintreeBrowserSwitchActivity.EXTRA_BROWSER_SWITCH,true)))));
}","@Test(timeout=5000) public void startsPayWithPayPal() throws InvalidArgumentException, JSONException, InterruptedException {
  Looper.prepare();
  getFragment(true,true,true);
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,new PaymentRequest().tokenizationKey(TOKENIZATION_KEY));
  getInstrumentation().waitForIdleSync();
  clickButton(com.braintreepayments.api.dropin.R.id.bt_paypal_button);
  intending(hasAction(equalTo(Intent.ACTION_VIEW))).respondWith(new ActivityResult(0,null));
  intended(allOf(hasAction(equalTo(Intent.ACTION_VIEW)),hasData(hasScheme(""String_Node_Str"")),hasData(hasHost(""String_Node_Str"")),hasData(hasPath(""String_Node_Str"")),hasData(hasParamWithName(""String_Node_Str"")),hasData(not(hasScope(""String_Node_Str""))),hasData(hasParamWithName(""String_Node_Str"")),hasData(hasParamWithValue(""String_Node_Str"",""String_Node_Str"")),hasData(hasParamWithValue(""String_Node_Str"",""String_Node_Str"")),hasExtras(allOf(hasEntry(BraintreeBrowserSwitchActivity.EXTRA_BROWSER_SWITCH,true)))));
}",0.9836875926841324
165016,"@Test(timeout=1000) public void onlyShowsPayPal() throws InvalidArgumentException, JSONException {
  getFragment(true,false,false);
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,new PaymentRequest().tokenizationKey(TOKENIZATION_KEY));
  getInstrumentation().waitForIdleSync();
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(R.id.bt_paypal_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_venmo_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(R.id.bt_payment_button_divider_2).getVisibility());
}","@Test(timeout=1000) public void onlyShowsPayPal() throws InvalidArgumentException, JSONException {
  getFragment(true,false,false);
  mPaymentButton=PaymentButton.newInstance(mActivity,android.R.id.content,new PaymentRequest().tokenizationKey(TOKENIZATION_KEY));
  getInstrumentation().waitForIdleSync();
  assertEquals(View.VISIBLE,mPaymentButton.getView().getVisibility());
  assertEquals(View.VISIBLE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_paypal_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_venmo_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_android_pay_button).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider).getVisibility());
  assertEquals(View.GONE,mPaymentButton.getView().findViewById(com.braintreepayments.api.dropin.R.id.bt_payment_button_divider_2).getVisibility());
}",0.918032786885246
165017,"@Test(timeout=30000) public void addsEventOnSDKExitWithServerUnavailableError(){
  setupActivity(new TestClientTokenBuilder().withAnalytics().build());
  waitForAddPaymentFormHeader();
  mFragment.postCallback(new DownForMaintenanceException());
  waitForActivityToFinish(mActivity);
  verifyAnalyticsEvent(""String_Node_Str"");
}","@Test(timeout=30000) public void addsEventOnSDKExitWithServerUnavailableError(){
  setupActivity(new TestClientTokenBuilder().withAnalytics().build());
  waitForAddPaymentFormHeader();
  mFragment.postCallback(new DownForMaintenanceException(""String_Node_Str""));
  waitForActivityToFinish(mActivity);
  verifyAnalyticsEvent(""String_Node_Str"");
}",0.7815750371471025
165018,"@Test(timeout=30000) public void addsEventOnSDKExitWithDeveloperError(){
  setupActivity(new TestClientTokenBuilder().withAnalytics().build());
  waitForAddPaymentFormHeader();
  mFragment.postCallback(new AuthenticationException());
  waitForActivityToFinish(mActivity);
  verifyAnalyticsEvent(""String_Node_Str"");
}","@Test(timeout=30000) public void addsEventOnSDKExitWithDeveloperError(){
  setupActivity(new TestClientTokenBuilder().withAnalytics().build());
  waitForAddPaymentFormHeader();
  mFragment.postCallback(new AuthenticationException(""String_Node_Str""));
  waitForActivityToFinish(mActivity);
  verifyAnalyticsEvent(""String_Node_Str"");
}",0.773497688751926
165019,"@Test(timeout=30000) public void addsEventOnSDKExitWithServerError(){
  setupActivity(new TestClientTokenBuilder().withAnalytics().build());
  waitForAddPaymentFormHeader();
  mFragment.postCallback(new ServerException());
  waitForActivityToFinish(mActivity);
  verifyAnalyticsEvent(""String_Node_Str"");
}","@Test(timeout=30000) public void addsEventOnSDKExitWithServerError(){
  setupActivity(new TestClientTokenBuilder().withAnalytics().build());
  waitForAddPaymentFormHeader();
  mFragment.postCallback(new ServerException(""String_Node_Str""));
  waitForActivityToFinish(mActivity);
  verifyAnalyticsEvent(""String_Node_Str"");
}",0.7655502392344498
165020,"@Test(timeout=30000) public void returnsDeveloperErrorOnUpgradeRequiredException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_DEVELOPER_ERROR,new UpgradeRequiredException());
}","@Test(timeout=30000) public void returnsDeveloperErrorOnUpgradeRequiredException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_DEVELOPER_ERROR,new UpgradeRequiredException(""String_Node_Str""));
}",0.9689213893967094
165021,"@Test(timeout=30000) public void returnsDeveloperErrorOnAuthenticationException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_DEVELOPER_ERROR,new AuthenticationException());
}","@Test(timeout=30000) public void returnsDeveloperErrorOnAuthenticationException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_DEVELOPER_ERROR,new AuthenticationException(""String_Node_Str""));
}",0.9686924493554327
165022,"@Test(timeout=30000) public void returnsDeveloperErrorOnAuthorizationException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_DEVELOPER_ERROR,new AuthorizationException());
}","@Test(timeout=30000) public void returnsDeveloperErrorOnAuthorizationException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_DEVELOPER_ERROR,new AuthorizationException(""String_Node_Str""));
}",0.9684601113172542
165023,"@Test(timeout=30000) public void returnsServerErrorOnServerException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_SERVER_ERROR,new ServerException());
}","@Test(timeout=30000) public void returnsServerErrorOnServerException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_SERVER_ERROR,new ServerException(""String_Node_Str""));
}",0.9659318637274548
165024,"@Test(timeout=30000) public void returnsServerErrorOnUnexpectedException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_SERVER_ERROR,new UnexpectedException());
}","@Test(timeout=30000) public void returnsServerErrorOnUnexpectedException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_SERVER_ERROR,new UnexpectedException(""String_Node_Str""));
}",0.966990291262136
165025,"@Test(timeout=30000) public void returnsServerUnavailableOnDownForMaintenanceException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_SERVER_UNAVAILABLE,new DownForMaintenanceException());
}","@Test(timeout=30000) public void returnsServerUnavailableOnDownForMaintenanceException() throws InterruptedException {
  setupActivityWithBraintree();
  assertExceptionIsReturned(BraintreePaymentActivity.BRAINTREE_RESULT_SERVER_UNAVAILABLE,new DownForMaintenanceException(""String_Node_Str""));
}",0.9702276707530648
165026,"@Before public void setUp(){
  BraintreeHttpClient.DEBUG=true;
  PayPalTestSignatureVerification.disableAppSwitchSignatureVerification();
}","@Before public void setUp(){
  PayPalTestSignatureVerification.disableAppSwitchSignatureVerification();
}",0.860655737704918
165027,"public BraintreeTestHttpClient(Authorization authorization,Intent intent){
  super(authorization);
  BraintreeHttpClient.DEBUG=true;
  mIntent=intent;
  mDelay=mIntent.getLongExtra(BraintreePaymentTestActivity.EXTRA_DELAY,0);
}","public BraintreeTestHttpClient(Authorization authorization,Intent intent){
  super(authorization);
  mIntent=intent;
  mDelay=mIntent.getLongExtra(BraintreePaymentTestActivity.EXTRA_DELAY,0);
}",0.919047619047619
165028,"private Socket enableTLSOnSocket(Socket socket){
  if (socket instanceof SSLSocket) {
    ((SSLSocket)socket).setEnabledProtocols(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  }
  return socket;
}","private Socket enableTLSOnSocket(Socket socket){
  if (socket instanceof SSLSocket) {
    ArrayList<String> supportedProtocols=new ArrayList<>(Arrays.asList(((SSLSocket)socket).getSupportedProtocols()));
    supportedProtocols.retainAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    ((SSLSocket)socket).setEnabledProtocols(supportedProtocols.toArray(new String[supportedProtocols.size()]));
  }
  return socket;
}",0.4397590361445783
165029,"/** 
 * Starts the Pay With PayPal flow with additional scopes. This will launch the PayPal app if installed or switch to the browser for user authorization. The Billing Agreement flow will be used if enabled, otherwise the Future Payment flow will be used.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param additionalScopes A {@link java.util.List} of additional scopes. Ex: {@link #SCOPE_ADDRESS}. Acceptable scopes are defined in   {@link com.braintreepayments.api.PayPal}.
 */
public static void authorizeAccount(final BraintreeFragment fragment,final List<String> additionalScopes){
  fragment.sendAnalyticsEvent(""String_Node_Str"");
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      if (!configuration.isPayPalEnabled()) {
        fragment.postCallback(new ConfigurationException(""String_Node_Str""));
        return;
      }
      if (configuration.getPayPal().shouldUseBillingAgreement()) {
        requestBillingAgreement(fragment,new PayPalRequest());
        return;
      }
      sPendingRequest=getAuthorizationRequest(fragment.getApplicationContext(),fragment.getConfiguration().getPayPal(),fragment.getAuthorization().toString());
      if (additionalScopes != null) {
        for (        String scope : additionalScopes) {
          ((AuthorizationRequest)sPendingRequest).withScopeValue(scope);
        }
      }
      sPendingRequestStatus=PayPalOneTouchCore.performRequest(fragment.getActivity(),sPendingRequest,PAYPAL_REQUEST_CODE,sEnableSignatureVerification,getBrowserSwitchAdapter(fragment));
      sendAnalyticsForPayPalPerformRequestStatus(fragment,sPendingRequestStatus);
    }
  }
);
}","/** 
 * Starts the Pay With PayPal flow with additional scopes. This will launch the PayPal app if installed or switch to the browser for user authorization. The Billing Agreement flow will be used if enabled, otherwise the Future Payment flow will be used.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param additionalScopes A {@link java.util.List} of additional scopes. Ex: {@link #SCOPE_ADDRESS}. Acceptable scopes are defined in   {@link com.braintreepayments.api.PayPal}.
 */
public static void authorizeAccount(final BraintreeFragment fragment,final List<String> additionalScopes){
  fragment.sendAnalyticsEvent(""String_Node_Str"");
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      if (!configuration.isPayPalEnabled()) {
        fragment.postCallback(new ConfigurationException(""String_Node_Str""));
        return;
      }
      if (configuration.getPayPal().shouldUseBillingAgreement()) {
        requestBillingAgreement(fragment,new PayPalRequest());
        return;
      }
      sPendingRequest=getAuthorizationRequest(fragment.getApplicationContext(),fragment.getConfiguration().getPayPal(),fragment.getAuthorization().toString());
      if (additionalScopes != null) {
        for (        String scope : additionalScopes) {
          ((AuthorizationRequest)sPendingRequest).withScopeValue(scope);
        }
      }
      startPayPal(fragment,PayPalOneTouchCore.getStartIntent(fragment.getActivity(),sPendingRequest,sEnableSignatureVerification));
    }
  }
);
}",0.90946992257296
165030,"/** 
 * Parse the PayPal response URL using OneTouchCore.
 * @param result Context that received the result.
 * @param intent The {@link Intent} returned in result.
 * @return A {@link PayPalAccountBuilder} or null if the intent is invalid.
 */
private static PayPalAccountBuilder parseResponse(Result result,Intent intent) throws InvalidArgumentException {
  PayPalAccountBuilder paypalAccountBuilder=new PayPalAccountBuilder().clientMetadataId(sPendingRequestStatus.getClientMetadataId());
  if (intent.hasExtra(PayPalOneTouchActivity.EXTRA_ONE_TOUCH_RESULT)) {
    paypalAccountBuilder.source(""String_Node_Str"");
  }
 else {
    paypalAccountBuilder.source(""String_Node_Str"");
  }
  JSONObject payload=result.getResponse();
  try {
    JSONObject clientJson=payload.getJSONObject(""String_Node_Str"");
    JSONObject response=payload.getJSONObject(""String_Node_Str"");
    if (AuthorizationRequest.ENVIRONMENT_MOCK.equalsIgnoreCase(clientJson.getString(""String_Node_Str"")) && response.getString(""String_Node_Str"") != null && !isCheckoutRequest()) {
      payload.put(""String_Node_Str"",new JSONObject().put(""String_Node_Str"",""String_Node_Str"" + ((AuthorizationRequest)sPendingRequest).getScopeString()));
    }
  }
 catch (  JSONException ignored) {
  }
  paypalAccountBuilder.oneTouchCoreData(payload);
  return paypalAccountBuilder;
}","/** 
 * Parse the PayPal response URL using OneTouchCore.
 * @param result Context that received the result.
 * @param intent The {@link Intent} returned in result.
 * @return A {@link PayPalAccountBuilder} or null if the intent is invalid.
 */
private static PayPalAccountBuilder parseResponse(Result result,Intent intent) throws InvalidArgumentException {
  PayPalAccountBuilder paypalAccountBuilder=new PayPalAccountBuilder().clientMetadataId(sPendingRequest.getClientMetadataId());
  if (intent.hasExtra(PayPalOneTouchActivity.EXTRA_ONE_TOUCH_RESULT)) {
    paypalAccountBuilder.source(""String_Node_Str"");
  }
 else {
    paypalAccountBuilder.source(""String_Node_Str"");
  }
  JSONObject payload=result.getResponse();
  try {
    JSONObject clientJson=payload.getJSONObject(""String_Node_Str"");
    JSONObject response=payload.getJSONObject(""String_Node_Str"");
    if (AuthorizationRequest.ENVIRONMENT_MOCK.equalsIgnoreCase(clientJson.getString(""String_Node_Str"")) && response.getString(""String_Node_Str"") != null && !isCheckoutRequest()) {
      payload.put(""String_Node_Str"",new JSONObject().put(""String_Node_Str"",""String_Node_Str"" + ((AuthorizationRequest)sPendingRequest).getScopeString()));
    }
  }
 catch (  JSONException ignored) {
  }
  paypalAccountBuilder.oneTouchCoreData(payload);
  return paypalAccountBuilder;
}",0.9977477477477478
165031,"/** 
 * Starts the Checkout With PayPal flow. This will launch the PayPal app if installed or switch to the browser for user authorization. <p> This requires that the merchant uses a   {@link com.braintreepayments.api.models.ClientToken}
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param request A {@link PayPalRequest} used to customize the request.
 * @param isBillingAgreement A boolean. If true, this will use the Billing Agreement. Otherwise,PayPal will perform a Single Payment.
 */
private static void requestOneTimePayment(final BraintreeFragment fragment,final PayPalRequest request,final boolean isBillingAgreement){
  final HttpResponseCallback callback=new HttpResponseCallback(){
    @Override public void success(    String responseBody){
      final PayPalPaymentResource paypalPaymentResource;
      try {
        paypalPaymentResource=PayPalPaymentResource.fromJson(responseBody);
      }
 catch (      JSONException e) {
        fragment.postCallback(e);
        return;
      }
      if (isBillingAgreement) {
        sPendingRequest=getBillingAgreementRequest(paypalPaymentResource.getRedirectUrl(),fragment.getApplicationContext(),fragment.getConfiguration().getPayPal());
      }
 else {
        sPendingRequest=getCheckoutRequest(paypalPaymentResource.getRedirectUrl(),fragment.getApplicationContext(),fragment.getConfiguration().getPayPal());
      }
      sPendingRequestStatus=PayPalOneTouchCore.performRequest(fragment.getActivity(),sPendingRequest,PAYPAL_REQUEST_CODE,sEnableSignatureVerification,getBrowserSwitchAdapter(fragment));
      sendAnalyticsForPayPalPerformRequestStatus(fragment,sPendingRequestStatus);
    }
    @Override public void failure(    Exception e){
      fragment.postCallback(e);
    }
  }
;
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      if (!configuration.isPayPalEnabled()) {
        fragment.postCallback(new ConfigurationException(""String_Node_Str""));
        return;
      }
      try {
        createPaymentResource(fragment,request,isBillingAgreement,callback);
      }
 catch (      JSONException|ErrorWithResponse|BraintreeException ex) {
        fragment.postCallback(ex);
      }
    }
  }
);
}","/** 
 * Starts the Checkout With PayPal flow. This will launch the PayPal app if installed or switch to the browser for user authorization. <p> This requires that the merchant uses a   {@link com.braintreepayments.api.models.ClientToken}
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param request A {@link PayPalRequest} used to customize the request.
 * @param isBillingAgreement A boolean. If true, this will use the Billing Agreement. Otherwise,PayPal will perform a Single Payment.
 */
private static void requestOneTimePayment(final BraintreeFragment fragment,final PayPalRequest request,final boolean isBillingAgreement){
  final HttpResponseCallback callback=new HttpResponseCallback(){
    @Override public void success(    String responseBody){
      final PayPalPaymentResource paypalPaymentResource;
      try {
        paypalPaymentResource=PayPalPaymentResource.fromJson(responseBody);
      }
 catch (      JSONException e) {
        fragment.postCallback(e);
        return;
      }
      if (isBillingAgreement) {
        sPendingRequest=getBillingAgreementRequest(paypalPaymentResource.getRedirectUrl(),fragment.getApplicationContext(),fragment.getConfiguration().getPayPal());
      }
 else {
        sPendingRequest=getCheckoutRequest(paypalPaymentResource.getRedirectUrl(),fragment.getApplicationContext(),fragment.getConfiguration().getPayPal());
      }
      startPayPal(fragment,PayPalOneTouchCore.getStartIntent(fragment.getActivity(),sPendingRequest,sEnableSignatureVerification));
    }
    @Override public void failure(    Exception e){
      fragment.postCallback(e);
    }
  }
;
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      if (!configuration.isPayPalEnabled()) {
        fragment.postCallback(new ConfigurationException(""String_Node_Str""));
        return;
      }
      try {
        createPaymentResource(fragment,request,isBillingAgreement,callback);
      }
 catch (      JSONException|ErrorWithResponse|BraintreeException ex) {
        fragment.postCallback(ex);
      }
    }
  }
);
}",0.9304932735426008
165032,"@Test(timeout=1000) @SmallTest public void getContext_returnsContext() throws InvalidArgumentException {
  BraintreeFragment fragment=getFragment(mActivity,mClientToken);
  assertEquals(mActivity.getApplicationContext(),fragment.getContext());
}","@Test(timeout=1000) @SmallTest public void getContext_returnsContext() throws InvalidArgumentException {
  BraintreeFragment fragment=getFragment(mActivity,mClientToken);
  assertEquals(mActivity.getApplicationContext(),fragment.getApplicationContext());
}",0.9780439121756488
165033,"/** 
 * Get a   {@link org.mockito.Spy} {@link BraintreeFragment} with the given {@link Configuration}.
 * @param activity
 * @param clientToken
 * @param configuration
 * @return
 */
public static BraintreeFragment getMockFragment(Activity activity,String clientToken,Configuration configuration){
  try {
    BraintreeFragment fragment=spy(BraintreeFragment.newInstance(activity,clientToken));
    doNothing().when(fragment).fetchConfiguration();
    when(fragment.getContext()).thenReturn(getTargetContext());
    when(fragment.getConfiguration()).thenReturn(configuration);
    getInstrumentation().waitForIdleSync();
    return fragment;
  }
 catch (  InvalidArgumentException e) {
    fail(e.getMessage());
    return new BraintreeFragment();
  }
}","/** 
 * Get a   {@link org.mockito.Spy} {@link BraintreeFragment} with the given {@link Configuration}.
 * @param activity
 * @param clientToken
 * @param configuration
 * @return
 */
public static BraintreeFragment getMockFragment(Activity activity,String clientToken,Configuration configuration){
  try {
    BraintreeFragment fragment=spy(BraintreeFragment.newInstance(activity,clientToken));
    doNothing().when(fragment).fetchConfiguration();
    when(fragment.getApplicationContext()).thenReturn(getTargetContext());
    when(fragment.getConfiguration()).thenReturn(configuration);
    getInstrumentation().waitForIdleSync();
    return fragment;
  }
 catch (  InvalidArgumentException e) {
    fail(e.getMessage());
    return new BraintreeFragment();
  }
}",0.9927583936800528
165034,"@Test(timeout=10000) @MediumTest public void tokenize_acceptsAPayPalAccount() throws InterruptedException, JSONException {
  final CountDownLatch latch=new CountDownLatch(1);
  JSONObject otcJson=new JSONObject(FixturesHelper.stringFromFixture(""String_Node_Str""));
  BraintreeFragment fragment=getFragment(mActivity,new TestClientTokenBuilder().withPayPal().build());
  PayPalAccountBuilder paypalAccountBuilder=new PayPalAccountBuilder().oneTouchCoreData(otcJson).clientMetadataId(""String_Node_Str"");
  TokenizationClient.tokenize(fragment,paypalAccountBuilder,new PaymentMethodResponseCallback(){
    @Override public void success(    PaymentMethod paymentMethod){
      assertNotNull(paymentMethod.getNonce());
      assertEquals(""String_Node_Str"",paymentMethod.getTypeLabel());
      latch.countDown();
    }
    @Override public void failure(    Exception exception){
      fail(exception.getMessage());
    }
  }
);
  latch.await();
}","@Test @MediumTest public void tokenize_acceptsAPayPalAccount() throws InterruptedException, JSONException {
  final CountDownLatch latch=new CountDownLatch(1);
  JSONObject otcJson=new JSONObject(FixturesHelper.stringFromFixture(""String_Node_Str""));
  BraintreeFragment fragment=getFragment(mActivity,new TestClientTokenBuilder().withPayPal().build());
  PayPalAccountBuilder paypalAccountBuilder=new PayPalAccountBuilder().oneTouchCoreData(otcJson).clientMetadataId(""String_Node_Str"");
  TokenizationClient.tokenize(fragment,paypalAccountBuilder,new PaymentMethodResponseCallback(){
    @Override public void success(    PaymentMethod paymentMethod){
      assertNotNull(paymentMethod.getNonce());
      assertEquals(""String_Node_Str"",paymentMethod.getTypeLabel());
      latch.countDown();
    }
    @Override public void failure(    Exception exception){
      fail(exception.getMessage());
    }
  }
);
  latch.await();
}",0.9919571045576407
165035,"@Test(timeout=1000) @SmallTest public void performAppSwitch_sendsAnalyticsEventWhenStarted(){
  Configuration configuration=getConfiguration();
  when(configuration.getVenmoState()).thenReturn(""String_Node_Str"");
  BraintreeFragment fragment=getMockFragment(mActivity,configuration);
  doNothing().when(fragment).sendAnalyticsEvent(anyString());
  doNothing().when(fragment).startActivityForResult(any(Intent.class),anyInt());
  ActivityInfo activityInfo=new ActivityInfo();
  activityInfo.packageName=""String_Node_Str"";
  ResolveInfo resolveInfo=new ResolveInfo();
  resolveInfo.activityInfo=activityInfo;
  PackageManager packageManager=mock(PackageManager.class);
  when(packageManager.queryIntentActivities(any(Intent.class),anyInt())).thenReturn(Collections.singletonList(resolveInfo));
  Context context=mock(Context.class);
  when(context.getPackageManager()).thenReturn(packageManager);
  when(fragment.getContext()).thenReturn(context);
  disableSignatureVerification();
  Venmo.authorize(fragment);
  verify(fragment).sendAnalyticsEvent(""String_Node_Str"");
}","@Test(timeout=1000) @SmallTest public void performAppSwitch_sendsAnalyticsEventWhenStarted(){
  Configuration configuration=getConfiguration();
  when(configuration.getVenmoState()).thenReturn(""String_Node_Str"");
  BraintreeFragment fragment=getMockFragment(mActivity,configuration);
  doNothing().when(fragment).sendAnalyticsEvent(anyString());
  doNothing().when(fragment).startActivityForResult(any(Intent.class),anyInt());
  ActivityInfo activityInfo=new ActivityInfo();
  activityInfo.packageName=""String_Node_Str"";
  ResolveInfo resolveInfo=new ResolveInfo();
  resolveInfo.activityInfo=activityInfo;
  PackageManager packageManager=mock(PackageManager.class);
  when(packageManager.queryIntentActivities(any(Intent.class),anyInt())).thenReturn(Collections.singletonList(resolveInfo));
  Context context=mock(Context.class);
  when(context.getPackageManager()).thenReturn(packageManager);
  when(fragment.getApplicationContext()).thenReturn(context);
  disableSignatureVerification();
  Venmo.authorize(fragment);
  verify(fragment).sendAnalyticsEvent(""String_Node_Str"");
}",0.9948765719608756
165036,"@Test(timeout=1000) @SmallTest public void performAppSwitch_appSwitchesWithVenmoLaunchIntent(){
  ArgumentCaptor<Intent> launchIntentCaptor=ArgumentCaptor.forClass(Intent.class);
  Configuration configuration=getConfiguration();
  when(configuration.getVenmoState()).thenReturn(""String_Node_Str"");
  BraintreeFragment fragment=getMockFragment(mActivity,configuration);
  doNothing().when(fragment).sendAnalyticsEvent(anyString());
  doNothing().when(fragment).startActivityForResult(any(Intent.class),anyInt());
  ActivityInfo activityInfo=new ActivityInfo();
  activityInfo.packageName=""String_Node_Str"";
  ResolveInfo resolveInfo=new ResolveInfo();
  resolveInfo.activityInfo=activityInfo;
  PackageManager packageManager=mock(PackageManager.class);
  when(packageManager.queryIntentActivities(any(Intent.class),anyInt())).thenReturn(Collections.singletonList(resolveInfo));
  Context context=mock(Context.class);
  when(context.getPackageManager()).thenReturn(packageManager);
  when(fragment.getContext()).thenReturn(context);
  disableSignatureVerification();
  Venmo.authorize(fragment);
  verify(fragment).startActivityForResult(launchIntentCaptor.capture(),eq(Venmo.VENMO_REQUEST_CODE));
  Intent launchIntent=launchIntentCaptor.getValue();
  assertEquals(""String_Node_Str"",launchIntent.getComponent().flattenToString());
}","@Test(timeout=1000) @SmallTest public void performAppSwitch_appSwitchesWithVenmoLaunchIntent(){
  ArgumentCaptor<Intent> launchIntentCaptor=ArgumentCaptor.forClass(Intent.class);
  Configuration configuration=getConfiguration();
  when(configuration.getVenmoState()).thenReturn(""String_Node_Str"");
  BraintreeFragment fragment=getMockFragment(mActivity,configuration);
  doNothing().when(fragment).sendAnalyticsEvent(anyString());
  doNothing().when(fragment).startActivityForResult(any(Intent.class),anyInt());
  ActivityInfo activityInfo=new ActivityInfo();
  activityInfo.packageName=""String_Node_Str"";
  ResolveInfo resolveInfo=new ResolveInfo();
  resolveInfo.activityInfo=activityInfo;
  PackageManager packageManager=mock(PackageManager.class);
  when(packageManager.queryIntentActivities(any(Intent.class),anyInt())).thenReturn(Collections.singletonList(resolveInfo));
  Context context=mock(Context.class);
  when(context.getPackageManager()).thenReturn(packageManager);
  when(fragment.getApplicationContext()).thenReturn(context);
  disableSignatureVerification();
  Venmo.authorize(fragment);
  verify(fragment).startActivityForResult(launchIntentCaptor.capture(),eq(Venmo.VENMO_REQUEST_CODE));
  Intent launchIntent=launchIntentCaptor.getValue();
  assertEquals(""String_Node_Str"",launchIntent.getComponent().flattenToString());
}",0.9958847736625516
165037,"private static void processRequests(BraintreeFragment fragment){
  if (sRequestQueue.size() == 0) {
    return;
  }
  ArrayList<AnalyticsRequest> requests=new ArrayList<>();
  requests.addAll(sRequestQueue);
  sRequestQueue.clear();
  try {
    JSONArray events=new JSONArray();
    for (    AnalyticsRequest request : requests) {
      try {
        JSONObject event=new JSONObject().put(KIND_KEY,request.getEvent()).put(TIMESTAMP_KEY,request.getTimestamp());
        events.put(event);
      }
 catch (      JSONException ignored) {
      }
    }
    JSONObject fullMetaData=generateRequestBody(fragment.getContext(),requests.get(0).getIntegrationType());
    String requestBody=new JSONObject().put(ANALYTICS_KEY,events).put(META_KEY,fullMetaData).toString();
    fragment.getHttpClient().post(fragment.getConfiguration().getAnalytics().getUrl(),requestBody,null);
  }
 catch (  JSONException ignored) {
  }
}","private static void processRequests(BraintreeFragment fragment){
  if (sRequestQueue.size() == 0) {
    return;
  }
  ArrayList<AnalyticsRequest> requests=new ArrayList<>();
  requests.addAll(sRequestQueue);
  sRequestQueue.clear();
  try {
    JSONArray events=new JSONArray();
    for (    AnalyticsRequest request : requests) {
      try {
        JSONObject event=new JSONObject().put(KIND_KEY,request.getEvent()).put(TIMESTAMP_KEY,request.getTimestamp());
        events.put(event);
      }
 catch (      JSONException ignored) {
      }
    }
    JSONObject fullMetaData=generateRequestBody(fragment.getApplicationContext(),requests.get(0).getIntegrationType());
    String requestBody=new JSONObject().put(ANALYTICS_KEY,events).put(META_KEY,fullMetaData).toString();
    fragment.getHttpClient().post(fragment.getConfiguration().getAnalytics().getUrl(),requestBody,null);
  }
 catch (  JSONException ignored) {
  }
}",0.9940054495912808
165038,"/** 
 * Collect device information for fraud identification purposes. This should be used in conjunction with a non-aggregate fraud id.
 * @param fragment {@link BraintreeFragment}
 * @param merchantId The fraud merchant id from Braintree.
 * @param collectorUrl The fraud collector url from Braintree.
 * @return Device data String to send to Braintree.
 */
public static String collectDeviceData(BraintreeFragment fragment,String merchantId,String collectorUrl){
  JSONObject deviceData=new JSONObject();
  try {
    DeviceCollector deviceCollector=new DeviceCollector(fragment.getActivity());
    sDeviceCollector=deviceCollector;
    deviceCollector.setMerchantId(merchantId);
    deviceCollector.setCollectorUrl(collectorUrl);
    deviceCollector.setStatusListener(new StatusListener(){
      @Override public void onCollectorStart(){
      }
      @Override public void onCollectorSuccess(){
        sDeviceCollector=null;
      }
      @Override public void onCollectorError(      ErrorCode errorCode,      Exception e){
        sDeviceCollector=null;
      }
    }
);
    String deviceSessionId=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
    deviceData.put(DEVICE_SESSION_ID_KEY,deviceSessionId);
    deviceData.put(FRAUD_MERCHANT_ID_KEY,merchantId);
    deviceCollector.collect(deviceSessionId);
  }
 catch (  NoClassDefFoundError|JSONException ignored) {
  }
  try {
    deviceData.put(CORRELATION_ID_KEY,PayPalOneTouchCore.getClientMetadataId(fragment.getContext()));
  }
 catch (  JSONException ignored) {
  }
  return deviceData.toString();
}","/** 
 * Collect device information for fraud identification purposes. This should be used in conjunction with a non-aggregate fraud id.
 * @param fragment {@link BraintreeFragment}
 * @param merchantId The fraud merchant id from Braintree.
 * @param collectorUrl The fraud collector url from Braintree.
 * @return Device data String to send to Braintree.
 */
public static String collectDeviceData(BraintreeFragment fragment,String merchantId,String collectorUrl){
  JSONObject deviceData=new JSONObject();
  try {
    DeviceCollector deviceCollector=new DeviceCollector(fragment.getActivity());
    sDeviceCollector=deviceCollector;
    deviceCollector.setMerchantId(merchantId);
    deviceCollector.setCollectorUrl(collectorUrl);
    deviceCollector.setStatusListener(new StatusListener(){
      @Override public void onCollectorStart(){
      }
      @Override public void onCollectorSuccess(){
        sDeviceCollector=null;
      }
      @Override public void onCollectorError(      ErrorCode errorCode,      Exception e){
        sDeviceCollector=null;
      }
    }
);
    String deviceSessionId=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
    deviceData.put(DEVICE_SESSION_ID_KEY,deviceSessionId);
    deviceData.put(FRAUD_MERCHANT_ID_KEY,merchantId);
    deviceCollector.collect(deviceSessionId);
  }
 catch (  NoClassDefFoundError|JSONException ignored) {
  }
  try {
    deviceData.put(CORRELATION_ID_KEY,PayPalOneTouchCore.getClientMetadataId(fragment.getApplicationContext()));
  }
 catch (  JSONException ignored) {
  }
  return deviceData.toString();
}",0.9965463108320252
165039,"/** 
 * Starts the Pay With PayPal flow with additional scopes. This will launch the PayPal app if installed or switch to the browser for user authorization. The Billing Agreement flow will be used if enabled, otherwise the Future Payment flow will be used.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param additionalScopes A {@link java.util.List} of additional scopes. Ex: {@link #SCOPE_ADDRESS}. Acceptable scopes are defined in   {@link com.braintreepayments.api.PayPal}.
 */
public static void authorizeAccount(final BraintreeFragment fragment,final List<String> additionalScopes){
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      fragment.sendAnalyticsEvent(""String_Node_Str"");
      if (fragment.getConfiguration().getPayPal().getUseBillingAgreement()) {
        PayPalCheckout checkout=new PayPalCheckout();
        billingAgreement(fragment,checkout);
        return;
      }
      sBraintreeFragmentBroadcastReceiver.setFragment(fragment);
      BraintreeBroadcastManager.getInstance(fragment.getContext()).registerReceiver(sBraintreeFragmentBroadcastReceiver,new IntentFilter(BraintreeBrowserSwitchActivity.LOCAL_BROADCAST_BROWSER_SWITCH_COMPLETED));
      try {
        sPendingRequest=buildPayPalAuthorizationConfiguration(fragment.getActivity(),fragment.getConfiguration(),fragment.getClientToken().toJson());
        if (additionalScopes != null) {
          for (          String scope : additionalScopes) {
            ((AuthorizationRequest)sPendingRequest).withScopeValue(scope);
          }
        }
        sPendingRequestStatus=PayPalOneTouchCore.performRequest(fragment.getActivity(),sPendingRequest,PAYPAL_AUTHORIZATION_REQUEST_CODE,sEnableSignatureVerification,new BrowserSwitchAdapter(){
          @Override public void handleBrowserSwitchIntent(          Intent intent){
            fragment.getActivity().startActivityForResult(new Intent(fragment.getActivity(),BraintreeBrowserSwitchActivity.class).setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION).putExtra(BraintreeBrowserSwitchActivity.EXTRA_INTENT,intent),PAYPAL_AUTHORIZATION_REQUEST_CODE);
          }
        }
);
        sendAnalyticsForPayPalPerformRequestStatus(fragment,sPendingRequestStatus,false);
      }
 catch (      BraintreeException ignored) {
      }
    }
  }
);
}","/** 
 * Starts the Pay With PayPal flow with additional scopes. This will launch the PayPal app if installed or switch to the browser for user authorization. The Billing Agreement flow will be used if enabled, otherwise the Future Payment flow will be used.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param additionalScopes A {@link java.util.List} of additional scopes. Ex: {@link #SCOPE_ADDRESS}. Acceptable scopes are defined in   {@link com.braintreepayments.api.PayPal}.
 */
public static void authorizeAccount(final BraintreeFragment fragment,final List<String> additionalScopes){
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      fragment.sendAnalyticsEvent(""String_Node_Str"");
      if (fragment.getConfiguration().getPayPal().getUseBillingAgreement()) {
        PayPalCheckout checkout=new PayPalCheckout();
        billingAgreement(fragment,checkout);
        return;
      }
      sBraintreeFragmentBroadcastReceiver.setFragment(fragment);
      BraintreeBroadcastManager.getInstance(fragment.getApplicationContext()).registerReceiver(sBraintreeFragmentBroadcastReceiver,new IntentFilter(BraintreeBrowserSwitchActivity.LOCAL_BROADCAST_BROWSER_SWITCH_COMPLETED));
      try {
        sPendingRequest=buildPayPalAuthorizationConfiguration(fragment.getActivity(),fragment.getConfiguration(),fragment.getClientToken().toJson());
        if (additionalScopes != null) {
          for (          String scope : additionalScopes) {
            ((AuthorizationRequest)sPendingRequest).withScopeValue(scope);
          }
        }
        sPendingRequestStatus=PayPalOneTouchCore.performRequest(fragment.getActivity(),sPendingRequest,PAYPAL_AUTHORIZATION_REQUEST_CODE,sEnableSignatureVerification,new BrowserSwitchAdapter(){
          @Override public void handleBrowserSwitchIntent(          Intent intent){
            fragment.getActivity().startActivityForResult(new Intent(fragment.getActivity(),BraintreeBrowserSwitchActivity.class).setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION).putExtra(BraintreeBrowserSwitchActivity.EXTRA_INTENT,intent),PAYPAL_AUTHORIZATION_REQUEST_CODE);
          }
        }
);
        sendAnalyticsForPayPalPerformRequestStatus(fragment,sPendingRequestStatus,false);
      }
 catch (      BraintreeException ignored) {
      }
    }
  }
);
}",0.9977107180020812
165040,"/** 
 * Create a PayPalPaymentResource on behalf of the merchant. To be used in the PayPal Checkout flows for Single Payment and Billing Agreement.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param checkout A {@link PayPalCheckout} used to customize the request.
 * @param isBillingAgreement A boolean. If true, this will use the Billing Agreement. Otherwise,PayPal will perform a Single Payment.
 * @param callback A callback on the http request.
 */
private static void createPayPalPaymentResource(BraintreeFragment fragment,PayPalCheckout checkout,boolean isBillingAgreement,HttpResponseCallback callback) throws JSONException, ErrorWithResponse, BraintreeException {
  Configuration configuration=fragment.getConfiguration();
  CheckoutRequest request=PayPal.buildPayPalCheckoutConfiguration(null,fragment.getContext(),configuration);
  String currencyCode=checkout.getCurrencyCode();
  if (currencyCode == null) {
    currencyCode=configuration.getPayPal().getCurrencyIsoCode();
  }
  JSONObject experienceProfile=new JSONObject();
  experienceProfile.put(NO_SHIPPING_KEY,!checkout.getEnableShippingAddress());
  experienceProfile.put(ADDRESS_OVERRIDE_KEY,checkout.getAddressOverride());
  if (checkout.getLocaleCode() != null) {
    experienceProfile.put(LOCALE_CODE_KEY,checkout.getLocaleCode());
  }
  String authorizationFingerprint=fragment.getClientToken().getAuthorizationFingerprint();
  JSONObject parameters=new JSONObject().put(AUTHORIZATION_FINGERPRINT_KEY,authorizationFingerprint).put(RETURN_URL_KEY,request.getSuccessUrl()).put(CANCEL_URL_KEY,request.getCancelUrl()).put(EXPERIENCE_PROFILE_KEY,experienceProfile);
  if (!isBillingAgreement) {
    parameters.put(AMOUNT_KEY,checkout.getAmount().toString()).put(CURRENCY_ISO_CODE_KEY,currencyCode);
  }
  if (checkout.getAddressOverride() && checkout.getShippingAddress() != null) {
    PostalAddress shippingAddress=checkout.getShippingAddress();
    parameters.put(PostalAddress.LINE_1_KEY,shippingAddress.getStreetAddress());
    parameters.put(PostalAddress.LINE_2_KEY,shippingAddress.getExtendedAddress());
    parameters.put(PostalAddress.LOCALITY_KEY,shippingAddress.getLocality());
    parameters.put(PostalAddress.REGION_KEY,shippingAddress.getRegion());
    parameters.put(PostalAddress.POSTAL_CODE_UNDERSCORE_KEY,shippingAddress.getPostalCode());
    parameters.put(PostalAddress.COUNTRY_CODE_UNDERSCORE_KEY,shippingAddress.getCountryCodeAlpha2());
    parameters.put(PostalAddress.RECIPIENT_NAME_UNDERSCORE_KEY,shippingAddress.getRecipientName());
  }
  String apiUrl=isBillingAgreement ? SETUP_BILLING_AGREEMENT_ENDPOINT : CREATE_SINGLE_PAYMENT_ENDPOINT;
  String versionedPath=""String_Node_Str"" + apiUrl;
  fragment.getHttpClient().post(versionedPath,parameters.toString(),callback);
}","/** 
 * Create a PayPalPaymentResource on behalf of the merchant. To be used in the PayPal Checkout flows for Single Payment and Billing Agreement.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param checkout A {@link PayPalCheckout} used to customize the request.
 * @param isBillingAgreement A boolean. If true, this will use the Billing Agreement. Otherwise,PayPal will perform a Single Payment.
 * @param callback A callback on the http request.
 */
private static void createPayPalPaymentResource(BraintreeFragment fragment,PayPalCheckout checkout,boolean isBillingAgreement,HttpResponseCallback callback) throws JSONException, ErrorWithResponse, BraintreeException {
  Configuration configuration=fragment.getConfiguration();
  CheckoutRequest request=PayPal.buildPayPalCheckoutConfiguration(null,fragment.getApplicationContext(),configuration);
  String currencyCode=checkout.getCurrencyCode();
  if (currencyCode == null) {
    currencyCode=configuration.getPayPal().getCurrencyIsoCode();
  }
  JSONObject experienceProfile=new JSONObject();
  experienceProfile.put(NO_SHIPPING_KEY,!checkout.getEnableShippingAddress());
  experienceProfile.put(ADDRESS_OVERRIDE_KEY,checkout.getAddressOverride());
  if (checkout.getLocaleCode() != null) {
    experienceProfile.put(LOCALE_CODE_KEY,checkout.getLocaleCode());
  }
  String authorizationFingerprint=fragment.getClientToken().getAuthorizationFingerprint();
  JSONObject parameters=new JSONObject().put(AUTHORIZATION_FINGERPRINT_KEY,authorizationFingerprint).put(RETURN_URL_KEY,request.getSuccessUrl()).put(CANCEL_URL_KEY,request.getCancelUrl()).put(EXPERIENCE_PROFILE_KEY,experienceProfile);
  if (!isBillingAgreement) {
    parameters.put(AMOUNT_KEY,checkout.getAmount().toString()).put(CURRENCY_ISO_CODE_KEY,currencyCode);
  }
  if (checkout.getAddressOverride() && checkout.getShippingAddress() != null) {
    PostalAddress shippingAddress=checkout.getShippingAddress();
    parameters.put(PostalAddress.LINE_1_KEY,shippingAddress.getStreetAddress());
    parameters.put(PostalAddress.LINE_2_KEY,shippingAddress.getExtendedAddress());
    parameters.put(PostalAddress.LOCALITY_KEY,shippingAddress.getLocality());
    parameters.put(PostalAddress.REGION_KEY,shippingAddress.getRegion());
    parameters.put(PostalAddress.POSTAL_CODE_UNDERSCORE_KEY,shippingAddress.getPostalCode());
    parameters.put(PostalAddress.COUNTRY_CODE_UNDERSCORE_KEY,shippingAddress.getCountryCodeAlpha2());
    parameters.put(PostalAddress.RECIPIENT_NAME_UNDERSCORE_KEY,shippingAddress.getRecipientName());
  }
  String apiUrl=isBillingAgreement ? SETUP_BILLING_AGREEMENT_ENDPOINT : CREATE_SINGLE_PAYMENT_ENDPOINT;
  String versionedPath=""String_Node_Str"" + apiUrl;
  fragment.getHttpClient().post(versionedPath,parameters.toString(),callback);
}",0.9980416592487092
165041,"/** 
 * Finish the PayPal flow. Create a   {@link com.braintreepayments.api.models.PayPalAccount}. Parses the URL using the OTC library and attempts to tokenize the result.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param resultCode Result code from the PayPal flow.
 * @param data Intent returned from PayPal flow. Contains the URL to process.
 */
public synchronized static void finishPayWithPayPal(final BraintreeFragment fragment,int resultCode,Intent data){
  try {
    BraintreeBroadcastManager.getInstance(fragment.getActivity()).unregisterReceiver(sBraintreeFragmentBroadcastReceiver);
    Result result=PayPal.getResultFromActivity(fragment.getActivity(),resultCode,data);
    Boolean isCheckout=PayPal.isCheckoutRequest();
    Boolean isAppSwitch=data.hasExtra(PayPalOneTouchActivity.EXTRA_ONE_TOUCH_RESULT);
    ResultType resultType=result.getResultType();
switch (resultType) {
case Error:
      sendAnalyticsEventForSwitchResult(fragment,isCheckout,isAppSwitch,""String_Node_Str"");
    break;
case Cancel:
  if (result.getError() == null) {
    sendAnalyticsEventForSwitchResult(fragment,isCheckout,isAppSwitch,""String_Node_Str"");
  }
 else {
    sendAnalyticsEventForSwitchResult(fragment,isCheckout,isAppSwitch,""String_Node_Str"");
  }
break;
case Success:
sendAnalyticsEventForSwitchResult(fragment,isCheckout,isAppSwitch,""String_Node_Str"");
PayPalAccountBuilder paypalAccountBuilder=getBuilderFromResponse(fragment.getContext(),resultCode,data);
if (paypalAccountBuilder != null) {
TokenizationClient.tokenize(fragment,paypalAccountBuilder,new PaymentMethodResponseCallback(){
@Override public void success(PaymentMethod paymentMethod){
fragment.postCallback(paymentMethod);
}
@Override public void failure(Exception exception){
fragment.postCallback(exception);
}
}
);
}
break;
}
}
 catch (ConfigurationException ignored) {
}
}","/** 
 * Finish the PayPal flow. Create a   {@link com.braintreepayments.api.models.PayPalAccount}. Parses the URL using the OTC library and attempts to tokenize the result.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param resultCode Result code from the PayPal flow.
 * @param data Intent returned from PayPal flow. Contains the URL to process.
 */
public synchronized static void finishPayWithPayPal(final BraintreeFragment fragment,int resultCode,Intent data){
  try {
    BraintreeBroadcastManager.getInstance(fragment.getActivity()).unregisterReceiver(sBraintreeFragmentBroadcastReceiver);
    Result result=PayPal.getResultFromActivity(fragment.getActivity(),resultCode,data);
    Boolean isCheckout=PayPal.isCheckoutRequest();
    Boolean isAppSwitch=data.hasExtra(PayPalOneTouchActivity.EXTRA_ONE_TOUCH_RESULT);
    ResultType resultType=result.getResultType();
switch (resultType) {
case Error:
      sendAnalyticsEventForSwitchResult(fragment,isCheckout,isAppSwitch,""String_Node_Str"");
    break;
case Cancel:
  if (result.getError() == null) {
    sendAnalyticsEventForSwitchResult(fragment,isCheckout,isAppSwitch,""String_Node_Str"");
  }
 else {
    sendAnalyticsEventForSwitchResult(fragment,isCheckout,isAppSwitch,""String_Node_Str"");
  }
break;
case Success:
sendAnalyticsEventForSwitchResult(fragment,isCheckout,isAppSwitch,""String_Node_Str"");
PayPalAccountBuilder paypalAccountBuilder=getBuilderFromResponse(fragment.getApplicationContext(),resultCode,data);
if (paypalAccountBuilder != null) {
TokenizationClient.tokenize(fragment,paypalAccountBuilder,new PaymentMethodResponseCallback(){
@Override public void success(PaymentMethod paymentMethod){
fragment.postCallback(paymentMethod);
}
@Override public void failure(Exception exception){
fragment.postCallback(exception);
}
}
);
}
break;
}
}
 catch (ConfigurationException ignored) {
}
}",0.9970845481049564
165042,"/** 
 * Starts the Checkout With PayPal flow. This will launch the PayPal app if installed or switch to the browser for user authorization.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param checkout A {@link PayPalCheckout} used to customize the request.
 * @param isBillingAgreement A boolean. If true, this will use the Billing Agreement. Otherwise,PayPal will perform a Single Payment.
 */
private static void checkout(final BraintreeFragment fragment,final PayPalCheckout checkout,final boolean isBillingAgreement){
  sBraintreeFragmentBroadcastReceiver.setFragment(fragment);
  BraintreeBroadcastManager.getInstance(fragment.getContext()).registerReceiver(sBraintreeFragmentBroadcastReceiver,new IntentFilter(BraintreeBrowserSwitchActivity.LOCAL_BROADCAST_BROWSER_SWITCH_COMPLETED));
  HttpResponseCallback callback=new HttpResponseCallback(){
    @Override public void success(    String responseBody){
      final PayPalPaymentResource paypalPaymentResource;
      try {
        paypalPaymentResource=PayPalPaymentResource.fromJson(responseBody);
      }
 catch (      JSONException e) {
        fragment.postCallback(e);
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      try {
        sPendingRequest=buildPayPalCheckoutConfiguration(paypalPaymentResource.getRedirectUrl(),fragment.getActivity(),fragment.getConfiguration());
        sPendingRequestStatus=PayPalOneTouchCore.performRequest(fragment.getActivity(),sPendingRequest,PAYPAL_AUTHORIZATION_REQUEST_CODE,sEnableSignatureVerification,new BrowserSwitchAdapter(){
          @Override public void handleBrowserSwitchIntent(          Intent intent){
            fragment.getActivity().startActivityForResult(new Intent(fragment.getActivity(),BraintreeBrowserSwitchActivity.class).setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION).putExtra(BraintreeBrowserSwitchActivity.EXTRA_INTENT,intent),PAYPAL_AUTHORIZATION_REQUEST_CODE);
          }
        }
);
        sendAnalyticsForPayPalPerformRequestStatus(fragment,sPendingRequestStatus,true);
      }
 catch (      ConfigurationException e) {
        fragment.postCallback(e);
      }
    }
    @Override public void failure(    Exception e){
      fragment.postCallback(e);
      ErrorWithResponse ex=(ErrorWithResponse)e;
      try {
        JSONObject response=new JSONObject(ex.getErrorResponse());
        String debugId=response.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
        Log.d(""String_Node_Str"",""String_Node_Str"" + debugId);
      }
 catch (      JSONException jsonException) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
;
  try {
    createPayPalPaymentResource(fragment,checkout,isBillingAgreement,callback);
  }
 catch (  JSONException|ErrorWithResponse|BraintreeException ex) {
    fragment.postCallback(ex);
  }
}","/** 
 * Starts the Checkout With PayPal flow. This will launch the PayPal app if installed or switch to the browser for user authorization.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param checkout A {@link PayPalCheckout} used to customize the request.
 * @param isBillingAgreement A boolean. If true, this will use the Billing Agreement. Otherwise,PayPal will perform a Single Payment.
 */
private static void checkout(final BraintreeFragment fragment,final PayPalCheckout checkout,final boolean isBillingAgreement){
  sBraintreeFragmentBroadcastReceiver.setFragment(fragment);
  BraintreeBroadcastManager.getInstance(fragment.getApplicationContext()).registerReceiver(sBraintreeFragmentBroadcastReceiver,new IntentFilter(BraintreeBrowserSwitchActivity.LOCAL_BROADCAST_BROWSER_SWITCH_COMPLETED));
  HttpResponseCallback callback=new HttpResponseCallback(){
    @Override public void success(    String responseBody){
      final PayPalPaymentResource paypalPaymentResource;
      try {
        paypalPaymentResource=PayPalPaymentResource.fromJson(responseBody);
      }
 catch (      JSONException e) {
        fragment.postCallback(e);
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      try {
        sPendingRequest=buildPayPalCheckoutConfiguration(paypalPaymentResource.getRedirectUrl(),fragment.getActivity(),fragment.getConfiguration());
        sPendingRequestStatus=PayPalOneTouchCore.performRequest(fragment.getActivity(),sPendingRequest,PAYPAL_AUTHORIZATION_REQUEST_CODE,sEnableSignatureVerification,new BrowserSwitchAdapter(){
          @Override public void handleBrowserSwitchIntent(          Intent intent){
            fragment.getActivity().startActivityForResult(new Intent(fragment.getActivity(),BraintreeBrowserSwitchActivity.class).setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION).putExtra(BraintreeBrowserSwitchActivity.EXTRA_INTENT,intent),PAYPAL_AUTHORIZATION_REQUEST_CODE);
          }
        }
);
        sendAnalyticsForPayPalPerformRequestStatus(fragment,sPendingRequestStatus,true);
      }
 catch (      ConfigurationException e) {
        fragment.postCallback(e);
      }
    }
    @Override public void failure(    Exception e){
      fragment.postCallback(e);
      ErrorWithResponse ex=(ErrorWithResponse)e;
      try {
        JSONObject response=new JSONObject(ex.getErrorResponse());
        String debugId=response.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
        Log.d(""String_Node_Str"",""String_Node_Str"" + debugId);
      }
 catch (      JSONException jsonException) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
;
  try {
    createPayPalPaymentResource(fragment,checkout,isBillingAgreement,callback);
  }
 catch (  JSONException|ErrorWithResponse|BraintreeException ex) {
    fragment.postCallback(ex);
  }
}",0.9980752405949256
165043,"@Override public void onConfigurationFetched(Configuration configuration){
  fragment.sendAnalyticsEvent(""String_Node_Str"");
  if (fragment.getConfiguration().getPayPal().getUseBillingAgreement()) {
    PayPalCheckout checkout=new PayPalCheckout();
    billingAgreement(fragment,checkout);
    return;
  }
  sBraintreeFragmentBroadcastReceiver.setFragment(fragment);
  BraintreeBroadcastManager.getInstance(fragment.getContext()).registerReceiver(sBraintreeFragmentBroadcastReceiver,new IntentFilter(BraintreeBrowserSwitchActivity.LOCAL_BROADCAST_BROWSER_SWITCH_COMPLETED));
  try {
    sPendingRequest=buildPayPalAuthorizationConfiguration(fragment.getActivity(),fragment.getConfiguration(),fragment.getClientToken().toJson());
    if (additionalScopes != null) {
      for (      String scope : additionalScopes) {
        ((AuthorizationRequest)sPendingRequest).withScopeValue(scope);
      }
    }
    sPendingRequestStatus=PayPalOneTouchCore.performRequest(fragment.getActivity(),sPendingRequest,PAYPAL_AUTHORIZATION_REQUEST_CODE,sEnableSignatureVerification,new BrowserSwitchAdapter(){
      @Override public void handleBrowserSwitchIntent(      Intent intent){
        fragment.getActivity().startActivityForResult(new Intent(fragment.getActivity(),BraintreeBrowserSwitchActivity.class).setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION).putExtra(BraintreeBrowserSwitchActivity.EXTRA_INTENT,intent),PAYPAL_AUTHORIZATION_REQUEST_CODE);
      }
    }
);
    sendAnalyticsForPayPalPerformRequestStatus(fragment,sPendingRequestStatus,false);
  }
 catch (  BraintreeException ignored) {
  }
}","@Override public void onConfigurationFetched(Configuration configuration){
  fragment.sendAnalyticsEvent(""String_Node_Str"");
  if (fragment.getConfiguration().getPayPal().getUseBillingAgreement()) {
    PayPalCheckout checkout=new PayPalCheckout();
    billingAgreement(fragment,checkout);
    return;
  }
  sBraintreeFragmentBroadcastReceiver.setFragment(fragment);
  BraintreeBroadcastManager.getInstance(fragment.getApplicationContext()).registerReceiver(sBraintreeFragmentBroadcastReceiver,new IntentFilter(BraintreeBrowserSwitchActivity.LOCAL_BROADCAST_BROWSER_SWITCH_COMPLETED));
  try {
    sPendingRequest=buildPayPalAuthorizationConfiguration(fragment.getActivity(),fragment.getConfiguration(),fragment.getClientToken().toJson());
    if (additionalScopes != null) {
      for (      String scope : additionalScopes) {
        ((AuthorizationRequest)sPendingRequest).withScopeValue(scope);
      }
    }
    sPendingRequestStatus=PayPalOneTouchCore.performRequest(fragment.getActivity(),sPendingRequest,PAYPAL_AUTHORIZATION_REQUEST_CODE,sEnableSignatureVerification,new BrowserSwitchAdapter(){
      @Override public void handleBrowserSwitchIntent(      Intent intent){
        fragment.getActivity().startActivityForResult(new Intent(fragment.getActivity(),BraintreeBrowserSwitchActivity.class).setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION).putExtra(BraintreeBrowserSwitchActivity.EXTRA_INTENT,intent),PAYPAL_AUTHORIZATION_REQUEST_CODE);
      }
    }
);
    sendAnalyticsForPayPalPerformRequestStatus(fragment,sPendingRequestStatus,false);
  }
 catch (  BraintreeException ignored) {
  }
}",0.9965463108320252
165044,"/** 
 * 3D Secure is a protocol that enables cardholders and issuers to add a layer of security to e-commerce transactions via password entry at checkout. One of the primary reasons to use 3D Secure is to benefit from a shift in liability from the merchant to the issuer, which may result in interchange savings. Please read our online documentation (<a href=""https://developers.braintreepayments.com"">https://developers.braintreepayments.com</a>) for a full explanation of 3D Secure. Verification is associated with a transaction amount and your merchant account. To specify a different merchant account (or, in turn, currency), you will need to specify the merchant account id when generating a client token (See <a href=""https://developers.braintreepayments.com/android/sdk/overview/generate-client-token"">https://developers.braintreepayments.com/android/sdk/overview/generate-client-token</a>). During lookup the original payment method nonce is consumed and a new one is returned, which points to the original payment method, as well as the 3D Secure verification. Transactions created with this nonce will be 3D Secure, and benefit from the appropriate liability shift if authentication is successful or fail with a 3D Secure failure.
 * @param fragment the {@link BraintreeFragment} backing the http request. This fragment willalso be responsible for handling callbacks to it's listeners
 * @param nonce The nonce that represents a card to perform a 3D Secure verification against.
 * @param amount The amount of the transaction in the current merchant account's currency.
 */
public static void performVerification(final BraintreeFragment fragment,final String nonce,final String amount){
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      try {
        JSONObject params=new JSONObject().put(""String_Node_Str"",configuration.getMerchantAccountId()).put(""String_Node_Str"",amount);
        fragment.getHttpClient().post(TokenizationClient.versionedPath(TokenizationClient.PAYMENT_METHOD_ENDPOINT + ""String_Node_Str"" + nonce+ ""String_Node_Str""),params.toString(),new HttpResponseCallback(){
          @Override public void success(          String responseBody){
            try {
              ThreeDSecureLookup threeDSecureLookup=ThreeDSecureLookup.fromJson(responseBody);
              if (threeDSecureLookup.getAcsUrl() != null) {
                Intent intent=new Intent(fragment.getContext(),ThreeDSecureWebViewActivity.class).putExtra(ThreeDSecureWebViewActivity.EXTRA_THREE_D_SECURE_LOOKUP,threeDSecureLookup);
                fragment.startActivityForResult(intent,THREE_D_SECURE_REQUEST_CODE);
              }
 else {
                fragment.postCallback(threeDSecureLookup.getCard());
              }
            }
 catch (            JSONException e) {
              fragment.postCallback(e);
            }
          }
          @Override public void failure(          Exception exception){
            fragment.postCallback(exception);
          }
        }
);
      }
 catch (      JSONException e) {
        fragment.postCallback(e);
      }
    }
  }
);
}","/** 
 * 3D Secure is a protocol that enables cardholders and issuers to add a layer of security to e-commerce transactions via password entry at checkout. One of the primary reasons to use 3D Secure is to benefit from a shift in liability from the merchant to the issuer, which may result in interchange savings. Please read our online documentation (<a href=""https://developers.braintreepayments.com"">https://developers.braintreepayments.com</a>) for a full explanation of 3D Secure. Verification is associated with a transaction amount and your merchant account. To specify a different merchant account (or, in turn, currency), you will need to specify the merchant account id when generating a client token (See <a href=""https://developers.braintreepayments.com/android/sdk/overview/generate-client-token"">https://developers.braintreepayments.com/android/sdk/overview/generate-client-token</a>). During lookup the original payment method nonce is consumed and a new one is returned, which points to the original payment method, as well as the 3D Secure verification. Transactions created with this nonce will be 3D Secure, and benefit from the appropriate liability shift if authentication is successful or fail with a 3D Secure failure.
 * @param fragment the {@link BraintreeFragment} backing the http request. This fragment willalso be responsible for handling callbacks to it's listeners
 * @param nonce The nonce that represents a card to perform a 3D Secure verification against.
 * @param amount The amount of the transaction in the current merchant account's currency.
 */
public static void performVerification(final BraintreeFragment fragment,final String nonce,final String amount){
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      try {
        JSONObject params=new JSONObject().put(""String_Node_Str"",configuration.getMerchantAccountId()).put(""String_Node_Str"",amount);
        fragment.getHttpClient().post(TokenizationClient.versionedPath(TokenizationClient.PAYMENT_METHOD_ENDPOINT + ""String_Node_Str"" + nonce+ ""String_Node_Str""),params.toString(),new HttpResponseCallback(){
          @Override public void success(          String responseBody){
            try {
              ThreeDSecureLookup threeDSecureLookup=ThreeDSecureLookup.fromJson(responseBody);
              if (threeDSecureLookup.getAcsUrl() != null) {
                Intent intent=new Intent(fragment.getApplicationContext(),ThreeDSecureWebViewActivity.class).putExtra(ThreeDSecureWebViewActivity.EXTRA_THREE_D_SECURE_LOOKUP,threeDSecureLookup);
                fragment.startActivityForResult(intent,THREE_D_SECURE_REQUEST_CODE);
              }
 else {
                fragment.postCallback(threeDSecureLookup.getCard());
              }
            }
 catch (            JSONException e) {
              fragment.postCallback(e);
            }
          }
          @Override public void failure(          Exception exception){
            fragment.postCallback(exception);
          }
        }
);
      }
 catch (      JSONException e) {
        fragment.postCallback(e);
      }
    }
  }
);
}",0.9982717989002357
165045,"@Override public void success(String responseBody){
  try {
    ThreeDSecureLookup threeDSecureLookup=ThreeDSecureLookup.fromJson(responseBody);
    if (threeDSecureLookup.getAcsUrl() != null) {
      Intent intent=new Intent(fragment.getContext(),ThreeDSecureWebViewActivity.class).putExtra(ThreeDSecureWebViewActivity.EXTRA_THREE_D_SECURE_LOOKUP,threeDSecureLookup);
      fragment.startActivityForResult(intent,THREE_D_SECURE_REQUEST_CODE);
    }
 else {
      fragment.postCallback(threeDSecureLookup.getCard());
    }
  }
 catch (  JSONException e) {
    fragment.postCallback(e);
  }
}","@Override public void success(String responseBody){
  try {
    ThreeDSecureLookup threeDSecureLookup=ThreeDSecureLookup.fromJson(responseBody);
    if (threeDSecureLookup.getAcsUrl() != null) {
      Intent intent=new Intent(fragment.getApplicationContext(),ThreeDSecureWebViewActivity.class).putExtra(ThreeDSecureWebViewActivity.EXTRA_THREE_D_SECURE_LOOKUP,threeDSecureLookup);
      fragment.startActivityForResult(intent,THREE_D_SECURE_REQUEST_CODE);
    }
 else {
      fragment.postCallback(threeDSecureLookup.getCard());
    }
  }
 catch (  JSONException e) {
    fragment.postCallback(e);
  }
}",0.9907795473595976
165046,"@Override public void onConfigurationFetched(Configuration configuration){
  try {
    JSONObject params=new JSONObject().put(""String_Node_Str"",configuration.getMerchantAccountId()).put(""String_Node_Str"",amount);
    fragment.getHttpClient().post(TokenizationClient.versionedPath(TokenizationClient.PAYMENT_METHOD_ENDPOINT + ""String_Node_Str"" + nonce+ ""String_Node_Str""),params.toString(),new HttpResponseCallback(){
      @Override public void success(      String responseBody){
        try {
          ThreeDSecureLookup threeDSecureLookup=ThreeDSecureLookup.fromJson(responseBody);
          if (threeDSecureLookup.getAcsUrl() != null) {
            Intent intent=new Intent(fragment.getContext(),ThreeDSecureWebViewActivity.class).putExtra(ThreeDSecureWebViewActivity.EXTRA_THREE_D_SECURE_LOOKUP,threeDSecureLookup);
            fragment.startActivityForResult(intent,THREE_D_SECURE_REQUEST_CODE);
          }
 else {
            fragment.postCallback(threeDSecureLookup.getCard());
          }
        }
 catch (        JSONException e) {
          fragment.postCallback(e);
        }
      }
      @Override public void failure(      Exception exception){
        fragment.postCallback(exception);
      }
    }
);
  }
 catch (  JSONException e) {
    fragment.postCallback(e);
  }
}","@Override public void onConfigurationFetched(Configuration configuration){
  try {
    JSONObject params=new JSONObject().put(""String_Node_Str"",configuration.getMerchantAccountId()).put(""String_Node_Str"",amount);
    fragment.getHttpClient().post(TokenizationClient.versionedPath(TokenizationClient.PAYMENT_METHOD_ENDPOINT + ""String_Node_Str"" + nonce+ ""String_Node_Str""),params.toString(),new HttpResponseCallback(){
      @Override public void success(      String responseBody){
        try {
          ThreeDSecureLookup threeDSecureLookup=ThreeDSecureLookup.fromJson(responseBody);
          if (threeDSecureLookup.getAcsUrl() != null) {
            Intent intent=new Intent(fragment.getApplicationContext(),ThreeDSecureWebViewActivity.class).putExtra(ThreeDSecureWebViewActivity.EXTRA_THREE_D_SECURE_LOOKUP,threeDSecureLookup);
            fragment.startActivityForResult(intent,THREE_D_SECURE_REQUEST_CODE);
          }
 else {
            fragment.postCallback(threeDSecureLookup.getCard());
          }
        }
 catch (        JSONException e) {
          fragment.postCallback(e);
        }
      }
      @Override public void failure(      Exception exception){
        fragment.postCallback(exception);
      }
    }
);
  }
 catch (  JSONException e) {
    fragment.postCallback(e);
  }
}",0.995754534928599
165047,"/** 
 * Start the Pay With Venmo flow. This will app switch to the Venmo app. If the Venmo app is not available,   {@link AppSwitchNotAvailableException} will be sent to{@link com.braintreepayments.api.interfaces.BraintreeErrorListener#onUnrecoverableError(Throwable)}.
 * @param fragment {@link BraintreeFragment}
 */
public static void authorize(final BraintreeFragment fragment){
  fragment.sendAnalyticsEvent(""String_Node_Str"");
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      if (isAvailable(fragment.getContext(),configuration)) {
        fragment.startActivityForResult(Venmo.getLaunchIntent(configuration),VENMO_REQUEST_CODE);
        fragment.sendAnalyticsEvent(""String_Node_Str"");
      }
 else {
        fragment.sendAnalyticsEvent(""String_Node_Str"");
        fragment.postCallback(new AppSwitchNotAvailableException(""String_Node_Str""));
      }
    }
  }
);
}","/** 
 * Start the Pay With Venmo flow. This will app switch to the Venmo app. If the Venmo app is not available,   {@link AppSwitchNotAvailableException} will be sent to{@link com.braintreepayments.api.interfaces.BraintreeErrorListener#onUnrecoverableError(Throwable)}.
 * @param fragment {@link BraintreeFragment}
 */
public static void authorize(final BraintreeFragment fragment){
  fragment.sendAnalyticsEvent(""String_Node_Str"");
  fragment.waitForConfiguration(new ConfigurationListener(){
    @Override public void onConfigurationFetched(    Configuration configuration){
      if (isAvailable(fragment.getApplicationContext(),configuration)) {
        fragment.startActivityForResult(Venmo.getLaunchIntent(configuration),VENMO_REQUEST_CODE);
        fragment.sendAnalyticsEvent(""String_Node_Str"");
      }
 else {
        fragment.sendAnalyticsEvent(""String_Node_Str"");
        fragment.postCallback(new AppSwitchNotAvailableException(""String_Node_Str""));
      }
    }
  }
);
}",0.9943791517629024
165048,"@Override public void onConfigurationFetched(Configuration configuration){
  if (isAvailable(fragment.getContext(),configuration)) {
    fragment.startActivityForResult(Venmo.getLaunchIntent(configuration),VENMO_REQUEST_CODE);
    fragment.sendAnalyticsEvent(""String_Node_Str"");
  }
 else {
    fragment.sendAnalyticsEvent(""String_Node_Str"");
    fragment.postCallback(new AppSwitchNotAvailableException(""String_Node_Str""));
  }
}","@Override public void onConfigurationFetched(Configuration configuration){
  if (isAvailable(fragment.getApplicationContext(),configuration)) {
    fragment.startActivityForResult(Venmo.getLaunchIntent(configuration),VENMO_REQUEST_CODE);
    fragment.sendAnalyticsEvent(""String_Node_Str"");
  }
 else {
    fragment.sendAnalyticsEvent(""String_Node_Str"");
    fragment.postCallback(new AppSwitchNotAvailableException(""String_Node_Str""));
  }
}",0.9873708381171068
165049,"private BraintreeFragment getFragment() throws InvalidArgumentException, JSONException {
  Configuration configuration=mock(Configuration.class);
  when(configuration.getMerchantId()).thenReturn(""String_Node_Str"");
  when(configuration.getVenmoState()).thenReturn(""String_Node_Str"");
  AnalyticsConfiguration analyticsConfiguration=mock(AnalyticsConfiguration.class);
  when(configuration.getAnalytics()).thenReturn(analyticsConfiguration);
  PayPalConfiguration paypalConfiguration=PayPalConfiguration.fromJson(new JSONObject(stringFromFixture(""String_Node_Str"")));
  when(configuration.getPayPal()).thenReturn(paypalConfiguration);
  AndroidPayConfiguration androidPayConfiguration=mock(AndroidPayConfiguration.class);
  when(androidPayConfiguration.getDisplayName()).thenReturn(""String_Node_Str"");
  when(androidPayConfiguration.getGoogleAuthorizationFingerprint()).thenReturn(""String_Node_Str"");
  when(androidPayConfiguration.getSupportedNetworks()).thenReturn(new String[0]);
  when(configuration.getAndroidPay()).thenReturn(androidPayConfiguration);
  Activity activity=mActivityTestRule.getActivity();
  BraintreeFragment fragment=spy(BraintreeFragment.newInstance(activity,stringFromFixture(""String_Node_Str"")));
  doNothing().when(fragment).fetchConfiguration();
  when(fragment.getContext()).thenReturn(getTargetContext());
  when(fragment.getConfiguration()).thenReturn(configuration);
  doNothing().when(fragment).startActivity(any(Intent.class));
  doNothing().when(fragment).startActivityForResult(any(Intent.class),anyInt());
  getInstrumentation().waitForIdleSync();
  return fragment;
}","private BraintreeFragment getFragment() throws InvalidArgumentException, JSONException {
  Configuration configuration=mock(Configuration.class);
  when(configuration.getMerchantId()).thenReturn(""String_Node_Str"");
  when(configuration.getVenmoState()).thenReturn(""String_Node_Str"");
  AnalyticsConfiguration analyticsConfiguration=mock(AnalyticsConfiguration.class);
  when(configuration.getAnalytics()).thenReturn(analyticsConfiguration);
  PayPalConfiguration paypalConfiguration=PayPalConfiguration.fromJson(new JSONObject(stringFromFixture(""String_Node_Str"")));
  when(configuration.getPayPal()).thenReturn(paypalConfiguration);
  AndroidPayConfiguration androidPayConfiguration=mock(AndroidPayConfiguration.class);
  when(androidPayConfiguration.getDisplayName()).thenReturn(""String_Node_Str"");
  when(androidPayConfiguration.getGoogleAuthorizationFingerprint()).thenReturn(""String_Node_Str"");
  when(androidPayConfiguration.getSupportedNetworks()).thenReturn(new String[0]);
  when(configuration.getAndroidPay()).thenReturn(androidPayConfiguration);
  Activity activity=mActivityTestRule.getActivity();
  BraintreeFragment fragment=spy(BraintreeFragment.newInstance(activity,stringFromFixture(""String_Node_Str"")));
  doNothing().when(fragment).fetchConfiguration();
  when(fragment.getApplicationContext()).thenReturn(getTargetContext());
  when(fragment.getConfiguration()).thenReturn(configuration);
  doNothing().when(fragment).startActivity(any(Intent.class));
  doNothing().when(fragment).startActivityForResult(any(Intent.class),anyInt());
  getInstrumentation().waitForIdleSync();
  return fragment;
}",0.996582789686238
165050,"/** 
 * Create a PayPalPaymentResource on behalf of the merchant. To be used in the PayPal Checkout flows for Single Payment and Billing Agreement.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param checkout A {@link PayPalCheckout} used to customize the request.
 * @param isBillingAgreement A boolean. If true, this will use the Billing Agreement. Otherwise,PayPal will perform a Single Payment.
 * @param callback A callback on the http request.
 */
private static void createPayPalPaymentResource(BraintreeFragment fragment,PayPalCheckout checkout,boolean isBillingAgreement,HttpResponseCallback callback) throws JSONException, ErrorWithResponse, BraintreeException {
  Configuration configuration=fragment.getConfiguration();
  CheckoutRequest request=PayPal.buildPayPalCheckoutConfiguration(null,fragment.getContext(),configuration);
  String currencyCode=checkout.getCurrencyCode();
  if (currencyCode == null) {
    currencyCode=configuration.getPayPal().getCurrencyIsoCode();
  }
  JSONObject experienceProfile=new JSONObject();
  experienceProfile.put(""String_Node_Str"",!checkout.getEnableShippingAddress());
  experienceProfile.put(""String_Node_Str"",checkout.getAddressOverride());
  if (checkout.getLocaleCode() != null) {
    experienceProfile.put(""String_Node_Str"",checkout.getLocaleCode());
  }
  String authorizationFingerprint=fragment.getClientToken().getAuthorizationFingerprint();
  JSONObject parameters=new JSONObject().put(""String_Node_Str"",authorizationFingerprint).put(""String_Node_Str"",request.getSuccessUrl()).put(""String_Node_Str"",request.getCancelUrl()).put(""String_Node_Str"",experienceProfile);
  if (!isBillingAgreement) {
    parameters.put(""String_Node_Str"",checkout.getAmount().toString()).put(""String_Node_Str"",currencyCode);
  }
  if (checkout.getAddressOverride() && checkout.getShippingAddress() != null) {
    parameters.put(""String_Node_Str"",checkout.getShippingAddress().getStreetAddress());
    parameters.put(""String_Node_Str"",checkout.getShippingAddress().getExtendedAddress());
    parameters.put(""String_Node_Str"",checkout.getShippingAddress().getLocality());
    parameters.put(""String_Node_Str"",checkout.getShippingAddress().getRegion());
    parameters.put(""String_Node_Str"",checkout.getShippingAddress().getPostalCode());
    parameters.put(""String_Node_Str"",checkout.getShippingAddress().getCountryCodeAlpha2());
    parameters.put(""String_Node_Str"",checkout.getShippingAddress().getRecipientName());
  }
  String apiUrl=isBillingAgreement ? ""String_Node_Str"" : ""String_Node_Str"";
  String versionedPath=""String_Node_Str"" + apiUrl;
  fragment.getHttpClient().post(versionedPath,parameters.toString(),callback);
}","/** 
 * Create a PayPalPaymentResource on behalf of the merchant. To be used in the PayPal Checkout flows for Single Payment and Billing Agreement.
 * @param fragment A {@link BraintreeFragment} used to process the request.
 * @param checkout A {@link PayPalCheckout} used to customize the request.
 * @param isBillingAgreement A boolean. If true, this will use the Billing Agreement. Otherwise,PayPal will perform a Single Payment.
 * @param callback A callback on the http request.
 */
private static void createPayPalPaymentResource(BraintreeFragment fragment,PayPalCheckout checkout,boolean isBillingAgreement,HttpResponseCallback callback) throws JSONException, ErrorWithResponse, BraintreeException {
  Configuration configuration=fragment.getConfiguration();
  CheckoutRequest request=PayPal.buildPayPalCheckoutConfiguration(null,fragment.getContext(),configuration);
  String currencyCode=checkout.getCurrencyCode();
  if (currencyCode == null) {
    currencyCode=configuration.getPayPal().getCurrencyIsoCode();
  }
  JSONObject experienceProfile=new JSONObject();
  experienceProfile.put(NO_SHIPPING_KEY,!checkout.getEnableShippingAddress());
  experienceProfile.put(ADDRESS_OVERRIDE_KEY,checkout.getAddressOverride());
  if (checkout.getLocaleCode() != null) {
    experienceProfile.put(LOCALE_CODE_KEY,checkout.getLocaleCode());
  }
  String authorizationFingerprint=fragment.getClientToken().getAuthorizationFingerprint();
  JSONObject parameters=new JSONObject().put(AUTHORIZATION_FINGERPRINT_KEY,authorizationFingerprint).put(RETURN_URL_KEY,request.getSuccessUrl()).put(CANCEL_URL_KEY,request.getCancelUrl()).put(EXPERIENCE_PROFILE_KEY,experienceProfile);
  if (!isBillingAgreement) {
    parameters.put(AMOUNT_KEY,checkout.getAmount().toString()).put(CURRENCY_ISO_CODE_KEY,currencyCode);
  }
  if (checkout.getAddressOverride() && checkout.getShippingAddress() != null) {
    PostalAddress shippingAddress=checkout.getShippingAddress();
    parameters.put(PostalAddress.LINE_1_KEY,shippingAddress.getStreetAddress());
    parameters.put(PostalAddress.LINE_2_KEY,shippingAddress.getExtendedAddress());
    parameters.put(PostalAddress.LOCALITY_KEY,shippingAddress.getLocality());
    parameters.put(PostalAddress.REGION_KEY,shippingAddress.getRegion());
    parameters.put(PostalAddress.POSTAL_CODE_UNDERSCORE_KEY,shippingAddress.getPostalCode());
    parameters.put(PostalAddress.COUNTRY_CODE_UNDERSCORE_KEY,shippingAddress.getCountryCodeAlpha2());
    parameters.put(PostalAddress.RECIPIENT_NAME_UNDERSCORE_KEY,shippingAddress.getRecipientName());
  }
  String apiUrl=isBillingAgreement ? SETUP_BILLING_AGREEMENT_ENDPOINT : CREATE_SINGLE_PAYMENT_ENDPOINT;
  String versionedPath=""String_Node_Str"" + apiUrl;
  fragment.getHttpClient().post(versionedPath,parameters.toString(),callback);
}",0.7904017451372478
165051,"/** 
 * Set properties specific to an AuthorizationRequest
 */
private static AuthorizationRequest buildPayPalAuthorizationConfiguration(Context context,Configuration configuration,String clientKeyString) throws ConfigurationException {
  PayPalConfiguration payPalConfiguration=configuration.getPayPal();
  validatePayPalConfiguration(configuration);
  return populateCommonData(new AuthorizationRequest(context),context,configuration).privacyUrl(payPalConfiguration.getPrivacyUrl()).userAgreementUrl(payPalConfiguration.getUserAgreementUrl()).withScopeValue(SCOPE_FUTURE_PAYMENTS).withScopeValue(SCOPE_EMAIL).withAdditionalPayloadAttribute(PAYLOAD_KEY_CLIENT_TOKEN,clientKeyString);
}","/** 
 * Set properties specific to an AuthorizationRequest
 */
private static AuthorizationRequest buildPayPalAuthorizationConfiguration(Context context,Configuration configuration,String clientKeyString) throws ConfigurationException {
  PayPalConfiguration payPalConfiguration=configuration.getPayPal();
  validatePayPalConfiguration(configuration);
  return populateCommonData(new AuthorizationRequest(context),context,configuration).privacyUrl(payPalConfiguration.getPrivacyUrl()).userAgreementUrl(payPalConfiguration.getUserAgreementUrl()).withScopeValue(SCOPE_FUTURE_PAYMENTS).withScopeValue(SCOPE_EMAIL).withAdditionalPayloadAttribute(PAYLOAD_CLIENT_TOKEN_KEY,clientKeyString);
}",0.9941690962099126
165052,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.paypal);
  Bundle extras=getIntent().getExtras();
  String extraClientToken=extras.getString(BraintreePaymentActivity.EXTRA_CLIENT_TOKEN);
  extraClientToken=""String_Node_Str"";
  mLog=(TextView)findViewById(R.id.log);
  mBillingAgreementButton=(Button)findViewById(R.id.paypal_billing_agreement_button);
  mFuturePaymentAddressScopeButton=(Button)findViewById(R.id.paypal_future_payment_address_scope_button);
  mFuturePaymentButton=(Button)findViewById(R.id.paypal_future_payment_button);
  mSinglePaymentButton=(Button)findViewById(R.id.paypal_single_payment_button);
  mCancelButton=(Button)findViewById(R.id.cancel_button);
  enableButtons(true);
  try {
    mBraintreeFragment=BraintreeFragment.newInstance(this,extraClientToken);
  }
 catch (  InvalidArgumentException e) {
    e.printStackTrace();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.paypal);
  Bundle extras=getIntent().getExtras();
  String extraClientToken=extras.getString(BraintreePaymentActivity.EXTRA_CLIENT_TOKEN);
  mLog=(TextView)findViewById(R.id.log);
  mBillingAgreementButton=(Button)findViewById(R.id.paypal_billing_agreement_button);
  mFuturePaymentAddressScopeButton=(Button)findViewById(R.id.paypal_future_payment_address_scope_button);
  mFuturePaymentButton=(Button)findViewById(R.id.paypal_future_payment_button);
  mSinglePaymentButton=(Button)findViewById(R.id.paypal_single_payment_button);
  mCancelButton=(Button)findViewById(R.id.cancel_button);
  enableButtons(true);
  try {
    mBraintreeFragment=BraintreeFragment.newInstance(this,extraClientToken);
  }
 catch (  InvalidArgumentException e) {
    e.printStackTrace();
  }
}",0.97928026172301
165053,"private void sendNonceToServer(String nonce){
  ApiClient apiClient=new RestAdapter.Builder().setEndpoint(Settings.getEnvironmentUrl(this)).setRequestInterceptor(new ApiClientRequestInterceptor()).build().create(ApiClient.class);
  String merchantAccountId=null;
  boolean requireThreeDSecure=false;
  if (Settings.isThreeDSecureEnabled(this)) {
    merchantAccountId=Settings.getThreeDSecureMerchantAccountId(this);
    requireThreeDSecure=Settings.isThreeDSecureRequired(this);
  }
  apiClient.createTransaction(nonce,merchantAccountId,requireThreeDSecure,new Callback<Transaction>(){
    @Override public void success(    Transaction transaction,    Response response){
      if (TextUtils.isEmpty(transaction.getMessage())) {
        showMessage(""String_Node_Str"");
      }
 else {
        showMessage(transaction.getMessage());
      }
    }
    @Override public void failure(    RetrofitError error){
      showMessage(""String_Node_Str"" + error.getResponse().getStatus() + ""String_Node_Str""+ error.getResponse().getBody());
    }
  }
);
}","private void sendNonceToServer(String nonce){
  Callback<Transaction> callback=new Callback<Transaction>(){
    @Override public void success(    Transaction transaction,    Response response){
      if (TextUtils.isEmpty(transaction.getMessage())) {
        showMessage(""String_Node_Str"");
      }
 else {
        showMessage(transaction.getMessage());
      }
    }
    @Override public void failure(    RetrofitError error){
      showMessage(""String_Node_Str"" + error.getResponse().getStatus() + ""String_Node_Str""+ error.getResponse().getBody());
    }
  }
;
  ApiClient apiClient=new RestAdapter.Builder().setEndpoint(Settings.getEnvironmentUrl(this)).setRequestInterceptor(new ApiClientRequestInterceptor()).build().create(ApiClient.class);
  if (Settings.isThreeDSecureEnabled(this) && Settings.isThreeDSecureRequired(this)) {
    apiClient.createTransaction(nonce,Settings.getThreeDSecureMerchantAccountId(this),true,callback);
  }
 else   if (Settings.isThreeDSecureEnabled(this)) {
    apiClient.createTransaction(nonce,Settings.getThreeDSecureMerchantAccountId(this),callback);
  }
 else {
    apiClient.createTransaction(nonce,callback);
  }
}",0.4865848112778536
165054,"@Test(timeout=10000) @MediumTest public void createTransaction_createsATransaction() throws InterruptedException {
  mApiClient.createTransaction(""String_Node_Str"",null,false,new Callback<Transaction>(){
    @Override public void success(    Transaction transaction,    Response response){
      assertNotNull(transaction.getMessage());
      mCountDownLatch.countDown();
    }
    @Override public void failure(    RetrofitError error){
      fail(error.getMessage());
    }
  }
);
  mCountDownLatch.await();
}","@Test(timeout=10000) @MediumTest public void createTransaction_createsATransaction() throws InterruptedException {
  mApiClient.createTransaction(""String_Node_Str"",new Callback<Transaction>(){
    @Override public void success(    Transaction transaction,    Response response){
      assertTrue(transaction.getMessage().contains(""String_Node_Str"") && transaction.getMessage().contains(""String_Node_Str""));
      mCountDownLatch.countDown();
    }
    @Override public void failure(    RetrofitError error){
      fail(error.getMessage());
    }
  }
);
  mCountDownLatch.await();
}",0.8644688644688645
165055,"@Override public void success(Transaction transaction,Response response){
  assertEquals(""String_Node_Str"",transaction.getMessage());
  mCountDownLatch.countDown();
}","@Override public void success(Transaction transaction,Response response){
  assertTrue(transaction.getMessage().contains(""String_Node_Str"") && transaction.getMessage().contains(""String_Node_Str""));
  mCountDownLatch.countDown();
}",0.8080808080808081
165056,"/** 
 * Broadcast the given intent to all interested BroadcastReceivers.  This call is asynchronous; it returns immediately, and you will continue executing while the receivers are run.
 * @param intent The Intent to broadcast; all receivers matching thisIntent will receive the broadcast.
 * @see #registerReceiver
 */
public boolean sendBroadcast(Intent intent){
synchronized (mReceivers) {
    final String action=intent.getAction();
    final String type=intent.resolveTypeIfNeeded(mAppContext.getContentResolver());
    final Uri data=intent.getData();
    final String scheme=intent.getScheme();
    final Set<String> categories=intent.getCategories();
    final boolean debug=DEBUG || ((intent.getFlags() & Intent.FLAG_DEBUG_LOG_RESOLUTION) != 0);
    if (debug)     Log.v(TAG,""String_Node_Str"" + type + ""String_Node_Str""+ scheme+ ""String_Node_Str""+ intent);
    ArrayList<ReceiverRecord> entries=mActions.get(intent.getAction());
    if (entries != null) {
      if (debug)       Log.v(TAG,""String_Node_Str"" + entries);
      ArrayList<ReceiverRecord> receivers=null;
      for (int i=0; i < entries.size(); i++) {
        ReceiverRecord receiver=entries.get(i);
        if (debug)         Log.v(TAG,""String_Node_Str"" + receiver.filter);
        if (receiver.broadcasting) {
          if (debug) {
            Log.v(TAG,""String_Node_Str"");
          }
          continue;
        }
        int match=receiver.filter.match(action,type,scheme,data,categories,""String_Node_Str"");
        if (match >= 0) {
          if (debug)           Log.v(TAG,""String_Node_Str"" + Integer.toHexString(match));
          if (receivers == null) {
            receivers=new ArrayList<ReceiverRecord>();
          }
          receivers.add(receiver);
          receiver.broadcasting=true;
        }
 else {
          if (debug) {
            String reason;
switch (match) {
case IntentFilter.NO_MATCH_ACTION:
              reason=""String_Node_Str"";
            break;
case IntentFilter.NO_MATCH_CATEGORY:
          reason=""String_Node_Str"";
        break;
case IntentFilter.NO_MATCH_DATA:
      reason=""String_Node_Str"";
    break;
case IntentFilter.NO_MATCH_TYPE:
  reason=""String_Node_Str"";
break;
default :
reason=""String_Node_Str"";
break;
}
Log.v(TAG,""String_Node_Str"" + reason);
}
}
}
if (receivers != null) {
for (int i=0; i < receivers.size(); i++) {
receivers.get(i).broadcasting=false;
}
mPendingBroadcasts.add(new BroadcastRecord(intent,receivers));
if (!mHandler.hasMessages(MSG_EXEC_PENDING_BROADCASTS)) {
mHandler.sendEmptyMessage(MSG_EXEC_PENDING_BROADCASTS);
}
return true;
}
}
}
return false;
}","/** 
 * Broadcast the given intent to all interested BroadcastReceivers.  This call is asynchronous; it returns immediately, and you will continue executing while the receivers are run.
 * @param intent The Intent to broadcast; all receivers matching thisIntent will receive the broadcast.
 * @see #registerReceiver
 */
public boolean sendBroadcast(Intent intent){
synchronized (mReceivers) {
    final String action=intent.getAction();
    final String type=intent.resolveTypeIfNeeded(mAppContext.getContentResolver());
    final Uri data=intent.getData();
    final String scheme=intent.getScheme();
    final Set<String> categories=intent.getCategories();
    ArrayList<ReceiverRecord> entries=mActions.get(intent.getAction());
    if (entries != null) {
      ArrayList<ReceiverRecord> receivers=null;
      for (int i=0; i < entries.size(); i++) {
        ReceiverRecord receiver=entries.get(i);
        if (receiver.broadcasting) {
          continue;
        }
        int match=receiver.filter.match(action,type,scheme,data,categories,""String_Node_Str"");
        if (match >= 0) {
          if (receivers == null) {
            receivers=new ArrayList<ReceiverRecord>();
          }
          receivers.add(receiver);
          receiver.broadcasting=true;
        }
      }
      if (receivers != null) {
        for (int i=0; i < receivers.size(); i++) {
          receivers.get(i).broadcasting=false;
        }
        mPendingBroadcasts.add(new BroadcastRecord(intent,receivers));
        if (!mHandler.hasMessages(MSG_EXEC_PENDING_BROADCASTS)) {
          mHandler.sendEmptyMessage(MSG_EXEC_PENDING_BROADCASTS);
        }
        return true;
      }
    }
  }
  return false;
}",0.4660601819454164
165057,"protected boolean isAndroidPayEnabled(){
  try {
    return (mConfiguration.getAndroidPay().isEnabled() && GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(mContext) == ConnectionResult.SUCCESS);
  }
 catch (  Exception e) {
    return false;
  }
}","protected boolean isAndroidPayEnabled(){
  try {
    return (mConfiguration.getAndroidPay().isEnabled() && GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(mContext) == ConnectionResult.SUCCESS);
  }
 catch (  NoClassDefFoundError e) {
    return false;
  }
}",0.9463955637707948
165058,"protected HttpURLConnection init(String url) throws IOException {
  log(""String_Node_Str"" + url);
  HttpURLConnection connection=(HttpURLConnection)new URL(url).openConnection();
  if (connection instanceof HttpsURLConnection) {
    ((HttpsURLConnection)connection).setSSLSocketFactory(HttpRequest.getSslSocketFactory());
  }
  connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.setRequestProperty(""String_Node_Str"",USER_AGENT);
  connection.setRequestProperty(""String_Node_Str"",Locale.getDefault().getLanguage());
  connection.setConnectTimeout(mConnectTimeout);
  return connection;
}","protected HttpURLConnection init(String url) throws IOException {
  log(""String_Node_Str"" + url);
  HttpURLConnection connection=(HttpURLConnection)new URL(url).openConnection();
  if (connection instanceof HttpsURLConnection) {
    ((HttpsURLConnection)connection).setSSLSocketFactory(HttpRequest.getSslSocketFactory());
  }
  connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.setRequestProperty(""String_Node_Str"",HttpRequest.getUserAgent());
  connection.setRequestProperty(""String_Node_Str"",Locale.getDefault().getLanguage());
  connection.setConnectTimeout(mConnectTimeout);
  return connection;
}",0.9743589743589745
165059,"protected void init(ThreeDSecureWebViewActivity activity){
  setId(android.R.id.widget_frame);
  WebSettings settings=getSettings();
  settings.setUserAgentString(HttpRequest.USER_AGENT);
  settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
  settings.setSupportMultipleWindows(true);
  settings.setJavaScriptEnabled(true);
  settings.setBuiltInZoomControls(true);
  disableOnScreenZoomControls(settings);
  setWebChromeClient(new ThreeDSecureWebChromeClient(activity));
  setWebViewClient(new ThreeDSecureWebViewClient(activity));
}","protected void init(ThreeDSecureWebViewActivity activity){
  setId(android.R.id.widget_frame);
  WebSettings settings=getSettings();
  settings.setUserAgentString(HttpRequest.getUserAgent());
  settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
  settings.setSupportMultipleWindows(true);
  settings.setJavaScriptEnabled(true);
  settings.setBuiltInZoomControls(true);
  disableOnScreenZoomControls(settings);
  setWebChromeClient(new ThreeDSecureWebChromeClient(activity));
  setWebViewClient(new ThreeDSecureWebViewClient(activity));
}",0.9816176470588236
165060,"@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_PROGRESS);
  mThreeDSecureLookup=getIntent().getParcelableExtra(EXTRA_THREE_D_SECURE_LOOKUP);
  if (mThreeDSecureLookup == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ThreeDSecureLookup.class.getSimpleName() + ""String_Node_Str"");
  }
  setupActionBar();
  mThreeDSecureWebView=new WebView(this);
  mThreeDSecureWebView.setId(android.R.id.widget_frame);
  mThreeDSecureWebView.setWebChromeClient(mThreeDSecureWebChromeClient);
  mThreeDSecureWebView.setWebViewClient(mThreeDSecureWebViewClient);
  mThreeDSecureWebView.getSettings().setUserAgentString(HttpRequest.USER_AGENT);
  mThreeDSecureWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
  mThreeDSecureWebView.getSettings().setJavaScriptEnabled(true);
  mThreeDSecureWebView.getSettings().setBuiltInZoomControls(true);
  if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
    mThreeDSecureWebView.getSettings().setDisplayZoomControls(false);
  }
  ((FrameLayout)findViewById(android.R.id.content)).addView(mThreeDSecureWebView);
  List<NameValuePair> params=new LinkedList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",mThreeDSecureLookup.getPareq()));
  params.add(new BasicNameValuePair(""String_Node_Str"",mThreeDSecureLookup.getMd()));
  params.add(new BasicNameValuePair(""String_Node_Str"",mThreeDSecureLookup.getTermUrl()));
  ByteArrayOutputStream encodedParams=new ByteArrayOutputStream();
  try {
    new UrlEncodedFormEntity(params,HTTP.UTF_8).writeTo(encodedParams);
  }
 catch (  IOException e) {
    finish();
  }
  mThreeDSecureWebView.postUrl(mThreeDSecureLookup.getAcsUrl(),encodedParams.toByteArray());
}","@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_PROGRESS);
  mThreeDSecureLookup=getIntent().getParcelableExtra(EXTRA_THREE_D_SECURE_LOOKUP);
  if (mThreeDSecureLookup == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ThreeDSecureLookup.class.getSimpleName() + ""String_Node_Str"");
  }
  setupActionBar();
  mThreeDSecureWebView=new WebView(this);
  mThreeDSecureWebView.setId(android.R.id.widget_frame);
  mThreeDSecureWebView.setWebChromeClient(mThreeDSecureWebChromeClient);
  mThreeDSecureWebView.setWebViewClient(mThreeDSecureWebViewClient);
  mThreeDSecureWebView.getSettings().setUserAgentString(HttpRequest.USER_AGENT);
  mThreeDSecureWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
  mThreeDSecureWebView.getSettings().setJavaScriptEnabled(true);
  mThreeDSecureWebView.getSettings().setBuiltInZoomControls(true);
  disableZoomControls();
  ((FrameLayout)findViewById(android.R.id.content)).addView(mThreeDSecureWebView);
  List<NameValuePair> params=new LinkedList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",mThreeDSecureLookup.getPareq()));
  params.add(new BasicNameValuePair(""String_Node_Str"",mThreeDSecureLookup.getMd()));
  params.add(new BasicNameValuePair(""String_Node_Str"",mThreeDSecureLookup.getTermUrl()));
  ByteArrayOutputStream encodedParams=new ByteArrayOutputStream();
  try {
    new UrlEncodedFormEntity(params,HTTP.UTF_8).writeTo(encodedParams);
  }
 catch (  IOException e) {
    finish();
  }
  mThreeDSecureWebView.postUrl(mThreeDSecureLookup.getAcsUrl(),encodedParams.toByteArray());
}",0.9594556280124752
165061,"@Override public void onTextChanged(Editable editable){
  if (!mIsSubmitting) {
    if (areFieldsValid()) {
      setEnabledSubmitButtonStyle();
    }
  }
}","@Override public void onTextChanged(Editable editable){
  if (!mIsSubmitting) {
    if (areFieldsValid()) {
      setEnabledSubmitButtonStyle();
    }
 else {
      setDisabledSubmitButtonStyle();
    }
  }
}",0.8351648351648352
165062,"private Map<String,Integer> buildWordFrequencies(final List<String> texts,final WordTokenizer tokenizer){
  final Map<String,Integer> wordFrequencies=new HashMap<>();
  for (  final String text : texts) {
    final List<String> words=filter(tokenizer.tokenize(text));
    for (    final String word : words) {
      final String normalized=normalize(word);
      if (!wordFrequencies.containsKey(normalized)) {
        wordFrequencies.put(normalized,1);
      }
      wordFrequencies.put(normalized,wordFrequencies.get(normalized) + 1);
    }
  }
  return wordFrequencies;
}","private Map<String,Integer> buildWordFrequencies(final List<String> texts,final WordTokenizer tokenizer){
  final Map<String,Integer> wordFrequencies=new HashMap<>();
  for (  final String text : texts) {
    final List<String> words=filter(tokenizer.tokenize(text));
    for (    final String word : words) {
      final String normalized=normalize(word);
      wordFrequencies.put(normalized,wordFrequencies.getOrDefault(normalized,0) + 1);
    }
  }
  return wordFrequencies;
}",0.8064516129032258
165063,"@Test public void datarank() throws IOException {
  final FrequencyAnalyzer frequencyAnalyzer=new FrequencyAnalyzer();
  frequencyAnalyzer.setWordFrequenciesToReturn(20);
  frequencyAnalyzer.setMinWordLength(2);
  frequencyAnalyzer.setStopWords(loadStopWords());
  final List<WordFrequency> wordFrequencies=frequencyAnalyzer.load(getInputStream(""String_Node_Str""));
  final Dimension dimension=new Dimension(990,618);
  final LayeredWordCloud layeredWordCloud=new LayeredWordCloud(4,dimension,CollisionMode.PIXEL_PERFECT);
  layeredWordCloud.setBackgroundColor(new Color(0x000000FF,true));
  layeredWordCloud.setPadding(0,1);
  layeredWordCloud.setPadding(1,1);
  layeredWordCloud.setKumoFont(0,new KumoFont(""String_Node_Str"",FontWeight.BOLD));
  layeredWordCloud.setKumoFont(1,new KumoFont(""String_Node_Str"",FontWeight.BOLD));
  layeredWordCloud.setBackground(0,new PixelBoundryBackground(getInputStream(""String_Node_Str"")));
  layeredWordCloud.setBackground(1,new PixelBoundryBackground(getInputStream(""String_Node_Str"")));
  layeredWordCloud.setColorPalette(0,new ColorPalette(new Color(0x0891d1)));
  layeredWordCloud.setColorPalette(1,new ColorPalette(new Color(0x76beea)));
  layeredWordCloud.setFontScalar(0,new SqrtFontScalar(10,60));
  layeredWordCloud.setFontScalar(1,new SqrtFontScalar(10,60));
  final long startTime=System.currentTimeMillis();
  layeredWordCloud.build(0,wordFrequencies);
  layeredWordCloud.build(1,wordFrequencies);
  LOGGER.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  layeredWordCloud.writeToFile(""String_Node_Str"");
}","@Test public void datarank() throws IOException {
  final FrequencyAnalyzer frequencyAnalyzer=new FrequencyAnalyzer();
  frequencyAnalyzer.setWordFrequenciesToReturn(200);
  frequencyAnalyzer.setMinWordLength(2);
  frequencyAnalyzer.setStopWords(loadStopWords());
  final List<WordFrequency> wordFrequencies=frequencyAnalyzer.load(getInputStream(""String_Node_Str""));
  final Dimension dimension=new Dimension(990,618);
  final LayeredWordCloud layeredWordCloud=new LayeredWordCloud(4,dimension,CollisionMode.PIXEL_PERFECT);
  layeredWordCloud.setBackgroundColor(new Color(0x000000FF,true));
  layeredWordCloud.setPadding(0,1);
  layeredWordCloud.setPadding(1,1);
  layeredWordCloud.setKumoFont(0,new KumoFont(""String_Node_Str"",FontWeight.BOLD));
  layeredWordCloud.setKumoFont(1,new KumoFont(""String_Node_Str"",FontWeight.BOLD));
  layeredWordCloud.setBackground(0,new PixelBoundryBackground(getInputStream(""String_Node_Str"")));
  layeredWordCloud.setBackground(1,new PixelBoundryBackground(getInputStream(""String_Node_Str"")));
  layeredWordCloud.setColorPalette(0,new ColorPalette(new Color(0x0891d1)));
  layeredWordCloud.setColorPalette(1,new ColorPalette(new Color(0x76beea)));
  layeredWordCloud.setFontScalar(0,new SqrtFontScalar(10,60));
  layeredWordCloud.setFontScalar(1,new SqrtFontScalar(10,60));
  final long startTime=System.currentTimeMillis();
  layeredWordCloud.build(0,wordFrequencies);
  layeredWordCloud.build(1,wordFrequencies);
  LOGGER.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  layeredWordCloud.writeToFile(""String_Node_Str"");
}",0.9996868149076104
165064,"private int maxFrequency(final Collection<WordFrequency> wordFrequencies){
  return Lambda.max(wordFrequencies,on(WordFrequency.class).getFrequency());
}","private int maxFrequency(final Collection<WordFrequency> wordFrequencies){
  if (wordFrequencies.isEmpty()) {
    return 1;
  }
  return Lambda.max(wordFrequencies,on(WordFrequency.class).getFrequency());
}",0.8523676880222841
165065,"/** 
 * try to place in center, build out in a spiral trying to place words for N steps
 * @param word
 */
protected void place(final Word word,final int startX,final int startY){
  final Graphics graphics=this.bufferedImage.getGraphics();
  final int maxRadius=width;
  for (int r=0; r < maxRadius; r+=2) {
    for (int x=-r; x <= r && startX + x >= 0 && startX + x < width; x++) {
      boolean placed=false;
      word.setX(startX + x);
      int y1=(int)Math.sqrt(r * r - x * x);
      if (startY + y1 >= 0 && startY + y1 < height) {
        word.setY(startY + y1);
        placed=tryToPlace(word);
      }
      int y2=-y1;
      if (!placed && startY + y2 >= 0 && startY + y2 < height) {
        word.setY(startY + y2);
        placed=tryToPlace(word);
      }
      if (placed) {
        collisionRaster.mask(word.getCollisionRaster(),word.getX(),word.getY());
        graphics.drawImage(word.getBufferedImage(),word.getX(),word.getY(),null);
        return;
      }
    }
  }
  LOGGER.info(""String_Node_Str"" + word.getWord());
  skipped.add(word);
}","/** 
 * try to place in center, build out in a spiral trying to place words for N steps
 * @param word
 */
protected void place(final Word word,final int startX,final int startY){
  final Graphics graphics=this.bufferedImage.getGraphics();
  final int maxRadius=width;
  for (int r=0; r < maxRadius; r+=2) {
    for (int x=-r; x <= r; x++) {
      if (startX + x < 0) {
        continue;
      }
      if (startX + x >= width) {
        continue;
      }
      boolean placed=false;
      word.setX(startX + x);
      int y1=(int)Math.sqrt(r * r - x * x);
      if (startY + y1 >= 0 && startY + y1 < height) {
        word.setY(startY + y1);
        placed=tryToPlace(word);
      }
      int y2=-y1;
      if (!placed && startY + y2 >= 0 && startY + y2 < height) {
        word.setY(startY + y2);
        placed=tryToPlace(word);
      }
      if (placed) {
        collisionRaster.mask(word.getCollisionRaster(),word.getX(),word.getY());
        graphics.drawImage(word.getBufferedImage(),word.getX(),word.getY(),null);
        return;
      }
    }
  }
  LOGGER.info(""String_Node_Str"" + word.getWord());
  skipped.add(word);
}",0.9423604757548032
165066,"public File outputFile(File outputDir,String layoutName){
  String className=generator.getClassName(layoutName);
  return new File(packageToFile(outputDir,packageName),className + ""String_Node_Str"");
}","public File outputFile(File outputDir,File layoutFile){
  return outputFile(outputDir,FileUtils.stripExtension(layoutFile.getName()));
}",0.5222551928783383
165067,"@NotNull private static Set<VirtualFile> getLayoutFiles(@NotNull Project project,@NotNull List<? extends VFileEvent> events){
  final Set<VirtualFile> result=new HashSet<VirtualFile>();
  for (  VFileEvent event : events) {
    final VirtualFile file=event.getFile();
    if (file != null && HoldrAndroidUtils.isUserLayoutFile(project,file)) {
      result.add(file);
    }
  }
  return result;
}","@NotNull private static Set<VirtualFile> getLayoutFiles(@NotNull Project project,@NotNull List<? extends VFileEvent> events){
  final Set<VirtualFile> result=new HashSet<VirtualFile>();
  for (  VFileEvent event : events) {
    if (event instanceof VFilePropertyChangeEvent && ((VFilePropertyChangeEvent)event).getPropertyName().equals(""String_Node_Str"")) {
      continue;
    }
    final VirtualFile file=event.getFile();
    if (file != null && HoldrAndroidUtils.isUserLayoutFile(project,file)) {
      result.add(file);
    }
  }
  return result;
}",0.7763713080168776
165068,"@Override @NotNull public Set<Class> getExtraProjectModelClasses(){
  return Sets.<Class>newHashSet(AndroidProject.class);
}","@Override @NotNull public Set<Class> getExtraProjectModelClasses(){
  return Sets.<Class>newHashSet(AndroidProject.class,HoldrCompiler.class);
}",0.9253731343283582
165069,"public static List<String> extractTypeNames(String sig){
  final List<String> types=new ArrayList<String>();
  SignatureReader reader=new SignatureReader(sig);
  reader.accept(new SignatureVisitor(Opcodes.ASM5){
class AppendType extends SignatureVisitor {
      StringBuilder sb=new StringBuilder();
      int l=0;
      public AppendType(){
        super(Opcodes.ASM5);
      }
      @Override public void visitBaseType(      char descriptor){
        if (descriptor != 'V') {
          sb.append(descriptor);
          visitEnd();
        }
      }
      @Override public void visitTypeVariable(      String name){
        sb.append(""String_Node_Str"");
        sb.append(name);
        visitEnd();
      }
      @Override public SignatureVisitor visitArrayType(){
        sb.append(""String_Node_Str"");
        return this;
      }
      @Override public void visitClassType(      String name){
        sb.append(""String_Node_Str"");
        sb.append(name);
        visitEnd();
      }
      @Override public void visitInnerClassType(      String name){
        visitClassType(name);
      }
      @Override public void visitTypeArgument(){
      }
      @Override public SignatureVisitor visitTypeArgument(      char wildcard){
        l++;
        if (sb.length() == 0) {
          String t=types.remove(types.size() - 1);
          if (t.endsWith(""String_Node_Str"")) {
            t=t.substring(0,t.length() - 1);
          }
          sb.append(t);
          sb.append(""String_Node_Str"");
        }
        if (wildcard != '=') {
          sb.append(wildcard);
        }
        return this;
      }
      @Override public void visitEnd(){
        if (l == 0) {
          flush();
        }
 else {
          sb.append(""String_Node_Str"");
          l--;
        }
      }
      private void flush(){
        if (sb.length() > 0) {
          if (sb.charAt(0) == 'L' || sb.charAt(0) == 'T') {
            sb.append(""String_Node_Str"");
          }
          types.add(sb.toString());
          sb=new StringBuilder();
        }
      }
    }
    @Override public void visitFormalTypeParameter(    String name){
    }
    @Override public SignatureVisitor visitClassBound(){
      return super.visitInterfaceBound();
    }
    @Override public SignatureVisitor visitInterfaceBound(){
      return super.visitInterfaceBound();
    }
    @Override public SignatureVisitor visitParameterType(){
      return new AppendType();
    }
    @Override public SignatureVisitor visitReturnType(){
      return new AppendType();
    }
    @Override public SignatureVisitor visitExceptionType(){
      return new AppendType();
    }
  }
);
  return types;
}","public static List<String> extractTypeNames(String sig){
  final List<String> types=new ArrayList<String>();
  SignatureReader reader=new SignatureReader(sig);
  reader.accept(new SignatureVisitor(Opcodes.ASM5){
class AppendType extends SignatureVisitor {
      StringBuilder sb=new StringBuilder();
      int l=0;
      public AppendType(){
        super(Opcodes.ASM5);
      }
      @Override public void visitBaseType(      char descriptor){
        if (descriptor != 'V') {
          sb.append(descriptor);
          visitEnd();
        }
      }
      @Override public void visitTypeVariable(      String name){
        sb.append(""String_Node_Str"");
        sb.append(name);
        visitEnd();
      }
      @Override public SignatureVisitor visitArrayType(){
        sb.append(""String_Node_Str"");
        return this;
      }
      @Override public void visitClassType(      String name){
        sb.append(""String_Node_Str"");
        sb.append(name);
        visitEnd();
      }
      @Override public void visitInnerClassType(      String name){
        visitClassType(name);
      }
      @Override public void visitTypeArgument(){
      }
      @Override public SignatureVisitor visitTypeArgument(      char wildcard){
        l++;
        if (sb.length() == 0) {
          String t=types.remove(types.size() - 1);
          if (t.endsWith(""String_Node_Str"")) {
            t=t.substring(0,t.length() - 1);
          }
          if (t.endsWith(""String_Node_Str"")) {
            t=t.substring(0,t.length() - 1);
            sb.append(t);
          }
 else {
            sb.append(t);
            sb.append(""String_Node_Str"");
          }
        }
        if (wildcard != '=') {
          sb.append(wildcard);
        }
        return this;
      }
      @Override public void visitEnd(){
        if (l == 0) {
          flush();
        }
 else {
          sb.append(""String_Node_Str"");
          l--;
        }
      }
      private void flush(){
        if (sb.length() > 0) {
          if (sb.charAt(0) == 'L' || sb.charAt(0) == 'T') {
            sb.append(""String_Node_Str"");
          }
          types.add(sb.toString());
          sb=new StringBuilder();
        }
      }
    }
    @Override public void visitFormalTypeParameter(    String name){
    }
    @Override public SignatureVisitor visitClassBound(){
      return super.visitInterfaceBound();
    }
    @Override public SignatureVisitor visitInterfaceBound(){
      return super.visitInterfaceBound();
    }
    @Override public SignatureVisitor visitParameterType(){
      return new AppendType();
    }
    @Override public SignatureVisitor visitReturnType(){
      return new AppendType();
    }
    @Override public SignatureVisitor visitExceptionType(){
      return new AppendType();
    }
  }
);
  return types;
}",0.9592211609110948
165070,"@Override public SignatureVisitor visitTypeArgument(char wildcard){
  l++;
  if (sb.length() == 0) {
    String t=types.remove(types.size() - 1);
    if (t.endsWith(""String_Node_Str"")) {
      t=t.substring(0,t.length() - 1);
    }
    sb.append(t);
    sb.append(""String_Node_Str"");
  }
  if (wildcard != '=') {
    sb.append(wildcard);
  }
  return this;
}","@Override public SignatureVisitor visitTypeArgument(char wildcard){
  l++;
  if (sb.length() == 0) {
    String t=types.remove(types.size() - 1);
    if (t.endsWith(""String_Node_Str"")) {
      t=t.substring(0,t.length() - 1);
    }
    if (t.endsWith(""String_Node_Str"")) {
      t=t.substring(0,t.length() - 1);
      sb.append(t);
    }
 else {
      sb.append(t);
      sb.append(""String_Node_Str"");
    }
  }
  if (wildcard != '=') {
    sb.append(wildcard);
  }
  return this;
}",0.7857142857142857
165071,"public DefaultPropertyNameMatcher(String column,int from,boolean exactMatch,boolean caseSensitive){
  this.column=requireNonNull(""String_Node_Str"",column);
  this.from=from;
  this.exactMatch=exactMatch;
  this.caseSensitive=caseSensitive;
}","public DefaultPropertyNameMatcher(String column,int from,boolean exactMatch,boolean caseSensitive){
  if (from > column.length()) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + from + ""String_Node_Str""+ column.length());
  }
  this.column=requireNonNull(""String_Node_Str"",column);
  this.from=from;
  this.exactMatch=exactMatch;
  this.caseSensitive=caseSensitive;
}",0.77491961414791
165072,"@Override public List<PropertyNameMatcherKeyValuePair> keyValuePairs(){
  List<PropertyNameMatcherKeyValuePair> keyValuePairs=new ArrayList<PropertyNameMatcherKeyValuePair>();
  keyValuePairs.add(new PropertyNameMatcherKeyValuePair(new DefaultPropertyNameMatcher(column,from,exactMatch,caseSensitive),new DefaultPropertyNameMatcher(""String_Node_Str"",0,exactMatch,caseSensitive)));
  for (int i=column.length() - 1; i >= from; i--) {
    char c=column.charAt(i);
    if (isSeparatorChar(c)) {
      PropertyNameMatcher key=new DefaultPropertyNameMatcher(column.substring(from,i),0,exactMatch,caseSensitive);
      PropertyNameMatcher value=new DefaultPropertyNameMatcher(column,from + i + 1,exactMatch,caseSensitive);
      keyValuePairs.add(new PropertyNameMatcherKeyValuePair(key,value));
    }
  }
  return keyValuePairs;
}","@Override public List<PropertyNameMatcherKeyValuePair> keyValuePairs(){
  List<PropertyNameMatcherKeyValuePair> keyValuePairs=new ArrayList<PropertyNameMatcherKeyValuePair>();
  int f=from;
  for (; f < column.length() && isSeparatorChar(column.charAt(f)); f++)   ;
  keyValuePairs.add(new PropertyNameMatcherKeyValuePair(new DefaultPropertyNameMatcher(column,f,exactMatch,caseSensitive),new DefaultPropertyNameMatcher(""String_Node_Str"",0,exactMatch,caseSensitive)));
  for (int i=column.length() - 1; i >= f; i--) {
    char c=column.charAt(i);
    if (isSeparatorChar(c)) {
      PropertyNameMatcher key=new DefaultPropertyNameMatcher(column.substring(f,i),0,exactMatch,caseSensitive);
      PropertyNameMatcher value=new DefaultPropertyNameMatcher(column,i + 1,exactMatch,caseSensitive);
      keyValuePairs.add(new PropertyNameMatcherKeyValuePair(key,value));
    }
  }
  return keyValuePairs;
}",0.9385150812064964
165073,"private KeyDefinitionBuilder<S,K> populateKey(KeyDefinitionBuilder<S,K>[] keyDefinitions,ArrayList<MappingContextFactoryBuilder<S,K>> builders,MappingContextFactoryBuilder<S,K> builder){
  if (keyDefinitions[builder.currentIndex] != null) {
    return keyDefinitions[builder.currentIndex];
  }
  int parentIndex=builder.getNonEmptyParentIndex();
  KeyDefinitionBuilder<S,K> parent=null;
  if (parentIndex != -1) {
    parent=keyDefinitions[parentIndex];
    if (parent == null) {
      for (int i=0; i < builders.size(); i++) {
        MappingContextFactoryBuilder<S,K> potentialParent=builders.get(i);
        if (potentialParent.currentIndex == parentIndex) {
          parent=populateKey(keyDefinitions,builders,potentialParent);
          break;
        }
      }
      if (parent == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + builder);
      }
    }
  }
  KeyDefinitionBuilder<S,K> keyDefinition;
  if (builder.effectiveKeys().isEmpty() && parent != null && !builder.newObjectOnEachRow()) {
    keyDefinition=parent.asChild(builder.currentIndex);
  }
 else {
    List<K> keys=new ArrayList<K>(builder.effectiveKeys());
    if (parentIndex > 0 && parent != null) {
      appendParentKeys(parent,keys);
    }
    keyDefinition=new KeyDefinitionBuilder<S,K>(keys,builder.keySourceGetter,builder.currentIndex);
  }
  keyDefinitions[builder.currentIndex]=keyDefinition;
  return keyDefinition;
}","private KeyDefinitionBuilder<S,K> populateKey(KeyDefinitionBuilder<S,K>[] keyDefinitions,ArrayList<MappingContextFactoryBuilder<S,K>> builders,MappingContextFactoryBuilder<S,K> builder){
  if (keyDefinitions[builder.currentIndex] != null) {
    return keyDefinitions[builder.currentIndex];
  }
  int parentIndex=builder.getNonEmptyParentIndex();
  KeyDefinitionBuilder<S,K> parent=null;
  if (parentIndex != -1) {
    parent=keyDefinitions[parentIndex];
    if (parent == null) {
      for (int i=0; i < builders.size(); i++) {
        MappingContextFactoryBuilder<S,K> potentialParent=builders.get(i);
        if (potentialParent.currentIndex == parentIndex) {
          parent=populateKey(keyDefinitions,builders,potentialParent);
          break;
        }
      }
      if (parent == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + builder);
      }
    }
  }
  KeyDefinitionBuilder<S,K> keyDefinition;
  if (parent != null && builder.inheritKeys(parentIndex)) {
    keyDefinition=parent.asChild(builder.currentIndex);
  }
 else {
    List<K> keys=new ArrayList<K>(builder.effectiveKeys());
    if (parentIndex > 0 && parent != null) {
      appendParentKeys(parent,keys);
    }
    keyDefinition=new KeyDefinitionBuilder<S,K>(keys,builder.keySourceGetter,builder.currentIndex);
  }
  keyDefinitions[builder.currentIndex]=keyDefinition;
  return keyDefinition;
}",0.713371266002845
165074,"private boolean newObjectOnEachRow(){
  if (owner instanceof ArrayElementPropertyMeta) {
    ArrayElementPropertyMeta elementPropertyMeta=(ArrayElementPropertyMeta)owner;
    if (elementPropertyMeta.getSetter() instanceof AppendCollectionSetter) {
      return true;
    }
  }
 else   if (owner instanceof MapKeyValueElementPropertyMeta) {
    return true;
  }
  return false;
}","private boolean newObjectOnEachRow(int parentIndex){
  if (owner instanceof ArrayElementPropertyMeta) {
    ArrayElementPropertyMeta elementPropertyMeta=(ArrayElementPropertyMeta)owner;
    if (elementPropertyMeta.getSetter() instanceof AppendCollectionSetter) {
      return true;
    }
  }
 else   if (owner instanceof MapKeyValueElementPropertyMeta) {
    return true;
  }
  if (parent != null && parent.currentIndex != parentIndex) {
    return parent.newObjectOnEachRow(parentIndex);
  }
  return false;
}",0.8513513513513513
165075,"private boolean isEligibleAsSubstituteKey(){
  return !(owner instanceof ArrayElementPropertyMeta) && !(owner instanceof MapElementPropertyMeta);
}","private boolean isEligibleAsSubstituteKey(){
  return !JoinUtils.isArrayElement(owner);
}",0.6864406779661016
165076,"@Override @SuppressWarnings(""String_Node_Str"") public <T,P>FieldMapper<S,T> newFieldMapper(PropertyMapping<T,P,K,FieldMapperColumnDefinition<K>> propertyMapping,MappingContextFactoryBuilder contextFactoryBuilder,MapperBuilderErrorHandler mappingErrorHandler){
  final PropertyMeta<T,P> propertyMeta=propertyMapping.getPropertyMeta();
  final Type propertyType=propertyMeta.getPropertyType();
  final Setter<? super T,? super P> setter=propertyMeta.getSetter();
  final K key=propertyMapping.getColumnKey();
  final Class<P> type=TypeHelper.toClass(propertyType);
  Getter<? super S,? extends P> getter=getGetterFromSource(key,propertyMapping.getPropertyMeta().getPropertyType(),propertyMapping.getColumnDefinition(),propertyMeta.getPropertyClassMetaSupplier());
  if (getter == null) {
    mappingErrorHandler.accessorNotFound(""String_Node_Str"" + key + ""String_Node_Str""+ propertyType+ ""String_Node_Str""+ propertyMapping.getPropertyMeta().getPath()+ ""String_Node_Str""+ ErrorDoc.toUrl(""String_Node_Str""));
    return null;
  }
 else {
    if (type.isPrimitive()) {
      return this.<T,P>primitiveIndexedFieldMapper(type,setter,getter);
    }
    if (propertyMapping.getColumnDefinition().isKey() && propertyMapping.getPropertyMeta() instanceof ArrayElementPropertyMeta) {
      return new FieldMapperImpl<S,T,P>(getter,new NullValueFilterSetter(setter));
    }
 else {
      return new FieldMapperImpl<S,T,P>(getter,setter);
    }
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <T,P>FieldMapper<S,T> newFieldMapper(PropertyMapping<T,P,K,FieldMapperColumnDefinition<K>> propertyMapping,MappingContextFactoryBuilder contextFactoryBuilder,MapperBuilderErrorHandler mappingErrorHandler){
  final PropertyMeta<T,P> propertyMeta=propertyMapping.getPropertyMeta();
  final Type propertyType=propertyMeta.getPropertyType();
  final Setter<? super T,? super P> setter=propertyMeta.getSetter();
  final K key=propertyMapping.getColumnKey();
  final Class<P> type=TypeHelper.toClass(propertyType);
  Getter<? super S,? extends P> getter=getGetterFromSource(key,propertyMapping.getPropertyMeta().getPropertyType(),propertyMapping.getColumnDefinition(),propertyMeta.getPropertyClassMetaSupplier());
  if (getter == null) {
    mappingErrorHandler.accessorNotFound(""String_Node_Str"" + key + ""String_Node_Str""+ propertyType+ ""String_Node_Str""+ propertyMapping.getPropertyMeta().getPath()+ ""String_Node_Str""+ ErrorDoc.toUrl(""String_Node_Str""));
    return null;
  }
 else {
    if (type.isPrimitive()) {
      return this.<T,P>primitiveIndexedFieldMapper(type,setter,getter);
    }
    if (propertyMapping.getColumnDefinition().isKey() && JoinUtils.isArrayElement(propertyMapping.getPropertyMeta())) {
      return new FieldMapperImpl<S,T,P>(getter,new NullValueFilterSetter(setter));
    }
 else {
      return new FieldMapperImpl<S,T,P>(getter,setter);
    }
  }
}",0.9636617749825296
165077,"private boolean isTargetForMapperFieldMapper(PropertyMapping pm){
  return pm.getPropertyMeta().isSubProperty() || (pm.getPropertyMeta() instanceof ArrayElementPropertyMeta && pm.getColumnDefinition().isKey());
}","private boolean isTargetForMapperFieldMapper(PropertyMapping pm){
  return pm.getPropertyMeta().isSubProperty() || (JoinUtils.isArrayElement(pm.getPropertyMeta()) && pm.getColumnDefinition().isKey());
}",0.8115942028985508
165078,"@SuppressWarnings(""String_Node_Str"") private ConstructorInjections constructorInjections(){
  final Map<Parameter,BiFunction<? super S,? super MappingContext<? super S>,?>> injections=new HashMap<Parameter,BiFunction<? super S,? super MappingContext<? super S>,?>>();
  final List<FieldMapper<S,T>> fieldMappers=new ArrayList<FieldMapper<S,T>>();
  propertyMappingsBuilder.forEachConstructorProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>>>(){
    @SuppressWarnings(""String_Node_Str"") @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>> propertyMapping){
      if (!isTargetForMapperFieldMapper(propertyMapping)) {
        PropertyMeta<T,?> pm=propertyMapping.getPropertyMeta();
        ConstructorPropertyMeta<T,?> cProp=(ConstructorPropertyMeta<T,?>)pm;
        Parameter parameter=cProp.getParameter();
        Getter<? super S,?> getter=fieldMapperFactory.getGetterFromSource(propertyMapping.getColumnKey(),pm.getPropertyType(),propertyMapping.getColumnDefinition(),pm.getPropertyClassMetaSupplier());
        if (NullGetter.isNull(getter)) {
          mapperConfig.mapperBuilderErrorHandler().accessorNotFound(""String_Node_Str"" + propertyMapping.getColumnKey() + ""String_Node_Str""+ propertyMapping.getPropertyMeta().getPropertyType()+ ""String_Node_Str""+ propertyMapping.getPropertyMeta().getPath()+ ""String_Node_Str""+ ErrorDoc.toUrl(""String_Node_Str""));
        }
 else {
          injections.put(parameter,new BiFunctionGetter<S,MappingContext<? super S>,Object>(getter));
        }
        if (!NullSetter.isNull(cProp.getSetter())) {
          fieldMappers.add(fieldMapperFactory.newFieldMapper(propertyMapping,mappingContextFactoryBuilder,mapperConfig.mapperBuilderErrorHandler()));
        }
      }
    }
  }
);
  for (  PropertyPerOwner e : getSubPropertyPerOwner()) {
    if (e.owner.isConstructorProperty()) {
      final List<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>>> properties=e.propertyMappings;
      final MappingContextFactoryBuilder currentBuilder=getMapperContextFactoryBuilder(e.owner,properties);
      final Mapper<S,?> mapper;
      if (properties.size() == 1 && properties.get(0).getPropertyMeta() instanceof ArrayElementPropertyMeta) {
        mapper=getterPropertyMapper(e.owner,properties.get(0));
      }
 else {
        mapper=subPropertyMapper(e.owner,properties,currentBuilder);
      }
      ConstructorPropertyMeta<T,?> meta=(ConstructorPropertyMeta<T,?>)e.owner;
      injections.put(meta.getParameter(),newMapperGetterAdapter(mapper,currentBuilder));
      fieldMappers.add(newMapperFieldMapper(properties,meta,mapper,currentBuilder));
    }
  }
  return new ConstructorInjections(injections,fieldMappers.toArray(new FieldMapper[0]));
}","@SuppressWarnings(""String_Node_Str"") private ConstructorInjections constructorInjections(){
  final Map<Parameter,BiFunction<? super S,? super MappingContext<? super S>,?>> injections=new HashMap<Parameter,BiFunction<? super S,? super MappingContext<? super S>,?>>();
  final List<FieldMapper<S,T>> fieldMappers=new ArrayList<FieldMapper<S,T>>();
  propertyMappingsBuilder.forEachConstructorProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>>>(){
    @SuppressWarnings(""String_Node_Str"") @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>> propertyMapping){
      if (!isTargetForMapperFieldMapper(propertyMapping)) {
        PropertyMeta<T,?> pm=propertyMapping.getPropertyMeta();
        ConstructorPropertyMeta<T,?> cProp=(ConstructorPropertyMeta<T,?>)pm;
        Parameter parameter=cProp.getParameter();
        Getter<? super S,?> getter=fieldMapperFactory.getGetterFromSource(propertyMapping.getColumnKey(),pm.getPropertyType(),propertyMapping.getColumnDefinition(),pm.getPropertyClassMetaSupplier());
        if (NullGetter.isNull(getter)) {
          mapperConfig.mapperBuilderErrorHandler().accessorNotFound(""String_Node_Str"" + propertyMapping.getColumnKey() + ""String_Node_Str""+ propertyMapping.getPropertyMeta().getPropertyType()+ ""String_Node_Str""+ propertyMapping.getPropertyMeta().getPath()+ ""String_Node_Str""+ ErrorDoc.toUrl(""String_Node_Str""));
        }
 else {
          injections.put(parameter,new BiFunctionGetter<S,MappingContext<? super S>,Object>(getter));
        }
        if (!NullSetter.isNull(cProp.getSetter())) {
          fieldMappers.add(fieldMapperFactory.newFieldMapper(propertyMapping,mappingContextFactoryBuilder,mapperConfig.mapperBuilderErrorHandler()));
        }
      }
    }
  }
);
  for (  PropertyPerOwner e : getSubPropertyPerOwner()) {
    if (e.owner.isConstructorProperty()) {
      final List<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>>> properties=e.propertyMappings;
      final MappingContextFactoryBuilder currentBuilder=getMapperContextFactoryBuilder(e.owner,properties);
      final Mapper<S,?> mapper;
      if (properties.size() == 1 && JoinUtils.isArrayElement(properties.get(0).getPropertyMeta())) {
        mapper=getterPropertyMapper(e.owner,properties.get(0));
      }
 else {
        mapper=subPropertyMapper(e.owner,properties,currentBuilder);
      }
      ConstructorPropertyMeta<T,?> meta=(ConstructorPropertyMeta<T,?>)e.owner;
      injections.put(meta.getParameter(),newMapperGetterAdapter(mapper,currentBuilder));
      fieldMappers.add(newMapperFieldMapper(properties,meta,mapper,currentBuilder));
    }
  }
  return new ConstructorInjections(injections,fieldMappers.toArray(new FieldMapper[0]));
}",0.9887436456063908
165079,"@SuppressWarnings(""String_Node_Str"") private List<K> getSubKeys(List<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>>> properties){
  List<K> keys=new ArrayList<K>();
  for (  PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>> pm : properties) {
    if (pm.getPropertyMeta().isSubProperty()) {
      SubPropertyMeta<T,?,?> subPropertyMeta=(SubPropertyMeta<T,?,?>)pm.getPropertyMeta();
      if (!(subPropertyMeta.getSubProperty() instanceof ArrayElementPropertyMeta)) {
        if (pm.getColumnDefinition().isKey()) {
          if (pm.getColumnDefinition().keyAppliesTo().test(subPropertyMeta.getSubProperty())) {
            keys.add(pm.getColumnKey());
          }
        }
      }
    }
 else {
      if (pm.getColumnDefinition().isKey()) {
        if (pm.getColumnDefinition().keyAppliesTo().test(pm.getPropertyMeta())) {
          keys.add(pm.getColumnKey());
        }
      }
    }
  }
  return keys;
}","@SuppressWarnings(""String_Node_Str"") private List<K> getSubKeys(List<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>>> properties){
  List<K> keys=new ArrayList<K>();
  for (  PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>> pm : properties) {
    if (pm.getPropertyMeta().isSubProperty()) {
      SubPropertyMeta<T,?,?> subPropertyMeta=(SubPropertyMeta<T,?,?>)pm.getPropertyMeta();
      if (!(JoinUtils.isArrayElement(subPropertyMeta.getSubProperty()))) {
        if (pm.getColumnDefinition().isKey()) {
          if (pm.getColumnDefinition().keyAppliesTo().test(subPropertyMeta.getSubProperty())) {
            keys.add(pm.getColumnKey());
          }
        }
      }
    }
 else {
      if (pm.getColumnDefinition().isKey()) {
        if (pm.getColumnDefinition().keyAppliesTo().test(pm.getPropertyMeta())) {
          keys.add(pm.getColumnKey());
        }
      }
    }
  }
  return keys;
}",0.9660460021905805
165080,"@SuppressWarnings(""String_Node_Str"") private FieldMapper<S,T>[] fields(){
  final List<FieldMapper<S,T>> fields=new ArrayList<FieldMapper<S,T>>();
  propertyMappingsBuilder.forEachProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>>>(){
    @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>> t){
      if (t == null || isTargetForMapperFieldMapper(t))       return;
      PropertyMeta<T,?> meta=t.getPropertyMeta();
      if (meta == null || (meta instanceof SelfPropertyMeta))       return;
      if (!meta.isConstructorProperty() && !isTargetForMapperFieldMapper(t)) {
        fields.add(newFieldMapper(t));
      }
    }
  }
);
  for (  PropertyPerOwner e : getSubPropertyPerOwner()) {
    if (!e.owner.isConstructorProperty()) {
      final MappingContextFactoryBuilder currentBuilder=getMapperContextFactoryBuilder(e.owner,e.propertyMappings);
      final Mapper<S,?> mapper;
      if (e.propertyMappings.size() == 1 && e.propertyMappings.get(0).getPropertyMeta() instanceof ArrayElementPropertyMeta) {
        mapper=getterPropertyMapper(e.owner,e.propertyMappings.get(0));
      }
 else {
        mapper=subPropertyMapper(e.owner,e.propertyMappings,currentBuilder);
      }
      fields.add(newMapperFieldMapper(e.propertyMappings,e.owner,mapper,currentBuilder));
    }
  }
  for (  FieldMapper<S,T> mapper : additionalMappers) {
    fields.add(mapper);
  }
  return fields.toArray(new FieldMapper[0]);
}","@SuppressWarnings(""String_Node_Str"") private FieldMapper<S,T>[] fields(){
  final List<FieldMapper<S,T>> fields=new ArrayList<FieldMapper<S,T>>();
  propertyMappingsBuilder.forEachProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>>>(){
    @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K>> t){
      if (t == null || isTargetForMapperFieldMapper(t))       return;
      PropertyMeta<T,?> meta=t.getPropertyMeta();
      if (meta == null || (meta instanceof SelfPropertyMeta))       return;
      if (!meta.isConstructorProperty() && !isTargetForMapperFieldMapper(t)) {
        fields.add(newFieldMapper(t));
      }
    }
  }
);
  for (  PropertyPerOwner e : getSubPropertyPerOwner()) {
    if (!e.owner.isConstructorProperty()) {
      final MappingContextFactoryBuilder currentBuilder=getMapperContextFactoryBuilder(e.owner,e.propertyMappings);
      final Mapper<S,?> mapper;
      if (e.propertyMappings.size() == 1 && JoinUtils.isArrayElement(e.propertyMappings.get(0).getPropertyMeta())) {
        mapper=getterPropertyMapper(e.owner,e.propertyMappings.get(0));
      }
 else {
        mapper=subPropertyMapper(e.owner,e.propertyMappings,currentBuilder);
      }
      fields.add(newMapperFieldMapper(e.propertyMappings,e.owner,mapper,currentBuilder));
    }
  }
  for (  FieldMapper<S,T> mapper : additionalMappers) {
    fields.add(mapper);
  }
  return fields.toArray(new FieldMapper[0]);
}",0.9789687924016284
165081,"public KeyDefinition(K[] keys,KeySourceGetter<K,S> keySourceGetter,KeyDefinition<S,K>[] children,int index){
  this.singleKey=getSingleKey(keys);
  if (singleKey == null) {
    this.keys=keys;
  }
 else {
    this.keys=null;
  }
  this.keySourceGetter=keySourceGetter;
  this.empty=keys == null || keys.length == 0;
  this.index=index;
  this.children=children;
}","public KeyDefinition(K[] keys,KeySourceGetter<K,S> keySourceGetter,KeyDefinition<S,K>[] children,int index,boolean root){
  this.singleKey=getSingleKey(keys);
  this.root=root;
  if (singleKey == null) {
    this.keys=keys;
  }
 else {
    this.keys=null;
  }
  this.keySourceGetter=keySourceGetter;
  this.empty=keys == null || keys.length == 0;
  this.index=index;
  this.children=children;
}",0.9590488771466316
165082,"private KeyDefinitionBuilder<S,K> populateKey(KeyDefinitionBuilder<S,K>[] keyDefinitions,ArrayList<MappingContextFactoryBuilder<S,K>> builders,MappingContextFactoryBuilder<S,K> builder,int rootDetector){
  if (keyDefinitions[builder.currentIndex] != null) {
    return keyDefinitions[builder.currentIndex];
  }
  int parentIndex=builder.getParentNonEmptyIndex();
  if (parentIndex == -1 && rootDetector != builder.currentIndex()) {
    parentIndex=rootDetector;
  }
  KeyDefinitionBuilder<S,K> parent=null;
  if (parentIndex != -1) {
    parent=keyDefinitions[parentIndex];
    if (parent == null) {
      for (int i=0; i < builders.size(); i++) {
        MappingContextFactoryBuilder<S,K> potentialParent=builders.get(i);
        if (potentialParent.currentIndex == parentIndex) {
          parent=populateKey(keyDefinitions,builders,potentialParent,rootDetector);
          break;
        }
      }
      if (parent == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + builder);
      }
    }
  }
  KeyDefinitionBuilder<S,K> keyDefinition;
  if (builder.keys.isEmpty() && parent != null && !builder.newObjectOnEachRow()) {
    keyDefinition=parent.asChild(builder.currentIndex);
  }
 else {
    keyDefinition=new KeyDefinitionBuilder<S,K>(builder.keys,builder.keySourceGetter,parent,builder.currentIndex);
  }
  keyDefinitions[builder.currentIndex]=keyDefinition;
  return keyDefinition;
}","private KeyDefinitionBuilder<S,K> populateKey(KeyDefinitionBuilder<S,K>[] keyDefinitions,ArrayList<MappingContextFactoryBuilder<S,K>> builders,MappingContextFactoryBuilder<S,K> builder,int rootDetector){
  if (keyDefinitions[builder.currentIndex] != null) {
    return keyDefinitions[builder.currentIndex];
  }
  int parentIndex=builder.getParentNonEmptyIndex();
  if (parentIndex == -1 && rootDetector != builder.currentIndex()) {
    parentIndex=rootDetector;
  }
  KeyDefinitionBuilder<S,K> parent=null;
  if (parentIndex != -1) {
    parent=keyDefinitions[parentIndex];
    if (parent == null) {
      for (int i=0; i < builders.size(); i++) {
        MappingContextFactoryBuilder<S,K> potentialParent=builders.get(i);
        if (potentialParent.currentIndex == parentIndex) {
          parent=populateKey(keyDefinitions,builders,potentialParent,rootDetector);
          break;
        }
      }
      if (parent == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + builder);
      }
    }
  }
  KeyDefinitionBuilder<S,K> keyDefinition;
  if (builder.keys.isEmpty() && parent != null && !builder.newObjectOnEachRow()) {
    keyDefinition=parent.asChild(builder.currentIndex);
  }
 else {
    List<K> keys=new ArrayList<K>(builder.keys);
    if (parent != null && !builder.keys.isEmpty() && !parent.isRoot()) {
      keys.addAll(parent.getKeys());
    }
    keyDefinition=new KeyDefinitionBuilder<S,K>(keys,builder.keySourceGetter,parent,builder.currentIndex,builder.currentIndex == rootDetector);
  }
  keyDefinitions[builder.currentIndex]=keyDefinition;
  return keyDefinition;
}",0.9304174950298212
165083,"public boolean broke(S source) throws MappingException {
  if (definition == null) {
    return true;
  }
  boolean b=false;
  Key oldKey=currentKey;
  currentKey=definition.getValues(source);
  if (oldKey == null) {
    b=true;
  }
 else   if (!oldKey.equals(currentKey)) {
    b=true;
    markChildrenHasBroken();
  }
  callBrokeOnChildren(source);
  return b;
}","public boolean broke(S source) throws MappingException {
  if (definition == null) {
    return true;
  }
  boolean b=false;
  Key oldKey=currentKey;
  currentKey=definition.getValues(source);
  if (oldKey == null) {
    b=true;
  }
 else   if (!oldKey.equals(currentKey)) {
    b=true;
    markChildrenHasBroken(root);
  }
  callBrokeOnChildren(source);
  return b;
}",0.994535519125683
165084,"public BreakDetector(KeyDefinition<S,?> definition,BreakDetector<S>[] siblings){
  this.definition=emptyToNull(definition);
  this.siblings=siblings;
  if (this.definition == null) {
    cache=null;
  }
 else {
    cache=new HashMap<Key,Object>();
  }
}","public BreakDetector(KeyDefinition<S,?> definition,BreakDetector<S>[] siblings){
  this.definition=emptyToNull(definition);
  this.siblings=siblings;
  this.root=definition.isRoot();
  if (this.definition == null) {
    cache=null;
  }
 else {
    cache=new HashMap<Key,Object>();
  }
}",0.9387755102040816
165085,"public void markAsBroken(){
  if (definition != null) {
    currentKey=null;
    cache.clear();
    markChildrenHasBroken();
  }
}","public void markAsBroken(boolean root){
  if (definition != null) {
    currentKey=null;
    if (root) {
      cache.clear();
    }
    markChildrenHasBroken(root);
  }
}",0.8666666666666667
165086,"private void markChildrenHasBroken(){
  KeyDefinition<S,?>[] children=definition.getChildren();
  if (children == null)   return;
  for (  KeyDefinition<S,?> keyDefinition : children) {
    siblings[keyDefinition.getIndex()].markAsBroken();
  }
}","private void markChildrenHasBroken(boolean root){
  KeyDefinition<S,?>[] children=definition.getChildren();
  if (children == null)   return;
  for (  KeyDefinition<S,?> keyDefinition : children) {
    siblings[keyDefinition.getIndex()].markAsBroken(root);
  }
}",0.968503937007874
165087,"@Override public void markAsBroken(){
  rootDetector.markAsBroken();
}","@Override public void markAsBroken(){
  rootDetector.markAsBroken(true);
}",0.9722222222222222
165088,"public KeyDefinitionBuilder(List<K> keys,KeySourceGetter<K,S> keySourceGetter,KeyDefinitionBuilder<S,K> parent,int index){
  this.keys=keys;
  this.keySourceGetter=keySourceGetter;
  if (parent != null)   parent.addChild(this);
  this.index=index;
}","public KeyDefinitionBuilder(List<K> keys,KeySourceGetter<K,S> keySourceGetter,KeyDefinitionBuilder<S,K> parent,int index,boolean root){
  this.keys=keys;
  this.keySourceGetter=keySourceGetter;
  this.root=root;
  if (parent != null)   parent.addChild(this);
  this.index=index;
}",0.941398865784499
165089,"public KeyDefinitionBuilder<S,K> asChild(int currentIndex){
  return new KeyDefinitionBuilder<S,K>(keys,keySourceGetter,this,currentIndex);
}","public KeyDefinitionBuilder<S,K> asChild(int currentIndex){
  return new KeyDefinitionBuilder<S,K>(keys,keySourceGetter,this,currentIndex,false);
}",0.9791666666666666
165090,"private static <S,K>KeyDefinition<S,K> defineBuilder(KeyDefinitionBuilder<S,K> builder,KeyDefinition<S,K>[] keyDefinitions){
  if (keyDefinitions[builder.index] != null) {
    return keyDefinitions[builder.index];
  }
  List<KeyDefinition<S,K>> children=new ArrayList<KeyDefinition<S,K>>();
  for (  KeyDefinitionBuilder<S,K> child : builder.children) {
    children.add(defineBuilder(child,keyDefinitions));
  }
  KeyDefinition[] keyChildren=null;
  if (!children.isEmpty())   keyChildren=children.toArray(new KeyDefinition[0]);
  KeyDefinition<S,K> keyDefinition=new KeyDefinition<S,K>(toK(builder.keys),builder.keySourceGetter,keyChildren,builder.index);
  keyDefinitions[builder.index]=keyDefinition;
  return keyDefinition;
}","private static <S,K>KeyDefinition<S,K> defineBuilder(KeyDefinitionBuilder<S,K> builder,KeyDefinition<S,K>[] keyDefinitions){
  if (keyDefinitions[builder.index] != null) {
    return keyDefinitions[builder.index];
  }
  List<KeyDefinition<S,K>> children=new ArrayList<KeyDefinition<S,K>>();
  for (  KeyDefinitionBuilder<S,K> child : builder.children) {
    children.add(defineBuilder(child,keyDefinitions));
  }
  KeyDefinition[] keyChildren=null;
  if (!children.isEmpty())   keyChildren=children.toArray(new KeyDefinition[0]);
  KeyDefinition<S,K> keyDefinition=new KeyDefinition<S,K>(toK(builder.keys),builder.keySourceGetter,keyChildren,builder.index,builder.root);
  keyDefinitions[builder.index]=keyDefinition;
  return keyDefinition;
}",0.991174473862865
165091,"@Override public int hashCode(){
  return Arrays.deepHashCode(values);
}","@Override public int hashCode(){
  return _hashCode;
}",0.8253968253968254
165092,"public MultiValueKey(Object[] values){
  this.values=values;
}","public MultiValueKey(Object[] values){
  this.values=values;
  this._hashCode=Arrays.deepHashCode(values);
}",0.7294117647058823
165093,"public SingleValueKey(Object values){
  this.values=values;
  if (true)   return;
  throw new IllegalArgumentException(""String_Node_Str"");
}","public SingleValueKey(Object value){
  this.value=value;
  this._hashCode=_hashCode(value);
  if (true)   return;
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.8846153846153846
165094,"@Override public int hashCode(){
  int valueHash=0;
  if (values instanceof Object[])   valueHash=Arrays.deepHashCode((Object[])values);
 else   if (values instanceof byte[])   valueHash=Arrays.hashCode((byte[])values);
 else   if (values instanceof short[])   valueHash=Arrays.hashCode((short[])values);
 else   if (values instanceof int[])   valueHash=Arrays.hashCode((int[])values);
 else   if (values instanceof long[])   valueHash=Arrays.hashCode((long[])values);
 else   if (values instanceof char[])   valueHash=Arrays.hashCode((char[])values);
 else   if (values instanceof float[])   valueHash=Arrays.hashCode((float[])values);
 else   if (values instanceof double[])   valueHash=Arrays.hashCode((double[])values);
 else   if (values instanceof boolean[])   valueHash=Arrays.hashCode((boolean[])values);
 else   if (values != null)   valueHash=values.hashCode();
  return valueHash;
}","@Override public int hashCode(){
  return _hashCode;
}",0.1013727560718057
165095,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  SingleValueKey keys=(SingleValueKey)o;
  if (true) {
    return Objects.deepEquals(values,keys.values);
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  SingleValueKey keys=(SingleValueKey)o;
  if (true) {
    return Objects.deepEquals(value,keys.value);
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.99672131147541
165096,"@Test public void testBreakDetector() throws Exception {
  KeySourceGetter<SampleFieldKey,Object> keySourceGetter=mock(KeySourceGetter.class);
  Object object=new Object();
  SampleFieldKey key=new SampleFieldKey(""String_Node_Str"",1);
  when(keySourceGetter.getValue(key,object)).thenReturn(new byte[]{1,2},new byte[]{1,2},new byte[]{1,3});
  KeyDefinition<Object,SampleFieldKey> keyDefinition=new KeyDefinition<Object,SampleFieldKey>(new SampleFieldKey[]{key},keySourceGetter,null,0);
  BreakDetector<Object> breakDetector=new BreakDetector<Object>(keyDefinition,new BreakDetector[0]);
  assertTrue(breakDetector.broke(object));
  assertFalse(breakDetector.broke(object));
  assertTrue(breakDetector.broke(object));
}","@Test public void testBreakDetector() throws Exception {
  KeySourceGetter<SampleFieldKey,Object> keySourceGetter=mock(KeySourceGetter.class);
  Object object=new Object();
  SampleFieldKey key=new SampleFieldKey(""String_Node_Str"",1);
  when(keySourceGetter.getValue(key,object)).thenReturn(new byte[]{1,2},new byte[]{1,2},new byte[]{1,3});
  KeyDefinition<Object,SampleFieldKey> keyDefinition=new KeyDefinition<Object,SampleFieldKey>(new SampleFieldKey[]{key},keySourceGetter,null,0,true);
  BreakDetector<Object> breakDetector=new BreakDetector<Object>(keyDefinition,new BreakDetector[0]);
  assertTrue(breakDetector.broke(object));
  assertFalse(breakDetector.broke(object));
  assertTrue(breakDetector.broke(object));
}",0.996530187369882
165097,"@Test public void testMultiJoinSameIdDiffContent(){
  ClassMeta<Root> classMeta=ReflectionService.newInstance().getClassMeta(Root.class);
  AbstractMapperBuilderTest.SampleMapperBuilder<Root> builder=new AbstractMapperBuilderTest.SampleMapperBuilder<Root>(classMeta,mapperConfig());
  Mapper<Object[],Root> rowMapper=builder.addKey(""String_Node_Str"").addKey(""String_Node_Str"").addKey(""String_Node_Str"").addMapping(""String_Node_Str"").mapper();
  JoinMapper<Object[],Object[][],Root,RuntimeException> mapper=(JoinMapper<Object[],Object[][],Root,RuntimeException>)rowMapper;
  List<Root> list=mapper.forEach(data_diffvalue,new ListCollector<Root>()).getList();
  assertEquals(1,list.size());
  Root root=list.get(0);
  assertEquals(1,root.id);
  assertEquals(2,root.ll.size());
  assertEquals(1,root.ll.get(0).id);
  assertEquals(2,root.ll.get(1).id);
  assertEquals(1,root.ll.get(0).elements.size());
  assertEquals(1,root.ll.get(0).elements.get(0).id);
  assertEquals(""String_Node_Str"",root.ll.get(0).elements.get(0).value);
  assertEquals(1,root.ll.get(1).elements.size());
  assertEquals(1,root.ll.get(1).elements.get(0).id);
  assertEquals(""String_Node_Str"",root.ll.get(1).elements.get(0).value);
}","@Test public void testMultiJoinSameIdDiffContent(){
  ClassMeta<Root> classMeta=ReflectionService.newInstance().getClassMeta(Root.class);
  AbstractMapperBuilderTest.SampleMapperBuilder<Root> builder=new AbstractMapperBuilderTest.SampleMapperBuilder<Root>(classMeta,mapperConfig());
  Mapper<Object[],Root> rowMapper=builder.addKey(""String_Node_Str"").addKey(""String_Node_Str"").addKey(""String_Node_Str"").addMapping(""String_Node_Str"").mapper();
  JoinMapper<Object[],Object[][],Root,RuntimeException> mapper=(JoinMapper<Object[],Object[][],Root,RuntimeException>)rowMapper;
  List<Root> list=mapper.forEach(data_diffvalue,new ListCollector<Root>()).getList();
  assertEquals(1,list.size());
  Root root=list.get(0);
  assertEquals(1,root.id);
  assertEquals(2,root.ll.size());
  assertEquals(1,root.ll.get(0).id);
  assertEquals(2,root.ll.get(1).id);
  assertEquals(2,root.ll.get(0).elements.size());
  assertEquals(1,root.ll.get(0).elements.get(0).id);
  assertEquals(""String_Node_Str"",root.ll.get(0).elements.get(0).value);
  assertEquals(2,root.ll.get(0).elements.get(1).id);
  assertEquals(""String_Node_Str"",root.ll.get(0).elements.get(1).value);
  assertEquals(1,root.ll.get(1).elements.size());
  assertEquals(1,root.ll.get(1).elements.get(0).id);
  assertEquals(""String_Node_Str"",root.ll.get(1).elements.get(0).value);
}",0.7572277227722772
165098,"private <T,P>Getter<? super S,? extends P> getterFromFactory(PropertyMapping<T,P,K,FieldMapperColumnDefinition<K>> propertyMapping,Type propertyType){
  Getter<? super S,? extends P> getter=null;
  if (propertyMapping.getColumnDefinition().hasCustomFactory()) {
    GetterFactory<? super S,K> cGetterFactory=(GetterFactory<? super S,K>)propertyMapping.getColumnDefinition().getCustomGetterFactory();
    getter=cGetterFactory.newGetter(propertyType,propertyMapping.getColumnKey(),propertyMapping.getColumnDefinition());
  }
  if (getter == null) {
    getter=getterFactory.newGetter(propertyType,propertyMapping.getColumnKey(),propertyMapping.getColumnDefinition());
  }
  if (getter == null) {
    final ClassMeta<P> classMeta=propertyMapping.getPropertyMeta().getPropertyClassMeta();
    InstantiatorDefinitions.CompatibilityScorer scorer=InstantiatorDefinitions.getCompatibilityScorer(propertyMapping.getColumnKey());
    InstantiatorDefinition id=InstantiatorDefinitions.lookForCompatibleOneArgument(classMeta.getInstantiatorDefinitions(),scorer);
    if (id != null) {
      final Type sourceType=id.getParameters()[0].getGenericType();
      getter=getterFromFactory(propertyMapping,sourceType);
      if (getter != null) {
        Instantiator instantiator=classMeta.getReflectionService().getInstantiatorFactory().getOneArgIdentityInstantiator(id);
        getter=new InstantiatorOnGetter(instantiator,getter);
      }
    }
  }
  return getter;
}","private <T,P>Getter<? super S,? extends P> getterFromFactory(PropertyMapping<T,P,K,FieldMapperColumnDefinition<K>> propertyMapping,Type propertyType){
  Getter<? super S,? extends P> getter=null;
  if (propertyMapping.getColumnDefinition().hasCustomFactory()) {
    GetterFactory<? super S,K> cGetterFactory=(GetterFactory<? super S,K>)propertyMapping.getColumnDefinition().getCustomGetterFactory();
    getter=cGetterFactory.newGetter(propertyType,propertyMapping.getColumnKey(),propertyMapping.getColumnDefinition());
  }
  if (getter == null) {
    getter=getterFactory.newGetter(propertyType,propertyMapping.getColumnKey(),propertyMapping.getColumnDefinition());
  }
  if (getter == null) {
    final ClassMeta<P> classMeta=propertyMapping.getPropertyMeta().getPropertyClassMeta();
    InstantiatorDefinitions.CompatibilityScorer scorer=InstantiatorDefinitions.getCompatibilityScorer(propertyMapping.getColumnKey());
    InstantiatorDefinition id=InstantiatorDefinitions.lookForCompatibleOneArgument(classMeta.getInstantiatorDefinitions(),scorer);
    if (id != null) {
      final Type sourceType=id.getParameters()[0].getGenericType();
      getter=getterFactory.newGetter(sourceType,propertyMapping.getColumnKey(),propertyMapping.getColumnDefinition());
      if (getter != null) {
        Instantiator instantiator=classMeta.getReflectionService().getInstantiatorFactory().getOneArgIdentityInstantiator(id);
        getter=new InstantiatorOnGetter(instantiator,getter);
      }
    }
  }
  return getter;
}",0.961940047153924
165099,"@Override public void insert(Connection connection,Collection<T> values,RowHandler<PreparedStatement> postExecute) throws SQLException {
  int lBatchSize=Math.min(batchSize.get(),values.size());
  try {
    if (values.size() <= lBatchSize) {
      delegate.insert(connection,values,postExecute);
    }
 else {
      splitBatches(connection,values,lBatchSize,postExecute);
    }
  }
 catch (  PacketTooBigException e) {
    if (lBatchSize <= 2) {
      throw e;
    }
    resize(lBatchSize);
    insert(connection,values,postExecute);
  }
}","@Override public void insert(Connection connection,Collection<T> values,RowHandler<PreparedStatement> postExecute) throws SQLException {
  int lBatchSize=Math.min(batchSize.get(),values.size());
  try {
    if (values.size() <= lBatchSize) {
      delegate.insert(connection,values,postExecute);
    }
 else {
      splitBatches(connection,values,lBatchSize,postExecute);
    }
  }
 catch (  PacketTooBigException e) {
    if (lBatchSize <= 2) {
      throw e;
    }
    resize(lBatchSize / 2);
    insert(connection,values,postExecute);
  }
}",0.9963031423290204
165100,"@Test public void testStaticMapperDbObjectToStringNoAsm() throws Exception {
  CsvMapperBuilder<DbObject> builder=csvMapperFactoryNoAsm.newBuilder(DbObject.class);
  addDbObjectFields(builder);
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",builder.mapper().toString());
}","@Test public void testStaticMapperDbObjectToStringNoAsm() throws Exception {
  CsvMapperBuilder<DbObject> builder=csvMapperFactoryNoAsm.newBuilder(DbObject.class);
  addDbObjectFields(builder);
  assertTrue(builder.mapper().toString().startsWith(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}",0.585427135678392
165101,"public static void addDbObjectFields(CsvMapperBuilder<?> builder){
  builder.addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"",CsvColumnDefinition.timeZoneDefinition(TimeZone.getTimeZone(""String_Node_Str""))).addMapping(""String_Node_Str"").addMapping(""String_Node_Str"");
}","public static void addDbObjectFields(CsvMapperBuilder<?> builder){
  builder.addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"");
}",0.8662207357859532
165102,"@Test public void testStaticMapperDbFinalObjectToString() throws Exception {
  CsvMapperBuilder<DbFinalObject> builder=csvMapperFactory.useAsm(false).newBuilder(DbFinalObject.class);
  addDbObjectFields(builder);
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",builder.mapper().toString());
}","@Test public void testStaticMapperDbFinalObjectToString() throws Exception {
  CsvMapperBuilder<DbFinalObject> builder=csvMapperFactory.useAsm(false).newBuilder(DbFinalObject.class);
  addDbObjectFields(builder);
  assertTrue(builder.mapper().toString().startsWith(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}",0.4428822495606327
165103,"public static void addDbObjectFields(CsvMapperBuilder<?> builder){
  builder.addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"",CsvColumnDefinition.timeZoneDefinition(TimeZone.getTimeZone(""String_Node_Str""))).addMapping(""String_Node_Str"").addMapping(""String_Node_Str"");
}","public static void addDbObjectFields(CsvMapperBuilder<?> builder){
  builder.addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"").addMapping(""String_Node_Str"");
}",0.8662207357859532
165104,"public static DateTimeFormatter getDateTimeFormatter(ColumnDefinition<?,?> columnDefinition){
  DateTimeFormatter dtf;
  if (columnDefinition.has(JodaDateTimeFormatterProperty.class)) {
    dtf=columnDefinition.lookFor(JodaDateTimeFormatterProperty.class).getFormatter();
  }
 else   if (columnDefinition.has(DateFormatProperty.class)) {
    dtf=DateTimeFormat.forPattern(columnDefinition.lookFor(DateFormatProperty.class).getPattern());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (columnDefinition.has(JodaDateTimeZoneProperty.class)) {
    dtf=dtf.withZone(columnDefinition.lookFor(JodaDateTimeZoneProperty.class).getZone());
  }
 else   if (columnDefinition.has(TimeZoneProperty.class)) {
    dtf=dtf.withZone(DateTimeZone.forTimeZone(columnDefinition.lookFor(TimeZoneProperty.class).getTimeZone()));
  }
 else {
    dtf=dtf.withZone(DateTimeZone.getDefault());
  }
  return dtf;
}","public static DateTimeFormatter getDateTimeFormatter(ColumnDefinition<?,?> columnDefinition){
  DateTimeFormatter dtf;
  if (columnDefinition.has(JodaDateTimeFormatterProperty.class)) {
    dtf=columnDefinition.lookFor(JodaDateTimeFormatterProperty.class).getFormatter();
  }
 else   if (columnDefinition.has(DateFormatProperty.class)) {
    dtf=DateTimeFormat.forPattern(columnDefinition.lookFor(DateFormatProperty.class).getPattern());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final DateTimeZone dateTimeZone=getDateTimeZone(columnDefinition);
  if (dateTimeZone != null) {
    dtf=dtf.withZone(dateTimeZone);
  }
 else   if (dtf.getZone() == null) {
    dtf=dtf.withZone(DateTimeZone.getDefault());
  }
  return dtf;
}",0.6603098927294399
165105,"public static DateTimeFormatter getDateTimeFormatter(ColumnDefinition<?,?> columnDefinition){
  DateTimeFormatter dtf;
  if (columnDefinition.has(JodaDateTimeFormatterProperty.class)) {
    dtf=columnDefinition.lookFor(JavaDateTimeFormatterProperty.class).getFormatter();
  }
 else   if (columnDefinition.has(DateFormatProperty.class)) {
    dtf=DateTimeFormatter.ofPattern(columnDefinition.lookFor(DateFormatProperty.class).getPattern());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  dtf=dtf.withZone(getZoneId(columnDefinition));
  return dtf;
}","public static DateTimeFormatter getDateTimeFormatter(ColumnDefinition<?,?> columnDefinition){
  DateTimeFormatter dtf;
  if (columnDefinition.has(JavaDateTimeFormatterProperty.class)) {
    dtf=columnDefinition.lookFor(JavaDateTimeFormatterProperty.class).getFormatter();
  }
 else   if (columnDefinition.has(DateFormatProperty.class)) {
    dtf=DateTimeFormatter.ofPattern(columnDefinition.lookFor(DateFormatProperty.class).getPattern());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final ZoneId zoneId=_getZoneId(columnDefinition);
  if (zoneId != null) {
    dtf=dtf.withZone(zoneId);
  }
 else   if (dtf.getZone() == null) {
    dtf=dtf.withZone(ZoneId.systemDefault());
  }
  return dtf;
}",0.8575803981623277
165106,"@Test public void testFormatterFromFormatterWithSpecifiedTZ(){
  final DateTimeFormatter yyyyMMdd=JodaHelper.getDateTimeFormatter(CsvColumnDefinition.IDENTITY.add(new JodaDateTimeFormatterProperty(DateTimeFormat.forPattern(""String_Node_Str"").withZone(DateTimeZone.forID(""String_Node_Str"")))).addTimeZone(TimeZone.getTimeZone(""String_Node_Str"")));
  final long instant=System.currentTimeMillis();
  assertEquals(DateTimeFormat.forPattern(""String_Node_Str"").print(instant),yyyyMMdd.print(instant));
  assertEquals(DateTimeZone.forID(""String_Node_Str""),yyyyMMdd.getZone());
}","@Test public void testFormatterFromFormatterWithSpecifiedTZ(){
  final DateTimeFormatter yyyyMMdd=JodaHelper.getDateTimeFormatter(CsvColumnDefinition.IDENTITY.add(new JodaDateTimeFormatterProperty(DateTimeFormat.forPattern(""String_Node_Str"").withZone(CHICAGO_TZ))).addTimeZone(TimeZone.getTimeZone(""String_Node_Str"")));
  final long instant=System.currentTimeMillis();
  assertEquals(DateTimeFormat.forPattern(""String_Node_Str"").withZone(NY_TZ).print(instant),yyyyMMdd.print(instant));
  assertEquals(NY_TZ,yyyyMMdd.getZone());
}",0.9082652134423252
165107,"@Test public void testFormatterFromFormatterWithOwnTZ(){
  final DateTimeFormatter yyyyMMdd=JodaHelper.getDateTimeFormatter(CsvColumnDefinition.IDENTITY.add(new JodaDateTimeFormatterProperty(DateTimeFormat.forPattern(""String_Node_Str"").withZone(DateTimeZone.forID(""String_Node_Str"")))));
  final long instant=System.currentTimeMillis();
  assertEquals(DateTimeFormat.forPattern(""String_Node_Str"").print(instant),yyyyMMdd.print(instant));
  assertEquals(DateTimeZone.forID(""String_Node_Str""),yyyyMMdd.getZone());
}","@Test public void testFormatterFromFormatterWithOwnTZ(){
  final DateTimeFormatter yyyyMMdd=JodaHelper.getDateTimeFormatter(CsvColumnDefinition.IDENTITY.add(new JodaDateTimeFormatterProperty(DateTimeFormat.forPattern(""String_Node_Str"").withZone(CHICAGO_TZ))));
  final long instant=System.currentTimeMillis();
  assertEquals(DateTimeFormat.forPattern(""String_Node_Str"").withZone(CHICAGO_TZ).print(instant),yyyyMMdd.print(instant));
  assertEquals(CHICAGO_TZ,yyyyMMdd.getZone());
}",0.8882175226586103
165108,"@Test public void testGetDateTimeZoneFromDateTimeZone(){
  assertEquals(DateTimeZone.forID(""String_Node_Str""),JodaHelper.getDateTimeZone(CsvColumnDefinition.IDENTITY.add(new JodaDateTimeZoneProperty(DateTimeZone.forID(""String_Node_Str"")))));
}","@Test public void testGetDateTimeZoneFromDateTimeZone(){
  assertEquals(CHICAGO_TZ,JodaHelper.getDateTimeZone(CsvColumnDefinition.IDENTITY.add(new JodaDateTimeZoneProperty(CHICAGO_TZ))));
}",0.8009259259259259
165109,"@Test public void testGetDateTimeZoneFromTimeZone(){
  assertEquals(DateTimeZone.forID(""String_Node_Str""),JodaHelper.getDateTimeZone(CsvColumnDefinition.IDENTITY.addTimeZone(TimeZone.getTimeZone(""String_Node_Str""))));
}","@Test public void testGetDateTimeZoneFromTimeZone(){
  assertEquals(CHICAGO_TZ,JodaHelper.getDateTimeZone(CsvColumnDefinition.IDENTITY.addTimeZone(TimeZone.getTimeZone(""String_Node_Str""))));
}",0.8953771289537713
165110,"public TupleClassMeta(Type type,ReflectionService reflectionService){
  this.type=type;
  this.reflectionService=reflectionService;
  try {
    this.constructorDefinitions=getConstructorDefinitions(type,reflectionService);
    if (constructorDefinitions.size() != 1) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new MapperBuildingException(e.getMessage(),e);
  }
}","public TupleClassMeta(Type type,ReflectionService reflectionService){
  this.type=type;
  this.reflectionService=reflectionService;
  try {
    this.constructorDefinition=getConstructorDefinition(type,reflectionService);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new MapperBuildingException(e.getMessage(),e);
  }
}",0.8239795918367347
165111,"public int getTupleSize(){
  return constructorDefinitions.get(0).getParameters().length;
}","public int getTupleSize(){
  return constructorDefinition.getParameters().length;
}",0.9540229885057472
165112,"public List<ConstructorDefinition<T>> getConstructorDefinitions(){
  return constructorDefinitions;
}","public List<ConstructorDefinition<T>> getConstructorDefinitions(){
  return Arrays.asList(constructorDefinition);
}",0.925925925925926
165113,"@Override public String[] generateHeaders(){
  List<String> strings=new ArrayList<String>();
  int i=0;
  for (  ConstructorParameter cp : constructorDefinitions.get(0).getParameters()) {
    String prefix=""String_Node_Str"" + i;
    ClassMeta<?> classMeta=reflectionService.getClassMeta(cp.getResolvedType(),false);
    if (classMeta != null) {
      for (      String prop : classMeta.generateHeaders()) {
        strings.add(prefix + ""String_Node_Str"" + prop);
      }
    }
 else {
      strings.add(prefix);
    }
    i++;
  }
  return strings.toArray(EMPTY_STRING_ARRAY);
}","@Override public String[] generateHeaders(){
  List<String> strings=new ArrayList<String>();
  ElementNameGenerator nameGenerator=new SFMTupleNameGenerator();
  int i=0;
  for (  ConstructorParameter cp : constructorDefinition.getParameters()) {
    String prefix=nameGenerator.name(i);
    ClassMeta<?> classMeta=reflectionService.getClassMeta(cp.getResolvedType(),false);
    if (classMeta != null) {
      for (      String prop : classMeta.generateHeaders()) {
        strings.add(prefix + ""String_Node_Str"" + prop);
      }
    }
 else {
      strings.add(prefix);
    }
    i++;
  }
  return strings.toArray(EMPTY_STRING_ARRAY);
}",0.9044481054365732
165114,"private static boolean isJoolTuple(Class<?> clazz){
  while (clazz != null) {
    for (    Class<?> i : clazz.getInterfaces()) {
      if (""String_Node_Str"".equals(i.getName())) {
        return true;
      }
    }
    clazz=clazz.getSuperclass();
  }
  return false;
}","public static boolean isJoolTuple(Class<?> clazz){
  while (clazz != null) {
    for (    Class<?> i : clazz.getInterfaces()) {
      if (""String_Node_Str"".equals(i.getName())) {
        return true;
      }
    }
    clazz=clazz.getSuperclass();
  }
  return false;
}",0.9795158286778398
165115,"private Object[] getKeys(DelayedCellSetter<?,?>[] delayedCellSetters){
  Object[] currentKeys=new Object[keys.length];
  for (int i=0; i < keys.length; i++) {
    currentKeys[i]=delayedCellSetters[keys[i].getIndex()].getValue();
  }
  return currentKeys;
}","private Object[] getKeys(DelayedCellSetter<?,?>[] delayedCellSetters){
  Object[] currentKeys=new Object[keys.length];
  for (int i=0; i < keys.length; i++) {
    currentKeys[i]=delayedCellSetters[keys[i].getIndex()].peekValue();
  }
  return currentKeys;
}",0.98635477582846
165116,"@Override public boolean isBroken(DelayedCellSetter<?,?>[] delayedCellSetters){
  if (!brokenCheck) {
    updateStatus(delayedCellSetters);
  }
  return broken;
}","@Override public boolean isBroken(DelayedCellSetter<?,?>[] delayedCellSetters){
  if (!brokenCheck) {
    updateStatus(delayedCellSetters);
    return broken;
  }
  return false;
}",0.935672514619883
165117,"private void flush(){
  if (hasData) {
    createInstanceIfNeeded();
    this.cellIndex=-1;
    hasData=false;
  }
}","private void flush(){
  if (hasData) {
    createInstanceIfNeeded();
    this.cellIndex=-1;
    hasData=false;
  }
  breakDetector.reset();
}",0.9027237354085604
165118,"@SuppressWarnings(""String_Node_Str"") @Override public T get(DelayedCellSetter<T,?>[] target) throws Exception {
  return (T)target[index].getValue();
}","@SuppressWarnings(""String_Node_Str"") @Override public T get(DelayedCellSetter<T,?>[] target) throws Exception {
  return (T)target[index].consumeValue();
}",0.9738562091503268
165119,"@Override public DelayedCellSetter<T,P> newCellSetter(){
  return new DelayedCellSetter<T,P>(){
    @Override public P getValue(){
      return value;
    }
    @Override public void set(    T t) throws Exception {
      marker.getSetter().set(t,value);
    }
    @Override public boolean isSettable(){
      return marker.getSetter() != null;
    }
    public void set(    char[] chars,    int offset,    int length,    ParsingContext parsingContext) throws Exception {
      handler.newCell(chars,offset,length,cellIndex);
    }
  }
;
}","@Override public DelayedCellSetter<T,P> newCellSetter(){
  return new DelayedCellSetter<T,P>(){
    @Override public P consumeValue(){
      return value;
    }
    @Override public P peekValue(){
      return value;
    }
    @Override public void set(    T t) throws Exception {
      marker.getSetter().set(t,value);
    }
    @Override public boolean isSettable(){
      return marker.getSetter() != null;
    }
    public void set(    char[] chars,    int offset,    int length,    ParsingContext parsingContext) throws Exception {
      handler.newCell(chars,offset,length,cellIndex);
    }
  }
;
}",0.936952714535902
165120,"public static double parseDouble(char[] chars,int offset,int length){
  return Double.parseDouble(StringCellValueReader.readString(chars,offset,length));
}","public static double parseDouble(char[] chars,int offset,int length){
  if (length == 0)   return Double.NaN;
  return Double.parseDouble(StringCellValueReader.readString(chars,offset,length));
}",0.8857142857142857
165121,"public static float parseFloat(char[] chars,int offset,int length){
  return Float.parseFloat(StringCellValueReader.readString(chars,offset,length));
}","public static float parseFloat(char[] chars,int offset,int length){
  if (length == 0)   return Float.NaN;
  return Float.parseFloat(StringCellValueReader.readString(chars,offset,length));
}",0.8856304985337243
165122,"@Override public void set(char[] chars,int offset,int length,ParsingContext parsingContext) throws Exception {
  this.value=reader.readBoolean(chars,offset,length,parsingContext);
}","@Override public void set(char[] chars,int offset,int length,ParsingContext parsingContext) throws Exception {
  isNull=length == 0;
  this.value=reader.readBoolean(chars,offset,length,parsingContext);
}",0.9427083333333334
165123,"@SuppressWarnings(""String_Node_Str"") @Override public boolean getBoolean(DelayedCellSetter<T,?>[] target) throws Exception {
  return ((BooleanDelayedCellSetter<T>)target[index]).getBoolean();
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean getBoolean(DelayedCellSetter<T,?>[] target) throws Exception {
  return ((BooleanDelayedCellSetter<T>)target[index]).consumeBoolean();
}",0.979591836734694
165124,"@Override public void set(char[] chars,int offset,int length,ParsingContext parsingContext) throws Exception {
  this.value=reader.readByte(chars,offset,length,parsingContext);
}","@Override public void set(char[] chars,int offset,int length,ParsingContext parsingContext) throws Exception {
  isNull=length == 0;
  this.value=reader.readByte(chars,offset,length,parsingContext);
}",0.9417989417989416
165125,"@SuppressWarnings(""String_Node_Str"") @Override public byte getByte(DelayedCellSetter<T,?>[] target) throws Exception {
  return ((ByteDelayedCellSetter<T>)target[index]).getByte();
}","@SuppressWarnings(""String_Node_Str"") @Override public byte getByte(DelayedCellSetter<T,?>[] target) throws Exception {
  return ((ByteDelayedCellSetter<T>)target[index]).consumeByte();
}",0.9782608695652174
165126,"@Override public void set(char[] chars,int offset,int length,ParsingContext parsingContext) throws Exception {
  this.value=reader.readChar(chars,offset,length,parsingContext);
}","@Override public void set(char[] chars,int offset,int length,ParsingContext parsingContext) throws Exception {
  isNull=length == 0;
  this.value=reader.readChar(chars,offset,length,parsingContext);
}",0.9417989417989416
165127,"@SuppressWarnings(""String_Node_Str"") @Override public char getCharacter(DelayedCellSetter<T,?>[] target) throws Exception {
  return ((CharDelayedCellSetter<T>)target[index]).getCharacter();
}","@SuppressWarnings(""String_Node_Str"") @Override public char getCharacter(DelayedCellSetter<T,?>[] target) throws Exception {
  return ((CharDelayedCellSetter<T>)target[index]).consumeCharacter();
}",0.979381443298969
165128,"@Override public void set(char[] chars,int offset,int length,ParsingContext parsingContext) throws Exception {
  this.value=reader.readDouble(chars,offset,length,parsingContext);
}","@Override public void set(char[] chars,int offset,int length,ParsingContext parsingContext) throws Exception {
  isNull=length == 0;
  this.value=reader.readDouble(chars,offset,length,parsingContext);
}",0.9424083769633508
165129,"@SuppressWarnings(""String_Node_Str"") @Override public double getDouble(DelayedCellSetter<T,?>[] target) throws Exception {
  return ((DoubleDelayedCellSetter<T>)target[index]).getDouble();
}","@SuppressWarnings(""String_Node_Str"") @Override public double getDouble(DelayedCellSetter<T,?>[] target) throws Exception {
  return ((DoubleDelayedCellSetter<T>)target[index]).consumeDouble();
}",0.9791666666666666
165130,"public void flush(int cellIndex){
  if (cellIndex > 0) {
    T instance=currentInstance;
    if (instance == null) {
      instance=createInstance();
      applyDelayedSetters(instance);
      callHandler(instance);
    }
 else {
      applyDelayedSetters(instance);
      callHandler(instance);
      currentInstance=null;
    }
    this.cellIndex=-1;
  }
}","public void flush(int cellIndex){
  if (cellIndex >= 0) {
    T instance=currentInstance;
    if (instance == null) {
      instance=createInstance();
      applyDelayedSetters(instance);
      callHandler(instance);
    }
 else {
      applyDelayedSetters(instance);
      callHandler(instance);
      currentInstance=null;
    }
    this.cellIndex=-1;
  }
}",0.99860529986053
165131,"@SuppressWarnings(""String_Node_Str"") private Tuple2<Map<ConstructorParameter,Getter<S,?>>,FieldMapper<S,T>[]> constructorInjections(){
  final Map<ConstructorParameter,Getter<S,?>> injections=new HashMap<ConstructorParameter,Getter<S,?>>();
  final List<FieldMapper<S,T>> fieldMappers=new ArrayList<FieldMapper<S,T>>();
  propertyMappingsBuilder.forEachConstructorProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>>(){
    @SuppressWarnings(""String_Node_Str"") @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t){
      PropertyMeta<T,?> pm=t.getPropertyMeta();
      ConstructorPropertyMeta<T,?> cProp=(ConstructorPropertyMeta<T,?>)pm;
      ConstructorParameter constructorParameter=cProp.getConstructorParameter();
      injections.put(constructorParameter,getterFor(t,constructorParameter.getResolvedType()));
    }
  }
);
  final Map<ConstructorPropertyMeta<T,?>,AbstractFieldMapperMapperBuilder<S,?,K>> builderToInject=new HashMap<ConstructorPropertyMeta<T,?>,AbstractFieldMapperMapperBuilder<S,?,K>>();
  propertyMappingsBuilder.forEachSubProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>>(){
    @SuppressWarnings(""String_Node_Str"") @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t){
      PropertyMeta<T,?> pm=t.getPropertyMeta();
      SubPropertyMeta<T,?> subProp=(SubPropertyMeta<T,?>)pm;
      PropertyMeta<T,?> propOwner=subProp.getOwnerProperty();
      if (propOwner.isConstructorProperty()) {
        AbstractFieldMapperMapperBuilder<S,?,K> builder=builderToInject.get(propOwner);
        if (builder == null) {
          builder=newSubBuilder(propOwner.getType(),propOwner.getClassMeta());
          builderToInject.put((ConstructorPropertyMeta<T,?>)propOwner,builder);
        }
        addPropertyBuilder(t,subProp,builder);
      }
    }
    @SuppressWarnings(""String_Node_Str"") private <P>void addPropertyBuilder(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t,    SubPropertyMeta<T,?> subProp,    AbstractFieldMapperMapperBuilder<S,?,K> builder){
      ((AbstractFieldMapperMapperBuilder<S,P,K>)builder).addMapping(t.getColumnKey(),((SubPropertyMeta<T,P>)subProp).getSubProperty());
    }
  }
);
  for (  Entry<ConstructorPropertyMeta<T,?>,AbstractFieldMapperMapperBuilder<S,?,K>> e : builderToInject.entrySet()) {
    addConstructorMapper(injections,fieldMappers,e);
  }
  return new Tuple2<Map<ConstructorParameter,Getter<S,?>>,FieldMapper<S,T>[]>(injections,fieldMappers.toArray(new FieldMapper[0]));
}","@SuppressWarnings(""String_Node_Str"") private Tuple2<Map<ConstructorParameter,Getter<S,?>>,FieldMapper<S,T>[]> constructorInjections(){
  final Map<ConstructorParameter,Getter<S,?>> injections=new HashMap<ConstructorParameter,Getter<S,?>>();
  final List<FieldMapper<S,T>> fieldMappers=new ArrayList<FieldMapper<S,T>>();
  propertyMappingsBuilder.forEachConstructorProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>>(){
    @SuppressWarnings(""String_Node_Str"") @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t){
      PropertyMeta<T,?> pm=t.getPropertyMeta();
      ConstructorPropertyMeta<T,?> cProp=(ConstructorPropertyMeta<T,?>)pm;
      ConstructorParameter constructorParameter=cProp.getConstructorParameter();
      injections.put(constructorParameter,getterFor(t,constructorParameter.getResolvedType()));
    }
  }
);
  final Map<ConstructorPropertyMeta<T,?>,AbstractFieldMapperMapperBuilder<S,?,K>> builderToInject=new HashMap<ConstructorPropertyMeta<T,?>,AbstractFieldMapperMapperBuilder<S,?,K>>();
  propertyMappingsBuilder.forEachSubProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>>(){
    @SuppressWarnings(""String_Node_Str"") @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t){
      PropertyMeta<T,?> pm=t.getPropertyMeta();
      SubPropertyMeta<T,?> subProp=(SubPropertyMeta<T,?>)pm;
      PropertyMeta<T,?> propOwner=subProp.getOwnerProperty();
      if (propOwner.isConstructorProperty()) {
        AbstractFieldMapperMapperBuilder<S,?,K> builder=builderToInject.get(propOwner);
        if (builder == null) {
          builder=newSubBuilder(propOwner.getType(),propOwner.getClassMeta());
          builderToInject.put((ConstructorPropertyMeta<T,?>)propOwner,builder);
        }
        addPropertyBuilder(t,subProp,builder);
      }
    }
    @SuppressWarnings(""String_Node_Str"") private <P>void addPropertyBuilder(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t,    SubPropertyMeta<T,?> subProp,    AbstractFieldMapperMapperBuilder<S,?,K> builder){
      ((AbstractFieldMapperMapperBuilder<S,P,K>)builder).addMapping(t.getColumnKey(),t.getColumnDefinition(),((SubPropertyMeta<T,P>)subProp).getSubProperty());
    }
  }
);
  for (  Entry<ConstructorPropertyMeta<T,?>,AbstractFieldMapperMapperBuilder<S,?,K>> e : builderToInject.entrySet()) {
    addConstructorMapper(injections,fieldMappers,e);
  }
  return new Tuple2<Map<ConstructorParameter,Getter<S,?>>,FieldMapper<S,T>[]>(injections,fieldMappers.toArray(new FieldMapper[0]));
}",0.995398773006135
165132,"protected <P>void addMapping(K columnKey,PropertyMeta<T,P> prop){
  propertyMappingsBuilder.addProperty(columnKey,identity,prop);
}","protected <P>void addMapping(K columnKey,FieldMapperColumnDefinition<K,S> columnDefinition,PropertyMeta<T,P> prop){
  propertyMappingsBuilder.addProperty(columnKey,columnDefinition,prop);
}",0.79375
165133,"@SuppressWarnings(""String_Node_Str"") private <P>void addPropertyBuilder(PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t,SubPropertyMeta<T,?> subProp,AbstractFieldMapperMapperBuilder<S,?,K> builder){
  ((AbstractFieldMapperMapperBuilder<S,P,K>)builder).addMapping(t.getColumnKey(),((SubPropertyMeta<T,P>)subProp).getSubProperty());
}","@SuppressWarnings(""String_Node_Str"") private <P>void addPropertyBuilder(PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t,SubPropertyMeta<T,?> subProp,AbstractFieldMapperMapperBuilder<S,?,K> builder){
  ((AbstractFieldMapperMapperBuilder<S,P,K>)builder).addMapping(t.getColumnKey(),t.getColumnDefinition(),((SubPropertyMeta<T,P>)subProp).getSubProperty());
}",0.9661016949152542
165134,"private <P>void addSubProperty(PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> pm,SubPropertyMeta<T,?> subPropertyMeta,K key){
  PropertyMeta<T,?> propertyOwner=subPropertyMeta.getOwnerProperty();
  if (!propertyOwner.isConstructorProperty()) {
    AbstractFieldMapperMapperBuilder<S,P,K> builder=(AbstractFieldMapperMapperBuilder<S,P,K>)builders.get(propertyOwner.getName());
    if (builder == null) {
      builder=(AbstractFieldMapperMapperBuilder<S,P,K>)newSubBuilder(propertyOwner.getType(),propertyOwner.getClassMeta());
      builders.put(propertyOwner.getName(),builder);
      buildersByOwner.put(pm,builder);
    }
    builder.addMapping(key,((SubPropertyMeta<T,P>)subPropertyMeta).getSubProperty());
  }
}","private <P>void addSubProperty(PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> pm,SubPropertyMeta<T,?> subPropertyMeta,K key){
  PropertyMeta<T,?> propertyOwner=subPropertyMeta.getOwnerProperty();
  if (!propertyOwner.isConstructorProperty()) {
    AbstractFieldMapperMapperBuilder<S,P,K> builder=(AbstractFieldMapperMapperBuilder<S,P,K>)builders.get(propertyOwner.getName());
    if (builder == null) {
      builder=(AbstractFieldMapperMapperBuilder<S,P,K>)newSubBuilder(propertyOwner.getType(),propertyOwner.getClassMeta());
      builders.put(propertyOwner.getName(),builder);
      buildersByOwner.put(pm,builder);
    }
    builder.addMapping(key,pm.getColumnDefinition(),((SubPropertyMeta<T,P>)subPropertyMeta).getSubProperty());
  }
}",0.9830508474576272
165135,"@SuppressWarnings(""String_Node_Str"") public final FieldMapper<S,T>[] fields(){
  final List<FieldMapper<S,T>> fields=new ArrayList<FieldMapper<S,T>>();
  final Map<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>,AbstractFieldMapperMapperBuilder<S,?,K>> buildersByOwner=new HashMap<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>,AbstractFieldMapperMapperBuilder<S,?,K>>();
  propertyMappingsBuilder.forEachProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>>(){
    final Map<String,AbstractFieldMapperMapperBuilder<S,?,K>> builders=new HashMap<String,AbstractFieldMapperMapperBuilder<S,?,K>>();
    @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t){
      if (t == null)       return;
      PropertyMeta<T,?> meta=t.getPropertyMeta();
      if (meta == null || (meta instanceof DirectClassMeta.DirectPropertyMeta))       return;
      if (meta.isSubProperty()) {
        addSubProperty(t,(SubPropertyMeta<T,?>)meta,t.getColumnKey());
      }
 else       if (!meta.isConstructorProperty()) {
        fields.add(newFieldMapper(t));
      }
    }
    private <P>void addSubProperty(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> pm,    SubPropertyMeta<T,?> subPropertyMeta,    K key){
      PropertyMeta<T,?> propertyOwner=subPropertyMeta.getOwnerProperty();
      if (!propertyOwner.isConstructorProperty()) {
        AbstractFieldMapperMapperBuilder<S,P,K> builder=(AbstractFieldMapperMapperBuilder<S,P,K>)builders.get(propertyOwner.getName());
        if (builder == null) {
          builder=(AbstractFieldMapperMapperBuilder<S,P,K>)newSubBuilder(propertyOwner.getType(),propertyOwner.getClassMeta());
          builders.put(propertyOwner.getName(),builder);
          buildersByOwner.put(pm,builder);
        }
        builder.addMapping(key,((SubPropertyMeta<T,P>)subPropertyMeta).getSubProperty());
      }
    }
  }
);
  for (  Entry<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>,AbstractFieldMapperMapperBuilder<S,?,K>> e : buildersByOwner.entrySet()) {
    SubPropertyMeta<T,?> prop=(SubPropertyMeta<T,?>)e.getKey().getPropertyMeta();
    fields.add(newSubFieldMapper(prop.getOwnerProperty(),e.getValue(),e.getKey().getColumnKey()));
  }
  for (  FieldMapper<S,T> mapper : additionalMappers) {
    fields.add(mapper);
  }
  return fields.toArray(new FieldMapper[fields.size()]);
}","@SuppressWarnings(""String_Node_Str"") public final FieldMapper<S,T>[] fields(){
  final List<FieldMapper<S,T>> fields=new ArrayList<FieldMapper<S,T>>();
  final Map<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>,AbstractFieldMapperMapperBuilder<S,?,K>> buildersByOwner=new HashMap<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>,AbstractFieldMapperMapperBuilder<S,?,K>>();
  propertyMappingsBuilder.forEachProperties(new ForEachCallBack<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>>(){
    final Map<String,AbstractFieldMapperMapperBuilder<S,?,K>> builders=new HashMap<String,AbstractFieldMapperMapperBuilder<S,?,K>>();
    @Override public void handle(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> t){
      if (t == null)       return;
      PropertyMeta<T,?> meta=t.getPropertyMeta();
      if (meta == null || (meta instanceof DirectClassMeta.DirectPropertyMeta))       return;
      if (meta.isSubProperty()) {
        addSubProperty(t,(SubPropertyMeta<T,?>)meta,t.getColumnKey());
      }
 else       if (!meta.isConstructorProperty()) {
        fields.add(newFieldMapper(t));
      }
    }
    private <P>void addSubProperty(    PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>> pm,    SubPropertyMeta<T,?> subPropertyMeta,    K key){
      PropertyMeta<T,?> propertyOwner=subPropertyMeta.getOwnerProperty();
      if (!propertyOwner.isConstructorProperty()) {
        AbstractFieldMapperMapperBuilder<S,P,K> builder=(AbstractFieldMapperMapperBuilder<S,P,K>)builders.get(propertyOwner.getName());
        if (builder == null) {
          builder=(AbstractFieldMapperMapperBuilder<S,P,K>)newSubBuilder(propertyOwner.getType(),propertyOwner.getClassMeta());
          builders.put(propertyOwner.getName(),builder);
          buildersByOwner.put(pm,builder);
        }
        builder.addMapping(key,pm.getColumnDefinition(),((SubPropertyMeta<T,P>)subPropertyMeta).getSubProperty());
      }
    }
  }
);
  for (  Entry<PropertyMapping<T,?,K,FieldMapperColumnDefinition<K,S>>,AbstractFieldMapperMapperBuilder<S,?,K>> e : buildersByOwner.entrySet()) {
    SubPropertyMeta<T,?> prop=(SubPropertyMeta<T,?>)e.getKey().getPropertyMeta();
    fields.add(newSubFieldMapper(prop.getOwnerProperty(),e.getValue(),e.getKey().getColumnKey()));
  }
  for (  FieldMapper<S,T> mapper : additionalMappers) {
    fields.add(mapper);
  }
  return fields.toArray(new FieldMapper[fields.size()]);
}",0.994827229464101
165136,"public <P>void addProperty(final K key,final D columnDefinition,final PropertyMeta<T,P> prop){
  if (columnDefinition.hasCustomSource()) {
    if (!checkTypeCompatibility(key,columnDefinition.getCustomSourceReturnType(),prop.getType())) {
      properties.add(null);
      return;
    }
  }
  properties.add(new PropertyMapping<T,P,K,D>(prop,key,columnDefinition));
}","public <P>void addProperty(final K key,final D columnDefinition,final PropertyMeta<T,P> prop){
  if (columnDefinition.hasCustomSource()) {
    Type type;
    if (prop.isSubProperty()) {
      type=((SubPropertyMeta<T,P>)prop).getLeafType();
    }
 else {
      type=prop.getType();
    }
    if (!checkTypeCompatibility(key,columnDefinition.getCustomSourceReturnType(),type)) {
      properties.add(null);
      return;
    }
  }
  properties.add(new PropertyMapping<T,P,K,D>(prop,key,columnDefinition));
}",0.8087056128293242
165137,"public MapToDSL(DSL dsl,ClassMeta<T> classMeta,Type mapToClass,String[] headers){
  this.dsl=dsl;
  this.classMeta=classMeta;
  this.mapper=newStaticMapper(classMeta,headers);
  this.mapToClass=mapToClass;
}","public MapToDSL(DSL dsl,ClassMeta<T> classMeta,Type mapToClass,String[] headers){
  this.dsl=dsl;
  this.classMeta=classMeta;
  this.mapToClass=mapToClass;
  this.mapper=newStaticMapper(classMeta,headers);
}",0.855072463768116
165138,"@Override public PropertyMeta<T,?> findProperty(PropertyNameMatcher propertyNameMatcher){
  IndexedColumn indexedColumn=propertyNameMatcher.matchesIndex();
  if (indexedColumn == null) {
    indexedColumn=extrapolateIndex(propertyNameMatcher);
  }
  if (indexedColumn == null) {
    return null;
  }
  IndexedElement<T,E> indexedElement=getIndexedElement(indexedColumn);
  if (!indexedColumn.hasSubProperty()) {
    return indexedElement.getPropertyMeta();
  }
  PropertyFinder<?> propertyFinder=indexedElement.getPropertyFinder();
  PropertyMeta<?,?> subProp=propertyFinder.findProperty(indexedColumn.getSubPropertyNameMatcher());
  if (subProp == null) {
    return null;
  }
  indexedElement.addProperty(subProp);
  return new SubPropertyMeta(arrayClassMeta.getReflectionService(),indexedElement.getPropertyMeta(),subProp);
}","@Override public PropertyMeta<T,?> findProperty(PropertyNameMatcher propertyNameMatcher){
  IndexedColumn indexedColumn=propertyNameMatcher.matchesIndex();
  if (indexedColumn == null) {
    indexedColumn=extrapolateIndex(propertyNameMatcher);
  }
  if (indexedColumn == null) {
    return null;
  }
  IndexedElement<T,E> indexedElement=getIndexedElement(indexedColumn);
  if (!indexedColumn.hasSubProperty()) {
    return indexedElement.getPropertyMeta();
  }
  PropertyFinder<?> propertyFinder=indexedElement.getPropertyFinder();
  if (propertyFinder == null) {
    return null;
  }
  PropertyMeta<?,?> subProp=propertyFinder.findProperty(indexedColumn.getSubPropertyNameMatcher());
  if (subProp == null) {
    return null;
  }
  indexedElement.addProperty(subProp);
  return new SubPropertyMeta(arrayClassMeta.getReflectionService(),indexedElement.getPropertyMeta(),subProp);
}",0.9689877121123464
165139,"@Override public <E>PropertyMeta<T,E> findProperty(PropertyNameMatcher propertyNameMatcher){
  IndexedColumn indexedColumn=propertyNameMatcher.matchesIndex();
  if (indexedColumn == null) {
    indexedColumn=extrapolateIndex(propertyNameMatcher);
  }
  if (indexedColumn == null || calculateTupleIndex(indexedColumn) >= elements.size()) {
    return null;
  }
  IndexedElement indexedElement=elements.get(calculateTupleIndex(indexedColumn));
  if (!indexedColumn.hasSubProperty()) {
    return indexedElement.getPropertyMeta();
  }
  PropertyFinder<?> propertyFinder=indexedElement.getPropertyFinder();
  PropertyMeta<?,?> subProp=propertyFinder.findProperty(indexedColumn.getSubPropertyNameMatcher());
  if (subProp == null) {
    return null;
  }
  indexedElement.addProperty(subProp);
  return new SubPropertyMeta(tupleClassMeta.getReflectionService(),indexedElement.getPropertyMeta(),subProp);
}","@Override public <E>PropertyMeta<T,E> findProperty(PropertyNameMatcher propertyNameMatcher){
  IndexedColumn indexedColumn=propertyNameMatcher.matchesIndex();
  if (indexedColumn == null) {
    indexedColumn=extrapolateIndex(propertyNameMatcher);
  }
  if (indexedColumn == null || calculateTupleIndex(indexedColumn) >= elements.size()) {
    return null;
  }
  IndexedElement indexedElement=elements.get(calculateTupleIndex(indexedColumn));
  if (!indexedColumn.hasSubProperty()) {
    return indexedElement.getPropertyMeta();
  }
  PropertyFinder<?> propertyFinder=indexedElement.getPropertyFinder();
  if (propertyFinder == null) {
    return null;
  }
  PropertyMeta<?,?> subProp=propertyFinder.findProperty(indexedColumn.getSubPropertyNameMatcher());
  if (subProp == null) {
    return null;
  }
  indexedElement.addProperty(subProp);
  return new SubPropertyMeta(tupleClassMeta.getReflectionService(),indexedElement.getPropertyMeta(),subProp);
}",0.9713668287412208
165140,"@Test public void testDSLWitStatichMapper() throws IOException {
  Iterator<Tuple2<String,String>> iterate=CsvParser.<Tuple2<String,String>>mapTo(Tuples.typeDef(String.class,String.class)).headers(""String_Node_Str"").iterate(new StringReader(""String_Node_Str""));
  assertTrue(iterate.hasNext());
  Tuple2<String,String> tuple2=iterate.next();
  assertEquals(""String_Node_Str"",tuple2.first());
  assertEquals(""String_Node_Str"",tuple2.second());
  assertFalse(iterate.hasNext());
}","@Test public void testDSLWitStatichMapper() throws IOException {
  Iterator<Tuple2<String,String>> iterate=CsvParser.<Tuple2<String,String>>mapTo(Tuples.typeDef(String.class,String.class)).headers(""String_Node_Str"",""String_Node_Str"").iterate(new StringReader(""String_Node_Str""));
  assertTrue(iterate.hasNext());
  Tuple2<String,String> tuple2=iterate.next();
  assertEquals(""String_Node_Str"",tuple2.first());
  assertEquals(""String_Node_Str"",tuple2.second());
  assertFalse(iterate.hasNext());
}",0.9815195071868584
165141,"/** 
 * parse cvs
 * @return
 * @throws IOException
 */
public void parseAll(CellConsumer cellConsumer) throws IOException {
  do {
    consumer.parseFull(buffer,cellConsumer);
  }
 while (buffer.fillBuffer(reader));
  consumer.finish(buffer,cellConsumer);
}","/** 
 * parse cvs
 * @throws IOException
 */
public void parseAll(CellConsumer cellConsumer) throws IOException {
  do {
    consumer.parseFull(buffer,cellConsumer);
  }
 while (buffer.fillBuffer(reader));
  consumer.finish(buffer,cellConsumer);
}",0.9782178217821782
165142,"/** 
 * parse cvs
 * @return
 * @throws IOException
 */
public void parseLine(CellConsumer cellConsumer) throws IOException {
  do {
    if (consumer.nextLine(buffer,cellConsumer)) {
      return;
    }
  }
 while (buffer.fillBuffer(reader));
  consumer.finish(buffer,cellConsumer);
}","/** 
 * parse cvs
 * @throws IOException
 */
public void parseLine(CellConsumer cellConsumer) throws IOException {
  do {
    if (consumer.nextLine(buffer,cellConsumer)) {
      return;
    }
  }
 while (buffer.fillBuffer(reader));
  consumer.finish(buffer,cellConsumer);
}",0.9802513464991024
165143,"/** 
 * map source object to a new instance of T
 * @param source object to map from
 * @return a new mapped instance of T
 * @throws Exception
 */
T map(S source) throws MappingException ;","/** 
 * map source object to a new instance of T
 * @param source object to map from
 * @return a new mapped instance of T
 * @throws MappingException
 */
T map(S source) throws MappingException ;",0.9818181818181818
165144,"public AbstractResultSetMapperBuilder(Class<T> target,SetterFactory setterFactory) throws NoSuchMethodException, SecurityException, IOException {
  this.target=target;
  this.primitiveFieldMapperFactory=new PrimitiveFieldMapperFactory<>(setterFactory);
  this.asmFactory=setterFactory.getAsmFactory();
  this.instantiatorFactory=new InstantiatorFactory(asmFactory);
  if (AsmHelper.isAsmPresent()) {
    this.constructors=ConstructorDefinition.extractConstructors(target);
    this.constructorInjection=new HashMap<Parameter,Getter<ResultSet,?>>();
  }
 else {
    this.constructors=null;
    this.constructorInjection=null;
  }
}","public AbstractResultSetMapperBuilder(Class<T> target,SetterFactory setterFactory,boolean asmPresent) throws NoSuchMethodException, SecurityException, IOException {
  this.target=target;
  this.primitiveFieldMapperFactory=new PrimitiveFieldMapperFactory<>(setterFactory);
  this.asmFactory=setterFactory.getAsmFactory();
  this.instantiatorFactory=new InstantiatorFactory(asmFactory);
  if (asmPresent) {
    this.constructors=ConstructorDefinition.extractConstructors(target);
    this.constructorInjection=new HashMap<Parameter,Getter<ResultSet,?>>();
  }
 else {
    this.constructors=null;
    this.constructorInjection=null;
  }
}",0.9723320158102768
165145,"public static boolean isAsmPresent(){
  try {
    Class.forName(""String_Node_Str"");
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}","public static boolean isAsmPresent(){
  return asmPresent;
}",0.4788732394366197
165146,"public CachedResultSetMapperBuilder(final Class<T> target,final Map<String,Setter<T,Object>> setters,final SetterFactory setterFactory) throws NoSuchMethodException, SecurityException, IOException {
  super(target,setterFactory);
  this.setters=setters;
}","public CachedResultSetMapperBuilder(final Class<T> target,final Map<String,Setter<T,Object>> setters,final SetterFactory setterFactory,final boolean asmPresent) throws NoSuchMethodException, SecurityException, IOException {
  super(target,setterFactory,asmPresent);
  this.setters=setters;
}",0.934065934065934
165147,"private JdbcMapper<T> buildMapper(final ResultSetMetaData metaData) throws SQLException, NoSuchMethodException, SecurityException, IOException {
  final MapperKey key=MapperKey.valueOf(metaData);
  JdbcMapper<T> mapper=getMapper(key);
  if (mapper == null) {
    final CachedResultSetMapperBuilder<T> builder=new CachedResultSetMapperBuilder<T>(target,setters,setterFactory);
    builder.fieldMapperErrorHandler(fieldMapperErrorHandler);
    builder.mapperBuilderErrorHandler(mapperBuilderErrorHandler);
    builder.addMapping(metaData);
    mapper=builder.mapper();
    addToMapperCache(new CacheEntry<>(key,mapper));
  }
  return mapper;
}","private JdbcMapper<T> buildMapper(final ResultSetMetaData metaData) throws SQLException, NoSuchMethodException, SecurityException, IOException {
  final MapperKey key=MapperKey.valueOf(metaData);
  JdbcMapper<T> mapper=getMapper(key);
  if (mapper == null) {
    final CachedResultSetMapperBuilder<T> builder=new CachedResultSetMapperBuilder<T>(target,setters,setterFactory,AsmHelper.isAsmPresent());
    builder.fieldMapperErrorHandler(fieldMapperErrorHandler);
    builder.mapperBuilderErrorHandler(mapperBuilderErrorHandler);
    builder.addMapping(metaData);
    mapper=builder.mapper();
    addToMapperCache(new CacheEntry<>(key,mapper));
  }
  return mapper;
}",0.9808722264728386
165148,"public ResultSetMapperBuilderImpl(final Class<T> target,final SetterFactory setterFactory) throws NoSuchMethodException, SecurityException, IOException {
  super(target,setterFactory);
  this.setterFactory=setterFactory;
}","public ResultSetMapperBuilderImpl(final Class<T> target,final SetterFactory setterFactory,final boolean asmPresent) throws NoSuchMethodException, SecurityException, IOException {
  super(target,setterFactory,asmPresent);
  this.setterFactory=setterFactory;
}",0.925
165149,"@SuppressWarnings(""String_Node_Str"") public EnumIndexedResultSetGetter(final int column,final Class<E> enumType){
  this.columnIndex=column;
  this.enumType=enumType;
  try {
    this.values=(E[])enumType.getDeclaredMethod(""String_Node_Str"").invoke(enumType);
  }
 catch (  Exception e) {
    throw new Error(""String_Node_Str"" + e,e);
  }
}","public EnumIndexedResultSetGetter(final int column,final Class<E> enumType){
  this.columnIndex=column;
  this.enumType=enumType;
  this.values=EnumHelper.getValues(enumType);
}",0.6499032882011605
165150,"@SuppressWarnings(""String_Node_Str"") public EnumNamedResultSetGetter(final String column,final Class<E> enumType){
  this.column=column;
  this.enumType=enumType;
  try {
    this.values=(E[])enumType.getDeclaredMethod(""String_Node_Str"").invoke(enumType);
  }
 catch (  Exception e) {
    throw new Error(""String_Node_Str"" + e,e);
  }
}","public EnumNamedResultSetGetter(final String column,final Class<E> enumType){
  this.column=column;
  this.enumType=enumType;
  this.values=EnumHelper.getValues(enumType);
}",0.6444007858546169
165151,"@SuppressWarnings(""String_Node_Str"") public OrdinalEnumIndexedResultSetGetter(final int column,final Class<E> enumType){
  this.columnIndex=column;
  try {
    this.values=(E[])enumType.getDeclaredMethod(""String_Node_Str"").invoke(enumType);
  }
 catch (  Exception e) {
    throw new Error(""String_Node_Str"" + e,e);
  }
}","public OrdinalEnumIndexedResultSetGetter(final int column,final Class<E> enumType){
  this.columnIndex=column;
  this.values=EnumHelper.getValues(enumType);
}",0.6221294363256785
165152,"@SuppressWarnings(""String_Node_Str"") public OrdinalEnumNamedResultSetGetter(final String column,final Class<E> enumType){
  this.column=column;
  try {
    this.values=(E[])enumType.getDeclaredMethod(""String_Node_Str"").invoke(enumType);
  }
 catch (  Exception e) {
    throw new Error(""String_Node_Str"" + e,e);
  }
}","public OrdinalEnumNamedResultSetGetter(final String column,final Class<E> enumType){
  this.column=column;
  this.values=EnumHelper.getValues(enumType);
}",0.6157112526539278
165153,"private void handleByte(final BytesCellHandler handler,final byte c,final int i){
  if (c == QUOTES) {
    if (currentStart == i) {
      currentState=State.IN_QUOTE;
    }
 else     if (currentState == State.IN_QUOTE) {
      currentState=State.QUOTE;
    }
 else {
      if (currentState == State.QUOTE) {
        currentState=State.IN_QUOTE;
      }
    }
  }
 else   if (c == COMMA) {
    if (currentState != State.IN_QUOTE) {
      handler.newCell(buffer,currentStart,i - currentStart);
      currentStart=i + 1;
      currentState=State.NONE;
    }
  }
 else   if (c == CARRIAGE_RETURN) {
    if (currentState != State.IN_QUOTE) {
      handler.newCell(buffer,currentStart,i - currentStart);
      currentStart=i + 1;
      currentState=State.NONE;
      handler.newRow();
    }
  }
}","private void handleByte(final BytesCellHandler handler,final byte c,final int i){
  if (c == QUOTES) {
    if (currentStart == i) {
      currentState=CsvParserState.IN_QUOTE;
    }
 else     if (currentState == CsvParserState.IN_QUOTE) {
      currentState=CsvParserState.QUOTE;
    }
 else {
      if (currentState == CsvParserState.QUOTE) {
        currentState=CsvParserState.IN_QUOTE;
      }
    }
  }
 else   if (c == COMMA) {
    if (currentState != CsvParserState.IN_QUOTE) {
      handler.newCell(buffer,currentStart,i - currentStart);
      currentStart=i + 1;
      currentState=CsvParserState.NONE;
    }
  }
 else   if (c == CARRIAGE_RETURN) {
    if (currentState != CsvParserState.IN_QUOTE) {
      handler.newCell(buffer,currentStart,i - currentStart);
      currentStart=i + 1;
      currentState=CsvParserState.NONE;
      handler.newRow();
    }
  }
}",0.9512341962673088
165154,"private void handleByte(final CharsCellHandler handler,final char c,final int i){
  if (c == '""') {
    if (currentStart == i) {
      currentState=State.IN_QUOTE;
    }
 else     if (currentState == State.IN_QUOTE) {
      currentState=State.QUOTE;
    }
 else {
      if (currentState == State.QUOTE) {
        currentState=State.IN_QUOTE;
      }
    }
  }
 else   if (c == ',') {
    if (currentState != State.IN_QUOTE) {
      handler.newCell(buffer,currentStart,i - currentStart);
      currentStart=i + 1;
      currentState=State.NONE;
    }
  }
 else   if (c == '\n') {
    if (currentState != State.IN_QUOTE) {
      handler.newCell(buffer,currentStart,i - currentStart);
      currentStart=i + 1;
      currentState=State.NONE;
      handler.newRow();
    }
  }
}","private void handleByte(final CharsCellHandler handler,final char c,final int i){
  if (c == '""') {
    if (currentStart == i) {
      currentState=CsvParserState.IN_QUOTE;
    }
 else     if (currentState == CsvParserState.IN_QUOTE) {
      currentState=CsvParserState.QUOTE;
    }
 else {
      if (currentState == CsvParserState.QUOTE) {
        currentState=CsvParserState.IN_QUOTE;
      }
    }
  }
 else   if (c == ',') {
    if (currentState != CsvParserState.IN_QUOTE) {
      handler.newCell(buffer,currentStart,i - currentStart);
      currentStart=i + 1;
      currentState=CsvParserState.NONE;
    }
  }
 else   if (c == '\n') {
    if (currentState != CsvParserState.IN_QUOTE) {
      handler.newCell(buffer,currentStart,i - currentStart);
      currentStart=i + 1;
      currentState=CsvParserState.NONE;
      handler.newRow();
    }
  }
}",0.9502762430939228
165155,"@Override public final JdbcMapper<T> mapper() throws NoSuchMethodException, SecurityException {
  if (asmFactory != null) {
    try {
      return asmFactory.createJdbcMapper(fields(),getInstantiator(),target);
    }
 catch (    Exception e) {
      return new JdbcMapperImpl<T>(fields(),getInstantiator());
    }
  }
 else {
    return new JdbcMapperImpl<T>(fields(),getInstantiator());
  }
}","@Override public final JdbcMapper<T> mapper() throws MapperBuildingException {
  if (asmFactory != null) {
    try {
      return asmFactory.createJdbcMapper(fields(),getInstantiator(),target,jdbcMapperErrorHandler);
    }
 catch (    Exception e) {
      return new JdbcMapperImpl<T>(fields(),getInstantiator(),jdbcMapperErrorHandler);
    }
  }
 else {
    return new JdbcMapperImpl<T>(fields(),getInstantiator(),jdbcMapperErrorHandler);
  }
}",0.863961813842482
165156,"private Instantiator<ResultSet,T> getInstantiator() throws NoSuchMethodException, SecurityException {
  if (constructors == null) {
    return instantiatorFactory.getInstantiator(ResultSet.class,target);
  }
 else {
    return instantiatorFactory.getInstantiator(ResultSet.class,constructors,constructorInjection);
  }
}","private Instantiator<ResultSet,T> getInstantiator() throws MapperBuildingException {
  if (constructors == null) {
    try {
      return instantiatorFactory.getInstantiator(ResultSet.class,target);
    }
 catch (    Exception e) {
      throw new MapperBuildingException(e.getMessage(),e);
    }
  }
 else {
    try {
      return instantiatorFactory.getInstantiator(ResultSet.class,constructors,constructorInjection);
    }
 catch (    Exception e) {
      throw new MapperBuildingException(e.getMessage(),e);
    }
  }
}",0.3772241992882562
165157,"public AbstractResultSetMapperBuilder(Class<T> target,SetterFactory setterFactory,boolean asmPresent) throws NoSuchMethodException, SecurityException, IOException {
  this.target=target;
  this.primitiveFieldMapperFactory=new PrimitiveFieldMapperFactory<>(setterFactory);
  this.asmFactory=setterFactory.getAsmFactory();
  this.instantiatorFactory=new InstantiatorFactory(asmFactory);
  if (asmPresent) {
    this.constructors=ConstructorDefinition.extractConstructors(target);
    this.constructorInjection=new HashMap<Parameter,Getter<ResultSet,?>>();
  }
 else {
    this.constructors=null;
    this.constructorInjection=null;
  }
}","public AbstractResultSetMapperBuilder(Class<T> target,SetterFactory setterFactory,boolean asmPresent) throws MapperBuildingException {
  this.target=target;
  this.primitiveFieldMapperFactory=new PrimitiveFieldMapperFactory<>(setterFactory);
  this.asmFactory=setterFactory.getAsmFactory();
  this.instantiatorFactory=new InstantiatorFactory(asmFactory);
  if (asmPresent) {
    try {
      this.constructors=ConstructorDefinition.extractConstructors(target);
    }
 catch (    Exception e) {
      throw new MapperBuildingException(e.getMessage(),e);
    }
    this.constructorInjection=new HashMap<Parameter,Getter<ResultSet,?>>();
  }
 else {
    this.constructors=null;
    this.constructorInjection=null;
  }
}",0.44
165158,"public CachedResultSetMapperBuilder(final Class<T> target,final Map<String,Setter<T,Object>> setters,final SetterFactory setterFactory,final boolean asmPresent) throws NoSuchMethodException, SecurityException, IOException {
  super(target,setterFactory,asmPresent);
  this.setters=setters;
}","public CachedResultSetMapperBuilder(final Class<T> target,final Map<String,Setter<T,Object>> setters,final SetterFactory setterFactory,final boolean asmPresent) throws MapperBuildingException {
  super(target,setterFactory,asmPresent);
  this.setters=setters;
}",0.9021739130434784
165159,"private JdbcMapper<T> buildMapper(final ResultSetMetaData metaData) throws SQLException, NoSuchMethodException, SecurityException, IOException {
  final MapperKey key=MapperKey.valueOf(metaData);
  JdbcMapper<T> mapper=getMapper(key);
  if (mapper == null) {
    final CachedResultSetMapperBuilder<T> builder=new CachedResultSetMapperBuilder<T>(target,setters,setterFactory,AsmHelper.isAsmPresent());
    builder.fieldMapperErrorHandler(fieldMapperErrorHandler);
    builder.mapperBuilderErrorHandler(mapperBuilderErrorHandler);
    builder.addMapping(metaData);
    mapper=builder.mapper();
    addToMapperCache(new CacheEntry<>(key,mapper));
  }
  return mapper;
}","private JdbcMapper<T> buildMapper(final ResultSetMetaData metaData) throws MapperBuildingException, SQLException {
  final MapperKey key=MapperKey.valueOf(metaData);
  JdbcMapper<T> mapper=getMapper(key);
  if (mapper == null) {
    final CachedResultSetMapperBuilder<T> builder=new CachedResultSetMapperBuilder<T>(target,setters,setterFactory,AsmHelper.isAsmPresent());
    builder.fieldMapperErrorHandler(fieldMapperErrorHandler);
    builder.mapperBuilderErrorHandler(mapperBuilderErrorHandler);
    builder.addMapping(metaData);
    mapper=builder.mapper();
    addToMapperCache(new CacheEntry<>(key,mapper));
  }
  return mapper;
}",0.9385560675883255
165160,"@Override public final <H extends Handler<T>>H forEach(final ResultSet rs,final H handle) throws Exception {
  final JdbcMapper<T> mapper=buildMapper(rs.getMetaData());
  return mapper.forEach(rs,handle);
}","@Override public final <H extends Handler<T>>H forEach(final ResultSet rs,final H handle) throws SQLException, MappingException {
  final JdbcMapper<T> mapper=buildMapper(rs.getMetaData());
  return mapper.forEach(rs,handle);
}",0.9515011547344112
165161,"@Override public final T map(final ResultSet source) throws Exception {
  final JdbcMapper<T> mapper=buildMapper(source.getMetaData());
  return mapper.map(source);
}","@Override public final T map(final ResultSet source) throws MappingException {
  try {
    final JdbcMapper<T> mapper=buildMapper(source.getMetaData());
    return mapper.map(source);
  }
 catch (  SQLException e) {
    throw new SQLMappingException(e.getMessage(),e);
  }
}",0.7545454545454545
165162,"/** 
 * Loop over the resultSet, map each row to a new instance of T and call back the handler
 * @param rs the resultSet
 * @param handle the handler that will get the callback
 * @return the handler passed in
 * @throws Exception if anything bad occurs
 */
<H extends Handler<T>>H forEach(ResultSet rs,H handle) throws Exception ;","/** 
 * Loop over the resultSet, map each row to a new instance of T and call back the handler
 * @param rs the resultSet
 * @param handle the handler that will get the callback
 * @return the handler passed in
 * @throws SQLException if sql error occurs
 * @throws MappingException if an error occurs during the mapping
 */
<H extends Handler<T>>H forEach(ResultSet rs,H handle) throws SQLException, MappingException ;",0.8415446071904128
165163,"@Override public <H extends Handler<T>>H forEach(final ResultSet rs,final H handler) throws Exception {
  while (rs.next()) {
    T t=map(rs);
    handler.handle(t);
  }
  return handler;
}","@Override public <H extends Handler<T>>H forEach(final ResultSet rs,final H handler) throws SQLException, MappingException {
  while (rs.next()) {
    T t=map(rs);
    try {
      handler.handle(t);
    }
 catch (    Throwable error) {
      errorHandler.handlerError(error,t);
    }
  }
  return handler;
}",0.7620967741935484
165164,"@Override public T map(final ResultSet source) throws Exception {
  final T target=instantiator.newInstance(source);
  for (int i=0; i < fieldMappers.length; i++) {
    fieldMappers[i].map(source,target);
  }
  return target;
}","@Override public T map(final ResultSet source) throws MappingException {
  final T target;
  try {
    target=instantiator.newInstance(source);
  }
 catch (  Exception e) {
    throw new InstantiationMappingException(e.getMessage(),e);
  }
  for (int i=0; i < fieldMappers.length; i++) {
    fieldMappers[i].map(source,target);
  }
  return target;
}",0.7868284228769498
165165,"public JdbcMapperImpl(final FieldMapper<ResultSet,T>[] mappers,final Instantiator<ResultSet,T> instantiator){
  this.fieldMappers=mappers;
  this.instantiator=instantiator;
}","public JdbcMapperImpl(final FieldMapper<ResultSet,T>[] mappers,final Instantiator<ResultSet,T> instantiator,final JdbcMapperErrorHandler errorHandler){
  this.fieldMappers=mappers;
  this.instantiator=instantiator;
  this.errorHandler=errorHandler;
}",0.8207547169811321
165166,"JdbcMapper<T> mapper() throws NoSuchMethodException, SecurityException ;",JdbcMapper<T> mapper() throws MapperBuildingException ;,0.7086614173228346
165167,"@Override public final void map(final S source,final T target) throws Exception {
  try {
    mapUnsafe(source,target);
  }
 catch (  Exception ge) {
    errorHandler.errorMappingField(name,source,target,ge);
  }
}","@Override public final void map(final S source,final T target) throws MappingException {
  try {
    mapUnsafe(source,target);
  }
 catch (  Exception ge) {
    errorHandler.errorMappingField(name,source,target,ge);
  }
}",0.9839080459770116
165168,"/** 
 * map source object to target object.
 * @param source object to map from
 * @param target object to map to
 * @throws Exception
 */
void map(S source,T target) throws Exception ;","/** 
 * map source object to target object.
 * @param source object to map from
 * @param target object to map to
 * @throws Exception
 */
void map(S source,T target) throws MappingException ;",0.9814323607427056
165169,"void errorMappingField(String name,Object source,Object target,Exception error) throws Exception ;","void errorMappingField(String name,Object source,Object target,Exception error) throws MappingException ;",0.9655172413793104
165170,"@Override public void errorMappingField(final String name,final Object source,final Object target,final Exception error) throws Exception {
  logger.log(Level.WARNING,""String_Node_Str"" + source,error);
}","@Override public void errorMappingField(final String name,final Object source,final Object target,final Exception error) throws MappingException {
  logger.log(Level.WARNING,""String_Node_Str"" + source,error);
}",0.9830508474576272
165171,"/** 
 * map source object to a new instance of T
 * @param source object to map from
 * @return a new mapped instance of T
 * @throws Exception
 */
T map(S source) throws Exception ;","/** 
 * map source object to a new instance of T
 * @param source object to map from
 * @return a new mapped instance of T
 * @throws Exception
 */
T map(S source) throws MappingException ;",0.981132075471698
165172,"public BenchmarkRunner(int limit,int iteration,QueryExecutor exec){
  this.limit=limit;
  this.iteration=iteration;
  if (limit > 0) {
    this.innerIteration=1000000 / (limit);
    this.warmup=1000000 / limit;
  }
 else {
    this.innerIteration=1;
    this.warmup=1;
  }
  this.exec=exec;
}","public BenchmarkRunner(int limit,int iteration,int nbobjects,QueryExecutor exec){
  this.limit=limit;
  this.iteration=iteration;
  if (limit > 0) {
    this.innerIteration=nbobjects / (limit);
    this.warmup=nbobjects / limit;
  }
 else {
    this.innerIteration=1;
    this.warmup=1;
  }
  this.exec=exec;
}",0.6212624584717608
165173,"@Override public void forEach(final ForEachListener ql,int limit) throws Exception {
  SqlSession session=sqlSessionFactory.openSession();
  try {
    if (limit != -1) {
      session.select(""String_Node_Str"",new RowBounds(0,limit),new ResultHandler(){
        @Override public void handleResult(        ResultContext arg0){
          ql.object((DbObject)arg0.getResultObject());
        }
      }
);
    }
 else {
      session.select(""String_Node_Str"",new ResultHandler(){
        @Override public void handleResult(        ResultContext arg0){
          ql.object((DbObject)arg0.getResultObject());
        }
      }
);
    }
  }
  finally {
    session.close();
  }
}","@Override public void forEach(final ForEachListener ql,int limit) throws Exception {
  SqlSession session=sqlSessionFactory.openSession();
  try {
    if (limit != -1) {
      session.select(""String_Node_Str"",limit,new ResultHandler(){
        @Override public void handleResult(        ResultContext arg0){
          ql.object((DbObject)arg0.getResultObject());
        }
      }
);
    }
 else {
      session.select(""String_Node_Str"",new ResultHandler(){
        @Override public void handleResult(        ResultContext arg0){
          ql.object((DbObject)arg0.getResultObject());
        }
      }
);
    }
  }
  finally {
    session.close();
  }
}",0.9871698113207548
165174,"private void validateConfig(){
  if (hasText(dbName)) {
    throw new MongobeeConfigurationException(""String_Node_Str"");
  }
  if (hasText(changelogsScanPackage)) {
    throw new MongobeeConfigurationException(""String_Node_Str"");
  }
}","private void validateConfig(){
  if (!hasText(dbName)) {
    throw new MongobeeConfigurationException(""String_Node_Str"");
  }
  if (!hasText(changeLogsScanPackage)) {
    throw new MongobeeConfigurationException(""String_Node_Str"");
  }
}",0.9915254237288136
165175,"/** 
 * Executing migration
 * @throws UnknownHostException exception
 * @throws NoSuchMethodException exception
 * @throws IllegalAccessException exception
 * @throws InvocationTargetException exception
 * @throws InstantiationException exception
 */
public void execute() throws UnknownHostException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
  if (!isEnabled()) {
    logger.info(""String_Node_Str"");
    return;
  }
  validateConfig();
  logger.info(""String_Node_Str"");
  dao.connectMongoDb(mongoClientURI,dbName);
  ChangeService service=new ChangeService(changelogsScanPackage,springEnvironment);
  for (  Class<?> changelogClass : service.fetchChangelogs()) {
    Object changelogInstance=changelogClass.getConstructor().newInstance();
    List<Method> changesetMethods=service.fetchChangesets(changelogInstance.getClass());
    for (    Method changesetMethod : changesetMethods) {
      ChangeEntry changeEntry=service.createChangeEntry(changesetMethod);
      try {
        if (dao.isNewChange(changeEntry)) {
          executeChangesetMethod(changesetMethod,changelogInstance,dao.getDb());
          dao.save(changeEntry);
          logger.info(changeEntry + ""String_Node_Str"");
        }
 else         if (service.isRunAlwaysChangeset(changesetMethod)) {
          executeChangesetMethod(changesetMethod,changelogInstance,dao.getDb());
          logger.info(changeEntry + ""String_Node_Str"");
        }
 else {
          logger.info(changeEntry + ""String_Node_Str"");
        }
      }
 catch (      MongobeeChangesetException e) {
        logger.error(e.getMessage());
      }
    }
  }
  logger.info(""String_Node_Str"");
}","/** 
 * Executing migration
 * @throws UnknownHostException exception
 * @throws NoSuchMethodException exception
 * @throws IllegalAccessException exception
 * @throws InvocationTargetException exception
 * @throws InstantiationException exception
 */
public void execute() throws UnknownHostException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
  if (!isEnabled()) {
    logger.info(""String_Node_Str"");
    return;
  }
  validateConfig();
  logger.info(""String_Node_Str"");
  dao.connectMongoDb(mongoClientURI,dbName);
  ChangeService service=new ChangeService(changeLogsScanPackage,springEnvironment);
  for (  Class<?> changelogClass : service.fetchChangeLogs()) {
    Object changelogInstance=changelogClass.getConstructor().newInstance();
    List<Method> changesetMethods=service.fetchChangeSets(changelogInstance.getClass());
    for (    Method changesetMethod : changesetMethods) {
      ChangeEntry changeEntry=service.createChangeEntry(changesetMethod);
      try {
        if (dao.isNewChange(changeEntry)) {
          executeChangeSetMethod(changesetMethod,changelogInstance,dao.getDb());
          dao.save(changeEntry);
          logger.info(changeEntry + ""String_Node_Str"");
        }
 else         if (service.isRunAlwaysChangeSet(changesetMethod)) {
          executeChangeSetMethod(changesetMethod,changelogInstance,dao.getDb());
          logger.info(changeEntry + ""String_Node_Str"");
        }
 else {
          logger.info(changeEntry + ""String_Node_Str"");
        }
      }
 catch (      MongobeeChangeSetException e) {
        logger.error(e.getMessage());
      }
    }
  }
  logger.info(""String_Node_Str"");
}",0.995855535820012
165176,"public ChangeEntry(String changeId,String author,Date timestamp,String changelogClass,String changesetMethodName){
  this.changeId=changeId;
  this.author=author;
  this.timestamp=new Date(timestamp.getTime());
  this.changelogClass=changelogClass;
  this.changesetMethodName=changesetMethodName;
}","public ChangeEntry(String changeId,String author,Date timestamp,String changeLogClass,String changeSetMethodName){
  this.changeId=changeId;
  this.author=author;
  this.timestamp=new Date(timestamp.getTime());
  this.changeLogClass=changeLogClass;
  this.changeSetMethodName=changeSetMethodName;
}",0.7885906040268457
165177,"public DBObject buildFullDBObject(){
  BasicDBObject entry=new BasicDBObject();
  entry.append(""String_Node_Str"",this.changeId).append(""String_Node_Str"",this.author).append(""String_Node_Str"",this.timestamp).append(""String_Node_Str"",this.changelogClass).append(""String_Node_Str"",this.changesetMethodName);
  return entry;
}","public DBObject buildFullDBObject(){
  BasicDBObject entry=new BasicDBObject();
  entry.append(""String_Node_Str"",this.changeId).append(""String_Node_Str"",this.author).append(""String_Node_Str"",this.timestamp).append(""String_Node_Str"",this.changeLogClass).append(""String_Node_Str"",this.changeSetMethodName);
  return entry;
}",0.9937888198757764
165178,"@Override public String toString(){
  return ""String_Node_Str"" + this.changeId + ""String_Node_Str""+ this.author+ ""String_Node_Str""+ this.changelogClass+ ""String_Node_Str""+ this.changesetMethodName+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + this.changeId + ""String_Node_Str""+ this.author+ ""String_Node_Str""+ this.changeLogClass+ ""String_Node_Str""+ this.changeSetMethodName+ ""String_Node_Str"";
}",0.9908256880733946
165179,"public DB connectMongoDb(MongoClientURI mongoClientURI,String dbName) throws UnknownHostException {
  MongoClient mongoClient=new MongoClient(mongoClientURI);
  String database=(hasText(dbName)) ? mongoClientURI.getDatabase() : dbName;
  if (hasText(database)) {
    throw new MongobeeConfigurationException(""String_Node_Str"");
  }
 else {
    db=mongoClient.getDB(database);
    return db;
  }
}","public DB connectMongoDb(MongoClientURI mongoClientURI,String dbName) throws UnknownHostException {
  MongoClient mongoClient=new MongoClient(mongoClientURI);
  String database=(!hasText(dbName)) ? mongoClientURI.getDatabase() : dbName;
  if (!hasText(database)) {
    throw new MongobeeConfigurationException(""String_Node_Str"");
  }
 else {
    db=mongoClient.getDB(database);
    return db;
  }
}",0.9974811083123426
165180,"public WriteResult save(ChangeEntry changeEntry){
  verifyDbConnection();
  DBCollection mongobeelog=getDb().getCollection(CHANGELOG_COLLECTION);
  return mongobeelog.save(changeEntry.buildFullDBObject());
}","public WriteResult save(ChangeEntry changeEntry){
  verifyDbConnection();
  DBCollection mongobeeLog=getDb().getCollection(CHANGELOG_COLLECTION);
  return mongobeeLog.save(changeEntry.buildFullDBObject());
}",0.9903381642512076
165181,"public boolean isNewChange(ChangeEntry changeEntry){
  verifyDbConnection();
  DBCollection mongobeeChangelog=getDb().getCollection(CHANGELOG_COLLECTION);
  DBObject entry=mongobeeChangelog.findOne(changeEntry.buildSearchQueryDBObject());
  return entry == null ? true : false;
}","public boolean isNewChange(ChangeEntry changeEntry){
  verifyDbConnection();
  DBCollection mongobeeChangeLog=getDb().getCollection(CHANGELOG_COLLECTION);
  DBObject entry=mongobeeChangeLog.findOne(changeEntry.buildSearchQueryDBObject());
  return entry == null ? true : false;
}",0.992831541218638
165182,"public ChangeService(String changelogsBasePackage,Environment environment){
  this.changelogsBasePackage=changelogsBasePackage;
  if (environment != null && environment.getActiveProfiles() != null && environment.getActiveProfiles().length > 0) {
    this.activeProfiles=asList(environment.getActiveProfiles());
  }
 else {
    this.activeProfiles=asList(DEFAULT_PROFILE);
  }
}","public ChangeService(String changeLogsBasePackage,Environment environment){
  this.changeLogsBasePackage=changeLogsBasePackage;
  if (environment != null && environment.getActiveProfiles() != null && environment.getActiveProfiles().length > 0) {
    this.activeProfiles=asList(environment.getActiveProfiles());
  }
 else {
    this.activeProfiles=asList(DEFAULT_PROFILE);
  }
}",0.9920424403183024
165183,"public ChangeEntry createChangeEntry(Method changesetMethod){
  if (changesetMethod.isAnnotationPresent(Changeset.class)) {
    Changeset annotation=changesetMethod.getAnnotation(Changeset.class);
    return new ChangeEntry(annotation.id(),annotation.author(),new Date(),changesetMethod.getDeclaringClass().getName(),changesetMethod.getName());
  }
 else {
    return null;
  }
}","public ChangeEntry createChangeEntry(Method changesetMethod){
  if (changesetMethod.isAnnotationPresent(ChangeSet.class)) {
    ChangeSet annotation=changesetMethod.getAnnotation(ChangeSet.class);
    return new ChangeEntry(annotation.id(),annotation.author(),new Date(),changesetMethod.getDeclaringClass().getName(),changesetMethod.getName());
  }
 else {
    return null;
  }
}",0.992084432717678
165184,"public DBObject buildSearchQueryDBObject(){
  return new BasicDBObject().append(""String_Node_Str"",changeId).append(""String_Node_Str"",author);
}","public DBObject buildSearchQueryDBObject(){
  return new BasicDBObject().append(""String_Node_Str"",this.changeId).append(""String_Node_Str"",this.author);
}",0.9662162162162162
165185,"public String getAuthor(){
  return author;
}","public String getAuthor(){
  return this.author;
}",0.9473684210526316
165186,"public Date getTimestamp(){
  return timestamp;
}","public Date getTimestamp(){
  return this.timestamp;
}",0.9514563106796116
165187,"public ChangeEntry(String changeId,String author,Date timestamp,String changelogClass,String changesetMethodName){
  this.changeId=changeId;
  this.author=author;
  this.timestamp=timestamp;
  this.changelogClass=changelogClass;
  this.changesetMethodName=changesetMethodName;
}","public ChangeEntry(String changeId,String author,Date timestamp,String changelogClass,String changesetMethodName){
  this.changeId=changeId;
  this.author=author;
  this.timestamp=new Date(timestamp.getTime());
  this.changelogClass=changelogClass;
  this.changesetMethodName=changesetMethodName;
}",0.9340277777777778
165188,"public DBObject buildFullDBObject(){
  BasicDBObject entry=new BasicDBObject();
  entry.append(""String_Node_Str"",changeId).append(""String_Node_Str"",author).append(""String_Node_Str"",timestamp).append(""String_Node_Str"",changelogClass).append(""String_Node_Str"",changesetMethodName);
  return entry;
}","public DBObject buildFullDBObject(){
  BasicDBObject entry=new BasicDBObject();
  entry.append(""String_Node_Str"",this.changeId).append(""String_Node_Str"",this.author).append(""String_Node_Str"",this.timestamp).append(""String_Node_Str"",this.changelogClass).append(""String_Node_Str"",this.changesetMethodName);
  return entry;
}",0.8529886914378029
165189,"@Override public String toString(){
  return ""String_Node_Str"" + changeId + ""String_Node_Str""+ author+ ""String_Node_Str""+ changelogClass+ ""String_Node_Str""+ changesetMethodName+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + this.changeId + ""String_Node_Str""+ this.author+ ""String_Node_Str""+ this.changelogClass+ ""String_Node_Str""+ this.changesetMethodName+ ""String_Node_Str"";
}",0.9519230769230768
165190,"public String getChangeId(){
  return changeId;
}","public String getChangeId(){
  return this.changeId;
}",0.9514563106796116
165191,"public String getChangelogClass(){
  return changelogClass;
}","public String getChangelogClass(){
  return this.changelogClass;
}",0.9606299212598424
165192,"public String getChangesetMethodName(){
  return changesetMethodName;
}","public String getChangesetMethodName(){
  return this.changesetMethodName;
}",0.9659863945578232
165193,"@Override public String[] getActiveProfiles(){
  return activeProfiles;
}","@Override public String[] getActiveProfiles(){
  return this.activeProfiles;
}",0.9668874172185432
165194,"@Override public int compare(Class<?> o1,Class<?> o2){
  Changelog c1=o1.getAnnotation(Changelog.class);
  Changelog c2=o2.getAnnotation(Changelog.class);
  String val1=isBlank(c1.order()) ? o1.getCanonicalName() : c1.order();
  String val2=isBlank(c2.order()) ? o2.getCanonicalName() : c2.order();
  return val1.compareTo(val2);
}","@Override public int compare(Class<?> o1,Class<?> o2){
  Changelog c1=o1.getAnnotation(Changelog.class);
  Changelog c2=o2.getAnnotation(Changelog.class);
  String val1=isBlank(c1.order()) ? o1.getCanonicalName() : c1.order();
  String val2=isBlank(c2.order()) ? o2.getCanonicalName() : c2.order();
  if (val1 == null && val2 == null) {
    return 0;
  }
 else   if (val1 == null) {
    return -1;
  }
 else   if (val2 == null) {
    return 1;
  }
  return val1.compareTo(val2);
}",0.8162762022194822
165195,"public static Set<Class<?>> fetchChangelogsAt(String changelogsBasePackage){
  Reflections reflections=new Reflections(changelogsBasePackage);
  Set<Class<?>> annotated=reflections.getTypesAnnotatedWith(Changelog.class);
  return annotated;
}","public static List<Class<?>> fetchChangelogsAt(String changelogsBasePackage){
  Reflections reflections=new Reflections(changelogsBasePackage);
  Set<Class<?>> annotated=reflections.getTypesAnnotatedWith(Changelog.class);
  List<Class<?>> annotatedSorted=new ArrayList<>(annotated);
  Collections.sort(annotatedSorted,new Comparator<Class<?>>(){
    @Override public int compare(    Class<?> o1,    Class<?> o2){
      Changelog c1=o1.getAnnotation(Changelog.class);
      Changelog c2=o2.getAnnotation(Changelog.class);
      String val1=StringUtils.isEmpty(c1.order()) ? o1.getCanonicalName() : c1.order();
      String val2=StringUtils.isEmpty(c2.order()) ? o2.getCanonicalName() : c2.order();
      return val1.compareTo(val2);
    }
  }
);
  return annotatedSorted;
}",0.4398422090729783
165196,"public static List<Method> fetchChangesetsAt(final Class<?> type){
  final List<Method> methods=new ArrayList<>();
  final List<Method> allMethods=new ArrayList<>(Arrays.asList(type.getDeclaredMethods()));
  for (  final Method method : allMethods) {
    if (method.isAnnotationPresent(Changeset.class)) {
      methods.add(method);
    }
  }
  return methods;
}","public static List<Method> fetchChangesetsAt(final Class<?> type){
  final List<Method> methods=new ArrayList<>();
  final List<Method> allMethods=new ArrayList<>(Arrays.asList(type.getDeclaredMethods()));
  for (  final Method method : allMethods) {
    if (method.isAnnotationPresent(Changeset.class)) {
      methods.add(method);
    }
  }
  Collections.sort(methods,new Comparator<Method>(){
    @Override public int compare(    Method o1,    Method o2){
      Changeset c1=o1.getAnnotation(Changeset.class);
      Changeset c2=o2.getAnnotation(Changeset.class);
      return c1.order().compareTo(c2.order());
    }
  }
);
  return methods;
}",0.6884920634920635
165197,"@Before public void initRunner(){
  runner=new Mongobee();
  runner.setDbName(""String_Node_Str"");
  runner.setHost(""String_Node_Str"");
  runner.setEnabled(true);
  runner.setChangelogsBasePackage(MongobeeUtilsTestResource.class.getPackage().getName());
}","@Before public void initRunner(){
  runner=new Mongobee();
  runner.setDbName(""String_Node_Str"");
  runner.setHost(""String_Node_Str"");
  runner.setEnabled(true);
  runner.setChangelogsBasePackage(MongobeeTestResource.class.getPackage().getName());
}",0.9900596421471172
165198,"@Test public void shouldFindChangesetMethods(){
  List<Method> foundMethods=fetchChangesetsAt(MongobeeUtilsTestResource.class);
  Assert.assertTrue(foundMethods != null && foundMethods.size() == 2);
}","@Test public void shouldFindChangesetMethods(){
  List<Method> foundMethods=fetchChangesetsAt(MongobeeTestResource.class);
  Assert.assertTrue(foundMethods != null && foundMethods.size() == 4);
}",0.9822784810126582
165199,"@Test public void shouldFindChangelogClasses(){
  String scanPackage=MongobeeUtilsTestResource.class.getPackage().getName();
  Set<Class<?>> foundClasses=fetchChangelogsAt(scanPackage);
  Assert.assertTrue(foundClasses != null && foundClasses.size() > 0);
}","@Test public void shouldFindChangelogClasses(){
  String scanPackage=MongobeeTestResource.class.getPackage().getName();
  List<Class<?>> foundClasses=fetchChangelogsAt(scanPackage);
  Assert.assertTrue(foundClasses != null && foundClasses.size() > 0);
}",0.9803921568627452
165200,"@Test public void shouldCreateEntry(){
  List<Method> foundMethods=fetchChangesetsAt(MongobeeUtilsTestResource.class);
  for (  Method foundMethod : foundMethods) {
    ChangeEntry entry=MongobeeAnnotationUtils.createChangeEntryFor(foundMethod);
    Assert.assertEquals(""String_Node_Str"",entry.getAuthor());
    Assert.assertEquals(MongobeeUtilsTestResource.class.getName(),entry.getChangelogClass());
    Assert.assertNotNull(entry.getTimestamp());
    Assert.assertNotNull(entry.getChangeId());
    Assert.assertNotNull(entry.getChangesetMethodName());
  }
}","@Test public void shouldCreateEntry(){
  List<Method> foundMethods=fetchChangesetsAt(MongobeeTestResource.class);
  for (  Method foundMethod : foundMethods) {
    ChangeEntry entry=MongobeeAnnotationUtils.createChangeEntryFor(foundMethod);
    Assert.assertEquals(""String_Node_Str"",entry.getAuthor());
    Assert.assertEquals(MongobeeTestResource.class.getName(),entry.getChangelogClass());
    Assert.assertNotNull(entry.getTimestamp());
    Assert.assertNotNull(entry.getChangeId());
    Assert.assertNotNull(entry.getChangesetMethodName());
  }
}",0.990990990990991
165201,"/** 
 * Verify that the signing certificate used to sign   {@link #SIGNED_FILE_NAME}matches the signing stored in the database for this repo.    {@link #repo} and{@code repo.signingCertificate} must be pre-loaded from the database beforerunning this, if this is an existing repo.  If the repo does not exist, this will run the TOFU process. <p> Index V1 works with two copies of the signing certificate: <li>in the downloaded jar</li> <li>stored in the local database</li> <p> A new repo can be added with or without the fingerprint of the signing certificate.  If no fingerprint is supplied, then do a pure TOFU and just store the certificate as valid.  If there is a fingerprint, then first check that the signing certificate in the jar matches that fingerprint. <p> This is also responsible for adding the  {@link Repo} instance to thedatabase for the first time. <p> This is the same as  {@link RepoUpdater#verifyCerts(String,X509Certificate)},  {@link RepoUpdater#verifyAndStoreTOFUCerts(String,X509Certificate)}, and  {@link RepoUpdater#assertSigningCertFromXmlCorrect()} except there is noembedded copy of the signing certificate in the index data.
 * @param rawCertFromJar the {@link X509Certificate} embedded in the downloaded jar
 * @see RepoUpdater#verifyAndStoreTOFUCerts(String,X509Certificate)
 * @see RepoUpdater#verifyCerts(String,X509Certificate)
 * @see RepoUpdater#assertSigningCertFromXmlCorrect()
 */
private void verifySigningCertificate(X509Certificate rawCertFromJar) throws SigningException {
  String certFromJar=Hasher.hex(rawCertFromJar);
  if (TextUtils.isEmpty(certFromJar)) {
    throw new SigningException(SIGNED_FILE_NAME + ""String_Node_Str"");
  }
  if (repo.signingCertificate == null) {
    if (repo.fingerprint != null) {
      String fingerprintFromJar=Utils.calcFingerprint(rawCertFromJar);
      if (!repo.fingerprint.equalsIgnoreCase(fingerprintFromJar)) {
        throw new SigningException(""String_Node_Str"");
      }
    }
    Utils.debugLog(TAG,""String_Node_Str"" + repo.address);
    ContentValues values=new ContentValues(2);
    values.put(Schema.RepoTable.Cols.LAST_UPDATED,Utils.formatDate(new Date(),""String_Node_Str""));
    values.put(Schema.RepoTable.Cols.SIGNING_CERT,Hasher.hex(rawCertFromJar));
    RepoProvider.Helper.update(context,repo,values);
    repo.signingCertificate=certFromJar;
  }
  if (TextUtils.isEmpty(repo.signingCertificate)) {
    throw new SigningException(""String_Node_Str"");
  }
  if (repo.signingCertificate.equals(certFromJar)) {
    return;
  }
  throw new SigningException(""String_Node_Str"");
}","/** 
 * Verify that the signing certificate used to sign   {@link #SIGNED_FILE_NAME}matches the signing stored in the database for this repo.    {@link #repo} and{@code repo.signingCertificate} must be pre-loaded from the database beforerunning this, if this is an existing repo.  If the repo does not exist, this will run the TOFU process. <p> Index V1 works with two copies of the signing certificate: <li>in the downloaded jar</li> <li>stored in the local database</li> <p> A new repo can be added with or without the fingerprint of the signing certificate.  If no fingerprint is supplied, then do a pure TOFU and just store the certificate as valid.  If there is a fingerprint, then first check that the signing certificate in the jar matches that fingerprint. <p> This is also responsible for adding the  {@link Repo} instance to thedatabase for the first time. <p> This is the same as  {@link RepoUpdater#verifyCerts(String,X509Certificate)},  {@link RepoUpdater#verifyAndStoreTOFUCerts(String,X509Certificate)}, and  {@link RepoUpdater#assertSigningCertFromXmlCorrect()} except there is noembedded copy of the signing certificate in the index data.
 * @param rawCertFromJar the {@link X509Certificate} embedded in the downloaded jar
 * @see RepoUpdater#verifyAndStoreTOFUCerts(String,X509Certificate)
 * @see RepoUpdater#verifyCerts(String,X509Certificate)
 * @see RepoUpdater#assertSigningCertFromXmlCorrect()
 */
private void verifySigningCertificate(X509Certificate rawCertFromJar) throws SigningException {
  String certFromJar=Hasher.hex(rawCertFromJar);
  if (TextUtils.isEmpty(certFromJar)) {
    throw new SigningException(repo,SIGNED_FILE_NAME + ""String_Node_Str"");
  }
  if (repo.signingCertificate == null) {
    if (repo.fingerprint != null) {
      String fingerprintFromJar=Utils.calcFingerprint(rawCertFromJar);
      if (!repo.fingerprint.equalsIgnoreCase(fingerprintFromJar)) {
        throw new SigningException(repo,""String_Node_Str"");
      }
    }
    Utils.debugLog(TAG,""String_Node_Str"" + repo.address);
    ContentValues values=new ContentValues(2);
    values.put(Schema.RepoTable.Cols.LAST_UPDATED,Utils.formatDate(new Date(),""String_Node_Str""));
    values.put(Schema.RepoTable.Cols.SIGNING_CERT,Hasher.hex(rawCertFromJar));
    RepoProvider.Helper.update(context,repo,values);
    repo.signingCertificate=certFromJar;
  }
  if (TextUtils.isEmpty(repo.signingCertificate)) {
    throw new SigningException(repo,""String_Node_Str"");
  }
  if (repo.signingCertificate.equals(certFromJar)) {
    return;
  }
  throw new SigningException(repo,""String_Node_Str"");
}",0.9961285327138986
165202,"public SigningException(String message){
  super(""String_Node_Str"" + message);
}","public SigningException(Repo repo,String message){
  super((repo == null ? ""String_Node_Str"" : repo.name) + ""String_Node_Str"" + message);
}",0.730593607305936
165203,"/** 
 * A new repo can be added with or without the fingerprint of the signing certificate.  If no fingerprint is supplied, then do a pure TOFU and just store the certificate as valid.  If there is a fingerprint, then first check that the signing certificate in the jar matches that fingerprint.
 */
private void verifyAndStoreTOFUCerts(String certFromIndexXml,X509Certificate rawCertFromJar) throws SigningException {
  if (repo.signingCertificate != null) {
    return;
  }
  if (repo.fingerprint != null) {
    String fingerprintFromIndexXml=Utils.calcFingerprint(certFromIndexXml);
    String fingerprintFromJar=Utils.calcFingerprint(rawCertFromJar);
    if (!repo.fingerprint.equalsIgnoreCase(fingerprintFromIndexXml) || !repo.fingerprint.equalsIgnoreCase(fingerprintFromJar)) {
      throw new SigningException(""String_Node_Str"");
    }
  }
  Utils.debugLog(TAG,""String_Node_Str"" + repo.address);
  ContentValues values=new ContentValues(2);
  values.put(RepoTable.Cols.LAST_UPDATED,Utils.formatDate(new Date(),""String_Node_Str""));
  values.put(RepoTable.Cols.SIGNING_CERT,Hasher.hex(rawCertFromJar));
  RepoProvider.Helper.update(context,repo,values);
}","/** 
 * A new repo can be added with or without the fingerprint of the signing certificate.  If no fingerprint is supplied, then do a pure TOFU and just store the certificate as valid.  If there is a fingerprint, then first check that the signing certificate in the jar matches that fingerprint.
 */
private void verifyAndStoreTOFUCerts(String certFromIndexXml,X509Certificate rawCertFromJar) throws SigningException {
  if (repo.signingCertificate != null) {
    return;
  }
  if (repo.fingerprint != null) {
    String fingerprintFromIndexXml=Utils.calcFingerprint(certFromIndexXml);
    String fingerprintFromJar=Utils.calcFingerprint(rawCertFromJar);
    if (!repo.fingerprint.equalsIgnoreCase(fingerprintFromIndexXml) || !repo.fingerprint.equalsIgnoreCase(fingerprintFromJar)) {
      throw new SigningException(repo,""String_Node_Str"");
    }
  }
  Utils.debugLog(TAG,""String_Node_Str"" + repo.address);
  ContentValues values=new ContentValues(2);
  values.put(RepoTable.Cols.LAST_UPDATED,Utils.formatDate(new Date(),""String_Node_Str""));
  values.put(RepoTable.Cols.SIGNING_CERT,Hasher.hex(rawCertFromJar));
  RepoProvider.Helper.update(context,repo,values);
}",0.9978494623655914
165204,"/** 
 * FDroid works with three copies of the signing certificate: <li>in the downloaded jar</li> <li>in the index XML</li> <li>stored in the local database</li> It would work better removing the copy from the index XML, but it needs to stay there for backwards compatibility since the old TOFU process requires it.  Therefore, since all three have to be present, all three are compared.
 * @param certFromIndexXml the cert written into the header of the index XML
 * @param rawCertFromJar   the {@link X509Certificate} embedded in the downloaded jar
 */
private void verifyCerts(String certFromIndexXml,X509Certificate rawCertFromJar) throws SigningException {
  String certFromJar=Hasher.hex(rawCertFromJar);
  if (TextUtils.isEmpty(repo.signingCertificate) || TextUtils.isEmpty(certFromJar) || TextUtils.isEmpty(certFromIndexXml)) {
    throw new SigningException(""String_Node_Str"");
  }
  if (repo.signingCertificate.equals(certFromJar) && repo.signingCertificate.equals(certFromIndexXml) && certFromIndexXml.equals(certFromJar)) {
    return;
  }
  throw new SigningException(""String_Node_Str"");
}","/** 
 * FDroid works with three copies of the signing certificate: <li>in the downloaded jar</li> <li>in the index XML</li> <li>stored in the local database</li> It would work better removing the copy from the index XML, but it needs to stay there for backwards compatibility since the old TOFU process requires it.  Therefore, since all three have to be present, all three are compared.
 * @param certFromIndexXml the cert written into the header of the index XML
 * @param rawCertFromJar   the {@link X509Certificate} embedded in the downloaded jar
 */
private void verifyCerts(String certFromIndexXml,X509Certificate rawCertFromJar) throws SigningException {
  String certFromJar=Hasher.hex(rawCertFromJar);
  if (TextUtils.isEmpty(repo.signingCertificate) || TextUtils.isEmpty(certFromJar) || TextUtils.isEmpty(certFromIndexXml)) {
    throw new SigningException(repo,""String_Node_Str"");
  }
  if (repo.signingCertificate.equals(certFromJar) && repo.signingCertificate.equals(certFromIndexXml) && certFromIndexXml.equals(certFromJar)) {
    return;
  }
  throw new SigningException(repo,""String_Node_Str"");
}",0.995483288166215
165205,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_delete:
    getContentResolver().delete(InstallHistoryService.LOG_URI,null,null);
  TextView textView=findViewById(R.id.text);
textView.setText(""String_Node_Str"");
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_share:
    StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
for (Repo repo : RepoProvider.Helper.all(this)) {
  if (repo.inuse) {
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(repo.address);
    stringBuilder.append('\n');
  }
}
ShareCompat.IntentBuilder intentBuilder=ShareCompat.IntentBuilder.from(this).setStream(InstallHistoryService.LOG_URI).setSubject(getString(R.string.send_history_csv,getString(R.string.app_name))).setChooserTitle(R.string.send_install_history).setText(stringBuilder.toString()).setType(""String_Node_Str"");
Intent intent=intentBuilder.getIntent();
intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
startActivity(intent);
break;
case R.id.menu_delete:
getContentResolver().delete(InstallHistoryService.LOG_URI,null,null);
TextView textView=findViewById(R.id.text);
textView.setText(""String_Node_Str"");
break;
}
return super.onOptionsItemSelected(item);
}",0.4098479362780594
165206,"/** 
 * Some basic sanitization of URLs, so that two URLs which have the same semantic meaning are represented by the exact same string by F-Droid. This will help to make sure that, e.g. ""http://10.0.1.50"" and ""http://10.0.1.50/"" are not two different repositories. <p> Currently it normalizes the path so that ""/./"" are removed and ""test/../"" is collapsed. This is done using   {@link URI#normalize()}. It also removes multiple consecutive forward slashes in the path and replaces them with one. Finally, it removes trailing slashes. <p>  {@code content://} URLs used for repos stored on removable storage get messed up by{@link URI}.
 */
private String normalizeUrl(String urlString) throws URISyntaxException {
  if (urlString == null) {
    return null;
  }
  Uri uri=Uri.parse(urlString);
  if (!uri.isAbsolute()) {
    throw new URISyntaxException(urlString,""String_Node_Str"");
  }
  if (!uri.isHierarchical()) {
    throw new URISyntaxException(urlString,""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(uri.getScheme())) {
    return uri.toString();
  }
  String path=uri.getPath();
  if (path != null) {
    path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (path.length() > 0 && path.charAt(path.length() - 1) == '/') {
      path=path.substring(0,path.length() - 1);
    }
  }
  return new URI(uri.getScheme().toLowerCase(Locale.ENGLISH),uri.getUserInfo(),uri.getHost().toLowerCase(Locale.ENGLISH),uri.getPort(),path,uri.getQuery(),uri.getFragment()).normalize().toString();
}","/** 
 * Some basic sanitization of URLs, so that two URLs which have the same semantic meaning are represented by the exact same string by F-Droid. This will help to make sure that, e.g. ""http://10.0.1.50"" and ""http://10.0.1.50/"" are not two different repositories. <p> Currently it normalizes the path so that ""/./"" are removed and ""test/../"" is collapsed. This is done using   {@link URI#normalize()}. It also removes multiple consecutive forward slashes in the path and replaces them with one. Finally, it removes trailing slashes. <p>  {@code content://} URLs used for repos stored on removable storage get messed up by{@link URI}.
 */
private String normalizeUrl(String urlString) throws URISyntaxException {
  if (urlString == null) {
    return null;
  }
  Uri uri=Uri.parse(urlString);
  if (!uri.isAbsolute()) {
    throw new URISyntaxException(urlString,""String_Node_Str"");
  }
  if (!uri.isHierarchical()) {
    throw new URISyntaxException(urlString,""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(uri.getScheme())) {
    return uri.toString();
  }
  String path=uri.getPath();
  if (path != null) {
    path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (path.length() > 0 && path.charAt(path.length() - 1) == '/') {
      path=path.substring(0,path.length() - 1);
    }
  }
  String scheme=uri.getScheme();
  String host=uri.getHost();
  if (TextUtils.isEmpty(scheme) || TextUtils.isEmpty(host)) {
    return urlString;
  }
  return new URI(scheme.toLowerCase(Locale.ENGLISH),uri.getUserInfo(),host.toLowerCase(Locale.ENGLISH),uri.getPort(),path,uri.getQuery(),uri.getFragment()).normalize().toString();
}",0.9403174603174604
165207,"private void updateSummary(String key,boolean changing){
switch (key) {
case Preferences.PREF_UPDATE_INTERVAL:
    updateIntervalSeekBar.setMax(Preferences.UPDATE_INTERVAL_VALUES.length - 1);
  int seekBarPosition=updateIntervalSeekBar.getValue();
updateIntervalSeekBar.setSummary(UPDATE_INTERVAL_NAMES[seekBarPosition]);
break;
case Preferences.PREF_OVER_WIFI:
overWifiSeekBar.setMax(Preferences.OVER_NETWORK_ALWAYS);
setNetworkSeekBarSummary(overWifiSeekBar);
enableUpdateInverval();
break;
case Preferences.PREF_OVER_DATA:
overDataSeekBar.setMax(Preferences.OVER_NETWORK_ALWAYS);
setNetworkSeekBarSummary(overDataSeekBar);
enableUpdateInverval();
break;
case Preferences.PREF_UPDATE_NOTIFICATION_ENABLED:
checkSummary(key,R.string.notify_on);
break;
case Preferences.PREF_THEME:
entrySummary(key);
if (changing) {
Activity activity=getActivity();
FDroidApp fdroidApp=(FDroidApp)activity.getApplication();
fdroidApp.reloadTheme();
fdroidApp.applyTheme(activity);
FDroidApp.forceChangeTheme(activity);
}
break;
case Preferences.PREF_SHOW_INCOMPAT_VERSIONS:
checkSummary(key,R.string.show_incompat_versions_on);
break;
case Preferences.PREF_SHOW_ROOT_APPS:
checkSummary(key,R.string.show_root_apps_on);
break;
case Preferences.PREF_SHOW_ANTI_FEATURE_APPS:
checkSummary(key,R.string.show_anti_feature_apps_on);
break;
case Preferences.PREF_FORCE_TOUCH_APPS:
checkSummary(key,R.string.force_touch_apps_on);
break;
case Preferences.PREF_LOCAL_REPO_NAME:
textSummary(key,R.string.local_repo_name_summary);
break;
case Preferences.PREF_LOCAL_REPO_HTTPS:
checkSummary(key,R.string.local_repo_https_on);
break;
case Preferences.PREF_LANGUAGE:
entrySummary(key);
if (changing) {
Activity activity=getActivity();
Languages.setLanguage(activity);
RepoProvider.Helper.clearEtags(getActivity());
UpdateService.updateNow(getActivity());
Languages.forceChangeLanguage(activity);
}
break;
case Preferences.PREF_KEEP_CACHE_TIME:
entrySummary(key);
if (changing && currentKeepCacheTime != Preferences.get().getKeepCacheTime()) {
CleanCacheService.schedule(getActivity());
}
break;
case Preferences.PREF_EXPERT:
checkSummary(key,R.string.expert_on);
boolean isExpertMode=Preferences.get().expertMode();
for (int i=0; i < otherPrefGroup.getPreferenceCount(); i++) {
Preference pref=otherPrefGroup.getPreference(i);
if (TextUtils.equals(Preferences.PREF_EXPERT,pref.getDependency())) {
pref.setVisible(isExpertMode);
}
}
if (changing) {
RecyclerView recyclerView=getListView();
recyclerView.smoothScrollToPosition(recyclerView.getAdapter().getItemCount() - 1);
}
break;
case Preferences.PREF_PRIVILEGED_INSTALLER:
final CheckBoxPreference pref=(CheckBoxPreference)findPreference(Preferences.PREF_PRIVILEGED_INSTALLER);
if (pref != null) {
checkSummary(key,R.string.system_installer_on);
}
break;
case Preferences.PREF_ENABLE_PROXY:
SwitchPreference checkPref=(SwitchPreference)findPreference(key);
checkPref.setSummary(R.string.enable_proxy_summary);
break;
case Preferences.PREF_PROXY_HOST:
EditTextPreference textPref=(EditTextPreference)findPreference(key);
String text=Preferences.get().getProxyHost();
if (TextUtils.isEmpty(text) || text.equals(Preferences.DEFAULT_PROXY_HOST)) {
textPref.setSummary(R.string.proxy_host_summary);
}
 else {
textPref.setSummary(text);
}
break;
case Preferences.PREF_PROXY_PORT:
EditTextPreference textPref2=(EditTextPreference)findPreference(key);
int port=Preferences.get().getProxyPort();
if (port == Preferences.DEFAULT_PROXY_PORT) {
textPref2.setSummary(R.string.proxy_port_summary);
}
 else {
textPref2.setSummary(String.valueOf(port));
}
break;
case Preferences.PREF_KEEP_INSTALL_HISTORY:
CheckBoxPreference p=(CheckBoxPreference)findPreference(key);
Preference installHistory=findPreference(""String_Node_Str"");
if (p.isChecked()) {
InstallHistoryService.register(getActivity());
installHistory.setVisible(true);
}
 else {
InstallHistoryService.unregister(getActivity());
installHistory.setVisible(false);
}
break;
}
}","private void updateSummary(String key,boolean changing){
switch (key) {
case Preferences.PREF_UPDATE_INTERVAL:
    updateIntervalSeekBar.setMax(Preferences.UPDATE_INTERVAL_VALUES.length - 1);
  int seekBarPosition=updateIntervalSeekBar.getValue();
updateIntervalSeekBar.setSummary(UPDATE_INTERVAL_NAMES[seekBarPosition]);
break;
case Preferences.PREF_OVER_WIFI:
overWifiSeekBar.setMax(Preferences.OVER_NETWORK_ALWAYS);
setNetworkSeekBarSummary(overWifiSeekBar);
enableUpdateInverval();
break;
case Preferences.PREF_OVER_DATA:
overDataSeekBar.setMax(Preferences.OVER_NETWORK_ALWAYS);
setNetworkSeekBarSummary(overDataSeekBar);
enableUpdateInverval();
break;
case Preferences.PREF_UPDATE_NOTIFICATION_ENABLED:
checkSummary(key,R.string.notify_on);
break;
case Preferences.PREF_THEME:
entrySummary(key);
if (changing) {
Activity activity=getActivity();
FDroidApp fdroidApp=(FDroidApp)activity.getApplication();
fdroidApp.reloadTheme();
fdroidApp.applyTheme(activity);
FDroidApp.forceChangeTheme(activity);
}
break;
case Preferences.PREF_SHOW_INCOMPAT_VERSIONS:
checkSummary(key,R.string.show_incompat_versions_on);
break;
case Preferences.PREF_SHOW_ROOT_APPS:
checkSummary(key,R.string.show_root_apps_on);
break;
case Preferences.PREF_SHOW_ANTI_FEATURE_APPS:
checkSummary(key,R.string.show_anti_feature_apps_on);
break;
case Preferences.PREF_FORCE_TOUCH_APPS:
checkSummary(key,R.string.force_touch_apps_on);
break;
case Preferences.PREF_LOCAL_REPO_NAME:
textSummary(key,R.string.local_repo_name_summary);
break;
case Preferences.PREF_LOCAL_REPO_HTTPS:
checkSummary(key,R.string.local_repo_https_on);
break;
case Preferences.PREF_LANGUAGE:
entrySummary(key);
if (changing) {
Activity activity=getActivity();
Languages.setLanguage(activity);
RepoProvider.Helper.clearEtags(getActivity());
UpdateService.updateNow(getActivity());
Languages.forceChangeLanguage(activity);
}
break;
case Preferences.PREF_KEEP_CACHE_TIME:
entrySummary(key);
if (changing && currentKeepCacheTime != Preferences.get().getKeepCacheTime()) {
CleanCacheService.schedule(getActivity());
}
break;
case Preferences.PREF_EXPERT:
checkSummary(key,R.string.expert_on);
boolean isExpertMode=Preferences.get().expertMode();
for (int i=0; i < otherPrefGroup.getPreferenceCount(); i++) {
Preference pref=otherPrefGroup.getPreference(i);
if (TextUtils.equals(Preferences.PREF_EXPERT,pref.getDependency())) {
pref.setVisible(isExpertMode);
}
}
if (changing) {
RecyclerView recyclerView=getListView();
recyclerView.smoothScrollToPosition(recyclerView.getAdapter().getItemCount() - 1);
}
break;
case Preferences.PREF_PRIVILEGED_INSTALLER:
final CheckBoxPreference pref=(CheckBoxPreference)findPreference(Preferences.PREF_PRIVILEGED_INSTALLER);
if (pref != null) {
checkSummary(key,R.string.system_installer_on);
}
break;
case Preferences.PREF_ENABLE_PROXY:
SwitchPreference checkPref=(SwitchPreference)findPreference(key);
checkPref.setSummary(R.string.enable_proxy_summary);
break;
case Preferences.PREF_PROXY_HOST:
EditTextPreference textPref=(EditTextPreference)findPreference(key);
String text=Preferences.get().getProxyHost();
if (TextUtils.isEmpty(text) || text.equals(Preferences.DEFAULT_PROXY_HOST)) {
textPref.setSummary(R.string.proxy_host_summary);
}
 else {
textPref.setSummary(text);
}
break;
case Preferences.PREF_PROXY_PORT:
EditTextPreference textPref2=(EditTextPreference)findPreference(key);
int port=Preferences.get().getProxyPort();
if (port == Preferences.DEFAULT_PROXY_PORT) {
textPref2.setSummary(R.string.proxy_port_summary);
}
 else {
textPref2.setSummary(String.valueOf(port));
}
break;
case Preferences.PREF_KEEP_INSTALL_HISTORY:
if (keepInstallHistoryPref.isChecked()) {
InstallHistoryService.register(getActivity());
installHistoryPref.setVisible(true);
}
 else {
InstallHistoryService.unregister(getActivity());
installHistoryPref.setVisible(false);
}
break;
}
}",0.9550590652285568
165208,"@Override public void onCreatePreferences(Bundle bundle,String s){
  Preferences.get().migrateOldPreferences();
  addPreferencesFromResource(R.xml.preferences);
  otherPrefGroup=(PreferenceGroup)findPreference(""String_Node_Str"");
  useTorCheckPref=(SwitchPreference)findPreference(Preferences.PREF_USE_TOR);
  enableProxyCheckPref=(SwitchPreference)findPreference(Preferences.PREF_ENABLE_PROXY);
  updateAutoDownloadPref=findPreference(Preferences.PREF_AUTO_DOWNLOAD_INSTALL_UPDATES);
  updatePrivilegedExtensionPref=findPreference(Preferences.PREF_UNINSTALL_PRIVILEGED_APP);
  overWifiSeekBar=(LiveSeekBarPreference)findPreference(Preferences.PREF_OVER_WIFI);
  overWifiPrevious=overWifiSeekBar.getValue();
  overWifiSeekBar.setSeekBarLiveUpdater(new LiveSeekBarPreference.SeekBarLiveUpdater(){
    @Override public String seekBarUpdated(    int position){
      return getNetworkSeekBarSummary(position);
    }
  }
);
  overDataSeekBar=(LiveSeekBarPreference)findPreference(Preferences.PREF_OVER_DATA);
  overDataPrevious=overDataSeekBar.getValue();
  overDataSeekBar.setSeekBarLiveUpdater(new LiveSeekBarPreference.SeekBarLiveUpdater(){
    @Override public String seekBarUpdated(    int position){
      return getNetworkSeekBarSummary(position);
    }
  }
);
  updateIntervalSeekBar=(LiveSeekBarPreference)findPreference(Preferences.PREF_UPDATE_INTERVAL);
  updateIntervalPrevious=updateIntervalSeekBar.getValue();
  updateIntervalSeekBar.setSeekBarLiveUpdater(new LiveSeekBarPreference.SeekBarLiveUpdater(){
    @Override public String seekBarUpdated(    int position){
      return getString(UPDATE_INTERVAL_NAMES[position]);
    }
  }
);
  ListPreference languagePref=(ListPreference)findPreference(Preferences.PREF_LANGUAGE);
  if (Build.VERSION.SDK_INT >= 24) {
    PreferenceCategory category=(PreferenceCategory)findPreference(""String_Node_Str"");
    category.removePreference(languagePref);
  }
 else {
    Languages languages=Languages.get(getActivity());
    languagePref.setDefaultValue(Languages.USE_SYSTEM_DEFAULT);
    languagePref.setEntries(languages.getAllNames());
    languagePref.setEntryValues(languages.getSupportedLocales());
  }
}","@Override public void onCreatePreferences(Bundle bundle,String s){
  Preferences.get().migrateOldPreferences();
  addPreferencesFromResource(R.xml.preferences);
  otherPrefGroup=(PreferenceGroup)findPreference(""String_Node_Str"");
  keepInstallHistoryPref=(CheckBoxPreference)findPreference(Preferences.PREF_KEEP_INSTALL_HISTORY);
  installHistoryPref=findPreference(""String_Node_Str"");
  installHistoryPref.setVisible(keepInstallHistoryPref.isChecked());
  useTorCheckPref=(SwitchPreference)findPreference(Preferences.PREF_USE_TOR);
  enableProxyCheckPref=(SwitchPreference)findPreference(Preferences.PREF_ENABLE_PROXY);
  updateAutoDownloadPref=findPreference(Preferences.PREF_AUTO_DOWNLOAD_INSTALL_UPDATES);
  updatePrivilegedExtensionPref=findPreference(Preferences.PREF_UNINSTALL_PRIVILEGED_APP);
  overWifiSeekBar=(LiveSeekBarPreference)findPreference(Preferences.PREF_OVER_WIFI);
  overWifiPrevious=overWifiSeekBar.getValue();
  overWifiSeekBar.setSeekBarLiveUpdater(new LiveSeekBarPreference.SeekBarLiveUpdater(){
    @Override public String seekBarUpdated(    int position){
      return getNetworkSeekBarSummary(position);
    }
  }
);
  overDataSeekBar=(LiveSeekBarPreference)findPreference(Preferences.PREF_OVER_DATA);
  overDataPrevious=overDataSeekBar.getValue();
  overDataSeekBar.setSeekBarLiveUpdater(new LiveSeekBarPreference.SeekBarLiveUpdater(){
    @Override public String seekBarUpdated(    int position){
      return getNetworkSeekBarSummary(position);
    }
  }
);
  updateIntervalSeekBar=(LiveSeekBarPreference)findPreference(Preferences.PREF_UPDATE_INTERVAL);
  updateIntervalPrevious=updateIntervalSeekBar.getValue();
  updateIntervalSeekBar.setSeekBarLiveUpdater(new LiveSeekBarPreference.SeekBarLiveUpdater(){
    @Override public String seekBarUpdated(    int position){
      return getString(UPDATE_INTERVAL_NAMES[position]);
    }
  }
);
  ListPreference languagePref=(ListPreference)findPreference(Preferences.PREF_LANGUAGE);
  if (Build.VERSION.SDK_INT >= 24) {
    PreferenceCategory category=(PreferenceCategory)findPreference(""String_Node_Str"");
    category.removePreference(languagePref);
  }
 else {
    Languages languages=Languages.get(getActivity());
    languagePref.setDefaultValue(Languages.USE_SYSTEM_DEFAULT);
    languagePref.setEntries(languages.getAllNames());
    languagePref.setEntryValues(languages.getSupportedLocales());
  }
}",0.9504732555580012
165209,"/** 
 * Seeing as this repo already exists, we will force it to be enabled again.
 */
private void updateAndEnableExistingRepo(String url,String fingerprint){
  if (fingerprint != null) {
    fingerprint=fingerprint.trim();
    if (TextUtils.isEmpty(fingerprint)) {
      fingerprint=null;
    }
 else {
      fingerprint=fingerprint.toUpperCase(Locale.ENGLISH);
    }
  }
  Utils.debugLog(TAG,""String_Node_Str"" + url);
  Repo repo=fingerprintRepoMap.get(fingerprint);
  if (repo == null) {
    repo=RepoProvider.Helper.findByAddress(context,url);
  }
  ContentValues values=new ContentValues(2);
  values.put(RepoTable.Cols.IN_USE,1);
  values.put(RepoTable.Cols.FINGERPRINT,fingerprint);
  if (!TextUtils.equals(url,repo.address)) {
    boolean addUserMirror=true;
    for (    String mirror : repo.getMirrorList()) {
      if (TextUtils.equals(mirror,url)) {
        addUserMirror=false;
      }
    }
    if (addUserMirror) {
      if (repo.userMirrors == null) {
        repo.userMirrors=new String[]{url};
      }
 else {
        int last=repo.userMirrors.length;
        repo.userMirrors=Arrays.copyOf(repo.userMirrors,last);
        repo.userMirrors[last]=url;
      }
      values.put(RepoTable.Cols.USER_MIRRORS,Utils.serializeCommaSeparatedString(repo.userMirrors));
    }
  }
  RepoProvider.Helper.update(context,repo,values);
  notifyDataSetChanged();
  finishedAddingRepo();
}","/** 
 * Seeing as this repo already exists, we will force it to be enabled again.
 */
private void updateAndEnableExistingRepo(String url,String fingerprint){
  if (fingerprint != null) {
    fingerprint=fingerprint.trim();
    if (TextUtils.isEmpty(fingerprint)) {
      fingerprint=null;
    }
 else {
      fingerprint=fingerprint.toUpperCase(Locale.ENGLISH);
    }
  }
  Utils.debugLog(TAG,""String_Node_Str"" + url);
  Repo repo=fingerprintRepoMap.get(fingerprint);
  if (repo == null) {
    repo=RepoProvider.Helper.findByAddress(context,url);
  }
  ContentValues values=new ContentValues(2);
  values.put(RepoTable.Cols.IN_USE,1);
  values.put(RepoTable.Cols.FINGERPRINT,fingerprint);
  if (!TextUtils.equals(url,repo.address)) {
    boolean addUserMirror=true;
    for (    String mirror : repo.getMirrorList()) {
      if (TextUtils.equals(mirror,url)) {
        addUserMirror=false;
      }
    }
    if (addUserMirror) {
      if (repo.userMirrors == null) {
        repo.userMirrors=new String[]{url};
      }
 else {
        int last=repo.userMirrors.length;
        repo.userMirrors=Arrays.copyOf(repo.userMirrors,last + 1);
        repo.userMirrors[last]=url;
      }
      values.put(RepoTable.Cols.USER_MIRRORS,Utils.serializeCommaSeparatedString(repo.userMirrors));
    }
  }
  RepoProvider.Helper.update(context,repo,values);
  notifyDataSetChanged();
  finishedAddingRepo();
}",0.9985632183908046
165210,"/** 
 * Figures out the current install/update/download/etc status for the app we are viewing. Then, asks the view to update itself to reflect this status.
 */
private void refreshStatus(){
  Iterator<AppUpdateStatusManager.AppUpdateStatus> statuses=AppUpdateStatusManager.getInstance(this).getByPackageName(app.packageName).iterator();
  if (statuses.hasNext()) {
    AppUpdateStatusManager.AppUpdateStatus status=statuses.next();
    updateAppStatus(status,false);
  }
  currentStatus=null;
}","/** 
 * Figures out the current install/update/download/etc status for the app we are viewing. Then, asks the view to update itself to reflect this status.
 */
private void refreshStatus(){
  AppUpdateStatusManager ausm=AppUpdateStatusManager.getInstance(this);
  Iterator<AppUpdateStatusManager.AppUpdateStatus> statuses=ausm.getByPackageName(app.packageName).iterator();
  if (statuses.hasNext()) {
    AppUpdateStatusManager.AppUpdateStatus status=statuses.next();
    updateAppStatus(status,false);
  }
  currentStatus=null;
}",0.88671875
165211,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.action_share) {
    Intent shareIntent=new Intent(Intent.ACTION_SEND);
    shareIntent.setType(""String_Node_Str"");
    shareIntent.putExtra(Intent.EXTRA_SUBJECT,app.name);
    shareIntent.putExtra(Intent.EXTRA_TEXT,app.name + ""String_Node_Str"" + app.summary+ ""String_Node_Str""+ app.packageName);
    boolean showNearbyItem=app.isInstalled(getApplicationContext()) && fdroidApp.bluetoothAdapter != null;
    ShareChooserDialog.createChooser((CoordinatorLayout)findViewById(R.id.rootCoordinator),this,this,shareIntent,showNearbyItem);
    return true;
  }
 else   if (item.getItemId() == R.id.action_ignore_all) {
    app.getPrefs(this).ignoreAllUpdates^=true;
    item.setChecked(app.getPrefs(this).ignoreAllUpdates);
    AppPrefsProvider.Helper.update(this,app,app.getPrefs(this));
    return true;
  }
 else   if (item.getItemId() == R.id.action_ignore_this) {
    if (app.getPrefs(this).ignoreThisUpdate >= app.suggestedVersionCode) {
      app.getPrefs(this).ignoreThisUpdate=0;
    }
 else {
      app.getPrefs(this).ignoreThisUpdate=app.suggestedVersionCode;
    }
    item.setChecked(app.getPrefs(this).ignoreThisUpdate > 0);
    AppPrefsProvider.Helper.update(this,app,app.getPrefs(this));
    return true;
  }
 else   if (item.getItemId() == android.R.id.home) {
    onBackPressed();
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.action_share) {
    Intent shareIntent=new Intent(Intent.ACTION_SEND);
    shareIntent.setType(""String_Node_Str"");
    shareIntent.putExtra(Intent.EXTRA_SUBJECT,app.name);
    shareIntent.putExtra(Intent.EXTRA_TEXT,app.name + ""String_Node_Str"" + app.summary+ ""String_Node_Str""+ app.packageName);
    boolean showNearbyItem=app.isInstalled(getApplicationContext()) && fdroidApp.bluetoothAdapter != null;
    CoordinatorLayout coordinatorLayout=(CoordinatorLayout)findViewById(R.id.rootCoordinator);
    ShareChooserDialog.createChooser(coordinatorLayout,this,this,shareIntent,showNearbyItem);
    return true;
  }
 else   if (item.getItemId() == R.id.action_ignore_all) {
    app.getPrefs(this).ignoreAllUpdates^=true;
    item.setChecked(app.getPrefs(this).ignoreAllUpdates);
    AppPrefsProvider.Helper.update(this,app,app.getPrefs(this));
    return true;
  }
 else   if (item.getItemId() == R.id.action_ignore_this) {
    if (app.getPrefs(this).ignoreThisUpdate >= app.suggestedVersionCode) {
      app.getPrefs(this).ignoreThisUpdate=0;
    }
 else {
      app.getPrefs(this).ignoreThisUpdate=app.suggestedVersionCode;
    }
    item.setChecked(app.getPrefs(this).ignoreThisUpdate > 0);
    AppPrefsProvider.Helper.update(this,app,app.getPrefs(this));
    return true;
  }
 else   if (item.getItemId() == android.R.id.home) {
    onBackPressed();
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9591630104623692
165212,"/** 
 * If passed null, this will show a message to the user (""Could not find app ..."" or something like that) and then finish the activity.
 */
private void setApp(App newApp){
  if (newApp == null) {
    Toast.makeText(this,R.string.no_such_app,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  app=newApp;
  AppUpdateStatusManager appUpdateStatusManager=AppUpdateStatusManager.getInstance(this);
  for (  AppUpdateStatusManager.AppUpdateStatus status : appUpdateStatusManager.getByPackageName(app.packageName)) {
    if (status.status == AppUpdateStatusManager.Status.Installed) {
      appUpdateStatusManager.removeApk(status.getUniqueKey());
    }
  }
}","/** 
 * If passed null, this will show a message to the user (""Could not find app ..."" or something like that) and then finish the activity.
 */
private void setApp(App newApp){
  if (newApp == null) {
    Toast.makeText(this,R.string.no_such_app,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  app=newApp;
  AppUpdateStatusManager ausm=AppUpdateStatusManager.getInstance(this);
  for (  AppUpdateStatusManager.AppUpdateStatus status : ausm.getByPackageName(app.packageName)) {
    if (status.status == AppUpdateStatusManager.Status.Installed) {
      ausm.removeApk(status.getUniqueKey());
    }
  }
}",0.8625
165213,"/** 
 * Some notifications (like ""downloading"" and ""installed"") are not shown for this app if it is open in app details. When closing, we need to refresh the notifications, so they are displayed again.
 */
private void updateNotificationsForApp(){
  if (app != null) {
    AppUpdateStatusManager appUpdateStatusManager=AppUpdateStatusManager.getInstance(this);
    for (    AppUpdateStatusManager.AppUpdateStatus status : appUpdateStatusManager.getByPackageName(app.packageName)) {
      if (status.status == AppUpdateStatusManager.Status.Installed) {
        appUpdateStatusManager.removeApk(status.getUniqueKey());
      }
 else {
        appUpdateStatusManager.refreshApk(status.getUniqueKey());
      }
    }
  }
}","/** 
 * Some notifications (like ""downloading"" and ""installed"") are not shown for this app if it is open in app details.  When closing, we need to refresh the notifications, so they are displayed again.
 */
private void updateNotificationsForApp(){
  if (app != null) {
    AppUpdateStatusManager ausm=AppUpdateStatusManager.getInstance(this);
    for (    AppUpdateStatusManager.AppUpdateStatus status : ausm.getByPackageName(app.packageName)) {
      if (status.status == AppUpdateStatusManager.Status.Installed) {
        ausm.removeApk(status.getUniqueKey());
      }
 else {
        ausm.refreshApk(status.getUniqueKey());
      }
    }
  }
}",0.7794871794871795
165214,"private void updateApkInternal(@NonNull AppUpdateStatus entry,@NonNull Status status,PendingIntent intent){
  Utils.debugLog(LOGTAG,""String_Node_Str"" + entry.apk.apkName + ""String_Node_Str""+ status.name());
  boolean isStatusUpdate=(entry.status != status);
  entry.status=status;
  entry.intent=intent;
  if (entry.intent == null) {
    entry.intent=getContentIntent(entry);
  }
  notifyChange(entry,isStatusUpdate);
}","private void updateApkInternal(@NonNull AppUpdateStatus entry,@NonNull Status status,PendingIntent intent){
  Utils.debugLog(LOGTAG,""String_Node_Str"" + entry.apk.apkName + ""String_Node_Str""+ status.name());
  boolean isStatusUpdate=entry.status != status;
  entry.status=status;
  entry.intent=intent;
  if (entry.intent == null) {
    entry.intent=getContentIntent(entry);
  }
  notifyChange(entry,isStatusUpdate);
}",0.9976076555023924
165215,"private boolean shouldIgnoreEntry(AppUpdateStatusManager.AppUpdateStatus entry){
  if (entry.status == AppUpdateStatusManager.Status.Unknown)   return true;
 else   if ((entry.status == AppUpdateStatusManager.Status.Downloading || entry.status == AppUpdateStatusManager.Status.ReadyToInstall || entry.status == AppUpdateStatusManager.Status.InstallError) && (AppDetails.isAppVisible(entry.app.packageName) || AppDetails2.isAppVisible(entry.app.packageName)))   return true;
  return false;
}","private boolean shouldIgnoreEntry(AppUpdateStatusManager.AppUpdateStatus entry){
  if (entry.status == AppUpdateStatusManager.Status.Unknown) {
    return true;
  }
 else   if ((entry.status == AppUpdateStatusManager.Status.Downloading || entry.status == AppUpdateStatusManager.Status.ReadyToInstall || entry.status == AppUpdateStatusManager.Status.InstallError) && (AppDetails.isAppVisible(entry.app.packageName) || AppDetails2.isAppVisible(entry.app.packageName))) {
    return true;
  }
  return false;
}",0.9839679358717436
165216,"private Point getLargeIconSize(){
  int w;
  int h;
  if (Build.VERSION.SDK_INT >= 11) {
    w=context.getResources().getDimensionPixelSize(android.R.dimen.notification_large_icon_width);
    h=context.getResources().getDimensionPixelSize(android.R.dimen.notification_large_icon_height);
  }
 else {
    w=h=context.getResources().getDimensionPixelSize(android.R.dimen.app_icon_size);
  }
  return new Point(w,h);
}","private Point getLargeIconSize(){
  int w;
  int h;
  if (Build.VERSION.SDK_INT >= 11) {
    w=context.getResources().getDimensionPixelSize(android.R.dimen.notification_large_icon_width);
    h=context.getResources().getDimensionPixelSize(android.R.dimen.notification_large_icon_height);
  }
 else {
    w=context.getResources().getDimensionPixelSize(android.R.dimen.app_icon_size);
    h=w;
  }
  return new Point(w,h);
}",0.986857825567503
165217,"@Override public void onReceive(Context context,Intent intent){
switch (intent.getAction()) {
case AppUpdateStatusManager.BROADCAST_APPSTATUS_LIST_CHANGED:
    notificationManager.cancelAll();
  updateStatusLists();
createSummaryNotifications();
for (AppUpdateStatusManager.AppUpdateStatus entry : appUpdateStatusManager.getAll()) {
createNotification(entry);
}
break;
case AppUpdateStatusManager.BROADCAST_APPSTATUS_ADDED:
{
updateStatusLists();
createSummaryNotifications();
String url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
AppUpdateStatusManager.AppUpdateStatus entry=appUpdateStatusManager.get(url);
if (entry != null) {
createNotification(entry);
}
break;
}
case AppUpdateStatusManager.BROADCAST_APPSTATUS_CHANGED:
{
String url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
AppUpdateStatusManager.AppUpdateStatus entry=appUpdateStatusManager.get(url);
updateStatusLists();
if (entry != null) {
createNotification(entry);
}
if (intent.getBooleanExtra(AppUpdateStatusManager.EXTRA_IS_STATUS_UPDATE,false)) {
createSummaryNotifications();
}
break;
}
case AppUpdateStatusManager.BROADCAST_APPSTATUS_REMOVED:
{
String url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
notificationManager.cancel(url,NOTIFY_ID_INSTALLED);
notificationManager.cancel(url,NOTIFY_ID_UPDATES);
updateStatusLists();
createSummaryNotifications();
break;
}
}
}","@Override public void onReceive(Context context,Intent intent){
  AppUpdateStatusManager.AppUpdateStatus entry;
  String url;
switch (intent.getAction()) {
case AppUpdateStatusManager.BROADCAST_APPSTATUS_LIST_CHANGED:
    notificationManager.cancelAll();
  updateStatusLists();
createSummaryNotifications();
for (AppUpdateStatusManager.AppUpdateStatus appUpdateStatus : appUpdateStatusManager.getAll()) {
createNotification(appUpdateStatus);
}
break;
case AppUpdateStatusManager.BROADCAST_APPSTATUS_ADDED:
updateStatusLists();
createSummaryNotifications();
url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
entry=appUpdateStatusManager.get(url);
if (entry != null) {
createNotification(entry);
}
break;
case AppUpdateStatusManager.BROADCAST_APPSTATUS_CHANGED:
url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
entry=appUpdateStatusManager.get(url);
updateStatusLists();
if (entry != null) {
createNotification(entry);
}
if (intent.getBooleanExtra(AppUpdateStatusManager.EXTRA_IS_STATUS_UPDATE,false)) {
createSummaryNotifications();
}
break;
case AppUpdateStatusManager.BROADCAST_APPSTATUS_REMOVED:
url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
notificationManager.cancel(url,NOTIFY_ID_INSTALLED);
notificationManager.cancel(url,NOTIFY_ID_UPDATES);
updateStatusLists();
createSummaryNotifications();
break;
}
}",0.9224608663997088
165218,"private Notification createUpdateSummaryNotification(ArrayList<AppUpdateStatusManager.AppUpdateStatus> updates){
  String title=context.getString(R.string.notification_summary_updates,updates.size());
  StringBuilder text=new StringBuilder();
  NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
  inboxStyle.setBigContentTitle(title);
  for (int i=0; i < MAX_UPDATES_TO_SHOW && i < updates.size(); i++) {
    AppUpdateStatusManager.AppUpdateStatus entry=updates.get(i);
    App app=entry.app;
    AppUpdateStatusManager.Status status=entry.status;
    String content=getMultiItemContentString(app,status);
    SpannableStringBuilder sb=new SpannableStringBuilder(app.name);
    sb.setSpan(new StyleSpan(Typeface.BOLD),0,sb.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
    sb.append(""String_Node_Str"");
    sb.append(content);
    inboxStyle.addLine(sb);
    if (text.length() > 0)     text.append(""String_Node_Str"");
    text.append(app.name);
  }
  if (updates.size() > MAX_UPDATES_TO_SHOW) {
    int diff=updates.size() - MAX_UPDATES_TO_SHOW;
    inboxStyle.setSummaryText(context.getString(R.string.notification_summary_more,diff));
  }
  Intent intentObject=new Intent(context,FDroid.class);
  PendingIntent piAction=PendingIntent.getActivity(context,0,intentObject,0);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setAutoCancel(!useStackedNotifications()).setSmallIcon(R.drawable.ic_launcher).setColor(ContextCompat.getColor(context,R.color.fdroid_blue)).setContentTitle(title).setContentText(text).setContentIntent(piAction).setLocalOnly(true).setVisibility(NotificationCompat.VISIBILITY_SECRET).setStyle(inboxStyle);
  if (useStackedNotifications()) {
    builder.setGroup(GROUP_UPDATES).setGroupSummary(true);
  }
  Intent intentDeleted=new Intent(BROADCAST_NOTIFICATIONS_ALL_UPDATES_CLEARED);
  PendingIntent piDeleted=PendingIntent.getBroadcast(context,0,intentDeleted,0);
  builder.setDeleteIntent(piDeleted);
  return builder.build();
}","private Notification createUpdateSummaryNotification(ArrayList<AppUpdateStatusManager.AppUpdateStatus> updates){
  String title=context.getString(R.string.notification_summary_updates,updates.size());
  StringBuilder text=new StringBuilder();
  NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
  inboxStyle.setBigContentTitle(title);
  for (int i=0; i < MAX_UPDATES_TO_SHOW && i < updates.size(); i++) {
    AppUpdateStatusManager.AppUpdateStatus entry=updates.get(i);
    App app=entry.app;
    AppUpdateStatusManager.Status status=entry.status;
    String content=getMultiItemContentString(app,status);
    SpannableStringBuilder sb=new SpannableStringBuilder(app.name);
    sb.setSpan(new StyleSpan(Typeface.BOLD),0,sb.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
    sb.append(""String_Node_Str"");
    sb.append(content);
    inboxStyle.addLine(sb);
    if (text.length() > 0) {
      text.append(""String_Node_Str"");
    }
    text.append(app.name);
  }
  if (updates.size() > MAX_UPDATES_TO_SHOW) {
    int diff=updates.size() - MAX_UPDATES_TO_SHOW;
    inboxStyle.setSummaryText(context.getString(R.string.notification_summary_more,diff));
  }
  Intent intentObject=new Intent(context,FDroid.class);
  PendingIntent piAction=PendingIntent.getActivity(context,0,intentObject,0);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setAutoCancel(!useStackedNotifications()).setSmallIcon(R.drawable.ic_launcher).setColor(ContextCompat.getColor(context,R.color.fdroid_blue)).setContentTitle(title).setContentText(text).setContentIntent(piAction).setLocalOnly(true).setVisibility(NotificationCompat.VISIBILITY_SECRET).setStyle(inboxStyle);
  if (useStackedNotifications()) {
    builder.setGroup(GROUP_UPDATES).setGroupSummary(true);
  }
  Intent intentDeleted=new Intent(BROADCAST_NOTIFICATIONS_ALL_UPDATES_CLEARED);
  PendingIntent piDeleted=PendingIntent.getBroadcast(context,0,intentDeleted,0);
  builder.setDeleteIntent(piDeleted);
  return builder.build();
}",0.9975149105367792
165219,"private Notification createInstalledSummaryNotification(ArrayList<AppUpdateStatusManager.AppUpdateStatus> installed){
  String title=context.getString(R.string.notification_summary_installed,installed.size());
  StringBuilder text=new StringBuilder();
  NotificationCompat.BigTextStyle bigTextStyle=new NotificationCompat.BigTextStyle();
  bigTextStyle.setBigContentTitle(title);
  for (int i=0; i < MAX_INSTALLED_TO_SHOW && i < installed.size(); i++) {
    AppUpdateStatusManager.AppUpdateStatus entry=installed.get(i);
    App app=entry.app;
    if (text.length() > 0)     text.append(""String_Node_Str"");
    text.append(app.name);
  }
  bigTextStyle.bigText(text);
  if (installed.size() > MAX_INSTALLED_TO_SHOW) {
    int diff=installed.size() - MAX_INSTALLED_TO_SHOW;
    bigTextStyle.setSummaryText(context.getString(R.string.notification_summary_more,diff));
  }
  Intent intentObject=new Intent(context,FDroid.class);
  PendingIntent piAction=PendingIntent.getActivity(context,0,intentObject,0);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setAutoCancel(!useStackedNotifications()).setSmallIcon(R.drawable.ic_launcher).setColor(ContextCompat.getColor(context,R.color.fdroid_blue)).setContentTitle(title).setContentText(text).setContentIntent(piAction).setLocalOnly(true).setVisibility(NotificationCompat.VISIBILITY_SECRET);
  if (useStackedNotifications()) {
    builder.setGroup(GROUP_INSTALLED).setGroupSummary(true);
  }
  Intent intentDeleted=new Intent(BROADCAST_NOTIFICATIONS_ALL_INSTALLED_CLEARED);
  PendingIntent piDeleted=PendingIntent.getBroadcast(context,0,intentDeleted,0);
  builder.setDeleteIntent(piDeleted);
  return builder.build();
}","private Notification createInstalledSummaryNotification(ArrayList<AppUpdateStatusManager.AppUpdateStatus> installed){
  String title=context.getString(R.string.notification_summary_installed,installed.size());
  StringBuilder text=new StringBuilder();
  NotificationCompat.BigTextStyle bigTextStyle=new NotificationCompat.BigTextStyle();
  bigTextStyle.setBigContentTitle(title);
  for (int i=0; i < MAX_INSTALLED_TO_SHOW && i < installed.size(); i++) {
    AppUpdateStatusManager.AppUpdateStatus entry=installed.get(i);
    App app=entry.app;
    if (text.length() > 0) {
      text.append(""String_Node_Str"");
    }
    text.append(app.name);
  }
  bigTextStyle.bigText(text);
  if (installed.size() > MAX_INSTALLED_TO_SHOW) {
    int diff=installed.size() - MAX_INSTALLED_TO_SHOW;
    bigTextStyle.setSummaryText(context.getString(R.string.notification_summary_more,diff));
  }
  Intent intentObject=new Intent(context,FDroid.class);
  PendingIntent piAction=PendingIntent.getActivity(context,0,intentObject,0);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setAutoCancel(!useStackedNotifications()).setSmallIcon(R.drawable.ic_launcher).setColor(ContextCompat.getColor(context,R.color.fdroid_blue)).setContentTitle(title).setContentText(text).setContentIntent(piAction).setLocalOnly(true).setVisibility(NotificationCompat.VISIBILITY_SECRET);
  if (useStackedNotifications()) {
    builder.setGroup(GROUP_INSTALLED).setGroupSummary(true);
  }
  Intent intentDeleted=new Intent(BROADCAST_NOTIFICATIONS_ALL_INSTALLED_CLEARED);
  PendingIntent piDeleted=PendingIntent.getBroadcast(context,0,intentDeleted,0);
  builder.setDeleteIntent(piDeleted);
  return builder.build();
}",0.997055359246172
165220,"NotificationHelper(Context context){
  this.context=context;
  appUpdateStatusManager=AppUpdateStatusManager.getInstance(context);
  notificationManager=NotificationManagerCompat.from(context);
  displayImageOptions=new DisplayImageOptions.Builder().cacheInMemory(true).cacheOnDisk(true).imageScaleType(ImageScaleType.NONE).bitmapConfig(Bitmap.Config.RGB_565).build();
  IntentFilter filter=new IntentFilter();
  filter.addAction(BROADCAST_NOTIFICATIONS_ALL_UPDATES_CLEARED);
  filter.addAction(BROADCAST_NOTIFICATIONS_ALL_INSTALLED_CLEARED);
  filter.addAction(BROADCAST_NOTIFICATIONS_UPDATE_CLEARED);
  filter.addAction(BROADCAST_NOTIFICATIONS_INSTALLED_CLEARED);
  BroadcastReceiver receiverNotificationsCleared=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
switch (intent.getAction()) {
case BROADCAST_NOTIFICATIONS_ALL_UPDATES_CLEARED:
        appUpdateStatusManager.clearAllUpdates();
      break;
case BROADCAST_NOTIFICATIONS_ALL_INSTALLED_CLEARED:
    appUpdateStatusManager.clearAllInstalled();
  break;
case BROADCAST_NOTIFICATIONS_UPDATE_CLEARED:
AppUpdateStatusManager.AppUpdateStatus appUpdateStatus=appUpdateStatusManager.get(intent.getStringExtra(EXTRA_NOTIFICATION_KEY));
if (appUpdateStatus != null && appUpdateStatus.status == AppUpdateStatusManager.Status.InstallError) {
appUpdateStatusManager.removeApk(intent.getStringExtra(EXTRA_NOTIFICATION_KEY));
}
break;
case BROADCAST_NOTIFICATIONS_INSTALLED_CLEARED:
appUpdateStatusManager.removeApk(intent.getStringExtra(EXTRA_NOTIFICATION_KEY));
break;
}
}
}
;
context.registerReceiver(receiverNotificationsCleared,filter);
filter=new IntentFilter();
filter.addAction(AppUpdateStatusManager.BROADCAST_APPSTATUS_LIST_CHANGED);
filter.addAction(AppUpdateStatusManager.BROADCAST_APPSTATUS_ADDED);
filter.addAction(AppUpdateStatusManager.BROADCAST_APPSTATUS_CHANGED);
filter.addAction(AppUpdateStatusManager.BROADCAST_APPSTATUS_REMOVED);
BroadcastReceiver receiverAppStatusChanges=new BroadcastReceiver(){
@Override public void onReceive(Context context,Intent intent){
switch (intent.getAction()) {
case AppUpdateStatusManager.BROADCAST_APPSTATUS_LIST_CHANGED:
notificationManager.cancelAll();
updateStatusLists();
createSummaryNotifications();
for (AppUpdateStatusManager.AppUpdateStatus entry : appUpdateStatusManager.getAll()) {
createNotification(entry);
}
break;
case AppUpdateStatusManager.BROADCAST_APPSTATUS_ADDED:
{
updateStatusLists();
createSummaryNotifications();
String url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
AppUpdateStatusManager.AppUpdateStatus entry=appUpdateStatusManager.get(url);
if (entry != null) {
createNotification(entry);
}
break;
}
case AppUpdateStatusManager.BROADCAST_APPSTATUS_CHANGED:
{
String url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
AppUpdateStatusManager.AppUpdateStatus entry=appUpdateStatusManager.get(url);
updateStatusLists();
if (entry != null) {
createNotification(entry);
}
if (intent.getBooleanExtra(AppUpdateStatusManager.EXTRA_IS_STATUS_UPDATE,false)) {
createSummaryNotifications();
}
break;
}
case AppUpdateStatusManager.BROADCAST_APPSTATUS_REMOVED:
{
String url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
notificationManager.cancel(url,NOTIFY_ID_INSTALLED);
notificationManager.cancel(url,NOTIFY_ID_UPDATES);
updateStatusLists();
createSummaryNotifications();
break;
}
}
}
}
;
LocalBroadcastManager.getInstance(context).registerReceiver(receiverAppStatusChanges,filter);
}","NotificationHelper(Context context){
  this.context=context;
  appUpdateStatusManager=AppUpdateStatusManager.getInstance(context);
  notificationManager=NotificationManagerCompat.from(context);
  displayImageOptions=new DisplayImageOptions.Builder().cacheInMemory(true).cacheOnDisk(true).imageScaleType(ImageScaleType.NONE).bitmapConfig(Bitmap.Config.RGB_565).build();
  IntentFilter filter=new IntentFilter();
  filter.addAction(BROADCAST_NOTIFICATIONS_ALL_UPDATES_CLEARED);
  filter.addAction(BROADCAST_NOTIFICATIONS_ALL_INSTALLED_CLEARED);
  filter.addAction(BROADCAST_NOTIFICATIONS_UPDATE_CLEARED);
  filter.addAction(BROADCAST_NOTIFICATIONS_INSTALLED_CLEARED);
  BroadcastReceiver receiverNotificationsCleared=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
switch (intent.getAction()) {
case BROADCAST_NOTIFICATIONS_ALL_UPDATES_CLEARED:
        appUpdateStatusManager.clearAllUpdates();
      break;
case BROADCAST_NOTIFICATIONS_ALL_INSTALLED_CLEARED:
    appUpdateStatusManager.clearAllInstalled();
  break;
case BROADCAST_NOTIFICATIONS_UPDATE_CLEARED:
AppUpdateStatusManager.AppUpdateStatus appUpdateStatus=appUpdateStatusManager.get(intent.getStringExtra(EXTRA_NOTIFICATION_KEY));
if (appUpdateStatus != null && appUpdateStatus.status == AppUpdateStatusManager.Status.InstallError) {
appUpdateStatusManager.removeApk(intent.getStringExtra(EXTRA_NOTIFICATION_KEY));
}
break;
case BROADCAST_NOTIFICATIONS_INSTALLED_CLEARED:
appUpdateStatusManager.removeApk(intent.getStringExtra(EXTRA_NOTIFICATION_KEY));
break;
}
}
}
;
context.registerReceiver(receiverNotificationsCleared,filter);
filter=new IntentFilter();
filter.addAction(AppUpdateStatusManager.BROADCAST_APPSTATUS_LIST_CHANGED);
filter.addAction(AppUpdateStatusManager.BROADCAST_APPSTATUS_ADDED);
filter.addAction(AppUpdateStatusManager.BROADCAST_APPSTATUS_CHANGED);
filter.addAction(AppUpdateStatusManager.BROADCAST_APPSTATUS_REMOVED);
BroadcastReceiver receiverAppStatusChanges=new BroadcastReceiver(){
@Override public void onReceive(Context context,Intent intent){
AppUpdateStatusManager.AppUpdateStatus entry;
String url;
switch (intent.getAction()) {
case AppUpdateStatusManager.BROADCAST_APPSTATUS_LIST_CHANGED:
notificationManager.cancelAll();
updateStatusLists();
createSummaryNotifications();
for (AppUpdateStatusManager.AppUpdateStatus appUpdateStatus : appUpdateStatusManager.getAll()) {
createNotification(appUpdateStatus);
}
break;
case AppUpdateStatusManager.BROADCAST_APPSTATUS_ADDED:
updateStatusLists();
createSummaryNotifications();
url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
entry=appUpdateStatusManager.get(url);
if (entry != null) {
createNotification(entry);
}
break;
case AppUpdateStatusManager.BROADCAST_APPSTATUS_CHANGED:
url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
entry=appUpdateStatusManager.get(url);
updateStatusLists();
if (entry != null) {
createNotification(entry);
}
if (intent.getBooleanExtra(AppUpdateStatusManager.EXTRA_IS_STATUS_UPDATE,false)) {
createSummaryNotifications();
}
break;
case AppUpdateStatusManager.BROADCAST_APPSTATUS_REMOVED:
url=intent.getStringExtra(AppUpdateStatusManager.EXTRA_APK_URL);
notificationManager.cancel(url,NOTIFY_ID_INSTALLED);
notificationManager.cancel(url,NOTIFY_ID_UPDATES);
updateStatusLists();
createSummaryNotifications();
break;
}
}
}
;
LocalBroadcastManager.getInstance(context).registerReceiver(receiverAppStatusChanges,filter);
}",0.9424924709594148
165221,"private Notification createUpdateNotification(AppUpdateStatusManager.AppUpdateStatus entry){
  App app=entry.app;
  AppUpdateStatusManager.Status status=entry.status;
  int iconSmall=R.drawable.ic_launcher;
  Bitmap iconLarge=getLargeIconForEntry(entry);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setAutoCancel(true).setContentTitle(getSingleItemTitleString(app,status)).setContentText(getSingleItemContentString(app,status)).setSmallIcon(iconSmall).setColor(ContextCompat.getColor(context,R.color.fdroid_blue)).setLargeIcon(iconLarge).setLocalOnly(true).setVisibility(NotificationCompat.VISIBILITY_SECRET).setContentIntent(entry.intent);
  if (useStackedNotifications()) {
    builder.setGroup(GROUP_UPDATES);
  }
  NotificationCompat.Action action=getAction(entry);
  if (action != null) {
    builder.addAction(action);
  }
  if (status == AppUpdateStatusManager.Status.Downloading) {
    if (entry.progressMax == 0)     builder.setProgress(100,0,true);
 else     builder.setProgress(entry.progressMax,entry.progressCurrent,false);
  }
 else   if (status == AppUpdateStatusManager.Status.Installing) {
    builder.setProgress(100,0,true);
  }
  Intent intentDeleted=new Intent(BROADCAST_NOTIFICATIONS_UPDATE_CLEARED);
  intentDeleted.putExtra(EXTRA_NOTIFICATION_KEY,entry.getUniqueKey());
  PendingIntent piDeleted=PendingIntent.getBroadcast(context,0,intentDeleted,0);
  builder.setDeleteIntent(piDeleted);
  return builder.build();
}","private Notification createUpdateNotification(AppUpdateStatusManager.AppUpdateStatus entry){
  App app=entry.app;
  AppUpdateStatusManager.Status status=entry.status;
  int iconSmall=R.drawable.ic_launcher;
  Bitmap iconLarge=getLargeIconForEntry(entry);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setAutoCancel(true).setContentTitle(getSingleItemTitleString(app,status)).setContentText(getSingleItemContentString(app,status)).setSmallIcon(iconSmall).setColor(ContextCompat.getColor(context,R.color.fdroid_blue)).setLargeIcon(iconLarge).setLocalOnly(true).setVisibility(NotificationCompat.VISIBILITY_SECRET).setContentIntent(entry.intent);
  if (useStackedNotifications()) {
    builder.setGroup(GROUP_UPDATES);
  }
  NotificationCompat.Action action=getAction(entry);
  if (action != null) {
    builder.addAction(action);
  }
  if (status == AppUpdateStatusManager.Status.Downloading) {
    if (entry.progressMax == 0) {
      builder.setProgress(100,0,true);
    }
 else {
      builder.setProgress(entry.progressMax,entry.progressCurrent,false);
    }
  }
 else   if (status == AppUpdateStatusManager.Status.Installing) {
    builder.setProgress(100,0,true);
  }
  Intent intentDeleted=new Intent(BROADCAST_NOTIFICATIONS_UPDATE_CLEARED);
  intentDeleted.putExtra(EXTRA_NOTIFICATION_KEY,entry.getUniqueKey());
  PendingIntent piDeleted=PendingIntent.getBroadcast(context,0,intentDeleted,0);
  builder.setDeleteIntent(piDeleted);
  return builder.build();
}",0.99055967633176
165222,"@Override public void run(){
  if (descriptionView.getLineCount() < HeaderViewHolder.MAX_LINES) {
    descriptionMoreView.setVisibility(View.GONE);
  }
 else {
    descriptionMoreView.setVisibility(View.VISIBLE);
  }
}","@Override public void run(){
  if (descriptionView.getLineCount() <= HeaderViewHolder.MAX_LINES) {
    descriptionMoreView.setVisibility(View.GONE);
  }
 else {
    descriptionMoreView.setVisibility(View.VISIBLE);
  }
}",0.9977116704805492
165223,"@Override public void onCreate(){
  super.onCreate();
  if (BuildConfig.DEBUG) {
    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
    StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectAll().penaltyLog().build());
  }
  updateLanguage();
  ACRA.init(this);
  int pid=android.os.Process.myPid();
  ActivityManager manager=(ActivityManager)this.getSystemService(Context.ACTIVITY_SERVICE);
  for (  RunningAppProcessInfo processInfo : manager.getRunningAppProcesses()) {
    if (processInfo.pid == pid && ""String_Node_Str"".equals(processInfo.processName)) {
      return;
    }
  }
  PRNGFixes.apply();
  Preferences.setup(this);
  curTheme=Preferences.get().getTheme();
  Preferences.get().configureProxy();
  InstalledAppProviderService.compareToPackageManager(this);
  Preferences.get().registerAppsRequiringRootChangeListener(new Preferences.ChangeListener(){
    @Override public void onPreferenceChange(){
      getContentResolver().notifyChange(AppProvider.getContentUri(),null);
    }
  }
);
  Preferences.get().registerAppsRequiringAntiFeaturesChangeListener(new Preferences.ChangeListener(){
    @Override public void onPreferenceChange(){
      getContentResolver().notifyChange(AppProvider.getContentUri(),null);
    }
  }
);
  URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory(){
    @Override public URLStreamHandler createURLStreamHandler(    String protocol){
      return TextUtils.equals(protocol,""String_Node_Str"") ? new Handler() : null;
    }
  }
);
  final Context context=this;
  Preferences.get().registerUnstableUpdatesChangeListener(new Preferences.ChangeListener(){
    @Override public void onPreferenceChange(){
      AppProvider.Helper.calcDetailsFromIndex(context);
    }
  }
);
  CleanCacheService.schedule(this);
  UpdateService.schedule(getApplicationContext());
  bluetoothAdapter=getBluetoothAdapter();
  ImageLoaderConfiguration config=new ImageLoaderConfiguration.Builder(getApplicationContext()).imageDownloader(new IconDownloader(getApplicationContext())).diskCache(new LimitedAgeDiskCache(Utils.getIconsCacheDir(this),null,new FileNameGenerator(){
    @Override public String generate(    String imageUri){
      return imageUri.substring(imageUri.lastIndexOf('/') + 1);
    }
  }
,2592000)).threadPoolSize(4).threadPriority(Thread.NORM_PRIORITY - 2).build();
  ImageLoader.getInstance().init(config);
  FDroidApp.initWifiSettings();
  startService(new Intent(this,WifiStateChangeService.class));
  Preferences.get().registerLocalRepoHttpsListeners(new ChangeListener(){
    @Override public void onPreferenceChange(){
      startService(new Intent(FDroidApp.this,WifiStateChangeService.class));
    }
  }
);
  configureTor(Preferences.get().isTorEnabled());
  if (Preferences.get().isKeepingInstallHistory()) {
    InstallHistoryService.register(this);
  }
  String packageName=getString(R.string.install_history_reader_packageName);
  String unset=getString(R.string.install_history_reader_packageName_UNSET);
  if (!TextUtils.equals(packageName,unset)) {
    int modeFlags=Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    if (Build.VERSION.SDK_INT >= 19) {
      modeFlags|=Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION;
    }
    grantUriPermission(packageName,InstallHistoryService.LOG_URI,modeFlags);
  }
}","@Override public void onCreate(){
  super.onCreate();
  if (BuildConfig.DEBUG) {
    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
    StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectAll().penaltyLog().build());
  }
  updateLanguage();
  ACRA.init(this);
  if (isAcraProcess()) {
    return;
  }
  PRNGFixes.apply();
  Preferences.setup(this);
  curTheme=Preferences.get().getTheme();
  Preferences.get().configureProxy();
  InstalledAppProviderService.compareToPackageManager(this);
  Preferences.get().registerAppsRequiringRootChangeListener(new Preferences.ChangeListener(){
    @Override public void onPreferenceChange(){
      getContentResolver().notifyChange(AppProvider.getContentUri(),null);
    }
  }
);
  Preferences.get().registerAppsRequiringAntiFeaturesChangeListener(new Preferences.ChangeListener(){
    @Override public void onPreferenceChange(){
      getContentResolver().notifyChange(AppProvider.getContentUri(),null);
    }
  }
);
  URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory(){
    @Override public URLStreamHandler createURLStreamHandler(    String protocol){
      return TextUtils.equals(protocol,""String_Node_Str"") ? new Handler() : null;
    }
  }
);
  final Context context=this;
  Preferences.get().registerUnstableUpdatesChangeListener(new Preferences.ChangeListener(){
    @Override public void onPreferenceChange(){
      AppProvider.Helper.calcDetailsFromIndex(context);
    }
  }
);
  CleanCacheService.schedule(this);
  UpdateService.schedule(getApplicationContext());
  bluetoothAdapter=getBluetoothAdapter();
  ImageLoaderConfiguration config=new ImageLoaderConfiguration.Builder(getApplicationContext()).imageDownloader(new IconDownloader(getApplicationContext())).diskCache(new LimitedAgeDiskCache(Utils.getIconsCacheDir(this),null,new FileNameGenerator(){
    @Override public String generate(    String imageUri){
      return imageUri.substring(imageUri.lastIndexOf('/') + 1);
    }
  }
,2592000)).threadPoolSize(4).threadPriority(Thread.NORM_PRIORITY - 2).build();
  ImageLoader.getInstance().init(config);
  FDroidApp.initWifiSettings();
  startService(new Intent(this,WifiStateChangeService.class));
  Preferences.get().registerLocalRepoHttpsListeners(new ChangeListener(){
    @Override public void onPreferenceChange(){
      startService(new Intent(FDroidApp.this,WifiStateChangeService.class));
    }
  }
);
  configureTor(Preferences.get().isTorEnabled());
  if (Preferences.get().isKeepingInstallHistory()) {
    InstallHistoryService.register(this);
  }
  String packageName=getString(R.string.install_history_reader_packageName);
  String unset=getString(R.string.install_history_reader_packageName_UNSET);
  if (!TextUtils.equals(packageName,unset)) {
    int modeFlags=Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
    if (Build.VERSION.SDK_INT >= 19) {
      modeFlags|=Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION;
    }
    grantUriPermission(packageName,InstallHistoryService.LOG_URI,modeFlags);
  }
}",0.9501475384376455
165224,"private void initTable(){
  final SQLiteDatabase db=db();
  ensureTempTableDetached(db);
  db.execSQL(""String_Node_Str"" + DB);
  db.execSQL(""String_Node_Str"" + DB + ""String_Node_Str""+ getTableName()+ ""String_Node_Str""+ AppMetadataTable.NAME);
  db.execSQL(""String_Node_Str"" + DB + ""String_Node_Str""+ getTableName()+ ""String_Node_Str""+ AppMetadataTable.Cols.PACKAGE_NAME+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + DB + ""String_Node_Str""+ getTableName()+ ""String_Node_Str""+ AppMetadataTable.Cols.UPSTREAM_VERSION_CODE+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + DB + ""String_Node_Str""+ getTableName()+ ""String_Node_Str""+ AppMetadataTable.Cols.IS_COMPATIBLE+ ""String_Node_Str"");
}","private void initTable(){
  final SQLiteDatabase db=db();
  ensureTempTableDetached(db);
  db.execSQL(""String_Node_Str"" + DB);
  db.execSQL(DBHelper.CREATE_TABLE_APP.replaceFirst(AppMetadataTable.NAME,DB + ""String_Node_Str"" + getTableName()));
  db.execSQL(""String_Node_Str"" + DB + ""String_Node_Str""+ getTableName()+ ""String_Node_Str""+ AppMetadataTable.NAME);
  db.execSQL(""String_Node_Str"" + DB + ""String_Node_Str""+ getTableName()+ ""String_Node_Str""+ AppMetadataTable.Cols.PACKAGE_NAME+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + DB + ""String_Node_Str""+ getTableName()+ ""String_Node_Str""+ AppMetadataTable.Cols.UPSTREAM_VERSION_CODE+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + DB + ""String_Node_Str""+ getTableName()+ ""String_Node_Str""+ AppMetadataTable.Cols.IS_COMPATIBLE+ ""String_Node_Str"");
}",0.9226701916721743
165225,"/** 
 * Recursively delete files in   {@code f} that were last used{@code millisAgo} milliseconds ago.  On {@code android-21} and newer, thisis based on the last access of the file, on older Android versions, it is based on the last time the file was modified, e.g. downloaded.
 * @param f         The file or directory to clean
 * @param millisAgo The number of milliseconds old that marks a file for deletion.
 */
public static void clearOldFiles(File f,long millisAgo){
  if (f == null) {
    return;
  }
  long olderThan=System.currentTimeMillis() - millisAgo;
  if (f.isDirectory()) {
    File[] files=f.listFiles();
    if (files == null) {
      return;
    }
    for (    File file : files) {
      clearOldFiles(file,millisAgo);
    }
    f.delete();
  }
 else   if (Build.VERSION.SDK_INT < 21) {
    if (FileUtils.isFileOlder(f,olderThan)) {
      f.delete();
    }
  }
 else {
    CleanCacheService21.deleteIfOld(f,millisAgo);
  }
}","/** 
 * Recursively delete files in   {@code f} that were last used{@code millisAgo} milliseconds ago.  On {@code android-21} and newer, thisis based on the last access of the file, on older Android versions, it is based on the last time the file was modified, e.g. downloaded.
 * @param f         The file or directory to clean
 * @param millisAgo The number of milliseconds old that marks a file for deletion.
 */
public static void clearOldFiles(File f,long millisAgo){
  if (f == null) {
    return;
  }
  long olderThan=System.currentTimeMillis() - millisAgo;
  if (f.isDirectory()) {
    File[] files=f.listFiles();
    if (files == null) {
      return;
    }
    for (    File file : files) {
      clearOldFiles(file,millisAgo);
    }
    f.delete();
  }
 else   if (Build.VERSION.SDK_INT < 21) {
    if (FileUtils.isFileOlder(f,olderThan)) {
      f.delete();
    }
  }
 else {
    CleanCacheService21.deleteIfOld(f,olderThan);
  }
}",0.9904559915164368
165226,"/** 
 * Recursively delete files in   {@code dir} that were last used{@code millisAgo} milliseconds ago.  On {@code android-21} and newer, thisis based on the last access of the file, on older Android versions, it is based on the last time the file was modified, e.g. downloaded.
 * @param dir        The directory to recurse in
 * @param millisAgo The number of milliseconds old that marks a file for deletion.
 */
@TargetApi(21) public static void clearOldFiles(File dir,long millisAgo){
  if (dir == null) {
    return;
  }
  File[] files=dir.listFiles();
  if (files == null) {
    return;
  }
  long olderThan=System.currentTimeMillis() - millisAgo;
  for (  File f : files) {
    if (f.isDirectory()) {
      clearOldFiles(f,olderThan);
      f.delete();
    }
    if (Build.VERSION.SDK_INT < 21) {
      if (FileUtils.isFileOlder(f,olderThan)) {
        f.delete();
      }
    }
 else {
      try {
        StructStat stat=Os.lstat(f.getAbsolutePath());
        if ((stat.st_atime * 1000L) < olderThan) {
          f.delete();
        }
      }
 catch (      ErrnoException e) {
        e.printStackTrace();
      }
    }
  }
}","/** 
 * Recursively delete files in   {@code dir} that were last used{@code millisAgo} milliseconds ago.  On {@code android-21} and newer, thisis based on the last access of the file, on older Android versions, it is based on the last time the file was modified, e.g. downloaded.
 * @param dir        The directory to recurse in
 * @param millisAgo The number of milliseconds old that marks a file for deletion.
 */
@TargetApi(21) public static void clearOldFiles(File dir,long millisAgo){
  if (dir == null) {
    return;
  }
  File[] files=dir.listFiles();
  if (files == null) {
    return;
  }
  long olderThan=System.currentTimeMillis() - millisAgo;
  for (  File f : files) {
    if (f.isDirectory()) {
      clearOldFiles(f,millisAgo);
      f.delete();
    }
    if (Build.VERSION.SDK_INT < 21) {
      if (FileUtils.isFileOlder(f,olderThan)) {
        f.delete();
      }
    }
 else {
      try {
        StructStat stat=Os.lstat(f.getAbsolutePath());
        if ((stat.st_atime * 1000L) < olderThan) {
          f.delete();
        }
      }
 catch (      ErrnoException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9920704845814978
165227,"/** 
 * Recursively delete files in   {@code f} that were last used{@code millisAgo} milliseconds ago.  On {@code android-21} and newer, thisis based on the last access of the file, on older Android versions, it is based on the last time the file was modified, e.g. downloaded.
 * @param f         The file or directory to clean
 * @param millisAgo The number of milliseconds old that marks a file for deletion.
 */
@TargetApi(21) public static void clearOldFiles(File f,long millisAgo){
  if (f == null) {
    return;
  }
  long olderThan=System.currentTimeMillis() - millisAgo;
  if (f.isDirectory()) {
    File[] files=f.listFiles();
    if (files == null) {
      return;
    }
    for (    File file : files) {
      clearOldFiles(file,millisAgo);
    }
    f.delete();
  }
 else   if (Build.VERSION.SDK_INT < 21) {
    if (FileUtils.isFileOlder(f,olderThan)) {
      f.delete();
    }
  }
 else {
    try {
      StructStat stat=Os.lstat(f.getAbsolutePath());
      if ((stat.st_atime * 1000L) < olderThan) {
        f.delete();
      }
    }
 catch (    ErrnoException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Recursively delete files in   {@code f} that were last used{@code millisAgo} milliseconds ago.  On {@code android-21} and newer, thisis based on the last access of the file, on older Android versions, it is based on the last time the file was modified, e.g. downloaded.
 * @param f         The file or directory to clean
 * @param millisAgo The number of milliseconds old that marks a file for deletion.
 */
public static void clearOldFiles(File f,long millisAgo){
  if (f == null) {
    return;
  }
  long olderThan=System.currentTimeMillis() - millisAgo;
  if (f.isDirectory()) {
    File[] files=f.listFiles();
    if (files == null) {
      return;
    }
    for (    File file : files) {
      clearOldFiles(file,millisAgo);
    }
    f.delete();
  }
 else   if (Build.VERSION.SDK_INT < 21) {
    if (FileUtils.isFileOlder(f,olderThan)) {
      f.delete();
    }
  }
 else {
    CleanCacheService21.deleteIfOld(f,millisAgo);
  }
}",0.8729388942774006
165228,"/** 
 * If any column was added or removed, just drop the table, create it again and let the cache be filled from scratch by   {@link InstalledAppProviderService}For DB versions older than 43, this will create the   {@link InstalledAppProvider}table for the first time.
 */
private void recreateInstalledAppTable(SQLiteDatabase db,int oldVersion){
  if (oldVersion >= 57) {
    return;
  }
  Utils.debugLog(TAG,""String_Node_Str"");
  db.execSQL(DROP_TABLE_INSTALLED_APP);
  db.execSQL(CREATE_TABLE_INSTALLED_APP);
}","/** 
 * If any column was added or removed, just drop the table, create it again and let the cache be filled from scratch by   {@link InstalledAppProviderService}For DB versions older than 43, this will create the   {@link InstalledAppProvider}table for the first time.
 */
private void recreateInstalledAppTable(SQLiteDatabase db,int oldVersion){
  if (oldVersion >= 56) {
    return;
  }
  Utils.debugLog(TAG,""String_Node_Str"");
  db.execSQL(DROP_TABLE_INSTALLED_APP);
  db.execSQL(CREATE_TABLE_INSTALLED_APP);
}",0.9980544747081712
165229,"private void doDeletePackageInternal(final String packageName) throws InstallFailedException {
  ServiceConnection mServiceConnection=new ServiceConnection(){
    public void onServiceConnected(    ComponentName name,    IBinder service){
      IPrivilegedService privService=IPrivilegedService.Stub.asInterface(service);
      IPrivilegedCallback callback=new IPrivilegedCallback.Stub(){
        @Override public void handleResult(        String packageName,        int returnCode) throws RemoteException {
          if (returnCode == DELETE_SUCCEEDED) {
            sendBroadcastUninstall(packageName,ACTION_UNINSTALL_COMPLETE);
          }
 else {
            sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"" + returnCode + ""String_Node_Str""+ sUninstallReturnCodes.get(returnCode));
          }
        }
      }
;
      try {
        privService.deletePackage(packageName,0,callback);
      }
 catch (      RemoteException e) {
        Log.e(TAG,""String_Node_Str"",e);
        sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"");
      }
    }
    public void onServiceDisconnected(    ComponentName name){
    }
  }
;
  Intent serviceIntent=new Intent(PRIVILEGED_EXTENSION_SERVICE_INTENT);
  serviceIntent.setPackage(PRIVILEGED_EXTENSION_PACKAGE_NAME);
  mContext.getApplicationContext().bindService(serviceIntent,mServiceConnection,Context.BIND_AUTO_CREATE);
}","private void doDeletePackageInternal(final String packageName) throws InstallFailedException {
  ServiceConnection mServiceConnection=new ServiceConnection(){
    public void onServiceConnected(    ComponentName name,    IBinder service){
      IPrivilegedService privService=IPrivilegedService.Stub.asInterface(service);
      IPrivilegedCallback callback=new IPrivilegedCallback.Stub(){
        @Override public void handleResult(        String packageName,        int returnCode) throws RemoteException {
          if (returnCode == DELETE_SUCCEEDED) {
            sendBroadcastUninstall(packageName,ACTION_UNINSTALL_COMPLETE);
          }
 else {
            sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"" + returnCode + ""String_Node_Str""+ UNINSTALL_RETURN_CODES.get(returnCode));
          }
        }
      }
;
      try {
        privService.deletePackage(packageName,0,callback);
      }
 catch (      RemoteException e) {
        Log.e(TAG,""String_Node_Str"",e);
        sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"");
      }
    }
    public void onServiceDisconnected(    ComponentName name){
    }
  }
;
  Intent serviceIntent=new Intent(PRIVILEGED_EXTENSION_SERVICE_INTENT);
  serviceIntent.setPackage(PRIVILEGED_EXTENSION_PACKAGE_NAME);
  mContext.getApplicationContext().bindService(serviceIntent,mServiceConnection,Context.BIND_AUTO_CREATE);
}",0.9863588667366212
165230,"public void onServiceConnected(ComponentName name,IBinder service){
  IPrivilegedService privService=IPrivilegedService.Stub.asInterface(service);
  IPrivilegedCallback callback=new IPrivilegedCallback.Stub(){
    @Override public void handleResult(    String packageName,    int returnCode) throws RemoteException {
      if (returnCode == DELETE_SUCCEEDED) {
        sendBroadcastUninstall(packageName,ACTION_UNINSTALL_COMPLETE);
      }
 else {
        sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"" + returnCode + ""String_Node_Str""+ sUninstallReturnCodes.get(returnCode));
      }
    }
  }
;
  try {
    privService.deletePackage(packageName,0,callback);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
    sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"");
  }
}","public void onServiceConnected(ComponentName name,IBinder service){
  IPrivilegedService privService=IPrivilegedService.Stub.asInterface(service);
  IPrivilegedCallback callback=new IPrivilegedCallback.Stub(){
    @Override public void handleResult(    String packageName,    int returnCode) throws RemoteException {
      if (returnCode == DELETE_SUCCEEDED) {
        sendBroadcastUninstall(packageName,ACTION_UNINSTALL_COMPLETE);
      }
 else {
        sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"" + returnCode + ""String_Node_Str""+ UNINSTALL_RETURN_CODES.get(returnCode));
      }
    }
  }
;
  try {
    privService.deletePackage(packageName,0,callback);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
    sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"");
  }
}",0.9761489237929027
165231,"@Override public void handleResult(String packageName,int returnCode) throws RemoteException {
  if (returnCode == DELETE_SUCCEEDED) {
    sendBroadcastUninstall(packageName,ACTION_UNINSTALL_COMPLETE);
  }
 else {
    sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"" + returnCode + ""String_Node_Str""+ sUninstallReturnCodes.get(returnCode));
  }
}","@Override public void handleResult(String packageName,int returnCode) throws RemoteException {
  if (returnCode == DELETE_SUCCEEDED) {
    sendBroadcastUninstall(packageName,ACTION_UNINSTALL_COMPLETE);
  }
 else {
    sendBroadcastUninstall(packageName,ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"" + returnCode + ""String_Node_Str""+ UNINSTALL_RETURN_CODES.get(returnCode));
  }
}",0.9433465085639
165232,"@Override protected void installPackage(final Uri uri,final Uri originatingUri,String packageName){
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_STARTED);
  final Uri sanitizedUri;
  try {
    sanitizedUri=Installer.prepareApkFile(mContext,uri,packageName);
  }
 catch (  Installer.InstallFailedException e) {
    Log.e(TAG,""String_Node_Str"",e);
    sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,e.getMessage());
    return;
  }
  ServiceConnection mServiceConnection=new ServiceConnection(){
    public void onServiceConnected(    ComponentName name,    IBinder service){
      IPrivilegedService privService=IPrivilegedService.Stub.asInterface(service);
      IPrivilegedCallback callback=new IPrivilegedCallback.Stub(){
        @Override public void handleResult(        String packageName,        int returnCode) throws RemoteException {
          if (returnCode == INSTALL_SUCCEEDED) {
            sendBroadcastInstall(uri,originatingUri,ACTION_INSTALL_COMPLETE);
          }
 else {
            sendBroadcastInstall(uri,originatingUri,ACTION_INSTALL_INTERRUPTED,""String_Node_Str"" + returnCode + ""String_Node_Str""+ sInstallReturnCodes.get(returnCode));
          }
        }
      }
;
      try {
        privService.installPackage(sanitizedUri,ACTION_INSTALL_REPLACE_EXISTING,null,callback);
      }
 catch (      RemoteException e) {
        Log.e(TAG,""String_Node_Str"",e);
        sendBroadcastInstall(uri,originatingUri,ACTION_INSTALL_INTERRUPTED,""String_Node_Str"");
      }
    }
    public void onServiceDisconnected(    ComponentName name){
    }
  }
;
  Intent serviceIntent=new Intent(PRIVILEGED_EXTENSION_SERVICE_INTENT);
  serviceIntent.setPackage(PRIVILEGED_EXTENSION_PACKAGE_NAME);
  mContext.getApplicationContext().bindService(serviceIntent,mServiceConnection,Context.BIND_AUTO_CREATE);
}","@Override protected void installPackage(final Uri uri,final Uri originatingUri,String packageName){
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_STARTED);
  final Uri sanitizedUri;
  try {
    sanitizedUri=Installer.prepareApkFile(mContext,uri,packageName);
  }
 catch (  Installer.InstallFailedException e) {
    Log.e(TAG,""String_Node_Str"",e);
    sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,e.getMessage());
    return;
  }
  ServiceConnection mServiceConnection=new ServiceConnection(){
    public void onServiceConnected(    ComponentName name,    IBinder service){
      IPrivilegedService privService=IPrivilegedService.Stub.asInterface(service);
      IPrivilegedCallback callback=new IPrivilegedCallback.Stub(){
        @Override public void handleResult(        String packageName,        int returnCode) throws RemoteException {
          if (returnCode == INSTALL_SUCCEEDED) {
            sendBroadcastInstall(uri,originatingUri,ACTION_INSTALL_COMPLETE);
          }
 else {
            sendBroadcastInstall(uri,originatingUri,ACTION_INSTALL_INTERRUPTED,""String_Node_Str"" + returnCode + ""String_Node_Str""+ INSTALL_RETURN_CODES.get(returnCode));
          }
        }
      }
;
      try {
        privService.installPackage(sanitizedUri,ACTION_INSTALL_REPLACE_EXISTING,null,callback);
      }
 catch (      RemoteException e) {
        Log.e(TAG,""String_Node_Str"",e);
        sendBroadcastInstall(uri,originatingUri,ACTION_INSTALL_INTERRUPTED,""String_Node_Str"");
      }
    }
    public void onServiceDisconnected(    ComponentName name){
    }
  }
;
  Intent serviceIntent=new Intent(PRIVILEGED_EXTENSION_SERVICE_INTENT);
  serviceIntent.setPackage(PRIVILEGED_EXTENSION_PACKAGE_NAME);
  mContext.getApplicationContext().bindService(serviceIntent,mServiceConnection,Context.BIND_AUTO_CREATE);
}",0.990061778135912
165233,"private byte[] getApkSignature(File apkFile){
  final String pkgPath=apkFile.getAbsolutePath();
  PackageInfo pkgInfo=mPm.getPackageArchiveInfo(pkgPath,PackageManager.GET_SIGNATURES);
  return signatureToBytes(pkgInfo.signatures);
}","private byte[] getApkSignature(File apkFile){
  final String pkgPath=apkFile.getAbsolutePath();
  PackageInfo pkgInfo=pm.getPackageArchiveInfo(pkgPath,PackageManager.GET_SIGNATURES);
  return signatureToBytes(pkgInfo.signatures);
}",0.9935205183585312
165234,"private byte[] getFDroidSignature(){
  try {
    @SuppressLint(""String_Node_Str"") PackageInfo pkgInfo=mPm.getPackageInfo(mContext.getPackageName(),PackageManager.GET_SIGNATURES);
    return signatureToBytes(pkgInfo.signatures);
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","private byte[] getFDroidSignature(){
  try {
    @SuppressLint(""String_Node_Str"") PackageInfo pkgInfo=pm.getPackageInfo(context.getPackageName(),PackageManager.GET_SIGNATURES);
    return signatureToBytes(pkgInfo.signatures);
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.991150442477876
165235,"ApkSignatureVerifier(Context context){
  mContext=context;
  mPm=context.getPackageManager();
}","ApkSignatureVerifier(Context context){
  this.context=context;
  pm=context.getPackageManager();
}",0.9430051813471504
165236,"@Override protected void uninstallPackage(String packageName){
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_STARTED);
  Intent uninstallIntent=new Intent(mContext,DefaultInstallerActivity.class);
  uninstallIntent.setAction(DefaultInstallerActivity.ACTION_UNINSTALL_PACKAGE);
  uninstallIntent.putExtra(DefaultInstallerActivity.EXTRA_UNINSTALL_PACKAGE_NAME,packageName);
  PendingIntent uninstallPendingIntent=PendingIntent.getActivity(mContext.getApplicationContext(),packageName.hashCode(),uninstallIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_USER_INTERACTION,uninstallPendingIntent);
}","@Override protected void uninstallPackage(String packageName){
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_STARTED);
  Intent uninstallIntent=new Intent(context,DefaultInstallerActivity.class);
  uninstallIntent.setAction(DefaultInstallerActivity.ACTION_UNINSTALL_PACKAGE);
  uninstallIntent.putExtra(DefaultInstallerActivity.EXTRA_UNINSTALL_PACKAGE_NAME,packageName);
  PendingIntent uninstallPendingIntent=PendingIntent.getActivity(context.getApplicationContext(),packageName.hashCode(),uninstallIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_USER_INTERACTION,uninstallPendingIntent);
}",0.9955156950672646
165237,"@Override protected void installPackage(Uri uri,Uri originatingUri,String packageName){
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_STARTED);
  Utils.debugLog(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ new File(uri.getPath()));
  Uri sanitizedUri;
  try {
    sanitizedUri=Installer.prepareApkFile(mContext,uri,packageName);
  }
 catch (  Installer.InstallFailedException e) {
    Log.e(TAG,""String_Node_Str"",e);
    sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,e.getMessage());
    return;
  }
  Intent installIntent=new Intent(mContext,DefaultInstallerActivity.class);
  installIntent.setAction(DefaultInstallerActivity.ACTION_INSTALL_PACKAGE);
  installIntent.putExtra(DefaultInstallerActivity.EXTRA_ORIGINATING_URI,originatingUri);
  installIntent.setData(sanitizedUri);
  PendingIntent installPendingIntent=PendingIntent.getActivity(mContext.getApplicationContext(),uri.hashCode(),installIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_USER_INTERACTION,installPendingIntent);
}","@Override protected void installPackage(Uri uri,Uri originatingUri,String packageName){
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_STARTED);
  Utils.debugLog(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ new File(uri.getPath()));
  Uri sanitizedUri;
  try {
    sanitizedUri=Installer.prepareApkFile(context,uri,packageName);
  }
 catch (  Installer.InstallFailedException e) {
    Log.e(TAG,""String_Node_Str"",e);
    sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,e.getMessage());
    return;
  }
  Intent installIntent=new Intent(context,DefaultInstallerActivity.class);
  installIntent.setAction(DefaultInstallerActivity.ACTION_INSTALL_PACKAGE);
  installIntent.putExtra(DefaultInstallerActivity.EXTRA_ORIGINATING_URI,originatingUri);
  installIntent.setData(sanitizedUri);
  PendingIntent installPendingIntent=PendingIntent.getActivity(context.getApplicationContext(),uri.hashCode(),installIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_USER_INTERACTION,installPendingIntent);
}",0.995922066153149
165238,"protected void uninstallPackage(String packageName){
  Intent intent=new Intent();
  try {
    getPackageManager().getPackageInfo(packageName,0);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    installer.sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"");
    finish();
    return;
  }
  Uri uri=Uri.fromParts(""String_Node_Str"",packageName,null);
  intent.setData(uri);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    intent.setAction(Intent.ACTION_DELETE);
  }
 else {
    intent.setAction(Intent.ACTION_UNINSTALL_PACKAGE);
    intent.putExtra(Intent.EXTRA_RETURN_RESULT,true);
  }
  try {
    startActivityForResult(intent,REQUEST_CODE_UNINSTALL);
  }
 catch (  ActivityNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    installer.sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"");
    finish();
  }
}","protected void uninstallPackage(String packageName){
  try {
    getPackageManager().getPackageInfo(packageName,0);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    installer.sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"");
    finish();
    return;
  }
  Uri uri=Uri.fromParts(""String_Node_Str"",packageName,null);
  Intent intent=new Intent();
  intent.setData(uri);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    intent.setAction(Intent.ACTION_DELETE);
  }
 else {
    intent.setAction(Intent.ACTION_UNINSTALL_PACKAGE);
    intent.putExtra(Intent.EXTRA_RETURN_RESULT,true);
  }
  try {
    startActivityForResult(intent,REQUEST_CODE_UNINSTALL);
  }
 catch (  ActivityNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    installer.sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_INTERRUPTED,""String_Node_Str"");
    finish();
  }
}",0.9692622950819672
165239,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  installer=new DefaultInstaller(this);
  Intent intent=getIntent();
  String action=intent.getAction();
switch (action) {
case ACTION_INSTALL_PACKAGE:
{
      mInstallUri=intent.getData();
      mInstallOriginatingUri=intent.getParcelableExtra(EXTRA_ORIGINATING_URI);
      installPackage(mInstallUri,mInstallOriginatingUri);
      break;
    }
case ACTION_UNINSTALL_PACKAGE:
{
    mUninstallPackageName=intent.getStringExtra(EXTRA_UNINSTALL_PACKAGE_NAME);
    uninstallPackage(mUninstallPackageName);
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"");
}
}
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  installer=new DefaultInstaller(this);
  Intent intent=getIntent();
  String action=intent.getAction();
switch (action) {
case ACTION_INSTALL_PACKAGE:
{
      installUri=intent.getData();
      installOriginatingUri=intent.getParcelableExtra(EXTRA_ORIGINATING_URI);
      installPackage(installUri,installOriginatingUri);
      break;
    }
case ACTION_UNINSTALL_PACKAGE:
{
    uninstallPackageName=intent.getStringExtra(EXTRA_UNINSTALL_PACKAGE_NAME);
    uninstallPackage(uninstallPackageName);
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.9446064139941692
165240,"@SuppressLint(""String_Node_Str"") private void installPackage(Uri uri,Uri originatingUri){
  Utils.debugLog(TAG,""String_Node_Str"" + uri);
  if (uri == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((Build.VERSION.SDK_INT <= Build.VERSION_CODES.M) && (!uri.getScheme().equals(""String_Node_Str""))) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((""String_Node_Str"".equals(Build.VERSION.CODENAME)) && (!uri.getScheme().equals(""String_Node_Str""))) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Intent intent=new Intent();
  intent.setData(uri);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    intent.setAction(Intent.ACTION_VIEW);
    intent.setType(""String_Node_Str"");
  }
 else {
    intent.setAction(Intent.ACTION_INSTALL_PACKAGE);
    if (!""String_Node_Str"".equals(Build.VERSION.CODENAME)) {
      intent.putExtra(Intent.EXTRA_RETURN_RESULT,true);
    }
    intent.putExtra(Intent.EXTRA_NOT_UNKNOWN_SOURCE,true);
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
      intent.putExtra(Intent.EXTRA_ALLOW_REPLACE,true);
    }
  }
  try {
    startActivityForResult(intent,REQUEST_CODE_INSTALL);
  }
 catch (  ActivityNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    installer.sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,""String_Node_Str"");
    finish();
  }
  installer.sendBroadcastInstall(mInstallUri,mInstallOriginatingUri,Installer.ACTION_INSTALL_STARTED);
}","@SuppressLint(""String_Node_Str"") private void installPackage(Uri uri,Uri originatingUri){
  if (uri == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((Build.VERSION.SDK_INT <= Build.VERSION_CODES.M) && (!uri.getScheme().equals(""String_Node_Str""))) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if ((""String_Node_Str"".equals(Build.VERSION.CODENAME)) && (!uri.getScheme().equals(""String_Node_Str""))) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Intent intent=new Intent();
  intent.setData(uri);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    intent.setAction(Intent.ACTION_VIEW);
    intent.setType(""String_Node_Str"");
  }
 else {
    intent.setAction(Intent.ACTION_INSTALL_PACKAGE);
    if (!""String_Node_Str"".equals(Build.VERSION.CODENAME)) {
      intent.putExtra(Intent.EXTRA_RETURN_RESULT,true);
    }
    intent.putExtra(Intent.EXTRA_NOT_UNKNOWN_SOURCE,true);
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
      intent.putExtra(Intent.EXTRA_ALLOW_REPLACE,true);
    }
  }
  try {
    startActivityForResult(intent,REQUEST_CODE_INSTALL);
  }
 catch (  ActivityNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
    installer.sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,""String_Node_Str"");
    finish();
  }
  installer.sendBroadcastInstall(installUri,installOriginatingUri,Installer.ACTION_INSTALL_STARTED);
}",0.2363697934304097
165241,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_CODE_INSTALL:
{
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        installer.sendBroadcastInstall(mInstallUri,mInstallOriginatingUri,Installer.ACTION_INSTALL_COMPLETE);
        break;
      }
      if (""String_Node_Str"".equals(Build.VERSION.CODENAME)) {
        installer.sendBroadcastInstall(mInstallUri,mInstallOriginatingUri,Installer.ACTION_INSTALL_COMPLETE);
        break;
      }
switch (resultCode) {
case Activity.RESULT_OK:
{
          installer.sendBroadcastInstall(mInstallUri,mInstallOriginatingUri,Installer.ACTION_INSTALL_COMPLETE);
          break;
        }
case Activity.RESULT_CANCELED:
{
        installer.sendBroadcastInstall(mInstallUri,mInstallOriginatingUri,Installer.ACTION_INSTALL_INTERRUPTED);
        break;
      }
default :
case Activity.RESULT_FIRST_USER:
{
      installer.sendBroadcastInstall(mInstallUri,mInstallOriginatingUri,Installer.ACTION_INSTALL_INTERRUPTED,getString(R.string.install_error_unknown));
      break;
    }
}
break;
}
case REQUEST_CODE_UNINSTALL:
{
if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
installer.sendBroadcastUninstall(mUninstallPackageName,Installer.ACTION_UNINSTALL_COMPLETE);
break;
}
switch (resultCode) {
case Activity.RESULT_OK:
{
  installer.sendBroadcastUninstall(mUninstallPackageName,Installer.ACTION_UNINSTALL_COMPLETE);
  break;
}
case Activity.RESULT_CANCELED:
{
installer.sendBroadcastUninstall(mUninstallPackageName,Installer.ACTION_UNINSTALL_INTERRUPTED);
break;
}
default :
case Activity.RESULT_FIRST_USER:
{
installer.sendBroadcastUninstall(mUninstallPackageName,Installer.ACTION_UNINSTALL_INTERRUPTED,getString(R.string.uninstall_error_unknown));
break;
}
}
break;
}
default :
{
throw new RuntimeException(""String_Node_Str"");
}
}
finish();
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_CODE_INSTALL:
{
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        installer.sendBroadcastInstall(installUri,installOriginatingUri,Installer.ACTION_INSTALL_COMPLETE);
        break;
      }
      if (""String_Node_Str"".equals(Build.VERSION.CODENAME)) {
        installer.sendBroadcastInstall(installUri,installOriginatingUri,Installer.ACTION_INSTALL_COMPLETE);
        break;
      }
switch (resultCode) {
case Activity.RESULT_OK:
{
          installer.sendBroadcastInstall(installUri,installOriginatingUri,Installer.ACTION_INSTALL_COMPLETE);
          break;
        }
case Activity.RESULT_CANCELED:
{
        installer.sendBroadcastInstall(installUri,installOriginatingUri,Installer.ACTION_INSTALL_INTERRUPTED);
        break;
      }
case Activity.RESULT_FIRST_USER:
default :
{
      installer.sendBroadcastInstall(installUri,installOriginatingUri,Installer.ACTION_INSTALL_INTERRUPTED,getString(R.string.install_error_unknown));
      break;
    }
}
break;
}
case REQUEST_CODE_UNINSTALL:
{
if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
installer.sendBroadcastUninstall(uninstallPackageName,Installer.ACTION_UNINSTALL_COMPLETE);
break;
}
switch (resultCode) {
case Activity.RESULT_OK:
{
  installer.sendBroadcastUninstall(uninstallPackageName,Installer.ACTION_UNINSTALL_COMPLETE);
  break;
}
case Activity.RESULT_CANCELED:
{
installer.sendBroadcastUninstall(uninstallPackageName,Installer.ACTION_UNINSTALL_INTERRUPTED);
break;
}
case Activity.RESULT_FIRST_USER:
default :
{
installer.sendBroadcastUninstall(uninstallPackageName,Installer.ACTION_UNINSTALL_INTERRUPTED,getString(R.string.uninstall_error_unknown));
break;
}
}
break;
}
default :
{
throw new RuntimeException(""String_Node_Str"");
}
}
finish();
}",0.9208860759493672
165242,"@Override protected void uninstallPackage(String packageName){
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_STARTED);
  Intent uninstallIntent=new Intent(mContext,InstallExtensionDialogActivity.class);
  uninstallIntent.setAction(InstallExtensionDialogActivity.ACTION_UNINSTALL);
  PendingIntent uninstallPendingIntent=PendingIntent.getActivity(mContext.getApplicationContext(),packageName.hashCode(),uninstallIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_USER_INTERACTION,uninstallPendingIntent);
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_COMPLETE);
}","@Override protected void uninstallPackage(String packageName){
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_STARTED);
  Intent uninstallIntent=new Intent(context,InstallExtensionDialogActivity.class);
  uninstallIntent.setAction(InstallExtensionDialogActivity.ACTION_UNINSTALL);
  PendingIntent uninstallPendingIntent=PendingIntent.getActivity(context.getApplicationContext(),packageName.hashCode(),uninstallIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_USER_INTERACTION,uninstallPendingIntent);
  sendBroadcastUninstall(packageName,Installer.ACTION_UNINSTALL_COMPLETE);
}",0.9954058192955588
165243,"@Override protected void installPackage(Uri uri,Uri originatingUri,String packageName){
  Uri sanitizedUri;
  try {
    sanitizedUri=Installer.prepareApkFile(mContext,uri,packageName);
  }
 catch (  InstallFailedException e) {
    Log.e(TAG,""String_Node_Str"",e);
    sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,e.getMessage());
    return;
  }
  ApkSignatureVerifier signatureVerifier=new ApkSignatureVerifier(mContext);
  if (!BuildConfig.DEBUG && !signatureVerifier.hasFDroidSignature(new File(sanitizedUri.getPath()))) {
    sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,""String_Node_Str"");
  }
  Intent installIntent=new Intent(mContext,InstallExtensionDialogActivity.class);
  installIntent.setAction(InstallExtensionDialogActivity.ACTION_INSTALL);
  installIntent.setData(sanitizedUri);
  PendingIntent installPendingIntent=PendingIntent.getActivity(mContext.getApplicationContext(),uri.hashCode(),installIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_USER_INTERACTION,installPendingIntent);
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_COMPLETE);
}","@Override protected void installPackage(Uri uri,Uri originatingUri,String packageName){
  Uri sanitizedUri;
  try {
    sanitizedUri=Installer.prepareApkFile(context,uri,packageName);
  }
 catch (  InstallFailedException e) {
    Log.e(TAG,""String_Node_Str"",e);
    sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,e.getMessage());
    return;
  }
  ApkSignatureVerifier signatureVerifier=new ApkSignatureVerifier(context);
  if (!BuildConfig.DEBUG && !signatureVerifier.hasFDroidSignature(new File(sanitizedUri.getPath()))) {
    sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_INTERRUPTED,""String_Node_Str"");
  }
  Intent installIntent=new Intent(context,InstallExtensionDialogActivity.class);
  installIntent.setAction(InstallExtensionDialogActivity.ACTION_INSTALL);
  installIntent.setData(sanitizedUri);
  PendingIntent installPendingIntent=PendingIntent.getActivity(context.getApplicationContext(),uri.hashCode(),installIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_USER_INTERACTION,installPendingIntent);
  sendBroadcastInstall(uri,originatingUri,Installer.ACTION_INSTALL_COMPLETE);
}",0.995008319467554
165244,"private String getAppName(Apk apk){
  App app=ACTIVE_APPS.get(apk.packageName);
  return app.name;
}","private String getAppName(Apk apk){
  return ACTIVE_APPS.get(apk.packageName).name;
}",0.8540540540540541
165245,"private int newPermissionCount(Apk apk){
  AppDiff appDiff=new AppDiff(mContext.getPackageManager(),apk);
  if (appDiff.mPkgInfo == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  AppSecurityPermissions perms=new AppSecurityPermissions(mContext,appDiff.mPkgInfo);
  if (appDiff.mInstalledAppInfo != null) {
    return perms.getPermissionCount(AppSecurityPermissions.WHICH_NEW);
  }
  return perms.getPermissionCount(AppSecurityPermissions.WHICH_ALL);
}","private int newPermissionCount(Apk apk){
  AppDiff appDiff=new AppDiff(context.getPackageManager(),apk);
  if (appDiff.mPkgInfo == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  AppSecurityPermissions perms=new AppSecurityPermissions(context,appDiff.mPkgInfo);
  if (appDiff.mInstalledAppInfo != null) {
    return perms.getPermissionCount(AppSecurityPermissions.WHICH_NEW);
  }
  return perms.getPermissionCount(AppSecurityPermissions.WHICH_ALL);
}",0.9935897435897436
165246,"Installer(Context context){
  this.mContext=context;
  this.mPm=context.getPackageManager();
  localBroadcastManager=LocalBroadcastManager.getInstance(context);
}","Installer(Context context){
  this.context=context;
  this.pm=context.getPackageManager();
  localBroadcastManager=LocalBroadcastManager.getInstance(context);
}",0.9813664596273292
165247,"public Intent getPermissionScreen(Apk apk){
  if (!isUnattended()) {
    return null;
  }
  int count=newPermissionCount(apk);
  if (count > 0) {
    Uri uri=ApkProvider.getContentUri(apk);
    Intent intent=new Intent(mContext,InstallConfirmActivity.class);
    intent.setData(uri);
    return intent;
  }
 else {
    return null;
  }
}","public Intent getPermissionScreen(Apk apk){
  if (!isUnattended()) {
    return null;
  }
  int count=newPermissionCount(apk);
  if (count > 0) {
    Uri uri=ApkProvider.getContentUri(apk);
    Intent intent=new Intent(context,InstallConfirmActivity.class);
    intent.setData(uri);
    return intent;
  }
 else {
    return null;
  }
}",0.9955423476968795
165248,"public Intent getUninstallScreen(String packageName){
  if (!isUnattended()) {
    return null;
  }
  Intent intent=new Intent(mContext,UninstallDialogActivity.class);
  intent.putExtra(Installer.EXTRA_PACKAGE_NAME,packageName);
  return intent;
}","public Intent getUninstallScreen(String packageName){
  if (!isUnattended()) {
    return null;
  }
  Intent intent=new Intent(context,UninstallDialogActivity.class);
  intent.putExtra(Installer.EXTRA_PACKAGE_NAME,packageName);
  return intent;
}",0.9939148073022313
165249,"@Override public void onCreate(){
  super.onCreate();
  Utils.debugLog(TAG,""String_Node_Str"");
  HandlerThread thread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  thread.start();
  serviceLooper=thread.getLooper();
  serviceHandler=new ServiceHandler(serviceLooper);
  localBroadcastManager=LocalBroadcastManager.getInstance(this);
}","@Override public void onCreate(){
  super.onCreate();
  Utils.debugLog(TAG,""String_Node_Str"");
  HandlerThread thread=new HandlerThread(TAG,Process.THREAD_PRIORITY_BACKGROUND);
  thread.start();
  serviceLooper=thread.getLooper();
  serviceHandler=new ServiceHandler(serviceLooper);
}",0.8973143759873617
165250,"protected void handleIntent(Intent intent){
  String packageName=intent.getStringExtra(Installer.EXTRA_PACKAGE_NAME);
  installer=InstallerFactory.create(this,packageName);
switch (intent.getAction()) {
case ACTION_INSTALL:
{
      Uri uri=intent.getData();
      Uri originatingUri=intent.getParcelableExtra(Installer.EXTRA_ORIGINATING_URI);
      installer.installPackage(uri,originatingUri,packageName);
      break;
    }
case ACTION_UNINSTALL:
{
    installer.uninstallPackage(packageName);
    break;
  }
}
}","protected void handleIntent(Intent intent){
  String packageName=intent.getStringExtra(Installer.EXTRA_PACKAGE_NAME);
  Installer installer=InstallerFactory.create(this,packageName);
switch (intent.getAction()) {
case ACTION_INSTALL:
{
      Uri uri=intent.getData();
      Uri originatingUri=intent.getParcelableExtra(Installer.EXTRA_ORIGINATING_URI);
      installer.installPackage(uri,originatingUri,packageName);
      break;
    }
case ACTION_UNINSTALL:
{
    installer.uninstallPackage(packageName);
    break;
  }
}
}",0.9903660886319846
165251,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  Utils.debugLog(TAG,""String_Node_Str"" + intent);
  if (!ACTION_INSTALL.equals(intent.getAction())) {
    Utils.debugLog(TAG,""String_Node_Str"" + intent + ""String_Node_Str""+ ACTION_INSTALL+ ""String_Node_Str"");
    return START_NOT_STICKY;
  }
  String urlString=intent.getDataString();
  if (TextUtils.isEmpty(urlString)) {
    Utils.debugLog(TAG,""String_Node_Str"");
    return START_NOT_STICKY;
  }
  if (!intent.hasExtra(EXTRA_APP) || !intent.hasExtra(EXTRA_APK)) {
    Utils.debugLog(TAG,urlString + ""String_Node_Str"");
    return START_NOT_STICKY;
  }
  if (!DownloaderService.isQueuedOrActive(urlString)) {
    Utils.debugLog(TAG,urlString + ""String_Node_Str"");
    cancelNotification(urlString);
    return START_NOT_STICKY;
  }
  App app=new App(intent.getParcelableExtra(EXTRA_APP));
  Apk apk=new Apk(intent.getParcelableExtra(EXTRA_APK));
  addToActive(urlString,app,apk);
  Notification notification=createNotification(intent.getDataString(),apk).build();
  notificationManager.notify(urlString.hashCode(),notification);
  registerDownloaderReceivers(urlString);
  File apkFilePath=Utils.getApkDownloadPath(this,intent.getData());
  long apkFileSize=apkFilePath.length();
  if (!apkFilePath.exists() || apkFileSize < apk.size) {
    Utils.debugLog(TAG,""String_Node_Str"" + urlString + ""String_Node_Str""+ apkFilePath);
    DownloaderService.queue(this,urlString);
  }
 else   if (apkIsCached(apkFilePath,apk)) {
    Utils.debugLog(TAG,""String_Node_Str"" + urlString + ""String_Node_Str""+ apkFilePath);
    sendBroadcast(intent.getData(),Downloader.ACTION_STARTED,apkFilePath);
    sendBroadcast(intent.getData(),Downloader.ACTION_COMPLETE,apkFilePath);
  }
 else {
    Utils.debugLog(TAG,""String_Node_Str"" + urlString + ""String_Node_Str""+ apkFilePath);
    apkFilePath.delete();
    DownloaderService.queue(this,urlString);
  }
  return START_REDELIVER_INTENT;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  Utils.debugLog(TAG,""String_Node_Str"" + intent);
  if (!ACTION_INSTALL.equals(intent.getAction())) {
    Utils.debugLog(TAG,""String_Node_Str"" + intent + ""String_Node_Str""+ ACTION_INSTALL+ ""String_Node_Str"");
    return START_NOT_STICKY;
  }
  String urlString=intent.getDataString();
  if (TextUtils.isEmpty(urlString)) {
    Utils.debugLog(TAG,""String_Node_Str"");
    return START_NOT_STICKY;
  }
  if (!intent.hasExtra(EXTRA_APP) || !intent.hasExtra(EXTRA_APK)) {
    Utils.debugLog(TAG,urlString + ""String_Node_Str"");
    return START_NOT_STICKY;
  }
  if ((flags & START_FLAG_REDELIVERY) == START_FLAG_REDELIVERY && !DownloaderService.isQueuedOrActive(urlString)) {
    Utils.debugLog(TAG,urlString + ""String_Node_Str"");
    cancelNotification(urlString);
    return START_NOT_STICKY;
  }
  App app=new App(intent.getParcelableExtra(EXTRA_APP));
  Apk apk=new Apk(intent.getParcelableExtra(EXTRA_APK));
  addToActive(urlString,app,apk);
  Notification notification=createNotification(intent.getDataString(),apk).build();
  notificationManager.notify(urlString.hashCode(),notification);
  registerDownloaderReceivers(urlString);
  File apkFilePath=Utils.getApkDownloadPath(this,intent.getData());
  long apkFileSize=apkFilePath.length();
  if (!apkFilePath.exists() || apkFileSize < apk.size) {
    Utils.debugLog(TAG,""String_Node_Str"" + urlString + ""String_Node_Str""+ apkFilePath);
    DownloaderService.queue(this,urlString);
  }
 else   if (apkIsCached(apkFilePath,apk)) {
    Utils.debugLog(TAG,""String_Node_Str"" + urlString + ""String_Node_Str""+ apkFilePath);
    sendBroadcast(intent.getData(),Downloader.ACTION_STARTED,apkFilePath);
    sendBroadcast(intent.getData(),Downloader.ACTION_COMPLETE,apkFilePath);
  }
 else {
    Utils.debugLog(TAG,""String_Node_Str"" + urlString + ""String_Node_Str""+ apkFilePath);
    apkFilePath.delete();
    DownloaderService.queue(this,urlString);
  }
  return START_REDELIVER_INTENT;
}",0.984787018255578
165252,"private HttpURLConnection getConnection() throws IOException {
  HttpURLConnection connection;
  if (isSwapUrl()) {
    connection=(HttpURLConnection)sourceUrl.openConnection();
  }
 else {
    connection=NetCipher.getHttpURLConnection(sourceUrl);
  }
  if (connection instanceof HttpsURLConnection && ""String_Node_Str"".equals(sourceUrl.getHost())) {
    ((HttpsURLConnection)connection).setSSLSocketFactory(HttpsURLConnection.getDefaultSSLSocketFactory());
  }
  if (username != null && password != null) {
    String authString=username + ""String_Node_Str"" + password;
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Base64.toBase64String(authString.getBytes()));
  }
  return connection;
}","private HttpURLConnection getConnection() throws IOException {
  HttpURLConnection connection;
  if (isSwapUrl()) {
    connection=(HttpURLConnection)sourceUrl.openConnection();
  }
 else {
    connection=NetCipher.getHttpURLConnection(sourceUrl);
  }
  if (connection instanceof HttpsURLConnection && !""String_Node_Str"".equals(sourceUrl.getHost())) {
    ((HttpsURLConnection)connection).setSSLSocketFactory(HttpsURLConnection.getDefaultSSLSocketFactory());
  }
  if (username != null && password != null) {
    String authString=username + ""String_Node_Str"" + password;
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Base64.toBase64String(authString.getBytes()));
  }
  return connection;
}",0.9993021632937892
165253,"public Drawable loadGroupIcon(Context context,PackageManager pm){
  if (icon != 0) {
    return (Build.VERSION.SDK_INT < 22) ? loadIcon(pm) : loadUnbadgedIcon(pm);
  }
 else {
    return context.getDrawable(R.drawable.ic_perm_device_info);
  }
}","public Drawable loadGroupIcon(Context context,PackageManager pm){
  if (icon != 0) {
    return (Build.VERSION.SDK_INT < 22) ? loadIcon(pm) : loadUnbadgedIcon(pm);
  }
  return context.getDrawable(R.drawable.ic_perm_device_info);
}",0.9705882352941176
165254,"private void startInstallConfirm(){
  final Drawable appIcon=mAppDiff.mPkgInfo.applicationInfo.loadIcon(mPm);
  final String appLabel=(String)mAppDiff.mPkgInfo.applicationInfo.loadLabel(mPm);
  View appSnippet=findViewById(R.id.app_snippet);
  ((ImageView)appSnippet.findViewById(R.id.app_icon)).setImageDrawable(appIcon);
  ((TextView)appSnippet.findViewById(R.id.app_name)).setText(appLabel);
  TabHost tabHost=(TabHost)findViewById(android.R.id.tabhost);
  tabHost.setup();
  ViewPager viewPager=(ViewPager)findViewById(R.id.pager);
  TabsAdapter adapter=new TabsAdapter(this,tabHost,viewPager);
  adapter.setOnTabChangedListener(new TabHost.OnTabChangeListener(){
    @Override public void onTabChanged(    String tabId){
    }
  }
);
  boolean permVisible=false;
  mScrollView=null;
  mOkCanInstall=false;
  int msg=0;
  AppSecurityPermissions perms=new AppSecurityPermissions(this,mAppDiff.mPkgInfo);
  if (mAppDiff.mInstalledAppInfo != null) {
    msg=(mAppDiff.mInstalledAppInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0 ? R.string.install_confirm_update_system : R.string.install_confirm_update;
    mScrollView=new CaffeinatedScrollView(this);
    mScrollView.setFillViewport(true);
    final boolean newPermissionsFound=perms.getPermissionCount(AppSecurityPermissions.WHICH_NEW) > 0;
    if (newPermissionsFound) {
      permVisible=true;
      mScrollView.addView(perms.getPermissionsView(AppSecurityPermissions.WHICH_NEW));
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    adapter.addTab(tabHost.newTabSpec(TAB_ID_NEW).setIndicator(getText(R.string.newPerms)),mScrollView);
  }
 else {
    findViewById(R.id.tabscontainer).setVisibility(View.GONE);
    findViewById(R.id.divider).setVisibility(View.VISIBLE);
  }
  final int N=perms.getPermissionCount(AppSecurityPermissions.WHICH_ALL);
  if (N > 0) {
    permVisible=true;
    LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    View root=inflater.inflate(R.layout.permissions_list,null);
    if (mScrollView == null) {
      mScrollView=(CaffeinatedScrollView)root.findViewById(R.id.scrollview);
    }
    final ViewGroup permList=(ViewGroup)root.findViewById(R.id.permission_list);
    permList.addView(perms.getPermissionsView(AppSecurityPermissions.WHICH_ALL));
    adapter.addTab(tabHost.newTabSpec(TAB_ID_ALL).setIndicator(getText(R.string.allPerms)),root);
  }
  if (!permVisible) {
    if (mAppDiff.mInstalledAppInfo != null) {
      msg=(mAppDiff.mInstalledAppInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0 ? R.string.install_confirm_update_system_no_perms : R.string.install_confirm_update_no_perms;
    }
 else {
      msg=R.string.install_confirm_no_perms;
    }
    tabHost.setVisibility(View.GONE);
    findViewById(R.id.filler).setVisibility(View.VISIBLE);
    findViewById(R.id.divider).setVisibility(View.GONE);
    mScrollView=null;
  }
  if (msg != 0) {
    ((TextView)findViewById(R.id.install_confirm)).setText(msg);
  }
  mInstallConfirm.setVisibility(View.VISIBLE);
  mOk=(Button)findViewById(R.id.ok_button);
  mCancel=(Button)findViewById(R.id.cancel_button);
  mOk.setOnClickListener(this);
  mCancel.setOnClickListener(this);
  if (mScrollView == null) {
    mOk.setText(R.string.menu_install);
    mOkCanInstall=true;
  }
 else {
    mScrollView.setFullScrollAction(new Runnable(){
      @Override public void run(){
        mOk.setText(R.string.menu_install);
        mOkCanInstall=true;
      }
    }
);
  }
}","private void startInstallConfirm(){
  final Drawable appIcon=mAppDiff.mPkgInfo.applicationInfo.loadIcon(mPm);
  final String appLabel=(String)mAppDiff.mPkgInfo.applicationInfo.loadLabel(mPm);
  View appSnippet=findViewById(R.id.app_snippet);
  ((ImageView)appSnippet.findViewById(R.id.app_icon)).setImageDrawable(appIcon);
  ((TextView)appSnippet.findViewById(R.id.app_name)).setText(appLabel);
  TabHost tabHost=(TabHost)findViewById(android.R.id.tabhost);
  tabHost.setup();
  ViewPager viewPager=(ViewPager)findViewById(R.id.pager);
  TabsAdapter adapter=new TabsAdapter(this,tabHost,viewPager);
  adapter.setOnTabChangedListener(new TabHost.OnTabChangeListener(){
    @Override public void onTabChanged(    String tabId){
    }
  }
);
  boolean permVisible=false;
  mScrollView=null;
  mOkCanInstall=false;
  int msg=0;
  AppSecurityPermissions perms=new AppSecurityPermissions(this,mAppDiff.mPkgInfo);
  if (mAppDiff.mInstalledAppInfo != null) {
    msg=(mAppDiff.mInstalledAppInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0 ? R.string.install_confirm_update_system : R.string.install_confirm_update;
    mScrollView=new CaffeinatedScrollView(this);
    mScrollView.setFillViewport(true);
    final boolean newPermissionsFound=perms.getPermissionCount(AppSecurityPermissions.WHICH_NEW) > 0;
    if (newPermissionsFound) {
      permVisible=true;
      mScrollView.addView(perms.getPermissionsView(AppSecurityPermissions.WHICH_NEW));
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    adapter.addTab(tabHost.newTabSpec(TAB_ID_NEW).setIndicator(getText(R.string.newPerms)),mScrollView);
  }
 else {
    findViewById(R.id.tabscontainer).setVisibility(View.GONE);
    findViewById(R.id.divider).setVisibility(View.VISIBLE);
  }
  final int n=perms.getPermissionCount(AppSecurityPermissions.WHICH_ALL);
  if (n > 0) {
    permVisible=true;
    LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    View root=inflater.inflate(R.layout.permissions_list,null);
    if (mScrollView == null) {
      mScrollView=(CaffeinatedScrollView)root.findViewById(R.id.scrollview);
    }
    final ViewGroup permList=(ViewGroup)root.findViewById(R.id.permission_list);
    permList.addView(perms.getPermissionsView(AppSecurityPermissions.WHICH_ALL));
    adapter.addTab(tabHost.newTabSpec(TAB_ID_ALL).setIndicator(getText(R.string.allPerms)),root);
  }
  if (!permVisible) {
    if (mAppDiff.mInstalledAppInfo != null) {
      msg=(mAppDiff.mInstalledAppInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0 ? R.string.install_confirm_update_system_no_perms : R.string.install_confirm_update_no_perms;
    }
 else {
      msg=R.string.install_confirm_no_perms;
    }
    tabHost.setVisibility(View.GONE);
    findViewById(R.id.filler).setVisibility(View.VISIBLE);
    findViewById(R.id.divider).setVisibility(View.GONE);
    mScrollView=null;
  }
  if (msg != 0) {
    ((TextView)findViewById(R.id.install_confirm)).setText(msg);
  }
  mInstallConfirm.setVisibility(View.VISIBLE);
  mOk=(Button)findViewById(R.id.ok_button);
  mCancel=(Button)findViewById(R.id.cancel_button);
  mOk.setOnClickListener(this);
  mCancel.setOnClickListener(this);
  if (mScrollView == null) {
    mOk.setText(R.string.menu_install);
    mOkCanInstall=true;
  }
 else {
    mScrollView.setFullScrollAction(new Runnable(){
      @Override public void run(){
        mOk.setText(R.string.menu_install);
        mOkCanInstall=true;
      }
    }
);
  }
}",0.9994242947610824
165255,"private void extractPerms(PackageInfo info,Set<MyPermissionInfo> permSet,PackageInfo installedPkgInfo){
  final String[] strList=info.requestedPermissions;
  if (strList == null || strList.length == 0) {
    return;
  }
  final int[] flagsList=getRequestedPermissionFlags(info);
  for (int i=0; i < strList.length; i++) {
    String permName=strList[i];
    try {
      PermissionInfo tmpPermInfo=mPm.getPermissionInfo(permName,0);
      if (tmpPermInfo == null) {
        continue;
      }
      int existingIndex=-1;
      if (installedPkgInfo != null && installedPkgInfo.requestedPermissions != null) {
        for (int j=0; j < installedPkgInfo.requestedPermissions.length; j++) {
          if (permName.equals(installedPkgInfo.requestedPermissions[j])) {
            existingIndex=j;
            break;
          }
        }
      }
      int existingFlags=0;
      if (existingIndex >= 0) {
        final int[] instFlagsList=getRequestedPermissionFlags(installedPkgInfo);
        existingFlags=instFlagsList[existingIndex];
      }
      if (!isDisplayablePermission(tmpPermInfo,existingFlags)) {
        continue;
      }
      final String origGroupName=tmpPermInfo.group;
      String groupName=origGroupName;
      if (groupName == null) {
        groupName=tmpPermInfo.packageName;
        tmpPermInfo.group=groupName;
      }
      MyPermissionGroupInfo group=mPermGroups.get(groupName);
      if (group == null) {
        PermissionGroupInfo grp=null;
        if (origGroupName != null) {
          grp=mPm.getPermissionGroupInfo(origGroupName,0);
        }
        if (grp != null) {
          group=new MyPermissionGroupInfo(grp);
        }
 else {
          tmpPermInfo.group=tmpPermInfo.packageName;
          group=mPermGroups.get(tmpPermInfo.group);
          if (group == null) {
            group=new MyPermissionGroupInfo(tmpPermInfo);
          }
        }
        mPermGroups.put(tmpPermInfo.group,group);
      }
      final boolean newPerm=installedPkgInfo != null && (existingFlags & PackageInfo.REQUESTED_PERMISSION_GRANTED) == 0;
      MyPermissionInfo myPerm=new MyPermissionInfo(tmpPermInfo);
      myPerm.mExistingReqFlags=existingFlags;
      myPerm.mNew=newPerm;
      permSet.add(myPerm);
    }
 catch (    NameNotFoundException e) {
      Log.i(TAG,""String_Node_Str"" + permName);
    }
  }
}","private void extractPerms(PackageInfo info,Set<MyPermissionInfo> permSet,PackageInfo installedPkgInfo){
  final String[] strList=info.requestedPermissions;
  if (strList == null || strList.length == 0) {
    return;
  }
  for (  String permName : strList) {
    try {
      PermissionInfo tmpPermInfo=mPm.getPermissionInfo(permName,0);
      if (tmpPermInfo == null) {
        continue;
      }
      int existingIndex=-1;
      if (installedPkgInfo != null && installedPkgInfo.requestedPermissions != null) {
        for (int j=0; j < installedPkgInfo.requestedPermissions.length; j++) {
          if (permName.equals(installedPkgInfo.requestedPermissions[j])) {
            existingIndex=j;
            break;
          }
        }
      }
      int existingFlags=0;
      if (existingIndex >= 0) {
        final int[] instFlagsList=getRequestedPermissionFlags(installedPkgInfo);
        existingFlags=instFlagsList[existingIndex];
      }
      if (!isDisplayablePermission(tmpPermInfo,existingFlags)) {
        continue;
      }
      final String origGroupName=tmpPermInfo.group;
      String groupName=origGroupName;
      if (groupName == null) {
        groupName=tmpPermInfo.packageName;
        tmpPermInfo.group=groupName;
      }
      MyPermissionGroupInfo group=mPermGroups.get(groupName);
      if (group == null) {
        PermissionGroupInfo grp=null;
        if (origGroupName != null) {
          grp=mPm.getPermissionGroupInfo(origGroupName,0);
        }
        if (grp != null) {
          group=new MyPermissionGroupInfo(grp);
        }
 else {
          tmpPermInfo.group=tmpPermInfo.packageName;
          group=mPermGroups.get(tmpPermInfo.group);
          if (group == null) {
            group=new MyPermissionGroupInfo(tmpPermInfo);
          }
        }
        mPermGroups.put(tmpPermInfo.group,group);
      }
      final boolean newPerm=installedPkgInfo != null && (existingFlags & PackageInfo.REQUESTED_PERMISSION_GRANTED) == 0;
      MyPermissionInfo myPerm=new MyPermissionInfo(tmpPermInfo);
      myPerm.mExistingReqFlags=existingFlags;
      myPerm.mNew=newPerm;
      permSet.add(myPerm);
    }
 catch (    NameNotFoundException e) {
      Log.i(TAG,""String_Node_Str"" + permName);
    }
  }
}",0.9670908293111014
165256,"public AppSecurityPermissions(Context context,PackageInfo info){
  this(context);
  if (info == null) {
    return;
  }
  final Set<MyPermissionInfo> permSet=new HashSet<>();
  PackageInfo installedPkgInfo=null;
  if (info.requestedPermissions != null) {
    try {
      installedPkgInfo=mPm.getPackageInfo(info.packageName,PackageManager.GET_PERMISSIONS);
    }
 catch (    NameNotFoundException e) {
    }
    extractPerms(info,permSet,installedPkgInfo);
  }
  setPermissions(new ArrayList<>(permSet));
}","public AppSecurityPermissions(Context context,PackageInfo info){
  this(context);
  if (info == null) {
    return;
  }
  final Set<MyPermissionInfo> permSet=new HashSet<>();
  PackageInfo installedPkgInfo=null;
  if (info.requestedPermissions != null) {
    try {
      installedPkgInfo=mPm.getPackageInfo(info.packageName,PackageManager.GET_PERMISSIONS);
    }
 catch (    NameNotFoundException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
    extractPerms(info,permSet,installedPkgInfo);
  }
  setPermissions(new ArrayList<>(permSet));
}",0.9502347417840376
165257,"@Override public int compareTo(Apk apk){
  return Integer.compare(vercode,apk.vercode);
}","@Override @TargetApi(19) public int compareTo(Apk apk){
  if (Build.VERSION.SDK_INT < 19) {
    return Integer.valueOf(vercode).compareTo(apk.vercode);
  }
  return Integer.compare(vercode,apk.vercode);
}",0.6075085324232082
165258,"/** 
 * Implement this method to provide authentication for the given connection.
 * @param connection the HTTP connection to authenticate
 */
public void authenticate(final HttpURLConnection connection);","/** 
 * Implement this method to provide authentication for the given connection.
 * @param connection the HTTP connection to authenticate
 */
void authenticate(final HttpURLConnection connection);",0.9825436408977556
165259,"@Override public Cursor query(Uri uri,String[] projection,String customSelection,String[] selectionArgs,String sortOrder){
  AppQuerySelection selection=new AppQuerySelection(customSelection,selectionArgs);
  boolean includeSwap=true;
switch (matcher.match(uri)) {
case CODE_LIST:
    includeSwap=false;
  break;
case CODE_SINGLE:
selection=selection.add(querySingle(uri.getLastPathSegment()));
break;
case CAN_UPDATE:
selection=selection.add(queryCanUpdate());
includeSwap=false;
break;
case REPO:
selection=selection.add(queryRepo(Long.parseLong(uri.getLastPathSegment())));
break;
case INSTALLED:
selection=selection.add(queryInstalled());
includeSwap=false;
break;
case SEARCH:
selection=selection.add(querySearch(uri.getLastPathSegment()));
includeSwap=false;
break;
case SEARCH_REPO:
selection=selection.add(querySearch(uri.getPathSegments().get(2)));
selection=selection.add(queryRepo(Long.parseLong(uri.getPathSegments().get(1))));
break;
case NO_APKS:
selection=selection.add(queryNoApks());
break;
case APPS:
selection=selection.add(queryApps(uri.getLastPathSegment()));
break;
case IGNORED:
selection=selection.add(queryIgnored());
break;
case CATEGORY:
selection=selection.add(queryCategory(uri.getLastPathSegment()));
includeSwap=false;
break;
case RECENTLY_UPDATED:
sortOrder=getTableName() + ""String_Node_Str"";
selection=selection.add(queryRecentlyUpdated());
includeSwap=false;
break;
case NEWLY_ADDED:
sortOrder=getTableName() + ""String_Node_Str"";
selection=selection.add(queryNewlyAdded());
includeSwap=false;
break;
default :
Log.e(TAG,""String_Node_Str"" + uri);
throw new UnsupportedOperationException(""String_Node_Str"" + uri);
}
if (!includeSwap) {
selection=selection.add(queryExcludeSwap());
}
if (AppProvider.DataColumns.NAME.equals(sortOrder)) {
sortOrder=getTableName() + sortOrder + ""String_Node_Str"";
}
Query query=new Query();
query.addSelection(selection);
query.addFields(projection);
query.addOrderBy(sortOrder);
Cursor cursor=read().rawQuery(query.toString(),selection.getArgs());
cursor.setNotificationUri(getContext().getContentResolver(),uri);
return cursor;
}","@Override public Cursor query(Uri uri,String[] projection,String customSelection,String[] selectionArgs,String sortOrder){
  AppQuerySelection selection=new AppQuerySelection(customSelection,selectionArgs);
  boolean includeSwap=true;
switch (matcher.match(uri)) {
case CODE_LIST:
    includeSwap=false;
  break;
case CODE_SINGLE:
selection=selection.add(querySingle(uri.getLastPathSegment()));
break;
case CAN_UPDATE:
selection=selection.add(queryCanUpdate());
includeSwap=false;
break;
case REPO:
selection=selection.add(queryRepo(Long.parseLong(uri.getLastPathSegment())));
break;
case INSTALLED:
selection=selection.add(queryInstalled());
includeSwap=false;
break;
case SEARCH:
selection=selection.add(querySearch(uri.getLastPathSegment()));
includeSwap=false;
break;
case SEARCH_REPO:
selection=selection.add(querySearch(uri.getPathSegments().get(2)));
selection=selection.add(queryRepo(Long.parseLong(uri.getPathSegments().get(1))));
break;
case NO_APKS:
selection=selection.add(queryNoApks());
break;
case APPS:
selection=selection.add(queryApps(uri.getLastPathSegment()));
break;
case IGNORED:
selection=selection.add(queryIgnored());
break;
case CATEGORY:
selection=selection.add(queryCategory(uri.getLastPathSegment()));
includeSwap=false;
break;
case RECENTLY_UPDATED:
sortOrder=getTableName() + ""String_Node_Str"";
selection=selection.add(queryRecentlyUpdated());
includeSwap=false;
break;
case NEWLY_ADDED:
sortOrder=getTableName() + ""String_Node_Str"";
selection=selection.add(queryNewlyAdded());
includeSwap=false;
break;
default :
Log.e(TAG,""String_Node_Str"" + uri);
throw new UnsupportedOperationException(""String_Node_Str"" + uri);
}
if (!includeSwap) {
selection=selection.add(queryExcludeSwap());
}
if (AppProvider.DataColumns.NAME.equals(sortOrder)) {
sortOrder=getTableName() + ""String_Node_Str"" + sortOrder+ ""String_Node_Str"";
}
Query query=new Query();
query.addSelection(selection);
query.addFields(projection);
query.addOrderBy(sortOrder);
Cursor cursor=read().rawQuery(query.toString(),selection.getArgs());
cursor.setNotificationUri(getContext().getContentResolver(),uri);
return cursor;
}",0.989783796626277
165260,"@Override public Uri insert(Uri uri,ContentValues values){
  int code=matcher.match(uri);
  if (code == CODE_INIT) {
    initTable();
    return null;
  }
 else   if (code == CODE_COMMIT) {
    commitTable();
    return null;
  }
 else {
    return super.insert(uri,values);
  }
}","@Override public Uri insert(Uri uri,ContentValues values){
switch (matcher.match(uri)) {
case CODE_INIT:
    initTable();
  return null;
case CODE_COMMIT:
commitTable();
return null;
default :
return super.insert(uri,values);
}
}",0.6601178781925344
165261,"@Override public Uri insert(Uri uri,ContentValues values){
  int code=matcher.match(uri);
  if (code == CODE_INIT) {
    initTable();
    return null;
  }
 else   if (code == CODE_COMMIT) {
    updateAppDetails();
    commitTable();
    return null;
  }
 else {
    return super.insert(uri,values);
  }
}","@Override public Uri insert(Uri uri,ContentValues values){
switch (matcher.match(uri)) {
case CODE_INIT:
    initTable();
  return null;
case CODE_COMMIT:
updateAppDetails();
commitTable();
return null;
default :
return super.insert(uri,values);
}
}",0.6799276672694394
165262,"public void install(@NonNull final App app){
  final Apk apkToInstall=ApkProvider.Helper.find(this,app.id,app.suggestedVercode);
  final ApkDownloader downloader=new ApkDownloader(this,apkToInstall,apkToInstall.repoAddress);
  downloader.setProgressListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
switch (event.type) {
case ApkDownloader.EVENT_APK_DOWNLOAD_COMPLETE:
        handleDownloadComplete(downloader.localFile());
      break;
case ApkDownloader.EVENT_ERROR:
    break;
}
}
}
);
downloader.download();
}","public void install(@NonNull final App app){
  final Apk apkToInstall=ApkProvider.Helper.find(this,app.id,app.suggestedVercode);
  final ApkDownloader downloader=new ApkDownloader(this,app,apkToInstall,apkToInstall.repoAddress);
  downloader.setProgressListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
switch (event.type) {
case ApkDownloader.EVENT_APK_DOWNLOAD_COMPLETE:
        handleDownloadComplete(downloader.localFile());
      break;
case ApkDownloader.EVENT_ERROR:
    break;
}
}
}
);
downloader.download();
}",0.9963898916967509
165263,"public BluetoothConnection openConnection() throws IOException {
  BluetoothSocket socket=device.createInsecureRfcommSocketToServiceRecord(BluetoothConstants.fdroidUuid());
  BluetoothConnection connection=new BluetoothConnection(socket);
  connection.open();
  return connection;
}","public BluetoothConnection openConnection() throws IOException {
  BluetoothSocket socket=null;
  try {
    socket=device.createInsecureRfcommSocketToServiceRecord(BluetoothConstants.fdroidUuid());
    BluetoothConnection connection=new BluetoothConnection(socket);
    connection.open();
    return connection;
  }
 catch (  IOException e1) {
    Log.e(TAG,""String_Node_Str"");
    Class<?> clazz=socket.getRemoteDevice().getClass();
    Class<?>[] paramTypes=new Class<?>[]{Integer.TYPE};
    Method method;
    try {
      method=clazz.getMethod(""String_Node_Str"",paramTypes);
      Object[] params=new Object[]{1};
      BluetoothSocket sockFallback=(BluetoothSocket)method.invoke(socket.getRemoteDevice(),params);
      BluetoothConnection connection=new BluetoothConnection(sockFallback);
      connection.open();
      return connection;
    }
 catch (    NoSuchMethodException e) {
      throw e1;
    }
catch (    IllegalAccessException e) {
      throw e1;
    }
catch (    InvocationTargetException e) {
      throw e1;
    }
  }
}",0.3975812547241119
165264,"public void onCreate(){
  super.onCreate();
  Preferences.get().unregisterLocalRepoBonjourListeners(bonjourEnabledListener);
  Preferences.get().registerLocalRepoHttpsListeners(httpsEnabledListener);
  LocalBroadcastManager.getInstance(this).registerReceiver(onWifiChange,new IntentFilter(WifiStateChangeService.BROADCAST));
}","public void onCreate(){
  super.onCreate();
  Log.d(TAG,""String_Node_Str"");
  Preferences.get().registerLocalRepoBonjourListeners(bonjourEnabledListener);
  Preferences.get().registerLocalRepoHttpsListeners(httpsEnabledListener);
  LocalBroadcastManager.getInstance(this).registerReceiver(onWifiChange,new IntentFilter(WifiStateChangeService.BROADCAST));
}",0.9501466275659824
165265,"public void disableSwapping(){
  if (enabled) {
    new AsyncTask<Void,Void,Void>(){
      @Override protected Void doInBackground(      Void... params){
        disableSwappingSynchronous();
        return null;
      }
      @Override protected void onPostExecute(      Void aVoid){
        if (timer != null) {
          timer.cancel();
        }
        enabled=false;
      }
    }
.execute();
  }
}","public void disableSwapping(){
  if (enabled) {
    new AsyncTask<Void,Void,Void>(){
      @Override protected Void doInBackground(      Void... params){
        Log.d(TAG,""String_Node_Str"");
        disableSwappingSynchronous();
        return null;
      }
      @Override protected void onPostExecute(      Void aVoid){
        Log.d(TAG,""String_Node_Str"");
        if (timer != null) {
          timer.cancel();
        }
        enabled=false;
        Log.d(TAG,""String_Node_Str"");
        stopForeground(true);
      }
    }
.execute();
  }
}",0.8487394957983193
165266,"@Override public void onDestroy(){
  super.onDestroy();
  disableSwapping();
}","@Override public void onDestroy(){
  super.onDestroy();
  Log.d(TAG,""String_Node_Str"");
  disableSwapping();
  Preferences.get().unregisterLocalRepoBonjourListeners(bonjourEnabledListener);
  Preferences.get().unregisterLocalRepoHttpsListeners(httpsEnabledListener);
  LocalBroadcastManager.getInstance(this).unregisterReceiver(onWifiChange);
}",0.3696682464454976
165267,"/** 
 * The guts of this class - responsible for enabling the relevant services for swapping. * Doesn't know anything about enabled/disabled. * Runs synchronously on the thread it was called.
 */
private void enableSwappingSynchronous(){
  nfcType.start();
  webServerType.start();
  bonjourType.start();
  startForeground(NOTIFICATION,createNotification());
}","/** 
 * The guts of this class - responsible for enabling the relevant services for swapping. * Doesn't know anything about enabled/disabled. * Runs synchronously on the thread it was called.
 */
private void enableSwappingSynchronous(){
  nfcType.start();
  webServerType.start();
  bonjourType.start();
}",0.918918918918919
165268,"/** 
 * @see SwapService#enableSwappingSynchronous()
 */
private void disableSwappingSynchronous(){
  bonjourType.stop();
  webServerType.stop();
  nfcType.stop();
  stopForeground(true);
}","/** 
 * @see SwapService#enableSwappingSynchronous()
 */
private void disableSwappingSynchronous(){
  Log.d(TAG,""String_Node_Str"");
  bonjourType.stop();
  webServerType.stop();
  nfcType.stop();
}",0.8549222797927462
165269,"@Override public void run(){
  disableSwapping();
}","@Override public void run(){
  Log.d(TAG,""String_Node_Str"" + TIMEOUT + ""String_Node_Str"");
  disableSwapping();
}",0.6219512195121951
165270,"public void restartIfEnabled(){
  if (enabled) {
    new AsyncTask<Void,Void,Void>(){
      @Override protected Void doInBackground(      Void... params){
        disableSwappingSynchronous();
        enableSwappingSynchronous();
        return null;
      }
    }
.execute();
  }
}","public void restartIfEnabled(){
  if (enabled) {
    new AsyncTask<Void,Void,Void>(){
      @Override protected Void doInBackground(      Void... params){
        Log.d(TAG,""String_Node_Str"");
        disableSwappingSynchronous();
        enableSwappingSynchronous();
        return null;
      }
    }
.execute();
  }
}",0.9368770764119602
165271,"private void initTimer(){
  if (timer != null)   timer.cancel();
  timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      disableSwapping();
    }
  }
,TIMEOUT);
}","private void initTimer(){
  if (timer != null) {
    Log.d(TAG,""String_Node_Str"");
    timer.cancel();
  }
  Log.d(TAG,""String_Node_Str"");
  timer=new Timer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      Log.d(TAG,""String_Node_Str"" + TIMEOUT + ""String_Node_Str"");
      disableSwapping();
    }
  }
,TIMEOUT);
}",0.6222222222222222
165272,"@Override protected Void doInBackground(Void... params){
  disableSwappingSynchronous();
  enableSwappingSynchronous();
  return null;
}","@Override protected Void doInBackground(Void... params){
  Log.d(TAG,""String_Node_Str"");
  disableSwappingSynchronous();
  enableSwappingSynchronous();
  return null;
}",0.8947368421052632
165273,"/** 
 * Ensures that the webserver is running, as are the other services which make swap work. Will only do all this if it is not already running, and will run on a background thread.' TODO: What about an ""enabling"" status? Not sure if it will be useful or not.
 */
public void enableSwapping(){
  if (!enabled) {
    new AsyncTask<Void,Void,Void>(){
      @Override protected Void doInBackground(      Void... params){
        enableSwappingSynchronous();
        return null;
      }
      @Override protected void onPostExecute(      Void aVoid){
        enabled=true;
      }
    }
.execute();
  }
  initTimer();
}","/** 
 * Ensures that the webserver is running, as are the other services which make swap work. Will only do all this if it is not already running, and will run on a background thread.' TODO: What about an ""enabling"" status? Not sure if it will be useful or not.
 */
public void enableSwapping(){
  if (!enabled) {
    new AsyncTask<Void,Void,Void>(){
      @Override protected Void doInBackground(      Void... params){
        Log.d(TAG,""String_Node_Str"");
        enableSwappingSynchronous();
        return null;
      }
      @Override protected void onPostExecute(      Void aVoid){
        Log.d(TAG,""String_Node_Str"");
        startForeground(NOTIFICATION,createNotification());
        enabled=true;
      }
    }
.execute();
  }
  initTimer();
}",0.9008746355685132
165274,"@Override protected void onPostExecute(Void aVoid){
  if (timer != null) {
    timer.cancel();
  }
  enabled=false;
}","@Override protected void onPostExecute(Void aVoid){
  Log.d(TAG,""String_Node_Str"");
  if (timer != null) {
    timer.cancel();
  }
  enabled=false;
  Log.d(TAG,""String_Node_Str"");
  stopForeground(true);
}",0.7267080745341615
165275,"@Override public void start(){
  if (Preferences.get().isLocalRepoBonjourEnabled())   return;
  if (pairService != null || jmdns != null)   clearCurrentMDNSService();
  String repoName=Preferences.get().getLocalRepoName();
  HashMap<String,String> values=new HashMap<>();
  values.put(""String_Node_Str"",""String_Node_Str"");
  values.put(""String_Node_Str"",repoName);
  values.put(""String_Node_Str"",FDroidApp.repo.fingerprint);
  String type;
  if (Preferences.get().isLocalRepoHttpsEnabled()) {
    values.put(""String_Node_Str"",""String_Node_Str"");
    type=""String_Node_Str"";
  }
 else {
    values.put(""String_Node_Str"",""String_Node_Str"");
    type=""String_Node_Str"";
  }
  try {
    pairService=ServiceInfo.create(type,repoName,FDroidApp.port,0,0,values);
    jmdns=JmDNS.create();
    jmdns.registerService(pairService);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e);
    Log.e(TAG,Log.getStackTraceString(e));
  }
}","@Override public void start(){
  if (Preferences.get().isLocalRepoBonjourEnabled())   return;
  if (pairService != null || jmdns != null)   clearCurrentMDNSService();
  String repoName=Preferences.get().getLocalRepoName();
  HashMap<String,String> values=new HashMap<>();
  values.put(""String_Node_Str"",""String_Node_Str"");
  values.put(""String_Node_Str"",repoName);
  values.put(""String_Node_Str"",FDroidApp.repo.fingerprint);
  String type;
  if (Preferences.get().isLocalRepoHttpsEnabled()) {
    values.put(""String_Node_Str"",""String_Node_Str"");
    type=""String_Node_Str"";
  }
 else {
    values.put(""String_Node_Str"",""String_Node_Str"");
    type=""String_Node_Str"";
  }
  try {
    Log.d(TAG,""String_Node_Str"");
    pairService=ServiceInfo.create(type,repoName,FDroidApp.port,0,0,values);
    jmdns=JmDNS.create();
    jmdns.registerService(pairService);
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + e);
    Log.e(TAG,Log.getStackTraceString(e));
  }
}",0.9650565262076052
165276,"@Override public void stop(){
  if (webServerThreadHandler == null) {
    Log.i(TAG,""String_Node_Str"");
    return;
  }
  Message msg=webServerThreadHandler.obtainMessage();
  msg.obj=webServerThreadHandler.getLooper().getThread().getName() + ""String_Node_Str"";
  webServerThreadHandler.sendMessage(msg);
}","@Override public void stop(){
  if (webServerThreadHandler == null) {
    Log.i(TAG,""String_Node_Str"");
    return;
  }
  Log.d(TAG,""String_Node_Str"");
  Message msg=webServerThreadHandler.obtainMessage();
  msg.obj=webServerThreadHandler.getLooper().getThread().getName() + ""String_Node_Str"";
  webServerThreadHandler.sendMessage(msg);
}",0.9503105590062112
165277,"/** 
 * The most preferred ABI is the first element in the list.
 */
@SuppressWarnings(""String_Node_Str"") public static String[] getAbis(){
  if (hasApi(21)) {
    return new String[]{Build.CPU_ABI};
  }
  if (hasApi(8)) {
    return new String[]{Build.CPU_ABI,Build.CPU_ABI2};
  }
  return Build.SUPPORTED_ABIS;
}","/** 
 * The most preferred ABI is the first element in the list.
 */
@SuppressWarnings(""String_Node_Str"") public static String[] getAbis(){
  if (hasApi(21)) {
    return Build.SUPPORTED_ABIS;
  }
  if (hasApi(8)) {
    return new String[]{Build.CPU_ABI,Build.CPU_ABI2};
  }
  return new String[]{Build.CPU_ABI};
}",0.6146496815286624
165278,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setEmptyText(getString(R.string.no_applications_found));
  packageManager=getActivity().getPackageManager();
  defaultAppIcon=getActivity().getResources().getDrawable(android.R.drawable.sym_def_app_icon);
  selectLocalAppsActivity=(SelectLocalAppsActivity)getActivity();
  ListView listView=getListView();
  listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(getActivity(),R.layout.select_local_apps_list_item,null,new String[]{InstalledAppProvider.DataColumns.APPLICATION_LABEL,InstalledAppProvider.DataColumns.APP_ID},new int[]{R.id.application_label,R.id.package_name},0);
  adapter.setViewBinder(new ViewBinder(){
    @Override public boolean setViewValue(    View view,    Cursor cursor,    int columnIndex){
      if (columnIndex == cursor.getColumnIndex(InstalledAppProvider.DataColumns.APP_ID)) {
        String packageName=cursor.getString(columnIndex);
        TextView textView=(TextView)view.findViewById(R.id.package_name);
        textView.setText(packageName);
        LinearLayout ll=(LinearLayout)view.getParent().getParent();
        ImageView iconView=(ImageView)ll.getChildAt(0);
        Drawable icon;
        try {
          icon=packageManager.getApplicationIcon(packageName);
        }
 catch (        PackageManager.NameNotFoundException e) {
          icon=defaultAppIcon;
        }
        iconView.setImageDrawable(icon);
        return true;
      }
      return false;
    }
  }
);
  setListAdapter(adapter);
  setListShown(false);
  getLoaderManager().initLoader(0,null,this);
  if (FDroidApp.selectedApps == null) {
    HashSet<String> selectedApps=new HashSet<String>();
    for (    String filename : LocalRepoManager.get(selectLocalAppsActivity).repoDir.list()) {
      if (filename.matches(""String_Node_Str"")) {
        String packageName=filename.substring(0,filename.indexOf(""String_Node_Str""));
        FDroidApp.selectedApps.add(packageName);
      }
    }
    FDroidApp.selectedApps=selectedApps;
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setEmptyText(getString(R.string.no_applications_found));
  packageManager=getActivity().getPackageManager();
  defaultAppIcon=getActivity().getResources().getDrawable(android.R.drawable.sym_def_app_icon);
  selectLocalAppsActivity=(SelectLocalAppsActivity)getActivity();
  ListView listView=getListView();
  listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(getActivity(),R.layout.select_local_apps_list_item,null,new String[]{InstalledAppProvider.DataColumns.APPLICATION_LABEL,InstalledAppProvider.DataColumns.APP_ID},new int[]{R.id.application_label,R.id.package_name},0);
  adapter.setViewBinder(new ViewBinder(){
    @Override public boolean setViewValue(    View view,    Cursor cursor,    int columnIndex){
      if (columnIndex == cursor.getColumnIndex(InstalledAppProvider.DataColumns.APP_ID)) {
        String packageName=cursor.getString(columnIndex);
        TextView textView=(TextView)view.findViewById(R.id.package_name);
        textView.setText(packageName);
        LinearLayout ll=(LinearLayout)view.getParent().getParent();
        ImageView iconView=(ImageView)ll.getChildAt(0);
        Drawable icon;
        try {
          icon=packageManager.getApplicationIcon(packageName);
        }
 catch (        PackageManager.NameNotFoundException e) {
          icon=defaultAppIcon;
        }
        iconView.setImageDrawable(icon);
        return true;
      }
      return false;
    }
  }
);
  setListAdapter(adapter);
  setListShown(false);
  getLoaderManager().initLoader(0,null,this);
  if (FDroidApp.selectedApps == null) {
    HashSet<String> selectedApps=new HashSet<String>();
    for (    String filename : LocalRepoManager.get(selectLocalAppsActivity).repoDir.list()) {
      if (filename.matches(""String_Node_Str"")) {
        String packageName=filename.substring(0,filename.indexOf(""String_Node_Str""));
        selectedApps.add(packageName);
      }
    }
    FDroidApp.selectedApps=selectedApps;
  }
}",0.9673450070989116
165279,"private Shell.Builder createShellBuilder(){
  Shell.Builder shellBuilder=new Shell.Builder().useSU().setWantSTDERR(true).setWatchdogTimeout(5).setMinimalLogging(true);
  return shellBuilder;
}","private Shell.Builder createShellBuilder(){
  Shell.Builder shellBuilder=new Shell.Builder().useSU().setWantSTDERR(true).setWatchdogTimeout(30).setMinimalLogging(false);
  return shellBuilder;
}",0.9740932642487048
165280,"@Override public void run(){
  setProgressBarIndeterminateVisibility(false);
  Log.e(TAG,""String_Node_Str"" + errorCode);
  AlertDialog.Builder alertBuilder=new AlertDialog.Builder(AppDetails.this);
  alertBuilder.setTitle(R.string.installer_error_title);
  alertBuilder.setMessage(R.string.installer_error_title);
  alertBuilder.setNeutralButton(android.R.string.ok,null);
  alertBuilder.create().show();
}","@Override public void run(){
  setSupportProgressBarIndeterminateVisibility(false);
  myAppObserver.onChange();
  Log.e(TAG,""String_Node_Str"" + errorCode);
  AlertDialog.Builder alertBuilder=new AlertDialog.Builder(AppDetails.this);
  alertBuilder.setTitle(R.string.installer_error_title);
  alertBuilder.setMessage(R.string.installer_error_title);
  alertBuilder.setNeutralButton(android.R.string.ok,null);
  alertBuilder.create().show();
}",0.9586776859504132
165281,"@Override public void removeApk(String packageName){
  setProgressBarIndeterminateVisibility(true);
  try {
    installer.deletePackage(packageName);
  }
 catch (  AndroidNotCompatibleException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","@Override public void removeApk(String packageName){
  setSupportProgressBarIndeterminateVisibility(true);
  try {
    installer.deletePackage(packageName);
  }
 catch (  AndroidNotCompatibleException e) {
    Log.e(TAG,""String_Node_Str"",e);
    setSupportProgressBarIndeterminateVisibility(false);
  }
}",0.8823529411764706
165282,"@Override public void onChange(boolean selfChange,Uri uri){
  if (!reset(app.id)) {
    AppDetails.this.finish();
    return;
  }
  refreshApkList();
  supportInvalidateOptionsMenu();
}","public void onChange(){
  if (!reset(app.id)) {
    AppDetails.this.finish();
    return;
  }
  refreshApkList();
  supportInvalidateOptionsMenu();
}",0.8922155688622755
165283,"/** 
 * Once the download completes successfully, call this method to start the install process with the file that was downloaded.
 */
private void downloadCompleteInstallApk(){
}","/** 
 * Once the download completes successfully, call this method to start the install process with the file that was downloaded.
 */
private void downloadCompleteInstallApk(){
  if (downloadHandler != null) {
    installApk(downloadHandler.localFile(),downloadHandler.getApk().id);
    cleanUpFinishedDownload();
  }
}",0.717434869739479
165284,"private void installApk(File file,String packageName){
  setProgressBarIndeterminateVisibility(true);
  try {
    installer.installPackage(file);
  }
 catch (  AndroidNotCompatibleException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","private void installApk(File file,String packageName){
  setSupportProgressBarIndeterminateVisibility(true);
  try {
    installer.installPackage(file);
  }
 catch (  AndroidNotCompatibleException e) {
    Log.e(TAG,""String_Node_Str"",e);
    setSupportProgressBarIndeterminateVisibility(false);
  }
}",0.8805970149253731
165285,"@Override protected void onCreate(Bundle savedInstanceState){
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  fdroidApp=((FDroidApp)getApplication());
  fdroidApp.applyTheme(this);
  super.onCreate(savedInstanceState);
  if (getIntent().hasExtra(EXTRA_FROM)) {
    setTitle(getIntent().getStringExtra(EXTRA_FROM));
  }
  mPm=getPackageManager();
  installer=Installer.getActivityInstaller(this,mPm,myInstallerCallback);
  ConfigurationChangeHelper previousData=(ConfigurationChangeHelper)getLastCustomNonConfigurationInstance();
  if (previousData != null) {
    Log.d(TAG,""String_Node_Str"");
    downloadHandler=previousData.downloader;
    if (downloadHandler != null) {
      Log.d(TAG,""String_Node_Str"");
    }
    app=previousData.app;
    setApp(app);
  }
 else {
    if (!reset(getAppIdFromIntent())) {
      finish();
      return;
    }
  }
  adapter=new ApkListAdapter(this,app);
  setContentView(R.layout.app_details);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  View onlyInLandscape=findViewById(R.id.app_summary_container);
  AppDetailsListFragment listFragment=(AppDetailsListFragment)getSupportFragmentManager().findFragmentById(R.id.fragment_app_list);
  if (onlyInLandscape == null) {
    listFragment.setupSummaryHeader();
  }
 else {
    listFragment.removeSummaryHeader();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  fdroidApp=((FDroidApp)getApplication());
  fdroidApp.applyTheme(this);
  super.onCreate(savedInstanceState);
  supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  if (getIntent().hasExtra(EXTRA_FROM)) {
    setTitle(getIntent().getStringExtra(EXTRA_FROM));
  }
  mPm=getPackageManager();
  installer=Installer.getActivityInstaller(this,mPm,myInstallerCallback);
  ConfigurationChangeHelper previousData=(ConfigurationChangeHelper)getLastCustomNonConfigurationInstance();
  if (previousData != null) {
    Log.d(TAG,""String_Node_Str"");
    downloadHandler=previousData.downloader;
    if (downloadHandler != null) {
      Log.d(TAG,""String_Node_Str"");
    }
    app=previousData.app;
    setApp(app);
  }
 else {
    if (!reset(getAppIdFromIntent())) {
      finish();
      return;
    }
  }
  adapter=new ApkListAdapter(this,app);
  setContentView(R.layout.app_details);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  View onlyInLandscape=findViewById(R.id.app_summary_container);
  AppDetailsListFragment listFragment=(AppDetailsListFragment)getSupportFragmentManager().findFragmentById(R.id.fragment_app_list);
  if (onlyInLandscape == null) {
    listFragment.setupSummaryHeader();
  }
 else {
    listFragment.removeSummaryHeader();
  }
  setSupportProgressBarIndeterminateVisibility(false);
}",0.8949301983835415
165286,"@Override public void onError(int operation,final int errorCode){
  if (errorCode == InstallerCallback.ERROR_CODE_CANCELED) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        setProgressBarIndeterminateVisibility(false);
      }
    }
);
  }
 else {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        setProgressBarIndeterminateVisibility(false);
        Log.e(TAG,""String_Node_Str"" + errorCode);
        AlertDialog.Builder alertBuilder=new AlertDialog.Builder(AppDetails.this);
        alertBuilder.setTitle(R.string.installer_error_title);
        alertBuilder.setMessage(R.string.installer_error_title);
        alertBuilder.setNeutralButton(android.R.string.ok,null);
        alertBuilder.create().show();
      }
    }
);
  }
}","@Override public void onError(int operation,final int errorCode){
  if (errorCode == InstallerCallback.ERROR_CODE_CANCELED) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        setSupportProgressBarIndeterminateVisibility(false);
        myAppObserver.onChange();
      }
    }
);
  }
 else {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        setSupportProgressBarIndeterminateVisibility(false);
        myAppObserver.onChange();
        Log.e(TAG,""String_Node_Str"" + errorCode);
        AlertDialog.Builder alertBuilder=new AlertDialog.Builder(AppDetails.this);
        alertBuilder.setTitle(R.string.installer_error_title);
        alertBuilder.setMessage(R.string.installer_error_title);
        alertBuilder.setNeutralButton(android.R.string.ok,null);
        alertBuilder.create().show();
      }
    }
);
  }
}",0.9504830917874396
165287,"@Override public void onSuccess(final int operation){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (operation == Installer.InstallerCallback.OPERATION_INSTALL) {
        PackageManagerCompat.setInstaller(mPm,app.id);
      }
      setProgressBarIndeterminateVisibility(false);
    }
  }
);
}","@Override public void onSuccess(final int operation){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (operation == Installer.InstallerCallback.OPERATION_INSTALL) {
        PackageManagerCompat.setInstaller(mPm,app.id);
      }
      setSupportProgressBarIndeterminateVisibility(false);
      myAppObserver.onChange();
    }
  }
);
}",0.942562592047128
165288,"@Override protected void onReceiveResult(int resultCode,Bundle resultData){
  String message=resultData.getString(UpdateService.RESULT_MESSAGE);
  boolean finished=false;
  if (resultCode == UpdateService.STATUS_ERROR) {
    forwardEvent(EVENT_ERROR);
    Toast.makeText(context,message,Toast.LENGTH_LONG).show();
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_COMPLETE_WITH_CHANGES) {
    forwardEvent(EVENT_COMPLETE_WITH_CHANGES);
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_COMPLETE_AND_SAME) {
    forwardEvent(EVENT_COMPLETE_AND_SAME);
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_INFO) {
    forwardEvent(EVENT_INFO);
    dialog.setMessage(message);
  }
  if (finished && dialog.isShowing())   try {
    dialog.dismiss();
  }
 catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
}","@Override protected void onReceiveResult(int resultCode,Bundle resultData){
  String message=resultData.getString(UpdateService.RESULT_MESSAGE);
  boolean finished=false;
  if (resultCode == UpdateService.STATUS_ERROR) {
    forwardEvent(EVENT_ERROR);
    Toast.makeText(context,message,Toast.LENGTH_LONG).show();
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_COMPLETE_WITH_CHANGES) {
    forwardEvent(EVENT_COMPLETE_WITH_CHANGES);
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_COMPLETE_AND_SAME) {
    forwardEvent(EVENT_COMPLETE_AND_SAME);
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_INFO) {
    forwardEvent(EVENT_INFO);
    if (dialog != null) {
      lastShownMessage=message;
      dialog.setMessage(message);
    }
  }
  if (finished) {
    forwardEvent(EVENT_FINISHED);
    if (dialog.isShowing()) {
      try {
        dialog.dismiss();
      }
 catch (      IllegalArgumentException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9050632911392406
165289,"public static UpdateReceiver updateRepoNow(String address,Context context){
  String title=context.getString(R.string.process_wait_title);
  String message=context.getString(R.string.process_update_msg);
  ProgressDialog dialog=ProgressDialog.show(context,title,message,true,true);
  dialog.setIcon(android.R.drawable.ic_dialog_info);
  dialog.setCanceledOnTouchOutside(false);
  Intent intent=new Intent(context,UpdateService.class);
  UpdateReceiver receiver=new UpdateReceiver(new Handler());
  receiver.setContext(context).setDialog(dialog);
  intent.putExtra(EXTRA_RECEIVER,receiver);
  if (!TextUtils.isEmpty(address)) {
    intent.putExtra(EXTRA_ADDRESS,address);
  }
  context.startService(intent);
  return receiver;
}","public static UpdateReceiver updateRepoNow(String address,Context context){
  Intent intent=new Intent(context,UpdateService.class);
  UpdateReceiver receiver=new UpdateReceiver(new Handler());
  receiver.showDialog(context);
  intent.putExtra(EXTRA_RECEIVER,receiver);
  if (!TextUtils.isEmpty(address)) {
    intent.putExtra(EXTRA_ADDRESS,address);
  }
  context.startService(intent);
  return receiver;
}",0.7001763668430335
165290,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
  setRetainInstance(true);
}",0.9025270758122744
165291,"@Override public void onProgress(Event event){
  if (event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
    repo=loadRepoDetails();
    updateView((ViewGroup)getView());
  }
}","@Override public void onProgress(Event event){
  if (event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
    repo=loadRepoDetails();
    updateView((ViewGroup)getView());
  }
  if (event.type.equals(UpdateService.EVENT_FINISHED)) {
    updateHandler=null;
  }
}",0.8156182212581344
165292,"/** 
 * When an update is performed, notify the listener so that the repo list can be updated. We will perform the update ourselves though.
 */
private void performUpdate(){
  ContentValues values=new ContentValues(1);
  values.put(RepoProvider.DataColumns.IN_USE,1);
  RepoProvider.Helper.update(getActivity(),repo,values);
  UpdateService.updateRepoNow(repo.address,getActivity()).setListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
      if (event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
        repo=loadRepoDetails();
        updateView((ViewGroup)getView());
      }
    }
  }
);
}","/** 
 * When an update is performed, notify the listener so that the repo list can be updated. We will perform the update ourselves though.
 */
private void performUpdate(){
  ContentValues values=new ContentValues(1);
  values.put(RepoProvider.DataColumns.IN_USE,1);
  RepoProvider.Helper.update(getActivity(),repo,values);
  updateHandler=UpdateService.updateRepoNow(repo.address,getActivity()).setListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
      if (event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
        repo=loadRepoDetails();
        updateView((ViewGroup)getView());
      }
      if (event.type.equals(UpdateService.EVENT_FINISHED)) {
        updateHandler=null;
      }
    }
  }
);
}",0.9206576125804146
165293,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  if (updateHandler != null) {
    updateHandler.showDialog(getActivity());
  }
}",0.6666666666666666
165294,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  setHasOptionsMenu(true);
}",0.9025270758122744
165295,"@Override public void onProgress(Event event){
  if (event.type.equals(UpdateService.EVENT_COMPLETE_AND_SAME) || event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
    changed=false;
  }
}","@Override public void onProgress(Event event){
  if (event.type.equals(UpdateService.EVENT_COMPLETE_AND_SAME) || event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
    changed=false;
  }
  if (event.type.equals(UpdateService.EVENT_FINISHED)) {
    updateHandler=null;
  }
}",0.8254620123203286
165296,"private void updateRepos(){
  UpdateService.updateNow(getActivity()).setListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
      if (event.type.equals(UpdateService.EVENT_COMPLETE_AND_SAME) || event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
        changed=false;
      }
    }
  }
);
}","private void updateRepos(){
  updateHandler=UpdateService.updateNow(getActivity()).setListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
      if (event.type.equals(UpdateService.EVENT_COMPLETE_AND_SAME) || event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
        changed=false;
      }
      if (event.type.equals(UpdateService.EVENT_FINISHED)) {
        updateHandler=null;
      }
    }
  }
);
}",0.8593155893536122
165297,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  getListView().addHeaderView(createHeaderView(),null,false);
  repoAdapter=new RepoAdapter(getActivity(),null);
  repoAdapter.setEnabledListener(this);
  setListAdapter(repoAdapter);
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (getListAdapter() == null) {
    getListView().addHeaderView(createHeaderView(),null,false);
    repoAdapter=new RepoAdapter(getActivity(),null);
    repoAdapter.setEnabledListener(this);
    setListAdapter(repoAdapter);
  }
}",0.9287925696594428
165298,"@Override protected void onReceiveResult(int resultCode,Bundle resultData){
  String message=resultData.getString(UpdateService.RESULT_MESSAGE);
  boolean finished=false;
  if (resultCode == UpdateService.STATUS_ERROR) {
    forwardEvent(EVENT_ERROR);
    Toast.makeText(context,message,Toast.LENGTH_LONG).show();
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_COMPLETE_WITH_CHANGES) {
    forwardEvent(EVENT_COMPLETE_WITH_CHANGES);
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_COMPLETE_AND_SAME) {
    forwardEvent(EVENT_COMPLETE_AND_SAME);
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_INFO) {
    forwardEvent(EVENT_INFO);
    dialog.setMessage(message);
  }
  if (finished && dialog.isShowing())   try {
    dialog.dismiss();
  }
 catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
}","@Override protected void onReceiveResult(int resultCode,Bundle resultData){
  String message=resultData.getString(UpdateService.RESULT_MESSAGE);
  boolean finished=false;
  if (resultCode == UpdateService.STATUS_ERROR) {
    forwardEvent(EVENT_ERROR);
    Toast.makeText(context,message,Toast.LENGTH_LONG).show();
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_COMPLETE_WITH_CHANGES) {
    forwardEvent(EVENT_COMPLETE_WITH_CHANGES);
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_COMPLETE_AND_SAME) {
    forwardEvent(EVENT_COMPLETE_AND_SAME);
    finished=true;
  }
 else   if (resultCode == UpdateService.STATUS_INFO) {
    forwardEvent(EVENT_INFO);
    if (dialog != null) {
      lastShownMessage=message;
      dialog.setMessage(message);
    }
  }
  if (finished) {
    forwardEvent(EVENT_FINISHED);
    if (dialog.isShowing()) {
      try {
        dialog.dismiss();
      }
 catch (      IllegalArgumentException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9050632911392406
165299,"public static UpdateReceiver updateRepoNow(String address,Context context){
  String title=context.getString(R.string.process_wait_title);
  String message=context.getString(R.string.process_update_msg);
  ProgressDialog dialog=ProgressDialog.show(context,title,message,true,true);
  dialog.setIcon(android.R.drawable.ic_dialog_info);
  dialog.setCanceledOnTouchOutside(false);
  Intent intent=new Intent(context,UpdateService.class);
  UpdateReceiver receiver=new UpdateReceiver(new Handler());
  receiver.setContext(context).setDialog(dialog);
  intent.putExtra(EXTRA_RECEIVER,receiver);
  if (!TextUtils.isEmpty(address)) {
    intent.putExtra(EXTRA_ADDRESS,address);
  }
  context.startService(intent);
  return receiver;
}","public static UpdateReceiver updateRepoNow(String address,Context context){
  Intent intent=new Intent(context,UpdateService.class);
  UpdateReceiver receiver=new UpdateReceiver(new Handler());
  receiver.showDialog(context);
  intent.putExtra(EXTRA_RECEIVER,receiver);
  if (!TextUtils.isEmpty(address)) {
    intent.putExtra(EXTRA_ADDRESS,address);
  }
  context.startService(intent);
  return receiver;
}",0.7001763668430335
165300,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
  setRetainInstance(true);
}",0.9025270758122744
165301,"@Override public void onProgress(Event event){
  if (event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
    repo=loadRepoDetails();
    updateView((ViewGroup)getView());
  }
}","@Override public void onProgress(Event event){
  if (event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
    repo=loadRepoDetails();
    updateView((ViewGroup)getView());
  }
  if (event.type.equals(UpdateService.EVENT_FINISHED)) {
    updateHandler=null;
  }
}",0.8156182212581344
165302,"/** 
 * When an update is performed, notify the listener so that the repo list can be updated. We will perform the update ourselves though.
 */
private void performUpdate(){
  ContentValues values=new ContentValues(1);
  values.put(RepoProvider.DataColumns.IN_USE,1);
  RepoProvider.Helper.update(getActivity(),repo,values);
  UpdateService.updateRepoNow(repo.address,getActivity()).setListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
      if (event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
        repo=loadRepoDetails();
        updateView((ViewGroup)getView());
      }
    }
  }
);
}","/** 
 * When an update is performed, notify the listener so that the repo list can be updated. We will perform the update ourselves though.
 */
private void performUpdate(){
  ContentValues values=new ContentValues(1);
  values.put(RepoProvider.DataColumns.IN_USE,1);
  RepoProvider.Helper.update(getActivity(),repo,values);
  updateHandler=UpdateService.updateRepoNow(repo.address,getActivity()).setListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
      if (event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
        repo=loadRepoDetails();
        updateView((ViewGroup)getView());
      }
      if (event.type.equals(UpdateService.EVENT_FINISHED)) {
        updateHandler=null;
      }
    }
  }
);
}",0.9206576125804146
165303,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  if (updateHandler != null) {
    updateHandler.showDialog(getActivity());
  }
}",0.6666666666666666
165304,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  setHasOptionsMenu(true);
}",0.9025270758122744
165305,"@Override public void onProgress(Event event){
  if (event.type.equals(UpdateService.EVENT_COMPLETE_AND_SAME) || event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
    changed=false;
  }
}","@Override public void onProgress(Event event){
  if (event.type.equals(UpdateService.EVENT_COMPLETE_AND_SAME) || event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
    changed=false;
  }
  if (event.type.equals(UpdateService.EVENT_FINISHED)) {
    updateHandler=null;
  }
}",0.8254620123203286
165306,"private void updateRepos(){
  UpdateService.updateNow(getActivity()).setListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
      if (event.type.equals(UpdateService.EVENT_COMPLETE_AND_SAME) || event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
        changed=false;
      }
    }
  }
);
}","private void updateRepos(){
  updateHandler=UpdateService.updateNow(getActivity()).setListener(new ProgressListener(){
    @Override public void onProgress(    Event event){
      if (event.type.equals(UpdateService.EVENT_COMPLETE_AND_SAME) || event.type.equals(UpdateService.EVENT_COMPLETE_WITH_CHANGES)) {
        changed=false;
      }
      if (event.type.equals(UpdateService.EVENT_FINISHED)) {
        updateHandler=null;
      }
    }
  }
);
}",0.8593155893536122
165307,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  getListView().addHeaderView(createHeaderView(),null,false);
  repoAdapter=new RepoAdapter(getActivity(),null);
  repoAdapter.setEnabledListener(this);
  setListAdapter(repoAdapter);
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (getListAdapter() == null) {
    getListView().addHeaderView(createHeaderView(),null,false);
    repoAdapter=new RepoAdapter(getActivity(),null);
    repoAdapter.setEnabledListener(this);
    setListAdapter(repoAdapter);
  }
}",0.9287925696594428
165308,"@Override protected void onNewIntent(Intent intent){
  addRepoFromIntent(intent);
}","@Override protected void onNewIntent(Intent intent){
  setIntent(intent);
}",0.9240506329113924
165309,"public static String calcFingerprint(byte[] key){
  String ret=null;
  try {
    MessageDigest digest=MessageDigest.getInstance(""String_Node_Str"");
    digest.update(key);
    byte[] fingerprint=digest.digest();
    Formatter formatter=new Formatter(new StringBuilder());
    for (int i=1; i < fingerprint.length; i++) {
      formatter.format(""String_Node_Str"",fingerprint[i]);
    }
    ret=formatter.toString();
    formatter.close();
  }
 catch (  Exception e) {
    Log.w(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
  }
  return ret;
}","public static String calcFingerprint(byte[] key){
  String ret=null;
  try {
    MessageDigest digest=MessageDigest.getInstance(""String_Node_Str"");
    digest.update(key);
    byte[] fingerprint=digest.digest();
    Formatter formatter=new Formatter(new StringBuilder());
    for (int i=0; i < fingerprint.length; i++) {
      formatter.format(""String_Node_Str"",fingerprint[i]);
    }
    ret=formatter.toString();
    formatter.close();
  }
 catch (  Exception e) {
    Log.w(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
  }
  return ret;
}",0.9982238010657194
165310,"public static String formatFingerprint(String fingerprint){
  if (fingerprint.length() != 62)   return ""String_Node_Str"";
  String displayFP=fingerprint.substring(0,2);
  for (int i=2; i < fingerprint.length(); i=i + 2)   displayFP+=""String_Node_Str"" + fingerprint.substring(i,i + 2);
  return displayFP;
}","public static String formatFingerprint(String fingerprint){
  if (fingerprint.length() != 64)   return ""String_Node_Str"";
  String displayFP=fingerprint.substring(0,2);
  for (int i=2; i < fingerprint.length(); i=i + 2)   displayFP+=""String_Node_Str"" + fingerprint.substring(i,i + 2);
  return displayFP;
}",0.9967320261437908
165311,"/** 
 * Add a fingerprint field to repos. For any field with a public key, calculate its fingerprint and save it to the database.
 */
private void addFingerprintToRepo(SQLiteDatabase db,int oldVersion){
  if (oldVersion < 29) {
    if (!columnExists(db,TABLE_REPO,""String_Node_Str""))     db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
    List<Repo> oldrepos=new ArrayList<Repo>();
    Cursor cursor=db.query(TABLE_REPO,new String[]{""String_Node_Str"",""String_Node_Str""},null,null,null,null,null);
    if (cursor != null) {
      if (cursor.getCount() > 0) {
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
          Repo repo=new Repo();
          repo.address=cursor.getString(0);
          repo.pubkey=cursor.getString(1);
          oldrepos.add(repo);
          cursor.moveToNext();
        }
      }
      cursor.close();
    }
    for (    Repo repo : oldrepos) {
      ContentValues values=new ContentValues();
      values.put(""String_Node_Str"",Utils.calcFingerprint(repo.pubkey));
      db.update(TABLE_REPO,values,""String_Node_Str"",new String[]{repo.address});
    }
  }
}","/** 
 * Add a fingerprint field to repos. For any field with a public key, calculate its fingerprint and save it to the database.
 */
private void addFingerprintToRepo(SQLiteDatabase db,int oldVersion){
  if (oldVersion < 44) {
    if (!columnExists(db,TABLE_REPO,""String_Node_Str""))     db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
    List<Repo> oldrepos=new ArrayList<Repo>();
    Cursor cursor=db.query(TABLE_REPO,new String[]{""String_Node_Str"",""String_Node_Str""},null,null,null,null,null);
    if (cursor != null) {
      if (cursor.getCount() > 0) {
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
          Repo repo=new Repo();
          repo.address=cursor.getString(0);
          repo.pubkey=cursor.getString(1);
          oldrepos.add(repo);
          cursor.moveToNext();
        }
      }
      cursor.close();
    }
    for (    Repo repo : oldrepos) {
      ContentValues values=new ContentValues();
      values.put(""String_Node_Str"",Utils.calcFingerprint(repo.pubkey));
      db.update(TABLE_REPO,values,""String_Node_Str"",new String[]{repo.address});
    }
  }
}",0.9982142857142856
165312,"@Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  setCurrentCategory(categories.get(pos));
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id){
  getListView().setSelection(0);
  setCurrentCategory(categories.get(pos));
}",0.888135593220339
165313,"private Spinner createCategorySpinner(){
  final List<String> categories=AppProvider.Helper.categories(getActivity());
  categorySpinner=new Spinner(getActivity());
  categorySpinner.setId(R.id.categorySpinner);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_item,categories);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  categorySpinner.setAdapter(adapter);
  getActivity().getContentResolver().registerContentObserver(AppProvider.getContentUri(),false,new CategoryObserver(adapter));
  categorySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long id){
      setCurrentCategory(categories.get(pos));
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
      setCurrentCategory(null);
    }
  }
);
  return categorySpinner;
}","private Spinner createCategorySpinner(){
  final List<String> categories=AppProvider.Helper.categories(getActivity());
  categorySpinner=new Spinner(getActivity());
  categorySpinner.setId(R.id.categorySpinner);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_item,categories);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  categorySpinner.setAdapter(adapter);
  getActivity().getContentResolver().registerContentObserver(AppProvider.getContentUri(),false,new CategoryObserver(adapter));
  categorySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long id){
      getListView().setSelection(0);
      setCurrentCategory(categories.get(pos));
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
      setCurrentCategory(null);
    }
  }
);
  return categorySpinner;
}",0.981284774911482
165314,"private void setCurrentCategory(String category){
  currentCategory=category;
  Log.d(""String_Node_Str"",""String_Node_Str"" + currentCategory + ""String_Node_Str"");
  getLoaderManager().restartLoader(0,null,AvailableAppsFragment.this);
  getListView().setSelection(0);
}","private void setCurrentCategory(String category){
  currentCategory=category;
  Log.d(""String_Node_Str"",""String_Node_Str"" + currentCategory + ""String_Node_Str"");
  getLoaderManager().restartLoader(0,null,AvailableAppsFragment.this);
}",0.934131736526946
165315,"@Override protected void onCreate(Bundle savedInstanceState){
  ((FDroidApp)getApplication()).applyTheme(this);
  super.onCreate(savedInstanceState);
  displayImageOptions=new DisplayImageOptions.Builder().cacheInMemory(true).cacheOnDisc(true).imageScaleType(ImageScaleType.NONE).showImageOnLoading(R.drawable.ic_repo_app_default).showImageForEmptyUri(R.drawable.ic_repo_app_default).bitmapConfig(Bitmap.Config.RGB_565).build();
  ActionBarCompat abCompat=ActionBarCompat.create(this);
  abCompat.setDisplayHomeAsUpEnabled(true);
  setContentView(R.layout.appdetails);
  Intent i=getIntent();
  Uri data=i.getData();
  if (data != null) {
    if (data.isHierarchical()) {
      if (data.getHost() != null && data.getHost().equals(""String_Node_Str"")) {
        appid=data.getQueryParameter(""String_Node_Str"");
      }
 else {
        appid=data.getLastPathSegment();
        if (appid != null && appid.equals(""String_Node_Str""))         appid=null;
      }
    }
 else {
      appid=data.getEncodedSchemeSpecificPart();
    }
    Log.d(""String_Node_Str"",""String_Node_Str"" + appid + ""String_Node_Str"");
  }
 else   if (!i.hasExtra(""String_Node_Str"")) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    appid=i.getStringExtra(""String_Node_Str"");
  }
  if (i.hasExtra(""String_Node_Str"")) {
    setTitle(i.getStringExtra(""String_Node_Str""));
  }
  mPm=getPackageManager();
  AppDetails old=(AppDetails)getLastNonConfigurationInstance();
  if (old != null) {
    copyState(old);
  }
 else {
    if (!reset()) {
      finish();
      return;
    }
    resetRequired=false;
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  pref_expert=prefs.getBoolean(Preferences.PREF_EXPERT,false);
  pref_permissions=prefs.getBoolean(Preferences.PREF_PERMISSIONS,false);
  pref_incompatibleVersions=prefs.getBoolean(Preferences.PREF_INCOMP_VER,false);
  headerView=new LinearLayout(this);
  ListView lv=(ListView)findViewById(android.R.id.list);
  lv.addHeaderView(headerView);
  adapter=new ApkListAdapter(this,app);
  setListAdapter(adapter);
  startViews();
}","@Override protected void onCreate(Bundle savedInstanceState){
  ((FDroidApp)getApplication()).applyTheme(this);
  super.onCreate(savedInstanceState);
  displayImageOptions=new DisplayImageOptions.Builder().cacheInMemory(true).cacheOnDisc(true).imageScaleType(ImageScaleType.NONE).showImageOnLoading(R.drawable.ic_repo_app_default).showImageForEmptyUri(R.drawable.ic_repo_app_default).bitmapConfig(Bitmap.Config.RGB_565).build();
  setContentView(R.layout.appdetails);
  ActionBarCompat.create(this).setDisplayHomeAsUpEnabled(true);
  Intent i=getIntent();
  Uri data=i.getData();
  if (data != null) {
    if (data.isHierarchical()) {
      if (data.getHost() != null && data.getHost().equals(""String_Node_Str"")) {
        appid=data.getQueryParameter(""String_Node_Str"");
      }
 else {
        appid=data.getLastPathSegment();
        if (appid != null && appid.equals(""String_Node_Str""))         appid=null;
      }
    }
 else {
      appid=data.getEncodedSchemeSpecificPart();
    }
    Log.d(""String_Node_Str"",""String_Node_Str"" + appid + ""String_Node_Str"");
  }
 else   if (!i.hasExtra(""String_Node_Str"")) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    appid=i.getStringExtra(""String_Node_Str"");
  }
  if (i.hasExtra(""String_Node_Str"")) {
    setTitle(i.getStringExtra(""String_Node_Str""));
  }
  mPm=getPackageManager();
  AppDetails old=(AppDetails)getLastNonConfigurationInstance();
  if (old != null) {
    copyState(old);
  }
 else {
    if (!reset()) {
      finish();
      return;
    }
    resetRequired=false;
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  pref_expert=prefs.getBoolean(Preferences.PREF_EXPERT,false);
  pref_permissions=prefs.getBoolean(Preferences.PREF_PERMISSIONS,false);
  pref_incompatibleVersions=prefs.getBoolean(Preferences.PREF_INCOMP_VER,false);
  headerView=new LinearLayout(this);
  ListView lv=(ListView)findViewById(android.R.id.list);
  lv.addHeaderView(headerView);
  adapter=new ApkListAdapter(this,app);
  setListAdapter(adapter);
  startViews();
}",0.9724154473494844
165316,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((FDroidApp)getApplication()).applyTheme(this);
  if (savedInstanceState == null) {
    listFragment=new RepoListFragment();
    getSupportFragmentManager().beginTransaction().add(android.R.id.content,listFragment).commit();
  }
  ActionBarCompat.create(this).setDisplayHomeAsUpEnabled(true);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((FDroidApp)getApplication()).applyTheme(this);
  if (savedInstanceState == null) {
    setContentView(new LinearLayout(this));
    listFragment=new RepoListFragment();
    getSupportFragmentManager().beginTransaction().add(android.R.id.content,listFragment).commit();
  }
  ActionBarCompat.create(this).setDisplayHomeAsUpEnabled(true);
}",0.9473684210526316
165317,"@Override public void onCreate(Bundle savedInstanceState){
  ((FDroidApp)getApplication()).applyTheme(this);
  super.onCreate(savedInstanceState);
  ActionBarCompat.create(this).setDisplayHomeAsUpEnabled(true);
  setContentView(R.layout.searchresults);
  setDefaultKeyMode(DEFAULT_KEYS_SEARCH_LOCAL);
}","@Override public void onCreate(Bundle savedInstanceState){
  ((FDroidApp)getApplication()).applyTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.searchresults);
  ActionBarCompat.create(this).setDisplayHomeAsUpEnabled(true);
  setDefaultKeyMode(DEFAULT_KEYS_SEARCH_LOCAL);
}",0.8609271523178808
165318,"@Override protected void onCreate(Bundle savedInstanceState){
  ((FDroidApp)getApplication()).applyTheme(this);
  super.onCreate(savedInstanceState);
  long repoId=getIntent().getLongExtra(RepoDetailsFragment.ARG_REPO_ID,0);
  if (savedInstanceState == null) {
    RepoDetailsFragment fragment=new RepoDetailsFragment();
    fragment.setArguments(getIntent().getExtras());
    getSupportFragmentManager().beginTransaction().add(android.R.id.content,fragment).commit();
  }
  String[] projection=new String[]{RepoProvider.DataColumns.NAME,RepoProvider.DataColumns.ADDRESS,RepoProvider.DataColumns.FINGERPRINT};
  repo=RepoProvider.Helper.findById(this,repoId,projection);
  ActionBarCompat.create(this).setDisplayHomeAsUpEnabled(true);
  setTitle(repo.getName());
  wifiManager=(WifiManager)getSystemService(WIFI_SERVICE);
  if (Build.VERSION.SDK_INT >= 14)   setNfc();
}","@Override protected void onCreate(Bundle savedInstanceState){
  ((FDroidApp)getApplication()).applyTheme(this);
  super.onCreate(savedInstanceState);
  long repoId=getIntent().getLongExtra(RepoDetailsFragment.ARG_REPO_ID,0);
  if (savedInstanceState == null) {
    setContentView(new LinearLayout(this));
    RepoDetailsFragment fragment=new RepoDetailsFragment();
    fragment.setArguments(getIntent().getExtras());
    getSupportFragmentManager().beginTransaction().add(android.R.id.content,fragment).commit();
  }
  String[] projection=new String[]{RepoProvider.DataColumns.NAME,RepoProvider.DataColumns.ADDRESS,RepoProvider.DataColumns.FINGERPRINT};
  repo=RepoProvider.Helper.findById(this,repoId,projection);
  ActionBarCompat.create(this).setDisplayHomeAsUpEnabled(true);
  setTitle(repo.getName());
  wifiManager=(WifiManager)getSystemService(WIFI_SERVICE);
  if (Build.VERSION.SDK_INT >= 14)   setNfc();
}",0.9753363228699552
165319,"/** 
 * Add a name and description to the repo table, and updates the two default repos with values from strings.xml.
 */
private void addNameAndDescriptionToRepo(SQLiteDatabase db,int oldVersion){
  if (oldVersion < 21) {
    if (!columnExists(db,TABLE_REPO,""String_Node_Str""))     db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
    if (!columnExists(db,TABLE_REPO,""String_Node_Str""))     db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",context.getString(R.string.default_repo_name));
    values.put(""String_Node_Str"",context.getString(R.string.default_repo_description));
    db.update(TABLE_REPO,values,""String_Node_Str"",new String[]{context.getString(R.string.default_repo_address)});
    values.clear();
    values.put(""String_Node_Str"",context.getString(R.string.default_repo_name2));
    values.put(""String_Node_Str"",context.getString(R.string.default_repo_description2));
    db.update(TABLE_REPO,values,""String_Node_Str"",new String[]{context.getString(R.string.default_repo_address2)});
  }
}","/** 
 * Add a name and description to the repo table, and updates the two default repos with values from strings.xml.
 */
private void addNameAndDescriptionToRepo(SQLiteDatabase db,int oldVersion){
  boolean nameExists=columnExists(db,TABLE_REPO,""String_Node_Str"");
  boolean descriptionExists=columnExists(db,TABLE_REPO,""String_Node_Str"");
  if (oldVersion < 21 && !(nameExists && descriptionExists)) {
    if (!nameExists)     db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
    if (!descriptionExists)     db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",context.getString(R.string.default_repo_name));
    values.put(""String_Node_Str"",context.getString(R.string.default_repo_description));
    db.update(TABLE_REPO,values,""String_Node_Str"",new String[]{context.getString(R.string.default_repo_address)});
    values.clear();
    values.put(""String_Node_Str"",context.getString(R.string.default_repo_name2));
    values.put(""String_Node_Str"",context.getString(R.string.default_repo_description2));
    db.update(TABLE_REPO,values,""String_Node_Str"",new String[]{context.getString(R.string.default_repo_address2)});
  }
}",0.8523890784982935
165320,"private void addMaxAgeToRepo(SQLiteDatabase db,int oldVersion){
  if (oldVersion < 30) {
    db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
  }
}","private void addMaxAgeToRepo(SQLiteDatabase db,int oldVersion){
  if (oldVersion < 30 && !columnExists(db,TABLE_REPO,""String_Node_Str"")) {
    db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
  }
}",0.6631016042780749
165321,"private void renameRepoId(SQLiteDatabase db,int oldVersion){
  if (oldVersion < 36) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
    db.beginTransaction();
    try {
      String tempTableName=TABLE_REPO + ""String_Node_Str"";
      db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str""+ tempTableName+ ""String_Node_Str"");
      String createTableDdl=""String_Node_Str"" + TABLE_REPO + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      db.execSQL(createTableDdl);
      String nonIdFields=""String_Node_Str"" + ""String_Node_Str"";
      String insertSql=""String_Node_Str"" + TABLE_REPO + ""String_Node_Str""+ nonIdFields+ ""String_Node_Str""+ ""String_Node_Str""+ nonIdFields+ ""String_Node_Str""+ tempTableName+ ""String_Node_Str"";
      db.execSQL(insertSql);
      db.execSQL(""String_Node_Str"" + tempTableName + ""String_Node_Str"");
      db.setTransactionSuccessful();
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    }
    db.endTransaction();
  }
}","private void renameRepoId(SQLiteDatabase db,int oldVersion){
  if (oldVersion < 36 && !columnExists(db,TABLE_REPO,""String_Node_Str"")) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + TABLE_REPO + ""String_Node_Str"");
    db.beginTransaction();
    try {
      String tempTableName=TABLE_REPO + ""String_Node_Str"";
      db.execSQL(""String_Node_Str"" + TABLE_REPO + ""String_Node_Str""+ tempTableName+ ""String_Node_Str"");
      String createTableDdl=""String_Node_Str"" + TABLE_REPO + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      db.execSQL(createTableDdl);
      String nonIdFields=""String_Node_Str"" + ""String_Node_Str"";
      String insertSql=""String_Node_Str"" + TABLE_REPO + ""String_Node_Str""+ nonIdFields+ ""String_Node_Str""+ ""String_Node_Str""+ nonIdFields+ ""String_Node_Str""+ tempTableName+ ""String_Node_Str"";
      db.execSQL(insertSql);
      db.execSQL(""String_Node_Str"" + tempTableName + ""String_Node_Str"");
      db.setTransactionSuccessful();
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    }
    db.endTransaction();
  }
}",0.5454545454545454
165322,"private void updateOrInsertApks(List<Apk> apksToUpdate,int totalApksAppsCount,int currentCount){
  ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>();
  List<Apk> knownApks=getKnownApks(apksToUpdate);
  for (  Apk apk : apksToUpdate) {
    boolean known=false;
    for (    Apk knownApk : knownApks) {
      if (knownApk.id.equals(apk.id) && knownApk.version.equals(knownApk.version)) {
        known=true;
        break;
      }
    }
    if (known) {
      operations.add(updateExistingApk(apk));
    }
 else {
      operations.add(insertNewApk(apk));
      knownApks.add(apk);
    }
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + operations.size() + ""String_Node_Str"");
  try {
    executeBatchWithStatus(ApkProvider.getAuthority(),operations,currentCount,totalApksAppsCount);
  }
 catch (  RemoteException e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
catch (  OperationApplicationException e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
}","private void updateOrInsertApks(List<Apk> apksToUpdate,int totalApksAppsCount,int currentCount){
  ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>();
  List<Apk> knownApks=getKnownApks(apksToUpdate);
  for (  Apk apk : apksToUpdate) {
    boolean known=false;
    for (    Apk knownApk : knownApks) {
      if (knownApk.id.equals(apk.id) && knownApk.vercode == apk.vercode) {
        known=true;
        break;
      }
    }
    if (known) {
      operations.add(updateExistingApk(apk));
    }
 else {
      operations.add(insertNewApk(apk));
      knownApks.add(apk);
    }
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + operations.size() + ""String_Node_Str"");
  try {
    executeBatchWithStatus(ApkProvider.getAuthority(),operations,currentCount,totalApksAppsCount);
  }
 catch (  RemoteException e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
catch (  OperationApplicationException e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
}",0.9818913480885312
165323,"@Override public void finish(){
  Intent ret=new Intent();
  if (listFragment != null && listFragment.hasChanged()) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    ret.putExtra(REQUEST_UPDATE,true);
  }
  setResult(Activity.RESULT_OK,ret);
  super.finish();
}","@Override public void finish(){
  Intent ret=new Intent();
  markChangedIfRequired(ret);
  setResult(Activity.RESULT_OK,ret);
  super.finish();
}",0.6439024390243903
165324,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    NavUtils.navigateUpFromSameTask(this);
  return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    Intent destIntent=new Intent(this,FDroid.class);
  markChangedIfRequired(destIntent);
setResult(RESULT_OK,destIntent);
NavUtils.navigateUpTo(this,destIntent);
return true;
}
return super.onOptionsItemSelected(item);
}",0.516245487364621
165325,"/** 
 * Thanks to http://stackoverflow.com/a/767910
 */
public static int countSubstringOccurrence(String toSearch,String substring){
  int count=0;
  int index=0;
  while (true) {
    index=toSearch.indexOf(substring,index);
    if (index == -1) {
      break;
    }
    count++;
    index+=substring.length();
  }
  return count;
}","public static int countSubstringOccurrence(File file,String substring) throws IOException {
  int count=0;
  FileReader input=null;
  try {
    int currentSubstringIndex=0;
    char[] buffer=new char[4096];
    input=new FileReader(file);
    int numRead=input.read(buffer);
    while (numRead != -1) {
      for (      char c : buffer) {
        if (c == substring.charAt(currentSubstringIndex)) {
          currentSubstringIndex++;
          if (currentSubstringIndex == substring.length()) {
            count++;
            currentSubstringIndex=0;
          }
        }
 else {
          currentSubstringIndex=0;
        }
      }
      numRead=input.read(buffer);
    }
  }
  finally {
    closeQuietly(input);
  }
  return count;
}",0.0933706816059757
165326,"@Override public View getView(int position,View view,ViewGroup parent){
  final DB.Repo repository=repositories.get(position);
  CompoundButton switchView;
  if (view == null) {
    view=activity.getLayoutInflater().inflate(R.layout.repo_item,null);
    switchView=addSwitchToView(view);
  }
 else {
    switchView=(CompoundButton)view.findViewById(SWITCH_ID);
  }
  switchView.setChecked(repository.inuse);
  switchView.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      activity.setRepoEnabled(repository,isChecked);
    }
  }
);
  TextView nameView=(TextView)view.findViewById(R.id.repo_name);
  nameView.setText(repository.getName());
  RelativeLayout.LayoutParams nameViewLayout=(RelativeLayout.LayoutParams)nameView.getLayoutParams();
  nameViewLayout.addRule(RelativeLayout.LEFT_OF,switchView.getId());
  View signedView=view.findViewById(R.id.repo_unsigned);
  if (repository.isSigned()) {
    signedView.setVisibility(View.INVISIBLE);
  }
 else {
    signedView.setVisibility(View.VISIBLE);
  }
  return view;
}","@Override public View getView(int position,View view,ViewGroup parent){
  final DB.Repo repository=repositories.get(position);
  CompoundButton switchView;
  if (view == null) {
    view=activity.getLayoutInflater().inflate(R.layout.repo_item,null);
    switchView=addSwitchToView(view);
  }
 else {
    switchView=(CompoundButton)view.findViewById(SWITCH_ID);
    switchView.setOnCheckedChangeListener(null);
  }
  switchView.setChecked(repository.inuse);
  switchView.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      activity.setRepoEnabled(repository,isChecked);
    }
  }
);
  TextView nameView=(TextView)view.findViewById(R.id.repo_name);
  nameView.setText(repository.getName());
  RelativeLayout.LayoutParams nameViewLayout=(RelativeLayout.LayoutParams)nameView.getLayoutParams();
  nameViewLayout.addRule(RelativeLayout.LEFT_OF,switchView.getId());
  View signedView=view.findViewById(R.id.repo_unsigned);
  if (repository.isSigned()) {
    signedView.setVisibility(View.INVISIBLE);
  }
 else {
    signedView.setVisibility(View.VISIBLE);
  }
  return view;
}",0.9790508764429244
165327,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case LAUNCH:
    launchApk(app.id);
  return true;
case SHARE:
shareApp(app);
return true;
case INSTALL:
curapk=app.getCurrentVersion();
if (curapk != null) install();
return true;
case UNINSTALL:
removeApk(app.id);
return true;
case IGNOREALL:
app.ignoreAllUpdates^=true;
item.setChecked(app.ignoreAllUpdates);
ignoreAllToggled^=true;
return true;
case IGNORETHIS:
app.ignoreThisUpdate^=true;
item.setChecked(app.ignoreThisUpdate);
ignoreThisToggled^=true;
return true;
case WEBSITE:
tryOpenUri(app.detail_webURL);
return true;
case ISSUES:
tryOpenUri(app.detail_trackerURL);
return true;
case SOURCE:
tryOpenUri(app.detail_sourceURL);
return true;
case BITCOIN:
tryOpenUri(""String_Node_Str"" + app.detail_bitcoinAddr);
return true;
case LITECOIN:
tryOpenUri(""String_Node_Str"" + app.detail_litecoinAddr);
return true;
case FLATTR:
tryOpenUri(""String_Node_Str"" + app.detail_flattrID);
return true;
case DONATE_URL:
tryOpenUri(app.detail_donateURL);
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    NavUtils.navigateUpFromSameTask(this);
  return true;
case LAUNCH:
launchApk(app.id);
return true;
case SHARE:
shareApp(app);
return true;
case INSTALL:
curapk=app.getCurrentVersion();
if (curapk != null) install();
return true;
case UNINSTALL:
removeApk(app.id);
return true;
case IGNOREALL:
app.ignoreAllUpdates^=true;
item.setChecked(app.ignoreAllUpdates);
ignoreAllToggled^=true;
return true;
case IGNORETHIS:
app.ignoreThisUpdate^=true;
item.setChecked(app.ignoreThisUpdate);
ignoreThisToggled^=true;
return true;
case WEBSITE:
tryOpenUri(app.detail_webURL);
return true;
case ISSUES:
tryOpenUri(app.detail_trackerURL);
return true;
case SOURCE:
tryOpenUri(app.detail_sourceURL);
return true;
case BITCOIN:
tryOpenUri(""String_Node_Str"" + app.detail_bitcoinAddr);
return true;
case LITECOIN:
tryOpenUri(""String_Node_Str"" + app.detail_litecoinAddr);
return true;
case FLATTR:
tryOpenUri(""String_Node_Str"" + app.detail_flattrID);
return true;
case DONATE_URL:
tryOpenUri(app.detail_donateURL);
return true;
}
return super.onOptionsItemSelected(item);
}",0.9612334801762116
165328,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.repolist);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  TextView tv_lastCheck=(TextView)findViewById(R.id.lastUpdateCheck);
  long lastUpdate=prefs.getLong(""String_Node_Str"",0);
  String s_lastUpdateCheck=""String_Node_Str"";
  if (lastUpdate == 0) {
    s_lastUpdateCheck=getString(R.string.never);
  }
 else {
    Date d=new Date(lastUpdate);
    s_lastUpdateCheck=DateFormat.getDateFormat(this).format(d) + ""String_Node_Str"" + DateFormat.getTimeFormat(this).format(d);
  }
  tv_lastCheck.setText(getString(R.string.last_update_check,s_lastUpdateCheck));
  reposToRemove=new ArrayList<String>();
  reposToDisable=new ArrayList<String>();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBarCompat abCompat=ActionBarCompat.create(this);
  abCompat.setDisplayHomeAsUpEnabled(true);
  setContentView(R.layout.repolist);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  TextView tv_lastCheck=(TextView)findViewById(R.id.lastUpdateCheck);
  long lastUpdate=prefs.getLong(""String_Node_Str"",0);
  String s_lastUpdateCheck=""String_Node_Str"";
  if (lastUpdate == 0) {
    s_lastUpdateCheck=getString(R.string.never);
  }
 else {
    Date d=new Date(lastUpdate);
    s_lastUpdateCheck=DateFormat.getDateFormat(this).format(d) + ""String_Node_Str"" + DateFormat.getTimeFormat(this).format(d);
  }
  tv_lastCheck.setText(getString(R.string.last_update_check,s_lastUpdateCheck));
  reposToRemove=new ArrayList<String>();
  reposToDisable=new ArrayList<String>();
}",0.9415170816444702
165329,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case SEARCH:
    onSearchRequested();
  return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    NavUtils.navigateUpFromSameTask(this);
  return true;
case SEARCH:
onSearchRequested();
return true;
}
return super.onOptionsItemSelected(item);
}",0.8061674008810573
165330,"public int getNumUpdates(List<DB.App> apps){
  int count=0;
  for (  DB.App app : apps) {
    if (!app.toUpdate)     count++;
  }
  return count;
}","public int getNumUpdates(List<DB.App> apps){
  int count=0;
  for (  DB.App app : apps) {
    if (app.toUpdate)     count++;
  }
  return count;
}",0.9965870307167236
165331,"protected void onHandleIntent(Intent intent){
  receiver=intent.getParcelableExtra(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  String errmsg=""String_Node_Str"";
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    if (isScheduledRun()) {
      long lastUpdate=prefs.getLong(""String_Node_Str"",0);
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      long elapsed=System.currentTimeMillis() - lastUpdate;
      if (elapsed < interval * 60 * 60* 1000) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + elapsed + ""String_Node_Str""+ interval+ ""String_Node_Str"");
        return;
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int updates=0;
    List<DB.Repo> repos;
    try {
      DB db=DB.getDB();
      repos=db.getRepos();
    }
  finally {
      DB.releaseDB();
    }
    List<DB.App> updatingApps=new ArrayList<DB.App>();
    List<Integer> keeprepos=new ArrayList<Integer>();
    boolean success=true;
    boolean changes=false;
    for (    DB.Repo repo : repos) {
      if (repo.inuse) {
        sendStatus(STATUS_INFO,getString(R.string.status_connecting_to_repo,repo.address));
        StringBuilder newetag=new StringBuilder();
        String err=RepoXMLHandler.doUpdate(getBaseContext(),repo,updatingApps,newetag,keeprepos,this);
        if (err == null) {
          String nt=newetag.toString();
          if (!nt.equals(repo.lastetag)) {
            repo.lastetag=newetag.toString();
            changes=true;
          }
        }
 else {
          success=false;
          err=""String_Node_Str"" + repo.address + ""String_Node_Str""+ err;
          Log.d(""String_Node_Str"",err);
          if (errmsg.length() == 0)           errmsg=err;
 else           errmsg+=""String_Node_Str"" + err;
        }
      }
    }
    if (!changes && success) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (changes && success) {
      sendStatus(STATUS_INFO,getString(R.string.status_checking_compatibility));
      List<DB.App> apps=((FDroidApp)getApplication()).getApps();
      DB db=DB.getDB();
      try {
        for (        int keep : keeprepos) {
          for (          DB.App app : apps) {
            boolean keepapp=false;
            for (            DB.Apk apk : app.apks) {
              if (apk.repo == keep) {
                keepapp=true;
                break;
              }
            }
            if (keepapp) {
              DB.App app_k=null;
              for (              DB.App app2 : updatingApps) {
                if (app2.id.equals(app.id)) {
                  app_k=app2;
                  break;
                }
              }
              if (app_k == null) {
                updatingApps.add(app);
                app_k=app;
              }
              app_k.updated=true;
              db.populateDetails(app_k,keep);
              for (              DB.Apk apk : app.apks)               if (apk.repo == keep)               apk.updated=true;
            }
          }
        }
        db.beginUpdate(apps);
        for (        DB.App app : updatingApps) {
          db.updateApplication(app);
        }
        db.endUpdate();
        if (notify) {
          apps=((FDroidApp)getApplication()).getApps();
          updates=db.getNumUpdates(apps);
        }
        for (        DB.Repo repo : repos)         db.writeLastEtag(repo);
      }
 catch (      Exception ex) {
        db.cancelUpdate();
        Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(ex));
        errmsg=""String_Node_Str"" + ex.getMessage();
        success=false;
      }
 finally {
        DB.releaseDB();
      }
    }
    if (success && changes)     ((FDroidApp)getApplication()).invalidateAllApps();
    if (success && changes && notify&& updates > 0) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + updates + ""String_Node_Str"");
      NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.icon).setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.icon)).setAutoCancel(true).setContentTitle(getString(R.string.fdroid_updates_available));
      Intent notifyIntent=new Intent(this,FDroid.class).putExtra(FDroid.EXTRA_TAB_UPDATE,true);
      if (updates > 1) {
        mBuilder.setContentText(getString(R.string.many_updates_available,updates));
      }
 else {
        mBuilder.setContentText(getString(R.string.one_update_available));
      }
      TaskStackBuilder stackBuilder=TaskStackBuilder.create(this).addParentStack(FDroid.class).addNextIntent(notifyIntent);
      PendingIntent pendingIntent=stackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);
      mBuilder.setContentIntent(pendingIntent);
      NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
      mNotificationManager.notify(1,mBuilder.build());
    }
    if (!success) {
      if (errmsg.length() == 0)       errmsg=""String_Node_Str"";
      sendStatus(STATUS_ERROR,errmsg);
    }
 else {
      sendStatus(STATUS_COMPLETE);
      Editor e=prefs.edit();
      e.putLong(""String_Node_Str"",System.currentTimeMillis());
      e.commit();
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    if (errmsg.length() == 0)     errmsg=""String_Node_Str"";
    sendStatus(STATUS_ERROR,errmsg);
  }
 finally {
    Log.d(""String_Node_Str"",""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000) + ""String_Node_Str"");
    receiver=null;
  }
}","protected void onHandleIntent(Intent intent){
  receiver=intent.getParcelableExtra(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  String errmsg=""String_Node_Str"";
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    if (isScheduledRun()) {
      long lastUpdate=prefs.getLong(""String_Node_Str"",0);
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      long elapsed=System.currentTimeMillis() - lastUpdate;
      if (elapsed < interval * 60 * 60* 1000) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + elapsed + ""String_Node_Str""+ interval+ ""String_Node_Str"");
        return;
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int updates=0;
    List<DB.Repo> repos;
    try {
      DB db=DB.getDB();
      repos=db.getRepos();
    }
  finally {
      DB.releaseDB();
    }
    List<DB.App> apps;
    List<DB.App> updatingApps=new ArrayList<DB.App>();
    List<Integer> keeprepos=new ArrayList<Integer>();
    boolean success=true;
    boolean changes=false;
    for (    DB.Repo repo : repos) {
      if (repo.inuse) {
        sendStatus(STATUS_INFO,getString(R.string.status_connecting_to_repo,repo.address));
        StringBuilder newetag=new StringBuilder();
        String err=RepoXMLHandler.doUpdate(getBaseContext(),repo,updatingApps,newetag,keeprepos,this);
        if (err == null) {
          String nt=newetag.toString();
          if (!nt.equals(repo.lastetag)) {
            repo.lastetag=newetag.toString();
            changes=true;
          }
        }
 else {
          success=false;
          err=""String_Node_Str"" + repo.address + ""String_Node_Str""+ err;
          Log.d(""String_Node_Str"",err);
          if (errmsg.length() == 0)           errmsg=err;
 else           errmsg+=""String_Node_Str"" + err;
        }
      }
    }
    if (!changes && success) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (changes && success) {
      sendStatus(STATUS_INFO,getString(R.string.status_checking_compatibility));
      apps=((FDroidApp)getApplication()).getApps();
      DB db=DB.getDB();
      try {
        for (        int keep : keeprepos) {
          for (          DB.App app : apps) {
            boolean keepapp=false;
            for (            DB.Apk apk : app.apks) {
              if (apk.repo == keep) {
                keepapp=true;
                break;
              }
            }
            if (keepapp) {
              DB.App app_k=null;
              for (              DB.App app2 : updatingApps) {
                if (app2.id.equals(app.id)) {
                  app_k=app2;
                  break;
                }
              }
              if (app_k == null) {
                updatingApps.add(app);
                app_k=app;
              }
              app_k.updated=true;
              db.populateDetails(app_k,keep);
              for (              DB.Apk apk : app.apks)               if (apk.repo == keep)               apk.updated=true;
            }
          }
        }
        db.beginUpdate(apps);
        for (        DB.App app : updatingApps) {
          db.updateApplication(app);
        }
        db.endUpdate();
        for (        DB.Repo repo : repos)         db.writeLastEtag(repo);
      }
 catch (      Exception ex) {
        db.cancelUpdate();
        Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(ex));
        errmsg=""String_Node_Str"" + ex.getMessage();
        success=false;
      }
 finally {
        DB.releaseDB();
      }
    }
    if (success && changes) {
      ((FDroidApp)getApplication()).invalidateAllApps();
      if (notify) {
        apps=((FDroidApp)getApplication()).getApps();
        updates=getNumUpdates(apps);
      }
    }
    if (success && changes && notify&& updates > 0) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + updates + ""String_Node_Str"");
      NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.icon).setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.icon)).setAutoCancel(true).setContentTitle(getString(R.string.fdroid_updates_available));
      Intent notifyIntent=new Intent(this,FDroid.class).putExtra(FDroid.EXTRA_TAB_UPDATE,true);
      if (updates > 1) {
        mBuilder.setContentText(getString(R.string.many_updates_available,updates));
      }
 else {
        mBuilder.setContentText(getString(R.string.one_update_available));
      }
      TaskStackBuilder stackBuilder=TaskStackBuilder.create(this).addParentStack(FDroid.class).addNextIntent(notifyIntent);
      PendingIntent pendingIntent=stackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);
      mBuilder.setContentIntent(pendingIntent);
      NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
      mNotificationManager.notify(1,mBuilder.build());
    }
    if (!success) {
      if (errmsg.length() == 0)       errmsg=""String_Node_Str"";
      sendStatus(STATUS_ERROR,errmsg);
    }
 else {
      sendStatus(STATUS_COMPLETE);
      Editor e=prefs.edit();
      e.putLong(""String_Node_Str"",System.currentTimeMillis());
      e.commit();
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    if (errmsg.length() == 0)     errmsg=""String_Node_Str"";
    sendStatus(STATUS_ERROR,errmsg);
  }
 finally {
    Log.d(""String_Node_Str"",""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000) + ""String_Node_Str"");
    receiver=null;
  }
}",0.9199415254966034
165332,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Utils.hasApi(11)) {
    getActionBar().setDisplayShowTitleEnabled(false);
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  setContentView(R.layout.appdetails);
  Intent i=getIntent();
  appid=""String_Node_Str"";
  Uri data=getIntent().getData();
  if (data != null) {
    if (data.isHierarchical())     appid=data.getQueryParameter(""String_Node_Str"");
 else     appid=data.getEncodedSchemeSpecificPart();
    Log.d(""String_Node_Str"",""String_Node_Str"" + appid + ""String_Node_Str"");
  }
 else   if (!i.hasExtra(""String_Node_Str"")) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    appid=i.getStringExtra(""String_Node_Str"");
  }
  headerView=new LinearLayout(this);
  ListView lv=(ListView)findViewById(android.R.id.list);
  lv.addHeaderView(headerView);
  ApkListAdapter la=new ApkListAdapter(this,null);
  setListAdapter(la);
  mPm=getPackageManager();
  AppDetails old=(AppDetails)getLastNonConfigurationInstance();
  if (old != null) {
    copyState(old);
  }
 else {
    if (!reset()) {
      finish();
      return;
    }
    resetRequired=false;
  }
  startViews();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBarCompat abCompat=ActionBarCompat.create(this);
  abCompat.setDisplayHomeAsUpEnabled(true);
  abCompat.setDisplayShowTitleEnabled(false);
  setContentView(R.layout.appdetails);
  Intent i=getIntent();
  appid=""String_Node_Str"";
  Uri data=getIntent().getData();
  if (data != null) {
    if (data.isHierarchical())     appid=data.getQueryParameter(""String_Node_Str"");
 else     appid=data.getEncodedSchemeSpecificPart();
    Log.d(""String_Node_Str"",""String_Node_Str"" + appid + ""String_Node_Str"");
  }
 else   if (!i.hasExtra(""String_Node_Str"")) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    appid=i.getStringExtra(""String_Node_Str"");
  }
  headerView=new LinearLayout(this);
  ListView lv=(ListView)findViewById(android.R.id.list);
  lv.addHeaderView(headerView);
  ApkListAdapter la=new ApkListAdapter(this,null);
  setListAdapter(la);
  mPm=getPackageManager();
  AppDetails old=(AppDetails)getLastNonConfigurationInstance();
  if (old != null) {
    copyState(old);
  }
 else {
    if (!reset()) {
      finish();
      return;
    }
    resetRequired=false;
  }
  startViews();
}",0.9150435142975548
165333,"public static File getDataPath(Context ctx){
  File f;
  if (Utils.hasApi(8)) {
    f=ctx.getExternalCacheDir();
  }
 else {
    f=new File(Environment.getExternalStorageDirectory(),""String_Node_Str"");
    if (f != null) {
      if (!f.exists())       f.mkdirs();
    }
  }
  return f;
}","/** 
 * Get the local storage (cache) path. This will also create it if it doesn't exist. It can return null if it's currently unavailable.
 */
public static File getDataPath(Context ctx){
  return ContextCompat.create(ctx).getExternalCacheDir();
}",0.1831775700934579
165334,"public boolean isCompatible(Apk apk){
  if (apk.minSdkVersion > Utils.getApi())   return false;
  if (apk.features != null) {
    for (    String feat : apk.features) {
      if (ignoreTouchscreen && feat.equals(""String_Node_Str"")) {
      }
 else       if (!features.contains(feat)) {
        Log.d(""String_Node_Str"",apk.id + ""String_Node_Str"" + feat);
        return false;
      }
    }
  }
  return true;
}","public boolean isCompatible(Apk apk){
  if (!hasApi(apk.minSdkVersion))   return false;
  if (apk.features != null) {
    for (    String feat : apk.features) {
      if (ignoreTouchscreen && feat.equals(""String_Node_Str"")) {
      }
 else       if (!features.contains(feat)) {
        Log.d(""String_Node_Str"",apk.id + ""String_Node_Str"" + feat);
        return false;
      }
    }
  }
  return true;
}",0.9704433497536946
165335,"public static CompatibilityChecker getChecker(Context ctx){
  CompatibilityChecker checker;
  if (Utils.hasApi(5))   checker=new EclairChecker(ctx);
 else   checker=new BasicChecker();
  Log.d(""String_Node_Str"",""String_Node_Str"" + Utils.getApi() + ""String_Node_Str""+ checker.getClass().getName());
  return checker;
}","public static CompatibilityChecker getChecker(Context ctx){
  CompatibilityChecker checker;
  if (hasApi(5))   checker=new EclairChecker(ctx);
 else   checker=new BasicChecker();
  Log.d(""String_Node_Str"",""String_Node_Str"" + getApi() + ""String_Node_Str""+ checker.getClass().getName());
  return checker;
}",0.8263665594855305
165336,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Utils.hasApi(11))   getActionBar().setDisplayHomeAsUpEnabled(true);
  addPreferencesFromResource(R.xml.preferences);
  for (  String prefkey : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) {
    Preference pref=findPreference(prefkey);
    pref.setOnPreferenceClickListener(this);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBarCompat.create(this).setDisplayHomeAsUpEnabled(true);
  addPreferencesFromResource(R.xml.preferences);
  for (  String prefkey : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) {
    Preference pref=findPreference(prefkey);
    pref.setOnPreferenceClickListener(this);
  }
}",0.9243902439024392
165337,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Utils.hasApi(11))   getActionBar().setDisplayHomeAsUpEnabled(true);
  applist=new AvailableAppListAdapter(this);
  setContentView(R.layout.searchresults);
  setDefaultKeyMode(DEFAULT_KEYS_SEARCH_LOCAL);
  Intent intent=getIntent();
  if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
    mQuery=intent.getStringExtra(SearchManager.QUERY);
  }
  updateView();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBarCompat.create(this).setDisplayHomeAsUpEnabled(true);
  applist=new AvailableAppListAdapter(this);
  setContentView(R.layout.searchresults);
  setDefaultKeyMode(DEFAULT_KEYS_SEARCH_LOCAL);
  Intent intent=getIntent();
  if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
    mQuery=intent.getStringExtra(SearchManager.QUERY);
  }
  updateView();
}",0.9330453563714904
165338,"public static MenuManager create(Activity activity){
  if (Utils.hasApi(11)) {
    return new HoneycombMenuManagerImpl(activity);
  }
 else {
    return new OldMenuManagerImpl(activity);
  }
}","public static MenuManager create(Activity activity){
  if (hasApi(11)) {
    return new HoneycombMenuManagerImpl(activity);
  }
 else {
    return new OldMenuManagerImpl(activity);
  }
}",0.984126984126984
165339,"public static TabManager create(FDroid parent,ViewPager pager){
  if (Utils.hasApi(11)) {
    return new HoneycombTabManagerImpl(parent,pager);
  }
 else {
    return new OldTabManagerImpl(parent,pager);
  }
}","public static TabManager create(FDroid parent,ViewPager pager){
  if (hasApi(11)) {
    return new HoneycombTabManagerImpl(parent,pager);
  }
 else {
    return new OldTabManagerImpl(parent,pager);
  }
}",0.9854368932038836
165340,"@Override public View getView(int position,View convertView,ViewGroup parent){
  boolean init=false;
  if (convertView == null) {
    convertView=((LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.applistitem,null);
    init=true;
  }
  TextView name=(TextView)convertView.findViewById(R.id.name);
  TextView summary=(TextView)convertView.findViewById(R.id.summary);
  TextView status=(TextView)convertView.findViewById(R.id.status);
  TextView license=(TextView)convertView.findViewById(R.id.license);
  DB.App app=items.get(position);
  status.setText(getVersionInfo(app));
  license.setText(app.license);
  name.setText(app.name);
  summary.setText(app.summary);
  ImageView icon=(ImageView)convertView.findViewById(R.id.icon);
  File icn=new File(DB.getIconsPath(mContext),app.icon);
  if (icn.exists() && icn.length() > 0) {
    new Uri.Builder().build();
    icon.setImageURI(Uri.parse(icn.getPath()));
  }
 else {
    icon.setImageResource(android.R.drawable.sym_def_app_icon);
  }
  ImageView iconInstalled=(ImageView)convertView.findViewById(R.id.icon_status_installed);
  ImageView iconUpdates=(ImageView)convertView.findViewById(R.id.icon_status_has_updates);
  if (init) {
    if (pref_compactlayout == null) {
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mContext);
      pref_compactlayout=prefs.getBoolean(""String_Node_Str"",false);
    }
    if (pref_compactlayout == true) {
      iconInstalled.setImageResource(R.drawable.ic_cab_done_holo_dark);
      iconUpdates.setImageResource(R.drawable.ic_menu_refresh);
      status.setVisibility(View.GONE);
      license.setVisibility(View.GONE);
      RelativeLayout.LayoutParams summaryLayout=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
      summaryLayout.addRule(RelativeLayout.BELOW,R.id.name);
      if (Utils.hasApi(17))       summaryLayout.addRule(RelativeLayout.END_OF,R.id.icon);
 else       summaryLayout.addRule(RelativeLayout.RIGHT_OF,R.id.icon);
      summary.setLayoutParams(summaryLayout);
      summary.setPadding(0,0,0,0);
    }
  }
  if (pref_compactlayout == true) {
    if (app.hasUpdates && showStatusUpdate()) {
      iconUpdates.setVisibility(View.VISIBLE);
    }
 else {
      iconUpdates.setVisibility(View.GONE);
    }
    if (app.installedVerCode > 0 && showStatusInstalled()) {
      iconInstalled.setVisibility(View.VISIBLE);
    }
 else {
      iconInstalled.setVisibility(View.GONE);
    }
  }
  View[] views={convertView,status,summary,license,name};
  for (  View view : views) {
    view.setEnabled(app.compatible);
  }
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  boolean init=false;
  if (convertView == null) {
    convertView=((LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.applistitem,null);
    init=true;
  }
  TextView name=(TextView)convertView.findViewById(R.id.name);
  TextView summary=(TextView)convertView.findViewById(R.id.summary);
  TextView status=(TextView)convertView.findViewById(R.id.status);
  TextView license=(TextView)convertView.findViewById(R.id.license);
  DB.App app=items.get(position);
  status.setText(getVersionInfo(app));
  license.setText(app.license);
  name.setText(app.name);
  summary.setText(app.summary);
  ImageView icon=(ImageView)convertView.findViewById(R.id.icon);
  File icn=new File(DB.getIconsPath(mContext),app.icon);
  if (icn.exists() && icn.length() > 0) {
    new Uri.Builder().build();
    icon.setImageURI(Uri.parse(icn.getPath()));
  }
 else {
    icon.setImageResource(android.R.drawable.sym_def_app_icon);
  }
  ImageView iconInstalled=(ImageView)convertView.findViewById(R.id.icon_status_installed);
  ImageView iconUpdates=(ImageView)convertView.findViewById(R.id.icon_status_has_updates);
  if (init) {
    if (pref_compactlayout == null) {
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mContext);
      pref_compactlayout=prefs.getBoolean(""String_Node_Str"",false);
    }
    if (pref_compactlayout == true) {
      iconInstalled.setImageResource(R.drawable.ic_cab_done_holo_dark);
      iconUpdates.setImageResource(R.drawable.ic_menu_refresh);
      status.setVisibility(View.GONE);
      license.setVisibility(View.GONE);
      RelativeLayout.LayoutParams summaryLayout=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
      summaryLayout.addRule(RelativeLayout.BELOW,R.id.name);
      summaryLayout.addRule(LayoutCompat.RelativeLayout.END_OF,R.id.icon);
      summary.setLayoutParams(summaryLayout);
      summary.setPadding(0,0,0,0);
    }
  }
  if (pref_compactlayout == true) {
    if (app.hasUpdates && showStatusUpdate()) {
      iconUpdates.setVisibility(View.VISIBLE);
    }
 else {
      iconUpdates.setVisibility(View.GONE);
    }
    if (app.installedVerCode > 0 && showStatusInstalled()) {
      iconInstalled.setVisibility(View.VISIBLE);
    }
 else {
      iconInstalled.setVisibility(View.GONE);
    }
  }
  View[] views={convertView,status,summary,license,name};
  for (  View view : views) {
    view.setEnabled(app.compatible);
  }
  return convertView;
}",0.978981253550464
165341,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  applist=new AvailableAppListAdapter(this);
  setContentView(R.layout.searchresults);
  Intent intent=getIntent();
  if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
    mQuery=intent.getStringExtra(SearchManager.QUERY);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  applist=new AvailableAppListAdapter(this);
  setContentView(R.layout.searchresults);
  Intent intent=getIntent();
  if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
    mQuery=intent.getStringExtra(SearchManager.QUERY);
  }
  updateView();
}",0.9763313609467456
165342,"@Override protected void onNewIntent(Intent intent){
  if (Intent.ACTION_SEARCH.equals(intent.getAction()))   mQuery=intent.getStringExtra(SearchManager.QUERY);
  super.onNewIntent(intent);
}","@Override protected void onNewIntent(Intent intent){
  if (Intent.ACTION_SEARCH.equals(intent.getAction()))   mQuery=intent.getStringExtra(SearchManager.QUERY);
  super.onNewIntent(intent);
  updateView();
}",0.9597989949748744
165343,"@Override protected void onResume(){
  updateView();
  super.onResume();
}","@Override protected void onResume(){
  super.onResume();
}",0.8787878787878788
165344,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  resetTransient(db);
  if (oldVersion < 20) {
    List<Repo> oldrepos=new ArrayList<Repo>();
    Cursor c=db.rawQuery(""String_Node_Str"" + TABLE_REPO,null);
    c.moveToFirst();
    while (!c.isAfterLast()) {
      Repo repo=new Repo();
      repo.address=c.getString(0);
      repo.inuse=(c.getInt(1) == 1);
      repo.pubkey=c.getString(2);
      oldrepos.add(repo);
      c.moveToNext();
    }
    c.close();
    db.execSQL(""String_Node_Str"" + TABLE_REPO);
    db.execSQL(CREATE_TABLE_REPO);
    for (    Repo repo : oldrepos) {
      ContentValues values=new ContentValues();
      values.put(""String_Node_Str"",repo.address);
      values.put(""String_Node_Str"",repo.inuse);
      values.put(""String_Node_Str"",10);
      values.put(""String_Node_Str"",repo.pubkey);
      values.put(""String_Node_Str"",(String)null);
      db.insert(TABLE_REPO,null,values);
    }
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < 20) {
    List<Repo> oldrepos=new ArrayList<Repo>();
    Cursor c=db.rawQuery(""String_Node_Str"" + TABLE_REPO,null);
    c.moveToFirst();
    while (!c.isAfterLast()) {
      Repo repo=new Repo();
      repo.address=c.getString(0);
      repo.inuse=(c.getInt(1) == 1);
      repo.pubkey=c.getString(2);
      oldrepos.add(repo);
      c.moveToNext();
    }
    c.close();
    db.execSQL(""String_Node_Str"" + TABLE_REPO);
    db.execSQL(CREATE_TABLE_REPO);
    for (    Repo repo : oldrepos) {
      ContentValues values=new ContentValues();
      values.put(""String_Node_Str"",repo.address);
      values.put(""String_Node_Str"",repo.inuse);
      values.put(""String_Node_Str"",10);
      values.put(""String_Node_Str"",repo.pubkey);
      values.put(""String_Node_Str"",(String)null);
      db.insert(TABLE_REPO,null,values);
    }
  }
  resetTransient(db);
}",0.9768664563617244
165345,"public void selectTab(int index){
  actionBar.setSelectedNavigationItem(index);
}","public void selectTab(int index){
  actionBar.setSelectedNavigationItem(index);
  Spinner actionBarSpinner=getActionBarSpinner();
  if (actionBarSpinner != null) {
    actionBarSpinner.setSelection(index);
  }
}",0.5547945205479452
165346,"protected void onHandleIntent(Intent intent){
  receiver=intent.getParcelableExtra(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  String errmsg=""String_Node_Str"";
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    if (isScheduledRun()) {
      long lastUpdate=prefs.getLong(""String_Node_Str"",0);
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      long elapsed=System.currentTimeMillis() - lastUpdate;
      if (elapsed < interval * 60 * 60* 1000) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + elapsed + ""String_Node_Str""+ interval+ ""String_Node_Str"");
        return;
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int prevUpdates=0;
    int newUpdates=0;
    List<DB.Repo> repos;
    try {
      DB db=DB.getDB();
      repos=db.getRepos();
    }
  finally {
      DB.releaseDB();
    }
    List<DB.App> apps=new ArrayList<DB.App>();
    List<Integer> keeprepos=new ArrayList<Integer>();
    boolean success=true;
    boolean changes=false;
    for (    DB.Repo repo : repos) {
      if (repo.inuse) {
        sendStatus(STATUS_INFO,getString(R.string.status_connecting_to_repo,repo.address));
        StringBuilder newetag=new StringBuilder();
        String err=RepoXMLHandler.doUpdate(getBaseContext(),repo,apps,newetag,keeprepos,this);
        if (err == null) {
          String nt=newetag.toString();
          if (!nt.equals(repo.lastetag)) {
            repo.lastetag=newetag.toString();
            changes=true;
          }
        }
 else {
          success=false;
          err=""String_Node_Str"" + repo.address + ""String_Node_Str""+ err;
          Log.d(""String_Node_Str"",err);
          if (errmsg.length() == 0)           errmsg=err;
 else           errmsg+=""String_Node_Str"" + err;
        }
      }
    }
    if (changes && success) {
      sendStatus(STATUS_INFO,getString(R.string.status_checking_compatibility));
      List<DB.App> acceptedapps=new ArrayList<DB.App>();
      List<DB.App> prevapps=((FDroidApp)getApplication()).getApps();
      boolean anyRepoToUpdate=false;
      for (      DB.Repo repo : repos) {
        boolean keepThisRepo=false;
        for (        int repoId : keeprepos) {
          if (repo.id == repoId) {
            keepThisRepo=true;
            break;
          }
        }
        if (!keepThisRepo) {
          anyRepoToUpdate=true;
          break;
        }
      }
      if (!anyRepoToUpdate) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        sendStatus(STATUS_INFO,getString(R.string.status_checking_compatibility));
        List<DB.App> acceptedapps=new ArrayList<DB.App>();
        List<DB.App> prevapps=((FDroidApp)getApplication()).getApps();
        DB db=DB.getDB();
        try {
          Log.d(""String_Node_Str"",""String_Node_Str"" + keeprepos.size() + ""String_Node_Str"");
          for (          int keep : keeprepos) {
            Log.d(""String_Node_Str"",""String_Node_Str"" + keep + ""String_Node_Str"");
            for (            DB.App app : prevapps) {
              boolean keepapp=false;
              for (              DB.Apk apk : app.apks) {
                if (apk.repo == keep) {
                  Log.d(""String_Node_Str"",""String_Node_Str"" + app.id + ""String_Node_Str""+ apk.id+ ""String_Node_Str""+ keep);
                  keepapp=true;
                  break;
                }
              }
              if (keepapp) {
                DB.App app_k=null;
                Log.d(""String_Node_Str"",""String_Node_Str"" + app.id + ""String_Node_Str"");
                for (                DB.App app2 : apps) {
                  if (app2.id.equals(app.id)) {
                    Log.d(""String_Node_Str"",""String_Node_Str"" + app2.id + ""String_Node_Str"");
                    app_k=app2;
                    break;
                  }
                }
                if (app_k == null) {
                  Log.d(""String_Node_Str"",""String_Node_Str"" + apps.size() + ""String_Node_Str"");
                  apps.add(app);
                  app_k=app;
                }
                app_k.updated=true;
                Log.d(""String_Node_Str"",""String_Node_Str"" + app_k.id + ""String_Node_Str"");
                db.populateDetails(app_k,keep);
                for (                DB.Apk apk : app.apks)                 if (apk.repo == keep)                 apk.updated=true;
              }
            }
          }
          prevUpdates=db.beginUpdate(prevapps);
          for (          DB.App app : apps) {
            if (db.updateApplication(app))             acceptedapps.add(app);
          }
          db.endUpdate();
          if (notify)           newUpdates=db.getNumUpdates();
          for (          DB.Repo repo : repos)           db.writeLastEtag(repo);
        }
 catch (        Exception ex) {
          db.cancelUpdate();
          Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(ex));
          errmsg=""String_Node_Str"" + ex.getMessage();
          success=false;
        }
 finally {
          DB.releaseDB();
        }
        if (success) {
          for (          DB.App app : acceptedapps)           getIcon(app,repos);
          ((FDroidApp)getApplication()).invalidateApps();
        }
      }
    }
    if (success && changes && notify) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + prevUpdates + ""String_Node_Str""+ newUpdates);
      if (newUpdates > prevUpdates) {
        NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
        Context context=getApplicationContext();
        CharSequence contentTitle=""String_Node_Str"";
        CharSequence contentText=""String_Node_Str"";
        Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
        notificationIntent.putExtra(FDroid.EXTRA_TAB_UPDATE,true);
        PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
        notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
        notification.flags|=Notification.FLAG_AUTO_CANCEL;
        n.notify(1,notification);
      }
    }
    if (!success) {
      if (errmsg.length() == 0)       errmsg=""String_Node_Str"";
      sendStatus(STATUS_ERROR,errmsg);
    }
 else {
      sendStatus(STATUS_COMPLETE);
    }
    if (success) {
      Editor e=prefs.edit();
      e.putLong(""String_Node_Str"",System.currentTimeMillis());
      e.commit();
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    if (errmsg.length() == 0)     errmsg=""String_Node_Str"";
    sendStatus(STATUS_ERROR,errmsg);
  }
 finally {
    Log.d(""String_Node_Str"",""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000) + ""String_Node_Str"");
    receiver=null;
  }
}","protected void onHandleIntent(Intent intent){
  receiver=intent.getParcelableExtra(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  String errmsg=""String_Node_Str"";
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    if (isScheduledRun()) {
      long lastUpdate=prefs.getLong(""String_Node_Str"",0);
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      long elapsed=System.currentTimeMillis() - lastUpdate;
      if (elapsed < interval * 60 * 60* 1000) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + elapsed + ""String_Node_Str""+ interval+ ""String_Node_Str"");
        return;
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int prevUpdates=0;
    int newUpdates=0;
    List<DB.Repo> repos;
    try {
      DB db=DB.getDB();
      repos=db.getRepos();
    }
  finally {
      DB.releaseDB();
    }
    List<DB.App> apps=new ArrayList<DB.App>();
    List<Integer> keeprepos=new ArrayList<Integer>();
    boolean success=true;
    boolean changes=false;
    for (    DB.Repo repo : repos) {
      if (repo.inuse) {
        sendStatus(STATUS_INFO,getString(R.string.status_connecting_to_repo,repo.address));
        StringBuilder newetag=new StringBuilder();
        String err=RepoXMLHandler.doUpdate(getBaseContext(),repo,apps,newetag,keeprepos,this);
        if (err == null) {
          String nt=newetag.toString();
          if (!nt.equals(repo.lastetag)) {
            repo.lastetag=newetag.toString();
            changes=true;
          }
        }
 else {
          success=false;
          err=""String_Node_Str"" + repo.address + ""String_Node_Str""+ err;
          Log.d(""String_Node_Str"",err);
          if (errmsg.length() == 0)           errmsg=err;
 else           errmsg+=""String_Node_Str"" + err;
        }
      }
    }
    if (!changes && success) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (changes && success) {
      sendStatus(STATUS_INFO,getString(R.string.status_checking_compatibility));
      List<DB.App> acceptedapps=new ArrayList<DB.App>();
      List<DB.App> prevapps=((FDroidApp)getApplication()).getApps();
      boolean anyRepoToUpdate=false;
      for (      DB.Repo repo : repos) {
        boolean keepThisRepo=false;
        for (        int repoId : keeprepos) {
          if (repo.id == repoId) {
            keepThisRepo=true;
            break;
          }
        }
        if (!keepThisRepo) {
          anyRepoToUpdate=true;
          break;
        }
      }
      if (!anyRepoToUpdate) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        sendStatus(STATUS_INFO,getString(R.string.status_checking_compatibility));
        List<DB.App> acceptedapps=new ArrayList<DB.App>();
        List<DB.App> prevapps=((FDroidApp)getApplication()).getApps();
        DB db=DB.getDB();
        try {
          Log.d(""String_Node_Str"",""String_Node_Str"" + keeprepos.size() + ""String_Node_Str"");
          for (          int keep : keeprepos) {
            Log.d(""String_Node_Str"",""String_Node_Str"" + keep + ""String_Node_Str"");
            for (            DB.App app : prevapps) {
              boolean keepapp=false;
              for (              DB.Apk apk : app.apks) {
                if (apk.repo == keep) {
                  Log.d(""String_Node_Str"",""String_Node_Str"" + app.id + ""String_Node_Str""+ apk.id+ ""String_Node_Str""+ keep);
                  keepapp=true;
                  break;
                }
              }
              if (keepapp) {
                DB.App app_k=null;
                Log.d(""String_Node_Str"",""String_Node_Str"" + app.id + ""String_Node_Str"");
                for (                DB.App app2 : apps) {
                  if (app2.id.equals(app.id)) {
                    Log.d(""String_Node_Str"",""String_Node_Str"" + app2.id + ""String_Node_Str"");
                    app_k=app2;
                    break;
                  }
                }
                if (app_k == null) {
                  Log.d(""String_Node_Str"",""String_Node_Str"" + apps.size() + ""String_Node_Str"");
                  apps.add(app);
                  app_k=app;
                }
                app_k.updated=true;
                Log.d(""String_Node_Str"",""String_Node_Str"" + app_k.id + ""String_Node_Str"");
                db.populateDetails(app_k,keep);
                for (                DB.Apk apk : app.apks)                 if (apk.repo == keep)                 apk.updated=true;
              }
            }
          }
          prevUpdates=db.beginUpdate(prevapps);
          for (          DB.App app : apps) {
            if (db.updateApplication(app))             acceptedapps.add(app);
          }
          db.endUpdate();
          if (notify)           newUpdates=db.getNumUpdates();
          for (          DB.Repo repo : repos)           db.writeLastEtag(repo);
        }
 catch (        Exception ex) {
          db.cancelUpdate();
          Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(ex));
          errmsg=""String_Node_Str"" + ex.getMessage();
          success=false;
        }
 finally {
          DB.releaseDB();
        }
        if (success) {
          for (          DB.App app : acceptedapps)           getIcon(app,repos);
          ((FDroidApp)getApplication()).invalidateApps();
        }
      }
    }
    if (success && changes && notify) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + prevUpdates + ""String_Node_Str""+ newUpdates);
      if (newUpdates > prevUpdates) {
        NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
        Context context=getApplicationContext();
        CharSequence contentTitle=""String_Node_Str"";
        CharSequence contentText=""String_Node_Str"";
        Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
        notificationIntent.putExtra(FDroid.EXTRA_TAB_UPDATE,true);
        PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
        notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
        notification.flags|=Notification.FLAG_AUTO_CANCEL;
        n.notify(1,notification);
      }
    }
    if (!success) {
      if (errmsg.length() == 0)       errmsg=""String_Node_Str"";
      sendStatus(STATUS_ERROR,errmsg);
    }
 else {
      sendStatus(STATUS_COMPLETE);
    }
    if (success) {
      Editor e=prefs.edit();
      e.putLong(""String_Node_Str"",System.currentTimeMillis());
      e.commit();
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    if (errmsg.length() == 0)     errmsg=""String_Node_Str"";
    sendStatus(STATUS_ERROR,errmsg);
  }
 finally {
    Log.d(""String_Node_Str"",""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000) + ""String_Node_Str"");
    receiver=null;
  }
}",0.993551071354275
165347,"@Override protected void onResume(){
  super.onResume();
  if (resetRequired) {
    reset();
    resetRequired=false;
  }
  resetViews();
  invalidateOptionsMenu();
  if (downloadHandler != null) {
    downloadHandler.startUpdates();
  }
}","@Override protected void onResume(){
  super.onResume();
  if (resetRequired) {
    reset();
    resetRequired=false;
  }
  resetViews();
  if (Utils.hasApi(11)) {
    invalidateOptionsMenu();
  }
  if (downloadHandler != null) {
    downloadHandler.startUpdates();
  }
}",0.9372549019607844
165348,"public boolean isCompatible(Apk apk){
  if (apk.minSdkVersion > SDK_INT)   return false;
  if (apk.features != null) {
    for (    String feat : apk.features) {
      if (ignoreTouchscreen && feat.equals(""String_Node_Str"")) {
      }
 else       if (!features.contains(feat)) {
        Log.d(""String_Node_Str"",apk.id + ""String_Node_Str"" + feat);
        return false;
      }
    }
  }
  return true;
}","public boolean isCompatible(Apk apk){
  if (apk.minSdkVersion > Utils.getApi())   return false;
  if (apk.features != null) {
    for (    String feat : apk.features) {
      if (ignoreTouchscreen && feat.equals(""String_Node_Str"")) {
      }
 else       if (!features.contains(feat)) {
        Log.d(""String_Node_Str"",apk.id + ""String_Node_Str"" + feat);
        return false;
      }
    }
  }
  return true;
}",0.974169741697417
165349,"public static CompatibilityChecker getChecker(Context ctx){
  CompatibilityChecker checker;
  if (SDK_INT >= 5)   checker=new EclairChecker(ctx);
 else   checker=new BasicChecker();
  Log.d(""String_Node_Str"",""String_Node_Str"" + SDK_INT + ""String_Node_Str""+ checker.getClass().getName());
  return checker;
}","public static CompatibilityChecker getChecker(Context ctx){
  CompatibilityChecker checker;
  if (Utils.hasApi(5))   checker=new EclairChecker(ctx);
 else   checker=new BasicChecker();
  Log.d(""String_Node_Str"",""String_Node_Str"" + Utils.getApi() + ""String_Node_Str""+ checker.getClass().getName());
  return checker;
}",0.5256410256410257
165350,"private void selectTab(int index){
  if (Build.VERSION.SDK_INT >= 11) {
    getActionBar().setSelectedNavigationItem(index);
  }
 else {
    tabHost.setCurrentTab(index);
  }
}","private void selectTab(int index){
  if (Utils.hasApi(11)) {
    getActionBar().setSelectedNavigationItem(index);
  }
 else {
    tabHost.setCurrentTab(index);
  }
}",0.9032258064516128
165351,"private void createTabs(){
  if (Build.VERSION.SDK_INT >= 11) {
    createActionBarTabs();
  }
 else {
    createOldTabs();
  }
}","private void createTabs(){
  if (Utils.hasApi(11)) {
    createActionBarTabs();
  }
 else {
    createOldTabs();
  }
}",0.8663967611336032
165352,"public void refreshUpdateTabLabel(){
  final int INDEX=2;
  CharSequence text=viewPager.getAdapter().getPageTitle(INDEX);
  if (Build.VERSION.SDK_INT >= 11) {
    getActionBar().getTabAt(INDEX).setText(text);
  }
 else {
    TextView textView=(TextView)tabHost.getTabWidget().getChildAt(2).findViewById(android.R.id.title);
    textView.setText(text);
  }
}","public void refreshUpdateTabLabel(){
  final int INDEX=2;
  CharSequence text=viewPager.getAdapter().getPageTitle(INDEX);
  if (Utils.hasApi(11)) {
    getActionBar().getTabAt(INDEX).setText(text);
  }
 else {
    TextView textView=(TextView)tabHost.getTabWidget().getChildAt(2).findViewById(android.R.id.title);
    textView.setText(text);
  }
}",0.9445234708392604
165353,"/** 
 * The first time the app is run, we will have an empty app list. If this is the case, we will attempt to update with the default repo. However, if we have tried this at least once, then don't try to do it automatically again, because the repos or internet connection may be bad.
 */
public boolean updateEmptyRepos(){
  final String TRIED_EMPTY_UPDATE=""String_Node_Str"";
  boolean hasTriedEmptyUpdate=getPreferences(MODE_PRIVATE).getBoolean(TRIED_EMPTY_UPDATE,false);
  if (!hasTriedEmptyUpdate) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    updateRepos();
    getPreferences(MODE_PRIVATE).edit().putBoolean(TRIED_EMPTY_UPDATE,true);
    return true;
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
}","/** 
 * The first time the app is run, we will have an empty app list. If this is the case, we will attempt to update with the default repo. However, if we have tried this at least once, then don't try to do it automatically again, because the repos or internet connection may be bad.
 */
public boolean updateEmptyRepos(){
  final String TRIED_EMPTY_UPDATE=""String_Node_Str"";
  boolean hasTriedEmptyUpdate=getPreferences(MODE_PRIVATE).getBoolean(TRIED_EMPTY_UPDATE,false);
  if (!hasTriedEmptyUpdate) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    getPreferences(MODE_PRIVATE).edit().putBoolean(TRIED_EMPTY_UPDATE,true).apply();
    updateRepos();
    return true;
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
}",0.9547872340425532
165354,"public void populateDetails(App app,int apkrepo){
  if (app.detail_Populated)   return;
  Cursor c=null;
  try {
    String[] cols=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    c=db.query(TABLE_APP,cols,""String_Node_Str"",new String[]{app.id},null,null,null,null);
    c.moveToFirst();
    app.detail_description=c.getString(0);
    app.detail_webURL=c.getString(1);
    app.detail_trackerURL=c.getString(2);
    app.detail_sourceURL=c.getString(3);
    app.detail_donateURL=c.getString(4);
    c.close();
    c=null;
    cols=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (    Apk apk : app.apks) {
      if (apkrepo == 0 || apkrepo == apk.repo) {
        c=db.query(TABLE_APK,cols,""String_Node_Str"",new String[]{apk.id,Integer.toString(apk.vercode)},null,null,null,null);
        c.moveToFirst();
        apk.detail_hash=c.getString(0);
        apk.detail_hashType=c.getString(1);
        apk.detail_size=c.getInt(2);
        apk.detail_permissions=CommaSeparatedList.make(c.getString(3));
        c.close();
        c=null;
      }
    }
    app.detail_Populated=true;
  }
  finally {
    if (c != null)     c.close();
  }
}","public void populateDetails(App app,int apkRepo){
  if (!app.detail_Populated) {
    populateAppDetails(app);
  }
  for (  Apk apk : app.apks) {
    boolean isPopulated=apk.detail_hash != null;
    if (!isPopulated) {
      populateApkDetails(apk,apkRepo);
    }
  }
}",0.1420982735723771
165355,"private void updateApkIfDifferent(Apk oldapk,Apk upapk){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",upapk.id);
  values.put(""String_Node_Str"",upapk.version);
  values.put(""String_Node_Str"",upapk.vercode);
  values.put(""String_Node_Str"",upapk.repo);
  values.put(""String_Node_Str"",upapk.detail_hash);
  values.put(""String_Node_Str"",upapk.detail_hashType);
  values.put(""String_Node_Str"",upapk.sig);
  values.put(""String_Node_Str"",upapk.srcname);
  values.put(""String_Node_Str"",upapk.detail_size);
  values.put(""String_Node_Str"",upapk.apkName);
  values.put(""String_Node_Str"",upapk.minSdkVersion);
  values.put(""String_Node_Str"",upapk.added == null ? ""String_Node_Str"" : mDateFormat.format(upapk.added));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapk.detail_permissions));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapk.features));
  values.put(""String_Node_Str"",upapk.compatible ? 1 : 0);
  if (oldapk != null) {
    db.update(TABLE_APK,values,""String_Node_Str"" + Integer.toString(oldapk.vercode),new String[]{oldapk.id});
  }
 else {
    db.insert(TABLE_APK,null,values);
  }
}","private void updateApkIfDifferent(Apk oldapk,Apk upapk){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",upapk.id);
  values.put(""String_Node_Str"",upapk.version);
  values.put(""String_Node_Str"",upapk.vercode);
  values.put(""String_Node_Str"",upapk.repo);
  values.put(""String_Node_Str"",upapk.detail_hash);
  values.put(""String_Node_Str"",upapk.detail_hashType);
  values.put(""String_Node_Str"",upapk.sig);
  values.put(""String_Node_Str"",upapk.srcname);
  values.put(""String_Node_Str"",upapk.detail_size);
  values.put(""String_Node_Str"",upapk.apkName);
  values.put(""String_Node_Str"",upapk.minSdkVersion);
  values.put(""String_Node_Str"",upapk.added == null ? ""String_Node_Str"" : mDateFormat.format(upapk.added));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapk.detail_permissions));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapk.features));
  values.put(""String_Node_Str"",upapk.compatible ? 1 : 0);
  if (oldapk != null) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + upapk.id + ""String_Node_Str""+ upapk.detail_hash+ ""String_Node_Str"");
    db.update(TABLE_APK,values,""String_Node_Str"" + Integer.toString(oldapk.vercode),new String[]{oldapk.id});
  }
 else {
    db.insert(TABLE_APK,null,values);
  }
}",0.9510255336961072
165356,"protected void onHandleIntent(Intent intent){
  receiver=intent.getParcelableExtra(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  String errmsg=""String_Node_Str"";
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    if (isScheduledRun()) {
      long lastUpdate=prefs.getLong(""String_Node_Str"",0);
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      long elapsed=System.currentTimeMillis() - lastUpdate;
      if (elapsed < interval * 60 * 60* 1000) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + elapsed + ""String_Node_Str""+ interval+ ""String_Node_Str"");
        return;
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int prevUpdates=0;
    int newUpdates=0;
    List<DB.Repo> repos;
    try {
      DB db=DB.getDB();
      repos=db.getRepos();
    }
  finally {
      DB.releaseDB();
    }
    List<DB.App> apps=new ArrayList<DB.App>();
    List<Integer> keeprepos=new ArrayList<Integer>();
    boolean success=true;
    boolean changes=false;
    for (    DB.Repo repo : repos) {
      if (repo.inuse) {
        sendStatus(STATUS_INFO,getString(R.string.status_connecting_to_repo,repo.address));
        StringBuilder newetag=new StringBuilder();
        String err=RepoXMLHandler.doUpdate(getBaseContext(),repo,apps,newetag,keeprepos,this);
        if (err == null) {
          String nt=newetag.toString();
          if (!nt.equals(repo.lastetag)) {
            repo.lastetag=newetag.toString();
            changes=true;
          }
        }
 else {
          success=false;
          err=""String_Node_Str"" + repo.address + ""String_Node_Str""+ err;
          Log.d(""String_Node_Str"",err);
          if (errmsg.length() == 0)           errmsg=err;
 else           errmsg+=""String_Node_Str"" + err;
        }
      }
    }
    if (changes && success) {
      sendStatus(STATUS_INFO,getString(R.string.status_checking_compatibility));
      List<DB.App> acceptedapps=new ArrayList<DB.App>();
      List<DB.App> prevapps=((FDroidApp)getApplication()).getApps();
      DB db=DB.getDB();
      try {
        for (        int keep : keeprepos) {
          for (          DB.App app : prevapps) {
            boolean keepapp=false;
            for (            DB.Apk apk : app.apks) {
              if (apk.repo == keep) {
                keepapp=true;
                break;
              }
            }
            if (keepapp) {
              DB.App app_k=null;
              for (              DB.App app2 : apps) {
                if (app2.id.equals(app.id)) {
                  app_k=app2;
                  break;
                }
              }
              if (app_k == null) {
                apps.add(app);
                app_k=app;
              }
              app_k.updated=true;
              if (!app_k.detail_Populated) {
                db.populateDetails(app_k,keep);
              }
              for (              DB.Apk apk : app.apks)               if (apk.repo == keep)               apk.updated=true;
            }
          }
        }
        prevUpdates=db.beginUpdate(prevapps);
        for (        DB.App app : apps) {
          if (db.updateApplication(app))           acceptedapps.add(app);
        }
        db.endUpdate();
        if (notify)         newUpdates=db.getNumUpdates();
        for (        DB.Repo repo : repos)         db.writeLastEtag(repo);
      }
 catch (      Exception ex) {
        db.cancelUpdate();
        Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(ex));
        errmsg=""String_Node_Str"" + ex.getMessage();
        success=false;
      }
 finally {
        DB.releaseDB();
      }
      if (success) {
        for (        DB.App app : acceptedapps)         getIcon(app,repos);
        ((FDroidApp)getApplication()).invalidateApps();
      }
    }
    if (success && changes && notify) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + prevUpdates + ""String_Node_Str""+ newUpdates);
      if (newUpdates > prevUpdates) {
        NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
        Context context=getApplicationContext();
        CharSequence contentTitle=""String_Node_Str"";
        CharSequence contentText=""String_Node_Str"";
        Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
        notificationIntent.putExtra(FDroid.EXTRA_TAB_UPDATE,true);
        PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
        notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
        notification.flags|=Notification.FLAG_AUTO_CANCEL;
        n.notify(1,notification);
      }
    }
    if (!success) {
      if (errmsg.length() == 0)       errmsg=""String_Node_Str"";
      sendStatus(STATUS_ERROR,errmsg);
    }
 else {
      sendStatus(STATUS_COMPLETE);
    }
    if (success) {
      Editor e=prefs.edit();
      e.putLong(""String_Node_Str"",System.currentTimeMillis());
      e.commit();
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    if (errmsg.length() == 0)     errmsg=""String_Node_Str"";
    sendStatus(STATUS_ERROR,errmsg);
  }
 finally {
    Log.d(""String_Node_Str"",""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000) + ""String_Node_Str"");
    receiver=null;
  }
}","protected void onHandleIntent(Intent intent){
  receiver=intent.getParcelableExtra(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  String errmsg=""String_Node_Str"";
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    if (isScheduledRun()) {
      long lastUpdate=prefs.getLong(""String_Node_Str"",0);
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      long elapsed=System.currentTimeMillis() - lastUpdate;
      if (elapsed < interval * 60 * 60* 1000) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + elapsed + ""String_Node_Str""+ interval+ ""String_Node_Str"");
        return;
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int prevUpdates=0;
    int newUpdates=0;
    List<DB.Repo> repos;
    try {
      DB db=DB.getDB();
      repos=db.getRepos();
    }
  finally {
      DB.releaseDB();
    }
    List<DB.App> apps=new ArrayList<DB.App>();
    List<Integer> keeprepos=new ArrayList<Integer>();
    boolean success=true;
    boolean changes=false;
    for (    DB.Repo repo : repos) {
      if (repo.inuse) {
        sendStatus(STATUS_INFO,getString(R.string.status_connecting_to_repo,repo.address));
        StringBuilder newetag=new StringBuilder();
        String err=RepoXMLHandler.doUpdate(getBaseContext(),repo,apps,newetag,keeprepos,this);
        if (err == null) {
          String nt=newetag.toString();
          if (!nt.equals(repo.lastetag)) {
            repo.lastetag=newetag.toString();
            changes=true;
          }
        }
 else {
          success=false;
          err=""String_Node_Str"" + repo.address + ""String_Node_Str""+ err;
          Log.d(""String_Node_Str"",err);
          if (errmsg.length() == 0)           errmsg=err;
 else           errmsg+=""String_Node_Str"" + err;
        }
      }
    }
    if (changes && success) {
      sendStatus(STATUS_INFO,getString(R.string.status_checking_compatibility));
      List<DB.App> acceptedapps=new ArrayList<DB.App>();
      List<DB.App> prevapps=((FDroidApp)getApplication()).getApps();
      boolean anyRepoToUpdate=false;
      for (      DB.Repo repo : repos) {
        boolean keepThisRepo=false;
        for (        int repoId : keeprepos) {
          if (repo.id == repoId) {
            keepThisRepo=true;
            break;
          }
        }
        if (!keepThisRepo) {
          anyRepoToUpdate=true;
          break;
        }
      }
      if (!anyRepoToUpdate) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        sendStatus(STATUS_INFO,getString(R.string.status_checking_compatibility));
        List<DB.App> acceptedapps=new ArrayList<DB.App>();
        List<DB.App> prevapps=((FDroidApp)getApplication()).getApps();
        DB db=DB.getDB();
        try {
          Log.d(""String_Node_Str"",""String_Node_Str"" + keeprepos.size() + ""String_Node_Str"");
          for (          int keep : keeprepos) {
            Log.d(""String_Node_Str"",""String_Node_Str"" + keep + ""String_Node_Str"");
            for (            DB.App app : prevapps) {
              boolean keepapp=false;
              for (              DB.Apk apk : app.apks) {
                if (apk.repo == keep) {
                  Log.d(""String_Node_Str"",""String_Node_Str"" + app.id + ""String_Node_Str""+ apk.id+ ""String_Node_Str""+ keep);
                  keepapp=true;
                  break;
                }
              }
              if (keepapp) {
                DB.App app_k=null;
                Log.d(""String_Node_Str"",""String_Node_Str"" + app.id + ""String_Node_Str"");
                for (                DB.App app2 : apps) {
                  if (app2.id.equals(app.id)) {
                    Log.d(""String_Node_Str"",""String_Node_Str"" + app2.id + ""String_Node_Str"");
                    app_k=app2;
                    break;
                  }
                }
                if (app_k == null) {
                  Log.d(""String_Node_Str"",""String_Node_Str"" + apps.size() + ""String_Node_Str"");
                  apps.add(app);
                  app_k=app;
                }
                app_k.updated=true;
                Log.d(""String_Node_Str"",""String_Node_Str"" + app_k.id + ""String_Node_Str"");
                db.populateDetails(app_k,keep);
                for (                DB.Apk apk : app.apks)                 if (apk.repo == keep)                 apk.updated=true;
              }
            }
          }
          prevUpdates=db.beginUpdate(prevapps);
          for (          DB.App app : apps) {
            if (db.updateApplication(app))             acceptedapps.add(app);
          }
          db.endUpdate();
          if (notify)           newUpdates=db.getNumUpdates();
          for (          DB.Repo repo : repos)           db.writeLastEtag(repo);
        }
 catch (        Exception ex) {
          db.cancelUpdate();
          Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(ex));
          errmsg=""String_Node_Str"" + ex.getMessage();
          success=false;
        }
 finally {
          DB.releaseDB();
        }
        if (success) {
          for (          DB.App app : acceptedapps)           getIcon(app,repos);
          ((FDroidApp)getApplication()).invalidateApps();
        }
      }
    }
    if (success && changes && notify) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + prevUpdates + ""String_Node_Str""+ newUpdates);
      if (newUpdates > prevUpdates) {
        NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
        Context context=getApplicationContext();
        CharSequence contentTitle=""String_Node_Str"";
        CharSequence contentText=""String_Node_Str"";
        Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
        notificationIntent.putExtra(FDroid.EXTRA_TAB_UPDATE,true);
        PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
        notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
        notification.flags|=Notification.FLAG_AUTO_CANCEL;
        n.notify(1,notification);
      }
    }
    if (!success) {
      if (errmsg.length() == 0)       errmsg=""String_Node_Str"";
      sendStatus(STATUS_ERROR,errmsg);
    }
 else {
      sendStatus(STATUS_COMPLETE);
    }
    if (success) {
      Editor e=prefs.edit();
      e.putLong(""String_Node_Str"",System.currentTimeMillis());
      e.commit();
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    if (errmsg.length() == 0)     errmsg=""String_Node_Str"";
    sendStatus(STATUS_ERROR,errmsg);
  }
 finally {
    Log.d(""String_Node_Str"",""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000) + ""String_Node_Str"");
    receiver=null;
  }
}",0.8145910780669146
165357,"protected void onHandleIntent(Intent intent){
  ResultReceiver receiver=intent.getParcelableExtra(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  String errmsg=""String_Node_Str"";
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    if (receiver == null) {
      long lastUpdate=prefs.getLong(""String_Node_Str"",System.currentTimeMillis());
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0)       return;
      if (lastUpdate + (interval * 60 * 60) > System.currentTimeMillis())       return;
    }
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int prevUpdates=0;
    int newUpdates=0;
    Vector<DB.Repo> repos;
    try {
      DB db=DB.getDB();
      repos=db.getRepos();
    }
  finally {
      DB.releaseDB();
    }
    Vector<DB.App> apps=new Vector<DB.App>();
    Vector<String> keeprepos=new Vector<String>();
    boolean success=true;
    for (    DB.Repo repo : repos) {
      if (repo.inuse) {
        StringBuilder newetag=new StringBuilder();
        String err=RepoXMLHandler.doUpdate(getBaseContext(),repo,apps,newetag,keeprepos);
        if (err == null) {
          repo.lastetag=newetag.toString();
        }
 else {
          success=false;
          err=""String_Node_Str"" + repo.address + ""String_Node_Str""+ err;
          Log.d(""String_Node_Str"",err);
          if (errmsg.length() == 0)           errmsg=err;
 else           errmsg+=""String_Node_Str"" + err;
        }
      }
    }
    if (success) {
      Vector<DB.App> acceptedapps=new Vector<DB.App>();
      Vector<DB.App> prevapps=((FDroidApp)getApplication()).getApps();
      DB db=DB.getDB();
      try {
        for (        String keep : keeprepos) {
          for (          DB.App app : prevapps) {
            boolean keepapp=false;
            for (            DB.Apk apk : app.apks) {
              if (apk.server.equals(keep)) {
                keepapp=true;
                break;
              }
            }
            if (keepapp) {
              DB.App app_k=null;
              for (              DB.App app2 : apps) {
                if (app2.id.equals(app.id)) {
                  app_k=app2;
                  break;
                }
              }
              if (app_k == null) {
                apps.add(app);
                app_k=app;
              }
              app_k.updated=true;
              if (!app_k.detail_Populated) {
                db.populateDetails(app_k,keep);
              }
              for (              DB.Apk apk : app.apks)               if (apk.server.equals(keep))               apk.updated=true;
            }
          }
        }
        prevUpdates=db.beginUpdate(prevapps);
        for (        DB.App app : apps) {
          if (db.updateApplication(app))           acceptedapps.add(app);
        }
        db.endUpdate();
        if (notify)         newUpdates=db.getNumUpdates();
        for (        DB.Repo repo : repos)         db.writeLastEtag(repo);
      }
 catch (      Exception ex) {
        db.cancelUpdate();
        Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(ex));
        errmsg=""String_Node_Str"" + ex.getMessage();
        success=false;
      }
 finally {
        DB.releaseDB();
      }
      if (success) {
        for (        DB.App app : acceptedapps)         getIcon(app);
        ((FDroidApp)getApplication()).invalidateApps();
      }
    }
    if (success && notify) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + prevUpdates + ""String_Node_Str""+ newUpdates);
      if (newUpdates > prevUpdates) {
        NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
        Context context=getApplicationContext();
        CharSequence contentTitle=""String_Node_Str"";
        CharSequence contentText=""String_Node_Str"";
        Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
        notificationIntent.putExtra(FDroid.EXTRA_TAB_UPDATE,true);
        PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
        notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
        notification.flags|=Notification.FLAG_AUTO_CANCEL;
        n.notify(1,notification);
      }
    }
    if (receiver != null) {
      Bundle resultData=new Bundle();
      if (!success) {
        if (errmsg.length() == 0)         errmsg=""String_Node_Str"";
        resultData.putString(""String_Node_Str"",errmsg);
        receiver.send(1,resultData);
      }
 else {
        receiver.send(0,resultData);
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    if (receiver != null) {
      Bundle resultData=new Bundle();
      if (errmsg.length() == 0)       errmsg=""String_Node_Str"";
      resultData.putString(""String_Node_Str"",errmsg);
      receiver.send(1,resultData);
    }
  }
 finally {
    Log.d(""String_Node_Str"",""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000) + ""String_Node_Str"");
  }
}","protected void onHandleIntent(Intent intent){
  ResultReceiver receiver=intent.getParcelableExtra(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  String errmsg=""String_Node_Str"";
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
    if (receiver == null) {
      long lastUpdate=prefs.getLong(""String_Node_Str"",0);
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      long elapsed=System.currentTimeMillis() - lastUpdate;
      if (elapsed < interval * 60 * 60) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + elapsed + ""String_Node_Str""+ interval+ ""String_Node_Str"");
        return;
      }
    }
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int prevUpdates=0;
    int newUpdates=0;
    Vector<DB.Repo> repos;
    try {
      DB db=DB.getDB();
      repos=db.getRepos();
    }
  finally {
      DB.releaseDB();
    }
    Vector<DB.App> apps=new Vector<DB.App>();
    Vector<String> keeprepos=new Vector<String>();
    boolean success=true;
    for (    DB.Repo repo : repos) {
      if (repo.inuse) {
        StringBuilder newetag=new StringBuilder();
        String err=RepoXMLHandler.doUpdate(getBaseContext(),repo,apps,newetag,keeprepos);
        if (err == null) {
          repo.lastetag=newetag.toString();
        }
 else {
          success=false;
          err=""String_Node_Str"" + repo.address + ""String_Node_Str""+ err;
          Log.d(""String_Node_Str"",err);
          if (errmsg.length() == 0)           errmsg=err;
 else           errmsg+=""String_Node_Str"" + err;
        }
      }
    }
    if (success) {
      Vector<DB.App> acceptedapps=new Vector<DB.App>();
      Vector<DB.App> prevapps=((FDroidApp)getApplication()).getApps();
      DB db=DB.getDB();
      try {
        for (        String keep : keeprepos) {
          for (          DB.App app : prevapps) {
            boolean keepapp=false;
            for (            DB.Apk apk : app.apks) {
              if (apk.server.equals(keep)) {
                keepapp=true;
                break;
              }
            }
            if (keepapp) {
              DB.App app_k=null;
              for (              DB.App app2 : apps) {
                if (app2.id.equals(app.id)) {
                  app_k=app2;
                  break;
                }
              }
              if (app_k == null) {
                apps.add(app);
                app_k=app;
              }
              app_k.updated=true;
              if (!app_k.detail_Populated) {
                db.populateDetails(app_k,keep);
              }
              for (              DB.Apk apk : app.apks)               if (apk.server.equals(keep))               apk.updated=true;
            }
          }
        }
        prevUpdates=db.beginUpdate(prevapps);
        for (        DB.App app : apps) {
          if (db.updateApplication(app))           acceptedapps.add(app);
        }
        db.endUpdate();
        if (notify)         newUpdates=db.getNumUpdates();
        for (        DB.Repo repo : repos)         db.writeLastEtag(repo);
      }
 catch (      Exception ex) {
        db.cancelUpdate();
        Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(ex));
        errmsg=""String_Node_Str"" + ex.getMessage();
        success=false;
      }
 finally {
        DB.releaseDB();
      }
      if (success) {
        for (        DB.App app : acceptedapps)         getIcon(app);
        ((FDroidApp)getApplication()).invalidateApps();
      }
    }
    if (success && notify) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + prevUpdates + ""String_Node_Str""+ newUpdates);
      if (newUpdates > prevUpdates) {
        NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
        Context context=getApplicationContext();
        CharSequence contentTitle=""String_Node_Str"";
        CharSequence contentText=""String_Node_Str"";
        Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
        notificationIntent.putExtra(FDroid.EXTRA_TAB_UPDATE,true);
        PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
        notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
        notification.flags|=Notification.FLAG_AUTO_CANCEL;
        n.notify(1,notification);
      }
    }
    if (receiver != null) {
      Bundle resultData=new Bundle();
      if (!success) {
        if (errmsg.length() == 0)         errmsg=""String_Node_Str"";
        resultData.putString(""String_Node_Str"",errmsg);
        receiver.send(1,resultData);
      }
 else {
        receiver.send(0,resultData);
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    if (receiver != null) {
      Bundle resultData=new Bundle();
      if (errmsg.length() == 0)       errmsg=""String_Node_Str"";
      resultData.putString(""String_Node_Str"",errmsg);
      receiver.send(1,resultData);
    }
  }
 finally {
    Log.d(""String_Node_Str"",""String_Node_Str"" + ((System.currentTimeMillis() - startTime) / 1000) + ""String_Node_Str"");
  }
}",0.9430273692049898
165358,"@Override protected void onStart(){
  super.onStart();
  db=new DB(this);
  compatChecker=db.getCompatibilityChecker();
  mPm=getPackageManager();
  ((FDroidApp)getApplication()).inActivity++;
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  pref_cacheDownloaded=prefs.getBoolean(""String_Node_Str"",false);
  pref_expert=prefs.getBoolean(""String_Node_Str"",false);
  AppDetails old=(AppDetails)getLastNonConfigurationInstance();
  if (old != null) {
    copyState(old);
  }
 else {
    viewResetRequired=true;
  }
}","@Override protected void onStart(){
  super.onStart();
  db=new DB(this);
  compatChecker=db.getCompatibilityChecker();
  mPm=getPackageManager();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  pref_cacheDownloaded=prefs.getBoolean(""String_Node_Str"",false);
  pref_expert=prefs.getBoolean(""String_Node_Str"",false);
  AppDetails old=(AppDetails)getLastNonConfigurationInstance();
  if (old != null) {
    copyState(old);
  }
 else {
    viewResetRequired=true;
  }
}",0.9569288389513108
165359,"@Override protected void onStop(){
  db.close();
  db=null;
  ((FDroidApp)getApplication()).inActivity--;
  super.onStop();
}","@Override protected void onStop(){
  db.close();
  db=null;
  super.onStop();
}",0.7745098039215687
165360,"private void updateRepos(){
  pd=ProgressDialog.show(this,getString(R.string.process_wait_title),getString(R.string.process_update_msg),true);
  pd.setIcon(android.R.drawable.ic_dialog_info);
  new Thread(){
    public void run(){
      boolean success=RepoXMLHandler.doUpdates(FDroid.this,db);
      update_handler.sendEmptyMessage(success ? 0 : 1);
    }
  }
.start();
}","private void updateRepos(){
  pd=ProgressDialog.show(this,getString(R.string.process_wait_title),getString(R.string.process_update_msg),true,true);
  pd.setIcon(android.R.drawable.ic_dialog_info);
  Intent intent=new Intent(this,UpdateService.class);
  mUpdateReceiver=new UpdateReceiver(new Handler());
  intent.putExtra(""String_Node_Str"",mUpdateReceiver);
  startService(intent);
}",0.5562913907284768
165361,"@Override protected void onStart(){
  super.onStart();
  ((FDroidApp)getApplication()).inActivity++;
  db=new DB(this);
  triedEmptyUpdate=false;
  populateLists(true);
}","@Override protected void onStart(){
  super.onStart();
  db=new DB(this);
  triedEmptyUpdate=false;
  populateLists(true);
}",0.8435374149659864
165362,"@Override protected void onStop(){
  db.close();
  ((FDroidApp)getApplication()).inActivity--;
  super.onStop();
}","@Override protected void onStop(){
  db.close();
  super.onStop();
}",0.7472527472527473
165363,"public Vector<App> getApps(String appid,String filter,boolean update,boolean exclusions){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mContext);
  boolean pref_antiAds=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_antiTracking=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_antiNonFreeAdd=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_antiNonFreeNet=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_antiNonFreeDep=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_showIncompat=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_rooted=prefs.getBoolean(""String_Node_Str"",true);
  Vector<App> result=new Vector<App>();
  Cursor c=null;
  Cursor c2=null;
  try {
    String query=""String_Node_Str"" + TABLE_APP;
    if (appid != null) {
      query+=""String_Node_Str"" + appid + ""String_Node_Str"";
    }
 else     if (filter != null) {
      query+=""String_Node_Str"" + filter + ""String_Node_Str""+ ""String_Node_Str""+ filter+ ""String_Node_Str"";
    }
    query+=""String_Node_Str"";
    c=db.rawQuery(query,null);
    c.moveToFirst();
    while (!c.isAfterLast()) {
      App app=new App();
      app.antiFeatures=DB.CommaSeparatedList.make(c.getString(c.getColumnIndex(""String_Node_Str"")));
      boolean include=true;
      if (app.antiFeatures != null && exclusions) {
        for (        String af : app.antiFeatures) {
          if (af.equals(""String_Node_Str"") && !pref_antiAds)           include=false;
 else           if (af.equals(""String_Node_Str"") && !pref_antiTracking)           include=false;
 else           if (af.equals(""String_Node_Str"") && !pref_antiNonFreeNet)           include=false;
 else           if (af.equals(""String_Node_Str"") && !pref_antiNonFreeAdd)           include=false;
 else           if (af.equals(""String_Node_Str"") && !pref_antiNonFreeDep)           include=false;
        }
      }
      app.requirements=DB.CommaSeparatedList.make(c.getString(c.getColumnIndex(""String_Node_Str"")));
      if (app.requirements != null && exclusions) {
        for (        String r : app.requirements) {
          if (r.equals(""String_Node_Str"") && !pref_rooted) {
            include=false;
          }
        }
      }
      if (include) {
        app.id=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.name=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.summary=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.icon=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.description=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.license=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.category=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.webURL=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.trackerURL=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.sourceURL=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.donateURL=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.installedVersion=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.installedVerCode=c.getInt(c.getColumnIndex(""String_Node_Str""));
        app.marketVersion=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.marketVercode=c.getInt(c.getColumnIndex(""String_Node_Str""));
        String sAdded=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.added=sAdded.length() == 0 ? null : mDateFormat.parse(sAdded);
        String sLastUpdated=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.lastUpdated=sLastUpdated.length() == 0 ? null : mDateFormat.parse(sLastUpdated);
        app.hasUpdates=false;
        c2=db.rawQuery(""String_Node_Str"" + TABLE_APK + ""String_Node_Str"",new String[]{app.id});
        c2.moveToFirst();
        boolean compatible=pref_showIncompat || !exclusions;
        while (!c2.isAfterLast()) {
          Apk apk=new Apk();
          apk.id=app.id;
          apk.version=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.vercode=c2.getInt(c2.getColumnIndex(""String_Node_Str""));
          apk.server=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.hash=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.hashType=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.sig=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.srcname=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.size=c2.getInt(c2.getColumnIndex(""String_Node_Str""));
          apk.apkName=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.apkSource=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.minSdkVersion=c2.getInt(c2.getColumnIndex(""String_Node_Str""));
          String sApkAdded=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.added=sApkAdded.length() == 0 ? null : mDateFormat.parse(sApkAdded);
          apk.permissions=CommaSeparatedList.make(c2.getString(c2.getColumnIndex(""String_Node_Str"")));
          apk.features=CommaSeparatedList.make(c2.getString(c2.getColumnIndex(""String_Node_Str"")));
          app.apks.add(apk);
          if (!compatible && compatChecker.isCompatible(apk)) {
            compatible=true;
          }
          c2.moveToNext();
        }
        c2.close();
        if (compatible) {
          result.add(app);
        }
 else {
          Log.d(""String_Node_Str"",""String_Node_Str"" + app.id);
        }
      }
      c.moveToNext();
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
  }
 finally {
    if (c != null) {
      c.close();
    }
    if (c2 != null) {
      c2.close();
    }
  }
  if (update) {
    db.beginTransaction();
    try {
      getUpdates(result);
      db.setTransactionSuccessful();
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    }
 finally {
      db.endTransaction();
    }
  }
  for (  App app : result) {
    Apk curver=app.getCurrentVersion(compatChecker);
    if (curver != null && app.installedVersion != null && !app.installedVersion.equals(curver.version)) {
      if (app.installedVerCode < curver.vercode) {
        app.hasUpdates=true;
        app.currentVersion=curver.version;
      }
    }
  }
  return result;
}","public Vector<App> getApps(String appid,String filter,boolean update,boolean exclusions){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mContext);
  boolean pref_antiAds=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_antiTracking=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_antiNonFreeAdd=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_antiNonFreeNet=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_antiNonFreeDep=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_showIncompat=prefs.getBoolean(""String_Node_Str"",false);
  boolean pref_rooted=prefs.getBoolean(""String_Node_Str"",true);
  Vector<App> result=new Vector<App>();
  Cursor c=null;
  Cursor c2=null;
  try {
    String query=""String_Node_Str"" + TABLE_APP;
    if (appid != null) {
      query+=""String_Node_Str"" + appid + ""String_Node_Str"";
    }
 else     if (filter != null) {
      query+=""String_Node_Str"" + filter + ""String_Node_Str""+ ""String_Node_Str""+ filter+ ""String_Node_Str"";
    }
    query+=""String_Node_Str"";
    c=db.rawQuery(query,null);
    c.moveToFirst();
    while (!c.isAfterLast()) {
      App app=new App();
      app.antiFeatures=DB.CommaSeparatedList.make(c.getString(c.getColumnIndex(""String_Node_Str"")));
      boolean include=true;
      if (app.antiFeatures != null && exclusions) {
        for (        String af : app.antiFeatures) {
          if (af.equals(""String_Node_Str"") && !pref_antiAds)           include=false;
 else           if (af.equals(""String_Node_Str"") && !pref_antiTracking)           include=false;
 else           if (af.equals(""String_Node_Str"") && !pref_antiNonFreeNet)           include=false;
 else           if (af.equals(""String_Node_Str"") && !pref_antiNonFreeAdd)           include=false;
 else           if (af.equals(""String_Node_Str"") && !pref_antiNonFreeDep)           include=false;
        }
      }
      app.requirements=DB.CommaSeparatedList.make(c.getString(c.getColumnIndex(""String_Node_Str"")));
      if (app.requirements != null && exclusions) {
        for (        String r : app.requirements) {
          if (r.equals(""String_Node_Str"") && !pref_rooted) {
            include=false;
          }
        }
      }
      if (include) {
        app.id=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.name=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.summary=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.icon=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.description=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.license=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.category=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.webURL=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.trackerURL=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.sourceURL=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.donateURL=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.installedVersion=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.installedVerCode=c.getInt(c.getColumnIndex(""String_Node_Str""));
        app.marketVersion=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.marketVercode=c.getInt(c.getColumnIndex(""String_Node_Str""));
        String sAdded=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.added=(sAdded == null || sAdded.length() == 0) ? null : mDateFormat.parse(sAdded);
        String sLastUpdated=c.getString(c.getColumnIndex(""String_Node_Str""));
        app.lastUpdated=(sLastUpdated == null || sLastUpdated.length() == 0) ? null : mDateFormat.parse(sLastUpdated);
        app.hasUpdates=false;
        c2=db.rawQuery(""String_Node_Str"" + TABLE_APK + ""String_Node_Str"",new String[]{app.id});
        c2.moveToFirst();
        boolean compatible=pref_showIncompat || !exclusions;
        while (!c2.isAfterLast()) {
          Apk apk=new Apk();
          apk.id=app.id;
          apk.version=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.vercode=c2.getInt(c2.getColumnIndex(""String_Node_Str""));
          apk.server=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.hash=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.hashType=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.sig=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.srcname=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.size=c2.getInt(c2.getColumnIndex(""String_Node_Str""));
          apk.apkName=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.apkSource=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.minSdkVersion=c2.getInt(c2.getColumnIndex(""String_Node_Str""));
          String sApkAdded=c2.getString(c2.getColumnIndex(""String_Node_Str""));
          apk.added=(sApkAdded == null || sApkAdded.length() == 0) ? null : mDateFormat.parse(sApkAdded);
          apk.permissions=CommaSeparatedList.make(c2.getString(c2.getColumnIndex(""String_Node_Str"")));
          apk.features=CommaSeparatedList.make(c2.getString(c2.getColumnIndex(""String_Node_Str"")));
          app.apks.add(apk);
          if (!compatible && compatChecker.isCompatible(apk)) {
            compatible=true;
          }
          c2.moveToNext();
        }
        c2.close();
        if (compatible) {
          result.add(app);
        }
 else {
          Log.d(""String_Node_Str"",""String_Node_Str"" + app.id);
        }
      }
      c.moveToNext();
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
  }
 finally {
    if (c != null) {
      c.close();
    }
    if (c2 != null) {
      c2.close();
    }
  }
  if (update) {
    db.beginTransaction();
    try {
      getUpdates(result);
      db.setTransactionSuccessful();
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
    }
 finally {
      db.endTransaction();
    }
  }
  for (  App app : result) {
    Apk curver=app.getCurrentVersion(compatChecker);
    if (curver != null && app.installedVersion != null && !app.installedVersion.equals(curver.version)) {
      if (app.installedVerCode < curver.vercode) {
        app.hasUpdates=true;
        app.currentVersion=curver.version;
      }
    }
  }
  return result;
}",0.9879669681478568
165364,"private void updateApp(App oldapp,App upapp){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",upapp.id);
  values.put(""String_Node_Str"",upapp.name);
  values.put(""String_Node_Str"",upapp.summary);
  values.put(""String_Node_Str"",upapp.icon);
  values.put(""String_Node_Str"",upapp.description);
  values.put(""String_Node_Str"",upapp.license);
  values.put(""String_Node_Str"",upapp.category);
  values.put(""String_Node_Str"",upapp.webURL);
  values.put(""String_Node_Str"",upapp.trackerURL);
  values.put(""String_Node_Str"",upapp.sourceURL);
  values.put(""String_Node_Str"",upapp.donateURL);
  values.put(""String_Node_Str"",mDateFormat.format(upapp.added));
  values.put(""String_Node_Str"",mDateFormat.format(upapp.lastUpdated));
  values.put(""String_Node_Str"",upapp.marketVersion);
  values.put(""String_Node_Str"",upapp.marketVercode);
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapp.antiFeatures));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapp.requirements));
  values.put(""String_Node_Str"",upapp.hasUpdates ? 1 : 0);
  if (oldapp != null) {
    db.update(TABLE_APP,values,""String_Node_Str"",new String[]{oldapp.id});
  }
 else {
    db.insert(TABLE_APP,null,values);
  }
}","private void updateApp(App oldapp,App upapp){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",upapp.id);
  values.put(""String_Node_Str"",upapp.name);
  values.put(""String_Node_Str"",upapp.summary);
  values.put(""String_Node_Str"",upapp.icon);
  values.put(""String_Node_Str"",upapp.description);
  values.put(""String_Node_Str"",upapp.license);
  values.put(""String_Node_Str"",upapp.category);
  values.put(""String_Node_Str"",upapp.webURL);
  values.put(""String_Node_Str"",upapp.trackerURL);
  values.put(""String_Node_Str"",upapp.sourceURL);
  values.put(""String_Node_Str"",upapp.donateURL);
  values.put(""String_Node_Str"",upapp.added == null ? ""String_Node_Str"" : mDateFormat.format(upapp.added));
  values.put(""String_Node_Str"",upapp.added == null ? ""String_Node_Str"" : mDateFormat.format(upapp.lastUpdated));
  values.put(""String_Node_Str"",upapp.marketVersion);
  values.put(""String_Node_Str"",upapp.marketVercode);
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapp.antiFeatures));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapp.requirements));
  values.put(""String_Node_Str"",upapp.hasUpdates ? 1 : 0);
  if (oldapp != null) {
    db.update(TABLE_APP,values,""String_Node_Str"",new String[]{oldapp.id});
  }
 else {
    db.insert(TABLE_APP,null,values);
  }
}",0.9665338645418328
165365,"private void updateApkIfDifferent(Apk oldapk,Apk upapk){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",upapk.id);
  values.put(""String_Node_Str"",upapk.version);
  values.put(""String_Node_Str"",upapk.vercode);
  values.put(""String_Node_Str"",upapk.server);
  values.put(""String_Node_Str"",upapk.hash);
  values.put(""String_Node_Str"",upapk.hashType);
  values.put(""String_Node_Str"",upapk.sig);
  values.put(""String_Node_Str"",upapk.srcname);
  values.put(""String_Node_Str"",upapk.size);
  values.put(""String_Node_Str"",upapk.apkName);
  values.put(""String_Node_Str"",upapk.apkSource);
  values.put(""String_Node_Str"",upapk.minSdkVersion);
  values.put(""String_Node_Str"",mDateFormat.format(upapk.added));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapk.permissions));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapk.features));
  if (oldapk != null) {
    db.update(TABLE_APK,values,""String_Node_Str"",new String[]{oldapk.id,oldapk.version});
  }
 else {
    db.insert(TABLE_APK,null,values);
  }
}","private void updateApkIfDifferent(Apk oldapk,Apk upapk){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",upapk.id);
  values.put(""String_Node_Str"",upapk.version);
  values.put(""String_Node_Str"",upapk.vercode);
  values.put(""String_Node_Str"",upapk.server);
  values.put(""String_Node_Str"",upapk.hash);
  values.put(""String_Node_Str"",upapk.hashType);
  values.put(""String_Node_Str"",upapk.sig);
  values.put(""String_Node_Str"",upapk.srcname);
  values.put(""String_Node_Str"",upapk.size);
  values.put(""String_Node_Str"",upapk.apkName);
  values.put(""String_Node_Str"",upapk.apkSource);
  values.put(""String_Node_Str"",upapk.minSdkVersion);
  values.put(""String_Node_Str"",upapk.added == null ? ""String_Node_Str"" : mDateFormat.format(upapk.added));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapk.permissions));
  values.put(""String_Node_Str"",CommaSeparatedList.str(upapk.features));
  if (oldapk != null) {
    db.update(TABLE_APK,values,""String_Node_Str"",new String[]{oldapk.id,oldapk.version});
  }
 else {
    db.insert(TABLE_APK,null,values);
  }
}",0.980188679245283
165366,"private void getUpdates(Vector<DB.App> apps){
  List<PackageInfo> installedPackages=mPm.getInstalledPackages(0);
  Map<String,PackageInfo> systemApks=new HashMap<String,PackageInfo>();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  for (  PackageInfo appInfo : installedPackages) {
    systemApks.put(appInfo.packageName,appInfo);
  }
  for (  DB.App app : apps) {
    if (systemApks.containsKey(app.id)) {
      PackageInfo sysapk=systemApks.get(app.id);
      String version=sysapk.versionName;
      int vercode=sysapk.versionCode;
      if (app.installedVersion == null || !app.installedVersion.equals(version)) {
        setInstalledVersion(app.id,version,vercode);
        app.installedVersion=version;
      }
    }
 else {
      if (app.installedVersion != null) {
        setInstalledVersion(app.id,null,0);
        app.installedVersion=null;
      }
    }
  }
}","private void getUpdates(Vector<DB.App> apps){
  List<PackageInfo> installedPackages=mPm.getInstalledPackages(0);
  Map<String,PackageInfo> systemApks=new HashMap<String,PackageInfo>();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  for (  PackageInfo appInfo : installedPackages) {
    systemApks.put(appInfo.packageName,appInfo);
  }
  for (  DB.App app : apps) {
    if (systemApks.containsKey(app.id)) {
      PackageInfo sysapk=systemApks.get(app.id);
      String version=sysapk.versionName;
      int vercode=sysapk.versionCode;
      if (app.installedVersion == null || !app.installedVersion.equals(version)) {
        setInstalledVersion(app.id,version,vercode);
        app.installedVersion=version;
        app.installedVerCode=vercode;
      }
    }
 else {
      if (app.installedVersion != null) {
        setInstalledVersion(app.id,null,0);
        app.installedVersion=null;
      }
    }
  }
}",0.978675645342312
165367,"public void updateApplication(App upapp){
  if (updateApps == null) {
    return;
  }
  boolean found=false;
  for (  App app : updateApps) {
    if (app.id.equals(upapp.id)) {
      updateAppIfDifferent(app,upapp);
      app.updated=true;
      found=true;
      for (      Apk upapk : upapp.apks) {
        boolean afound=false;
        for (        Apk apk : app.apks) {
          if (apk.version.equals(upapk.version)) {
            updateApkIfDifferent(apk,upapk);
            apk.updated=true;
            afound=true;
            break;
          }
        }
        if (!afound) {
          updateApkIfDifferent(null,upapk);
          upapk.updated=true;
          app.apks.add(upapk);
        }
      }
      break;
    }
  }
  if (!found) {
    updateAppIfDifferent(null,upapp);
    for (    Apk upapk : upapp.apks) {
      updateApkIfDifferent(null,upapk);
      upapk.updated=true;
    }
    upapp.updated=true;
    updateApps.add(upapp);
  }
}","public void updateApplication(App upapp){
  if (updateApps == null) {
    return;
  }
  boolean found=false;
  for (  App app : updateApps) {
    if (app.id.equals(upapp.id)) {
      updateApp(app,upapp);
      app.updated=true;
      found=true;
      for (      Apk upapk : upapp.apks) {
        boolean afound=false;
        for (        Apk apk : app.apks) {
          if (apk.version.equals(upapk.version)) {
            updateApkIfDifferent(apk,upapk);
            apk.updated=true;
            afound=true;
            break;
          }
        }
        if (!afound) {
          updateApkIfDifferent(null,upapk);
          upapk.updated=true;
          app.apks.add(upapk);
        }
      }
      break;
    }
  }
  if (!found) {
    updateApp(null,upapp);
    for (    Apk upapk : upapp.apks) {
      updateApkIfDifferent(null,upapk);
      upapk.updated=true;
    }
    upapp.updated=true;
    updateApps.add(upapp);
  }
}",0.3153439153439153
165368,"private void handleCommand(){
  new Thread(){
    public void run(){
      if (((FDroidApp)getApplication()).inActivity != 0)       return;
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
      long lastUpdate=prefs.getLong(""String_Node_Str"",0);
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0)       return;
      if (lastUpdate + (interval * 60 * 60) > System.currentTimeMillis())       return;
      DB db=null;
      try {
        db=new DB(getBaseContext());
        boolean notify=prefs.getBoolean(""String_Node_Str"",false);
        int prevUpdates=0;
        if (notify)         prevUpdates=db.getNumUpdates();
        boolean success=RepoXMLHandler.doUpdates(getBaseContext(),db);
        if (success && notify) {
          if (db.getNumUpdates() > prevUpdates) {
            NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
            Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
            Context context=getApplicationContext();
            CharSequence contentTitle=""String_Node_Str"";
            CharSequence contentText=""String_Node_Str"";
            Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
            PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
            notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
            notification.flags|=Notification.FLAG_AUTO_CANCEL;
            n.notify(1,notification);
          }
        }
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
      }
 finally {
        if (db != null)         db.close();
        stopSelf();
      }
    }
  }
.start();
}","private void handleCommand(){
  new Thread(){
    public void run(){
      if (((FDroidApp)getApplication()).inActivity != 0)       return;
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
      long lastUpdate=prefs.getLong(""String_Node_Str"",0);
      String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      int interval=Integer.parseInt(sint);
      if (interval == 0)       return;
      if (lastUpdate + (interval * 60 * 60) > System.currentTimeMillis())       return;
      DB db=null;
      try {
        db=new DB(getBaseContext());
        boolean notify=prefs.getBoolean(""String_Node_Str"",false);
        int prevUpdates=0;
        if (notify)         prevUpdates=db.getNumUpdates();
        boolean success=RepoXMLHandler.doUpdates(getBaseContext(),db);
        if (success && notify) {
          int newUpdates=db.getNumUpdates();
          Log.d(""String_Node_Str"",""String_Node_Str"" + prevUpdates + ""String_Node_Str""+ newUpdates);
          if (newUpdates > prevUpdates) {
            NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
            Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
            Context context=getApplicationContext();
            CharSequence contentTitle=""String_Node_Str"";
            CharSequence contentText=""String_Node_Str"";
            Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
            PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
            notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
            notification.flags|=Notification.FLAG_AUTO_CANCEL;
            n.notify(1,notification);
          }
        }
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
      }
 finally {
        if (db != null)         db.close();
        stopSelf();
      }
    }
  }
.start();
}",0.964312453206888
165369,"public void run(){
  if (((FDroidApp)getApplication()).inActivity != 0)   return;
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  long lastUpdate=prefs.getLong(""String_Node_Str"",0);
  String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  int interval=Integer.parseInt(sint);
  if (interval == 0)   return;
  if (lastUpdate + (interval * 60 * 60) > System.currentTimeMillis())   return;
  DB db=null;
  try {
    db=new DB(getBaseContext());
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int prevUpdates=0;
    if (notify)     prevUpdates=db.getNumUpdates();
    boolean success=RepoXMLHandler.doUpdates(getBaseContext(),db);
    if (success && notify) {
      if (db.getNumUpdates() > prevUpdates) {
        NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
        Context context=getApplicationContext();
        CharSequence contentTitle=""String_Node_Str"";
        CharSequence contentText=""String_Node_Str"";
        Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
        PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
        notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
        notification.flags|=Notification.FLAG_AUTO_CANCEL;
        n.notify(1,notification);
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
  }
 finally {
    if (db != null)     db.close();
    stopSelf();
  }
}","public void run(){
  if (((FDroidApp)getApplication()).inActivity != 0)   return;
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getBaseContext());
  long lastUpdate=prefs.getLong(""String_Node_Str"",0);
  String sint=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  int interval=Integer.parseInt(sint);
  if (interval == 0)   return;
  if (lastUpdate + (interval * 60 * 60) > System.currentTimeMillis())   return;
  DB db=null;
  try {
    db=new DB(getBaseContext());
    boolean notify=prefs.getBoolean(""String_Node_Str"",false);
    int prevUpdates=0;
    if (notify)     prevUpdates=db.getNumUpdates();
    boolean success=RepoXMLHandler.doUpdates(getBaseContext(),db);
    if (success && notify) {
      int newUpdates=db.getNumUpdates();
      Log.d(""String_Node_Str"",""String_Node_Str"" + prevUpdates + ""String_Node_Str""+ newUpdates);
      if (newUpdates > prevUpdates) {
        NotificationManager n=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
        Notification notification=new Notification(R.drawable.icon,""String_Node_Str"",System.currentTimeMillis());
        Context context=getApplicationContext();
        CharSequence contentTitle=""String_Node_Str"";
        CharSequence contentText=""String_Node_Str"";
        Intent notificationIntent=new Intent(UpdateService.this,FDroid.class);
        PendingIntent contentIntent=PendingIntent.getActivity(UpdateService.this,0,notificationIntent,0);
        notification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
        notification.flags|=Notification.FLAG_AUTO_CANCEL;
        n.notify(1,notification);
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
  }
 finally {
    if (db != null)     db.close();
    stopSelf();
  }
}",0.9618536309692004
165370,"private void copyState(AppDetails old){
  download=old.download;
  if (download != null) {
    downloadHandler=new DownloadHandler();
  }
  ApkListAdapter oldAdapter=(ApkListAdapter)old.getListAdapter();
  setListAdapter(new ApkListAdapter(this,oldAdapter.getItems()));
  app=old.app;
  app_currentvercode=old.app_currentvercode;
  mInstalledSignature=old.mInstalledSignature;
  mInstalledSigID=old.mInstalledSigID;
  resetViews();
}","private void copyState(AppDetails old){
  ApkListAdapter oldAdapter=(ApkListAdapter)old.getListAdapter();
  setListAdapter(new ApkListAdapter(this,oldAdapter.getItems()));
  if (old.downloadHandler != null)   downloadHandler=new DownloadHandler(old.downloadHandler);
  app=old.app;
  app_currentvercode=old.app_currentvercode;
  mInstalledSignature=old.mInstalledSignature;
  mInstalledSigID=old.mInstalledSigID;
  resetViews();
}",0.776361529548088
165371,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_INSTALL:
    if (!pref_cacheDownloaded && download != null) {
      File file=new File(download.localFile());
      Log.d(""String_Node_Str"",""String_Node_Str"" + file);
      file.delete();
      download=null;
    }
  viewResetRequired=true;
break;
case REQUEST_UNINSTALL:
viewResetRequired=true;
break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_INSTALL:
    if (downloadHandler != null) {
      downloadHandler.cleanUp();
      downloadHandler=null;
    }
  viewResetRequired=true;
break;
case REQUEST_UNINSTALL:
viewResetRequired=true;
break;
}
}",0.7029177718832891
165372,"public void onCancel(DialogInterface dialog){
  if (download != null) {
    download.interrupt();
  }
}","public void onCancel(DialogInterface dialog){
  downloadHandler.cancel();
}",0.7303370786516854
165373,"@Override protected void onDestroy(){
  if (download != null && !stateRetained) {
    download.interrupt();
  }
  if (downloadHandler != null) {
    downloadHandler.destroy();
  }
  super.onDestroy();
}","@Override protected void onDestroy(){
  if (downloadHandler != null) {
    if (!stateRetained)     downloadHandler.cancel();
    downloadHandler.destroy();
  }
  super.onDestroy();
}",0.6666666666666666
165374,"public boolean updateProgress(){
  boolean finished=false;
switch (download.getStatus()) {
case RUNNING:
    if (pd == null) {
      pd=createProgressDialog(download.remoteFile(),download.getProgress(),download.getMax());
    }
 else {
      pd.setProgress(download.getProgress());
    }
  break;
case ERROR:
if (pd != null) pd.dismiss();
String text;
if (download.getErrorType() == Downloader.Error.CORRUPT) text=getString(R.string.corrupt_download);
 else text=download.getErrorMessage();
Toast.makeText(AppDetails.this,text,Toast.LENGTH_LONG).show();
finished=true;
break;
case DONE:
if (pd != null) pd.dismiss();
installApk(download.localFile());
finished=true;
break;
case CANCELLED:
Toast.makeText(AppDetails.this,getString(R.string.download_cancelled),Toast.LENGTH_SHORT).show();
finished=true;
break;
}
return finished;
}","public boolean updateProgress(){
  boolean finished=false;
switch (download.getStatus()) {
case RUNNING:
    if (pd == null) {
      pd=createProgressDialog(download.remoteFile(),download.getProgress(),download.getMax());
    }
 else {
      pd.setProgress(download.getProgress());
    }
  break;
case ERROR:
if (pd != null) pd.dismiss();
String text;
if (download.getErrorType() == Downloader.Error.CORRUPT) text=getString(R.string.corrupt_download);
 else text=download.getErrorMessage();
Toast.makeText(AppDetails.this,text,Toast.LENGTH_LONG).show();
finished=true;
break;
case DONE:
if (pd != null) pd.dismiss();
installApk(localFile=download.localFile());
finished=true;
break;
case CANCELLED:
Toast.makeText(AppDetails.this,getString(R.string.download_cancelled),Toast.LENGTH_SHORT).show();
finished=true;
break;
}
return finished;
}",0.9940047961630696
165375,"@Override public void handleMessage(Message msg){
  boolean finished=updateProgress();
  if (!finished) {
    sendMessageDelayed(obtainMessage(),50);
  }
}","@Override public void handleMessage(Message msg){
  if (download == null)   return;
  boolean finished=updateProgress();
  if (finished)   download=null;
 else   sendMessageDelayed(obtainMessage(),50);
}",0.8212290502793296
165376,"public DownloadHandler(){
  startUpdates();
}","public DownloadHandler(DownloadHandler oldHandler){
  if (oldHandler != null) {
    download=oldHandler.download;
    localFile=oldHandler.localFile;
  }
  startUpdates();
}",0.4128440366972477
165377,"@Override protected void onResume(){
  if (viewResetRequired) {
    reset();
    viewResetRequired=false;
  }
  if (download != null && downloadHandler != null) {
    downloadHandler.startUpdates();
  }
  super.onResume();
}","@Override protected void onResume(){
  if (viewResetRequired) {
    reset();
    viewResetRequired=false;
  }
  if (downloadHandler != null) {
    downloadHandler.startUpdates();
  }
  super.onResume();
}",0.9205607476635514
165378,"private ProgressDialog createProgressDialog(String file,int p,int max){
  final ProgressDialog pd=new ProgressDialog(this);
  pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  pd.setMessage(getString(R.string.download_server) + ""String_Node_Str"" + file);
  pd.setMax(max);
  pd.setProgress(p);
  pd.setCancelable(true);
  pd.setOnCancelListener(new DialogInterface.OnCancelListener(){
    public void onCancel(    DialogInterface dialog){
      if (download != null) {
        download.interrupt();
      }
    }
  }
);
  pd.setButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      pd.cancel();
    }
  }
);
  pd.show();
  return pd;
}","private ProgressDialog createProgressDialog(String file,int p,int max){
  final ProgressDialog pd=new ProgressDialog(this);
  pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  pd.setMessage(getString(R.string.download_server) + ""String_Node_Str"" + file);
  pd.setMax(max);
  pd.setProgress(p);
  pd.setCancelable(true);
  pd.setOnCancelListener(new DialogInterface.OnCancelListener(){
    public void onCancel(    DialogInterface dialog){
      downloadHandler.cancel();
    }
  }
);
  pd.setButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      pd.cancel();
    }
  }
);
  pd.show();
  return pd;
}",0.951048951048951
165379,"private void install(){
  if (mInstalledSigID != null && curapk.sig != null && !curapk.sig.equals(mInstalledSigID)) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setMessage(R.string.SignatureMismatch).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        dialog.cancel();
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
    return;
  }
  download=new Downloader(curapk);
  downloadHandler=new DownloadHandler();
  download.start();
}","private void install(){
  if (mInstalledSigID != null && curapk.sig != null && !curapk.sig.equals(mInstalledSigID)) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setMessage(R.string.SignatureMismatch).setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        dialog.cancel();
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
    return;
  }
  downloadHandler=new DownloadHandler(curapk);
}",0.9360210341805434
165380,"public void run(){
  File f;
  String apk_file=null;
  String apkname=curapk.apkName;
synchronized (this) {
    localfile=new String(LOCAL_PATH + ""String_Node_Str"" + apkname);
  }
  try {
    f=new File(localfile);
    if (f.exists()) {
      Hasher hash=new Hasher(curapk.hashType,f);
      if (hash.match(curapk.hash)) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + localfile);
synchronized (this) {
          filename=apk_file=localfile;
          progress=1;
          max=1;
          status=Status.RUNNING;
        }
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"" + localfile);
        f.delete();
      }
    }
    if (apk_file == null) {
      String remotefile;
      if (curapk.apkSource == null) {
        remotefile=curapk.server + ""String_Node_Str"" + apkname.replace(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        remotefile=curapk.apkSource;
      }
      Log.d(""String_Node_Str"",""String_Node_Str"" + remotefile);
synchronized (this) {
        filename=remotefile;
        progress=0;
        max=curapk.size;
        status=Status.RUNNING;
      }
      BufferedInputStream getit=new BufferedInputStream(new URL(remotefile).openStream(),8192);
      FileOutputStream saveit=new FileOutputStream(localfile);
      BufferedOutputStream bout=new BufferedOutputStream(saveit,1024);
      byte data[]=new byte[1024];
      int totalRead=0;
      int bytesRead=getit.read(data,0,1024);
      while (bytesRead != -1) {
        if (isInterrupted()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          break;
        }
        bout.write(data,0,bytesRead);
        totalRead+=bytesRead;
synchronized (this) {
          progress=totalRead;
        }
        bytesRead=getit.read(data,0,1024);
      }
      bout.close();
      getit.close();
      saveit.close();
      f=new File(localfile);
      if (isInterrupted()) {
        f.delete();
synchronized (this) {
          status=Status.CANCELLED;
        }
        return;
      }
      Hasher hash=new Hasher(curapk.hashType,f);
      if (hash.match(curapk.hash)) {
        apk_file=localfile;
      }
 else {
synchronized (this) {
          error=Error.CORRUPT;
          errorMessage=null;
          status=Status.ERROR;
        }
        Log.d(""String_Node_Str"",""String_Node_Str"" + hash.getHash() + ""String_Node_Str""+ curapk.hash);
        f=new File(localfile);
        f.delete();
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
synchronized (this) {
      error=Error.UNKNOWN;
      errorMessage=e.getMessage();
      status=Status.ERROR;
    }
    f=new File(localfile);
    f.delete();
  }
  if (apk_file != null) {
synchronized (this) {
      status=Status.DONE;
    }
    Log.d(""String_Node_Str"",""String_Node_Str"" + apk_file);
  }
}","public void run(){
  File f;
  String apk_file=null;
  String apkname=curapk.apkName;
synchronized (this) {
    localfile=new String(LOCAL_PATH + ""String_Node_Str"" + apkname);
  }
  try {
    f=new File(localfile);
    if (f.exists()) {
      Hasher hash=new Hasher(curapk.hashType,f);
      if (hash.match(curapk.hash)) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + localfile);
synchronized (this) {
          filename=apk_file=localfile;
          progress=1;
          max=1;
          status=Status.RUNNING;
        }
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"" + localfile);
        f.delete();
      }
    }
    if (apk_file == null) {
      String remotefile;
      if (curapk.apkSource == null) {
        remotefile=curapk.server + ""String_Node_Str"" + apkname.replace(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        remotefile=curapk.apkSource;
      }
      Log.d(""String_Node_Str"",""String_Node_Str"" + remotefile);
synchronized (this) {
        filename=remotefile;
        progress=0;
        max=curapk.size;
        status=Status.RUNNING;
      }
      BufferedInputStream getit=new BufferedInputStream(new URL(remotefile).openStream(),8192);
      FileOutputStream saveit=new FileOutputStream(localfile);
      BufferedOutputStream bout=new BufferedOutputStream(saveit,1024);
      byte data[]=new byte[1024];
      int totalRead=0;
      int bytesRead=getit.read(data,0,1024);
      while (bytesRead != -1) {
        if (isInterrupted()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          break;
        }
        bout.write(data,0,bytesRead);
        totalRead+=bytesRead;
synchronized (this) {
          progress=totalRead;
        }
        bytesRead=getit.read(data,0,1024);
      }
      bout.close();
      getit.close();
      saveit.close();
      f=new File(localfile);
      if (isInterrupted()) {
        f.delete();
synchronized (this) {
          status=Status.CANCELLED;
        }
        return;
      }
      Hasher hash=new Hasher(curapk.hashType,f);
      if (hash.match(curapk.hash)) {
        apk_file=localfile;
      }
 else {
synchronized (this) {
          error=Error.CORRUPT;
          errorMessage=null;
          status=Status.ERROR;
        }
        Log.d(""String_Node_Str"",""String_Node_Str"" + hash.getHash() + ""String_Node_Str""+ curapk.hash);
        f=new File(localfile);
        f.delete();
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + Log.getStackTraceString(e));
synchronized (this) {
      error=Error.UNKNOWN;
      errorMessage=e.toString();
      status=Status.ERROR;
    }
    f=new File(localfile);
    f.delete();
  }
  if (apk_file != null) {
synchronized (this) {
      status=Status.DONE;
    }
    Log.d(""String_Node_Str"",""String_Node_Str"" + apk_file);
  }
}",0.9968141592920354
165381,"@Override public void characters(char[] ch,int start,int length) throws SAXException {
  super.characters(ch,start,length);
  String str=new String(ch).substring(start,start + length);
  if (curapk != null && curel != null) {
    if (curel == ""String_Node_Str"") {
      curapk.version=str;
    }
 else     if (curel == ""String_Node_Str"") {
      try {
        curapk.vercode=Integer.parseInt(str);
      }
 catch (      NumberFormatException ex) {
        curapk.vercode=0;
      }
    }
 else     if (curel == ""String_Node_Str"") {
      try {
        curapk.size=Integer.parseInt(str);
      }
 catch (      NumberFormatException ex) {
        curapk.size=0;
      }
    }
 else     if (curel == ""String_Node_Str"") {
      curapk.hash=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapk.apkName=str;
    }
  }
 else   if (curapp != null && curel != null) {
    if (curel == ""String_Node_Str"") {
      curapp.id=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.name=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.icon=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.description=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.summary=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.license=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.sourceURL=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.webURL=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.trackerURL=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.marketVersion=str;
    }
 else     if (curel == ""String_Node_Str"") {
      try {
        curapp.marketVercode=Integer.parseInt(str);
      }
 catch (      NumberFormatException ex) {
        curapp.marketVercode=0;
      }
    }
  }
}","@Override public void characters(char[] ch,int start,int length) throws SAXException {
  super.characters(ch,start,length);
  String str=new String(ch).substring(start,start + length);
  if (curchars == null)   curchars=str;
 else   curchars+=str;
}",0.1866921972235519
165382,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  super.endElement(uri,localName,qName);
  if (localName == ""String_Node_Str"" && curapp != null) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + curapp.id);
    db.updateApplication(curapp);
    getIcon(curapp);
    curapp=null;
  }
 else   if (localName == ""String_Node_Str"" && curapk != null && curapp != null) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + curapk.version + ""String_Node_Str"");
    curapp.apks.add(curapk);
    curapk=null;
  }
 else {
    curel=null;
  }
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  super.endElement(uri,localName,qName);
  String curel=localName;
  String str=curchars;
  if (curel == ""String_Node_Str"" && curapp != null) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + curapp.id);
    db.updateApplication(curapp);
    getIcon(curapp);
    curapp=null;
  }
 else   if (curel == ""String_Node_Str"" && curapk != null && curapp != null) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + curapk.version + ""String_Node_Str"");
    curapp.apks.add(curapk);
    curapk=null;
  }
 else   if (curapk != null && str != null) {
    if (curel == ""String_Node_Str"") {
      curapk.version=str;
    }
 else     if (curel == ""String_Node_Str"") {
      try {
        curapk.vercode=Integer.parseInt(str);
      }
 catch (      NumberFormatException ex) {
        curapk.vercode=0;
      }
    }
 else     if (curel == ""String_Node_Str"") {
      try {
        curapk.size=Integer.parseInt(str);
      }
 catch (      NumberFormatException ex) {
        curapk.size=0;
      }
    }
 else     if (curel == ""String_Node_Str"") {
      curapk.hash=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapk.apkName=str;
    }
  }
 else   if (curapp != null && str != null) {
    if (curel == ""String_Node_Str"") {
      Log.d(""String_Node_Str"",""String_Node_Str"" + str);
      curapp.id=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.name=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.icon=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.description=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.summary=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.license=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.sourceURL=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.webURL=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.trackerURL=str;
    }
 else     if (curel == ""String_Node_Str"") {
      curapp.marketVersion=str;
    }
 else     if (curel == ""String_Node_Str"") {
      try {
        curapp.marketVercode=Integer.parseInt(str);
      }
 catch (      NumberFormatException ex) {
        curapp.marketVercode=0;
      }
    }
  }
}",0.3727872266574106
165383,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  super.startElement(uri,localName,qName,attributes);
  if (localName == ""String_Node_Str"" && curapp == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + mserver);
    curapp=new DB.App();
  }
 else   if (localName == ""String_Node_Str"" && curapp != null && curapk == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + curapp.id);
    curapk=new DB.Apk();
    curapk.id=curapp.id;
    curapk.server=mserver;
  }
 else {
    curel=localName;
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  super.startElement(uri,localName,qName,attributes);
  if (localName == ""String_Node_Str"" && curapp == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + mserver);
    curapp=new DB.App();
  }
 else   if (localName == ""String_Node_Str"" && curapp != null && curapk == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + curapp.id);
    curapk=new DB.Apk();
    curapk.id=curapp.id;
    curapk.server=mserver;
  }
  curchars=null;
}",0.9578207381370826
165384,"void runBenchmark(){
  try {
    long start, time;
    generateData();
    OutputStream os=file.openOutputStream();
    start=JVM.monotonicTimeMillis();
    writeUtf8Data(os);
    time=JVM.monotonicTimeMillis() - start;
    System.out.println(""String_Node_Str"" + time);
    os.flush();
    os.close();
    InputStream is=file.openInputStream();
    start=JVM.monotonicTimeMillis();
    readUtf8Data(is);
    System.out.println(""String_Node_Str"" + time);
    is.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","void runBenchmark(){
  try {
    long start, time;
    generateData();
    OutputStream os=file.openOutputStream();
    start=JVM.monotonicTimeMillis();
    writeUtf8Data(os);
    time=JVM.monotonicTimeMillis() - start;
    System.out.println(""String_Node_Str"" + time);
    os.flush();
    os.close();
    InputStream is=file.openInputStream();
    start=JVM.monotonicTimeMillis();
    readUtf8Data(is);
    time=JVM.monotonicTimeMillis() - start;
    System.out.println(""String_Node_Str"" + time);
    is.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9602169981916816
165385,"void runBenchmark(){
  try {
    long start, time;
    generateData();
    OutputStream os=file.openOutputStream();
    start=JVM.monotonicTimeMillis();
    writeUtf8Data(os);
    time=JVM.monotonicTimeMillis() - start;
    System.out.println(""String_Node_Str"" + time);
    os.flush();
    os.close();
    InputStream is=file.openInputStream();
    start=JVM.monotonicTimeMillis();
    readUtf8Data(is);
    System.out.println(""String_Node_Str"" + time);
    is.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","void runBenchmark(){
  try {
    long start, time;
    generateData();
    OutputStream os=file.openOutputStream();
    start=JVM.monotonicTimeMillis();
    writeUtf8Data(os);
    time=JVM.monotonicTimeMillis() - start;
    System.out.println(""String_Node_Str"" + time);
    os.flush();
    os.close();
    InputStream is=file.openInputStream();
    start=JVM.monotonicTimeMillis();
    readUtf8Data(is);
    time=JVM.monotonicTimeMillis() - start;
    System.out.println(""String_Node_Str"" + time);
    is.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9602169981916816
165386,"public static boolean isLowerCase(char ch){
  return DefaultCaseConverter.toLowerCase(ch) == ch;
}","/** 
 * Determines if the specified character is a lowercase character. The default case converter in CLDC only supports the ISO Latin-1  range of characters. <p> Of the ISO Latin-1 characters (character codes 0x0000 through 0x00FF), the following are lowercase: <p> a b c d e f g h i j k l m n o p q r s t u v w x y z &#92;u00DF &#92;u00E0 &#92;u00E1 &#92;u00E2 &#92;u00E3 &#92;u00E4 &#92;u00E5 &#92;u00E6 &#92;u00E7 &#92;u00E8 &#92;u00E9 &#92;u00EA &#92;u00EB &#92;u00EC &#92;u00ED &#92;u00EE &#92;u00EF &#92;u00F0 &#92;u00F1 &#92;u00F2 &#92;u00F3 &#92;u00F4 &#92;u00F5 &#92;u00F6 &#92;u00F8 &#92;u00F9 &#92;u00FA &#92;u00FB &#92;u00FC &#92;u00FD &#92;u00FE &#92;u00FF
 * @param ch   the character to be tested.
 * @return  <code>true</code> if the character is lowercase;<code>false</code> otherwise.
 * @since   JDK1.0
 */
public static boolean isLowerCase(char ch){
  return (ch >= 'a' && ch <= 'z') || (ch >= 0xDF && ch <= 0xF6) || (ch >= 0xF8 && ch <= 0xFF);
}",0.1145539906103286
165387,public static native char toLowerCase(char ch);,"/** 
 * The given character is mapped to its lowercase equivalent; if the character has no lowercase equivalent, the character itself is returned.  The default case converter in CLDC only supports the ISO Latin-1 range of characters.
 * @param ch   the character to be converted.
 * @return  the lowercase equivalent of the character, if any;otherwise the character itself.
 * @see java.lang.Character#isLowerCase(char)
 * @see java.lang.Character#isUpperCase(char)
 * @see java.lang.Character#toUpperCase(char)
 * @since   JDK1.0
 */
public static char toLowerCase(char ch){
  if (isUpperCase(ch)) {
    if (ch <= 'Z') {
      return (char)(ch + ('a' - 'A'));
    }
 else {
      return (char)(ch + 0x20);
    }
  }
 else {
    return ch;
  }
}",0.0429292929292929
165388,public static native char toUpperCase(char ch);,"/** 
 * Converts the character argument to uppercase; if the character has no lowercase equivalent, the character itself is returned.  The default case converter in CLDC only supports the ISO Latin-1 range of characters.
 * @param ch   the character to be converted.
 * @return  the uppercase equivalent of the character, if any;otherwise the character itself.
 * @see java.lang.Character#isLowerCase(char)
 * @see java.lang.Character#isUpperCase(char)
 * @see java.lang.Character#toLowerCase(char)
 * @since   JDK1.0
 */
public static char toUpperCase(char ch){
  if (isLowerCase(ch)) {
    if (ch <= 'z') {
      return (char)(ch - ('a' - 'A'));
    }
 else {
      return (char)(ch - 0x20);
    }
  }
 else {
    return ch;
  }
}",0.048780487804878
165389,"public static boolean isUpperCase(char ch){
  return DefaultCaseConverter.toUpperCase(ch) == ch;
}","/** 
 * Determines if the specified character is an uppercase character. The default case converter in CLDC only supports the ISO Latin-1  range of characters. <p> Of the ISO Latin-1 characters (character codes 0x0000 through 0x00FF), the following are uppercase: <p> A B C D E F G H I J K L M N O P Q R S T U V W X Y Z &#92;u00C0 &#92;u00C1 &#92;u00C2 &#92;u00C3 &#92;u00C4 &#92;u00C5 &#92;u00C6 &#92;u00C7 &#92;u00C8 &#92;u00C9 &#92;u00CA &#92;u00CB &#92;u00CC &#92;u00CD &#92;u00CE &#92;u00CF &#92;u00D0 &#92;u00D1 &#92;u00D2 &#92;u00D3 &#92;u00D4 &#92;u00D5 &#92;u00D6 &#92;u00D8 &#92;u00D9 &#92;u00DA &#92;u00DB &#92;u00DC &#92;u00DD &#92;u00DE
 * @param ch   the character to be tested.
 * @return  <code>true</code> if the character is uppercase;<code>false</code> otherwise.
 * @see java.lang.Character#isLowerCase(char)
 * @see java.lang.Character#toUpperCase(char)
 * @since   1.0
 */
public static boolean isUpperCase(char ch){
  return (ch >= 'A' && ch <= 'Z') || (ch >= 0xC0 && ch <= 0xD6) || (ch >= 0xD8 && ch <= 0xDE);
}",0.1129744042365401
165390,"private byte[] read(InputStream is) throws IOException {
  int l=is.available();
  byte[] buffer=new byte[l + 1];
  int length=0;
  while ((l=is.read(buffer,length,buffer.length - length)) != -1) {
    length+=l;
    if (length == buffer.length) {
      byte[] b=new byte[buffer.length + 4096];
      System.arraycopy(buffer,0,b,0,length);
      buffer=b;
    }
  }
  return buffer;
}","private byte[] read(InputStream is) throws IOException {
  int l=is.available();
  byte[] buffer=new byte[l + 1];
  int length=0;
  while ((l=is.read(buffer,length,buffer.length - length)) != -1) {
    length+=l;
    if (length == buffer.length) {
      byte[] b=new byte[buffer.length + 4096];
      System.arraycopy(buffer,0,b,0,length);
      buffer=b;
    }
  }
  if (length < buffer.length) {
    byte[] b=new byte[length];
    System.arraycopy(buffer,0,b,0,length);
    buffer=b;
  }
  return buffer;
}",0.827354260089686
165391,"byte[] read(InputStream is) throws IOException {
  int l=is.available();
  byte[] buffer=new byte[l + 1];
  int length=0;
  while ((l=is.read(buffer,length,buffer.length - length)) != -1) {
    length+=l;
    if (length == buffer.length) {
      byte[] b=new byte[buffer.length + 4096];
      System.arraycopy(buffer,0,b,0,length);
      buffer=b;
    }
  }
  return buffer;
}","byte[] read(InputStream is) throws IOException {
  int l=is.available();
  byte[] buffer=new byte[l + 1];
  int length=0;
  while ((l=is.read(buffer,length,buffer.length - length)) != -1) {
    length+=l;
    if (length == buffer.length) {
      byte[] b=new byte[buffer.length + 4096];
      System.arraycopy(buffer,0,b,0,length);
      buffer=b;
    }
  }
  if (length < buffer.length) {
    byte[] b=new byte[length];
    System.arraycopy(buffer,0,b,0,length);
    buffer=b;
  }
  return buffer;
}",0.8242009132420092
165392,"public static byte[] read(InputStream is) throws IOException {
  int l=is.available();
  byte[] buffer=new byte[l + 1];
  int length=0;
  while ((l=is.read(buffer,length,buffer.length - length)) != -1) {
    length+=l;
    if (length == buffer.length) {
      byte[] b=new byte[buffer.length + 4096];
      System.arraycopy(buffer,0,b,0,length);
      buffer=b;
    }
  }
  return buffer;
}","public static byte[] read(InputStream is) throws IOException {
  int l=is.available();
  byte[] buffer=new byte[l + 1];
  int length=0;
  while ((l=is.read(buffer,length,buffer.length - length)) != -1) {
    length+=l;
    if (length == buffer.length) {
      byte[] b=new byte[buffer.length + 4096];
      System.arraycopy(buffer,0,b,0,length);
      buffer=b;
    }
  }
  if (length < buffer.length) {
    byte[] b=new byte[length];
    System.arraycopy(buffer,0,b,0,length);
    buffer=b;
  }
  return buffer;
}",0.8296460176991151
165393,"native public void setPosition(int x,int y);","public void setPosition(int x,int y){
  if (!(parent instanceof Canvas)) {
    setPosition0(x,y);
    return;
  }
  Display display=((Canvas)parent).getCurrentDisplay();
  if (display == null) {
    setPosition0(x,y);
    return;
  }
  setPosition0(display.getDisplayableAnchorX() + x,display.getDisplayableAnchorY() + y);
}",0.1956521739130435
165394,"private String validateSpec(String spec){
  String fullPath;
  if (!spec.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"" + spec);
  spec=spec.substring(2);
  if (separatorChar != '/') {
    if (spec.indexOf(separatorChar) != -1)     throw new IllegalArgumentException(""String_Node_Str"" + spec);
  }
  int idx=spec.indexOf(""String_Node_Str"");
  if (idx == -1)   throw new IllegalArgumentException(spec);
  if (idx == 0) {
    host=""String_Node_Str"";
    fullPath=spec.substring(1,spec.length());
  }
 else {
    int idx2=spec.indexOf(""String_Node_Str"");
    int idx3=spec.indexOf(""String_Node_Str"");
    if ((idx2 != -1 && idx2 < idx) || (idx3 != -1 && idx3 < idx))     throw new IllegalArgumentException(spec);
    fullPath=spec.substring(idx + 1,spec.length());
    host=spec.substring(0,idx);
  }
  int idx4=spec.indexOf(""String_Node_Str"");
  int idx5=spec.indexOf(""String_Node_Str"");
  int idx6=spec.indexOf(""String_Node_Str"");
  int idx7=spec.indexOf(""String_Node_Str"");
  int idx8=spec.indexOf(""String_Node_Str"");
  int idx9=spec.indexOf(""String_Node_Str"");
  if (idx4 != -1 || idx5 != -1 || idx6 == 0 || idx7 == 0 || (idx8 != -1 && idx8 == spec.length() - 3) || (idx9 != -1 && idx9 == spec.length() - 2))   throw new IllegalArgumentException(""String_Node_Str"" + spec);
  return fullPath;
}","private String validateSpec(String spec){
  String fullPath;
  if (!spec.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"" + spec);
  spec=spec.substring(2);
  if (separatorChar != '/') {
    if (spec.indexOf(separatorChar) != -1)     throw new IllegalArgumentException(""String_Node_Str"" + spec);
  }
  int idx=spec.indexOf(""String_Node_Str"");
  if (idx == -1)   throw new IllegalArgumentException(spec);
  if (idx == 0) {
    host=""String_Node_Str"";
    fullPath=spec.substring(0,spec.length());
  }
 else {
    int idx2=spec.indexOf(""String_Node_Str"");
    int idx3=spec.indexOf(""String_Node_Str"");
    if ((idx2 != -1 && idx2 < idx) || (idx3 != -1 && idx3 < idx))     throw new IllegalArgumentException(spec);
    fullPath=spec.substring(idx,spec.length());
    host=spec.substring(0,idx);
  }
  int idx4=spec.indexOf(""String_Node_Str"");
  int idx5=spec.indexOf(""String_Node_Str"");
  int idx6=spec.indexOf(""String_Node_Str"");
  int idx7=spec.indexOf(""String_Node_Str"");
  int idx8=spec.indexOf(""String_Node_Str"");
  int idx9=spec.indexOf(""String_Node_Str"");
  if (idx4 != -1 || idx5 != -1 || idx6 == 0 || idx7 == 0 || (idx8 != -1 && idx8 == spec.length() - 3) || (idx9 != -1 && idx9 == spec.length() - 2))   throw new IllegalArgumentException(""String_Node_Str"" + spec);
  return fullPath;
}",0.9977460555972952
165395,"private String validateSpec(String spec){
  String fullPath;
  if (!spec.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"" + spec);
  spec=spec.substring(2);
  if (separatorChar != '/') {
    if (spec.indexOf(separatorChar) != -1)     throw new IllegalArgumentException(""String_Node_Str"" + spec);
  }
  int idx=spec.indexOf(""String_Node_Str"");
  if (idx == -1)   throw new IllegalArgumentException(spec);
  if (idx == 0) {
    host=""String_Node_Str"";
    fullPath=spec.substring(1,spec.length());
  }
 else {
    int idx2=spec.indexOf(""String_Node_Str"");
    int idx3=spec.indexOf(""String_Node_Str"");
    if ((idx2 != -1 && idx2 < idx) || (idx3 != -1 && idx3 < idx))     throw new IllegalArgumentException(spec);
    fullPath=spec.substring(idx + 1,spec.length());
    host=spec.substring(0,idx);
  }
  int idx4=spec.indexOf(""String_Node_Str"");
  int idx5=spec.indexOf(""String_Node_Str"");
  int idx6=spec.indexOf(""String_Node_Str"");
  int idx7=spec.indexOf(""String_Node_Str"");
  int idx8=spec.indexOf(""String_Node_Str"");
  int idx9=spec.indexOf(""String_Node_Str"");
  if (idx4 != -1 || idx5 != -1 || idx6 == 0 || idx7 == 0 || (idx8 != -1 && idx8 == spec.length() - 3) || (idx9 != -1 && idx9 == spec.length() - 2))   throw new IllegalArgumentException(""String_Node_Str"" + spec);
  return fullPath;
}","private String validateSpec(String spec){
  String fullPath;
  if (!spec.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"" + spec);
  spec=spec.substring(2);
  if (separatorChar != '/') {
    if (spec.indexOf(separatorChar) != -1)     throw new IllegalArgumentException(""String_Node_Str"" + spec);
  }
  int idx=spec.indexOf(""String_Node_Str"");
  if (idx == -1)   throw new IllegalArgumentException(spec);
  if (idx == 0) {
    host=""String_Node_Str"";
    fullPath=spec.substring(0,spec.length());
  }
 else {
    int idx2=spec.indexOf(""String_Node_Str"");
    int idx3=spec.indexOf(""String_Node_Str"");
    if ((idx2 != -1 && idx2 < idx) || (idx3 != -1 && idx3 < idx))     throw new IllegalArgumentException(spec);
    fullPath=spec.substring(idx,spec.length());
    host=spec.substring(0,idx);
  }
  int idx4=spec.indexOf(""String_Node_Str"");
  int idx5=spec.indexOf(""String_Node_Str"");
  int idx6=spec.indexOf(""String_Node_Str"");
  int idx7=spec.indexOf(""String_Node_Str"");
  int idx8=spec.indexOf(""String_Node_Str"");
  int idx9=spec.indexOf(""String_Node_Str"");
  if (idx4 != -1 || idx5 != -1 || idx6 == 0 || idx7 == 0 || (idx8 != -1 && idx8 == spec.length() - 3) || (idx9 != -1 && idx9 == spec.length() - 2))   throw new IllegalArgumentException(""String_Node_Str"" + spec);
  return fullPath;
}",0.9977460555972952
165396,"@Override public Date convert(String source){
  if (source == null) {
    return null;
  }
  Date date;
  try {
    Long milliSeconds=Long.valueOf(source);
    return new Date(milliSeconds);
  }
 catch (  NumberFormatException e) {
  }
  if (source.length() == 10) {
    try {
      date=date10.parse(source);
    }
 catch (    ParseException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
    }
  }
 else   if (source.length() == 19) {
    try {
      date=date19.parse(source);
    }
 catch (    ParseException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
    }
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
  }
  return date;
}","@Override public Date convert(String source){
  if (source == null) {
    return null;
  }
  Date date;
  try {
    Long milliSeconds=Long.valueOf(source);
    return new Date(milliSeconds);
  }
 catch (  NumberFormatException e) {
  }
  if (source.length() == 10) {
    try {
      date=date10.parse(source);
    }
 catch (    ParseException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source),e);
    }
  }
 else   if (source.length() == 19) {
    try {
      date=date19.parse(source);
    }
 catch (    ParseException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source),e);
    }
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
  }
  return date;
}",0.9973787680209698
165397,"public Long getIdFromUUID(String uuid){
  Long id=null;
  try (Connection connection=dataSource.getConnection()){
    PreparedStatement getIdStatement=connection.prepareStatement(""String_Node_Str"");
    getIdStatement.setString(1,uuid);
    ResultSet resultSet=getIdStatement.executeQuery();
    if (resultSet.next()) {
      id=resultSet.getLong(1);
    }
    resultSet.close();
    getIdStatement.close();
  }
 catch (  SQLException e) {
  }
  return id;
}","public Long getIdFromUUID(String uuid){
  Long id=null;
  try (Connection connection=dataSource.getConnection();PreparedStatement getIdStatement=connection.prepareStatement(""String_Node_Str"")){
    getIdStatement.setString(1,uuid);
    ResultSet resultSet=getIdStatement.executeQuery();
    if (resultSet.next()) {
      id=resultSet.getLong(1);
    }
  }
 catch (  SQLException e) {
  }
  return id;
}",0.927906976744186
165398,"public void deleteUUID(Long id){
  try (Connection connection=dataSource.getConnection()){
    PreparedStatement deleteStatement=connection.prepareStatement(""String_Node_Str"");
    deleteStatement.setLong(1,id);
    deleteStatement.execute();
    deleteStatement.close();
  }
 catch (  SQLException e) {
  }
}","public void deleteUUID(Long id){
  try (Connection connection=dataSource.getConnection();PreparedStatement deleteStatement=connection.prepareStatement(""String_Node_Str"")){
    deleteStatement.setLong(1,id);
    deleteStatement.execute();
  }
 catch (  SQLException e) {
  }
}",0.9315068493150684
165399,"public UUID createUUID(Long id){
  UUID uuid=UUID.randomUUID();
  try (Connection connection=dataSource.getConnection()){
    PreparedStatement insertStatement=connection.prepareStatement(""String_Node_Str"");
    insertStatement.setLong(1,id);
    insertStatement.setString(2,uuid.toString());
    insertStatement.execute();
  }
 catch (  SQLException e) {
    return null;
  }
  return uuid;
}","public UUID createUUID(Long id){
  UUID uuid=UUID.randomUUID();
  try (Connection connection=dataSource.getConnection();PreparedStatement insertStatement=connection.prepareStatement(""String_Node_Str"")){
    insertStatement.setLong(1,id);
    insertStatement.setString(2,uuid.toString());
    insertStatement.execute();
  }
 catch (  SQLException e) {
    return null;
  }
  return uuid;
}",0.9859154929577464
165400,"public Company findByCompanyId(@Param(""String_Node_Str"") Long companyId);","Company findByCompanyId(@Param(""String_Node_Str"") Long companyId);",0.9496402877697842
165401,"public List<Company> findByNameLikeIgnoreCaseOrderByNameAsc(@Param(""String_Node_Str"") String name);","List<Company> findByNameLikeIgnoreCaseOrderByNameAsc(@Param(""String_Node_Str"") String name);",0.9633507853403142
165402,"public boolean canEdit(String email,TravelExpense travelExpense){
  return email != null && travelExpense.getReport().getEmployee().getEmail().equals(email) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}","public boolean canEdit(String email,TravelExpense travelExpense){
  return email != null && email.equals(travelExpense.getReport().getEmployee().getEmail()) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}",0.95578231292517
165403,"public boolean canDelete(String email,TravelExpense travelExpense){
  return email != null && travelExpense.getReport().getEmployee().getEmail().equals(email) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}","public boolean canDelete(String email,TravelExpense travelExpense){
  return email != null && email.equals(travelExpense.getReport().getEmployee().getEmail()) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}",0.956081081081081
165404,"public boolean canCreate(String email,TravelExpense travelExpense){
  return email != null && travelExpense.getReport().getEmployee().getEmail().equals(email) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}","public boolean canCreate(String email,TravelExpense travelExpense){
  return email != null && email.equals(travelExpense.getReport().getEmployee().getEmail()) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}",0.956081081081081
165405,"@Override public Date convert(String source){
  if (source == null) {
    return null;
  }
  Date date;
  try {
    Long milliSeconds=Long.valueOf(source);
    return new Date(milliSeconds);
  }
 catch (  NumberFormatException e) {
  }
  if (source.length() == 10) {
    try {
      date=date10.parse(source);
    }
 catch (    ParseException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
    }
  }
 else   if (source.length() == 19) {
    try {
      date=date19.parse(source);
    }
 catch (    ParseException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
    }
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
  }
  return date;
}","@Override public Date convert(String source){
  if (source == null) {
    return null;
  }
  Date date;
  try {
    Long milliSeconds=Long.valueOf(source);
    return new Date(milliSeconds);
  }
 catch (  NumberFormatException e) {
  }
  if (source.length() == 10) {
    try {
      date=date10.parse(source);
    }
 catch (    ParseException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source),e);
    }
  }
 else   if (source.length() == 19) {
    try {
      date=date19.parse(source);
    }
 catch (    ParseException e) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source),e);
    }
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
  }
  return date;
}",0.9973787680209698
165406,"public Long getIdFromUUID(String uuid){
  Long id=null;
  try (Connection connection=dataSource.getConnection()){
    PreparedStatement getIdStatement=connection.prepareStatement(""String_Node_Str"");
    getIdStatement.setString(1,uuid);
    ResultSet resultSet=getIdStatement.executeQuery();
    if (resultSet.next()) {
      id=resultSet.getLong(1);
    }
    resultSet.close();
    getIdStatement.close();
  }
 catch (  SQLException e) {
  }
  return id;
}","public Long getIdFromUUID(String uuid){
  Long id=null;
  try (Connection connection=dataSource.getConnection();PreparedStatement getIdStatement=connection.prepareStatement(""String_Node_Str"")){
    getIdStatement.setString(1,uuid);
    ResultSet resultSet=getIdStatement.executeQuery();
    if (resultSet.next()) {
      id=resultSet.getLong(1);
    }
  }
 catch (  SQLException e) {
  }
  return id;
}",0.927906976744186
165407,"public void deleteUUID(Long id){
  try (Connection connection=dataSource.getConnection()){
    PreparedStatement deleteStatement=connection.prepareStatement(""String_Node_Str"");
    deleteStatement.setLong(1,id);
    deleteStatement.execute();
    deleteStatement.close();
  }
 catch (  SQLException e) {
  }
}","public void deleteUUID(Long id){
  try (Connection connection=dataSource.getConnection();PreparedStatement deleteStatement=connection.prepareStatement(""String_Node_Str"")){
    deleteStatement.setLong(1,id);
    deleteStatement.execute();
  }
 catch (  SQLException e) {
  }
}",0.9315068493150684
165408,"public UUID createUUID(Long id){
  UUID uuid=UUID.randomUUID();
  try (Connection connection=dataSource.getConnection()){
    PreparedStatement insertStatement=connection.prepareStatement(""String_Node_Str"");
    insertStatement.setLong(1,id);
    insertStatement.setString(2,uuid.toString());
    insertStatement.execute();
  }
 catch (  SQLException e) {
    return null;
  }
  return uuid;
}","public UUID createUUID(Long id){
  UUID uuid=UUID.randomUUID();
  try (Connection connection=dataSource.getConnection();PreparedStatement insertStatement=connection.prepareStatement(""String_Node_Str"")){
    insertStatement.setLong(1,id);
    insertStatement.setString(2,uuid.toString());
    insertStatement.execute();
  }
 catch (  SQLException e) {
    return null;
  }
  return uuid;
}",0.9859154929577464
165409,"public Company findByCompanyId(@Param(""String_Node_Str"") Long companyId);","Company findByCompanyId(@Param(""String_Node_Str"") Long companyId);",0.9496402877697842
165410,"public List<Company> findByNameLikeIgnoreCaseOrderByNameAsc(@Param(""String_Node_Str"") String name);","List<Company> findByNameLikeIgnoreCaseOrderByNameAsc(@Param(""String_Node_Str"") String name);",0.9633507853403142
165411,"public boolean canEdit(String email,TravelExpense travelExpense){
  return email != null && travelExpense.getReport().getEmployee().getEmail().equals(email) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}","public boolean canEdit(String email,TravelExpense travelExpense){
  return email != null && email.equals(travelExpense.getReport().getEmployee().getEmail()) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}",0.95578231292517
165412,"public boolean canDelete(String email,TravelExpense travelExpense){
  return email != null && travelExpense.getReport().getEmployee().getEmail().equals(email) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}","public boolean canDelete(String email,TravelExpense travelExpense){
  return email != null && email.equals(travelExpense.getReport().getEmployee().getEmail()) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}",0.956081081081081
165413,"public boolean canCreate(String email,TravelExpense travelExpense){
  return email != null && travelExpense.getReport().getEmployee().getEmail().equals(email) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}","public boolean canCreate(String email,TravelExpense travelExpense){
  return email != null && email.equals(travelExpense.getReport().getEmployee().getEmail()) && travelExpense.getReport().getStatus() != Report.Status.APPROVED && travelExpense.getReport().getStatus() != Report.Status.SUBMITTED;
}",0.956081081081081
165414,"@RequestMapping(""String_Node_Str"") public ModelAndView confirmAccess(Map<String,Object> model,Principal principal){
  model.put(""String_Node_Str"",proxyPath);
  return new ModelAndView(""String_Node_Str"",model);
}","@RequestMapping(""String_Node_Str"") public ModelAndView confirmAccess(Map<String,Object> model,Principal principal){
  if (proxyPath != null && proxyPath.startsWith(""String_Node_Str"")) {
    model.put(""String_Node_Str"",proxyPath);
  }
 else {
    model.put(""String_Node_Str"",""String_Node_Str"" + proxyPath);
  }
  return new ModelAndView(""String_Node_Str"",model);
}",0.6376306620209059
165415,"@Override public MimeMessage createMimeMessage(InputStream contentStream) throws MailException {
  log.debug(""String_Node_Str"");
  return null;
}","@Override public MimeMessage createMimeMessage(InputStream contentStream){
  log.debug(""String_Node_Str"");
  return null;
}",0.917910447761194
165416,"@Override public void send(SimpleMailMessage[] simpleMessages) throws MailException {
  log.debug(""String_Node_Str"");
}","@Override public void send(SimpleMailMessage[] simpleMessages){
  log.debug(""String_Node_Str"");
}",0.8981481481481481
165417,"@PreAuthorize(""String_Node_Str"") public Page<Invoice> findByInvoiceState(@Param(""String_Node_Str"") InvoiceState state,Pageable pageable);","@PreAuthorize(""String_Node_Str"") Page<Invoice> findByInvoiceState(@Param(""String_Node_Str"") InvoiceState state,Pageable pageable);",0.9737827715355806
165418,"@PreAuthorize(""String_Node_Str"") public Page<Invoice> findByIdentifierLikeIgnoreCaseAndInvoiceState(@Param(""String_Node_Str"") String identifier,@Param(""String_Node_Str"") InvoiceState state,Pageable pageable);","@PreAuthorize(""String_Node_Str"") Page<Invoice> findByIdentifierLikeIgnoreCaseAndInvoiceState(@Param(""String_Node_Str"") String identifier,@Param(""String_Node_Str"") InvoiceState state,Pageable pageable);",0.2151589242053789
165419,"@RestResource(exported=false) public List<Invoice> findByDueDateBeforeAndInvoiceState(Date date,InvoiceState invoiceState);","@RestResource(exported=false) List<Invoice> findByDueDateBeforeAndInvoiceState(Date date,InvoiceState invoiceState);",0.9707112970711296
165420,"/** 
 * Writes the information in the exception as a JSON object like this: { ""employee.salary"": { ""defaultMessage"": ""Cannot construct float from this value""}} to a writer.
 * @param ex           The exception thrown by Jackson
 * @param writer The output writer to write to.
 */
protected void writeExceptionAsJsonToOutput(InvalidFormatException ex,Writer writer){
  JsonGenerator jsonGenerator=jsonGeneratorFactory.createGenerator(writer);
  jsonGenerator.writeStartObject().writeStartArray(""String_Node_Str"").writeStartObject().write(""String_Node_Str"",getFieldPath(ex)).write(""String_Node_Str"",ex.getOriginalMessage()).writeEnd().writeEnd().writeEnd().close();
}","/** 
 * Writes the information in the exception as a JSON object like this: { ""employee.salary"": { ""defaultMessage"": ""Cannot construct float from this value""}} to a writer.
 * @param ex     The exception thrown by Jackson
 * @param writer The output writer to write to.
 */
protected void writeExceptionAsJsonToOutput(InvalidFormatException ex,Writer writer){
  JsonGenerator jsonGenerator=jsonGeneratorFactory.createGenerator(writer);
  jsonGenerator.writeStartObject().writeStartArray(""String_Node_Str"").writeStartObject().write(""String_Node_Str"",getFieldPath(ex)).write(""String_Node_Str"",ex.getOriginalMessage()).writeEnd().writeEnd().writeEnd().close();
}",0.9954682779456192
165421,"@Override public ModelAndView resolveException(HttpServletRequest request,HttpServletResponse response,Object handler,Exception ex){
  if (HttpMessageNotReadableException.class.isAssignableFrom(ex.getClass())) {
    if (ex.getCause() != null && InvalidFormatException.class.isAssignableFrom(ex.getCause().getClass())) {
      Writer outputWriter;
      try {
        outputWriter=response.getWriter();
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"",e);
      }
      response.setStatus(HttpStatus.BAD_REQUEST.value());
      response.setHeader(""String_Node_Str"",MediaType.APPLICATION_JSON_VALUE);
      writeExceptionAsJsonToOutput((InvalidFormatException)ex.getCause(),outputWriter);
      try {
        outputWriter.flush();
        outputWriter.close();
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"",e);
      }
      return new ModelAndView();
    }
  }
  return null;
}","@Override public ModelAndView resolveException(HttpServletRequest request,HttpServletResponse response,Object handler,Exception ex){
  if (HttpMessageNotReadableException.class.isAssignableFrom(ex.getClass()) && ex.getCause() != null && InvalidFormatException.class.isAssignableFrom(ex.getCause().getClass())) {
    Writer outputWriter;
    try {
      outputWriter=response.getWriter();
    }
 catch (    IOException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
    response.setStatus(HttpStatus.BAD_REQUEST.value());
    response.setHeader(""String_Node_Str"",MediaType.APPLICATION_JSON_VALUE);
    writeExceptionAsJsonToOutput((InvalidFormatException)ex.getCause(),outputWriter);
    try {
      outputWriter.flush();
      outputWriter.close();
    }
 catch (    IOException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
    return new ModelAndView();
  }
  return null;
}",0.9557894736842104
165422,"@RestResource(exported=false) @PreAuthorize(""String_Node_Str"") List<Employee> findByLeaveDateAndCredential_Enabled(Date leaveDate,Boolean credential_Enabled);","@RestResource(exported=false) @PreAuthorize(""String_Node_Str"") List<Employee> findByLeaveDateAndCredential_Enabled(Date leaveDate,Boolean credentialEnabled);",0.9968253968253968
165423,"/** 
 * If no user is found but the e-mail ends with techdev.de, a new but deactivated user is created in the database.
 * @param token The open id token obtained from the login
 * @return User details if found.
 * @throws UsernameNotFoundException
 */
@Override @Transactional(noRollbackFor=UsernameNotFoundException.class) public UserDetails loadUserDetails(OpenIDAuthenticationToken token) throws UsernameNotFoundException {
  Map<String,String> attributes=convertOpenIdAttributesToMap(token);
  String email=attributes.get(""String_Node_Str"");
  log.debug(""String_Node_Str"",email);
  Credential credential=credentialRepository.findByEmail(email);
  if (credential == null) {
    String errorMessage=handleNullCredential(attributes);
    throw new UsernameNotFoundException(errorMessage);
  }
  if (!credential.getEnabled()) {
    log.debug(""String_Node_Str"",email);
    throw new UsernameNotFoundException(""String_Node_Str"" + email + ""String_Node_Str"");
  }
  return new TrackrUser(credential.getEmail(),credential.getEnabled(),credential.getAuthorities(),credential.getId(),Locale.forLanguageTag(credential.getLocale()));
}","/** 
 * If no user is found but the e-mail ends with techdev.de, a new but deactivated user is created in the database.
 * @param token The open id token obtained from the login
 * @return User details if found.
 * @throws UsernameNotFoundException
 */
@Override @Transactional(noRollbackFor=UsernameNotFoundException.class) public UserDetails loadUserDetails(OpenIDAuthenticationToken token){
  Map<String,String> attributes=convertOpenIdAttributesToMap(token);
  String email=attributes.get(""String_Node_Str"");
  log.debug(""String_Node_Str"",email);
  Credential credential=credentialRepository.findByEmail(email);
  if (credential == null) {
    String errorMessage=handleNullCredential(attributes);
    throw new UsernameNotFoundException(errorMessage);
  }
  if (!credential.getEnabled()) {
    log.debug(""String_Node_Str"",email);
    throw new UsernameNotFoundException(""String_Node_Str"" + email + ""String_Node_Str"");
  }
  return new TrackrUser(credential.getEmail(),credential.getEnabled(),credential.getAuthorities(),credential.getId(),Locale.forLanguageTag(credential.getLocale()));
}",0.9846846846846848
165424,"@Override public void sendMail(SimpleMailMessage mailMessage){
}","@Override public void sendMail(SimpleMailMessage mailMessage){
  mailSender.send(mailMessage);
}",0.8
165425,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  CustomWorkTime that=(CustomWorkTime)o;
  if (date != null ? !date.equals(that.date) : that.date != null)   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  CustomWorkTime that=(CustomWorkTime)o;
  return !(date != null ? !date.equals(that.date) : that.date != null);
}",0.8440366972477065
165426,"@Bean public Properties mailProperties(){
  PropertiesFactoryBean propertiesFactoryBean=new PropertiesFactoryBean();
  propertiesFactoryBean.setLocation(mailPropertiesResource);
  try {
    propertiesFactoryBean.afterPropertiesSet();
    return propertiesFactoryBean.getObject();
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Bean public Properties mailProperties(){
  PropertiesFactoryBean propertiesFactoryBean=new PropertiesFactoryBean();
  propertiesFactoryBean.setLocation(mailPropertiesResource);
  try {
    propertiesFactoryBean.afterPropertiesSet();
    return propertiesFactoryBean.getObject();
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}",0.9973190348525468
165427,"@Override public ModelAndView resolveException(HttpServletRequest request,HttpServletResponse response,Object handler,Exception ex){
  if (HttpMessageNotReadableException.class.isAssignableFrom(ex.getClass())) {
    if (ex.getCause() != null && InvalidFormatException.class.isAssignableFrom(ex.getCause().getClass())) {
      Writer outputWriter;
      try {
        outputWriter=response.getWriter();
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      response.setStatus(HttpStatus.BAD_REQUEST.value());
      response.setHeader(""String_Node_Str"",MediaType.APPLICATION_JSON_VALUE);
      writeExceptionAsJsonToOutput((InvalidFormatException)ex.getCause(),outputWriter);
      try {
        outputWriter.flush();
        outputWriter.close();
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      return new ModelAndView();
    }
  }
  return null;
}","@Override public ModelAndView resolveException(HttpServletRequest request,HttpServletResponse response,Object handler,Exception ex){
  if (HttpMessageNotReadableException.class.isAssignableFrom(ex.getClass())) {
    if (ex.getCause() != null && InvalidFormatException.class.isAssignableFrom(ex.getCause().getClass())) {
      Writer outputWriter;
      try {
        outputWriter=response.getWriter();
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"",e);
      }
      response.setStatus(HttpStatus.BAD_REQUEST.value());
      response.setHeader(""String_Node_Str"",MediaType.APPLICATION_JSON_VALUE);
      writeExceptionAsJsonToOutput((InvalidFormatException)ex.getCause(),outputWriter);
      try {
        outputWriter.flush();
        outputWriter.close();
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"",e);
      }
      return new ModelAndView();
    }
  }
  return null;
}",0.9979445015416238
165428,"@RequestMapping(method=RequestMethod.GET) public void getTranslations(Locale locale,HttpServletResponse response){
  ClassPathResource translationFile=new ClassPathResource(""String_Node_Str"" + locale.toLanguageTag() + ""String_Node_Str"");
  response.setHeader(""String_Node_Str"",MediaType.APPLICATION_JSON_VALUE);
  response.setCharacterEncoding(""String_Node_Str"");
  try {
    IOUtils.copy(translationFile.getInputStream(),response.getWriter(),""String_Node_Str"");
    response.setStatus(200);
    response.getWriter().close();
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@RequestMapping(method=RequestMethod.GET) public void getTranslations(Locale locale,HttpServletResponse response){
  ClassPathResource translationFile=new ClassPathResource(""String_Node_Str"" + locale.toLanguageTag() + ""String_Node_Str"");
  response.setHeader(""String_Node_Str"",MediaType.APPLICATION_JSON_VALUE);
  response.setCharacterEncoding(""String_Node_Str"");
  try {
    IOUtils.copy(translationFile.getInputStream(),response.getWriter(),""String_Node_Str"");
    response.setStatus(200);
    response.getWriter().close();
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}",0.9983844911147012
165429,"/** 
 * @return An executor that has admin rights.
 */
@Bean public Executor taskExecutor(){
  ScheduledExecutorService delegateExecutor=Executors.newSingleThreadScheduledExecutor();
  SecurityContext schedulerContext=createSchedulerSecurityContext();
  return new DelegatingSecurityContextScheduledExecutorService(delegateExecutor,schedulerContext);
}","/** 
 * @return An executor that has admin rights.
 */
@Bean(destroyMethod=""String_Node_Str"") public Executor taskExecutor(){
  ScheduledExecutorService delegateExecutor=Executors.newSingleThreadScheduledExecutor();
  SecurityContext schedulerContext=createSchedulerSecurityContext();
  return new DelegatingSecurityContextScheduledExecutorService(delegateExecutor,schedulerContext);
}",0.9552238805970148
165430,"public Company findByCompanyId(@Param(""String_Node_Str"") String companyId);","public Company findByCompanyId(@Param(""String_Node_Str"") Long companyId);",0.9594594594594594
165431,"public String next(){
  while (!transitionsPath.isEmpty()) {
    TransitionLevel currentLevel=transitionsPath.peek();
    State state=currentLevel.getState();
    if (!state.isAccept()) {
      addNextTransitionLevel(currentLevel);
      continue;
    }
 else {
      currentValue=""String_Node_Str"";
      for (int i=0; i < transitionsPath.size() - 1; ++i) {
        TransitionLevel transitionLevel=transitionsPath.get(i);
        currentValue+=transitionLevel.getCurrentChar();
      }
      jumpToNextPath();
      break;
    }
  }
  return currentValue;
}","public String next(){
  while (!transitionsPath.isEmpty()) {
    TransitionLevel currentLevel=transitionsPath.peek();
    State state=currentLevel.getState();
    if (!state.isAccept()) {
      addNextTransitionLevel(currentLevel);
      ignoreLastChar=true;
      continue;
    }
 else {
      currentValue=""String_Node_Str"";
      for (int i=0; i < transitionsPath.size() - 1; ++i) {
        TransitionLevel transitionLevel=transitionsPath.get(i);
        currentValue+=transitionLevel.getCurrentChar();
      }
      TransitionLevel transitionLevel=transitionsPath.lastElement();
      char nextChar=transitionLevel.getCurrentChar();
      if (nextChar != 0) {
        if (ignoreLastChar) {
          ignoreLastChar=false;
        }
 else {
          currentValue+=nextChar;
        }
      }
      jumpToNextPath();
      break;
    }
  }
  return currentValue;
}",0.783157894736842
165432,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Repository.selectedCommit=((CommitsAdapter)listView.getAdapter()).getItem(position);
  startActivity(new Intent(getActivity(),DiffActivity.class));
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Repository.selectedCommit=((CommitsAdapter)((HeaderViewListAdapter)listView.getAdapter()).getWrappedAdapter()).getItem(position - 1);
  startActivity(new Intent(getActivity(),DiffActivity.class));
}",0.8620037807183365
165433,"@Override public boolean onTouchEvent(MotionEvent event){
  Rect bounds;
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    actionX=(int)event.getX();
    actionY=(int)event.getY();
    if (drawableBottom != null && drawableBottom.getBounds().contains(actionX,actionY)) {
      playSoundEffect(android.view.SoundEffectConstants.CLICK);
      clickListener.onClick(DrawableClickListener.DrawablePosition.BOTTOM);
      return super.onTouchEvent(event);
    }
    if (drawableTop != null && drawableTop.getBounds().contains(actionX,actionY)) {
      playSoundEffect(android.view.SoundEffectConstants.CLICK);
      clickListener.onClick(DrawableClickListener.DrawablePosition.TOP);
      return super.onTouchEvent(event);
    }
    if (drawableLeft != null) {
      bounds=null;
      bounds=drawableLeft.getBounds();
      int x, y;
      int extraTapArea=(int)(13 * getResources().getDisplayMetrics().density + 0.5);
      x=actionX;
      y=actionY;
      if (!bounds.contains(actionX,actionY)) {
        x=(int)(actionX - extraTapArea);
        y=(int)(actionY - extraTapArea);
        if (x <= 0)         x=actionX;
        if (y <= 0)         y=actionY;
        if (x < y)         y=x;
      }
      if (bounds.contains(x,y) && clickListener != null) {
        playSoundEffect(android.view.SoundEffectConstants.CLICK);
        clickListener.onClick(DrawableClickListener.DrawablePosition.LEFT);
        event.setAction(MotionEvent.ACTION_CANCEL);
        return false;
      }
    }
    if (drawableRight != null) {
      bounds=null;
      bounds=drawableRight.getBounds();
      int x, y;
      int extraTapArea=13;
      x=(int)(actionX + extraTapArea);
      y=(int)(actionY - extraTapArea);
      x=getWidth() - x;
      if (x <= 0)       x+=extraTapArea;
      if (y <= 0)       y=actionY;
      if (bounds.contains(x,y) && clickListener != null) {
        playSoundEffect(android.view.SoundEffectConstants.CLICK);
        clickListener.onClick(DrawableClickListener.DrawablePosition.RIGHT);
        event.setAction(MotionEvent.ACTION_CANCEL);
        return false;
      }
      return super.onTouchEvent(event);
    }
  }
  return super.onTouchEvent(event);
}","@Override public boolean onTouchEvent(MotionEvent event){
  Rect bounds;
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    actionX=(int)event.getX();
    actionY=(int)event.getY();
    if (getText().length() > 0) {
      bounds=this.getCompoundDrawables()[2].getBounds();
      int x, y;
      int extraTapArea=13;
      x=(int)(actionX + extraTapArea);
      y=(int)(actionY - extraTapArea);
      x=getWidth() - x;
      if (x <= 0)       x+=extraTapArea;
      if (y <= 0)       y=actionY;
      if (bounds.contains(x,y) && clickListener != null) {
        playSoundEffect(android.view.SoundEffectConstants.CLICK);
        clickListener.onClick(DrawableClickListener.DrawablePosition.RIGHT);
        event.setAction(MotionEvent.ACTION_CANCEL);
        return false;
      }
      return super.onTouchEvent(event);
    }
  }
  return super.onTouchEvent(event);
}",0.3404394883568383
165434,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_commits,container,false);
  ButterKnife.inject(this,view);
  listView.setOnItemClickListener(this);
  swipeLayout.setOnRefreshListener(this);
  swipeLayout.setColorSchemeResources(android.R.color.holo_blue_bright,android.R.color.holo_green_light,android.R.color.holo_orange_light,android.R.color.holo_red_light);
  if (Repository.selectedProject != null)   loadData();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_commits,container,false);
  ButterKnife.inject(this,view);
  listView.setOnItemClickListener(this);
  repoUrl=new EditText(getActivity());
  repoUrl.setClickable(true);
  repoUrl.setCursorVisible(false);
  repoUrl.setCompoundDrawablesWithIntrinsicBounds(0,0,R.drawable.ic_action_copy,0);
  repoUrl.setFocusable(false);
  repoUrl.setFocusableInTouchMode(false);
  repoUrl.setInputType(InputType.TYPE_TEXT_VARIATION_URI);
  repoUrl.setMaxLines(1);
  repoUrl.setOnClickListener(this);
  listView.addHeaderView(repoUrl);
  swipeLayout.setOnRefreshListener(this);
  swipeLayout.setColorSchemeResources(android.R.color.holo_blue_bright,android.R.color.holo_green_light,android.R.color.holo_orange_light,android.R.color.holo_red_light);
  if (Repository.selectedProject != null)   loadData();
  return view;
}",0.7210702341137124
165435,"private LinearLayout generateRow(Diff.Line line){
  if (line == null)   return null;
  LinearLayout row=new LinearLayout(getContext());
  row.setOrientation(HORIZONTAL);
  row.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
  TextView oldLine=new TextView(getContext());
  oldLine.setText(line.oldLine);
  oldLine.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
  oldLine.setEms(2);
  oldLine.setGravity(Gravity.CENTER_HORIZONTAL);
  row.addView(oldLine);
  TextView newLine=new TextView(getContext());
  newLine.setText(line.newLine);
  newLine.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
  newLine.setEms(2);
  newLine.setGravity(Gravity.CENTER_HORIZONTAL);
  row.addView(newLine);
  TextView content=new TextView(getContext());
  content.setText(line.lineContent);
  content.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
  content.setPadding(PADDING_CONTENT_H,PADDING_CONTENT_V,PADDING_CONTENT_H,PADDING_CONTENT_V);
  row.addView(content);
switch (line.lineType) {
case NORMAL:
    oldLine.setBackgroundColor(LINE_BG);
  newLine.setBackgroundColor(LINE_BG);
content.setBackgroundColor(CONTENT_BG);
break;
case ADDED:
oldLine.setBackgroundColor(LINE_BG_ADDED);
newLine.setBackgroundColor(LINE_BG_ADDED);
content.setBackgroundColor(CONTENT_BG_ADDED);
break;
case REMOVED:
oldLine.setBackgroundColor(LINE_BG_REMOVED);
newLine.setBackgroundColor(LINE_BG_REMOVED);
content.setBackgroundColor(CONTENT_BG_REMOVED);
break;
case COMMENT:
oldLine.setBackgroundColor(LINE_BG);
newLine.setBackgroundColor(LINE_BG);
content.setBackgroundColor(CONTENT_BG_COMMENT);
content.setTextColor(CONTENT_FONT_COMMENT);
content.setGravity(Gravity.CENTER_HORIZONTAL);
break;
}
return row;
}","private LinearLayout generateRow(Diff.Line line){
  if (line == null)   return null;
  LinearLayout row=new LinearLayout(getContext());
  row.setOrientation(HORIZONTAL);
  row.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
  TextView oldLine=new TextView(getContext());
  oldLine.setText(line.oldLine);
  oldLine.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
  oldLine.setEms(2);
  oldLine.setGravity(Gravity.CENTER_HORIZONTAL);
  row.addView(oldLine);
  TextView newLine=new TextView(getContext());
  newLine.setText(line.newLine);
  newLine.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT));
  newLine.setEms(2);
  newLine.setGravity(Gravity.CENTER_HORIZONTAL);
  row.addView(newLine);
  TextView content=new TextView(getContext());
  content.setText(line.lineContent);
  content.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
  content.setPadding(PADDING_CONTENT_H,PADDING_CONTENT_V,PADDING_CONTENT_H,PADDING_CONTENT_V);
  row.addView(content);
  if (line.lineType == null)   return row;
switch (line.lineType) {
case NORMAL:
    oldLine.setBackgroundColor(LINE_BG);
  newLine.setBackgroundColor(LINE_BG);
content.setBackgroundColor(CONTENT_BG);
break;
case ADDED:
oldLine.setBackgroundColor(LINE_BG_ADDED);
newLine.setBackgroundColor(LINE_BG_ADDED);
content.setBackgroundColor(CONTENT_BG_ADDED);
break;
case REMOVED:
oldLine.setBackgroundColor(LINE_BG_REMOVED);
newLine.setBackgroundColor(LINE_BG_REMOVED);
content.setBackgroundColor(CONTENT_BG_REMOVED);
break;
case COMMENT:
oldLine.setBackgroundColor(LINE_BG);
newLine.setBackgroundColor(LINE_BG);
content.setBackgroundColor(CONTENT_BG_COMMENT);
content.setTextColor(CONTENT_FONT_COMMENT);
content.setGravity(Gravity.CENTER_HORIZONTAL);
break;
}
return row;
}",0.9884065785926126
165436,"@Override public Thumb[] scrapeFanart(){
  if (!hasRunScrapeExtraFanart && scrapedExtraFanart == null) {
    scrapeExtraFanart();
  }
  Element posterElement=document.select(""String_Node_Str"").first();
  if (posterElement != null) {
    Thumb[] posterThumbs=new Thumb[1];
    try {
      posterThumbs[0]=new Thumb(fixIPAddressOfData18(posterElement.attr(""String_Node_Str"")));
      return ArrayUtils.addAll(scrapedExtraFanart,posterThumbs);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
      if (scrapedExtraFanart != null)       return scrapedExtraFanart;
 else       return new Thumb[0];
    }
  }
  if (scrapedExtraFanart != null)   return scrapedExtraFanart;
 else   return new Thumb[0];
}","@Override public Thumb[] scrapeFanart(){
  if (!hasRunScrapeExtraFanart && scrapedExtraFanart == null) {
    scrapeExtraFanart();
  }
  Element posterElement=document.select(""String_Node_Str"").first();
  if (posterElement != null) {
    Thumb[] posterThumbs=new Thumb[1];
    try {
      posterThumbs[0]=new Thumb(fixIPAddressOfData18(posterElement.attr(""String_Node_Str"")));
      posterThumbs[0].setViewerURL(new URL(""String_Node_Str""));
      return ArrayUtils.addAll(scrapedExtraFanart,posterThumbs);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
      if (scrapedExtraFanart != null)       return scrapedExtraFanart;
 else       return new Thumb[0];
    }
  }
  if (scrapedExtraFanart != null)   return scrapedExtraFanart;
 else   return new Thumb[0];
}",0.8444148936170213
165437,"@Override public SearchResult[] getSearchResults(String searchString) throws IOException {
  if (useSiteSearch) {
    ArrayList<SearchResult> linksList=new ArrayList<>();
    Document doc=Jsoup.connect(searchString).userAgent(""String_Node_Str"").ignoreHttpErrors(true).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).get();
    Elements movieSearchResultElements=doc.select(""String_Node_Str"");
    if (movieSearchResultElements == null || movieSearchResultElements.size() == 0) {
      this.useSiteSearch=false;
      return getLinksFromGoogle(fileName.replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    }
 else {
      for (      Element currentMovie : movieSearchResultElements) {
        String currentMovieURL=currentMovie.select(""String_Node_Str"").first().attr(""String_Node_Str"");
        String currentMovieTitle=currentMovie.select(""String_Node_Str"").last().text();
        String releaseDateText=currentMovie.ownText();
        if (releaseDateText != null && releaseDateText.length() > 0)         currentMovieTitle=currentMovieTitle + ""String_Node_Str"" + releaseDateText+ ""String_Node_Str"";
        Thumb currentMovieThumb=new Thumb(currentMovie.select(""String_Node_Str"").attr(""String_Node_Str""));
        linksList.add(new SearchResult(currentMovieURL,currentMovieTitle,currentMovieThumb));
        if (releaseDateMap == null)         releaseDateMap=new HashMap<>();
        releaseDateMap.put(currentMovieURL,releaseDateText);
      }
      return linksList.toArray(new SearchResult[linksList.size()]);
    }
  }
 else {
    this.useSiteSearch=false;
    return getLinksFromGoogle(searchString,""String_Node_Str"");
  }
}","@Override public SearchResult[] getSearchResults(String searchString) throws IOException {
  if (useSiteSearch) {
    ArrayList<SearchResult> linksList=new ArrayList<>();
    Document doc=Jsoup.connect(searchString).userAgent(""String_Node_Str"").ignoreHttpErrors(true).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).get();
    Elements movieSearchResultElements=doc.select(""String_Node_Str"");
    if (movieSearchResultElements == null || movieSearchResultElements.size() == 0) {
      this.useSiteSearch=false;
      return getLinksFromGoogle(fileName.replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
    }
 else {
      for (      Element currentMovie : movieSearchResultElements) {
        String currentMovieURL=currentMovie.select(""String_Node_Str"").first().attr(""String_Node_Str"");
        String currentMovieTitle=currentMovie.select(""String_Node_Str"").last().text();
        String releaseDateText=currentMovie.ownText();
        if (releaseDateText != null && releaseDateText.length() > 0)         currentMovieTitle=currentMovieTitle + ""String_Node_Str"" + releaseDateText+ ""String_Node_Str"";
        Thumb currentMovieThumb=new Thumb(currentMovie.select(""String_Node_Str"").attr(""String_Node_Str""));
        currentMovieThumb.setViewerURL(new URL(currentMovieURL));
        linksList.add(new SearchResult(currentMovieURL,currentMovieTitle,currentMovieThumb));
        if (releaseDateMap == null)         releaseDateMap=new HashMap<>();
        releaseDateMap.put(currentMovieURL,releaseDateText);
      }
      return linksList.toArray(new SearchResult[linksList.size()]);
    }
  }
 else {
    this.useSiteSearch=false;
    return getLinksFromGoogle(searchString,""String_Node_Str"");
  }
}",0.9804038004750594
165438,"@Override public ArrayList<Actor> scrapeActors(){
  Elements actorElements=document.select(""String_Node_Str"");
  ArrayList<Actor> actorList=new ArrayList<>();
  if (actorElements != null) {
    for (    Element currentActorElement : actorElements) {
      String actorName=currentActorElement.attr(""String_Node_Str"");
      String actorThumbnail=currentActorElement.attr(""String_Node_Str"");
      if (actorThumbnail != null && !actorThumbnail.equals(""String_Node_Str"")) {
        try {
          actorThumbnail=actorThumbnail.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
          actorList.add(new Actor(actorName,null,new Thumb(actorThumbnail)));
        }
 catch (        MalformedURLException e) {
          actorList.add(new Actor(actorName,null,null));
          e.printStackTrace();
        }
      }
 else {
        actorList.add(new Actor(actorName,null,null));
      }
    }
  }
  Elements otherActors=document.select(""String_Node_Str"");
  if (otherActors != null) {
    for (    Element element : otherActors) {
      String actorName=element.attr(""String_Node_Str"");
      actorName=element.childNode(0).toString();
      actorList.add(new Actor(actorName,null,null));
    }
  }
  return actorList;
}","@Override public ArrayList<Actor> scrapeActors(){
  Elements actorElements=document.select(""String_Node_Str"");
  ArrayList<Actor> actorList=new ArrayList<>();
  if (actorElements != null) {
    for (    Element currentActorElement : actorElements) {
      String actorName=currentActorElement.attr(""String_Node_Str"");
      String actorThumbnailURL=currentActorElement.attr(""String_Node_Str"");
      if (actorThumbnailURL != null && !actorThumbnailURL.equals(""String_Node_Str"")) {
        try {
          actorThumbnailURL=actorThumbnailURL.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
          Thumb actorThumbnail=new Thumb(actorThumbnailURL);
          actorThumbnail.setViewerURL(new URL(""String_Node_Str""));
          actorList.add(new Actor(actorName,null,actorThumbnail));
        }
 catch (        MalformedURLException e) {
          actorList.add(new Actor(actorName,null,null));
          e.printStackTrace();
        }
      }
 else {
        actorList.add(new Actor(actorName,null,null));
      }
    }
  }
  Elements otherActors=document.select(""String_Node_Str"");
  if (otherActors != null) {
    for (    Element element : otherActors) {
      String actorName=element.attr(""String_Node_Str"");
      actorName=element.childNode(0).toString();
      actorList.add(new Actor(actorName,null,null));
    }
  }
  return actorList;
}",0.7467282525019245
165439,"@Override public Runtime scrapeRuntime(){
  Element lengthElement=document.select(""String_Node_Str"").first();
  String lengthText=lengthElement.text();
  if (lengthText.length() > 0) {
    return new moviescraper.doctord.model.dataitem.Runtime(lengthText);
  }
 else   return new moviescraper.doctord.model.dataitem.Runtime(""String_Node_Str"");
}","@Override public Runtime scrapeRuntime(){
  Element lengthElement=document.select(""String_Node_Str"").first();
  String lengthText=lengthElement.text();
  if (lengthText.length() > 0) {
    return new Runtime(lengthText);
  }
 else   return new Runtime(""String_Node_Str"");
}",0.883495145631068
165440,"public boolean isStringValueEmpty(){
  String toStringValue=this.toString();
  toStringValue.replace(""String_Node_Str"",""String_Node_Str"");
  if (toStringValue.contains(""String_Node_Str""))   return false;
 else   return true;
}","public boolean isStringValueEmpty(){
  String toStringValue=this.toString();
  if (toStringValue.contains(""String_Node_Str""))   return false;
 else   return true;
}",0.841025641025641
165441,"SwingWorker<Void,Void> getWorkerByScraperName(SiteParsingProfile scraper){
  SwingWorker<Void,Void> worker=runningWorkers.get(scraper.getDataItemSourceName());
  return worker;
}","private SwingWorker<Void,Void> getWorkerByScraperName(SiteParsingProfile scraper){
  SwingWorker<Void,Void> worker=runningWorkers.get(scraper.getDataItemSourceName());
  return worker;
}",0.978021978021978
165442,"private SwingWorker<Void,Void> getWorkerByScraperName(SiteParsingProfile scraper){
  SwingWorker<Void,Void> worker=runningWorkers.get(scraper.getDataItemSourceName());
  return worker;
}","SwingWorker<Void,Void> getWorkerByScraperName(SiteParsingProfile scraper){
  SwingWorker<Void,Void> worker=runningWorkers.get(scraper.getDataItemSourceName());
  return worker;
}",0.978021978021978
165443,"private static void runFileNameCleanup(String[] optionValues){
  for (  String fileName : optionValues) {
    File currentFile=new File(fileName);
    if (!currentFile.exists()) {
      System.err.println(currentFile + ""String_Node_Str"");
    }
 else {
      try {
        WebReleaseRenamer renamer=new WebReleaseRenamer();
        File newFile=renamer.newFileName(currentFile);
        boolean renameStatus=currentFile.renameTo(newFile);
        if (renameStatus != true)         System.err.println(""String_Node_Str"");
 else         System.out.println(""String_Node_Str"" + currentFile + ""String_Node_Str""+ newFile);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}","private static void runFileNameCleanup(String[] optionValues){
  for (  String fileName : optionValues) {
    File currentFile=new File(fileName);
    if (!currentFile.exists()) {
      System.err.println(currentFile + ""String_Node_Str"");
    }
 else {
      try {
        WebReleaseRenamer renamer=new WebReleaseRenamer();
        File newFile=renamer.newFileName(currentFile);
        boolean renameStatus=currentFile.renameTo(newFile);
        if (renameStatus)         System.out.println(""String_Node_Str"" + currentFile + ""String_Node_Str""+ newFile);
 else         System.err.println(""String_Node_Str"");
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9241773962804004
165444,"@Override public void actionPerformed(ActionEvent arg0){
  List<File> filesSelected=guiMain.getCurrentlySelectedMovieFileList();
  System.out.println(""String_Node_Str"" + filesSelected);
  try {
    WebReleaseRenamer webReleaseRenamer=new WebReleaseRenamer();
    for (    File currentFile : filesSelected) {
      System.out.println(""String_Node_Str"" + currentFile);
      System.out.println(""String_Node_Str"" + webReleaseRenamer.getCleanName(currentFile.getName()));
      System.out.println(""String_Node_Str"" + webReleaseRenamer.newFileName(currentFile));
      File newFileName=webReleaseRenamer.newFileName(currentFile);
      if (currentFile.getName().equals(newFileName.getName())) {
        System.out.println(""String_Node_Str"");
      }
 else       if (guiMain != null && MoviescraperPreferences.getInstance().getConfirmCleanUpFileNameNameBeforeRenaming()) {
        int optionPicked=JOptionPane.showConfirmDialog(guiMain.getFrmMoviescraper(),""String_Node_Str"" + currentFile + ""String_Node_Str""+ newFileName+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
        if (optionPicked == JOptionPane.YES_OPTION) {
          boolean renameStatus=currentFile.renameTo(newFileName);
          if (renameStatus != true)           System.err.println(""String_Node_Str"");
        }
      }
 else {
        boolean renameStatus=currentFile.renameTo(newFileName);
        if (renameStatus != true)         System.err.println(""String_Node_Str"");
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    guiMain.updateFileListModel(guiMain.getCurrentlySelectedDirectoryList(),false);
  }
}","@Override public void actionPerformed(ActionEvent arg0){
  List<File> filesSelected=guiMain.getCurrentlySelectedMovieFileList();
  System.out.println(""String_Node_Str"" + filesSelected);
  try {
    WebReleaseRenamer webReleaseRenamer=new WebReleaseRenamer();
    for (    File currentFile : filesSelected) {
      System.out.println(""String_Node_Str"" + currentFile);
      System.out.println(""String_Node_Str"" + webReleaseRenamer.getCleanName(currentFile.getName()));
      System.out.println(""String_Node_Str"" + webReleaseRenamer.newFileName(currentFile));
      File newFileName=webReleaseRenamer.newFileName(currentFile);
      if (currentFile.getName().equals(newFileName.getName())) {
        System.out.println(""String_Node_Str"");
      }
 else       if (guiMain != null && MoviescraperPreferences.getInstance().getConfirmCleanUpFileNameNameBeforeRenaming()) {
        int optionPicked=JOptionPane.showConfirmDialog(guiMain.getFrmMoviescraper(),""String_Node_Str"" + currentFile + ""String_Node_Str""+ newFileName+ ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
        if (optionPicked == JOptionPane.YES_OPTION) {
          boolean renameStatus=currentFile.renameTo(newFileName);
          if (renameStatus != true)           System.err.println(""String_Node_Str"");
        }
      }
 else {
        boolean renameStatus=currentFile.renameTo(newFileName);
        if (!renameStatus)         System.err.println(""String_Node_Str"");
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    guiMain.updateFileListModel(guiMain.getCurrentlySelectedDirectoryList(),false);
  }
}",0.9904761904761904
165445,"@Override public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting() == false) {
    if (this.guiMain.getFileList().getSelectedIndex() == -1) {
      this.guiMain.removeOldSelectedFileReferences();
    }
 else {
      try {
        guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        handleNewSelection();
      }
  finally {
        guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
      }
    }
  }
}","@Override public void valueChanged(ListSelectionEvent e){
  if (!e.getValueIsAdjusting()) {
    if (this.guiMain.getFileList().getSelectedIndex() == -1) {
      this.guiMain.removeOldSelectedFileReferences();
    }
 else {
      try {
        guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        handleNewSelection();
      }
  finally {
        guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
      }
    }
  }
}",0.9895615866388308
165446,"public static void renameToCleanName(File fileToRename,ReleaseRenamer releaseRenamerToUse){
  File newFileName=releaseRenamerToUse.newFileName(fileToRename);
  boolean renameStatus=fileToRename.renameTo(newFileName);
  if (renameStatus != true)   System.err.println(""String_Node_Str"" + fileToRename.toString());
}","public static void renameToCleanName(File fileToRename,ReleaseRenamer releaseRenamerToUse){
  File newFileName=releaseRenamerToUse.newFileName(fileToRename);
  boolean renameStatus=fileToRename.renameTo(newFileName);
  if (!renameStatus)   System.err.println(""String_Node_Str"" + fileToRename.toString());
}",0.9854604200323102
165447,"/** 
 * If your file is called ""Movie Name Here (2001)"" this method returns ""2001""
 * @param file the file to process
 * @return A length 4 string representing the year, if it exists. Otherwise an empty String
 */
public static String getYearFromFileWithYear(File file){
  String movieName=FilenameUtils.removeExtension(FilenameUtils.getName(file.getName()));
  String patternString=""String_Node_Str"";
  Pattern pattern=Pattern.compile(patternString);
  Matcher matcher=pattern.matcher(movieName);
  while (matcher.find()) {
    return matcher.group().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
  }
  return ""String_Node_Str"";
}","/** 
 * If your file is called ""Movie Name Here (2001)"" this method returns ""2001""
 * @param file the file to process
 * @return A length 4 string representing the year, if it exists. Otherwise an empty String
 */
public static String getYearFromFileWithYear(File file){
  String movieName=FilenameUtils.removeExtension(FilenameUtils.getName(file.getName()));
  String patternString=""String_Node_Str"";
  Pattern pattern=Pattern.compile(patternString);
  Matcher matcher=pattern.matcher(movieName);
  if (matcher.find()) {
    return matcher.group().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
  }
  return ""String_Node_Str"";
}",0.9948642699926632
165448,"public void setShowToolbar(boolean preferenceValue){
  setBooleanValue(Key.showToolbar,new Boolean(preferenceValue));
}","public void setShowToolbar(boolean preferenceValue){
  setBooleanValue(Key.showToolbar,Boolean.valueOf(preferenceValue));
}",0.950413223140496
165449,"@Override public ArrayList<Actor> scrapeActors(){
  Elements actressIDElements=document.select(""String_Node_Str"");
  ArrayList<Actor> actorList=new ArrayList<>(actressIDElements.size());
  for (  Element actressIDLink : actressIDElements) {
    String actressIDHref=actressIDLink.attr(""String_Node_Str"");
    String actressNameKanji=actressIDLink.text();
    String actressID=actressIDHref.substring(actressIDHref.indexOf(""String_Node_Str"") + 3,actressIDHref.length() - 1);
    String actressPageURL=""String_Node_Str"" + actressID + ""String_Node_Str"";
    try {
      Document actressPage=Jsoup.connect(actressPageURL).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).get();
      Element actressNameElement=actressPage.select(""String_Node_Str"").first();
      Element actressThumbnailElement=actressPage.select(""String_Node_Str"").first();
      String actressThumbnailPath=actressThumbnailElement.attr(""String_Node_Str"");
      String actressNameFromThumbnailPath=actressThumbnailPath.substring(actressThumbnailPath.lastIndexOf('/') + 1,actressThumbnailPath.lastIndexOf('.'));
      actressNameFromThumbnailPath=actressNameFromThumbnailPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
      actressNameFromThumbnailPath=actressNameFromThumbnailPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
      actressNameFromThumbnailPath=WordUtils.capitalize(actressNameFromThumbnailPath);
      actressNameFromThumbnailPath=StringUtils.reverseDelimited(actressNameFromThumbnailPath,' ');
      String actressNameHiragana=actressNameElement.text().substring(actressNameElement.text().indexOf('（') + 1,actressNameElement.text().indexOf('）'));
      String actressNameEnglish=betterActressTranslation(actressNameHiragana,actressID);
      boolean didWeManuallyOverrideActress=false;
      if (actressNameEnglish.equals(""String_Node_Str"") && doGoogleTranslation) {
        actressNameEnglish=TranslateString.translateJapanesePersonNameToRomaji(actressNameHiragana);
      }
 else       didWeManuallyOverrideActress=true;
      if (!actressNameFromThumbnailPath.equals(""String_Node_Str"")) {
        int LevenshteinDistance=StringUtils.getLevenshteinDistance(actressNameEnglish,actressNameFromThumbnailPath);
        if (LevenshteinDistance > 3 && !didWeManuallyOverrideActress) {
          actressNameEnglish=actressNameFromThumbnailPath;
        }
      }
      if (!actressNameEnglish.equals(""String_Node_Str"")) {
        if (doGoogleTranslation) {
          if (!actressThumbnailPath.contains(""String_Node_Str"")) {
            actorList.add(new Actor(actressNameEnglish,""String_Node_Str"",new Thumb(actressThumbnailPath)));
          }
 else {
            actorList.add(new Actor(actressNameEnglish,""String_Node_Str"",null));
          }
        }
 else {
          if (!actressThumbnailPath.contains(""String_Node_Str"")) {
            actorList.add(new Actor(actressNameKanji,""String_Node_Str"",new Thumb(actressThumbnailPath)));
          }
 else {
            actorList.add(new Actor(actressNameKanji,""String_Node_Str"",null));
          }
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  Elements nameOnlyActors=document.select(""String_Node_Str"");
  for (  Element currentNameOnlyActor : nameOnlyActors) {
    String actorName=currentNameOnlyActor.text().trim();
    actorName=actorName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (doGoogleTranslation)     actorName=TranslateString.translateJapanesePersonNameToRomaji(actorName);
    actorList.add(new Actor(actorName,""String_Node_Str"",null));
  }
  return actorList;
}","@Override public ArrayList<Actor> scrapeActors(){
  Elements actressIDElements=document.select(""String_Node_Str"");
  ArrayList<Actor> actorList=new ArrayList<>(actressIDElements.size());
  for (  Element actressIDLink : actressIDElements) {
    String actressIDHref=actressIDLink.attr(""String_Node_Str"");
    String actressNameKanji=actressIDLink.text();
    String actressID=actressIDHref.substring(actressIDHref.indexOf(""String_Node_Str"") + 3,actressIDHref.length() - 1);
    String actressPageURL=""String_Node_Str"" + actressID + ""String_Node_Str"";
    try {
      Document actressPage=Jsoup.connect(actressPageURL).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).get();
      Element actressNameElement=actressPage.select(""String_Node_Str"").first();
      Element actressThumbnailElement=actressPage.select(""String_Node_Str"").first();
      String actressThumbnailPath=actressThumbnailElement.attr(""String_Node_Str"");
      String actressNameFromThumbnailPath=actressThumbnailPath.substring(actressThumbnailPath.lastIndexOf('/') + 1,actressThumbnailPath.lastIndexOf('.'));
      actressNameFromThumbnailPath=actressNameFromThumbnailPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
      actressNameFromThumbnailPath=actressNameFromThumbnailPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
      actressNameFromThumbnailPath=WordUtils.capitalize(actressNameFromThumbnailPath);
      actressNameFromThumbnailPath=StringUtils.reverseDelimited(actressNameFromThumbnailPath,' ');
      String actressNameHiragana=actressNameElement.text().substring(actressNameElement.text().indexOf('（') + 1,actressNameElement.text().indexOf('）'));
      String actressNameEnglish=betterActressTranslation(actressNameHiragana,actressID);
      boolean didWeManuallyOverrideActress=false;
      if (actressNameEnglish.equals(""String_Node_Str"") && doGoogleTranslation) {
        actressNameEnglish=TranslateString.translateJapanesePersonNameToRomaji(actressNameHiragana);
      }
 else       didWeManuallyOverrideActress=true;
      if (!actressNameFromThumbnailPath.equals(""String_Node_Str"")) {
        int LevenshteinDistance=StringUtils.getLevenshteinDistance(actressNameEnglish,actressNameFromThumbnailPath);
        if (LevenshteinDistance > 3 && !didWeManuallyOverrideActress) {
          actressNameEnglish=actressNameFromThumbnailPath;
        }
      }
      if (!actressNameEnglish.equals(""String_Node_Str"")) {
        if (doGoogleTranslation) {
          if (!actressThumbnailPath.contains(""String_Node_Str"")) {
            actorList.add(new Actor(actressNameEnglish,""String_Node_Str"",new Thumb(actressThumbnailPath)));
          }
 else {
            actorList.add(new Actor(actressNameEnglish,""String_Node_Str"",null));
          }
        }
 else {
          if (!actressThumbnailPath.contains(""String_Node_Str"")) {
            actorList.add(new Actor(actressNameKanji,""String_Node_Str"",new Thumb(actressThumbnailPath)));
          }
 else {
            actorList.add(new Actor(actressNameKanji,""String_Node_Str"",null));
          }
        }
      }
    }
 catch (    SocketTimeoutException e) {
      System.err.println(""String_Node_Str"" + actressPageURL.toString() + ""String_Node_Str""+ e.getLocalizedMessage());
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  Elements nameOnlyActors=document.select(""String_Node_Str"");
  for (  Element currentNameOnlyActor : nameOnlyActors) {
    String actorName=currentNameOnlyActor.text().trim();
    actorName=actorName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (doGoogleTranslation)     actorName=TranslateString.translateJapanesePersonNameToRomaji(actorName);
    actorList.add(new Actor(actorName,""String_Node_Str"",null));
  }
  return actorList;
}",0.9777352820652916
165450,"@Override public String createSearchString(File file){
  scrapedMovieFile=file;
  String fileBaseName;
  if (file.isFile())   fileBaseName=FilenameUtils.getBaseName(file.getName());
 else   fileBaseName=file.getName();
  fileBaseName=fileBaseName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  fileName=fileBaseName;
  String[] splitBySpace=fileBaseName.split(""String_Node_Str"");
  if (splitBySpace.length > 1) {
    if (splitBySpace[splitBySpace.length - 1].matches(""String_Node_Str"")) {
      yearFromFilename=splitBySpace[splitBySpace.length - 1].replaceAll(""String_Node_Str"",""String_Node_Str"");
      fileBaseName=fileBaseName.replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    }
  }
  if (useSiteSearch) {
    URLCodec codec=new URLCodec();
    try {
      fileBaseName=codec.encode(fileBaseName);
    }
 catch (    EncoderException e) {
      e.printStackTrace();
    }
    fileBaseName=""String_Node_Str"" + fileBaseName;
    return fileBaseName;
  }
  return FilenameUtils.getBaseName(file.getName());
}","@Override public String createSearchString(File file){
  scrapedMovieFile=file;
  String fileBaseName;
  String yearFromFilename=""String_Node_Str"";
  if (file.isFile())   fileBaseName=FilenameUtils.getBaseName(file.getName());
 else   fileBaseName=file.getName();
  fileBaseName=fileBaseName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  fileName=fileBaseName;
  String[] splitBySpace=fileBaseName.split(""String_Node_Str"");
  if (splitBySpace.length > 1) {
    if (splitBySpace[splitBySpace.length - 1].matches(""String_Node_Str"")) {
      yearFromFilename=splitBySpace[splitBySpace.length - 1].replaceAll(""String_Node_Str"",""String_Node_Str"");
      fileBaseName=fileBaseName.replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
    }
  }
  if (useSiteSearch) {
    URLCodec codec=new URLCodec();
    try {
      fileBaseName=codec.encode(fileBaseName);
    }
 catch (    EncoderException e) {
      e.printStackTrace();
    }
    fileBaseName=""String_Node_Str"" + fileBaseName;
    return fileBaseName;
  }
  return FilenameUtils.getBaseName(file.getName());
}",0.9785407725321889
165451,"@Override protected BufferedImage doInBackground() throws IOException {
  if (ImageCache.isImageCached(url,isImageModified)) {
    pictureLoaded=Thumb.convertToBufferedImage(ImageCache.getImageFromCache(url,isImageModified,referrerURL));
  }
 else {
    try {
      URLConnection imageConnection=url.openConnection();
      imageConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      if (referrerURL != null) {
        imageConnection.setRequestProperty(""String_Node_Str"",referrerURL.toString());
      }
      pictureLoaded=ImageIO.read(imageConnection.getInputStream());
    }
 catch (    Throwable t) {
      System.out.println(""String_Node_Str"" + t.getMessage());
    }
    if (isImageModified) {
      pictureLoaded=Thumb.convertToBufferedImage(pictureLoaded);
    }
    ImageCache.putImageInCache(url,pictureLoaded,isImageModified);
  }
  return pictureLoaded;
}","@Override protected BufferedImage doInBackground() throws IOException {
  if (url == null) {
    return null;
  }
  if (ImageCache.isImageCached(url,isImageModified)) {
    pictureLoaded=Thumb.convertToBufferedImage(ImageCache.getImageFromCache(url,isImageModified,referrerURL));
  }
 else {
    try {
      URLConnection imageConnection=url.openConnection();
      imageConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      if (referrerURL != null) {
        imageConnection.setRequestProperty(""String_Node_Str"",referrerURL.toString());
      }
      pictureLoaded=ImageIO.read(imageConnection.getInputStream());
    }
 catch (    Throwable t) {
      System.out.println(""String_Node_Str"" + t.getMessage());
    }
    if (isImageModified) {
      pictureLoaded=Thumb.convertToBufferedImage(pictureLoaded);
    }
    ImageCache.putImageInCache(url,pictureLoaded,isImageModified);
  }
  return pictureLoaded;
}",0.9768722466960352
165452,"private Object[] getPreferredMovieDataItem(@SuppressWarnings(""String_Node_Str"") Class classOfMovieDataItem) throws SecurityException, IllegalAccessException, IllegalArgumentException {
  Object[] preferredValueOrder=new Object[amalgamationPreferenceOrderForEntireMovieGroup.getOverallAmalgamationPreference().getAmalgamationPreferenceOrder().size()];
  boolean fieldIsArray=false;
  boolean fieldIsArrayList=false;
  boolean fieldIsMovieDataItem=false;
  for (  Movie currentMovie : scrapedMovieObjectsForFile) {
    for (    Field field : currentMovie.getClass().getDeclaredFields()) {
      field.setAccessible(true);
      Object currentFieldValue=field.get(currentMovie);
      if (currentFieldValue != null) {
        if (currentFieldValue.getClass().equals(classOfMovieDataItem)) {
          Object item=(MovieDataItem)currentFieldValue;
          DataItemSourceAmalgamationPreference amalgamationPrefToUse=amalgamationPreferenceOrderForEntireMovieGroup.getAmalgamationPreference(field);
          for (int i=0; i < amalgamationPrefToUse.getAmalgamationPreferenceOrder().size(); i++) {
            if (((MovieDataItem)item).getDataItemSource().toString().equals(amalgamationPrefToUse.getAmalgamationPreferenceOrder().get(i).toString()) && ((MovieDataItem)item).isStringValueEmpty()) {
              preferredValueOrder[i]=item;
              fieldIsMovieDataItem=true;
            }
          }
        }
 else         if (currentFieldValue.getClass().equals(ArrayList.class)) {
          ParameterizedType paramType=(ParameterizedType)field.getGenericType();
          Class<?> arrayListClass=(Class<?>)paramType.getActualTypeArguments()[0];
          @SuppressWarnings(""String_Node_Str"") ArrayList<Object> arrayList=(ArrayList<Object>)currentFieldValue;
          if (arrayListClass.equals(classOfMovieDataItem)) {
            DataItemSourceAmalgamationPreference amalgamationPrefToUse=amalgamationPreferenceOrderForEntireMovieGroup.getAmalgamationPreference(field);
            for (int i=0; i < amalgamationPrefToUse.getAmalgamationPreferenceOrder().size(); i++) {
              if (arrayList.size() > 0) {
                MovieDataItem firstItem=(MovieDataItem)arrayList.get(0);
                if (firstItem.getDataItemSource().toString().equals(amalgamationPrefToUse.getAmalgamationPreferenceOrder().get(i).toString())) {
                  preferredValueOrder[i]=arrayList;
                  fieldIsArrayList=true;
                }
              }
            }
          }
        }
      }
    }
  }
  if (fieldIsMovieDataItem) {
    for (int j=0; j < preferredValueOrder.length; j++) {
      if (preferredValueOrder[j] != null) {
        MovieDataItem[] returnValue={(MovieDataItem)preferredValueOrder[j]};
        return returnValue;
      }
    }
  }
 else   if (fieldIsArrayList) {
    for (int i=0; i < preferredValueOrder.length; i++) {
      if (preferredValueOrder[i] != null) {
        @SuppressWarnings(""String_Node_Str"") Object[] returnValue={(ArrayList)preferredValueOrder[i]};
        return returnValue;
      }
    }
  }
 else   if (fieldIsArray) {
  }
  return new Object[0];
}","private Object[] getPreferredMovieDataItem(@SuppressWarnings(""String_Node_Str"") Class classOfMovieDataItem) throws SecurityException, IllegalAccessException, IllegalArgumentException {
  Object[] preferredValueOrder=new Object[amalgamationPreferenceOrderForEntireMovieGroup.getOverallAmalgamationPreference().getAmalgamationPreferenceOrder().size()];
  boolean fieldIsArray=false;
  boolean fieldIsArrayList=false;
  boolean fieldIsMovieDataItem=false;
  for (  Movie currentMovie : scrapedMovieObjectsForFile) {
    for (    Field field : currentMovie.getClass().getDeclaredFields()) {
      field.setAccessible(true);
      Object currentFieldValue=field.get(currentMovie);
      if (currentFieldValue != null) {
        if (currentFieldValue.getClass().equals(classOfMovieDataItem)) {
          Object item=(MovieDataItem)currentFieldValue;
          DataItemSourceAmalgamationPreference amalgamationPrefToUse=amalgamationPreferenceOrderForEntireMovieGroup.getAmalgamationPreference(field);
          for (int i=0; i < amalgamationPrefToUse.getAmalgamationPreferenceOrder().size(); i++) {
            if (((MovieDataItem)item).getDataItemSource().toString().equals(amalgamationPrefToUse.getAmalgamationPreferenceOrder().get(i).toString()) && ((MovieDataItem)item).isStringValueEmpty()) {
              preferredValueOrder[i]=item;
              fieldIsMovieDataItem=true;
            }
          }
        }
 else         if (currentFieldValue.getClass().equals(ArrayList.class)) {
          ParameterizedType paramType=(ParameterizedType)field.getGenericType();
          Class<?> arrayListClass=(Class<?>)paramType.getActualTypeArguments()[0];
          @SuppressWarnings(""String_Node_Str"") ArrayList<Object> arrayList=(ArrayList<Object>)currentFieldValue;
          if (arrayListClass.equals(classOfMovieDataItem)) {
            DataItemSourceAmalgamationPreference amalgamationPrefToUse=amalgamationPreferenceOrderForEntireMovieGroup.getAmalgamationPreference(field);
            for (int i=0; i < amalgamationPrefToUse.getAmalgamationPreferenceOrder().size(); i++) {
              if (arrayList.size() > 0) {
                MovieDataItem firstItem=(MovieDataItem)arrayList.get(0);
                if (firstItem.getDataItemSource().toString().equals(amalgamationPrefToUse.getAmalgamationPreferenceOrder().get(i).toString())) {
                  preferredValueOrder[i]=arrayList;
                  fieldIsArrayList=true;
                }
              }
            }
          }
        }
      }
    }
  }
  if (fieldIsMovieDataItem) {
    for (int j=0; j < preferredValueOrder.length; j++) {
      if (preferredValueOrder[j] != null) {
        MovieDataItem[] returnValue={(MovieDataItem)preferredValueOrder[j]};
        return returnValue;
      }
    }
  }
 else   if (fieldIsArrayList) {
    for (int i=0; i < preferredValueOrder.length; i++) {
      if (preferredValueOrder[i] != null) {
        @SuppressWarnings(""String_Node_Str"") Object[] returnValue={(ArrayList)preferredValueOrder[i]};
        return returnValue;
      }
    }
  }
  return new Object[0];
}",0.9948270287746525
165453,"public void updateProgressViewWithScrapeFinished(Movie movieThatScraped){
  progressButton.setText(""String_Node_Str"");
  progressButton.setEnabled(false);
  if (movieThatScraped != null && movieThatScraped.hasValidTitle()) {
  }
}","public void updateProgressViewWithScrapeFinished(Movie movieThatScraped){
  progressButton.setText(""String_Node_Str"");
  progressButton.setEnabled(false);
}",0.8082901554404145
165454,"@Test public void testRuntime(){
  Runtime runtime=profile.scrapeRuntime();
  System.out.println(""String_Node_Str"" + runtime.getRuntime());
}","public void testRuntime(){
  Runtime runtime=profile.scrapeRuntime();
  System.out.println(""String_Node_Str"" + runtime.getRuntime());
}",0.9782608695652174
165455,"@Test public void testExtraFanart() throws IOException {
  Thumb[] extraFanart=profile.scrapeExtraFanart();
}","@Test public void testExtraFanart() throws IOException {
  Thumb[] extraFanart=profile.scrapeExtraFanart();
  assertTrue(""String_Node_Str"",extraFanart.length == 10);
}",0.7898550724637681
165456,"public static URL getReferrerURLFromImageURL(URL url){
  if (url != null && url.toString().endsWith(""String_Node_Str"")) {
    int indexOfLastSlash=url.toString().lastIndexOf('/');
    if (indexOfLastSlash > 0) {
      String tempUrlString=url.toString().substring(0,indexOfLastSlash);
      String imageNumber=url.toString().substring(indexOfLastSlash);
      if (imageNumber != null && imageNumber.endsWith(""String_Node_Str"") && imageNumber.length() > 5) {
        imageNumber=imageNumber.substring(1,imageNumber.length() - 4);
      }
      int indexOfSecondToLastSlash=tempUrlString.toString().lastIndexOf('/');
      if (indexOfSecondToLastSlash > 0 && tempUrlString.length() > 1) {
        String contentID=tempUrlString.substring(indexOfSecondToLastSlash + 1);
        URL referrerURL;
        try {
          referrerURL=new URL(""String_Node_Str"" + ""String_Node_Str"" + contentID + ""String_Node_Str""+ imageNumber);
          return referrerURL;
        }
 catch (        MalformedURLException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return url;
}","public static URL getReferrerURLFromImageURL(URL url){
  if (url != null && url.toString().endsWith(""String_Node_Str"")) {
    int indexOfLastSlash=url.toString().lastIndexOf('/');
    if (indexOfLastSlash > 0) {
      String tempUrlString=url.toString().substring(0,indexOfLastSlash);
      String imageNumber=url.toString().substring(indexOfLastSlash);
      if (imageNumber != null && imageNumber.endsWith(""String_Node_Str"") && imageNumber.length() > 5) {
        imageNumber=imageNumber.substring(1,imageNumber.length() - 4);
      }
      int indexOfSecondToLastSlash=tempUrlString.lastIndexOf('/');
      if (indexOfSecondToLastSlash > 0 && tempUrlString.length() > 1) {
        String contentID=tempUrlString.substring(indexOfSecondToLastSlash + 1);
        URL referrerURL;
        try {
          referrerURL=new URL(""String_Node_Str"" + ""String_Node_Str"" + contentID + ""String_Node_Str""+ imageNumber);
          return referrerURL;
        }
 catch (        MalformedURLException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return url;
}",0.9948717948717948
165457,"@Override public String createSearchString(File file){
  scrapedMovieFile=file;
  String baseId=findIDTagFromFile(file,isFirstWordOfFileIsID()).replace(""String_Node_Str"",""String_Node_Str"");
  Pattern patternID=Pattern.compile(""String_Node_Str"");
  Matcher matcher=patternID.matcher(baseId);
  String groupOne=""String_Node_Str"";
  String groupTwo=""String_Node_Str"";
  while (matcher.find()) {
    groupOne=matcher.group(1);
    groupTwo=matcher.group(2);
  }
  if (groupOne == null || groupOne.isEmpty() || groupTwo == null || groupTwo.isEmpty())   return null;
  int number=Integer.parseInt(groupTwo);
  if (groupOne.toUpperCase().equals(""String_Node_Str"")) {
    return String.format(""String_Node_Str"",groupOne,number);
  }
  return String.format(""String_Node_Str"",groupOne,number);
}","@Override public String createSearchString(File file){
  scrapedMovieFile=file;
  String baseId=findIDTagFromFile(file,isFirstWordOfFileIsID()).replace(""String_Node_Str"",""String_Node_Str"");
  Pattern patternID=Pattern.compile(""String_Node_Str"");
  Matcher matcher=patternID.matcher(baseId);
  String groupOne=""String_Node_Str"";
  String groupTwo=""String_Node_Str"";
  while (matcher.find()) {
    groupOne=matcher.group(1);
    groupTwo=matcher.group(2);
  }
  if (groupOne == null || groupOne.isEmpty() || groupTwo == null || groupTwo.isEmpty())   return null;
  int number=Integer.parseInt(groupTwo);
  if (groupOne.equalsIgnoreCase(""String_Node_Str"")) {
    return String.format(""String_Node_Str"",groupOne,number);
  }
  return String.format(""String_Node_Str"",groupOne,number);
}",0.9821200510855684
165458,"@Override public Icon getIcon(File iconType) throws IOException {
  if (iconType.isDirectory())   return FileSystemView.getFileSystemView().getSystemIcon(iconType);
  String name=FilenameUtils.getName(iconType.getName());
  String ext=FilenameUtils.getExtension(iconType.getName());
  if (ext != ""String_Node_Str"" && !name.startsWith(""String_Node_Str"")) {
    String mimeType=Files.probeContentType(iconType.toPath());
    if (mimeType != null) {
      for (      String type : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})       if (mimeType.startsWith(type + ""String_Node_Str""))       return createIcon(type);
    }
  }
  return createIcon(""String_Node_Str"");
}","@Override public Icon getIcon(File iconType) throws IOException {
  if (iconType.isDirectory())   return FileSystemView.getFileSystemView().getSystemIcon(iconType);
  String name=FilenameUtils.getName(iconType.getName());
  String ext=FilenameUtils.getExtension(iconType.getName());
  if (""String_Node_Str"".equals(ext) && !name.startsWith(""String_Node_Str"")) {
    String mimeType=Files.probeContentType(iconType.toPath());
    if (mimeType != null) {
      for (      String type : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})       if (mimeType.startsWith(type + ""String_Node_Str""))       return createIcon(type);
    }
  }
  return createIcon(""String_Node_Str"");
}",0.9675638371290544
165459,"private boolean allowedSuffix(String suffix){
  for (  String currentSuffix : acceptedMovieExtensions) {
    if (suffix.toLowerCase().equals(currentSuffix))     return true;
  }
  return false;
}","private boolean allowedSuffix(String suffix){
  for (  String currentSuffix : acceptedMovieExtensions) {
    if (suffix.equalsIgnoreCase(currentSuffix))     return true;
  }
  return false;
}",0.9378238341968912
165460,"private void tweakLookAndFeel(JToolBar toolbar){
  if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    MouseListener hoverListener=new MouseListener(){
      @Override public void mouseExited(      MouseEvent arg0){
        ((JButton)arg0.getSource()).setBorderPainted(false);
      }
      @Override public void mouseEntered(      MouseEvent arg0){
        ((JButton)arg0.getSource()).setBorderPainted(true);
      }
      @Override public void mouseClicked(      MouseEvent arg0){
      }
      @Override public void mouseReleased(      MouseEvent arg0){
      }
      @Override public void mousePressed(      MouseEvent arg0){
      }
    }
;
    for (    Component comp : toolbar.getComponents()) {
      if (comp instanceof JButton) {
        JButton button=(JButton)comp;
        button.setBorderPainted(false);
        button.addMouseListener(hoverListener);
      }
    }
    toolbar.setBackground(new Color(toolbar.getBackground().getRGB()));
    toolbar.setBorderPainted(false);
  }
 else   if (UIManager.getLookAndFeel().getID() == ""String_Node_Str"") {
    toolbar.setBorder(BorderFactory.createLineBorder(getBackground()));
  }
}","private void tweakLookAndFeel(JToolBar toolbar){
  if (""String_Node_Str"".equals(UIManager.getLookAndFeel().getID())) {
    MouseListener hoverListener=new MouseListener(){
      @Override public void mouseExited(      MouseEvent arg0){
        ((JButton)arg0.getSource()).setBorderPainted(false);
      }
      @Override public void mouseEntered(      MouseEvent arg0){
        ((JButton)arg0.getSource()).setBorderPainted(true);
      }
      @Override public void mouseClicked(      MouseEvent arg0){
      }
      @Override public void mouseReleased(      MouseEvent arg0){
      }
      @Override public void mousePressed(      MouseEvent arg0){
      }
    }
;
    for (    Component comp : toolbar.getComponents()) {
      if (comp instanceof JButton) {
        JButton button=(JButton)comp;
        button.setBorderPainted(false);
        button.addMouseListener(hoverListener);
      }
    }
    toolbar.setBackground(new Color(toolbar.getBackground().getRGB()));
    toolbar.setBorderPainted(false);
  }
 else   if (""String_Node_Str"".equals(UIManager.getLookAndFeel().getID())) {
    toolbar.setBorder(BorderFactory.createLineBorder(getBackground()));
  }
}",0.9595176571920758
165461,"/** 
 * Updates the view for the current movie
 * @param forcePosterUpdate - if force a refresh of the poster from the URL by downloading the file. If false, tries toread from the local file first
 * @param newMovieWasSet - true if you are setting a new movie. clears the old one and refreshes all fields
 */
public void updateView(boolean forcePosterUpdate,boolean newMovieWasSet){
  List<Movie> movieToWriteToDiskList=guiMain.getMovieToWriteToDiskList();
  if (newMovieWasSet && movieToWriteToDiskList.size() == 0) {
    movieToWriteToDiskList.add(currentMovie);
  }
  if ((movieToWriteToDiskList == null || movieToWriteToDiskList.size() == 0) && !newMovieWasSet) {
    clearView();
  }
 else   if (movieToWriteToDiskList != null && movieToWriteToDiskList.get(0) != null) {
    if (!newMovieWasSet)     clearView();
    if (!newMovieWasSet)     this.setCurrentMovie(movieToWriteToDiskList.get(0));
    if (movieToWriteToDiskList != null) {
      this.getCurrentMovie().getAllTitles().add(getCurrentMovie().getTitle());
      String fileName=this.getCurrentMovie().getFileName();
      if (fileName != null && fileName.trim().length() > 0)       this.getCurrentMovie().getAllTitles().add(new Title(fileName));
    }
    if (this.getCurrentMovie().getAllTitles().size() > 0)     this.setTitleEditable(true);
  }
  txtFieldMovieTitleText.setText(currentMovie.getTitle().getTitle());
  txtFieldOriginalTitleText.setText(currentMovie.getOriginalTitle().getOriginalTitle());
  txtFieldOriginalTitleText.setCaretPosition(0);
  txtFieldScrapedYearText.setText(currentMovie.getYear().getYear());
  txtFieldReleaseDateText.setText(currentMovie.getReleaseDate().getReleaseDate());
  txtFieldIDCurrentMovie.setText(currentMovie.getId().getId());
  txtFieldStudio.setText(currentMovie.getStudio().getStudio());
  txtFieldStudio.setCaretPosition(0);
  txtFieldMovieSet.setText(currentMovie.getSet().getSet());
  txtFieldMovieSet.setCaretPosition(0);
  moviePlotTextField.setText(currentMovie.getPlot().getPlot());
  moviePlotTextField.setCaretPosition(0);
  genreList.setText(toGenreListFormat(currentMovie.getGenres()));
  genreList.setCaretPosition(0);
  tagList.setText(toTagListFormat(currentMovie.getTags()));
  tagList.setCaretPosition(0);
  actorList.updateUI();
  artWorkPanel.updateView(forcePosterUpdate,guiMain);
}","/** 
 * Updates the view for the current movie
 * @param forcePosterUpdate - if force a refresh of the poster from the URL by downloading the file. If false, tries toread from the local file first
 * @param newMovieWasSet - true if you are setting a new movie. clears the old one and refreshes all fields
 */
public void updateView(boolean forcePosterUpdate,boolean newMovieWasSet){
  List<Movie> movieToWriteToDiskList=guiMain.getMovieToWriteToDiskList();
  if (newMovieWasSet && movieToWriteToDiskList.size() == 0) {
    movieToWriteToDiskList.add(currentMovie);
  }
  if ((movieToWriteToDiskList == null || movieToWriteToDiskList.size() == 0) && !newMovieWasSet) {
    clearView();
  }
 else   if (movieToWriteToDiskList != null && movieToWriteToDiskList.get(0) != null) {
    if (!newMovieWasSet)     clearView();
    if (!newMovieWasSet)     this.setCurrentMovie(movieToWriteToDiskList.get(0));
    if (movieToWriteToDiskList != null) {
      this.getCurrentMovie().getAllTitles().add(getCurrentMovie().getTitle());
      String fileName=this.getCurrentMovie().getFileName();
      if (fileName != null && fileName.trim().length() > 0)       this.getCurrentMovie().getAllTitles().add(new Title(fileName));
    }
    if (this.getCurrentMovie().getAllTitles().size() > 0)     this.setTitleEditable(true);
  }
  txtFieldMovieTitleText.setText(currentMovie.getTitle().getTitle());
  txtFieldOriginalTitleText.setText(currentMovie.getOriginalTitle().getOriginalTitle());
  txtFieldOriginalTitleText.setCaretPosition(0);
  txtFieldScrapedYearText.setText(currentMovie.getYear().getYear());
  txtFieldReleaseDateText.setText(currentMovie.getReleaseDate().getReleaseDate());
  txtFieldIDCurrentMovie.setText(currentMovie.getId().getId());
  txtFieldStudio.setText(currentMovie.getStudio().getStudio());
  txtFieldStudio.setCaretPosition(0);
  txtFieldMovieSet.setText(currentMovie.getSet().getSet());
  txtFieldMovieSet.setCaretPosition(0);
  moviePlotTextField.setText(currentMovie.getPlot().getPlot());
  moviePlotTextField.setCaretPosition(0);
  genreList.setText(toGenreListFormat(currentMovie.getGenres()));
  genreList.setCaretPosition(0);
  tagList.setText(toTagListFormat(currentMovie.getTags()));
  tagList.setCaretPosition(0);
  actorList.updateUI();
  artWorkPanel.updateView(forcePosterUpdate,guiMain);
  if (txtFieldMovieTitleText.getText().length() > 0) {
    guiMain.enableFileWrite();
  }
 else {
    guiMain.disableFileWrite();
  }
}",0.9718487394957984
165462,"@Override public SearchResult[] getSearchResults(String searchString) throws IOException {
  System.out.println(""String_Node_Str"" + searchString);
  scrapedPosters=null;
  if (useSiteSearch) {
    ArrayList<SearchResult> linksList=new ArrayList<SearchResult>();
    Document doc=Jsoup.connect(searchString).userAgent(""String_Node_Str"").ignoreHttpErrors(true).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).get();
    Elements movieSearchResultElements=doc.select(""String_Node_Str"");
    if (movieSearchResultElements == null || movieSearchResultElements.size() == 0) {
      this.useSiteSearch=false;
      SearchResult[] googleResults=getData18LinksFromGoogle(fileName);
      return googleResults;
    }
 else {
      for (      Element currentMovie : movieSearchResultElements) {
        String currentMovieURL=currentMovie.select(""String_Node_Str"").first().attr(""String_Node_Str"");
        String currentMovieTitle=currentMovie.select(""String_Node_Str"").last().text();
        String releaseDateText=currentMovie.ownText();
        if (releaseDateText != null && releaseDateText.length() > 0)         currentMovieTitle=currentMovieTitle + ""String_Node_Str"" + releaseDateText+ ""String_Node_Str"";
        Thumb currentMovieThumb=new Thumb(currentMovie.select(""String_Node_Str"").attr(""String_Node_Str""));
        linksList.add(new SearchResult(currentMovieURL,currentMovieTitle,currentMovieThumb));
      }
      return linksList.toArray(new SearchResult[linksList.size()]);
    }
  }
 else {
    this.useSiteSearch=false;
    SearchResult[] googleResults=getData18LinksFromGoogle(fileName);
    return googleResults;
  }
}","@Override public SearchResult[] getSearchResults(String searchString) throws IOException {
  System.out.println(""String_Node_Str"" + searchString);
  scrapedPosters=null;
  if (useSiteSearch) {
    ArrayList<SearchResult> linksList=new ArrayList<SearchResult>();
    Document doc=Jsoup.connect(searchString).userAgent(""String_Node_Str"").ignoreHttpErrors(true).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).get();
    Elements movieSearchResultElements=doc.select(""String_Node_Str"");
    if (movieSearchResultElements == null || movieSearchResultElements.size() == 0) {
      this.useSiteSearch=false;
      SearchResult[] googleResults=getData18LinksFromGoogle(fileName);
      return googleResults;
    }
 else {
      for (      Element currentMovie : movieSearchResultElements) {
        String currentMovieURL=currentMovie.select(""String_Node_Str"").first().attr(""String_Node_Str"");
        String currentMovieTitle=currentMovie.select(""String_Node_Str"").first().text();
        String releaseDateText=currentMovie.ownText();
        if (releaseDateText != null && releaseDateText.length() > 0)         currentMovieTitle=currentMovieTitle + ""String_Node_Str"" + releaseDateText+ ""String_Node_Str"";
        Thumb currentMovieThumb=new Thumb(currentMovie.select(""String_Node_Str"").attr(""String_Node_Str""));
        linksList.add(new SearchResult(currentMovieURL,currentMovieTitle,currentMovieThumb));
      }
      return linksList.toArray(new SearchResult[linksList.size()]);
    }
  }
 else {
    this.useSiteSearch=false;
    SearchResult[] googleResults=getData18LinksFromGoogle(fileName);
    return googleResults;
  }
}",0.9984667279975468
165463,"private String getRenamedFolderPath(String path){
  System.out.println(""String_Node_Str"" + path);
  String newPath=replace(folderNameRenameString);
  String doublePathSeperator=File.separator + File.separator;
  while (newPath.contains(doublePathSeperator)) {
    newPath=newPath.replace(doublePathSeperator,File.separator);
  }
  System.out.println(""String_Node_Str"" + newPath);
  return newPath;
}","private String getRenamedFolderPath(String path){
  System.out.println(""String_Node_Str"" + path);
  String newPath=replace(folderNameRenameString);
  String doublePathSeperator=File.separator + File.separator;
  String cutPath=""String_Node_Str"";
  if (newPath.startsWith(doublePathSeperator)) {
    cutPath=doublePathSeperator;
    newPath=path.substring(2,path.length());
  }
  while (newPath.contains(doublePathSeperator)) {
    newPath=newPath.replace(doublePathSeperator,File.separator);
  }
  newPath=cutPath + newPath;
  System.out.println(""String_Node_Str"" + newPath);
  return newPath;
}",0.8028169014084507
165464,"public void updateView(boolean forceUpdatePoster,GUIMain gui){
  boolean posterFileUpdateOccured=false;
  boolean fanartFileUpdateOccured=false;
  if (!forceUpdatePoster && gui.getCurrentlySelectedMovieFileList().size() > 0) {
    File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File standardPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),false));
    File standardFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),false));
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedPosterFileList().get(0));
        if (img != null) {
          posterImage=img;
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage,false);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedFanartFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedFanartFileList().get(0));
        if (img != null) {
          fanartImage=img;
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          if (scaledImage != null) {
            this.setNewFanart(scaledImage,false);
            fanartFileUpdateOccured=true;
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage,true);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage,true);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        this.setNewPoster(new ImageIcon(standardPosterJpg.getCanonicalPath()),true);
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(standardFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage,true);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
    try {
      if (gui.getFileDetailPanel().currentMovie.getPosters().length > 0) {
        Image posterImage=gui.getFileDetailPanel().currentMovie.getPosters()[0].getThumbImage();
        ImageIcon newPosterIcon=new ImageIcon(posterImage);
        BufferedImage img=(BufferedImage)newPosterIcon.getImage();
        BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
        this.setNewPoster(scaledImage,true);
        posterFileUpdateOccured=true;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
    try {
      if (gui.getFileDetailPanel().currentMovie.getFanart().length > 0) {
        Image fanartImage=gui.getFileDetailPanel().currentMovie.getFanart()[0].getThumbImage();
        ImageIcon newFanartIcon=new ImageIcon(fanartImage);
        BufferedImage img=(BufferedImage)newFanartIcon.getImage();
        BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
        this.setNewFanart(scaledImage,true);
        fanartImage=scaledImage;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}","public void updateView(boolean forceUpdatePoster,GUIMain gui){
  boolean posterFileUpdateOccured=false;
  boolean fanartFileUpdateOccured=false;
  if (!forceUpdatePoster && gui.getCurrentlySelectedMovieFileList().size() > 0) {
    File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File standardPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),false));
    File standardFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),false));
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedPosterFileList().get(0));
        if (img != null) {
          posterImage=img;
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage,false);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedFanartFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedFanartFileList().get(0));
        if (img != null) {
          fanartImage=img;
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          if (scaledImage != null) {
            this.setNewFanart(scaledImage,false);
            fanartFileUpdateOccured=true;
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage,true);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage,true);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        this.setNewPoster(new ImageIcon(standardPosterJpg.getCanonicalPath()),true);
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(standardFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage,true);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
    try {
      if (gui.getFileDetailPanel().currentMovie.getPosters().length > 0) {
        Image posterImage=gui.getFileDetailPanel().currentMovie.getPosters()[0].getThumbImage();
        ImageIcon newPosterIcon=new ImageIcon(posterImage);
        BufferedImage img=(BufferedImage)newPosterIcon.getImage();
        BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
        this.setNewPoster(scaledImage,true);
        posterFileUpdateOccured=true;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
    try {
      if (gui.getFileDetailPanel().currentMovie.getFanart().length > 0) {
        fanartImage=gui.getFileDetailPanel().currentMovie.getFanart()[0].getThumbImage();
        ImageIcon newFanartIcon=new ImageIcon(fanartImage);
        BufferedImage img=(BufferedImage)newFanartIcon.getImage();
        BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
        fanartImage=img;
        this.setNewFanart(scaledImage,false);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}",0.9925439904563078
165465,"private void updatePosterAndFanartSizes(){
  updatingPosterAndFanartSizes=true;
  BufferedImage fanartImg=(BufferedImage)(fanartImage);
  if (fanartImg != null) {
    BufferedImage fanartScaledImage=ArtWorkPanel.resizeToFanart(fanartImg);
    this.setNewFanart(fanartScaledImage,false);
  }
  BufferedImage posterImg=Thumb.convertToBufferedImage(posterImage);
  BufferedImage posterScaledImage=ArtWorkPanel.resizeToPoster(posterImg);
  this.setNewPoster(posterScaledImage,false);
}","private void updatePosterAndFanartSizes(){
  updatingPosterAndFanartSizes=true;
  BufferedImage bufferedFanartImg=Thumb.convertToBufferedImage(fanartImage);
  if (bufferedFanartImg != null) {
    BufferedImage fanartScaledImage=ArtWorkPanel.resizeToFanart(bufferedFanartImg);
    this.setNewFanart(fanartScaledImage,false);
  }
  BufferedImage posterImg=Thumb.convertToBufferedImage(posterImage);
  BufferedImage posterScaledImage=ArtWorkPanel.resizeToPoster(posterImg);
  this.setNewPoster(posterScaledImage,false);
}",0.4884884884884884
165466,"@Override public Thumb[] scrapePosters(){
  ArrayList<Thumb> posters=new ArrayList<Thumb>();
  ArrayList<Thumb> trailerImages=new ArrayList<Thumb>();
  Elements trailerImgElements=document.select(""String_Node_Str"");
  Elements videoStills=document.select(""String_Node_Str"");
  if (trailerImgElements != null && trailerImgElements.size() > 0 && (videoStills == null || videoStills.size() == 0)) {
    try {
      for (      Element currentTrailerElement : trailerImgElements) {
        trailerImages.add(new Thumb(currentTrailerElement.attr(""String_Node_Str"")));
      }
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    if (videoStills != null && videoStills.size() > 0) {
      try {
        for (        Element currentVideoStill : videoStills)         posters.add(new Thumb(currentVideoStill.attr(""String_Node_Str"")));
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
  }
  ArrayList<String> contentLinks=new ArrayList<String>();
  String docLocation=document.location();
  String contentIDFromViewerFoundOnPage=""String_Node_Str"";
  Element viewerElementOnPage=document.select(""String_Node_Str"").first();
  if (viewerElementOnPage != null) {
    String hrefContent=viewerElementOnPage.attr(""String_Node_Str"");
    int startingIndex=hrefContent.indexOf(""String_Node_Str"") + ""String_Node_Str"".length() + 1;
    int endingIndex=hrefContent.lastIndexOf(""String_Node_Str"");
    if (startingIndex != -1 && endingIndex != -1) {
      contentIDFromViewerFoundOnPage=hrefContent.substring(startingIndex,endingIndex);
    }
  }
  String contentIDToUse=docLocation.substring(docLocation.lastIndexOf(""String_Node_Str"") + 1,docLocation.length());
  if (contentIDFromViewerFoundOnPage != null && contentIDFromViewerFoundOnPage.length() > 0) {
    contentIDToUse=contentIDFromViewerFoundOnPage;
  }
  contentLinks.add(contentIDToUse);
  for (  String contentID : contentLinks) {
    for (int viewerPageNumber=1; viewerPageNumber <= 15; viewerPageNumber++) {
      String currentViewerPageURL=""String_Node_Str"" + contentID + ""String_Node_Str""+ String.format(""String_Node_Str"",viewerPageNumber);
      try {
        Document viewerDocument=Jsoup.connect(currentViewerPageURL).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).userAgent(""String_Node_Str"").get();
        if (viewerDocument != null) {
          Element imgElement=viewerDocument.select(""String_Node_Str"").first();
          if (imgElement != null) {
            String mainImageUrl=imgElement.attr(""String_Node_Str"");
            if (fileExistsAtURL(mainImageUrl)) {
              Thumb thumbToAdd=new Thumb(mainImageUrl);
              String previewURL=mainImageUrl.substring(0,mainImageUrl.length() - 6) + ""String_Node_Str"" + mainImageUrl.substring(mainImageUrl.length() - 6,mainImageUrl.length());
              if (!fileExistsAtURL(previewURL))               previewURL=mainImageUrl.substring(0,mainImageUrl.length() - 6) + ""String_Node_Str"" + mainImageUrl.substring(mainImageUrl.length() - 6,mainImageUrl.length());
              if (fileExistsAtURL(previewURL))               thumbToAdd.setPreviewURL(new URL(previewURL));
              posters.add(thumbToAdd);
            }
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  Element officialPosterElement=document.select(""String_Node_Str"").first();
  if (officialPosterElement != null) {
    try {
      Thumb officialPosterThumb=new Thumb(officialPosterElement.attr(""String_Node_Str""));
      posters.add(officialPosterThumb);
      posters.addAll(trailerImages);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  scrapedPosters=posters.toArray(new Thumb[posters.size()]);
  if (scrapedPosters != null && scrapedPosters.length > 0)   return scrapedPosters;
 else {
    scrapedPosters=trailerImages.toArray(new Thumb[trailerImages.size()]);
    return scrapedPosters;
  }
}","@Override public Thumb[] scrapePosters(){
  ArrayList<Thumb> posters=new ArrayList<Thumb>();
  ArrayList<Thumb> trailerImages=new ArrayList<Thumb>();
  Elements trailerImgElements=document.select(""String_Node_Str"");
  Elements videoStills=document.select(""String_Node_Str"");
  if (trailerImgElements != null && trailerImgElements.size() > 0 && (videoStills == null || videoStills.size() == 0)) {
    try {
      for (      Element currentTrailerElement : trailerImgElements) {
        trailerImages.add(new Thumb(fixIPAddressOfData18(currentTrailerElement.attr(""String_Node_Str""))));
      }
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    if (videoStills != null && videoStills.size() > 0) {
      try {
        for (        Element currentVideoStill : videoStills)         posters.add(new Thumb(fixIPAddressOfData18(currentVideoStill.attr(""String_Node_Str""))));
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
  }
  ArrayList<String> contentLinks=new ArrayList<String>();
  String docLocation=document.location();
  String contentIDFromViewerFoundOnPage=""String_Node_Str"";
  Element viewerElementOnPage=document.select(""String_Node_Str"").first();
  if (viewerElementOnPage != null) {
    String hrefContent=viewerElementOnPage.attr(""String_Node_Str"");
    int startingIndex=hrefContent.indexOf(""String_Node_Str"") + ""String_Node_Str"".length() + 1;
    int endingIndex=hrefContent.lastIndexOf(""String_Node_Str"");
    if (startingIndex != -1 && endingIndex != -1) {
      contentIDFromViewerFoundOnPage=hrefContent.substring(startingIndex,endingIndex);
    }
  }
  String contentIDToUse=docLocation.substring(docLocation.lastIndexOf(""String_Node_Str"") + 1,docLocation.length());
  if (contentIDFromViewerFoundOnPage != null && contentIDFromViewerFoundOnPage.length() > 0) {
    contentIDToUse=contentIDFromViewerFoundOnPage;
  }
  contentLinks.add(contentIDToUse);
  for (  String contentID : contentLinks) {
    for (int viewerPageNumber=1; viewerPageNumber <= 15; viewerPageNumber++) {
      String currentViewerPageURL=""String_Node_Str"" + contentID + ""String_Node_Str""+ String.format(""String_Node_Str"",viewerPageNumber);
      try {
        Document viewerDocument=Jsoup.connect(currentViewerPageURL).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).userAgent(""String_Node_Str"").get();
        if (viewerDocument != null) {
          Element imgElement=viewerDocument.select(""String_Node_Str"").first();
          if (imgElement != null) {
            String mainImageUrl=imgElement.attr(""String_Node_Str"");
            mainImageUrl=fixIPAddressOfData18(mainImageUrl);
            if (fileExistsAtURL(mainImageUrl)) {
              Thumb thumbToAdd=new Thumb(mainImageUrl);
              String previewURL=mainImageUrl.substring(0,mainImageUrl.length() - 6) + ""String_Node_Str"" + mainImageUrl.substring(mainImageUrl.length() - 6,mainImageUrl.length());
              previewURL=fixIPAddressOfData18(previewURL);
              if (!fileExistsAtURL(previewURL))               previewURL=mainImageUrl.substring(0,mainImageUrl.length() - 6) + ""String_Node_Str"" + mainImageUrl.substring(mainImageUrl.length() - 6,mainImageUrl.length());
              if (fileExistsAtURL(previewURL))               thumbToAdd.setPreviewURL(new URL(previewURL));
              posters.add(thumbToAdd);
            }
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  Element officialPosterElement=document.select(""String_Node_Str"").first();
  if (officialPosterElement != null) {
    try {
      Thumb officialPosterThumb=new Thumb(fixIPAddressOfData18(officialPosterElement.attr(""String_Node_Str"")));
      posters.add(officialPosterThumb);
      posters.addAll(trailerImages);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  scrapedPosters=posters.toArray(new Thumb[posters.size()]);
  if (scrapedPosters != null && scrapedPosters.length > 0)   return scrapedPosters;
 else {
    scrapedPosters=trailerImages.toArray(new Thumb[trailerImages.size()]);
    return scrapedPosters;
  }
}",0.9248826291079812
165467,"@Override public Thumb[] scrapePosters(){
  ArrayList<Thumb> posters=new ArrayList<Thumb>();
  ArrayList<Thumb> trailerImages=new ArrayList<Thumb>();
  Elements trailerImgElements=document.select(""String_Node_Str"");
  Elements videoStills=document.select(""String_Node_Str"");
  if (trailerImgElements != null && trailerImgElements.size() > 0 && (videoStills == null || videoStills.size() == 0)) {
    try {
      for (      Element currentTrailerElement : trailerImgElements) {
        trailerImages.add(new Thumb(currentTrailerElement.attr(""String_Node_Str"")));
      }
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    if (videoStills != null && videoStills.size() > 0) {
      try {
        for (        Element currentVideoStill : videoStills)         posters.add(new Thumb(currentVideoStill.attr(""String_Node_Str"")));
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
  }
  ArrayList<String> contentLinks=new ArrayList<String>();
  String docLocation=document.location();
  String contentIDFromPage=docLocation.substring(docLocation.lastIndexOf(""String_Node_Str"") + 1,docLocation.length());
  contentLinks.add(contentIDFromPage);
  for (  String contentID : contentLinks) {
    for (int viewerPageNumber=1; viewerPageNumber <= 15; viewerPageNumber++) {
      String currentViewerPageURL=""String_Node_Str"" + contentID + ""String_Node_Str""+ String.format(""String_Node_Str"",viewerPageNumber);
      try {
        Document viewerDocument=Jsoup.connect(currentViewerPageURL).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).userAgent(""String_Node_Str"").get();
        if (viewerDocument != null) {
          Element imgElement=viewerDocument.select(""String_Node_Str"").first();
          if (imgElement != null) {
            String mainImageUrl=imgElement.attr(""String_Node_Str"");
            if (fileExistsAtURL(mainImageUrl)) {
              Thumb thumbToAdd=new Thumb(mainImageUrl);
              String previewURL=mainImageUrl.substring(0,mainImageUrl.length() - 6) + ""String_Node_Str"" + mainImageUrl.substring(mainImageUrl.length() - 6,mainImageUrl.length());
              if (!fileExistsAtURL(previewURL))               previewURL=mainImageUrl.substring(0,mainImageUrl.length() - 6) + ""String_Node_Str"" + mainImageUrl.substring(mainImageUrl.length() - 6,mainImageUrl.length());
              if (fileExistsAtURL(previewURL))               thumbToAdd.setPreviewURL(new URL(previewURL));
              posters.add(thumbToAdd);
            }
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  Element officialPosterElement=document.select(""String_Node_Str"").first();
  if (officialPosterElement != null) {
    try {
      Thumb officialPosterThumb=new Thumb(officialPosterElement.attr(""String_Node_Str""));
      posters.add(officialPosterThumb);
      posters.addAll(trailerImages);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  scrapedPosters=posters.toArray(new Thumb[posters.size()]);
  if (scrapedPosters != null && scrapedPosters.length > 0)   return scrapedPosters;
 else {
    scrapedPosters=trailerImages.toArray(new Thumb[trailerImages.size()]);
    return scrapedPosters;
  }
}","@Override public Thumb[] scrapePosters(){
  ArrayList<Thumb> posters=new ArrayList<Thumb>();
  ArrayList<Thumb> trailerImages=new ArrayList<Thumb>();
  Elements trailerImgElements=document.select(""String_Node_Str"");
  Elements videoStills=document.select(""String_Node_Str"");
  if (trailerImgElements != null && trailerImgElements.size() > 0 && (videoStills == null || videoStills.size() == 0)) {
    try {
      for (      Element currentTrailerElement : trailerImgElements) {
        trailerImages.add(new Thumb(currentTrailerElement.attr(""String_Node_Str"")));
      }
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
    if (videoStills != null && videoStills.size() > 0) {
      try {
        for (        Element currentVideoStill : videoStills)         posters.add(new Thumb(currentVideoStill.attr(""String_Node_Str"")));
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
      }
    }
  }
  ArrayList<String> contentLinks=new ArrayList<String>();
  String docLocation=document.location();
  String contentIDFromViewerFoundOnPage=""String_Node_Str"";
  Element viewerElementOnPage=document.select(""String_Node_Str"").first();
  if (viewerElementOnPage != null) {
    String hrefContent=viewerElementOnPage.attr(""String_Node_Str"");
    int startingIndex=hrefContent.indexOf(""String_Node_Str"") + ""String_Node_Str"".length() + 1;
    int endingIndex=hrefContent.lastIndexOf(""String_Node_Str"");
    if (startingIndex != -1 && endingIndex != -1) {
      contentIDFromViewerFoundOnPage=hrefContent.substring(startingIndex,endingIndex);
    }
  }
  String contentIDToUse=docLocation.substring(docLocation.lastIndexOf(""String_Node_Str"") + 1,docLocation.length());
  if (contentIDFromViewerFoundOnPage != null && contentIDFromViewerFoundOnPage.length() > 0) {
    contentIDToUse=contentIDFromViewerFoundOnPage;
  }
  contentLinks.add(contentIDToUse);
  for (  String contentID : contentLinks) {
    for (int viewerPageNumber=1; viewerPageNumber <= 15; viewerPageNumber++) {
      String currentViewerPageURL=""String_Node_Str"" + contentID + ""String_Node_Str""+ String.format(""String_Node_Str"",viewerPageNumber);
      try {
        Document viewerDocument=Jsoup.connect(currentViewerPageURL).timeout(SiteParsingProfile.CONNECTION_TIMEOUT_VALUE).userAgent(""String_Node_Str"").get();
        if (viewerDocument != null) {
          Element imgElement=viewerDocument.select(""String_Node_Str"").first();
          if (imgElement != null) {
            String mainImageUrl=imgElement.attr(""String_Node_Str"");
            if (fileExistsAtURL(mainImageUrl)) {
              Thumb thumbToAdd=new Thumb(mainImageUrl);
              String previewURL=mainImageUrl.substring(0,mainImageUrl.length() - 6) + ""String_Node_Str"" + mainImageUrl.substring(mainImageUrl.length() - 6,mainImageUrl.length());
              if (!fileExistsAtURL(previewURL))               previewURL=mainImageUrl.substring(0,mainImageUrl.length() - 6) + ""String_Node_Str"" + mainImageUrl.substring(mainImageUrl.length() - 6,mainImageUrl.length());
              if (fileExistsAtURL(previewURL))               thumbToAdd.setPreviewURL(new URL(previewURL));
              posters.add(thumbToAdd);
            }
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  Element officialPosterElement=document.select(""String_Node_Str"").first();
  if (officialPosterElement != null) {
    try {
      Thumb officialPosterThumb=new Thumb(officialPosterElement.attr(""String_Node_Str""));
      posters.add(officialPosterThumb);
      posters.addAll(trailerImages);
    }
 catch (    MalformedURLException e) {
      e.printStackTrace();
    }
  }
  scrapedPosters=posters.toArray(new Thumb[posters.size()]);
  if (scrapedPosters != null && scrapedPosters.length > 0)   return scrapedPosters;
 else {
    scrapedPosters=trailerImages.toArray(new Thumb[trailerImages.size()]);
    return scrapedPosters;
  }
}",0.8891659739540039
165468,"/** 
 * @param parsingProfile - item to check if scraping is enabled for this parsing profile
 * @return true if scraper should scrape for parsingProfile, false otherwise
 */
protected boolean shouldScrapeThread(DataItemSource parsingProfile){
  for (  ScraperGroupName currentName : ScraperGroupName.values()) {
    ScraperGroupAmalgamationPreference currentPref=this.guiMain.getAllAmalgamationOrderingPreferences().getScraperGroupAmalgamationPreference(currentName);
    LinkedList<DataItemSource> overallPrefs=currentPref.getOverallAmalgamationPreference().getAmalgamationPreferenceOrder();
    for (    DataItemSource currentDataItemSource : overallPrefs) {
      System.out.println(""String_Node_Str"" + currentDataItemSource.getDataItemSourceName() + ""String_Node_Str""+ currentDataItemSource.isDisabled()+ ""String_Node_Str""+ parsingProfile.getDataItemSourceName());
      if (currentDataItemSource.getDataItemSourceName().equals(parsingProfile.getDataItemSourceName())) {
        boolean disabled=currentDataItemSource.isDisabled();
        return !disabled;
      }
    }
  }
  return false;
}","/** 
 * @param parsingProfile - item to check if scraping is enabled for this parsing profile
 * @return true if scraper should scrape for parsingProfile, false otherwise
 */
protected boolean shouldScrapeThread(DataItemSource parsingProfile){
  for (  ScraperGroupName currentName : ScraperGroupName.values()) {
    ScraperGroupAmalgamationPreference currentPref=this.guiMain.getAllAmalgamationOrderingPreferences().getScraperGroupAmalgamationPreference(currentName);
    LinkedList<DataItemSource> overallPrefs=currentPref.getOverallAmalgamationPreference().getAmalgamationPreferenceOrder();
    for (    DataItemSource currentDataItemSource : overallPrefs) {
      if (currentDataItemSource.getDataItemSourceName().equals(parsingProfile.getDataItemSourceName())) {
        boolean disabled=currentDataItemSource.isDisabled();
        return !disabled;
      }
    }
  }
  return false;
}",0.7334004024144869
165469,"@Override public void actionPerformed(ActionEvent arg0){
  this.guiMain.setMainGUIEnabled(false);
  worker=new SwingWorker<Void,String>(){
    @Override protected Void doInBackground() throws Exception {
      for (int movieNumberInList=0; movieNumberInList < guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
        try {
          guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          if (guiMain.movieToWriteToDiskList == null) {
            System.err.println(""String_Node_Str"");
          }
          if (guiMain.movieToWriteToDiskList.get(movieNumberInList) == null) {
            System.out.println(""String_Node_Str"");
            continue;
          }
          System.out.println(""String_Node_Str"" + guiMain.movieToWriteToDiskList);
          if (guiMain.movieToWriteToDiskList != null) {
            if (guiMain.getPreferences().getRenameMovieFile()) {
              File oldMovieFile=guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList);
              Movie movie=guiMain.movieToWriteToDiskList.get(movieNumberInList);
              guiMain.getPreferences();
              String sanitizerString=MoviescraperPreferences.getSanitizerForFilename();
              guiMain.getPreferences();
              String renameString=MoviescraperPreferences.getRenamerString();
              Renamer renamer=new Renamer(renameString,sanitizerString,movie,oldMovieFile);
              String newMovieFilename=renamer.getNewFileName();
              System.out.println(""String_Node_Str"" + newMovieFilename);
              File newMovieFile=new File(newMovieFilename);
              boolean renameStatus=oldMovieFile.renameTo(newMovieFile);
              if (!renameStatus) {
                System.err.println(""String_Node_Str"" + oldMovieFile + ""String_Node_Str""+ newMovieFile);
              }
              guiMain.movieToWriteToDiskList.get(movieNumberInList).writeToFile(new File(Movie.getFileNameOfNfo(newMovieFile,guiMain.getPreferences().getNfoNamedMovieDotNfo())),new File(Movie.getFileNameOfPoster(newMovieFile,guiMain.getPreferences().getNoMovieNameInImageFiles())),new File(Movie.getFileNameOfFanart(newMovieFile,guiMain.getPreferences().getNoMovieNameInImageFiles())),new File(Movie.getFileNameOfFolderJpg(newMovieFile)),new File(Movie.getFileNameOfExtraFanartFolderName(newMovieFile)),new File(Movie.getFileNameOfTrailer(newMovieFile)),guiMain.getPreferences());
            }
 else {
              guiMain.movieToWriteToDiskList.get(movieNumberInList).writeToFile(guiMain.getCurrentlySelectedNfoFileList().get(movieNumberInList),guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList),guiMain.getCurrentlySelectedFanartFileList().get(movieNumberInList),guiMain.getCurrentlySelectedFolderJpgFileList().get(movieNumberInList),new File(Movie.getFileNameOfExtraFanartFolderName(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList))),new File(Movie.getFileNameOfTrailer(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList))),guiMain.getPreferences());
            }
            if (guiMain.getPreferences().getExtraFanartScrapingEnabledPreference() && guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).isDirectory()) {
              guiMain.movieToWriteToDiskList.get(movieNumberInList).writeExtraFanart(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            }
          }
          if (guiMain.getPreferences().getDownloadActorImagesToActorFolderPreference() && guiMain.getCurrentlySelectedMovieFileList() != null && guiMain.getCurrentlySelectedDirectoryList() != null) {
            guiMain.movieToWriteToDiskList.get(movieNumberInList).writeActorImagesToFolder(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          }
          System.out.println(""String_Node_Str"");
        }
 catch (        IOException e) {
          e.printStackTrace();
          guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
        }
 finally {
          guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
        }
      }
      return null;
    }
    @Override protected void done(){
      guiMain.setMainGUIEnabled(true);
      guiMain.updateFileListModel(guiMain.getCurrentlySelectedDirectoryList(),true);
      guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
    }
  }
;
  worker.execute();
}","@Override public void actionPerformed(ActionEvent arg0){
  this.guiMain.setMainGUIEnabled(false);
  worker=new SwingWorker<Void,String>(){
    @Override protected Void doInBackground() throws Exception {
      for (int movieNumberInList=0; movieNumberInList < guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
        try {
          guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          if (guiMain.movieToWriteToDiskList == null) {
            System.err.println(""String_Node_Str"");
          }
          if (guiMain.movieToWriteToDiskList.get(movieNumberInList) == null) {
            System.out.println(""String_Node_Str"");
            continue;
          }
          System.out.println(""String_Node_Str"" + guiMain.movieToWriteToDiskList);
          if (guiMain.movieToWriteToDiskList != null) {
            if (guiMain.getPreferences().getRenameMovieFile()) {
              File oldMovieFile=guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList);
              Movie movie=guiMain.movieToWriteToDiskList.get(movieNumberInList);
              String sanitizerString=MoviescraperPreferences.getSanitizerForFilename();
              String renameString=MoviescraperPreferences.getRenamerString();
              Renamer renamer=new Renamer(renameString,sanitizerString,movie,oldMovieFile);
              String newMovieFilename=renamer.getNewFileName();
              System.out.println(""String_Node_Str"" + newMovieFilename);
              File newMovieFile=new File(newMovieFilename);
              boolean renameStatus=oldMovieFile.renameTo(newMovieFile);
              if (!renameStatus) {
                System.err.println(""String_Node_Str"" + oldMovieFile + ""String_Node_Str""+ newMovieFile);
              }
              guiMain.movieToWriteToDiskList.get(movieNumberInList).writeToFile(new File(Movie.getFileNameOfNfo(newMovieFile,guiMain.getPreferences().getNfoNamedMovieDotNfo())),new File(Movie.getFileNameOfPoster(newMovieFile,guiMain.getPreferences().getNoMovieNameInImageFiles())),new File(Movie.getFileNameOfFanart(newMovieFile,guiMain.getPreferences().getNoMovieNameInImageFiles())),new File(Movie.getFileNameOfFolderJpg(newMovieFile)),new File(Movie.getFileNameOfExtraFanartFolderName(newMovieFile)),new File(Movie.getFileNameOfTrailer(newMovieFile)),guiMain.getPreferences());
            }
 else {
              guiMain.movieToWriteToDiskList.get(movieNumberInList).writeToFile(guiMain.getCurrentlySelectedNfoFileList().get(movieNumberInList),guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList),guiMain.getCurrentlySelectedFanartFileList().get(movieNumberInList),guiMain.getCurrentlySelectedFolderJpgFileList().get(movieNumberInList),new File(Movie.getFileNameOfExtraFanartFolderName(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList))),new File(Movie.getFileNameOfTrailer(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList))),guiMain.getPreferences());
            }
            if (guiMain.getPreferences().getExtraFanartScrapingEnabledPreference() && guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).isDirectory()) {
              guiMain.movieToWriteToDiskList.get(movieNumberInList).writeExtraFanart(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            }
          }
          if (guiMain.getPreferences().getDownloadActorImagesToActorFolderPreference() && guiMain.getCurrentlySelectedMovieFileList() != null && guiMain.getCurrentlySelectedDirectoryList() != null) {
            guiMain.movieToWriteToDiskList.get(movieNumberInList).writeActorImagesToFolder(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          }
          System.out.println(""String_Node_Str"");
        }
 catch (        IOException e) {
          e.printStackTrace();
          guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
        }
 finally {
          guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
        }
      }
      return null;
    }
    @Override protected void done(){
      guiMain.setMainGUIEnabled(true);
      guiMain.updateFileListModel(guiMain.getCurrentlySelectedDirectoryList(),true);
      guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
    }
  }
;
  worker.execute();
}",0.9792474344355758
165470,"@Override protected Void doInBackground() throws Exception {
  for (int movieNumberInList=0; movieNumberInList < guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    try {
      guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      if (guiMain.movieToWriteToDiskList == null) {
        System.err.println(""String_Node_Str"");
      }
      if (guiMain.movieToWriteToDiskList.get(movieNumberInList) == null) {
        System.out.println(""String_Node_Str"");
        continue;
      }
      System.out.println(""String_Node_Str"" + guiMain.movieToWriteToDiskList);
      if (guiMain.movieToWriteToDiskList != null) {
        if (guiMain.getPreferences().getRenameMovieFile()) {
          File oldMovieFile=guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList);
          Movie movie=guiMain.movieToWriteToDiskList.get(movieNumberInList);
          guiMain.getPreferences();
          String sanitizerString=MoviescraperPreferences.getSanitizerForFilename();
          guiMain.getPreferences();
          String renameString=MoviescraperPreferences.getRenamerString();
          Renamer renamer=new Renamer(renameString,sanitizerString,movie,oldMovieFile);
          String newMovieFilename=renamer.getNewFileName();
          System.out.println(""String_Node_Str"" + newMovieFilename);
          File newMovieFile=new File(newMovieFilename);
          boolean renameStatus=oldMovieFile.renameTo(newMovieFile);
          if (!renameStatus) {
            System.err.println(""String_Node_Str"" + oldMovieFile + ""String_Node_Str""+ newMovieFile);
          }
          guiMain.movieToWriteToDiskList.get(movieNumberInList).writeToFile(new File(Movie.getFileNameOfNfo(newMovieFile,guiMain.getPreferences().getNfoNamedMovieDotNfo())),new File(Movie.getFileNameOfPoster(newMovieFile,guiMain.getPreferences().getNoMovieNameInImageFiles())),new File(Movie.getFileNameOfFanart(newMovieFile,guiMain.getPreferences().getNoMovieNameInImageFiles())),new File(Movie.getFileNameOfFolderJpg(newMovieFile)),new File(Movie.getFileNameOfExtraFanartFolderName(newMovieFile)),new File(Movie.getFileNameOfTrailer(newMovieFile)),guiMain.getPreferences());
        }
 else {
          guiMain.movieToWriteToDiskList.get(movieNumberInList).writeToFile(guiMain.getCurrentlySelectedNfoFileList().get(movieNumberInList),guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList),guiMain.getCurrentlySelectedFanartFileList().get(movieNumberInList),guiMain.getCurrentlySelectedFolderJpgFileList().get(movieNumberInList),new File(Movie.getFileNameOfExtraFanartFolderName(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList))),new File(Movie.getFileNameOfTrailer(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList))),guiMain.getPreferences());
        }
        if (guiMain.getPreferences().getExtraFanartScrapingEnabledPreference() && guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).isDirectory()) {
          guiMain.movieToWriteToDiskList.get(movieNumberInList).writeExtraFanart(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
        }
      }
      if (guiMain.getPreferences().getDownloadActorImagesToActorFolderPreference() && guiMain.getCurrentlySelectedMovieFileList() != null && guiMain.getCurrentlySelectedDirectoryList() != null) {
        guiMain.movieToWriteToDiskList.get(movieNumberInList).writeActorImagesToFolder(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
      }
      System.out.println(""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
      guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
    }
 finally {
      guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
    }
  }
  return null;
}","@Override protected Void doInBackground() throws Exception {
  for (int movieNumberInList=0; movieNumberInList < guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    try {
      guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      if (guiMain.movieToWriteToDiskList == null) {
        System.err.println(""String_Node_Str"");
      }
      if (guiMain.movieToWriteToDiskList.get(movieNumberInList) == null) {
        System.out.println(""String_Node_Str"");
        continue;
      }
      System.out.println(""String_Node_Str"" + guiMain.movieToWriteToDiskList);
      if (guiMain.movieToWriteToDiskList != null) {
        if (guiMain.getPreferences().getRenameMovieFile()) {
          File oldMovieFile=guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList);
          Movie movie=guiMain.movieToWriteToDiskList.get(movieNumberInList);
          String sanitizerString=MoviescraperPreferences.getSanitizerForFilename();
          String renameString=MoviescraperPreferences.getRenamerString();
          Renamer renamer=new Renamer(renameString,sanitizerString,movie,oldMovieFile);
          String newMovieFilename=renamer.getNewFileName();
          System.out.println(""String_Node_Str"" + newMovieFilename);
          File newMovieFile=new File(newMovieFilename);
          boolean renameStatus=oldMovieFile.renameTo(newMovieFile);
          if (!renameStatus) {
            System.err.println(""String_Node_Str"" + oldMovieFile + ""String_Node_Str""+ newMovieFile);
          }
          guiMain.movieToWriteToDiskList.get(movieNumberInList).writeToFile(new File(Movie.getFileNameOfNfo(newMovieFile,guiMain.getPreferences().getNfoNamedMovieDotNfo())),new File(Movie.getFileNameOfPoster(newMovieFile,guiMain.getPreferences().getNoMovieNameInImageFiles())),new File(Movie.getFileNameOfFanart(newMovieFile,guiMain.getPreferences().getNoMovieNameInImageFiles())),new File(Movie.getFileNameOfFolderJpg(newMovieFile)),new File(Movie.getFileNameOfExtraFanartFolderName(newMovieFile)),new File(Movie.getFileNameOfTrailer(newMovieFile)),guiMain.getPreferences());
        }
 else {
          guiMain.movieToWriteToDiskList.get(movieNumberInList).writeToFile(guiMain.getCurrentlySelectedNfoFileList().get(movieNumberInList),guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList),guiMain.getCurrentlySelectedFanartFileList().get(movieNumberInList),guiMain.getCurrentlySelectedFolderJpgFileList().get(movieNumberInList),new File(Movie.getFileNameOfExtraFanartFolderName(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList))),new File(Movie.getFileNameOfTrailer(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList))),guiMain.getPreferences());
        }
        if (guiMain.getPreferences().getExtraFanartScrapingEnabledPreference() && guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).isDirectory()) {
          guiMain.movieToWriteToDiskList.get(movieNumberInList).writeExtraFanart(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
        }
      }
      if (guiMain.getPreferences().getDownloadActorImagesToActorFolderPreference() && guiMain.getCurrentlySelectedMovieFileList() != null && guiMain.getCurrentlySelectedDirectoryList() != null) {
        guiMain.movieToWriteToDiskList.get(movieNumberInList).writeActorImagesToFolder(guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
      }
      System.out.println(""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
      guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
    }
 finally {
      guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
    }
  }
  return null;
}",0.9769962982548916
165471,"private String renameReplaceAll(String replacementString,String tagName,String movieContentOfTag){
  String replacedString=replacementString;
  if (replacedString.contains(tagName))   replacedString=replacedString.replaceAll(tagName,movieContentOfTag);
  if (movieContentOfTag == null || movieContentOfTag.trim().equals(""String_Node_Str"")) {
    replacedString=replacedString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return replacedString;
}","private String renameReplaceAll(String replacementString,String tagName,String movieContentOfTag){
  String replacedString=replacementString;
  if (replacedString.contains(tagName)) {
    replacedString=StringUtils.replace(replacedString,tagName,movieContentOfTag);
  }
  if (movieContentOfTag == null || movieContentOfTag.trim().equals(""String_Node_Str"")) {
    replacedString=replacedString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return replacedString;
}",0.9277238403451996
165472,"@Override public Year scrapeYear(){
  Element releaseDateElement=document.select(""String_Node_Str"").first();
  if (releaseDateElement != null & releaseDateElement.text().contains(""String_Node_Str""))   releaseDateElement=document.select(""String_Node_Str"").first();
  if (releaseDateElement != null) {
    String releaseDateText=releaseDateElement.text().trim();
    if (releaseDateText.length() >= 4) {
      releaseDateText=releaseDateText.substring(releaseDateText.length() - 4,releaseDateText.length());
      return new Year(releaseDateText);
    }
  }
  return Year.BLANK_YEAR;
}","@Override public Year scrapeYear(){
  return scrapeReleaseDate().getYear();
}",0.1969696969696969
165473,"@Override public ReleaseDate scrapeReleaseDate(){
  Element releaseDateElement=document.select(""String_Node_Str"").first();
  if (releaseDateElement != null & releaseDateElement.text().contains(""String_Node_Str""))   releaseDateElement=document.select(""String_Node_Str"").first();
  if (releaseDateElement != null) {
    String releaseDateText=releaseDateElement.text().trim();
    if (releaseDateText.length() > 4) {
      return new ReleaseDate(releaseDateText,data18ReleaseDateFormat);
    }
  }
  return ReleaseDate.BLANK_RELEASEDATE;
}","@Override public ReleaseDate scrapeReleaseDate(){
  SimpleDateFormat dateFormatToUse=data18ReleaseDateFormat;
  Element releaseDateElement=document.select(""String_Node_Str"").first();
  if ((releaseDateElement != null && releaseDateElement.text() != null && releaseDateElement.text().contains(""String_Node_Str"")) || releaseDateElement == null) {
    releaseDateElement=document.select(""String_Node_Str"").first();
    dateFormatToUse=new SimpleDateFormat(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + releaseDateElement);
  if (releaseDateElement != null) {
    String releaseDateText=releaseDateElement.text().trim();
    if (releaseDateText.length() > 4) {
      return new ReleaseDate(releaseDateText,dateFormatToUse);
    }
  }
  return ReleaseDate.BLANK_RELEASEDATE;
}",0.1959306706857573
165474,"protected void readMovieFromNfoFile(File nfoFile){
  FileInputStream fisTargetFile=null;
  try {
    fisTargetFile=new FileInputStream(nfoFile);
    String targetFileStr=IOUtils.toString(fisTargetFile,""String_Node_Str"");
    if (targetFileStr.contains(""String_Node_Str"")) {
      while (targetFileStr.length() > 0 && !targetFileStr.startsWith(""String_Node_Str"")) {
        if (targetFileStr.length() > 1) {
          targetFileStr=targetFileStr.substring(1,targetFileStr.length());
        }
 else         break;
      }
    }
    XbmcXmlMovieBean xmlMovieBean=XbmcXmlMovieBean.makeFromXML(targetFileStr);
    if (xmlMovieBean != null) {
      Movie movieFromNfo=xmlMovieBean.toMovie();
      guiMain.movieToWriteToDiskList.add(movieFromNfo);
      if (guiMain.getCurrentlySelectedPosterFileList().get(0).exists()) {
        Thumb[] currentPosters=guiMain.movieToWriteToDiskList.get(0).getPosters();
        Thumb fileFromDisk;
        if (currentPosters.length > 0 && currentPosters[0] != null && currentPosters[0].getThumbURL() != null)         fileFromDisk=new Thumb(guiMain.getCurrentlySelectedPosterFileList().get(0),currentPosters[0].getThumbURL().toString());
 else {
          fileFromDisk=new Thumb(guiMain.getCurrentlySelectedPosterFileList().get(0));
          currentPosters=new Thumb[1];
        }
        currentPosters[0]=fileFromDisk;
      }
 else       if (guiMain.movieToWriteToDiskList.get(0).hasPoster()) {
      }
    }
  }
 catch (  FileNotFoundException e) {
    JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
 finally {
    try {
      fisTargetFile.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      guiMain.updateAllFieldsOfFileDetailPanel(false,false);
    }
  }
}","protected void readMovieFromNfoFile(File nfoFile){
  FileInputStream fisTargetFile=null;
  try {
    fisTargetFile=new FileInputStream(nfoFile);
    String targetFileStr=IOUtils.toString(fisTargetFile,""String_Node_Str"");
    if (targetFileStr.contains(""String_Node_Str"")) {
      while (targetFileStr.length() > 0 && !targetFileStr.startsWith(""String_Node_Str"")) {
        if (targetFileStr.length() > 1) {
          targetFileStr=targetFileStr.substring(1,targetFileStr.length());
        }
 else         break;
      }
    }
    XbmcXmlMovieBean xmlMovieBean=XbmcXmlMovieBean.makeFromXML(targetFileStr);
    if (xmlMovieBean != null) {
      Movie movieFromNfo=xmlMovieBean.toMovie();
      guiMain.movieToWriteToDiskList.add(movieFromNfo);
      if (guiMain.getCurrentlySelectedPosterFileList().get(0).exists()) {
        Thumb[] currentPosters=guiMain.movieToWriteToDiskList.get(0).getPosters();
        File currentPosterFile=guiMain.getCurrentlySelectedPosterFileList().get(0);
        Thumb thumbFromDisk;
        if (currentPosterFile != null) {
          if (currentPosters.length > 0 && guiMain.getCurrentlySelectedPosterFileList().size() > 0 && currentPosters[0] != null && currentPosters[0].getThumbURL() != null)           thumbFromDisk=new Thumb(guiMain.getCurrentlySelectedPosterFileList().get(0),currentPosters[0].getThumbURL().toString());
 else {
            thumbFromDisk=new Thumb(guiMain.getCurrentlySelectedPosterFileList().get(0));
            currentPosters=new Thumb[1];
          }
          currentPosters[0]=thumbFromDisk;
        }
      }
 else       if (guiMain.movieToWriteToDiskList.get(0).hasPoster()) {
      }
    }
  }
 catch (  FileNotFoundException e) {
    JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
 finally {
    try {
      fisTargetFile.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      guiMain.updateAllFieldsOfFileDetailPanel(false,false);
    }
  }
}",0.9425723777883246
165475,"private void updatePosterAndFanartSizes(){
  updatingPosterAndFanartSizes=true;
  BufferedImage fanartImg=(BufferedImage)(fanartImage);
  if (fanartImg != null) {
    BufferedImage fanartScaledImage=ArtWorkPanel.resizeToFanart(fanartImg);
    this.setNewFanart(fanartScaledImage,false);
  }
  BufferedImage posterImg=(BufferedImage)(posterImage);
  BufferedImage posterScaledImage=ArtWorkPanel.resizeToPoster(posterImg);
  this.setNewPoster(posterScaledImage,false);
}","private void updatePosterAndFanartSizes(){
  updatingPosterAndFanartSizes=true;
  BufferedImage fanartImg=(BufferedImage)(fanartImage);
  if (fanartImg != null) {
    BufferedImage fanartScaledImage=ArtWorkPanel.resizeToFanart(fanartImg);
    this.setNewFanart(fanartScaledImage,false);
  }
  BufferedImage posterImg=Thumb.convertToBufferedImage(posterImage);
  BufferedImage posterScaledImage=ArtWorkPanel.resizeToPoster(posterImg);
  this.setNewPoster(posterScaledImage,false);
}",0.8746048472075869
165476,"@Override public ReleaseDate scrapeReleaseDate(){
  SimpleDateFormat dateFormatToUse=data18ReleaseDateFormat;
  Element releaseDateElement=document.select(""String_Node_Str"").first();
  if ((releaseDateElement != null && releaseDateElement.text() != null && releaseDateElement.text().contains(""String_Node_Str"")) || releaseDateElement == null) {
    releaseDateElement=document.select(""String_Node_Str"").first();
    dateFormatToUse=new SimpleDateFormat(""String_Node_Str"");
  }
  if (releaseDateElement != null) {
    String releaseDateText=releaseDateElement.text().trim();
    if (releaseDateText.length() > 4) {
      return new ReleaseDate(releaseDateText,dateFormatToUse);
    }
  }
  return ReleaseDate.BLANK_RELEASEDATE;
}","@Override public ReleaseDate scrapeReleaseDate(){
  SimpleDateFormat dateFormatToUse=data18ReleaseDateFormat;
  Element releaseDateElement=document.select(""String_Node_Str"").first();
  if ((releaseDateElement != null && releaseDateElement.text() != null && releaseDateElement.text().contains(""String_Node_Str"")) || releaseDateElement == null) {
    releaseDateElement=document.select(""String_Node_Str"").first();
    dateFormatToUse=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
  }
  if (releaseDateElement != null) {
    String releaseDateText=releaseDateElement.text().trim();
    if (releaseDateText.length() > 4) {
      return new ReleaseDate(releaseDateText,dateFormatToUse);
    }
  }
  return ReleaseDate.BLANK_RELEASEDATE;
}",0.989802855200544
165477,"@Override public ReleaseDate scrapeReleaseDate(){
  Element releaseDateElement=document.select(""String_Node_Str"").first();
  if (releaseDateElement != null) {
    ReleaseDate releaseDate=new ReleaseDate(releaseDateElement.text(),new SimpleDateFormat(""String_Node_Str""));
    return releaseDate;
  }
  return ReleaseDate.BLANK_RELEASEDATE;
}","@Override public ReleaseDate scrapeReleaseDate(){
  Element releaseDateElement=document.select(""String_Node_Str"").first();
  if (releaseDateElement != null) {
    ReleaseDate releaseDate=new ReleaseDate(releaseDateElement.text(),new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH));
    return releaseDate;
  }
  return ReleaseDate.BLANK_RELEASEDATE;
}",0.9784172661870504
165478,"public static void main(String[] args){
  ReleaseDate christmasDay=new ReleaseDate(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + christmasDay);
  System.out.println(""String_Node_Str"" + christmasDay.isReleaseDateFormattedCorrectly());
  System.out.println(""String_Node_Str"" + christmasDay.getMonth() + ""String_Node_Str""+ christmasDay.getYear()+ ""String_Node_Str""+ christmasDay.getDay());
  System.out.println(""String_Node_Str"");
  ReleaseDate newYear=new ReleaseDate(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str""));
  System.out.println(newYear);
}","public static void main(String[] args){
  ReleaseDate christmasDay=new ReleaseDate(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + christmasDay);
  System.out.println(""String_Node_Str"" + christmasDay.isReleaseDateFormattedCorrectly());
  System.out.println(""String_Node_Str"" + christmasDay.getMonth() + ""String_Node_Str""+ christmasDay.getYear()+ ""String_Node_Str""+ christmasDay.getDay());
  System.out.println(""String_Node_Str"");
  ReleaseDate newYear=new ReleaseDate(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH));
  System.out.println(newYear);
}",0.9870801033591732
165479,"private String renameReplaceAll(String replacementString,String tagName,String movieContentOfTag){
  String replacedString=replacementString;
  if (replacedString.contains(tagName)) {
    replacedString=StringUtils.replace(replacedString,tagName,movieContentOfTag);
  }
  if (movieContentOfTag == null || movieContentOfTag.trim().equals(""String_Node_Str"")) {
    replacedString=replacedString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return replacedString;
}","private String renameReplaceAll(String replacementString,String tagName,String movieContentOfTag){
  String replacedString=replacementString;
  if (movieContentOfTag == null) {
    replacedString=replacedString.replace(tagName,""String_Node_Str"");
  }
  if (replacedString.contains(tagName)) {
    replacedString=StringUtils.replace(replacedString,tagName,movieContentOfTag);
  }
  if (movieContentOfTag == null || movieContentOfTag.trim().equals(""String_Node_Str"")) {
    replacedString=replacedString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return replacedString;
}",0.8964862298195632
165480,"/** 
 * Create the frame.
 */
public RenamerGUI(final MoviescraperPreferences preferences,Movie sampleMovie){
  System.out.println(""String_Node_Str"" + sampleMovie);
  this.sampleMovie=sampleMovie;
  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  setBounds(100,100,800,600);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  setContentPane(contentPane);
  GridBagLayout gbl_contentPane=new GridBagLayout();
  gbl_contentPane.columnWidths=new int[]{0,0,0};
  gbl_contentPane.rowHeights=new int[]{0,0,0,0,0};
  gbl_contentPane.columnWeights=new double[]{0.0,1.0,Double.MIN_VALUE};
  gbl_contentPane.rowWeights=new double[]{0.0,0.0,0.0,0.0,1.0,0.0};
  contentPane.setLayout(gbl_contentPane);
  JLabel lblRenamestring=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblRenamestring=new GridBagConstraints();
  gbc_lblRenamestring.insets=new Insets(0,0,5,5);
  gbc_lblRenamestring.anchor=GridBagConstraints.EAST;
  gbc_lblRenamestring.gridx=0;
  gbc_lblRenamestring.gridy=0;
  contentPane.add(lblRenamestring,gbc_lblRenamestring);
  textFieldRenameString=new JTextField(MoviescraperPreferences.getRenamerString());
  GridBagConstraints gbc_textFieldRenameString=new GridBagConstraints();
  gbc_textFieldRenameString.insets=new Insets(0,0,5,0);
  gbc_textFieldRenameString.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldRenameString.gridx=1;
  gbc_textFieldRenameString.gridy=0;
  contentPane.add(textFieldRenameString,gbc_textFieldRenameString);
  textFieldRenameString.setColumns(10);
  textFieldRenameString.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      preferences.setRenamerString(textFieldRenameString.getText());
      updateExample();
    }
  }
);
  JLabel lblAvailableString=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblavailablestring=new GridBagConstraints();
  gbc_lblavailablestring.insets=new Insets(0,0,5,5);
  gbc_lblavailablestring.anchor=GridBagConstraints.EAST;
  gbc_lblavailablestring.gridx=0;
  gbc_lblavailablestring.gridy=1;
  contentPane.add(lblAvailableString,gbc_lblavailablestring);
  JTextField availbleTagsTextField=new JTextField(Renamer.getAvailableTags());
  availbleTagsTextField.setEditable(false);
  GridBagConstraints gbc_textFieldRenameStringTwo=new GridBagConstraints();
  gbc_textFieldRenameStringTwo.insets=new Insets(0,0,5,0);
  gbc_textFieldRenameStringTwo.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldRenameStringTwo.gridx=1;
  gbc_textFieldRenameStringTwo.gridy=1;
  contentPane.add(availbleTagsTextField,gbc_textFieldRenameStringTwo);
  availbleTagsTextField.setColumns(10);
  JLabel lblSanitizerString=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSanitizerString=new GridBagConstraints();
  gbc_lblSanitizerString.insets=new Insets(0,0,5,5);
  gbc_lblSanitizerString.anchor=GridBagConstraints.EAST;
  gbc_lblSanitizerString.gridx=0;
  gbc_lblSanitizerString.gridy=2;
  contentPane.add(lblSanitizerString,gbc_lblSanitizerString);
  textFieldSanitizerString=new JTextField(MoviescraperPreferences.getSanitizerForFilename());
  GridBagConstraints gbc_textFieldSanitizerString=new GridBagConstraints();
  gbc_textFieldSanitizerString.insets=new Insets(0,0,5,0);
  gbc_textFieldSanitizerString.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldSanitizerString.gridx=1;
  gbc_textFieldSanitizerString.gridy=2;
  contentPane.add(textFieldSanitizerString,gbc_textFieldSanitizerString);
  textFieldSanitizerString.setColumns(10);
  textFieldSanitizerString.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      preferences.setSanitizerForFilename(textFieldSanitizerString.getText());
      updateExample();
    }
  }
);
  lblExample=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblExample=new GridBagConstraints();
  gbc_lblExample.anchor=GridBagConstraints.EAST;
  gbc_lblExample.insets=new Insets(0,0,5,5);
  gbc_lblExample.gridx=0;
  gbc_lblExample.gridy=3;
  contentPane.add(lblExample,gbc_lblExample);
  textFieldExample=new JTextField();
  textFieldExample.setEditable(false);
  GridBagConstraints gbc_textFieldExample=new GridBagConstraints();
  gbc_textFieldExample.insets=new Insets(0,0,5,0);
  gbc_textFieldExample.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldExample.gridx=1;
  gbc_textFieldExample.gridy=3;
  contentPane.add(textFieldExample,gbc_textFieldExample);
  textFieldExample.setColumns(10);
  fileDetailPanel=new FileDetailPanel(preferences,new GUIMain());
  fileDetailPanel.hideArtworkPanel();
  scrollPane=new JScrollPane();
  scrollPane.setViewportView(fileDetailPanel);
  GridBagConstraints gbc_scrollPane=new GridBagConstraints();
  gbc_scrollPane.insets=new Insets(0,0,5,0);
  gbc_scrollPane.gridwidth=3;
  gbc_scrollPane.fill=GridBagConstraints.BOTH;
  gbc_scrollPane.gridx=0;
  gbc_scrollPane.gridy=4;
  contentPane.add(scrollPane,gbc_scrollPane);
  panel=new JPanel();
  GridBagConstraints gbc_panel=new GridBagConstraints();
  gbc_panel.gridwidth=2;
  gbc_panel.gridx=0;
  gbc_panel.gridy=5;
  contentPane.add(panel,gbc_panel);
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  btnOk=new JButton(""String_Node_Str"");
  panel.add(btnOk);
  btnOk.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Settings.savePreferences();
      RenamerGUI.this.dispose();
    }
  }
);
  btnCancel=new JButton(""String_Node_Str"");
  panel.add(btnCancel);
  btnCancel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RenamerGUI.this.dispose();
    }
  }
);
  fileDetailPanel.setNewMovie(getFakeMovie(),false);
  updateExample();
  this.setVisible(true);
}","/** 
 * Create the frame.
 */
public RenamerGUI(final MoviescraperPreferences preferences,Movie sampleMovie){
  System.out.println(""String_Node_Str"" + sampleMovie);
  this.sampleMovie=sampleMovie;
  if (this.sampleMovie == null)   this.sampleMovie=getFakeMovie();
  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  setBounds(100,100,800,600);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  setContentPane(contentPane);
  GridBagLayout gbl_contentPane=new GridBagLayout();
  gbl_contentPane.columnWidths=new int[]{0,0,0};
  gbl_contentPane.rowHeights=new int[]{0,0,0,0,0};
  gbl_contentPane.columnWeights=new double[]{0.0,1.0,Double.MIN_VALUE};
  gbl_contentPane.rowWeights=new double[]{0.0,0.0,0.0,0.0,1.0,0.0};
  contentPane.setLayout(gbl_contentPane);
  JLabel lblRenamestring=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblRenamestring=new GridBagConstraints();
  gbc_lblRenamestring.insets=new Insets(0,0,5,5);
  gbc_lblRenamestring.anchor=GridBagConstraints.EAST;
  gbc_lblRenamestring.gridx=0;
  gbc_lblRenamestring.gridy=0;
  contentPane.add(lblRenamestring,gbc_lblRenamestring);
  textFieldRenameString=new JTextField(MoviescraperPreferences.getRenamerString());
  GridBagConstraints gbc_textFieldRenameString=new GridBagConstraints();
  gbc_textFieldRenameString.insets=new Insets(0,0,5,0);
  gbc_textFieldRenameString.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldRenameString.gridx=1;
  gbc_textFieldRenameString.gridy=0;
  contentPane.add(textFieldRenameString,gbc_textFieldRenameString);
  textFieldRenameString.setColumns(10);
  textFieldRenameString.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      preferences.setRenamerString(textFieldRenameString.getText());
      updateExample();
    }
  }
);
  JLabel lblAvailableString=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblavailablestring=new GridBagConstraints();
  gbc_lblavailablestring.insets=new Insets(0,0,5,5);
  gbc_lblavailablestring.anchor=GridBagConstraints.EAST;
  gbc_lblavailablestring.gridx=0;
  gbc_lblavailablestring.gridy=1;
  contentPane.add(lblAvailableString,gbc_lblavailablestring);
  JTextField availbleTagsTextField=new JTextField(Renamer.getAvailableTags());
  availbleTagsTextField.setEditable(false);
  GridBagConstraints gbc_textFieldRenameStringTwo=new GridBagConstraints();
  gbc_textFieldRenameStringTwo.insets=new Insets(0,0,5,0);
  gbc_textFieldRenameStringTwo.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldRenameStringTwo.gridx=1;
  gbc_textFieldRenameStringTwo.gridy=1;
  contentPane.add(availbleTagsTextField,gbc_textFieldRenameStringTwo);
  availbleTagsTextField.setColumns(10);
  JLabel lblSanitizerString=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSanitizerString=new GridBagConstraints();
  gbc_lblSanitizerString.insets=new Insets(0,0,5,5);
  gbc_lblSanitizerString.anchor=GridBagConstraints.EAST;
  gbc_lblSanitizerString.gridx=0;
  gbc_lblSanitizerString.gridy=2;
  contentPane.add(lblSanitizerString,gbc_lblSanitizerString);
  textFieldSanitizerString=new JTextField(MoviescraperPreferences.getSanitizerForFilename());
  GridBagConstraints gbc_textFieldSanitizerString=new GridBagConstraints();
  gbc_textFieldSanitizerString.insets=new Insets(0,0,5,0);
  gbc_textFieldSanitizerString.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldSanitizerString.gridx=1;
  gbc_textFieldSanitizerString.gridy=2;
  contentPane.add(textFieldSanitizerString,gbc_textFieldSanitizerString);
  textFieldSanitizerString.setColumns(10);
  textFieldSanitizerString.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      preferences.setSanitizerForFilename(textFieldSanitizerString.getText());
      updateExample();
    }
  }
);
  lblExample=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblExample=new GridBagConstraints();
  gbc_lblExample.anchor=GridBagConstraints.EAST;
  gbc_lblExample.insets=new Insets(0,0,5,5);
  gbc_lblExample.gridx=0;
  gbc_lblExample.gridy=3;
  contentPane.add(lblExample,gbc_lblExample);
  textFieldExample=new JTextField();
  textFieldExample.setEditable(false);
  GridBagConstraints gbc_textFieldExample=new GridBagConstraints();
  gbc_textFieldExample.insets=new Insets(0,0,5,0);
  gbc_textFieldExample.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldExample.gridx=1;
  gbc_textFieldExample.gridy=3;
  contentPane.add(textFieldExample,gbc_textFieldExample);
  textFieldExample.setColumns(10);
  fileDetailPanel=new FileDetailPanel(preferences,new GUIMain());
  fileDetailPanel.hideArtworkPanel();
  scrollPane=new JScrollPane();
  scrollPane.setViewportView(fileDetailPanel);
  GridBagConstraints gbc_scrollPane=new GridBagConstraints();
  gbc_scrollPane.insets=new Insets(0,0,5,0);
  gbc_scrollPane.gridwidth=3;
  gbc_scrollPane.fill=GridBagConstraints.BOTH;
  gbc_scrollPane.gridx=0;
  gbc_scrollPane.gridy=4;
  contentPane.add(scrollPane,gbc_scrollPane);
  panel=new JPanel();
  GridBagConstraints gbc_panel=new GridBagConstraints();
  gbc_panel.gridwidth=2;
  gbc_panel.gridx=0;
  gbc_panel.gridy=5;
  contentPane.add(panel,gbc_panel);
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  btnOk=new JButton(""String_Node_Str"");
  panel.add(btnOk);
  btnOk.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Settings.savePreferences();
      RenamerGUI.this.dispose();
    }
  }
);
  btnCancel=new JButton(""String_Node_Str"");
  panel.add(btnCancel);
  btnCancel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RenamerGUI.this.dispose();
    }
  }
);
  fileDetailPanel.setNewMovie(getFakeMovie(),false,true);
  updateExample();
  this.setVisible(true);
}",0.992868324926074
165481,"@Override public ArrayList<Genre> scrapeGenres(){
  ArrayList<Genre> genreList=new ArrayList<Genre>();
  Elements genreElements=document.select(""String_Node_Str"");
  if (genreElements != null) {
    for (    Element currentGenreElement : genreElements) {
      String genreText=currentGenreElement.text().trim();
      if (genreText != null && genreText.length() > 0)       genreList.add(new Genre(genreText));
    }
  }
  return genreList;
}","@Override public ArrayList<Genre> scrapeGenres(){
  ArrayList<Genre> genreList=new ArrayList<Genre>();
  Elements genreElements=document.select(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + genreElements);
  if (genreElements != null) {
    for (    Element currentGenreElement : genreElements) {
      String genreText=currentGenreElement.text().trim();
      if (genreText != null && genreText.length() > 0)       genreList.add(new Genre(genreText));
    }
  }
  return genreList;
}",0.9394261424017004
165482,"private JPanel initializeInnerFrame(Actor actorToInitializeFieldsWith){
  JPanel innerPanel=new JPanel();
  GridBagLayout gridBagLayout=new GridBagLayout();
  gridBagLayout.columnWeights=new double[]{0.0,1.0};
  innerPanel.setLayout(gridBagLayout);
  JLabel lblActor=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblActor=new GridBagConstraints();
  gbc_lblActor.anchor=GridBagConstraints.EAST;
  gbc_lblActor.insets=new Insets(0,0,5,5);
  gbc_lblActor.gridx=0;
  gbc_lblActor.gridy=0;
  innerPanel.add(lblActor,gbc_lblActor);
  textFieldActor=new JTextField();
  if (actorToInitializeFieldsWith.getName() != null && actorToInitializeFieldsWith.getName().length() > 0) {
    textFieldActor.setText(actorToInitializeFieldsWith.getName());
  }
  GridBagConstraints gbc_textFieldActor=new GridBagConstraints();
  gbc_textFieldActor.insets=new Insets(0,0,5,0);
  gbc_textFieldActor.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldActor.gridx=1;
  gbc_textFieldActor.gridy=0;
  innerPanel.add(textFieldActor,gbc_textFieldActor);
  textFieldActor.setColumns(10);
  JLabel lblActorRole=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblActorRole=new GridBagConstraints();
  gbc_lblActorRole.anchor=GridBagConstraints.EAST;
  gbc_lblActorRole.insets=new Insets(0,0,5,5);
  gbc_lblActorRole.gridx=0;
  gbc_lblActorRole.gridy=1;
  innerPanel.add(lblActorRole,gbc_lblActorRole);
  textFieldActorRole=new JTextField();
  if (actorToInitializeFieldsWith.getRole() != null && actorToInitializeFieldsWith.getRole().length() > 0) {
    textFieldActorRole.setText(actorToInitializeFieldsWith.getRole());
  }
  GridBagConstraints gbc_textFieldActorRole=new GridBagConstraints();
  gbc_textFieldActorRole.insets=new Insets(0,0,5,0);
  gbc_textFieldActorRole.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldActorRole.gridx=1;
  gbc_textFieldActorRole.gridy=1;
  innerPanel.add(textFieldActorRole,gbc_textFieldActorRole);
  textFieldActor.setColumns(10);
  JLabel lblNewLabel=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblNewLabel=new GridBagConstraints();
  gbc_lblNewLabel.anchor=GridBagConstraints.EAST;
  gbc_lblNewLabel.insets=new Insets(0,0,5,5);
  gbc_lblNewLabel.gridx=0;
  gbc_lblNewLabel.gridy=2;
  innerPanel.add(lblNewLabel,gbc_lblNewLabel);
  textFieldURL=new JTextField();
  if (actorToInitializeFieldsWith.getThumb() != null && actorToInitializeFieldsWith.getThumb().getThumbURL().toString().length() > 0) {
    textFieldURL.setText(actorToInitializeFieldsWith.getThumb().getThumbURL().toString());
  }
  GridBagConstraints gbc_textFieldURL=new GridBagConstraints();
  gbc_textFieldURL.insets=new Insets(0,0,5,0);
  gbc_textFieldURL.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldURL.gridx=1;
  gbc_textFieldURL.gridy=2;
  innerPanel.add(textFieldURL,gbc_textFieldURL);
  textFieldURL.setColumns(10);
  return innerPanel;
}","private JPanel initializeInnerFrame(Actor actorToInitializeFieldsWith){
  JPanel innerPanel=new JPanel();
  GridBagLayout gridBagLayout=new GridBagLayout();
  gridBagLayout.columnWeights=new double[]{0.0,1.0};
  innerPanel.setLayout(gridBagLayout);
  JLabel lblActor=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblActor=new GridBagConstraints();
  gbc_lblActor.anchor=GridBagConstraints.EAST;
  gbc_lblActor.insets=new Insets(0,0,5,5);
  gbc_lblActor.gridx=0;
  gbc_lblActor.gridy=0;
  innerPanel.add(lblActor,gbc_lblActor);
  textFieldActor=new JTextField();
  if (actorToInitializeFieldsWith.getName() != null && actorToInitializeFieldsWith.getName().length() > 0) {
    textFieldActor.setText(actorToInitializeFieldsWith.getName());
  }
  GridBagConstraints gbc_textFieldActor=new GridBagConstraints();
  gbc_textFieldActor.insets=new Insets(0,0,5,0);
  gbc_textFieldActor.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldActor.gridx=1;
  gbc_textFieldActor.gridy=0;
  innerPanel.add(textFieldActor,gbc_textFieldActor);
  textFieldActor.setColumns(10);
  JLabel lblActorRole=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblActorRole=new GridBagConstraints();
  gbc_lblActorRole.anchor=GridBagConstraints.EAST;
  gbc_lblActorRole.insets=new Insets(0,0,5,5);
  gbc_lblActorRole.gridx=0;
  gbc_lblActorRole.gridy=1;
  innerPanel.add(lblActorRole,gbc_lblActorRole);
  textFieldActorRole=new JTextField();
  if (actorToInitializeFieldsWith.getRole() != null && actorToInitializeFieldsWith.getRole().length() > 0) {
    textFieldActorRole.setText(actorToInitializeFieldsWith.getRole());
  }
  GridBagConstraints gbc_textFieldActorRole=new GridBagConstraints();
  gbc_textFieldActorRole.insets=new Insets(0,0,5,0);
  gbc_textFieldActorRole.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldActorRole.gridx=1;
  gbc_textFieldActorRole.gridy=1;
  innerPanel.add(textFieldActorRole,gbc_textFieldActorRole);
  textFieldActor.setColumns(10);
  JLabel lblNewLabel=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblNewLabel=new GridBagConstraints();
  gbc_lblNewLabel.anchor=GridBagConstraints.EAST;
  gbc_lblNewLabel.insets=new Insets(0,0,5,5);
  gbc_lblNewLabel.gridx=0;
  gbc_lblNewLabel.gridy=2;
  innerPanel.add(lblNewLabel,gbc_lblNewLabel);
  textFieldURL=new JTextField();
  if (actorToInitializeFieldsWith.getThumb() != null && actorToInitializeFieldsWith.getThumb().getThumbURL() != null && actorToInitializeFieldsWith.getThumb().getThumbURL().toString().length() > 0) {
    textFieldURL.setText(actorToInitializeFieldsWith.getThumb().getThumbURL().toString());
  }
  GridBagConstraints gbc_textFieldURL=new GridBagConstraints();
  gbc_textFieldURL.insets=new Insets(0,0,5,0);
  gbc_textFieldURL.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldURL.gridx=1;
  gbc_textFieldURL.gridy=2;
  innerPanel.add(textFieldURL,gbc_textFieldURL);
  textFieldURL.setColumns(10);
  return innerPanel;
}",0.9889311656866135
165483,"public SelectScrapersDialog(JFrame parent,List<String> options,List<String> selected){
  this.checkboxes=new ArrayList<>();
  this.selected=selected;
  this.panel=Box.createVerticalBox();
  JLabel helpLabel=new JLabel(""String_Node_Str"");
  Font baseFont=helpLabel.getFont().deriveFont(Font.PLAIN);
  panel.add(helpLabel);
  this.parent=parent;
  for (  String option : options) {
    boolean isSelected=selected.contains(option);
    JCheckBox cb=new JCheckBox(option,isSelected);
    checkboxes.add(cb);
    panel.add(cb);
  }
}","public SelectScrapersDialog(JFrame parent,List<String> options,List<String> selected){
  this.checkboxes=new ArrayList<>();
  this.selected=selected;
  this.panel=Box.createVerticalBox();
  JLabel helpLabel=new JLabel(""String_Node_Str"");
  panel.add(helpLabel);
  this.parent=parent;
  for (  String option : options) {
    boolean isSelected=selected.contains(option);
    JCheckBox cb=new JCheckBox(option,isSelected);
    checkboxes.add(cb);
    panel.add(cb);
  }
}",0.939879759519038
165484,"public void actionPerformed(ActionEvent arg0){
  for (int movieNumberInList=0; movieNumberInList < this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    if (this.guiMain.getCurrentlySelectedMovieFileList() != null) {
      try {
        Desktop.getDesktop().open(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
      }
 catch (      IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
}","public void actionPerformed(ActionEvent arg0){
  for (int movieNumberInList=0; movieNumberInList < this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    if (this.guiMain.getCurrentlySelectedMovieFileList() != null) {
      try {
        if (this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).exists()) {
          Desktop.getDesktop().open(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}",0.7546174142480211
165485,"public void actionPerformed(ActionEvent e){
  resetScrapeMovieActionCounters();
  this.guiMain.setMainGUIEnabled(false);
  this.guiMain.removeOldScrapedMovieReferences();
  clearOverrides();
  worker=new SwingWorker<Void,String>(){
    Movie javMovie=null;
    Movie data18Movie=null;
    @Override protected Void doInBackground(){
      for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
        if (this.isCancelled()) {
          System.err.println(""String_Node_Str"");
          cancelRunningThreads();
          return null;
        }
        final int movieNumberInListFinal=movieNumberInList;
        ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
        initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
        if (promptUserForURLWhenScraping && scrapeJAV) {
          try {
            DmmParsingProfile dmmParsingProfile=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
            if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
              setOverridenSearchResult(dmmParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
            }
            if (dmmParsingProfile.getOverridenSearchResult() != null) {
              overrideURLDMM=dmmParsingProfile.getOverridenSearchResult().toString();
            }
 else {
              String searchStringDMM=dmmParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
              SearchResult[] searchResultsDMM=dmmParsingProfile.getSearchResults(searchStringDMM);
              if (searchResultsDMM != null && searchResultsDMM.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
                if (searchResultFromUser != null)                 overrideURLDMM=searchResultFromUser.getUrlPath();
              }
            }
            if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
              JavLibraryParsingProfile javLibParsingProfile=new JavLibraryParsingProfile();
              if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
                setOverridenSearchResult(javLibParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
              }
              if (javLibParsingProfile.getOverridenSearchResult() != null) {
                overrideURLJavLibrary=javLibParsingProfile.getOverridenSearchResult().toString();
              }
 else {
                String searchStringJL=javLibParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
                SearchResult[] searchResultsJavLibStrings=javLibParsingProfile.getSearchResults(searchStringJL);
                if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
                  SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
                  if (searchResultFromUser != null)                   overrideURLJavLibrary=searchResultFromUser.getUrlPath();
                }
              }
            }
            if (overrideURLDMM == null && overrideURLJavLibrary == null)             continue;
          }
 catch (          IOException e2) {
            e2.printStackTrace();
          }
        }
 else         if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
          try {
            SiteParsingProfile data18ParsingProfile=null;
            if (scrapeData18Movie)             data18ParsingProfile=new Data18MovieParsingProfile();
 else             if (scrapeData18WebContent)             data18ParsingProfile=new Data18WebContentParsingProfile();
            if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
              setOverridenSearchResult(data18ParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
            }
            if (data18ParsingProfile.getOverridenSearchResult() != null) {
              overrideURLData18Movie=data18ParsingProfile.getOverridenSearchResult().toString();
            }
 else {
              String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
              SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
              if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
                if (searchResultFromUser == null)                 continue;
                overrideURLData18Movie=searchResultFromUser.getUrlPath();
              }
            }
            if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
              IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
              SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
              System.out.println(searchResultsIAFD);
              if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
                if (searchResultFromUser == null)                 continue;
                overrideURLIAFD=searchResultFromUser.getUrlPath();
                if (!overrideURLIAFD.contains(""String_Node_Str""))                 overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
                System.out.println(""String_Node_Str"" + overrideURLIAFD);
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
        }
        try {
          if (scrapeJAV)           javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else           if (scrapeData18Movie)           data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else           if (scrapeData18WebContent) {
            data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
          }
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        makeProgress(100,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void done(){
      guiMain.getProgressMonitor().stop();
      if (manuallyPickPoster && data18Movie != null && data18Movie.getPosters() != null && data18Movie.getPosters().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getPosters()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb posterPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (posterPicked != null) {
          ArrayList<Thumb> existingPosters=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getPosters()));
          existingPosters.remove(posterPicked);
          existingPosters.add(0,posterPicked);
          Thumb[] posterArray=new Thumb[existingPosters.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setPosters(existingPosters.toArray(posterArray));
        }
      }
      if (manuallyPickFanart && data18Movie != null && data18Movie.getFanart() != null && data18Movie.getFanart().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getFanart()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb fanartPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (fanartPicked != null) {
          ArrayList<Thumb> existingFanart=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getFanart()));
          existingFanart.remove(fanartPicked);
          existingFanart.add(0,fanartPicked);
          Thumb[] fanartArray=new Thumb[existingFanart.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setFanart(existingFanart.toArray(fanartArray));
        }
      }
 else       if (manuallyPickFanart && javMovie != null) {
        Thumb fanartPicked=showArtPicker(ArrayUtils.addAll(javMovie.getFanart(),javMovie.getExtraFanart()),""String_Node_Str"");
        if (fanartPicked != null)         javMovie.setFanart(ArrayUtils.toArray(fanartPicked));
      }
      if (!scrapeCanceled && (ScrapeMovieAction.this.guiMain.movieToWriteToDiskList == null || ScrapeMovieAction.this.guiMain.movieToWriteToDiskList.size() == 0)) {
        System.out.println(""String_Node_Str"");
        JOptionPane.showMessageDialog(ScrapeMovieAction.this.guiMain.getFrmMoviescraper(),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE,null);
      }
      clearOverrides();
      ScrapeMovieAction.this.guiMain.updateAllFieldsOfFileDetailPanel(true);
      ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
      ScrapeMovieAction.this.guiMain.setMainGUIEnabled(true);
    }
  }
;
  worker.execute();
}","public void actionPerformed(ActionEvent e){
  resetScrapeMovieActionCounters();
  this.guiMain.setMainGUIEnabled(false);
  this.guiMain.removeOldScrapedMovieReferences();
  clearOverrides();
  worker=new SwingWorker<Void,String>(){
    Movie javMovie=null;
    Movie data18Movie=null;
    @Override protected Void doInBackground(){
      for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
        if (this.isCancelled()) {
          System.err.println(""String_Node_Str"");
          cancelRunningThreads();
          return null;
        }
        final int movieNumberInListFinal=movieNumberInList;
        ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
        initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
        if (promptUserForURLWhenScraping && scrapeJAV) {
          try {
            DmmParsingProfile dmmParsingProfile=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
            if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
              setOverridenSearchResult(dmmParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
            }
            if (dmmParsingProfile.getOverridenSearchResult() != null) {
              overrideURLDMM=dmmParsingProfile.getOverridenSearchResult().toString();
            }
 else {
              String searchStringDMM=dmmParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
              SearchResult[] searchResultsDMM=dmmParsingProfile.getSearchResults(searchStringDMM);
              if (searchResultsDMM != null && searchResultsDMM.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
                if (searchResultFromUser != null)                 overrideURLDMM=searchResultFromUser.getUrlPath();
              }
            }
            if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
              JavLibraryParsingProfile javLibParsingProfile=new JavLibraryParsingProfile();
              if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
                setOverridenSearchResult(javLibParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
              }
              if (javLibParsingProfile.getOverridenSearchResult() != null) {
                overrideURLJavLibrary=javLibParsingProfile.getOverridenSearchResult().toString();
              }
 else {
                String searchStringJL=javLibParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
                SearchResult[] searchResultsJavLibStrings=javLibParsingProfile.getSearchResults(searchStringJL);
                if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
                  SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
                  if (searchResultFromUser != null)                   overrideURLJavLibrary=searchResultFromUser.getUrlPath();
                }
              }
            }
            if (overrideURLDMM == null && overrideURLJavLibrary == null)             continue;
          }
 catch (          IOException e2) {
            e2.printStackTrace();
          }
        }
 else         if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
          try {
            SiteParsingProfile data18ParsingProfile=null;
            if (scrapeData18Movie)             data18ParsingProfile=new Data18MovieParsingProfile();
 else             if (scrapeData18WebContent)             data18ParsingProfile=new Data18WebContentParsingProfile();
            if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
              setOverridenSearchResult(data18ParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
            }
            if (data18ParsingProfile.getOverridenSearchResult() != null) {
              overrideURLData18Movie=data18ParsingProfile.getOverridenSearchResult().toString();
            }
 else {
              String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
              SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
              if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
                if (searchResultFromUser == null)                 continue;
                overrideURLData18Movie=searchResultFromUser.getUrlPath();
              }
            }
            if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
              IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
              SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
              System.out.println(searchResultsIAFD);
              if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
                if (searchResultFromUser == null)                 continue;
                overrideURLIAFD=searchResultFromUser.getUrlPath();
                if (!overrideURLIAFD.contains(""String_Node_Str""))                 overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
                System.out.println(""String_Node_Str"" + overrideURLIAFD);
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
        }
        try {
          if (scrapeJAV)           javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else           if (scrapeData18Movie)           data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else           if (scrapeData18WebContent) {
            data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
          }
          clearOverrides();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
          clearOverrides();
        }
        makeProgress(100,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void done(){
      guiMain.getProgressMonitor().stop();
      if (manuallyPickPoster && data18Movie != null && data18Movie.getPosters() != null && data18Movie.getPosters().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getPosters()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb posterPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (posterPicked != null) {
          ArrayList<Thumb> existingPosters=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getPosters()));
          existingPosters.remove(posterPicked);
          existingPosters.add(0,posterPicked);
          Thumb[] posterArray=new Thumb[existingPosters.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setPosters(existingPosters.toArray(posterArray));
        }
      }
      if (manuallyPickFanart && data18Movie != null && data18Movie.getFanart() != null && data18Movie.getFanart().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getFanart()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb fanartPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (fanartPicked != null) {
          ArrayList<Thumb> existingFanart=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getFanart()));
          existingFanart.remove(fanartPicked);
          existingFanart.add(0,fanartPicked);
          Thumb[] fanartArray=new Thumb[existingFanart.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setFanart(existingFanart.toArray(fanartArray));
        }
      }
 else       if (manuallyPickFanart && javMovie != null) {
        Thumb fanartPicked=showArtPicker(ArrayUtils.addAll(javMovie.getFanart(),javMovie.getExtraFanart()),""String_Node_Str"");
        if (fanartPicked != null)         javMovie.setFanart(ArrayUtils.toArray(fanartPicked));
      }
      if (!scrapeCanceled && (ScrapeMovieAction.this.guiMain.movieToWriteToDiskList == null || ScrapeMovieAction.this.guiMain.movieToWriteToDiskList.size() == 0)) {
        System.out.println(""String_Node_Str"");
        JOptionPane.showMessageDialog(ScrapeMovieAction.this.guiMain.getFrmMoviescraper(),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE,null);
      }
      clearOverrides();
      ScrapeMovieAction.this.guiMain.updateAllFieldsOfFileDetailPanel(true);
      ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
      ScrapeMovieAction.this.guiMain.setMainGUIEnabled(true);
    }
  }
;
  worker.execute();
}",0.9972810254418334
165486,"private Movie makeData18MovieThreadsAndScrape(int movieNumberInList,boolean isData18Movie) throws InterruptedException {
  final int currentMovieNumberInList=movieNumberInList;
  final boolean parsingType=isData18Movie;
  final int numberOfThreads;
  if (this.guiMain.getPreferences().getUseIAFDForActors())   numberOfThreads=2;
 else   numberOfThreads=1;
  final int amountOfProgressToMakePerThread=(100 / numberOfThreads) - 1;
  amountOfProgressPerSubtask=amountOfProgressToMakePerThread;
  final ScrapeMovieAction thisScrapeAction=this;
  final String overriddenURL=overrideURLData18Movie;
  Thread scrapeQueryData18MovieThread=new Thread(){
    public void run(){
      try {
        SiteParsingProfile data18MoviePP;
        if (parsingType)         data18MoviePP=new Data18MovieParsingProfile();
 else         data18MoviePP=new Data18WebContentParsingProfile();
        if (overriddenURL != null && overriddenURL.length() > 0)         data18MoviePP.setOverridenSearchResult(overriddenURL);
        ScrapeMovieAction.this.guiMain.debugWriter(""String_Node_Str"" + ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(currentMovieNumberInList));
        ScrapeMovieAction.this.guiMain.setCurrentlySelectedMovieData18Movie(Movie.scrapeMovie(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(currentMovieNumberInList),data18MoviePP,overrideURLData18Movie,promptUserForURLWhenScraping,thisScrapeAction));
        System.out.println(""String_Node_Str"" + ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie());
        if (ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors() && ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie() != null) {
          Movie scrapeMovieIAFD=Movie.scrapeMovie(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(currentMovieNumberInList),new IAFDParsingProfile(),overrideURLIAFD,promptUserForURLWhenScraping,thisScrapeAction);
          System.out.println(""String_Node_Str"" + scrapeMovieIAFD);
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setActors(scrapeMovieIAFD.getActors());
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
;
  scrapeQueryData18MovieThread.start();
  scrapeQueryData18MovieThread.join();
  if (this.guiMain.getCurrentlySelectedMovieData18Movie() != null)   System.out.print(""String_Node_Str"" + guiMain.getCurrentlySelectedMovieFileList().get(currentMovieNumberInList).getName());
  this.guiMain.movieToWriteToDiskList.add(this.guiMain.getCurrentlySelectedMovieData18Movie());
  return this.guiMain.getCurrentlySelectedMovieData18Movie();
}","private Movie makeData18MovieThreadsAndScrape(int movieNumberInList,boolean isData18Movie) throws InterruptedException {
  final int currentMovieNumberInList=movieNumberInList;
  final boolean parsingType=isData18Movie;
  final int numberOfThreads;
  if (this.guiMain.getPreferences().getUseIAFDForActors())   numberOfThreads=2;
 else   numberOfThreads=1;
  final int amountOfProgressToMakePerThread=(100 / numberOfThreads) - 1;
  amountOfProgressPerSubtask=amountOfProgressToMakePerThread;
  final ScrapeMovieAction thisScrapeAction=this;
  final String overriddenURL=overrideURLData18Movie;
  Thread scrapeQueryData18MovieThread=new Thread(){
    public void run(){
      try {
        SiteParsingProfile data18MoviePP;
        if (parsingType)         data18MoviePP=new Data18MovieParsingProfile();
 else         data18MoviePP=new Data18WebContentParsingProfile();
        if (overriddenURL != null && overriddenURL.length() > 0)         data18MoviePP.setOverridenSearchResult(overriddenURL);
        ScrapeMovieAction.this.guiMain.debugWriter(""String_Node_Str"" + ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(currentMovieNumberInList));
        ScrapeMovieAction.this.guiMain.setCurrentlySelectedMovieData18Movie(Movie.scrapeMovie(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(currentMovieNumberInList),data18MoviePP,overrideURLData18Movie,promptUserForURLWhenScraping,thisScrapeAction));
        System.out.println(""String_Node_Str"" + ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie());
        if (ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors() && ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie() != null) {
          Movie scrapeMovieIAFD=Movie.scrapeMovie(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(currentMovieNumberInList),new IAFDParsingProfile(),overrideURLIAFD,promptUserForURLWhenScraping,thisScrapeAction);
          System.out.println(""String_Node_Str"" + scrapeMovieIAFD);
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setActors(scrapeMovieIAFD.getActors());
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
;
  scrapeQueryData18MovieThread.start();
  scrapeQueryData18MovieThread.join();
  if (this.guiMain.getCurrentlySelectedMovieData18Movie() == null)   System.out.print(""String_Node_Str"" + guiMain.getCurrentlySelectedMovieFileList().get(currentMovieNumberInList).getName());
  this.guiMain.movieToWriteToDiskList.add(this.guiMain.getCurrentlySelectedMovieData18Movie());
  return this.guiMain.getCurrentlySelectedMovieData18Movie();
}",0.999627004848937
165487,"@Override protected Void doInBackground(){
  for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    if (this.isCancelled()) {
      System.err.println(""String_Node_Str"");
      cancelRunningThreads();
      return null;
    }
    final int movieNumberInListFinal=movieNumberInList;
    ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
    initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
    if (promptUserForURLWhenScraping && scrapeJAV) {
      try {
        DmmParsingProfile dmmParsingProfile=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
        if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
          setOverridenSearchResult(dmmParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
        }
        if (dmmParsingProfile.getOverridenSearchResult() != null) {
          overrideURLDMM=dmmParsingProfile.getOverridenSearchResult().toString();
        }
 else {
          String searchStringDMM=dmmParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          SearchResult[] searchResultsDMM=dmmParsingProfile.getSearchResults(searchStringDMM);
          if (searchResultsDMM != null && searchResultsDMM.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
            if (searchResultFromUser != null)             overrideURLDMM=searchResultFromUser.getUrlPath();
          }
        }
        if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
          JavLibraryParsingProfile javLibParsingProfile=new JavLibraryParsingProfile();
          if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
            setOverridenSearchResult(javLibParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
          }
          if (javLibParsingProfile.getOverridenSearchResult() != null) {
            overrideURLJavLibrary=javLibParsingProfile.getOverridenSearchResult().toString();
          }
 else {
            String searchStringJL=javLibParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            SearchResult[] searchResultsJavLibStrings=javLibParsingProfile.getSearchResults(searchStringJL);
            if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
              SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
              if (searchResultFromUser != null)               overrideURLJavLibrary=searchResultFromUser.getUrlPath();
            }
          }
        }
        if (overrideURLDMM == null && overrideURLJavLibrary == null)         continue;
      }
 catch (      IOException e2) {
        e2.printStackTrace();
      }
    }
 else     if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
      try {
        SiteParsingProfile data18ParsingProfile=null;
        if (scrapeData18Movie)         data18ParsingProfile=new Data18MovieParsingProfile();
 else         if (scrapeData18WebContent)         data18ParsingProfile=new Data18WebContentParsingProfile();
        if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
          setOverridenSearchResult(data18ParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
        }
        if (data18ParsingProfile.getOverridenSearchResult() != null) {
          overrideURLData18Movie=data18ParsingProfile.getOverridenSearchResult().toString();
        }
 else {
          String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
          if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
            if (searchResultFromUser == null)             continue;
            overrideURLData18Movie=searchResultFromUser.getUrlPath();
          }
        }
        if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
          IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
          SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
          System.out.println(searchResultsIAFD);
          if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
            if (searchResultFromUser == null)             continue;
            overrideURLIAFD=searchResultFromUser.getUrlPath();
            if (!overrideURLIAFD.contains(""String_Node_Str""))             overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
            System.out.println(""String_Node_Str"" + overrideURLIAFD);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
    try {
      if (scrapeJAV)       javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else       if (scrapeData18Movie)       data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else       if (scrapeData18WebContent) {
        data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    makeProgress(100,""String_Node_Str"");
  }
  return null;
}","@Override protected Void doInBackground(){
  for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    if (this.isCancelled()) {
      System.err.println(""String_Node_Str"");
      cancelRunningThreads();
      return null;
    }
    final int movieNumberInListFinal=movieNumberInList;
    ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
    initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
    if (promptUserForURLWhenScraping && scrapeJAV) {
      try {
        DmmParsingProfile dmmParsingProfile=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
        if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
          setOverridenSearchResult(dmmParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
        }
        if (dmmParsingProfile.getOverridenSearchResult() != null) {
          overrideURLDMM=dmmParsingProfile.getOverridenSearchResult().toString();
        }
 else {
          String searchStringDMM=dmmParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          SearchResult[] searchResultsDMM=dmmParsingProfile.getSearchResults(searchStringDMM);
          if (searchResultsDMM != null && searchResultsDMM.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
            if (searchResultFromUser != null)             overrideURLDMM=searchResultFromUser.getUrlPath();
          }
        }
        if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
          JavLibraryParsingProfile javLibParsingProfile=new JavLibraryParsingProfile();
          if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
            setOverridenSearchResult(javLibParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
          }
          if (javLibParsingProfile.getOverridenSearchResult() != null) {
            overrideURLJavLibrary=javLibParsingProfile.getOverridenSearchResult().toString();
          }
 else {
            String searchStringJL=javLibParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            SearchResult[] searchResultsJavLibStrings=javLibParsingProfile.getSearchResults(searchStringJL);
            if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
              SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
              if (searchResultFromUser != null)               overrideURLJavLibrary=searchResultFromUser.getUrlPath();
            }
          }
        }
        if (overrideURLDMM == null && overrideURLJavLibrary == null)         continue;
      }
 catch (      IOException e2) {
        e2.printStackTrace();
      }
    }
 else     if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
      try {
        SiteParsingProfile data18ParsingProfile=null;
        if (scrapeData18Movie)         data18ParsingProfile=new Data18MovieParsingProfile();
 else         if (scrapeData18WebContent)         data18ParsingProfile=new Data18WebContentParsingProfile();
        if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
          setOverridenSearchResult(data18ParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
        }
        if (data18ParsingProfile.getOverridenSearchResult() != null) {
          overrideURLData18Movie=data18ParsingProfile.getOverridenSearchResult().toString();
        }
 else {
          String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
          if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
            if (searchResultFromUser == null)             continue;
            overrideURLData18Movie=searchResultFromUser.getUrlPath();
          }
        }
        if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
          IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
          SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
          System.out.println(searchResultsIAFD);
          if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
            if (searchResultFromUser == null)             continue;
            overrideURLIAFD=searchResultFromUser.getUrlPath();
            if (!overrideURLIAFD.contains(""String_Node_Str""))             overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
            System.out.println(""String_Node_Str"" + overrideURLIAFD);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
    try {
      if (scrapeJAV)       javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else       if (scrapeData18Movie)       data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else       if (scrapeData18WebContent) {
        data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
      }
      clearOverrides();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
      clearOverrides();
    }
    makeProgress(100,""String_Node_Str"");
  }
  return null;
}",0.9962394233782512
165488,"@Override public ID scrapeID(){
  String baseUri=document.baseUri();
  if (baseUri.length() > 0 && baseUri.contains(""String_Node_Str"")) {
    baseUri=baseUri.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    String idFromBaseUri=baseUri.substring(baseUri.lastIndexOf('/') + 1);
    return new ID(idFromBaseUri);
  }
  return new ID(""String_Node_Str"");
}","@Override public ID scrapeID(){
  initializeJapaneseDocument();
  String baseUri=japaneseDocument.baseUri();
  if (baseUri.length() > 0 && baseUri.contains(""String_Node_Str"")) {
    baseUri=baseUri.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    String idFromBaseUri=baseUri.substring(baseUri.lastIndexOf('/') + 1);
    return new ID(idFromBaseUri);
  }
  return new ID(""String_Node_Str"");
}",0.9444444444444444
165489,"@Override public ArrayList<Actor> scrapeActors(){
  ArrayList<Actor> actorList=new ArrayList<Actor>();
  initializeJapaneseDocument();
  Element actorEnglishSearchElement=document.select(""String_Node_Str"").first();
  Elements japaneseActors=japaneseDocument.select(""String_Node_Str"");
  if (actorEnglishSearchElement != null && getScrapingLanguage() == Language.ENGLISH) {
    String hrefText=actorEnglishSearchElement.attr(""String_Node_Str"");
    hrefText=hrefText.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
    hrefText=hrefText.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    try {
      hrefText=URLDecoder.decode(hrefText,""String_Node_Str"");
      String[] actorNames=hrefText.split(""String_Node_Str"");
      for (int i=0; i < actorNames.length; i++) {
        actorList.add(new Actor(actorNames[i],""String_Node_Str"",null));
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
  }
 else   if (japaneseActors != null && getScrapingLanguage() == Language.JAPANESE) {
    for (    Element japaneseActor : japaneseActors) {
      String actorName=japaneseActor.text();
      actorList.add(new Actor(actorName,""String_Node_Str"",null));
    }
  }
  return actorList;
}","@Override public ArrayList<Actor> scrapeActors(){
  ArrayList<Actor> actorList=new ArrayList<Actor>();
  initializeJapaneseDocument();
  Element actorEnglishSearchElement=document.select(""String_Node_Str"").first();
  Elements japaneseActors=japaneseDocument.select(""String_Node_Str"");
  if (actorEnglishSearchElement != null && getScrapingLanguage() == Language.ENGLISH) {
    String hrefText=actorEnglishSearchElement.attr(""String_Node_Str"");
    hrefText=hrefText.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
    hrefText=hrefText.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    try {
      hrefText=URLDecoder.decode(hrefText,""String_Node_Str"");
      String[] actorNames=hrefText.split(""String_Node_Str"");
      for (int i=0; i < actorNames.length; i++) {
        actorList.add(new Actor(actorNames[i],""String_Node_Str"",null));
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
  }
 else   if ((japaneseActors != null && getScrapingLanguage() == Language.JAPANESE) || actorList.size() == 0) {
    for (    Element japaneseActor : japaneseActors) {
      String actorName=japaneseActor.text();
      if (scrapingLanguage == Language.ENGLISH)       actorName=TranslateString.translateJapanesePersonNameToRomaji(actorName);
      actorList.add(new Actor(actorName,""String_Node_Str"",null));
    }
  }
  return actorList;
}",0.9410870391486128
165490,"/** 
 * Initialize the contents of the frame.
 */
private void initialize(){
  preferences=new MoviescraperPreferences();
  guiSettings=new GuiSettings();
  setCurrentlySelectedNfoFileList(new ArrayList<File>());
  setCurrentlySelectedMovieFileList(new ArrayList<File>());
  setCurrentlySelectedPosterFileList(new ArrayList<File>());
  setCurrentlySelectedFolderJpgFileList(new ArrayList<File>());
  setCurrentlySelectedFanartFileList(new ArrayList<File>());
  setCurrentlySelectedTrailerFileList(new ArrayList<File>());
  currentlySelectedActorsFolderList=new ArrayList<File>();
  movieToWriteToDiskList=new ArrayList<Movie>();
  frmMoviescraper=new JFrame();
  frmMovieScraperBlocker=new WindowBlocker();
  frmMoviescraper.setGlassPane(frmMovieScraperBlocker);
  frmMoviescraper.setBackground(SystemColor.window);
  frmMoviescraper.setPreferredSize(new Dimension(defaultMainFrameX,defaultMainFrameY));
  frmMoviescraper.setTitle(""String_Node_Str"");
  frmMoviescraper.setBounds(100,100,defaultMainFrameX,defaultMainFrameY);
  frmMoviescraper.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  IconCache.setIconProvider(getGuiSettings().getUseContentBasedTypeIcons() ? IconCache.IconProviderType.CONTENT : IconCache.IconProviderType.SYSTEM);
  URL programIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  Image programIcon=null;
  try {
    programIcon=ImageIO.read(programIconURL);
    if (programIcon != null)     frmMoviescraper.setIconImage(programIcon);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  setUpFileListPanel();
  messageConsolePanel=new MessageConsolePanel();
  frmMoviescraper.getContentPane().add(messageConsolePanel,BorderLayout.SOUTH);
  buttonPanel=new GUIMainButtonPanel(this);
  frmMoviescraper.getContentPane().add(buttonPanel,BorderLayout.NORTH);
  frmMoviescraper.setJMenuBar(new GUIMainMenuBar(this));
  int gap=7;
  fileListFileDetailSplitPane.setBorder(BorderFactory.createEmptyBorder());
  fileListFileDetailSplitPane.setDividerSize(gap);
  messageConsolePanel.setBorder(BorderFactory.createEmptyBorder(gap,0,0,0));
  buttonPanel.setVisible(guiSettings.getShowToolbar());
  messageConsolePanel.setVisible(guiSettings.getShowOutputPanel());
}","/** 
 * Initialize the contents of the frame.
 */
private void initialize(){
  preferences=MoviescraperPreferences.getInstance();
  guiSettings=GuiSettings.getInstance();
  setCurrentlySelectedNfoFileList(new ArrayList<File>());
  setCurrentlySelectedMovieFileList(new ArrayList<File>());
  setCurrentlySelectedPosterFileList(new ArrayList<File>());
  setCurrentlySelectedFolderJpgFileList(new ArrayList<File>());
  setCurrentlySelectedFanartFileList(new ArrayList<File>());
  setCurrentlySelectedTrailerFileList(new ArrayList<File>());
  currentlySelectedActorsFolderList=new ArrayList<File>();
  movieToWriteToDiskList=new ArrayList<Movie>();
  frmMoviescraper=new JFrame();
  frmMovieScraperBlocker=new WindowBlocker();
  frmMoviescraper.setGlassPane(frmMovieScraperBlocker);
  frmMoviescraper.setBackground(SystemColor.window);
  frmMoviescraper.setPreferredSize(new Dimension(defaultMainFrameX,defaultMainFrameY));
  frmMoviescraper.setTitle(""String_Node_Str"");
  frmMoviescraper.setBounds(100,100,defaultMainFrameX,defaultMainFrameY);
  frmMoviescraper.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  IconCache.setIconProvider(getGuiSettings().getUseContentBasedTypeIcons() ? IconCache.IconProviderType.CONTENT : IconCache.IconProviderType.SYSTEM);
  URL programIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  Image programIcon=null;
  try {
    programIcon=ImageIO.read(programIconURL);
    if (programIcon != null)     frmMoviescraper.setIconImage(programIcon);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  setUpFileListPanel();
  messageConsolePanel=new MessageConsolePanel();
  frmMoviescraper.getContentPane().add(messageConsolePanel,BorderLayout.SOUTH);
  buttonPanel=new GUIMainButtonPanel(this);
  frmMoviescraper.getContentPane().add(buttonPanel,BorderLayout.NORTH);
  frmMoviescraper.setJMenuBar(new GUIMainMenuBar(this));
  int gap=7;
  fileListFileDetailSplitPane.setBorder(BorderFactory.createEmptyBorder());
  fileListFileDetailSplitPane.setDividerSize(gap);
  messageConsolePanel.setBorder(BorderFactory.createEmptyBorder(gap,0,0,0));
  buttonPanel.setVisible(guiSettings.getShowToolbar());
  messageConsolePanel.setVisible(guiSettings.getShowOutputPanel());
}",0.9927765237020316
165491,"/** 
 * Launch the application.
 */
public static void main(String[] args){
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      try {
        RenamerGUI frame=new RenamerGUI(new MoviescraperPreferences(),null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
}","/** 
 * Launch the application.
 */
public static void main(String[] args){
  EventQueue.invokeLater(new Runnable(){
    public void run(){
      try {
        RenamerGUI frame=new RenamerGUI(MoviescraperPreferences.getInstance(),null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
}",0.97911227154047
165492,"public void run(){
  try {
    RenamerGUI frame=new RenamerGUI(new MoviescraperPreferences(),null);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(){
  try {
    RenamerGUI frame=new RenamerGUI(MoviescraperPreferences.getInstance(),null);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9638009049773756
165493,"private static void runRename(String[] optionValues){
  for (  String fileName : optionValues) {
    File currentFile=new File(fileName);
    if (!currentFile.exists()) {
      System.err.println(currentFile + ""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + currentFile);
      MoviescraperPreferences preferences=new MoviescraperPreferences();
      System.out.println(""String_Node_Str"");
      System.out.println(preferences);
      try {
        Renamer.rename(currentFile,preferences);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}","private static void runRename(String[] optionValues){
  for (  String fileName : optionValues) {
    File currentFile=new File(fileName);
    if (!currentFile.exists()) {
      System.err.println(currentFile + ""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + currentFile);
      MoviescraperPreferences preferences=MoviescraperPreferences.getInstance();
      System.out.println(""String_Node_Str"");
      System.out.println(preferences);
      try {
        Renamer.rename(currentFile,preferences);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9869281045751634
165494,"private static void writeMovieToFile(Movie scrapedMovie,File scrapeTarget){
  MoviescraperPreferences preferences=new MoviescraperPreferences();
  File nfoFile=new File(Movie.getFileNameOfNfo(scrapeTarget,preferences.getNfoNamedMovieDotNfo()));
  File posterFile=new File(Movie.getFileNameOfPoster(scrapeTarget,preferences.getNoMovieNameInImageFiles()));
  File fanartFile=new File(Movie.getFileNameOfFanart(scrapeTarget,preferences.getNoMovieNameInImageFiles()));
  File currentlySelectedFolderJpgFile=new File(Movie.getFileNameOfFolderJpg(scrapeTarget));
  File extraFanartFolder=new File(Movie.getFileNameOfExtraFanartFolderName(scrapeTarget));
  File trailerFile=new File(Movie.getFileNameOfTrailer(scrapeTarget));
  try {
    scrapedMovie.writeToFile(nfoFile,posterFile,fanartFile,currentlySelectedFolderJpgFile,extraFanartFolder,trailerFile,preferences);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private static void writeMovieToFile(Movie scrapedMovie,File scrapeTarget){
  MoviescraperPreferences preferences=MoviescraperPreferences.getInstance();
  File nfoFile=new File(Movie.getFileNameOfNfo(scrapeTarget,preferences.getNfoNamedMovieDotNfo()));
  File posterFile=new File(Movie.getFileNameOfPoster(scrapeTarget,preferences.getNoMovieNameInImageFiles()));
  File fanartFile=new File(Movie.getFileNameOfFanart(scrapeTarget,preferences.getNoMovieNameInImageFiles()));
  File currentlySelectedFolderJpgFile=new File(Movie.getFileNameOfFolderJpg(scrapeTarget));
  File extraFanartFolder=new File(Movie.getFileNameOfExtraFanartFolderName(scrapeTarget));
  File trailerFile=new File(Movie.getFileNameOfTrailer(scrapeTarget));
  try {
    scrapedMovie.writeToFile(nfoFile,posterFile,fanartFile,currentlySelectedFolderJpgFile,extraFanartFolder,trailerFile,preferences);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9913606911447084
165495,"public Movie(SiteParsingProfile siteToScrapeFrom){
  title=siteToScrapeFrom.scrapeTitle();
  originalTitle=siteToScrapeFrom.scrapeOriginalTitle();
  sortTitle=siteToScrapeFrom.scrapeSortTitle();
  set=siteToScrapeFrom.scrapeSet();
  rating=siteToScrapeFrom.scrapeRating();
  year=siteToScrapeFrom.scrapeYear();
  top250=siteToScrapeFrom.scrapeTop250();
  trailer=siteToScrapeFrom.scrapeTrailer();
  votes=siteToScrapeFrom.scrapeVotes();
  outline=siteToScrapeFrom.scrapeOutline();
  plot=siteToScrapeFrom.scrapePlot();
  tagline=siteToScrapeFrom.scrapeTagline();
  studio=siteToScrapeFrom.scrapeStudio();
  runtime=siteToScrapeFrom.scrapeRuntime();
  posters=siteToScrapeFrom.scrapePosters();
  fanart=siteToScrapeFrom.scrapeFanart();
  extraFanart=siteToScrapeFrom.scrapeExtraFanart();
  mpaa=siteToScrapeFrom.scrapeMPAA();
  id=siteToScrapeFrom.scrapeID();
  actors=siteToScrapeFrom.scrapeActors();
  genres=siteToScrapeFrom.scrapeGenres();
  directors=siteToScrapeFrom.scrapeDirectors();
  MoviescraperPreferences scraperPreferences=new MoviescraperPreferences();
  if (scraperPreferences.getAppendIDToStartOfTitle() && id != null && id.getId() != null && id.getId().trim().length() > 0 && title != null && title.getTitle() != null && title.getTitle().length() > 0) {
    title.setTitle(id.getId() + ""String_Node_Str"" + title.getTitle());
  }
}","public Movie(SiteParsingProfile siteToScrapeFrom){
  title=siteToScrapeFrom.scrapeTitle();
  originalTitle=siteToScrapeFrom.scrapeOriginalTitle();
  sortTitle=siteToScrapeFrom.scrapeSortTitle();
  set=siteToScrapeFrom.scrapeSet();
  rating=siteToScrapeFrom.scrapeRating();
  year=siteToScrapeFrom.scrapeYear();
  top250=siteToScrapeFrom.scrapeTop250();
  trailer=siteToScrapeFrom.scrapeTrailer();
  votes=siteToScrapeFrom.scrapeVotes();
  outline=siteToScrapeFrom.scrapeOutline();
  plot=siteToScrapeFrom.scrapePlot();
  tagline=siteToScrapeFrom.scrapeTagline();
  studio=siteToScrapeFrom.scrapeStudio();
  runtime=siteToScrapeFrom.scrapeRuntime();
  posters=siteToScrapeFrom.scrapePosters();
  fanart=siteToScrapeFrom.scrapeFanart();
  extraFanart=siteToScrapeFrom.scrapeExtraFanart();
  mpaa=siteToScrapeFrom.scrapeMPAA();
  id=siteToScrapeFrom.scrapeID();
  actors=siteToScrapeFrom.scrapeActors();
  genres=siteToScrapeFrom.scrapeGenres();
  directors=siteToScrapeFrom.scrapeDirectors();
  MoviescraperPreferences scraperPreferences=MoviescraperPreferences.getInstance();
  if (scraperPreferences.getAppendIDToStartOfTitle() && id != null && id.getId() != null && id.getId().trim().length() > 0 && title != null && title.getTitle() != null && title.getTitle().length() > 0) {
    title.setTitle(id.getId() + ""String_Node_Str"" + title.getTitle());
  }
}",0.994078460399704
165496,"public SiteParsingProfile(){
  scrapingLanguage=Language.ENGLISH;
  scrapingPreferences=new MoviescraperPreferences();
  this.firstWordOfFileIsID=scrapingPreferences.getIsFirstWordOfFileID();
}","public SiteParsingProfile(){
  scrapingLanguage=Language.ENGLISH;
  scrapingPreferences=MoviescraperPreferences.getInstance();
  this.firstWordOfFileIsID=scrapingPreferences.getIsFirstWordOfFileID();
}",0.9593908629441624
165497,"@Override public SiteParsingProfile newInstance(){
  MoviescraperPreferences preferences=new MoviescraperPreferences();
  return new DmmParsingProfile(preferences.getScrapeInJapanese());
}","@Override public SiteParsingProfile newInstance(){
  MoviescraperPreferences preferences=MoviescraperPreferences.getInstance();
  return new DmmParsingProfile(preferences.getScrapeInJapanese());
}",0.9583333333333334
165498,"protected void scrapeGeneric(SiteParsingProfile spp){
  scrapeActors=spp.scrapeActors();
  scrapeDirectors=spp.scrapeDirectors();
  scrapeExtraFanart=spp.scrapeExtraFanart();
  scrapeFanart=spp.scrapeFanart();
  scrapeGenres=spp.scrapeGenres();
  scrapeID=spp.scrapeID();
  scrapeMPAA=spp.scrapeMPAA();
  scrapeOriginalTitle=spp.scrapeOriginalTitle();
  scrapeOutline=spp.scrapeOutline();
  scrapePlot=spp.scrapePlot();
  scrapePosters=spp.scrapePosters();
  scrapeRating=spp.scrapeRating();
  scrapeRuntime=spp.scrapeRuntime();
  scrapeSet=spp.scrapeSet();
  scrapeSortTitle=spp.scrapeSortTitle();
  scrapeStudio=spp.scrapeStudio();
  scrapeTagline=spp.scrapeTagline();
  scrapeTitle=spp.scrapeTitle();
  scrapeTop250=spp.scrapeTop250();
  scrapeTrailer=spp.scrapeTrailer();
  scrapeVotes=spp.scrapeVotes();
  scrapeYear=spp.scrapeYear();
  MoviescraperPreferences scraperPreferences=new MoviescraperPreferences();
  if (scraperPreferences.getAppendIDToStartOfTitle() && scrapeID != null && scrapeID.getId() != null && scrapeID.getId().trim().length() > 0 && scrapeTitle != null && scrapeTitle.getTitle() != null && scrapeTitle.getTitle().length() > 0) {
    scrapeTitle.setTitle(scrapeID.getId() + ""String_Node_Str"" + scrapeTitle.getTitle());
  }
}","protected void scrapeGeneric(SiteParsingProfile spp){
  scrapeActors=spp.scrapeActors();
  scrapeDirectors=spp.scrapeDirectors();
  scrapeExtraFanart=spp.scrapeExtraFanart();
  scrapeFanart=spp.scrapeFanart();
  scrapeGenres=spp.scrapeGenres();
  scrapeID=spp.scrapeID();
  scrapeMPAA=spp.scrapeMPAA();
  scrapeOriginalTitle=spp.scrapeOriginalTitle();
  scrapeOutline=spp.scrapeOutline();
  scrapePlot=spp.scrapePlot();
  scrapePosters=spp.scrapePosters();
  scrapeRating=spp.scrapeRating();
  scrapeRuntime=spp.scrapeRuntime();
  scrapeSet=spp.scrapeSet();
  scrapeSortTitle=spp.scrapeSortTitle();
  scrapeStudio=spp.scrapeStudio();
  scrapeTagline=spp.scrapeTagline();
  scrapeTitle=spp.scrapeTitle();
  scrapeTop250=spp.scrapeTop250();
  scrapeTrailer=spp.scrapeTrailer();
  scrapeVotes=spp.scrapeVotes();
  scrapeYear=spp.scrapeYear();
  MoviescraperPreferences scraperPreferences=MoviescraperPreferences.getInstance();
  if (scraperPreferences.getAppendIDToStartOfTitle() && scrapeID != null && scrapeID.getId() != null && scrapeID.getId().trim().length() > 0 && scrapeTitle != null && scrapeTitle.getTitle() != null && scrapeTitle.getTitle().length() > 0) {
    scrapeTitle.setTitle(scrapeID.getId() + ""String_Node_Str"" + scrapeTitle.getTitle());
  }
}",0.9936204146730464
165499,"public MoviescraperPreferences(){
  super();
  setSanitizerForFilename(getSanitizerForFilename());
  setRenamerString(getRenamerString());
}","private MoviescraperPreferences(){
}",0.3522727272727273
165500,"public String getRenamerString(){
  return getStringValue(Key.renamerString,""String_Node_Str"");
}","public static String getRenamerString(){
  return getStringValue(Key.renamerString,""String_Node_Str"");
}",0.965174129353234
165501,"public String getSanitizerForFilename(){
  return getStringValue(Key.sanitizerForFilename,""String_Node_Str"");
}","public static String getSanitizerForFilename(){
  return getStringValue(Key.sanitizerForFilename,""String_Node_Str"");
}",0.9694323144104804
165502,"public void savePreferences(){
  try {
    programPreferences.storeToXML(new FileOutputStream(fileNameOfPreferences),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void savePreferences(){
  try (FileOutputStream settingsOutputStream=new FileOutputStream(fileNameOfPreferences)){
    programPreferences.storeToXML(settingsOutputStream,""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.7419898819561551
165503,"protected <K extends Key>String getStringValue(K preferenceName,String defaultValue){
  String fieldValue=preferenceName.getKey();
  String preferenceValue=programPreferences.getProperty(fieldValue);
  if (preferenceValue != null)   return preferenceValue;
  return defaultValue;
}","protected static <K extends Key>String getStringValue(K preferenceName,String defaultValue){
  String fieldValue=preferenceName.getKey();
  String preferenceValue=programPreferences.getProperty(fieldValue);
  if (preferenceValue != null)   return preferenceValue;
  return defaultValue;
}",0.9876977152899824
165504,"public Settings(){
  super();
}","protected Settings(){
}",0.5925925925925926
165505,"public static SearchResult showOptionPane(SearchResult[] searchResults,String siteName){
  if (searchResults.length > 0) {
    SelectionDialog selectionDialog=new SelectionDialog(searchResults,siteName);
    JOptionPane.showOptionDialog(null,selectionDialog,""String_Node_Str"" + siteName,JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null);
    return selectionDialog.getSelectedValue();
  }
 else   return null;
}","public static SearchResult showOptionPane(SearchResult[] searchResults,String siteName){
  if (searchResults.length > 0) {
    SelectionDialog selectionDialog=new SelectionDialog(searchResults,siteName);
    int optionPicked=JOptionPane.showOptionDialog(null,selectionDialog,""String_Node_Str"" + siteName,JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null);
    if (optionPicked == JOptionPane.CANCEL_OPTION)     return null;
    return selectionDialog.getSelectedValue();
  }
 else   return null;
}",0.9104320337197048
165506,"public void actionPerformed(ActionEvent e){
  resetScrapeMovieActionCounters();
  this.guiMain.setMainGUIEnabled(false);
  this.guiMain.removeOldScrapedMovieReferences();
  clearOverrides();
  worker=new SwingWorker<Void,String>(){
    Movie javMovie=null;
    Movie data18Movie=null;
    @Override protected Void doInBackground(){
      for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
        if (this.isCancelled()) {
          System.err.println(""String_Node_Str"");
          cancelRunningThreads();
          return null;
        }
        final int movieNumberInListFinal=movieNumberInList;
        ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
        initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
        if (promptUserForURLWhenScraping && scrapeJAV) {
          try {
            DmmParsingProfile dmmParsingProfile=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
            if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
              setOverridenSearchResult(dmmParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
            }
            if (dmmParsingProfile.getOverridenSearchResult() != null) {
              overrideURLDMM=dmmParsingProfile.getOverridenSearchResult().toString();
            }
 else {
              String searchStringDMM=dmmParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
              SearchResult[] searchResultsDMM=dmmParsingProfile.getSearchResults(searchStringDMM);
              if (searchResultsDMM != null && searchResultsDMM.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
                if (searchResultFromUser != null)                 overrideURLDMM=searchResultFromUser.getUrlPath();
              }
            }
            if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
              JavLibraryParsingProfile javLibParsingProfile=new JavLibraryParsingProfile();
              if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
                setOverridenSearchResult(javLibParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
              }
              if (javLibParsingProfile.getOverridenSearchResult() != null) {
                overrideURLJavLibrary=javLibParsingProfile.getOverridenSearchResult().toString();
              }
 else {
                String searchStringJL=javLibParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
                SearchResult[] searchResultsJavLibStrings=javLibParsingProfile.getSearchResults(searchStringJL);
                if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
                  SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
                  if (searchResultFromUser != null)                   overrideURLJavLibrary=searchResultFromUser.getUrlPath();
                }
              }
            }
            if (overrideURLDMM == null && overrideURLJavLibrary == null)             continue;
          }
 catch (          IOException e2) {
            e2.printStackTrace();
          }
        }
 else         if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
          try {
            SiteParsingProfile data18ParsingProfile=null;
            if (scrapeData18Movie)             data18ParsingProfile=new Data18MovieParsingProfile();
 else             if (scrapeData18WebContent)             data18ParsingProfile=new Data18WebContentParsingProfile();
            if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
              setOverridenSearchResult(data18ParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
            }
            if (data18ParsingProfile.getOverridenSearchResult() != null) {
              overrideURLData18Movie=data18ParsingProfile.getOverridenSearchResult().toString();
            }
 else {
              String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
              SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
              if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
                if (searchResultFromUser == null)                 continue;
                overrideURLData18Movie=searchResultFromUser.getUrlPath();
              }
            }
            if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
              IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
              SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
              System.out.println(searchResultsIAFD);
              if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
                if (searchResultFromUser == null)                 continue;
                overrideURLIAFD=searchResultFromUser.getUrlPath();
                if (!overrideURLIAFD.contains(""String_Node_Str""))                 overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
                System.out.println(""String_Node_Str"" + overrideURLIAFD);
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
        }
        try {
          if (scrapeJAV)           javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else           if (scrapeData18Movie)           data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else           if (scrapeData18WebContent) {
            data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
          }
          clearOverrides();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
          clearOverrides();
        }
        makeProgress(100,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void done(){
      guiMain.getProgressMonitor().stop();
      if (manuallyPickPoster && data18Movie != null && data18Movie.getPosters() != null && data18Movie.getPosters().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getPosters()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb posterPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (posterPicked != null) {
          ArrayList<Thumb> existingPosters=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getPosters()));
          existingPosters.remove(posterPicked);
          existingPosters.add(0,posterPicked);
          Thumb[] posterArray=new Thumb[existingPosters.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setPosters(existingPosters.toArray(posterArray));
        }
      }
      if (manuallyPickFanart && data18Movie != null && data18Movie.getFanart() != null && data18Movie.getFanart().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getFanart()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb fanartPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (fanartPicked != null) {
          ArrayList<Thumb> existingFanart=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getFanart()));
          existingFanart.remove(fanartPicked);
          existingFanart.add(0,fanartPicked);
          Thumb[] fanartArray=new Thumb[existingFanart.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setFanart(existingFanart.toArray(fanartArray));
        }
      }
 else       if (manuallyPickFanart && javMovie != null) {
        Thumb fanartPicked=showArtPicker(ArrayUtils.addAll(javMovie.getFanart(),javMovie.getExtraFanart()),""String_Node_Str"");
        if (fanartPicked != null)         javMovie.setFanart(ArrayUtils.toArray(fanartPicked));
      }
      if (!scrapeCanceled && (ScrapeMovieAction.this.guiMain.movieToWriteToDiskList == null || ScrapeMovieAction.this.guiMain.movieToWriteToDiskList.size() == 0)) {
        System.out.println(""String_Node_Str"");
        JOptionPane.showMessageDialog(ScrapeMovieAction.this.guiMain.getFrmMoviescraper(),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE,null);
      }
      clearOverrides();
      ScrapeMovieAction.this.guiMain.updateAllFieldsOfFileDetailPanel(true);
      ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
      ScrapeMovieAction.this.guiMain.setMainGUIEnabled(true);
    }
  }
;
  worker.execute();
}","public void actionPerformed(ActionEvent e){
  resetScrapeMovieActionCounters();
  this.guiMain.setMainGUIEnabled(false);
  this.guiMain.removeOldScrapedMovieReferences();
  clearOverrides();
  worker=new SwingWorker<Void,String>(){
    Movie javMovie=null;
    Movie data18Movie=null;
    @Override protected Void doInBackground(){
      for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
        if (this.isCancelled()) {
          System.err.println(""String_Node_Str"");
          cancelRunningThreads();
          return null;
        }
        final int movieNumberInListFinal=movieNumberInList;
        ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
        initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
        if (promptUserForURLWhenScraping && scrapeJAV) {
          try {
            DmmParsingProfile dmmParsingProfile=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
            if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
              setOverridenSearchResult(dmmParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
            }
            if (dmmParsingProfile.getOverridenSearchResult() != null) {
              overrideURLDMM=dmmParsingProfile.getOverridenSearchResult().toString();
            }
 else {
              String searchStringDMM=dmmParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
              SearchResult[] searchResultsDMM=dmmParsingProfile.getSearchResults(searchStringDMM);
              if (searchResultsDMM != null && searchResultsDMM.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
                if (searchResultFromUser != null)                 overrideURLDMM=searchResultFromUser.getUrlPath();
 else {
                  guiMain.movieToWriteToDiskList.add(null);
                  clearOverrides();
                }
              }
            }
            if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
              JavLibraryParsingProfile javLibParsingProfile=new JavLibraryParsingProfile();
              if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
                setOverridenSearchResult(javLibParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
              }
              if (javLibParsingProfile.getOverridenSearchResult() != null) {
                overrideURLJavLibrary=javLibParsingProfile.getOverridenSearchResult().toString();
              }
 else {
                String searchStringJL=javLibParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
                SearchResult[] searchResultsJavLibStrings=javLibParsingProfile.getSearchResults(searchStringJL);
                if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
                  SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
                  if (searchResultFromUser != null)                   overrideURLJavLibrary=searchResultFromUser.getUrlPath();
                }
              }
            }
            if (overrideURLDMM == null && overrideURLJavLibrary == null) {
              guiMain.movieToWriteToDiskList.add(null);
              clearOverrides();
              continue;
            }
          }
 catch (          IOException e2) {
            e2.printStackTrace();
          }
        }
 else         if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
          try {
            SiteParsingProfile data18ParsingProfile=null;
            if (scrapeData18Movie)             data18ParsingProfile=new Data18MovieParsingProfile();
 else             if (scrapeData18WebContent)             data18ParsingProfile=new Data18WebContentParsingProfile();
            if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
              setOverridenSearchResult(data18ParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
            }
            if (data18ParsingProfile.getOverridenSearchResult() != null) {
              overrideURLData18Movie=data18ParsingProfile.getOverridenSearchResult().toString();
            }
 else {
              String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
              SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
              if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
                if (searchResultFromUser == null) {
                  guiMain.movieToWriteToDiskList.add(null);
                  clearOverrides();
                  continue;
                }
                overrideURLData18Movie=searchResultFromUser.getUrlPath();
              }
            }
            if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
              IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
              SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
              System.out.println(searchResultsIAFD);
              if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
                if (searchResultFromUser == null) {
                  guiMain.movieToWriteToDiskList.add(null);
                  clearOverrides();
                  continue;
                }
                overrideURLIAFD=searchResultFromUser.getUrlPath();
                if (!overrideURLIAFD.contains(""String_Node_Str""))                 overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
                System.out.println(""String_Node_Str"" + overrideURLIAFD);
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
        }
        try {
          if (scrapeJAV)           javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else           if (scrapeData18Movie)           data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else           if (scrapeData18WebContent) {
            data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
          }
          clearOverrides();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
          clearOverrides();
        }
        makeProgress(100,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void done(){
      guiMain.getProgressMonitor().stop();
      if (manuallyPickPoster && data18Movie != null && data18Movie.getPosters() != null && data18Movie.getPosters().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getPosters()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb posterPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (posterPicked != null) {
          ArrayList<Thumb> existingPosters=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getPosters()));
          existingPosters.remove(posterPicked);
          existingPosters.add(0,posterPicked);
          Thumb[] posterArray=new Thumb[existingPosters.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setPosters(existingPosters.toArray(posterArray));
        }
      }
      if (manuallyPickFanart && data18Movie != null && data18Movie.getFanart() != null && data18Movie.getFanart().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getFanart()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb fanartPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (fanartPicked != null) {
          ArrayList<Thumb> existingFanart=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getFanart()));
          existingFanart.remove(fanartPicked);
          existingFanart.add(0,fanartPicked);
          Thumb[] fanartArray=new Thumb[existingFanart.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setFanart(existingFanart.toArray(fanartArray));
        }
      }
 else       if (manuallyPickFanart && javMovie != null) {
        Thumb fanartPicked=showArtPicker(ArrayUtils.addAll(javMovie.getFanart(),javMovie.getExtraFanart()),""String_Node_Str"");
        if (fanartPicked != null)         javMovie.setFanart(ArrayUtils.toArray(fanartPicked));
      }
      if (!scrapeCanceled && (ScrapeMovieAction.this.guiMain.movieToWriteToDiskList == null || ScrapeMovieAction.this.guiMain.movieToWriteToDiskList.size() == 0)) {
        System.out.println(""String_Node_Str"");
        JOptionPane.showMessageDialog(ScrapeMovieAction.this.guiMain.getFrmMoviescraper(),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE,null);
      }
      clearOverrides();
      ScrapeMovieAction.this.guiMain.updateAllFieldsOfFileDetailPanel(true);
      ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
      ScrapeMovieAction.this.guiMain.setMainGUIEnabled(true);
    }
  }
;
  worker.execute();
}",0.9715855275620384
165507,"@Override protected Void doInBackground(){
  for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    if (this.isCancelled()) {
      System.err.println(""String_Node_Str"");
      cancelRunningThreads();
      return null;
    }
    final int movieNumberInListFinal=movieNumberInList;
    ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
    initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
    if (promptUserForURLWhenScraping && scrapeJAV) {
      try {
        DmmParsingProfile dmmParsingProfile=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
        if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
          setOverridenSearchResult(dmmParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
        }
        if (dmmParsingProfile.getOverridenSearchResult() != null) {
          overrideURLDMM=dmmParsingProfile.getOverridenSearchResult().toString();
        }
 else {
          String searchStringDMM=dmmParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          SearchResult[] searchResultsDMM=dmmParsingProfile.getSearchResults(searchStringDMM);
          if (searchResultsDMM != null && searchResultsDMM.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
            if (searchResultFromUser != null)             overrideURLDMM=searchResultFromUser.getUrlPath();
          }
        }
        if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
          JavLibraryParsingProfile javLibParsingProfile=new JavLibraryParsingProfile();
          if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
            setOverridenSearchResult(javLibParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
          }
          if (javLibParsingProfile.getOverridenSearchResult() != null) {
            overrideURLJavLibrary=javLibParsingProfile.getOverridenSearchResult().toString();
          }
 else {
            String searchStringJL=javLibParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            SearchResult[] searchResultsJavLibStrings=javLibParsingProfile.getSearchResults(searchStringJL);
            if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
              SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
              if (searchResultFromUser != null)               overrideURLJavLibrary=searchResultFromUser.getUrlPath();
            }
          }
        }
        if (overrideURLDMM == null && overrideURLJavLibrary == null)         continue;
      }
 catch (      IOException e2) {
        e2.printStackTrace();
      }
    }
 else     if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
      try {
        SiteParsingProfile data18ParsingProfile=null;
        if (scrapeData18Movie)         data18ParsingProfile=new Data18MovieParsingProfile();
 else         if (scrapeData18WebContent)         data18ParsingProfile=new Data18WebContentParsingProfile();
        if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
          setOverridenSearchResult(data18ParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
        }
        if (data18ParsingProfile.getOverridenSearchResult() != null) {
          overrideURLData18Movie=data18ParsingProfile.getOverridenSearchResult().toString();
        }
 else {
          String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
          if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
            if (searchResultFromUser == null)             continue;
            overrideURLData18Movie=searchResultFromUser.getUrlPath();
          }
        }
        if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
          IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
          SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
          System.out.println(searchResultsIAFD);
          if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
            if (searchResultFromUser == null)             continue;
            overrideURLIAFD=searchResultFromUser.getUrlPath();
            if (!overrideURLIAFD.contains(""String_Node_Str""))             overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
            System.out.println(""String_Node_Str"" + overrideURLIAFD);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
    try {
      if (scrapeJAV)       javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else       if (scrapeData18Movie)       data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else       if (scrapeData18WebContent) {
        data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
      }
      clearOverrides();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
      clearOverrides();
    }
    makeProgress(100,""String_Node_Str"");
  }
  return null;
}","@Override protected Void doInBackground(){
  for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    if (this.isCancelled()) {
      System.err.println(""String_Node_Str"");
      cancelRunningThreads();
      return null;
    }
    final int movieNumberInListFinal=movieNumberInList;
    ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
    initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
    if (promptUserForURLWhenScraping && scrapeJAV) {
      try {
        DmmParsingProfile dmmParsingProfile=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
        if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
          setOverridenSearchResult(dmmParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
        }
        if (dmmParsingProfile.getOverridenSearchResult() != null) {
          overrideURLDMM=dmmParsingProfile.getOverridenSearchResult().toString();
        }
 else {
          String searchStringDMM=dmmParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          SearchResult[] searchResultsDMM=dmmParsingProfile.getSearchResults(searchStringDMM);
          if (searchResultsDMM != null && searchResultsDMM.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
            if (searchResultFromUser != null)             overrideURLDMM=searchResultFromUser.getUrlPath();
 else {
              guiMain.movieToWriteToDiskList.add(null);
              clearOverrides();
            }
          }
        }
        if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
          JavLibraryParsingProfile javLibParsingProfile=new JavLibraryParsingProfile();
          if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
            setOverridenSearchResult(javLibParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
          }
          if (javLibParsingProfile.getOverridenSearchResult() != null) {
            overrideURLJavLibrary=javLibParsingProfile.getOverridenSearchResult().toString();
          }
 else {
            String searchStringJL=javLibParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            SearchResult[] searchResultsJavLibStrings=javLibParsingProfile.getSearchResults(searchStringJL);
            if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
              SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
              if (searchResultFromUser != null)               overrideURLJavLibrary=searchResultFromUser.getUrlPath();
            }
          }
        }
        if (overrideURLDMM == null && overrideURLJavLibrary == null) {
          guiMain.movieToWriteToDiskList.add(null);
          clearOverrides();
          continue;
        }
      }
 catch (      IOException e2) {
        e2.printStackTrace();
      }
    }
 else     if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
      try {
        SiteParsingProfile data18ParsingProfile=null;
        if (scrapeData18Movie)         data18ParsingProfile=new Data18MovieParsingProfile();
 else         if (scrapeData18WebContent)         data18ParsingProfile=new Data18WebContentParsingProfile();
        if (guiMain.getPreferences().getPromptForUserProvidedURLWhenScraping()) {
          setOverridenSearchResult(data18ParsingProfile,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString());
        }
        if (data18ParsingProfile.getOverridenSearchResult() != null) {
          overrideURLData18Movie=data18ParsingProfile.getOverridenSearchResult().toString();
        }
 else {
          String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
          SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
          if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
            if (searchResultFromUser == null) {
              guiMain.movieToWriteToDiskList.add(null);
              clearOverrides();
              continue;
            }
            overrideURLData18Movie=searchResultFromUser.getUrlPath();
          }
        }
        if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
          IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
          SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
          System.out.println(searchResultsIAFD);
          if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
            if (searchResultFromUser == null) {
              guiMain.movieToWriteToDiskList.add(null);
              clearOverrides();
              continue;
            }
            overrideURLIAFD=searchResultFromUser.getUrlPath();
            if (!overrideURLIAFD.contains(""String_Node_Str""))             overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
            System.out.println(""String_Node_Str"" + overrideURLIAFD);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
    try {
      if (scrapeJAV)       javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else       if (scrapeData18Movie)       data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else       if (scrapeData18WebContent) {
        data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
      }
      clearOverrides();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
      clearOverrides();
    }
    makeProgress(100,""String_Node_Str"");
  }
  return null;
}",0.9600846688841852
165508,"public SearchResult[] getLinksFromGoogle(String searchQuery,String site){
  Document doc;
  ArrayList<SearchResult> linksToReturn=new ArrayList<SearchResult>();
  try {
    String encodingScheme=""String_Node_Str"";
    String queryToEncode=""String_Node_Str"" + site + ""String_Node_Str""+ searchQuery;
    String encodedSearchQuery=URLEncoder.encode(queryToEncode,encodingScheme);
    doc=Jsoup.connect(""String_Node_Str"" + encodedSearchQuery).userAgent(getRandomUserAgent()).referrer(""String_Node_Str"").ignoreHttpErrors(true).timeout(0).get();
    Elements sorryLink=doc.select(""String_Node_Str"");
    Map<String,String> captchaData=new HashMap<>();
    for (    Element element : sorryLink) {
      String key=element.attr(""String_Node_Str"");
      String value=element.attr(""String_Node_Str"");
      captchaData.put(key,value);
    }
    if (captchaData.size() > 0) {
      System.out.println(""String_Node_Str"" + captchaData);
      return new SearchResult[0];
    }
    Elements links=doc.select(""String_Node_Str"");
    for (    Element link : links) {
      Elements hrefs=link.select(""String_Node_Str"");
      String href=hrefs.attr(""String_Node_Str"");
      href=URLDecoder.decode(href,encodingScheme);
      href=href.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
      href=href.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
      int startIndexToRemove=href.indexOf(""String_Node_Str"");
      if (startIndexToRemove > -1)       href=href.substring(0,startIndexToRemove);
      linksToReturn.add(new SearchResult(href,hrefs.text()));
    }
    return linksToReturn.toArray(new SearchResult[linksToReturn.size()]);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return linksToReturn.toArray(new SearchResult[linksToReturn.size()]);
  }
}","public SearchResult[] getLinksFromGoogle(String searchQuery,String site){
  Document doc;
  ArrayList<SearchResult> linksToReturn=new ArrayList<SearchResult>();
  try {
    String encodingScheme=""String_Node_Str"";
    String queryToEncode=""String_Node_Str"" + site + ""String_Node_Str""+ searchQuery;
    String encodedSearchQuery=URLEncoder.encode(queryToEncode,encodingScheme);
    doc=Jsoup.connect(""String_Node_Str"" + encodedSearchQuery).userAgent(getRandomUserAgent()).referrer(""String_Node_Str"").ignoreHttpErrors(true).timeout(0).get();
    Elements sorryLink=doc.select(""String_Node_Str"");
    Map<String,String> captchaData=new HashMap<>();
    for (    Element element : sorryLink) {
      String key=element.attr(""String_Node_Str"");
      String value=element.attr(""String_Node_Str"");
      captchaData.put(key,value);
    }
    if (captchaData.size() > 0) {
      System.out.println(""String_Node_Str"" + captchaData);
      return new SearchResult[0];
    }
    Elements links=doc.select(""String_Node_Str"");
    for (    Element link : links) {
      Elements hrefs=link.select(""String_Node_Str"");
      String href=hrefs.attr(""String_Node_Str"");
      href=URLDecoder.decode(href,encodingScheme);
      href=href.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
      href=href.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
      href=href.replace(""String_Node_Str"",""String_Node_Str"");
      int startIndexToRemove=href.indexOf(""String_Node_Str"");
      if (startIndexToRemove > -1)       href=href.substring(0,startIndexToRemove);
      linksToReturn.add(new SearchResult(href,hrefs.text()));
    }
    return linksToReturn.toArray(new SearchResult[linksToReturn.size()]);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return linksToReturn.toArray(new SearchResult[linksToReturn.size()]);
  }
}",0.9829950630828304
165509,"@Override public ArrayList<Actor> scrapeActors(){
  Elements elements=document.select(""String_Node_Str"");
  ArrayList<Actor> list=new ArrayList<>();
  if (elements != null) {
    for (    Element element : elements) {
      String href=element.attr(""String_Node_Str"");
      String name=WordUtils.capitalize(element.childNode(0).toString());
      Thumb thumb=null;
      try {
        Document actorDoc=Jsoup.connect(href).userAgent(""String_Node_Str"").ignoreHttpErrors(true).timeout(0).get();
        Element first=actorDoc.select(""String_Node_Str"").first();
        if (first != null) {
          String thumbURL=first.attr(""String_Node_Str"");
          thumb=new Thumb(thumbURL);
        }
        list.add(new Actor(name,null,thumb));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return list;
}","@Override public ArrayList<Actor> scrapeActors(){
  Elements elements=document.select(""String_Node_Str"");
  ArrayList<Actor> list=new ArrayList<>();
  if (elements != null) {
    for (    Element element : elements) {
      String href=element.attr(""String_Node_Str"");
      String name=WordUtils.capitalize(element.text());
      Thumb thumb=null;
      try {
        Document actorDoc=Jsoup.connect(href).userAgent(""String_Node_Str"").ignoreHttpErrors(true).timeout(0).get();
        Element first=actorDoc.select(""String_Node_Str"").first();
        if (first != null) {
          String thumbURL=first.attr(""String_Node_Str"");
          thumb=new Thumb(thumbURL);
        }
        list.add(new Actor(name,null,thumb));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return list;
}",0.984984984984985
165510,"@Override public String createSearchString(File file){
  String fileID=findIDTagFromFile(file).toLowerCase();
  if (fileID != null) {
    englishPage=""String_Node_Str"" + fileID + ""String_Node_Str"";
    japanesePage=""String_Node_Str"" + fileID + ""String_Node_Str"";
    try {
      japaneseDocument=Jsoup.connect(japanesePage).timeout(0).get();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (scrapeInEnglish) {
      return englishPage;
    }
 else {
      return japanesePage;
    }
  }
  return null;
}","@Override public String createSearchString(File file){
  String fileID=findIDTagFromFile(file).toLowerCase();
  if (fileID != null) {
    englishPage=""String_Node_Str"" + fileID + ""String_Node_Str"";
    japanesePage=""String_Node_Str"" + fileID + ""String_Node_Str"";
    try {
      japaneseDocument=Jsoup.connect(japanesePage).timeout(0).get();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (scrapingLanguage == Language.ENGLISH) {
      return englishPage;
    }
 else {
      return japanesePage;
    }
  }
  return null;
}",0.9639222941720628
165511,"@Override public OriginalTitle scrapeOriginalTitle(){
  if (!scrapeInEnglish)   return new OriginalTitle(scrapeTitle().getTitle());
 else {
    Document originalDocument=document;
    document=japaneseDocument;
    OriginalTitle originalTitle=new OriginalTitle(scrapeTitle().getTitle());
    document=originalDocument;
    return originalTitle;
  }
}","@Override public OriginalTitle scrapeOriginalTitle(){
  if (scrapingLanguage == Language.JAPANESE)   return new OriginalTitle(scrapeTitle().getTitle());
 else {
    Document originalDocument=document;
    document=japaneseDocument;
    OriginalTitle originalTitle=new OriginalTitle(scrapeTitle().getTitle());
    document=originalDocument;
    return originalTitle;
  }
}",0.9292649098474342
165512,"@Override public SiteParsingProfile newInstance(){
  return new HeyzoParsingProfile(scrapeInEnglish);
}","@Override public SiteParsingProfile newInstance(){
  return new HeyzoParsingProfile();
}",0.9214659685863874
165513,"public HeyzoParsingProfile(boolean scrapeInEnglish){
  this.scrapeInEnglish=scrapeInEnglish;
}","public HeyzoParsingProfile(){
  super();
}",0.5735294117647058
165514,"@Override public Votes scrapeVotes(){
  Element votesElement=document.select(""String_Node_Str"").first();
  String votes=votesElement.text();
  votes=votes.substring(2,votes.indexOf('v') - 1);
  return new Votes(votes);
}","@Override public Votes scrapeVotes(){
  Element votesElement=document.select(""String_Node_Str"").first();
  if (votesElement != null) {
    String votes=votesElement.text();
    votes=votes.substring(2,votes.indexOf('v') - 1);
    return new Votes(votes);
  }
  return Votes.BLANK_VOTES;
}",0.8661417322834646
165515,"@Override public Rating scrapeRating(){
  Element ratingElement=document.select(""String_Node_Str"").first();
  String ratingImgUrl=ratingElement.attr(""String_Node_Str"");
  String ratingIntegerIntegerPart=ratingImgUrl.substring(ratingImgUrl.length() - 7,ratingImgUrl.length() - 6);
  String ratingDecimalIntegerPart=ratingImgUrl.substring(ratingImgUrl.length() - 5,ratingImgUrl.length() - 4);
  return new Rating(5.0,ratingIntegerIntegerPart + ""String_Node_Str"" + ratingDecimalIntegerPart);
}","@Override public Rating scrapeRating(){
  Element ratingElement=document.select(""String_Node_Str"").first();
  if (ratingElement != null) {
    String ratingImgUrl=ratingElement.attr(""String_Node_Str"");
    String ratingIntegerIntegerPart=ratingImgUrl.substring(ratingImgUrl.length() - 7,ratingImgUrl.length() - 6);
    String ratingDecimalIntegerPart=ratingImgUrl.substring(ratingImgUrl.length() - 5,ratingImgUrl.length() - 4);
    return new Rating(5.0,ratingIntegerIntegerPart + ""String_Node_Str"" + ratingDecimalIntegerPart);
  }
  return Rating.BLANK_RATING;
}",0.9306742640075972
165516,"@Override public ArrayList<Actor> scrapeActors(){
  Elements actorElements=document.select(""String_Node_Str"");
  ArrayList<Actor> actorList=new ArrayList<Actor>();
  if (actorElements != null) {
    for (    Element currentActorElement : actorElements) {
      String actorName=currentActorElement.childNode(0).childNode(0).toString().trim();
      String actorAlias=""String_Node_Str"";
      int indexOfAs=actorName.indexOf(actorAlias);
      if (indexOfAs >= 0) {
        actorName=actorName.substring(indexOfAs + actorAlias.length(),actorName.lastIndexOf(""String_Node_Str""));
      }
      String actorThumbnailSite=""String_Node_Str"" + currentActorElement.childNode(0).attr(""String_Node_Str"");
      Document searchActor;
      try {
        searchActor=Jsoup.connect(actorThumbnailSite).timeout(0).userAgent(""String_Node_Str"").get();
        Element actorPicture=searchActor.select(""String_Node_Str"").first();
        if (actorPicture == null)         continue;
        String actorThumbnail=""String_Node_Str"" + actorPicture.attr(""String_Node_Str"");
        if (actorThumbnail != null && !actorThumbnail.equals(""String_Node_Str"")) {
          try {
            actorThumbnail=actorThumbnail.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
            actorList.add(new Actor(actorName,null,new Thumb(actorThumbnail)));
          }
 catch (          MalformedURLException e) {
            actorList.add(new Actor(actorName,null,null));
            e.printStackTrace();
          }
        }
 else {
          actorList.add(new Actor(actorName,null,null));
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
  return actorList;
}","@Override public ArrayList<Actor> scrapeActors(){
  Elements actorElements=document.select(""String_Node_Str"");
  ArrayList<Actor> actorList=new ArrayList<Actor>();
  if (actorElements != null) {
    for (    Element currentActorElement : actorElements) {
      String actorName=currentActorElement.childNode(0).childNode(0).toString().trim();
      String actorAlias=""String_Node_Str"";
      int indexOfAs=actorName.indexOf(actorAlias);
      if (indexOfAs >= 0) {
        actorName=actorName.substring(indexOfAs + actorAlias.length(),actorName.lastIndexOf(""String_Node_Str""));
      }
      String actorThumbnailSite=currentActorElement.childNode(0).absUrl(""String_Node_Str"");
      Document searchActor;
      try {
        searchActor=Jsoup.connect(actorThumbnailSite).timeout(0).userAgent(""String_Node_Str"").get();
        Element actorPicture=searchActor.select(""String_Node_Str"").first();
        if (actorPicture == null)         continue;
        String actorThumbnail=actorPicture.absUrl(""String_Node_Str"");
        if (actorThumbnail != null && !actorThumbnail.equals(""String_Node_Str"")) {
          try {
            actorThumbnail=actorThumbnail.replaceFirst(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
            actorList.add(new Actor(actorName,null,new Thumb(actorThumbnail)));
          }
 catch (          MalformedURLException e) {
            actorList.add(new Actor(actorName,null,null));
            e.printStackTrace();
          }
        }
 else {
          actorList.add(new Actor(actorName,null,null));
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
  return actorList;
}",0.9833035181872392
165517,"@Override public String createSearchString(File file){
  String fileID=findIDTagFromFile(file);
  if (fileID == null)   return null;
  fileID=fileID.toLowerCase();
  if (fileID != null) {
    englishPage=""String_Node_Str"" + fileID + ""String_Node_Str"";
    japanesePage=""String_Node_Str"" + fileID + ""String_Node_Str"";
    if (scrapeInEnglish) {
      return englishPage;
    }
 else {
      return japanesePage;
    }
  }
  return null;
}","@Override public String createSearchString(File file){
  String fileID=findIDTagFromFile(file);
  if (fileID == null)   return null;
  fileID=fileID.toLowerCase();
  if (fileID != null) {
    englishPage=""String_Node_Str"" + fileID + ""String_Node_Str"";
    japanesePage=""String_Node_Str"" + fileID + ""String_Node_Str"";
    if (scrapingLanguage == Language.ENGLISH) {
      return englishPage;
    }
 else {
      return japanesePage;
    }
  }
  return null;
}",0.9564245810055866
165518,"@Override public Title scrapeTitle(){
  Element titleElement=document.select(""String_Node_Str"").first();
  String id=scrapeID().getId();
  String title=titleElement.text().trim();
  title=title.replaceAll(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
  title=title.replaceAll(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
  if (title.equals(""String_Node_Str""))   title=title + ""String_Node_Str"" + id;
 else   title=title + ""String_Node_Str"" + id;
  return new Title(title);
}","@Override public Title scrapeTitle(){
  Element titleElement=document.select(""String_Node_Str"").first();
  if (titleElement != null) {
    String id=scrapeID().getId();
    String title=titleElement.text().trim();
    title=title.replaceAll(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
    title=title.replaceAll(Pattern.quote(""String_Node_Str""),""String_Node_Str"");
    if (title.equals(""String_Node_Str""))     title=title + ""String_Node_Str"" + id;
 else     title=title + ""String_Node_Str"" + id;
    return new Title(title);
  }
  return new Title(""String_Node_Str"");
}",0.916588566073102
165519,"@Override public OriginalTitle scrapeOriginalTitle(){
  if (!scrapeInEnglish)   return new OriginalTitle(scrapeTitle().getTitle());
 else {
    Document originalDocument=document;
    try {
      document=Jsoup.connect(japanesePage).get();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    OriginalTitle originalTitle=new OriginalTitle(scrapeTitle().getTitle());
    document=originalDocument;
    return originalTitle;
  }
}","@Override public OriginalTitle scrapeOriginalTitle(){
  if (scrapingLanguage == Language.JAPANESE)   return new OriginalTitle(scrapeTitle().getTitle());
 else {
    Document originalDocument=document;
    try {
      document=Jsoup.connect(japanesePage).get();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    OriginalTitle originalTitle=new OriginalTitle(scrapeTitle().getTitle());
    document=originalDocument;
    return originalTitle;
  }
}",0.9442622950819672
165520,"@BeforeClass public static void initialize(){
  profile=new OnePondoParsingProfile(scrapeInEnglish);
  String searchString=profile.createSearchString(file);
  System.out.println(searchString);
  Document document=SpecificScraperAction.downloadDocument(searchString);
  profile.setDocument(document);
}","@BeforeClass public static void initialize(){
  profile=new OnePondoParsingProfile();
  String searchString=profile.createSearchString(file);
  System.out.println(searchString);
  Document document=SpecificScraperAction.downloadDocument(searchString);
  profile.setDocument(document);
}",0.9744463373083476
165521,"/** 
 * @param japanesePersonName - Name of the person to translate. Method works best if the name is hiragana or katakana
 * @return The name of person in Romaji
 */
public static String translateJapanesePersonNameToRomaji(String japanesePersonName){
  for (int i=0; i < japanesePersonName.length(); i++) {
    if (JapaneseCharacter.isKanji(japanesePersonName.charAt(i)))     return translateStringJapaneseToEnglish(japanesePersonName);
  }
  String romaji=WordUtils.capitalize(JapaneseCharacter.convertToRomaji(japanesePersonName)).trim();
  if (romaji != null)   return romaji;
 else   return translateStringJapaneseToEnglish(japanesePersonName);
}","/** 
 * @param japanesePersonName - Name of the person to translate. Method works best if the name is hiragana or katakana
 * @return The name of person in Romaji
 */
public static String translateJapanesePersonNameToRomaji(String japanesePersonName){
  for (int i=0; i < japanesePersonName.length(); i++) {
    if (JapaneseCharacter.isKanji(japanesePersonName.charAt(i)))     return translateStringJapaneseToEnglish(japanesePersonName);
  }
  String romaji=JapaneseCharacter.convertToRomaji(japanesePersonName);
  if (romaji != null) {
    romaji=WordUtils.capitalize(romaji).trim();
    return romaji;
  }
 else   return translateStringJapaneseToEnglish(japanesePersonName);
}",0.7419112114371708
165522,"public ProgressMonitor getProgressMonitor(){
  return progressMonitor;
}","public ProgressMonitor getProgressMonitor(){
  if (progressMonitor == null)   progressMonitor=new ProgressMonitor(frmMoviescraper);
  return progressMonitor;
}",0.6233766233766234
165523,"@Override protected void done(){
  if (manuallyPickPoster && data18Movie != null && data18Movie.getPosters() != null && data18Movie.getPosters().length > 1) {
    HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getPosters()));
    uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
    ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
    Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
    Thumb posterPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
    if (posterPicked != null) {
      ArrayList<Thumb> existingPosters=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getPosters()));
      existingPosters.remove(posterPicked);
      existingPosters.add(0,posterPicked);
      Thumb[] posterArray=new Thumb[existingPosters.size()];
      ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setPosters(existingPosters.toArray(posterArray));
    }
  }
  if (manuallyPickFanart && data18Movie != null && data18Movie.getFanart() != null && data18Movie.getFanart().length > 1) {
    HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getFanart()));
    uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
    ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
    Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
    Thumb fanartPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
    if (fanartPicked != null) {
      ArrayList<Thumb> existingFanart=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getFanart()));
      existingFanart.remove(fanartPicked);
      existingFanart.add(0,fanartPicked);
      Thumb[] fanartArray=new Thumb[existingFanart.size()];
      ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setFanart(existingFanart.toArray(fanartArray));
    }
  }
 else   if (manuallyPickFanart && javMovie != null) {
    Thumb fanartPicked=showArtPicker(ArrayUtils.addAll(javMovie.getFanart(),javMovie.getExtraFanart()),""String_Node_Str"");
    if (fanartPicked != null)     javMovie.setFanart(ArrayUtils.toArray(fanartPicked));
  }
  if (!scrapeCanceled && (ScrapeMovieAction.this.guiMain.movieToWriteToDiskList == null || ScrapeMovieAction.this.guiMain.movieToWriteToDiskList.size() == 0)) {
    System.out.println(""String_Node_Str"");
    JOptionPane.showMessageDialog(ScrapeMovieAction.this.guiMain.getFrmMoviescraper(),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE,null);
  }
  clearOverrides();
  ScrapeMovieAction.this.guiMain.updateAllFieldsOfFileDetailPanel(true);
  ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
  ScrapeMovieAction.this.guiMain.setMainGUIEnabled(true);
}","@Override protected void done(){
  guiMain.getProgressMonitor().stop();
  if (manuallyPickPoster && data18Movie != null && data18Movie.getPosters() != null && data18Movie.getPosters().length > 1) {
    HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getPosters()));
    uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
    ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
    Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
    Thumb posterPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
    if (posterPicked != null) {
      ArrayList<Thumb> existingPosters=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getPosters()));
      existingPosters.remove(posterPicked);
      existingPosters.add(0,posterPicked);
      Thumb[] posterArray=new Thumb[existingPosters.size()];
      ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setPosters(existingPosters.toArray(posterArray));
    }
  }
  if (manuallyPickFanart && data18Movie != null && data18Movie.getFanart() != null && data18Movie.getFanart().length > 1) {
    HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getFanart()));
    uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
    ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
    Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
    Thumb fanartPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
    if (fanartPicked != null) {
      ArrayList<Thumb> existingFanart=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getFanart()));
      existingFanart.remove(fanartPicked);
      existingFanart.add(0,fanartPicked);
      Thumb[] fanartArray=new Thumb[existingFanart.size()];
      ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setFanart(existingFanart.toArray(fanartArray));
    }
  }
 else   if (manuallyPickFanart && javMovie != null) {
    Thumb fanartPicked=showArtPicker(ArrayUtils.addAll(javMovie.getFanart(),javMovie.getExtraFanart()),""String_Node_Str"");
    if (fanartPicked != null)     javMovie.setFanart(ArrayUtils.toArray(fanartPicked));
  }
  if (!scrapeCanceled && (ScrapeMovieAction.this.guiMain.movieToWriteToDiskList == null || ScrapeMovieAction.this.guiMain.movieToWriteToDiskList.size() == 0)) {
    System.out.println(""String_Node_Str"");
    JOptionPane.showMessageDialog(ScrapeMovieAction.this.guiMain.getFrmMoviescraper(),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE,null);
  }
  clearOverrides();
  ScrapeMovieAction.this.guiMain.updateAllFieldsOfFileDetailPanel(true);
  ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
  ScrapeMovieAction.this.guiMain.setMainGUIEnabled(true);
}",0.9934265969998316
165524,"public void actionPerformed(ActionEvent e){
  resetScrapeMovieActionCounters();
  this.guiMain.setMainGUIEnabled(false);
  this.guiMain.removeOldScrapedMovieReferences();
  clearOverrides();
  worker=new SwingWorker<Void,String>(){
    Movie javMovie=null;
    Movie data18Movie=null;
    @Override protected Void doInBackground(){
      for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
        if (this.isCancelled()) {
          System.err.println(""String_Node_Str"");
          cancelRunningThreads();
          return null;
        }
        final int movieNumberInListFinal=movieNumberInList;
        ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
        initializeProgressMonitor(currentFileName);
        if (promptUserForURLWhenScraping && scrapeJAV) {
          try {
            DmmParsingProfile dmmPP=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
            JavLibraryParsingProfile jlPP=new JavLibraryParsingProfile();
            String searchStringDMM=dmmPP.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            SearchResult[] searchResultsDMM=dmmPP.getSearchResults(searchStringDMM);
            String searchStringJL=jlPP.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            if (searchResultsDMM != null && searchResultsDMM.length > 0) {
              SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
              if (searchResultFromUser != null)               overrideURLDMM=searchResultFromUser.getUrlPath();
            }
            if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
              SearchResult[] searchResultsJavLibStrings=jlPP.getSearchResults(searchStringJL);
              if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
                if (searchResultFromUser != null)                 overrideURLJavLibrary=searchResultFromUser.getUrlPath();
              }
            }
            if (overrideURLDMM == null && overrideURLJavLibrary == null)             continue;
          }
 catch (          IOException e2) {
            e2.printStackTrace();
          }
        }
 else         if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
          try {
            SiteParsingProfile data18ParsingProfile=null;
            if (scrapeData18Movie)             data18ParsingProfile=new Data18MovieParsingProfile();
 else             if (scrapeData18WebContent)             data18ParsingProfile=new Data18WebContentParsingProfile();
            String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
            if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
              SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
              if (searchResultFromUser == null)               continue;
              overrideURLData18Movie=searchResultFromUser.getUrlPath();
            }
            if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
              IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
              SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
              System.out.println(searchStringData18Movie);
              System.out.println(searchResultsIAFD);
              if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
                if (searchResultFromUser == null)                 continue;
                overrideURLIAFD=searchResultFromUser.getUrlPath();
                if (!overrideURLIAFD.contains(""String_Node_Str""))                 overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
                System.out.println(""String_Node_Str"" + overrideURLIAFD);
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
        }
        try {
          if (scrapeJAV)           javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else           if (scrapeData18Movie)           data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else           if (scrapeData18WebContent) {
            data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
          }
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        makeProgress(100,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void done(){
      if (manuallyPickPoster && data18Movie != null && data18Movie.getPosters() != null && data18Movie.getPosters().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getPosters()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb posterPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (posterPicked != null) {
          ArrayList<Thumb> existingPosters=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getPosters()));
          existingPosters.remove(posterPicked);
          existingPosters.add(0,posterPicked);
          Thumb[] posterArray=new Thumb[existingPosters.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setPosters(existingPosters.toArray(posterArray));
        }
      }
      if (manuallyPickFanart && data18Movie != null && data18Movie.getFanart() != null && data18Movie.getFanart().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getFanart()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb fanartPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (fanartPicked != null) {
          ArrayList<Thumb> existingFanart=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getFanart()));
          existingFanart.remove(fanartPicked);
          existingFanart.add(0,fanartPicked);
          Thumb[] fanartArray=new Thumb[existingFanart.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setFanart(existingFanart.toArray(fanartArray));
        }
      }
 else       if (manuallyPickFanart && javMovie != null) {
        Thumb fanartPicked=showArtPicker(ArrayUtils.addAll(javMovie.getFanart(),javMovie.getExtraFanart()),""String_Node_Str"");
        if (fanartPicked != null)         javMovie.setFanart(ArrayUtils.toArray(fanartPicked));
      }
      if (!scrapeCanceled && (ScrapeMovieAction.this.guiMain.movieToWriteToDiskList == null || ScrapeMovieAction.this.guiMain.movieToWriteToDiskList.size() == 0)) {
        System.out.println(""String_Node_Str"");
        JOptionPane.showMessageDialog(ScrapeMovieAction.this.guiMain.getFrmMoviescraper(),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE,null);
      }
      clearOverrides();
      ScrapeMovieAction.this.guiMain.updateAllFieldsOfFileDetailPanel(true);
      ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
      ScrapeMovieAction.this.guiMain.setMainGUIEnabled(true);
    }
  }
;
  worker.execute();
}","public void actionPerformed(ActionEvent e){
  resetScrapeMovieActionCounters();
  this.guiMain.setMainGUIEnabled(false);
  this.guiMain.removeOldScrapedMovieReferences();
  clearOverrides();
  worker=new SwingWorker<Void,String>(){
    Movie javMovie=null;
    Movie data18Movie=null;
    @Override protected Void doInBackground(){
      for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
        if (this.isCancelled()) {
          System.err.println(""String_Node_Str"");
          cancelRunningThreads();
          return null;
        }
        final int movieNumberInListFinal=movieNumberInList;
        ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
        initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
        if (promptUserForURLWhenScraping && scrapeJAV) {
          try {
            DmmParsingProfile dmmPP=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
            JavLibraryParsingProfile jlPP=new JavLibraryParsingProfile();
            String searchStringDMM=dmmPP.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            SearchResult[] searchResultsDMM=dmmPP.getSearchResults(searchStringDMM);
            String searchStringJL=jlPP.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            if (searchResultsDMM != null && searchResultsDMM.length > 0) {
              SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
              if (searchResultFromUser != null)               overrideURLDMM=searchResultFromUser.getUrlPath();
            }
            if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
              SearchResult[] searchResultsJavLibStrings=jlPP.getSearchResults(searchStringJL);
              if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
                if (searchResultFromUser != null)                 overrideURLJavLibrary=searchResultFromUser.getUrlPath();
              }
            }
            if (overrideURLDMM == null && overrideURLJavLibrary == null)             continue;
          }
 catch (          IOException e2) {
            e2.printStackTrace();
          }
        }
 else         if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
          try {
            SiteParsingProfile data18ParsingProfile=null;
            if (scrapeData18Movie)             data18ParsingProfile=new Data18MovieParsingProfile();
 else             if (scrapeData18WebContent)             data18ParsingProfile=new Data18WebContentParsingProfile();
            String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
            SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
            if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
              SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
              if (searchResultFromUser == null)               continue;
              overrideURLData18Movie=searchResultFromUser.getUrlPath();
            }
            if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
              IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
              SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
              System.out.println(searchStringData18Movie);
              System.out.println(searchResultsIAFD);
              if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
                SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
                if (searchResultFromUser == null)                 continue;
                overrideURLIAFD=searchResultFromUser.getUrlPath();
                if (!overrideURLIAFD.contains(""String_Node_Str""))                 overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
                System.out.println(""String_Node_Str"" + overrideURLIAFD);
              }
            }
          }
 catch (          IOException e1) {
            e1.printStackTrace();
          }
        }
        try {
          if (scrapeJAV)           javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else           if (scrapeData18Movie)           data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else           if (scrapeData18WebContent) {
            data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
          }
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        makeProgress(100,""String_Node_Str"");
      }
      return null;
    }
    @Override protected void done(){
      guiMain.getProgressMonitor().stop();
      if (manuallyPickPoster && data18Movie != null && data18Movie.getPosters() != null && data18Movie.getPosters().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getPosters()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb posterPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (posterPicked != null) {
          ArrayList<Thumb> existingPosters=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getPosters()));
          existingPosters.remove(posterPicked);
          existingPosters.add(0,posterPicked);
          Thumb[] posterArray=new Thumb[existingPosters.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setPosters(existingPosters.toArray(posterArray));
        }
      }
      if (manuallyPickFanart && data18Movie != null && data18Movie.getFanart() != null && data18Movie.getFanart().length > 1) {
        HashSet<Thumb> uniqueElements=new HashSet<Thumb>(Arrays.asList(data18Movie.getFanart()));
        uniqueElements.addAll(Arrays.asList(data18Movie.getExtraFanart()));
        ArrayList<Thumb> uniqueElementsList=(new ArrayList<Thumb>(uniqueElements));
        Thumb[] uniqueElementsArray=uniqueElementsList.toArray(new Thumb[uniqueElementsList.size()]);
        Thumb fanartPicked=showArtPicker(uniqueElementsArray,""String_Node_Str"");
        if (fanartPicked != null) {
          ArrayList<Thumb> existingFanart=new ArrayList<Thumb>(Arrays.asList(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().getFanart()));
          existingFanart.remove(fanartPicked);
          existingFanart.add(0,fanartPicked);
          Thumb[] fanartArray=new Thumb[existingFanart.size()];
          ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieData18Movie().setFanart(existingFanart.toArray(fanartArray));
        }
      }
 else       if (manuallyPickFanart && javMovie != null) {
        Thumb fanartPicked=showArtPicker(ArrayUtils.addAll(javMovie.getFanart(),javMovie.getExtraFanart()),""String_Node_Str"");
        if (fanartPicked != null)         javMovie.setFanart(ArrayUtils.toArray(fanartPicked));
      }
      if (!scrapeCanceled && (ScrapeMovieAction.this.guiMain.movieToWriteToDiskList == null || ScrapeMovieAction.this.guiMain.movieToWriteToDiskList.size() == 0)) {
        System.out.println(""String_Node_Str"");
        JOptionPane.showMessageDialog(ScrapeMovieAction.this.guiMain.getFrmMoviescraper(),""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE,null);
      }
      clearOverrides();
      ScrapeMovieAction.this.guiMain.updateAllFieldsOfFileDetailPanel(true);
      ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
      ScrapeMovieAction.this.guiMain.setMainGUIEnabled(true);
    }
  }
;
  worker.execute();
}",0.9922596181411616
165525,"private void initializeProgressMonitor(String fileName){
  this.guiMain.setProgressMonitor(new ProgressMonitor(this.guiMain.getFrmMoviescraper(),""String_Node_Str"" + fileName,""String_Node_Str"",0,100));
  this.guiMain.getProgressMonitor().setMillisToDecideToPopup(0);
  this.guiMain.getProgressMonitor().setMillisToPopup(0);
  progress=0;
  this.guiMain.getProgressMonitor().setProgress(0);
}","private void initializeProgressMonitor(String fileName,int currentIndex,int totalItems){
  String text;
  if (totalItems == 1)   text=""String_Node_Str"" + fileName;
 else   text=String.format(""String_Node_Str"",currentIndex + 1,totalItems,fileName);
  this.guiMain.getProgressMonitor().start(text);
  progress=0;
}",0.2735042735042735
165526,"public void makeProgress(int amount,String note){
  if (this.guiMain.getProgressMonitor().isCanceled()) {
    cancelRunningThreads();
    return;
  }
  if (progress < 100) {
    if (amount + progress <= 100) {
      progress+=amount;
      this.guiMain.getProgressMonitor().setProgress(progress);
      this.guiMain.getProgressMonitor().setNote(""String_Node_Str"" + progress + ""String_Node_Str""+ note);
    }
 else {
      progress=100;
      this.guiMain.getProgressMonitor().setNote(""String_Node_Str"" + progress + ""String_Node_Str""+ note);
      this.guiMain.getProgressMonitor().setProgress(progress);
    }
  }
}","public void makeProgress(int amount,String note){
  if (this.guiMain.getProgressMonitor().isCanceled()) {
    cancelRunningThreads();
    return;
  }
  if (progress < 100) {
    if (amount + progress <= 100) {
      progress+=amount;
    }
 else {
      progress=100;
    }
    this.guiMain.getProgressMonitor().update(progress,note);
  }
}",0.6471204188481675
165527,"@Override protected Void doInBackground(){
  for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    if (this.isCancelled()) {
      System.err.println(""String_Node_Str"");
      cancelRunningThreads();
      return null;
    }
    final int movieNumberInListFinal=movieNumberInList;
    ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
    initializeProgressMonitor(currentFileName);
    if (promptUserForURLWhenScraping && scrapeJAV) {
      try {
        DmmParsingProfile dmmPP=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
        JavLibraryParsingProfile jlPP=new JavLibraryParsingProfile();
        String searchStringDMM=dmmPP.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
        SearchResult[] searchResultsDMM=dmmPP.getSearchResults(searchStringDMM);
        String searchStringJL=jlPP.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
        if (searchResultsDMM != null && searchResultsDMM.length > 0) {
          SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
          if (searchResultFromUser != null)           overrideURLDMM=searchResultFromUser.getUrlPath();
        }
        if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
          SearchResult[] searchResultsJavLibStrings=jlPP.getSearchResults(searchStringJL);
          if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
            if (searchResultFromUser != null)             overrideURLJavLibrary=searchResultFromUser.getUrlPath();
          }
        }
        if (overrideURLDMM == null && overrideURLJavLibrary == null)         continue;
      }
 catch (      IOException e2) {
        e2.printStackTrace();
      }
    }
 else     if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
      try {
        SiteParsingProfile data18ParsingProfile=null;
        if (scrapeData18Movie)         data18ParsingProfile=new Data18MovieParsingProfile();
 else         if (scrapeData18WebContent)         data18ParsingProfile=new Data18WebContentParsingProfile();
        String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
        SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
        if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
          SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
          if (searchResultFromUser == null)           continue;
          overrideURLData18Movie=searchResultFromUser.getUrlPath();
        }
        if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
          IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
          SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
          System.out.println(searchStringData18Movie);
          System.out.println(searchResultsIAFD);
          if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
            if (searchResultFromUser == null)             continue;
            overrideURLIAFD=searchResultFromUser.getUrlPath();
            if (!overrideURLIAFD.contains(""String_Node_Str""))             overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
            System.out.println(""String_Node_Str"" + overrideURLIAFD);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
    try {
      if (scrapeJAV)       javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else       if (scrapeData18Movie)       data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else       if (scrapeData18WebContent) {
        data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    makeProgress(100,""String_Node_Str"");
  }
  return null;
}","@Override protected Void doInBackground(){
  for (int movieNumberInList=0; movieNumberInList < ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size(); movieNumberInList++) {
    if (this.isCancelled()) {
      System.err.println(""String_Node_Str"");
      cancelRunningThreads();
      return null;
    }
    final int movieNumberInListFinal=movieNumberInList;
    ScrapeMovieAction.this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    String currentFileName=ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).toString();
    initializeProgressMonitor(currentFileName,movieNumberInList,ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().size());
    if (promptUserForURLWhenScraping && scrapeJAV) {
      try {
        DmmParsingProfile dmmPP=new DmmParsingProfile(!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese());
        JavLibraryParsingProfile jlPP=new JavLibraryParsingProfile();
        String searchStringDMM=dmmPP.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
        SearchResult[] searchResultsDMM=dmmPP.getSearchResults(searchStringDMM);
        String searchStringJL=jlPP.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
        if (searchResultsDMM != null && searchResultsDMM.length > 0) {
          SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsDMM,""String_Node_Str"");
          if (searchResultFromUser != null)           overrideURLDMM=searchResultFromUser.getUrlPath();
        }
        if (!ScrapeMovieAction.this.guiMain.getPreferences().getScrapeInJapanese()) {
          SearchResult[] searchResultsJavLibStrings=jlPP.getSearchResults(searchStringJL);
          if (searchResultsJavLibStrings != null && searchResultsJavLibStrings.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsJavLibStrings,""String_Node_Str"");
            if (searchResultFromUser != null)             overrideURLJavLibrary=searchResultFromUser.getUrlPath();
          }
        }
        if (overrideURLDMM == null && overrideURLJavLibrary == null)         continue;
      }
 catch (      IOException e2) {
        e2.printStackTrace();
      }
    }
 else     if (promptUserForURLWhenScraping && (scrapeData18Movie || scrapeData18WebContent)) {
      try {
        SiteParsingProfile data18ParsingProfile=null;
        if (scrapeData18Movie)         data18ParsingProfile=new Data18MovieParsingProfile();
 else         if (scrapeData18WebContent)         data18ParsingProfile=new Data18WebContentParsingProfile();
        String searchStringData18Movie=data18ParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList));
        SearchResult[] searchResultData18Movie=data18ParsingProfile.getSearchResults(searchStringData18Movie);
        if (searchResultData18Movie != null && searchResultData18Movie.length > 0) {
          SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultData18Movie,""String_Node_Str"");
          if (searchResultFromUser == null)           continue;
          overrideURLData18Movie=searchResultFromUser.getUrlPath();
        }
        if (scrapeData18Movie && ScrapeMovieAction.this.guiMain.getPreferences().getUseIAFDForActors()) {
          IAFDParsingProfile iafdParsingProfile=new IAFDParsingProfile();
          SearchResult[] searchResultsIAFD=iafdParsingProfile.getSearchResults(iafdParsingProfile.createSearchString(ScrapeMovieAction.this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList)));
          System.out.println(searchStringData18Movie);
          System.out.println(searchResultsIAFD);
          if (searchResultsIAFD != null && searchResultsIAFD.length > 0) {
            SearchResult searchResultFromUser=GUIMain.showOptionPane(searchResultsIAFD,""String_Node_Str"");
            if (searchResultFromUser == null)             continue;
            overrideURLIAFD=searchResultFromUser.getUrlPath();
            if (!overrideURLIAFD.contains(""String_Node_Str""))             overrideURLIAFD=""String_Node_Str"" + overrideURLIAFD;
            System.out.println(""String_Node_Str"" + overrideURLIAFD);
          }
        }
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
    try {
      if (scrapeJAV)       javMovie=makeJavThreadsAndScrape(movieNumberInListFinal);
 else       if (scrapeData18Movie)       data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,true);
 else       if (scrapeData18WebContent) {
        data18Movie=makeData18MovieThreadsAndScrape(movieNumberInListFinal,false);
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    makeProgress(100,""String_Node_Str"");
  }
  return null;
}",0.990631364562118
165528,"@Override public void actionPerformed(ActionEvent arg0){
  String pathSeperator=System.getProperty(""String_Node_Str"");
  int moviesToMove=guiMain.getCurrentlySelectedMovieFileList().size();
  for (int movieNumberInList=0; movieNumberInList < moviesToMove; movieNumberInList++) {
    try {
      this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      if (this.guiMain.getCurrentlySelectedMovieFileList() != null && this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).exists() && this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).isFile()) {
        String destinationDirectoryPrefix=""String_Node_Str"";
        if (this.guiMain.movieToWriteToDiskList != null && this.guiMain.movieToWriteToDiskList.size() > 0) {
          String possibleID=this.guiMain.movieToWriteToDiskList.get(movieNumberInList).getId().getId().toUpperCase();
          String possibleIDWithoutDash=possibleID.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          String fileNameComparingTo=FilenameUtils.getBaseName(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getName().toUpperCase());
          if (possibleID.endsWith(SiteParsingProfile.stripDiscNumber(fileNameComparingTo)) || possibleIDWithoutDash.endsWith(SiteParsingProfile.stripDiscNumber(fileNameComparingTo))) {
            destinationDirectoryPrefix=this.guiMain.movieToWriteToDiskList.get(movieNumberInList).getTitle().getTitle() + ""String_Node_Str"";
            destinationDirectoryPrefix=destinationDirectoryPrefix.replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
        }
        File destDir=new File(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getParentFile().getCanonicalPath() + pathSeperator + destinationDirectoryPrefix+ SiteParsingProfile.stripDiscNumber(FilenameUtils.getBaseName(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getName())));
        this.guiMain.clearAllFieldsOfFileDetailPanel();
        if (this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).isFile() && this.guiMain.getCurrentlySelectedActorsFolderList() != null && this.guiMain.getPreferences().getDownloadActorImagesToActorFolderPreference()) {
          File[] actorFilesToCopy=this.guiMain.actorFolderFiles(movieNumberInList);
          File actorsFolderDestDir=new File(destDir.getPath() + File.separator + ""String_Node_Str"");
          for (          File currentFile : actorFilesToCopy) {
            FileUtils.copyFileToDirectory(currentFile,actorsFolderDestDir);
          }
        }
        if (this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).exists()) {
          File currentDirectory=this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getParentFile();
          String currentlySelectedMovieFileWihoutStackSuffix=SiteParsingProfile.stripDiscNumber(FilenameUtils.removeExtension(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getName()));
          if (currentDirectory != null) {
            for (            File currentFile : currentDirectory.listFiles()) {
              String currentFileNameWithoutStackSuffix=SiteParsingProfile.stripDiscNumber(FilenameUtils.removeExtension(currentFile.getName()));
              if (currentFile.isFile() && currentFileNameWithoutStackSuffix.equals(currentlySelectedMovieFileWihoutStackSuffix)) {
                FileUtils.moveFileToDirectory(currentFile,destDir,true);
              }
            }
          }
        }
        if (this.guiMain.getCurrentlySelectedNfoFileList().get(movieNumberInList).exists())         FileUtils.moveFileToDirectory(this.guiMain.getCurrentlySelectedNfoFileList().get(movieNumberInList),destDir,true);
        if (this.guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList).exists()) {
          if (this.guiMain.getPreferences().getCreateFolderJpgEnabledPreference()) {
            File currentlySelectedFolderJpg=new File(Movie.getFileNameOfFolderJpg(destDir));
            FileUtils.copyFile(this.guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList),currentlySelectedFolderJpg);
          }
          FileUtils.moveFileToDirectory(this.guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList),destDir,true);
        }
        if (this.guiMain.getCurrentlySelectedFanartFileList().get(movieNumberInList).exists()) {
          FileUtils.moveFileToDirectory(this.guiMain.getCurrentlySelectedFanartFileList().get(movieNumberInList),destDir,true);
        }
        if (this.guiMain.getCurrentlySelectedTrailerFileList().get(movieNumberInList).exists()) {
          FileUtils.moveFileToDirectory(this.guiMain.getCurrentlySelectedTrailerFileList().get(movieNumberInList),destDir,true);
        }
        if (this.guiMain.getPreferences().getExtraFanartScrapingEnabledPreference()) {
          this.guiMain.movieToWriteToDiskList.get(movieNumberInList).writeExtraFanart(destDir);
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
 finally {
      this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
    }
  }
  guiMain.removeOldScrapedMovieReferences();
  guiMain.removeOldSelectedFileReferences();
  this.guiMain.updateFileListModel(this.guiMain.getCurrentlySelectedDirectoryList(),false);
}","@Override public void actionPerformed(ActionEvent arg0){
  String pathSeperator=System.getProperty(""String_Node_Str"");
  int moviesToMove=guiMain.getCurrentlySelectedMovieFileList().size();
  for (int movieNumberInList=0; movieNumberInList < moviesToMove; movieNumberInList++) {
    try {
      this.guiMain.getFrmMoviescraper().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      if (this.guiMain.getCurrentlySelectedMovieFileList() != null && this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).exists() && this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).isFile()) {
        String destinationDirectoryPrefix=""String_Node_Str"";
        if (this.guiMain.movieToWriteToDiskList != null && this.guiMain.movieToWriteToDiskList.size() > 0) {
          String possibleID=this.guiMain.movieToWriteToDiskList.get(movieNumberInList).getId().getId().toUpperCase();
          String possibleIDWithoutDash=possibleID.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          String fileNameComparingTo=FilenameUtils.getBaseName(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getName().toUpperCase());
          if (possibleID.endsWith(SiteParsingProfile.stripDiscNumber(fileNameComparingTo)) || possibleIDWithoutDash.endsWith(SiteParsingProfile.stripDiscNumber(fileNameComparingTo))) {
            destinationDirectoryPrefix=this.guiMain.movieToWriteToDiskList.get(movieNumberInList).getTitle().getTitle() + ""String_Node_Str"";
            destinationDirectoryPrefix=destinationDirectoryPrefix.replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
        }
        File destDir=new File(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getParentFile().getCanonicalPath() + pathSeperator + destinationDirectoryPrefix+ SiteParsingProfile.stripDiscNumber(FilenameUtils.getBaseName(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getName())));
        this.guiMain.clearAllFieldsOfFileDetailPanel();
        if (this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).isFile() && this.guiMain.getCurrentlySelectedActorsFolderList() != null && this.guiMain.getPreferences().getDownloadActorImagesToActorFolderPreference()) {
          File[] actorFilesToCopy=this.guiMain.actorFolderFiles(movieNumberInList);
          File actorsFolderDestDir=new File(destDir.getPath() + File.separator + ""String_Node_Str"");
          for (          File currentFile : actorFilesToCopy) {
            FileUtils.copyFileToDirectory(currentFile,actorsFolderDestDir);
          }
        }
        if (this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).exists()) {
          File currentDirectory=this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getParentFile();
          String currentlySelectedMovieFileWihoutStackSuffix=SiteParsingProfile.stripDiscNumber(FilenameUtils.removeExtension(this.guiMain.getCurrentlySelectedMovieFileList().get(movieNumberInList).getName()));
          if (currentDirectory != null) {
            for (            File currentFile : currentDirectory.listFiles()) {
              String currentFileNameWithoutStackSuffix=SiteParsingProfile.stripDiscNumber(FilenameUtils.removeExtension(currentFile.getName()));
              if (currentFile.isFile() && currentFileNameWithoutStackSuffix.equals(currentlySelectedMovieFileWihoutStackSuffix)) {
                FileUtils.moveFileToDirectory(currentFile,destDir,true);
              }
            }
          }
        }
        if (this.guiMain.getCurrentlySelectedNfoFileList().get(movieNumberInList).exists())         FileUtils.moveFileToDirectory(this.guiMain.getCurrentlySelectedNfoFileList().get(movieNumberInList),destDir,true);
        if (this.guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList).exists()) {
          if (this.guiMain.getPreferences().getCreateFolderJpgEnabledPreference()) {
            File currentlySelectedFolderJpg=new File(Movie.getFileNameOfFolderJpg(destDir));
            FileUtils.copyFile(this.guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList),currentlySelectedFolderJpg);
          }
          FileUtils.moveFileToDirectory(this.guiMain.getCurrentlySelectedPosterFileList().get(movieNumberInList),destDir,true);
        }
        if (this.guiMain.getCurrentlySelectedFanartFileList().get(movieNumberInList).exists()) {
          FileUtils.moveFileToDirectory(this.guiMain.getCurrentlySelectedFanartFileList().get(movieNumberInList),destDir,true);
        }
        if (this.guiMain.getCurrentlySelectedTrailerFileList().get(movieNumberInList).exists()) {
          FileUtils.moveFileToDirectory(this.guiMain.getCurrentlySelectedTrailerFileList().get(movieNumberInList),destDir,true);
        }
        if (this.guiMain.getPreferences().getExtraFanartScrapingEnabledPreference() && guiMain.movieToWriteToDiskList.size() > movieNumberInList) {
          this.guiMain.movieToWriteToDiskList.get(movieNumberInList).writeExtraFanart(destDir);
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
 finally {
      this.guiMain.getFrmMoviescraper().setCursor(Cursor.getDefaultCursor());
    }
  }
  guiMain.removeOldScrapedMovieReferences();
  guiMain.removeOldSelectedFileReferences();
  this.guiMain.updateFileListModel(this.guiMain.getCurrentlySelectedDirectoryList(),false);
}",0.9945079679481408
165529,"@Override public Icon getIcon(File iconType) throws IOException {
  if (iconType.isDirectory())   return FileSystemView.getFileSystemView().getSystemIcon(iconType);
  if (FilenameUtils.getExtension(iconType.getName()) != ""String_Node_Str"") {
    String mimeType=Files.probeContentType(iconType.toPath());
    if (mimeType != null) {
      for (      String type : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})       if (mimeType.startsWith(type + ""String_Node_Str""))       return createIcon(type);
    }
  }
  return createIcon(""String_Node_Str"");
}","@Override public Icon getIcon(File iconType) throws IOException {
  if (iconType.isDirectory())   return FileSystemView.getFileSystemView().getSystemIcon(iconType);
  String name=FilenameUtils.getName(iconType.getName());
  String ext=FilenameUtils.getExtension(iconType.getName());
  if (ext != ""String_Node_Str"" && !name.startsWith(""String_Node_Str"")) {
    String mimeType=Files.probeContentType(iconType.toPath());
    if (mimeType != null) {
      for (      String type : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})       if (mimeType.startsWith(type + ""String_Node_Str""))       return createIcon(type);
    }
  }
  return createIcon(""String_Node_Str"");
}",0.9082706766917292
165530,"public static Icon getIconFromCache(File iconType) throws IOException {
  String key=iconType.isDirectory() ? ""String_Node_Str"" : FilenameUtils.getExtension(iconType.getName());
  if (cache.containsKey(key)) {
    return cache.get(key);
  }
 else {
    Icon iconToCache=iconProvider.getIcon(iconType);
    cache.put(key,iconToCache);
    return iconToCache;
  }
}","public static Icon getIconFromCache(File iconType) throws IOException {
  String name=FilenameUtils.getName(iconType.getName());
  String ext=FilenameUtils.getExtension(iconType.getName());
  String key=iconType.isDirectory() ? ""String_Node_Str"" : name.startsWith(""String_Node_Str"") ? ""String_Node_Str"" : ext;
  if (cache.containsKey(key)) {
    return cache.get(key);
  }
 else {
    Icon iconToCache=iconProvider.getIcon(iconType);
    cache.put(key,iconToCache);
    return iconToCache;
  }
}",0.7342657342657343
165531,"public List<CSVRecord> readFromCSVFile(String filePath) throws IOException {
  URL url=getClass().getResource(filePath);
  File file=new File(url.getPath());
  FileReader fileReader=new FileReader(file);
  CSVFormat format=CSVFormat.RFC4180.withDelimiter(',').withCommentMarker('#');
  CSVParser parser=new CSVParser(fileReader,format);
  List<CSVRecord> csvRecords=parser.getRecords();
  parser.close();
  return csvRecords;
}","public List<CSVRecord> readFromCSVFile(String filePath) throws IOException {
  InputStream inputStream=getClass().getResourceAsStream(filePath);
  CSVFormat format=CSVFormat.RFC4180.withDelimiter(',').withCommentMarker('#');
  CSVParser parser=new CSVParser(new InputStreamReader(inputStream),format);
  List<CSVRecord> csvRecords=parser.getRecords();
  parser.close();
  return csvRecords;
}",0.7985347985347986
165532,"private ImageIcon getImageIconForLabelName(Actor currentActor){
  if (currentActor.getThumb() != null) {
    if (currentlySelectedActorsFolderList != null && currentlySelectedActorsFolderList.get(0).isDirectory()) {
      String currentActorNameAsPotentialFileName=currentActor.getName().replace(' ','_');
      File[] listFiles=currentlySelectedActorsFolderList.get(0).listFiles();
      for (      File currentFile : listFiles) {
        if (currentFile.isFile() && FilenameUtils.removeExtension(currentFile.getName()).equals(currentActorNameAsPotentialFileName)) {
          return new ImageIcon(currentFile.getPath());
        }
      }
    }
 else {
      return currentActor.getThumb().getImageIconThumbImage();
    }
  }
  return new ImageIcon();
}","private ImageIcon getImageIconForLabelName(Actor currentActor){
  if (currentActor.getThumb() != null) {
    if (currentlySelectedActorsFolderList != null && currentlySelectedActorsFolderList.size() > 0 && currentlySelectedActorsFolderList.get(0).isDirectory()) {
      String currentActorNameAsPotentialFileName=currentActor.getName().replace(' ','_');
      File[] listFiles=currentlySelectedActorsFolderList.get(0).listFiles();
      for (      File currentFile : listFiles) {
        if (currentFile.isFile() && FilenameUtils.removeExtension(currentFile.getName()).equals(currentActorNameAsPotentialFileName)) {
          return new ImageIcon(currentFile.getPath());
        }
      }
    }
 else {
      return currentActor.getThumb().getImageIconThumbImage();
    }
  }
  return new ImageIcon();
}",0.9691912708600772
165533,"public void updateView(boolean forceUpdatePoster,GUIMain gui){
  boolean posterFileUpdateOccured=false;
  boolean fanartFileUpdateOccured=false;
  if (!forceUpdatePoster) {
    File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File standardPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),false));
    File standardFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),false));
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedPosterFileList().get(0));
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedFanartFileList().get(0));
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        this.setNewPoster(new ImageIcon(standardPosterJpg.getCanonicalPath()));
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(standardFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
    try {
      Image posterImage=gui.movieToWriteToDiskList.get(0).getPosters()[0].getThumbImage();
      ImageIcon newPosterIcon=new ImageIcon(posterImage);
      BufferedImage img=(BufferedImage)newPosterIcon.getImage();
      BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
      this.setNewPoster(scaledImage);
      posterFileUpdateOccured=true;
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
    System.out.println(""String_Node_Str"");
    try {
      Image fanartImage=gui.movieToWriteToDiskList.get(0).getFanart()[0].getThumbImage();
      ImageIcon newFanartIcon=new ImageIcon(fanartImage);
      BufferedImage img=(BufferedImage)newFanartIcon.getImage();
      BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
      this.setNewFanart(scaledImage);
      fanartImage=scaledImage;
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}","public void updateView(boolean forceUpdatePoster,GUIMain gui){
  boolean posterFileUpdateOccured=false;
  boolean fanartFileUpdateOccured=false;
  if (!forceUpdatePoster) {
    File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File standardPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),false));
    File standardFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),false));
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedPosterFileList().get(0));
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedFanartFileList().get(0));
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        this.setNewPoster(new ImageIcon(standardPosterJpg.getCanonicalPath()));
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(standardFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
    try {
      Image posterImage=gui.movieToWriteToDiskList.get(0).getPosters()[0].getThumbImage();
      ImageIcon newPosterIcon=new ImageIcon(posterImage);
      BufferedImage img=(BufferedImage)newPosterIcon.getImage();
      BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
      this.setNewPoster(scaledImage);
      posterFileUpdateOccured=true;
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
    System.out.println(""String_Node_Str"");
    try {
      Image fanartImage=gui.movieToWriteToDiskList.get(0).getFanart()[0].getThumbImage();
      ImageIcon newFanartIcon=new ImageIcon(fanartImage);
      BufferedImage img=(BufferedImage)newFanartIcon.getImage();
      BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
      this.setNewFanart(scaledImage);
      fanartImage=scaledImage;
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}",0.9902891670263272
165534,"public void updateView(boolean forceUpdatePoster,GUIMain gui){
  boolean posterFileUpdateOccured=false;
  boolean fanartFileUpdateOccured=false;
  if (!forceUpdatePoster) {
    File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File standardPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),false));
    File standardFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),false));
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedPosterFileList().get(0));
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedFanartFileList().get(0));
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        this.setNewPoster(new ImageIcon(standardPosterJpg.getCanonicalPath()));
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(standardFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
    try {
      Image posterImage=gui.movieToWriteToDiskList.get(0).getPosters()[0].getThumbImage();
      ImageIcon newPosterIcon=new ImageIcon(posterImage);
      BufferedImage img=(BufferedImage)newPosterIcon.getImage();
      BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
      this.setNewPoster(scaledImage);
      posterFileUpdateOccured=true;
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
    System.out.println(""String_Node_Str"");
    try {
      Image fanartImage=gui.movieToWriteToDiskList.get(0).getFanart()[0].getThumbImage();
      ImageIcon newFanartIcon=new ImageIcon(fanartImage);
      BufferedImage img=(BufferedImage)newFanartIcon.getImage();
      BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
      this.setNewFanart(scaledImage);
      fanartImage=scaledImage;
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}","public void updateView(boolean forceUpdatePoster,GUIMain gui){
  boolean posterFileUpdateOccured=false;
  boolean fanartFileUpdateOccured=false;
  if (!forceUpdatePoster && gui.getCurrentlySelectedMovieFileList().size() > 0) {
    File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),true));
    File standardPosterJpg=new File(Movie.getFileNameOfPoster(gui.getCurrentlySelectedMovieFileList().get(0),false));
    File standardFanartJpg=new File(Movie.getFileNameOfFanart(gui.getCurrentlySelectedMovieFileList().get(0),false));
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedPosterFileList().get(0));
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedPosterFileList().get(0).exists()) {
      try {
        BufferedImage img=ImageIO.read(gui.getCurrentlySelectedFanartFileList().get(0));
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          this.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (gui.getCurrentlySelectedMovieFileList().get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
      try {
        this.setNewPoster(new ImageIcon(standardPosterJpg.getCanonicalPath()));
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
      try {
        BufferedImage img=ImageIO.read(standardFanartJpg);
        if (img != null) {
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          this.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
    try {
      Image posterImage=gui.movieToWriteToDiskList.get(0).getPosters()[0].getThumbImage();
      ImageIcon newPosterIcon=new ImageIcon(posterImage);
      BufferedImage img=(BufferedImage)newPosterIcon.getImage();
      BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
      this.setNewPoster(scaledImage);
      posterFileUpdateOccured=true;
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
  if (gui.movieToWriteToDiskList.size() > 0 && gui.movieToWriteToDiskList.get(0) != null && gui.movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
    System.out.println(""String_Node_Str"");
    try {
      Image fanartImage=gui.movieToWriteToDiskList.get(0).getFanart()[0].getThumbImage();
      ImageIcon newFanartIcon=new ImageIcon(fanartImage);
      BufferedImage img=(BufferedImage)newFanartIcon.getImage();
      BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
      this.setNewFanart(scaledImage);
      fanartImage=scaledImage;
    }
 catch (    IOException e) {
      e.printStackTrace();
      JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}",0.994262643433914
165535,"/** 
 * Create the frame.
 */
public RenamerGUI(final MoviescraperPreferences preferences){
  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  setBounds(100,100,450,300);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  setContentPane(contentPane);
  GridBagLayout gbl_contentPane=new GridBagLayout();
  gbl_contentPane.columnWidths=new int[]{0,0,0};
  gbl_contentPane.rowHeights=new int[]{0,0,0,0,0};
  gbl_contentPane.columnWeights=new double[]{0.0,1.0,Double.MIN_VALUE};
  gbl_contentPane.rowWeights=new double[]{0.0,0.0,0.0,1.0,0.0};
  contentPane.setLayout(gbl_contentPane);
  JLabel lblRenamestring=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblRenamestring=new GridBagConstraints();
  gbc_lblRenamestring.insets=new Insets(0,0,5,5);
  gbc_lblRenamestring.anchor=GridBagConstraints.EAST;
  gbc_lblRenamestring.gridx=0;
  gbc_lblRenamestring.gridy=0;
  contentPane.add(lblRenamestring,gbc_lblRenamestring);
  textFieldRenameString=new JTextField(preferences.getRenamerString());
  GridBagConstraints gbc_textFieldRenameString=new GridBagConstraints();
  gbc_textFieldRenameString.insets=new Insets(0,0,5,0);
  gbc_textFieldRenameString.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldRenameString.gridx=1;
  gbc_textFieldRenameString.gridy=0;
  contentPane.add(textFieldRenameString,gbc_textFieldRenameString);
  textFieldRenameString.setColumns(10);
  textFieldRenameString.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      preferences.setRenamerString(textFieldRenameString.getText());
      updateExample();
    }
  }
);
  JLabel lblSanitizerString=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSanitizerString=new GridBagConstraints();
  gbc_lblSanitizerString.insets=new Insets(0,0,5,5);
  gbc_lblSanitizerString.anchor=GridBagConstraints.EAST;
  gbc_lblSanitizerString.gridx=0;
  gbc_lblSanitizerString.gridy=1;
  contentPane.add(lblSanitizerString,gbc_lblSanitizerString);
  textFieldSanitizerString=new JTextField(preferences.getSanitizerForFilename());
  GridBagConstraints gbc_textFieldSanitizerString=new GridBagConstraints();
  gbc_textFieldSanitizerString.insets=new Insets(0,0,5,0);
  gbc_textFieldSanitizerString.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldSanitizerString.gridx=1;
  gbc_textFieldSanitizerString.gridy=1;
  contentPane.add(textFieldSanitizerString,gbc_textFieldSanitizerString);
  textFieldSanitizerString.setColumns(10);
  textFieldSanitizerString.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      preferences.setSanitizerForFilename(textFieldSanitizerString.getText());
      updateExample();
    }
  }
);
  lblExample=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblExample=new GridBagConstraints();
  gbc_lblExample.anchor=GridBagConstraints.EAST;
  gbc_lblExample.insets=new Insets(0,0,5,5);
  gbc_lblExample.gridx=0;
  gbc_lblExample.gridy=2;
  contentPane.add(lblExample,gbc_lblExample);
  textFieldExample=new JTextField();
  textFieldExample.setEditable(false);
  GridBagConstraints gbc_textFieldExample=new GridBagConstraints();
  gbc_textFieldExample.insets=new Insets(0,0,5,0);
  gbc_textFieldExample.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldExample.gridx=1;
  gbc_textFieldExample.gridy=2;
  contentPane.add(textFieldExample,gbc_textFieldExample);
  textFieldExample.setColumns(10);
  fileDetailPanel=new FileDetailPanel(preferences,null);
  scrollPane=new JScrollPane();
  scrollPane.setViewportView(fileDetailPanel);
  GridBagConstraints gbc_scrollPane=new GridBagConstraints();
  gbc_scrollPane.insets=new Insets(0,0,5,0);
  gbc_scrollPane.gridwidth=3;
  gbc_scrollPane.fill=GridBagConstraints.BOTH;
  gbc_scrollPane.gridx=0;
  gbc_scrollPane.gridy=3;
  contentPane.add(scrollPane,gbc_scrollPane);
  panel=new JPanel();
  GridBagConstraints gbc_panel=new GridBagConstraints();
  gbc_panel.gridwidth=2;
  gbc_panel.gridx=0;
  gbc_panel.gridy=4;
  contentPane.add(panel,gbc_panel);
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  btnOk=new JButton(""String_Node_Str"");
  panel.add(btnOk);
  btnOk.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      preferences.savePreferences();
      RenamerGUI.this.dispose();
    }
  }
);
  btnCancel=new JButton(""String_Node_Str"");
  panel.add(btnCancel);
  btnCancel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RenamerGUI.this.dispose();
    }
  }
);
  fileDetailPanel.setNewMovie(getFakeMovie(),false);
  this.setVisible(true);
}","/** 
 * Create the frame.
 */
public RenamerGUI(final MoviescraperPreferences preferences){
  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  setBounds(100,100,450,300);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  setContentPane(contentPane);
  GridBagLayout gbl_contentPane=new GridBagLayout();
  gbl_contentPane.columnWidths=new int[]{0,0,0};
  gbl_contentPane.rowHeights=new int[]{0,0,0,0,0};
  gbl_contentPane.columnWeights=new double[]{0.0,1.0,Double.MIN_VALUE};
  gbl_contentPane.rowWeights=new double[]{0.0,0.0,0.0,1.0,0.0};
  contentPane.setLayout(gbl_contentPane);
  JLabel lblRenamestring=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblRenamestring=new GridBagConstraints();
  gbc_lblRenamestring.insets=new Insets(0,0,5,5);
  gbc_lblRenamestring.anchor=GridBagConstraints.EAST;
  gbc_lblRenamestring.gridx=0;
  gbc_lblRenamestring.gridy=0;
  contentPane.add(lblRenamestring,gbc_lblRenamestring);
  textFieldRenameString=new JTextField(preferences.getRenamerString());
  GridBagConstraints gbc_textFieldRenameString=new GridBagConstraints();
  gbc_textFieldRenameString.insets=new Insets(0,0,5,0);
  gbc_textFieldRenameString.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldRenameString.gridx=1;
  gbc_textFieldRenameString.gridy=0;
  contentPane.add(textFieldRenameString,gbc_textFieldRenameString);
  textFieldRenameString.setColumns(10);
  textFieldRenameString.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      preferences.setRenamerString(textFieldRenameString.getText());
      updateExample();
    }
  }
);
  JLabel lblSanitizerString=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSanitizerString=new GridBagConstraints();
  gbc_lblSanitizerString.insets=new Insets(0,0,5,5);
  gbc_lblSanitizerString.anchor=GridBagConstraints.EAST;
  gbc_lblSanitizerString.gridx=0;
  gbc_lblSanitizerString.gridy=1;
  contentPane.add(lblSanitizerString,gbc_lblSanitizerString);
  textFieldSanitizerString=new JTextField(preferences.getSanitizerForFilename());
  GridBagConstraints gbc_textFieldSanitizerString=new GridBagConstraints();
  gbc_textFieldSanitizerString.insets=new Insets(0,0,5,0);
  gbc_textFieldSanitizerString.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldSanitizerString.gridx=1;
  gbc_textFieldSanitizerString.gridy=1;
  contentPane.add(textFieldSanitizerString,gbc_textFieldSanitizerString);
  textFieldSanitizerString.setColumns(10);
  textFieldSanitizerString.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      preferences.setSanitizerForFilename(textFieldSanitizerString.getText());
      updateExample();
    }
  }
);
  lblExample=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblExample=new GridBagConstraints();
  gbc_lblExample.anchor=GridBagConstraints.EAST;
  gbc_lblExample.insets=new Insets(0,0,5,5);
  gbc_lblExample.gridx=0;
  gbc_lblExample.gridy=2;
  contentPane.add(lblExample,gbc_lblExample);
  textFieldExample=new JTextField();
  textFieldExample.setEditable(false);
  GridBagConstraints gbc_textFieldExample=new GridBagConstraints();
  gbc_textFieldExample.insets=new Insets(0,0,5,0);
  gbc_textFieldExample.fill=GridBagConstraints.HORIZONTAL;
  gbc_textFieldExample.gridx=1;
  gbc_textFieldExample.gridy=2;
  contentPane.add(textFieldExample,gbc_textFieldExample);
  textFieldExample.setColumns(10);
  fileDetailPanel=new FileDetailPanel(preferences,new GUIMain());
  scrollPane=new JScrollPane();
  scrollPane.setViewportView(fileDetailPanel);
  GridBagConstraints gbc_scrollPane=new GridBagConstraints();
  gbc_scrollPane.insets=new Insets(0,0,5,0);
  gbc_scrollPane.gridwidth=3;
  gbc_scrollPane.fill=GridBagConstraints.BOTH;
  gbc_scrollPane.gridx=0;
  gbc_scrollPane.gridy=3;
  contentPane.add(scrollPane,gbc_scrollPane);
  panel=new JPanel();
  GridBagConstraints gbc_panel=new GridBagConstraints();
  gbc_panel.gridwidth=2;
  gbc_panel.gridx=0;
  gbc_panel.gridy=4;
  contentPane.add(panel,gbc_panel);
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  btnOk=new JButton(""String_Node_Str"");
  panel.add(btnOk);
  btnOk.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      preferences.savePreferences();
      RenamerGUI.this.dispose();
    }
  }
);
  btnCancel=new JButton(""String_Node_Str"");
  panel.add(btnCancel);
  btnCancel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RenamerGUI.this.dispose();
    }
  }
);
  fileDetailPanel.setNewMovie(getFakeMovie(),false);
  this.setVisible(true);
}",0.9983753926134518
165536,"public static Image getImageFromCache(URL url) throws IOException {
  if (cache.containsKey(url)) {
    return cache.get(url);
  }
 else {
    Image imageFromUrl=ImageIO.read(url);
    cache.put(url,imageFromUrl);
    return imageFromUrl;
  }
}","public static Image getImageFromCache(URL url) throws IOException {
  if (cache.containsKey(url)) {
    return cache.get(url);
  }
 else {
    Image imageFromUrl=ImageIO.read(url);
    if (imageFromUrl != null) {
      cache.put(url,imageFromUrl);
      return imageFromUrl;
    }
 else {
      Image blankImage=new BufferedImage(0,0,BufferedImage.TYPE_INT_RGB);
      cache.put(url,blankImage);
      return blankImage;
    }
  }
}",0.7218934911242604
165537,"protected void readMovieFromNfoFile(File nfoFile){
  FileInputStream fisTargetFile=null;
  try {
    fisTargetFile=new FileInputStream(nfoFile);
    String targetFileStr=IOUtils.toString(fisTargetFile,""String_Node_Str"");
    if (targetFileStr.contains(""String_Node_Str"")) {
      while (targetFileStr.length() > 0 && !targetFileStr.startsWith(""String_Node_Str"")) {
        if (targetFileStr.length() > 1) {
          targetFileStr=targetFileStr.substring(1,targetFileStr.length());
        }
 else         break;
      }
    }
    XbmcXmlMovieBean xmlMovieBean=XbmcXmlMovieBean.makeFromXML(targetFileStr);
    if (xmlMovieBean != null) {
      Movie movieFromNfo=xmlMovieBean.toMovie();
      movieToWriteToDiskList.add(movieFromNfo);
      if (currentlySelectedPosterFileList.get(0).exists()) {
        Thumb[] currentPosters=movieToWriteToDiskList.get(0).getPosters();
        Thumb fileFromDisk;
        if (currentPosters.length > 0 && currentPosters[0] != null && currentPosters[0].getThumbURL() != null)         fileFromDisk=new Thumb(currentlySelectedPosterFileList.get(0),currentPosters[0].getThumbURL().toString());
 else {
          fileFromDisk=new Thumb(currentlySelectedPosterFileList.get(0));
          currentPosters=new Thumb[1];
        }
        currentPosters[0]=fileFromDisk;
      }
 else       if (movieToWriteToDiskList.get(0).hasPoster()) {
      }
    }
  }
 catch (  FileNotFoundException e) {
    JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
 finally {
    try {
      fisTargetFile.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      updateAllFieldsOfSite1Movie(false);
    }
  }
}","protected void readMovieFromNfoFile(File nfoFile){
  FileInputStream fisTargetFile=null;
  try {
    fisTargetFile=new FileInputStream(nfoFile);
    String targetFileStr=IOUtils.toString(fisTargetFile,""String_Node_Str"");
    if (targetFileStr.contains(""String_Node_Str"")) {
      while (targetFileStr.length() > 0 && !targetFileStr.startsWith(""String_Node_Str"")) {
        if (targetFileStr.length() > 1) {
          targetFileStr=targetFileStr.substring(1,targetFileStr.length());
        }
 else         break;
      }
    }
    XbmcXmlMovieBean xmlMovieBean=XbmcXmlMovieBean.makeFromXML(targetFileStr);
    if (xmlMovieBean != null) {
      Movie movieFromNfo=xmlMovieBean.toMovie();
      movieToWriteToDiskList.add(movieFromNfo);
      if (currentlySelectedPosterFileList.get(0).exists()) {
        Thumb[] currentPosters=movieToWriteToDiskList.get(0).getPosters();
        Thumb fileFromDisk;
        if (currentPosters.length > 0 && currentPosters[0] != null && currentPosters[0].getThumbURL() != null)         fileFromDisk=new Thumb(currentlySelectedPosterFileList.get(0),currentPosters[0].getThumbURL().toString());
 else {
          fileFromDisk=new Thumb(currentlySelectedPosterFileList.get(0));
          currentPosters=new Thumb[1];
        }
        currentPosters[0]=fileFromDisk;
      }
 else       if (movieToWriteToDiskList.get(0).hasPoster()) {
      }
    }
  }
 catch (  FileNotFoundException e) {
    JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
 finally {
    try {
      fisTargetFile.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      updateAllFieldsOfFileDetailPanel(false);
    }
  }
}",0.9934980494148244
165538,"public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting() == false) {
    if (fileList.getSelectedIndex() == -1) {
      removeOldSelectedFileReferences();
    }
 else {
      removeOldSelectedFileReferences();
      for (      File currentSelectedFile : fileList.getSelectedValuesList()) {
        currentlySelectedNfoFileList.add(new File(Movie.getFileNameOfNfo(currentSelectedFile,preferences.getNfoNamedMovieDotNfo())));
        currentlySelectedPosterFileList.add(new File(Movie.getFileNameOfPoster(currentSelectedFile,preferences.getNoMovieNameInImageFiles())));
        currentlySelectedFolderJpgFileList.add(new File(Movie.getFileNameOfFolderJpg(currentSelectedFile)));
        currentlySelectedFanartFileList.add(new File(Movie.getFileNameOfFanart(currentSelectedFile,preferences.getNoMovieNameInImageFiles())));
        currentlySelectedTrailerFileList.add(new File(Movie.getFileNameOfTrailer(currentSelectedFile)));
      }
      debugWriter(""String_Node_Str"" + currentlySelectedNfoFileList);
      debugWriter(""String_Node_Str"" + currentlySelectedPosterFileList);
      debugWriter(""String_Node_Str"" + currentlySelectedFolderJpgFileList);
      debugWriter(""String_Node_Str"" + currentlySelectedFanartFileList);
      debugWriter(""String_Node_Str"" + currentlySelectedTrailerFileList);
      currentlySelectedMovieFileList=fileList.getSelectedValuesList();
      updateActorsFolder();
      updateExtraFanartFolder(null);
      removeOldScrapedMovieReferences();
      if (currentlySelectedNfoFileList.get(0).exists()) {
        readMovieFromNfoFile(currentlySelectedNfoFileList.get(0));
      }
 else {
        updateAllFieldsOfSite1Movie(false);
      }
    }
  }
}","public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting() == false) {
    if (fileList.getSelectedIndex() == -1) {
      removeOldSelectedFileReferences();
    }
 else {
      removeOldSelectedFileReferences();
      for (      File currentSelectedFile : fileList.getSelectedValuesList()) {
        currentlySelectedNfoFileList.add(new File(Movie.getFileNameOfNfo(currentSelectedFile,preferences.getNfoNamedMovieDotNfo())));
        currentlySelectedPosterFileList.add(new File(Movie.getFileNameOfPoster(currentSelectedFile,preferences.getNoMovieNameInImageFiles())));
        currentlySelectedFolderJpgFileList.add(new File(Movie.getFileNameOfFolderJpg(currentSelectedFile)));
        currentlySelectedFanartFileList.add(new File(Movie.getFileNameOfFanart(currentSelectedFile,preferences.getNoMovieNameInImageFiles())));
        currentlySelectedTrailerFileList.add(new File(Movie.getFileNameOfTrailer(currentSelectedFile)));
      }
      debugWriter(""String_Node_Str"" + currentlySelectedNfoFileList);
      debugWriter(""String_Node_Str"" + currentlySelectedPosterFileList);
      debugWriter(""String_Node_Str"" + currentlySelectedFolderJpgFileList);
      debugWriter(""String_Node_Str"" + currentlySelectedFanartFileList);
      debugWriter(""String_Node_Str"" + currentlySelectedTrailerFileList);
      currentlySelectedMovieFileList=fileList.getSelectedValuesList();
      updateActorsFolder();
      updateExtraFanartFolder(null);
      removeOldScrapedMovieReferences();
      if (currentlySelectedNfoFileList.get(0).exists()) {
        readMovieFromNfoFile(currentlySelectedNfoFileList.get(0));
      }
 else {
        updateAllFieldsOfFileDetailPanel(false);
      }
    }
  }
}",0.9926448955575168
165539,"public static String findIDTagFromFile(File file){
  String fileNameNoExtension;
  if (file.isFile())   fileNameNoExtension=FilenameUtils.removeExtension(file.getName());
 else   fileNameNoExtension=file.getName();
  String fileNameNoExtensionNoDiscNumber=stripDiscNumber(fileNameNoExtension);
  String[] splitFileName=fileNameNoExtensionNoDiscNumber.split(""String_Node_Str"");
  String lastWord=splitFileName[0];
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  return lastWord;
}","public static String findIDTagFromFile(File file){
  String fileNameNoExtension;
  if (file.isFile())   fileNameNoExtension=FilenameUtils.removeExtension(file.getName());
 else   fileNameNoExtension=file.getName();
  String fileNameNoExtensionNoDiscNumber=stripDiscNumber(fileNameNoExtension);
  String[] splitFileName=fileNameNoExtensionNoDiscNumber.split(""String_Node_Str"");
  String lastWord=splitFileName[splitFileName.length - 1];
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  return lastWord;
}",0.9823570924488356
165540,"private void updateFileListModel(File currentlySelectedDirectory,boolean keepSelectionsAndReferences){
  File[] filesToList=showFileListSorted(currentlySelectedDirectory);
  List<File> selectValuesListBeforeUpdate=fileList.getSelectedValuesList();
  listModelFiles.removeAllElements();
  for (  File file : filesToList) {
    listModelFiles.addElement(file);
  }
  if (!keepSelectionsAndReferences) {
    removeOldScrapedMovieReferences();
    removeOldSelectedFileReferences();
  }
  ListSelectionListener[] fileListSelectionListener=null;
  if (keepSelectionsAndReferences) {
    fileListSelectionListener=fileList.getListSelectionListeners();
    fileList.removeListSelectionListener(fileList.getListSelectionListeners()[0]);
    ;
  }
  for (  File currentValueToSelect : selectValuesListBeforeUpdate) {
    fileList.setSelectedValue(currentValueToSelect,false);
  }
  if (keepSelectionsAndReferences && fileListSelectionListener != null) {
    fileList.addListSelectionListener(fileListSelectionListener[0]);
  }
}","private void updateFileListModel(File currentlySelectedDirectory,boolean keepSelectionsAndReferences){
  File[] filesToList=showFileListSorted(currentlySelectedDirectory);
  List<File> selectValuesListBeforeUpdate=fileList.getSelectedValuesList();
  ListSelectionListener[] fileListSelectionListener=null;
  if (keepSelectionsAndReferences) {
    fileListSelectionListener=fileList.getListSelectionListeners();
    fileList.removeListSelectionListener(fileList.getListSelectionListeners()[0]);
    ;
  }
  listModelFiles.removeAllElements();
  for (  File file : filesToList) {
    listModelFiles.addElement(file);
  }
  if (!keepSelectionsAndReferences) {
    removeOldScrapedMovieReferences();
    removeOldSelectedFileReferences();
  }
  for (  File currentValueToSelect : selectValuesListBeforeUpdate) {
    fileList.setSelectedValue(currentValueToSelect,false);
  }
  if (keepSelectionsAndReferences && fileListSelectionListener != null) {
    fileList.addListSelectionListener(fileListSelectionListener[0]);
  }
}",0.7693817468105987
165541,"private void writeExtraFanart(File destinationDirectory,int movieNumberInList) throws IOException {
  updateExtraFanartFolder(destinationDirectory);
  System.out.println(""String_Node_Str"" + movieToWriteToDiskList.get(movieNumberInList).getExtraFanart().length);
  if (movieToWriteToDiskList != null && movieToWriteToDiskList.size() > 0 && movieToWriteToDiskList.get(movieNumberInList).getExtraFanart() != null && movieToWriteToDiskList.get(movieNumberInList).getExtraFanart().length > 0) {
    FileUtils.forceMkdir(currentlySelectedExtraFanartFolderList.get(movieNumberInList));
    int currentExtraFanartNumber=1;
    for (    Thumb currentExtraFanart : movieToWriteToDiskList.get(movieNumberInList).getExtraFanart()) {
      File fileNameToWrite=new File(currentlySelectedExtraFanartFolderList.get(movieNumberInList).getPath() + ""String_Node_Str"" + ""String_Node_Str""+ currentExtraFanartNumber+ ""String_Node_Str"");
      if (!fileNameToWrite.exists()) {
        System.out.println(""String_Node_Str"" + fileNameToWrite);
        currentExtraFanart.writeImageToFile(fileNameToWrite);
      }
      currentExtraFanartNumber++;
    }
  }
}","private void writeExtraFanart(File destinationDirectory,int movieNumberInList) throws IOException {
  updateExtraFanartFolder(destinationDirectory);
  if (movieToWriteToDiskList != null && movieToWriteToDiskList.size() > 0 && movieToWriteToDiskList.get(movieNumberInList).getExtraFanart() != null && movieToWriteToDiskList.get(movieNumberInList).getExtraFanart().length > 0) {
    FileUtils.forceMkdir(currentlySelectedExtraFanartFolderList.get(movieNumberInList));
    int currentExtraFanartNumber=1;
    for (    Thumb currentExtraFanart : movieToWriteToDiskList.get(movieNumberInList).getExtraFanart()) {
      File fileNameToWrite=new File(currentlySelectedExtraFanartFolderList.get(movieNumberInList).getPath() + ""String_Node_Str"" + ""String_Node_Str""+ currentExtraFanartNumber+ ""String_Node_Str"");
      if (!fileNameToWrite.exists()) {
        System.out.println(""String_Node_Str"" + fileNameToWrite);
        currentExtraFanart.writeImageToFile(fileNameToWrite);
      }
      currentExtraFanartNumber++;
    }
  }
}",0.9476124246638852
165542,"public File[] actorFolderFiles(int movieNumberInList){
  ArrayList<File> actorFiles=new ArrayList<File>();
  if (movieToWriteToDiskList != null && movieToWriteToDiskList.size() > 0 && movieToWriteToDiskList.get(movieNumberInList).getActors() != null) {
    if (currentlySelectedActorsFolderList != null && currentlySelectedActorsFolderList.get(movieNumberInList).isDirectory()) {
      for (      Actor currentActor : movieToWriteToDiskList.get(movieNumberInList).getActors()) {
        String currentActorNameAsPotentialFileName=currentActor.getName().replace(' ','_');
        File[] listFiles=currentlySelectedActorsFolderList.get(movieNumberInList).listFiles();
        for (        File currentFile : listFiles) {
          if (currentFile.isFile() && FilenameUtils.removeExtension(currentFile.getName()).equals(currentActorNameAsPotentialFileName)) {
            actorFiles.add(currentFile);
          }
        }
      }
    }
  }
  return actorFiles.toArray(new File[actorFiles.size()]);
}","public File[] actorFolderFiles(int movieNumberInList){
  ArrayList<File> actorFiles=new ArrayList<File>();
  System.out.println(""String_Node_Str"" + movieToWriteToDiskList);
  if (movieToWriteToDiskList != null && movieToWriteToDiskList.size() > 0 && movieToWriteToDiskList.get(movieNumberInList).getActors() != null) {
    if (currentlySelectedActorsFolderList != null && currentlySelectedActorsFolderList.get(movieNumberInList).isDirectory()) {
      for (      Actor currentActor : movieToWriteToDiskList.get(movieNumberInList).getActors()) {
        String currentActorNameAsPotentialFileName=currentActor.getName().replace(' ','_');
        File[] listFiles=currentlySelectedActorsFolderList.get(movieNumberInList).listFiles();
        for (        File currentFile : listFiles) {
          if (currentFile.isFile() && FilenameUtils.removeExtension(currentFile.getName()).equals(currentActorNameAsPotentialFileName)) {
            actorFiles.add(currentFile);
          }
        }
      }
    }
  }
  return actorFiles.toArray(new File[actorFiles.size()]);
}",0.9679611650485436
165543,"protected void updateAllFieldsOfSite1Movie(boolean forceUpdatePoster){
  if (movieToWriteToDiskList == null || movieToWriteToDiskList.size() == 0) {
    clearAllFieldsOfSite1Movie();
  }
 else   if (movieToWriteToDiskList != null && movieToWriteToDiskList.get(0) != null) {
    clearAllFieldsOfSite1Movie();
    if (movieToWriteToDiskList != null)     comboBoxMovieTitleText.addItem(movieToWriteToDiskList.get(0).getTitle().getTitle());
    if (currentlySelectedMovieDMM != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieDMM.getTitle().getTitle());
    if (currentlySelectedMovieJavLibrary != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieJavLibrary.getTitle().getTitle());
    if (currentlySelectedMovieSquarePlus != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieSquarePlus.getTitle().getTitle());
    if (currentlySelectedMovieActionJav != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieActionJav.getTitle().getTitle());
    if (currentlySelectedMovieJavZoo != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieJavZoo.getTitle().getTitle());
    if (comboBoxMovieTitleText.getItemCount() > 0)     comboBoxMovieTitleText.setEditable(true);
    lblOriginalTitleTextSite1.setText(movieToWriteToDiskList.get(0).getOriginalTitle().getOriginalTitle());
    if (movieToWriteToDiskList.get(0).getId() != null)     lblIDCurrentMovie.setText(movieToWriteToDiskList.get(0).getId().getId());
    if (movieToWriteToDiskList.get(0).getStudio() != null)     txtFieldStudio.setText(movieToWriteToDiskList.get(0).getStudio().getStudio());
    if (movieToWriteToDiskList.get(0).getYear() != null)     lblScrapedYearText.setText(movieToWriteToDiskList.get(0).getYear().getYear());
    if (movieToWriteToDiskList.get(0).getPlot() != null)     moviePlotTextField.setText(movieToWriteToDiskList.get(0).getPlot().getPlot());
    if (movieToWriteToDiskList.get(0).getSet() != null)     txtFieldMovieSet.setText(movieToWriteToDiskList.get(0).getSet().getSet());
    listModelGenresSite1.removeAllElements();
    for (    Genre genre : movieToWriteToDiskList.get(0).getGenres()) {
      listModelGenresSite1.addElement(genre.getGenre());
    }
    listModelActorsSite1.removeAllElements();
    for (    Actor actor : movieToWriteToDiskList.get(0).getActors()) {
      listModelActorsSite1.addElement(actor.getName());
    }
    boolean posterFileUpdateOccured=false;
    boolean fanartFileUpdateOccured=false;
    if (!forceUpdatePoster) {
      File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(currentlySelectedMovieFileList.get(0),true));
      File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(currentlySelectedMovieFileList.get(0),true));
      File standardPosterJpg=new File(Movie.getFileNameOfPoster(currentlySelectedMovieFileList.get(0),false));
      File standardFanartJpg=new File(Movie.getFileNameOfFanart(currentlySelectedMovieFileList.get(0),false));
      if (currentlySelectedPosterFileList.get(0).exists()) {
        try {
          ImageIcon newPosterIcon;
          BufferedImage img=ImageIO.read(currentlySelectedPosterFileList.get(0));
          BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,posterSizeX,posterSizeY,Scalr.OP_ANTIALIAS);
          newPosterIcon=new ImageIcon(scaledImage);
          lblPosterIcon.setIcon(newPosterIcon);
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedFanartFileList.get(0).exists()) {
        try {
          ImageIcon newFanartIcon;
          BufferedImage img=ImageIO.read(currentlySelectedFanartFileList.get(0));
          BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,fanartSizeX,fanartSizeY,Scalr.OP_ANTIALIAS);
          newFanartIcon=new ImageIcon(scaledImage);
          lblFanartIcon.setIcon(newFanartIcon);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedMovieFileList.get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
        try {
          ImageIcon newPosterIcon;
          BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
          BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,posterSizeX,posterSizeY,Scalr.OP_ANTIALIAS);
          newPosterIcon=new ImageIcon(scaledImage);
          lblPosterIcon.setIcon(newPosterIcon);
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedMovieFileList.get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
        try {
          ImageIcon newFanartIcon;
          BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
          BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,posterSizeX,posterSizeY,Scalr.OP_ANTIALIAS);
          newFanartIcon=new ImageIcon(scaledImage);
          lblFanartIcon.setIcon(newFanartIcon);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
        try {
          lblPosterIcon.setIcon(new ImageIcon(standardPosterJpg.getCanonicalPath()));
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
        try {
          lblFanartIcon.setIcon(new ImageIcon(standardFanartJpg.getCanonicalPath()));
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    if (movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
      try {
        posterImage=movieToWriteToDiskList.get(0).getPosters()[0].getThumbImage();
        ImageIcon newPosterIcon=new ImageIcon(posterImage);
        BufferedImage img=(BufferedImage)newPosterIcon.getImage();
        BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,posterSizeX,posterSizeY,Scalr.OP_ANTIALIAS);
        posterImage=scaledImage;
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
      lblPosterIcon.setIcon(new ImageIcon(posterImage));
    }
    if (movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
      System.out.println(""String_Node_Str"");
      try {
        fanartImage=movieToWriteToDiskList.get(0).getFanart()[0].getThumbImage();
        ImageIcon newFanartIcon=new ImageIcon(fanartImage);
        BufferedImage img=(BufferedImage)newFanartIcon.getImage();
        BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,fanartSizeX,fanartSizeY,Scalr.OP_ANTIALIAS);
        fanartImage=scaledImage;
      }
 catch (      IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
      lblFanartIcon.setIcon(new ImageIcon(fanartImage));
    }
  }
}","protected void updateAllFieldsOfSite1Movie(boolean forceUpdatePoster){
  if (movieToWriteToDiskList == null || movieToWriteToDiskList.size() == 0) {
    clearAllFieldsOfSite1Movie();
  }
 else   if (movieToWriteToDiskList != null && movieToWriteToDiskList.get(0) != null) {
    clearAllFieldsOfSite1Movie();
    if (movieToWriteToDiskList != null)     comboBoxMovieTitleText.addItem(movieToWriteToDiskList.get(0).getTitle().getTitle());
    if (currentlySelectedMovieDMM != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieDMM.getTitle().getTitle());
    if (currentlySelectedMovieJavLibrary != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieJavLibrary.getTitle().getTitle());
    if (currentlySelectedMovieSquarePlus != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieSquarePlus.getTitle().getTitle());
    if (currentlySelectedMovieActionJav != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieActionJav.getTitle().getTitle());
    if (currentlySelectedMovieJavZoo != null)     comboBoxMovieTitleText.addItem(currentlySelectedMovieJavZoo.getTitle().getTitle());
    if (comboBoxMovieTitleText.getItemCount() > 0)     comboBoxMovieTitleText.setEditable(true);
    lblOriginalTitleTextSite1.setText(movieToWriteToDiskList.get(0).getOriginalTitle().getOriginalTitle());
    if (movieToWriteToDiskList.get(0).getId() != null)     lblIDCurrentMovie.setText(movieToWriteToDiskList.get(0).getId().getId());
    if (movieToWriteToDiskList.get(0).getStudio() != null)     txtFieldStudio.setText(movieToWriteToDiskList.get(0).getStudio().getStudio());
    if (movieToWriteToDiskList.get(0).getYear() != null)     lblScrapedYearText.setText(movieToWriteToDiskList.get(0).getYear().getYear());
    if (movieToWriteToDiskList.get(0).getPlot() != null)     moviePlotTextField.setText(movieToWriteToDiskList.get(0).getPlot().getPlot());
    if (movieToWriteToDiskList.get(0).getSet() != null)     txtFieldMovieSet.setText(movieToWriteToDiskList.get(0).getSet().getSet());
    listModelGenresSite1.removeAllElements();
    for (    Genre genre : movieToWriteToDiskList.get(0).getGenres()) {
      listModelGenresSite1.addElement(genre.getGenre());
    }
    listModelActorsSite1.removeAllElements();
    for (    Actor actor : movieToWriteToDiskList.get(0).getActors()) {
      listModelActorsSite1.addElement(actor.getName());
    }
    boolean posterFileUpdateOccured=false;
    boolean fanartFileUpdateOccured=false;
    if (!forceUpdatePoster) {
      File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(currentlySelectedMovieFileList.get(0),true));
      File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(currentlySelectedMovieFileList.get(0),true));
      File standardPosterJpg=new File(Movie.getFileNameOfPoster(currentlySelectedMovieFileList.get(0),false));
      File standardFanartJpg=new File(Movie.getFileNameOfFanart(currentlySelectedMovieFileList.get(0),false));
      if (currentlySelectedPosterFileList.get(0).exists()) {
        try {
          ImageIcon newPosterIcon;
          BufferedImage img=ImageIO.read(currentlySelectedPosterFileList.get(0));
          BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,posterSizeX,posterSizeY,Scalr.OP_ANTIALIAS);
          newPosterIcon=new ImageIcon(scaledImage);
          lblPosterIcon.setIcon(newPosterIcon);
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedFanartFileList.get(0).exists()) {
        try {
          ImageIcon newFanartIcon;
          BufferedImage img=ImageIO.read(currentlySelectedFanartFileList.get(0));
          BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,fanartSizeX,fanartSizeY,Scalr.OP_ANTIALIAS);
          newFanartIcon=new ImageIcon(scaledImage);
          lblFanartIcon.setIcon(newFanartIcon);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedMovieFileList.get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
        try {
          ImageIcon newPosterIcon;
          BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
          BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,posterSizeX,posterSizeY,Scalr.OP_ANTIALIAS);
          newPosterIcon=new ImageIcon(scaledImage);
          lblPosterIcon.setIcon(newPosterIcon);
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedMovieFileList.get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
        try {
          ImageIcon newFanartIcon;
          BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
          BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,fanartSizeX,fanartSizeY,Scalr.OP_ANTIALIAS);
          newFanartIcon=new ImageIcon(scaledImage);
          lblFanartIcon.setIcon(newFanartIcon);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
        try {
          lblPosterIcon.setIcon(new ImageIcon(standardPosterJpg.getCanonicalPath()));
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
        try {
          ImageIcon newFanartIcon;
          BufferedImage img=ImageIO.read(standardFanartJpg);
          BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,fanartSizeX,fanartSizeY,Scalr.OP_ANTIALIAS);
          newFanartIcon=new ImageIcon(scaledImage);
          lblFanartIcon.setIcon(newFanartIcon);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    if (movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
      try {
        posterImage=movieToWriteToDiskList.get(0).getPosters()[0].getThumbImage();
        ImageIcon newPosterIcon=new ImageIcon(posterImage);
        BufferedImage img=(BufferedImage)newPosterIcon.getImage();
        BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,posterSizeX,posterSizeY,Scalr.OP_ANTIALIAS);
        posterImage=scaledImage;
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
      lblPosterIcon.setIcon(new ImageIcon(posterImage));
    }
    if (movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
      System.out.println(""String_Node_Str"");
      try {
        fanartImage=movieToWriteToDiskList.get(0).getFanart()[0].getThumbImage();
        ImageIcon newFanartIcon=new ImageIcon(fanartImage);
        BufferedImage img=(BufferedImage)newFanartIcon.getImage();
        BufferedImage scaledImage=Scalr.resize(img,Method.QUALITY,fanartSizeX,fanartSizeY,Scalr.OP_ANTIALIAS);
        fanartImage=scaledImage;
      }
 catch (      IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
      lblFanartIcon.setIcon(new ImageIcon(fanartImage));
    }
  }
}",0.9776999258909924
165544,"public Component getListCellRendererComponent(JList<? extends SearchResult> list,SearchResult value,int index,boolean isSelected,boolean cellHasFocus){
  SearchResult entry=(SearchResult)value;
  if (entry.getLabel().length() > 0)   setText(""String_Node_Str"" + ""String_Node_Str"" + entry.getLabel() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getUrlPath()+ ""String_Node_Str""+ ""String_Node_Str"");
 else   setText(entry.getUrlPath());
  if (entry.getPreviewImage().getThumbURL() != null)   setIcon(entry.getPreviewImage().getImageIconThumbImage());
  if (isSelected) {
    setBackground(HIGHLIGHT_COLOR);
    setForeground(Color.white);
  }
 else {
    setBackground(Color.white);
    setForeground(Color.black);
  }
  return this;
}","public Component getListCellRendererComponent(JList<? extends SearchResult> list,SearchResult value,int index,boolean isSelected,boolean cellHasFocus){
  SearchResult entry=(SearchResult)value;
  if (entry.getLabel().length() > 0)   setText(""String_Node_Str"" + ""String_Node_Str"" + entry.getLabel() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getUrlPath()+ ""String_Node_Str""+ ""String_Node_Str"");
 else   setText(entry.getUrlPath());
  if (entry.getPreviewImage() != null && entry.getPreviewImage().getThumbURL() != null)   setIcon(entry.getPreviewImage().getImageIconThumbImage());
  if (isSelected) {
    setBackground(HIGHLIGHT_COLOR);
    setForeground(Color.white);
  }
 else {
    setBackground(Color.white);
    setForeground(Color.black);
  }
  return this;
}",0.9772283669486012
165545,"@Override public void mousePressed(MouseEvent e){
  if (e.getClickCount() >= 2) {
    @SuppressWarnings(""String_Node_Str"") JList<File> theList=(JList<File>)e.getSource();
    try {
      File doubleClickedFile=theList.getSelectedValue();
      if (doubleClickedFile != null && doubleClickedFile.exists() && doubleClickedFile.isDirectory()) {
        try {
          currentlySelectedDirectoryList=doubleClickedFile;
          frmMoviescraper.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          updateFileListModel(currentlySelectedDirectoryList);
        }
  finally {
          preferences.setLastUsedDirectory(currentlySelectedDirectoryList);
          frmMoviescraper.setCursor(Cursor.getDefaultCursor());
        }
      }
 else {
        Desktop.getDesktop().open(theList.getSelectedValue());
      }
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
  }
}","@Override public void mousePressed(MouseEvent e){
  if (e.getClickCount() >= 2) {
    @SuppressWarnings(""String_Node_Str"") JList<File> theList=(JList<File>)e.getSource();
    try {
      File doubleClickedFile=theList.getSelectedValue();
      if (doubleClickedFile != null && doubleClickedFile.exists() && doubleClickedFile.isDirectory()) {
        try {
          currentlySelectedDirectoryList=doubleClickedFile;
          frmMoviescraper.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
          updateFileListModel(currentlySelectedDirectoryList,false);
        }
  finally {
          preferences.setLastUsedDirectory(currentlySelectedDirectoryList);
          frmMoviescraper.setCursor(Cursor.getDefaultCursor());
        }
      }
 else {
        Desktop.getDesktop().open(theList.getSelectedValue());
      }
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
  }
}",0.9966703662597114
165546,"private void updateFileListModel(File currentlySelectedDirectory){
  File[] filesToList=showFileListSorted(currentlySelectedDirectory);
  List<File> selectValuesListBeforeUpdate=fileList.getSelectedValuesList();
  listModelFiles.removeAllElements();
  for (  File file : filesToList) {
    listModelFiles.addElement(file);
  }
  removeOldScrapedMovieReferences();
  removeOldSelectedFileReferences();
  for (  File currentValueToSelect : selectValuesListBeforeUpdate) {
    fileList.setSelectedValue(currentValueToSelect,false);
  }
}","private void updateFileListModel(File currentlySelectedDirectory,boolean keepSelectionsAndReferences){
  File[] filesToList=showFileListSorted(currentlySelectedDirectory);
  List<File> selectValuesListBeforeUpdate=fileList.getSelectedValuesList();
  listModelFiles.removeAllElements();
  for (  File file : filesToList) {
    listModelFiles.addElement(file);
  }
  if (!keepSelectionsAndReferences) {
    removeOldScrapedMovieReferences();
    removeOldSelectedFileReferences();
  }
  ListSelectionListener[] fileListSelectionListener=null;
  if (keepSelectionsAndReferences) {
    fileListSelectionListener=fileList.getListSelectionListeners();
    fileList.removeListSelectionListener(fileList.getListSelectionListeners()[0]);
    ;
  }
  for (  File currentValueToSelect : selectValuesListBeforeUpdate) {
    fileList.setSelectedValue(currentValueToSelect,false);
  }
  if (keepSelectionsAndReferences && fileListSelectionListener != null) {
    fileList.addListSelectionListener(fileListSelectionListener[0]);
  }
}",0.6877012234385061
165547,"protected void updateAllFieldsOfFileDetailPanel(boolean forceUpdatePoster){
  if (movieToWriteToDiskList == null || movieToWriteToDiskList.size() == 0) {
    clearAllFieldsOfSite1Movie();
  }
 else   if (movieToWriteToDiskList != null && movieToWriteToDiskList.get(0) != null) {
    clearAllFieldsOfSite1Movie();
    fileDetailPanel.setCurrentMovie(movieToWriteToDiskList.get(0));
    if (movieToWriteToDiskList != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(movieToWriteToDiskList.get(0).getTitle());
    if (currentlySelectedMovieDMM != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieDMM.getTitle());
    if (currentlySelectedMovieJavLibrary != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieJavLibrary.getTitle());
    if (currentlySelectedMovieSquarePlus != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieSquarePlus.getTitle());
    if (currentlySelectedMovieActionJav != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieActionJav.getTitle());
    if (currentlySelectedMovieJavZoo != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieJavZoo.getTitle());
    if (fileDetailPanel.getCurrentMovie().getAllTitles().size() > 0)     fileDetailPanel.setTitleEditable(true);
    fileDetailPanel.getCurrentMovie().setOriginalTitle(movieToWriteToDiskList.get(0).getOriginalTitle());
    if (movieToWriteToDiskList.get(0).getId() != null)     fileDetailPanel.getCurrentMovie().setId(movieToWriteToDiskList.get(0).getId());
    if (movieToWriteToDiskList.get(0).getStudio() != null)     fileDetailPanel.getCurrentMovie().setStudio(movieToWriteToDiskList.get(0).getStudio());
    if (movieToWriteToDiskList.get(0).getYear() != null)     fileDetailPanel.getCurrentMovie().setYear(movieToWriteToDiskList.get(0).getYear());
    if (movieToWriteToDiskList.get(0).getPlot() != null)     fileDetailPanel.getCurrentMovie().setPlot(movieToWriteToDiskList.get(0).getPlot());
    if (movieToWriteToDiskList.get(0).getSet() != null)     fileDetailPanel.getCurrentMovie().setSet(movieToWriteToDiskList.get(0).getSet());
    fileDetailPanel.getCurrentMovie().setGenres(movieToWriteToDiskList.get(0).getGenres());
    fileDetailPanel.getCurrentMovie().setActors(movieToWriteToDiskList.get(0).getActors());
    boolean posterFileUpdateOccured=false;
    boolean fanartFileUpdateOccured=false;
    if (!forceUpdatePoster) {
      File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(currentlySelectedMovieFileList.get(0),true));
      File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(currentlySelectedMovieFileList.get(0),true));
      File standardPosterJpg=new File(Movie.getFileNameOfPoster(currentlySelectedMovieFileList.get(0),false));
      File standardFanartJpg=new File(Movie.getFileNameOfFanart(currentlySelectedMovieFileList.get(0),false));
      if (currentlySelectedPosterFileList.get(0).exists()) {
        try {
          BufferedImage img=ImageIO.read(currentlySelectedPosterFileList.get(0));
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          artWorkPanel.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedFanartFileList.get(0).exists()) {
        try {
          BufferedImage img=ImageIO.read(currentlySelectedFanartFileList.get(0));
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          artWorkPanel.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedMovieFileList.get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
        try {
          BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          artWorkPanel.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedMovieFileList.get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
        try {
          BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          artWorkPanel.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
        try {
          artWorkPanel.setNewPoster(new ImageIcon(standardPosterJpg.getCanonicalPath()));
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
        try {
          BufferedImage img=ImageIO.read(standardFanartJpg);
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          artWorkPanel.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    if (movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
      try {
        Image posterImage=movieToWriteToDiskList.get(0).getPosters()[0].getThumbImage();
        ImageIcon newPosterIcon=new ImageIcon(posterImage);
        BufferedImage img=(BufferedImage)newPosterIcon.getImage();
        BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
        artWorkPanel.setNewPoster(scaledImage);
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
    if (movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
      System.out.println(""String_Node_Str"");
      try {
        Image fanartImage=movieToWriteToDiskList.get(0).getFanart()[0].getThumbImage();
        ImageIcon newFanartIcon=new ImageIcon(fanartImage);
        BufferedImage img=(BufferedImage)newFanartIcon.getImage();
        BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
        artWorkPanel.setNewFanart(scaledImage);
        fanartImage=scaledImage;
      }
 catch (      IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
  fileDetailPanel.updateView();
}","protected void updateAllFieldsOfFileDetailPanel(boolean forceUpdatePoster){
  if (movieToWriteToDiskList == null || movieToWriteToDiskList.size() == 0) {
    clearAllFieldsOfFileDetailPanel();
  }
 else   if (movieToWriteToDiskList != null && movieToWriteToDiskList.get(0) != null) {
    clearAllFieldsOfFileDetailPanel();
    fileDetailPanel.setCurrentMovie(movieToWriteToDiskList.get(0));
    if (movieToWriteToDiskList != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(movieToWriteToDiskList.get(0).getTitle());
    if (currentlySelectedMovieDMM != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieDMM.getTitle());
    if (currentlySelectedMovieJavLibrary != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieJavLibrary.getTitle());
    if (currentlySelectedMovieSquarePlus != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieSquarePlus.getTitle());
    if (currentlySelectedMovieActionJav != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieActionJav.getTitle());
    if (currentlySelectedMovieJavZoo != null)     fileDetailPanel.getCurrentMovie().getAllTitles().add(currentlySelectedMovieJavZoo.getTitle());
    if (fileDetailPanel.getCurrentMovie().getAllTitles().size() > 0)     fileDetailPanel.setTitleEditable(true);
    fileDetailPanel.getCurrentMovie().setOriginalTitle(movieToWriteToDiskList.get(0).getOriginalTitle());
    if (movieToWriteToDiskList.get(0).getId() != null)     fileDetailPanel.getCurrentMovie().setId(movieToWriteToDiskList.get(0).getId());
    if (movieToWriteToDiskList.get(0).getStudio() != null)     fileDetailPanel.getCurrentMovie().setStudio(movieToWriteToDiskList.get(0).getStudio());
    if (movieToWriteToDiskList.get(0).getYear() != null)     fileDetailPanel.getCurrentMovie().setYear(movieToWriteToDiskList.get(0).getYear());
    if (movieToWriteToDiskList.get(0).getPlot() != null)     fileDetailPanel.getCurrentMovie().setPlot(movieToWriteToDiskList.get(0).getPlot());
    if (movieToWriteToDiskList.get(0).getSet() != null)     fileDetailPanel.getCurrentMovie().setSet(movieToWriteToDiskList.get(0).getSet());
    fileDetailPanel.getCurrentMovie().setGenres(movieToWriteToDiskList.get(0).getGenres());
    fileDetailPanel.getCurrentMovie().setActors(movieToWriteToDiskList.get(0).getActors());
    boolean posterFileUpdateOccured=false;
    boolean fanartFileUpdateOccured=false;
    if (!forceUpdatePoster) {
      File potentialOtherPosterJpg=new File(Movie.getFileNameOfPoster(currentlySelectedMovieFileList.get(0),true));
      File potentialOtherFanartJpg=new File(Movie.getFileNameOfFanart(currentlySelectedMovieFileList.get(0),true));
      File standardPosterJpg=new File(Movie.getFileNameOfPoster(currentlySelectedMovieFileList.get(0),false));
      File standardFanartJpg=new File(Movie.getFileNameOfFanart(currentlySelectedMovieFileList.get(0),false));
      if (currentlySelectedPosterFileList.get(0).exists()) {
        try {
          BufferedImage img=ImageIO.read(currentlySelectedPosterFileList.get(0));
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          artWorkPanel.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedFanartFileList.get(0).exists()) {
        try {
          BufferedImage img=ImageIO.read(currentlySelectedFanartFileList.get(0));
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          artWorkPanel.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedMovieFileList.get(0).isDirectory() && potentialOtherPosterJpg.exists() && !posterFileUpdateOccured) {
        try {
          BufferedImage img=ImageIO.read(potentialOtherPosterJpg);
          BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
          artWorkPanel.setNewPoster(scaledImage);
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (currentlySelectedMovieFileList.get(0).isDirectory() && potentialOtherFanartJpg.exists() && !fanartFileUpdateOccured) {
        try {
          BufferedImage img=ImageIO.read(potentialOtherFanartJpg);
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          artWorkPanel.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (standardPosterJpg.exists() && !posterFileUpdateOccured) {
        try {
          artWorkPanel.setNewPoster(new ImageIcon(standardPosterJpg.getCanonicalPath()));
          posterFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (standardFanartJpg.exists() && !fanartFileUpdateOccured) {
        try {
          BufferedImage img=ImageIO.read(standardFanartJpg);
          BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
          artWorkPanel.setNewFanart(scaledImage);
          fanartFileUpdateOccured=true;
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    if (movieToWriteToDiskList.get(0).hasPoster() && !posterFileUpdateOccured) {
      try {
        Image posterImage=movieToWriteToDiskList.get(0).getPosters()[0].getThumbImage();
        ImageIcon newPosterIcon=new ImageIcon(posterImage);
        BufferedImage img=(BufferedImage)newPosterIcon.getImage();
        BufferedImage scaledImage=ArtWorkPanel.resizeToPoster(img);
        artWorkPanel.setNewPoster(scaledImage);
        posterFileUpdateOccured=true;
      }
 catch (      IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
    if (movieToWriteToDiskList.get(0).hasFanart() && !fanartFileUpdateOccured) {
      System.out.println(""String_Node_Str"");
      try {
        Image fanartImage=movieToWriteToDiskList.get(0).getFanart()[0].getThumbImage();
        ImageIcon newFanartIcon=new ImageIcon(fanartImage);
        BufferedImage img=(BufferedImage)newFanartIcon.getImage();
        BufferedImage scaledImage=ArtWorkPanel.resizeToFanart(img);
        artWorkPanel.setNewFanart(scaledImage);
        fanartImage=scaledImage;
      }
 catch (      IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,ExceptionUtils.getStackTrace(e),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
    }
  }
  fileDetailPanel.updateView();
}",0.9963326976675956
165548,"private void writeExtraFanart(File destinationDirectory,int movieNumberInList) throws IOException {
  updateExtraFanartFolder(destinationDirectory);
  if (movieToWriteToDiskList != null && movieToWriteToDiskList.size() > 0 && movieToWriteToDiskList.get(movieNumberInList).getExtraFanart() != null && movieToWriteToDiskList.get(movieNumberInList).getExtraFanart().length > 0) {
    FileUtils.forceMkdir(currentlySelectedExtraFanartFolderList.get(movieNumberInList));
    int currentExtraFanartNumber=1;
    for (    Thumb currentExtraFanart : movieToWriteToDiskList.get(movieNumberInList).getExtraFanart()) {
      File fileNameToWrite=new File(currentlySelectedExtraFanartFolderList.get(movieNumberInList).getPath() + ""String_Node_Str"" + ""String_Node_Str""+ currentExtraFanartNumber+ ""String_Node_Str"");
      if (!fileNameToWrite.exists()) {
        System.out.println(""String_Node_Str"" + fileNameToWrite);
        currentExtraFanart.writeImageToFile(fileNameToWrite);
      }
      currentExtraFanartNumber++;
    }
  }
}","private void writeExtraFanart(File destinationDirectory,int movieNumberInList) throws IOException {
  updateExtraFanartFolder(destinationDirectory);
  System.out.println(""String_Node_Str"" + movieToWriteToDiskList.get(movieNumberInList).getExtraFanart().length);
  if (movieToWriteToDiskList != null && movieToWriteToDiskList.size() > 0 && movieToWriteToDiskList.get(movieNumberInList).getExtraFanart() != null && movieToWriteToDiskList.get(movieNumberInList).getExtraFanart().length > 0) {
    FileUtils.forceMkdir(currentlySelectedExtraFanartFolderList.get(movieNumberInList));
    int currentExtraFanartNumber=1;
    for (    Thumb currentExtraFanart : movieToWriteToDiskList.get(movieNumberInList).getExtraFanart()) {
      File fileNameToWrite=new File(currentlySelectedExtraFanartFolderList.get(movieNumberInList).getPath() + ""String_Node_Str"" + ""String_Node_Str""+ currentExtraFanartNumber+ ""String_Node_Str"");
      if (!fileNameToWrite.exists()) {
        System.out.println(""String_Node_Str"" + fileNameToWrite);
        currentExtraFanart.writeImageToFile(fileNameToWrite);
      }
      currentExtraFanartNumber++;
    }
  }
}",0.9476124246638852
165549,"@Override public void actionPerformed(ActionEvent arg0){
  try {
    File parentDirectory=currentlySelectedDirectoryList.getParentFile();
    if (parentDirectory != null && parentDirectory.exists()) {
      currentlySelectedDirectoryList=parentDirectory;
      frmMoviescraper.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      updateFileListModel(currentlySelectedDirectoryList);
    }
  }
  finally {
    preferences.setLastUsedDirectory(currentlySelectedDirectoryList);
    frmMoviescraper.setCursor(Cursor.getDefaultCursor());
  }
}","@Override public void actionPerformed(ActionEvent arg0){
  try {
    File parentDirectory=currentlySelectedDirectoryList.getParentFile();
    if (parentDirectory != null && parentDirectory.exists()) {
      currentlySelectedDirectoryList=parentDirectory;
      frmMoviescraper.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      updateFileListModel(currentlySelectedDirectoryList,false);
    }
  }
  finally {
    preferences.setLastUsedDirectory(currentlySelectedDirectoryList);
    frmMoviescraper.setCursor(Cursor.getDefaultCursor());
  }
}",0.9945750452079566
165550,"/** 
 * Initialize the contents of the frame.
 */
private void initialize(){
  preferences=new MoviescraperPreferences();
  currentlySelectedNfoFileList=new ArrayList<File>();
  currentlySelectedMovieFileList=new ArrayList<File>();
  currentlySelectedPosterFileList=new ArrayList<File>();
  currentlySelectedFolderJpgFileList=new ArrayList<File>();
  currentlySelectedFanartFileList=new ArrayList<File>();
  currentlySelectedTrailerFileList=new ArrayList<File>();
  currentlySelectedActorsFolderList=new ArrayList<File>();
  currentlySelectedExtraFanartFolderList=new ArrayList<File>();
  movieToWriteToDiskList=new ArrayList<Movie>();
  frmMoviescraper=new JFrame();
  frmMoviescraper.setBackground(SystemColor.window);
  frmMoviescraper.setPreferredSize(new Dimension(1024,768));
  frmMoviescraper.setTitle(""String_Node_Str"");
  frmMoviescraper.setBounds(100,100,1024,768);
  frmMoviescraper.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  URL programIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL saveButtonIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL data18IconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL japanIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL openIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL fileFolderIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL upIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL browseIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  Image programIcon=null;
  try {
    programIcon=ImageIO.read(programIconURL);
    if (programIcon != null)     frmMoviescraper.setIconImage(programIcon);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  ImageIcon saveIcon=initializeImageIcon(saveButtonIconURL);
  ImageIcon data18Icon=initializeImageIcon(data18IconURL);
  ImageIcon japanIcon=initializeImageIcon(japanIconURL);
  ImageIcon openIcon=initializeImageIcon(openIconURL);
  ImageIcon moveToFolderIcon=initializeImageIcon(fileFolderIconURL);
  ImageIcon upIcon=initializeImageIcon(upIconURL);
  ImageIcon browseDirectoryIcon=initializeImageIcon(browseIconURL);
  fileListPanel=new JPanel();
  frmMoviescraper.getContentPane().add(fileListPanel,BorderLayout.WEST);
  defaultHomeDirectory=preferences.getLastUsedDirectory();
  currentlySelectedDirectoryList=defaultHomeDirectory;
  FileList fl=new FileList();
  listModelFiles=new DefaultListModel<File>();
  fileList=new JList<File>(listModelFiles);
  fileList.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent e){
    }
    @Override public void keyReleased(    KeyEvent e){
      char ch=e.getKeyChar();
      if (!Character.isLetterOrDigit(ch)) {
        return;
      }
      if (m_time + CHAR_DELTA < System.currentTimeMillis()) {
        m_key=""String_Node_Str"";
      }
      m_time=System.currentTimeMillis();
      m_key+=Character.toLowerCase(ch);
      for (int i=0; i < fileList.getModel().getSize(); i++) {
        String str=fileList.getModel().getElementAt(i).getName().toString().toLowerCase();
        if (str.startsWith(m_key)) {
          fileList.setSelectedIndex(i);
          fileList.ensureIndexIsVisible(i);
          break;
        }
      }
    }
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  fileList.addMouseListener(new MouseListener(){
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mousePressed(    MouseEvent e){
      if (e.getClickCount() >= 2) {
        @SuppressWarnings(""String_Node_Str"") JList<File> theList=(JList<File>)e.getSource();
        try {
          File doubleClickedFile=theList.getSelectedValue();
          if (doubleClickedFile != null && doubleClickedFile.exists() && doubleClickedFile.isDirectory()) {
            try {
              currentlySelectedDirectoryList=doubleClickedFile;
              frmMoviescraper.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
              updateFileListModel(currentlySelectedDirectoryList);
            }
  finally {
              preferences.setLastUsedDirectory(currentlySelectedDirectoryList);
              frmMoviescraper.setCursor(Cursor.getDefaultCursor());
            }
          }
 else {
            Desktop.getDesktop().open(theList.getSelectedValue());
          }
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
    }
    @Override public void mouseExited(    MouseEvent e){
    }
    @Override public void mouseEntered(    MouseEvent e){
    }
    @Override public void mouseClicked(    MouseEvent e){
    }
  }
);
  fileList.addListSelectionListener(new SelectFileListAction());
  fileListScrollPane=fl.getGui(showFileListSorted(currentlySelectedDirectoryList),listModelFiles,true);
  fileListPanel.setLayout(new BoxLayout(fileListPanel,BoxLayout.Y_AXIS));
  fileListPanel.add(fileListScrollPane);
  fileListPanel.setBorder(BorderFactory.createLineBorder(Color.black));
  JPanel fileListPanelButtonsPanel=new JPanel();
  fileListPanelButtonsPanel.setLayout(new BoxLayout(fileListPanelButtonsPanel,BoxLayout.Y_AXIS));
  fileListPanelButtonsPanel.setAlignmentY(Component.BOTTOM_ALIGNMENT);
  fileListPanelButtonsPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
  JButton btnUpDirectory=new JButton();
  btnUpDirectory.addActionListener(new UpDirectoryAction());
  btnUpDirectory.setIcon(upIcon);
  btnUpDirectory.setAlignmentX(Component.CENTER_ALIGNMENT);
  JButton btnBrowseDirectory=new JButton(""String_Node_Str"");
  btnBrowseDirectory.addActionListener(new BrowseDirectoryAction());
  btnBrowseDirectory.setIcon(browseDirectoryIcon);
  btnBrowseDirectory.setAlignmentX(Component.CENTER_ALIGNMENT);
  fileListPanelButtonsPanel.add(btnUpDirectory);
  fileListPanelButtonsPanel.add(btnBrowseDirectory);
  fileListPanel.add(fileListPanelButtonsPanel);
  fileDetailPanel=new FileDetailPanel(preferences);
  JScrollPane FileDetailsScrollPane=new JScrollPane(fileDetailPanel);
  frmMoviescraper.getContentPane().add(FileDetailsScrollPane,BorderLayout.CENTER);
  artWorkPanel=fileDetailPanel.getArtWorkPanel();
  JPanel southPanel=new JPanel();
  southPanel.setBorder(BorderFactory.createLineBorder(Color.black));
  southPanel.setLayout(new BoxLayout(southPanel,BoxLayout.X_AXIS));
  frmMoviescraper.getContentPane().add(southPanel,BorderLayout.SOUTH);
  JComponent parserPanel=new SpecificParserPanel(this);
  parserPanel.setPreferredSize(new Dimension(200,50));
  southPanel.add(parserPanel);
  JPanel buttonsPanel=new JPanel();
  buttonsPanel.setLayout(new BoxLayout(buttonsPanel,BoxLayout.PAGE_AXIS));
  JPanel scrapeButtons=new JPanel();
  JPanel fileOperationsButtons=new JPanel();
  southPanel.add(buttonsPanel);
  JButton btnScrapeSelectMovieJAV=new JButton(""String_Node_Str"");
  btnScrapeSelectMovieJAV.setAction(new ScrapeMovieAction());
  btnScrapeSelectMovieJAV.setIcon(japanIcon);
  scrapeButtons.add(btnScrapeSelectMovieJAV);
  JButton btnScrapeSelectMovieJAVAutomatic=new JButton(""String_Node_Str"");
  btnScrapeSelectMovieJAVAutomatic.setAction(new ScrapeMovieActionAutomatic());
  btnScrapeSelectMovieJAVAutomatic.setIcon(japanIcon);
  scrapeButtons.add(btnScrapeSelectMovieJAVAutomatic);
  JButton btnScrapeSelectMovieData18Movie=new JButton(""String_Node_Str"");
  btnScrapeSelectMovieData18Movie.setAction(new ScrapeMovieActionData18Movie());
  if (data18Icon != null)   btnScrapeSelectMovieData18Movie.setIcon(data18Icon);
  scrapeButtons.add(btnScrapeSelectMovieData18Movie);
  JButton btnScrapeSelectMovieData18WebContent=new JButton(""String_Node_Str"");
  btnScrapeSelectMovieData18WebContent.setAction(new ScrapeMovieActionData18WebContent());
  if (data18Icon != null)   btnScrapeSelectMovieData18WebContent.setIcon(data18Icon);
  scrapeButtons.add(btnScrapeSelectMovieData18WebContent);
  JButton btnWriteFileData=new JButton(""String_Node_Str"");
  if (saveIcon != null)   btnWriteFileData.setIcon(saveIcon);
  btnWriteFileData.addActionListener(new WriteFileDataAction());
  fileOperationsButtons.add(btnWriteFileData);
  JButton btnMoveFileToFolder=new JButton(""String_Node_Str"");
  btnMoveFileToFolder.setAction(moveToNewFolder);
  btnMoveFileToFolder.setIcon(moveToFolderIcon);
  fileOperationsButtons.add(btnMoveFileToFolder);
  JButton openCurrentlySelectedFileButton=new JButton(""String_Node_Str"");
  openCurrentlySelectedFileButton.addActionListener(new OpenFileAction());
  openCurrentlySelectedFileButton.setIcon(openIcon);
  fileOperationsButtons.add(openCurrentlySelectedFileButton);
  buttonsPanel.add(scrapeButtons);
  buttonsPanel.add(fileOperationsButtons);
  initializeMenus();
}","/** 
 * Initialize the contents of the frame.
 */
private void initialize(){
  preferences=new MoviescraperPreferences();
  currentlySelectedNfoFileList=new ArrayList<File>();
  currentlySelectedMovieFileList=new ArrayList<File>();
  currentlySelectedPosterFileList=new ArrayList<File>();
  currentlySelectedFolderJpgFileList=new ArrayList<File>();
  currentlySelectedFanartFileList=new ArrayList<File>();
  currentlySelectedTrailerFileList=new ArrayList<File>();
  currentlySelectedActorsFolderList=new ArrayList<File>();
  currentlySelectedExtraFanartFolderList=new ArrayList<File>();
  movieToWriteToDiskList=new ArrayList<Movie>();
  frmMoviescraper=new JFrame();
  frmMoviescraper.setBackground(SystemColor.window);
  frmMoviescraper.setPreferredSize(new Dimension(1024,768));
  frmMoviescraper.setTitle(""String_Node_Str"");
  frmMoviescraper.setBounds(100,100,1024,768);
  frmMoviescraper.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  URL programIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL saveButtonIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL data18IconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL japanIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL openIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL fileFolderIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL upIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  URL browseIconURL=frmMoviescraper.getClass().getResource(""String_Node_Str"");
  Image programIcon=null;
  try {
    programIcon=ImageIO.read(programIconURL);
    if (programIcon != null)     frmMoviescraper.setIconImage(programIcon);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  ImageIcon saveIcon=initializeImageIcon(saveButtonIconURL);
  ImageIcon data18Icon=initializeImageIcon(data18IconURL);
  ImageIcon japanIcon=initializeImageIcon(japanIconURL);
  ImageIcon openIcon=initializeImageIcon(openIconURL);
  ImageIcon moveToFolderIcon=initializeImageIcon(fileFolderIconURL);
  ImageIcon upIcon=initializeImageIcon(upIconURL);
  ImageIcon browseDirectoryIcon=initializeImageIcon(browseIconURL);
  fileListPanel=new JPanel();
  frmMoviescraper.getContentPane().add(fileListPanel,BorderLayout.WEST);
  defaultHomeDirectory=preferences.getLastUsedDirectory();
  currentlySelectedDirectoryList=defaultHomeDirectory;
  FileList fl=new FileList();
  listModelFiles=new DefaultListModel<File>();
  fileList=new JList<File>(listModelFiles);
  fileList.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent e){
    }
    @Override public void keyReleased(    KeyEvent e){
      char ch=e.getKeyChar();
      if (!Character.isLetterOrDigit(ch)) {
        return;
      }
      if (m_time + CHAR_DELTA < System.currentTimeMillis()) {
        m_key=""String_Node_Str"";
      }
      m_time=System.currentTimeMillis();
      m_key+=Character.toLowerCase(ch);
      for (int i=0; i < fileList.getModel().getSize(); i++) {
        String str=fileList.getModel().getElementAt(i).getName().toString().toLowerCase();
        if (str.startsWith(m_key)) {
          fileList.setSelectedIndex(i);
          fileList.ensureIndexIsVisible(i);
          break;
        }
      }
    }
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  fileList.addMouseListener(new MouseListener(){
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mousePressed(    MouseEvent e){
      if (e.getClickCount() >= 2) {
        @SuppressWarnings(""String_Node_Str"") JList<File> theList=(JList<File>)e.getSource();
        try {
          File doubleClickedFile=theList.getSelectedValue();
          if (doubleClickedFile != null && doubleClickedFile.exists() && doubleClickedFile.isDirectory()) {
            try {
              currentlySelectedDirectoryList=doubleClickedFile;
              frmMoviescraper.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
              updateFileListModel(currentlySelectedDirectoryList,false);
            }
  finally {
              preferences.setLastUsedDirectory(currentlySelectedDirectoryList);
              frmMoviescraper.setCursor(Cursor.getDefaultCursor());
            }
          }
 else {
            Desktop.getDesktop().open(theList.getSelectedValue());
          }
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
    }
    @Override public void mouseExited(    MouseEvent e){
    }
    @Override public void mouseEntered(    MouseEvent e){
    }
    @Override public void mouseClicked(    MouseEvent e){
    }
  }
);
  fileList.addListSelectionListener(new SelectFileListAction());
  fileListScrollPane=fl.getGui(showFileListSorted(currentlySelectedDirectoryList),listModelFiles,true);
  fileListPanel.setLayout(new BoxLayout(fileListPanel,BoxLayout.Y_AXIS));
  fileListPanel.add(fileListScrollPane);
  fileListPanel.setBorder(BorderFactory.createLineBorder(Color.black));
  JPanel fileListPanelButtonsPanel=new JPanel();
  fileListPanelButtonsPanel.setLayout(new BoxLayout(fileListPanelButtonsPanel,BoxLayout.Y_AXIS));
  fileListPanelButtonsPanel.setAlignmentY(Component.BOTTOM_ALIGNMENT);
  fileListPanelButtonsPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
  JButton btnUpDirectory=new JButton();
  btnUpDirectory.addActionListener(new UpDirectoryAction());
  btnUpDirectory.setIcon(upIcon);
  btnUpDirectory.setAlignmentX(Component.CENTER_ALIGNMENT);
  JButton btnBrowseDirectory=new JButton(""String_Node_Str"");
  btnBrowseDirectory.addActionListener(new BrowseDirectoryAction());
  btnBrowseDirectory.setIcon(browseDirectoryIcon);
  btnBrowseDirectory.setAlignmentX(Component.CENTER_ALIGNMENT);
  fileListPanelButtonsPanel.add(btnUpDirectory);
  fileListPanelButtonsPanel.add(btnBrowseDirectory);
  fileListPanel.add(fileListPanelButtonsPanel);
  fileDetailPanel=new FileDetailPanel(preferences);
  JScrollPane FileDetailsScrollPane=new JScrollPane(fileDetailPanel);
  frmMoviescraper.getContentPane().add(FileDetailsScrollPane,BorderLayout.CENTER);
  artWorkPanel=fileDetailPanel.getArtWorkPanel();
  JPanel southPanel=new JPanel();
  southPanel.setBorder(BorderFactory.createLineBorder(Color.black));
  southPanel.setLayout(new BoxLayout(southPanel,BoxLayout.X_AXIS));
  frmMoviescraper.getContentPane().add(southPanel,BorderLayout.SOUTH);
  JComponent parserPanel=new SpecificParserPanel(this);
  parserPanel.setPreferredSize(new Dimension(200,50));
  southPanel.add(parserPanel);
  JPanel buttonsPanel=new JPanel();
  buttonsPanel.setLayout(new BoxLayout(buttonsPanel,BoxLayout.PAGE_AXIS));
  JPanel scrapeButtons=new JPanel();
  JPanel fileOperationsButtons=new JPanel();
  southPanel.add(buttonsPanel);
  JButton btnScrapeSelectMovieJAV=new JButton(""String_Node_Str"");
  btnScrapeSelectMovieJAV.setAction(new ScrapeMovieAction());
  btnScrapeSelectMovieJAV.setIcon(japanIcon);
  scrapeButtons.add(btnScrapeSelectMovieJAV);
  JButton btnScrapeSelectMovieJAVAutomatic=new JButton(""String_Node_Str"");
  btnScrapeSelectMovieJAVAutomatic.setAction(new ScrapeMovieActionAutomatic());
  btnScrapeSelectMovieJAVAutomatic.setIcon(japanIcon);
  scrapeButtons.add(btnScrapeSelectMovieJAVAutomatic);
  JButton btnScrapeSelectMovieData18Movie=new JButton(""String_Node_Str"");
  btnScrapeSelectMovieData18Movie.setAction(new ScrapeMovieActionData18Movie());
  if (data18Icon != null)   btnScrapeSelectMovieData18Movie.setIcon(data18Icon);
  scrapeButtons.add(btnScrapeSelectMovieData18Movie);
  JButton btnScrapeSelectMovieData18WebContent=new JButton(""String_Node_Str"");
  btnScrapeSelectMovieData18WebContent.setAction(new ScrapeMovieActionData18WebContent());
  if (data18Icon != null)   btnScrapeSelectMovieData18WebContent.setIcon(data18Icon);
  scrapeButtons.add(btnScrapeSelectMovieData18WebContent);
  JButton btnWriteFileData=new JButton(""String_Node_Str"");
  if (saveIcon != null)   btnWriteFileData.setIcon(saveIcon);
  btnWriteFileData.addActionListener(new WriteFileDataAction());
  fileOperationsButtons.add(btnWriteFileData);
  JButton btnMoveFileToFolder=new JButton(""String_Node_Str"");
  btnMoveFileToFolder.setAction(moveToNewFolder);
  btnMoveFileToFolder.setIcon(moveToFolderIcon);
  fileOperationsButtons.add(btnMoveFileToFolder);
  JButton openCurrentlySelectedFileButton=new JButton(""String_Node_Str"");
  openCurrentlySelectedFileButton.addActionListener(new OpenFileAction());
  openCurrentlySelectedFileButton.setIcon(openIcon);
  fileOperationsButtons.add(openCurrentlySelectedFileButton);
  buttonsPanel.add(scrapeButtons);
  buttonsPanel.add(fileOperationsButtons);
  initializeMenus();
}",0.999654417693814
165551,"protected Movie amalgamateMovie(Movie currentlySelectedMovieDMM,Movie currentlySelectedMovieActionJav,Movie currentlySelectedMovieSquarePlus,Movie currentlySelectedMovieJavLibrary,Movie currentlySelectedMovieJavZoo){
  if (currentlySelectedMovieDMM == null && currentlySelectedMovieActionJav == null && currentlySelectedMovieSquarePlus == null && currentlySelectedMovieJavLibrary == null)   return null;
 else   if (movieToWriteToDisk != null && currentlySelectedMovieDMM == null && currentlySelectedMovieActionJav == null && currentlySelectedMovieSquarePlus == null && currentlySelectedMovieJavLibrary == null) {
    return movieToWriteToDisk;
  }
 else   if (currentlySelectedMovieJavLibrary != null && currentlySelectedMovieDMM != null && (currentlySelectedMovieActionJav != null || currentlySelectedMovieSquarePlus != null || currentlySelectedMovieJavZoo != null)) {
    currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieDMM.getPlot());
    currentlySelectedMovieJavLibrary.setOriginalTitle(currentlySelectedMovieDMM.getOriginalTitle());
    currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieDMM.getSet());
    if (currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getPlot() != null && currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1)     currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieActionJav.getPlot());
    if (currentlySelectedMovieSquarePlus != null && currentlySelectedMovieSquarePlus.getTitle() != null && currentlySelectedMovieSquarePlus.getTitle().getTitle().length() > 1)     currentlySelectedMovieJavLibrary.setTitle(currentlySelectedMovieSquarePlus.getTitle());
    if (currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getTitle() != null && currentlySelectedMovieActionJav.getTitle().getTitle().length() > 1)     currentlySelectedMovieJavLibrary.setTitle(currentlySelectedMovieActionJav.getTitle());
    if (currentlySelectedMovieJavLibrary.getActors().size() == 0 && currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getActors().size() > 0)     currentlySelectedMovieJavLibrary.setActors(currentlySelectedMovieActionJav.getActors());
    currentlySelectedMovieJavLibrary.setFanart(currentlySelectedMovieDMM.getFanart());
    currentlySelectedMovieJavLibrary.setPosters(currentlySelectedMovieDMM.getPosters());
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieJavZoo.getSet());
    currentlySelectedMovieJavLibrary.setExtraFanart(currentlySelectedMovieDMM.getExtraFanart());
    return currentlySelectedMovieJavLibrary;
  }
 else   if (currentlySelectedMovieJavLibrary != null && currentlySelectedMovieDMM != null && currentlySelectedMovieActionJav != null) {
    currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieDMM.getPlot());
    currentlySelectedMovieJavLibrary.setOriginalTitle(currentlySelectedMovieDMM.getOriginalTitle());
    currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieDMM.getSet());
    if (currentlySelectedMovieActionJav.getPlot() != null && currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1)     currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieActionJav.getPlot());
    if (currentlySelectedMovieActionJav.getTitle() != null && currentlySelectedMovieActionJav.getTitle().getTitle().length() > 1)     currentlySelectedMovieJavLibrary.setTitle(currentlySelectedMovieActionJav.getTitle());
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieJavZoo.getSet());
    currentlySelectedMovieJavLibrary.setExtraFanart(currentlySelectedMovieDMM.getExtraFanart());
    return currentlySelectedMovieJavLibrary;
  }
 else   if (currentlySelectedMovieJavLibrary != null && currentlySelectedMovieDMM != null) {
    currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieDMM.getPlot());
    currentlySelectedMovieJavLibrary.setOriginalTitle(currentlySelectedMovieDMM.getOriginalTitle());
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieJavZoo.getSet());
    currentlySelectedMovieJavLibrary.setExtraFanart(currentlySelectedMovieDMM.getExtraFanart());
    return currentlySelectedMovieJavLibrary;
  }
 else   if (currentlySelectedMovieJavLibrary != null) {
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieJavZoo.getSet());
    return currentlySelectedMovieJavLibrary;
  }
 else   if (currentlySelectedMovieActionJav == null && currentlySelectedMovieSquarePlus == null) {
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieDMM.setSet(currentlySelectedMovieJavZoo.getSet());
    return currentlySelectedMovieDMM;
  }
 else   if (currentlySelectedMovieActionJav != null && currentlySelectedMovieSquarePlus == null) {
    ArrayList<Actor> actorsToUse=(currentlySelectedMovieActionJav.getActors().size() > 0 && currentlySelectedMovieActionJav.getActors().size() >= currentlySelectedMovieDMM.getActors().size()) ? currentlySelectedMovieActionJav.getActors() : currentlySelectedMovieDMM.getActors();
    ArrayList<Director> directorsToUse=(currentlySelectedMovieActionJav.getDirectors().size() > 0) ? currentlySelectedMovieActionJav.getDirectors() : currentlySelectedMovieDMM.getDirectors();
    Thumb[] fanartToUse=currentlySelectedMovieDMM.getFanart();
    Thumb[] extraFanartToUse=currentlySelectedMovieDMM.getExtraFanart();
    ArrayList<Genre> genresToUse=(currentlySelectedMovieActionJav.getGenres().size() > 1) ? currentlySelectedMovieActionJav.getGenres() : currentlySelectedMovieDMM.getGenres();
    ID idsToUse=currentlySelectedMovieDMM.getId();
    MPAARating mpaaToUse=currentlySelectedMovieDMM.getMpaa();
    OriginalTitle originalTitleToUse=currentlySelectedMovieDMM.getOriginalTitle();
    Outline outlineToUse=currentlySelectedMovieDMM.getOutline();
    Plot plotToUse=(currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1) ? currentlySelectedMovieActionJav.getPlot() : currentlySelectedMovieDMM.getPlot();
    Thumb[] postersToUse=currentlySelectedMovieDMM.getPosters();
    Year yearToUse=currentlySelectedMovieDMM.getYear();
    Votes votesToUse=currentlySelectedMovieDMM.getVotes();
    Top250 top250ToUse=currentlySelectedMovieDMM.getTop250();
    Title titleToUse=(currentlySelectedMovieActionJav.getTitle().getTitle().length() > 1) ? currentlySelectedMovieActionJav.getTitle() : currentlySelectedMovieDMM.getTitle();
    Tagline taglineToUse=currentlySelectedMovieDMM.getTagline();
    Rating ratingToUse=currentlySelectedMovieDMM.getRating();
    Runtime runtimeToUse=(currentlySelectedMovieActionJav.getRuntime().getRuntime().length() > 1) ? currentlySelectedMovieActionJav.getRuntime() : currentlySelectedMovieDMM.getRuntime();
    Set setToUse=currentlySelectedMovieDMM.getSet();
    SortTitle sortTitleToUse=currentlySelectedMovieDMM.getSortTitle();
    Studio studioToUse=(currentlySelectedMovieActionJav.getStudio().getStudio().length() > 1) ? currentlySelectedMovieActionJav.getStudio() : currentlySelectedMovieDMM.getStudio();
    Movie amalgamatedMovie=new Movie(actorsToUse,directorsToUse,fanartToUse,extraFanartToUse,genresToUse,idsToUse,mpaaToUse,originalTitleToUse,outlineToUse,plotToUse,postersToUse,ratingToUse,runtimeToUse,setToUse,sortTitleToUse,studioToUse,taglineToUse,titleToUse,top250ToUse,votesToUse,yearToUse);
    return amalgamatedMovie;
  }
 else   if (currentlySelectedMovieActionJav == null && currentlySelectedMovieSquarePlus != null) {
    ArrayList<Actor> actorsToUse=currentlySelectedMovieDMM.getActors();
    ArrayList<Director> directorsToUse=currentlySelectedMovieDMM.getDirectors();
    Thumb[] fanartToUse=currentlySelectedMovieDMM.getFanart();
    Thumb[] extraFanartToUse=currentlySelectedMovieDMM.getExtraFanart();
    ArrayList<Genre> genresToUse=currentlySelectedMovieDMM.getGenres();
    ID idsToUse=currentlySelectedMovieDMM.getId();
    MPAARating mpaaToUse=currentlySelectedMovieDMM.getMpaa();
    OriginalTitle originalTitleToUse=currentlySelectedMovieDMM.getOriginalTitle();
    Outline outlineToUse=currentlySelectedMovieDMM.getOutline();
    Plot plotToUse=currentlySelectedMovieDMM.getPlot();
    Thumb[] postersToUse=currentlySelectedMovieDMM.getPosters();
    Year yearToUse=currentlySelectedMovieDMM.getYear();
    Votes votesToUse=currentlySelectedMovieDMM.getVotes();
    Top250 top250ToUse=currentlySelectedMovieDMM.getTop250();
    Title titleToUse=currentlySelectedMovieSquarePlus.getTitle();
    Tagline taglineToUse=currentlySelectedMovieDMM.getTagline();
    Rating ratingToUse=currentlySelectedMovieDMM.getRating();
    Runtime runtimeToUse=currentlySelectedMovieDMM.getRuntime();
    Set setToUse=currentlySelectedMovieDMM.getSet();
    SortTitle sortTitleToUse=currentlySelectedMovieDMM.getSortTitle();
    Studio studioToUse=currentlySelectedMovieDMM.getStudio();
    Movie amalgamatedMovie=new Movie(actorsToUse,directorsToUse,fanartToUse,extraFanartToUse,genresToUse,idsToUse,mpaaToUse,originalTitleToUse,outlineToUse,plotToUse,postersToUse,ratingToUse,runtimeToUse,setToUse,sortTitleToUse,studioToUse,taglineToUse,titleToUse,top250ToUse,votesToUse,yearToUse);
    return amalgamatedMovie;
  }
 else {
    ArrayList<Actor> actorsToUse=(currentlySelectedMovieActionJav.getActors().size() > 0 && currentlySelectedMovieActionJav.getActors().size() >= currentlySelectedMovieDMM.getActors().size()) ? currentlySelectedMovieActionJav.getActors() : currentlySelectedMovieDMM.getActors();
    ArrayList<Director> directorsToUse=(currentlySelectedMovieActionJav.getDirectors().size() > 0) ? currentlySelectedMovieActionJav.getDirectors() : currentlySelectedMovieDMM.getDirectors();
    Thumb[] fanartToUse=currentlySelectedMovieDMM.getFanart();
    Thumb[] extraFanartToUse=currentlySelectedMovieDMM.getExtraFanart();
    ArrayList<Genre> genresToUse=(currentlySelectedMovieActionJav.getGenres().size() > 1) ? currentlySelectedMovieActionJav.getGenres() : currentlySelectedMovieDMM.getGenres();
    ID idsToUse=currentlySelectedMovieDMM.getId();
    MPAARating mpaaToUse=currentlySelectedMovieDMM.getMpaa();
    OriginalTitle originalTitleToUse=currentlySelectedMovieDMM.getOriginalTitle();
    Outline outlineToUse=currentlySelectedMovieDMM.getOutline();
    Plot plotToUse=(currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1) ? currentlySelectedMovieActionJav.getPlot() : currentlySelectedMovieDMM.getPlot();
    Thumb[] postersToUse=currentlySelectedMovieDMM.getPosters();
    Year yearToUse=currentlySelectedMovieDMM.getYear();
    Votes votesToUse=currentlySelectedMovieDMM.getVotes();
    Top250 top250ToUse=currentlySelectedMovieDMM.getTop250();
    Title titleToUse=currentlySelectedMovieActionJav.getTitle();
    Tagline taglineToUse=currentlySelectedMovieDMM.getTagline();
    Rating ratingToUse=currentlySelectedMovieDMM.getRating();
    Runtime runtimeToUse=(currentlySelectedMovieActionJav.getRuntime().getRuntime().length() > 1) ? currentlySelectedMovieActionJav.getRuntime() : currentlySelectedMovieDMM.getRuntime();
    Set setToUse=currentlySelectedMovieDMM.getSet();
    SortTitle sortTitleToUse=currentlySelectedMovieDMM.getSortTitle();
    Studio studioToUse=(currentlySelectedMovieActionJav.getStudio().getStudio().length() > 1) ? currentlySelectedMovieActionJav.getStudio() : currentlySelectedMovieDMM.getStudio();
    Movie amalgamatedMovie=new Movie(actorsToUse,directorsToUse,fanartToUse,extraFanartToUse,genresToUse,idsToUse,mpaaToUse,originalTitleToUse,outlineToUse,plotToUse,postersToUse,ratingToUse,runtimeToUse,setToUse,sortTitleToUse,studioToUse,taglineToUse,titleToUse,top250ToUse,votesToUse,yearToUse);
    return amalgamatedMovie;
  }
}","protected Movie amalgamateMovie(Movie currentlySelectedMovieDMM,Movie currentlySelectedMovieActionJav,Movie currentlySelectedMovieSquarePlus,Movie currentlySelectedMovieJavLibrary,Movie currentlySelectedMovieJavZoo){
  if (currentlySelectedMovieDMM == null && currentlySelectedMovieActionJav == null && currentlySelectedMovieSquarePlus == null && currentlySelectedMovieJavLibrary == null)   return null;
 else   if (movieToWriteToDisk != null && currentlySelectedMovieDMM == null && currentlySelectedMovieActionJav == null && currentlySelectedMovieSquarePlus == null && currentlySelectedMovieJavLibrary == null) {
    return movieToWriteToDisk;
  }
 else   if (currentlySelectedMovieJavLibrary != null && currentlySelectedMovieDMM != null && (currentlySelectedMovieActionJav != null || currentlySelectedMovieSquarePlus != null || currentlySelectedMovieJavZoo != null)) {
    currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieDMM.getPlot());
    currentlySelectedMovieJavLibrary.setOriginalTitle(currentlySelectedMovieDMM.getOriginalTitle());
    currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieDMM.getSet());
    if (currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getPlot() != null && currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1)     currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieActionJav.getPlot());
    if (currentlySelectedMovieSquarePlus != null && currentlySelectedMovieSquarePlus.getTitle() != null && currentlySelectedMovieSquarePlus.getTitle().getTitle().length() > 1)     currentlySelectedMovieJavLibrary.setTitle(currentlySelectedMovieSquarePlus.getTitle());
    if (currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getTitle() != null && currentlySelectedMovieActionJav.getTitle().getTitle().length() > 1)     currentlySelectedMovieJavLibrary.setTitle(currentlySelectedMovieActionJav.getTitle());
    if (currentlySelectedMovieJavLibrary.getActors().size() == 0 && currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getActors().size() > 0)     currentlySelectedMovieJavLibrary.setActors(currentlySelectedMovieActionJav.getActors());
    currentlySelectedMovieJavLibrary.setFanart(currentlySelectedMovieDMM.getFanart());
    currentlySelectedMovieJavLibrary.setPosters(currentlySelectedMovieDMM.getPosters());
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieJavZoo.getSet());
    currentlySelectedMovieJavLibrary.setExtraFanart(currentlySelectedMovieDMM.getExtraFanart());
    if (currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getPlot() != null && currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1)     currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieActionJav.getPlot());
    return currentlySelectedMovieJavLibrary;
  }
 else   if (currentlySelectedMovieJavLibrary != null && currentlySelectedMovieDMM != null && currentlySelectedMovieActionJav != null) {
    currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieDMM.getPlot());
    currentlySelectedMovieJavLibrary.setOriginalTitle(currentlySelectedMovieDMM.getOriginalTitle());
    currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieDMM.getSet());
    if (currentlySelectedMovieActionJav.getPlot() != null && currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1)     currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieActionJav.getPlot());
    if (currentlySelectedMovieActionJav.getTitle() != null && currentlySelectedMovieActionJav.getTitle().getTitle().length() > 1)     currentlySelectedMovieJavLibrary.setTitle(currentlySelectedMovieActionJav.getTitle());
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieJavZoo.getSet());
    currentlySelectedMovieJavLibrary.setExtraFanart(currentlySelectedMovieDMM.getExtraFanart());
    if (currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getPlot() != null && currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1)     currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieActionJav.getPlot());
    return currentlySelectedMovieJavLibrary;
  }
 else   if (currentlySelectedMovieJavLibrary != null && currentlySelectedMovieDMM != null) {
    currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieDMM.getPlot());
    currentlySelectedMovieJavLibrary.setOriginalTitle(currentlySelectedMovieDMM.getOriginalTitle());
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieJavZoo.getSet());
    currentlySelectedMovieJavLibrary.setExtraFanart(currentlySelectedMovieDMM.getExtraFanart());
    if (currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getPlot() != null && currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1)     currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieActionJav.getPlot());
    return currentlySelectedMovieJavLibrary;
  }
 else   if (currentlySelectedMovieJavLibrary != null) {
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieJavLibrary.setSet(currentlySelectedMovieJavZoo.getSet());
    if (currentlySelectedMovieActionJav != null && currentlySelectedMovieActionJav.getPlot() != null && currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1)     currentlySelectedMovieJavLibrary.setPlot(currentlySelectedMovieActionJav.getPlot());
    return currentlySelectedMovieJavLibrary;
  }
 else   if (currentlySelectedMovieActionJav == null && currentlySelectedMovieSquarePlus == null) {
    if (currentlySelectedMovieJavZoo != null && currentlySelectedMovieJavZoo.getSet() != null && currentlySelectedMovieJavZoo.getSet().getSet().length() > 0)     currentlySelectedMovieDMM.setSet(currentlySelectedMovieJavZoo.getSet());
    return currentlySelectedMovieDMM;
  }
 else   if (currentlySelectedMovieActionJav != null && currentlySelectedMovieSquarePlus == null) {
    ArrayList<Actor> actorsToUse=(currentlySelectedMovieActionJav.getActors().size() > 0 && currentlySelectedMovieActionJav.getActors().size() >= currentlySelectedMovieDMM.getActors().size()) ? currentlySelectedMovieActionJav.getActors() : currentlySelectedMovieDMM.getActors();
    ArrayList<Director> directorsToUse=(currentlySelectedMovieActionJav.getDirectors().size() > 0) ? currentlySelectedMovieActionJav.getDirectors() : currentlySelectedMovieDMM.getDirectors();
    Thumb[] fanartToUse=currentlySelectedMovieDMM.getFanart();
    Thumb[] extraFanartToUse=currentlySelectedMovieDMM.getExtraFanart();
    ArrayList<Genre> genresToUse=(currentlySelectedMovieActionJav.getGenres().size() > 1) ? currentlySelectedMovieActionJav.getGenres() : currentlySelectedMovieDMM.getGenres();
    ID idsToUse=currentlySelectedMovieDMM.getId();
    MPAARating mpaaToUse=currentlySelectedMovieDMM.getMpaa();
    OriginalTitle originalTitleToUse=currentlySelectedMovieDMM.getOriginalTitle();
    Outline outlineToUse=currentlySelectedMovieDMM.getOutline();
    Plot plotToUse=(currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1) ? currentlySelectedMovieActionJav.getPlot() : currentlySelectedMovieDMM.getPlot();
    Thumb[] postersToUse=currentlySelectedMovieDMM.getPosters();
    Year yearToUse=currentlySelectedMovieDMM.getYear();
    Votes votesToUse=currentlySelectedMovieDMM.getVotes();
    Top250 top250ToUse=currentlySelectedMovieDMM.getTop250();
    Title titleToUse=(currentlySelectedMovieActionJav.getTitle().getTitle().length() > 1) ? currentlySelectedMovieActionJav.getTitle() : currentlySelectedMovieDMM.getTitle();
    Tagline taglineToUse=currentlySelectedMovieDMM.getTagline();
    Rating ratingToUse=currentlySelectedMovieDMM.getRating();
    Runtime runtimeToUse=(currentlySelectedMovieActionJav.getRuntime().getRuntime().length() > 1) ? currentlySelectedMovieActionJav.getRuntime() : currentlySelectedMovieDMM.getRuntime();
    Set setToUse=currentlySelectedMovieDMM.getSet();
    SortTitle sortTitleToUse=currentlySelectedMovieDMM.getSortTitle();
    Studio studioToUse=(currentlySelectedMovieActionJav.getStudio().getStudio().length() > 1) ? currentlySelectedMovieActionJav.getStudio() : currentlySelectedMovieDMM.getStudio();
    Movie amalgamatedMovie=new Movie(actorsToUse,directorsToUse,fanartToUse,extraFanartToUse,genresToUse,idsToUse,mpaaToUse,originalTitleToUse,outlineToUse,plotToUse,postersToUse,ratingToUse,runtimeToUse,setToUse,sortTitleToUse,studioToUse,taglineToUse,titleToUse,top250ToUse,votesToUse,yearToUse);
    return amalgamatedMovie;
  }
 else   if (currentlySelectedMovieActionJav == null && currentlySelectedMovieSquarePlus != null) {
    ArrayList<Actor> actorsToUse=currentlySelectedMovieDMM.getActors();
    ArrayList<Director> directorsToUse=currentlySelectedMovieDMM.getDirectors();
    Thumb[] fanartToUse=currentlySelectedMovieDMM.getFanart();
    Thumb[] extraFanartToUse=currentlySelectedMovieDMM.getExtraFanart();
    ArrayList<Genre> genresToUse=currentlySelectedMovieDMM.getGenres();
    ID idsToUse=currentlySelectedMovieDMM.getId();
    MPAARating mpaaToUse=currentlySelectedMovieDMM.getMpaa();
    OriginalTitle originalTitleToUse=currentlySelectedMovieDMM.getOriginalTitle();
    Outline outlineToUse=currentlySelectedMovieDMM.getOutline();
    Plot plotToUse=currentlySelectedMovieDMM.getPlot();
    Thumb[] postersToUse=currentlySelectedMovieDMM.getPosters();
    Year yearToUse=currentlySelectedMovieDMM.getYear();
    Votes votesToUse=currentlySelectedMovieDMM.getVotes();
    Top250 top250ToUse=currentlySelectedMovieDMM.getTop250();
    Title titleToUse=currentlySelectedMovieSquarePlus.getTitle();
    Tagline taglineToUse=currentlySelectedMovieDMM.getTagline();
    Rating ratingToUse=currentlySelectedMovieDMM.getRating();
    Runtime runtimeToUse=currentlySelectedMovieDMM.getRuntime();
    Set setToUse=currentlySelectedMovieDMM.getSet();
    SortTitle sortTitleToUse=currentlySelectedMovieDMM.getSortTitle();
    Studio studioToUse=currentlySelectedMovieDMM.getStudio();
    Movie amalgamatedMovie=new Movie(actorsToUse,directorsToUse,fanartToUse,extraFanartToUse,genresToUse,idsToUse,mpaaToUse,originalTitleToUse,outlineToUse,plotToUse,postersToUse,ratingToUse,runtimeToUse,setToUse,sortTitleToUse,studioToUse,taglineToUse,titleToUse,top250ToUse,votesToUse,yearToUse);
    return amalgamatedMovie;
  }
 else {
    ArrayList<Actor> actorsToUse=(currentlySelectedMovieActionJav.getActors().size() > 0 && currentlySelectedMovieActionJav.getActors().size() >= currentlySelectedMovieDMM.getActors().size()) ? currentlySelectedMovieActionJav.getActors() : currentlySelectedMovieDMM.getActors();
    ArrayList<Director> directorsToUse=(currentlySelectedMovieActionJav.getDirectors().size() > 0) ? currentlySelectedMovieActionJav.getDirectors() : currentlySelectedMovieDMM.getDirectors();
    Thumb[] fanartToUse=currentlySelectedMovieDMM.getFanart();
    Thumb[] extraFanartToUse=currentlySelectedMovieDMM.getExtraFanart();
    ArrayList<Genre> genresToUse=(currentlySelectedMovieActionJav.getGenres().size() > 1) ? currentlySelectedMovieActionJav.getGenres() : currentlySelectedMovieDMM.getGenres();
    ID idsToUse=currentlySelectedMovieDMM.getId();
    MPAARating mpaaToUse=currentlySelectedMovieDMM.getMpaa();
    OriginalTitle originalTitleToUse=currentlySelectedMovieDMM.getOriginalTitle();
    Outline outlineToUse=currentlySelectedMovieDMM.getOutline();
    Plot plotToUse=(currentlySelectedMovieActionJav.getPlot().getPlot().length() > 1) ? currentlySelectedMovieActionJav.getPlot() : currentlySelectedMovieDMM.getPlot();
    Thumb[] postersToUse=currentlySelectedMovieDMM.getPosters();
    Year yearToUse=currentlySelectedMovieDMM.getYear();
    Votes votesToUse=currentlySelectedMovieDMM.getVotes();
    Top250 top250ToUse=currentlySelectedMovieDMM.getTop250();
    Title titleToUse=currentlySelectedMovieActionJav.getTitle();
    Tagline taglineToUse=currentlySelectedMovieDMM.getTagline();
    Rating ratingToUse=currentlySelectedMovieDMM.getRating();
    Runtime runtimeToUse=(currentlySelectedMovieActionJav.getRuntime().getRuntime().length() > 1) ? currentlySelectedMovieActionJav.getRuntime() : currentlySelectedMovieDMM.getRuntime();
    Set setToUse=currentlySelectedMovieDMM.getSet();
    SortTitle sortTitleToUse=currentlySelectedMovieDMM.getSortTitle();
    Studio studioToUse=(currentlySelectedMovieActionJav.getStudio().getStudio().length() > 1) ? currentlySelectedMovieActionJav.getStudio() : currentlySelectedMovieDMM.getStudio();
    Movie amalgamatedMovie=new Movie(actorsToUse,directorsToUse,fanartToUse,extraFanartToUse,genresToUse,idsToUse,mpaaToUse,originalTitleToUse,outlineToUse,plotToUse,postersToUse,ratingToUse,runtimeToUse,setToUse,sortTitleToUse,studioToUse,taglineToUse,titleToUse,top250ToUse,votesToUse,yearToUse);
    return amalgamatedMovie;
  }
}",0.9528816199376948
165552,"@Override public String createSearchString(File file){
  String fileNameNoExtension=FilenameUtils.removeExtension(file.getName());
  fileNameNoExtension=findIDTagFromFile(file);
  return fileNameNoExtension;
}","@Override public String createSearchString(File file){
  String fileNameNoExtension=findIDTagFromFile(file);
  return fileNameNoExtension;
}",0.8022922636103151
165553,"@Override public ArrayList<Actor> scrapeActors(){
  Elements actorElements=document.select(""String_Node_Str"");
  ArrayList<Actor> actorList=new ArrayList<Actor>(actorElements.size());
  try {
    for (    Element actorElement : actorElements) {
      String currentActorName=actorElement.select(""String_Node_Str"").first().text();
      String currentActorDetailFileNameURL=actorElement.select(""String_Node_Str"").attr(""String_Node_Str"");
      currentActorDetailFileNameURL=currentActorDetailFileNameURL.substring(currentActorDetailFileNameURL.indexOf('=') + 1);
      currentActorDetailFileNameURL=""String_Node_Str"" + currentActorDetailFileNameURL + ""String_Node_Str"";
      Actor currentActor=new Actor(currentActorName,""String_Node_Str"",new Thumb(currentActorDetailFileNameURL));
      actorList.add(currentActor);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return actorList;
}","@Override public ArrayList<Actor> scrapeActors(){
  Elements actorElements=document.select(""String_Node_Str"");
  if (actorElements != null) {
    ArrayList<Actor> actorList=new ArrayList<Actor>(actorElements.size());
    try {
      for (      Element actorElement : actorElements) {
        String currentActorName=actorElement.select(""String_Node_Str"").first().text();
        String currentActorDetailFileNameURL=actorElement.select(""String_Node_Str"").attr(""String_Node_Str"");
        currentActorDetailFileNameURL=currentActorDetailFileNameURL.substring(currentActorDetailFileNameURL.indexOf('=') + 1);
        currentActorDetailFileNameURL=""String_Node_Str"" + currentActorDetailFileNameURL + ""String_Node_Str"";
        Actor currentActor=new Actor(currentActorName,""String_Node_Str"",new Thumb(currentActorDetailFileNameURL));
        actorList.add(currentActor);
      }
      return actorList;
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return new ArrayList<Actor>();
}",0.9298429319371728
165554,"@Override public String createSearchString(File file){
  String fileNameNoExtension=FilenameUtils.removeExtension(file.getName());
  fileNameNoExtension=findIDTagFromFile(file);
  URLCodec codec=new URLCodec();
  try {
    String fileNameURLEncoded=codec.encode(fileNameNoExtension);
    return ""String_Node_Str"" + fileNameURLEncoded + ""String_Node_Str"";
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","@Override public String createSearchString(File file){
  String fileNameNoExtension=findIDTagFromFile(file);
  URLCodec codec=new URLCodec();
  try {
    String fileNameURLEncoded=codec.encode(fileNameNoExtension);
    return ""String_Node_Str"" + fileNameURLEncoded + ""String_Node_Str"";
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9125475285171104
165555,"@Override public String createSearchString(File file){
  String fileNameNoExtension=FilenameUtils.removeExtension(file.getName());
  fileNameNoExtension=findIDTagFromFile(file);
  URLCodec codec=new URLCodec();
  try {
    String fileNameURLEncoded=codec.encode(fileNameNoExtension);
    String searchTerm=""String_Node_Str"" + siteLanguageToScrape + ""String_Node_Str""+ fileNameURLEncoded;
    return searchTerm;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","@Override public String createSearchString(File file){
  String fileNameNoExtension=findIDTagFromFile(file);
  URLCodec codec=new URLCodec();
  try {
    String fileNameURLEncoded=codec.encode(fileNameNoExtension);
    String searchTerm=""String_Node_Str"" + siteLanguageToScrape + ""String_Node_Str""+ fileNameURLEncoded;
    return searchTerm;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9234184239733628
165556,"@Override public String createSearchString(File file){
  String fileNameNoExtension=FilenameUtils.removeExtension(file.getName());
  fileNameNoExtension=findIDTagFromFile(file);
  URLCodec codec=new URLCodec();
  try {
    String fileNameURLEncoded=codec.encode(fileNameNoExtension);
    String searchTerm=""String_Node_Str"" + siteLanguageToScrape + ""String_Node_Str""+ fileNameURLEncoded;
    return searchTerm;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","@Override public String createSearchString(File file){
  String fileNameNoExtension=findIDTagFromFile(file);
  URLCodec codec=new URLCodec();
  try {
    String fileNameURLEncoded=codec.encode(fileNameNoExtension);
    String searchTerm=""String_Node_Str"" + siteLanguageToScrape + ""String_Node_Str""+ fileNameURLEncoded;
    return searchTerm;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9234184239733628
165557,"public static String findIDTagFromFile(File file){
  String fileNameNoExtension=FilenameUtils.removeExtension(file.getName());
  String fileNameNoExtensionNoDiscNumber=stripDiscNumber(fileNameNoExtension);
  String[] splitFileName=fileNameNoExtensionNoDiscNumber.split(""String_Node_Str"");
  String lastWord=splitFileName[splitFileName.length - 1];
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  return lastWord;
}","public static String findIDTagFromFile(File file){
  String fileNameNoExtension;
  if (file.isFile())   fileNameNoExtension=FilenameUtils.removeExtension(file.getName());
 else   fileNameNoExtension=file.getName();
  String fileNameNoExtensionNoDiscNumber=stripDiscNumber(fileNameNoExtension);
  String[] splitFileName=fileNameNoExtensionNoDiscNumber.split(""String_Node_Str"");
  String lastWord=splitFileName[splitFileName.length - 1];
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  lastWord=lastWord.replace(""String_Node_Str"",""String_Node_Str"");
  return lastWord;
}",0.8121301775147929
165558,"@Override public String createSearchString(File file){
  String fileNameNoExtension=FilenameUtils.removeExtension(file.getName());
  fileNameNoExtension=findIDTagFromFile(file);
  return fileNameNoExtension;
}","@Override public String createSearchString(File file){
  String fileNameNoExtension=findIDTagFromFile(file);
  return fileNameNoExtension;
}",0.8022922636103151
165559,"public final static String sanitizeString(String inputString){
  return inputString.replace(""String_Node_Str"",""String_Node_Str"").trim();
}","public final static String sanitizeString(String inputString){
  if (inputString != null)   return inputString.replace(""String_Node_Str"",""String_Node_Str"").trim();
 else   return null;
}",0.8518518518518519
165560,"public boolean hasAtLeastOneActorThumbnail(){
  for (  Actor currentActor : actors) {
    if (currentActor.getThumb().getThumbURL() != null && !currentActor.getThumb().getThumbURL().equals(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}","public boolean hasAtLeastOneActorThumbnail(){
  for (  Actor currentActor : actors) {
    if (currentActor.getThumb() != null && currentActor.getThumb().getThumbURL() != null && !currentActor.getThumb().getThumbURL().equals(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}",0.936247723132969
165561,"@Override public Runtime scrapeRuntime(){
  Elements movieDownloadParts=document.select(""String_Node_Str"");
  ArrayList<String> movieFileName=new ArrayList<String>(movieDownloadParts.size());
  Hashtable<String,Integer> runtimesByPart=new Hashtable<String,Integer>(movieDownloadParts.size());
  for (  Element movieElement : movieDownloadParts) {
    Element movieElementLink=movieElement.select(""String_Node_Str"").first();
    if (movieElementLink != null) {
      String filePath=movieElementLink.attr(""String_Node_Str"");
      String[] splitBySlash=filePath.split(""String_Node_Str"");
      String fileNameNoExtension=splitBySlash[splitBySlash.length - 1];
      fileNameNoExtension=fileNameNoExtension.substring(0,fileNameNoExtension.length() - 4);
      movieFileName.add(filePath);
      String runtimeText=movieElement.select(""String_Node_Str"").last().text();
      Integer runtimeAmt=new Integer(runtimeText.substring(1,runtimeText.indexOf('m') - 1));
      runtimesByPart.put(fileNameNoExtension,runtimeAmt);
    }
  }
  int totalRuntime=0;
  for (  Integer uniqueRuntime : runtimesByPart.values()) {
    totalRuntime+=uniqueRuntime.intValue();
  }
  if (totalRuntime != 0) {
    return new Runtime(Integer.toString(totalRuntime));
  }
 else   return new Runtime(""String_Node_Str"");
}","@Override public Runtime scrapeRuntime(){
  Elements movieDownloadParts=document.select(""String_Node_Str"");
  ArrayList<String> movieFileName=new ArrayList<String>(movieDownloadParts.size());
  Hashtable<String,Integer> runtimesByPart=new Hashtable<String,Integer>(movieDownloadParts.size());
  System.out.println(""String_Node_Str"" + movieDownloadParts);
  for (  Element movieElement : movieDownloadParts) {
    Element movieElementLink=movieElement.select(""String_Node_Str"").first();
    if (movieElementLink != null) {
      String filePath=movieElementLink.attr(""String_Node_Str"");
      String[] splitBySlash=filePath.split(""String_Node_Str"");
      String fileNameNoExtension=splitBySlash[splitBySlash.length - 1];
      fileNameNoExtension=fileNameNoExtension.substring(0,fileNameNoExtension.length() - 4);
      movieFileName.add(filePath);
      System.out.println(""String_Node_Str"" + movieElement);
      String runtimeText=movieElement.select(""String_Node_Str"").last().text();
      System.out.println(""String_Node_Str"" + runtimeText);
      Integer runtimeAmt=new Integer(runtimeText.substring(1,runtimeText.indexOf('m') - 1));
      runtimesByPart.put(fileNameNoExtension,runtimeAmt);
    }
  }
  int totalRuntime=0;
  for (  Integer uniqueRuntime : runtimesByPart.values()) {
    totalRuntime+=uniqueRuntime.intValue();
  }
  if (totalRuntime != 0) {
    return new Runtime(Integer.toString(totalRuntime));
  }
 else   return new Runtime(""String_Node_Str"");
}",0.9345388788426764
165562,"private static String getTargetFilePath(File file,String extension){
  if (!file.isDirectory()) {
    String nfoName=getUnstackedMovieName(file) + extension;
    return nfoName;
  }
 else {
    final String extensionFromParameter=extension;
    File[] directoryContents=file.listFiles(new FilenameFilter(){
      public boolean accept(      File directory,      String fileName){
        return fileName.endsWith(extensionFromParameter);
      }
    }
);
    if (directoryContents.length > 0)     return directoryContents[0].getPath();
 else {
      System.out.println(""String_Node_Str"" + getLastWordOfFile(file));
      return new File(file.getAbsolutePath() + ""String_Node_Str"" + getLastWordOfFile(file)+ extension).getPath();
    }
  }
}","private static String getTargetFilePath(File file,String extension){
  if (!file.isDirectory()) {
    String nfoName=getUnstackedMovieName(file) + extension;
    return nfoName;
  }
 else {
    final String extensionFromParameter=extension;
    File[] directoryContents=file.listFiles(new FilenameFilter(){
      public boolean accept(      File directory,      String fileName){
        return fileName.endsWith(extensionFromParameter);
      }
    }
);
    if (directoryContents.length > 0)     return directoryContents[0].getPath();
 else {
      return new File(file.getAbsolutePath() + ""String_Node_Str"" + getLastWordOfFile(file)+ extension).getPath();
    }
  }
}",0.8658623136976579
165563,"@Override public void notifyDataSetChanged(){
  if (!(mBaseAdapter instanceof ArrayAdapter<?>))   mBaseAdapter.notifyDataSetChanged();
}","@Override public void notifyDataSetChanged(){
  mBaseAdapter.notifyDataSetChanged();
}",0.7747747747747747
165564,"private void slideBack(final View slideInView,final int downPosition,final int direction){
  mPendingDismisses.add(new PendingDismissData(downPosition,direction,slideInView));
  slideInView.setTranslationX(slideInView.getTranslationX());
  slideInView.animate().translationX(0).alpha(1).setDuration(mAnimationTime).setListener(createAnimatorListener(slideInView.getHeight()));
}","private void slideBack(final View slideInView,final int downPosition,final int direction){
  mPendingDismisses.add(new PendingDismissData(downPosition,direction,slideInView));
  slideInView.setTranslationX(slideInView.getTranslationX());
  slideInView.animate().translationX(0).alpha(1).setDuration(mAnimationTime).setListener(createAnimatorListener());
}",0.9686221009549796
165565,"private void performDismiss(final View dismissView,final int dismissPosition,final int direction){
  final ViewGroup.LayoutParams lp=dismissView.getLayoutParams();
  final int originalHeight=dismissView.getHeight();
  ValueAnimator animator=ValueAnimator.ofInt(originalHeight,1).setDuration(mAnimationTime);
  animator.addListener(createAnimatorListener(originalHeight));
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      lp.height=(Integer)valueAnimator.getAnimatedValue();
      dismissView.setLayoutParams(lp);
    }
  }
);
  mPendingDismisses.add(new PendingDismissData(dismissPosition,direction,dismissView));
  animator.start();
}","private void performDismiss(final View dismissView,final int dismissPosition,final int direction){
  final ViewGroup.LayoutParams lp=dismissView.getLayoutParams();
  final int originalHeight=dismissView.getHeight();
  ValueAnimator animator=ValueAnimator.ofInt(originalHeight,1).setDuration(mAnimationTime);
  animator.addListener(createAnimatorListener());
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      lp.height=(Integer)valueAnimator.getAnimatedValue();
      dismissView.setLayoutParams(lp);
    }
  }
);
  mPendingDismisses.add(new PendingDismissData(dismissPosition,direction,dismissView));
  animator.start();
}",0.9904891304347826
165566,"@Override public void onAnimationEnd(Animator animation){
  --mDismissAnimationRefCount;
  if (mDismissAnimationRefCount == 0) {
    Collections.sort(mPendingDismisses);
    int[] dismissPositions=new int[mPendingDismisses.size()];
    int[] dismissDirections=new int[mPendingDismisses.size()];
    for (int i=mPendingDismisses.size() - 1; i >= 0; i--) {
      dismissPositions[i]=mPendingDismisses.get(i).position;
      dismissDirections[i]=mPendingDismisses.get(i).direction;
    }
    mCallbacks.onAction(mListView,dismissPositions,dismissDirections);
    mDownPosition=ListView.INVALID_POSITION;
    ViewGroup.LayoutParams lp;
    for (    PendingDismissData pendingDismiss : mPendingDismisses) {
      pendingDismiss.view.setAlpha(1f);
      pendingDismiss.view.setTranslationX(0);
      lp=pendingDismiss.view.getLayoutParams();
      lp.height=originalHeight;
      pendingDismiss.view.setLayoutParams(lp);
    }
    long time=SystemClock.uptimeMillis();
    MotionEvent cancelEvent=MotionEvent.obtain(time,time,MotionEvent.ACTION_CANCEL,0,0,0);
    mListView.dispatchTouchEvent(cancelEvent);
    mDownViewGroup.showBackground(SwipeDirections.DIRECTION_NEUTRAL,false);
    mPendingDismisses.clear();
  }
}","@Override public void onAnimationEnd(Animator animation){
  --mDismissAnimationRefCount;
  if (mDismissAnimationRefCount == 0) {
    Collections.sort(mPendingDismisses);
    int[] dismissPositions=new int[mPendingDismisses.size()];
    int[] dismissDirections=new int[mPendingDismisses.size()];
    for (int i=mPendingDismisses.size() - 1; i >= 0; i--) {
      dismissPositions[i]=mPendingDismisses.get(i).position;
      dismissDirections[i]=mPendingDismisses.get(i).direction;
    }
    mCallbacks.onAction(mListView,dismissPositions,dismissDirections);
    mDownPosition=ListView.INVALID_POSITION;
    for (    PendingDismissData pendingDismiss : mPendingDismisses) {
      pendingDismiss.view.setAlpha(1f);
      pendingDismiss.view.setTranslationX(0);
      pendingDismiss.view.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT,AbsListView.LayoutParams.WRAP_CONTENT));
    }
    long time=SystemClock.uptimeMillis();
    MotionEvent cancelEvent=MotionEvent.obtain(time,time,MotionEvent.ACTION_CANCEL,0,0,0);
    mListView.dispatchTouchEvent(cancelEvent);
    mDownViewGroup.showBackground(SwipeDirections.DIRECTION_NEUTRAL,false);
    mPendingDismisses.clear();
  }
}",0.9197684036393714
165567,"private AnimatorListenerAdapter createAnimatorListener(final int originalHeight){
  return new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      --mDismissAnimationRefCount;
      if (mDismissAnimationRefCount == 0) {
        Collections.sort(mPendingDismisses);
        int[] dismissPositions=new int[mPendingDismisses.size()];
        int[] dismissDirections=new int[mPendingDismisses.size()];
        for (int i=mPendingDismisses.size() - 1; i >= 0; i--) {
          dismissPositions[i]=mPendingDismisses.get(i).position;
          dismissDirections[i]=mPendingDismisses.get(i).direction;
        }
        mCallbacks.onAction(mListView,dismissPositions,dismissDirections);
        mDownPosition=ListView.INVALID_POSITION;
        ViewGroup.LayoutParams lp;
        for (        PendingDismissData pendingDismiss : mPendingDismisses) {
          pendingDismiss.view.setAlpha(1f);
          pendingDismiss.view.setTranslationX(0);
          lp=pendingDismiss.view.getLayoutParams();
          lp.height=originalHeight;
          pendingDismiss.view.setLayoutParams(lp);
        }
        long time=SystemClock.uptimeMillis();
        MotionEvent cancelEvent=MotionEvent.obtain(time,time,MotionEvent.ACTION_CANCEL,0,0,0);
        mListView.dispatchTouchEvent(cancelEvent);
        mDownViewGroup.showBackground(SwipeDirections.DIRECTION_NEUTRAL,false);
        mPendingDismisses.clear();
      }
    }
  }
;
}","private AnimatorListenerAdapter createAnimatorListener(){
  return new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      --mDismissAnimationRefCount;
      if (mDismissAnimationRefCount == 0) {
        Collections.sort(mPendingDismisses);
        int[] dismissPositions=new int[mPendingDismisses.size()];
        int[] dismissDirections=new int[mPendingDismisses.size()];
        for (int i=mPendingDismisses.size() - 1; i >= 0; i--) {
          dismissPositions[i]=mPendingDismisses.get(i).position;
          dismissDirections[i]=mPendingDismisses.get(i).direction;
        }
        mCallbacks.onAction(mListView,dismissPositions,dismissDirections);
        mDownPosition=ListView.INVALID_POSITION;
        for (        PendingDismissData pendingDismiss : mPendingDismisses) {
          pendingDismiss.view.setAlpha(1f);
          pendingDismiss.view.setTranslationX(0);
          pendingDismiss.view.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT,AbsListView.LayoutParams.WRAP_CONTENT));
        }
        long time=SystemClock.uptimeMillis();
        MotionEvent cancelEvent=MotionEvent.obtain(time,time,MotionEvent.ACTION_CANCEL,0,0,0);
        mListView.dispatchTouchEvent(cancelEvent);
        mDownViewGroup.showBackground(SwipeDirections.DIRECTION_NEUTRAL,false);
        mPendingDismisses.clear();
      }
    }
  }
;
}",0.9199721642310368
165568,"/** 
 * Submits a Runnable task for execution and returns a Future representing that task.
 * @param task a Runnable task for execution
 * @return a Future representing the task
 */
public static Future<?> submit(Runnable task){
  return THREAD_POOL.submit(task);
}","/** 
 * Submits a Runnable task for execution and returns a Future representing that task.
 * @param task a Runnable task for execution
 * @return a Future representing the task
 */
public static Future<?> submit(Runnable task){
  if (THREAD_POOL.isShutdown() || THREAD_POOL.isTerminated()) {
    THREAD_POOL=Executors.newCachedThreadPool(new CustomThreadFactory(new CustomExceptionHandler()));
  }
  return THREAD_POOL.submit(task);
}",0.7057142857142857
165569,"/** 
 * Returns the closest power-of-two number less than or equal to x.
 * @param x input value 
 * @return the closest power-of-two number less then or equal to x
 */
public static long prevPow2(long x){
  if (x < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (long)Math.pow(2,Math.floor(Math.log(x) / Math.log(2)));
}","/** 
 * Returns the closest power-of-two number less than or equal to x.
 * @param x input value
 * @return the closest power-of-two number less then or equal to x
 */
public static long prevPow2(long x){
  if (x < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (long)Math.pow(2,Math.floor(Math.log(x) / Math.log(2)));
}",0.9985734664764622
165570,"/** 
 * Waits for all threads to complete computation.
 * @param futures array of Future objects 
 */
public static void waitForCompletion(Future<?>[] futures){
  int size=futures.length;
  try {
    for (int j=0; j < size; j++) {
      futures[j].get();
    }
  }
 catch (  ExecutionException ex) {
    ex.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","/** 
 * Waits for all threads to complete computation.
 * @param futures array of Future objects
 */
public static void waitForCompletion(Future<?>[] futures){
  int size=futures.length;
  try {
    for (int j=0; j < size; j++) {
      futures[j].get();
    }
  }
 catch (  ExecutionException ex) {
    ex.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.9987325728770596
165571,"private void initializeFields(){
  energyBar=window.findChild(""String_Node_Str"");
  energyBar.setMaxValue(tileEntity.getCapacity());
  energyBar.setValue(getCurrentRF());
  ((ImageChoiceLabel)window.findChild(""String_Node_Str"")).setCurrentChoice(tileEntity.getRSMode().ordinal());
  int r=tileEntity.getRadius();
  if (r < 5) {
    r=5;
  }
 else   if (r > 100) {
    r=100;
  }
  ((ScrollableLabel)window.findChild(""String_Node_Str"")).setRealValue(r);
  playersList=window.findChild(""String_Node_Str"");
  minyTextField=window.findChild(""String_Node_Str"");
  maxyTextField=window.findChild(""String_Node_Str"");
  nameField=window.findChild(""String_Node_Str"");
}","private void initializeFields(){
  energyBar=window.findChild(""String_Node_Str"");
  energyBar.setMaxValue(tileEntity.getCapacity());
  energyBar.setValue(getCurrentRF());
  ((ImageChoiceLabel)window.findChild(""String_Node_Str"")).setCurrentChoice(tileEntity.getRSMode().ordinal());
  int r=tileEntity.getRadius();
  if (r < 5) {
    r=5;
  }
 else   if (r > 100) {
    r=100;
  }
  ((ScrollableLabel)window.findChild(""String_Node_Str"")).setRealValue(r);
  playersList=window.findChild(""String_Node_Str"");
  minyTextField=window.findChild(""String_Node_Str"");
  maxyTextField=window.findChild(""String_Node_Str"");
  nameField=window.findChild(""String_Node_Str"");
  minyTextField.setText(Integer.toString(tileEntity.getMiny()));
  maxyTextField.setText(Integer.toString(tileEntity.getMaxy()));
}",0.9103448275862068
165572,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_RSMODE,BuilderTileEntity::getRSModeInt,BuilderTileEntity::setRSModeInt),new DefaultValue<>(VALUE_WAIT,BuilderTileEntity::isWaitMode,BuilderTileEntity::setWaitMode),new DefaultValue<>(VALUE_LOOP,BuilderTileEntity::hasLoopMode,BuilderTileEntity::setLoopMode),new DefaultValue<>(VALUE_HILIGHT,BuilderTileEntity::isHilightMode,BuilderTileEntity::setHilightMode),new DefaultValue<>(VALUE_SUPPORT,BuilderTileEntity::hasSupportMode,BuilderTileEntity::setSupportMode),new DefaultValue<>(VALUE_SILENT,BuilderTileEntity::isSilent,BuilderTileEntity::setSilent),new DefaultValue<>(VALUE_ENTITIES,BuilderTileEntity::hasEntityMode,BuilderTileEntity::setEntityMode)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_RSMODE,BuilderTileEntity::getRSModeInt,BuilderTileEntity::setRSModeInt),new DefaultValue<>(VALUE_WAIT,BuilderTileEntity::isWaitMode,BuilderTileEntity::setWaitMode),new DefaultValue<>(VALUE_LOOP,BuilderTileEntity::hasLoopMode,BuilderTileEntity::setLoopMode),new DefaultValue<>(VALUE_HILIGHT,BuilderTileEntity::isHilightMode,BuilderTileEntity::setHilightMode),new DefaultValue<>(VALUE_SUPPORT,BuilderTileEntity::hasSupportMode,BuilderTileEntity::setSupportMode),new DefaultValue<>(VALUE_SILENT,BuilderTileEntity::isSilent,BuilderTileEntity::setSilent),new DefaultValue<>(VALUE_ENTITIES,BuilderTileEntity::hasEntityMode,BuilderTileEntity::setEntityMode)};
}",0.9966329966329966
165573,"@Optional.Method(modid=""String_Node_Str"") public void addProbeInfoScreen(ProbeMode mode,IProbeInfo probeInfo,EntityPlayer player,World world,BlockPos pos){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof ScreenTileEntity) {
    ScreenTileEntity screenTileEntity=(ScreenTileEntity)te;
    if (!screenTileEntity.isConnected() && screenTileEntity.isControllerNeeded()) {
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"");
    }
    if (!isCreative()) {
      boolean power=screenTileEntity.isPowerOn();
      if (!power) {
        probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"");
      }
      if (mode == ProbeMode.EXTENDED) {
        int rfPerTick=screenTileEntity.getTotalRfPerTick();
        probeInfo.text(TextFormatting.GREEN + (power ? ""String_Node_Str"" : ""String_Node_Str"") + rfPerTick+ ""String_Node_Str"");
      }
    }
    IScreenModule module=screenTileEntity.getHoveringModule();
    if (module instanceof ITooltipInfo) {
      List<String> info=((ITooltipInfo)module).getInfo(world,screenTileEntity.getHoveringX(),screenTileEntity.getHoveringY());
      for (      String s : info) {
        probeInfo.text(s);
      }
    }
  }
}","@Optional.Method(modid=""String_Node_Str"") public void addProbeInfoScreen(ProbeMode mode,IProbeInfo probeInfo,EntityPlayer player,World world,BlockPos pos){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof ScreenTileEntity) {
    ScreenTileEntity screenTileEntity=(ScreenTileEntity)te;
    if (!screenTileEntity.isConnected() && screenTileEntity.isControllerNeeded()) {
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"");
    }
    if (!isCreative()) {
      boolean power=screenTileEntity.isPowerOn();
      if (!power) {
        probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"");
      }
      if (mode == ProbeMode.EXTENDED) {
        int rfPerTick=screenTileEntity.getTotalRfPerTick();
        probeInfo.text(TextFormatting.GREEN + (power ? ""String_Node_Str"" : ""String_Node_Str"") + rfPerTick+ ""String_Node_Str"");
      }
    }
    IScreenModule<?> module=screenTileEntity.getHoveringModule();
    if (module instanceof ITooltipInfo) {
      List<String> info=((ITooltipInfo)module).getInfo(world,screenTileEntity.getHoveringX(),screenTileEntity.getHoveringY());
      for (      String s : info) {
        probeInfo.text(s);
      }
    }
  }
}",0.9987282746926665
165574,"private void checkStateServer(){
  if (clickedModules.isEmpty()) {
    return;
  }
  List<ActivatedModule> newClickedModules=new ArrayList<>();
  for (  ActivatedModule cm : clickedModules) {
    cm.ticks--;
    if (cm.ticks > 0) {
      newClickedModules.add(cm);
    }
 else {
      List<IScreenModule> modules=getScreenModules();
      if (cm.module < modules.size()) {
        ItemStack itemStack=inventoryHelper.getStackInSlot(cm.module);
        IScreenModule<?> module=modules.get(cm.module);
        module.mouseClick(getWorld(),cm.x,cm.y,false,null);
        if (module instanceof IScreenModuleUpdater) {
          NBTTagCompound newCompound=((IScreenModuleUpdater)module).update(itemStack.getTagCompound(),getWorld(),null);
          if (newCompound != null) {
            itemStack.setTagCompound(newCompound);
            markDirtyClient();
          }
        }
      }
    }
  }
  clickedModules=newClickedModules;
}","private void checkStateServer(){
  if (clickedModules.isEmpty()) {
    return;
  }
  List<ActivatedModule> newClickedModules=new ArrayList<>();
  for (  ActivatedModule cm : clickedModules) {
    cm.ticks--;
    if (cm.ticks > 0) {
      newClickedModules.add(cm);
    }
 else {
      List<IScreenModule<?>> modules=getScreenModules();
      if (cm.module < modules.size()) {
        ItemStack itemStack=inventoryHelper.getStackInSlot(cm.module);
        IScreenModule<?> module=modules.get(cm.module);
        module.mouseClick(getWorld(),cm.x,cm.y,false,null);
        if (module instanceof IScreenModuleUpdater) {
          NBTTagCompound newCompound=((IScreenModuleUpdater)module).update(itemStack.getTagCompound(),getWorld(),null);
          if (newCompound != null) {
            itemStack.setTagCompound(newCompound);
            markDirtyClient();
          }
        }
      }
    }
  }
  clickedModules=newClickedModules;
}",0.998389694041868
165575,"public List<IScreenModule> getScreenModules(){
  if (screenModules == null) {
    totalRfPerTick=0;
    controllerNeededInCreative=false;
    screenModules=new ArrayList<>();
    for (int i=0; i < inventoryHelper.getCount(); i++) {
      ItemStack itemStack=inventoryHelper.getStackInSlot(i);
      if (!itemStack.isEmpty() && ScreenBlock.hasModuleProvider(itemStack)) {
        IModuleProvider moduleProvider=ScreenBlock.getModuleProvider(itemStack);
        IScreenModule<?> screenModule;
        try {
          screenModule=moduleProvider.getServerScreenModule().newInstance();
        }
 catch (        InstantiationException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
catch (        IllegalAccessException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
        screenModule.setupFromNBT(itemStack.getTagCompound(),getWorld().provider.getDimension(),getPos());
        screenModules.add(screenModule);
        totalRfPerTick+=screenModule.getRfPerTick();
        if (screenModule.needsController())         controllerNeededInCreative=true;
        if (screenModule instanceof ComputerScreenModule) {
          ComputerScreenModule computerScreenModule=(ComputerScreenModule)screenModule;
          String tag=computerScreenModule.getTag();
          if (!computerModules.containsKey(tag)) {
            computerModules.put(tag,new ArrayList<ComputerScreenModule>());
          }
          computerModules.get(tag).add(computerScreenModule);
        }
      }
 else {
        screenModules.add(null);
      }
    }
  }
  return screenModules;
}","public List<IScreenModule<?>> getScreenModules(){
  if (screenModules == null) {
    totalRfPerTick=0;
    controllerNeededInCreative=false;
    screenModules=new ArrayList<>();
    for (int i=0; i < inventoryHelper.getCount(); i++) {
      ItemStack itemStack=inventoryHelper.getStackInSlot(i);
      if (!itemStack.isEmpty() && ScreenBlock.hasModuleProvider(itemStack)) {
        IModuleProvider moduleProvider=ScreenBlock.getModuleProvider(itemStack);
        IScreenModule<?> screenModule;
        try {
          screenModule=moduleProvider.getServerScreenModule().newInstance();
        }
 catch (        InstantiationException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
catch (        IllegalAccessException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
        screenModule.setupFromNBT(itemStack.getTagCompound(),getWorld().provider.getDimension(),getPos());
        screenModules.add(screenModule);
        totalRfPerTick+=screenModule.getRfPerTick();
        if (screenModule.needsController())         controllerNeededInCreative=true;
        if (screenModule instanceof ComputerScreenModule) {
          ComputerScreenModule computerScreenModule=(ComputerScreenModule)screenModule;
          String tag=computerScreenModule.getTag();
          if (!computerModules.containsKey(tag)) {
            computerModules.put(tag,new ArrayList<ComputerScreenModule>());
          }
          computerModules.get(tag).add(computerScreenModule);
        }
      }
 else {
        screenModules.add(null);
      }
    }
  }
  return screenModules;
}",0.9990783410138248
165576,"private void hitScreenServer(EntityPlayer player,int x,int y,int module){
  List<IScreenModule> screenModules=getScreenModules();
  IScreenModule<?> screenModule=screenModules.get(module);
  if (screenModule != null) {
    ItemStack itemStack=inventoryHelper.getStackInSlot(module);
    screenModule.mouseClick(getWorld(),x,y,true,player);
    if (screenModule instanceof IScreenModuleUpdater) {
      NBTTagCompound newCompound=((IScreenModuleUpdater)screenModule).update(itemStack.getTagCompound(),getWorld(),player);
      if (newCompound != null) {
        itemStack.setTagCompound(newCompound);
        markDirtyClient();
      }
    }
    clickedModules.add(new ActivatedModule(module,5,x,y));
  }
}","private void hitScreenServer(EntityPlayer player,int x,int y,int module){
  List<IScreenModule<?>> screenModules=getScreenModules();
  IScreenModule<?> screenModule=screenModules.get(module);
  if (screenModule != null) {
    ItemStack itemStack=inventoryHelper.getStackInSlot(module);
    screenModule.mouseClick(getWorld(),x,y,true,player);
    if (screenModule instanceof IScreenModuleUpdater) {
      NBTTagCompound newCompound=((IScreenModuleUpdater)screenModule).update(itemStack.getTagCompound(),getWorld(),player);
      if (newCompound != null) {
        itemStack.setTagCompound(newCompound);
        markDirtyClient();
      }
    }
    clickedModules.add(new ActivatedModule(module,5,x,y));
  }
}",0.9978768577494692
165577,"public Map<Integer,IModuleData> getScreenData(long millis){
  Map<Integer,IModuleData> map=new HashMap<>();
  List<IScreenModule> screenModules=getScreenModules();
  int moduleIndex=0;
  for (  IScreenModule<?> module : screenModules) {
    if (module != null) {
      IModuleData data=module.getData(screenDataHelper,getWorld(),millis);
      if (data != null) {
        map.put(moduleIndex,data);
      }
    }
    moduleIndex++;
  }
  return map;
}","public Map<Integer,IModuleData> getScreenData(long millis){
  Map<Integer,IModuleData> map=new HashMap<>();
  List<IScreenModule<?>> screenModules=getScreenModules();
  int moduleIndex=0;
  for (  IScreenModule<?> module : screenModules) {
    if (module != null) {
      IModuleData data=module.getData(screenDataHelper,getWorld(),millis);
      if (data != null) {
        map.put(moduleIndex,data);
      }
    }
    moduleIndex++;
  }
  return map;
}",0.9966850828729282
165578,"@Override public IAction[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_CLEARGRID,StorageScannerTileEntity::clearGrid)};
}","@Override public IAction<?>[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_CLEARGRID,StorageScannerTileEntity::clearGrid)};
}",0.9894736842105264
165579,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_DESTINATION,EndergenicTileEntity::getDestination,EndergenicTileEntity::setDestination)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_DESTINATION,EndergenicTileEntity::getDestination,EndergenicTileEntity::setDestination)};
}",0.9859943977591036
165580,"@Override public void select(Widget parent,int index){
  setSelectedBlock(index);
}","@Override public void select(Widget<?> parent,int index){
  setSelectedBlock(index);
}",0.9822485207100592
165581,"@Override public void initGui(){
  super.initGui();
  list=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget parent,    int index){
      setSelectedBlock(index);
    }
  }
);
  listDirty=0;
  Slider listSlider=new Slider(mc,this).setDesiredWidth(10).setVertical().setScrollableName(""String_Node_Str"");
  Panel listPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(3).setSpacing(1)).addChildren(list,listSlider);
  alarmModeChoiceLabel=new ChoiceLabel(mc,this).addChoices(RFMonitorMode.MODE_OFF.getDescription(),RFMonitorMode.MODE_LESS.getDescription(),RFMonitorMode.MODE_MORE.getDescription()).setDesiredWidth(60).setDesiredHeight(15).setTooltips(""String_Node_Str"",""String_Node_Str"").addChoiceEvent((parent,newChoice) -> changeAlarmMode(RFMonitorMode.getModeFromDescription(newChoice)));
  alarmModeChoiceLabel.setChoice(tileEntity.getAlarmMode().getDescription());
  alarmLabel=new ScrollableLabel(mc,this).setName(""String_Node_Str"").setSuffix(""String_Node_Str"").setDesiredWidth(30).setRealMinimum(0).setRealMaximum(100).setRealValue(tileEntity.getAlarmLevel()).addValueEvent((parent,newValue) -> changeAlarmValue(newValue));
  Slider alarmSlider=new Slider(mc,this).setDesiredHeight(15).setMinimumKnobSize(15).setHorizontal().setTooltips(""String_Node_Str"").setScrollableName(""String_Node_Str"");
  Panel alarmPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChildren(alarmModeChoiceLabel,alarmSlider,alarmLabel).setDesiredHeight(20);
  Panel toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout()).addChildren(listPanel,alarmPanel);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  fromServer_clientAdjacentBlocks=new ArrayList<>();
  RFToolsMessages.INSTANCE.sendToServer(new PacketGetAdjacentTankBlocks(tileEntity.getPos()));
}","@Override public void initGui(){
  super.initGui();
  list=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget<?> parent,    int index){
      setSelectedBlock(index);
    }
  }
);
  listDirty=0;
  Slider listSlider=new Slider(mc,this).setDesiredWidth(10).setVertical().setScrollableName(""String_Node_Str"");
  Panel listPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(3).setSpacing(1)).addChildren(list,listSlider);
  alarmModeChoiceLabel=new ChoiceLabel(mc,this).addChoices(RFMonitorMode.MODE_OFF.getDescription(),RFMonitorMode.MODE_LESS.getDescription(),RFMonitorMode.MODE_MORE.getDescription()).setDesiredWidth(60).setDesiredHeight(15).setTooltips(""String_Node_Str"",""String_Node_Str"").addChoiceEvent((parent,newChoice) -> changeAlarmMode(RFMonitorMode.getModeFromDescription(newChoice)));
  alarmModeChoiceLabel.setChoice(tileEntity.getAlarmMode().getDescription());
  alarmLabel=new ScrollableLabel(mc,this).setName(""String_Node_Str"").setSuffix(""String_Node_Str"").setDesiredWidth(30).setRealMinimum(0).setRealMaximum(100).setRealValue(tileEntity.getAlarmLevel()).addValueEvent((parent,newValue) -> changeAlarmValue(newValue));
  Slider alarmSlider=new Slider(mc,this).setDesiredHeight(15).setMinimumKnobSize(15).setHorizontal().setTooltips(""String_Node_Str"").setScrollableName(""String_Node_Str"");
  Panel alarmPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChildren(alarmModeChoiceLabel,alarmSlider,alarmLabel).setDesiredHeight(20);
  Panel toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout()).addChildren(listPanel,alarmPanel);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  fromServer_clientAdjacentBlocks=new ArrayList<>();
  RFToolsMessages.INSTANCE.sendToServer(new PacketGetAdjacentTankBlocks(tileEntity.getPos()));
}",0.9992305719415234
165582,"@Override public void select(Widget parent,int index){
  setSelectedBlock(index);
}","@Override public void select(Widget<?> parent,int index){
  setSelectedBlock(index);
}",0.9822485207100592
165583,"@Override public void initGui(){
  super.initGui();
  list=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget parent,    int index){
      setSelectedBlock(index);
    }
  }
);
  listDirty=0;
  Slider listSlider=new Slider(mc,this).setDesiredWidth(10).setVertical().setScrollableName(""String_Node_Str"");
  Panel listPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(3).setSpacing(1)).addChildren(list,listSlider);
  alarmModeChoiceLabel=new ChoiceLabel(mc,this).addChoices(RFMonitorMode.MODE_OFF.getDescription(),RFMonitorMode.MODE_LESS.getDescription(),RFMonitorMode.MODE_MORE.getDescription()).setDesiredWidth(60).setDesiredHeight(15).setTooltips(""String_Node_Str"",""String_Node_Str"").addChoiceEvent((parent,newChoice) -> changeAlarmMode(RFMonitorMode.getModeFromDescription(newChoice)));
  alarmModeChoiceLabel.setChoice(tileEntity.getAlarmMode().getDescription());
  alarmLabel=new ScrollableLabel(mc,this).setName(""String_Node_Str"").setSuffix(""String_Node_Str"").setDesiredWidth(30).setRealMinimum(0).setRealMaximum(100).setRealValue(tileEntity.getAlarmLevel()).addValueEvent((parent,newValue) -> changeAlarmValue(newValue));
  Slider alarmSlider=new Slider(mc,this).setDesiredHeight(15).setHorizontal().setMinimumKnobSize(15).setTooltips(""String_Node_Str"").setScrollableName(""String_Node_Str"");
  Panel alarmPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChildren(alarmModeChoiceLabel,alarmSlider,alarmLabel).setDesiredHeight(20);
  Panel toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout()).addChildren(listPanel,alarmPanel);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  fromServer_clientAdjacentBlocks=new ArrayList<>();
  RFToolsMessages.INSTANCE.sendToServer(new PacketGetAdjacentBlocks(tileEntity.getPos()));
}","@Override public void initGui(){
  super.initGui();
  list=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget<?> parent,    int index){
      setSelectedBlock(index);
    }
  }
);
  listDirty=0;
  Slider listSlider=new Slider(mc,this).setDesiredWidth(10).setVertical().setScrollableName(""String_Node_Str"");
  Panel listPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(3).setSpacing(1)).addChildren(list,listSlider);
  alarmModeChoiceLabel=new ChoiceLabel(mc,this).addChoices(RFMonitorMode.MODE_OFF.getDescription(),RFMonitorMode.MODE_LESS.getDescription(),RFMonitorMode.MODE_MORE.getDescription()).setDesiredWidth(60).setDesiredHeight(15).setTooltips(""String_Node_Str"",""String_Node_Str"").addChoiceEvent((parent,newChoice) -> changeAlarmMode(RFMonitorMode.getModeFromDescription(newChoice)));
  alarmModeChoiceLabel.setChoice(tileEntity.getAlarmMode().getDescription());
  alarmLabel=new ScrollableLabel(mc,this).setName(""String_Node_Str"").setSuffix(""String_Node_Str"").setDesiredWidth(30).setRealMinimum(0).setRealMaximum(100).setRealValue(tileEntity.getAlarmLevel()).addValueEvent((parent,newValue) -> changeAlarmValue(newValue));
  Slider alarmSlider=new Slider(mc,this).setDesiredHeight(15).setHorizontal().setMinimumKnobSize(15).setTooltips(""String_Node_Str"").setScrollableName(""String_Node_Str"");
  Panel alarmPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChildren(alarmModeChoiceLabel,alarmSlider,alarmLabel).setDesiredHeight(20);
  Panel toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout()).addChildren(listPanel,alarmPanel);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  fromServer_clientAdjacentBlocks=new ArrayList<>();
  RFToolsMessages.INSTANCE.sendToServer(new PacketGetAdjacentBlocks(tileEntity.getPos()));
}",0.9992289899768696
165584,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_BRIGHT,ScreenTileEntity::isBright,ScreenTileEntity::setBright)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_BRIGHT,ScreenTileEntity::isBright,ScreenTileEntity::setBright)};
}",0.9838187702265372
165585,"@Override public void select(Widget widget){
  ItemStack holding=Minecraft.getMinecraft().player.inventory.getItemStack();
  if (holding.isEmpty()) {
    currentData.removeTag(tagname);
    blockRender.setRenderItem(null);
  }
 else {
    ItemStack copy=holding.copy();
    copy.setCount(1);
    blockRender.setRenderItem(copy);
    NBTTagCompound tc=new NBTTagCompound();
    copy.writeToNBT(tc);
    currentData.setTag(tagname,tc);
  }
  moduleGuiChanged.updateData();
}","@Override public void select(Widget<?> widget){
  ItemStack holding=Minecraft.getMinecraft().player.inventory.getItemStack();
  if (holding.isEmpty()) {
    currentData.removeTag(tagname);
    blockRender.setRenderItem(null);
  }
 else {
    ItemStack copy=holding.copy();
    copy.setCount(1);
    blockRender.setRenderItem(copy);
    NBTTagCompound tc=new NBTTagCompound();
    copy.writeToNBT(tc);
    currentData.setTag(tagname,tc);
  }
  moduleGuiChanged.updateData();
}",0.996832101372756
165586,"@Override public void doubleClick(Widget widget){
}","@Override public void doubleClick(Widget<?> widget){
}",0.9714285714285714
165587,"@Override public IModuleGuiBuilder ghostStack(String tagname){
  ItemStack stack=ItemStack.EMPTY;
  if (currentData.hasKey(tagname)) {
    stack=new ItemStack(currentData.getCompoundTag(tagname));
  }
  BlockRender blockRender=new BlockRender(mc,gui).setRenderItem(stack).setDesiredWidth(18).setDesiredHeight(18).setFilledRectThickness(1).setFilledBackground(0xff555555);
  row.add(blockRender);
  blockRender.addSelectionEvent(new BlockRenderEvent(){
    @Override public void select(    Widget widget){
      ItemStack holding=Minecraft.getMinecraft().player.inventory.getItemStack();
      if (holding.isEmpty()) {
        currentData.removeTag(tagname);
        blockRender.setRenderItem(null);
      }
 else {
        ItemStack copy=holding.copy();
        copy.setCount(1);
        blockRender.setRenderItem(copy);
        NBTTagCompound tc=new NBTTagCompound();
        copy.writeToNBT(tc);
        currentData.setTag(tagname,tc);
      }
      moduleGuiChanged.updateData();
    }
    @Override public void doubleClick(    Widget widget){
    }
  }
);
  return this;
}","@Override public IModuleGuiBuilder ghostStack(String tagname){
  ItemStack stack=ItemStack.EMPTY;
  if (currentData.hasKey(tagname)) {
    stack=new ItemStack(currentData.getCompoundTag(tagname));
  }
  BlockRender blockRender=new BlockRender(mc,gui).setRenderItem(stack).setDesiredWidth(18).setDesiredHeight(18).setFilledRectThickness(1).setFilledBackground(0xff555555);
  row.add(blockRender);
  blockRender.addSelectionEvent(new BlockRenderEvent(){
    @Override public void select(    Widget<?> widget){
      ItemStack holding=Minecraft.getMinecraft().player.inventory.getItemStack();
      if (holding.isEmpty()) {
        currentData.removeTag(tagname);
        blockRender.setRenderItem(null);
      }
 else {
        ItemStack copy=holding.copy();
        copy.setCount(1);
        blockRender.setRenderItem(copy);
        NBTTagCompound tc=new NBTTagCompound();
        copy.writeToNBT(tc);
        currentData.setTag(tagname,tc);
      }
      moduleGuiChanged.updateData();
    }
    @Override public void doubleClick(    Widget<?> widget){
    }
  }
);
  return this;
}",0.9972196478220574
165588,"@Override public void initGui(){
  super.initGui();
  players=new WidgetList(mc,this).setName(""String_Node_Str"").setEnabledFlags(""String_Node_Str"");
  Slider allowedPlayerSlider=new Slider(mc,this).setDesiredWidth(10).setVertical().setScrollableName(""String_Node_Str"");
  Panel allowedPlayersPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(3).setSpacing(1)).addChildren(players,allowedPlayerSlider).setLayoutHint(new PositionalLayout.PositionalHint(72,5,SECURITYMANAGER_WIDTH - 76,96));
  nameField=new TextField(mc,this).setDesiredHeight(15).setName(""String_Node_Str"").setEnabledFlags(""String_Node_Str"");
  Widget addButton=new Button(mc,this).setText(""String_Node_Str"").setDesiredHeight(14).setDesiredWidth(34).setTooltips(""String_Node_Str"").setEnabledFlags(""String_Node_Str"").setName(""String_Node_Str"").setChannel(""String_Node_Str"");
  Widget delButton=new Button(mc,this).setText(""String_Node_Str"").setDesiredHeight(14).setDesiredWidth(34).setTooltips(""String_Node_Str"",""String_Node_Str"").setEnabledFlags(""String_Node_Str"").setName(""String_Node_Str"").setChannel(""String_Node_Str"");
  Panel buttonPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(3).setSpacing(1)).addChildren(nameField,addButton,delButton).setDesiredHeight(16).setLayoutHint(new PositionalLayout.PositionalHint(72,100,SECURITYMANAGER_WIDTH - 76,14));
  channelNameField=new TextField(mc,this).setLayoutHint(8,27,60,14).addTextEvent((parent,newText) -> updateChannelName()).setName(""String_Node_Str"").setEnabledFlags(""String_Node_Str"");
  blacklistMode=new ImageChoiceLabel(mc,this).setLayoutHint(10,44,16,16).setTooltips(""String_Node_Str"").addChoiceEvent((parent,newChoice) -> updateSettings()).setName(""String_Node_Str"").setEnabledFlags(""String_Node_Str"");
  blacklistMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,15 * 16,32);
  blacklistMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,14 * 16,32);
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChildren(allowedPlayersPanel,buttonPanel,channelNameField,blacklistMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  Keyboard.enableRepeatEvents(true);
  window.event(""String_Node_Str"",(source,params) -> addPlayer());
  window.event(""String_Node_Str"",(source,params) -> delPlayer());
  channelFromServer=null;
}","@Override public void initGui(){
  super.initGui();
  players=new WidgetList(mc,this).setName(""String_Node_Str"").setEnabledFlags(""String_Node_Str"");
  Slider allowedPlayerSlider=new Slider(mc,this).setDesiredWidth(10).setVertical().setScrollableName(""String_Node_Str"");
  Panel allowedPlayersPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(3).setSpacing(1)).addChildren(players,allowedPlayerSlider).setLayoutHint(new PositionalLayout.PositionalHint(72,5,SECURITYMANAGER_WIDTH - 76,96));
  nameField=new TextField(mc,this).setDesiredHeight(15).setName(""String_Node_Str"").setEnabledFlags(""String_Node_Str"");
  Widget<?> addButton=new Button(mc,this).setText(""String_Node_Str"").setDesiredHeight(14).setDesiredWidth(34).setTooltips(""String_Node_Str"").setEnabledFlags(""String_Node_Str"").setName(""String_Node_Str"").setChannel(""String_Node_Str"");
  Widget<?> delButton=new Button(mc,this).setText(""String_Node_Str"").setDesiredHeight(14).setDesiredWidth(34).setTooltips(""String_Node_Str"",""String_Node_Str"").setEnabledFlags(""String_Node_Str"").setName(""String_Node_Str"").setChannel(""String_Node_Str"");
  Panel buttonPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(3).setSpacing(1)).addChildren(nameField,addButton,delButton).setDesiredHeight(16).setLayoutHint(new PositionalLayout.PositionalHint(72,100,SECURITYMANAGER_WIDTH - 76,14));
  channelNameField=new TextField(mc,this).setLayoutHint(8,27,60,14).addTextEvent((parent,newText) -> updateChannelName()).setName(""String_Node_Str"").setEnabledFlags(""String_Node_Str"");
  blacklistMode=new ImageChoiceLabel(mc,this).setLayoutHint(10,44,16,16).setTooltips(""String_Node_Str"").addChoiceEvent((parent,newChoice) -> updateSettings()).setName(""String_Node_Str"").setEnabledFlags(""String_Node_Str"");
  blacklistMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,15 * 16,32);
  blacklistMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,14 * 16,32);
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChildren(allowedPlayersPanel,buttonPanel,channelNameField,blacklistMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  Keyboard.enableRepeatEvents(true);
  window.event(""String_Node_Str"",(source,params) -> addPlayer());
  window.event(""String_Node_Str"",(source,params) -> delPlayer());
  channelFromServer=null;
}",0.998768472906404
165589,"@Override public void select(Widget parent,int index){
  selectFilter();
}","@Override public void select(Widget<?> parent,int index){
  selectFilter();
}",0.9801324503311258
165590,"@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(12,141,10,76).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  initVisibilityMode();
  initActionOptions();
  initTypeOptions();
  ImageChoiceLabel redstoneMode=initRedstoneMode();
  initDamageType();
  filterList=new WidgetList(mc,this).setName(""String_Node_Str"").setDesiredHeight(120).addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget parent,    int index){
      selectFilter();
    }
  }
);
  Slider filterSlider=new Slider(mc,this).setVertical().setScrollableName(""String_Node_Str"").setDesiredWidth(11).setDesiredHeight(120);
  Panel filterPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).setLayoutHint(12,10,154,124).addChildren(filterList,filterSlider).setFilledBackground(0xff9e9e9e);
  Button applyCamo=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(46,142,30,16);
  colorSelector=new ColorSelector(mc,this).setName(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(25,177,30,16);
  ToggleButton light=new ToggleButton(mc,this).setName(""String_Node_Str"").setCheckMarker(true).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"").setLayoutHint(56,177,23,16);
  player=new TextField(mc,this).setTooltips(""String_Node_Str"").setLayoutHint(170,44,80,14);
  addFilter=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(4,6,36,14);
  delFilter=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(39,6,36,14);
  upFilter=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(4,22,36,14);
  downFilter=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(39,22,36,14);
  Panel controlPanel=new Panel(mc,this).setLayout(new PositionalLayout()).setLayoutHint(170,58,80,43).addChildren(addFilter,delFilter,upFilter,downFilter).setFilledRectThickness(-2).setFilledBackground(StyleConfig.colorListBackground);
  Label lootingBonus=new Label(mc,this).setHorizontalAlignment(HorizontalAlignment.ALIGN_RIGHT).setText(""String_Node_Str"");
  lootingBonus.setTooltips(""String_Node_Str"",""String_Node_Str"").setLayoutHint(160,118,60,18);
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChildren(energyBar,visibilityOptions,applyCamo,redstoneMode,filterPanel,actionOptions,typeOptions,player,controlPanel,damageType,colorSelector,lootingBonus,light);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,GenericTileEntity.VALUE_RSMODE.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,ShieldTEBase.VALUE_SHIELDVISMODE.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,ShieldTEBase.VALUE_DAMAGEMODE.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,ShieldTEBase.VALUE_COLOR.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,ShieldTEBase.VALUE_LIGHT.getName());
  window.event(""String_Node_Str"",(source,params) -> applyCamoToShield());
  window.event(""String_Node_Str"",(source,params) -> addNewFilter());
  window.event(""String_Node_Str"",(source,params) -> removeSelectedFilter());
  window.event(""String_Node_Str"",(source,params) -> moveFilterUp());
  window.event(""String_Node_Str"",(source,params) -> moveFilterDown());
  listDirty=0;
  requestFilters();
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(12,141,10,76).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  initVisibilityMode();
  initActionOptions();
  initTypeOptions();
  ImageChoiceLabel redstoneMode=initRedstoneMode();
  initDamageType();
  filterList=new WidgetList(mc,this).setName(""String_Node_Str"").setDesiredHeight(120).addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget<?> parent,    int index){
      selectFilter();
    }
  }
);
  Slider filterSlider=new Slider(mc,this).setVertical().setScrollableName(""String_Node_Str"").setDesiredWidth(11).setDesiredHeight(120);
  Panel filterPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).setLayoutHint(12,10,154,124).addChildren(filterList,filterSlider).setFilledBackground(0xff9e9e9e);
  Button applyCamo=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(46,142,30,16);
  colorSelector=new ColorSelector(mc,this).setName(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(25,177,30,16);
  ToggleButton light=new ToggleButton(mc,this).setName(""String_Node_Str"").setCheckMarker(true).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"").setLayoutHint(56,177,23,16);
  player=new TextField(mc,this).setTooltips(""String_Node_Str"").setLayoutHint(170,44,80,14);
  addFilter=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(4,6,36,14);
  delFilter=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(39,6,36,14);
  upFilter=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(4,22,36,14);
  downFilter=new Button(mc,this).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(39,22,36,14);
  Panel controlPanel=new Panel(mc,this).setLayout(new PositionalLayout()).setLayoutHint(170,58,80,43).addChildren(addFilter,delFilter,upFilter,downFilter).setFilledRectThickness(-2).setFilledBackground(StyleConfig.colorListBackground);
  Label lootingBonus=new Label(mc,this).setHorizontalAlignment(HorizontalAlignment.ALIGN_RIGHT).setText(""String_Node_Str"");
  lootingBonus.setTooltips(""String_Node_Str"",""String_Node_Str"").setLayoutHint(160,118,60,18);
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChildren(energyBar,visibilityOptions,applyCamo,redstoneMode,filterPanel,actionOptions,typeOptions,player,controlPanel,damageType,colorSelector,lootingBonus,light);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,GenericTileEntity.VALUE_RSMODE.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,ShieldTEBase.VALUE_SHIELDVISMODE.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,ShieldTEBase.VALUE_DAMAGEMODE.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,ShieldTEBase.VALUE_COLOR.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,ShieldTEBase.VALUE_LIGHT.getName());
  window.event(""String_Node_Str"",(source,params) -> applyCamoToShield());
  window.event(""String_Node_Str"",(source,params) -> addNewFilter());
  window.event(""String_Node_Str"",(source,params) -> removeSelectedFilter());
  window.event(""String_Node_Str"",(source,params) -> moveFilterUp());
  window.event(""String_Node_Str"",(source,params) -> moveFilterDown());
  listDirty=0;
  requestFilters();
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.999624859322246
165591,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_RSMODE,ShieldTEBase::getRSModeInt,ShieldTEBase::setRSModeInt),new DefaultValue<>(VALUE_SHIELDVISMODE,te -> ((ShieldTEBase)te).getShieldRenderingMode().ordinal(),(te,value) -> ((ShieldTEBase)te).setShieldRenderingMode(ShieldRenderingMode.values()[value])),new DefaultValue<>(VALUE_DAMAGEMODE,te -> ((ShieldTEBase)te).getDamageMode().ordinal(),(te,value) -> ((ShieldTEBase)te).setDamageMode(DamageTypeMode.values()[value])),new DefaultValue<>(VALUE_COLOR,ShieldTEBase::getShieldColor,ShieldTEBase::setShieldColor),new DefaultValue<>(VALUE_LIGHT,ShieldTEBase::isBlockLight,ShieldTEBase::setBlockLight)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_RSMODE,ShieldTEBase::getRSModeInt,ShieldTEBase::setRSModeInt),new DefaultValue<>(VALUE_SHIELDVISMODE,te -> ((ShieldTEBase)te).getShieldRenderingMode().ordinal(),(te,value) -> ((ShieldTEBase)te).setShieldRenderingMode(ShieldRenderingMode.values()[value])),new DefaultValue<>(VALUE_DAMAGEMODE,te -> ((ShieldTEBase)te).getDamageMode().ordinal(),(te,value) -> ((ShieldTEBase)te).setDamageMode(DamageTypeMode.values()[value])),new DefaultValue<>(VALUE_COLOR,ShieldTEBase::getShieldColor,ShieldTEBase::setShieldColor),new DefaultValue<>(VALUE_LIGHT,ShieldTEBase::isBlockLight,ShieldTEBase::setBlockLight)};
}",0.99637943519189
165592,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_DESTINATION,MatterBeamerTileEntity::getDestination,MatterBeamerTileEntity::setDestination)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_DESTINATION,MatterBeamerTileEntity::getDestination,MatterBeamerTileEntity::setDestination)};
}",0.9863013698630136
165593,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_AMOUNT,LevelEmitterTileEntity::getAmount,LevelEmitterTileEntity::setAmount),new DefaultValue<>(VALUE_OREDICT,LevelEmitterTileEntity::isOreDict,LevelEmitterTileEntity::setOreDict),new DefaultValue<>(VALUE_STARRED,LevelEmitterTileEntity::isStarred,LevelEmitterTileEntity::setStarred)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_AMOUNT,LevelEmitterTileEntity::getAmount,LevelEmitterTileEntity::setAmount),new DefaultValue<>(VALUE_OREDICT,LevelEmitterTileEntity::isOreDict,LevelEmitterTileEntity::setOreDict),new DefaultValue<>(VALUE_STARRED,LevelEmitterTileEntity::isStarred,LevelEmitterTileEntity::setStarred)};
}",0.9933065595716198
165594,"@Override public void select(Widget widget){
  BlockRender br=(BlockRender)widget;
  Object item=br.getRenderItem();
  if (item != null) {
    boolean shift=Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT);
    requestItem((ItemStack)item,shift ? 1 : -1);
  }
}","@Override public void select(Widget<?> widget){
  BlockRender br=(BlockRender)widget;
  Object item=br.getRenderItem();
  if (item != null) {
    boolean shift=Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT);
    requestItem((ItemStack)item,shift ? 1 : -1);
  }
}",0.9949409780775716
165595,"private Panel makeStoragePanel(Panel energyPanel){
  storageList=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget parent,    int index){
      getInventoryOnServer();
    }
    @Override public void doubleClick(    Widget parent,    int index){
      hilightSelectedContainer(index);
    }
  }
).setPropagateEventsToChildren(true);
  Slider storageListSlider=new Slider(mc,this).setDesiredWidth(10).setVertical().setScrollableName(""String_Node_Str"");
  return new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(1)).setLayoutHint(new PositionalLayout.PositionalHint(3,4,getStoragePanelWidth(),86 + 54)).setDesiredHeight(86 + 54).addChild(energyPanel).addChild(storageList).addChild(storageListSlider);
}","private Panel makeStoragePanel(Panel energyPanel){
  storageList=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget<?> parent,    int index){
      getInventoryOnServer();
    }
    @Override public void doubleClick(    Widget<?> parent,    int index){
      hilightSelectedContainer(index);
    }
  }
).setPropagateEventsToChildren(true);
  Slider storageListSlider=new Slider(mc,this).setDesiredWidth(10).setVertical().setScrollableName(""String_Node_Str"");
  return new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(1)).setLayoutHint(new PositionalLayout.PositionalHint(3,4,getStoragePanelWidth(),86 + 54)).setDesiredHeight(86 + 54).addChild(energyPanel).addChild(storageList).addChild(storageListSlider);
}",0.9963985594237696
165596,"private Pair<Panel,Integer> addItemToList(ItemStack item,WidgetList itemList,Pair<Panel,Integer> currentPos,int numcolumns,int spacing){
  Panel panel=currentPos.getKey();
  if (panel == null || currentPos.getValue() >= numcolumns) {
    panel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(spacing).setHorizontalMargin(1)).setDesiredHeight(12).setUserObject(new Integer(-1)).setDesiredHeight(16);
    currentPos=MutablePair.of(panel,0);
    itemList.addChild(panel);
  }
  BlockRender blockRender=new BlockRender(mc,this).setRenderItem(item).setUserObject(1).setOffsetX(-1).setOffsetY(-1).setHilightOnHover(true);
  blockRender.addSelectionEvent(new BlockRenderEvent(){
    @Override public void select(    Widget widget){
      BlockRender br=(BlockRender)widget;
      Object item=br.getRenderItem();
      if (item != null) {
        boolean shift=Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT);
        requestItem((ItemStack)item,shift ? 1 : -1);
      }
    }
    @Override public void doubleClick(    Widget widget){
    }
  }
);
  panel.addChild(blockRender);
  currentPos.setValue(currentPos.getValue() + 1);
  return currentPos;
}","private Pair<Panel,Integer> addItemToList(ItemStack item,WidgetList itemList,Pair<Panel,Integer> currentPos,int numcolumns,int spacing){
  Panel panel=currentPos.getKey();
  if (panel == null || currentPos.getValue() >= numcolumns) {
    panel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(spacing).setHorizontalMargin(1)).setDesiredHeight(12).setUserObject(new Integer(-1)).setDesiredHeight(16);
    currentPos=MutablePair.of(panel,0);
    itemList.addChild(panel);
  }
  BlockRender blockRender=new BlockRender(mc,this).setRenderItem(item).setUserObject(1).setOffsetX(-1).setOffsetY(-1).setHilightOnHover(true);
  blockRender.addSelectionEvent(new BlockRenderEvent(){
    @Override public void select(    Widget<?> widget){
      BlockRender br=(BlockRender)widget;
      Object item=br.getRenderItem();
      if (item != null) {
        boolean shift=Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT);
        requestItem((ItemStack)item,shift ? 1 : -1);
      }
    }
    @Override public void doubleClick(    Widget<?> widget){
    }
  }
);
  panel.addChild(blockRender);
  currentPos.setValue(currentPos.getValue() + 1);
  return currentPos;
}",0.9974916387959866
165597,"@Override public void doubleClick(Widget widget){
}","@Override public void doubleClick(Widget<?> widget){
}",0.9714285714285714
165598,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_EXPORT,StorageScannerTileEntity::isExportToCurrent,StorageScannerTileEntity::setExportToCurrent),new DefaultValue<>(VALUE_RADIUS,StorageScannerTileEntity::getRadius,StorageScannerTileEntity::setRadius)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_EXPORT,StorageScannerTileEntity::isExportToCurrent,StorageScannerTileEntity::setExportToCurrent),new DefaultValue<>(VALUE_RADIUS,StorageScannerTileEntity::getRadius,StorageScannerTileEntity::setRadius)};
}",0.9914821124361158
165599,"@Override public void select(Widget parent,int index){
  clearSelectedStatus();
  selectReceiverFromTransmitter();
}","@Override public void select(Widget<?> parent,int index){
  clearSelectedStatus();
  selectReceiverFromTransmitter();
}",0.9872340425531916
165600,"private Panel setupTransmitterPanel(){
  transmitterList=new WidgetList(mc,this).setName(""String_Node_Str"").setRowheight(18).setDesiredHeight(58).addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget parent,    int index){
      clearSelectedStatus();
      selectReceiverFromTransmitter();
    }
    @Override public void doubleClick(    Widget parent,    int index){
      hilightSelectedTransmitter(index);
    }
  }
);
  Slider transmitterSlider=new Slider(mc,this).setDesiredWidth(11).setDesiredHeight(58).setVertical().setScrollableName(""String_Node_Str"");
  return new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).addChildren(transmitterList,transmitterSlider).setDesiredHeight(64).setFilledBackground(0xff9e9e9e);
}","private Panel setupTransmitterPanel(){
  transmitterList=new WidgetList(mc,this).setName(""String_Node_Str"").setRowheight(18).setDesiredHeight(58).addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget<?> parent,    int index){
      clearSelectedStatus();
      selectReceiverFromTransmitter();
    }
    @Override public void doubleClick(    Widget<?> parent,    int index){
      hilightSelectedTransmitter(index);
    }
  }
);
  Slider transmitterSlider=new Slider(mc,this).setDesiredWidth(11).setDesiredHeight(58).setVertical().setScrollableName(""String_Node_Str"");
  return new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).addChildren(transmitterList,transmitterSlider).setDesiredHeight(64).setFilledBackground(0xff9e9e9e);
}",0.996268656716418
165601,"private Panel setupReceiverPanel(){
  receiverList=new WidgetList(mc,this).setName(""String_Node_Str"").setRowheight(14).setDesiredHeight(100).setPropagateEventsToChildren(true).addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget parent,    int index){
      clearSelectedStatus();
    }
    @Override public void doubleClick(    Widget parent,    int index){
      hilightSelectedReceiver(index);
    }
  }
);
  Slider receiverSlider=new Slider(mc,this).setDesiredWidth(11).setDesiredHeight(100).setVertical().setScrollableName(""String_Node_Str"");
  return new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).addChildren(receiverList,receiverSlider).setDesiredHeight(106).setFilledBackground(0xff9e9e9e);
}","private Panel setupReceiverPanel(){
  receiverList=new WidgetList(mc,this).setName(""String_Node_Str"").setRowheight(14).setDesiredHeight(100).setPropagateEventsToChildren(true).addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget<?> parent,    int index){
      clearSelectedStatus();
    }
    @Override public void doubleClick(    Widget<?> parent,    int index){
      hilightSelectedReceiver(index);
    }
  }
);
  Slider receiverSlider=new Slider(mc,this).setDesiredWidth(11).setDesiredHeight(100).setVertical().setScrollableName(""String_Node_Str"");
  return new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).addChildren(receiverList,receiverSlider).setDesiredHeight(106).setFilledBackground(0xff9e9e9e);
}",0.9961783439490446
165602,"@Override public void doubleClick(Widget parent,int index){
  hilightSelectedTransmitter(index);
}","@Override public void doubleClick(Widget<?> parent,int index){
  hilightSelectedTransmitter(index);
}",0.984924623115578
165603,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_NAME,MatterReceiverTileEntity::getName,MatterReceiverTileEntity::setName),new DefaultValue<>(VALUE_PRIVATE,MatterReceiverTileEntity::isPrivateAccess,MatterReceiverTileEntity::setPrivateAccess)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_NAME,MatterReceiverTileEntity::getName,MatterReceiverTileEntity::setName),new DefaultValue<>(VALUE_PRIVATE,MatterReceiverTileEntity::isPrivateAccess,MatterReceiverTileEntity::setPrivateAccess)};
}",0.9912126537785588
165604,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_NAME,MatterTransmitterTileEntity::getName,MatterTransmitterTileEntity::setName),new DefaultValue<>(VALUE_PRIVATE,MatterTransmitterTileEntity::isPrivateAccess,MatterTransmitterTileEntity::setPrivateAccess),new DefaultValue<>(VALUE_BEAM,MatterTransmitterTileEntity::isBeamHidden,MatterTransmitterTileEntity::setBeamHidden)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_NAME,MatterTransmitterTileEntity::getName,MatterTransmitterTileEntity::setName),new DefaultValue<>(VALUE_PRIVATE,MatterTransmitterTileEntity::isPrivateAccess,MatterTransmitterTileEntity::setPrivateAccess),new DefaultValue<>(VALUE_BEAM,MatterTransmitterTileEntity::isBeamHidden,MatterTransmitterTileEntity::setBeamHidden)};
}",0.993939393939394
165605,"@Override public void select(Widget parent,int index){
}","@Override public void select(Widget<?> parent,int index){
}",0.9739130434782608
165606,"public void initGui(final ModBase modBase,final SimpleNetworkWrapper network,final Minecraft mc,GenericGuiContainer<?> gui,BlockPos pos,CraftingGridProvider provider,int guiLeft,int guiTop,int xSize,int ySize){
  this.mc=mc;
  this.gui=gui;
  this.provider=provider;
  this.pos=pos;
  recipeList=new WidgetList(mc,gui).setLayoutHint(5,5,56,102);
  recipeList.addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget parent,    int index){
    }
    @Override public void doubleClick(    Widget parent,    int index){
      selectRecipe();
    }
  }
);
  craft1Button=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(29,183,14,10).setTooltips(""String_Node_Str"");
  craft4Button=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(45,183,14,10).setTooltips(""String_Node_Str"");
  craft8Button=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(29,195,14,10).setTooltips(""String_Node_Str"");
  craftSButton=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(45,195,14,10).setTooltips(""String_Node_Str"");
  storeButton=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(5,109,56,14).setTooltips(""String_Node_Str"");
  Panel sidePanel=new Panel(mc,gui).setLayout(new PositionalLayout()).addChildren(craft1Button,craft4Button,craft8Button,craftSButton,storeButton,recipeList);
  int sideLeft=guiLeft - CraftingGridInventory.GRID_WIDTH - 2;
  int sideTop=guiTop;
  sidePanel.setBounds(new Rectangle(sideLeft,sideTop,CraftingGridInventory.GRID_WIDTH,CraftingGridInventory.GRID_HEIGHT));
  sidePanel.setBackground(iconLocation);
  craftWindow=new Window(gui,sidePanel);
  craftWindow.event(""String_Node_Str"",(source,params) -> craft(1));
  craftWindow.event(""String_Node_Str"",(source,params) -> craft(4));
  craftWindow.event(""String_Node_Str"",(source,params) -> craft(8));
  craftWindow.event(""String_Node_Str"",(source,params) -> craft(-1));
  craftWindow.event(""String_Node_Str"",(source,params) -> store());
}","public void initGui(final ModBase modBase,final SimpleNetworkWrapper network,final Minecraft mc,GenericGuiContainer<?> gui,BlockPos pos,CraftingGridProvider provider,int guiLeft,int guiTop,int xSize,int ySize){
  this.mc=mc;
  this.gui=gui;
  this.provider=provider;
  this.pos=pos;
  recipeList=new WidgetList(mc,gui).setLayoutHint(5,5,56,102);
  recipeList.addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void select(    Widget<?> parent,    int index){
    }
    @Override public void doubleClick(    Widget<?> parent,    int index){
      selectRecipe();
    }
  }
);
  craft1Button=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(29,183,14,10).setTooltips(""String_Node_Str"");
  craft4Button=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(45,183,14,10).setTooltips(""String_Node_Str"");
  craft8Button=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(29,195,14,10).setTooltips(""String_Node_Str"");
  craftSButton=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(45,195,14,10).setTooltips(""String_Node_Str"");
  storeButton=new Button(mc,gui).setChannel(""String_Node_Str"").setText(""String_Node_Str"").setLayoutHint(5,109,56,14).setTooltips(""String_Node_Str"");
  Panel sidePanel=new Panel(mc,gui).setLayout(new PositionalLayout()).addChildren(craft1Button,craft4Button,craft8Button,craftSButton,storeButton,recipeList);
  int sideLeft=guiLeft - CraftingGridInventory.GRID_WIDTH - 2;
  int sideTop=guiTop;
  sidePanel.setBounds(new Rectangle(sideLeft,sideTop,CraftingGridInventory.GRID_WIDTH,CraftingGridInventory.GRID_HEIGHT));
  sidePanel.setBackground(iconLocation);
  craftWindow=new Window(gui,sidePanel);
  craftWindow.event(""String_Node_Str"",(source,params) -> craft(1));
  craftWindow.event(""String_Node_Str"",(source,params) -> craft(4));
  craftWindow.event(""String_Node_Str"",(source,params) -> craft(8));
  craftWindow.event(""String_Node_Str"",(source,params) -> craft(-1));
  craftWindow.event(""String_Node_Str"",(source,params) -> store());
}",0.99859287054409
165607,"@Override public void doubleClick(Widget parent,int index){
  selectRecipe();
}","@Override public void doubleClick(Widget<?> parent,int index){
  selectRecipe();
}",0.9813664596273292
165608,"@Override public void doubleClick(Widget parent,int index){
  hilightBlock(index);
}","@Override public void doubleClick(Widget<?> parent,int index){
  hilightBlock(index);
}",0.9824561403508772
165609,"@Override public void initGui(){
  super.initGui();
  list=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void doubleClick(    Widget parent,    int index){
      hilightBlock(index);
    }
  }
);
  listDirty=0;
  Slider listSlider=new Slider(mc,this).setDesiredWidth(11).setVertical().setScrollableName(""String_Node_Str"");
  Panel listPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).addChild(list).addChild(listSlider);
  showRfPerTick=new ToggleButton(mc,this).setCheckMarker(true).setText(""String_Node_Str"").setDesiredWidth(80).addButtonEvent(parent -> previousRfMillis=0).setDesiredHeight(14);
  filterTextField=new TextField(mc,this).setDesiredHeight(14).addTextEvent((parent,newText) -> {
    filter=filterTextField.getText();
    if (filter.trim().isEmpty()) {
      filter=null;
    }
    connectedBlocks=null;
  }
);
  Panel buttonPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(showRfPerTick).addChild(new Label(mc,this).setText(""String_Node_Str"")).addChild(filterTextField).setDesiredHeight(17);
  Panel toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout().setVerticalMargin(3)).addChild(listPanel).addChild(buttonPanel);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  serverConnectedBlocks=null;
}","@Override public void initGui(){
  super.initGui();
  list=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void doubleClick(    Widget<?> parent,    int index){
      hilightBlock(index);
    }
  }
);
  listDirty=0;
  Slider listSlider=new Slider(mc,this).setDesiredWidth(11).setVertical().setScrollableName(""String_Node_Str"");
  Panel listPanel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).addChild(list).addChild(listSlider);
  showRfPerTick=new ToggleButton(mc,this).setCheckMarker(true).setText(""String_Node_Str"").setDesiredWidth(80).addButtonEvent(parent -> previousRfMillis=0).setDesiredHeight(14);
  filterTextField=new TextField(mc,this).setDesiredHeight(14).addTextEvent((parent,newText) -> {
    filter=filterTextField.getText();
    if (filter.trim().isEmpty()) {
      filter=null;
    }
    connectedBlocks=null;
  }
);
  Panel buttonPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(showRfPerTick).addChild(new Label(mc,this).setText(""String_Node_Str"")).addChild(filterTextField).setDesiredHeight(17);
  Panel toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout().setVerticalMargin(3)).addChild(listPanel).addChild(buttonPanel);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  serverConnectedBlocks=null;
}",0.9989572471324296
165610,"@Override public void doubleClick(Widget parent,int index){
  teleport(index);
}","@Override public void doubleClick(Widget<?> parent,int index){
  teleport(index);
}",0.98159509202454
165611,"@Override public void initGui(){
  super.initGui();
  int k=(this.width - this.xSize) / 2;
  int l=(this.height - this.ySize) / 2;
  list=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void doubleClick(    Widget parent,    int index){
      teleport(index);
    }
  }
);
  Slider listSlider=new Slider(mc,this).setDesiredWidth(11).setVertical().setScrollableName(""String_Node_Str"");
  Panel toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).addChild(list).addChild(listSlider);
  toplevel.setBounds(new Rectangle(k,l,xSize,ySize));
  window=new Window(this,toplevel);
  serverDestinationList=null;
  destinationList=null;
  requestReceiversFromServer();
}","@Override public void initGui(){
  super.initGui();
  int k=(this.width - this.xSize) / 2;
  int l=(this.height - this.ySize) / 2;
  list=new WidgetList(mc,this).setName(""String_Node_Str"").addSelectionEvent(new DefaultSelectionEvent(){
    @Override public void doubleClick(    Widget<?> parent,    int index){
      teleport(index);
    }
  }
);
  Slider listSlider=new Slider(mc,this).setDesiredWidth(11).setVertical().setScrollableName(""String_Node_Str"");
  Panel toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new HorizontalLayout().setSpacing(1).setHorizontalMargin(3)).addChild(list).addChild(listSlider);
  toplevel.setBounds(new Rectangle(k,l,xSize,ySize));
  window=new Window(this,toplevel);
  serverDestinationList=null;
  destinationList=null;
  requestReceiversFromServer();
}",0.9981354878806712
165612,"private void renderModules(FontRenderer fontrenderer,ScreenTileEntity tileEntity,IClientScreenModule.TransformMode mode,List<IClientScreenModule> modules,Map<Integer,IModuleData> screenData,int size){
  float f3;
  float factor=size + 1.0f;
  int currenty=7;
  int moduleIndex=0;
  BlockPos pos=tileEntity.getPos();
  RayTraceResult mouseOver=Minecraft.getMinecraft().objectMouseOver;
  IClientScreenModule hitModule=null;
  ScreenTileEntity.ModuleRaytraceResult hit=null;
  IBlockState blockState=getWorld().getBlockState(pos);
  Block block=blockState.getBlock();
  if (block != ScreenSetup.screenBlock && block != ScreenSetup.creativeScreenBlock && block != ScreenSetup.screenHitBlock) {
    return;
  }
  if (mouseOver != null) {
    if (mouseOver.sideHit == blockState.getValue(BaseBlock.FACING)) {
      double xx=mouseOver.hitVec.x - pos.getX();
      double yy=mouseOver.hitVec.y - pos.getY();
      double zz=mouseOver.hitVec.z - pos.getZ();
      EnumFacing horizontalFacing=blockState.getValue(ScreenBlock.HORIZONTAL_FACING);
      hit=tileEntity.getHitModule(xx,yy,zz,mouseOver.sideHit,horizontalFacing);
      if (hit != null) {
        hitModule=modules.get(hit.getModuleIndex());
      }
      tileEntity.focusModuleClient(xx,yy,zz,mouseOver.sideHit,horizontalFacing);
    }
  }
  if (tileEntity.isBright()) {
    Minecraft.getMinecraft().entityRenderer.disableLightmap();
  }
  for (  IClientScreenModule module : modules) {
    if (module != null) {
      int height=module.getHeight();
      if (currenty + height <= 124) {
        if (module.getTransformMode() != mode) {
          if (mode != IClientScreenModule.TransformMode.NONE) {
            GlStateManager.popMatrix();
          }
          GlStateManager.pushMatrix();
          mode=module.getTransformMode();
switch (mode) {
case TEXT:
            GlStateManager.translate(-0.5F,0.5F,0.07F);
          f3=0.0075F;
        GlStateManager.scale(f3 * factor,-f3 * factor,f3);
      GL11.glNormal3f(0.0F,0.0F,-1.0F);
    GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  break;
case TEXTLARGE:
GlStateManager.translate(-0.5F,0.5F,0.07F);
f3=0.0075F * 2;
GlStateManager.scale(f3 * factor,-f3 * factor,f3);
GL11.glNormal3f(0.0F,0.0F,-1.0F);
GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
break;
case ITEM:
break;
default :
break;
}
}
IModuleData data=screenData.get(moduleIndex);
try {
int hitx=-1;
int hity=-1;
if (module == hitModule) {
hitx=hit.getX();
hity=hit.getY() - hit.getCurrenty();
}
TrueTypeFont font=null;
switch (tileEntity.getTrueTypeMode()) {
case -1:
break;
case 1:
font=ClientProxy.font;
break;
case 0:
font=ScreenConfiguration.useTruetype ? ClientProxy.font : null;
break;
}
ModuleRenderInfo renderInfo=new ModuleRenderInfo(factor,pos,hitx,hity,font);
module.render(clientScreenModuleHelper,fontrenderer,currenty,data,renderInfo);
}
 catch (ClassCastException e) {
}
currenty+=height;
}
}
moduleIndex++;
}
if (tileEntity.isBright()) {
Minecraft.getMinecraft().entityRenderer.enableLightmap();
}
if (mode != IClientScreenModule.TransformMode.NONE) {
GlStateManager.popMatrix();
}
}","private void renderModules(FontRenderer fontrenderer,ScreenTileEntity tileEntity,IClientScreenModule.TransformMode mode,List<IClientScreenModule<?>> modules,Map<Integer,IModuleData> screenData,int size){
  float f3;
  float factor=size + 1.0f;
  int currenty=7;
  int moduleIndex=0;
  BlockPos pos=tileEntity.getPos();
  RayTraceResult mouseOver=Minecraft.getMinecraft().objectMouseOver;
  IClientScreenModule<?> hitModule=null;
  ScreenTileEntity.ModuleRaytraceResult hit=null;
  IBlockState blockState=getWorld().getBlockState(pos);
  Block block=blockState.getBlock();
  if (block != ScreenSetup.screenBlock && block != ScreenSetup.creativeScreenBlock && block != ScreenSetup.screenHitBlock) {
    return;
  }
  if (mouseOver != null) {
    if (mouseOver.sideHit == blockState.getValue(BaseBlock.FACING)) {
      double xx=mouseOver.hitVec.x - pos.getX();
      double yy=mouseOver.hitVec.y - pos.getY();
      double zz=mouseOver.hitVec.z - pos.getZ();
      EnumFacing horizontalFacing=blockState.getValue(ScreenBlock.HORIZONTAL_FACING);
      hit=tileEntity.getHitModule(xx,yy,zz,mouseOver.sideHit,horizontalFacing);
      if (hit != null) {
        hitModule=modules.get(hit.getModuleIndex());
      }
      tileEntity.focusModuleClient(xx,yy,zz,mouseOver.sideHit,horizontalFacing);
    }
  }
  if (tileEntity.isBright()) {
    Minecraft.getMinecraft().entityRenderer.disableLightmap();
  }
  for (  IClientScreenModule module : modules) {
    if (module != null) {
      int height=module.getHeight();
      if (currenty + height <= 124) {
        if (module.getTransformMode() != mode) {
          if (mode != IClientScreenModule.TransformMode.NONE) {
            GlStateManager.popMatrix();
          }
          GlStateManager.pushMatrix();
          mode=module.getTransformMode();
switch (mode) {
case TEXT:
            GlStateManager.translate(-0.5F,0.5F,0.07F);
          f3=0.0075F;
        GlStateManager.scale(f3 * factor,-f3 * factor,f3);
      GL11.glNormal3f(0.0F,0.0F,-1.0F);
    GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  break;
case TEXTLARGE:
GlStateManager.translate(-0.5F,0.5F,0.07F);
f3=0.0075F * 2;
GlStateManager.scale(f3 * factor,-f3 * factor,f3);
GL11.glNormal3f(0.0F,0.0F,-1.0F);
GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
break;
case ITEM:
break;
default :
break;
}
}
IModuleData data=screenData.get(moduleIndex);
try {
int hitx=-1;
int hity=-1;
if (module == hitModule) {
hitx=hit.getX();
hity=hit.getY() - hit.getCurrenty();
}
TrueTypeFont font=null;
switch (tileEntity.getTrueTypeMode()) {
case -1:
break;
case 1:
font=ClientProxy.font;
break;
case 0:
font=ScreenConfiguration.useTruetype ? ClientProxy.font : null;
break;
}
ModuleRenderInfo renderInfo=new ModuleRenderInfo(factor,pos,hitx,hity,font);
module.render(clientScreenModuleHelper,fontrenderer,currenty,data,renderInfo);
}
 catch (ClassCastException e) {
}
currenty+=height;
}
}
moduleIndex++;
}
if (tileEntity.isBright()) {
Minecraft.getMinecraft().entityRenderer.enableLightmap();
}
if (mode != IClientScreenModule.TransformMode.NONE) {
GlStateManager.popMatrix();
}
}",0.9990215264187868
165613,"@Override public void render(ScreenTileEntity tileEntity,double x,double y,double z,float partialTicks,int destroyStage,float alpha){
  float xRotation=0.0F, yRotation=0.0F;
  EnumFacing facing=EnumFacing.SOUTH, horizontalFacing=EnumFacing.SOUTH;
  if (tileEntity != null) {
    IBlockState state=Minecraft.getMinecraft().world.getBlockState(tileEntity.getPos());
    if (state.getBlock() instanceof ScreenBlock) {
      facing=state.getValue(BaseBlock.FACING);
      horizontalFacing=state.getValue(ScreenBlock.HORIZONTAL_FACING);
    }
 else {
      return;
    }
  }
  GlStateManager.pushMatrix();
switch (horizontalFacing) {
case NORTH:
    yRotation=-180.0F;
  break;
case WEST:
yRotation=-90.0F;
break;
case EAST:
yRotation=90.0F;
}
switch (facing) {
case DOWN:
xRotation=90.0F;
break;
case UP:
xRotation=-90.0F;
}
GlStateManager.translate((float)x + 0.5F,(float)y + 0.5F,(float)z + 0.5F);
GlStateManager.rotate(yRotation,0.0F,1.0F,0.0F);
GlStateManager.rotate(xRotation,1.0F,0.0F,0.0F);
GlStateManager.translate(0.0F,0.0F,-0.4375F);
if (tileEntity == null) {
GlStateManager.disableLighting();
renderScreenBoard(0,0);
}
 else if (!tileEntity.isTransparent()) {
GlStateManager.disableLighting();
renderScreenBoard(tileEntity.getSize(),tileEntity.getColor());
}
if (tileEntity != null && tileEntity.isRenderable()) {
FontRenderer fontrenderer=this.getFontRenderer();
IClientScreenModule.TransformMode mode=IClientScreenModule.TransformMode.NONE;
GlStateManager.depthMask(false);
GlStateManager.disableLighting();
Map<Integer,IModuleData> screenData=updateScreenData(tileEntity);
List<IClientScreenModule> modules=tileEntity.getClientScreenModules();
if (tileEntity.isShowHelp()) {
modules=ScreenTileEntity.getHelpingScreenModules();
}
renderModules(fontrenderer,tileEntity,mode,modules,screenData,tileEntity.getSize());
}
GlStateManager.enableLighting();
GlStateManager.depthMask(true);
GlStateManager.popMatrix();
}","@Override public void render(ScreenTileEntity tileEntity,double x,double y,double z,float partialTicks,int destroyStage,float alpha){
  float xRotation=0.0F, yRotation=0.0F;
  EnumFacing facing=EnumFacing.SOUTH, horizontalFacing=EnumFacing.SOUTH;
  if (tileEntity != null) {
    IBlockState state=Minecraft.getMinecraft().world.getBlockState(tileEntity.getPos());
    if (state.getBlock() instanceof ScreenBlock) {
      facing=state.getValue(BaseBlock.FACING);
      horizontalFacing=state.getValue(ScreenBlock.HORIZONTAL_FACING);
    }
 else {
      return;
    }
  }
  GlStateManager.pushMatrix();
switch (horizontalFacing) {
case NORTH:
    yRotation=-180.0F;
  break;
case WEST:
yRotation=-90.0F;
break;
case EAST:
yRotation=90.0F;
}
switch (facing) {
case DOWN:
xRotation=90.0F;
break;
case UP:
xRotation=-90.0F;
}
GlStateManager.translate((float)x + 0.5F,(float)y + 0.5F,(float)z + 0.5F);
GlStateManager.rotate(yRotation,0.0F,1.0F,0.0F);
GlStateManager.rotate(xRotation,1.0F,0.0F,0.0F);
GlStateManager.translate(0.0F,0.0F,-0.4375F);
if (tileEntity == null) {
GlStateManager.disableLighting();
renderScreenBoard(0,0);
}
 else if (!tileEntity.isTransparent()) {
GlStateManager.disableLighting();
renderScreenBoard(tileEntity.getSize(),tileEntity.getColor());
}
if (tileEntity != null && tileEntity.isRenderable()) {
FontRenderer fontrenderer=this.getFontRenderer();
IClientScreenModule.TransformMode mode=IClientScreenModule.TransformMode.NONE;
GlStateManager.depthMask(false);
GlStateManager.disableLighting();
Map<Integer,IModuleData> screenData=updateScreenData(tileEntity);
List<IClientScreenModule<?>> modules=tileEntity.getClientScreenModules();
if (tileEntity.isShowHelp()) {
modules=ScreenTileEntity.getHelpingScreenModules();
}
renderModules(fontrenderer,tileEntity,mode,modules,screenData,tileEntity.getSize());
}
GlStateManager.enableLighting();
GlStateManager.depthMask(true);
GlStateManager.popMatrix();
}",0.9992193598750976
165614,"private void checkStateServer(){
  if (clickedModules.isEmpty()) {
    return;
  }
  List<ActivatedModule> newClickedModules=new ArrayList<>();
  for (  ActivatedModule cm : clickedModules) {
    cm.ticks--;
    if (cm.ticks > 0) {
      newClickedModules.add(cm);
    }
 else {
      List<IScreenModule> modules=getScreenModules();
      if (cm.module < modules.size()) {
        ItemStack itemStack=inventoryHelper.getStackInSlot(cm.module);
        IScreenModule module=modules.get(cm.module);
        module.mouseClick(getWorld(),cm.x,cm.y,false,null);
        if (module instanceof IScreenModuleUpdater) {
          NBTTagCompound newCompound=((IScreenModuleUpdater)module).update(itemStack.getTagCompound(),getWorld(),null);
          if (newCompound != null) {
            itemStack.setTagCompound(newCompound);
            markDirtyClient();
          }
        }
      }
    }
  }
  clickedModules=newClickedModules;
}","private void checkStateServer(){
  if (clickedModules.isEmpty()) {
    return;
  }
  List<ActivatedModule> newClickedModules=new ArrayList<>();
  for (  ActivatedModule cm : clickedModules) {
    cm.ticks--;
    if (cm.ticks > 0) {
      newClickedModules.add(cm);
    }
 else {
      List<IScreenModule> modules=getScreenModules();
      if (cm.module < modules.size()) {
        ItemStack itemStack=inventoryHelper.getStackInSlot(cm.module);
        IScreenModule<?> module=modules.get(cm.module);
        module.mouseClick(getWorld(),cm.x,cm.y,false,null);
        if (module instanceof IScreenModuleUpdater) {
          NBTTagCompound newCompound=((IScreenModuleUpdater)module).update(itemStack.getTagCompound(),getWorld(),null);
          if (newCompound != null) {
            itemStack.setTagCompound(newCompound);
            markDirtyClient();
          }
        }
      }
    }
  }
  clickedModules=newClickedModules;
}",0.9983844911147012
165615,"public List<IScreenModule> getScreenModules(){
  if (screenModules == null) {
    totalRfPerTick=0;
    controllerNeededInCreative=false;
    screenModules=new ArrayList<>();
    for (int i=0; i < inventoryHelper.getCount(); i++) {
      ItemStack itemStack=inventoryHelper.getStackInSlot(i);
      if (!itemStack.isEmpty() && ScreenBlock.hasModuleProvider(itemStack)) {
        IModuleProvider moduleProvider=ScreenBlock.getModuleProvider(itemStack);
        IScreenModule screenModule;
        try {
          screenModule=moduleProvider.getServerScreenModule().newInstance();
        }
 catch (        InstantiationException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
catch (        IllegalAccessException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
        screenModule.setupFromNBT(itemStack.getTagCompound(),getWorld().provider.getDimension(),getPos());
        screenModules.add(screenModule);
        totalRfPerTick+=screenModule.getRfPerTick();
        if (screenModule.needsController())         controllerNeededInCreative=true;
        if (screenModule instanceof ComputerScreenModule) {
          ComputerScreenModule computerScreenModule=(ComputerScreenModule)screenModule;
          String tag=computerScreenModule.getTag();
          if (!computerModules.containsKey(tag)) {
            computerModules.put(tag,new ArrayList<ComputerScreenModule>());
          }
          computerModules.get(tag).add(computerScreenModule);
        }
      }
 else {
        screenModules.add(null);
      }
    }
  }
  return screenModules;
}","public List<IScreenModule> getScreenModules(){
  if (screenModules == null) {
    totalRfPerTick=0;
    controllerNeededInCreative=false;
    screenModules=new ArrayList<>();
    for (int i=0; i < inventoryHelper.getCount(); i++) {
      ItemStack itemStack=inventoryHelper.getStackInSlot(i);
      if (!itemStack.isEmpty() && ScreenBlock.hasModuleProvider(itemStack)) {
        IModuleProvider moduleProvider=ScreenBlock.getModuleProvider(itemStack);
        IScreenModule<?> screenModule;
        try {
          screenModule=moduleProvider.getServerScreenModule().newInstance();
        }
 catch (        InstantiationException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
catch (        IllegalAccessException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
        screenModule.setupFromNBT(itemStack.getTagCompound(),getWorld().provider.getDimension(),getPos());
        screenModules.add(screenModule);
        totalRfPerTick+=screenModule.getRfPerTick();
        if (screenModule.needsController())         controllerNeededInCreative=true;
        if (screenModule instanceof ComputerScreenModule) {
          ComputerScreenModule computerScreenModule=(ComputerScreenModule)screenModule;
          String tag=computerScreenModule.getTag();
          if (!computerModules.containsKey(tag)) {
            computerModules.put(tag,new ArrayList<ComputerScreenModule>());
          }
          computerModules.get(tag).add(computerScreenModule);
        }
      }
 else {
        screenModules.add(null);
      }
    }
  }
  return screenModules;
}",0.9990766389658357
165616,"public ModuleRaytraceResult getHitModule(double hitX,double hitY,double hitZ,EnumFacing side,EnumFacing horizontalFacing){
  ModuleRaytraceResult result;
  float factor=size + 1.0f;
  float dx=0, dy=0;
switch (side) {
case NORTH:
    dx=(float)((1.0 - hitX) / factor);
  dy=(float)((1.0 - hitY) / factor);
break;
case SOUTH:
dx=(float)(hitX / factor);
dy=(float)((1.0 - hitY) / factor);
break;
case WEST:
dx=(float)(hitZ / factor);
dy=(float)((1.0 - hitY) / factor);
break;
case EAST:
dx=(float)((1.0 - hitZ) / factor);
dy=(float)((1.0 - hitY) / factor);
break;
case UP:
switch (horizontalFacing) {
case NORTH:
dx=(float)((1.0 - hitX) / factor);
dy=(float)((1.0 - hitZ) / factor);
break;
case SOUTH:
dx=(float)(hitX / factor);
dy=(float)(hitZ / factor);
break;
case WEST:
dx=(float)(hitZ / factor);
dy=(float)((1.0 - hitX) / factor);
break;
case EAST:
dx=(float)((1.0 - hitZ) / factor);
dy=(float)(hitX / factor);
}
break;
case DOWN:
switch (horizontalFacing) {
case NORTH:
dx=(float)((1.0 - hitX) / factor);
dy=(float)(hitZ / factor);
break;
case SOUTH:
dx=(float)(hitX / factor);
dy=(float)((1.0 - hitZ) / factor);
break;
case WEST:
dx=(float)(hitZ / factor);
dy=(float)(hitX / factor);
break;
case EAST:
dx=(float)((1.0 - hitZ) / factor);
dy=(float)((1.0 - hitX) / factor);
}
break;
default :
return null;
}
int x=(int)(dx * 128);
int y=(int)(dy * 128);
int currenty=7;
int moduleIndex=0;
List<IClientScreenModule> clientScreenModules=getClientScreenModules();
for (IClientScreenModule module : clientScreenModules) {
if (module != null) {
int height=module.getHeight();
if (currenty + height <= 124) {
if (currenty <= y && y < (currenty + height)) {
break;
}
currenty+=height;
}
}
moduleIndex++;
}
if (moduleIndex >= clientScreenModules.size()) {
return null;
}
result=new ModuleRaytraceResult(moduleIndex,x,y,currenty);
return result;
}","public ModuleRaytraceResult getHitModule(double hitX,double hitY,double hitZ,EnumFacing side,EnumFacing horizontalFacing){
  ModuleRaytraceResult result;
  float factor=size + 1.0f;
  float dx=0, dy=0;
switch (side) {
case NORTH:
    dx=(float)((1.0 - hitX) / factor);
  dy=(float)((1.0 - hitY) / factor);
break;
case SOUTH:
dx=(float)(hitX / factor);
dy=(float)((1.0 - hitY) / factor);
break;
case WEST:
dx=(float)(hitZ / factor);
dy=(float)((1.0 - hitY) / factor);
break;
case EAST:
dx=(float)((1.0 - hitZ) / factor);
dy=(float)((1.0 - hitY) / factor);
break;
case UP:
switch (horizontalFacing) {
case NORTH:
dx=(float)((1.0 - hitX) / factor);
dy=(float)((1.0 - hitZ) / factor);
break;
case SOUTH:
dx=(float)(hitX / factor);
dy=(float)(hitZ / factor);
break;
case WEST:
dx=(float)(hitZ / factor);
dy=(float)((1.0 - hitX) / factor);
break;
case EAST:
dx=(float)((1.0 - hitZ) / factor);
dy=(float)(hitX / factor);
}
break;
case DOWN:
switch (horizontalFacing) {
case NORTH:
dx=(float)((1.0 - hitX) / factor);
dy=(float)(hitZ / factor);
break;
case SOUTH:
dx=(float)(hitX / factor);
dy=(float)((1.0 - hitZ) / factor);
break;
case WEST:
dx=(float)(hitZ / factor);
dy=(float)(hitX / factor);
break;
case EAST:
dx=(float)((1.0 - hitZ) / factor);
dy=(float)((1.0 - hitX) / factor);
}
break;
default :
return null;
}
int x=(int)(dx * 128);
int y=(int)(dy * 128);
int currenty=7;
int moduleIndex=0;
List<IClientScreenModule<?>> clientScreenModules=getClientScreenModules();
for (IClientScreenModule<?> module : clientScreenModules) {
if (module != null) {
int height=module.getHeight();
if (currenty + height <= 124) {
if (currenty <= y && y < (currenty + height)) {
break;
}
currenty+=height;
}
}
moduleIndex++;
}
if (moduleIndex >= clientScreenModules.size()) {
return null;
}
result=new ModuleRaytraceResult(moduleIndex,x,y,currenty);
return result;
}",0.9983731019522776
165617,"private void checkStateClient(){
  if (clickedModules.isEmpty()) {
    return;
  }
  List<ActivatedModule> newClickedModules=new ArrayList<>();
  for (  ActivatedModule cm : clickedModules) {
    cm.ticks--;
    if (cm.ticks > 0) {
      newClickedModules.add(cm);
    }
 else {
      List<IClientScreenModule> modules=getClientScreenModules();
      if (cm.module < modules.size()) {
        modules.get(cm.module).mouseClick(getWorld(),cm.x,cm.y,false);
      }
    }
  }
  clickedModules=newClickedModules;
}","private void checkStateClient(){
  if (clickedModules.isEmpty()) {
    return;
  }
  List<ActivatedModule> newClickedModules=new ArrayList<>();
  for (  ActivatedModule cm : clickedModules) {
    cm.ticks--;
    if (cm.ticks > 0) {
      newClickedModules.add(cm);
    }
 else {
      List<IClientScreenModule<?>> modules=getClientScreenModules();
      if (cm.module < modules.size()) {
        modules.get(cm.module).mouseClick(getWorld(),cm.x,cm.y,false);
      }
    }
  }
  clickedModules=newClickedModules;
}",0.9970731707317072
165618,"@Override public TypedMap executeWithResult(String command,TypedMap args){
  TypedMap rc=super.executeWithResult(command,args);
  if (rc != null) {
    return rc;
  }
  if (CMD_SCREEN_INFO.equals(command)) {
    IScreenModule module=getHoveringModule();
    List<String> info=Collections.emptyList();
    if (module instanceof ITooltipInfo) {
      info=((ITooltipInfo)module).getInfo(world,getHoveringX(),getHoveringY());
    }
    return TypedMap.builder().put(PARAM_INFO,info).build();
  }
  return null;
}","@Override public TypedMap executeWithResult(String command,TypedMap args){
  TypedMap rc=super.executeWithResult(command,args);
  if (rc != null) {
    return rc;
  }
  if (CMD_SCREEN_INFO.equals(command)) {
    IScreenModule<?> module=getHoveringModule();
    List<String> info=Collections.emptyList();
    if (module instanceof ITooltipInfo) {
      info=((ITooltipInfo)module).getInfo(world,getHoveringX(),getHoveringY());
    }
    return TypedMap.builder().put(PARAM_INFO,info).build();
  }
  return null;
}",0.9970617042115572
165619,"public IScreenModule getHoveringModule(){
  if (hoveringModule == -1) {
    return null;
  }
  getScreenModules();
  if (hoveringModule >= 0 && hoveringModule < screenModules.size()) {
    return screenModules.get(hoveringModule);
  }
  return null;
}","public IScreenModule<?> getHoveringModule(){
  if (hoveringModule == -1) {
    return null;
  }
  getScreenModules();
  if (hoveringModule >= 0 && hoveringModule < screenModules.size()) {
    return screenModules.get(hoveringModule);
  }
  return null;
}",0.994059405940594
165620,"private void hitScreenServer(EntityPlayer player,int x,int y,int module){
  List<IScreenModule> screenModules=getScreenModules();
  IScreenModule screenModule=screenModules.get(module);
  if (screenModule != null) {
    ItemStack itemStack=inventoryHelper.getStackInSlot(module);
    screenModule.mouseClick(getWorld(),x,y,true,player);
    if (screenModule instanceof IScreenModuleUpdater) {
      NBTTagCompound newCompound=((IScreenModuleUpdater)screenModule).update(itemStack.getTagCompound(),getWorld(),player);
      if (newCompound != null) {
        itemStack.setTagCompound(newCompound);
        markDirtyClient();
      }
    }
    clickedModules.add(new ActivatedModule(module,5,x,y));
  }
}","private void hitScreenServer(EntityPlayer player,int x,int y,int module){
  List<IScreenModule> screenModules=getScreenModules();
  IScreenModule<?> screenModule=screenModules.get(module);
  if (screenModule != null) {
    ItemStack itemStack=inventoryHelper.getStackInSlot(module);
    screenModule.mouseClick(getWorld(),x,y,true,player);
    if (screenModule instanceof IScreenModuleUpdater) {
      NBTTagCompound newCompound=((IScreenModuleUpdater)screenModule).update(itemStack.getTagCompound(),getWorld(),player);
      if (newCompound != null) {
        itemStack.setTagCompound(newCompound);
        markDirtyClient();
      }
    }
    clickedModules.add(new ActivatedModule(module,5,x,y));
  }
}",0.997867803837953
165621,"public static List<IClientScreenModule> getHelpingScreenModules(){
  if (helpingScreenModules == null) {
    helpingScreenModules=new ArrayList<>();
    addLine(""String_Node_Str"",0x7799ff,true);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
  }
  return helpingScreenModules;
}","public static List<IClientScreenModule<?>> getHelpingScreenModules(){
  if (helpingScreenModules == null) {
    helpingScreenModules=new ArrayList<>();
    addLine(""String_Node_Str"",0x7799ff,true);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
    addLine(""String_Node_Str"",0xffffff,false);
  }
  return helpingScreenModules;
}",0.9975349219391948
165622,"public Map<Integer,IModuleData> getScreenData(long millis){
  Map<Integer,IModuleData> map=new HashMap<>();
  List<IScreenModule> screenModules=getScreenModules();
  int moduleIndex=0;
  for (  IScreenModule module : screenModules) {
    if (module != null) {
      IModuleData data=module.getData(screenDataHelper,getWorld(),millis);
      if (data != null) {
        map.put(moduleIndex,data);
      }
    }
    moduleIndex++;
  }
  return map;
}","public Map<Integer,IModuleData> getScreenData(long millis){
  Map<Integer,IModuleData> map=new HashMap<>();
  List<IScreenModule> screenModules=getScreenModules();
  int moduleIndex=0;
  for (  IScreenModule<?> module : screenModules) {
    if (module != null) {
      IModuleData data=module.getData(screenDataHelper,getWorld(),millis);
      if (data != null) {
        map.put(moduleIndex,data);
      }
    }
    moduleIndex++;
  }
  return map;
}",0.996662958843159
165623,"public void hitScreenClient(double hitX,double hitY,double hitZ,EnumFacing side,EnumFacing horizontalFacing){
  ModuleRaytraceResult result=getHitModule(hitX,hitY,hitZ,side,horizontalFacing);
  if (result == null) {
    return;
  }
  List<IClientScreenModule> modules=getClientScreenModules();
  int module=result.getModuleIndex();
  if (isActivated(module)) {
    return;
  }
  modules.get(module).mouseClick(getWorld(),result.getX(),result.getY() - result.getCurrenty(),true);
  clickedModules.add(new ActivatedModule(module,3,result.getX(),result.getY()));
  RFToolsMessages.INSTANCE.sendToServer(new PacketServerCommandTyped(getPos(),CMD_CLICK,TypedMap.builder().put(PARAM_X,result.getX()).put(PARAM_Y,result.getY() - result.getCurrenty()).put(PARAM_MODULE,module).build()));
}","public void hitScreenClient(double hitX,double hitY,double hitZ,EnumFacing side,EnumFacing horizontalFacing){
  ModuleRaytraceResult result=getHitModule(hitX,hitY,hitZ,side,horizontalFacing);
  if (result == null) {
    return;
  }
  List<IClientScreenModule<?>> modules=getClientScreenModules();
  int module=result.getModuleIndex();
  if (isActivated(module)) {
    return;
  }
  modules.get(module).mouseClick(getWorld(),result.getX(),result.getY() - result.getCurrenty(),true);
  clickedModules.add(new ActivatedModule(module,3,result.getX(),result.getY()));
  RFToolsMessages.INSTANCE.sendToServer(new PacketServerCommandTyped(getPos(),CMD_CLICK,TypedMap.builder().put(PARAM_X,result.getX()).put(PARAM_Y,result.getY() - result.getCurrenty()).put(PARAM_MODULE,module).build()));
}",0.9980830670926516
165624,"public List<IClientScreenModule> getClientScreenModules(){
  if (clientScreenModules == null) {
    needsServerData=false;
    showHelp=true;
    clientScreenModules=new ArrayList<>();
    for (int i=0; i < inventoryHelper.getCount(); i++) {
      ItemStack itemStack=inventoryHelper.getStackInSlot(i);
      if (!itemStack.isEmpty() && ScreenBlock.hasModuleProvider(itemStack)) {
        IModuleProvider moduleProvider=ScreenBlock.getModuleProvider(itemStack);
        IClientScreenModule clientScreenModule;
        try {
          clientScreenModule=moduleProvider.getClientScreenModule().newInstance();
        }
 catch (        InstantiationException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
catch (        IllegalAccessException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
        clientScreenModule.setupFromNBT(itemStack.getTagCompound(),getWorld().provider.getDimension(),getPos());
        clientScreenModules.add(clientScreenModule);
        if (clientScreenModule.needsServerData()) {
          needsServerData=true;
        }
        showHelp=false;
      }
 else {
        clientScreenModules.add(null);
      }
    }
  }
  return clientScreenModules;
}","public List<IClientScreenModule<?>> getClientScreenModules(){
  if (clientScreenModules == null) {
    needsServerData=false;
    showHelp=true;
    clientScreenModules=new ArrayList<>();
    for (int i=0; i < inventoryHelper.getCount(); i++) {
      ItemStack itemStack=inventoryHelper.getStackInSlot(i);
      if (!itemStack.isEmpty() && ScreenBlock.hasModuleProvider(itemStack)) {
        IModuleProvider moduleProvider=ScreenBlock.getModuleProvider(itemStack);
        IClientScreenModule<?> clientScreenModule;
        try {
          clientScreenModule=moduleProvider.getClientScreenModule().newInstance();
        }
 catch (        InstantiationException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
catch (        IllegalAccessException e) {
          Logging.logError(""String_Node_Str"",e);
          continue;
        }
        clientScreenModule.setupFromNBT(itemStack.getTagCompound(),getWorld().provider.getDimension(),getPos());
        clientScreenModules.add(clientScreenModule);
        if (clientScreenModule.needsServerData()) {
          needsServerData=true;
        }
        showHelp=false;
      }
 else {
        clientScreenModules.add(null);
      }
    }
  }
  return clientScreenModules;
}",0.997605746209098
165625,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  drawWindow();
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  drawWindow();
}",0.9855670103092784
165626,"@Override protected void drawGuiContainerBackgroundLayer(float v,int x,int y){
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  drawGhostSlots();
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int x,int y){
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  drawGhostSlots();
}",0.9866156787762906
165627,"public void checkStateServer(){
  tickCounter++;
  ticks--;
  if (ticks < 0) {
    lastRfGained=rfGained;
    lastRfLost=rfLost;
    lastRfPerTick=(rfGained - rfLost) / 100;
    lastPearlsLost=pearlsLost;
    lastPearlsLaunched=pearlsLaunched;
    lastChargeCounter=chargeCounter;
    lastPearlArrivedAt=pearlArrivedAt;
    ticks=100;
    rfGained=0;
    rfLost=0;
    pearlsLaunched=0;
    pearlsLost=0;
    chargeCounter=0;
    pearlArrivedAt=-2;
  }
  handlePearls();
  handleSendingEnergy();
  if (chargingMode == CHARGE_HOLDING) {
    if (random.nextInt(1000) <= EndergenicConfiguration.chanceLost) {
      log(""String_Node_Str"");
      discardPearl(""String_Node_Str"");
    }
  }
  boolean pulse=(powerLevel > 0) && !prevIn;
  prevIn=powerLevel > 0;
  if (pulse) {
    if (chargingMode == CHARGE_IDLE) {
      log(""String_Node_Str"");
      startCharging();
      return;
    }
 else     if (chargingMode == CHARGE_HOLDING) {
      log(""String_Node_Str"");
      firePearl();
      return;
    }
  }
  if (chargingMode == CHARGE_IDLE) {
    return;
  }
  if (chargingMode == CHARGE_HOLDING) {
    int rf=EndergenicConfiguration.rfToHoldPearl;
    rf=(int)(rf * (3.0f - getInfusedFactor()) / 3.0f);
    int rfStored=getEnergyStored();
    if (rfStored < rf) {
      log(""String_Node_Str"" + rfStored + ""String_Node_Str""+ rf+ ""String_Node_Str"");
      discardPearl(""String_Node_Str"");
    }
 else {
      int rfExtracted=storage.extractEnergy(rf,false);
      log(""String_Node_Str"" + rfExtracted + ""String_Node_Str"");
      rfLost+=rfExtracted;
    }
    return;
  }
  markDirtyQuick();
  chargingMode++;
  if (chargingMode >= 16) {
    log(""String_Node_Str"");
    chargingMode=CHARGE_IDLE;
  }
}","public void checkStateServer(){
  tickCounter++;
  ticks--;
  if (ticks < 0) {
    lastRfGained=rfGained;
    lastRfLost=rfLost;
    lastRfPerTick=(rfGained - rfLost) / 100;
    lastPearlsLost=pearlsLost;
    lastPearlsLaunched=pearlsLaunched;
    lastChargeCounter=chargeCounter;
    lastPearlArrivedAt=pearlArrivedAt;
    ticks=100;
    rfGained=0;
    rfLost=0;
    pearlsLaunched=0;
    pearlsLost=0;
    chargeCounter=0;
    pearlArrivedAt=-2;
  }
  handlePearls();
  handleSendingEnergy();
  if (chargingMode == CHARGE_HOLDING) {
    if (random.nextInt(1000) <= EndergenicConfiguration.chanceLost) {
      log(""String_Node_Str"");
      discardPearl(""String_Node_Str"");
    }
  }
  boolean pulse=(powerLevel > 0) && !prevIn;
  prevIn=powerLevel > 0;
  if (pulse) {
    if (chargingMode == CHARGE_IDLE) {
      log(""String_Node_Str"");
      startCharging();
      return;
    }
 else     if (chargingMode == CHARGE_HOLDING) {
      log(""String_Node_Str"");
      firePearl();
      return;
    }
  }
  if (chargingMode == CHARGE_IDLE) {
    return;
  }
  if (chargingMode == CHARGE_HOLDING) {
    int rf=EndergenicConfiguration.rfToHoldPearl;
    rf=(int)(rf * (3.0f - getInfusedFactor()) / 3.0f);
    int rfStored=getEnergyStored();
    if (rfStored < rf) {
      log(""String_Node_Str"" + rfStored + ""String_Node_Str""+ rf+ ""String_Node_Str"");
      discardPearl(""String_Node_Str"");
    }
 else {
      long rfExtracted=storage.extractEnergy(rf,false);
      log(""String_Node_Str"" + rfExtracted + ""String_Node_Str"");
      rfLost+=rfExtracted;
    }
    return;
  }
  markDirtyQuick();
  chargingMode++;
  if (chargingMode >= 16) {
    log(""String_Node_Str"");
    chargingMode=CHARGE_IDLE;
  }
}",0.9979369289714116
165628,"private void handleSendingEnergy(){
  int energyStored=getEnergyStored();
  if (energyStored <= EndergenicConfiguration.keepRfInBuffer) {
    return;
  }
  energyStored-=EndergenicConfiguration.keepRfInBuffer;
  for (  EnumFacing dir : EnumFacing.VALUES) {
    BlockPos o=getPos().offset(dir);
    TileEntity te=getWorld().getTileEntity(o);
    EnumFacing opposite=dir.getOpposite();
    if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
      int rfToGive;
      if (EndergenicConfiguration.rfOutput <= energyStored) {
        rfToGive=EndergenicConfiguration.rfOutput;
      }
 else {
        rfToGive=energyStored;
      }
      int received;
      if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
        if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
          received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
 else {
          received=0;
        }
      }
 else {
        received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
      }
      energyStored-=storage.extractEnergy(received,false);
      if (energyStored <= 0) {
        break;
      }
    }
  }
}","private void handleSendingEnergy(){
  int energyStored=getEnergyStored();
  if (energyStored <= EndergenicConfiguration.keepRfInBuffer) {
    return;
  }
  energyStored-=EndergenicConfiguration.keepRfInBuffer;
  for (  EnumFacing dir : EnumFacing.VALUES) {
    BlockPos o=getPos().offset(dir);
    TileEntity te=getWorld().getTileEntity(o);
    EnumFacing opposite=dir.getOpposite();
    if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
      int rfToGive;
      if (EndergenicConfiguration.rfOutput <= energyStored) {
        rfToGive=EndergenicConfiguration.rfOutput;
      }
 else {
        rfToGive=energyStored;
      }
      int received;
      if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
        if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
          received=(int)EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
 else {
          received=0;
        }
      }
 else {
        received=(int)EnergyTools.receiveEnergy(te,opposite,rfToGive);
      }
      energyStored-=storage.extractEnergy(received,false);
      if (energyStored <= 0) {
        break;
      }
    }
  }
}",0.9958123953098827
165629,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  checkStats();
  lastRfPerTick.setText(fromServer_lastRfPerTick + ""String_Node_Str"");
  lastLostPearls.setText(fromServer_lastPearlsLost + ""String_Node_Str"");
  lastLaunchedPearls.setText(fromServer_lastPearlsLaunched + ""String_Node_Str"");
  lastOpportunities.setText(fromServer_lastPearlOpportunities + ""String_Node_Str"");
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  checkStats();
  lastRfPerTick.setText(fromServer_lastRfPerTick + ""String_Node_Str"");
  lastLostPearls.setText(fromServer_lastPearlsLost + ""String_Node_Str"");
  lastLaunchedPearls.setText(fromServer_lastPearlsLaunched + ""String_Node_Str"");
  lastOpportunities.setText(fromServer_lastPearlOpportunities + ""String_Node_Str"");
}",0.9938325991189428
165630,"@Override protected void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){
  requestListsIfNeeded();
  populatePlayers();
  enableButtons();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  drawWindow();
}","@Override protected void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){
  requestListsIfNeeded();
  populatePlayers();
  enableButtons();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  drawWindow();
}",0.989345509893455
165631,"private void handleSendingEnergy(){
  int energyStored=getEnergyStored();
  for (  EnumFacing facing : EnumFacing.VALUES) {
    BlockPos pos=getPos().offset(facing);
    TileEntity te=getWorld().getTileEntity(pos);
    EnumFacing opposite=facing.getOpposite();
    if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
      int rfToGive=CoalGeneratorConfiguration.SENDPERTICK <= energyStored ? CoalGeneratorConfiguration.SENDPERTICK : energyStored;
      int received;
      if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
        if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
          received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
 else {
          received=0;
        }
      }
 else {
        received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
      }
      energyStored-=storage.extractEnergy(received,false);
      if (energyStored <= 0) {
        break;
      }
    }
  }
}","private void handleSendingEnergy(){
  int energyStored=getEnergyStored();
  for (  EnumFacing facing : EnumFacing.VALUES) {
    BlockPos pos=getPos().offset(facing);
    TileEntity te=getWorld().getTileEntity(pos);
    EnumFacing opposite=facing.getOpposite();
    if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
      int rfToGive=CoalGeneratorConfiguration.SENDPERTICK <= energyStored ? CoalGeneratorConfiguration.SENDPERTICK : energyStored;
      int received;
      if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
        if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
          received=(int)EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
 else {
          received=0;
        }
      }
 else {
        received=(int)EnergyTools.receiveEnergy(te,opposite,rfToGive);
      }
      energyStored-=storage.extractEnergy(received,false);
      if (energyStored <= 0) {
        break;
      }
    }
  }
}",0.995069033530572
165632,"private void sendOutEnergy(){
  int energyStored=getEnergyStored();
  for (  EnumFacing face : EnumFacing.VALUES) {
    if (modes[face.ordinal()] == Mode.MODE_OUTPUT) {
      BlockPos pos=getPos().offset(face);
      TileEntity te=getWorld().getTileEntity(pos);
      EnumFacing opposite=face.getOpposite();
      if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
        if ((!(te instanceof PowerCellTileEntity)) || getNetworkId() == -1 || ((PowerCellTileEntity)te).getNetworkId() != getNetworkId()) {
          float factor=getCostFactor();
          int rfPerTick=getRfPerTickPerSide();
          int received;
          int rfToGive=Math.min(rfPerTick,(int)(energyStored / factor));
          if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
            if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
              received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
            }
 else {
              received=0;
            }
          }
 else {
            received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
          }
          energyStored-=extractEnergyInternal(received,false,Integer.MAX_VALUE);
          if (energyStored <= 0) {
            break;
          }
        }
      }
    }
  }
}","private void sendOutEnergy(){
  int energyStored=getEnergyStored();
  for (  EnumFacing face : EnumFacing.VALUES) {
    if (modes[face.ordinal()] == Mode.MODE_OUTPUT) {
      BlockPos pos=getPos().offset(face);
      TileEntity te=getWorld().getTileEntity(pos);
      EnumFacing opposite=face.getOpposite();
      if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
        if ((!(te instanceof PowerCellTileEntity)) || getNetworkId() == -1 || ((PowerCellTileEntity)te).getNetworkId() != getNetworkId()) {
          float factor=getCostFactor();
          int rfPerTick=getRfPerTickPerSide();
          int received;
          int rfToGive=Math.min(rfPerTick,(int)(energyStored / factor));
          if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
            if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
              received=(int)EnergyTools.receiveEnergy(te,opposite,rfToGive);
            }
 else {
              received=0;
            }
          }
 else {
            received=(int)EnergyTools.receiveEnergy(te,opposite,rfToGive);
          }
          energyStored-=extractEnergyInternal(received,false,Integer.MAX_VALUE);
          if (energyStored <= 0) {
            break;
          }
        }
      }
    }
  }
}",0.9962235649546828
165633,"private void checkStateServer(){
  long time=System.currentTimeMillis();
  if (lastTime == 0) {
    lastTime=time;
  }
 else   if (time > lastTime + 2000) {
    lastRfPerTickIn=(int)(50 * powerIn / (time - lastTime));
    lastRfPerTickOut=(int)(50 * powerOut / (time - lastTime));
    lastTime=time;
    powerIn=0;
    powerOut=0;
  }
  boolean redstoneSignal=powerLevel > 0;
  int[] rf=redstoneSignal ? rfOn : rfOff;
  boolean[] inputMode=redstoneSignal ? inputModeOn : inputModeOff;
  int energyStored=getEnergyStored();
  if (energyStored <= 0) {
    return;
  }
  IBlockState state=getWorld().getBlockState(getPos());
  for (  EnumFacing facing : EnumFacing.VALUES) {
    int side=OrientationTools.reorient(facing,state).ordinal();
    if (rf[side] > 0 && !inputMode[side]) {
      TileEntity te=getWorld().getTileEntity(getPos().offset(facing));
      EnumFacing opposite=facing.getOpposite();
      if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
        int rfToGive;
        if (rf[side] <= energyStored) {
          rfToGive=rf[side];
        }
 else {
          rfToGive=energyStored;
        }
        int received;
        if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
          if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
            received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
          }
 else {
            received=0;
          }
        }
 else {
          received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
        powerOut+=received;
        energyStored-=storage.extractEnergy(received,false);
        if (energyStored <= 0) {
          return;
        }
      }
    }
  }
}","private void checkStateServer(){
  long time=System.currentTimeMillis();
  if (lastTime == 0) {
    lastTime=time;
  }
 else   if (time > lastTime + 2000) {
    lastRfPerTickIn=(int)(50 * powerIn / (time - lastTime));
    lastRfPerTickOut=(int)(50 * powerOut / (time - lastTime));
    lastTime=time;
    powerIn=0;
    powerOut=0;
  }
  boolean redstoneSignal=powerLevel > 0;
  int[] rf=redstoneSignal ? rfOn : rfOff;
  boolean[] inputMode=redstoneSignal ? inputModeOn : inputModeOff;
  int energyStored=getEnergyStored();
  if (energyStored <= 0) {
    return;
  }
  IBlockState state=getWorld().getBlockState(getPos());
  for (  EnumFacing facing : EnumFacing.VALUES) {
    int side=OrientationTools.reorient(facing,state).ordinal();
    if (rf[side] > 0 && !inputMode[side]) {
      TileEntity te=getWorld().getTileEntity(getPos().offset(facing));
      EnumFacing opposite=facing.getOpposite();
      if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
        int rfToGive;
        if (rf[side] <= energyStored) {
          rfToGive=rf[side];
        }
 else {
          rfToGive=energyStored;
        }
        int received;
        if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
          if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
            received=(int)EnergyTools.receiveEnergy(te,opposite,rfToGive);
          }
 else {
            received=0;
          }
        }
 else {
          received=(int)EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
        powerOut+=received;
        energyStored-=storage.extractEnergy(received,false);
        if (energyStored <= 0) {
          return;
        }
      }
    }
  }
}",0.9971264367816092
165634,"@Override protected void drawGuiContainerBackgroundLayer(float v,int x,int y){
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  cnt--;
  if (cnt < 0) {
    cnt=10;
    sendServerCommand(RFTools.MODID,CommandHandler.CMD_REQUEST_LOCATOR_ENERGY,TypedMap.builder().put(CommandHandler.PARAM_POS,tileEntity.getPos()).build());
  }
  energyLabel.setText(energyConsumption + ""String_Node_Str"");
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int x,int y){
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  cnt--;
  if (cnt < 0) {
    cnt=10;
    sendServerCommand(RFTools.MODID,CommandHandler.CMD_REQUEST_LOCATOR_ENERGY,TypedMap.builder().put(CommandHandler.PARAM_POS,tileEntity.getPos()).build());
  }
  energyLabel.setText(energyConsumption + ""String_Node_Str"");
}",0.9930348258706468
165635,"@Override protected void drawGuiContainerBackgroundLayer(float v,int x,int y){
  getShapeRenderer().handleMouseWheel();
  for (int i=0; i < 4; i++) {
    ProjectorOperation op=tileEntity.getOperations()[i];
    valOn[i].setEnabled(op.getOpcodeOn().isNeedsValue());
    valOff[i].setEnabled(op.getOpcodeOff().isNeedsValue());
  }
  sound.setEnabled(scanline.isPressed());
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  ItemStack stack=tileEntity.getRenderStack();
  if (!stack.isEmpty()) {
    getShapeRenderer().setShapeID(tileEntity.getShapeID());
    getShapeRenderer().renderShape(this,stack,guiLeft,guiTop,showAxis.isPressed(),showOuter.isPressed(),showScan.isPressed(),false);
  }
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int x,int y){
  getShapeRenderer().handleMouseWheel();
  for (int i=0; i < 4; i++) {
    ProjectorOperation op=tileEntity.getOperations()[i];
    valOn[i].setEnabled(op.getOpcodeOn().isNeedsValue());
    valOff[i].setEnabled(op.getOpcodeOff().isNeedsValue());
  }
  sound.setEnabled(scanline.isPressed());
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  ItemStack stack=tileEntity.getRenderStack();
  if (!stack.isEmpty()) {
    getShapeRenderer().setShapeID(tileEntity.getShapeID());
    getShapeRenderer().renderShape(this,stack,guiLeft,guiTop,showAxis.isPressed(),showOuter.isPressed(),showScan.isPressed(),false);
  }
}",0.9956440572495332
165636,"@Override protected void drawGuiContainerBackgroundLayer(float v,int x,int y){
  getShapeRenderer().handleMouseWheel();
  offsetLabel.setText(""String_Node_Str"" + BlockPosTools.toString(tileEntity.getDataOffset()));
  dimensionLabel.setText(""String_Node_Str"" + BlockPosTools.toString(tileEntity.getDataDim()));
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  boolean instack=inventorySlots.getSlot(ScannerTileEntity.SLOT_IN).getHasStack();
  if (currentRF < ScannerConfiguration.SCANNER_PERTICK) {
    instack=false;
  }
  if (tileEntity.getScanProgress() >= 0) {
    instack=false;
    progressLabel.setText(tileEntity.getScanProgress() + ""String_Node_Str"");
  }
 else {
    progressLabel.setText(""String_Node_Str"");
  }
  scanButton.setEnabled(instack);
  ItemStack stack=tileEntity.getRenderStack();
  if (!stack.isEmpty()) {
    int cnt=countFilters();
    if (cnt != filterCnt) {
      filterCnt=cnt;
      move(0,0,0);
    }
    getShapeRenderer().setShapeID(getShapeID());
    getShapeRenderer().renderShape(this,stack,guiLeft,guiTop,showAxis.isPressed(),showOuter.isPressed(),showScan.isPressed(),false);
  }
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int x,int y){
  getShapeRenderer().handleMouseWheel();
  offsetLabel.setText(""String_Node_Str"" + BlockPosTools.toString(tileEntity.getDataOffset()));
  dimensionLabel.setText(""String_Node_Str"" + BlockPosTools.toString(tileEntity.getDataDim()));
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
  boolean instack=inventorySlots.getSlot(ScannerTileEntity.SLOT_IN).getHasStack();
  if (currentRF < ScannerConfiguration.SCANNER_PERTICK) {
    instack=false;
  }
  if (tileEntity.getScanProgress() >= 0) {
    instack=false;
    progressLabel.setText(tileEntity.getScanProgress() + ""String_Node_Str"");
  }
 else {
    progressLabel.setText(""String_Node_Str"");
  }
  scanButton.setEnabled(instack);
  ItemStack stack=tileEntity.getRenderStack();
  if (!stack.isEmpty()) {
    int cnt=countFilters();
    if (cnt != filterCnt) {
      filterCnt=cnt;
      move(0,0,0);
    }
    getShapeRenderer().setShapeID(getShapeID());
    getShapeRenderer().renderShape(this,stack,guiLeft,guiTop,showAxis.isPressed(),showOuter.isPressed(),showScan.isPressed(),false);
  }
}",0.997160243407708
165637,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  requestListsIfNeeded();
  populateFilters();
  enableButtons();
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  colorSelector.setCurrentColor(tileEntity.getShieldColor());
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  requestListsIfNeeded();
  populateFilters();
  enableButtons();
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  colorSelector.setCurrentColor(tileEntity.getShieldColor());
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.99055330634278
165638,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.9855670103092784
165639,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  showSyringeInfo();
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  showSyringeInfo();
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.986717267552182
165640,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  if (!init) {
    return;
  }
  updateStorageList();
  updateContentsList();
  requestListsIfNeeded();
  String text=radiusLabel.getText();
  if (""String_Node_Str"".equals(text)) {
    text=""String_Node_Str"";
  }
  visibleRadiusLabel.setText(text);
  int selected=storageList.getSelected();
  removeButton.setEnabled(selected != -1);
  if (selected <= 0 || storageList.getChildCount() <= 2) {
    upButton.setEnabled(false);
    downButton.setEnabled(false);
    topButton.setEnabled(false);
    bottomButton.setEnabled(false);
  }
 else   if (selected == 1) {
    topButton.setEnabled(false);
    upButton.setEnabled(false);
    downButton.setEnabled(true);
    bottomButton.setEnabled(true);
  }
 else   if (selected == storageList.getChildCount() - 1) {
    topButton.setEnabled(true);
    upButton.setEnabled(true);
    downButton.setEnabled(false);
    bottomButton.setEnabled(false);
  }
 else {
    topButton.setEnabled(true);
    upButton.setEnabled(true);
    downButton.setEnabled(true);
    bottomButton.setEnabled(true);
  }
  if (!tileEntity.isDummy()) {
    tileEntity.requestRfFromServer(RFTools.MODID);
    int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
    energyBar.setValue(currentRF);
    exportToStarred.setCurrentChoice(tileEntity.isExportToCurrent() ? 0 : 1);
  }
 else {
    if (System.currentTimeMillis() - lastTime > 300) {
      lastTime=System.currentTimeMillis();
      tileEntity.requestDataFromServer(RFTools.MODID,StorageScannerTileEntity.CMD_SCANNER_INFO,TypedMap.EMPTY);
    }
    energyBar.setValue(rfReceived);
    exportToStarred.setCurrentChoice(exportToCurrentReceived ? 0 : 1);
  }
  drawWindow();
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  if (!init) {
    return;
  }
  updateStorageList();
  updateContentsList();
  requestListsIfNeeded();
  String text=radiusLabel.getText();
  if (""String_Node_Str"".equals(text)) {
    text=""String_Node_Str"";
  }
  visibleRadiusLabel.setText(text);
  int selected=storageList.getSelected();
  removeButton.setEnabled(selected != -1);
  if (selected <= 0 || storageList.getChildCount() <= 2) {
    upButton.setEnabled(false);
    downButton.setEnabled(false);
    topButton.setEnabled(false);
    bottomButton.setEnabled(false);
  }
 else   if (selected == 1) {
    topButton.setEnabled(false);
    upButton.setEnabled(false);
    downButton.setEnabled(true);
    bottomButton.setEnabled(true);
  }
 else   if (selected == storageList.getChildCount() - 1) {
    topButton.setEnabled(true);
    upButton.setEnabled(true);
    downButton.setEnabled(false);
    bottomButton.setEnabled(false);
  }
 else {
    topButton.setEnabled(true);
    upButton.setEnabled(true);
    downButton.setEnabled(true);
    bottomButton.setEnabled(true);
  }
  if (!tileEntity.isDummy()) {
    tileEntity.requestRfFromServer(RFTools.MODID);
    long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
    energyBar.setValue(currentRF);
    exportToStarred.setCurrentChoice(tileEntity.isExportToCurrent() ? 0 : 1);
  }
 else {
    if (System.currentTimeMillis() - lastTime > 300) {
      lastTime=System.currentTimeMillis();
      tileEntity.requestDataFromServer(RFTools.MODID,StorageScannerTileEntity.CMD_SCANNER_INFO,TypedMap.EMPTY);
    }
    energyBar.setValue(rfReceived);
    exportToStarred.setCurrentChoice(exportToCurrentReceived ? 0 : 1);
  }
  drawWindow();
}",0.9979809633689068
165641,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  requestListsIfNeeded();
  populateReceivers();
  populateTransmitters();
  if (lastDialedTransmitter) {
    showStatus(fromServer_dialResult);
  }
 else   if (lastCheckedReceiver) {
    showStatus(fromServer_receiverStatus);
  }
 else {
    statusLabel.setText(""String_Node_Str"");
    statusLabel.setColor(0xff000000);
    statusLabel.setFilledBackground(-1);
  }
  enableButtons();
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  requestListsIfNeeded();
  populateReceivers();
  populateTransmitters();
  if (lastDialedTransmitter) {
    showStatus(fromServer_dialResult);
  }
 else   if (lastCheckedReceiver) {
    showStatus(fromServer_receiverStatus);
  }
 else {
    statusLabel.setText(""String_Node_Str"");
    statusLabel.setColor(0xff000000);
    statusLabel.setFilledBackground(-1);
  }
  enableButtons();
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.994422310756972
165642,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  requestListsIfNeeded();
  populatePlayers();
  enableButtons();
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  requestListsIfNeeded();
  populatePlayers();
  enableButtons();
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.9886547811993516
165643,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  requestListsIfNeeded();
  populatePlayers();
  enableButtons();
  drawWindow();
  int currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  requestListsIfNeeded();
  populatePlayers();
  enableButtons();
  drawWindow();
  long currentRF=GenericEnergyStorageTileEntity.getCurrentRF();
  energyBar.setValue(currentRF);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.9886547811993516
165644,Class<? extends IClientScreenModule> getClientScreenModule();,Class<? extends IClientScreenModule<?>> getClientScreenModule();,0.976
165645,Class<? extends IScreenModule> getServerScreenModule();,Class<? extends IScreenModule<?>> getServerScreenModule();,0.9734513274336284
165646,"@Override public IAction[] getActions(){
  return new IAction[]{new DefaultAction<>(""String_Node_Str"",BuilderTileEntity::restartScan)};
}","@Override public IAction<?>[] getActions(){
  return new IAction<?>[]{new DefaultAction<>(""String_Node_Str"",BuilderTileEntity::restartScan)};
}",0.9785714285714284
165647,"@Override public IAction[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_SETNONE,PowerCellTileEntity::setAllNone),new DefaultAction<>(ACTION_SETINPUT,PowerCellTileEntity::setAllInput),new DefaultAction<>(ACTION_SETOUTPUT,PowerCellTileEntity::setAllOutput),new DefaultAction<>(ACTION_CLEARSTATS,te -> {
    ((PowerCellTileEntity)te).totalExtracted=0;
    ((PowerCellTileEntity)te).totalInserted=0;
    te.markDirty();
  }
)};
}","@Override public IAction<?>[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_SETNONE,PowerCellTileEntity::setAllNone),new DefaultAction<>(ACTION_SETINPUT,PowerCellTileEntity::setAllInput),new DefaultAction<>(ACTION_SETOUTPUT,PowerCellTileEntity::setAllOutput),new DefaultAction<>(ACTION_CLEARSTATS,te -> {
    ((PowerCellTileEntity)te).totalExtracted=0;
    ((PowerCellTileEntity)te).totalInserted=0;
    te.markDirty();
  }
)};
}",0.9966329966329966
165648,"private void installModuleGui(int i,final ItemStack slot,IModuleProvider moduleProvider,Class<? extends IClientScreenModule> clientScreenModuleClass){
  buttons[i].setEnabled(true);
  toplevel.removeChild(modulePanels[i]);
  try {
    IClientScreenModule<?> clientScreenModule=clientScreenModuleClass.newInstance();
    clientScreenModules[i]=clientScreenModule;
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
  NBTTagCompound tagCompound=slot.getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
  }
  final NBTTagCompound finalTagCompound=tagCompound;
  final int finalI=i;
  ScreenModuleGuiBuilder guiBuilder=new ScreenModuleGuiBuilder(mc,this,tagCompound,() -> {
    slot.setTagCompound(finalTagCompound);
    tileEntity.setInventorySlotContents(finalI,slot);
    RFToolsMessages.INSTANCE.sendToServer(new PacketModuleUpdate(tileEntity.getPos(),finalI,finalTagCompound));
  }
);
  clientScreenModules[i].createGui(guiBuilder);
  modulePanels[i]=guiBuilder.build();
  modulePanels[i].setLayoutHint(80,8,170,114);
  modulePanels[i].setFilledRectThickness(-2).setFilledBackground(0xff8b8b8b);
  toplevel.addChild(modulePanels[i]);
  buttons[i].setText(moduleProvider.getName());
}","private void installModuleGui(int i,final ItemStack slot,IModuleProvider moduleProvider,Class<? extends IClientScreenModule<?>> clientScreenModuleClass){
  buttons[i].setEnabled(true);
  toplevel.removeChild(modulePanels[i]);
  try {
    IClientScreenModule<?> clientScreenModule=clientScreenModuleClass.newInstance();
    clientScreenModules[i]=clientScreenModule;
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
  NBTTagCompound tagCompound=slot.getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
  }
  final NBTTagCompound finalTagCompound=tagCompound;
  final int finalI=i;
  ScreenModuleGuiBuilder guiBuilder=new ScreenModuleGuiBuilder(mc,this,tagCompound,() -> {
    slot.setTagCompound(finalTagCompound);
    tileEntity.setInventorySlotContents(finalI,slot);
    RFToolsMessages.INSTANCE.sendToServer(new PacketModuleUpdate(tileEntity.getPos(),finalI,finalTagCompound));
  }
);
  clientScreenModules[i].createGui(guiBuilder);
  modulePanels[i]=guiBuilder.build();
  modulePanels[i].setLayoutHint(80,8,170,114);
  modulePanels[i].setFilledRectThickness(-2).setFilledBackground(0xff8b8b8b);
  toplevel.addChild(modulePanels[i]);
  buttons[i].setText(moduleProvider.getName());
}",0.9988674971687428
165649,"private void refreshButtons(){
  for (int i=0; i < ScreenContainer.SCREEN_MODULES; i++) {
    final ItemStack slot=tileEntity.getStackInSlot(i);
    if (!slot.isEmpty() && ScreenBlock.hasModuleProvider(slot)) {
      IModuleProvider moduleProvider=ScreenBlock.getModuleProvider(slot);
      Class<? extends IClientScreenModule> clientScreenModuleClass=moduleProvider.getClientScreenModule();
      if (!clientScreenModuleClass.isInstance(clientScreenModules[i])) {
        installModuleGui(i,slot,moduleProvider,clientScreenModuleClass);
      }
    }
 else {
      uninstallModuleGui(i);
    }
    if (modulePanels[i] != null) {
      modulePanels[i].setVisible(selected == i);
      buttons[i].setPressed(selected == i);
    }
  }
}","private void refreshButtons(){
  for (int i=0; i < ScreenContainer.SCREEN_MODULES; i++) {
    final ItemStack slot=tileEntity.getStackInSlot(i);
    if (!slot.isEmpty() && ScreenBlock.hasModuleProvider(slot)) {
      IModuleProvider moduleProvider=ScreenBlock.getModuleProvider(slot);
      Class<? extends IClientScreenModule<?>> clientScreenModuleClass=moduleProvider.getClientScreenModule();
      if (!clientScreenModuleClass.isInstance(clientScreenModules[i])) {
        installModuleGui(i,slot,moduleProvider,clientScreenModuleClass);
      }
    }
 else {
      uninstallModuleGui(i);
    }
    if (modulePanels[i] != null) {
      modulePanels[i].setVisible(selected == i);
      buttons[i].setPressed(selected == i);
    }
  }
}",0.9979605710401088
165650,"@Override public IAction[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_SCAN,ScreenControllerTileEntity::scan),new DefaultAction<>(ACTION_DETACH,ScreenControllerTileEntity::detach)};
}","@Override public IAction<?>[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_SCAN,ScreenControllerTileEntity::scan),new DefaultAction<>(ACTION_DETACH,ScreenControllerTileEntity::detach)};
}",0.9926650366748166
165651,"@Override public IAction[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_SCAN,ScannerTileEntity::scan)};
}","@Override public IAction<?>[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_SCAN,ScannerTileEntity::scan)};
}",0.9880478087649402
165652,"@Override public IValue[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_RSMODE,ScannerTileEntity::getRSModeInt,ScannerTileEntity::setRSModeInt),new DefaultValue<>(VALUE_OFFSET,ScannerTileEntity::getDataOffset,ScannerTileEntity::setDataOffset)};
}","@Override public IValue<?,?>[] getValues(){
  return new IValue[]{new DefaultValue<>(VALUE_RSMODE,ScannerTileEntity::getRSModeInt,ScannerTileEntity::setRSModeInt),new DefaultValue<>(VALUE_OFFSET,ScannerTileEntity::getDataOffset,ScannerTileEntity::setDataOffset)};
}",0.9904761904761904
165653,"private Pair<Panel,Integer> addItemToList(ItemStack stack,WidgetList itemList,Pair<Panel,Integer> currentPos,int numcolumns,int labelWidth,int spacing,int slot,boolean newgroup,String groupName){
  Panel panel=currentPos.getKey();
  if (panel == null || currentPos.getValue() >= numcolumns || (newgroup && groupName != null)) {
    if (newgroup && groupName != null) {
      AbstractWidget groupLabel=new Label(mc,this).setText(groupName).setColor(ModularStorageConfiguration.groupForeground).setColor(StyleConfig.colorTextInListNormal).setHorizontalAlignment(HorizontalAlignment.ALIGN_LEFT).setFilledBackground(ModularStorageConfiguration.groupBackground).setDesiredHeight(10).setDesiredWidth(231);
      itemList.addChild(new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(2).setVerticalMargin(0)).setDesiredHeight(10).addChild(groupLabel));
    }
    panel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(spacing)).setDesiredHeight(12).setUserObject(new Integer(-1)).setDesiredHeight(16);
    currentPos=MutablePair.of(panel,0);
    itemList.addChild(panel);
  }
  BlockRender blockRender=new BlockRender(mc,this).setRenderItem(stack).setUserObject(new Integer(slot)).setOffsetX(-1).setOffsetY(-1);
  panel.addChild(blockRender);
  if (labelWidth > 0) {
    String displayName;
    if (labelWidth > 100) {
      displayName=typeModule.getLongLabel(stack);
    }
 else {
      displayName=typeModule.getShortLabel(stack);
    }
    AbstractWidget label=new Label(mc,this).setText(displayName).setColor(StyleConfig.colorTextInListNormal).setHorizontalAlignment(HorizontalAlignment.ALIGN_LEFT).setDesiredWidth(labelWidth).setUserObject(new Integer(-1));
    panel.addChild(label);
  }
  currentPos.setValue(currentPos.getValue() + 1);
  return currentPos;
}","private Pair<Panel,Integer> addItemToList(ItemStack stack,WidgetList itemList,Pair<Panel,Integer> currentPos,int numcolumns,int labelWidth,int spacing,int slot,boolean newgroup,String groupName){
  Panel panel=currentPos.getKey();
  if (panel == null || currentPos.getValue() >= numcolumns || (newgroup && groupName != null)) {
    if (newgroup && groupName != null) {
      AbstractWidget<?> groupLabel=new Label(mc,this).setText(groupName).setColor(ModularStorageConfiguration.groupForeground).setColor(StyleConfig.colorTextInListNormal).setHorizontalAlignment(HorizontalAlignment.ALIGN_LEFT).setFilledBackground(ModularStorageConfiguration.groupBackground).setDesiredHeight(10).setDesiredWidth(231);
      itemList.addChild(new Panel(mc,this).setLayout(new HorizontalLayout().setHorizontalMargin(2).setVerticalMargin(0)).setDesiredHeight(10).addChild(groupLabel));
    }
    panel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(spacing)).setDesiredHeight(12).setUserObject(new Integer(-1)).setDesiredHeight(16);
    currentPos=MutablePair.of(panel,0);
    itemList.addChild(panel);
  }
  BlockRender blockRender=new BlockRender(mc,this).setRenderItem(stack).setUserObject(new Integer(slot)).setOffsetX(-1).setOffsetY(-1);
  panel.addChild(blockRender);
  if (labelWidth > 0) {
    String displayName;
    if (labelWidth > 100) {
      displayName=typeModule.getLongLabel(stack);
    }
 else {
      displayName=typeModule.getShortLabel(stack);
    }
    AbstractWidget<?> label=new Label(mc,this).setText(displayName).setColor(StyleConfig.colorTextInListNormal).setHorizontalAlignment(HorizontalAlignment.ALIGN_LEFT).setDesiredWidth(labelWidth).setUserObject(new Integer(-1));
    panel.addChild(label);
  }
  currentPos.setValue(currentPos.getValue() + 1);
  return currentPos;
}",0.9983296213808464
165654,"@Override public IAction[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_COMPACT,te -> ((ModularStorageTileEntity)te).compact()),new DefaultAction<>(ACTION_CYCLE,te -> ((ModularStorageTileEntity)te).cycle()),new DefaultAction<>(ACTION_CLEARGRID,te -> ((ModularStorageTileEntity)te).clearGrid())};
}","@Override public IAction<?>[] getActions(){
  return new IAction[]{new DefaultAction<>(ACTION_COMPACT,te -> ((ModularStorageTileEntity)te).compact()),new DefaultAction<>(ACTION_CYCLE,te -> ((ModularStorageTileEntity)te).cycle()),new DefaultAction<>(ACTION_CLEARGRID,te -> ((ModularStorageTileEntity)te).clearGrid())};
}",0.9952755905511812
165655,"private void addStorageLine(PacketReturnInventoryInfo.InventoryInfo c,String displayName,boolean routable){
  Panel panel;
  if (c == null) {
    panel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(8).setHorizontalMargin(5));
    panel.addChild(new ImageLabel(mc,this).setImage(guielements,115,19).setDesiredWidth(13).setDesiredHeight(13));
  }
 else {
    HorizontalLayout layout=new HorizontalLayout();
    if (!openViewButton.isPressed()) {
      layout.setHorizontalMargin(2);
    }
    panel=new Panel(mc,this).setLayout(layout);
    panel.addChild(new BlockRender(mc,this).setRenderItem(c.getBlock()));
  }
  if (openViewButton.isPressed()) {
    AbstractWidget label;
    label=new Label(mc,this).setColor(StyleConfig.colorTextInListNormal).setText(displayName).setDynamic(true).setHorizontalAlignment(HorizontalAlignment.ALIGN_LEFT).setDesiredWidth(58);
    if (c == null) {
      label.setTooltips(TextFormatting.GREEN + ""String_Node_Str"").setDesiredWidth(74);
    }
 else {
      label.setTooltips(TextFormatting.GREEN + ""String_Node_Str"" + TextFormatting.WHITE+ BlockPosTools.toString(c.getPos()),TextFormatting.GREEN + ""String_Node_Str"" + TextFormatting.WHITE+ displayName,""String_Node_Str"");
    }
    panel.addChild(label);
    if (c != null) {
      ImageChoiceLabel choiceLabel=new ImageChoiceLabel(mc,this).addChoiceEvent((parent,newChoice) -> changeRoutable(c.getPos())).setDesiredWidth(13);
      choiceLabel.addChoice(""String_Node_Str"",""String_Node_Str"",guielements,131,19);
      choiceLabel.addChoice(""String_Node_Str"",""String_Node_Str"",guielements,115,19);
      choiceLabel.setCurrentChoice(routable ? 1 : 0);
      panel.addChild(choiceLabel);
    }
  }
  storageList.addChild(panel);
}","private void addStorageLine(PacketReturnInventoryInfo.InventoryInfo c,String displayName,boolean routable){
  Panel panel;
  if (c == null) {
    panel=new Panel(mc,this).setLayout(new HorizontalLayout().setSpacing(8).setHorizontalMargin(5));
    panel.addChild(new ImageLabel(mc,this).setImage(guielements,115,19).setDesiredWidth(13).setDesiredHeight(13));
  }
 else {
    HorizontalLayout layout=new HorizontalLayout();
    if (!openViewButton.isPressed()) {
      layout.setHorizontalMargin(2);
    }
    panel=new Panel(mc,this).setLayout(layout);
    panel.addChild(new BlockRender(mc,this).setRenderItem(c.getBlock()));
  }
  if (openViewButton.isPressed()) {
    AbstractWidget<?> label;
    label=new Label(mc,this).setColor(StyleConfig.colorTextInListNormal).setText(displayName).setDynamic(true).setHorizontalAlignment(HorizontalAlignment.ALIGN_LEFT).setDesiredWidth(58);
    if (c == null) {
      label.setTooltips(TextFormatting.GREEN + ""String_Node_Str"").setDesiredWidth(74);
    }
 else {
      label.setTooltips(TextFormatting.GREEN + ""String_Node_Str"" + TextFormatting.WHITE+ BlockPosTools.toString(c.getPos()),TextFormatting.GREEN + ""String_Node_Str"" + TextFormatting.WHITE+ displayName,""String_Node_Str"");
    }
    panel.addChild(label);
    if (c != null) {
      ImageChoiceLabel choiceLabel=new ImageChoiceLabel(mc,this).addChoiceEvent((parent,newChoice) -> changeRoutable(c.getPos())).setDesiredWidth(13);
      choiceLabel.addChoice(""String_Node_Str"",""String_Node_Str"",guielements,131,19);
      choiceLabel.addChoice(""String_Node_Str"",""String_Node_Str"",guielements,115,19);
      choiceLabel.setCurrentChoice(routable ? 1 : 0);
      panel.addChild(choiceLabel);
    }
  }
  storageList.addChild(panel);
}",0.9991326973113616
165656,"@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setFilledRectThickness(1).setVertical().setDesiredWidth(10).setDesiredHeight(50).setMaxValue(maxEnergyStored).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  openViewButton=new ToggleButton(mc,this).setCheckMarker(false).setText(""String_Node_Str"").setTooltips(""String_Node_Str"");
  openViewButton.setPressed(tileEntity.isOpenWideView());
  openViewButton.addButtonEvent(widget -> toggleView());
  upButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> moveUp());
  topButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> moveTop());
  downButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> moveDown());
  bottomButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> moveBottom());
  removeButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> removeFromList());
  Panel energyPanel=new Panel(mc,this).setLayout(new VerticalLayout().setVerticalMargin(0).setSpacing(1)).setDesiredWidth(10);
  energyPanel.addChild(openViewButton).addChild(energyBar).addChild(topButton).addChild(upButton).addChild(downButton).addChild(bottomButton).addChild(new Label(mc,this).setText(""String_Node_Str"")).addChild(removeButton);
  exportToStarred=new ImageChoiceLabel(mc,this).setName(""String_Node_Str"").setLayoutHint(12,223,13,13);
  exportToStarred.addChoice(""String_Node_Str"",""String_Node_Str"",guielements,131,19);
  exportToStarred.addChoice(""String_Node_Str"",""String_Node_Str"",guielements,115,19);
  storagePanel=makeStoragePanel(energyPanel);
  itemPanel=makeItemPanel();
  Button scanButton=new Button(mc,this).setText(""String_Node_Str"").setDesiredWidth(50).setDesiredHeight(14).addButtonEvent(parent -> RFToolsMessages.INSTANCE.sendToServer(new PacketGetInfoFromServer(RFTools.MODID,new InventoriesInfoPacketServer(tileEntity.getDimension(),tileEntity.getStorageScannerPos(),true))));
  if (RFTools.instance.xnet) {
    if (StorageScannerConfiguration.xnetRequired) {
      scanButton.setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else {
      scanButton.setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    scanButton.setTooltips(""String_Node_Str"",""String_Node_Str"");
  }
  radiusLabel=new ScrollableLabel(mc,this).setName(""String_Node_Str"").setRealMinimum(RFTools.instance.xnet ? 0 : 1).setRealMaximum(20);
  visibleRadiusLabel=new Label(mc,this);
  visibleRadiusLabel.setDesiredWidth(40);
  searchField=new TextField(mc,this).addTextEvent((parent,newText) -> {
    storageList.clearHilightedRows();
    fromServer_foundInventories.clear();
    startSearch(newText);
  }
);
  Panel searchPanel=new Panel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(8,142,256 - 11,18)).setLayout(new HorizontalLayout()).setDesiredHeight(18).addChild(new Label(mc,this).setText(""String_Node_Str"")).addChild(searchField);
  Slider radiusSlider=new Slider(mc,this).setHorizontal().setTooltips(""String_Node_Str"").setMinimumKnobSize(12).setDesiredHeight(14).setScrollable(radiusLabel);
  Panel scanPanel=new Panel(mc,this).setLayoutHint(8,162,74,54).setFilledRectThickness(-2).setFilledBackground(StyleConfig.colorListBackground).setLayout(new VerticalLayout().setVerticalMargin(6).setSpacing(1)).addChild(scanButton);
  if (!(RFTools.instance.xnet && StorageScannerConfiguration.xnetRequired)) {
    scanPanel.addChild(radiusSlider);
  }
  scanPanel.addChild(visibleRadiusLabel);
  if (tileEntity.isDummy()) {
    scanButton.setEnabled(false);
    radiusLabel.setVisible(false);
    radiusSlider.setVisible(false);
  }
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(storagePanel).addChild(itemPanel).addChild(searchPanel).addChild(scanPanel).addChild(exportToStarred);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,StorageScannerTileEntity.VALUE_EXPORT.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,StorageScannerTileEntity.VALUE_RADIUS.getName());
  Keyboard.enableRepeatEvents(true);
  fromServer_foundInventories.clear();
  fromServer_inventory.clear();
  if (tileEntity.isDummy()) {
    fromServer_inventories.clear();
  }
 else {
    tileEntity.requestRfFromServer(RFTools.MODID);
  }
  BlockPos pos=tileEntity.getCraftingGridContainerPos();
  craftingGrid.initGui(modBase,network,mc,this,pos,tileEntity.getCraftingGridProvider(),guiLeft,guiTop,xSize,ySize);
  sendServerCommand(RFTools.MODID,CommandHandler.CMD_REQUEST_GRID_SYNC,Arguments.builder().value(pos).build());
  if (StorageScannerConfiguration.hilightStarredOnGuiOpen) {
    storageList.setSelected(0);
  }
  init=true;
}","@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setFilledRectThickness(1).setVertical().setDesiredWidth(10).setDesiredHeight(50).setMaxValue(maxEnergyStored).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  openViewButton=new ToggleButton(mc,this).setCheckMarker(false).setText(""String_Node_Str"").setTooltips(""String_Node_Str"");
  openViewButton.setPressed(tileEntity.isOpenWideView());
  openViewButton.addButtonEvent(widget -> toggleView());
  upButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> moveUp());
  topButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> moveTop());
  downButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> moveDown());
  bottomButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> moveBottom());
  removeButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> removeFromList());
  Panel energyPanel=new Panel(mc,this).setLayout(new VerticalLayout().setVerticalMargin(0).setSpacing(1)).setDesiredWidth(10);
  energyPanel.addChild(openViewButton).addChild(energyBar).addChild(topButton).addChild(upButton).addChild(downButton).addChild(bottomButton).addChild(new Label(mc,this).setText(""String_Node_Str"")).addChild(removeButton);
  exportToStarred=new ImageChoiceLabel(mc,this).setName(""String_Node_Str"").setLayoutHint(12,223,13,13);
  exportToStarred.addChoice(""String_Node_Str"",""String_Node_Str"",guielements,131,19);
  exportToStarred.addChoice(""String_Node_Str"",""String_Node_Str"",guielements,115,19);
  storagePanel=makeStoragePanel(energyPanel);
  itemPanel=makeItemPanel();
  Button scanButton=new Button(mc,this).setText(""String_Node_Str"").setDesiredWidth(50).setDesiredHeight(14).addButtonEvent(parent -> RFToolsMessages.INSTANCE.sendToServer(new PacketGetInfoFromServer(RFTools.MODID,new InventoriesInfoPacketServer(tileEntity.getDimension(),tileEntity.getStorageScannerPos(),true))));
  if (RFTools.instance.xnet) {
    if (StorageScannerConfiguration.xnetRequired) {
      scanButton.setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else {
      scanButton.setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    scanButton.setTooltips(""String_Node_Str"",""String_Node_Str"");
  }
  radiusLabel=new ScrollableLabel(mc,this).setLayoutHint(1,1,1,1).setName(""String_Node_Str"").setVisible(false).setRealMinimum(RFTools.instance.xnet ? 0 : 1).setRealMaximum(20);
  visibleRadiusLabel=new Label(mc,this);
  visibleRadiusLabel.setDesiredWidth(40);
  searchField=new TextField(mc,this).addTextEvent((parent,newText) -> {
    storageList.clearHilightedRows();
    fromServer_foundInventories.clear();
    startSearch(newText);
  }
);
  Panel searchPanel=new Panel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(8,142,256 - 11,18)).setLayout(new HorizontalLayout()).setDesiredHeight(18).addChild(new Label(mc,this).setText(""String_Node_Str"")).addChild(searchField);
  Slider radiusSlider=new Slider(mc,this).setHorizontal().setTooltips(""String_Node_Str"").setMinimumKnobSize(12).setDesiredHeight(14).setScrollableName(""String_Node_Str"");
  Panel scanPanel=new Panel(mc,this).setLayoutHint(8,162,74,54).setFilledRectThickness(-2).setFilledBackground(StyleConfig.colorListBackground).setLayout(new VerticalLayout().setVerticalMargin(6).setSpacing(1)).addChild(scanButton);
  if (!(RFTools.instance.xnet && StorageScannerConfiguration.xnetRequired)) {
    scanPanel.addChild(radiusSlider);
  }
  scanPanel.addChildren(visibleRadiusLabel,radiusLabel);
  if (tileEntity.isDummy()) {
    scanButton.setEnabled(false);
    radiusSlider.setVisible(false);
  }
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(storagePanel).addChild(itemPanel).addChild(searchPanel).addChild(scanPanel).addChild(exportToStarred);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,StorageScannerTileEntity.VALUE_EXPORT.getName());
  window.bind(RFToolsMessages.INSTANCE,""String_Node_Str"",tileEntity,StorageScannerTileEntity.VALUE_RADIUS.getName());
  Keyboard.enableRepeatEvents(true);
  fromServer_foundInventories.clear();
  fromServer_inventory.clear();
  if (tileEntity.isDummy()) {
    fromServer_inventories.clear();
  }
 else {
    tileEntity.requestRfFromServer(RFTools.MODID);
  }
  BlockPos pos=tileEntity.getCraftingGridContainerPos();
  craftingGrid.initGui(modBase,network,mc,this,pos,tileEntity.getCraftingGridProvider(),guiLeft,guiTop,xSize,ySize);
  sendServerCommand(RFTools.MODID,CommandHandler.CMD_REQUEST_GRID_SYNC,Arguments.builder().value(pos).build());
  if (StorageScannerConfiguration.hilightStarredOnGuiOpen) {
    storageList.setSelected(0);
  }
  init=true;
}",0.9878817256422684
165657,"@Override @SideOnly(Side.CLIENT) @Optional.Method(modid=""String_Node_Str"") public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  super.getWailaBody(itemStack,currenttip,accessor,config);
  TileEntity tileEntity=accessor.getTileEntity();
  if (tileEntity instanceof PowerCellTileEntity) {
    PowerCellTileEntity powerCellTileEntity=(PowerCellTileEntity)tileEntity;
    int id=powerCellTileEntity.getNetworkId();
    if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
      if (id != -1) {
        currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + new DecimalFormat(""String_Node_Str"").format(id));
      }
 else {
        currenttip.add(TextFormatting.GREEN + ""String_Node_Str"");
      }
    }
    if (System.currentTimeMillis() - lastTime > 250) {
      lastTime=System.currentTimeMillis();
      RFToolsMessages.INSTANCE.sendToServer(new PacketGetInfoFromServer(RFTools.MODID,new PowerCellInfoPacketServer(powerCellTileEntity)));
    }
    long total=(PowerCellInfoPacketClient.tooltipBlocks - PowerCellInfoPacketClient.tooltipAdvancedBlocks - (long)PowerCellInfoPacketClient.tooltipSimpleBlocks) * PowerCellConfiguration.rfPerNormalCell;
    total+=(long)PowerCellInfoPacketClient.tooltipAdvancedBlocks * PowerCellConfiguration.rfPerNormalCell * advancedFactor;
    total+=(long)PowerCellInfoPacketClient.tooltipSimpleBlocks * PowerCellConfiguration.rfPerNormalCell / PowerCellConfiguration.simpleFactor;
    if (total > 2000000000) {
      total=2000000000;
    }
    currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + PowerCellInfoPacketClient.tooltipEnergy+ ""String_Node_Str""+ total+ ""String_Node_Str""+ PowerCellInfoPacketClient.tooltipRfPerTick+ ""String_Node_Str"");
    PowerCellTileEntity.Mode mode=powerCellTileEntity.getMode(accessor.getSide());
    if (mode == PowerCellTileEntity.Mode.MODE_INPUT) {
      currenttip.add(TextFormatting.YELLOW + ""String_Node_Str"");
    }
 else     if (mode == PowerCellTileEntity.Mode.MODE_OUTPUT) {
      int cost=(int)((PowerCellInfoPacketClient.tooltipCostFactor - 1.0f) * 1000.0f);
      currenttip.add(TextFormatting.YELLOW + ""String_Node_Str"" + cost / 10 + ""String_Node_Str"" + cost % 10 + ""String_Node_Str"");
    }
  }
  return currenttip;
}","@Override @SideOnly(Side.CLIENT) @Optional.Method(modid=""String_Node_Str"") public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  super.getWailaBody(itemStack,currenttip,accessor,config);
  TileEntity tileEntity=accessor.getTileEntity();
  if (tileEntity instanceof PowerCellTileEntity) {
    PowerCellTileEntity powerCellTileEntity=(PowerCellTileEntity)tileEntity;
    int id=powerCellTileEntity.getNetworkId();
    if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
      if (id != -1) {
        currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + new DecimalFormat(""String_Node_Str"").format(id));
      }
 else {
        currenttip.add(TextFormatting.GREEN + ""String_Node_Str"");
      }
    }
    if (System.currentTimeMillis() - lastTime > 250) {
      lastTime=System.currentTimeMillis();
      RFToolsMessages.INSTANCE.sendToServer(new PacketGetInfoFromServer(RFTools.MODID,new PowerCellInfoPacketServer(powerCellTileEntity)));
    }
    int total=(PowerCellInfoPacketClient.tooltipBlocks - PowerCellInfoPacketClient.tooltipAdvancedBlocks - PowerCellInfoPacketClient.tooltipSimpleBlocks) * PowerCellConfiguration.rfPerNormalCell;
    total+=PowerCellInfoPacketClient.tooltipAdvancedBlocks * PowerCellConfiguration.rfPerNormalCell * advancedFactor;
    total+=PowerCellInfoPacketClient.tooltipSimpleBlocks * PowerCellConfiguration.rfPerNormalCell / PowerCellConfiguration.simpleFactor;
    currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + PowerCellInfoPacketClient.tooltipEnergy+ ""String_Node_Str""+ total+ ""String_Node_Str""+ PowerCellInfoPacketClient.tooltipRfPerTick+ ""String_Node_Str"");
    PowerCellTileEntity.Mode mode=powerCellTileEntity.getMode(accessor.getSide());
    if (mode == PowerCellTileEntity.Mode.MODE_INPUT) {
      currenttip.add(TextFormatting.YELLOW + ""String_Node_Str"");
    }
 else     if (mode == PowerCellTileEntity.Mode.MODE_OUTPUT) {
      int cost=(int)((PowerCellInfoPacketClient.tooltipCostFactor - 1.0f) * 1000.0f);
      currenttip.add(TextFormatting.YELLOW + ""String_Node_Str"" + cost / 10 + ""String_Node_Str"" + cost % 10 + ""String_Node_Str"");
    }
  }
  return currenttip;
}",0.9814126394052044
165658,"public void readFromNBT(NBTTagCompound tagCompound){
  this.energy=tagCompound.getInteger(""String_Node_Str"");
  this.advancedBlocks=tagCompound.getInteger(""String_Node_Str"");
  this.simpleBlocks=tagCompound.getInteger(""String_Node_Str"");
  blocks.clear();
  NBTTagList list=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < list.tagCount(); i++) {
    NBTTagCompound tag=list.getCompoundTagAt(i);
    blocks.add(new GlobalCoordinate(new BlockPos(tag.getInteger(""String_Node_Str""),tag.getInteger(""String_Node_Str""),tag.getInteger(""String_Node_Str"")),tag.getInteger(""String_Node_Str"")));
  }
  if (energy < 0) {
    energy=calculateMaximumEnergy();
  }
}","public void readFromNBT(NBTTagCompound tagCompound){
  this.energy=tagCompound.getInteger(""String_Node_Str"");
  this.advancedBlocks=tagCompound.getInteger(""String_Node_Str"");
  this.simpleBlocks=tagCompound.getInteger(""String_Node_Str"");
  blocks.clear();
  NBTTagList list=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < list.tagCount(); i++) {
    NBTTagCompound tag=list.getCompoundTagAt(i);
    blocks.add(new GlobalCoordinate(new BlockPos(tag.getInteger(""String_Node_Str""),tag.getInteger(""String_Node_Str""),tag.getInteger(""String_Node_Str"")),tag.getInteger(""String_Node_Str"")));
  }
}",0.9538926681783824
165659,"private int receiveEnergyMulti(int maxReceive,boolean simulate){
  PowerCellNetwork.Network network=getNetwork();
  if (getWorld().isRemote) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int totEnergy=network.calculateMaximumEnergy();
  int maxInsert=Math.min(totEnergy - network.getEnergy(),maxReceive);
  if (maxInsert > 0) {
    if (!simulate) {
      network.receiveEnergy(maxInsert);
      PowerCellNetwork.getChannels(getWorld()).save(getWorld());
    }
  }
  return isCreative() ? maxReceive : maxInsert;
}","private int receiveEnergyMulti(int maxReceive,boolean simulate){
  PowerCellNetwork.Network network=getNetwork();
  if (getWorld().isRemote) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int totEnergy=PowerCellConfiguration.rfPerNormalCell * (network.getBlockCount() - network.getAdvancedBlockCount() - network.getSimpleBlockCount()) + PowerCellConfiguration.rfPerNormalCell * advancedFactor * network.getAdvancedBlockCount() + +PowerCellConfiguration.rfPerNormalCell * network.getSimpleBlockCount() / simpleFactor;
  int maxInsert=Math.min(totEnergy - network.getEnergy(),maxReceive);
  if (maxInsert > 0) {
    if (!simulate) {
      network.receiveEnergy(maxInsert);
      PowerCellNetwork.getChannels(getWorld()).save(getWorld());
    }
  }
  return isCreative() ? maxReceive : maxInsert;
}",0.741185296324081
165660,"@Override protected void checkRedstone(World world,BlockPos pos){
  IBlockState state=world.getBlockState(pos);
  TileEntity te=world.getTileEntity(pos);
  if (state.getBlock() instanceof LogicSlabBlock && te instanceof AnalogTileEntity) {
    AnalogTileEntity tileEntity=(AnalogTileEntity)te;
    LogicFacing facing=tileEntity.getFacing(state);
    EnumFacing downSide=facing.getSide();
    EnumFacing inputSide=facing.getInputSide();
    EnumFacing rightSide=ThreeLogicBlock.rotateLeft(downSide,inputSide);
    EnumFacing leftSide=ThreeLogicBlock.rotateRight(downSide,inputSide);
    int outputStrength;
    int inputStrength=getInputStrength(world,pos,inputSide);
    int inputLeft=getInputStrength(world,pos,leftSide);
    int inputRight=getInputStrength(world,pos,rightSide);
    if (inputLeft == inputRight) {
      outputStrength=(int)(inputStrength * tileEntity.getMulEqual() + tileEntity.getAddEqual());
    }
 else     if (inputLeft < inputRight) {
      outputStrength=(int)(inputStrength * tileEntity.getMulLess() + tileEntity.getAddLess());
    }
 else {
      outputStrength=(int)(inputStrength * tileEntity.getMulGreater() + tileEntity.getAddGreater());
    }
    int oldPower=tileEntity.getPowerLevel();
    tileEntity.setPowerInput(outputStrength);
    if (oldPower != outputStrength) {
      world.notifyNeighborsOfStateChange(pos,this,false);
    }
  }
}","@Override protected void checkRedstone(World world,BlockPos pos){
  if (loopDetector.contains(pos)) {
    return;
  }
  IBlockState state=world.getBlockState(pos);
  TileEntity te=world.getTileEntity(pos);
  if (state.getBlock() instanceof LogicSlabBlock && te instanceof AnalogTileEntity) {
    loopDetector.add(pos);
    AnalogTileEntity tileEntity=(AnalogTileEntity)te;
    LogicFacing facing=tileEntity.getFacing(state);
    EnumFacing downSide=facing.getSide();
    EnumFacing inputSide=facing.getInputSide();
    EnumFacing rightSide=ThreeLogicBlock.rotateLeft(downSide,inputSide);
    EnumFacing leftSide=ThreeLogicBlock.rotateRight(downSide,inputSide);
    int outputStrength;
    int inputStrength=getInputStrength(world,pos,inputSide);
    int inputLeft=getInputStrength(world,pos,leftSide);
    int inputRight=getInputStrength(world,pos,rightSide);
    if (inputLeft == inputRight) {
      outputStrength=(int)(inputStrength * tileEntity.getMulEqual() + tileEntity.getAddEqual());
    }
 else     if (inputLeft < inputRight) {
      outputStrength=(int)(inputStrength * tileEntity.getMulLess() + tileEntity.getAddLess());
    }
 else {
      outputStrength=(int)(inputStrength * tileEntity.getMulGreater() + tileEntity.getAddGreater());
    }
    int oldPower=tileEntity.getPowerLevel();
    tileEntity.setPowerInput(outputStrength);
    if (oldPower != outputStrength) {
      world.notifyNeighborsOfStateChange(pos,this,false);
    }
    loopDetector.remove(pos);
  }
}",0.9618213660245184
165661,"@Override protected void checkRedstone(World world,BlockPos pos){
  IBlockState state=world.getBlockState(pos);
  TileEntity te=world.getTileEntity(pos);
  if (state.getBlock() instanceof LogicSlabBlock && te instanceof ThreeLogicTileEntity) {
    ThreeLogicTileEntity tileEntity=(ThreeLogicTileEntity)te;
    LogicFacing facing=tileEntity.getFacing(state);
    EnumFacing downSide=facing.getSide();
    EnumFacing inputSide=facing.getInputSide();
    EnumFacing leftSide=rotateLeft(downSide,inputSide);
    EnumFacing rightSide=rotateRight(downSide,inputSide);
    int powered1=getInputStrength(world,pos,leftSide) > 0 ? 1 : 0;
    int powered2=getInputStrength(world,pos,inputSide) > 0 ? 2 : 0;
    int powered3=getInputStrength(world,pos,rightSide) > 0 ? 4 : 0;
    tileEntity.setPowerInput(powered1 + powered2 + powered3);
    tileEntity.checkRedstone();
  }
}","@Override protected void checkRedstone(World world,BlockPos pos){
  if (loopDetector.contains(pos)) {
    return;
  }
  IBlockState state=world.getBlockState(pos);
  TileEntity te=world.getTileEntity(pos);
  if (state.getBlock() instanceof LogicSlabBlock && te instanceof ThreeLogicTileEntity) {
    loopDetector.add(pos);
    ThreeLogicTileEntity tileEntity=(ThreeLogicTileEntity)te;
    LogicFacing facing=tileEntity.getFacing(state);
    EnumFacing downSide=facing.getSide();
    EnumFacing inputSide=facing.getInputSide();
    EnumFacing leftSide=rotateLeft(downSide,inputSide);
    EnumFacing rightSide=rotateRight(downSide,inputSide);
    int powered1=getInputStrength(world,pos,leftSide) > 0 ? 1 : 0;
    int powered2=getInputStrength(world,pos,inputSide) > 0 ? 2 : 0;
    int powered3=getInputStrength(world,pos,rightSide) > 0 ? 4 : 0;
    tileEntity.setPowerInput(powered1 + powered2 + powered3);
    tileEntity.checkRedstone();
    loopDetector.remove(pos);
  }
}",0.9406641262928688
165662,"@Override public EnumFacing getBlockOrientation(){
  return OrientationTools.getOrientationHoriz(world.getBlockState(pos));
}","@Override public EnumFacing getBlockOrientation(){
  IBlockState state=world.getBlockState(pos);
  if (state.getBlock() instanceof BuilderBlock) {
    return OrientationTools.getOrientationHoriz(state);
  }
 else {
    return null;
  }
}",0.4419889502762431
165663,"@Override public void render(ScreenTileEntity tileEntity,double x,double y,double z,float partialTicks,int destroyStage,float alpha){
  GlStateManager.pushMatrix();
  float f3;
  EnumFacing facing=EnumFacing.SOUTH;
  if (tileEntity != null) {
    IBlockState state=Minecraft.getMinecraft().world.getBlockState(tileEntity.getPos());
    facing=state.getValue(BaseBlock.FACING);
  }
switch (facing) {
case NORTH:
    f3=180.0F;
  break;
case WEST:
f3=90.0F;
break;
case EAST:
f3=-90.0F;
break;
case DOWN:
case UP:
case SOUTH:
default :
f3=0.0F;
break;
}
GlStateManager.translate((float)x + 0.5F,(float)y + 0.75F,(float)z + 0.5F);
GlStateManager.rotate(-f3,0.0F,1.0F,0.0F);
GlStateManager.translate(0.0F,-0.2500F,-0.4375F);
if (tileEntity == null) {
GlStateManager.disableLighting();
renderScreenBoard(0,0);
}
 else if (!tileEntity.isTransparent()) {
GlStateManager.disableLighting();
renderScreenBoard(tileEntity.getSize(),tileEntity.getColor());
}
if (tileEntity != null && tileEntity.isRenderable()) {
FontRenderer fontrenderer=this.getFontRenderer();
IClientScreenModule.TransformMode mode=IClientScreenModule.TransformMode.NONE;
GlStateManager.depthMask(false);
GlStateManager.disableLighting();
Map<Integer,IModuleData> screenData=updateScreenData(tileEntity);
List<IClientScreenModule> modules=tileEntity.getClientScreenModules();
if (tileEntity.isShowHelp()) {
modules=ScreenTileEntity.getHelpingScreenModules();
}
renderModules(fontrenderer,tileEntity,mode,modules,screenData,tileEntity.getSize());
}
GlStateManager.enableLighting();
GlStateManager.depthMask(true);
GlStateManager.popMatrix();
}","@Override public void render(ScreenTileEntity tileEntity,double x,double y,double z,float partialTicks,int destroyStage,float alpha){
  GlStateManager.pushMatrix();
  float f3;
  EnumFacing facing=EnumFacing.SOUTH;
  if (tileEntity != null) {
    IBlockState state=Minecraft.getMinecraft().world.getBlockState(tileEntity.getPos());
    if (state.getBlock() instanceof ScreenBlock || state.getBlock() instanceof ScreenHitBlock) {
      facing=state.getValue(BaseBlock.FACING);
    }
  }
switch (facing) {
case NORTH:
    f3=180.0F;
  break;
case WEST:
f3=90.0F;
break;
case EAST:
f3=-90.0F;
break;
case DOWN:
case UP:
case SOUTH:
default :
f3=0.0F;
break;
}
GlStateManager.translate((float)x + 0.5F,(float)y + 0.75F,(float)z + 0.5F);
GlStateManager.rotate(-f3,0.0F,1.0F,0.0F);
GlStateManager.translate(0.0F,-0.2500F,-0.4375F);
if (tileEntity == null) {
GlStateManager.disableLighting();
renderScreenBoard(0,0);
}
 else if (!tileEntity.isTransparent()) {
GlStateManager.disableLighting();
renderScreenBoard(tileEntity.getSize(),tileEntity.getColor());
}
if (tileEntity != null && tileEntity.isRenderable()) {
FontRenderer fontrenderer=this.getFontRenderer();
IClientScreenModule.TransformMode mode=IClientScreenModule.TransformMode.NONE;
GlStateManager.depthMask(false);
GlStateManager.disableLighting();
Map<Integer,IModuleData> screenData=updateScreenData(tileEntity);
List<IClientScreenModule> modules=tileEntity.getClientScreenModules();
if (tileEntity.isShowHelp()) {
modules=ScreenTileEntity.getHelpingScreenModules();
}
renderModules(fontrenderer,tileEntity,mode,modules,screenData,tileEntity.getSize());
}
GlStateManager.enableLighting();
GlStateManager.depthMask(true);
GlStateManager.popMatrix();
}",0.9682491684306016
165664,"/** 
 * Register a module data factory. This is needed so that RFTools know how to deserialize your module data for your screen module. You don't have to do this for any of the builtin module data implementations (like IModuleDataBoolean, IModuleDataInteger and so on). Note that you only need the screen module registry if you have custom data.
 * @param id a unique id in the form modid:name
 * @param dataFactory
 */
void registerModuleDataFactory(String id,IModuleDataFactory dataFactory);","/** 
 * Register a module data factory. This is needed so that RFTools know how to deserialize your module data for your screen module. You don't have to do this for any of the builtin module data implementations (like IModuleDataBoolean, IModuleDataInteger and so on). Note that you only need the screen module registry if you have custom data.
 * @param id a unique id in the form modid:name
 * @param dataFactory
 */
void registerModuleDataFactory(String id,IModuleDataFactory<?> dataFactory);",0.9969666329625884
165665,IModuleDataFactory getModuleDataFactory(String id);,IModuleDataFactory<?> getModuleDataFactory(String id);,0.9714285714285714
165666,"@Override public void registerModuleDataFactory(String id,IModuleDataFactory dataFactory){
  dataFactoryMap.put(id,dataFactory);
}","@Override public void registerModuleDataFactory(String id,IModuleDataFactory<?> dataFactory){
  dataFactoryMap.put(id,dataFactory);
}",0.988593155893536
165667,"@Override public IModuleDataFactory getModuleDataFactory(String id){
  return dataFactoryMap.get(id);
}","@Override public IModuleDataFactory<?> getModuleDataFactory(String id){
  return dataFactoryMap.get(id);
}",0.985645933014354
165668,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiBlockProtector.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiBlockProtector> getGuiClass(){
  return GuiBlockProtector.class;
}",0.8677685950413223
165669,"@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(10,7,8,54)).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  initRedstoneMode();
  Widget toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar).addChild(redstoneMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(10,7,8,54)).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  initRedstoneMode();
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar).addChild(redstoneMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.9915579432079816
165670,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiBooster.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiBooster> getGuiClass(){
  return GuiBooster.class;
}",0.8868778280542986
165671,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiBuilder.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiBuilder> getGuiClass(){
  return GuiBuilder.class;
}",0.8778280542986425
165672,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiCrafter.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiCrafter> getGuiClass(){
  return GuiCrafter.class;
}",0.8868778280542986
165673,"@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(12,141,10,76)).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  initKeepMode();
  initInternalRecipe();
  Slider listSlider=initRecipeList();
  applyButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"").addButtonEvent(parent -> applyRecipe()).setEnabled(false).setLayoutHint(new PositionalLayout.PositionalHint(212,65,34,16));
  Button rememberButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addButtonEvent(widget -> rememberItems()).setLayoutHint(new PositionalLayout.PositionalHint(148,74,18,16));
  Button forgetButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> forgetItems()).setLayoutHint(new PositionalLayout.PositionalHint(168,74,18,16));
  initRedstoneMode();
  initSpeedMode();
  Widget toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar).addChild(keepItem).addChild(internalRecipe).addChild(recipeList).addChild(listSlider).addChild(applyButton).addChild(redstoneMode).addChild(speedMode).addChild(rememberButton).addChild(forgetButton);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  if (lastSelected != -1 && lastSelected < tileEntity.getSizeInventory()) {
    recipeList.setSelected(lastSelected);
  }
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(12,141,10,76)).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  initKeepMode();
  initInternalRecipe();
  Slider listSlider=initRecipeList();
  applyButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"").addButtonEvent(parent -> applyRecipe()).setEnabled(false).setLayoutHint(new PositionalLayout.PositionalHint(212,65,34,16));
  Button rememberButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").addButtonEvent(widget -> rememberItems()).setLayoutHint(new PositionalLayout.PositionalHint(148,74,18,16));
  Button forgetButton=new Button(mc,this).setText(""String_Node_Str"").setTooltips(""String_Node_Str"").addButtonEvent(widget -> forgetItems()).setLayoutHint(new PositionalLayout.PositionalHint(168,74,18,16));
  initRedstoneMode();
  initSpeedMode();
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar).addChild(keepItem).addChild(internalRecipe).addChild(recipeList).addChild(listSlider).addChild(applyButton).addChild(redstoneMode).addChild(speedMode).addChild(rememberButton).addChild(forgetButton);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  if (lastSelected != -1 && lastSelected < tileEntity.getSizeInventory()) {
    recipeList.setSelected(lastSelected);
  }
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.9968345323741008
165674,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiElevator.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiElevator> getGuiClass(){
  return GuiElevator.class;
}",0.8660714285714286
165675,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiEnderMonitor.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiEnderMonitor> getGuiClass(){
  return GuiEnderMonitor.class;
}",0.8728813559322034
165676,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiEndergenic.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiEndergenic> getGuiClass(){
  return GuiEndergenic.class;
}",0.8695652173913043
165677,"@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setFilledRectThickness(1).setHorizontal().setDesiredHeight(12).setMaxValue(maxEnergyStored).setShowText(true);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  Label descriptionLabel=new Label(mc,this).setText(""String_Node_Str"").setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT);
  lastRfPerTick=new TextField(mc,this).setText(""String_Node_Str"").setDesiredWidth(90).setDesiredHeight(14);
  Panel p1=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"").setDesiredWidth(70)).addChild(lastRfPerTick);
  lastLostPearls=new TextField(mc,this).setText(""String_Node_Str"").setDesiredWidth(90).setDesiredHeight(14);
  Panel p2=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"").setDesiredWidth(70)).addChild(lastLostPearls);
  lastLaunchedPearls=new TextField(mc,this).setText(""String_Node_Str"").setDesiredWidth(90).setDesiredHeight(14);
  Panel p3=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"").setDesiredWidth(70)).addChild(lastLaunchedPearls);
  lastOpportunities=new TextField(mc,this).setText(""String_Node_Str"").setDesiredWidth(90).setDesiredHeight(14);
  Panel p4=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"").setDesiredWidth(70)).addChild(lastOpportunities);
  Widget toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout()).addChild(energyBar).addChild(descriptionLabel).addChild(p1).addChild(p2).addChild(p3).addChild(p4);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,ENDERGENIC_WIDTH,ENDERGENIC_HEIGHT));
  window=new mcjty.lib.gui.Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setFilledRectThickness(1).setHorizontal().setDesiredHeight(12).setMaxValue(maxEnergyStored).setShowText(true);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  Label descriptionLabel=new Label(mc,this).setText(""String_Node_Str"").setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT);
  lastRfPerTick=new TextField(mc,this).setText(""String_Node_Str"").setDesiredWidth(90).setDesiredHeight(14);
  Panel p1=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"").setDesiredWidth(70)).addChild(lastRfPerTick);
  lastLostPearls=new TextField(mc,this).setText(""String_Node_Str"").setDesiredWidth(90).setDesiredHeight(14);
  Panel p2=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"").setDesiredWidth(70)).addChild(lastLostPearls);
  lastLaunchedPearls=new TextField(mc,this).setText(""String_Node_Str"").setDesiredWidth(90).setDesiredHeight(14);
  Panel p3=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"").setDesiredWidth(70)).addChild(lastLaunchedPearls);
  lastOpportunities=new TextField(mc,this).setText(""String_Node_Str"").setDesiredWidth(90).setDesiredHeight(14);
  Panel p4=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new Label(mc,this).setText(""String_Node_Str"").setDesiredWidth(70)).addChild(lastOpportunities);
  Panel toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new VerticalLayout()).addChild(energyBar).addChild(descriptionLabel).addChild(p1).addChild(p2).addChild(p3).addChild(p4);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,ENDERGENIC_WIDTH,ENDERGENIC_HEIGHT));
  window=new mcjty.lib.gui.Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.9971700540262414
165678,"@Override public void initGui(){
  super.initGui();
  Widget toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout());
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
}","@Override public void initGui(){
  super.initGui();
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout());
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
}",0.9783037475345168
165679,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiPearlInjector.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiPearlInjector> getGuiClass(){
  return GuiPearlInjector.class;
}",0.8535564853556485
165680,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiEnvironmentalController.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiEnvironmentalController> getGuiClass(){
  return GuiEnvironmentalController.class;
}",0.862453531598513
165681,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiCoalGenerator.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiCoalGenerator> getGuiClass(){
  return GuiCoalGenerator.class;
}",0.8702928870292888
165682,"@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(10,7,8,54)).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  initRedstoneMode();
  Widget toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar).addChild(redstoneMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(10,7,8,54)).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  initRedstoneMode();
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar).addChild(redstoneMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.9915579432079816
165683,"@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(10,7,8,54)).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  Widget toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}","@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored();
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(10,7,8,54)).setShowText(false);
  energyBar.setValue(GenericEnergyStorageTileEntity.getCurrentRF());
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
}",0.9909315746084087
165684,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiMachineInfuser.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiMachineInfuser> getGuiClass(){
  return GuiMachineInfuser.class;
}",0.8760330578512396
165685,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiItemFilter.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiItemFilter> getGuiClass(){
  return GuiItemFilter.class;
}",0.8782608695652174
165686,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiCounter.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiCounter> getGuiClass(){
  return GuiCounter.class;
}",0.9049773755656108
165687,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiInvChecker.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiInvChecker> getGuiClass(){
  return GuiInvChecker.class;
}",0.8695652173913043
165688,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiSensor.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiSensor> getGuiClass(){
  return GuiSensor.class;
}",0.8715596330275229
165689,"@SideOnly(Side.CLIENT) @Override public Class<? extends GenericGuiContainer> getGuiClass(){
  return GuiSequencer.class;
}","@SideOnly(Side.CLIENT) @Override public Class<GuiSequencer> getGuiClass(){
  return GuiSequencer.class;
}",0.8722466960352423
165690,"private void restart(){
  sendServerCommand(RFToolsMessages.INSTANCE,BuilderTileEntity.CMD_RESTART,new Argument(""String_Node_Str"",RedstoneMode.values()[redstoneMode.getCurrentChoiceIndex()].getDescription()));
}","private void restart(){
  sendServerCommand(RFToolsMessages.INSTANCE,BuilderTileEntity.CMD_RESTART);
}",0.6517571884984026
165691,"private void changeRedstoneMode(){
  tileEntity.setRSMode(RedstoneMode.values()[redstoneMode.getCurrentChoiceIndex()]);
  sendServerCommand(RFToolsMessages.INSTANCE,BuilderTileEntity.CMD_MODE,new Argument(""String_Node_Str"",RedstoneMode.values()[redstoneMode.getCurrentChoiceIndex()].getDescription()));
}","private void changeRedstoneMode(){
  tileEntity.setRSMode(RedstoneMode.values()[redstoneMode.getCurrentChoiceIndex()]);
  sendServerCommand(RFToolsMessages.INSTANCE,BuilderTileEntity.CMD_SETRSMODE,new Argument(""String_Node_Str"",RedstoneMode.values()[redstoneMode.getCurrentChoiceIndex()].getDescription()));
}",0.9918433931484504
165692,"private static int getScanId(NBTTagCompound tagCompound){
  if (tagCompound.hasKey(""String_Node_Str"")) {
    return tagCompound.getInteger(""String_Node_Str"");
  }
  Shape shape=getShape(tagCompound);
  if (shape == Shape.SHAPE_COMPOSITION) {
    NBTTagList children=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    for (int i=0; i < children.tagCount(); i++) {
      NBTTagCompound childTag=children.getCompoundTagAt(i);
      int id=getScanId(childTag);
      if (id != 0) {
        return id;
      }
    }
  }
  return 0;
}","public static int getScanId(ItemStack stack){
  if (ItemStackTools.isEmpty(stack)) {
    return 0;
  }
  NBTTagCompound tagCompound=getCompound(stack);
  return tagCompound.getInteger(""String_Node_Str"");
}",0.1613756613756613
165693,"private boolean renderFaces(Tessellator tessellator,final VertexBuffer buffer,ItemStack stack,boolean showScan,boolean grayscale,int scanId){
  RenderData data=getRenderDataAndCreate(shapeID);
  if (data.isWantData() || waitForNewRequest > 0) {
    if (waitForNewRequest <= 0) {
      RFToolsMessages.INSTANCE.sendToServer(new PacketRequestShapeData(stack,shapeID));
      waitForNewRequest=20;
      data.setWantData(false);
    }
 else {
      waitForNewRequest--;
    }
  }
 else {
    long check=calculateChecksum(stack);
    if (!data.hasData() || check != data.getChecksum()) {
      data.setChecksum(check);
      data.setWantData(true);
    }
  }
  boolean needScanSound=false;
  if (data.getPlanes() != null) {
    long time=System.currentTimeMillis();
    for (    RenderData.RenderPlane plane : data.getPlanes()) {
      if (plane != null) {
        if (plane.isDirty()) {
          createRenderData(tessellator,buffer,plane,data,grayscale);
          plane.markClean();
        }
        boolean flash=showScan && (plane.getBirthtime() > time - ScannerConfiguration.projectorFlashTimeout);
        if (flash) {
          needScanSound=true;
          GlStateManager.enableBlend();
          GlStateManager.blendFunc(GL11.GL_ONE,GL11.GL_ONE);
        }
        plane.render();
        if (flash) {
          GlStateManager.disableBlend();
          GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
        }
      }
    }
  }
  if (scanId != -1) {
    extraDataCounter--;
    if (extraDataCounter <= 0) {
      extraDataCounter=10;
      ScanDataManagerClient.getScansClient().requestExtraDataClient(scanId);
    }
    ScanExtraData extraData=ScanDataManagerClient.getScansClient().getExtraDataClient(scanId);
    for (    ScanExtraData.Beacon beacon : extraData.getBeacons()) {
      int x=beacon.getPos().getX();
      int y=beacon.getPos().getY() + 1;
      int z=beacon.getPos().getZ();
      BeaconType type=beacon.getType();
      GlStateManager.translate(x,y,z);
      RenderData.RenderElement element=getBeaconElement(tessellator,buffer,type,beacon.isDoBeacon());
      element.render();
      GlStateManager.translate(-x,-y,-z);
    }
  }
  return needScanSound;
}","private boolean renderFaces(Tessellator tessellator,final VertexBuffer buffer,ItemStack stack,boolean showScan,boolean grayscale,int scanId){
  RenderData data=getRenderDataAndCreate(shapeID);
  if (data.isWantData() || waitForNewRequest > 0) {
    if (waitForNewRequest <= 0) {
      RFToolsMessages.INSTANCE.sendToServer(new PacketRequestShapeData(stack,shapeID));
      waitForNewRequest=20;
      data.setWantData(false);
    }
 else {
      waitForNewRequest--;
    }
  }
 else {
    long check=calculateChecksum(stack);
    if (!data.hasData() || check != data.getChecksum()) {
      data.setChecksum(check);
      data.setWantData(true);
    }
  }
  boolean needScanSound=false;
  if (data.getPlanes() != null) {
    long time=System.currentTimeMillis();
    for (    RenderData.RenderPlane plane : data.getPlanes()) {
      if (plane != null) {
        if (plane.isDirty()) {
          createRenderData(tessellator,buffer,plane,data,grayscale);
          plane.markClean();
        }
        boolean flash=showScan && (plane.getBirthtime() > time - ScannerConfiguration.projectorFlashTimeout);
        if (flash) {
          needScanSound=true;
          GlStateManager.enableBlend();
          GlStateManager.blendFunc(GL11.GL_ONE,GL11.GL_ONE);
        }
        plane.render();
        if (flash) {
          GlStateManager.disableBlend();
          GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
        }
      }
    }
  }
  int recursiveScanId=ShapeCardItem.getScanIdRecursive(stack);
  if (recursiveScanId > 0) {
    extraDataCounter--;
    if (extraDataCounter <= 0) {
      extraDataCounter=10;
      ScanDataManagerClient.getScansClient().requestExtraDataClient(recursiveScanId);
    }
    ScanExtraData extraData=ScanDataManagerClient.getScansClient().getExtraDataClient(recursiveScanId);
    for (    ScanExtraData.Beacon beacon : extraData.getBeacons()) {
      int x=beacon.getPos().getX();
      int y=beacon.getPos().getY() + 1;
      int z=beacon.getPos().getZ();
      BeaconType type=beacon.getType();
      GlStateManager.translate(x,y,z);
      RenderData.RenderElement element=getBeaconElement(tessellator,buffer,type,beacon.isDoBeacon());
      element.render();
      GlStateManager.translate(-x,-y,-z);
    }
  }
  return needScanSound;
}",0.9755772646536413
165694,"@Override public void addProbeInfo(ProbeMode mode,IProbeInfo probeInfo,EntityPlayer player,World world,IBlockState blockState,IProbeHitData data){
  super.addProbeInfo(mode,probeInfo,player,world,blockState,data);
  TileEntity te=world.getTileEntity(data.getPos());
  if (te instanceof BuilderTileEntity) {
    int scan=BuilderTileEntity.getCurrentLevel();
    probeInfo.text(TextFormatting.GREEN + ""String_Node_Str"" + (scan == -1 ? ""String_Node_Str"" : scan));
  }
}","@Override public void addProbeInfo(ProbeMode mode,IProbeInfo probeInfo,EntityPlayer player,World world,IBlockState blockState,IProbeHitData data){
  super.addProbeInfo(mode,probeInfo,player,world,blockState,data);
  TileEntity te=world.getTileEntity(data.getPos());
  if (te instanceof BuilderTileEntity) {
    int scan=((BuilderTileEntity)te).getCurrentLevel();
    probeInfo.text(TextFormatting.GREEN + ""String_Node_Str"" + (scan == -1 ? ""String_Node_Str"" : scan));
  }
}",0.9936034115138592
165695,"@SideOnly(Side.CLIENT) @Override public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  super.getWailaBody(itemStack,currenttip,accessor,config);
  TileEntity te=accessor.getTileEntity();
  if (te instanceof BuilderTileEntity) {
    if (System.currentTimeMillis() - lastTime > 250) {
      lastTime=System.currentTimeMillis();
      BuilderTileEntity builderTileEntity=(BuilderTileEntity)te;
      builderTileEntity.requestCurrentLevel();
    }
    int scan=BuilderTileEntity.getCurrentLevel();
    currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + (scan == -1 ? ""String_Node_Str"" : scan));
  }
  return currenttip;
}","@SideOnly(Side.CLIENT) @Override public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  super.getWailaBody(itemStack,currenttip,accessor,config);
  TileEntity te=accessor.getTileEntity();
  if (te instanceof BuilderTileEntity) {
    if (System.currentTimeMillis() - lastTime > 250) {
      lastTime=System.currentTimeMillis();
      BuilderTileEntity builderTileEntity=(BuilderTileEntity)te;
      builderTileEntity.requestCurrentLevel();
    }
    int scan=BuilderTileEntity.getCurrentLevelClientSide();
    currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + (scan == -1 ? ""String_Node_Str"" : scan));
  }
  return currenttip;
}",0.9929676511954992
165696,"public static int getCurrentLevel(){
  return currentLevel;
}","public int getCurrentLevel(){
  return scan == null ? -1 : scan.getY();
}",0.6865671641791045
165697,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  int cury=getCurrentLevel();
  currentLevel.setText(""String_Node_Str"" + (cury == -1 ? ""String_Node_Str"" : cury));
  ItemStack card=tileEntity.getStackInSlot(BuilderContainer.SLOT_TAB);
  boolean enabled;
  if (ItemStackTools.isEmpty(card)) {
    enabled=false;
  }
 else   if (card.getItem() == BuilderSetup.shapeCardItem) {
    enabled=false;
  }
 else {
    enabled=true;
  }
  modeChoice.setEnabled(enabled);
  rotateButton.setEnabled(enabled);
  updateAnchorSettings(tileEntity.getAnchor());
  drawWindow();
  energyBar.setValue(getCurrentRF());
  tileEntity.requestRfFromServer(RFTools.MODID);
  tileEntity.requestCurrentLevel();
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  int cury=getCurrentLevelClientSide();
  currentLevel.setText(""String_Node_Str"" + (cury == -1 ? ""String_Node_Str"" : cury));
  ItemStack card=tileEntity.getStackInSlot(BuilderContainer.SLOT_TAB);
  boolean enabled;
  if (ItemStackTools.isEmpty(card)) {
    enabled=false;
  }
 else   if (card.getItem() == BuilderSetup.shapeCardItem) {
    enabled=false;
  }
 else {
    enabled=true;
  }
  modeChoice.setEnabled(enabled);
  rotateButton.setEnabled(enabled);
  updateAnchorSettings(tileEntity.getAnchor());
  drawWindow();
  energyBar.setValue(getCurrentRF());
  tileEntity.requestRfFromServer(RFTools.MODID);
  tileEntity.requestCurrentLevel();
}",0.9930747922437672
165698,"@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored(EnumFacing.DOWN);
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(10,6,9,59)).setShowText(false);
  energyBar.setValue(getCurrentRF());
  initRedstoneMode();
  currentLevel=new Label(mc,this).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT);
  currentLevel.setText(""String_Node_Str"").setTooltips(""String_Node_Str"").setLayoutHint(new PositionalLayout.PositionalHint(75,31,40,15));
  Panel positionPanel=setupPositionPanel();
  Panel modePanel=setupModePanel();
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar).addChild(modePanel).addChild(positionPanel).addChild(currentLevel).addChild(redstoneMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
  tileEntity.requestCurrentLevel();
}","@Override public void initGui(){
  super.initGui();
  int maxEnergyStored=tileEntity.getMaxEnergyStored(EnumFacing.DOWN);
  energyBar=new EnergyBar(mc,this).setVertical().setMaxValue(maxEnergyStored).setLayoutHint(new PositionalLayout.PositionalHint(10,6,9,59)).setShowText(false);
  energyBar.setValue(getCurrentRF());
  initRedstoneMode();
  currentLevel=new Button(mc,this);
  currentLevel.setText(""String_Node_Str"").setTooltips(""String_Node_Str"",TextFormatting.YELLOW + ""String_Node_Str"").setLayoutHint(new PositionalLayout.PositionalHint(75,31,45,13)).addButtonEvent(parent -> restart());
  Panel positionPanel=setupPositionPanel();
  Panel modePanel=setupModePanel();
  Panel toplevel=new Panel(mc,this).setBackground(iconLocation).setLayout(new PositionalLayout()).addChild(energyBar).addChild(modePanel).addChild(positionPanel).addChild(currentLevel).addChild(redstoneMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
  tileEntity.requestRfFromServer(RFTools.MODID);
  tileEntity.requestCurrentLevel();
}",0.9300567107750471
165699,"@Override public IFormula createFormula(){
  return new IFormula(){
    private BlockPos thisCoord;
    private BlockPos dimension;
    private BlockPos offset;
    private IBlockState blockState;
    private List<IFormula> formulas=new ArrayList<>();
    private List<Bounds> bounds=new ArrayList<>();
    private List<ShapeModifier> modifiers=new ArrayList<>();
    private List<IBlockState> blockStates=new ArrayList<>();
    @Override public void setup(    BlockPos thisCoord,    BlockPos dimension,    BlockPos offset,    NBTTagCompound card){
      this.thisCoord=thisCoord;
      this.dimension=dimension;
      this.offset=offset;
      if (card == null) {
        return;
      }
      NBTTagList children=card.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
      for (int i=0; i < children.tagCount(); i++) {
        NBTTagCompound childTag=children.getCompoundTagAt(i);
        IFormula formula=ShapeCardItem.createCorrectFormula(childTag);
        String op=childTag.getString(""String_Node_Str"");
        ShapeOperation operation=ShapeOperation.getByName(op);
        boolean flip=childTag.getBoolean(""String_Node_Str"");
        String rot=childTag.getString(""String_Node_Str"");
        ShapeRotation rotation=ShapeRotation.getByName(rot);
        modifiers.add(new ShapeModifier(operation,flip,rotation));
        BlockPos dim=ShapeCardItem.getClampedDimension(childTag,ShieldConfiguration.maxShieldDimension);
        BlockPos off=ShapeCardItem.getClampedOffset(childTag,ShieldConfiguration.maxShieldOffset);
        BlockPos o=off.add(offset);
        formula.setup(thisCoord,dim,o,childTag);
        formulas.add(formula);
        dim=rotation.transformDimension(dim);
        BlockPos tl=new BlockPos(o.getX() - dim.getX() / 2,o.getY() - dim.getY() / 2,o.getZ() - dim.getZ() / 2);
        bounds.add(new Bounds(tl,tl.add(dim),o));
        IBlockState state=null;
        if (childTag.hasKey(""String_Node_Str"")) {
          Block block=ForgeRegistries.BLOCKS.getValue(new ResourceLocation(childTag.getString(""String_Node_Str"")));
          if (block != null) {
            int meta=childTag.getInteger(""String_Node_Str"");
            state=block.getStateFromMeta(meta);
          }
        }
        blockStates.add(state);
      }
    }
    @Override public IBlockState getLastState(){
      return blockState;
    }
    @Override public int isInside(    int x,    int y,    int z){
      blockState=null;
      x-=thisCoord.getX();
      y-=thisCoord.getY();
      z-=thisCoord.getZ();
      int ok=0;
      for (int i=0; i < formulas.size(); i++) {
        IFormula formula=formulas.get(i);
        Bounds bounds=this.bounds.get(i);
        ShapeModifier modifier=modifiers.get(i);
        int inside=0;
        if (bounds.in(x,y,z)) {
          int tx=x;
          int ty=y;
          int tz=z;
          BlockPos o=bounds.getOffset();
switch (modifier.getRotation()) {
default :
case NONE:
            break;
case X:
          tx=x;
        ty=(z - o.getZ()) + o.getY();
      tz=(y - o.getY()) + o.getZ();
    break;
case Y:
  tx=(z - o.getZ()) + o.getX();
;
ty=y;
tz=(x - o.getX()) + o.getZ();
break;
case Z:
tx=(y - o.getY()) + o.getX();
;
ty=(x - o.getX()) + o.getY();
tz=z;
break;
}
if (modifier.isFlipY()) {
ty=o.getY() - (ty - o.getY());
}
inside=formula.isInside(tx + thisCoord.getX(),ty + thisCoord.getY(),tz + thisCoord.getZ());
}
switch (modifier.getOperation()) {
case UNION:
if (inside == 1) {
ok=1;
blockState=blockStates.get(i);
if (blockState == null) {
blockState=formula.getLastState();
}
}
break;
case SUBTRACT:
if (inside == 1) {
ok=0;
}
break;
case INTERSECT:
if (inside == 1 && ok == 1) {
ok=1;
blockState=blockStates.get(i);
if (blockState == null) {
blockState=formula.getLastState();
}
}
 else {
ok=0;
}
break;
}
}
return ok;
}
@Override public boolean isCustom(){
return true;
}
}
;
}","@Override public IFormula createFormula(){
  return new IFormula(){
    private BlockPos thisCoord;
    private BlockPos dimension;
    private BlockPos offset;
    private IBlockState blockState;
    private List<IFormula> formulas=new ArrayList<>();
    private List<Bounds> bounds=new ArrayList<>();
    private List<ShapeModifier> modifiers=new ArrayList<>();
    private List<IBlockState> blockStates=new ArrayList<>();
    @Override public void setup(    BlockPos thisCoord,    BlockPos dimension,    BlockPos offset,    NBTTagCompound card){
      this.thisCoord=thisCoord;
      this.dimension=dimension;
      this.offset=offset;
      if (card == null) {
        return;
      }
      int dx=dimension.getX();
      int dy=dimension.getY();
      int dz=dimension.getZ();
      if (dx <= 0 || dy <= 0 || dz <= 0) {
        return;
      }
      NBTTagList children=card.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
      for (int i=0; i < children.tagCount(); i++) {
        NBTTagCompound childTag=children.getCompoundTagAt(i);
        IFormula formula=ShapeCardItem.createCorrectFormula(childTag);
        String op=childTag.getString(""String_Node_Str"");
        ShapeOperation operation=ShapeOperation.getByName(op);
        boolean flip=childTag.getBoolean(""String_Node_Str"");
        String rot=childTag.getString(""String_Node_Str"");
        ShapeRotation rotation=ShapeRotation.getByName(rot);
        modifiers.add(new ShapeModifier(operation,flip,rotation));
        BlockPos dim=ShapeCardItem.getClampedDimension(childTag,ShieldConfiguration.maxShieldDimension);
        BlockPos off=ShapeCardItem.getClampedOffset(childTag,ShieldConfiguration.maxShieldOffset);
        BlockPos o=off.add(offset);
        formula.setup(thisCoord,dim,o,childTag);
        formulas.add(formula);
        dim=rotation.transformDimension(dim);
        BlockPos tl=new BlockPos(o.getX() - dim.getX() / 2,o.getY() - dim.getY() / 2,o.getZ() - dim.getZ() / 2);
        bounds.add(new Bounds(tl,tl.add(dim),o));
        IBlockState state=null;
        if (childTag.hasKey(""String_Node_Str"")) {
          Block block=ForgeRegistries.BLOCKS.getValue(new ResourceLocation(childTag.getString(""String_Node_Str"")));
          if (block != null) {
            int meta=childTag.getInteger(""String_Node_Str"");
            state=block.getStateFromMeta(meta);
          }
        }
        blockStates.add(state);
      }
    }
    @Override public IBlockState getLastState(){
      return blockState;
    }
    @Override public int isInside(    int x,    int y,    int z){
      blockState=null;
      x-=thisCoord.getX();
      y-=thisCoord.getY();
      z-=thisCoord.getZ();
      int ok=0;
      for (int i=0; i < formulas.size(); i++) {
        IFormula formula=formulas.get(i);
        Bounds bounds=this.bounds.get(i);
        ShapeModifier modifier=modifiers.get(i);
        int inside=0;
        if (bounds.in(x,y,z)) {
          int tx=x;
          int ty=y;
          int tz=z;
          BlockPos o=bounds.getOffset();
switch (modifier.getRotation()) {
default :
case NONE:
            break;
case X:
          tx=x;
        ty=(z - o.getZ()) + o.getY();
      tz=(y - o.getY()) + o.getZ();
    break;
case Y:
  tx=(z - o.getZ()) + o.getX();
;
ty=y;
tz=(x - o.getX()) + o.getZ();
break;
case Z:
tx=(y - o.getY()) + o.getX();
;
ty=(x - o.getX()) + o.getY();
tz=z;
break;
}
if (modifier.isFlipY()) {
ty=o.getY() - (ty - o.getY());
}
inside=formula.isInside(tx + thisCoord.getX(),ty + thisCoord.getY(),tz + thisCoord.getZ());
}
switch (modifier.getOperation()) {
case UNION:
if (inside == 1) {
ok=1;
blockState=blockStates.get(i);
if (blockState == null) {
blockState=formula.getLastState();
}
}
break;
case SUBTRACT:
if (inside == 1) {
ok=0;
}
break;
case INTERSECT:
if (inside == 1 && ok == 1) {
ok=1;
if (blockState == null) {
blockState=blockStates.get(i);
if (blockState == null) {
blockState=formula.getLastState();
}
}
}
 else {
ok=0;
}
break;
}
}
return ok;
}
@Override public boolean isCustom(){
return true;
}
}
;
}",0.9723069105691056
165700,"private void handleSendingEnergy(){
  int energyStored=getEnergyStored();
  if (energyStored <= EndergenicConfiguration.keepRfInBuffer) {
    return;
  }
  energyStored-=EndergenicConfiguration.keepRfInBuffer;
  for (  EnumFacing dir : EnumFacing.VALUES) {
    BlockPos o=getPos().offset(dir);
    TileEntity te=getWorld().getTileEntity(o);
    if (EnergyTools.isEnergyTE(te)) {
      EnumFacing opposite=dir.getOpposite();
      int rfToGive;
      if (EndergenicConfiguration.rfOutput <= energyStored) {
        rfToGive=EndergenicConfiguration.rfOutput;
      }
 else {
        rfToGive=energyStored;
      }
      int received;
      if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
        if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
          received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
 else {
          received=0;
        }
      }
 else {
        received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
      }
      energyStored-=storage.extractEnergy(received,false);
      if (energyStored <= 0) {
        break;
      }
    }
  }
}","private void handleSendingEnergy(){
  int energyStored=getEnergyStored();
  if (energyStored <= EndergenicConfiguration.keepRfInBuffer) {
    return;
  }
  energyStored-=EndergenicConfiguration.keepRfInBuffer;
  for (  EnumFacing dir : EnumFacing.VALUES) {
    BlockPos o=getPos().offset(dir);
    TileEntity te=getWorld().getTileEntity(o);
    EnumFacing opposite=dir.getOpposite();
    if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
      int rfToGive;
      if (EndergenicConfiguration.rfOutput <= energyStored) {
        rfToGive=EndergenicConfiguration.rfOutput;
      }
 else {
        rfToGive=energyStored;
      }
      int received;
      if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
        if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
          received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
 else {
          received=0;
        }
      }
 else {
        received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
      }
      energyStored-=storage.extractEnergy(received,false);
      if (energyStored <= 0) {
        break;
      }
    }
  }
}",0.935930735930736
165701,"private void handleSendingEnergy(){
  int energyStored=getEnergyStored();
  for (  EnumFacing facing : EnumFacing.VALUES) {
    BlockPos pos=getPos().offset(facing);
    TileEntity te=getWorld().getTileEntity(pos);
    if (EnergyTools.isEnergyTE(te)) {
      EnumFacing opposite=facing.getOpposite();
      int rfToGive=CoalGeneratorConfiguration.SENDPERTICK <= energyStored ? CoalGeneratorConfiguration.SENDPERTICK : energyStored;
      int received;
      if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
        if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
          received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
 else {
          received=0;
        }
      }
 else {
        received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
      }
      energyStored-=storage.extractEnergy(received,false);
      if (energyStored <= 0) {
        break;
      }
    }
  }
}","private void handleSendingEnergy(){
  int energyStored=getEnergyStored();
  for (  EnumFacing facing : EnumFacing.VALUES) {
    BlockPos pos=getPos().offset(facing);
    TileEntity te=getWorld().getTileEntity(pos);
    EnumFacing opposite=facing.getOpposite();
    if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
      int rfToGive=CoalGeneratorConfiguration.SENDPERTICK <= energyStored ? CoalGeneratorConfiguration.SENDPERTICK : energyStored;
      int received;
      if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
        if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
          received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
 else {
          received=0;
        }
      }
 else {
        received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
      }
      energyStored-=storage.extractEnergy(received,false);
      if (energyStored <= 0) {
        break;
      }
    }
  }
}",0.924102564102564
165702,"private void sendOutEnergy(){
  int energyStored=getEnergyStored();
  for (  EnumFacing face : EnumFacing.VALUES) {
    if (modes[face.ordinal()] == Mode.MODE_OUTPUT) {
      BlockPos pos=getPos().offset(face);
      TileEntity te=getWorld().getTileEntity(pos);
      if (EnergyTools.isEnergyTE(te)) {
        if ((!(te instanceof PowerCellTileEntity)) || getNetworkId() == -1 || ((PowerCellTileEntity)te).getNetworkId() != getNetworkId()) {
          EnumFacing opposite=face.getOpposite();
          float factor=getCostFactor();
          int rfPerTick=getRfPerTickPerSide();
          int received;
          int rfToGive;
          if (rfPerTick <= ((int)(energyStored / factor))) {
            rfToGive=rfPerTick;
          }
 else {
            rfToGive=(int)(energyStored / factor);
          }
          if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
            if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
              received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
            }
 else {
              received=0;
            }
          }
 else {
            received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
          }
          energyStored-=extractEnergyInternal(received,false,Integer.MAX_VALUE);
          if (energyStored <= 0) {
            break;
          }
        }
      }
    }
  }
}","private void sendOutEnergy(){
  int energyStored=getEnergyStored();
  for (  EnumFacing face : EnumFacing.VALUES) {
    if (modes[face.ordinal()] == Mode.MODE_OUTPUT) {
      BlockPos pos=getPos().offset(face);
      TileEntity te=getWorld().getTileEntity(pos);
      EnumFacing opposite=face.getOpposite();
      if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
        if ((!(te instanceof PowerCellTileEntity)) || getNetworkId() == -1 || ((PowerCellTileEntity)te).getNetworkId() != getNetworkId()) {
          float factor=getCostFactor();
          int rfPerTick=getRfPerTickPerSide();
          int received;
          int rfToGive;
          if (rfPerTick <= ((int)(energyStored / factor))) {
            rfToGive=rfPerTick;
          }
 else {
            rfToGive=(int)(energyStored / factor);
          }
          if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
            if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
              received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
            }
 else {
              received=0;
            }
          }
 else {
            received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
          }
          energyStored-=extractEnergyInternal(received,false,Integer.MAX_VALUE);
          if (energyStored <= 0) {
            break;
          }
        }
      }
    }
  }
}",0.8464260438782731
165703,"private void checkStateServer(){
  long time=System.currentTimeMillis();
  if (lastTime == 0) {
    lastTime=time;
  }
 else   if (time > lastTime + 2000) {
    lastRfPerTickIn=(int)(50 * powerIn / (time - lastTime));
    lastRfPerTickOut=(int)(50 * powerOut / (time - lastTime));
    lastTime=time;
    powerIn=0;
    powerOut=0;
  }
  boolean redstoneSignal=powerLevel > 0;
  int[] rf=redstoneSignal ? rfOn : rfOff;
  boolean[] inputMode=redstoneSignal ? inputModeOn : inputModeOff;
  int energyStored=getEnergyStored();
  if (energyStored <= 0) {
    return;
  }
  IBlockState state=getWorld().getBlockState(getPos());
  int meta=state.getBlock().getMetaFromState(state);
  for (  EnumFacing facing : EnumFacing.VALUES) {
    int side=BlockTools.reorient(facing,meta).ordinal();
    if (rf[side] > 0 && !inputMode[side]) {
      TileEntity te=getWorld().getTileEntity(getPos().offset(facing));
      if (EnergyTools.isEnergyTE(te)) {
        EnumFacing opposite=facing.getOpposite();
        int rfToGive;
        if (rf[side] <= energyStored) {
          rfToGive=rf[side];
        }
 else {
          rfToGive=energyStored;
        }
        int received;
        if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
          if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
            received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
          }
 else {
            received=0;
          }
        }
 else {
          received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
        powerOut+=received;
        energyStored-=storage.extractEnergy(received,false);
        if (energyStored <= 0) {
          return;
        }
      }
    }
  }
}","private void checkStateServer(){
  long time=System.currentTimeMillis();
  if (lastTime == 0) {
    lastTime=time;
  }
 else   if (time > lastTime + 2000) {
    lastRfPerTickIn=(int)(50 * powerIn / (time - lastTime));
    lastRfPerTickOut=(int)(50 * powerOut / (time - lastTime));
    lastTime=time;
    powerIn=0;
    powerOut=0;
  }
  boolean redstoneSignal=powerLevel > 0;
  int[] rf=redstoneSignal ? rfOn : rfOff;
  boolean[] inputMode=redstoneSignal ? inputModeOn : inputModeOff;
  int energyStored=getEnergyStored();
  if (energyStored <= 0) {
    return;
  }
  IBlockState state=getWorld().getBlockState(getPos());
  int meta=state.getBlock().getMetaFromState(state);
  for (  EnumFacing facing : EnumFacing.VALUES) {
    int side=BlockTools.reorient(facing,meta).ordinal();
    if (rf[side] > 0 && !inputMode[side]) {
      TileEntity te=getWorld().getTileEntity(getPos().offset(facing));
      EnumFacing opposite=facing.getOpposite();
      if (EnergyTools.isEnergyTE(te) || (te != null && te.hasCapability(CapabilityEnergy.ENERGY,opposite))) {
        int rfToGive;
        if (rf[side] <= energyStored) {
          rfToGive=rf[side];
        }
 else {
          rfToGive=energyStored;
        }
        int received;
        if (RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyConnection(te)) {
          if (RedstoneFluxCompatibility.canConnectEnergy(te,opposite)) {
            received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
          }
 else {
            received=0;
          }
        }
 else {
          received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
        }
        powerOut+=received;
        energyStored-=storage.extractEnergy(received,false);
        if (energyStored <= 0) {
          return;
        }
      }
    }
  }
}",0.9353176874642244
165704,"@Override public boolean isItemValidForSlot(int index,ItemStack stack){
  if (index == CoalGeneratorContainer.SLOT_CHARGEITEM) {
    return stack.getItem() instanceof IEnergyContainerItem;
  }
 else   if (index == CoalGeneratorContainer.SLOT_COALINPUT) {
    return stack.getItem() == Items.COAL;
  }
  return true;
}","@Override public boolean isItemValidForSlot(int index,ItemStack stack){
  if (index == CoalGeneratorContainer.SLOT_CHARGEITEM) {
    return stack.getItem() instanceof IEnergyContainerItem;
  }
 else   if (index == CoalGeneratorContainer.SLOT_COALINPUT) {
    return stack.getItem() == Items.COAL || stack.getItem() == Item.getItemFromBlock(Blocks.COAL_BLOCK);
  }
  return true;
}",0.90961262553802
165705,"@Override @SideOnly(Side.CLIENT) public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  super.getWailaBody(itemStack,currenttip,accessor,config);
  TileEntity tileEntity=accessor.getTileEntity();
  if (tileEntity instanceof PowerCellTileEntity) {
    PowerCellTileEntity powerCellTileEntity=(PowerCellTileEntity)tileEntity;
    int id=powerCellTileEntity.getNetworkId();
    if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
      if (id != -1) {
        currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + new DecimalFormat(""String_Node_Str"").format(id));
      }
 else {
        currenttip.add(TextFormatting.GREEN + ""String_Node_Str"");
      }
    }
    if (System.currentTimeMillis() - lastTime > 250) {
      lastTime=System.currentTimeMillis();
      RFToolsMessages.INSTANCE.sendToServer(new PacketGetInfoFromServer(RFTools.MODID,new PowerCellInfoPacketServer(powerCellTileEntity)));
    }
    int total=(PowerCellInfoPacketClient.tooltipBlocks - PowerCellInfoPacketClient.tooltipAdvancedBlocks - PowerCellInfoPacketClient.tooltipSimpleBlocks) * PowerCellConfiguration.rfPerNormalCell;
    total+=PowerCellInfoPacketClient.tooltipAdvancedBlocks * PowerCellConfiguration.rfPerNormalCell * advancedFactor;
    total+=PowerCellInfoPacketClient.tooltipSimpleBlocks * PowerCellConfiguration.rfPerNormalCell / PowerCellConfiguration.simpleFactor;
    currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + PowerCellInfoPacketClient.tooltipEnergy+ ""String_Node_Str""+ total+ ""String_Node_Str""+ PowerCellInfoPacketClient.tooltipRfPerTick+ ""String_Node_Str"");
    PowerCellTileEntity.Mode mode=powerCellTileEntity.getMode(accessor.getSide());
    if (mode == PowerCellTileEntity.Mode.MODE_INPUT) {
      currenttip.add(TextFormatting.YELLOW + ""String_Node_Str"");
    }
 else     if (mode == PowerCellTileEntity.Mode.MODE_OUTPUT) {
      int cost=(int)((PowerCellInfoPacketClient.tooltipCostFactor - 1.0f) * 1000.0f);
      currenttip.add(TextFormatting.YELLOW + ""String_Node_Str"" + cost / 10 + ""String_Node_Str"" + cost % 10 + ""String_Node_Str"");
    }
  }
  return currenttip;
}","@Override @SideOnly(Side.CLIENT) public List<String> getWailaBody(ItemStack itemStack,List<String> currenttip,IWailaDataAccessor accessor,IWailaConfigHandler config){
  super.getWailaBody(itemStack,currenttip,accessor,config);
  TileEntity tileEntity=accessor.getTileEntity();
  if (tileEntity instanceof PowerCellTileEntity) {
    PowerCellTileEntity powerCellTileEntity=(PowerCellTileEntity)tileEntity;
    int id=powerCellTileEntity.getNetworkId();
    if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
      if (id != -1) {
        currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + new DecimalFormat(""String_Node_Str"").format(id));
      }
 else {
        currenttip.add(TextFormatting.GREEN + ""String_Node_Str"");
      }
    }
    if (System.currentTimeMillis() - lastTime > 250) {
      lastTime=System.currentTimeMillis();
      RFToolsMessages.INSTANCE.sendToServer(new PacketGetInfoFromServer(RFTools.MODID,new PowerCellInfoPacketServer(powerCellTileEntity)));
    }
    long total=(PowerCellInfoPacketClient.tooltipBlocks - PowerCellInfoPacketClient.tooltipAdvancedBlocks - (long)PowerCellInfoPacketClient.tooltipSimpleBlocks) * PowerCellConfiguration.rfPerNormalCell;
    total+=(long)PowerCellInfoPacketClient.tooltipAdvancedBlocks * PowerCellConfiguration.rfPerNormalCell * advancedFactor;
    total+=(long)PowerCellInfoPacketClient.tooltipSimpleBlocks * PowerCellConfiguration.rfPerNormalCell / PowerCellConfiguration.simpleFactor;
    if (total > 2000000000) {
      total=2000000000;
    }
    currenttip.add(TextFormatting.GREEN + ""String_Node_Str"" + PowerCellInfoPacketClient.tooltipEnergy+ ""String_Node_Str""+ total+ ""String_Node_Str""+ PowerCellInfoPacketClient.tooltipRfPerTick+ ""String_Node_Str"");
    PowerCellTileEntity.Mode mode=powerCellTileEntity.getMode(accessor.getSide());
    if (mode == PowerCellTileEntity.Mode.MODE_INPUT) {
      currenttip.add(TextFormatting.YELLOW + ""String_Node_Str"");
    }
 else     if (mode == PowerCellTileEntity.Mode.MODE_OUTPUT) {
      int cost=(int)((PowerCellInfoPacketClient.tooltipCostFactor - 1.0f) * 1000.0f);
      currenttip.add(TextFormatting.YELLOW + ""String_Node_Str"" + cost / 10 + ""String_Node_Str"" + cost % 10 + ""String_Node_Str"");
    }
  }
  return currenttip;
}",0.9810648251280908
165706,"public void readFromNBT(NBTTagCompound tagCompound){
  this.energy=tagCompound.getInteger(""String_Node_Str"");
  this.advancedBlocks=tagCompound.getInteger(""String_Node_Str"");
  this.simpleBlocks=tagCompound.getInteger(""String_Node_Str"");
  blocks.clear();
  NBTTagList list=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < list.tagCount(); i++) {
    NBTTagCompound tag=list.getCompoundTagAt(i);
    blocks.add(new GlobalCoordinate(new BlockPos(tag.getInteger(""String_Node_Str""),tag.getInteger(""String_Node_Str""),tag.getInteger(""String_Node_Str"")),tag.getInteger(""String_Node_Str"")));
  }
}","public void readFromNBT(NBTTagCompound tagCompound){
  this.energy=tagCompound.getInteger(""String_Node_Str"");
  this.advancedBlocks=tagCompound.getInteger(""String_Node_Str"");
  this.simpleBlocks=tagCompound.getInteger(""String_Node_Str"");
  blocks.clear();
  NBTTagList list=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < list.tagCount(); i++) {
    NBTTagCompound tag=list.getCompoundTagAt(i);
    blocks.add(new GlobalCoordinate(new BlockPos(tag.getInteger(""String_Node_Str""),tag.getInteger(""String_Node_Str""),tag.getInteger(""String_Node_Str"")),tag.getInteger(""String_Node_Str"")));
  }
  if (energy < 0) {
    energy=calculateMaximumEnergy();
  }
}",0.9538926681783824
165707,"private int receiveEnergyMulti(int maxReceive,boolean simulate){
  PowerCellNetwork.Network network=getNetwork();
  if (getWorld().isRemote) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int totEnergy=PowerCellConfiguration.rfPerNormalCell * (network.getBlockCount() - network.getAdvancedBlockCount() - network.getSimpleBlockCount()) + PowerCellConfiguration.rfPerNormalCell * advancedFactor * network.getAdvancedBlockCount() + +PowerCellConfiguration.rfPerNormalCell * network.getSimpleBlockCount() / simpleFactor;
  int maxInsert=Math.min(totEnergy - network.getEnergy(),maxReceive);
  if (maxInsert > 0) {
    if (!simulate) {
      network.receiveEnergy(maxInsert);
      PowerCellNetwork.getChannels(getWorld()).save(getWorld());
    }
  }
  return maxInsert;
}","private int receiveEnergyMulti(int maxReceive,boolean simulate){
  PowerCellNetwork.Network network=getNetwork();
  if (getWorld().isRemote) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int totEnergy=network.calculateMaximumEnergy();
  int maxInsert=Math.min(totEnergy - network.getEnergy(),maxReceive);
  if (maxInsert > 0) {
    if (!simulate) {
      network.receiveEnergy(maxInsert);
      PowerCellNetwork.getChannels(getWorld()).save(getWorld());
    }
  }
  return maxInsert;
}",0.7298355520751761
165708,"@Override public boolean isItemValidForSlot(int index,ItemStack stack){
  if (index == CoalGeneratorContainer.SLOT_CHARGEITEM) {
    boolean rf=RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyItem(stack.getItem());
    return rf;
  }
 else   if (index == CoalGeneratorContainer.SLOT_COALINPUT) {
    return stack.getItem() == Items.COAL;
  }
  return true;
}","@Override public boolean isItemValidForSlot(int index,ItemStack stack){
  if (index == CoalGeneratorContainer.SLOT_CHARGEITEM) {
    boolean rf=RFTools.redstoneflux && RedstoneFluxCompatibility.isEnergyItem(stack.getItem());
    return rf;
  }
 else   if (index == CoalGeneratorContainer.SLOT_COALINPUT) {
    return stack.getItem() == Items.COAL || stack.getItem() == Item.getItemFromBlock(Blocks.COAL_BLOCK);
  }
  return true;
}",0.921151439299124
165709,"public void addOreSpawn(IBlockState block,IBlockState targetBlock,World world,Random random,int blockXPos,int blockZPos,int minVeinSize,int maxVeinSize,int chancesToSpawn,int minY,int maxY){
  WorldGenMinable minable=new WorldGenMinable(block,(minVeinSize - random.nextInt(maxVeinSize - minVeinSize)),state -> state.getBlock() == targetBlock.getBlock());
  for (int i=0; i < chancesToSpawn; i++) {
    int posX=blockXPos + random.nextInt(16);
    int posY=minY + random.nextInt(maxY - minY);
    int posZ=blockZPos + random.nextInt(16);
    minable.generate(world,random,new BlockPos(posX,posY,posZ));
  }
}","public void addOreSpawn(IBlockState block,IBlockState targetBlock,World world,Random random,int blockXPos,int blockZPos,int minVeinSize,int maxVeinSize,int chancesToSpawn,int minY,int maxY){
  WorldGenMinable minable=new WorldGenMinable(block,(minVeinSize + random.nextInt(maxVeinSize - minVeinSize)),state -> state.getBlock() == targetBlock.getBlock());
  for (int i=0; i < chancesToSpawn; i++) {
    int posX=blockXPos + random.nextInt(16);
    int posY=minY + random.nextInt(maxY - minY);
    int posZ=blockZPos + random.nextInt(16);
    minable.generate(world,random,new BlockPos(posX,posY,posZ));
  }
}",0.99835255354201
165710,"@SubscribeEvent public void onPlayerInteractEvent(PlayerInteractEvent event){
  EntityPlayer player=event.getEntityPlayer();
  if (event instanceof PlayerInteractEvent.LeftClickBlock) {
    checkCreativeClick(event);
  }
 else   if (event instanceof PlayerInteractEvent.RightClickBlock) {
    if (player.isSneaking()) {
      ItemStack heldItem=player.getHeldItemMainhand();
      if (ItemStackTools.isEmpty(heldItem) || !(heldItem.getItem() instanceof SmartWrench)) {
        World world=event.getWorld();
        IBlockState state=world.getBlockState(event.getPos());
        Block block=state.getBlock();
        if (block instanceof ScreenBlock) {
          Vec3d vec=((PlayerInteractEvent.RightClickBlock)event).getHitVec();
          ((ScreenBlock)block).activate(world,event.getPos(),state,player,event.getHand(),event.getFace(),(float)vec.xCoord,(float)vec.yCoord,(float)vec.zCoord);
          ((PlayerInteractEvent.RightClickBlock)event).setUseItem(Event.Result.DENY);
          return;
        }
 else         if (block instanceof ScreenHitBlock) {
          Vec3d vec=((PlayerInteractEvent.RightClickBlock)event).getHitVec();
          ((ScreenHitBlock)block).activate(world,event.getPos(),state,player,event.getHand(),event.getFace(),(float)vec.xCoord,(float)vec.yCoord,(float)vec.zCoord);
          ((PlayerInteractEvent.RightClickBlock)event).setUseItem(Event.Result.DENY);
          return;
        }
      }
    }
  }
  ItemStack heldItem=player.getHeldItem(event.getHand());
  if (ItemStackTools.isEmpty(heldItem) || heldItem.getItem() == null) {
    return;
  }
  if (player.isSneaking() && WrenchChecker.isAWrench(heldItem.getItem())) {
    if (heldItem.getItem() instanceof SmartWrenchItem) {
      if (SmartWrenchItem.getCurrentMode(heldItem) == SmartWrenchMode.MODE_SELECT) {
        return;
      }
    }
    World world=event.getWorld();
    int x=event.getPos().getX();
    int y=event.getPos().getY();
    int z=event.getPos().getZ();
    Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(world,x,y,z);
    if (BlockProtectors.checkHarvestProtection(x,y,z,world,protectors)) {
      event.setCanceled(true);
    }
  }
}","@SubscribeEvent public void onPlayerInteractEvent(PlayerInteractEvent event){
  EntityPlayer player=event.getEntityPlayer();
  if (event instanceof PlayerInteractEvent.LeftClickBlock) {
    checkCreativeClick(event);
  }
 else   if (event instanceof PlayerInteractEvent.RightClickBlock) {
    if (player.isSneaking()) {
      ItemStack heldItem=player.getHeldItemMainhand();
      if (ItemStackTools.isEmpty(heldItem) || !(heldItem.getItem() instanceof SmartWrench)) {
        World world=event.getWorld();
        IBlockState state=world.getBlockState(event.getPos());
        Block block=state.getBlock();
        if (block instanceof ScreenBlock) {
          Vec3d vec=((PlayerInteractEvent.RightClickBlock)event).getHitVec();
          ((ScreenBlock)block).activate(world,event.getPos(),state,player,event.getHand(),event.getFace(),(float)vec.x,(float)vec.y,(float)vec.z);
          ((PlayerInteractEvent.RightClickBlock)event).setUseItem(Event.Result.DENY);
          return;
        }
 else         if (block instanceof ScreenHitBlock) {
          Vec3d vec=((PlayerInteractEvent.RightClickBlock)event).getHitVec();
          ((ScreenHitBlock)block).activate(world,event.getPos(),state,player,event.getHand(),event.getFace(),(float)vec.x,(float)vec.y,(float)vec.z);
          ((PlayerInteractEvent.RightClickBlock)event).setUseItem(Event.Result.DENY);
          return;
        }
      }
    }
  }
  ItemStack heldItem=player.getHeldItem(event.getHand());
  if (ItemStackTools.isEmpty(heldItem) || heldItem.getItem() == null) {
    return;
  }
  if (player.isSneaking() && WrenchChecker.isAWrench(heldItem.getItem())) {
    if (heldItem.getItem() instanceof SmartWrenchItem) {
      if (SmartWrenchItem.getCurrentMode(heldItem) == SmartWrenchMode.MODE_SELECT) {
        return;
      }
    }
    World world=event.getWorld();
    int x=event.getPos().getX();
    int y=event.getPos().getY();
    int z=event.getPos().getZ();
    Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(world,x,y,z);
    if (BlockProtectors.checkHarvestProtection(x,y,z,world,protectors)) {
      event.setCanceled(true);
    }
  }
}",0.9809302325581396
165711,"@SubscribeEvent public void onDetonate(ExplosionEvent.Detonate event){
  Explosion explosion=event.getExplosion();
  Vec3d explosionVector=explosion.getPosition();
  Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(event.getWorld(),(int)explosionVector.x,(int)explosionVector.y,(int)explosionVector.z);
  if (protectors.isEmpty()) {
    return;
  }
  List<BlockPos> affectedBlocks=event.getAffectedBlocks();
  List<BlockPos> toremove=new ArrayList<>();
  int rf=0;
  for (  GlobalCoordinate protector : protectors) {
    BlockPos pos=protector.getCoordinate();
    TileEntity te=event.getWorld().getTileEntity(pos);
    if (te instanceof BlockProtectorTileEntity) {
      BlockProtectorTileEntity blockProtectorTileEntity=(BlockProtectorTileEntity)te;
      for (      BlockPos block : affectedBlocks) {
        BlockPos relative=blockProtectorTileEntity.absoluteToRelative(block);
        boolean b=blockProtectorTileEntity.isProtected(relative);
        if (b) {
          Vec3d blockVector=new Vec3d(block);
          double distanceTo=explosionVector.distanceTo(blockVector);
          int rfneeded=blockProtectorTileEntity.attemptExplosionProtection((float)(distanceTo / explosion.explosionSize),explosion.explosionSize);
          if (rfneeded > 0) {
            toremove.add(block);
            rf+=rfneeded;
          }
 else {
            blockProtectorTileEntity.removeProtection(relative);
          }
        }
      }
    }
  }
  affectedBlocks.removeAll(toremove);
}","@SubscribeEvent public void onDetonate(ExplosionEvent.Detonate event){
  Explosion explosion=event.getExplosion();
  Vec3d explosionVector=explosion.getPosition();
  Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(event.getWorld(),(int)explosionVector.x,(int)explosionVector.y,(int)explosionVector.z);
  if (protectors.isEmpty()) {
    return;
  }
  List<BlockPos> affectedBlocks=event.getAffectedBlocks();
  List<BlockPos> toremove=new ArrayList<>();
  int rf=0;
  for (  GlobalCoordinate protector : protectors) {
    BlockPos pos=protector.getCoordinate();
    TileEntity te=event.getWorld().getTileEntity(pos);
    if (te instanceof BlockProtectorTileEntity) {
      BlockProtectorTileEntity blockProtectorTileEntity=(BlockProtectorTileEntity)te;
      for (      BlockPos block : affectedBlocks) {
        BlockPos relative=blockProtectorTileEntity.absoluteToRelative(block);
        boolean b=blockProtectorTileEntity.isProtected(relative);
        if (b) {
          Vec3d blockVector=new Vec3d(block);
          double distanceTo=explosionVector.distanceTo(blockVector);
          int rfneeded=blockProtectorTileEntity.attemptExplosionProtection((float)(distanceTo / explosion.size),explosion.size);
          if (rfneeded > 0) {
            toremove.add(block);
            rf+=rfneeded;
          }
 else {
            blockProtectorTileEntity.removeProtection(relative);
          }
        }
      }
    }
  }
  affectedBlocks.removeAll(toremove);
}",0.9886058981233244
165712,"@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,EntityPlayer player,List<String> list,boolean whatIsThis){
  super.addInformation(itemStack,player,list,whatIsThis);
  NBTTagCompound tagCompound=itemStack.getTagCompound();
  if (tagCompound != null) {
    int id=tagCompound.getInteger(""String_Node_Str"");
    list.add(TextFormatting.GREEN + ""String_Node_Str"" + id);
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.YELLOW + ""String_Node_Str"");
  }
 else {
    list.add(TextFormatting.WHITE + RFTools.SHIFT_MESSAGE);
  }
}","@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,World player,List<String> list,ITooltipFlag whatIsThis){
  super.addInformation(itemStack,player,list,whatIsThis);
  NBTTagCompound tagCompound=itemStack.getTagCompound();
  if (tagCompound != null) {
    int id=tagCompound.getInteger(""String_Node_Str"");
    list.add(TextFormatting.GREEN + ""String_Node_Str"" + id);
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.YELLOW + ""String_Node_Str"");
  }
 else {
    list.add(TextFormatting.WHITE + RFTools.SHIFT_MESSAGE);
  }
}",0.9773584905660376
165713,"public static void initCrafting(){
  if (GeneralConfiguration.enableBlockProtectorRecipe) {
    GameRegistry.addRecipe(new ItemStack(blockProtectorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Blocks.OBSIDIAN,'t',ShieldSetup.shieldTemplateBlock);
  }
}","public static void initCrafting(){
  if (GeneralConfiguration.enableBlockProtectorRecipe) {
    MyGameReg.addRecipe(new ItemStack(blockProtectorBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'o',Blocks.OBSIDIAN,'t',ShieldSetup.shieldTemplateBlock);
  }
}",0.988195615514334
165714,"@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,EntityPlayer player,List<String> list,boolean whatIsThis){
  super.addInformation(itemStack,player,list,whatIsThis);
  if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.YELLOW + ""String_Node_Str"");
  }
 else {
    list.add(TextFormatting.WHITE + RFTools.SHIFT_MESSAGE);
  }
}","@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,World player,List<String> list,ITooltipFlag whatIsThis){
  super.addInformation(itemStack,player,list,whatIsThis);
  if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.YELLOW + ""String_Node_Str"");
  }
 else {
    list.add(TextFormatting.WHITE + RFTools.SHIFT_MESSAGE);
  }
}",0.9662921348314608
165715,"public static void initCrafting(){
  GameRegistry.addRecipe(new ItemStack(boosterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.GLASS_BOTTLE,'M',ModBlocks.machineFrame,'D',Items.DIAMOND,'E',Items.REDSTONE,'G',Items.GOLD_INGOT,'I',Items.IRON_INGOT);
}","public static void initCrafting(){
  MyGameReg.addRecipe(new ItemStack(boosterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'o',Items.GLASS_BOTTLE,'M',ModBlocks.machineFrame,'D',Items.DIAMOND,'E',Items.REDSTONE,'G',Items.GOLD_INGOT,'I',Items.IRON_INGOT);
}",0.9651376146788992
165716,"@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,EntityPlayer player,List<String> list,boolean whatIsThis){
  super.addInformation(itemStack,player,list,whatIsThis);
  if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.YELLOW + ""String_Node_Str"");
    list.add(TextFormatting.YELLOW + ""String_Node_Str"");
  }
 else {
    list.add(TextFormatting.WHITE + RFTools.SHIFT_MESSAGE);
  }
}","@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack itemStack,World player,List<String> list,ITooltipFlag whatIsThis){
  super.addInformation(itemStack,player,list,whatIsThis);
  if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.WHITE + ""String_Node_Str"");
    list.add(TextFormatting.YELLOW + ""String_Node_Str"");
    list.add(TextFormatting.YELLOW + ""String_Node_Str"");
  }
 else {
    list.add(TextFormatting.WHITE + RFTools.SHIFT_MESSAGE);
  }
}",0.9721792890262752
165717,"@Override public void onBlockPlacedBy(World world,BlockPos pos,IBlockState state,EntityLivingBase placer,ItemStack stack){
  super.onBlockPlacedBy(world,pos,state,placer,stack);
  if (placer instanceof EntityPlayer) {
    Achievements.trigger((EntityPlayer)placer,Achievements.theBuilder);
  }
}","@Override public void onBlockPlacedBy(World world,BlockPos pos,IBlockState state,EntityLivingBase placer,ItemStack stack){
  super.onBlockPlacedBy(world,pos,state,placer,stack);
  if (placer instanceof EntityPlayer) {
  }
}",0.861003861003861
165718,"@Override public void renderTileEntityAt(BuilderTileEntity te,double x,double y,double z,float partialTicks,int destroyStage){
  super.renderTileEntityAt(te,x,y,z,partialTicks,destroyStage);
  if (BuilderConfiguration.showProgressHud) {
    HudRenderer.renderHud(te,x,y,z);
  }
}","@Override public void renderTileEntityAt(BuilderTileEntity te,double x,double y,double z,float partialTicks,int destroyStage,float alpha){
  super.renderTileEntityAt(te,x,y,z,partialTicks,destroyStage,alpha);
  if (BuilderConfiguration.showProgressHud) {
    HudRenderer.renderHud(te,x,y,z);
  }
}",0.96875
165719,"@Override public void renderTileEntityAt(ElevatorTileEntity te,double x,double y,double z,float partialTicks,int destroyStage){
  if (te.isMoving()) {
    AxisAlignedBB aabb=te.getAABBAboveElevator(0);
    boolean on=MinecraftTools.getPlayer(Minecraft.getMinecraft()).getEntityBoundingBox().intersectsWith(aabb);
    double diff=on ? (te.getPos().getY() - (y + te.getMovingY()) - 1) : 0;
    GlStateManager.pushMatrix();
    RenderHelper.disableStandardItemLighting();
    this.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
    if (Minecraft.isAmbientOcclusionEnabled()) {
      GlStateManager.shadeModel(GL11.GL_SMOOTH);
    }
 else {
      GlStateManager.shadeModel(GL11.GL_FLAT);
    }
    IBlockState movingState=te.getMovingState();
    GlStateManager.translate(0,te.getMovingY() - te.getPos().getY() + diff,0);
    Tessellator tessellator=Tessellator.getInstance();
    BlockRendererDispatcher dispatcher=Minecraft.getMinecraft().getBlockRendererDispatcher();
    for (    BlockRenderLayer layer : LAYERS) {
      if (movingState.getBlock().canRenderInLayer(movingState,layer)) {
        ForgeHooksClient.setRenderLayer(layer);
        for (        BlockPos pos : te.getPositions()) {
          tessellator.getBuffer().begin(GL11.GL_QUADS,DefaultVertexFormats.BLOCK);
          int dx=te.getPos().getX() - pos.getX();
          int dy=te.getPos().getY() - pos.getY();
          int dz=te.getPos().getZ() - pos.getZ();
          tessellator.getBuffer().setTranslation(x - pos.getX() - dx,y - pos.getY() - dy,z - pos.getZ() - dz);
          renderBlock(dispatcher,movingState,pos,te.getWorld(),tessellator.getBuffer());
          tessellator.draw();
        }
      }
    }
    tessellator.getBuffer().setTranslation(0,0,0);
    RenderHelper.enableStandardItemLighting();
    GlStateManager.popMatrix();
  }
}","@Override public void renderTileEntityAt(ElevatorTileEntity te,double x,double y,double z,float partialTicks,int destroyStage){
  if (te.isMoving()) {
    AxisAlignedBB aabb=te.getAABBAboveElevator(0);
    boolean on=MinecraftTools.getPlayer(Minecraft.getMinecraft()).getEntityBoundingBox().intersectsWith(aabb);
    double diff=on ? (te.getPos().getY() - (y + te.getMovingY()) - 1) : 0;
    GlStateManager.pushMatrix();
    RenderHelper.disableStandardItemLighting();
    this.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
    if (Minecraft.isAmbientOcclusionEnabled()) {
      GlStateManager.shadeModel(GL11.GL_SMOOTH);
    }
 else {
      GlStateManager.shadeModel(GL11.GL_FLAT);
    }
    IBlockState movingState=te.getMovingState();
    GlStateManager.translate(0,te.getMovingY() - te.getPos().getY() + diff,0);
    Tessellator tessellator=Tessellator.getInstance();
    BlockRendererDispatcher dispatcher=Minecraft.getMinecraft().getBlockRendererDispatcher();
    BlockRenderLayer origLayer=MinecraftForgeClient.getRenderLayer();
    for (    BlockRenderLayer layer : LAYERS) {
      if (movingState.getBlock().canRenderInLayer(movingState,layer)) {
        ForgeHooksClient.setRenderLayer(layer);
        for (        BlockPos pos : te.getPositions()) {
          tessellator.getBuffer().begin(GL11.GL_QUADS,DefaultVertexFormats.BLOCK);
          int dx=te.getPos().getX() - pos.getX();
          int dy=te.getPos().getY() - pos.getY();
          int dz=te.getPos().getZ() - pos.getZ();
          tessellator.getBuffer().setTranslation(x - pos.getX() - dx,y - pos.getY() - dy,z - pos.getZ() - dz);
          renderBlock(dispatcher,movingState,pos,te.getWorld(),tessellator.getBuffer());
          tessellator.draw();
        }
      }
    }
    ForgeHooksClient.setRenderLayer(origLayer);
    tessellator.getBuffer().setTranslation(0,0,0);
    RenderHelper.enableStandardItemLighting();
    GlStateManager.popMatrix();
  }
}",0.9685333333333334
165720,"private Function<Pair<SidedConsumer,StorageConnectorSettings>,BlockPos> isInventory(IControllerContext context){
  return pair -> {
    BlockPos invPos=context.findConsumerPosition(pair.getKey().getConsumerId());
    if (invPos != null) {
      TileEntity te=context.getControllerWorld().getTileEntity(invPos);
      if (te != null && (te instanceof IInventory || te.hasCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,null))) {
        return invPos;
      }
    }
    return null;
  }
;
}","private Function<Pair<SidedConsumer,StorageConnectorSettings>,BlockPos> isInventory(IControllerContext context){
  return pair -> {
    BlockPos consumerPos=context.findConsumerPosition(pair.getKey().getConsumerId());
    if (consumerPos != null) {
      EnumFacing side=pair.getKey().getSide();
      BlockPos pos=consumerPos.offset(side);
      TileEntity te=context.getControllerWorld().getTileEntity(pos);
      if (te != null && (te instanceof IInventory || te.hasCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,null))) {
        return pos;
      }
    }
    return null;
  }
;
}",0.8864468864468864
165721,"@Nullable @Override public IndicatorIcon getIndicatorIcon(){
switch (mode) {
case DUAL:
    return new IndicatorIcon(StorageChannelSettings.iconGuiElements,13,57,13,10);
case INS:
  return new IndicatorIcon(StorageChannelSettings.iconGuiElements,0,48,13,10);
case EXT:
return new IndicatorIcon(StorageChannelSettings.iconGuiElements,13,48,13,10);
case STORAGE:
return new IndicatorIcon(StorageChannelSettings.iconGuiElements,13,67,13,10);
}
return null;
}","@Nullable @Override public IndicatorIcon getIndicatorIcon(){
switch (mode) {
case DUAL:
    return new IndicatorIcon(StorageChannelSettings.iconGuiElements,13,57,13,10);
case INS:
  return new IndicatorIcon(StorageChannelSettings.iconGuiElements,0,48,13,10);
case EXT:
return new IndicatorIcon(StorageChannelSettings.iconGuiElements,13,48,13,10);
case STORAGE:
return new IndicatorIcon(StorageChannelSettings.iconGuiElements,13,66,13,10);
}
return null;
}",0.9978021978021978
165722,"private EndergenicTileEntity findEndergenicWithInjector(){
  if (hasInjector()) {
    return this;
  }
  if (destination == null) {
    return null;
  }
  TileEntity te=getWorld().getTileEntity(destination);
  if (te instanceof EndergenicTileEntity) {
    return ((EndergenicTileEntity)te).findEndergenicWithInjector();
  }
  return null;
}","private EndergenicTileEntity findEndergenicWithInjector(BlockPos start){
  if (hasInjector()) {
    return this;
  }
  if (destination == null) {
    return null;
  }
  if (destination == start) {
    return null;
  }
  TileEntity te=getWorld().getTileEntity(destination);
  if (te instanceof EndergenicTileEntity) {
    return ((EndergenicTileEntity)te).findEndergenicWithInjector(start);
  }
  return null;
}",0.9066666666666666
165723,"private void queueWork(){
  GlobalCoordinate gc=new GlobalCoordinate(getPos(),getWorld().provider.getDimension());
  if (endergenicsAdded.contains(gc)) {
    return;
  }
  EndergenicTileEntity endergenicWithInjector=findEndergenicWithInjector();
  if (endergenicWithInjector != null) {
    EndergenicTileEntity loop=endergenicWithInjector;
    while (loop != null) {
      addToQueue(loop,new GlobalCoordinate(loop.getPos(),getWorld().provider.getDimension()));
      loop=loop.getDestinationTE();
      if (loop == endergenicWithInjector) {
        loop=null;
      }
    }
  }
  addToQueue(this,gc);
}","private void queueWork(){
  GlobalCoordinate gc=new GlobalCoordinate(getPos(),getWorld().provider.getDimension());
  if (endergenicsAdded.contains(gc)) {
    return;
  }
  EndergenicTileEntity endergenicWithInjector=findEndergenicWithInjector(getPos());
  if (endergenicWithInjector != null) {
    EndergenicTileEntity loop=endergenicWithInjector;
    while (loop != null) {
      addToQueue(loop,new GlobalCoordinate(loop.getPos(),getWorld().provider.getDimension()));
      loop=loop.getDestinationTE();
      if (loop == endergenicWithInjector) {
        loop=null;
      }
    }
  }
  addToQueue(this,gc);
}",0.9934102141680397
165724,"private void checkStateServer(){
  tickCounter++;
  ticks--;
  if (ticks < 0) {
    lastRfGained=rfGained;
    lastRfLost=rfLost;
    lastRfPerTick=(rfGained - rfLost) / 100;
    lastPearlsLost=pearlsLost;
    lastPearlsLaunched=pearlsLaunched;
    lastChargeCounter=chargeCounter;
    lastPearlArrivedAt=pearlArrivedAt;
    ticks=100;
    rfGained=0;
    rfLost=0;
    pearlsLaunched=0;
    pearlsLost=0;
    chargeCounter=0;
    pearlArrivedAt=-2;
  }
  handlePearls();
  handleSendingEnergy();
  if (chargingMode == CHARGE_HOLDING) {
    if (random.nextInt(1000) <= EndergenicConfiguration.chanceLost) {
      log(""String_Node_Str"");
      discardPearl(""String_Node_Str"");
    }
  }
  boolean pulse=(powerLevel > 0) && !prevIn;
  prevIn=powerLevel > 0;
  if (pulse) {
    if (chargingMode == CHARGE_IDLE) {
      log(""String_Node_Str"");
      startCharging();
      return;
    }
 else     if (chargingMode == CHARGE_HOLDING) {
      log(""String_Node_Str"");
      firePearl();
      return;
    }
  }
  if (chargingMode == CHARGE_IDLE) {
    return;
  }
  if (chargingMode == CHARGE_HOLDING) {
    int rf=EndergenicConfiguration.rfToHoldPearl;
    rf=(int)(rf * (3.0f - getInfusedFactor()) / 3.0f);
    int rfStored=getEnergyStored(EnumFacing.DOWN);
    if (rfStored < rf) {
      log(""String_Node_Str"" + rfStored + ""String_Node_Str""+ rf+ ""String_Node_Str"");
      discardPearl(""String_Node_Str"");
    }
 else {
      int rfExtracted=storage.extractEnergy(rf,false);
      log(""String_Node_Str"" + rfExtracted + ""String_Node_Str"");
      rfLost+=rfExtracted;
    }
    return;
  }
  markDirty();
  chargingMode++;
  if (chargingMode >= 16) {
    log(""String_Node_Str"");
    chargingMode=CHARGE_IDLE;
  }
}","public void checkStateServer(){
  tickCounter++;
  ticks--;
  if (ticks < 0) {
    lastRfGained=rfGained;
    lastRfLost=rfLost;
    lastRfPerTick=(rfGained - rfLost) / 100;
    lastPearlsLost=pearlsLost;
    lastPearlsLaunched=pearlsLaunched;
    lastChargeCounter=chargeCounter;
    lastPearlArrivedAt=pearlArrivedAt;
    ticks=100;
    rfGained=0;
    rfLost=0;
    pearlsLaunched=0;
    pearlsLost=0;
    chargeCounter=0;
    pearlArrivedAt=-2;
  }
  handlePearls();
  handleSendingEnergy();
  if (chargingMode == CHARGE_HOLDING) {
    if (random.nextInt(1000) <= EndergenicConfiguration.chanceLost) {
      log(""String_Node_Str"");
      discardPearl(""String_Node_Str"");
    }
  }
  boolean pulse=(powerLevel > 0) && !prevIn;
  prevIn=powerLevel > 0;
  if (pulse) {
    if (chargingMode == CHARGE_IDLE) {
      log(""String_Node_Str"");
      startCharging();
      return;
    }
 else     if (chargingMode == CHARGE_HOLDING) {
      log(""String_Node_Str"");
      firePearl();
      return;
    }
  }
  if (chargingMode == CHARGE_IDLE) {
    return;
  }
  if (chargingMode == CHARGE_HOLDING) {
    int rf=EndergenicConfiguration.rfToHoldPearl;
    rf=(int)(rf * (3.0f - getInfusedFactor()) / 3.0f);
    int rfStored=getEnergyStored(EnumFacing.DOWN);
    if (rfStored < rf) {
      log(""String_Node_Str"" + rfStored + ""String_Node_Str""+ rf+ ""String_Node_Str"");
      discardPearl(""String_Node_Str"");
    }
 else {
      int rfExtracted=storage.extractEnergy(rf,false);
      log(""String_Node_Str"" + rfExtracted + ""String_Node_Str"");
      rfLost+=rfExtracted;
    }
    return;
  }
  markDirty();
  chargingMode++;
  if (chargingMode >= 16) {
    log(""String_Node_Str"");
    chargingMode=CHARGE_IDLE;
  }
}",0.9967770290067388
165725,"@Override public void update(){
  if (badCounter > 0) {
    badCounter--;
    markDirty();
  }
  if (goodCounter > 0) {
    goodCounter--;
    markDirty();
  }
  if (!getWorld().isRemote) {
    checkStateServer();
  }
}","@Override public void update(){
  if (badCounter > 0) {
    badCounter--;
    markDirty();
  }
  if (goodCounter > 0) {
    goodCounter--;
    markDirty();
  }
  if (!getWorld().isRemote) {
    todoEndergenics.add(this);
  }
}",0.8808988764044944
165726,"private EndergenicTileEntity findEndergenicWithInjector(BlockPos start){
  if (hasInjector()) {
    return this;
  }
  if (destination == null) {
    return null;
  }
  if (destination == start) {
    return null;
  }
  TileEntity te=getWorld().getTileEntity(destination);
  if (te instanceof EndergenicTileEntity) {
    return ((EndergenicTileEntity)te).findEndergenicWithInjector(start);
  }
  return null;
}","private EndergenicTileEntity findEndergenicWithInjector(Set<BlockPos> done){
  if (hasInjector()) {
    return this;
  }
  if (destination == null) {
    return null;
  }
  done.add(getPos());
  if (done.contains(destination)) {
    return null;
  }
  TileEntity te=getWorld().getTileEntity(destination);
  if (te instanceof EndergenicTileEntity) {
    return ((EndergenicTileEntity)te).findEndergenicWithInjector(done);
  }
  return null;
}",0.881316098707403
165727,"private void queueWork(){
  GlobalCoordinate gc=new GlobalCoordinate(getPos(),getWorld().provider.getDimension());
  if (endergenicsAdded.contains(gc)) {
    return;
  }
  EndergenicTileEntity endergenicWithInjector=findEndergenicWithInjector(getPos());
  if (endergenicWithInjector != null) {
    EndergenicTileEntity loop=endergenicWithInjector;
    while (loop != null) {
      addToQueue(loop,new GlobalCoordinate(loop.getPos(),getWorld().provider.getDimension()));
      loop=loop.getDestinationTE();
      if (loop == endergenicWithInjector) {
        loop=null;
      }
    }
  }
  addToQueue(this,gc);
}","private void queueWork(){
  GlobalCoordinate gc=new GlobalCoordinate(getPos(),getWorld().provider.getDimension());
  if (endergenicsAdded.contains(gc)) {
    return;
  }
  EndergenicTileEntity endergenicWithInjector=findEndergenicWithInjector(new HashSet<>());
  if (endergenicWithInjector != null) {
    EndergenicTileEntity loop=endergenicWithInjector;
    while (loop != null) {
      addToQueue(loop,new GlobalCoordinate(loop.getPos(),getWorld().provider.getDimension()));
      loop=loop.getDestinationTE();
      if (loop == endergenicWithInjector) {
        loop=null;
      }
    }
  }
  addToQueue(this,gc);
}",0.9845402766476812
165728,"@Callback(doc=""String_Node_Str"") public Object[] getPearls(Context c,Arguments a){
  int ret=0;
  InventoryHelper inventoryHelper=tile.getInventoryHelper();
  for (int i=0; i < inventoryHelper.getCount(); ++i) {
    ItemStack stack=inventoryHelper.getStackInSlot(i);
    if (stack != null && Items.ENDER_PEARL.equals(stack.getItem()) && stack.stackSize > 0) {
      ret+=stack.stackSize;
    }
  }
  return new Object[]{ret};
}","@Callback(doc=""String_Node_Str"") public Object[] getPearls(Context c,Arguments a){
  int ret=0;
  InventoryHelper inventoryHelper=tile.getInventoryHelper();
  for (int i=0; i < inventoryHelper.getCount(); ++i) {
    ItemStack stack=inventoryHelper.getStackInSlot(i);
    if (ItemStackTools.isValid(stack) && Items.ENDER_PEARL.equals(stack.getItem()) && ItemStackTools.getStackSize(stack) > 0) {
      ret+=ItemStackTools.getStackSize(stack);
    }
  }
  return new Object[]{ret};
}",0.8810572687224669
165729,"public ModuleElevatorInfo(ByteBuf buf){
  level=buf.readInt();
  maxLevel=buf.readInt();
  pos=NetworkTools.readPos(buf);
  int s=buf.readByte();
  heights=new ArrayList<>(s);
  for (int i=0; i < s; i++) {
    heights.add((int)buf.readByte());
  }
}","public ModuleElevatorInfo(ByteBuf buf){
  level=buf.readInt();
  maxLevel=buf.readInt();
  pos=NetworkTools.readPos(buf);
  int s=buf.readByte();
  heights=new ArrayList<>(s);
  for (int i=0; i < s; i++) {
    heights.add((int)buf.readShort());
  }
}",0.9819639278557114
165730,"@Override public void writeToBuf(ByteBuf buf){
  buf.writeInt(level);
  buf.writeInt(maxLevel);
  NetworkTools.writePos(buf,pos);
  buf.writeByte(heights.size());
  for (  Integer height : heights) {
    buf.writeByte(height);
  }
}","@Override public void writeToBuf(ByteBuf buf){
  buf.writeInt(level);
  buf.writeInt(maxLevel);
  NetworkTools.writePos(buf,pos);
  buf.writeByte(heights.size());
  for (  Integer height : heights) {
    buf.writeShort(height);
  }
}",0.9806451612903224
165731,"@Override protected EnumActionResult clOnItemUse(EntityPlayer player,World world,BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){
  ItemStack stack=player.getHeldItem(hand);
  if (!world.isRemote) {
    int mode=getMode(stack);
    if (mode == MODE_NONE) {
      if (player.isSneaking()) {
        if (world.getTileEntity(pos) instanceof BuilderTileEntity) {
          setCurrentBlock(stack,new GlobalCoordinate(pos,world.provider.getDimension()));
          Logging.message(player,TextFormatting.GREEN + ""String_Node_Str"");
          setMode(stack,MODE_CORNER1);
          setCorner1(stack,null);
        }
 else {
          Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
        }
      }
 else {
        return EnumActionResult.SUCCESS;
      }
    }
 else     if (mode == MODE_CORNER1) {
      GlobalCoordinate currentBlock=getCurrentBlock(stack);
      if (currentBlock.getDimension() != world.provider.getDimension()) {
        Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
      }
 else       if (currentBlock.getCoordinate().equals(pos)) {
        Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
        setMode(stack,MODE_NONE);
      }
 else {
        Logging.message(player,TextFormatting.GREEN + ""String_Node_Str"");
        setMode(stack,MODE_CORNER2);
        setCorner1(stack,pos);
      }
    }
 else {
      GlobalCoordinate currentBlock=getCurrentBlock(stack);
      if (currentBlock.getDimension() != world.provider.getDimension()) {
        Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
      }
 else       if (currentBlock.getCoordinate().equals(pos)) {
        Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
        setMode(stack,MODE_NONE);
      }
 else {
        NBTTagCompound tag=stack.getTagCompound();
        if (tag == null) {
          tag=new NBTTagCompound();
          stack.setTagCompound(tag);
        }
        BlockPos c1=getCorner1(stack);
        if (c1 == null) {
          Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
          setMode(stack,MODE_NONE);
        }
 else {
          Logging.message(player,TextFormatting.GREEN + ""String_Node_Str"");
          BlockPos center=new BlockPos((int)Math.ceil((c1.getX() + pos.getX()) / 2.0f),(int)Math.ceil((c1.getY() + pos.getY()) / 2.0f),(int)Math.ceil((c1.getZ() + pos.getZ()) / 2.0f));
          tag.setInteger(""String_Node_Str"",Math.abs(c1.getX() - pos.getX()) + 1);
          tag.setInteger(""String_Node_Str"",Math.abs(c1.getY() - pos.getY()) + 1);
          tag.setInteger(""String_Node_Str"",Math.abs(c1.getZ() - pos.getZ()) + 1);
          tag.setInteger(""String_Node_Str"",center.getX() - currentBlock.getCoordinate().getX());
          tag.setInteger(""String_Node_Str"",center.getY() - currentBlock.getCoordinate().getY());
          tag.setInteger(""String_Node_Str"",center.getZ() - currentBlock.getCoordinate().getZ());
          setMode(stack,MODE_NONE);
          setCorner1(stack,null);
        }
      }
    }
  }
  return EnumActionResult.SUCCESS;
}","@Override protected EnumActionResult clOnItemUse(EntityPlayer player,World world,BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){
  ItemStack stack=player.getHeldItem(hand);
  if (!world.isRemote) {
    int mode=getMode(stack);
    if (mode == MODE_NONE) {
      if (player.isSneaking()) {
        if (world.getTileEntity(pos) instanceof BuilderTileEntity) {
          setCurrentBlock(stack,new GlobalCoordinate(pos,world.provider.getDimension()));
          Logging.message(player,TextFormatting.GREEN + ""String_Node_Str"");
          setMode(stack,MODE_CORNER1);
          setCorner1(stack,null);
        }
 else {
          Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
        }
      }
 else {
        return EnumActionResult.SUCCESS;
      }
    }
 else     if (mode == MODE_CORNER1) {
      GlobalCoordinate currentBlock=getCurrentBlock(stack);
      if (currentBlock.getDimension() != world.provider.getDimension()) {
        Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
      }
 else       if (currentBlock.getCoordinate().equals(pos)) {
        Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
        setMode(stack,MODE_NONE);
      }
 else {
        Logging.message(player,TextFormatting.GREEN + ""String_Node_Str"");
        setMode(stack,MODE_CORNER2);
        setCorner1(stack,pos);
      }
    }
 else {
      GlobalCoordinate currentBlock=getCurrentBlock(stack);
      if (currentBlock.getDimension() != world.provider.getDimension()) {
        Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
      }
 else       if (currentBlock.getCoordinate().equals(pos)) {
        Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
        setMode(stack,MODE_NONE);
      }
 else {
        NBTTagCompound tag=stack.getTagCompound();
        if (tag == null) {
          tag=new NBTTagCompound();
          stack.setTagCompound(tag);
        }
        BlockPos c1=getCorner1(stack);
        if (c1 == null) {
          Logging.message(player,TextFormatting.RED + ""String_Node_Str"");
          setMode(stack,MODE_NONE);
        }
 else {
          Logging.message(player,TextFormatting.GREEN + ""String_Node_Str"");
          BlockPos center=new BlockPos((int)Math.ceil((c1.getX() + pos.getX()) / 2.0f),(int)Math.ceil((c1.getY() + pos.getY()) / 2.0f),(int)Math.ceil((c1.getZ() + pos.getZ()) / 2.0f));
          tag.setInteger(""String_Node_Str"",Math.abs(c1.getX() - pos.getX()) + 1);
          tag.setInteger(""String_Node_Str"",Math.abs(c1.getY() - pos.getY()) + 1);
          tag.setInteger(""String_Node_Str"",Math.abs(c1.getZ() - pos.getZ()) + 1);
          tag.setInteger(""String_Node_Str"",center.getX() - currentBlock.getCoordinate().getX());
          tag.setInteger(""String_Node_Str"",center.getY() - currentBlock.getCoordinate().getY());
          tag.setInteger(""String_Node_Str"",center.getZ() - currentBlock.getCoordinate().getZ());
          setMode(stack,MODE_NONE);
          setCorner1(stack,null);
          setShape(stack,Shape.SHAPE_SOLIDBOX);
        }
      }
    }
  }
  return EnumActionResult.SUCCESS;
}",0.9922730199613652
165732,"public static Shape getShape(ItemStack stack){
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound == null) {
    return Shape.SHAPE_SOLIDBOX;
  }
  int shape=tagCompound.getInteger(""String_Node_Str"");
  Shape s=Shape.getShape(shape);
  if (s == null) {
    return Shape.SHAPE_SOLIDBOX;
  }
  return s;
}","public static Shape getShape(ItemStack stack){
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound == null) {
    return Shape.SHAPE_SOLIDBOX;
  }
  if (!tagCompound.hasKey(""String_Node_Str"")) {
    return Shape.SHAPE_SOLIDBOX;
  }
  int shape=tagCompound.getInteger(""String_Node_Str"");
  Shape s=Shape.getShape(shape);
  if (s == null) {
    return Shape.SHAPE_SOLIDBOX;
  }
  return s;
}",0.6347469220246238
165733,"@Override public ItemStack decrStackSize(int index,int amount){
  if (index == ShieldContainer.SLOT_SHAPE && inventoryHelper.getStackInSlot(index) != null && amount > 0) {
    decomposeShield();
  }
  ItemStack stackInSlot=inventoryHelper.getStackInSlot(index);
  if (ItemStackTools.isValid(stackInSlot)) {
    if (ItemStackTools.getStackSize(stackInSlot) <= amount) {
      ItemStack old=ItemStackTools.safeCopy(stackInSlot);
      inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,ItemStackTools.getEmptyStack());
      markDirty();
      return old;
    }
    ItemStack its=stackInSlot.splitStack(amount);
    if (ItemStackTools.isEmpty(stackInSlot)) {
      inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,ItemStackTools.getEmptyStack());
    }
    markDirty();
    return its;
  }
  return null;
}","@Override public ItemStack decrStackSize(int index,int amount){
  if (index == ShieldContainer.SLOT_SHAPE && ItemStackTools.isValid(inventoryHelper.getStackInSlot(index)) && amount > 0) {
    decomposeShield();
  }
  ItemStack stackInSlot=inventoryHelper.getStackInSlot(index);
  if (ItemStackTools.isValid(stackInSlot)) {
    if (ItemStackTools.getStackSize(stackInSlot) <= amount) {
      ItemStack old=ItemStackTools.safeCopy(stackInSlot);
      inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,ItemStackTools.getEmptyStack());
      markDirty();
      return old;
    }
    ItemStack its=stackInSlot.splitStack(amount);
    if (ItemStackTools.isEmpty(stackInSlot)) {
      inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,ItemStackTools.getEmptyStack());
    }
    markDirty();
    return its;
  }
  return ItemStackTools.getEmptyStack();
}",0.9620253164556962
165734,"private boolean isShapedShield(){
  return inventoryHelper.getStackInSlot(ShieldContainer.SLOT_SHAPE) != null;
}","private boolean isShapedShield(){
  return ItemStackTools.isValid(inventoryHelper.getStackInSlot(ShieldContainer.SLOT_SHAPE));
}",0.8666666666666667
165735,"public void applyDamageToEntity(Entity entity){
  DamageSource source;
  int rf;
  if (DamageTypeMode.DAMAGETYPE_GENERIC.equals(damageMode)) {
    rf=ShieldConfiguration.rfDamage;
    source=DamageSourceTools.getGenericSource();
  }
 else {
    rf=ShieldConfiguration.rfDamagePlayer;
    if (killer == null) {
      killer=FakePlayerFactory.get(DimensionManager.getWorld(0),new GameProfile(new UUID(111,222),""String_Node_Str""));
    }
    FakePlayer fakePlayer=killer;
    ItemStack shards=getStackInSlot(ShieldContainer.SLOT_SHARD);
    if (ItemStackTools.isValid(shards) && ItemStackTools.getStackSize(shards) >= ShieldConfiguration.shardsPerLootingKill) {
      decrStackSize(ShieldContainer.SLOT_SHARD,ShieldConfiguration.shardsPerLootingKill);
      if (lootingSword == null) {
        lootingSword=EnvironmentalSetup.createEnchantedItem(Items.DIAMOND_SWORD,Enchantments.LOOTING,ShieldConfiguration.lootingKillBonus);
      }
      lootingSword.setItemDamage(0);
      fakePlayer.setHeldItem(EnumHand.MAIN_HAND,lootingSword);
    }
 else {
      fakePlayer.setHeldItem(EnumHand.MAIN_HAND,ItemStackTools.getEmptyStack());
    }
    source=DamageSource.causePlayerDamage(fakePlayer);
  }
  rf=(int)(rf * costFactor * (4.0f - getInfusedFactor()) / 4.0f);
  if (getEnergyStored(EnumFacing.DOWN) < rf) {
    return;
  }
  consumeEnergy(rf);
  float damage=ShieldConfiguration.damage;
  damage*=damageFactor;
  damage=damage * (1.0f + getInfusedFactor() / 2.0f);
  entity.attackEntityFrom(source,damage);
}","public void applyDamageToEntity(Entity entity){
  DamageSource source;
  int rf;
  if (DamageTypeMode.DAMAGETYPE_GENERIC.equals(damageMode)) {
    rf=ShieldConfiguration.rfDamage;
    source=DamageSourceTools.getGenericSource();
  }
 else {
    rf=ShieldConfiguration.rfDamagePlayer;
    if (killer == null) {
      killer=FakePlayerFactory.get(DimensionManager.getWorld(0),new GameProfile(new UUID(111,222),""String_Node_Str""));
    }
    FakePlayer fakePlayer=killer;
    ItemStack shards=getStackInSlot(ShieldContainer.SLOT_SHARD);
    if (ItemStackTools.isValid(shards) && ItemStackTools.getStackSize(shards) >= ShieldConfiguration.shardsPerLootingKill) {
      decrStackSize(ShieldContainer.SLOT_SHARD,ShieldConfiguration.shardsPerLootingKill);
      if (ItemStackTools.isEmpty(lootingSword)) {
        lootingSword=EnvironmentalSetup.createEnchantedItem(Items.DIAMOND_SWORD,Enchantments.LOOTING,ShieldConfiguration.lootingKillBonus);
      }
      lootingSword.setItemDamage(0);
      fakePlayer.setHeldItem(EnumHand.MAIN_HAND,lootingSword);
    }
 else {
      fakePlayer.setHeldItem(EnumHand.MAIN_HAND,ItemStackTools.getEmptyStack());
    }
    source=DamageSource.causePlayerDamage(fakePlayer);
  }
  rf=(int)(rf * costFactor * (4.0f - getInfusedFactor()) / 4.0f);
  if (getEnergyStored(EnumFacing.DOWN) < rf) {
    return;
  }
  consumeEnergy(rf);
  float damage=ShieldConfiguration.damage;
  damage*=damageFactor;
  damage=damage * (1.0f + getInfusedFactor() / 2.0f);
  entity.attackEntityFrom(source,damage);
}",0.9894249834765368
165736,"public static void readMobSpawnAmountConfig(Configuration cfg){
  defaultMobSpawnRf=10000;
  defaultSpawnAmounts.add(new MobSpawnAmount(new ItemStack(Items.DIAMOND),1.0f));
  defaultSpawnAmounts.add(new MobSpawnAmount(new ItemStack(Blocks.DIRT),20));
  defaultSpawnAmounts.add(new MobSpawnAmount(ItemStackTools.getEmptyStack(),120.0f));
  addMobSpawnRF(cfg,EntityBat.class,100);
  addMobSpawnAmount(cfg,EntityBat.class,MATERIALTYPE_KEY,Items.FEATHER,0,.1f);
  addMobSpawnAmount(cfg,EntityBat.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityBat.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityBlaze.class,1000);
  addMobSpawnAmount(cfg,EntityBlaze.class,MATERIALTYPE_KEY,Items.BLAZE_ROD,0,0.1f);
  addMobSpawnAmount(cfg,EntityBlaze.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,EntityBlaze.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityCaveSpider.class,500);
  addMobSpawnAmount(cfg,EntityCaveSpider.class,MATERIALTYPE_KEY,Items.STRING,0,0.1f);
  addMobSpawnAmount(cfg,EntityCaveSpider.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityCaveSpider.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityChicken.class,500);
  addMobSpawnAmount(cfg,EntityChicken.class,MATERIALTYPE_KEY,Items.FEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityChicken.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityChicken.class,MATERIALTYPE_LIVING,null,0,15);
  addMobSpawnRF(cfg,EntityCow.class,800);
  addMobSpawnAmount(cfg,EntityCow.class,MATERIALTYPE_KEY,Items.LEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityCow.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityCow.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityCreeper.class,800);
  addMobSpawnAmount(cfg,EntityCreeper.class,MATERIALTYPE_KEY,Items.GUNPOWDER,0,0.1f);
  addMobSpawnAmount(cfg,EntityCreeper.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntityCreeper.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityDragon.class,100000);
  addMobSpawnAmount(cfg,EntityDragon.class,MATERIALTYPE_KEY,Items.EXPERIENCE_BOTTLE,0,0.1f);
  addMobSpawnAmount(cfg,EntityDragon.class,MATERIALTYPE_BULK,Blocks.END_STONE,0,100);
  addMobSpawnAmount(cfg,EntityDragon.class,MATERIALTYPE_LIVING,null,0,200);
  addMobSpawnRF(cfg,EntityEnderman.class,2000);
  addMobSpawnAmount(cfg,EntityEnderman.class,MATERIALTYPE_KEY,Items.ENDER_PEARL,0,0.1f);
  addMobSpawnAmount(cfg,EntityEnderman.class,MATERIALTYPE_BULK,Blocks.END_STONE,0,.5f);
  addMobSpawnAmount(cfg,EntityEnderman.class,MATERIALTYPE_LIVING,null,0,40);
  addMobSpawnRF(cfg,EntityGhast.class,2000);
  addMobSpawnAmount(cfg,EntityGhast.class,MATERIALTYPE_KEY,Items.GHAST_TEAR,0,0.1f);
  addMobSpawnAmount(cfg,EntityGhast.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,1.0f);
  addMobSpawnAmount(cfg,EntityGhast.class,MATERIALTYPE_LIVING,null,0,50);
  addMobSpawnRF(cfg,EntityHorse.class,1000);
  addMobSpawnAmount(cfg,EntityHorse.class,MATERIALTYPE_KEY,Items.LEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityHorse.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntityHorse.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityIronGolem.class,2000);
  addMobSpawnAmount(cfg,EntityIronGolem.class,MATERIALTYPE_KEY,Items.IRON_INGOT,0,0.1f);
  addMobSpawnAmount(cfg,EntityIronGolem.class,MATERIALTYPE_BULK,Blocks.DIRT,0,6.0f);
  addMobSpawnAmount(cfg,EntityIronGolem.class,MATERIALTYPE_LIVING,Blocks.RED_FLOWER,0,0.5f);
  addMobSpawnRF(cfg,EntityMagmaCube.class,600);
  addMobSpawnAmount(cfg,EntityMagmaCube.class,MATERIALTYPE_KEY,Items.MAGMA_CREAM,0,0.1f);
  addMobSpawnAmount(cfg,EntityMagmaCube.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.2f);
  addMobSpawnAmount(cfg,EntityMagmaCube.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityMooshroom.class,800);
  addMobSpawnAmount(cfg,EntityMooshroom.class,MATERIALTYPE_KEY,Items.LEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityMooshroom.class,MATERIALTYPE_BULK,Blocks.DIRT,0,1.0f);
  addMobSpawnAmount(cfg,EntityMooshroom.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityOcelot.class,800);
  addMobSpawnAmount(cfg,EntityOcelot.class,MATERIALTYPE_KEY,Items.FISH,0,0.1f);
  addMobSpawnAmount(cfg,EntityOcelot.class,MATERIALTYPE_BULK,Blocks.DIRT,0,1.0f);
  addMobSpawnAmount(cfg,EntityOcelot.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityPig.class,800);
  addMobSpawnAmount(cfg,EntityPig.class,MATERIALTYPE_KEY,Items.LEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityPig.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityPig.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntitySheep.class,800);
  addMobSpawnAmount(cfg,EntitySheep.class,MATERIALTYPE_KEY,Blocks.WOOL,0,0.1f);
  addMobSpawnAmount(cfg,EntitySheep.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntitySheep.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntitySkeleton.class,800);
  addMobSpawnAmount(cfg,EntitySkeleton.class,MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,EntitySkeleton.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntitySkeleton.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntitySlime.class,600);
  addMobSpawnAmount(cfg,EntitySlime.class,MATERIALTYPE_KEY,Items.SLIME_BALL,0,0.1f);
  addMobSpawnAmount(cfg,EntitySlime.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntitySlime.class,MATERIALTYPE_LIVING,null,0,15);
  addMobSpawnRF(cfg,EntitySnowman.class,600);
  addMobSpawnAmount(cfg,EntitySnowman.class,MATERIALTYPE_KEY,Items.SNOWBALL,0,0.1f);
  addMobSpawnAmount(cfg,EntitySnowman.class,MATERIALTYPE_BULK,Blocks.DIRT,0,1.0f);
  addMobSpawnAmount(cfg,EntitySnowman.class,MATERIALTYPE_LIVING,null,0,15);
  addMobSpawnRF(cfg,EntitySpider.class,500);
  addMobSpawnAmount(cfg,EntitySpider.class,MATERIALTYPE_KEY,Items.STRING,0,0.1f);
  addMobSpawnAmount(cfg,EntitySpider.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntitySpider.class,MATERIALTYPE_LIVING,null,0,15);
  addMobSpawnRF(cfg,EntitySquid.class,500);
  addMobSpawnAmount(cfg,EntitySquid.class,MATERIALTYPE_KEY,351,0,0.1f);
  addMobSpawnAmount(cfg,EntitySquid.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntitySquid.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityVillager.class,2000);
  addMobSpawnAmount(cfg,EntityVillager.class,MATERIALTYPE_KEY,Items.BOOK,0,0.1f);
  addMobSpawnAmount(cfg,EntityVillager.class,MATERIALTYPE_BULK,Blocks.DIRT,0,5.0f);
  addMobSpawnAmount(cfg,EntityVillager.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityWitch.class,1200);
  addMobSpawnAmount(cfg,EntityWitch.class,MATERIALTYPE_KEY,Items.GLASS_BOTTLE,0,0.1f);
  addMobSpawnAmount(cfg,EntityWitch.class,MATERIALTYPE_BULK,Blocks.DIRT,0,1.0f);
  addMobSpawnAmount(cfg,EntityWitch.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityWither.class,20000);
  addMobSpawnAmount(cfg,EntityWither.class,MATERIALTYPE_KEY,Items.NETHER_STAR,0,0.1f);
  addMobSpawnAmount(cfg,EntityWither.class,MATERIALTYPE_BULK,Blocks.SOUL_SAND,0,0.5f);
  addMobSpawnAmount(cfg,EntityWither.class,MATERIALTYPE_LIVING,null,0,100);
  addMobSpawnRF(cfg,EntityWolf.class,800);
  addMobSpawnAmount(cfg,EntityWolf.class,MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,EntityWolf.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntityWolf.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityPigZombie.class,1200);
  addMobSpawnAmount(cfg,EntityPigZombie.class,MATERIALTYPE_KEY,Items.GOLD_NUGGET,0,0.1f);
  addMobSpawnAmount(cfg,EntityPigZombie.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,EntityPigZombie.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityZombie.class,800);
  addMobSpawnAmount(cfg,EntityZombie.class,MATERIALTYPE_KEY,Items.ROTTEN_FLESH,0,0.1f);
  addMobSpawnAmount(cfg,EntityZombie.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityZombie.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityGuardian.class,1000);
  addMobSpawnAmount(cfg,EntityGuardian.class,MATERIALTYPE_KEY,Items.PRISMARINE_SHARD,0,0.1f);
  addMobSpawnAmount(cfg,EntityGuardian.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityGuardian.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityShulker.class,600);
  addMobSpawnAmount(cfg,EntityShulker.class,MATERIALTYPE_KEY,Items.ENDER_PEARL,0,0.1f);
  addMobSpawnAmount(cfg,EntityShulker.class,MATERIALTYPE_BULK,Blocks.END_STONE,0,.2f);
  addMobSpawnAmount(cfg,EntityShulker.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityEndermite.class,400);
  addMobSpawnAmount(cfg,EntityEndermite.class,MATERIALTYPE_KEY,Items.ENDER_PEARL,0,0.05f);
  addMobSpawnAmount(cfg,EntityEndermite.class,MATERIALTYPE_BULK,Blocks.END_STONE,0,.2f);
  addMobSpawnAmount(cfg,EntityEndermite.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntitySilverfish.class,400);
  addMobSpawnAmount(cfg,EntitySilverfish.class,MATERIALTYPE_KEY,Items.IRON_INGOT,0,0.05f);
  addMobSpawnAmount(cfg,EntitySilverfish.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntitySilverfish.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityRabbit.class,300);
  addMobSpawnAmount(cfg,EntityRabbit.class,MATERIALTYPE_KEY,Items.RABBIT_STEW,0,0.1f);
  addMobSpawnAmount(cfg,EntityRabbit.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityRabbit.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityPolarBear.class,1500);
  addMobSpawnAmount(cfg,EntityPolarBear.class,MATERIALTYPE_KEY,Items.FISH,0,0.1f);
  addMobSpawnAmount(cfg,EntityPolarBear.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityPolarBear.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,""String_Node_Str"",1500);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,""String_Node_Str"",800);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_LIVING,null,0,20);
}","public static void readMobSpawnAmountConfig(Configuration cfg){
  defaultMobSpawnRf=10000;
  defaultSpawnAmounts.add(new MobSpawnAmount(new ItemStack(Items.DIAMOND),1.0f));
  defaultSpawnAmounts.add(new MobSpawnAmount(new ItemStack(Blocks.DIRT),20));
  defaultSpawnAmounts.add(new MobSpawnAmount(ItemStackTools.getEmptyStack(),120.0f));
  addMobSpawnRF(cfg,EntityBat.class,100);
  addMobSpawnAmount(cfg,EntityBat.class,MATERIALTYPE_KEY,Items.FEATHER,0,.1f);
  addMobSpawnAmount(cfg,EntityBat.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityBat.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityBlaze.class,1000);
  addMobSpawnAmount(cfg,EntityBlaze.class,MATERIALTYPE_KEY,Items.BLAZE_ROD,0,0.1f);
  addMobSpawnAmount(cfg,EntityBlaze.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,EntityBlaze.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityCaveSpider.class,500);
  addMobSpawnAmount(cfg,EntityCaveSpider.class,MATERIALTYPE_KEY,Items.STRING,0,0.1f);
  addMobSpawnAmount(cfg,EntityCaveSpider.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityCaveSpider.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityChicken.class,500);
  addMobSpawnAmount(cfg,EntityChicken.class,MATERIALTYPE_KEY,Items.FEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityChicken.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityChicken.class,MATERIALTYPE_LIVING,null,0,15);
  addMobSpawnRF(cfg,EntityCow.class,800);
  addMobSpawnAmount(cfg,EntityCow.class,MATERIALTYPE_KEY,Items.LEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityCow.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityCow.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityCreeper.class,800);
  addMobSpawnAmount(cfg,EntityCreeper.class,MATERIALTYPE_KEY,Items.GUNPOWDER,0,0.1f);
  addMobSpawnAmount(cfg,EntityCreeper.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntityCreeper.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityDragon.class,100000);
  addMobSpawnAmount(cfg,EntityDragon.class,MATERIALTYPE_KEY,Items.EXPERIENCE_BOTTLE,0,0.1f);
  addMobSpawnAmount(cfg,EntityDragon.class,MATERIALTYPE_BULK,Blocks.END_STONE,0,100);
  addMobSpawnAmount(cfg,EntityDragon.class,MATERIALTYPE_LIVING,null,0,200);
  addMobSpawnRF(cfg,EntityEnderman.class,2000);
  addMobSpawnAmount(cfg,EntityEnderman.class,MATERIALTYPE_KEY,Items.ENDER_PEARL,0,0.1f);
  addMobSpawnAmount(cfg,EntityEnderman.class,MATERIALTYPE_BULK,Blocks.END_STONE,0,.5f);
  addMobSpawnAmount(cfg,EntityEnderman.class,MATERIALTYPE_LIVING,null,0,40);
  addMobSpawnRF(cfg,EntityGhast.class,2000);
  addMobSpawnAmount(cfg,EntityGhast.class,MATERIALTYPE_KEY,Items.GHAST_TEAR,0,0.1f);
  addMobSpawnAmount(cfg,EntityGhast.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,1.0f);
  addMobSpawnAmount(cfg,EntityGhast.class,MATERIALTYPE_LIVING,null,0,50);
  addMobSpawnRF(cfg,EntityHorse.class,1000);
  addMobSpawnAmount(cfg,EntityHorse.class,MATERIALTYPE_KEY,Items.LEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityHorse.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntityHorse.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityIronGolem.class,2000);
  addMobSpawnAmount(cfg,EntityIronGolem.class,MATERIALTYPE_KEY,Items.IRON_INGOT,0,0.1f);
  addMobSpawnAmount(cfg,EntityIronGolem.class,MATERIALTYPE_BULK,Blocks.DIRT,0,6.0f);
  addMobSpawnAmount(cfg,EntityIronGolem.class,MATERIALTYPE_LIVING,Blocks.RED_FLOWER,0,0.5f);
  addMobSpawnRF(cfg,EntityMagmaCube.class,600);
  addMobSpawnAmount(cfg,EntityMagmaCube.class,MATERIALTYPE_KEY,Items.MAGMA_CREAM,0,0.1f);
  addMobSpawnAmount(cfg,EntityMagmaCube.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.2f);
  addMobSpawnAmount(cfg,EntityMagmaCube.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityMooshroom.class,800);
  addMobSpawnAmount(cfg,EntityMooshroom.class,MATERIALTYPE_KEY,Items.LEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityMooshroom.class,MATERIALTYPE_BULK,Blocks.DIRT,0,1.0f);
  addMobSpawnAmount(cfg,EntityMooshroom.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityOcelot.class,800);
  addMobSpawnAmount(cfg,EntityOcelot.class,MATERIALTYPE_KEY,Items.FISH,0,0.1f);
  addMobSpawnAmount(cfg,EntityOcelot.class,MATERIALTYPE_BULK,Blocks.DIRT,0,1.0f);
  addMobSpawnAmount(cfg,EntityOcelot.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityPig.class,800);
  addMobSpawnAmount(cfg,EntityPig.class,MATERIALTYPE_KEY,Items.LEATHER,0,0.1f);
  addMobSpawnAmount(cfg,EntityPig.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityPig.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntitySheep.class,800);
  addMobSpawnAmount(cfg,EntitySheep.class,MATERIALTYPE_KEY,Blocks.WOOL,0,0.1f);
  addMobSpawnAmount(cfg,EntitySheep.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntitySheep.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntitySkeleton.class,800);
  addMobSpawnAmount(cfg,EntitySkeleton.class,MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,EntitySkeleton.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntitySkeleton.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntitySlime.class,600);
  addMobSpawnAmount(cfg,EntitySlime.class,MATERIALTYPE_KEY,Items.SLIME_BALL,0,0.1f);
  addMobSpawnAmount(cfg,EntitySlime.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntitySlime.class,MATERIALTYPE_LIVING,null,0,15);
  addMobSpawnRF(cfg,EntitySnowman.class,600);
  addMobSpawnAmount(cfg,EntitySnowman.class,MATERIALTYPE_KEY,Items.SNOWBALL,0,0.1f);
  addMobSpawnAmount(cfg,EntitySnowman.class,MATERIALTYPE_BULK,Blocks.DIRT,0,1.0f);
  addMobSpawnAmount(cfg,EntitySnowman.class,MATERIALTYPE_LIVING,null,0,15);
  addMobSpawnRF(cfg,EntitySpider.class,500);
  addMobSpawnAmount(cfg,EntitySpider.class,MATERIALTYPE_KEY,Items.STRING,0,0.1f);
  addMobSpawnAmount(cfg,EntitySpider.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntitySpider.class,MATERIALTYPE_LIVING,null,0,15);
  addMobSpawnRF(cfg,EntitySquid.class,500);
  addMobSpawnAmount(cfg,EntitySquid.class,MATERIALTYPE_KEY,351,0,0.1f);
  addMobSpawnAmount(cfg,EntitySquid.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntitySquid.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityVillager.class,2000);
  addMobSpawnAmount(cfg,EntityVillager.class,MATERIALTYPE_KEY,Items.BOOK,0,0.1f);
  addMobSpawnAmount(cfg,EntityVillager.class,MATERIALTYPE_BULK,Blocks.DIRT,0,5.0f);
  addMobSpawnAmount(cfg,EntityVillager.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityWitch.class,1200);
  addMobSpawnAmount(cfg,EntityWitch.class,MATERIALTYPE_KEY,Items.GLASS_BOTTLE,0,0.1f);
  addMobSpawnAmount(cfg,EntityWitch.class,MATERIALTYPE_BULK,Blocks.DIRT,0,1.0f);
  addMobSpawnAmount(cfg,EntityWitch.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityWither.class,20000);
  addMobSpawnAmount(cfg,EntityWither.class,MATERIALTYPE_KEY,Items.NETHER_STAR,0,0.1f);
  addMobSpawnAmount(cfg,EntityWither.class,MATERIALTYPE_BULK,Blocks.SOUL_SAND,0,0.5f);
  addMobSpawnAmount(cfg,EntityWither.class,MATERIALTYPE_LIVING,null,0,100);
  addMobSpawnRF(cfg,EntityWolf.class,800);
  addMobSpawnAmount(cfg,EntityWolf.class,MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,EntityWolf.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.5f);
  addMobSpawnAmount(cfg,EntityWolf.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityPigZombie.class,1200);
  addMobSpawnAmount(cfg,EntityPigZombie.class,MATERIALTYPE_KEY,Items.GOLD_NUGGET,0,0.1f);
  addMobSpawnAmount(cfg,EntityPigZombie.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,EntityPigZombie.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityZombie.class,800);
  addMobSpawnAmount(cfg,EntityZombie.class,MATERIALTYPE_KEY,Items.ROTTEN_FLESH,0,0.1f);
  addMobSpawnAmount(cfg,EntityZombie.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityZombie.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityGuardian.class,1000);
  addMobSpawnAmount(cfg,EntityGuardian.class,MATERIALTYPE_KEY,Items.PRISMARINE_SHARD,0,0.1f);
  addMobSpawnAmount(cfg,EntityGuardian.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityGuardian.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityShulker.class,600);
  addMobSpawnAmount(cfg,EntityShulker.class,MATERIALTYPE_KEY,Items.ENDER_PEARL,0,0.1f);
  addMobSpawnAmount(cfg,EntityShulker.class,MATERIALTYPE_BULK,Blocks.END_STONE,0,.2f);
  addMobSpawnAmount(cfg,EntityShulker.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityEndermite.class,400);
  addMobSpawnAmount(cfg,EntityEndermite.class,MATERIALTYPE_KEY,Items.ENDER_PEARL,0,0.05f);
  addMobSpawnAmount(cfg,EntityEndermite.class,MATERIALTYPE_BULK,Blocks.END_STONE,0,.2f);
  addMobSpawnAmount(cfg,EntityEndermite.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntitySilverfish.class,400);
  addMobSpawnAmount(cfg,EntitySilverfish.class,MATERIALTYPE_KEY,Items.IRON_INGOT,0,0.05f);
  addMobSpawnAmount(cfg,EntitySilverfish.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntitySilverfish.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityRabbit.class,300);
  addMobSpawnAmount(cfg,EntityRabbit.class,MATERIALTYPE_KEY,Items.RABBIT_STEW,0,0.1f);
  addMobSpawnAmount(cfg,EntityRabbit.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityRabbit.class,MATERIALTYPE_LIVING,null,0,10);
  addMobSpawnRF(cfg,EntityPolarBear.class,1500);
  addMobSpawnAmount(cfg,EntityPolarBear.class,MATERIALTYPE_KEY,Items.FISH,0,0.1f);
  addMobSpawnAmount(cfg,EntityPolarBear.class,MATERIALTYPE_BULK,Blocks.DIRT,0,.2f);
  addMobSpawnAmount(cfg,EntityPolarBear.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,EntityWitherSkeleton.class,1500);
  addMobSpawnAmount(cfg,EntityWitherSkeleton.class,MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,EntityWitherSkeleton.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,EntityWitherSkeleton.class,MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,EntityStray.class,800);
  addMobSpawnAmount(cfg,EntityStray.class,MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,EntityStray.class,MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,EntityStray.class,MATERIALTYPE_LIVING,null,0,20);
  addMobSpawnRF(cfg,""String_Node_Str"",1500);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_LIVING,null,0,30);
  addMobSpawnRF(cfg,""String_Node_Str"",800);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_KEY,Items.BONE,0,0.1f);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_BULK,Blocks.NETHERRACK,0,.5f);
  addMobSpawnAmount(cfg,""String_Node_Str"",MATERIALTYPE_LIVING,null,0,20);
}",0.9606707740769908
165737,"public static void initCrafting(){
  GameRegistry.addRecipe(new ItemStack(modularStorageBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'c',Blocks.CHEST,'r',Items.REDSTONE,'q',Items.QUARTZ);
  GameRegistry.addRecipe(new ItemStack(remoteStorageBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'c',Blocks.CHEST,'e',Items.ENDER_PEARL,'q',Items.QUARTZ);
  GameRegistry.addRecipe(new ItemStack(storageTerminalBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineBase,'g',Blocks.GLASS,'e',Items.ENDER_PEARL,'p',Items.PAPER);
  GameRegistry.addRecipe(new ItemStack(levelEmitterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineBase,'g',Blocks.GLASS,'e',Items.ENDER_PEARL,'p',Items.PAPER,'c',Items.COMPARATOR);
  GameRegistry.addRecipe(new ItemStack(oreDictTypeItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'u',Blocks.IRON_ORE,'p',Items.PAPER,'r',Items.REDSTONE,'i',Items.IRON_INGOT);
  GameRegistry.addRecipe(new ItemStack(genericTypeItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',Items.PAPER,'r',Items.REDSTONE,'i',Items.IRON_INGOT);
  GameRegistry.addRecipe(new ItemStack(storageFilterItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'h',Blocks.HOPPER,'p',Items.PAPER,'r',Items.REDSTONE,'i',Items.IRON_INGOT);
  GameRegistry.addRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'g',Items.GOLD_NUGGET,'e',Items.EMERALD,'r',Blocks.REDSTONE_BLOCK,'q',Blocks.QUARTZ_BLOCK);
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER1),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),null));
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER2),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),null));
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER3),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),null));
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_REMOTE),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),null));
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(ScreenSetup.storageControlModuleItem,1),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_SCANNER),i -> META_FOR_SCANNER));
  GameRegistry.addRecipe(new ContainerToItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),new ItemStack(storageModuleItem),null));
  GameRegistry.addRecipe(new ContainerToItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_SCANNER),new ItemStack(ScreenSetup.storageControlModuleItem),n -> 0));
  GameRegistry.addRecipe(new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.REDSTONE,'i',Items.IRON_INGOT,'g',Items.GOLD_NUGGET,'c',Blocks.CHEST,'q',Items.QUARTZ);
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack(Blocks.CHEST),null,new ItemStack(Items.GOLD_INGOT),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER1),new ItemStack(Items.GOLD_INGOT),new ItemStack(Items.QUARTZ),new ItemStack(Items.REDSTONE),new ItemStack(Items.QUARTZ)},new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER2),4));
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{null,new ItemStack(Blocks.CHEST),null,new ItemStack(Blocks.GOLD_BLOCK),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER2),new ItemStack(Blocks.GOLD_BLOCK),new ItemStack(Blocks.QUARTZ_BLOCK),new ItemStack(Blocks.REDSTONE_BLOCK),new ItemStack(Blocks.QUARTZ_BLOCK)},new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER3),4));
  GameRegistry.addRecipe(new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_REMOTE),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.REDSTONE,'i',Items.IRON_INGOT,'g',Items.GOLD_NUGGET,'c',Blocks.CHEST,'q',Items.QUARTZ,'e',Items.ENDER_PEARL);
}","public static void initCrafting(){
  GameRegistry.addRecipe(new ItemStack(modularStorageBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'c',Blocks.CHEST,'r',Items.REDSTONE,'q',Items.QUARTZ);
  GameRegistry.addRecipe(new ItemStack(remoteStorageBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineFrame,'c',Blocks.CHEST,'e',Items.ENDER_PEARL,'q',Items.QUARTZ);
  GameRegistry.addRecipe(new ItemStack(storageTerminalBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineBase,'g',Blocks.GLASS,'e',Items.ENDER_PEARL,'p',Items.PAPER);
  GameRegistry.addRecipe(new ItemStack(levelEmitterBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',ModBlocks.machineBase,'g',Blocks.GLASS,'e',Items.ENDER_PEARL,'p',Items.PAPER,'c',Items.COMPARATOR);
  GameRegistry.addRecipe(new ItemStack(oreDictTypeItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'u',Blocks.IRON_ORE,'p',Items.PAPER,'r',Items.REDSTONE,'i',Items.IRON_INGOT);
  GameRegistry.addRecipe(new ItemStack(genericTypeItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',Items.PAPER,'r',Items.REDSTONE,'i',Items.IRON_INGOT);
  GameRegistry.addRecipe(new ItemStack(storageFilterItem),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'h',Blocks.HOPPER,'p',Items.PAPER,'r',Items.REDSTONE,'i',Items.IRON_INGOT);
  GameRegistry.addRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'g',Items.GOLD_NUGGET,'e',Items.EMERALD,'r',Blocks.REDSTONE_BLOCK,'q',Blocks.QUARTZ_BLOCK);
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER1),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),null));
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER2),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),null));
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER3),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),null));
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_REMOTE),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),null));
  GameRegistry.addRecipe(new ContainerAndItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_EMPTY),new ItemStack(ScreenSetup.storageControlModuleItem,1),new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_SCANNER),i -> META_FOR_SCANNER));
  GameRegistry.addRecipe(new ContainerToItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_FULL),new ItemStack(storageModuleItem),null));
  GameRegistry.addRecipe(new ContainerToItemRecipe(new ItemStack(storageModuleTabletItem,1,StorageModuleTabletItem.DAMAGE_SCANNER),new ItemStack(ScreenSetup.storageControlModuleItem),n -> 0));
  GameRegistry.addRecipe(new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.REDSTONE,'i',Items.IRON_INGOT,'g',Items.GOLD_NUGGET,'c',Blocks.CHEST,'q',Items.QUARTZ);
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{ItemStackTools.getEmptyStack(),new ItemStack(Blocks.CHEST),ItemStackTools.getEmptyStack(),new ItemStack(Items.GOLD_INGOT),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER1),new ItemStack(Items.GOLD_INGOT),new ItemStack(Items.QUARTZ),new ItemStack(Items.REDSTONE),new ItemStack(Items.QUARTZ)},new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER2),4));
  GameRegistry.addRecipe(new PreservingShapedRecipe(3,3,new ItemStack[]{ItemStackTools.getEmptyStack(),new ItemStack(Blocks.CHEST),ItemStackTools.getEmptyStack(),new ItemStack(Blocks.GOLD_BLOCK),new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER2),new ItemStack(Blocks.GOLD_BLOCK),new ItemStack(Blocks.QUARTZ_BLOCK),new ItemStack(Blocks.REDSTONE_BLOCK),new ItemStack(Blocks.QUARTZ_BLOCK)},new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_TIER3),4));
  GameRegistry.addRecipe(new ItemStack(storageModuleItem,1,StorageModuleItem.STORAGE_REMOTE),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'r',Items.REDSTONE,'i',Items.IRON_INGOT,'g',Items.GOLD_NUGGET,'c',Blocks.CHEST,'q',Items.QUARTZ,'e',Items.ENDER_PEARL);
}",0.9858421819696024
165738,"private static ItemStack getModule(TileEntity tileEntity){
  if (tileEntity instanceof StorageTerminalTileEntity) {
    StorageTerminalTileEntity terminalTileEntity=(StorageTerminalTileEntity)tileEntity;
    return terminalTileEntity.getStackInSlot(StorageTerminalContainer.SLOT_MODULE);
  }
  return null;
}","private static ItemStack getModule(TileEntity tileEntity){
  if (tileEntity instanceof StorageTerminalTileEntity) {
    StorageTerminalTileEntity terminalTileEntity=(StorageTerminalTileEntity)tileEntity;
    return terminalTileEntity.getStackInSlot(StorageTerminalContainer.SLOT_MODULE);
  }
  return ItemStackTools.getEmptyStack();
}",0.9470404984423676
165739,"@Override public void fromBytes(ByteBuf buf){
  pos=NetworkTools.readPos(buf);
  viewMode=NetworkTools.readString(buf);
  sortMode=NetworkTools.readString(buf);
  groupMode=buf.readBoolean();
  filter=NetworkTools.readString(buf);
  maxSize=buf.readInt();
  numStacks=buf.readInt();
  int s=buf.readInt();
  items=new ArrayList<>(s);
  for (int i=0; i < s; i++) {
    int slotIdx=buf.readInt();
    if (slotIdx < 0) {
      items.add(Pair.of(-slotIdx - 1,null));
    }
 else {
      ItemStack stack=NetworkTools.readItemStack(buf);
      items.add(Pair.of(slotIdx,stack));
    }
  }
}","@Override public void fromBytes(ByteBuf buf){
  pos=NetworkTools.readPos(buf);
  viewMode=NetworkTools.readString(buf);
  sortMode=NetworkTools.readString(buf);
  groupMode=buf.readBoolean();
  filter=NetworkTools.readString(buf);
  maxSize=buf.readInt();
  numStacks=buf.readInt();
  int s=buf.readInt();
  items=new ArrayList<>(s);
  for (int i=0; i < s; i++) {
    int slotIdx=buf.readInt();
    if (slotIdx < 0) {
      items.add(Pair.of(-slotIdx - 1,ItemStackTools.getEmptyStack()));
    }
 else {
      ItemStack stack=NetworkTools.readItemStack(buf);
      items.add(Pair.of(slotIdx,stack));
    }
  }
}",0.9715242881072028
165740,"@SubscribeEvent public void onPlayerInteractEvent(PlayerInteractEvent event){
  if (event instanceof PlayerInteractEvent.LeftClickBlock) {
    checkCreativeClick(event);
  }
  ItemStack heldItem=event.getEntityPlayer().getHeldItem(event.getHand());
  if (heldItem == null || heldItem.getItem() == null) {
    return;
  }
  if (event.getEntityPlayer().isSneaking() && WrenchChecker.isAWrench(heldItem.getItem())) {
    World world=event.getWorld();
    int x=event.getPos().getX();
    int y=event.getPos().getY();
    int z=event.getPos().getZ();
    Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(world.provider.getDimension(),x,y,z);
    if (BlockProtectors.checkHarvestProtection(x,y,z,world,protectors)) {
      event.setCanceled(true);
    }
  }
}","@SubscribeEvent public void onPlayerInteractEvent(PlayerInteractEvent event){
  if (event instanceof PlayerInteractEvent.LeftClickBlock) {
    checkCreativeClick(event);
  }
  ItemStack heldItem=event.getEntityPlayer().getHeldItem(event.getHand());
  if (heldItem == null || heldItem.getItem() == null) {
    return;
  }
  if (event.getEntityPlayer().isSneaking() && WrenchChecker.isAWrench(heldItem.getItem())) {
    World world=event.getWorld();
    int x=event.getPos().getX();
    int y=event.getPos().getY();
    int z=event.getPos().getZ();
    Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(world,x,y,z);
    if (BlockProtectors.checkHarvestProtection(x,y,z,world,protectors)) {
      event.setCanceled(true);
    }
  }
}",0.9842726081258192
165741,"@SubscribeEvent public void onDetonate(ExplosionEvent.Detonate event){
  Explosion explosion=event.getExplosion();
  Vec3d explosionVector=explosion.getPosition();
  Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(event.getWorld().provider.getDimension(),(int)explosionVector.xCoord,(int)explosionVector.yCoord,(int)explosionVector.zCoord);
  if (protectors.isEmpty()) {
    return;
  }
  List<BlockPos> affectedBlocks=event.getAffectedBlocks();
  List<BlockPos> toremove=new ArrayList<>();
  int rf=0;
  for (  GlobalCoordinate protector : protectors) {
    BlockPos pos=protector.getCoordinate();
    TileEntity te=event.getWorld().getTileEntity(pos);
    if (te instanceof BlockProtectorTileEntity) {
      BlockProtectorTileEntity blockProtectorTileEntity=(BlockProtectorTileEntity)te;
      for (      BlockPos block : affectedBlocks) {
        BlockPos relative=blockProtectorTileEntity.absoluteToRelative(block);
        boolean b=blockProtectorTileEntity.isProtected(relative);
        if (b) {
          Vec3d blockVector=new Vec3d(block);
          double distanceTo=explosionVector.distanceTo(blockVector);
          int rfneeded=blockProtectorTileEntity.attemptExplosionProtection((float)(distanceTo / explosion.explosionSize),explosion.explosionSize);
          if (rfneeded > 0) {
            toremove.add(block);
            rf+=rfneeded;
          }
 else {
            blockProtectorTileEntity.removeProtection(relative);
          }
        }
      }
    }
  }
  affectedBlocks.removeAll(toremove);
}","@SubscribeEvent public void onDetonate(ExplosionEvent.Detonate event){
  Explosion explosion=event.getExplosion();
  Vec3d explosionVector=explosion.getPosition();
  Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(event.getWorld(),(int)explosionVector.xCoord,(int)explosionVector.yCoord,(int)explosionVector.zCoord);
  if (protectors.isEmpty()) {
    return;
  }
  List<BlockPos> affectedBlocks=event.getAffectedBlocks();
  List<BlockPos> toremove=new ArrayList<>();
  int rf=0;
  for (  GlobalCoordinate protector : protectors) {
    BlockPos pos=protector.getCoordinate();
    TileEntity te=event.getWorld().getTileEntity(pos);
    if (te instanceof BlockProtectorTileEntity) {
      BlockProtectorTileEntity blockProtectorTileEntity=(BlockProtectorTileEntity)te;
      for (      BlockPos block : affectedBlocks) {
        BlockPos relative=blockProtectorTileEntity.absoluteToRelative(block);
        boolean b=blockProtectorTileEntity.isProtected(relative);
        if (b) {
          Vec3d blockVector=new Vec3d(block);
          double distanceTo=explosionVector.distanceTo(blockVector);
          int rfneeded=blockProtectorTileEntity.attemptExplosionProtection((float)(distanceTo / explosion.explosionSize),explosion.explosionSize);
          if (rfneeded > 0) {
            toremove.add(block);
            rf+=rfneeded;
          }
 else {
            blockProtectorTileEntity.removeProtection(relative);
          }
        }
      }
    }
  }
  affectedBlocks.removeAll(toremove);
}",0.9921465968586388
165742,"@SubscribeEvent public void onBlockBreakEvent(BlockEvent.BreakEvent event){
  int x=event.getPos().getX();
  int y=event.getPos().getY();
  int z=event.getPos().getZ();
  World world=event.getWorld();
  Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(world.provider.getDimension(),x,y,z);
  if (BlockProtectors.checkHarvestProtection(x,y,z,world,protectors)) {
    event.setCanceled(true);
  }
}","@SubscribeEvent public void onBlockBreakEvent(BlockEvent.BreakEvent event){
  int x=event.getPos().getX();
  int y=event.getPos().getY();
  int z=event.getPos().getZ();
  World world=event.getWorld();
  Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(world,x,y,z);
  if (BlockProtectors.checkHarvestProtection(x,y,z,world,protectors)) {
    event.setCanceled(true);
  }
}",0.8074074074074075
165743,"@Override public boolean canEntityDestroy(IBlockState state,IBlockAccess world,BlockPos pos,Entity entity){
  boolean b=super.canEntityDestroy(state,world,pos,entity);
  if (b) {
    Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(entity.dimension,pos.getX(),pos.getY(),pos.getZ());
    if (BlockProtectors.checkHarvestProtection(pos.getX(),pos.getY(),pos.getZ(),world,protectors)) {
      return false;
    }
  }
  return b;
}","@Override public boolean canEntityDestroy(IBlockState state,IBlockAccess world,BlockPos pos,Entity entity){
  boolean b=super.canEntityDestroy(state,world,pos,entity);
  if (b) {
    Collection<GlobalCoordinate> protectors=BlockProtectors.getProtectors(entity.getEntityWorld(),pos.getX(),pos.getY(),pos.getZ());
    if (BlockProtectors.checkHarvestProtection(pos.getX(),pos.getY(),pos.getZ(),world,protectors)) {
      return false;
    }
  }
  return b;
}",0.9723756906077348
165744,"private void updateList(){
  itemList.removeChildren();
  if (tileEntity != null && !inventorySlots.getSlot(ModularStorageContainer.SLOT_STORAGE_MODULE).getHasStack()) {
    amountLabel.setText(""String_Node_Str"");
    compactButton.setEnabled(false);
    cycleButton.setEnabled(false);
    return;
  }
  cycleButton.setEnabled(isTabletWithRemote() || isRemote());
  String filterText=filter.getText().toLowerCase().trim();
  String view=viewMode.getCurrentChoice();
  int numcolumns;
  int labelWidth;
  int spacing;
  if (VIEW_LIST.equals(view)) {
    numcolumns=1;
    labelWidth=210;
    spacing=5;
  }
 else   if (VIEW_COLUMNS.equals(view)) {
    numcolumns=2;
    labelWidth=86;
    spacing=5;
  }
 else {
    numcolumns=12;
    labelWidth=0;
    spacing=3;
  }
  int max;
  List<Pair<ItemStack,Integer>> items=new ArrayList<>();
  if (tileEntity != null) {
    for (int i=ModularStorageContainer.SLOT_STORAGE; i < tileEntity.getSizeInventory(); i++) {
      ItemStack stack=tileEntity.getStackInSlot(i);
      if (stack != null && stack.stackSize > 0) {
        String displayName=stack.getDisplayName();
        if (filterText.isEmpty() || displayName.toLowerCase().contains(filterText)) {
          items.add(Pair.of(stack,i));
        }
      }
    }
    max=tileEntity.getSizeInventory() - ModularStorageContainer.SLOT_STORAGE;
  }
 else {
    for (int i=0; i < RemoteStorageItemContainer.MAXSIZE_STORAGE; i++) {
      Slot slot=inventorySlots.getSlot(i);
      ItemStack stack=slot.getStack();
      if (stack != null && stack.stackSize > 0) {
        String displayName=stack.getDisplayName();
        if (filterText.isEmpty() || displayName.toLowerCase().contains(filterText)) {
          items.add(Pair.of(stack,i));
        }
      }
    }
    max=mc.thePlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().getInteger(""String_Node_Str"");
  }
  amountLabel.setText(items.size() + ""String_Node_Str"" + max);
  compactButton.setEnabled(max > 0);
  int sort=getCurrentSortMode();
  boolean dogroups=groupMode.getCurrentChoiceIndex() == 1;
  ItemSorter itemSorter=typeModule.getSorters().get(sort);
  Collections.sort(items,itemSorter.getComparator());
  Pair<Panel,Integer> currentPos=MutablePair.of(null,0);
  Pair<ItemStack,Integer> prevItem=null;
  for (  Pair<ItemStack,Integer> item : items) {
    currentPos=addItemToList(item.getKey(),itemList,currentPos,numcolumns,labelWidth,spacing,item.getValue(),dogroups && (prevItem == null || !itemSorter.isSameGroup(prevItem,item)),itemSorter.getGroupName(item));
    prevItem=item;
  }
}","private void updateList(){
  itemList.removeChildren();
  if (tileEntity != null && !inventorySlots.getSlot(ModularStorageContainer.SLOT_STORAGE_MODULE).getHasStack()) {
    amountLabel.setText(""String_Node_Str"");
    compactButton.setEnabled(false);
    cycleButton.setEnabled(false);
    return;
  }
  cycleButton.setEnabled(isTabletWithRemote() || isRemote());
  String filterText=filter.getText().toLowerCase().trim();
  String view=viewMode.getCurrentChoice();
  int numcolumns;
  int labelWidth;
  int spacing;
  if (VIEW_LIST.equals(view)) {
    numcolumns=1;
    labelWidth=210;
    spacing=5;
  }
 else   if (VIEW_COLUMNS.equals(view)) {
    numcolumns=2;
    labelWidth=86;
    spacing=5;
  }
 else {
    numcolumns=12;
    labelWidth=0;
    spacing=3;
  }
  int max;
  List<Pair<ItemStack,Integer>> items=new ArrayList<>();
  if (tileEntity != null) {
    for (int i=ModularStorageContainer.SLOT_STORAGE; i < tileEntity.getSizeInventory(); i++) {
      ItemStack stack=tileEntity.getStackInSlot(i);
      if (stack != null && stack.stackSize > 0) {
        String displayName=stack.getDisplayName();
        if (filterText.isEmpty() || displayName.toLowerCase().contains(filterText)) {
          items.add(Pair.of(stack,i));
        }
      }
    }
    max=tileEntity.getSizeInventory() - ModularStorageContainer.SLOT_STORAGE;
  }
 else {
    for (int i=0; i < RemoteStorageItemContainer.MAXSIZE_STORAGE; i++) {
      Slot slot=inventorySlots.getSlot(i);
      ItemStack stack=slot.getStack();
      if (stack != null && stack.stackSize > 0) {
        String displayName=stack.getDisplayName();
        if (filterText.isEmpty() || displayName.toLowerCase().contains(filterText)) {
          items.add(Pair.of(stack,i));
        }
      }
    }
    max=mc.thePlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().getInteger(""String_Node_Str"");
  }
  amountLabel.setText(items.size() + ""String_Node_Str"" + max);
  compactButton.setEnabled(max > 0);
  int sort=getCurrentSortMode();
  boolean dogroups=groupMode.getCurrentChoiceIndex() == 1;
  ItemSorter itemSorter=typeModule.getSorters().get(sort);
  Collections.sort(items,itemSorter.getComparator());
  Pair<Panel,Integer> currentPos=MutablePair.of(null,0);
  Pair<ItemStack,Integer> prevItem=null;
  for (  Pair<ItemStack,Integer> item : items) {
    currentPos=addItemToList(item.getKey(),itemList,currentPos,numcolumns,labelWidth,spacing,item.getValue(),dogroups && (prevItem == null || !itemSorter.isSameGroup(prevItem,item)),itemSorter.getGroupName(item));
    prevItem=item;
  }
  int newfirst=-1;
  if (itemList.getCountSelected() == 0) {
    if (itemList.getBounds() != null) {
      itemList.setFirstSelected(0);
      newfirst=itemList.getChildCount() - itemList.getCountSelected();
      if (newfirst < 0) {
        newfirst=0;
      }
    }
  }
 else   if (itemList.getFirstSelected() > (itemList.getChildCount() - itemList.getCountSelected())) {
    newfirst=itemList.getChildCount() - itemList.getCountSelected();
  }
  if (newfirst >= 0) {
    itemList.setFirstSelected(newfirst);
  }
}",0.9082813891362422
165745,"private IBlockState findAndConsumeBlock(IInventory inventory,IBlockState state){
  if (state == null) {
    List<Integer> slots=new ArrayList<>();
    for (int i=0; i < inventory.getSizeInventory(); i++) {
      ItemStack stack=inventory.getStackInSlot(i);
      if (stack != null && stack.stackSize > 0 && stack.getItem() instanceof ItemBlock) {
        slots.add(i);
      }
    }
    if (slots.isEmpty()) {
      return null;
    }
    int randomSlot=slots.get(random.nextInt(slots.size()));
    ItemStack stack=inventory.getStackInSlot(randomSlot);
    ItemBlock itemBlock=(ItemBlock)stack.getItem();
    inventory.decrStackSize(randomSlot,1);
    return itemBlock.getBlock().getStateFromMeta(stack.getItemDamage());
  }
 else {
    Block block=state.getBlock();
    int meta=block.getMetaFromState(state);
    for (int i=0; i < inventory.getSizeInventory(); i++) {
      ItemStack stack=inventory.getStackInSlot(i);
      if (stack != null && stack.stackSize > 0 && stack.getItem() instanceof ItemBlock) {
        ItemBlock itemBlock=(ItemBlock)stack.getItem();
        if (itemBlock.getBlock() == block && (stack.getItemDamage() == meta)) {
          inventory.decrStackSize(i,1);
          return itemBlock.getBlock().getStateFromMeta(stack.getItemDamage());
        }
      }
    }
  }
  return null;
}","private IBlockState findAndConsumeBlock(IInventory inventory,IBlockState state){
  if (state == null) {
    List<Integer> slots=new ArrayList<>();
    for (int i=0; i < inventory.getSizeInventory(); i++) {
      ItemStack stack=inventory.getStackInSlot(i);
      if (stack != null && stack.stackSize > 0 && stack.getItem() instanceof ItemBlock) {
        slots.add(i);
      }
    }
    if (slots.isEmpty()) {
      return null;
    }
    int randomSlot=slots.get(random.nextInt(slots.size()));
    ItemStack extracted=inventory.decrStackSize(randomSlot,1);
    if (extracted == null) {
      return null;
    }
    ItemBlock itemBlock=(ItemBlock)extracted.getItem();
    return itemBlock.getBlock().getStateFromMeta(extracted.getItemDamage());
  }
 else {
    Block block=state.getBlock();
    int meta=block.getMetaFromState(state);
    for (int i=0; i < inventory.getSizeInventory(); i++) {
      ItemStack stack=inventory.getStackInSlot(i);
      if (stack != null && stack.stackSize > 0 && stack.getItem() instanceof ItemBlock) {
        ItemBlock itemBlock=(ItemBlock)stack.getItem();
        if (itemBlock.getBlock() == block && (stack.getItemDamage() == meta)) {
          ItemStack extracted=inventory.decrStackSize(i,1);
          if (extracted == null) {
            return null;
          }
          itemBlock=(ItemBlock)extracted.getItem();
          return itemBlock.getBlock().getStateFromMeta(extracted.getItemDamage());
        }
      }
    }
  }
  return null;
}",0.8595988538681948
165746,"private ItemStack decrStackSizeHelper(int index,int amount){
  if (isStorageAvailableRemotely(index)) {
    index-=ModularStorageContainer.SLOT_STORAGE;
    RemoteStorageTileEntity storageTileEntity=getRemoteStorage(remoteId);
    if (storageTileEntity == null) {
      return null;
    }
    int si=storageTileEntity.findRemoteIndex(remoteId);
    if (si == -1) {
      return null;
    }
    return storageTileEntity.decrStackSizeRemote(si,index,amount);
  }
 else {
    return inventoryHelper.decrStackSize(index,amount);
  }
}","private ItemStack decrStackSizeHelper(int index,int amount){
  if (isStorageAvailableRemotely(index)) {
    index-=ModularStorageContainer.SLOT_STORAGE;
    RemoteStorageTileEntity storageTileEntity=getRemoteStorage(remoteId);
    if (storageTileEntity == null) {
      return null;
    }
    int si=storageTileEntity.findRemoteIndex(remoteId);
    if (si == -1) {
      return null;
    }
    storageTileEntity.updateVersion();
    return storageTileEntity.decrStackSizeRemote(si,index,amount);
  }
 else {
    return inventoryHelper.decrStackSize(index,amount);
  }
}",0.9645131938125568
165747,"private void setInventorySlotContentsHelper(int limit,int index,ItemStack stack){
  if (isStorageAvailableRemotely(index)) {
    index-=ModularStorageContainer.SLOT_STORAGE;
    RemoteStorageTileEntity storageTileEntity=getRemoteStorage(remoteId);
    if (storageTileEntity == null) {
      return;
    }
    int si=storageTileEntity.findRemoteIndex(remoteId);
    if (si == -1) {
      return;
    }
    storageTileEntity.updateRemoteSlot(si,limit,index,stack);
  }
 else {
    inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,stack);
  }
}","private void setInventorySlotContentsHelper(int limit,int index,ItemStack stack){
  if (isStorageAvailableRemotely(index)) {
    index-=ModularStorageContainer.SLOT_STORAGE;
    RemoteStorageTileEntity storageTileEntity=getRemoteStorage(remoteId);
    if (storageTileEntity == null) {
      return;
    }
    int si=storageTileEntity.findRemoteIndex(remoteId);
    if (si == -1) {
      return;
    }
    storageTileEntity.updateVersion();
    storageTileEntity.updateRemoteSlot(si,limit,index,stack);
  }
 else {
    inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,stack);
  }
}",0.9665809768637532
165748,"@Override public ItemStack removeStackFromSlot(int index){
  version++;
  if (isStorageAvailableRemotely(index)) {
    index-=ModularStorageContainer.SLOT_STORAGE;
    RemoteStorageTileEntity storageTileEntity=getRemoteStorage(remoteId);
    if (storageTileEntity == null) {
      return null;
    }
    int si=storageTileEntity.findRemoteIndex(remoteId);
    if (si == -1) {
      return null;
    }
    return storageTileEntity.removeStackFromSlotRemote(si,index);
  }
 else {
    return inventoryHelper.removeStackFromSlot(index);
  }
}","@Override public ItemStack removeStackFromSlot(int index){
  version++;
  if (isStorageAvailableRemotely(index)) {
    index-=ModularStorageContainer.SLOT_STORAGE;
    RemoteStorageTileEntity storageTileEntity=getRemoteStorage(remoteId);
    if (storageTileEntity == null) {
      return null;
    }
    int si=storageTileEntity.findRemoteIndex(remoteId);
    if (si == -1) {
      return null;
    }
    storageTileEntity.updateVersion();
    return storageTileEntity.removeStackFromSlotRemote(si,index);
  }
 else {
    return inventoryHelper.removeStackFromSlot(index);
  }
}",0.9650850492390332
165749,"@Override public int getVersion(){
  return version;
}","@Override public int getVersion(){
  if (isRemote()) {
    RemoteStorageTileEntity storageTileEntity=getRemoteStorage(remoteId);
    if (storageTileEntity == null) {
      return version;
    }
    return storageTileEntity.getVersion();
  }
 else {
    return version;
  }
}",0.3231707317073171
165750,"@Override public void readRestorableFromNBT(NBTTagCompound tagCompound){
  super.readRestorableFromNBT(tagCompound);
  readBufferFromNBT(tagCompound,inventoryHelper);
  for (int i=0; i < 4; i++) {
    int max=tagCompound.getInteger(""String_Node_Str"" + i);
    setMaxSize(i,max);
    readSlotsFromNBT(tagCompound,""String_Node_Str"" + i,i);
    global[i]=tagCompound.getBoolean(""String_Node_Str"" + i);
    updateStackCount(i);
  }
}","@Override public void readRestorableFromNBT(NBTTagCompound tagCompound){
  super.readRestorableFromNBT(tagCompound);
  readBufferFromNBT(tagCompound,inventoryHelper);
  version=tagCompound.getInteger(""String_Node_Str"");
  for (int i=0; i < 4; i++) {
    int max=tagCompound.getInteger(""String_Node_Str"" + i);
    setMaxSize(i,max);
    readSlotsFromNBT(tagCompound,""String_Node_Str"" + i,i);
    global[i]=tagCompound.getBoolean(""String_Node_Str"" + i);
    updateStackCount(i);
  }
}",0.9418221734357848
165751,"@Override public void writeRestorableToNBT(NBTTagCompound tagCompound){
  super.writeRestorableToNBT(tagCompound);
  writeBufferToNBT(tagCompound,inventoryHelper);
  for (int i=0; i < 4; i++) {
    writeSlotsToNBT(tagCompound,""String_Node_Str"" + i,i);
    tagCompound.setInteger(""String_Node_Str"" + i,maxsize[i]);
    tagCompound.setBoolean(""String_Node_Str"" + i,global[i]);
  }
}","@Override public void writeRestorableToNBT(NBTTagCompound tagCompound){
  super.writeRestorableToNBT(tagCompound);
  writeBufferToNBT(tagCompound,inventoryHelper);
  tagCompound.setInteger(""String_Node_Str"",version);
  for (int i=0; i < 4; i++) {
    writeSlotsToNBT(tagCompound,""String_Node_Str"" + i,i);
    tagCompound.setInteger(""String_Node_Str"" + i,maxsize[i]);
    tagCompound.setBoolean(""String_Node_Str"" + i,global[i]);
  }
}",0.9348093480934808
165752,"private boolean pumpBlock(int rfNeeded,BlockPos srcPos,Block block){
  IBlockState srcState=worldObj.getBlockState(srcPos);
  Fluid fluid=FluidRegistry.lookupFluidForBlock(srcState.getBlock());
  if (fluid == null) {
    return false;
  }
  int xCoord=getPos().getX();
  int yCoord=getPos().getY();
  int zCoord=getPos().getZ();
  if (block.getBlockHardness(srcState,worldObj,srcPos) >= 0) {
    FakePlayer fakePlayer=FakePlayerFactory.getMinecraft(DimensionManager.getWorld(0));
    if (block.canEntityDestroy(srcState,worldObj,srcPos,fakePlayer)) {
      if (checkAndInsertFluids(fluid)) {
        boolean clear=getCardType() == ShapeCardItem.CARD_PUMP_CLEAR;
        if (clear) {
          worldObj.setBlockToAir(srcPos);
        }
 else {
          worldObj.setBlockState(srcPos,getDirtOrCobble().getDefaultState(),2);
        }
        if (!silent) {
          SoundTools.playSound(worldObj,block.getSoundType().breakSound,srcPos.getX(),srcPos.getY(),srcPos.getZ(),1.0f,1.0f);
        }
      }
      return false;
    }
  }
  return false;
}","private boolean pumpBlock(int rfNeeded,BlockPos srcPos,Block block){
  Fluid fluid=FluidRegistry.lookupFluidForBlock(block);
  if (fluid == null) {
    return false;
  }
  if (!(block instanceof BlockStaticLiquid)) {
    return false;
  }
  IBlockState srcState=worldObj.getBlockState(srcPos);
  if (block.getMetaFromState(srcState) != 0) {
    return false;
  }
  if (block.getBlockHardness(srcState,worldObj,srcPos) >= 0) {
    FakePlayer fakePlayer=FakePlayerFactory.getMinecraft(DimensionManager.getWorld(0));
    if (block.canEntityDestroy(srcState,worldObj,srcPos,fakePlayer)) {
      if (checkAndInsertFluids(fluid)) {
        consumeEnergy(rfNeeded);
        boolean clear=getCardType() == ShapeCardItem.CARD_PUMP_CLEAR;
        if (clear) {
          worldObj.setBlockToAir(srcPos);
        }
 else {
          worldObj.setBlockState(srcPos,getDirtOrCobble().getDefaultState(),2);
        }
        if (!silent) {
          SoundTools.playSound(worldObj,block.getSoundType().breakSound,srcPos.getX(),srcPos.getY(),srcPos.getZ(),1.0f,1.0f);
        }
      }
      return false;
    }
  }
  return false;
}",0.7006015733456733
165753,"private boolean handleSingleBlock(){
  BlockPos srcPos=scan;
  int sx=scan.getX();
  int sy=scan.getY();
  int sz=scan.getZ();
  if (!chunkLoad(sx,sz)) {
    return true;
  }
  int rfNeeded;
switch (getCardType()) {
case ShapeCardItem.CARD_PUMP:
case ShapeCardItem.CARD_PUMP_CLEAR:
    rfNeeded=(int)(BuilderConfiguration.builderRfPerQuarry * BuilderConfiguration.voidShapeCardFactor);
  break;
case ShapeCardItem.CARD_VOID:
rfNeeded=(int)(BuilderConfiguration.builderRfPerQuarry * BuilderConfiguration.voidShapeCardFactor);
break;
case ShapeCardItem.CARD_QUARRY_FORTUNE:
case ShapeCardItem.CARD_QUARRY_CLEAR_FORTUNE:
rfNeeded=(int)(BuilderConfiguration.builderRfPerQuarry * BuilderConfiguration.fortunequarryShapeCardFactor);
break;
case ShapeCardItem.CARD_QUARRY_SILK:
case ShapeCardItem.CARD_QUARRY_CLEAR_SILK:
rfNeeded=(int)(BuilderConfiguration.builderRfPerQuarry * BuilderConfiguration.silkquarryShapeCardFactor);
break;
case ShapeCardItem.CARD_QUARRY:
case ShapeCardItem.CARD_QUARRY_CLEAR:
rfNeeded=BuilderConfiguration.builderRfPerQuarry;
break;
case ShapeCardItem.CARD_SHAPE:
rfNeeded=BuilderConfiguration.builderRfPerOperation;
break;
default :
rfNeeded=0;
break;
}
Block block=null;
if (getCardType() != ShapeCardItem.CARD_SHAPE) {
BlockPos spos=new BlockPos(sx,sy,sz);
IBlockState state=worldObj.getBlockState(spos);
block=state.getBlock();
if (!isEmpty(state,block)) {
float hardness;
if (block instanceof BlockDynamicLiquid || block instanceof BlockStaticLiquid) {
hardness=1.0f;
}
 else {
if (getCachedVoidableBlocks().contains(block)) {
rfNeeded=(int)(BuilderConfiguration.builderRfPerQuarry * BuilderConfiguration.voidShapeCardFactor);
}
hardness=block.getBlockHardness(state,worldObj,spos);
}
rfNeeded*=(int)((hardness + 1) * 2);
}
}
rfNeeded=(int)(rfNeeded * (3.0f - getInfusedFactor()) / 3.0f);
if (rfNeeded > getEnergyStored(EnumFacing.DOWN)) {
return true;
}
switch (getCardType()) {
case ShapeCardItem.CARD_PUMP:
case ShapeCardItem.CARD_PUMP_CLEAR:
return pumpBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_VOID:
return voidBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_QUARRY:
case ShapeCardItem.CARD_QUARRY_CLEAR:
return quarryBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_QUARRY_FORTUNE:
case ShapeCardItem.CARD_QUARRY_CLEAR_FORTUNE:
return quarryBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_QUARRY_SILK:
case ShapeCardItem.CARD_QUARRY_CLEAR_SILK:
return silkQuarryBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_SHAPE:
return buildBlock(rfNeeded,srcPos);
}
return true;
}","private boolean handleSingleBlock(){
  BlockPos srcPos=scan;
  int sx=scan.getX();
  int sy=scan.getY();
  int sz=scan.getZ();
  if (!chunkLoad(sx,sz)) {
    return true;
  }
  int rfNeeded;
switch (getCardType()) {
case ShapeCardItem.CARD_PUMP:
case ShapeCardItem.CARD_PUMP_CLEAR:
    rfNeeded=(int)(BuilderConfiguration.builderRfPerLiquid);
  break;
case ShapeCardItem.CARD_VOID:
rfNeeded=(int)(BuilderConfiguration.builderRfPerQuarry * BuilderConfiguration.voidShapeCardFactor);
break;
case ShapeCardItem.CARD_QUARRY_FORTUNE:
case ShapeCardItem.CARD_QUARRY_CLEAR_FORTUNE:
rfNeeded=(int)(BuilderConfiguration.builderRfPerQuarry * BuilderConfiguration.fortunequarryShapeCardFactor);
break;
case ShapeCardItem.CARD_QUARRY_SILK:
case ShapeCardItem.CARD_QUARRY_CLEAR_SILK:
rfNeeded=(int)(BuilderConfiguration.builderRfPerQuarry * BuilderConfiguration.silkquarryShapeCardFactor);
break;
case ShapeCardItem.CARD_QUARRY:
case ShapeCardItem.CARD_QUARRY_CLEAR:
rfNeeded=BuilderConfiguration.builderRfPerQuarry;
break;
case ShapeCardItem.CARD_SHAPE:
rfNeeded=BuilderConfiguration.builderRfPerOperation;
break;
default :
rfNeeded=0;
break;
}
Block block=null;
if (getCardType() != ShapeCardItem.CARD_SHAPE) {
BlockPos spos=new BlockPos(sx,sy,sz);
IBlockState state=worldObj.getBlockState(spos);
block=state.getBlock();
if (!isEmpty(state,block)) {
float hardness;
if (block instanceof BlockDynamicLiquid || block instanceof BlockStaticLiquid) {
hardness=1.0f;
}
 else {
if (getCachedVoidableBlocks().contains(block)) {
rfNeeded=(int)(BuilderConfiguration.builderRfPerQuarry * BuilderConfiguration.voidShapeCardFactor);
}
hardness=block.getBlockHardness(state,worldObj,spos);
}
rfNeeded*=(int)((hardness + 1) * 2);
}
}
rfNeeded=(int)(rfNeeded * (3.0f - getInfusedFactor()) / 3.0f);
if (rfNeeded > getEnergyStored(EnumFacing.DOWN)) {
return true;
}
switch (getCardType()) {
case ShapeCardItem.CARD_PUMP:
case ShapeCardItem.CARD_PUMP_CLEAR:
return pumpBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_VOID:
return voidBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_QUARRY:
case ShapeCardItem.CARD_QUARRY_CLEAR:
return quarryBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_QUARRY_FORTUNE:
case ShapeCardItem.CARD_QUARRY_CLEAR_FORTUNE:
return quarryBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_QUARRY_SILK:
case ShapeCardItem.CARD_QUARRY_CLEAR_SILK:
return silkQuarryBlock(rfNeeded,srcPos,block);
case ShapeCardItem.CARD_SHAPE:
return buildBlock(rfNeeded,srcPos);
}
return true;
}",0.9890634320938556
165754,"@SideOnly(Side.CLIENT) @Override public AxisAlignedBB getRenderBoundingBox(){
  int xCoord=getPos().getX();
  int yCoord=getPos().getY();
  int zCoord=getPos().getZ();
  return new AxisAlignedBB(xCoord - 1,yCoord - 1,zCoord - 1,xCoord + size + 1,yCoord + size + 1,zCoord + size + 1);
}","@SideOnly(Side.CLIENT) @Override public AxisAlignedBB getRenderBoundingBox(){
  int xCoord=getPos().getX();
  int yCoord=getPos().getY();
  int zCoord=getPos().getZ();
  return new AxisAlignedBB(xCoord - 1,yCoord - size - 1,zCoord - 1,xCoord + size + 1,yCoord + 1,zCoord + size + 1);
}",0.8456140350877193
165755,"private void requestItem(ItemStack stack,int amount){
  network.sendToServer(new PacketRequestItem(tileEntity.getDimension(),tileEntity.getStorageScannerPos(),getSelectedContainerPos(),stack,amount));
  getInventoryOnServer();
}","private void requestItem(ItemStack stack,int amount){
  BlockPos selectedContainerPos=getSelectedContainerPos();
  if (selectedContainerPos == null) {
    return;
  }
  network.sendToServer(new PacketRequestItem(tileEntity.getDimension(),tileEntity.getStorageScannerPos(),selectedContainerPos,stack,amount));
  getInventoryOnServer();
}",0.7872340425531915
165756,"private static void renderPower(RenderWorldLastEvent evt){
  EntityPlayerSP player=Minecraft.getMinecraft().thePlayer;
  double doubleX=player.lastTickPosX + (player.posX - player.lastTickPosX) * evt.getPartialTicks();
  double doubleY=player.lastTickPosY + (player.posY - player.lastTickPosY) * evt.getPartialTicks();
  double doubleZ=player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * evt.getPartialTicks();
  GlStateManager.pushMatrix();
  GlStateManager.translate(-doubleX,-doubleY,-doubleZ);
  GlStateManager.disableDepth();
  GlStateManager.enableTexture2D();
  ItemStack mainItem=player.getHeldItemMainhand();
  ItemStack offItem=player.getHeldItemOffhand();
  if ((mainItem != null && mainItem.getItem() instanceof NetworkMonitorItem) || (offItem != null && offItem.getItem() instanceof NetworkMonitorItem)) {
    if (System.currentTimeMillis() - lastTime > 500) {
      lastTime=System.currentTimeMillis();
      RFToolsMessages.INSTANCE.sendToServer(new PacketGetRfInRange(player.getPosition()));
    }
    if (PacketReturnRfInRange.clientLevels == null) {
      return;
    }
    for (    Map.Entry<BlockPos,PacketGetRfInRange.MachineInfo> entry : PacketReturnRfInRange.clientLevels.entrySet()) {
      BlockPos pos=entry.getKey();
      List<String> log=new ArrayList<>();
      PacketGetRfInRange.MachineInfo info=entry.getValue();
      log.add(TextFormatting.BLUE + ""String_Node_Str"" + TextFormatting.WHITE+ info.getEnergy());
      log.add(TextFormatting.BLUE + ""String_Node_Str"" + TextFormatting.WHITE+ info.getMaxEnergy());
      if (info.getEnergyPerTick() != null) {
        TileEntity te=player.getEntityWorld().getTileEntity(pos);
        String unit=""String_Node_Str"";
        if (te instanceof IMachineInformation) {
          unit=((IMachineInformation)te).getEnergyUnitName();
          if (unit == null) {
            unit=""String_Node_Str"";
          }
        }
        int usage=info.getEnergyPerTick();
        if (usage < 0) {
          log.add(TextFormatting.RED + ""String_Node_Str"" + usage+ unit+ ""String_Node_Str"");
        }
 else         if (usage > 0) {
          log.add(TextFormatting.GREEN + ""String_Node_Str"" + usage+ unit+ ""String_Node_Str"");
        }
      }
      HudRenderHelper.renderHud(log,HudRenderHelper.HudPlacement.HUD_CENTER,HudRenderHelper.HudOrientation.HUD_TOPLAYER,null,pos.getX(),pos.getY(),pos.getZ(),2.0f);
      renderBoxOutline(pos);
    }
  }
  GlStateManager.popMatrix();
}","private static void renderPower(RenderWorldLastEvent evt){
  EntityPlayerSP player=Minecraft.getMinecraft().thePlayer;
  ItemStack mainItem=player.getHeldItemMainhand();
  ItemStack offItem=player.getHeldItemOffhand();
  if ((mainItem != null && mainItem.getItem() instanceof NetworkMonitorItem) || (offItem != null && offItem.getItem() instanceof NetworkMonitorItem)) {
    double doubleX=player.lastTickPosX + (player.posX - player.lastTickPosX) * evt.getPartialTicks();
    double doubleY=player.lastTickPosY + (player.posY - player.lastTickPosY) * evt.getPartialTicks();
    double doubleZ=player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * evt.getPartialTicks();
    GlStateManager.pushMatrix();
    GlStateManager.translate(-doubleX,-doubleY,-doubleZ);
    GlStateManager.disableDepth();
    GlStateManager.enableTexture2D();
    if (System.currentTimeMillis() - lastTime > 500) {
      lastTime=System.currentTimeMillis();
      RFToolsMessages.INSTANCE.sendToServer(new PacketGetRfInRange(player.getPosition()));
    }
    if (PacketReturnRfInRange.clientLevels == null) {
      return;
    }
    for (    Map.Entry<BlockPos,PacketGetRfInRange.MachineInfo> entry : PacketReturnRfInRange.clientLevels.entrySet()) {
      BlockPos pos=entry.getKey();
      List<String> log=new ArrayList<>();
      PacketGetRfInRange.MachineInfo info=entry.getValue();
      log.add(TextFormatting.BLUE + ""String_Node_Str"" + TextFormatting.WHITE+ info.getEnergy());
      log.add(TextFormatting.BLUE + ""String_Node_Str"" + TextFormatting.WHITE+ info.getMaxEnergy());
      if (info.getEnergyPerTick() != null) {
        TileEntity te=player.getEntityWorld().getTileEntity(pos);
        String unit=""String_Node_Str"";
        if (te instanceof IMachineInformation) {
          unit=((IMachineInformation)te).getEnergyUnitName();
          if (unit == null) {
            unit=""String_Node_Str"";
          }
        }
        int usage=info.getEnergyPerTick();
        if (usage < 0) {
          log.add(TextFormatting.RED + ""String_Node_Str"" + usage+ unit+ ""String_Node_Str"");
        }
 else         if (usage > 0) {
          log.add(TextFormatting.GREEN + ""String_Node_Str"" + usage+ unit+ ""String_Node_Str"");
        }
      }
      HudRenderHelper.renderHud(log,HudRenderHelper.HudPlacement.HUD_CENTER,HudRenderHelper.HudOrientation.HUD_TOPLAYER,null,pos.getX(),pos.getY(),pos.getZ(),2.0f);
      renderBoxOutline(pos);
    }
    GlStateManager.enableDepth();
    GlStateManager.popMatrix();
  }
}",0.8758592802264457
165757,"public void handle(PacketCycleStorage message,MessageContext ctx){
  EntityPlayerMP playerEntity=ctx.getServerHandler().playerEntity;
  ItemStack heldItem=playerEntity.getHeldItem(EnumHand.MAIN_HAND);
  if (heldItem == null) {
    return;
  }
  NBTTagCompound tagCompound=heldItem.getTagCompound();
  if (tagCompound == null) {
    return;
  }
  int id=tagCompound.getInteger(""String_Node_Str"");
  RemoteStorageTileEntity remoteStorage=RemoteStorageIdRegistry.getRemoteStorage(playerEntity.worldObj,id);
  if (remoteStorage != null) {
    id=remoteStorage.cycle(id);
    tagCompound.setInteger(""String_Node_Str"",id);
    remoteStorage.markDirty();
  }
 else {
    Logging.message(playerEntity,TextFormatting.YELLOW + ""String_Node_Str"");
  }
}","public void handle(PacketCycleStorage message,MessageContext ctx){
  EntityPlayerMP playerEntity=ctx.getServerHandler().playerEntity;
  ItemStack heldItem=playerEntity.getHeldItem(EnumHand.MAIN_HAND);
  if (heldItem == null) {
    return;
  }
  NBTTagCompound tagCompound=heldItem.getTagCompound();
  if (tagCompound == null) {
    return;
  }
  int id=tagCompound.getInteger(""String_Node_Str"");
  RemoteStorageTileEntity remoteStorage=RemoteStorageIdRegistry.getRemoteStorage(playerEntity.worldObj,id);
  if (remoteStorage != null) {
    id=remoteStorage.cycle(id);
    tagCompound.setInteger(""String_Node_Str"",id);
    int si=remoteStorage.findRemoteIndex(id);
    if (si != -1) {
      int maxStacks=remoteStorage.getMaxStacks(si);
      tagCompound.setInteger(""String_Node_Str"",maxStacks);
    }
    remoteStorage.markDirty();
  }
 else {
    Logging.message(playerEntity,TextFormatting.YELLOW + ""String_Node_Str"");
  }
}",0.8902219556088782
165758,"@Override public void update(){
  if (!worldObj.isRemote) {
    boolean newout=isPlatformHere();
    if (newout != redstoneOut) {
      redstoneOut=newout;
      setRedstoneState(redstoneOut);
    }
    if (isMoving()) {
      markDirty();
      double d=calculateSpeed();
      boolean stopped=handlePlatformMovement(d);
      if (stopped) {
        stopMoving();
        moveEntities(0,true);
        clearMovement();
      }
 else {
        moveEntities(d,false);
      }
      return;
    }
    if ((powerLevel > 0) == prevIn) {
      return;
    }
    prevIn=(powerLevel > 0);
    markDirty();
    if (powerLevel > 0) {
      movePlatformHere();
    }
  }
 else {
    if (isMoving()) {
      handleClientMovement();
    }
    handleSound();
  }
}","@Override public void update(){
  if (!worldObj.isRemote) {
    boolean newout=isPlatformHere();
    if (newout != redstoneOut) {
      redstoneOut=newout;
      setRedstoneState();
    }
    if (isMoving()) {
      markDirty();
      double d=calculateSpeed();
      boolean stopped=handlePlatformMovement(d);
      if (stopped) {
        stopMoving();
        moveEntities(0,true);
        clearMovement();
      }
 else {
        moveEntities(d,false);
      }
      return;
    }
    if ((powerLevel > 0) == prevIn) {
      return;
    }
    prevIn=(powerLevel > 0);
    markDirty();
    if (powerLevel > 0) {
      movePlatformHere();
    }
  }
 else {
    if (isMoving()) {
      handleClientMovement();
    }
    handleSound();
  }
}",0.9926224010731052
165759,"protected void setRedstoneState(boolean newout){
  markDirty();
  worldObj.notifyNeighborsOfStateChange(this.pos,this.getBlockType());
}","private void setRedstoneState(){
  markDirty();
  worldObj.notifyNeighborsOfStateChange(this.pos,this.getBlockType());
}",0.9140625
165760,"private boolean firstValidItem(){
  while (true) {
    if (inventoryIndex >= inventories.size()) {
      return false;
    }
    IInventory inventory=inventories.get(inventoryIndex).getLeft();
    if (slotIndex < inventory.getSizeInventory()) {
      return true;
    }
 else {
      slotIndex=0;
      inventoryIndex++;
    }
  }
}","private boolean firstValidItem(){
  while (true) {
    if (inventoryIndex >= inventories.size()) {
      return false;
    }
    IInventory inventory=inventories.get(inventoryIndex).getLeft();
    int offset=inventories.get(inventoryIndex).getRight();
    if (slotIndex < offset) {
      slotIndex=offset;
    }
    if (slotIndex < inventory.getSizeInventory()) {
      return true;
    }
 else {
      slotIndex=0;
      inventoryIndex++;
    }
  }
}",0.8480204342273308
165761,"@Override public Iterable<Pair<IItemKey,ItemStack>> getItems(){
  return () -> new Iterator<Pair<IItemKey,ItemStack>>(){
    private int inventoryIndex=0;
    private int slotIndex=0;
    private boolean firstValidItem(){
      while (true) {
        if (inventoryIndex >= inventories.size()) {
          return false;
        }
        IInventory inventory=inventories.get(inventoryIndex).getLeft();
        if (slotIndex < inventory.getSizeInventory()) {
          return true;
        }
 else {
          slotIndex=0;
          inventoryIndex++;
        }
      }
    }
    @Override public boolean hasNext(){
      return firstValidItem();
    }
    @Override public Pair<IItemKey,ItemStack> next(){
      IInventory inventory=inventories.get(inventoryIndex).getLeft();
      ItemKey key=new ItemKey(inventory,slotIndex);
      Pair<IItemKey,ItemStack> result=Pair.of(key,inventory.getStackInSlot(slotIndex));
      slotIndex++;
      return result;
    }
  }
;
}","@Override public Iterable<Pair<IItemKey,ItemStack>> getItems(){
  return () -> new Iterator<Pair<IItemKey,ItemStack>>(){
    private int inventoryIndex=0;
    private int slotIndex=0;
    private boolean firstValidItem(){
      while (true) {
        if (inventoryIndex >= inventories.size()) {
          return false;
        }
        IInventory inventory=inventories.get(inventoryIndex).getLeft();
        int offset=inventories.get(inventoryIndex).getRight();
        if (slotIndex < offset) {
          slotIndex=offset;
        }
        if (slotIndex < inventory.getSizeInventory()) {
          return true;
        }
 else {
          slotIndex=0;
          inventoryIndex++;
        }
      }
    }
    @Override public boolean hasNext(){
      return firstValidItem();
    }
    @Override public Pair<IItemKey,ItemStack> next(){
      IInventory inventory=inventories.get(inventoryIndex).getLeft();
      ItemKey key=new ItemKey(inventory,slotIndex);
      Pair<IItemKey,ItemStack> result=Pair.of(key,inventory.getStackInSlot(slotIndex));
      slotIndex++;
      return result;
    }
  }
;
}",0.9347510874818752
165762,"@Override public Pair<IItemKey,ItemStack> next(){
  IInventory inventory=inventories.get(inventoryIndex).getLeft();
  ItemKey key=new ItemKey(inventory,slotIndex);
  Pair<IItemKey,ItemStack> result=Pair.of(key,inventory.getStackInSlot(slotIndex));
  slotIndex++;
  if (slotIndex >= inventory.getSizeInventory()) {
    inventoryIndex++;
    if (inventoryIndex < inventories.size()) {
      slotIndex=inventories.get(inventoryIndex).getRight();
    }
  }
  return result;
}","@Override public Pair<IItemKey,ItemStack> next(){
  IInventory inventory=inventories.get(inventoryIndex).getLeft();
  ItemKey key=new ItemKey(inventory,slotIndex);
  Pair<IItemKey,ItemStack> result=Pair.of(key,inventory.getStackInSlot(slotIndex));
  slotIndex++;
  return result;
}",0.7074468085106383
165763,"@Override public Iterable<Pair<IItemKey,ItemStack>> getItems(){
  return () -> new Iterator<Pair<IItemKey,ItemStack>>(){
    private int inventoryIndex=0;
    private int slotIndex=0;
    @Override public boolean hasNext(){
      return inventoryIndex < inventories.size() && slotIndex < inventories.get(inventoryIndex).getLeft().getSizeInventory();
    }
    @Override public Pair<IItemKey,ItemStack> next(){
      IInventory inventory=inventories.get(inventoryIndex).getLeft();
      ItemKey key=new ItemKey(inventory,slotIndex);
      Pair<IItemKey,ItemStack> result=Pair.of(key,inventory.getStackInSlot(slotIndex));
      slotIndex++;
      if (slotIndex >= inventory.getSizeInventory()) {
        inventoryIndex++;
        if (inventoryIndex < inventories.size()) {
          slotIndex=inventories.get(inventoryIndex).getRight();
        }
      }
      return result;
    }
  }
;
}","@Override public Iterable<Pair<IItemKey,ItemStack>> getItems(){
  return () -> new Iterator<Pair<IItemKey,ItemStack>>(){
    private int inventoryIndex=0;
    private int slotIndex=0;
    private boolean firstValidItem(){
      while (true) {
        if (inventoryIndex >= inventories.size()) {
          return false;
        }
        IInventory inventory=inventories.get(inventoryIndex).getLeft();
        if (slotIndex < inventory.getSizeInventory()) {
          return true;
        }
 else {
          slotIndex=0;
          inventoryIndex++;
        }
      }
    }
    @Override public boolean hasNext(){
      return firstValidItem();
    }
    @Override public Pair<IItemKey,ItemStack> next(){
      IInventory inventory=inventories.get(inventoryIndex).getLeft();
      ItemKey key=new ItemKey(inventory,slotIndex);
      Pair<IItemKey,ItemStack> result=Pair.of(key,inventory.getStackInSlot(slotIndex));
      slotIndex++;
      return result;
    }
  }
;
}",0.5911542610571737
165764,"@Override public boolean hasNext(){
  return inventoryIndex < inventories.size() && slotIndex < inventories.get(inventoryIndex).getLeft().getSizeInventory();
}","@Override public boolean hasNext(){
  return firstValidItem();
}",0.4663677130044843
165765,"@Override public Pair<IItemKey,ItemStack> next(){
  Object te=inventories.get(inventoryIndex).getLeft();
  ItemKey key=new ItemKey(te,slotIndex);
  Pair<IItemKey,ItemStack> result=Pair.of(key,getStackInSlot(te,slotIndex));
  slotIndex++;
  if (slotIndex >= getSizeInventory(te)) {
    inventoryIndex++;
    if (inventoryIndex < inventories.size()) {
      slotIndex=inventories.get(inventoryIndex).getRight();
    }
  }
  return result;
}","@Override public Pair<IItemKey,ItemStack> next(){
  Object te=inventories.get(inventoryIndex).getLeft();
  ItemKey key=new ItemKey(te,slotIndex);
  Pair<IItemKey,ItemStack> result=Pair.of(key,getStackInSlot(te,slotIndex));
  slotIndex++;
  return result;
}",0.6945244956772334
165766,"@Override public boolean hasNext(){
  if (inventoryIndex >= inventories.size()) {
    return false;
  }
  Object te=inventories.get(inventoryIndex).getLeft();
  return slotIndex < getSizeInventory(te);
}","@Override public boolean hasNext(){
  return firstValidItem();
}",0.4119850187265917
165767,"@Override public Iterable<Pair<IItemKey,ItemStack>> getItems(){
  return () -> new Iterator<Pair<IItemKey,ItemStack>>(){
    private int inventoryIndex=0;
    private int slotIndex=0;
    @Override public boolean hasNext(){
      if (inventoryIndex >= inventories.size()) {
        return false;
      }
      Object te=inventories.get(inventoryIndex).getLeft();
      return slotIndex < getSizeInventory(te);
    }
    @Override public Pair<IItemKey,ItemStack> next(){
      Object te=inventories.get(inventoryIndex).getLeft();
      ItemKey key=new ItemKey(te,slotIndex);
      Pair<IItemKey,ItemStack> result=Pair.of(key,getStackInSlot(te,slotIndex));
      slotIndex++;
      if (slotIndex >= getSizeInventory(te)) {
        inventoryIndex++;
        if (inventoryIndex < inventories.size()) {
          slotIndex=inventories.get(inventoryIndex).getRight();
        }
      }
      return result;
    }
  }
;
}","@Override public Iterable<Pair<IItemKey,ItemStack>> getItems(){
  return () -> new Iterator<Pair<IItemKey,ItemStack>>(){
    private int inventoryIndex=0;
    private int slotIndex=0;
    private boolean firstValidItem(){
      while (true) {
        if (inventoryIndex >= inventories.size()) {
          return false;
        }
        Object inventory=inventories.get(inventoryIndex).getLeft();
        if (slotIndex < getSizeInventory(inventory)) {
          return true;
        }
 else {
          slotIndex=0;
          inventoryIndex++;
        }
      }
    }
    @Override public boolean hasNext(){
      return firstValidItem();
    }
    @Override public Pair<IItemKey,ItemStack> next(){
      Object te=inventories.get(inventoryIndex).getLeft();
      ItemKey key=new ItemKey(te,slotIndex);
      Pair<IItemKey,ItemStack> result=Pair.of(key,getStackInSlot(te,slotIndex));
      slotIndex++;
      return result;
    }
  }
;
}",0.7012425715829281
165768,"@Override public ItemStack decrStackSize(int index,int amount){
  checkSyringe=true;
  return inventoryHelper.decrStackSize(index,amount);
}","@Override public ItemStack decrStackSize(int index,int amount){
  checkSyringe=true;
  prevMobId=mobId;
  return inventoryHelper.decrStackSize(index,amount);
}",0.9364548494983278
165769,"@Override public void setInventorySlotContents(int index,ItemStack stack){
  checkSyringe=true;
  inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,stack);
}","@Override public void setInventorySlotContents(int index,ItemStack stack){
  checkSyringe=true;
  prevMobId=mobId;
  inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,stack);
}",0.9496021220159152
165770,"@Override public void readRestorableFromNBT(NBTTagCompound tagCompound){
  super.readRestorableFromNBT(tagCompound);
  readBufferFromNBT(tagCompound,inventoryHelper);
  matter[0]=tagCompound.getFloat(""String_Node_Str"");
  matter[1]=tagCompound.getFloat(""String_Node_Str"");
  matter[2]=tagCompound.getFloat(""String_Node_Str"");
  checkSyringe=tagCompound.getBoolean(""String_Node_Str"");
  if (tagCompound.hasKey(""String_Node_Str"")) {
    mobId=tagCompound.getString(""String_Node_Str"");
  }
 else {
    mobId=null;
  }
}","@Override public void readRestorableFromNBT(NBTTagCompound tagCompound){
  super.readRestorableFromNBT(tagCompound);
  readBufferFromNBT(tagCompound,inventoryHelper);
  matter[0]=tagCompound.getFloat(""String_Node_Str"");
  matter[1]=tagCompound.getFloat(""String_Node_Str"");
  matter[2]=tagCompound.getFloat(""String_Node_Str"");
  if (tagCompound.hasKey(""String_Node_Str"")) {
    mobId=tagCompound.getString(""String_Node_Str"");
  }
 else {
    mobId=null;
  }
}",0.9404517453798767
165771,"private void testSyringe(){
  if (!checkSyringe) {
    return;
  }
  checkSyringe=false;
  mobId=null;
  ItemStack itemStack=inventoryHelper.getStackInSlot(0);
  if (itemStack == null || itemStack.stackSize == 0) {
    clearMatter();
    return;
  }
  NBTTagCompound tagCompound=itemStack.getTagCompound();
  if (tagCompound == null) {
    clearMatter();
    return;
  }
  mobId=tagCompound.getString(""String_Node_Str"");
  if (mobId == null) {
    clearMatter();
    return;
  }
  int level=tagCompound.getInteger(""String_Node_Str"");
  if (level < GeneralConfiguration.maxMobInjections) {
    clearMatter();
    return;
  }
}","private void testSyringe(){
  if (!checkSyringe) {
    return;
  }
  checkSyringe=false;
  mobId=null;
  ItemStack itemStack=inventoryHelper.getStackInSlot(0);
  if (itemStack == null || itemStack.stackSize == 0) {
    clearMatter();
    return;
  }
  NBTTagCompound tagCompound=itemStack.getTagCompound();
  if (tagCompound == null) {
    clearMatter();
    return;
  }
  mobId=tagCompound.getString(""String_Node_Str"");
  if (mobId == null) {
    clearMatter();
    return;
  }
  int level=tagCompound.getInteger(""String_Node_Str"");
  if (level < GeneralConfiguration.maxMobInjections) {
    clearMatter();
    return;
  }
  if (prevMobId != null && !prevMobId.equals(mobId)) {
    clearMatter();
  }
}",0.941265060240964
165772,"@Override public void writeRestorableToNBT(NBTTagCompound tagCompound){
  super.writeRestorableToNBT(tagCompound);
  writeBufferToNBT(tagCompound,inventoryHelper);
  tagCompound.setFloat(""String_Node_Str"",matter[0]);
  tagCompound.setFloat(""String_Node_Str"",matter[1]);
  tagCompound.setFloat(""String_Node_Str"",matter[2]);
  tagCompound.setBoolean(""String_Node_Str"",checkSyringe);
  if (mobId != null && !mobId.isEmpty()) {
    tagCompound.setString(""String_Node_Str"",mobId);
  }
}","@Override public void writeRestorableToNBT(NBTTagCompound tagCompound){
  super.writeRestorableToNBT(tagCompound);
  writeBufferToNBT(tagCompound,inventoryHelper);
  tagCompound.setFloat(""String_Node_Str"",matter[0]);
  tagCompound.setFloat(""String_Node_Str"",matter[1]);
  tagCompound.setFloat(""String_Node_Str"",matter[2]);
  if (mobId != null && !mobId.isEmpty()) {
    tagCompound.setString(""String_Node_Str"",mobId);
  }
}",0.9358407079646016
165773,"@Override public void setupFromNBT(NBTTagCompound tagCompound,int dim,BlockPos pos){
  if (tagCompound != null) {
    coordinate=BlockPosTools.INVALID;
    if (tagCompound.hasKey(""String_Node_Str"")) {
      if (tagCompound.hasKey(""String_Node_Str"")) {
        this.dim=tagCompound.getInteger(""String_Node_Str"");
      }
 else {
        this.dim=tagCompound.getInteger(""String_Node_Str"");
      }
      if (dim == this.dim) {
        BlockPos c=new BlockPos(tagCompound.getInteger(""String_Node_Str""),tagCompound.getInteger(""String_Node_Str""),tagCompound.getInteger(""String_Node_Str""));
        int dx=Math.abs(c.getX() - pos.getX());
        int dy=Math.abs(c.getY() - pos.getY());
        int dz=Math.abs(c.getZ() - pos.getZ());
        if (dx <= 64 && dy <= 64 && dz <= 64) {
          coordinate=c;
        }
      }
      vertical=tagCompound.getBoolean(""String_Node_Str"");
      large=tagCompound.getBoolean(""String_Node_Str"");
    }
  }
}","@Override public void setupFromNBT(NBTTagCompound tagCompound,int dim,BlockPos pos){
  if (tagCompound != null) {
    coordinate=BlockPosTools.INVALID;
    if (tagCompound.hasKey(""String_Node_Str"")) {
      if (tagCompound.hasKey(""String_Node_Str"")) {
        this.dim=tagCompound.getInteger(""String_Node_Str"");
      }
 else {
        this.dim=tagCompound.getInteger(""String_Node_Str"");
      }
      if (dim == this.dim) {
        BlockPos c=new BlockPos(tagCompound.getInteger(""String_Node_Str""),tagCompound.getInteger(""String_Node_Str""),tagCompound.getInteger(""String_Node_Str""));
        int dx=Math.abs(c.getX() - pos.getX());
        int dz=Math.abs(c.getZ() - pos.getZ());
        if (dx <= 64 && dz <= 64) {
          coordinate=c;
        }
      }
      vertical=tagCompound.getBoolean(""String_Node_Str"");
      large=tagCompound.getBoolean(""String_Node_Str"");
    }
  }
}",0.9660460021905805
165774,"public static boolean isTeleportPrevented(Entity entity,GlobalCoordinate coordinate){
  if (areas.isEmpty()) {
    return false;
  }
  List<GlobalCoordinate> toRemove=new ArrayList<>();
  boolean noTeleport=false;
  long curtime=System.currentTimeMillis() - 10000;
  for (  Map.Entry<GlobalCoordinate,NoTeleportArea> entry : areas.entrySet()) {
    NoTeleportArea area=entry.getValue();
    GlobalCoordinate entryCoordinate=entry.getKey();
    if (area.in(coordinate,entryCoordinate)) {
      World world=TeleportationTools.getWorldForDimension(entity.getEntityWorld(),entryCoordinate.getDimension());
      TileEntity te=world.getTileEntity(entryCoordinate.getCoordinate());
      if (te instanceof EnvironmentalControllerTileEntity) {
        EnvironmentalControllerTileEntity controllerTileEntity=(EnvironmentalControllerTileEntity)te;
        noTeleport=controllerTileEntity.isEntityAffected(entity);
      }
    }
    if (area.getLastTouched() < curtime) {
      WorldServer world=DimensionManager.getWorld(entryCoordinate.getDimension());
      if (world != null) {
        BlockPos c=entryCoordinate.getCoordinate();
        if (!world.getChunkProvider().chunkExists(c.getX() >> 4,c.getZ() >> 4)) {
          boolean removeArea=true;
          TileEntity te=world.getTileEntity(c);
          if (te instanceof EnvironmentalControllerTileEntity) {
            EnvironmentalControllerTileEntity controllerTileEntity=(EnvironmentalControllerTileEntity)te;
            for (            EnvironmentModule module : controllerTileEntity.getEnvironmentModules()) {
              if (module instanceof NoTeleportEModule) {
                if (((NoTeleportEModule)module).isActive()) {
                  removeArea=false;
                  break;
                }
              }
            }
          }
          if (removeArea) {
            toRemove.add(entryCoordinate);
          }
        }
      }
    }
  }
  for (  GlobalCoordinate globalCoordinate : toRemove) {
    areas.remove(globalCoordinate);
  }
  return noTeleport;
}","public static boolean isTeleportPrevented(Entity entity,GlobalCoordinate coordinate){
  if (areas.isEmpty()) {
    return false;
  }
  List<GlobalCoordinate> toRemove=new ArrayList<>();
  boolean noTeleport=false;
  long curtime=System.currentTimeMillis() - 10000;
  for (  Map.Entry<GlobalCoordinate,NoTeleportArea> entry : areas.entrySet()) {
    NoTeleportArea area=entry.getValue();
    GlobalCoordinate entryCoordinate=entry.getKey();
    if (area.in(coordinate,entryCoordinate)) {
      World world=TeleportationTools.getWorldForDimension(entity.getEntityWorld(),entryCoordinate.getDimension());
      TileEntity te=world.getTileEntity(entryCoordinate.getCoordinate());
      if (te instanceof EnvironmentalControllerTileEntity) {
        EnvironmentalControllerTileEntity controllerTileEntity=(EnvironmentalControllerTileEntity)te;
        noTeleport=controllerTileEntity.isEntityAffected(entity);
      }
    }
    if (area.getLastTouched() < curtime) {
      WorldServer world=DimensionManager.getWorld(entryCoordinate.getDimension());
      if (world != null) {
        BlockPos c=entryCoordinate.getCoordinate();
        if (RFToolsTools.chunkLoaded(world,c)) {
          boolean removeArea=true;
          TileEntity te=world.getTileEntity(c);
          if (te instanceof EnvironmentalControllerTileEntity) {
            EnvironmentalControllerTileEntity controllerTileEntity=(EnvironmentalControllerTileEntity)te;
            for (            EnvironmentModule module : controllerTileEntity.getEnvironmentModules()) {
              if (module instanceof NoTeleportEModule) {
                if (((NoTeleportEModule)module).isActive()) {
                  removeArea=false;
                  break;
                }
              }
            }
          }
          if (removeArea) {
            toRemove.add(entryCoordinate);
          }
        }
      }
    }
  }
  for (  GlobalCoordinate globalCoordinate : toRemove) {
    areas.remove(globalCoordinate);
  }
  return noTeleport;
}",0.9789343246592316
165775,"public static boolean isPeaceful(GlobalCoordinate coordinate){
  if (areas.isEmpty()) {
    return false;
  }
  List<GlobalCoordinate> toRemove=new ArrayList<>();
  boolean peaceful=false;
  long curtime=System.currentTimeMillis() - 10000;
  for (  Map.Entry<GlobalCoordinate,PeacefulArea> entry : areas.entrySet()) {
    PeacefulArea area=entry.getValue();
    GlobalCoordinate entryCoordinate=entry.getKey();
    if (area.in(coordinate,entryCoordinate)) {
      peaceful=true;
    }
    if (area.getLastTouched() < curtime) {
      WorldServer world=DimensionManager.getWorld(entryCoordinate.getDimension());
      if (world != null) {
        BlockPos c=entryCoordinate.getCoordinate();
        if (!world.getChunkProvider().chunkExists(c.getX() >> 4,c.getZ() >> 4)) {
          boolean removeArea=true;
          TileEntity te=world.getTileEntity(c);
          if (te instanceof EnvironmentalControllerTileEntity) {
            EnvironmentalControllerTileEntity controllerTileEntity=(EnvironmentalControllerTileEntity)te;
            for (            EnvironmentModule module : controllerTileEntity.getEnvironmentModules()) {
              if (module instanceof PeacefulEModule) {
                if (((PeacefulEModule)module).isActive()) {
                  removeArea=false;
                  break;
                }
              }
            }
          }
          if (removeArea) {
            toRemove.add(entryCoordinate);
          }
        }
      }
    }
  }
  for (  GlobalCoordinate globalCoordinate : toRemove) {
    areas.remove(globalCoordinate);
  }
  return peaceful;
}","public static boolean isPeaceful(GlobalCoordinate coordinate){
  if (areas.isEmpty()) {
    return false;
  }
  List<GlobalCoordinate> toRemove=new ArrayList<>();
  boolean peaceful=false;
  long curtime=System.currentTimeMillis() - 10000;
  for (  Map.Entry<GlobalCoordinate,PeacefulArea> entry : areas.entrySet()) {
    PeacefulArea area=entry.getValue();
    GlobalCoordinate entryCoordinate=entry.getKey();
    if (area.in(coordinate,entryCoordinate)) {
      peaceful=true;
    }
    if (area.getLastTouched() < curtime) {
      WorldServer world=DimensionManager.getWorld(entryCoordinate.getDimension());
      if (world != null) {
        BlockPos c=entryCoordinate.getCoordinate();
        if (RFToolsTools.chunkLoaded(world,c)) {
          boolean removeArea=true;
          TileEntity te=world.getTileEntity(c);
          if (te instanceof EnvironmentalControllerTileEntity) {
            EnvironmentalControllerTileEntity controllerTileEntity=(EnvironmentalControllerTileEntity)te;
            for (            EnvironmentModule module : controllerTileEntity.getEnvironmentModules()) {
              if (module instanceof PeacefulEModule) {
                if (((PeacefulEModule)module).isActive()) {
                  removeArea=false;
                  break;
                }
              }
            }
          }
          if (removeArea) {
            toRemove.add(entryCoordinate);
          }
        }
      }
    }
  }
  for (  GlobalCoordinate globalCoordinate : toRemove) {
    areas.remove(globalCoordinate);
  }
  return peaceful;
}",0.9736925515055468
165776,"@Override public void generateSlots(){
  for (  SlotFactory slotFactory : factory.getSlots()) {
    Slot slot;
    if (CONTAINER_GRID.equals(slotFactory.getInventoryName())) {
      SlotType slotType=slotFactory.getSlotType();
      IInventory inventory=this.inventories.get(slotFactory.getInventoryName());
      int index=slotFactory.getIndex();
      int x=slotFactory.getX();
      int y=slotFactory.getY();
      slot=this.createSlot(slotFactory,inventory,index,x,y,slotType);
    }
 else     if (slotFactory.getSlotType() == SlotType.SLOT_PLAYERHOTBAR) {
      if (slotFactory.getIndex() == tabletIndex) {
        slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY()){
          @Override public boolean canTakeStack(          EntityPlayer player){
            return false;
          }
        }
;
      }
 else {
        slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
      }
    }
 else     if (slotFactory.getSlotType() == SlotType.SLOT_PLAYERINV) {
      slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
    }
 else {
      slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY()){
        @Override public boolean isItemValid(        ItemStack stack){
          if (isServer()) {
            RemoteStorageTileEntity storage=getRemoteStorage();
            int si=-1;
            if (storage != null) {
              si=storage.findRemoteIndex(getStorageID());
            }
            if (si != -1) {
              entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().setInteger(""String_Node_Str"",storage.getMaxStacks(si));
              return storage.isItemValidForSlot(getSlotIndex(),stack);
            }
 else {
              entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().setInteger(""String_Node_Str"",0);
              return false;
            }
          }
 else {
            int maxSize=entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().getInteger(""String_Node_Str"");
            if (getSlotIndex() >= maxSize) {
              return false;
            }
            return super.isItemValid(stack);
          }
        }
      }
;
    }
    addSlotToContainer(slot);
  }
}","@Override public void generateSlots(){
  for (  SlotFactory slotFactory : factory.getSlots()) {
    Slot slot;
    if (CONTAINER_GRID.equals(slotFactory.getInventoryName())) {
      SlotType slotType=slotFactory.getSlotType();
      IInventory inventory=this.inventories.get(slotFactory.getInventoryName());
      int index=slotFactory.getIndex();
      int x=slotFactory.getX();
      int y=slotFactory.getY();
      slot=this.createSlot(slotFactory,inventory,index,x,y,slotType);
    }
 else     if (slotFactory.getSlotType() == SlotType.SLOT_PLAYERHOTBAR) {
      if (slotFactory.getIndex() == tabletIndex) {
        slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY()){
          @Override public boolean canTakeStack(          EntityPlayer player){
            return false;
          }
        }
;
      }
 else {
        slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
      }
    }
 else     if (slotFactory.getSlotType() == SlotType.SLOT_PLAYERINV) {
      slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
    }
 else {
      slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY()){
        @Override public boolean isItemValid(        ItemStack stack){
          if (isServer()) {
            RemoteStorageTileEntity storage=getRemoteStorage();
            int si=-1;
            if (storage != null) {
              si=storage.findRemoteIndex(getStorageID());
            }
            if (si != -1) {
              entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().setInteger(""String_Node_Str"",storage.getMaxStacks(si));
              return true;
            }
 else {
              entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().setInteger(""String_Node_Str"",0);
              return false;
            }
          }
 else {
            int maxSize=entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().getInteger(""String_Node_Str"");
            if (getSlotIndex() >= maxSize) {
              return false;
            }
            return super.isItemValid(stack);
          }
        }
      }
;
    }
    addSlotToContainer(slot);
  }
}",0.989242863053372
165777,"@Override public boolean isItemValid(ItemStack stack){
  if (isServer()) {
    RemoteStorageTileEntity storage=getRemoteStorage();
    int si=-1;
    if (storage != null) {
      si=storage.findRemoteIndex(getStorageID());
    }
    if (si != -1) {
      entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().setInteger(""String_Node_Str"",storage.getMaxStacks(si));
      return storage.isItemValidForSlot(getSlotIndex(),stack);
    }
 else {
      entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().setInteger(""String_Node_Str"",0);
      return false;
    }
  }
 else {
    int maxSize=entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().getInteger(""String_Node_Str"");
    if (getSlotIndex() >= maxSize) {
      return false;
    }
    return super.isItemValid(stack);
  }
}","@Override public boolean isItemValid(ItemStack stack){
  if (isServer()) {
    RemoteStorageTileEntity storage=getRemoteStorage();
    int si=-1;
    if (storage != null) {
      si=storage.findRemoteIndex(getStorageID());
    }
    if (si != -1) {
      entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().setInteger(""String_Node_Str"",storage.getMaxStacks(si));
      return true;
    }
 else {
      entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().setInteger(""String_Node_Str"",0);
      return false;
    }
  }
 else {
    int maxSize=entityPlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound().getInteger(""String_Node_Str"");
    if (getSlotIndex() >= maxSize) {
      return false;
    }
    return super.isItemValid(stack);
  }
}",0.9667093469910372
165778,"@Override public ItemStack removeStackFromSlot(int index){
  version++;
  return inventoryHelper.removeStackFromSlot(index);
}","@Override public ItemStack removeStackFromSlot(int index){
  version++;
  if (isStorageAvailableRemotely(index)) {
    index-=ModularStorageContainer.SLOT_STORAGE;
    RemoteStorageTileEntity storageTileEntity=getRemoteStorage(remoteId);
    if (storageTileEntity == null) {
      return null;
    }
    int si=storageTileEntity.findRemoteIndex(remoteId);
    if (si == -1) {
      return null;
    }
    return storageTileEntity.removeStackFromSlotRemote(si,index);
  }
 else {
    return inventoryHelper.removeStackFromSlot(index);
  }
}",0.3097744360902256
165779,"public void update(){
  if (worldObj.isRemote) {
    return;
  }
  if (channel == -1) {
    return;
  }
  if ((powerLevel > 0) != prevValue) {
    prevValue=powerLevel > 0;
    RedstoneChannels channels=RedstoneChannels.getChannels(worldObj);
    RedstoneChannels.RedstoneChannel ch=channels.getOrCreateChannel(channel);
    ch.setValue(powerLevel > 0 ? 15 : 0);
    channels.save(worldObj);
  }
}","public void update(){
  if (worldObj.isRemote) {
    return;
  }
  if (channel == -1) {
    return;
  }
  boolean powered=powerLevel > 0;
  if (powered != prevIn) {
    prevIn=powered;
    markDirty();
    RedstoneChannels channels=RedstoneChannels.getChannels(worldObj);
    RedstoneChannels.RedstoneChannel ch=channels.getOrCreateChannel(channel);
    ch.setValue(powered ? 15 : 0);
    channels.save(worldObj);
  }
}",0.8186274509803921
165780,"@Override public boolean isItemValidForSlot(int index,ItemStack stack){
  if (index >= CrafterContainer.SLOT_BUFFER && index < CrafterContainer.SLOT_BUFFEROUT) {
    ItemStack ghostSlot=ghostSlots[index - CrafterContainer.SLOT_BUFFER];
    if (ghostSlot != null) {
      if (!ghostSlot.isItemEqual(stack)) {
        return false;
      }
    }
    if (inventoryHelper.containsItem(CrafterContainer.SLOT_FILTER_MODULE)) {
      getFilterCache();
      if (filterCache != null) {
        return filterCache.match(stack);
      }
    }
  }
 else   if (index >= CrafterContainer.SLOT_BUFFEROUT && index < CrafterContainer.SLOT_FILTER_MODULE) {
    ItemStack ghostSlot=ghostSlots[index - CrafterContainer.SLOT_BUFFEROUT + CrafterContainer.BUFFER_SIZE];
    if (ghostSlot != null) {
      if (!ghostSlot.isItemEqual(stack)) {
        return false;
      }
    }
  }
  return true;
}","@Override public boolean isItemValidForSlot(int index,ItemStack stack){
  if (index >= CrafterContainer.SLOT_CRAFTINPUT && index <= CrafterContainer.SLOT_CRAFTOUTPUT) {
    return false;
  }
  if (index >= CrafterContainer.SLOT_BUFFER && index < CrafterContainer.SLOT_BUFFEROUT) {
    ItemStack ghostSlot=ghostSlots[index - CrafterContainer.SLOT_BUFFER];
    if (ghostSlot != null) {
      if (!ghostSlot.isItemEqual(stack)) {
        return false;
      }
    }
    if (inventoryHelper.containsItem(CrafterContainer.SLOT_FILTER_MODULE)) {
      getFilterCache();
      if (filterCache != null) {
        return filterCache.match(stack);
      }
    }
  }
 else   if (index >= CrafterContainer.SLOT_BUFFEROUT && index < CrafterContainer.SLOT_FILTER_MODULE) {
    ItemStack ghostSlot=ghostSlots[index - CrafterContainer.SLOT_BUFFEROUT + CrafterContainer.BUFFER_SIZE];
    if (ghostSlot != null) {
      if (!ghostSlot.isItemEqual(stack)) {
        return false;
      }
    }
  }
  return true;
}",0.9363976483164084
165781,"@Override public void writeRestorableToNBT(NBTTagCompound tagCompound){
  super.writeRestorableToNBT(tagCompound);
  tagCompound.setInteger(""String_Node_Str"",radius);
  tagCompound.setBoolean(""String_Node_Str"",exportToCurrent);
  tagCompound.setTag(""String_Node_Str"",craftingGrid.writeToNBT());
}","@Override public void writeRestorableToNBT(NBTTagCompound tagCompound){
  super.writeRestorableToNBT(tagCompound);
  writeBufferToNBT(tagCompound,inventoryHelper);
  tagCompound.setInteger(""String_Node_Str"",radius);
  tagCompound.setBoolean(""String_Node_Str"",exportToCurrent);
  tagCompound.setTag(""String_Node_Str"",craftingGrid.writeToNBT());
}",0.9235569422776913
165782,"@Override public int[] getSlotsForFace(EnumFacing side){
  return StorageScannerContainer.factory.getAccessibleSlots();
}","@Override public int[] getSlotsForFace(EnumFacing side){
  return SLOTS;
}",0.7282051282051282
165783,"@Override public void readRestorableFromNBT(NBTTagCompound tagCompound){
  super.readRestorableFromNBT(tagCompound);
  radius=tagCompound.getInteger(""String_Node_Str"");
  exportToCurrent=tagCompound.getBoolean(""String_Node_Str"");
  craftingGrid.readFromNBT(tagCompound.getCompoundTag(""String_Node_Str""));
}","@Override public void readRestorableFromNBT(NBTTagCompound tagCompound){
  super.readRestorableFromNBT(tagCompound);
  readBufferFromNBT(tagCompound,inventoryHelper);
  radius=tagCompound.getInteger(""String_Node_Str"");
  exportToCurrent=tagCompound.getBoolean(""String_Node_Str"");
  craftingGrid.readFromNBT(tagCompound.getCompoundTag(""String_Node_Str""));
}",0.9244712990936556
165784,"@Override public boolean canInsertItem(int index,ItemStack itemStackIn,EnumFacing direction){
  return StorageScannerContainer.factory.isInputSlot(index);
}","@Override public boolean canInsertItem(int index,ItemStack itemStackIn,EnumFacing direction){
  return isItemValidForSlot(index,itemStackIn);
}",0.8093645484949833
165785,"void decrStackSize(IItemKey key,int amount);","ItemStack decrStackSize(IItemKey key,int amount);",0.8602150537634409
165786,"@Override public void decrStackSize(IItemKey key,int amount){
  ItemKey realKey=(ItemKey)key;
  ItemStack stack=realKey.getInventory().getStackInSlot(realKey.getSlot());
  stack.splitStack(amount);
  if (stack.stackSize == 0) {
    realKey.getInventory().setInventorySlotContents(realKey.getSlot(),null);
  }
}","@Override public ItemStack decrStackSize(IItemKey key,int amount){
  ItemKey realKey=(ItemKey)key;
  ItemStack stack=realKey.getInventory().getStackInSlot(realKey.getSlot());
  ItemStack result=stack.splitStack(amount);
  if (stack.stackSize == 0) {
    realKey.getInventory().setInventorySlotContents(realKey.getSlot(),null);
  }
  return result;
}",0.1183611532625189
165787,"private static void undo(EntityPlayerMP player,IItemSource itemSource,Map<IItemKey,ItemStack> undo){
  for (  Map.Entry<IItemKey,ItemStack> entry : undo.entrySet()) {
    itemSource.putStack(entry.getKey(),entry.getValue());
  }
  player.openContainer.detectAndSendChanges();
}","private static void undo(EntityPlayerMP player,IItemSource itemSource,List<Pair<IItemKey,ItemStack>> undo){
  for (  Pair<IItemKey,ItemStack> pair : undo) {
    itemSource.insertStack(pair.getKey(),pair.getValue());
  }
  player.openContainer.detectAndSendChanges();
}",0.8697247706422019
165788,"private static int findMatchingItems(InventoryCrafting workInventory,Map<IItemKey,ItemStack> undo,int i,ItemStack stack,int count,IItemSource itemSource,boolean strictDamage){
  for (  Pair<IItemKey,ItemStack> pair : itemSource.getItems()) {
    ItemStack input=pair.getValue();
    if (input != null) {
      if (match(stack,input,strictDamage)) {
        workInventory.setInventorySlotContents(i,input.copy());
        int ss=count;
        if (input.stackSize - ss < 0) {
          ss=input.stackSize;
        }
        count-=ss;
        IItemKey key=pair.getKey();
        if (!undo.containsKey(key)) {
          undo.put(key,input.copy());
        }
        itemSource.decrStackSize(key,ss);
      }
    }
    if (count == 0) {
      break;
    }
  }
  return count;
}","private static int findMatchingItems(InventoryCrafting workInventory,List<Pair<IItemKey,ItemStack>> undo,int i,ItemStack stack,int count,IItemSource itemSource,boolean strictDamage){
  for (  Pair<IItemKey,ItemStack> pair : itemSource.getItems()) {
    ItemStack input=pair.getValue();
    if (input != null) {
      if (match(stack,input,strictDamage)) {
        workInventory.setInventorySlotContents(i,input.copy());
        int ss=count;
        if (input.stackSize - ss < 0) {
          ss=input.stackSize;
        }
        count-=ss;
        IItemKey key=pair.getKey();
        ItemStack actuallyExtracted=itemSource.decrStackSize(key,ss);
        undo.add(Pair.of(key,actuallyExtracted));
      }
    }
    if (count == 0) {
      break;
    }
  }
  return count;
}",0.7756948933419522
165789,"static int[] tryRecipe(EntityPlayerMP player,CraftingRecipe craftingRecipe,int n,IItemSource itemSource,boolean strictDamage){
  InventoryCrafting workInventory=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer var1){
      return false;
    }
  }
,3,3);
  Map<IItemKey,ItemStack> undo=new HashMap<>();
  InventoryCrafting inventory=craftingRecipe.getInventory();
  int[] missingCount=new int[10];
  for (int i=0; i < 10; i++) {
    missingCount[i]=0;
  }
  for (int counter=0; counter < n; counter++) {
    for (int i=0; i < inventory.getSizeInventory(); i++) {
      ItemStack stack=inventory.getStackInSlot(i);
      if (stack != null) {
        int count=stack.stackSize;
        count=findMatchingItems(workInventory,undo,i,stack,count,itemSource,strictDamage);
        missingCount[i]+=count;
      }
 else {
        workInventory.setInventorySlotContents(i,null);
      }
    }
  }
  IRecipe recipe=craftingRecipe.getCachedRecipe(player.worldObj);
  if (!recipe.matches(workInventory,player.worldObj)) {
    missingCount[9]=1;
  }
 else {
    missingCount[9]=0;
  }
  undo(player,itemSource,undo);
  return missingCount;
}","static int[] tryRecipe(EntityPlayerMP player,CraftingRecipe craftingRecipe,int n,IItemSource itemSource,boolean strictDamage){
  InventoryCrafting workInventory=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer var1){
      return false;
    }
  }
,3,3);
  List<Pair<IItemKey,ItemStack>> undo=new ArrayList<>();
  InventoryCrafting inventory=craftingRecipe.getInventory();
  int[] missingCount=new int[10];
  for (int i=0; i < 10; i++) {
    missingCount[i]=0;
  }
  for (int counter=0; counter < n; counter++) {
    for (int i=0; i < inventory.getSizeInventory(); i++) {
      ItemStack stack=inventory.getStackInSlot(i);
      if (stack != null) {
        int count=stack.stackSize;
        count=findMatchingItems(workInventory,undo,i,stack,count,itemSource,strictDamage);
        missingCount[i]+=count;
      }
 else {
        workInventory.setInventorySlotContents(i,null);
      }
    }
  }
  IRecipe recipe=craftingRecipe.getCachedRecipe(player.worldObj);
  if (!recipe.matches(workInventory,player.worldObj)) {
    missingCount[9]=1;
  }
 else {
    missingCount[9]=0;
  }
  undo(player,itemSource,undo);
  return missingCount;
}",0.9877585479105108
165790,"private static List<ItemStack> testAndConsumeCraftingItems(EntityPlayerMP player,CraftingRecipe craftingRecipe,IItemSource itemSource,boolean strictDamage){
  InventoryCrafting workInventory=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer var1){
      return false;
    }
  }
,3,3);
  Map<IItemKey,ItemStack> undo=new HashMap<>();
  List<ItemStack> result=new ArrayList<>();
  InventoryCrafting inventory=craftingRecipe.getInventory();
  for (int i=0; i < inventory.getSizeInventory(); i++) {
    ItemStack stack=inventory.getStackInSlot(i);
    if (stack != null) {
      int count=stack.stackSize;
      count=findMatchingItems(workInventory,undo,i,stack,count,itemSource,strictDamage);
      if (count > 0) {
        undo(player,itemSource,undo);
        return Collections.emptyList();
      }
    }
 else {
      workInventory.setInventorySlotContents(i,null);
    }
  }
  IRecipe recipe=craftingRecipe.getCachedRecipe(player.worldObj);
  if (!recipe.matches(workInventory,player.worldObj)) {
    result.clear();
    undo(player,itemSource,undo);
    return result;
  }
  ItemStack stack=recipe.getCraftingResult(workInventory);
  if (stack != null) {
    result.add(stack);
    ItemStack[] remaining=recipe.getRemainingItems(workInventory);
    if (remaining != null) {
      for (      ItemStack s : remaining) {
        if (s != null) {
          result.add(s);
        }
      }
    }
  }
 else {
    result.clear();
    undo(player,itemSource,undo);
  }
  return result;
}","private static List<ItemStack> testAndConsumeCraftingItems(EntityPlayerMP player,CraftingRecipe craftingRecipe,IItemSource itemSource,boolean strictDamage){
  InventoryCrafting workInventory=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer var1){
      return false;
    }
  }
,3,3);
  List<Pair<IItemKey,ItemStack>> undo=new ArrayList<>();
  List<ItemStack> result=new ArrayList<>();
  InventoryCrafting inventory=craftingRecipe.getInventory();
  for (int i=0; i < inventory.getSizeInventory(); i++) {
    ItemStack stack=inventory.getStackInSlot(i);
    if (stack != null) {
      int count=stack.stackSize;
      count=findMatchingItems(workInventory,undo,i,stack,count,itemSource,strictDamage);
      if (count > 0) {
        undo(player,itemSource,undo);
        return Collections.emptyList();
      }
    }
 else {
      workInventory.setInventorySlotContents(i,null);
    }
  }
  IRecipe recipe=craftingRecipe.getCachedRecipe(player.worldObj);
  if (!recipe.matches(workInventory,player.worldObj)) {
    result.clear();
    undo(player,itemSource,undo);
    return result;
  }
  ItemStack stack=recipe.getCraftingResult(workInventory);
  if (stack != null) {
    result.add(stack);
    ItemStack[] remaining=recipe.getRemainingItems(workInventory);
    if (remaining != null) {
      for (      ItemStack s : remaining) {
        if (s != null) {
          result.add(s);
        }
      }
    }
  }
 else {
    result.clear();
    undo(player,itemSource,undo);
  }
  return result;
}",0.9905813575836312
165791,"@Override public void decrStackSize(IItemKey key,int amount){
  ItemKey realKey=(ItemKey)key;
  Object te=realKey.getInventory();
  if (te instanceof IItemHandler) {
    IItemHandler handler=(IItemHandler)te;
    handler.extractItem(realKey.getSlot(),amount,false);
  }
 else   if (te instanceof IInventory) {
    IInventory inventory=(IInventory)te;
    ItemStack stack=inventory.getStackInSlot(realKey.getSlot());
    stack.splitStack(amount);
    if (stack.stackSize == 0) {
      inventory.setInventorySlotContents(realKey.getSlot(),null);
    }
  }
}","@Override public ItemStack decrStackSize(IItemKey key,int amount){
  ItemKey realKey=(ItemKey)key;
  Object te=realKey.getInventory();
  if (te instanceof IItemHandler) {
    IItemHandler handler=(IItemHandler)te;
    return handler.extractItem(realKey.getSlot(),amount,false);
  }
 else   if (te instanceof IInventory) {
    IInventory inventory=(IInventory)te;
    ItemStack stack=inventory.getStackInSlot(realKey.getSlot());
    ItemStack result=stack.splitStack(amount);
    if (stack.stackSize == 0) {
      inventory.setInventorySlotContents(realKey.getSlot(),null);
    }
    return result;
  }
  return null;
}",0.9394714407502132
165792,"private boolean testAndConsumeCraftingItems(CraftingRecipe craftingRecipe,Map<Integer,ItemStack> undo,boolean strictDamage){
  int keep=craftingRecipe.isKeepOne() ? 1 : 0;
  InventoryCrafting inventory=craftingRecipe.getInventory();
  for (int i=0; i < inventory.getSizeInventory(); i++) {
    ItemStack stack=inventory.getStackInSlot(i);
    if (stack != null) {
      int count=stack.stackSize;
      for (int j=0; j < CrafterContainer.BUFFER_SIZE; j++) {
        int slotIdx=CrafterContainer.SLOT_BUFFER + j;
        ItemStack input=inventoryHelper.getStackInSlot(slotIdx);
        if (input != null && input.stackSize > keep) {
          if (match(stack,input,strictDamage)) {
            workInventory.setInventorySlotContents(i,input.copy());
            int ss=count;
            if (input.stackSize - ss < keep) {
              ss=input.stackSize - keep;
            }
            count-=ss;
            if (!undo.containsKey(slotIdx)) {
              undo.put(slotIdx,input.copy());
            }
            input.splitStack(ss);
            if (input.stackSize == 0) {
              inventoryHelper.setStackInSlot(slotIdx,null);
            }
          }
        }
        if (count == 0) {
          break;
        }
      }
      if (count > 0) {
        return false;
      }
    }
 else {
      workInventory.setInventorySlotContents(i,null);
    }
  }
  return true;
}","private boolean testAndConsumeCraftingItems(CraftingRecipe craftingRecipe,Map<Integer,ItemStack> undo,boolean strictDamage){
  int keep=craftingRecipe.isKeepOne() ? 1 : 0;
  InventoryCrafting inventory=craftingRecipe.getInventory();
  for (int i=0; i < inventory.getSizeInventory(); i++) {
    ItemStack stack=inventory.getStackInSlot(i);
    if (stack != null) {
      int count=stack.stackSize;
      for (int j=0; j < CrafterContainer.BUFFER_SIZE; j++) {
        int slotIdx=CrafterContainer.SLOT_BUFFER + j;
        ItemStack input=inventoryHelper.getStackInSlot(slotIdx);
        if (input != null && input.stackSize > keep) {
          if (match(stack,input,strictDamage)) {
            workInventory.setInventorySlotContents(i,input.copy());
            int ss=count;
            if (input.stackSize - ss < keep) {
              ss=input.stackSize - keep;
            }
            count-=ss;
            if (!undo.containsKey(slotIdx)) {
              undo.put(slotIdx,input.copy());
            }
            input.splitStack(ss);
            if (input.stackSize == 0) {
              inventoryHelper.setStackInSlot(slotIdx,null);
            }
          }
        }
        if (count == 0) {
          break;
        }
      }
      if (count > 0) {
        return false;
      }
    }
 else {
      workInventory.setInventorySlotContents(i,null);
    }
  }
  IRecipe recipe=craftingRecipe.getCachedRecipe(worldObj);
  return recipe.matches(workInventory,worldObj);
}",0.9598042642432716
165793,"private void initKeepMode(){
  keepItem=new ChoiceLabel(mc,this).addChoices(""String_Node_Str"",""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setEnabled(false).setLayoutHint(new PositionalLayout.PositionalHint(148,7,41,14));
}","private void initKeepMode(){
  keepItem=new ChoiceLabel(mc,this).addChoices(""String_Node_Str"",""String_Node_Str"").setEnabled(false).setLayoutHint(new PositionalLayout.PositionalHint(148,7,41,14));
  keepItem.setChoiceTooltip(""String_Node_Str"",""String_Node_Str"",TextFormatting.GREEN + ""String_Node_Str"");
  keepItem.setChoiceTooltip(""String_Node_Str"",""String_Node_Str"",TextFormatting.GREEN + ""String_Node_Str"");
}",0.5837037037037037
165794,"private void initInternalRecipe(){
  internalRecipe=new ChoiceLabel(mc,this).addChoices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setEnabled(false).setLayoutHint(new PositionalLayout.PositionalHint(148,24,41,14));
  internalRecipe.setChoiceTooltip(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  internalRecipe.setChoiceTooltip(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  internalRecipe.setChoiceTooltip(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","private void initInternalRecipe(){
  internalRecipe=new ChoiceLabel(mc,this).addChoices(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setTooltips(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setEnabled(false).setLayoutHint(new PositionalLayout.PositionalHint(148,24,41,14));
  internalRecipe.setChoiceTooltip(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TextFormatting.GREEN + ""String_Node_Str"");
  internalRecipe.setChoiceTooltip(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TextFormatting.GREEN + ""String_Node_Str"");
  internalRecipe.setChoiceTooltip(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TextFormatting.GREEN + ""String_Node_Str"");
}",0.9096252755326966
165795,"void insertStack(IItemKey key,ItemStack stack);","boolean insertStack(IItemKey key,ItemStack stack);",0.9072164948453608
165796,"@Override public void insertStack(IItemKey key,ItemStack stack){
  ItemKey realKey=(ItemKey)key;
  IInventory inventory=realKey.getInventory();
  ItemStack origStack=inventory.removeStackFromSlot(realKey.getSlot());
  if (origStack != null) {
    stack.stackSize+=origStack.stackSize;
  }
  inventory.setInventorySlotContents(realKey.getSlot(),stack);
}","@Override public boolean insertStack(IItemKey key,ItemStack stack){
  ItemKey realKey=(ItemKey)key;
  IInventory inventory=realKey.getInventory();
  ItemStack origStack=inventory.removeStackFromSlot(realKey.getSlot());
  if (origStack != null) {
    if (ItemHandlerHelper.canItemStacksStack(origStack,stack)) {
      if ((stack.stackSize + origStack.stackSize) > stack.getMaxStackSize()) {
        return false;
      }
      stack.stackSize+=origStack.stackSize;
    }
 else {
      return false;
    }
  }
  inventory.setInventorySlotContents(realKey.getSlot(),stack);
  return true;
}",0.7425531914893617
165797,"private static void undo(EntityPlayerMP player,IItemSource itemSource,List<Pair<IItemKey,ItemStack>> undo){
  for (  Pair<IItemKey,ItemStack> pair : undo) {
    itemSource.insertStack(pair.getKey(),pair.getValue());
  }
  player.openContainer.detectAndSendChanges();
}","private static void undo(EntityPlayerMP player,IItemSource itemSource,List<Pair<IItemKey,ItemStack>> undo){
  for (  Pair<IItemKey,ItemStack> pair : undo) {
    ItemStack stack=pair.getValue();
    if (!itemSource.insertStack(pair.getKey(),stack)) {
      int amountLeft=itemSource.insertStackAnySlot(pair.getKey(),stack);
      if (amountLeft > 0) {
        ItemStack copy=stack.copy();
        copy.stackSize=amountLeft;
        ItemHandlerHelper.giveItemToPlayer(player,copy);
      }
    }
  }
  player.openContainer.detectAndSendChanges();
}",0.5847665847665847
165798,"private static void insertStackInSlot(Object inv,int slot,ItemStack stack){
  if (inv instanceof IItemHandler) {
    IItemHandler handler=(IItemHandler)inv;
    handler.insertItem(slot,stack,false);
  }
 else   if (inv instanceof IInventory) {
    IInventory inventory=(IInventory)inv;
    ItemStack oldStack=inventory.getStackInSlot(slot);
    if (oldStack != null) {
      stack.stackSize+=oldStack.stackSize;
    }
    inventory.setInventorySlotContents(slot,stack);
  }
}","private static boolean insertStackInSlot(Object inv,int slot,ItemStack stack){
  if (inv instanceof IItemHandler) {
    IItemHandler handler=(IItemHandler)inv;
    if (handler.insertItem(slot,stack,true) != null) {
      return false;
    }
    return handler.insertItem(slot,stack,false) == null;
  }
 else   if (inv instanceof IInventory) {
    IInventory inventory=(IInventory)inv;
    ItemStack oldStack=inventory.getStackInSlot(slot);
    if (oldStack != null) {
      if ((stack.stackSize + oldStack.stackSize) > stack.getMaxStackSize()) {
        return false;
      }
      stack.stackSize+=oldStack.stackSize;
    }
    inventory.setInventorySlotContents(slot,stack);
    return true;
  }
  return false;
}",0.7815126050420168
165799,"@Override public void insertStack(IItemKey key,ItemStack stack){
  ItemKey realKey=(ItemKey)key;
  insertStackInSlot(realKey.getInventory(),realKey.getSlot(),stack);
}","@Override public boolean insertStack(IItemKey key,ItemStack stack){
  ItemKey realKey=(ItemKey)key;
  return insertStackInSlot(realKey.getInventory(),realKey.getSlot(),stack);
}",0.9534883720930232
165800,"public void draw(){
  int selected=recipeList.getSelected();
  storeButton.setEnabled(selected != -1);
  populateList();
  testRecipe();
  int x=Mouse.getEventX() * gui.width / gui.mc.displayWidth;
  int y=gui.height - Mouse.getEventY() * gui.height / gui.mc.displayHeight - 1;
  Widget widget=craftWindow.getToplevel().getWidgetAtPosition(x,y);
  if (widget == craft1Button) {
    testCraft(1);
  }
 else   if (widget == craft4Button) {
    testCraft(4);
  }
 else   if (widget == craft8Button) {
    testCraft(8);
  }
 else   if (widget == craftSButton) {
    testCraft(-1);
  }
 else {
    testResultFromServer=null;
    lastTestAmount=-2;
    lastTestTimer=0;
  }
  craftWindow.draw();
  if (testResultFromServer != null) {
    GlStateManager.pushMatrix();
    GlStateManager.translate((float)gui.guiLeft,(float)gui.guiTop,0.0F);
    for (int i=0; i < 9; i++) {
      if (testResultFromServer[i] > 0) {
        Slot slot=gui.inventorySlots.getSlotFromInventory(provider.getCraftingGrid().getCraftingGridInventory(),CraftingGridInventory.SLOT_GHOSTINPUT + i);
        if (slot != null) {
          GlStateManager.colorMask(true,true,true,false);
          gui.drawRect(slot.xDisplayPosition,slot.yDisplayPosition,slot.xDisplayPosition + 16,slot.yDisplayPosition + 16,0xffff0000);
        }
      }
    }
    GlStateManager.popMatrix();
  }
}","public void draw(){
  int selected=recipeList.getSelected();
  storeButton.setEnabled(selected != -1);
  populateList();
  testRecipe();
  int x=Mouse.getEventX() * gui.width / gui.mc.displayWidth;
  int y=gui.height - Mouse.getEventY() * gui.height / gui.mc.displayHeight - 1;
  Widget widget=craftWindow.getToplevel().getWidgetAtPosition(x,y);
  if (widget == craft1Button) {
    testCraft(1);
  }
 else   if (widget == craft4Button) {
    testCraft(4);
  }
 else   if (widget == craft8Button) {
    testCraft(8);
  }
 else   if (widget == craftSButton) {
    testCraft(-1);
  }
 else {
    testResultFromServer=null;
    lastTestAmount=-2;
    lastTestTimer=0;
  }
  craftWindow.draw();
  if (testResultFromServer != null) {
    GlStateManager.pushMatrix();
    GlStateManager.translate((float)gui.guiLeft,(float)gui.guiTop,0.0F);
    if (testResultFromServer[9] > 0) {
      Slot slot=gui.inventorySlots.getSlotFromInventory(provider.getCraftingGrid().getCraftingGridInventory(),CraftingGridInventory.SLOT_GHOSTOUTPUT);
      if (slot != null) {
        GlStateManager.colorMask(true,true,true,false);
        gui.drawRect(slot.xDisplayPosition,slot.yDisplayPosition,slot.xDisplayPosition + 16,slot.yDisplayPosition + 16,0xffff0000);
      }
    }
    for (int i=0; i < 9; i++) {
      if (testResultFromServer[i] > 0) {
        Slot slot=gui.inventorySlots.getSlotFromInventory(provider.getCraftingGrid().getCraftingGridInventory(),CraftingGridInventory.SLOT_GHOSTINPUT + i);
        if (slot != null) {
          GlStateManager.colorMask(true,true,true,false);
          gui.drawRect(slot.xDisplayPosition,slot.yDisplayPosition,slot.xDisplayPosition + 16,slot.yDisplayPosition + 16,0xffff0000);
        }
      }
    }
    GlStateManager.popMatrix();
  }
}",0.8229233741146169
165801,"@Override public void toBytes(ByteBuf buf){
  for (int i=0; i < 9; i++) {
    buf.writeInt(testResult[i]);
  }
}","@Override public void toBytes(ByteBuf buf){
  for (int i=0; i < 10; i++) {
    buf.writeInt(testResult[i]);
  }
}",0.9866666666666668
165802,"@Override public void fromBytes(ByteBuf buf){
  testResult=new int[9];
  for (int i=0; i < 9; i++) {
    testResult[i]=buf.readInt();
  }
}","@Override public void fromBytes(ByteBuf buf){
  testResult=new int[10];
  for (int i=0; i < 10; i++) {
    testResult[i]=buf.readInt();
  }
}",0.9785714285714284
165803,"public static int[] testCraftItems(EntityPlayerMP player,int n,CraftingRecipe craftingRecipe,IItemSource itemSource){
  IRecipe recipe=craftingRecipe.getCachedRecipe(player.worldObj);
  if (recipe == null) {
    return null;
  }
  if (craftingRecipe.getResult() != null && craftingRecipe.getResult().stackSize > 0) {
    if (n == -1) {
      n=craftingRecipe.getResult().getMaxStackSize();
    }
    int remainder=n % craftingRecipe.getResult().stackSize;
    n/=craftingRecipe.getResult().stackSize;
    if (remainder != 0) {
      n++;
    }
    if (n * craftingRecipe.getResult().stackSize > craftingRecipe.getResult().getMaxStackSize()) {
      n--;
    }
    return tryRecipe(player,craftingRecipe,n,itemSource);
  }
  return null;
}","public static int[] testCraftItems(EntityPlayerMP player,int n,CraftingRecipe craftingRecipe,IItemSource itemSource){
  IRecipe recipe=craftingRecipe.getCachedRecipe(player.worldObj);
  if (recipe == null) {
    return null;
  }
  if (craftingRecipe.getResult() != null && craftingRecipe.getResult().stackSize > 0) {
    if (n == -1) {
      n=craftingRecipe.getResult().getMaxStackSize();
    }
    int remainder=n % craftingRecipe.getResult().stackSize;
    n/=craftingRecipe.getResult().stackSize;
    if (remainder != 0) {
      n++;
    }
    if (n * craftingRecipe.getResult().stackSize > craftingRecipe.getResult().getMaxStackSize()) {
      n--;
    }
    int[] result=tryRecipe(player,craftingRecipe,n,itemSource,true);
    for (int i=0; i < 10; i++) {
      if (result[i] > 0) {
        int[] result2=tryRecipe(player,craftingRecipe,n,itemSource,false);
        if (result2[9] == 0) {
          return result2;
        }
 else {
          return result;
        }
      }
    }
    return result;
  }
  return null;
}",0.8090651558073655
165804,"static int[] tryRecipe(EntityPlayerMP player,CraftingRecipe craftingRecipe,int n,IItemSource itemSource){
  InventoryCrafting workInventory=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer var1){
      return false;
    }
  }
,3,3);
  Map<IItemKey,ItemStack> undo=new HashMap<>();
  InventoryCrafting inventory=craftingRecipe.getInventory();
  int[] missingCount=new int[9];
  for (int i=0; i < 9; i++) {
    missingCount[i]=0;
  }
  for (int counter=0; counter < n; counter++) {
    for (int i=0; i < inventory.getSizeInventory(); i++) {
      ItemStack stack=inventory.getStackInSlot(i);
      if (stack != null) {
        int count=stack.stackSize;
        count=findMatchingItems(workInventory,undo,i,stack,count,itemSource,false);
        missingCount[i]+=count;
      }
 else {
        workInventory.setInventorySlotContents(i,null);
      }
    }
  }
  undo(player,itemSource,undo);
  return missingCount;
}","static int[] tryRecipe(EntityPlayerMP player,CraftingRecipe craftingRecipe,int n,IItemSource itemSource,boolean strictDamage){
  InventoryCrafting workInventory=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer var1){
      return false;
    }
  }
,3,3);
  Map<IItemKey,ItemStack> undo=new HashMap<>();
  InventoryCrafting inventory=craftingRecipe.getInventory();
  int[] missingCount=new int[10];
  for (int i=0; i < 10; i++) {
    missingCount[i]=0;
  }
  for (int counter=0; counter < n; counter++) {
    for (int i=0; i < inventory.getSizeInventory(); i++) {
      ItemStack stack=inventory.getStackInSlot(i);
      if (stack != null) {
        int count=stack.stackSize;
        count=findMatchingItems(workInventory,undo,i,stack,count,itemSource,strictDamage);
        missingCount[i]+=count;
      }
 else {
        workInventory.setInventorySlotContents(i,null);
      }
    }
  }
  IRecipe recipe=craftingRecipe.getCachedRecipe(player.worldObj);
  if (!recipe.matches(workInventory,player.worldObj)) {
    missingCount[9]=1;
  }
 else {
    missingCount[9]=0;
  }
  undo(player,itemSource,undo);
  return missingCount;
}",0.4091332712022367
165805,"@Override protected boolean needsCustomInvWrapper(){
  return true;
}","@Override protected boolean needsCustomInvWrapper(){
  return false;
}",0.9496402877697842
165806,"@Override public void addProbeInfo(ProbeMode mode,IProbeInfo probeInfo,EntityPlayer player,World world,IBlockState blockState,IProbeHitData data){
  super.addProbeInfo(mode,probeInfo,player,world,blockState,data);
  TileEntity te=world.getTileEntity(data.getPos());
  if (te instanceof MatterTransmitterTileEntity) {
    MatterTransmitterTileEntity matterTransmitterTileEntity=(MatterTransmitterTileEntity)te;
    probeInfo.text(TextFormatting.GREEN + ""String_Node_Str"" + matterTransmitterTileEntity.getName());
    if (matterTransmitterTileEntity.isDialed()) {
      Integer teleportId=matterTransmitterTileEntity.getTeleportId();
      if (teleportId == null) {
        ReturnDestinationInfoHelper.id=null;
      }
 else {
        if (System.currentTimeMillis() - lastTime > 500) {
          lastTime=System.currentTimeMillis();
          RFToolsMessages.INSTANCE.sendToServer(new PacketGetDestinationInfo(teleportId));
        }
      }
      String name=""String_Node_Str"";
      if (ReturnDestinationInfoHelper.id != null && ReturnDestinationInfoHelper.id.equals(teleportId)) {
        name=ReturnDestinationInfoHelper.name;
      }
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
    if (matterTransmitterTileEntity.isOnce()) {
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"");
    }
  }
}","@Override public void addProbeInfo(ProbeMode mode,IProbeInfo probeInfo,EntityPlayer player,World world,IBlockState blockState,IProbeHitData data){
  super.addProbeInfo(mode,probeInfo,player,world,blockState,data);
  TileEntity te=world.getTileEntity(data.getPos());
  if (te instanceof MatterTransmitterTileEntity) {
    MatterTransmitterTileEntity matterTransmitterTileEntity=(MatterTransmitterTileEntity)te;
    probeInfo.text(TextFormatting.GREEN + ""String_Node_Str"" + matterTransmitterTileEntity.getName());
    if (matterTransmitterTileEntity.isDialed()) {
      Integer teleportId=matterTransmitterTileEntity.getTeleportId();
      TeleportDestinations destinations=TeleportDestinations.getDestinations(world);
      String name=""String_Node_Str"";
      if (teleportId != null) {
        name=TeleportDestinations.getDestinationName(destinations,teleportId);
      }
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
    if (matterTransmitterTileEntity.isOnce()) {
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"");
    }
  }
}",0.7838499184339315
165807,"private void handle(PacketGetDestinationInfo message,MessageContext ctx){
  World world=ctx.getServerHandler().playerEntity.worldObj;
  TeleportDestinations destinations=TeleportDestinations.getDestinations(world);
  GlobalCoordinate coordinate=destinations.getCoordinateForId(message.receiverId);
  String name;
  if (coordinate == null) {
    name=""String_Node_Str"";
  }
 else {
    TeleportDestination destination=destinations.getDestination(coordinate);
    if (destination == null) {
      name=""String_Node_Str"";
    }
 else {
      name=destination.getName();
      if (name == null || name.isEmpty()) {
        name=destination.getCoordinate() + ""String_Node_Str"" + destination.getDimension()+ ""String_Node_Str"";
      }
    }
  }
  RFToolsMessages.INSTANCE.sendTo(new PacketReturnDestinationInfo(message.receiverId,name),ctx.getServerHandler().playerEntity);
}","private void handle(PacketGetDestinationInfo message,MessageContext ctx){
  World world=ctx.getServerHandler().playerEntity.worldObj;
  TeleportDestinations destinations=TeleportDestinations.getDestinations(world);
  int receiverId=message.receiverId;
  String name=TeleportDestinations.getDestinationName(destinations,receiverId);
  RFToolsMessages.INSTANCE.sendTo(new PacketReturnDestinationInfo(receiverId,name),ctx.getServerHandler().playerEntity);
}",0.54572940287226
165808,"private void undo(Map<Integer,ItemStack> undo){
  for (  Map.Entry<Integer,ItemStack> entry : undo.entrySet()) {
    inventoryHelper.setStackInSlot(entry.getKey(),entry.getValue());
  }
}","private void undo(Map<Integer,ItemStack> undo){
  for (  Map.Entry<Integer,ItemStack> entry : undo.entrySet()) {
    inventoryHelper.setStackInSlot(entry.getKey(),entry.getValue());
  }
  undo.clear();
}",0.958974358974359
165809,"private void handle(PacketGridToServer message,MessageContext ctx){
  EntityPlayerMP player=ctx.getServerHandler().playerEntity;
  World world=player.worldObj;
  CraftingGridProvider provider=message.handleMessage(world,player);
  if (provider != null) {
    CraftingGridInventory inventory=provider.getCraftingGrid().getCraftingGridInventory();
    for (int i=0; i < 10; i++) {
      inventory.setInventorySlotContents(i,message.stacks[i]);
    }
    provider.markDirty();
  }
}","private void handle(PacketGridToServer message,MessageContext ctx){
  EntityPlayerMP player=ctx.getServerHandler().playerEntity;
  World world=player.worldObj;
  CraftingGridProvider provider=message.handleMessage(world,player);
  if (provider != null) {
    CraftingGridInventory inventory=provider.getCraftingGrid().getCraftingGridInventory();
    for (int i=0; i < 10; i++) {
      inventory.setInventorySlotContents(i,message.stacks[i]);
    }
    provider.markInventoryDirty();
  }
}",0.9906928645294726
165810,"public GuiModularStorage(ModularStorageTileEntity modularStorageTileEntity,Container container){
  super(RFTools.instance,RFToolsMessages.INSTANCE,modularStorageTileEntity,container,RFTools.GUI_MANUAL_MAIN,""String_Node_Str"");
  craftingGrid=new GuiCraftingGrid();
  xSize=STORAGE_WIDTH;
  ScaledResolution scaledresolution=new ScaledResolution(Minecraft.getMinecraft());
  int height=scaledresolution.getScaledHeight();
  if (height > 510) {
    ySize=STORAGE_HEIGHT2;
  }
 else   if (height > 340) {
    ySize=STORAGE_HEIGHT1;
  }
 else {
    ySize=STORAGE_HEIGHT0;
  }
  for (  Object o : container.inventorySlots) {
    Slot slot=(Slot)o;
    slot.yDisplayPosition+=ySize - STORAGE_HEIGHT0;
  }
}","public GuiModularStorage(ModularStorageTileEntity modularStorageTileEntity,Container container){
  super(RFTools.instance,RFToolsMessages.INSTANCE,modularStorageTileEntity,container,RFTools.GUI_MANUAL_MAIN,""String_Node_Str"");
  craftingGrid=new GuiCraftingGrid();
  xSize=STORAGE_WIDTH;
  ScaledResolution scaledresolution=new ScaledResolution(Minecraft.getMinecraft());
  int height=scaledresolution.getScaledHeight();
  if (height > 510) {
    ySize=STORAGE_HEIGHT2;
  }
 else   if (height > 340) {
    ySize=STORAGE_HEIGHT1;
  }
 else {
    ySize=STORAGE_HEIGHT0;
  }
  IInventory gridInventory=((GenericContainer)container).getInventory(CONTAINER_GRID);
  for (  Object o : container.inventorySlots) {
    Slot slot=(Slot)o;
    if (slot.inventory != gridInventory) {
      slot.yDisplayPosition+=ySize - STORAGE_HEIGHT0;
    }
  }
}",0.91015625
165811,"static List<ItemStack> testAndConsumeCraftingItems(EntityPlayerMP player,CraftingRecipe craftingRecipe,IInventory thisInventory,int thisInventoryOffset){
  InventoryCrafting workInventory=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer var1){
      return false;
    }
  }
,3,3);
  Map<Pair<IInventory,Integer>,ItemStack> undo=new HashMap<>();
  List<ItemStack> result=new ArrayList<>();
  InventoryCrafting inventory=craftingRecipe.getInventory();
  for (int i=0; i < inventory.getSizeInventory(); i++) {
    ItemStack stack=inventory.getStackInSlot(i);
    if (stack != null) {
      int count=stack.stackSize;
      count=findMatchingItems(workInventory,undo,result,i,stack,count,player.inventory,0);
      if (count > 0) {
        count=findMatchingItems(workInventory,undo,result,i,stack,count,thisInventory,thisInventoryOffset);
      }
      if (count > 0) {
        undo(player,undo);
        return Collections.emptyList();
      }
    }
 else {
      workInventory.setInventorySlotContents(i,null);
    }
  }
  IRecipe recipe=craftingRecipe.getCachedRecipe(player.worldObj);
  ItemStack stack=recipe.getCraftingResult(workInventory);
  if (stack != null) {
    result.add(stack);
  }
 else {
    result.clear();
    undo(player,undo);
  }
  return result;
}","static List<ItemStack> testAndConsumeCraftingItems(EntityPlayerMP player,CraftingRecipe craftingRecipe,IInventory thisInventory,int thisInventoryOffset){
  InventoryCrafting workInventory=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer var1){
      return false;
    }
  }
,3,3);
  Map<Pair<IInventory,Integer>,ItemStack> undo=new HashMap<>();
  List<ItemStack> result=new ArrayList<>();
  InventoryCrafting inventory=craftingRecipe.getInventory();
  for (int i=0; i < inventory.getSizeInventory(); i++) {
    ItemStack stack=inventory.getStackInSlot(i);
    if (stack != null) {
      int count=stack.stackSize;
      count=findMatchingItems(workInventory,undo,result,i,stack,count,player.inventory,0);
      if (count > 0) {
        count=findMatchingItems(workInventory,undo,result,i,stack,count,thisInventory,thisInventoryOffset);
      }
      if (count > 0) {
        undo(player,undo);
        return Collections.emptyList();
      }
    }
 else {
      workInventory.setInventorySlotContents(i,null);
    }
  }
  IRecipe recipe=craftingRecipe.getCachedRecipe(player.worldObj);
  ItemStack stack=recipe.getCraftingResult(workInventory);
  if (stack != null) {
    result.add(stack);
    ItemStack[] remaining=recipe.getRemainingItems(workInventory);
    if (remaining != null) {
      for (      ItemStack s : remaining) {
        if (s != null) {
          result.add(s);
        }
      }
    }
  }
 else {
    result.clear();
    undo(player,undo);
  }
  return result;
}",0.9250175192711984
165812,"@Override public void addProbeInfo(ProbeMode mode,IProbeInfo probeInfo,EntityPlayer player,World world,IBlockState blockState,IProbeHitData data){
  super.addProbeInfo(mode,probeInfo,player,world,blockState,data);
  TileEntity te=world.getTileEntity(data.getPos());
  if (te instanceof MatterTransmitterTileEntity) {
    MatterTransmitterTileEntity matterTransmitterTileEntity=(MatterTransmitterTileEntity)te;
    probeInfo.text(TextFormatting.GREEN + ""String_Node_Str"" + matterTransmitterTileEntity.getName());
    if (matterTransmitterTileEntity.isDialed()) {
      if (System.currentTimeMillis() - lastTime > 500) {
        lastTime=System.currentTimeMillis();
        RFToolsMessages.INSTANCE.sendToServer(new PacketGetDestinationInfo(matterTransmitterTileEntity.getTeleportId()));
      }
      String name=""String_Node_Str"";
      if (ReturnDestinationInfoHelper.id != null && ReturnDestinationInfoHelper.id == matterTransmitterTileEntity.getTeleportId()) {
        name=ReturnDestinationInfoHelper.name;
      }
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
    if (matterTransmitterTileEntity.isOnce()) {
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"");
    }
  }
}","@Override public void addProbeInfo(ProbeMode mode,IProbeInfo probeInfo,EntityPlayer player,World world,IBlockState blockState,IProbeHitData data){
  super.addProbeInfo(mode,probeInfo,player,world,blockState,data);
  TileEntity te=world.getTileEntity(data.getPos());
  if (te instanceof MatterTransmitterTileEntity) {
    MatterTransmitterTileEntity matterTransmitterTileEntity=(MatterTransmitterTileEntity)te;
    probeInfo.text(TextFormatting.GREEN + ""String_Node_Str"" + matterTransmitterTileEntity.getName());
    if (matterTransmitterTileEntity.isDialed()) {
      Integer teleportId=matterTransmitterTileEntity.getTeleportId();
      if (teleportId == null) {
        ReturnDestinationInfoHelper.id=null;
      }
 else {
        if (System.currentTimeMillis() - lastTime > 500) {
          lastTime=System.currentTimeMillis();
          RFToolsMessages.INSTANCE.sendToServer(new PacketGetDestinationInfo(teleportId));
        }
      }
      String name=""String_Node_Str"";
      if (ReturnDestinationInfoHelper.id != null && ReturnDestinationInfoHelper.id.equals(teleportId)) {
        name=ReturnDestinationInfoHelper.name;
      }
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
    if (matterTransmitterTileEntity.isOnce()) {
      probeInfo.text(TextFormatting.YELLOW + ""String_Node_Str"");
    }
  }
}",0.8860662047729022
165813,"/** 
 * Something happens, we need to notify all ender monitors.
 * @param mode is the new mode
 */
private void fireMonitors(EnderMonitorMode mode){
  BlockPos pos=getPos();
  for (  EnumFacing dir : EnumFacing.VALUES) {
    BlockPos c=pos.offset(dir);
    TileEntity te=worldObj.getTileEntity(c);
    if (te instanceof EnderMonitorTileEntity) {
      EnderMonitorTileEntity enderMonitorTileEntity=(EnderMonitorTileEntity)te;
      EnumFacing inputSide=enderMonitorTileEntity.getFacing().getInputSide();
      if (inputSide == dir.getOpposite()) {
        enderMonitorTileEntity.fireFromEndergenic(mode);
      }
    }
  }
}","/** 
 * Something happens, we need to notify all ender monitors.
 * @param mode is the new mode
 */
private void fireMonitors(EnderMonitorMode mode){
  BlockPos pos=getPos();
  for (  EnumFacing dir : EnumFacing.VALUES) {
    BlockPos c=pos.offset(dir);
    TileEntity te=worldObj.getTileEntity(c);
    if (te instanceof EnderMonitorTileEntity) {
      EnderMonitorTileEntity enderMonitorTileEntity=(EnderMonitorTileEntity)te;
      EnumFacing inputSide=enderMonitorTileEntity.getFacing(worldObj.getBlockState(c)).getInputSide();
      if (inputSide == dir.getOpposite()) {
        enderMonitorTileEntity.fireFromEndergenic(mode);
      }
    }
  }
}",0.9803921568627452
165814,"@Override protected int getRedstoneOutput(IBlockState state,IBlockAccess world,BlockPos pos,EnumFacing side){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    if (side == logicTileEntity.getFacing().getInputSide()) {
      return state.getValue(OUTPUTPOWER) ? 15 : 0;
    }
 else {
      return 0;
    }
  }
  return 0;
}","@Override protected int getRedstoneOutput(IBlockState state,IBlockAccess world,BlockPos pos,EnumFacing side){
  TileEntity te=world.getTileEntity(pos);
  if (state.getBlock() instanceof LogicSlabBlock && te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    if (side == logicTileEntity.getFacing(state).getInputSide()) {
      return state.getValue(OUTPUTPOWER) ? 15 : 0;
    }
 else {
      return 0;
    }
  }
  return 0;
}",0.9419795221843004
165815,"@Override protected void checkRedstone(World world,BlockPos pos){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    EnumFacing inputSide=logicTileEntity.getFacing().getInputSide();
    int power=getInputStrength(world,pos,inputSide);
    if (power == 0) {
      IBlockState blockState=world.getBlockState(pos.offset(inputSide));
      Block b=blockState.getBlock();
      if (b == Blocks.REDSTONE_WIRE) {
        power=world.isBlockPowered(pos.offset(inputSide)) ? 15 : 0;
      }
    }
    logicTileEntity.setPowerInput(power);
  }
}","@Override protected void checkRedstone(World world,BlockPos pos){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    EnumFacing inputSide=logicTileEntity.getFacing(world.getBlockState(pos)).getInputSide();
    int power=getInputStrength(world,pos,inputSide);
    if (power == 0) {
      IBlockState blockState=world.getBlockState(pos.offset(inputSide));
      Block b=blockState.getBlock();
      if (b == Blocks.REDSTONE_WIRE) {
        power=world.isBlockPowered(pos.offset(inputSide)) ? 15 : 0;
      }
    }
    logicTileEntity.setPowerInput(power);
  }
}",0.9811912225705328
165816,"@Override public AxisAlignedBB getBoundingBox(IBlockState state,IBlockAccess world,BlockPos pos){
  if (world.getBlockState(pos).getBlock() instanceof LogicSlabBlock) {
    TileEntity te=world.getTileEntity(pos);
    if (te instanceof LogicTileEntity) {
      LogicTileEntity logicTileEntity=(LogicTileEntity)te;
      EnumFacing side=logicTileEntity.getFacing().getSide();
switch (side) {
case DOWN:
        return BLOCK_DOWN;
case UP:
      return BLOCK_UP;
case NORTH:
    return BLOCK_NORTH;
case SOUTH:
  return BLOCK_SOUTH;
case WEST:
return BLOCK_WEST;
case EAST:
return BLOCK_EAST;
}
}
}
return BLOCK_DOWN;
}","@Override public AxisAlignedBB getBoundingBox(IBlockState state,IBlockAccess world,BlockPos pos){
  IBlockState blockState=world.getBlockState(pos);
  if (blockState.getBlock() instanceof LogicSlabBlock) {
    TileEntity te=world.getTileEntity(pos);
    if (te instanceof LogicTileEntity) {
      LogicTileEntity logicTileEntity=(LogicTileEntity)te;
      EnumFacing side=logicTileEntity.getFacing(blockState).getSide();
switch (side) {
case DOWN:
        return BLOCK_DOWN;
case UP:
      return BLOCK_UP;
case NORTH:
    return BLOCK_NORTH;
case SOUTH:
  return BLOCK_SOUTH;
case WEST:
return BLOCK_WEST;
case EAST:
return BLOCK_EAST;
}
}
}
return BLOCK_DOWN;
}",0.8334636434714621
165817,"@Override public IBlockState getActualState(IBlockState state,IBlockAccess worldIn,BlockPos pos){
  int meta=state.getValue(META_INTERMEDIATE);
  TileEntity te=worldIn.getTileEntity(pos);
  if (te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    LogicFacing facing=logicTileEntity.getFacing();
    facing=LogicFacing.getFacingWithMeta(facing,meta);
    return state.withProperty(LOGIC_FACING,facing);
  }
 else {
    return state.withProperty(LOGIC_FACING,LogicFacing.DOWN_TONORTH);
  }
}","@Override public IBlockState getActualState(IBlockState state,IBlockAccess worldIn,BlockPos pos){
  int meta=state.getValue(META_INTERMEDIATE);
  TileEntity te=worldIn.getTileEntity(pos);
  if (te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    LogicFacing facing=logicTileEntity.getFacing(state);
    facing=LogicFacing.getFacingWithMeta(facing,meta);
    return state.withProperty(LOGIC_FACING,facing);
  }
 else {
    return state.withProperty(LOGIC_FACING,LogicFacing.DOWN_TONORTH);
  }
}",0.9953051643192488
165818,"@Override public boolean rotateBlock(World world,BlockPos pos,EnumFacing axis){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    LogicFacing facing=logicTileEntity.getFacing();
    int meta=facing.getMeta();
switch (meta) {
case 0:
      meta=2;
    break;
case 1:
  meta=3;
break;
case 2:
meta=1;
break;
case 3:
meta=0;
break;
}
LogicFacing newfacing=LogicFacing.getFacingWithMeta(facing,meta);
logicTileEntity.setFacing(newfacing);
world.setBlockState(pos,world.getBlockState(pos).getBlock().getDefaultState().withProperty(META_INTERMEDIATE,meta).withProperty(OUTPUTPOWER,false),3);
return true;
}
return false;
}","@Override public boolean rotateBlock(World world,BlockPos pos,EnumFacing axis){
  IBlockState state=world.getBlockState(pos);
  TileEntity te=world.getTileEntity(pos);
  if (state.getBlock() instanceof LogicSlabBlock && te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    LogicFacing facing=logicTileEntity.getFacing(state);
    int meta=facing.getMeta();
switch (meta) {
case 0:
      meta=2;
    break;
case 1:
  meta=3;
break;
case 2:
meta=1;
break;
case 3:
meta=0;
break;
}
LogicFacing newfacing=LogicFacing.getFacingWithMeta(facing,meta);
logicTileEntity.setFacing(newfacing);
world.setBlockState(pos,state.getBlock().getDefaultState().withProperty(META_INTERMEDIATE,meta).withProperty(OUTPUTPOWER,false),3);
return true;
}
return false;
}",0.8795180722891566
165819,"@Override public boolean canConnectRedstone(IBlockState state,IBlockAccess world,BlockPos pos,EnumFacing side){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    EnumFacing direction=logicTileEntity.getFacing().getInputSide();
switch (direction) {
case NORTH:
case SOUTH:
      return side == NORTH || side == SOUTH;
case WEST:
case EAST:
    return side == WEST || side == EAST;
case DOWN:
case UP:
  return side == DOWN || side == UP;
}
}
return false;
}","@Override public boolean canConnectRedstone(IBlockState state,IBlockAccess world,BlockPos pos,EnumFacing side){
  TileEntity te=world.getTileEntity(pos);
  if (state.getBlock() instanceof LogicSlabBlock && te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    EnumFacing direction=logicTileEntity.getFacing(state).getInputSide();
switch (direction) {
case NORTH:
case SOUTH:
      return side == NORTH || side == SOUTH;
case WEST:
case EAST:
    return side == WEST || side == EAST;
case DOWN:
case UP:
  return side == DOWN || side == UP;
}
}
return false;
}",0.955536181342633
165820,"public LogicFacing getFacing(){
  Integer meta=worldObj.getBlockState(pos).getValue(LogicSlabBlock.META_INTERMEDIATE);
  return LogicFacing.getFacingWithMeta(facing,meta);
}","public LogicFacing getFacing(IBlockState state){
  Integer meta=state.getValue(LogicSlabBlock.META_INTERMEDIATE);
  return LogicFacing.getFacingWithMeta(facing,meta);
}",0.8797653958944281
165821,"@Override public void update(){
  if (worldObj.isRemote) {
    return;
  }
  checkCounter--;
  if (checkCounter > 0) {
    return;
  }
  checkCounter=10;
  boolean newout=false;
  EnumFacing inputSide=getFacing().getInputSide();
  TileEntity te=worldObj.getTileEntity(getPos().offset(inputSide));
  if (InventoryHelper.isInventory(te)) {
    ItemStack stack=null;
    if (te.hasCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,null)) {
      IItemHandler capability=te.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,null);
      if (slot >= 0 && slot < capability.getSlots()) {
        stack=capability.getStackInSlot(slot);
      }
    }
 else     if (te instanceof IInventory) {
      IInventory inventory=(IInventory)te;
      if (slot >= 0 && slot < inventory.getSizeInventory()) {
        stack=inventory.getStackInSlot(slot);
      }
    }
    if (stack != null) {
      int nr=isItemMatching(stack);
      newout=nr >= amount;
    }
  }
  if (newout != redstoneOut) {
    redstoneOut=newout;
    setRedstoneState(redstoneOut);
  }
}","@Override public void update(){
  if (worldObj.isRemote) {
    return;
  }
  checkCounter--;
  if (checkCounter > 0) {
    return;
  }
  checkCounter=10;
  boolean newout=false;
  EnumFacing inputSide=getFacing(worldObj.getBlockState(getPos())).getInputSide();
  TileEntity te=worldObj.getTileEntity(getPos().offset(inputSide));
  if (InventoryHelper.isInventory(te)) {
    ItemStack stack=null;
    if (te.hasCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,null)) {
      IItemHandler capability=te.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,null);
      if (slot >= 0 && slot < capability.getSlots()) {
        stack=capability.getStackInSlot(slot);
      }
    }
 else     if (te instanceof IInventory) {
      IInventory inventory=(IInventory)te;
      if (slot >= 0 && slot < inventory.getSizeInventory()) {
        stack=inventory.getStackInSlot(slot);
      }
    }
    if (stack != null) {
      int nr=isItemMatching(stack);
      newout=nr >= amount;
    }
  }
  if (newout != redstoneOut) {
    redstoneOut=newout;
    setRedstoneState(redstoneOut);
  }
}",0.9851301115241636
165822,"@Override public void update(){
  if (worldObj.isRemote) {
    return;
  }
  checkCounter--;
  if (checkCounter > 0) {
    return;
  }
  checkCounter=10;
  boolean newout=false;
  EnumFacing inputSide=getFacing().getInputSide();
  BlockPos newpos=getPos().offset(inputSide);
switch (sensorType) {
case SENSOR_BLOCK:
    newout=checkBlock(newpos,inputSide);
  break;
case SENSOR_GROWTHLEVEL:
newout=checkGrowthLevel(newpos,inputSide);
break;
case SENSOR_ENTITIES:
newout=checkEntities(newpos,inputSide,Entity.class);
break;
case SENSOR_PLAYERS:
newout=checkEntities(newpos,inputSide,EntityPlayer.class);
break;
case SENSOR_HOSTILE:
newout=checkEntitiesHostile(newpos,inputSide);
break;
case SENSOR_PASSIVE:
newout=checkEntitiesPassive(newpos,inputSide);
break;
}
if (newout != redstoneOut) {
redstoneOut=newout;
setRedstoneState(redstoneOut);
}
}","@Override public void update(){
  if (worldObj.isRemote) {
    return;
  }
  checkCounter--;
  if (checkCounter > 0) {
    return;
  }
  checkCounter=10;
  boolean newout=false;
  EnumFacing inputSide=getFacing(worldObj.getBlockState(getPos())).getInputSide();
  BlockPos newpos=getPos().offset(inputSide);
switch (sensorType) {
case SENSOR_BLOCK:
    newout=checkBlock(newpos,inputSide);
  break;
case SENSOR_GROWTHLEVEL:
newout=checkGrowthLevel(newpos,inputSide);
break;
case SENSOR_ENTITIES:
newout=checkEntities(newpos,inputSide,Entity.class);
break;
case SENSOR_PLAYERS:
newout=checkEntities(newpos,inputSide,EntityPlayer.class);
break;
case SENSOR_HOSTILE:
newout=checkEntitiesHostile(newpos,inputSide);
break;
case SENSOR_PASSIVE:
newout=checkEntitiesPassive(newpos,inputSide);
break;
}
if (newout != redstoneOut) {
redstoneOut=newout;
setRedstoneState(redstoneOut);
}
}",0.9814169570267132
165823,"@Override protected void checkRedstone(World world,BlockPos pos){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    EnumFacing downSide=logicTileEntity.getFacing().getSide();
    EnumFacing inputSide=logicTileEntity.getFacing().getInputSide();
    EnumFacing leftSide=rotateLeft(downSide,inputSide);
    EnumFacing rightSide=rotateRight(downSide,inputSide);
    int powered1=getInputStrength(world,pos,leftSide) > 0 ? 1 : 0;
    int powered2=getInputStrength(world,pos,inputSide) > 0 ? 2 : 0;
    int powered3=getInputStrength(world,pos,rightSide) > 0 ? 4 : 0;
    logicTileEntity.setPowerInput(powered1 + powered2 + powered3);
  }
}","@Override protected void checkRedstone(World world,BlockPos pos){
  IBlockState state=world.getBlockState(pos);
  TileEntity te=world.getTileEntity(pos);
  if (state.getBlock() instanceof LogicSlabBlock && te instanceof LogicTileEntity) {
    LogicTileEntity logicTileEntity=(LogicTileEntity)te;
    LogicFacing facing=logicTileEntity.getFacing(state);
    EnumFacing downSide=facing.getSide();
    EnumFacing inputSide=facing.getInputSide();
    EnumFacing leftSide=rotateLeft(downSide,inputSide);
    EnumFacing rightSide=rotateRight(downSide,inputSide);
    int powered1=getInputStrength(world,pos,leftSide) > 0 ? 1 : 0;
    int powered2=getInputStrength(world,pos,inputSide) > 0 ? 2 : 0;
    int powered3=getInputStrength(world,pos,rightSide) > 0 ? 4 : 0;
    logicTileEntity.setPowerInput(powered1 + powered2 + powered3);
  }
}",0.3609505459216441
165824,"/** 
 * Something happens, we need to notify all ender monitors.
 * @param mode is the new mode
 */
private void fireMonitors(EnderMonitorMode mode){
  BlockPos pos=getPos();
  for (  EnumFacing dir : HORIZ_DIRECTIONS) {
    BlockPos c=pos.offset(dir);
    TileEntity te=worldObj.getTileEntity(c);
    if (te instanceof EnderMonitorTileEntity) {
      IBlockState state=worldObj.getBlockState(c);
      int meta=state.getBlock().getMetaFromState(state);
      EnumFacing k=BlockTools.getOrientationHoriz(meta);
      if (k == dir.getOpposite()) {
        EnderMonitorTileEntity enderMonitorTileEntity=(EnderMonitorTileEntity)te;
        enderMonitorTileEntity.fireFromEndergenic(mode);
      }
    }
  }
}","/** 
 * Something happens, we need to notify all ender monitors.
 * @param mode is the new mode
 */
private void fireMonitors(EnderMonitorMode mode){
  BlockPos pos=getPos();
  for (  EnumFacing dir : EnumFacing.VALUES) {
    BlockPos c=pos.offset(dir);
    TileEntity te=worldObj.getTileEntity(c);
    if (te instanceof EnderMonitorTileEntity) {
      EnderMonitorTileEntity enderMonitorTileEntity=(EnderMonitorTileEntity)te;
      EnumFacing inputSide=enderMonitorTileEntity.getFacing().getInputSide();
      if (inputSide == dir.getOpposite()) {
        enderMonitorTileEntity.fireFromEndergenic(mode);
      }
    }
  }
}",0.5924812030075188
165825,"@Override public NBTTagCompound update(NBTTagCompound tagCompound,World world,EntityPlayer player){
  if (dirty >= 0) {
    NBTTagCompound newCompound=tagCompound.copy();
    NBTTagCompound tc=new NBTTagCompound();
    stacks[dirty].writeToNBT(tc);
    newCompound.setTag(""String_Node_Str"" + dirty,tc);
    if (player != null) {
      SoundTools.playSound(player.worldObj,SoundEvents.ENTITY_EXPERIENCE_ORB_PICKUP,player.getPosition().getX(),player.getPosition().getY(),player.getPosition().getZ(),1.0f,1.0f);
    }
    return newCompound;
  }
  return null;
}","@Override public NBTTagCompound update(NBTTagCompound tagCompound,World world,EntityPlayer player){
  if (dirty >= 0) {
    dirty=-1;
    NBTTagCompound newCompound=tagCompound.copy();
    NBTTagCompound tc=new NBTTagCompound();
    stacks[dirty].writeToNBT(tc);
    newCompound.setTag(""String_Node_Str"" + dirty,tc);
    if (player != null) {
      SoundTools.playSound(player.worldObj,SoundEvents.ENTITY_EXPERIENCE_ORB_PICKUP,player.getPosition().getX(),player.getPosition().getY(),player.getPosition().getZ(),1.0f,1.0f);
    }
    return newCompound;
  }
  return null;
}",0.9876325088339224
165826,"private boolean silkQuarryBlock(int rfNeeded,BlockPos srcPos,Block block){
  IBlockState srcState=worldObj.getBlockState(srcPos);
  int xCoord=getPos().getX();
  int yCoord=getPos().getY();
  int zCoord=getPos().getZ();
  int sx=srcPos.getX();
  int sy=srcPos.getY();
  int sz=srcPos.getZ();
  if (sx >= xCoord - 1 && sx <= xCoord + 1 && sy >= yCoord - 1 && sy <= yCoord + 1 && sz >= zCoord - 1 && sz <= zCoord + 1) {
    return false;
  }
  if (isEmpty(srcState,block)) {
    return false;
  }
  if (block.getBlockHardness(srcState,worldObj,srcPos) >= 0) {
    boolean clear=ShapeCardItem.isClearingQuarry(getCardType());
    if ((!clear) && block == getDirtOrCobble()) {
      return false;
    }
    if (BuilderConfiguration.quarrySkipTileEntities && worldObj.getTileEntity(srcPos) != null) {
      return false;
    }
    FakePlayer fakePlayer=FakePlayerFactory.getMinecraft(DimensionManager.getWorld(0));
    if (block.canEntityDestroy(srcState,worldObj,srcPos,fakePlayer)) {
      if (getCachedVoidableBlocks().contains(block)) {
        clearOrDirtBlock(rfNeeded,sx,sy,sz,block,clear);
      }
 else {
        List<ItemStack> drops;
        if (block.canSilkHarvest(worldObj,srcPos,srcState,fakePlayer)) {
          Item item=Item.getItemFromBlock(block);
          if (item != null) {
            int m=0;
            if (item.getHasSubtypes()) {
              m=block.getMetaFromState(srcState);
            }
            drops=Collections.singletonList(new ItemStack(item,1,m));
          }
 else {
            drops=Collections.emptyList();
          }
          net.minecraftforge.event.ForgeEventFactory.fireBlockHarvesting(drops,worldObj,pos,srcState,0,1.0f,true,fakePlayer);
        }
 else {
          drops=block.getDrops(worldObj,srcPos,srcState,0);
          net.minecraftforge.event.ForgeEventFactory.fireBlockHarvesting(drops,worldObj,pos,srcState,0,1.0f,false,fakePlayer);
        }
        if (checkAndInsertItems(drops)) {
          clearOrDirtBlock(rfNeeded,sx,sy,sz,block,clear);
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}","private boolean silkQuarryBlock(int rfNeeded,BlockPos srcPos,Block block){
  IBlockState srcState=worldObj.getBlockState(srcPos);
  int xCoord=getPos().getX();
  int yCoord=getPos().getY();
  int zCoord=getPos().getZ();
  int sx=srcPos.getX();
  int sy=srcPos.getY();
  int sz=srcPos.getZ();
  if (sx >= xCoord - 1 && sx <= xCoord + 1 && sy >= yCoord - 1 && sy <= yCoord + 1 && sz >= zCoord - 1 && sz <= zCoord + 1) {
    return false;
  }
  if (isEmpty(srcState,block)) {
    return false;
  }
  if (block.getBlockHardness(srcState,worldObj,srcPos) >= 0) {
    boolean clear=ShapeCardItem.isClearingQuarry(getCardType());
    if ((!clear) && block == getDirtOrCobble()) {
      return false;
    }
    if (BuilderConfiguration.quarrySkipTileEntities && worldObj.getTileEntity(srcPos) != null) {
      return false;
    }
    FakePlayer fakePlayer=FakePlayerFactory.getMinecraft(DimensionManager.getWorld(0));
    if (block.canEntityDestroy(srcState,worldObj,srcPos,fakePlayer)) {
      if (getCachedVoidableBlocks().contains(block)) {
        clearOrDirtBlock(rfNeeded,sx,sy,sz,block,clear);
      }
 else {
        List<ItemStack> drops;
        if (block.canSilkHarvest(worldObj,srcPos,srcState,fakePlayer)) {
          Item item=Item.getItemFromBlock(block);
          drops=new ArrayList<>();
          if (item != null) {
            int m=0;
            if (item.getHasSubtypes()) {
              m=block.getMetaFromState(srcState);
            }
            drops.add(new ItemStack(item,1,m));
          }
          net.minecraftforge.event.ForgeEventFactory.fireBlockHarvesting(drops,worldObj,pos,srcState,0,1.0f,true,fakePlayer);
        }
 else {
          drops=block.getDrops(worldObj,srcPos,srcState,0);
          net.minecraftforge.event.ForgeEventFactory.fireBlockHarvesting(drops,worldObj,pos,srcState,0,1.0f,false,fakePlayer);
        }
        if (checkAndInsertItems(drops)) {
          clearOrDirtBlock(rfNeeded,sx,sy,sz,block,clear);
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}",0.96903725205612
165827,"@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  updateList();
  viewMode.setCurrentChoice(tileEntity.getViewMode());
  sortMode.setCurrentChoice(tileEntity.getSortMode());
  groupMode.setCurrentChoice(tileEntity.isGroupMode() ? 1 : 0);
  filter.setText(tileEntity.getFilter());
  drawWindow();
}","@Override protected void drawGuiContainerBackgroundLayer(float v,int i,int i2){
  updateList();
  if (tileEntity != null) {
    viewMode.setCurrentChoice(tileEntity.getViewMode());
    sortMode.setCurrentChoice(tileEntity.getSortMode());
    groupMode.setCurrentChoice(tileEntity.isGroupMode() ? 1 : 0);
    filter.setText(tileEntity.getFilter());
  }
  drawWindow();
}",0.9426934097421203
165828,"@Override public void onBlockPlacedBy(World world,BlockPos pos,IBlockState state,EntityLivingBase placer,ItemStack stack){
  super.onBlockPlacedBy(world,pos,state,placer,stack);
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof ElevatorTileEntity) {
    ElevatorTileEntity elevatorTileEntity=(ElevatorTileEntity)te;
    elevatorTileEntity.clearCaches();
  }
}","@Override public void onBlockPlacedBy(World world,BlockPos pos,IBlockState state,EntityLivingBase placer,ItemStack stack){
  super.onBlockPlacedBy(world,pos,state,placer,stack);
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof ElevatorTileEntity) {
    ElevatorTileEntity elevatorTileEntity=(ElevatorTileEntity)te;
    elevatorTileEntity.clearCaches(world.getBlockState(pos).getValue(GenericBlock.FACING_HORIZ));
  }
}",0.9251870324189526
165829,"@Override public void breakBlock(World world,BlockPos pos,IBlockState state){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof ElevatorTileEntity) {
    ElevatorTileEntity elevatorTileEntity=(ElevatorTileEntity)te;
    elevatorTileEntity.clearCaches();
  }
  super.breakBlock(world,pos,state);
}","@Override public void breakBlock(World world,BlockPos pos,IBlockState state){
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof ElevatorTileEntity) {
    ElevatorTileEntity elevatorTileEntity=(ElevatorTileEntity)te;
    elevatorTileEntity.clearCaches(state.getValue(GenericBlock.FACING_HORIZ));
  }
  super.breakBlock(world,pos,state);
}",0.9375951293759512
165830,"public void clearCaches(){
  EnumFacing side=worldObj.getBlockState(getPos()).getValue(GenericBlock.FACING_HORIZ);
  for (int y=0; y < worldObj.getHeight(); y++) {
    BlockPos pos2=getPosAtY(getPos(),y);
    TileEntity te=worldObj.getTileEntity(pos2);
    if (te instanceof ElevatorTileEntity) {
      EnumFacing side2=worldObj.getBlockState(pos2).getValue(GenericBlock.FACING_HORIZ);
      if (side2 == side) {
        ElevatorTileEntity tileEntity=(ElevatorTileEntity)te;
        tileEntity.cachedControllerPos=null;
        tileEntity.cachedLevels=0;
        tileEntity.cachedCurrent=-1;
      }
    }
  }
}","public void clearCaches(EnumFacing side){
  for (int y=0; y < worldObj.getHeight(); y++) {
    BlockPos pos2=getPosAtY(getPos(),y);
    if (worldObj.getBlockState(pos2).getBlock() == ElevatorSetup.elevatorBlock) {
      TileEntity te=worldObj.getTileEntity(pos2);
      if (te instanceof ElevatorTileEntity) {
        EnumFacing side2=worldObj.getBlockState(pos2).getValue(GenericBlock.FACING_HORIZ);
        if (side2 == side) {
          ElevatorTileEntity tileEntity=(ElevatorTileEntity)te;
          tileEntity.cachedControllerPos=null;
          tileEntity.cachedLevels=0;
          tileEntity.cachedCurrent=-1;
        }
      }
    }
  }
}",0.2593476531424025
165831,"public void toLevel(int level){
  EnumFacing side=worldObj.getBlockState(getPos()).getValue(GenericBlock.FACING_HORIZ);
  BlockPos controllerPos=findBottomElevator();
  for (int y=controllerPos.getY(); y < worldObj.getHeight(); y++) {
    BlockPos pos2=getPosAtY(controllerPos,y);
    TileEntity te2=worldObj.getTileEntity(pos2);
    if (te2 instanceof ElevatorTileEntity) {
      EnumFacing side2=worldObj.getBlockState(pos2).getValue(GenericBlock.FACING_HORIZ);
      if (side == side2) {
        if (level == 0) {
          ((ElevatorTileEntity)te2).movePlatformHere();
          return;
        }
        level--;
      }
    }
  }
}","public void toLevel(int level){
  EnumFacing side=worldObj.getBlockState(getPos()).getValue(GenericBlock.FACING_HORIZ);
  BlockPos controllerPos=findBottomElevator();
  for (int y=controllerPos.getY(); y < worldObj.getHeight(); y++) {
    BlockPos pos2=getPosAtY(controllerPos,y);
    if (worldObj.getBlockState(pos2).getBlock() == ElevatorSetup.elevatorBlock) {
      TileEntity te2=worldObj.getTileEntity(pos2);
      if (te2 instanceof ElevatorTileEntity) {
        EnumFacing side2=worldObj.getBlockState(pos2).getValue(GenericBlock.FACING_HORIZ);
        if (side == side2) {
          if (level == 0) {
            ((ElevatorTileEntity)te2).movePlatformHere();
            return;
          }
          level--;
        }
      }
    }
  }
}",0.8988439306358381
165832,"public int getCurrentLevel(){
  BlockPos controllerPos=findBottomElevator();
  EnumFacing side=worldObj.getBlockState(getPos()).getValue(GenericBlock.FACING_HORIZ);
  TileEntity te=worldObj.getTileEntity(controllerPos);
  if (te instanceof ElevatorTileEntity) {
    ElevatorTileEntity controller=(ElevatorTileEntity)te;
    if (controller.cachedCurrent == -1) {
      int level=0;
      for (int y=controllerPos.getY(); y < worldObj.getHeight(); y++) {
        BlockPos pos2=getPosAtY(controllerPos,y);
        TileEntity te2=worldObj.getTileEntity(pos2);
        if (te2 instanceof ElevatorTileEntity) {
          EnumFacing side2=worldObj.getBlockState(pos2).getValue(GenericBlock.FACING_HORIZ);
          if (side == side2) {
            BlockPos frontPos=pos2.offset(side);
            if (isValidPlatformBlock(frontPos)) {
              controller.cachedCurrent=level;
            }
            level++;
          }
        }
      }
    }
    return controller.cachedCurrent;
  }
  return 0;
}","public int getCurrentLevel(){
  BlockPos controllerPos=findBottomElevator();
  IBlockState blockState=worldObj.getBlockState(getPos());
  if (blockState.getBlock() != ElevatorSetup.elevatorBlock) {
    return 0;
  }
  EnumFacing side=blockState.getValue(GenericBlock.FACING_HORIZ);
  TileEntity te=worldObj.getTileEntity(controllerPos);
  if (te instanceof ElevatorTileEntity) {
    ElevatorTileEntity controller=(ElevatorTileEntity)te;
    if (controller.cachedCurrent == -1) {
      int level=0;
      for (int y=controllerPos.getY(); y < worldObj.getHeight(); y++) {
        BlockPos pos2=getPosAtY(controllerPos,y);
        TileEntity te2=worldObj.getTileEntity(pos2);
        if (te2 instanceof ElevatorTileEntity) {
          EnumFacing side2=worldObj.getBlockState(pos2).getValue(GenericBlock.FACING_HORIZ);
          if (side == side2) {
            BlockPos frontPos=pos2.offset(side);
            if (isValidPlatformBlock(frontPos)) {
              controller.cachedCurrent=level;
            }
            level++;
          }
        }
      }
    }
    return controller.cachedCurrent;
  }
  return 0;
}",0.9314420803782506
165833,"@Override public void mouseClick(World world,int x,int y,boolean clicked,EntityPlayer player){
  if (BlockPosTools.INVALID == coordinate) {
    return;
  }
  World w=DimensionManager.getWorld(dim);
  if (w == null) {
    return;
  }
  if (!RFToolsTools.chunkLoaded(world,coordinate)) {
    return;
  }
  TileEntity te=w.getTileEntity(coordinate);
  if (!(te instanceof ElevatorTileEntity)) {
    return;
  }
  ElevatorTileEntity elevatorTileEntity=(ElevatorTileEntity)te;
  if (vertical) {
    int yoffset=0;
    if (y >= yoffset) {
      int level=(y - yoffset) / (large ? (LARGESIZE - 2) : (SMALLSIZE - 2));
      if (level < 0) {
        return;
      }
      elevatorTileEntity.toLevel(((ElevatorTileEntity)te).getLevelCount() - level - 1);
    }
  }
 else {
    int xoffset=5;
    if (x >= xoffset) {
      int level=(x - xoffset) / (large ? (LARGESIZE - 2) : (SMALLSIZE - 2));
      if (level < 0) {
        return;
      }
      elevatorTileEntity.toLevel(level);
    }
  }
}","@Override public void mouseClick(World world,int x,int y,boolean clicked,EntityPlayer player){
  if (BlockPosTools.INVALID == coordinate) {
    return;
  }
  World w=DimensionManager.getWorld(dim);
  if (w == null) {
    return;
  }
  if (!RFToolsTools.chunkLoaded(world,coordinate)) {
    return;
  }
  TileEntity te=w.getTileEntity(coordinate);
  if (!(te instanceof ElevatorTileEntity)) {
    return;
  }
  ElevatorTileEntity elevatorTileEntity=(ElevatorTileEntity)te;
  int levelCount=elevatorTileEntity.getLevelCount();
  int level=-1;
  if (vertical) {
    int max=large ? 6 : 8;
    boolean twocols=levelCount > max;
    int yoffset=0;
    if (y >= yoffset) {
      level=(y - yoffset) / (large ? (LARGESIZE - 2) : (SMALLSIZE - 2));
      if (level < 0) {
        return;
      }
      if (twocols) {
        if (x > 73) {
          if (level < levelCount - max) {
            level=levelCount - level - 1;
          }
 else {
            level=-1;
          }
        }
 else {
          level=max - level - 1;
        }
      }
 else {
        level=levelCount - level - 1;
      }
      System.out.println(""String_Node_Str"" + level);
    }
  }
 else {
    int xoffset=5;
    if (x >= xoffset) {
      level=(x - xoffset) / (large ? (LARGESIZE - 2) : (SMALLSIZE - 2));
    }
  }
  if (level >= 0 && level < levelCount) {
    elevatorTileEntity.toLevel(level);
  }
}",0.7232597623089984
165834,"@Override public void render(IModuleRenderHelper renderHelper,FontRenderer fontRenderer,int currenty,IModuleDataContents screenData,ModuleRenderInfo renderInfo){
  GlStateManager.disableLighting();
  if (screenData == null) {
    return;
  }
  int currentLevel=(int)screenData.getContents();
  int buttons=(int)screenData.getMaxContents();
  int xoffset=5;
  for (int i=0; i < buttons; i++) {
    int level=vertical ? buttons - i - 1 : i;
    String text;
    if (hasLevelText(level)) {
      text=levels[level];
    }
 else {
      text=String.valueOf(level + (start1 ? 1 : 0));
    }
    int col=level == currentLevel ? this.currentLevelButtonColor : this.buttonColor;
    int textoffset=large ? 3 : 0;
    if (vertical) {
      if (lights) {
        RenderHelper.drawBeveledBox(xoffset,currenty,xoffset + 120,currenty + getDimension() - 2,0xffffffff,0xffffffff,0xff000000 + col);
        if (hasLevelText(level)) {
          fontRenderer.drawString(fontRenderer.trimStringToWidth(levels[level],120),xoffset + 3 + textoffset,currenty + 2 + textoffset,0xffffff);
        }
      }
 else {
        RenderHelper.drawBeveledBox(xoffset,currenty,xoffset + 120,currenty + getDimension() - 2,0xffeeeeee,0xff333333,0xff666666);
        fontRenderer.drawString(fontRenderer.trimStringToWidth(text,120),xoffset + 3 + textoffset,currenty + 2 + textoffset,col);
      }
      currenty+=getDimension() - 2;
    }
 else {
      if (lights) {
        RenderHelper.drawBeveledBox(xoffset,currenty,xoffset + getDimension() - 4,currenty + getDimension() - 2,0xffffffff,0xffffffff,0xff000000 + col);
        if (hasLevelText(level)) {
          fontRenderer.drawString(fontRenderer.trimStringToWidth(levels[level],120),xoffset + 3 + textoffset,currenty + 2 + textoffset,0xffffff);
        }
      }
 else {
        RenderHelper.drawBeveledBox(xoffset,currenty,xoffset + getDimension() - 4,currenty + getDimension() - 2,0xffeeeeee,0xff333333,0xff666666);
        fontRenderer.drawString(fontRenderer.trimStringToWidth(text,getDimension() - 4),xoffset + 3 + textoffset,currenty + 2 + textoffset,col);
      }
      xoffset+=getDimension() - 2;
    }
  }
}","@Override public void render(IModuleRenderHelper renderHelper,FontRenderer fontRenderer,int currenty,IModuleDataContents screenData,ModuleRenderInfo renderInfo){
  GlStateManager.disableLighting();
  if (screenData == null) {
    return;
  }
  int currentLevel=(int)screenData.getContents();
  int buttons=(int)screenData.getMaxContents();
  if (vertical) {
    renderButtonsVertical(fontRenderer,currenty,currentLevel,buttons);
  }
 else {
    renderButtonsHorizontal(fontRenderer,currenty,currentLevel,buttons);
  }
}",0.2659133709981167
165835,"@SideOnly(Side.CLIENT) private void handleClientMovement(){
  double d=calculateSpeed();
  handlePlatformMovement(d);
  EntityPlayerSP player=Minecraft.getMinecraft().thePlayer;
  AxisAlignedBB aabb=getAABBAboveElevator(d);
  boolean on=Minecraft.getMinecraft().thePlayer.getEntityBoundingBox().intersectsWith(aabb);
  if (on) {
    player.setPosition(player.posX,movingY + 1,player.posZ);
  }
}","@SideOnly(Side.CLIENT) private void handleClientMovement(){
  double d=calculateSpeed();
  handlePlatformMovement(d);
  if (bounds != null) {
    EntityPlayerSP player=Minecraft.getMinecraft().thePlayer;
    AxisAlignedBB aabb=getAABBAboveElevator(d);
    boolean on=Minecraft.getMinecraft().thePlayer.getEntityBoundingBox().intersectsWith(aabb);
    if (on) {
      player.setPosition(player.posX,movingY + 1,player.posZ);
    }
  }
}",0.9518072289156626
165836,"@Override public List<ItemStack> getDrops(IBlockAccess blockAccess,BlockPos pos,IBlockState state,int fortune){
  World world=(World)blockAccess;
  List<ItemStack> drops=super.getDrops(world,pos,state,fortune);
  if (!world.isRemote) {
    TileEntity te=world.getTileEntity(pos);
    if (te instanceof PowerCellTileEntity) {
      PowerCellNetwork.Network network=((PowerCellTileEntity)te).getNetwork();
      if (network != null) {
        int energy=network.getEnergySingleBlock();
        if (!drops.isEmpty()) {
          NBTTagCompound tagCompound=drops.get(0).getTagCompound();
          if (tagCompound == null) {
            tagCompound=new NBTTagCompound();
            drops.get(0).setTagCompound(tagCompound);
          }
          tagCompound.setInteger(""String_Node_Str"",energy);
        }
      }
    }
  }
  return drops;
}","@Override public List<ItemStack> getDrops(IBlockAccess blockAccess,BlockPos pos,IBlockState state,int fortune){
  World world=(World)blockAccess;
  List<ItemStack> drops=super.getDrops(world,pos,state,fortune);
  if (!world.isRemote) {
    TileEntity te=world.getTileEntity(pos);
    if (te instanceof PowerCellTileEntity) {
      PowerCellNetwork.Network network=((PowerCellTileEntity)te).getNetwork();
      if (network != null) {
        int energy=network.getEnergySingleBlock(isAdvanced());
        if (!drops.isEmpty()) {
          NBTTagCompound tagCompound=drops.get(0).getTagCompound();
          if (tagCompound == null) {
            tagCompound=new NBTTagCompound();
            drops.get(0).setTagCompound(tagCompound);
          }
          tagCompound.setInteger(""String_Node_Str"",energy);
        }
      }
    }
  }
  return drops;
}",0.9928909952606636
165837,"@Override public void breakBlock(World world,BlockPos pos,IBlockState state){
  if (!world.isRemote) {
    TileEntity te=world.getTileEntity(pos);
    if (te instanceof PowerCellTileEntity) {
      PowerCellTileEntity cellTileEntity=(PowerCellTileEntity)te;
      PowerCellNetwork.Network network=cellTileEntity.getNetwork();
      if (network != null) {
        network.extractEnergySingleBlock(isAdvanced());
        Block block=world.getBlockState(pos).getBlock();
        network.remove(world,cellTileEntity.getGlobalPos(),PowerCellBlock.isAdvanced(block));
        PowerCellNetwork.getChannels(world).save(world);
      }
    }
  }
  super.breakBlock(world,pos,state);
}","@Override public void breakBlock(World world,BlockPos pos,IBlockState state){
  if (!world.isRemote) {
    TileEntity te=world.getTileEntity(pos);
    if (te instanceof PowerCellTileEntity) {
      PowerCellTileEntity cellTileEntity=(PowerCellTileEntity)te;
      PowerCellNetwork.Network network=cellTileEntity.getNetwork();
      if (network != null) {
        int a=network.extractEnergySingleBlock(isAdvanced());
        Block block=world.getBlockState(pos).getBlock();
        network.remove(world,cellTileEntity.getGlobalPos(),PowerCellBlock.isAdvanced(block));
        PowerCellNetwork.getChannels(world).save(world);
      }
    }
  }
  super.breakBlock(world,pos,state);
}",0.995575221238938
165838,"public int getEnergySingleBlock(){
  return energy / Math.max(1,blocks.size());
}","public int getEnergySingleBlock(boolean advanced){
  int rc=energy / Math.max(1,(blocks.size() - advancedBlocks) + advancedBlocks * PowerCellConfiguration.advancedFactor);
  if (advanced) {
    rc*=PowerCellConfiguration.advancedFactor;
  }
  return rc;
}",0.4404761904761904
165839,"public int countStack(ItemStack stack,boolean starred){
  if (stack == null) {
    return 0;
  }
  int cnt=0;
  List<BlockPos> inventories=getInventories();
  for (  BlockPos c : inventories) {
    if ((!starred) || routable.contains(c)) {
      TileEntity tileEntity=worldObj.getTileEntity(c);
      Integer cachedCount=null;
      if (tileEntity instanceof IInventoryTracker) {
        IInventoryTracker tracker=(IInventoryTracker)tileEntity;
        Pair<Integer,Integer> pair=cachedCounts.get(Pair.of(c,stack.getItem()));
        if (pair != null) {
          Integer oldVersion=pair.getLeft();
          if (oldVersion == tracker.getVersion()) {
            cachedCount=pair.getRight();
          }
        }
      }
      if (cachedCount != null) {
        cnt+=cachedCount;
      }
 else {
        final int[] cc={0};
        InventoryHelper.getItems(tileEntity,s -> s.isItemEqual(stack)).forEach(s -> {
          cc[0]+=s.stackSize;
        }
);
        cnt+=cc[0];
        if (tileEntity instanceof IInventoryTracker) {
          IInventoryTracker tracker=(IInventoryTracker)tileEntity;
          cachedCounts.put(Pair.of(c,stack.getItem()),Pair.of(tracker.getVersion(),cc[0]));
        }
      }
    }
  }
  return cnt;
}","public int countStack(ItemStack stack,boolean starred){
  if (stack == null) {
    return 0;
  }
  int cnt=0;
  List<BlockPos> inventories=getInventories();
  for (  BlockPos c : inventories) {
    if ((!starred) || routable.contains(c)) {
      TileEntity tileEntity=worldObj.getTileEntity(c);
      Integer cachedCount=null;
      if (tileEntity instanceof IInventoryTracker) {
        IInventoryTracker tracker=(IInventoryTracker)tileEntity;
        CachedItemCount itemCount=cachedCounts.get(new CachedItemKey(c,stack.getItem(),stack.getItemDamage()));
        if (itemCount != null) {
          Integer oldVersion=itemCount.getVersion();
          if (oldVersion == tracker.getVersion()) {
            cachedCount=itemCount.getCount();
          }
        }
      }
      if (cachedCount != null) {
        cnt+=cachedCount;
      }
 else {
        final int[] cc={0};
        InventoryHelper.getItems(tileEntity,stack::isItemEqual).forEach(s -> {
          cc[0]+=s.stackSize;
        }
);
        cnt+=cc[0];
        if (tileEntity instanceof IInventoryTracker) {
          IInventoryTracker tracker=(IInventoryTracker)tileEntity;
          cachedCounts.put(new CachedItemKey(c,stack.getItem(),stack.getItemDamage()),new CachedItemCount(tracker.getVersion(),cc[0]));
        }
      }
    }
  }
  return cnt;
}",0.7700156985871272
165840,"@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (heldItem != null && heldItem.getItem() instanceof EnvModuleProvider) {
    if (RFToolsTools.installModule(player,heldItem,hand,pos,EnvironmentalControllerContainer.SLOT_MODULES,EnvironmentalControllerContainer.SLOT_MODULES + EnvironmentalControllerContainer.ENV_MODULES)) {
      return true;
    }
  }
  return super.onBlockActivated(world,pos,state,player,hand,heldItem,side,hitX,hitY,hitZ);
}","@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (heldItem != null && heldItem.getItem() instanceof EnvModuleProvider) {
    if (RFToolsTools.installModule(player,heldItem,hand,pos,EnvironmentalControllerContainer.SLOT_MODULES,EnvironmentalControllerContainer.SLOT_MODULES + EnvironmentalControllerContainer.ENV_MODULES - 1)) {
      return true;
    }
  }
  return super.onBlockActivated(world,pos,state,player,hand,heldItem,side,hitX,hitY,hitZ);
}",0.9966216216216216
165841,"@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (heldItem != null && heldItem.getItem() instanceof IModuleProvider) {
    if (RFToolsTools.installModule(player,heldItem,hand,pos,ScreenContainer.SLOT_MODULES,ScreenContainer.SLOT_MODULES + +ScreenContainer.SCREEN_MODULES)) {
      return true;
    }
  }
  return super.onBlockActivated(world,pos,state,player,hand,heldItem,side,hitX,hitY,hitZ);
}","@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (heldItem != null && heldItem.getItem() instanceof IModuleProvider) {
    if (RFToolsTools.installModule(player,heldItem,hand,pos,ScreenContainer.SLOT_MODULES,ScreenContainer.SLOT_MODULES + ScreenContainer.SCREEN_MODULES - 1)) {
      return true;
    }
  }
  return super.onBlockActivated(world,pos,state,player,hand,heldItem,side,hitX,hitY,hitZ);
}",0.9953917050691244
165842,"@SubscribeEvent public void onRenderBlockOutline(DrawBlockHighlightEvent evt){
  BlockPos pos=evt.getTarget().getBlockPos();
  Block block=evt.getPlayer().getEntityWorld().getBlockState(pos).getBlock();
  if (block == ScreenSetup.screenBlock || block == ScreenSetup.screenHitBlock) {
    evt.setCanceled(true);
  }
}","@SubscribeEvent public void onRenderBlockOutline(DrawBlockHighlightEvent evt){
  RayTraceResult target=evt.getTarget();
  if (target != null && target.typeOfHit == RayTraceResult.Type.BLOCK) {
    BlockPos pos=target.getBlockPos();
    if (pos == null || evt.getPlayer() == null) {
      return;
    }
    Block block=evt.getPlayer().getEntityWorld().getBlockState(pos).getBlock();
    if (block == ScreenSetup.screenBlock || block == ScreenSetup.screenHitBlock) {
      evt.setCanceled(true);
    }
  }
}",0.4482338611449452
165843,"@Override public void toBytes(ByteBuf buf){
  buf.writeInt(energy);
  buf.writeInt(blocks);
  buf.writeInt(advancedBlocks);
  buf.writeInt(totalInserted);
  buf.writeInt(totalExtracted);
}","@Override public void toBytes(ByteBuf buf){
  buf.writeInt(energy);
  buf.writeInt(blocks);
  buf.writeInt(advancedBlocks);
  buf.writeInt(totalInserted);
  buf.writeInt(totalExtracted);
  buf.writeInt(rfPerTick);
  buf.writeFloat(costFactor);
}",0.8683602771362586
165844,"@Override public void fromBytes(ByteBuf buf){
  energy=buf.readInt();
  blocks=buf.readInt();
  advancedBlocks=buf.readInt();
  totalInserted=buf.readInt();
  totalExtracted=buf.readInt();
}","@Override public void fromBytes(ByteBuf buf){
  energy=buf.readInt();
  blocks=buf.readInt();
  advancedBlocks=buf.readInt();
  totalInserted=buf.readInt();
  totalExtracted=buf.readInt();
  rfPerTick=buf.readInt();
  costFactor=buf.readFloat();
}",0.8695652173913043
165845,"@Override public void onMessageClient(EntityPlayerSP player){
  tooltipEnergy=energy;
  tooltipBlocks=blocks;
  tooltipAdvancedBlocks=advancedBlocks;
  tooltipInserted=totalInserted;
  tooltipExtracted=totalExtracted;
}","@Override public void onMessageClient(EntityPlayerSP player){
  tooltipEnergy=energy;
  tooltipBlocks=blocks;
  tooltipAdvancedBlocks=advancedBlocks;
  tooltipInserted=totalInserted;
  tooltipExtracted=totalExtracted;
  tooltipRfPerTick=rfPerTick;
  tooltipCostFactor=costFactor;
}",0.876
165846,"public PowerCellInfoPacketClient(int energy,int blocks,int advancedBlocks,int totalInserted,int totalExtracted){
  this.energy=energy;
  this.blocks=blocks;
  this.advancedBlocks=advancedBlocks;
  this.totalInserted=totalInserted;
  this.totalExtracted=totalExtracted;
}","public PowerCellInfoPacketClient(int energy,int blocks,int advancedBlocks,int totalInserted,int totalExtracted,int rfPerTick,float costFactor){
  this.energy=energy;
  this.blocks=blocks;
  this.advancedBlocks=advancedBlocks;
  this.totalInserted=totalInserted;
  this.totalExtracted=totalExtracted;
  this.rfPerTick=rfPerTick;
  this.costFactor=costFactor;
}",0.8585055643879174
165847,"@Override public Optional<InfoPacketClient> onMessageServer(EntityPlayerMP player){
  World world=player.worldObj;
  TileEntity te=world.getTileEntity(pos);
  if (id == -1) {
    if (te instanceof PowerCellTileEntity) {
      PowerCellTileEntity powerCellTileEntity=(PowerCellTileEntity)te;
      return Optional.of(new PowerCellInfoPacketClient(powerCellTileEntity.getEnergy(),1,world.getBlockState(pos).getBlock() == PowerCellSetup.advancedPowerCellBlock ? 1 : 0,powerCellTileEntity.getTotalInserted(),powerCellTileEntity.getTotalExtracted()));
    }
 else {
      return Optional.empty();
    }
  }
 else {
    PowerCellNetwork generatorNetwork=PowerCellNetwork.getChannels(world);
    PowerCellNetwork.Network network=generatorNetwork.getChannel(id);
    int totInserted=0;
    int totExtracted=0;
    if (te instanceof PowerCellTileEntity) {
      PowerCellTileEntity powerCellTileEntity=(PowerCellTileEntity)te;
      totInserted=powerCellTileEntity.getTotalInserted();
      totExtracted=powerCellTileEntity.getTotalExtracted();
    }
    return Optional.of(new PowerCellInfoPacketClient(network.getEnergy(),network.getBlockCount(),network.getAdvancedBlockCount(),totInserted,totExtracted));
  }
}","@Override public Optional<InfoPacketClient> onMessageServer(EntityPlayerMP player){
  World world=player.worldObj;
  TileEntity te=world.getTileEntity(pos);
  if (id == -1) {
    if (te instanceof PowerCellTileEntity) {
      PowerCellTileEntity powerCellTileEntity=(PowerCellTileEntity)te;
      return Optional.of(new PowerCellInfoPacketClient(powerCellTileEntity.getEnergy(),1,world.getBlockState(pos).getBlock() == PowerCellSetup.advancedPowerCellBlock ? 1 : 0,powerCellTileEntity.getTotalInserted(),powerCellTileEntity.getTotalExtracted(),powerCellTileEntity.getRfPerTickPerSide(),1.0f));
    }
 else {
      return Optional.empty();
    }
  }
 else {
    PowerCellNetwork generatorNetwork=PowerCellNetwork.getChannels(world);
    PowerCellNetwork.Network network=generatorNetwork.getChannel(id);
    int totInserted=0;
    int totExtracted=0;
    int rfPerTick=0;
    float costFactor=0;
    if (te instanceof PowerCellTileEntity) {
      PowerCellTileEntity powerCellTileEntity=(PowerCellTileEntity)te;
      totInserted=powerCellTileEntity.getTotalInserted();
      totExtracted=powerCellTileEntity.getTotalExtracted();
      rfPerTick=powerCellTileEntity.getRfPerTickPerSide();
      costFactor=powerCellTileEntity.getCostFactor();
    }
    return Optional.of(new PowerCellInfoPacketClient(network.getEnergy(),network.getBlockCount(),network.getAdvancedBlockCount(),totInserted,totExtracted,rfPerTick,costFactor));
  }
}",0.9141989369779804
165848,"private void sendOutEnergy(){
  int energyStored=getEnergyStored(EnumFacing.DOWN);
  for (  EnumFacing face : EnumFacing.values()) {
    if (modes[face.ordinal()] == Mode.MODE_OUTPUT) {
      BlockPos pos=getPos().offset(face);
      TileEntity te=worldObj.getTileEntity(pos);
      if (EnergyTools.isEnergyTE(te)) {
        if ((!(te instanceof PowerCellTileEntity)) || getNetworkId() == -1 || ((PowerCellTileEntity)te).getNetworkId() != getNetworkId()) {
          IEnergyConnection connection=(IEnergyConnection)te;
          EnumFacing opposite=face.getOpposite();
          if (connection.canConnectEnergy(opposite)) {
            float infusedFactor=getInfusedFactor();
            float factor;
            if (getNetworkId() == -1) {
              factor=1.0f;
            }
 else {
              factor=getNetwork().calculateCostFactor(getGlobalPos());
              factor=(factor - 1) * (1 - infusedFactor / 2) + 1;
            }
            int rfPerTick=(int)(PowerCellConfiguration.rfPerTick * getAdvancedFactor() * (infusedFactor * .5 + 1));
            int rfToGive;
            if (rfPerTick <= ((int)(energyStored / factor))) {
              rfToGive=rfPerTick;
            }
 else {
              rfToGive=(int)(energyStored / factor);
            }
            int received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
            energyStored-=extractEnergy(EnumFacing.DOWN,(int)(received * factor),false);
            if (energyStored <= 0) {
              break;
            }
          }
        }
      }
    }
  }
}","private void sendOutEnergy(){
  int energyStored=getEnergyStored(EnumFacing.DOWN);
  for (  EnumFacing face : EnumFacing.values()) {
    if (modes[face.ordinal()] == Mode.MODE_OUTPUT) {
      BlockPos pos=getPos().offset(face);
      TileEntity te=worldObj.getTileEntity(pos);
      if (EnergyTools.isEnergyTE(te)) {
        if ((!(te instanceof PowerCellTileEntity)) || getNetworkId() == -1 || ((PowerCellTileEntity)te).getNetworkId() != getNetworkId()) {
          IEnergyConnection connection=(IEnergyConnection)te;
          EnumFacing opposite=face.getOpposite();
          if (connection.canConnectEnergy(opposite)) {
            float factor=getCostFactor();
            int rfPerTick=getRfPerTickPerSide();
            int rfToGive;
            if (rfPerTick <= ((int)(energyStored / factor))) {
              rfToGive=rfPerTick;
            }
 else {
              rfToGive=(int)(energyStored / factor);
            }
            int received=EnergyTools.receiveEnergy(te,opposite,rfToGive);
            energyStored-=extractEnergy(EnumFacing.DOWN,(int)(received * factor),false);
            if (energyStored <= 0) {
              break;
            }
          }
        }
      }
    }
  }
}",0.8427947598253275
165849,"private boolean isAdvanced(){
  return blockType == PowerCellSetup.advancedPowerCellBlock;
}","private boolean isAdvanced(){
  return worldObj.getBlockState(getPos()).getBlock() == PowerCellSetup.advancedPowerCellBlock;
}",0.8165137614678899
165850,"private void checkStateServer(){
  boolean pulse=powered && !prevIn;
  prevIn=powered;
  if (pulse) {
    handlePulse();
  }
  markDirty();
  timer--;
  if (timer <= 0) {
    timer=delay;
  }
 else {
    return;
  }
  boolean newout=currentStep != -1 && getCycleBit(currentStep);
  if (newout != redstoneOut) {
    redstoneOut=newout;
    IBlockState state=worldObj.getBlockState(getPos());
    worldObj.setBlockState(getPos(),state.withProperty(LogicSlabBlock.OUTPUTPOWER,redstoneOut),2);
    worldObj.notifyNeighborsOfStateChange(this.pos,this.getBlockType());
    worldObj.markBlockForUpdate(this.pos);
  }
  handleCycle(powered);
}","private void checkStateServer(){
  boolean pulse=powered && !prevIn;
  prevIn=powered;
  if (pulse) {
    handlePulse();
  }
  markDirty();
  timer--;
  if (timer <= 0) {
    timer=delay;
  }
 else {
    return;
  }
  boolean newout=currentStep != -1 && getCycleBit(currentStep);
  if (newout != redstoneOut) {
    redstoneOut=newout;
    IBlockState state=worldObj.getBlockState(getPos());
    worldObj.setBlockState(getPos(),state.withProperty(LogicSlabBlock.OUTPUTPOWER,redstoneOut),2);
    worldObj.notifyNeighborsOfStateChange(this.pos,this.getBlockType());
    worldObj.notifyBlockUpdate(this.pos,state,state,3);
  }
  handleCycle(powered);
}",0.9789555728760716
165851,"@Override public IMessage onMessage(PacketGetAdjacentBlocks message,MessageContext ctx){
  MinecraftServer.getServer().addScheduledTask(() -> handle(message,ctx));
  return null;
}","@Override public IMessage onMessage(PacketGetAdjacentBlocks message,MessageContext ctx){
  FMLCommonHandler.instance().getWorldThread(ctx.netHandler).addScheduledTask(() -> handle(message,ctx));
  return null;
}",0.7979539641943734
165852,"@Override public IMessage onMessage(PacketGetAdjacentTankBlocks message,MessageContext ctx){
  MinecraftServer.getServer().addScheduledTask(() -> handle(message,ctx));
  return null;
}","@Override public IMessage onMessage(PacketGetAdjacentTankBlocks message,MessageContext ctx){
  FMLCommonHandler.instance().getWorldThread(ctx.netHandler).addScheduledTask(() -> handle(message,ctx));
  return null;
}",0.8020050125313283
165853,"@Override public ScreenModuleGuiBuilder block(String tagnamePos){
  String monitoring;
  if (currentData.hasKey(tagnamePos + ""String_Node_Str"")) {
    int dim;
    if (currentData.hasKey(tagnamePos + ""String_Node_Str"")) {
      dim=currentData.getInteger(tagnamePos + ""String_Node_Str"");
    }
 else {
      dim=currentData.getInteger(""String_Node_Str"");
    }
    World world=mc.thePlayer.worldObj;
    if (dim == world.provider.getDimensionId()) {
      int x=currentData.getInteger(tagnamePos + ""String_Node_Str"");
      int y=currentData.getInteger(tagnamePos + ""String_Node_Str"");
      int z=currentData.getInteger(tagnamePos + ""String_Node_Str"");
      monitoring=currentData.getString(tagnamePos + ""String_Node_Str"");
      Block block=world.getBlockState(new BlockPos(x,y,z)).getBlock();
      row.add(new BlockRender(mc,gui).setRenderItem(block).setDesiredWidth(20));
      row.add(new Label(mc,gui).setText(x + ""String_Node_Str"" + y+ ""String_Node_Str""+ z).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setDesiredWidth(150));
    }
 else {
      monitoring=""String_Node_Str"";
    }
  }
 else {
    monitoring=""String_Node_Str"";
  }
  row.add(new Label(mc,gui).setText(monitoring));
  return this;
}","@Override public ScreenModuleGuiBuilder block(String tagnamePos){
  String monitoring;
  if (currentData.hasKey(tagnamePos + ""String_Node_Str"")) {
    int dim;
    if (currentData.hasKey(tagnamePos + ""String_Node_Str"")) {
      dim=currentData.getInteger(tagnamePos + ""String_Node_Str"");
    }
 else {
      dim=currentData.getInteger(""String_Node_Str"");
    }
    World world=mc.thePlayer.worldObj;
    if (dim == world.provider.getDimension()) {
      int x=currentData.getInteger(tagnamePos + ""String_Node_Str"");
      int y=currentData.getInteger(tagnamePos + ""String_Node_Str"");
      int z=currentData.getInteger(tagnamePos + ""String_Node_Str"");
      monitoring=currentData.getString(tagnamePos + ""String_Node_Str"");
      Block block=world.getBlockState(new BlockPos(x,y,z)).getBlock();
      row.add(new BlockRender(mc,gui).setRenderItem(block).setDesiredWidth(20));
      row.add(new Label(mc,gui).setText(x + ""String_Node_Str"" + y+ ""String_Node_Str""+ z).setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT).setDesiredWidth(150));
    }
 else {
      monitoring=""String_Node_Str"";
    }
  }
 else {
    monitoring=""String_Node_Str"";
  }
  row.add(new Label(mc,gui).setText(monitoring));
  return this;
}",0.9991776315789472
165854,"@Override public IMessage onMessage(PacketGetScreenData message,MessageContext ctx){
  MinecraftServer.getServer().addScheduledTask(() -> handle(message,ctx));
  return null;
}","@Override public IMessage onMessage(PacketGetScreenData message,MessageContext ctx){
  FMLCommonHandler.instance().getWorldThread(ctx.netHandler).addScheduledTask(() -> handle(message,ctx));
  return null;
}",0.793733681462141
165855,"private void handle(PacketGetScreenData message,MessageContext ctx){
  World world=ctx.getServerHandler().playerEntity.worldObj;
  if (message.pos.getDimension() != world.provider.getDimensionId()) {
    return;
  }
  TileEntity te=world.getTileEntity(message.pos.getCoordinate());
  if (!(te instanceof ScreenTileEntity)) {
    Logging.logError(""String_Node_Str"");
    return;
  }
  Map<Integer,IModuleData> screenData=((ScreenTileEntity)te).getScreenData(message.millis);
  SimpleNetworkWrapper wrapper=PacketHandler.modNetworking.get(message.modid);
  PacketReturnScreenData msg=new PacketReturnScreenData(message.pos,screenData);
  wrapper.sendTo(msg,ctx.getServerHandler().playerEntity);
}","private void handle(PacketGetScreenData message,MessageContext ctx){
  World world=ctx.getServerHandler().playerEntity.worldObj;
  if (message.pos.getDimension() != world.provider.getDimension()) {
    return;
  }
  TileEntity te=world.getTileEntity(message.pos.getCoordinate());
  if (!(te instanceof ScreenTileEntity)) {
    Logging.logError(""String_Node_Str"");
    return;
  }
  Map<Integer,IModuleData> screenData=((ScreenTileEntity)te).getScreenData(message.millis);
  SimpleNetworkWrapper wrapper=PacketHandler.modNetworking.get(message.modid);
  PacketReturnScreenData msg=new PacketReturnScreenData(message.pos,screenData);
  wrapper.sendTo(msg,ctx.getServerHandler().playerEntity);
}",0.9985569985569984
165856,"@Override public IMessage onMessage(PacketGetFilters message,MessageContext ctx){
  MinecraftServer.getServer().addScheduledTask(() -> handle(message,ctx));
  return null;
}","@Override public IMessage onMessage(PacketGetFilters message,MessageContext ctx){
  FMLCommonHandler.instance().getWorldThread(ctx.netHandler).addScheduledTask(() -> handle(message,ctx));
  return null;
}",0.7798408488063661
165857,"public static RemoteStorageTileEntity getRemoteStorage(World world,int id){
  RemoteStorageIdRegistry registry=RemoteStorageIdRegistry.getRegistry(world);
  if (registry == null) {
    return null;
  }
  GlobalCoordinate coordinate=registry.getStorage(id);
  if (coordinate == null) {
    return null;
  }
  World w=DimensionManager.getWorld(coordinate.getDimension());
  if (w == null) {
    return null;
  }
  BlockPos c=coordinate.getCoordinate();
  boolean exists=w.getChunkProvider().chunkExists(c.getX() >> 4,c.getZ() >> 4);
  if (!exists) {
    return null;
  }
  TileEntity te=w.getTileEntity(c);
  if (te instanceof RemoteStorageTileEntity) {
    RemoteStorageTileEntity remoteStorageTileEntity=(RemoteStorageTileEntity)te;
    int index=remoteStorageTileEntity.findRemoteIndex(id);
    if (index == -1) {
      return null;
    }
    if (remoteStorageTileEntity.isGlobal(index) || world.provider.getDimensionId() == coordinate.getDimension()) {
      return remoteStorageTileEntity;
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}","public static RemoteStorageTileEntity getRemoteStorage(World world,int id){
  RemoteStorageIdRegistry registry=RemoteStorageIdRegistry.getRegistry(world);
  if (registry == null) {
    return null;
  }
  GlobalCoordinate coordinate=registry.getStorage(id);
  if (coordinate == null) {
    return null;
  }
  World w=DimensionManager.getWorld(coordinate.getDimension());
  if (w == null) {
    return null;
  }
  BlockPos c=coordinate.getCoordinate();
  boolean exists=w.getChunkProvider().getLoadedChunk(c.getX() >> 4,c.getZ() >> 4) != null;
  if (!exists) {
    return null;
  }
  TileEntity te=w.getTileEntity(c);
  if (te instanceof RemoteStorageTileEntity) {
    RemoteStorageTileEntity remoteStorageTileEntity=(RemoteStorageTileEntity)te;
    int index=remoteStorageTileEntity.findRemoteIndex(id);
    if (index == -1) {
      return null;
    }
    if (remoteStorageTileEntity.isGlobal(index) || world.provider.getDimension() == coordinate.getDimension()) {
      return remoteStorageTileEntity;
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}",0.9873890705277908
165858,"@Override public IMessage onMessage(PacketGetPlayers message,MessageContext ctx){
  MinecraftServer.getServer().addScheduledTask(() -> handle(message,ctx));
  return null;
}","@Override public IMessage onMessage(PacketGetPlayers message,MessageContext ctx){
  FMLCommonHandler.instance().getWorldThread(ctx.netHandler).addScheduledTask(() -> handle(message,ctx));
  return null;
}",0.7904509283819628
165859,"@Override public IMessage onMessage(PacketGetReceivers message,MessageContext ctx){
  MinecraftServer.getServer().addScheduledTask(() -> handle(message,ctx));
  return null;
}","@Override public IMessage onMessage(PacketGetReceivers message,MessageContext ctx){
  FMLCommonHandler.instance().getWorldThread(ctx.netHandler).addScheduledTask(() -> handle(message,ctx));
  return null;
}",0.7821522309711286
165860,"@Override public IMessage onMessage(PacketGetTransmitters message,MessageContext ctx){
  MinecraftServer.getServer().addScheduledTask(() -> handle(message,ctx));
  return null;
}","@Override public IMessage onMessage(PacketGetTransmitters message,MessageContext ctx){
  FMLCommonHandler.instance().getWorldThread(ctx.netHandler).addScheduledTask(() -> handle(message,ctx));
  return null;
}",0.7855297157622739
165861,"public static void teleportToDimension(EntityPlayer player,int dimension,double x,double y,double z){
  int oldDimension=player.worldObj.provider.getDimension();
  EntityPlayerMP entityPlayerMP=(EntityPlayerMP)player;
  MinecraftServer server=((EntityPlayerMP)player).worldObj.getMinecraftServer();
  WorldServer worldServer=server.worldServerForDimension(dimension);
  player.addExperienceLevel(0);
  MinecraftServer.getServer().getConfigurationManager().transferPlayerToDimension(entityPlayerMP,dimension,new RfToolsTeleporter(worldServer,x,y,z));
  if (oldDimension == 1) {
    player.setPositionAndUpdate(x,y,z);
    worldServer.spawnEntityInWorld(player);
    worldServer.updateEntityWithOptionalForce(player,false);
  }
}","public static void teleportToDimension(EntityPlayer player,int dimension,double x,double y,double z){
  int oldDimension=player.worldObj.provider.getDimension();
  EntityPlayerMP entityPlayerMP=(EntityPlayerMP)player;
  MinecraftServer server=((EntityPlayerMP)player).worldObj.getMinecraftServer();
  WorldServer worldServer=server.worldServerForDimension(dimension);
  player.addExperienceLevel(0);
  if (oldDimension == 1) {
    player.setPositionAndUpdate(x,y,z);
    worldServer.spawnEntityInWorld(player);
    worldServer.updateEntityWithOptionalForce(player,false);
  }
}",0.8849693251533742
165862,"@Override public void initGui(){
  super.initGui();
  blacklistMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(130,9,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  blacklistMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,14 * 16,32);
  blacklistMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,15 * 16,32);
  oredictMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(148,9,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  oredictMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,10 * 16,32);
  oredictMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,11 * 16,32);
  damageMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(130,27,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  damageMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,6 * 16,32);
  damageMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,7 * 16,32);
  nbtMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(148,27,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  nbtMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,8 * 16,32);
  nbtMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,9 * 16,32);
  modMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(130,45,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  modMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,12 * 16,32);
  modMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,13 * 16,32);
  NBTTagCompound tagCompound=Minecraft.getMinecraft().thePlayer.getHeldItem().getTagCompound();
  if (tagCompound != null) {
    setBlacklistMode(tagCompound.getString(""String_Node_Str""));
    oredictMode.setCurrentChoice(tagCompound.getBoolean(""String_Node_Str"") ? 1 : 0);
    damageMode.setCurrentChoice(tagCompound.getBoolean(""String_Node_Str"") ? 1 : 0);
    nbtMode.setCurrentChoice(tagCompound.getBoolean(""String_Node_Str"") ? 1 : 0);
    modMode.setCurrentChoice(tagCompound.getBoolean(""String_Node_Str"") ? 1 : 0);
  }
  Panel toplevel=new Panel(mc,this).setLayout(new PositionalLayout()).setBackground(iconLocation).addChild(blacklistMode).addChild(oredictMode).addChild(damageMode).addChild(nbtMode).addChild(modMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
}","@Override public void initGui(){
  super.initGui();
  blacklistMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(130,9,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  blacklistMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,14 * 16,32);
  blacklistMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,15 * 16,32);
  oredictMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(148,9,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  oredictMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,10 * 16,32);
  oredictMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,11 * 16,32);
  damageMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(130,27,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  damageMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,6 * 16,32);
  damageMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,7 * 16,32);
  nbtMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(148,27,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  nbtMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,8 * 16,32);
  nbtMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,9 * 16,32);
  modMode=new ImageChoiceLabel(mc,this).setLayoutHint(new PositionalLayout.PositionalHint(130,45,16,16)).setTooltips(""String_Node_Str"").addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  modMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,12 * 16,32);
  modMode.addChoice(""String_Node_Str"",""String_Node_Str"",guiElements,13 * 16,32);
  NBTTagCompound tagCompound=Minecraft.getMinecraft().thePlayer.getHeldItem(EnumHand.MAIN_HAND).getTagCompound();
  if (tagCompound != null) {
    setBlacklistMode(tagCompound.getString(""String_Node_Str""));
    oredictMode.setCurrentChoice(tagCompound.getBoolean(""String_Node_Str"") ? 1 : 0);
    damageMode.setCurrentChoice(tagCompound.getBoolean(""String_Node_Str"") ? 1 : 0);
    nbtMode.setCurrentChoice(tagCompound.getBoolean(""String_Node_Str"") ? 1 : 0);
    modMode.setCurrentChoice(tagCompound.getBoolean(""String_Node_Str"") ? 1 : 0);
  }
  Panel toplevel=new Panel(mc,this).setLayout(new PositionalLayout()).setBackground(iconLocation).addChild(blacklistMode).addChild(oredictMode).addChild(damageMode).addChild(nbtMode).addChild(modMode);
  toplevel.setBounds(new Rectangle(guiLeft,guiTop,xSize,ySize));
  window=new Window(this,toplevel);
}",0.9971626733921816
165863,"@Override public IMessage onMessage(PacketGetAllReceivers message,MessageContext ctx){
  MinecraftServer.getServer().addScheduledTask(() -> handle(message,ctx));
  return null;
}","@Override public IMessage onMessage(PacketGetAllReceivers message,MessageContext ctx){
  FMLCommonHandler.instance().getWorldThread(ctx.netHandler).addScheduledTask(() -> handle(message,ctx));
  return null;
}",0.7855297157622739
165864,"private void addDimensions(List<TeleportDestinationClientInfo> destinationList){
  WorldServer[] worlds=DimensionManager.getWorlds();
  for (  WorldServer world : worlds) {
    int id=world.provider.getDimensionId();
    TeleportDestination destination=new TeleportDestination(new BlockPos(0,70,0),id);
    destination.setName(""String_Node_Str"" + id);
    TeleportDestinationClientInfo teleportDestinationClientInfo=new TeleportDestinationClientInfo(destination);
    String dimName=world.provider.getDimensionName();
    teleportDestinationClientInfo.setDimensionName(dimName);
    destinationList.add(teleportDestinationClientInfo);
  }
}","private void addDimensions(List<TeleportDestinationClientInfo> destinationList){
  WorldServer[] worlds=DimensionManager.getWorlds();
  for (  WorldServer world : worlds) {
    int id=world.provider.getDimension();
    TeleportDestination destination=new TeleportDestination(new BlockPos(0,70,0),id);
    destination.setName(""String_Node_Str"" + id);
    TeleportDestinationClientInfo teleportDestinationClientInfo=new TeleportDestinationClientInfo(destination);
    String dimName=world.provider.getDimensionType().getName();
    teleportDestinationClientInfo.setDimensionName(dimName);
    destinationList.add(teleportDestinationClientInfo);
  }
}",0.9906832298136646
165865,"public TeleportProbeItem(){
  setUnlocalizedName(""String_Node_Str"");
  setCreativeTab(RFTools.tabRfTools);
  setMaxStackSize(1);
  GameRegistry.registerItem(this,""String_Node_Str"");
}","public TeleportProbeItem(){
  setUnlocalizedName(""String_Node_Str"");
  setRegistryName(""String_Node_Str"");
  setCreativeTab(RFTools.tabRfTools);
  setMaxStackSize(1);
  GameRegistry.registerItem(this);
}",0.8549222797927462
165866,"@Override public ItemStack onItemRightClick(ItemStack stack,World world,EntityPlayer player){
  if (world.isRemote) {
    player.openGui(RFTools.instance,RFTools.GUI_TELEPORTPROBE,player.worldObj,(int)player.posX,(int)player.posY,(int)player.posZ);
    return stack;
  }
  return stack;
}","@Override public ActionResult<ItemStack> onItemRightClick(ItemStack stack,World world,EntityPlayer player,EnumHand hand){
  if (world.isRemote) {
    player.openGui(RFTools.instance,RFTools.GUI_TELEPORTPROBE,player.worldObj,(int)player.posX,(int)player.posY,(int)player.posZ);
    return new ActionResult<>(EnumActionResult.SUCCESS,stack);
  }
  return new ActionResult<>(EnumActionResult.SUCCESS,stack);
}",0.8011527377521613
165867,"@SideOnly(Side.CLIENT) public void initModel(){
  ModelLoader.setCustomModelResourceLocation(this,0,new ModelResourceLocation(RFTools.MODID + ""String_Node_Str"" + getUnlocalizedName().substring(5),""String_Node_Str""));
}","@SideOnly(Side.CLIENT) public void initModel(){
  ModelLoader.setCustomModelResourceLocation(this,0,new ModelResourceLocation(getRegistryName(),""String_Node_Str""));
}",0.828125
165868,"public static PlayerExtendedProperties getProperties(EntityPlayer player){
  IExtendedEntityProperties properties=player.getExtendedProperties(ID);
  return (PlayerExtendedProperties)properties;
}","public static PlayerExtendedProperties getProperties(EntityPlayer player){
  return null;
}",0.6132404181184669
165869,"@SubscribeEvent public void tickEnd(TickEvent.WorldTickEvent event){
  if (event.side != Side.SERVER) {
    return;
  }
  World world=event.world;
  int dim=world.provider.getDimensionId();
  if (event.phase == TickEvent.Phase.END) {
    ArrayDeque<RetroChunkCoord> chunks=chunksToGen.get(dim);
    if (chunks != null && !chunks.isEmpty()) {
      RetroChunkCoord r=chunks.pollFirst();
      Pair<Integer,Integer> c=r.coord;
      Logging.log(""String_Node_Str"" + c.toString() + ""String_Node_Str"");
      long worldSeed=world.getSeed();
      Random rand=new Random(worldSeed);
      long xSeed=rand.nextLong() >> 2 + 1L;
      long zSeed=rand.nextLong() >> 2 + 1L;
      rand.setSeed(xSeed * c.getLeft() + zSeed * c.getRight() ^ worldSeed);
      RFToolsWorldGenerator.instance.generateWorld(rand,r.coord.getLeft(),r.coord.getRight(),world,false);
      chunksToGen.put(dim,chunks);
    }
 else     if (chunks != null) {
      chunksToGen.remove(dim);
    }
  }
 else {
    Deque<Pair<Integer,Integer>> chunks=chunksToPreGen.get(dim);
    if (chunks != null && !chunks.isEmpty()) {
      Pair<Integer,Integer> c=chunks.pollFirst();
      Logging.log(""String_Node_Str"" + c.toString() + ""String_Node_Str"");
      world.getChunkFromChunkCoords(c.getLeft(),c.getRight());
    }
 else     if (chunks != null) {
      chunksToPreGen.remove(dim);
    }
  }
}","@SubscribeEvent public void tickEnd(TickEvent.WorldTickEvent event){
  if (event.side != Side.SERVER) {
    return;
  }
  World world=event.world;
  int dim=world.provider.getDimension();
  if (event.phase == TickEvent.Phase.END) {
    ArrayDeque<RetroChunkCoord> chunks=chunksToGen.get(dim);
    if (chunks != null && !chunks.isEmpty()) {
      RetroChunkCoord r=chunks.pollFirst();
      Pair<Integer,Integer> c=r.coord;
      Logging.log(""String_Node_Str"" + c.toString() + ""String_Node_Str"");
      long worldSeed=world.getSeed();
      Random rand=new Random(worldSeed);
      long xSeed=rand.nextLong() >> 2 + 1L;
      long zSeed=rand.nextLong() >> 2 + 1L;
      rand.setSeed(xSeed * c.getLeft() + zSeed * c.getRight() ^ worldSeed);
      RFToolsWorldGenerator.instance.generateWorld(rand,r.coord.getLeft(),r.coord.getRight(),world,false);
      chunksToGen.put(dim,chunks);
    }
 else     if (chunks != null) {
      chunksToGen.remove(dim);
    }
  }
 else {
    Deque<Pair<Integer,Integer>> chunks=chunksToPreGen.get(dim);
    if (chunks != null && !chunks.isEmpty()) {
      Pair<Integer,Integer> c=chunks.pollFirst();
      Logging.log(""String_Node_Str"" + c.toString() + ""String_Node_Str"");
      world.getChunkFromChunkCoords(c.getLeft(),c.getRight());
    }
 else     if (chunks != null) {
      chunksToPreGen.remove(dim);
    }
  }
}",0.9992592592592592
165870,"public void setAnchor(int anchor){
  if (supportMode) {
    clearSupportBlocks();
  }
  boxValid=false;
  this.anchor=anchor;
  if (isShapeCard()) {
    ItemStack shapeCard=inventoryHelper.getStackInSlot(BuilderContainer.SLOT_TAB);
    BlockPos dimension=ShapeCardItem.getDimension(shapeCard);
    BlockPos minBox=positionBox(dimension);
    int dx=dimension.getX();
    int dy=dimension.getY();
    int dz=dimension.getZ();
    BlockPos offset=new BlockPos(minBox.getX() + (int)Math.ceil(dx / 2),minBox.getY() + (int)Math.ceil(dy / 2),minBox.getZ() + (int)Math.ceil(dz / 2));
    NBTTagCompound tagCompound=shapeCard.getTagCompound();
    tagCompound.setInteger(""String_Node_Str"",offset.getX());
    tagCompound.setInteger(""String_Node_Str"",offset.getY());
    tagCompound.setInteger(""String_Node_Str"",offset.getZ());
  }
  if (supportMode) {
    makeSupportBlocks();
  }
  markDirtyClient();
}","public void setAnchor(int anchor){
  if (supportMode) {
    clearSupportBlocks();
  }
  boxValid=false;
  this.anchor=anchor;
  if (isShapeCard()) {
    ItemStack shapeCard=inventoryHelper.getStackInSlot(BuilderContainer.SLOT_TAB);
    BlockPos dimension=ShapeCardItem.getDimension(shapeCard);
    BlockPos minBox=positionBox(dimension);
    int dx=dimension.getX();
    int dy=dimension.getY();
    int dz=dimension.getZ();
    BlockPos offset=new BlockPos(minBox.getX() + (int)Math.ceil(dx / 2),minBox.getY() + (int)Math.ceil(dy / 2),minBox.getZ() + (int)Math.ceil(dz / 2));
    NBTTagCompound tagCompound=shapeCard.getTagCompound();
    if (tagCompound == null) {
      tagCompound=new NBTTagCompound();
      shapeCard.setTagCompound(tagCompound);
    }
    tagCompound.setInteger(""String_Node_Str"",offset.getX());
    tagCompound.setInteger(""String_Node_Str"",offset.getY());
    tagCompound.setInteger(""String_Node_Str"",offset.getZ());
  }
  if (supportMode) {
    makeSupportBlocks();
  }
  markDirtyClient();
}",0.9361924686192468
165871,"public void setShieldBlock(BlockPos c){
  shieldBlock=c;
  markDirty();
  worldObj.markBlockForUpdate(getPos());
}","public void setShieldBlock(BlockPos c){
  shieldBlock=c;
  markDirty();
  if (worldObj != null) {
    worldObj.markBlockForUpdate(getPos());
  }
}",0.8769230769230769
165872,"public void setCamoBlock(int camoId,int hasTe){
  this.camoId=camoId;
  this.hasTe=hasTe;
  if (camoId == -1) {
    block=null;
  }
 else {
    block=Block.getBlockById(camoId);
  }
  markDirty();
  worldObj.markBlockForUpdate(getPos());
}","public void setCamoBlock(int camoId,int hasTe){
  this.camoId=camoId;
  this.hasTe=hasTe;
  if (camoId == -1) {
    block=null;
  }
 else {
    block=Block.getBlockById(camoId);
  }
  markDirty();
  if (worldObj != null) {
    worldObj.markBlockForUpdate(getPos());
  }
}",0.9333333333333332
165873,"@Override public boolean isMouseOverSlot(Slot slotIn,int x,int y){
  if (slotIn.inventory == tileEntity) {
    Widget widget=window.getToplevel().getWidgetAtPosition(x,y);
    if (widget instanceof BlockRender) {
      Object userObject=widget.getUserObject();
      if (userObject instanceof Integer) {
        Integer slotIndex=(Integer)userObject;
        return slotIndex == slotIn.getSlotIndex();
      }
    }
    return false;
  }
 else {
    return super.isMouseOverSlot(slotIn,x,y);
  }
}","@Override public boolean isMouseOverSlot(Slot slotIn,int x,int y){
  if (slotIn.inventory == tileEntity) {
    Widget widget=window.getToplevel().getWidgetAtPosition(x,y);
    if (widget instanceof BlockRender) {
      Object userObject=widget.getUserObject();
      if (userObject instanceof Integer) {
        Integer slotIndex=(Integer)userObject;
        return slotIndex == slotIn.getSlotIndex();
      }
    }
 else {
      return super.isMouseOverSlot(slotIn,x,y);
    }
    return false;
  }
 else {
    return super.isMouseOverSlot(slotIn,x,y);
  }
}",0.9412878787878788
165874,"@Override public boolean isItemValidForSlot(int index,ItemStack stack){
  if (index == CoalGeneratorContainer.SLOT_CHARGEITEM) {
    return stack.getItem() instanceof IEnergyContainerItem;
  }
  return true;
}","@Override public boolean isItemValidForSlot(int index,ItemStack stack){
  if (index == CoalGeneratorContainer.SLOT_CHARGEITEM) {
    return stack.getItem() instanceof IEnergyContainerItem;
  }
 else   if (index == CoalGeneratorContainer.SLOT_COALINPUT) {
    return stack.getItem() == Items.coal;
  }
  return true;
}",0.7490494296577946
165875,"public void setWhitelistMode(boolean w){
  whitelistMode=w;
  markDirty();
}","public void setWhitelistMode(boolean w){
  whitelistMode=w;
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}",0.7414634146341463
165876,"/** 
 * Returns TRUE if the TileEntity can connect on a given side.
 */
boolean canConnectEnergy(ForgeDirection from);","/** 
 * Returns TRUE if the TileEntity can connect on a given side.
 */
boolean canConnectEnergy(EnumFacing from);",0.913793103448276
165877,"/** 
 * Remove energy from an IEnergyProvider, internal distribution is left entirely to the IEnergyProvider.
 * @param from Orientation the energy is extracted from.
 * @param maxExtract Maximum amount of energy to extract.
 * @param simulate If TRUE, the extraction will only be simulated.
 * @return Amount of energy that was (or would have been, if simulated) extracted.
 */
@Override int extractEnergy(ForgeDirection from,int maxExtract,boolean simulate);","/** 
 * Remove energy from an IEnergyProvider, internal distribution is left entirely to the IEnergyProvider.
 * @param from Orientation the energy is extracted from.
 * @param maxExtract Maximum amount of energy to extract.
 * @param simulate If TRUE, the extraction will only be simulated.
 * @return Amount of energy that was (or would have been, if simulated) extracted.
 */
@Override int extractEnergy(EnumFacing from,int maxExtract,boolean simulate);",0.9759825327510916
165878,"/** 
 * Returns the amount of energy currently stored.
 */
@Override int getEnergyStored(ForgeDirection from);","/** 
 * Returns the amount of energy currently stored.
 */
@Override int getEnergyStored(EnumFacing from);",0.9074074074074074
165879,"/** 
 * Returns the maximum amount of energy that can be stored.
 */
@Override int getMaxEnergyStored(ForgeDirection from);","/** 
 * Returns the maximum amount of energy that can be stored.
 */
@Override int getMaxEnergyStored(EnumFacing from);",0.9173553719008264
165880,"/** 
 * Add energy to an IEnergyReceiver, internal distribution is left entirely to the IEnergyReceiver.
 * @param from Orientation the energy is received from.
 * @param maxReceive Maximum amount of energy to receive.
 * @param simulate If TRUE, the charge will only be simulated.
 * @return Amount of energy that was (or would have been, if simulated) received.
 */
@Override int receiveEnergy(ForgeDirection from,int maxReceive,boolean simulate);","/** 
 * Add energy to an IEnergyReceiver, internal distribution is left entirely to the IEnergyReceiver.
 * @param from Orientation the energy is received from.
 * @param maxReceive Maximum amount of energy to receive.
 * @param simulate If TRUE, the charge will only be simulated.
 * @return Amount of energy that was (or would have been, if simulated) received.
 */
@Override int receiveEnergy(EnumFacing from,int maxReceive,boolean simulate);",0.9753914988814316
165881,"/** 
 * Remove energy from an IEnergyProvider, internal distribution is left entirely to the IEnergyProvider.
 * @param from Orientation the energy is extracted from.
 * @param maxExtract Maximum amount of energy to extract.
 * @param simulate If TRUE, the extraction will only be simulated.
 * @return Amount of energy that was (or would have been, if simulated) extracted.
 */
int extractEnergy(ForgeDirection from,int maxExtract,boolean simulate);","/** 
 * Remove energy from an IEnergyProvider, internal distribution is left entirely to the IEnergyProvider.
 * @param from Orientation the energy is extracted from.
 * @param maxExtract Maximum amount of energy to extract.
 * @param simulate If TRUE, the extraction will only be simulated.
 * @return Amount of energy that was (or would have been, if simulated) extracted.
 */
int extractEnergy(EnumFacing from,int maxExtract,boolean simulate);",0.9754464285714286
165882,"/** 
 * Returns the amount of energy currently stored.
 */
int getEnergyStored(ForgeDirection from);","/** 
 * Returns the amount of energy currently stored.
 */
int getEnergyStored(EnumFacing from);",0.8979591836734694
165883,"/** 
 * Returns the maximum amount of energy that can be stored.
 */
int getMaxEnergyStored(ForgeDirection from);","/** 
 * Returns the maximum amount of energy that can be stored.
 */
int getMaxEnergyStored(EnumFacing from);",0.90990990990991
165884,"/** 
 * Returns the amount of energy currently stored.
 */
int getEnergyStored(ForgeDirection from);","/** 
 * Returns the amount of energy currently stored.
 */
int getEnergyStored(EnumFacing from);",0.8979591836734694
165885,"/** 
 * Returns the maximum amount of energy that can be stored.
 */
int getMaxEnergyStored(ForgeDirection from);","/** 
 * Returns the maximum amount of energy that can be stored.
 */
int getMaxEnergyStored(EnumFacing from);",0.90990990990991
165886,"/** 
 * Add energy to an IEnergyReceiver, internal distribution is left entirely to the IEnergyReceiver.
 * @param from Orientation the energy is received from.
 * @param maxReceive Maximum amount of energy to receive.
 * @param simulate If TRUE, the charge will only be simulated.
 * @return Amount of energy that was (or would have been, if simulated) received.
 */
int receiveEnergy(ForgeDirection from,int maxReceive,boolean simulate);","/** 
 * Add energy to an IEnergyReceiver, internal distribution is left entirely to the IEnergyReceiver.
 * @param from Orientation the energy is received from.
 * @param maxReceive Maximum amount of energy to receive.
 * @param simulate If TRUE, the charge will only be simulated.
 * @return Amount of energy that was (or would have been, if simulated) received.
 */
int receiveEnergy(EnumFacing from,int maxReceive,boolean simulate);",0.9748283752860412
165887,"@Override public int extractEnergy(ItemStack container,int maxExtract,boolean simulate){
  if (container.stackTagCompound == null || !container.stackTagCompound.hasKey(""String_Node_Str"")) {
    return 0;
  }
  int energy=container.stackTagCompound.getInteger(""String_Node_Str"");
  int energyExtracted=Math.min(energy,Math.min(this.maxExtract,maxExtract));
  if (!simulate) {
    energy-=energyExtracted;
    container.stackTagCompound.setInteger(""String_Node_Str"",energy);
  }
  return energyExtracted;
}","@Override public int extractEnergy(ItemStack container,int maxExtract,boolean simulate){
  if (container.getTagCompound() == null || !container.getTagCompound().hasKey(""String_Node_Str"")) {
    return 0;
  }
  int energy=container.getTagCompound().getInteger(""String_Node_Str"");
  int energyExtracted=Math.min(energy,Math.min(this.maxExtract,maxExtract));
  if (!simulate) {
    energy-=energyExtracted;
    container.getTagCompound().setInteger(""String_Node_Str"",energy);
  }
  return energyExtracted;
}",0.9603174603174603
165888,"@Override public int getEnergyStored(ItemStack container){
  if (container.stackTagCompound == null || !container.stackTagCompound.hasKey(""String_Node_Str"")) {
    return 0;
  }
  return container.stackTagCompound.getInteger(""String_Node_Str"");
}","@Override public int getEnergyStored(ItemStack container){
  if (container.getTagCompound() == null || !container.getTagCompound().hasKey(""String_Node_Str"")) {
    return 0;
  }
  return container.getTagCompound().getInteger(""String_Node_Str"");
}",0.9390243902439024
165889,"@Override public int receiveEnergy(ItemStack container,int maxReceive,boolean simulate){
  if (container.stackTagCompound == null) {
    container.stackTagCompound=new NBTTagCompound();
  }
  int energy=container.stackTagCompound.getInteger(""String_Node_Str"");
  int energyReceived=Math.min(capacity - energy,Math.min(this.maxReceive,maxReceive));
  if (!simulate) {
    energy+=energyReceived;
    container.stackTagCompound.setInteger(""String_Node_Str"",energy);
  }
  return energyReceived;
}","@Override public int receiveEnergy(ItemStack container,int maxReceive,boolean simulate){
  if (container.getTagCompound() == null) {
    container.setTagCompound(new NBTTagCompound());
  }
  int energy=container.getTagCompound().getInteger(""String_Node_Str"");
  int energyReceived=Math.min(capacity - energy,Math.min(this.maxReceive,maxReceive));
  if (!simulate) {
    energy+=energyReceived;
    container.getTagCompound().setInteger(""String_Node_Str"",energy);
  }
  return energyReceived;
}",0.96048632218845
165890,"@Override public boolean canConnectEnergy(ForgeDirection from){
  return true;
}","@Override public boolean canConnectEnergy(EnumFacing from){
  return true;
}",0.8717948717948718
165891,"@Override public int extractEnergy(ForgeDirection from,int maxExtract,boolean simulate){
  return storage.extractEnergy(maxExtract,simulate);
}","@Override public int extractEnergy(EnumFacing from,int maxExtract,boolean simulate){
  return storage.extractEnergy(maxExtract,simulate);
}",0.9290780141843972
165892,"@Override public int getEnergyStored(ForgeDirection from){
  return storage.getEnergyStored();
}","@Override public int getEnergyStored(EnumFacing from){
  return storage.getEnergyStored();
}",0.8936170212765957
165893,"@Override public int getMaxEnergyStored(ForgeDirection from){
  return storage.getMaxEnergyStored();
}","@Override public int getMaxEnergyStored(EnumFacing from){
  return storage.getMaxEnergyStored();
}",0.9
165894,"@Override public int receiveEnergy(ForgeDirection from,int maxReceive,boolean simulate){
  return storage.receiveEnergy(maxReceive,simulate);
}","@Override public int receiveEnergy(EnumFacing from,int maxReceive,boolean simulate){
  return storage.receiveEnergy(maxReceive,simulate);
}",0.9290780141843972
165895,"boolean shouldRedstoneConduitConnect(World world,int x,int y,int z,ForgeDirection from);","boolean shouldRedstoneConduitConnect(World world,int x,int y,int z,EnumFacing from);",0.8837209302325582
165896,"/** 
 * If false this connection will be treated the same a regular powered block. No power will be drawn over the connection and it will not be used to balance capacitor bank levels
 * @param direction
 * @return
 */
boolean isNetworkControlledIo(ForgeDirection direction);","/** 
 * If false this connection will be treated the same a regular powered block. No power will be drawn over the connection and it will not be used to balance capacitor bank levels
 * @param direction
 * @return
 */
boolean isNetworkControlledIo(EnumFacing direction);",0.9632352941176472
165897,boolean isInputEnabled(ForgeDirection direction);,boolean isInputEnabled(EnumFacing direction);,0.7872340425531915
165898,boolean isOutputEnabled(ForgeDirection direction);,boolean isOutputEnabled(EnumFacing direction);,0.7916666666666666
165899,"private void teleportEntity(World world,World destWorld,Entity entity,double newX,double newY,double newZ){
  if (entity instanceof EntityPlayer) {
    if (world.provider.dimensionId != destWorld.provider.dimensionId) {
      TeleportationTools.teleportToDimension((EntityPlayer)entity,destWorld.provider.dimensionId,newX,newY,newZ);
    }
    ((EntityPlayer)entity).setPositionAndUpdate(newX,newY,newZ);
  }
 else {
    if (world.provider.dimensionId != destWorld.provider.dimensionId) {
      MinecraftServer.getServer().getConfigurationManager().transferEntityToWorld(entity,destWorld.provider.dimensionId,(WorldServer)world,(WorldServer)destWorld,new RfToolsTeleporter((WorldServer)destWorld,newX,newY,newZ));
    }
    entity.setPosition(newX,newY,newZ);
  }
}","private void teleportEntity(World world,World destWorld,Entity entity,double newX,double newY,double newZ){
  if (entity instanceof EntityPlayer) {
    if (world.provider.dimensionId != destWorld.provider.dimensionId) {
      TeleportationTools.teleportToDimension((EntityPlayer)entity,destWorld.provider.dimensionId,newX,newY,newZ);
    }
    ((EntityPlayer)entity).setPositionAndUpdate(newX,newY,newZ);
  }
 else {
    if (world.provider.dimensionId != destWorld.provider.dimensionId) {
      transferEntityToWorld(entity,(WorldServer)world,(WorldServer)destWorld,new RfToolsTeleporter((WorldServer)destWorld,newX,newY,newZ),newX,newY,newZ);
    }
 else {
      entity.setLocationAndAngles(newX,newY,newZ,entity.rotationYaw,entity.rotationPitch);
      destWorld.updateEntityWithOptionalForce(entity,false);
    }
  }
}",0.807061790668348
165900,"private int rotateMeta(Block block,int meta,SpaceProjectorSetup.BlockInformation information,int rotMode){
  Item item=Item.getItemFromBlock(block);
  if (item.getHasSubtypes()) {
    return meta;
  }
switch (information.getRotateInfo()) {
case SpaceProjectorSetup.BlockInformation.ROTATE_mfff:
switch (rotMode) {
case 0:
      return meta;
case 1:
{
      ForgeDirection dir=ForgeDirection.values()[meta & 7];
      return (meta & 8) | dir.getRotation(ForgeDirection.UP).ordinal();
    }
case 2:
{
    ForgeDirection dir=ForgeDirection.values()[meta & 7];
    return (meta & 8) | dir.getOpposite().ordinal();
  }
case 3:
{
  ForgeDirection dir=ForgeDirection.values()[meta & 7];
  return (meta & 8) | dir.getOpposite().getRotation(ForgeDirection.UP).ordinal();
}
}
break;
case SpaceProjectorSetup.BlockInformation.ROTATE_mmmm:
return meta;
}
return meta;
}","private int rotateMeta(Block block,int meta,SpaceProjectorSetup.BlockInformation information,int rotMode){
  Item item=Item.getItemFromBlock(block);
  if (item != null && item.getHasSubtypes()) {
    return meta;
  }
switch (information.getRotateInfo()) {
case SpaceProjectorSetup.BlockInformation.ROTATE_mfff:
switch (rotMode) {
case 0:
      return meta;
case 1:
{
      ForgeDirection dir=ForgeDirection.values()[meta & 7];
      return (meta & 8) | dir.getRotation(ForgeDirection.UP).ordinal();
    }
case 2:
{
    ForgeDirection dir=ForgeDirection.values()[meta & 7];
    return (meta & 8) | dir.getOpposite().ordinal();
  }
case 3:
{
  ForgeDirection dir=ForgeDirection.values()[meta & 7];
  return (meta & 8) | dir.getOpposite().getRotation(ForgeDirection.UP).ordinal();
}
}
break;
case SpaceProjectorSetup.BlockInformation.ROTATE_mmmm:
return meta;
}
return meta;
}",0.9907514450867052
165901,"private void calculateBoxShaped(){
  ItemStack shapeCard=inventoryHelper.getStackInSlot(BuilderContainer.SLOT_TAB);
  Coordinate dimension=ShapeCardItem.getClampedDimension(shapeCard,SpaceProjectorConfiguration.maxBuilderDimension);
  Coordinate offset=ShapeCardItem.getClampedOffset(shapeCard,SpaceProjectorConfiguration.maxBuilderOffset);
  Coordinate minCorner=ShapeCardItem.getMinCorner(getCoordinate(),dimension,offset);
  Coordinate maxCorner=ShapeCardItem.getMaxCorner(getCoordinate(),dimension,offset);
  if (minCorner.getY() < 0) {
    minCorner=new Coordinate(minCorner.getX(),0,minCorner.getZ());
  }
 else   if (minCorner.getY() > 255) {
    minCorner=new Coordinate(minCorner.getX(),255,minCorner.getZ());
  }
  if (maxCorner.getY() < 0) {
    maxCorner=new Coordinate(maxCorner.getX(),0,maxCorner.getZ());
  }
 else   if (maxCorner.getY() > 255) {
    maxCorner=new Coordinate(maxCorner.getX(),255,maxCorner.getZ());
  }
  if (boxValid) {
    if (minCorner.equals(minBox) && maxCorner.equals(maxBox)) {
      return;
    }
  }
  boxValid=true;
  cardType=shapeCard.getItemDamage();
  cachedBlocks=null;
  cachedChunk=null;
  minBox=minCorner;
  maxBox=maxCorner;
  restartScan();
}","private void calculateBoxShaped(){
  ItemStack shapeCard=inventoryHelper.getStackInSlot(BuilderContainer.SLOT_TAB);
  if (shapeCard == null) {
    return;
  }
  Coordinate dimension=ShapeCardItem.getClampedDimension(shapeCard,SpaceProjectorConfiguration.maxBuilderDimension);
  Coordinate offset=ShapeCardItem.getClampedOffset(shapeCard,SpaceProjectorConfiguration.maxBuilderOffset);
  Coordinate minCorner=ShapeCardItem.getMinCorner(getCoordinate(),dimension,offset);
  Coordinate maxCorner=ShapeCardItem.getMaxCorner(getCoordinate(),dimension,offset);
  if (minCorner.getY() < 0) {
    minCorner=new Coordinate(minCorner.getX(),0,minCorner.getZ());
  }
 else   if (minCorner.getY() > 255) {
    minCorner=new Coordinate(minCorner.getX(),255,minCorner.getZ());
  }
  if (maxCorner.getY() < 0) {
    maxCorner=new Coordinate(maxCorner.getX(),0,maxCorner.getZ());
  }
 else   if (maxCorner.getY() > 255) {
    maxCorner=new Coordinate(maxCorner.getX(),255,maxCorner.getZ());
  }
  if (boxValid) {
    if (minCorner.equals(minBox) && maxCorner.equals(maxBox)) {
      return;
    }
  }
  boxValid=true;
  cardType=shapeCard.getItemDamage();
  cachedBlocks=null;
  cachedChunk=null;
  minBox=minCorner;
  maxBox=maxCorner;
  restartScan();
}",0.9823263460748048
165902,"private void restartScan(){
  chunkUnload();
  if (loopMode || (powered > 0 && scan == null)) {
    if (getCardType() == ShapeCardItem.CARD_SPACE) {
      calculateBox();
      scan=minBox;
    }
 else {
      calculateBoxShaped();
      scan=new Coordinate(minBox.getX(),maxBox.getY(),minBox.getZ());
    }
    cachedBlocks=null;
    cachedChunk=null;
  }
 else {
    scan=null;
  }
}","private void restartScan(){
  chunkUnload();
  if (loopMode || (powered > 0 && scan == null)) {
    if (getCardType() == ShapeCardItem.CARD_SPACE) {
      calculateBox();
      scan=minBox;
    }
 else     if (getCardType() != ShapeCardItem.CARD_UNKNOWN) {
      calculateBoxShaped();
      scan=new Coordinate(minBox.getX(),maxBox.getY(),minBox.getZ());
    }
    cachedBlocks=null;
    cachedChunk=null;
  }
 else {
    scan=null;
  }
}",0.9356014580801943
165903,"public void setAnchor(int anchor){
  if (supportMode) {
    clearSupportBlocks();
  }
  this.anchor=anchor;
  if (supportMode) {
    makeSupportBlocks();
  }
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}","public void setAnchor(int anchor){
  if (supportMode) {
    clearSupportBlocks();
  }
  boxValid=false;
  this.anchor=anchor;
  if (supportMode) {
    makeSupportBlocks();
  }
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}",0.961864406779661
165904,"public void preInit(FMLPreInitializationEvent e){
  GeneralConfig.preInit(e);
  modConfigDir=e.getModConfigurationDirectory();
  mainConfig=new Configuration(new File(modConfigDir.getPath() + File.separator + ""String_Node_Str"",""String_Node_Str""));
  readMainConfig();
  SimpleNetworkWrapper network=PacketHandler.registerMessages(""String_Node_Str"");
  RFToolsMessages.registerNetworkMessages(network);
  ModItems.init();
  ModBlocks.init();
  ModCrafting.init();
  ModDimensions.init();
}","public void preInit(FMLPreInitializationEvent e){
  GeneralConfig.preInit(e);
  modConfigDir=e.getModConfigurationDirectory();
  mainConfig=new Configuration(new File(modConfigDir.getPath() + File.separator + ""String_Node_Str"",""String_Node_Str""));
  readMainConfig();
  SimpleNetworkWrapper network=PacketHandler.registerMessages(""String_Node_Str"");
  RFToolsMessages.registerNetworkMessages(network);
  ModItems.init();
  ModBlocks.init();
  ModCrafting.init();
  ModDimensions.init();
  KnownDimletConfiguration.setupChestLoot();
}",0.9559255631733594
165905,"/** 
 * This initializes all dimlets based on all loaded mods.
 */
private static void init(World world,Configuration cfg,boolean master){
  clean();
  DimletMapping mapping=DimletMapping.getDimletMapping(world);
  File modConfigDir=CommonProxy.modConfigDir;
  readDimletsJson();
  if (master) {
    readUserBlacklist(cfg);
  }
  updateLastId(cfg,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_DEFAULT,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_SINGLE,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_CHECKERBOARD,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_COLD,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_MEDIUM,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_WARM,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_DRY,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_WET,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_FIELDS,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_MOUNTAINS,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_FILTERED,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_MAGICAL,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_FOREST,mapping,master);
  BiomeControllerMapping.setupControllerBiomes();
  DimletKey keyControllerDefault=new DimletKey(DimletType.DIMLET_CONTROLLER,""String_Node_Str"");
  addExtraInformation(keyControllerDefault,""String_Node_Str"",""String_Node_Str"");
  initDigitItem(cfg,0,mapping,master);
  initDigitItem(cfg,1,mapping,master);
  initDigitItem(cfg,2,mapping,master);
  initDigitItem(cfg,3,mapping,master);
  initDigitItem(cfg,4,mapping,master);
  initDigitItem(cfg,5,mapping,master);
  initDigitItem(cfg,6,mapping,master);
  initDigitItem(cfg,7,mapping,master);
  initDigitItem(cfg,8,mapping,master);
  initDigitItem(cfg,9,mapping,master);
  DimletKey keyMaterialNone=new DimletKey(DimletType.DIMLET_MATERIAL,""String_Node_Str"");
  registerDimlet(cfg,keyMaterialNone,mapping,master,null,null);
  idToDisplayName.put(keyMaterialNone,DimletType.DIMLET_MATERIAL.dimletType.getName() + ""String_Node_Str"");
  DimletObjectMapping.idToBlock.put(keyMaterialNone,null);
  addExtraInformation(keyMaterialNone,""String_Node_Str"",""String_Node_Str"");
  initMaterialDimlets(cfg,mapping,master);
  initFoliageItem(cfg,mapping,master);
  DimletKey keyLiquidNone=new DimletKey(DimletType.DIMLET_LIQUID,""String_Node_Str"");
  registerDimlet(cfg,keyLiquidNone,mapping,master,null,null);
  DimletObjectMapping.idToFluid.put(keyLiquidNone,null);
  idToDisplayName.put(keyLiquidNone,DimletType.DIMLET_LIQUID.dimletType.getName() + ""String_Node_Str"");
  addExtraInformation(keyLiquidNone,""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_PEACEFUL,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_EFFICIENCY,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_EFFICIENCY_LOW,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_SHELTER,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_SEED,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_SPAWN,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_NOANIMALS,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initMobItem(cfg,""String_Node_Str"",mapping,master);
  for (  Map.Entry<String,MobDescriptor> entry : MobConfiguration.mobClasses.entrySet()) {
    Class<? extends EntityLiving> entityClass=entry.getValue().getEntityClass();
    if (entityClass != null) {
      String name=entry.getKey();
      if (name != null && !name.isEmpty()) {
        initMobItem(cfg,name,mapping,master);
      }
    }
  }
  DimletKey keyDefaultMobs=new DimletKey(DimletType.DIMLET_MOBS,""String_Node_Str"");
  addExtraInformation(keyDefaultMobs,""String_Node_Str"",""String_Node_Str"");
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_NORMAL).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(1.5f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(0.4f).skyColorFactor(0.6f,0.6f,0.6f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(1.5f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(0.4f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.2f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.6f,0.0f,0.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,1.0f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0f,0.6f,0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,0.2f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.0f,0.0f,0.6f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,1.0f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,1.0f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.0f,0.6f,0.6f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.2f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.6f,0,0.6f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.0f,0.0f,0.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.6f,0.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(1.0f,1.0f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(0.0f,0.0f,0.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(1.0f,0.2f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(0.2f,1.0f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(0.2f,0.2f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(1.0f,1.0f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(0.2f,1.0f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(1.0f,0.2f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_ENDER).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_INFERNO).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_STARS1).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_STARS2).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_NONE).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_SUN).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_LARGESUN).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_SMALLSUN).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_REDSUN).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_MOON).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_LARGEMOON).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_SMALLMOON).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_REDMOON).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_PLANET).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_LARGEPLANET).build(),true,mapping,master);
  DimletKey keySkyNormal=new DimletKey(DimletType.DIMLET_SKY,""String_Node_Str"");
  DimletKey keySkyNormalDay=new DimletKey(DimletType.DIMLET_SKY,""String_Node_Str"");
  DimletKey keySkyNormalNight=new DimletKey(DimletType.DIMLET_SKY,""String_Node_Str"");
  addExtraInformation(keySkyNormal,""String_Node_Str"",""String_Node_Str"");
  addExtraInformation(keySkyNormalDay,""String_Node_Str"");
  addExtraInformation(keySkyNormalNight,""String_Node_Str"");
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_NORAIN).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_LIGHTRAIN).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_HARDRAIN).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_NOTHUNDER).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_LIGHTTHUNDER).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_HARDTHUNDER).build(),mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_WEATHER,""String_Node_Str""),""String_Node_Str"");
  initStructureItem(cfg,StructureType.STRUCTURE_NONE.getName(),StructureType.STRUCTURE_NONE,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_VILLAGE.getName(),StructureType.STRUCTURE_VILLAGE,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_STRONGHOLD.getName(),StructureType.STRUCTURE_STRONGHOLD,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_DUNGEON.getName(),StructureType.STRUCTURE_DUNGEON,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_FORTRESS.getName(),StructureType.STRUCTURE_FORTRESS,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_MINESHAFT.getName(),StructureType.STRUCTURE_MINESHAFT,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_SCATTERED.getName(),StructureType.STRUCTURE_SCATTERED,mapping,master);
  DimletKey keyStructureNone=new DimletKey(DimletType.DIMLET_STRUCTURE,""String_Node_Str"");
  addExtraInformation(keyStructureNone,""String_Node_Str"",""String_Node_Str"");
  initRecurrentComplexStructures(cfg,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_VOID,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_FLAT,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_AMPLIFIED,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_NORMAL,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_CAVERN,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_ISLAND,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_ISLANDS,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_CHAOTIC,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_PLATEAUS,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_GRID,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_LOW_CAVERN,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_FLOODED_CAVERN,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_NEARLANDS,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_LIQUID,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_SOLID,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_WAVES,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_FILLEDWAVES,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_ROUGH,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_NONE,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_CAVES,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_RAVINES,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_ORBS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_OREGEN,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_LAKES,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_TENDRILS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_CANYONS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_MAZE,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_LIQUIDORBS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_SHALLOW_OCEAN,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_VOLCANOES,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_HUGEORBS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_HUGELIQUIDORBS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_NODIMLETBUILDINGS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_PYRAMIDS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_CLEAN,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_FEATURE,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_NONE,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_POISON,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_POISON2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_POISON3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_REGENERATION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_REGENERATION2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_REGENERATION3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN4,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESPEED,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESPEED2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESPEED3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN4,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSPEED,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSPEED2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSPEED3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_INSTANTHEALTH,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HARM,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_JUMP,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_JUMP2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_JUMP3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_CONFUSION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_RESISTANCE,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_RESISTANCE2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_RESISTANCE3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_FIRERESISTANCE,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WATERBREATHING,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_INVISIBILITY,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_BLINDNESS,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_NIGHTVISION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HUNGER,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HUNGER2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HUNGER3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WEAKNESS,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WEAKNESS2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WEAKNESS3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WITHER,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WITHER2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WITHER3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_ABSORPTION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_ABSORPTION2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_ABSORPTION3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_SATURATION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_SATURATION2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_SATURATION3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_FLIGHT,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_STRONGMOBS,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_BRUTALMOBS,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_EFFECT,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initTimeItem(cfg,""String_Node_Str"",null,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",0.0f,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",0.5f,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",0.75f,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",0.2f,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",null,2.0f,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",null,0.5f,mapping,master);
  DimletKey keyTimeNormal=new DimletKey(DimletType.DIMLET_TIME,""String_Node_Str"");
  addExtraInformation(keyTimeNormal,""String_Node_Str"",""String_Node_Str"");
  initBiomeItems(cfg,mapping,master);
  initLiquidItems(cfg,mapping,master);
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_WEATHER,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_EFFECT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_FEATURE,""String_Node_Str""));
  craftableDimlets.add(keyStructureNone);
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_TERRAIN,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_TERRAIN,""String_Node_Str""));
  craftableDimlets.add(keyControllerDefault);
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_CONTROLLER,""String_Node_Str""));
  craftableDimlets.add(keyMaterialNone);
  craftableDimlets.add(keyLiquidNone);
  craftableDimlets.add(keySkyNormal);
  craftableDimlets.add(keySkyNormalDay);
  craftableDimlets.add(keySkyNormalNight);
  craftableDimlets.add(keyDefaultMobs);
  craftableDimlets.add(keyTimeNormal);
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  readUserDimlets(cfg,modConfigDir,mapping,master);
  DimletRandomizer.setupWeightedRandomList();
  setupChestLoot();
  mapping.save(world);
}","/** 
 * This initializes all dimlets based on all loaded mods.
 */
private static void init(World world,Configuration cfg,boolean master){
  clean();
  DimletMapping mapping=DimletMapping.getDimletMapping(world);
  File modConfigDir=CommonProxy.modConfigDir;
  readDimletsJson();
  if (master) {
    readUserBlacklist(cfg);
  }
  updateLastId(cfg,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_DEFAULT,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_SINGLE,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_CHECKERBOARD,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_COLD,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_MEDIUM,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_WARM,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_DRY,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_WET,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_FIELDS,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_MOUNTAINS,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_FILTERED,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_MAGICAL,mapping,master);
  initControllerItem(cfg,""String_Node_Str"",ControllerType.CONTROLLER_FOREST,mapping,master);
  BiomeControllerMapping.setupControllerBiomes();
  DimletKey keyControllerDefault=new DimletKey(DimletType.DIMLET_CONTROLLER,""String_Node_Str"");
  addExtraInformation(keyControllerDefault,""String_Node_Str"",""String_Node_Str"");
  initDigitItem(cfg,0,mapping,master);
  initDigitItem(cfg,1,mapping,master);
  initDigitItem(cfg,2,mapping,master);
  initDigitItem(cfg,3,mapping,master);
  initDigitItem(cfg,4,mapping,master);
  initDigitItem(cfg,5,mapping,master);
  initDigitItem(cfg,6,mapping,master);
  initDigitItem(cfg,7,mapping,master);
  initDigitItem(cfg,8,mapping,master);
  initDigitItem(cfg,9,mapping,master);
  DimletKey keyMaterialNone=new DimletKey(DimletType.DIMLET_MATERIAL,""String_Node_Str"");
  registerDimlet(cfg,keyMaterialNone,mapping,master,null,null);
  idToDisplayName.put(keyMaterialNone,DimletType.DIMLET_MATERIAL.dimletType.getName() + ""String_Node_Str"");
  DimletObjectMapping.idToBlock.put(keyMaterialNone,null);
  addExtraInformation(keyMaterialNone,""String_Node_Str"",""String_Node_Str"");
  initMaterialDimlets(cfg,mapping,master);
  initFoliageItem(cfg,mapping,master);
  DimletKey keyLiquidNone=new DimletKey(DimletType.DIMLET_LIQUID,""String_Node_Str"");
  registerDimlet(cfg,keyLiquidNone,mapping,master,null,null);
  DimletObjectMapping.idToFluid.put(keyLiquidNone,null);
  idToDisplayName.put(keyLiquidNone,DimletType.DIMLET_LIQUID.dimletType.getName() + ""String_Node_Str"");
  addExtraInformation(keyLiquidNone,""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_PEACEFUL,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_EFFICIENCY,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_EFFICIENCY_LOW,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_SHELTER,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_SEED,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_SPAWN,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  initSpecialItem(cfg,""String_Node_Str"",SpecialType.SPECIAL_NOANIMALS,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_SPECIAL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initMobItem(cfg,""String_Node_Str"",mapping,master);
  for (  Map.Entry<String,MobDescriptor> entry : MobConfiguration.mobClasses.entrySet()) {
    Class<? extends EntityLiving> entityClass=entry.getValue().getEntityClass();
    if (entityClass != null) {
      String name=entry.getKey();
      if (name != null && !name.isEmpty()) {
        initMobItem(cfg,name,mapping,master);
      }
    }
  }
  DimletKey keyDefaultMobs=new DimletKey(DimletType.DIMLET_MOBS,""String_Node_Str"");
  addExtraInformation(keyDefaultMobs,""String_Node_Str"",""String_Node_Str"");
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_NORMAL).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(1.5f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().sunBrightnessFactor(0.4f).skyColorFactor(0.6f,0.6f,0.6f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(1.5f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().starBrightnessFactor(0.4f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.2f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.6f,0.0f,0.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,1.0f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0f,0.6f,0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,0.2f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.0f,0.0f,0.6f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,1.0f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.2f,1.0f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.0f,0.6f,0.6f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.2f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.6f,0,0.6f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(0.0f,0.0f,0.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyColorFactor(1.0f,0.6f,0.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(1.0f,1.0f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(0.0f,0.0f,0.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(1.0f,0.2f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(0.2f,1.0f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(0.2f,0.2f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(1.0f,1.0f,0.2f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(0.2f,1.0f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().fogColorFactor(1.0f,0.2f,1.0f).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_ENDER).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_INFERNO).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_STARS1).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().skyType(SkyType.SKY_STARS2).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_NONE).build(),false,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_SUN).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_LARGESUN).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_SMALLSUN).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_REDSUN).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_MOON).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_LARGEMOON).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_SMALLMOON).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_REDMOON).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_PLANET).build(),true,mapping,master);
  initSkyItem(cfg,""String_Node_Str"",new SkyDescriptor.Builder().addBody(CelestialBodyType.BODY_LARGEPLANET).build(),true,mapping,master);
  DimletKey keySkyNormal=new DimletKey(DimletType.DIMLET_SKY,""String_Node_Str"");
  DimletKey keySkyNormalDay=new DimletKey(DimletType.DIMLET_SKY,""String_Node_Str"");
  DimletKey keySkyNormalNight=new DimletKey(DimletType.DIMLET_SKY,""String_Node_Str"");
  addExtraInformation(keySkyNormal,""String_Node_Str"",""String_Node_Str"");
  addExtraInformation(keySkyNormalDay,""String_Node_Str"");
  addExtraInformation(keySkyNormalNight,""String_Node_Str"");
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_NORAIN).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_LIGHTRAIN).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_HARDRAIN).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_NOTHUNDER).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_LIGHTTHUNDER).build(),mapping,master);
  initWeatherItem(cfg,""String_Node_Str"",new WeatherDescriptor.Builder().weatherType(WeatherType.WEATHER_HARDTHUNDER).build(),mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_WEATHER,""String_Node_Str""),""String_Node_Str"");
  initStructureItem(cfg,StructureType.STRUCTURE_NONE.getName(),StructureType.STRUCTURE_NONE,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_VILLAGE.getName(),StructureType.STRUCTURE_VILLAGE,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_STRONGHOLD.getName(),StructureType.STRUCTURE_STRONGHOLD,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_DUNGEON.getName(),StructureType.STRUCTURE_DUNGEON,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_FORTRESS.getName(),StructureType.STRUCTURE_FORTRESS,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_MINESHAFT.getName(),StructureType.STRUCTURE_MINESHAFT,mapping,master);
  initStructureItem(cfg,StructureType.STRUCTURE_SCATTERED.getName(),StructureType.STRUCTURE_SCATTERED,mapping,master);
  DimletKey keyStructureNone=new DimletKey(DimletType.DIMLET_STRUCTURE,""String_Node_Str"");
  addExtraInformation(keyStructureNone,""String_Node_Str"",""String_Node_Str"");
  initRecurrentComplexStructures(cfg,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_VOID,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_FLAT,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_AMPLIFIED,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_NORMAL,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_CAVERN,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_ISLAND,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_ISLANDS,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_CHAOTIC,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_PLATEAUS,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_GRID,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_LOW_CAVERN,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_FLOODED_CAVERN,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_NEARLANDS,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_LIQUID,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_SOLID,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_WAVES,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_FILLEDWAVES,mapping,master);
  initTerrainItem(cfg,""String_Node_Str"",TerrainType.TERRAIN_ROUGH,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_NONE,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_CAVES,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_RAVINES,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_ORBS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_OREGEN,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_LAKES,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_TENDRILS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_CANYONS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_MAZE,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_LIQUIDORBS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_SHALLOW_OCEAN,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_VOLCANOES,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_HUGEORBS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_HUGELIQUIDORBS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_NODIMLETBUILDINGS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_PYRAMIDS,mapping,master);
  initFeatureItem(cfg,""String_Node_Str"",FeatureType.FEATURE_CLEAN,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_FEATURE,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_NONE,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_POISON,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_POISON2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_POISON3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_REGENERATION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_REGENERATION2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_REGENERATION3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESLOWDOWN4,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESPEED,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESPEED2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_MOVESPEED3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSLOWDOWN4,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSPEED,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSPEED2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DIGSPEED3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_DAMAGEBOOST3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_INSTANTHEALTH,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HARM,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_JUMP,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_JUMP2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_JUMP3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_CONFUSION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_RESISTANCE,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_RESISTANCE2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_RESISTANCE3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_FIRERESISTANCE,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WATERBREATHING,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_INVISIBILITY,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_BLINDNESS,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_NIGHTVISION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HUNGER,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HUNGER2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HUNGER3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WEAKNESS,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WEAKNESS2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WEAKNESS3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WITHER,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WITHER2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_WITHER3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_HEALTHBOOST3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_ABSORPTION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_ABSORPTION2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_ABSORPTION3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_SATURATION,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_SATURATION2,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_SATURATION3,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_FLIGHT,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_STRONGMOBS,mapping,master);
  initEffectItem(cfg,""String_Node_Str"",EffectType.EFFECT_BRUTALMOBS,mapping,master);
  addExtraInformation(new DimletKey(DimletType.DIMLET_EFFECT,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  initTimeItem(cfg,""String_Node_Str"",null,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",0.0f,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",0.5f,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",0.75f,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",0.2f,null,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",null,2.0f,mapping,master);
  initTimeItem(cfg,""String_Node_Str"",null,0.5f,mapping,master);
  DimletKey keyTimeNormal=new DimletKey(DimletType.DIMLET_TIME,""String_Node_Str"");
  addExtraInformation(keyTimeNormal,""String_Node_Str"",""String_Node_Str"");
  initBiomeItems(cfg,mapping,master);
  initLiquidItems(cfg,mapping,master);
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  initPatreonItem(cfg,""String_Node_Str"",mapping,master,""String_Node_Str"");
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_WEATHER,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_EFFECT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_FEATURE,""String_Node_Str""));
  craftableDimlets.add(keyStructureNone);
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_TERRAIN,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_TERRAIN,""String_Node_Str""));
  craftableDimlets.add(keyControllerDefault);
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_CONTROLLER,""String_Node_Str""));
  craftableDimlets.add(keyMaterialNone);
  craftableDimlets.add(keyLiquidNone);
  craftableDimlets.add(keySkyNormal);
  craftableDimlets.add(keySkyNormalDay);
  craftableDimlets.add(keySkyNormalNight);
  craftableDimlets.add(keyDefaultMobs);
  craftableDimlets.add(keyTimeNormal);
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  craftableDimlets.add(new DimletKey(DimletType.DIMLET_DIGIT,""String_Node_Str""));
  readUserDimlets(cfg,modConfigDir,mapping,master);
  DimletRandomizer.setupWeightedRandomList();
  mapping.save(world);
}",0.999591152540987
165906,"private static void setupChestLoot(String category){
  ChestGenHooks chest=ChestGenHooks.getInfo(category);
  chest.addItem(new WeightedRandomChestContent(DimletSetup.unknownDimlet,0,DimletConfiguration.unknownDimletChestLootMinimum,DimletConfiguration.unknownDimletChestLootMaximum,DimletConfiguration.unknownDimletChestLootRarity));
}","private static void setupChestLoot(String category){
  if (DimletConfiguration.unknownDimletChestLootRarity > 0) {
    ChestGenHooks chest=ChestGenHooks.getInfo(category);
    chest.addItem(new WeightedRandomChestContent(DimletSetup.unknownDimlet,0,DimletConfiguration.unknownDimletChestLootMinimum,DimletConfiguration.unknownDimletChestLootMaximum,DimletConfiguration.unknownDimletChestLootRarity));
  }
}",0.9056603773584906
165907,"@Override public void choiceChanged(Widget parent,String newChoice){
  updateShape();
}","@Override public void choiceChanged(Widget parent,String newChoice){
  updateSettings();
}",0.9491525423728814
165908,"@Override public void initGui(){
  super.initGui();
  int k=(this.width - this.xSize) / 2;
  int l=(this.height - this.ySize) / 2;
  shapeLabel=new ChoiceLabel(mc,this).setDesiredWidth(100).setDesiredHeight(16).addChoices(ShapeCardItem.Shape.SHAPE_BOX.getDescription(),ShapeCardItem.Shape.SHAPE_TOPDOME.getDescription(),ShapeCardItem.Shape.SHAPE_BOTTOMDOME.getDescription(),ShapeCardItem.Shape.SHAPE_SPHERE.getDescription(),ShapeCardItem.Shape.SHAPE_CYLINDER.getDescription(),ShapeCardItem.Shape.SHAPE_CAPPEDCYLINDER.getDescription(),ShapeCardItem.Shape.SHAPE_PRISM.getDescription(),ShapeCardItem.Shape.SHAPE_TORUS.getDescription(),ShapeCardItem.Shape.SHAPE_SOLIDBOX.getDescription(),ShapeCardItem.Shape.SHAPE_SOLIDSPHERE.getDescription(),ShapeCardItem.Shape.SHAPE_SOLIDCYLINDER.getDescription(),ShapeCardItem.Shape.SHAPE_SOLIDTORUS.getDescription()).addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateShape();
    }
  }
);
  ItemStack heldItem=mc.thePlayer.getHeldItem();
  if (heldItem == null) {
    return;
  }
  ShapeCardItem.Shape shape=ShapeCardItem.getShape(heldItem);
  shapeLabel.setChoice(shape.getDescription());
  blocksLabel=new Label(mc,this).setText(""String_Node_Str"").setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT);
  blocksLabel.setDesiredWidth(100).setDesiredHeight(16);
  Panel modePanel=new Panel(mc,this).setLayout(new VerticalLayout()).addChild(shapeLabel).addChild(blocksLabel);
  Coordinate dim=ShapeCardItem.getDimension(heldItem);
  Coordinate offset=ShapeCardItem.getOffset(heldItem);
  dimX=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      if (isTorus()) {
        dimZ.setText(newText);
      }
      updateSettings();
    }
  }
).setText(String.valueOf(dim.getX()));
  dimY=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(dim.getY()));
  dimZ=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(dim.getZ()));
  Panel dimPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(dimX).addChild(dimY).addChild(dimZ);
  offsetX=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(offset.getX()));
  offsetY=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(offset.getY()));
  offsetZ=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(offset.getZ()));
  Panel offsetPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(offsetX).addChild(offsetY).addChild(offsetZ);
  Panel settingsPanel=new Panel(mc,this).setLayout(new VerticalLayout()).addChild(dimPanel).addChild(offsetPanel);
  Widget toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new HorizontalLayout()).addChild(modePanel).addChild(settingsPanel);
  toplevel.setBounds(new Rectangle(k,l,xSize,ySize));
  window=new Window(this,toplevel);
}","@Override public void initGui(){
  super.initGui();
  int k=(this.width - this.xSize) / 2;
  int l=(this.height - this.ySize) / 2;
  shapeLabel=new ChoiceLabel(mc,this).setDesiredWidth(100).setDesiredHeight(16).addChoices(ShapeCardItem.Shape.SHAPE_BOX.getDescription(),ShapeCardItem.Shape.SHAPE_TOPDOME.getDescription(),ShapeCardItem.Shape.SHAPE_BOTTOMDOME.getDescription(),ShapeCardItem.Shape.SHAPE_SPHERE.getDescription(),ShapeCardItem.Shape.SHAPE_CYLINDER.getDescription(),ShapeCardItem.Shape.SHAPE_CAPPEDCYLINDER.getDescription(),ShapeCardItem.Shape.SHAPE_PRISM.getDescription(),ShapeCardItem.Shape.SHAPE_TORUS.getDescription(),ShapeCardItem.Shape.SHAPE_SOLIDBOX.getDescription(),ShapeCardItem.Shape.SHAPE_SOLIDSPHERE.getDescription(),ShapeCardItem.Shape.SHAPE_SOLIDCYLINDER.getDescription(),ShapeCardItem.Shape.SHAPE_SOLIDTORUS.getDescription()).addChoiceEvent(new ChoiceEvent(){
    @Override public void choiceChanged(    Widget parent,    String newChoice){
      updateSettings();
    }
  }
);
  ItemStack heldItem=mc.thePlayer.getHeldItem();
  if (heldItem == null) {
    return;
  }
  ShapeCardItem.Shape shape=ShapeCardItem.getShape(heldItem);
  shapeLabel.setChoice(shape.getDescription());
  blocksLabel=new Label(mc,this).setText(""String_Node_Str"").setHorizontalAlignment(HorizontalAlignment.ALIGH_LEFT);
  blocksLabel.setDesiredWidth(100).setDesiredHeight(16);
  Panel modePanel=new Panel(mc,this).setLayout(new VerticalLayout()).addChild(shapeLabel).addChild(blocksLabel);
  Coordinate dim=ShapeCardItem.getDimension(heldItem);
  Coordinate offset=ShapeCardItem.getOffset(heldItem);
  dimX=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      if (isTorus()) {
        dimZ.setText(newText);
      }
      updateSettings();
    }
  }
).setText(String.valueOf(dim.getX()));
  dimY=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(dim.getY()));
  dimZ=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(dim.getZ()));
  Panel dimPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new TextField(mc,this).setText(""String_Node_Str"")).addChild(dimX).addChild(dimY).addChild(dimZ);
  offsetX=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(offset.getX()));
  offsetY=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(offset.getY()));
  offsetZ=new TextField(mc,this).addTextEvent(new TextEvent(){
    @Override public void textChanged(    Widget parent,    String newText){
      updateSettings();
    }
  }
).setText(String.valueOf(offset.getZ()));
  Panel offsetPanel=new Panel(mc,this).setLayout(new HorizontalLayout()).addChild(new TextField(mc,this).setText(""String_Node_Str"")).addChild(offsetX).addChild(offsetY).addChild(offsetZ);
  Panel settingsPanel=new Panel(mc,this).setLayout(new VerticalLayout()).addChild(dimPanel).addChild(offsetPanel);
  Widget toplevel=new Panel(mc,this).setFilledRectThickness(2).setLayout(new HorizontalLayout()).addChild(modePanel).addChild(settingsPanel);
  toplevel.setBounds(new Rectangle(k,l,xSize,ySize));
  window=new Window(this,toplevel);
}",0.9817574154017548
165909,"private void updateSettings(){
  RFToolsMessages.INSTANCE.sendToServer(new PacketUpdateNBTItem(new Argument(""String_Node_Str"",parseInt(dimX.getText())),new Argument(""String_Node_Str"",parseInt(dimY.getText())),new Argument(""String_Node_Str"",parseInt(dimZ.getText())),new Argument(""String_Node_Str"",parseInt(offsetX.getText())),new Argument(""String_Node_Str"",parseInt(offsetY.getText())),new Argument(""String_Node_Str"",parseInt(offsetZ.getText()))));
}","private void updateSettings(){
  if (isTorus()) {
    dimZ.setText(dimX.getText());
  }
  RFToolsMessages.INSTANCE.sendToServer(new PacketUpdateNBTItem(new Argument(""String_Node_Str"",getCurrentShape().getIndex()),new Argument(""String_Node_Str"",parseInt(dimX.getText())),new Argument(""String_Node_Str"",parseInt(dimY.getText())),new Argument(""String_Node_Str"",parseInt(dimZ.getText())),new Argument(""String_Node_Str"",parseInt(offsetX.getText())),new Argument(""String_Node_Str"",parseInt(offsetY.getText())),new Argument(""String_Node_Str"",parseInt(offsetZ.getText()))));
}",0.8840864440078585
165910,"private int calculateRfPerTick(){
  if (!shieldActive) {
    return 0;
  }
  int rf=ShieldConfiguration.rfBase;
  if (ShieldRenderingMode.MODE_SHIELD.equals(shieldRenderingMode)) {
    rf+=ShieldConfiguration.rfShield;
  }
 else   if (ShieldRenderingMode.MODE_SOLID.equals(shieldRenderingMode)) {
    rf+=ShieldConfiguration.rfCamo;
  }
  return rf;
}","private int calculateRfPerTick(){
  if (!shieldActive) {
    return 0;
  }
  int s=shieldBlocks.size() - 50;
  if (s < 10) {
    s=10;
  }
  int rf=ShieldConfiguration.rfBase * s / 10;
  if (ShieldRenderingMode.MODE_SHIELD.equals(shieldRenderingMode)) {
    rf+=ShieldConfiguration.rfShield * s / 10;
  }
 else   if (ShieldRenderingMode.MODE_SOLID.equals(shieldRenderingMode)) {
    rf+=ShieldConfiguration.rfCamo * s / 10;
  }
  return rf;
}",0.880201765447667
165911,"public void clearSupportBlocks(){
  if (isShapeCard()) {
    clearSupportBlocksShaped();
    return;
  }
  SpaceChamberRepository.SpaceChamberChannel chamberChannel=calculateBox();
  if (chamberChannel != null) {
    int dimension=chamberChannel.getDimension();
    World world=DimensionManager.getWorld(dimension);
    for (int x=minBox.getX(); x <= maxBox.getX(); x++) {
      for (int y=minBox.getY(); y <= maxBox.getY(); y++) {
        for (int z=minBox.getZ(); z <= maxBox.getZ(); z++) {
          Coordinate src=new Coordinate(x,y,z);
          if (world != null) {
            Block srcBlock=world.getBlock(src.getX(),src.getY(),src.getZ());
            if (srcBlock == SpaceProjectorSetup.supportBlock) {
              world.setBlockToAir(src.getX(),src.getY(),src.getZ());
            }
          }
          Coordinate dest=sourceToDest(src);
          Block dstBlock=worldObj.getBlock(dest.getX(),dest.getY(),dest.getZ());
          if (dstBlock == SpaceProjectorSetup.supportBlock) {
            worldObj.setBlockToAir(dest.getX(),dest.getY(),dest.getZ());
          }
        }
      }
    }
  }
}","public void clearSupportBlocks(){
  if (worldObj.isRemote) {
    return;
  }
  if (isShapeCard()) {
    clearSupportBlocksShaped();
    return;
  }
  SpaceChamberRepository.SpaceChamberChannel chamberChannel=calculateBox();
  if (chamberChannel != null) {
    int dimension=chamberChannel.getDimension();
    World world=DimensionManager.getWorld(dimension);
    for (int x=minBox.getX(); x <= maxBox.getX(); x++) {
      for (int y=minBox.getY(); y <= maxBox.getY(); y++) {
        for (int z=minBox.getZ(); z <= maxBox.getZ(); z++) {
          Coordinate src=new Coordinate(x,y,z);
          if (world != null) {
            Block srcBlock=world.getBlock(src.getX(),src.getY(),src.getZ());
            if (srcBlock == SpaceProjectorSetup.supportBlock) {
              world.setBlockToAir(src.getX(),src.getY(),src.getZ());
            }
          }
          Coordinate dest=sourceToDest(src);
          Block dstBlock=worldObj.getBlock(dest.getX(),dest.getY(),dest.getZ());
          if (dstBlock == SpaceProjectorSetup.supportBlock) {
            worldObj.setBlockToAir(dest.getX(),dest.getY(),dest.getZ());
          }
        }
      }
    }
  }
}",0.9809986743261158
165912,"private void clearInvisibleBlocks(World world,int x,int y,int z,int meta,int size){
  if (meta == 2) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 && j != 0) {
          clearInvisibleBlockSafe(world,x - i,y - j,z);
        }
      }
    }
  }
  if (meta == 3) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 && j != 0) {
          clearInvisibleBlockSafe(world,x + i,y - j,z);
        }
      }
    }
  }
  if (meta == 4) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 && j != 0) {
          clearInvisibleBlockSafe(world,x,y - i,z + j);
        }
      }
    }
  }
  if (meta == 5) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 && j != 0) {
          clearInvisibleBlockSafe(world,x,y - i,z - j);
        }
      }
    }
  }
}","private void clearInvisibleBlocks(World world,int x,int y,int z,int meta,int size){
  if (meta == 2) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 || j != 0) {
          clearInvisibleBlockSafe(world,x - i,y - j,z);
        }
      }
    }
  }
  if (meta == 3) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 || j != 0) {
          clearInvisibleBlockSafe(world,x + i,y - j,z);
        }
      }
    }
  }
  if (meta == 4) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 || j != 0) {
          clearInvisibleBlockSafe(world,x,y - i,z + j);
        }
      }
    }
  }
  if (meta == 5) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 || j != 0) {
          clearInvisibleBlockSafe(world,x,y - i,z - j);
        }
      }
    }
  }
}",0.991313789359392
165913,"private void setInvisibleBlocks(World world,int x,int y,int z,int size){
  int meta=world.getBlockMetadata(x,y,z);
  if (meta == 2) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 && j != 0) {
          setInvisibleBlockSafe(world,x,y,z,-i,-j,0,meta);
        }
      }
    }
  }
  if (meta == 3) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 && j != 0) {
          setInvisibleBlockSafe(world,x,y,z,i,-j,0,meta);
        }
      }
    }
  }
  if (meta == 4) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 && j != 0) {
          setInvisibleBlockSafe(world,x,y,z,0,-i,j,meta);
        }
      }
    }
  }
  if (meta == 5) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 && j != 0) {
          setInvisibleBlockSafe(world,x,y,z,0,-i,-j,meta);
        }
      }
    }
  }
}","private void setInvisibleBlocks(World world,int x,int y,int z,int size){
  int meta=world.getBlockMetadata(x,y,z);
  if (meta == 2) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 || j != 0) {
          setInvisibleBlockSafe(world,x,y,z,-i,-j,0,meta);
        }
      }
    }
  }
  if (meta == 3) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 || j != 0) {
          setInvisibleBlockSafe(world,x,y,z,i,-j,0,meta);
        }
      }
    }
  }
  if (meta == 4) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 || j != 0) {
          setInvisibleBlockSafe(world,x,y,z,0,-i,j,meta);
        }
      }
    }
  }
  if (meta == 5) {
    for (int i=0; i <= size; i++) {
      for (int j=0; j <= size; j++) {
        if (i != 0 || j != 0) {
          setInvisibleBlockSafe(world,x,y,z,0,-i,-j,meta);
        }
      }
    }
  }
}",0.9916839916839916
165914,"@Override public void updateWeather(){
  super.updateWeather();
  if (!worldObj.isRemote) {
    getDimensionInformation();
    if (dimensionInformation != null) {
      WeatherDescriptor descriptor=dimensionInformation.getWeatherDescriptor();
      float rs=descriptor.getRainStrength();
      if (rs > -0.5f) {
        worldObj.rainingStrength=rs;
        if (Math.abs(worldObj.rainingStrength) < 0.001) {
          worldObj.setRainStrength(0);
          worldObj.getWorldInfo().setRaining(false);
        }
      }
      float ts=descriptor.getThunderStrength();
      if (ts > -0.5f) {
        worldObj.thunderingStrength=ts;
        if (Math.abs(worldObj.thunderingStrength) < 0.001) {
          worldObj.setThunderStrength(0);
          worldObj.getWorldInfo().setThundering(false);
        }
      }
    }
  }
}","@Override public void updateWeather(){
  super.updateWeather();
  if (!worldObj.isRemote) {
    getDimensionInformation();
    if (dimensionInformation != null) {
      WeatherDescriptor descriptor=dimensionInformation.getWeatherDescriptor();
      float rs=descriptor.getRainStrength();
      if (rs > -0.5f) {
        worldObj.rainingStrength=rs;
        if (Math.abs(worldObj.rainingStrength) < 0.001) {
          worldObj.prevRainingStrength=0;
          worldObj.rainingStrength=0;
          worldObj.getWorldInfo().setRaining(false);
        }
      }
      float ts=descriptor.getThunderStrength();
      if (ts > -0.5f) {
        worldObj.thunderingStrength=ts;
        if (Math.abs(worldObj.thunderingStrength) < 0.001) {
          worldObj.prevThunderingStrength=0;
          worldObj.thunderingStrength=0;
          worldObj.getWorldInfo().setThundering(false);
        }
      }
    }
  }
}",0.9365910413030832
165915,"public void copyFromModule(ItemStack stack){
  for (int i=ModularStorageContainer.SLOT_STORAGE; i < inventoryHelper.getCount(); i++) {
    inventoryHelper.setInventorySlotContents(0,i,null);
  }
  if (stack == null) {
    setMaxSize(0);
    numStacks=-1;
    return;
  }
  System.out.println(""String_Node_Str"" + stack);
  remoteId=0;
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound == null || !tagCompound.hasKey(""String_Node_Str"")) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    remoteId=tagCompound.getInteger(""String_Node_Str"");
    RemoteStorageTileEntity remoteStorageTileEntity=getRemoteStorage(remoteId);
    if (remoteStorageTileEntity == null) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    ItemStack storageStack=remoteStorageTileEntity.findStorageWithId(remoteId);
    if (storageStack == null) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    setMaxSize(StorageModuleItem.MAXSIZE[storageStack.getItemDamage()]);
  }
 else {
    setMaxSize(StorageModuleItem.MAXSIZE[stack.getItemDamage()]);
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound != null) {
      readBufferFromItemNBT(tagCompound);
    }
  }
  updateStackCount();
}","public void copyFromModule(ItemStack stack){
  for (int i=ModularStorageContainer.SLOT_STORAGE; i < inventoryHelper.getCount(); i++) {
    inventoryHelper.setInventorySlotContents(0,i,null);
  }
  if (stack == null) {
    setMaxSize(0);
    numStacks=-1;
    return;
  }
  remoteId=0;
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound == null || !tagCompound.hasKey(""String_Node_Str"")) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    remoteId=tagCompound.getInteger(""String_Node_Str"");
    RemoteStorageTileEntity remoteStorageTileEntity=getRemoteStorage(remoteId);
    if (remoteStorageTileEntity == null) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    ItemStack storageStack=remoteStorageTileEntity.findStorageWithId(remoteId);
    if (storageStack == null) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    setMaxSize(StorageModuleItem.MAXSIZE[storageStack.getItemDamage()]);
  }
 else {
    setMaxSize(StorageModuleItem.MAXSIZE[stack.getItemDamage()]);
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound != null) {
      readBufferFromItemNBT(tagCompound);
    }
  }
  updateStackCount();
}",0.9810151104223168
165916,"public void copyToModule(){
  ItemStack stack=inventoryHelper.getStackInSlot(ModularStorageContainer.SLOT_STORAGE_MODULE);
  if (stack == null) {
    return;
  }
  System.out.println(""String_Node_Str"" + stack);
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    return;
  }
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
    stack.setTagCompound(tagCompound);
  }
  int cnt=writeBufferToItemNBT(tagCompound);
  tagCompound.setInteger(""String_Node_Str"",cnt);
}","public void copyToModule(){
  ItemStack stack=inventoryHelper.getStackInSlot(ModularStorageContainer.SLOT_STORAGE_MODULE);
  if (stack == null) {
    return;
  }
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    remoteId=0;
    return;
  }
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
    stack.setTagCompound(tagCompound);
  }
  int cnt=writeBufferToItemNBT(tagCompound);
  tagCompound.setInteger(""String_Node_Str"",cnt);
}",0.9393090569561158
165917,"@Override protected Slot createSlot(SlotFactory slotFactory,IInventory inventory,int index,int x,int y,SlotType slotType){
  if (index >= SLOT_BUFFER && index < SLOT_BUFFEROUT && slotType == SlotType.SLOT_INPUT) {
    return new BaseSlot(inventory,index,x,y){
      @Override public boolean isItemValid(      ItemStack stack){
        if (!crafterBaseTE.isItemValidForSlot(getSlotIndex(),stack)) {
          return false;
        }
        return super.isItemValid(stack);
      }
    }
;
  }
  return super.createSlot(slotFactory,inventory,index,x,y,slotType);
}","@Override protected Slot createSlot(SlotFactory slotFactory,IInventory inventory,int index,int x,int y,SlotType slotType){
  if (index >= SLOT_BUFFER && index < SLOT_BUFFEROUT && slotType == SlotType.SLOT_INPUT) {
    return new BaseSlot(inventory,index,x,y){
      @Override public boolean isItemValid(      ItemStack stack){
        if (!crafterBaseTE.isItemValidForSlot(getSlotIndex(),stack)) {
          return false;
        }
        return super.isItemValid(stack);
      }
    }
;
  }
  if (index == SLOT_CRAFTOUTPUT) {
    return new GhostOutputSlot(inventory,index,x,y){
      @Override public boolean isItemValid(      ItemStack stack){
        return false;
      }
    }
;
  }
  return super.createSlot(slotFactory,inventory,index,x,y,slotType);
}",0.8510959939531368
165918,"@Override public boolean isItemValid(ItemStack stack){
  if (!crafterBaseTE.isItemValidForSlot(getSlotIndex(),stack)) {
    return false;
  }
  return super.isItemValid(stack);
}","@Override public boolean isItemValid(ItemStack stack){
  return false;
}",0.576
165919,"/** 
 * Consume energy on the receiving side and return a number indicating how good this went.
 * @param c
 * @param dimension
 * @return 0 in case of success. 10 in case of severe failure
 */
private static int consumeReceiverEnergy(EntityPlayer player,Coordinate c,int dimension){
  World world=DimensionManager.getWorld(dimension);
  TileEntity te=world.getTileEntity(c.getX(),c.getY(),c.getZ());
  if (!(te instanceof MatterReceiverTileEntity)) {
    Logging.warn(player,""String_Node_Str"");
    return 0;
  }
  MatterReceiverTileEntity matterReceiverTileEntity=(MatterReceiverTileEntity)te;
  int rf=TeleportConfiguration.rfPerTeleportReceiver;
  rf=(int)(rf * (2.0f - matterReceiverTileEntity.getInfusedFactor()) / 2.0f);
  int extracted=rf;
  if (rf > matterReceiverTileEntity.getEnergyStored(ForgeDirection.DOWN)) {
    extracted=matterReceiverTileEntity.getEnergyStored(ForgeDirection.DOWN);
  }
  matterReceiverTileEntity.consumeEnergy(rf);
  int remainingRf=matterReceiverTileEntity.getEnergyStored(ForgeDirection.DOWN);
  if (remainingRf <= 1) {
    Logging.warn(player,""String_Node_Str"");
  }
 else   if (remainingRf < (TeleportConfiguration.RECEIVER_MAXENERGY / 10)) {
    Logging.warn(player,""String_Node_Str"");
  }
 else   if (remainingRf < (TeleportConfiguration.RECEIVER_MAXENERGY / 5)) {
    Logging.warn(player,""String_Node_Str"");
  }
  return 10 - (extracted * 10 / rf);
}","/** 
 * Consume energy on the receiving side and return a number indicating how good this went.
 * @param c
 * @param dimension
 * @return 0 in case of success. 10 in case of severe failure
 */
private static int consumeReceiverEnergy(EntityPlayer player,Coordinate c,int dimension){
  World world=DimensionManager.getWorld(dimension);
  TileEntity te=world.getTileEntity(c.getX(),c.getY(),c.getZ());
  if (!(te instanceof MatterReceiverTileEntity)) {
    Logging.warn(player,""String_Node_Str"");
    return 0;
  }
  MatterReceiverTileEntity matterReceiverTileEntity=(MatterReceiverTileEntity)te;
  int rf=TeleportConfiguration.rfPerTeleportReceiver;
  rf=(int)(rf * (2.0f - matterReceiverTileEntity.getInfusedFactor()) / 2.0f);
  if (rf <= 0) {
    return 0;
  }
  int extracted=rf;
  if (rf > matterReceiverTileEntity.getEnergyStored(ForgeDirection.DOWN)) {
    extracted=matterReceiverTileEntity.getEnergyStored(ForgeDirection.DOWN);
  }
  matterReceiverTileEntity.consumeEnergy(rf);
  int remainingRf=matterReceiverTileEntity.getEnergyStored(ForgeDirection.DOWN);
  if (remainingRf <= 1) {
    Logging.warn(player,""String_Node_Str"");
  }
 else   if (remainingRf < (TeleportConfiguration.RECEIVER_MAXENERGY / 10)) {
    Logging.warn(player,""String_Node_Str"");
  }
 else   if (remainingRf < (TeleportConfiguration.RECEIVER_MAXENERGY / 5)) {
    Logging.warn(player,""String_Node_Str"");
  }
  return 10 - (extracted * 10 / rf);
}",0.9875930521091812
165920,"private boolean testAndConsumeCraftingItems(CraftingRecipe craftingRecipe,Map<Integer,ItemStack> undo){
  boolean internal=craftingRecipe.isCraftInternal();
  int keep=craftingRecipe.isKeepOne() ? 1 : 0;
  InventoryCrafting inventory=craftingRecipe.getInventory();
  for (int i=0; i < inventory.getSizeInventory(); i++) {
    ItemStack stack=inventory.getStackInSlot(i);
    if (stack != null) {
      int count=stack.stackSize;
      for (int j=0; j < CrafterContainer.BUFFER_SIZE; j++) {
        int slotIdx=CrafterContainer.SLOT_BUFFER + j;
        ItemStack input=inventoryHelper.getStackInSlot(slotIdx);
        if (input != null && input.stackSize > keep) {
          if (OreDictionary.itemMatches(stack,input,false)) {
            if (input.getItem().hasContainerItem(input)) {
              ItemStack containerItem=input.getItem().getContainerItem(input);
              if (containerItem != null) {
                if ((!containerItem.isItemStackDamageable()) || containerItem.getItemDamage() <= containerItem.getMaxDamage()) {
                  if (!placeResult(internal,containerItem,undo)) {
                    return false;
                  }
                }
              }
            }
            int ss=count;
            if (input.stackSize - ss < keep) {
              ss=input.stackSize - keep;
            }
            count-=ss;
            if (!undo.containsKey(slotIdx)) {
              undo.put(slotIdx,input.copy());
            }
            input.splitStack(ss);
            if (input.stackSize == 0) {
              inventoryHelper.setStackInSlot(slotIdx,null);
            }
          }
        }
        if (count == 0) {
          break;
        }
      }
      if (count > 0) {
        return false;
      }
    }
  }
  return true;
}","private boolean testAndConsumeCraftingItems(CraftingRecipe craftingRecipe,Map<Integer,ItemStack> undo){
  boolean internal=craftingRecipe.isCraftInternal();
  int keep=craftingRecipe.isKeepOne() ? 1 : 0;
  InventoryCrafting inventory=craftingRecipe.getInventory();
  for (int i=0; i < inventory.getSizeInventory(); i++) {
    ItemStack stack=inventory.getStackInSlot(i);
    if (stack != null) {
      int count=stack.stackSize;
      for (int j=0; j < CrafterContainer.BUFFER_SIZE; j++) {
        int slotIdx=CrafterContainer.SLOT_BUFFER + j;
        ItemStack input=inventoryHelper.getStackInSlot(slotIdx);
        if (input != null && input.stackSize > keep) {
          if (OreDictionary.itemMatches(stack,input,false)) {
            workInventory.setInventorySlotContents(i,input.copy());
            if (input.getItem().hasContainerItem(input)) {
              ItemStack containerItem=input.getItem().getContainerItem(input);
              if (containerItem != null) {
                if ((!containerItem.isItemStackDamageable()) || containerItem.getItemDamage() <= containerItem.getMaxDamage()) {
                  if (!placeResult(internal,containerItem,undo)) {
                    return false;
                  }
                }
              }
            }
            int ss=count;
            if (input.stackSize - ss < keep) {
              ss=input.stackSize - keep;
            }
            count-=ss;
            if (!undo.containsKey(slotIdx)) {
              undo.put(slotIdx,input.copy());
            }
            input.splitStack(ss);
            if (input.stackSize == 0) {
              inventoryHelper.setStackInSlot(slotIdx,null);
            }
          }
        }
        if (count == 0) {
          break;
        }
      }
      if (count > 0) {
        return false;
      }
    }
 else {
      workInventory.setInventorySlotContents(i,null);
    }
  }
  return true;
}",0.9559782608695652
165921,"private boolean craftOneItemNew(CraftingRecipe craftingRecipe){
  IRecipe recipe=craftingRecipe.getCachedRecipe(worldObj);
  if (recipe == null) {
    return false;
  }
  Map<Integer,ItemStack> undo=new HashMap<Integer,ItemStack>();
  if (!testAndConsumeCraftingItems(craftingRecipe,undo)) {
    undo(undo);
    return false;
  }
  ItemStack result=recipe.getCraftingResult(craftingRecipe.getInventory());
  if (result != null && placeResult(craftingRecipe.isCraftInternal(),result,undo)) {
    return true;
  }
 else {
    undo(undo);
    return false;
  }
}","private boolean craftOneItemNew(CraftingRecipe craftingRecipe){
  IRecipe recipe=craftingRecipe.getCachedRecipe(worldObj);
  if (recipe == null) {
    return false;
  }
  Map<Integer,ItemStack> undo=new HashMap<Integer,ItemStack>();
  if (!testAndConsumeCraftingItems(craftingRecipe,undo)) {
    undo(undo);
    return false;
  }
  ItemStack result=recipe.getCraftingResult(workInventory);
  if (result != null && placeResult(craftingRecipe.isCraftInternal(),result,undo)) {
    return true;
  }
 else {
    undo(undo);
    return false;
  }
}",0.9782214156079856
165922,"public static void logError(String msg){
  if (instance == null) {
    instance=new Logging();
  }
  instance.logger.log(Level.ERROR,msg);
}","public static void logError(String msg){
  getInstance().logger.log(Level.ERROR,msg);
}",0.7312775330396476
165923,"public static void log(String message){
  instance.logger.log(Level.INFO,message);
}","public static void log(String message){
  getInstance().logger.log(Level.INFO,message);
}",0.9595375722543352
165924,"public static void logDebug(String message){
  if (debugMode) {
    instance.logger.log(Level.INFO,message);
  }
}","public static void logDebug(String message){
  if (debugMode) {
    getInstance().logger.log(Level.INFO,message);
  }
}",0.9699570815450644
165925,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entityLivingBase,ItemStack itemStack){
  if (horizRotation) {
    ForgeDirection dir=BlockTools.determineOrientationHoriz(entityLivingBase);
    int meta=world.getBlockMetadata(x,y,z);
    int power=world.isBlockProvidingPowerTo(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ,dir.ordinal());
    meta=BlockTools.setRedstoneSignalIn(meta,power > 0);
    world.setBlockMetadataWithNotify(x,y,z,BlockTools.setOrientationHoriz(meta,dir),2);
  }
 else {
    ForgeDirection dir=BlockTools.determineOrientation(x,y,z,entityLivingBase);
    int meta=world.getBlockMetadata(x,y,z);
    world.setBlockMetadataWithNotify(x,y,z,BlockTools.setOrientation(meta,dir),2);
  }
  restoreBlockFromNBT(world,x,y,z,itemStack);
  if (!world.isRemote) {
    setOwner(world,x,y,z,entityLivingBase);
  }
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entityLivingBase,ItemStack itemStack){
  ForgeDirection dir=getOrientation(x,y,z,entityLivingBase);
  int meta=world.getBlockMetadata(x,y,z);
  if (horizRotation) {
    int power=world.isBlockProvidingPowerTo(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ,dir.ordinal());
    meta=BlockTools.setRedstoneSignalIn(meta,power > 0);
    world.setBlockMetadataWithNotify(x,y,z,BlockTools.setOrientationHoriz(meta,dir),2);
  }
 else {
    world.setBlockMetadataWithNotify(x,y,z,BlockTools.setOrientation(meta,dir),2);
  }
  restoreBlockFromNBT(world,x,y,z,itemStack);
  if (!world.isRemote) {
    setOwner(world,x,y,z,entityLivingBase);
  }
}",0.7795969773299748
165926,"/** 
 * Updates the blocks bounds based on its current state. Args: world, x, y, z
 */
@Override public void setBlockBoundsBasedOnState(IBlockAccess world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  this.setBlockBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
  if (meta == 2) {
    this.setBlockBounds(0.0F,0.0F,1.0F - 0.125F,1.0F,1.0F,1.0F);
  }
  if (meta == 3) {
    this.setBlockBounds(0.0F,0.0F,0.0F,1.0F,1.0F,0.125F);
  }
  if (meta == 4) {
    this.setBlockBounds(1.0F - 0.125F,0.0F,0.0F,1.0F,1.0F,1.0F);
  }
  if (meta == 5) {
    this.setBlockBounds(0.0F,0.0F,0.0F,0.125F,1.0F,1.0F);
  }
}","/** 
 * Updates the blocks bounds based on its current state. Args: world, x, y, z
 */
@Override public void setBlockBoundsBasedOnState(IBlockAccess world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  this.setBlockBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
  if (meta == ForgeDirection.NORTH.ordinal()) {
    this.setBlockBounds(0.0F,0.0F,1.0F - 0.125F,1.0F,1.0F,1.0F);
  }
  if (meta == ForgeDirection.SOUTH.ordinal()) {
    this.setBlockBounds(0.0F,0.0F,0.0F,1.0F,1.0F,0.125F);
  }
  if (meta == ForgeDirection.WEST.ordinal()) {
    this.setBlockBounds(1.0F - 0.125F,0.0F,0.0F,1.0F,1.0F,1.0F);
  }
  if (meta == ForgeDirection.EAST.ordinal()) {
    this.setBlockBounds(0.0F,0.0F,0.0F,0.125F,1.0F,1.0F);
  }
}",0.9085457271364318
165927,"@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  float f3;
  int meta=tileEntity.getBlockMetadata();
  f3=0.0F;
  if (meta == 2) {
    f3=180.0F;
  }
  if (meta == 4) {
    f3=90.0F;
  }
  if (meta == 5) {
    f3=-90.0F;
  }
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.75F,(float)z + 0.5F);
  GL11.glRotatef(-f3,0.0F,1.0F,0.0F);
  GL11.glTranslatef(0.0F,-0.2500F,-0.4375F);
  ScreenTileEntity screenTileEntity=(ScreenTileEntity)tileEntity;
  boolean lightingEnabled=GL11.glIsEnabled(GL11.GL_LIGHTING);
  if (!screenTileEntity.isTransparent()) {
    GL11.glDisable(GL11.GL_LIGHTING);
    renderScreenBoard(screenTileEntity.isLarge(),screenTileEntity.getColor());
  }
  if (screenTileEntity.isPowerOn()) {
    FontRenderer fontrenderer=this.func_147498_b();
    ClientScreenModule.TransformMode mode=ClientScreenModule.TransformMode.NONE;
    GL11.glDepthMask(false);
    GL11.glDisable(GL11.GL_LIGHTING);
    Map<Integer,Object[]> screenData=updateScreenData(screenTileEntity);
    List<ClientScreenModule> modules=screenTileEntity.getClientScreenModules();
    renderModules(fontrenderer,mode,modules,screenData,screenTileEntity.isLarge());
    GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    if (lightingEnabled) {
      GL11.glEnable(GL11.GL_LIGHTING);
    }
  }
  if (lightingEnabled) {
    GL11.glEnable(GL11.GL_LIGHTING);
  }
  GL11.glDepthMask(true);
  GL11.glPopMatrix();
}","@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float f){
  GL11.glPushMatrix();
  float f3;
  int meta=tileEntity.getBlockMetadata();
  f3=0.0F;
  if (meta == 2) {
    f3=180.0F;
  }
  if (meta == 4) {
    f3=90.0F;
  }
  if (meta == 5) {
    f3=-90.0F;
  }
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.75F,(float)z + 0.5F);
  GL11.glRotatef(-f3,0.0F,1.0F,0.0F);
  GL11.glTranslatef(0.0F,-0.2500F,-0.4375F);
  ScreenTileEntity screenTileEntity=(ScreenTileEntity)tileEntity;
  boolean lightingEnabled=GL11.glIsEnabled(GL11.GL_LIGHTING);
  if (!screenTileEntity.isTransparent()) {
    GL11.glDisable(GL11.GL_LIGHTING);
    renderScreenBoard(screenTileEntity.isLarge(),screenTileEntity.getColor());
  }
  if (screenTileEntity.isPowerOn()) {
    FontRenderer fontrenderer=this.func_147498_b();
    ClientScreenModule.TransformMode mode=ClientScreenModule.TransformMode.NONE;
    GL11.glDepthMask(false);
    GL11.glDisable(GL11.GL_LIGHTING);
    Map<Integer,Object[]> screenData=updateScreenData(screenTileEntity);
    List<ClientScreenModule> modules=screenTileEntity.getClientScreenModules();
    renderModules(fontrenderer,mode,modules,screenData,screenTileEntity.isLarge());
  }
  if (lightingEnabled) {
    GL11.glEnable(GL11.GL_LIGHTING);
  }
  GL11.glDepthMask(true);
  GL11.glPopMatrix();
}",0.958139534883721
165928,"@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  if (screenData == null) {
    return;
  }
  RenderHelper.enableGUIStandardItemLighting();
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glDepthMask(true);
  boolean lighting=GL11.glIsEnabled(GL11.GL_LIGHTING);
  if (!lighting) {
    GL11.glEnable(GL11.GL_LIGHTING);
  }
  boolean depthTest=GL11.glIsEnabled(GL11.GL_DEPTH_TEST);
  if (!depthTest) {
    GL11.glEnable(GL11.GL_DEPTH_TEST);
  }
  GL11.glPushMatrix();
  float f3=0.0075F;
  GL11.glTranslatef(-0.5F,0.5F,0.06F);
  GL11.glScalef(f3 * factor,-f3 * factor,0.0001f);
  int x=10;
  x=renderSlot(fontRenderer,currenty,screenData,slot1,0,x);
  x=renderSlot(fontRenderer,currenty,screenData,slot2,1,x);
  x=renderSlot(fontRenderer,currenty,screenData,slot3,2,x);
  renderSlot(fontRenderer,currenty,screenData,slot4,3,x);
  GL11.glPopMatrix();
  GL11.glPushMatrix();
  GL11.glTranslatef(-0.5F,0.5F,0.08F);
  GL11.glScalef(f3 * factor,-f3 * factor,0.0001f);
  x=10;
  x=renderSlotOverlay(fontRenderer,currenty,screenData,slot1,0,x);
  x=renderSlotOverlay(fontRenderer,currenty,screenData,slot2,1,x);
  x=renderSlotOverlay(fontRenderer,currenty,screenData,slot3,2,x);
  renderSlotOverlay(fontRenderer,currenty,screenData,slot4,3,x);
  GL11.glPopMatrix();
  if (!lighting) {
    GL11.glDisable(GL11.GL_LIGHTING);
  }
  if (!depthTest) {
    GL11.glDisable(GL11.GL_DEPTH_TEST);
  }
  GL11.glDepthMask(false);
}","@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  if (screenData == null) {
    return;
  }
  RenderHelper.enableGUIStandardItemLighting();
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glDepthMask(true);
  boolean lighting=GL11.glIsEnabled(GL11.GL_LIGHTING);
  if (!lighting) {
    GL11.glEnable(GL11.GL_LIGHTING);
  }
  boolean depthTest=GL11.glIsEnabled(GL11.GL_DEPTH_TEST);
  if (!depthTest) {
    GL11.glEnable(GL11.GL_DEPTH_TEST);
  }
  GL11.glPushMatrix();
  float f3=0.0075F;
  GL11.glTranslatef(-0.5F,0.5F,0.06F);
  GL11.glScalef(f3 * factor,-f3 * factor,0.0001f);
  int x=10;
  x=renderSlot(fontRenderer,currenty,screenData,slot1,0,x);
  x=renderSlot(fontRenderer,currenty,screenData,slot2,1,x);
  x=renderSlot(fontRenderer,currenty,screenData,slot3,2,x);
  renderSlot(fontRenderer,currenty,screenData,slot4,3,x);
  GL11.glPopMatrix();
  GL11.glPushMatrix();
  GL11.glTranslatef(-0.5F,0.5F,0.08F);
  GL11.glScalef(f3 * factor,-f3 * factor,0.0001f);
  x=10;
  x=renderSlotOverlay(fontRenderer,currenty,screenData,slot1,0,x);
  x=renderSlotOverlay(fontRenderer,currenty,screenData,slot2,1,x);
  x=renderSlotOverlay(fontRenderer,currenty,screenData,slot3,2,x);
  renderSlotOverlay(fontRenderer,currenty,screenData,slot4,3,x);
  GL11.glPopMatrix();
  if (!lighting) {
    GL11.glDisable(GL11.GL_LIGHTING);
  }
  if (!depthTest) {
    GL11.glDisable(GL11.GL_DEPTH_TEST);
  }
  GL11.glDepthMask(false);
  RenderHelper.enableStandardItemLighting();
}",0.9848535846516324
165929,"@Override protected void drawGuiContainerForegroundLayer(int i,int i2){
  List<String> tooltips=window.getTooltips();
  if (tooltips != null) {
    int x=Mouse.getEventX() * width / mc.displayWidth;
    int y=height - Mouse.getEventY() * height / mc.displayHeight - 1;
    drawHoveringText(tooltips,x - guiLeft,y - guiTop,mc.fontRenderer);
  }
  tooltips=sideWindow.getWindow().getTooltips();
  if (tooltips != null) {
    int x=Mouse.getEventX() * width / mc.displayWidth;
    int y=height - Mouse.getEventY() * height / mc.displayHeight - 1;
    drawHoveringText(tooltips,x - guiLeft,y - guiTop,mc.fontRenderer);
  }
}","@Override protected void drawGuiContainerForegroundLayer(int i,int i2){
  List<String> tooltips=window.getTooltips();
  if (tooltips != null) {
    int x=Mouse.getEventX() * width / mc.displayWidth;
    int y=height - Mouse.getEventY() * height / mc.displayHeight - 1;
    drawHoveringText(tooltips,x - guiLeft,y - guiTop,mc.fontRenderer);
  }
  tooltips=sideWindow.getWindow().getTooltips();
  if (tooltips != null) {
    int x=Mouse.getEventX() * width / mc.displayWidth;
    int y=height - Mouse.getEventY() * height / mc.displayHeight - 1;
    drawHoveringText(tooltips,x - guiLeft,y - guiTop,mc.fontRenderer);
  }
  RenderHelper.enableGUIStandardItemLighting();
}",0.9627329192546584
165930,"@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  RfToolsDimensionManager manager=RfToolsDimensionManager.getDimensionManager(world);
  if (manager.getDimensionDescriptor(world.provider.dimensionId) == null) {
    return;
  }
  DimensionInformation information=manager.getDimensionInformation(world.provider.dimensionId);
  BlockMeta baseBlock=information.getBaseBlockForTerrain();
  if (information.hasFeatureType(FeatureType.FEATURE_OREGEN)) {
    for (    BlockMeta block : information.getExtraOregen()) {
      addOreSpawn(block.getBlock(),block.getMeta(),baseBlock.getBlock(),world,random,chunkX * 16,chunkZ * 16,7,10,12,2,60);
    }
  }
  addOreSpawn(DimletSetup.dimensionalShardBlock,(byte)0,Blocks.stone,world,random,chunkX * 16,chunkZ * 16,5,8,3,2,40);
  if (chunkX == 0 && chunkZ == 0) {
    generateSpawnPlatform(world);
  }
 else   if (Math.abs(chunkX) > 6 && Math.abs(chunkZ) > 6 && !information.hasFeatureType(FeatureType.FEATURE_NODIMLETBUILDINGS)) {
    if (random.nextInt(DimletConfiguration.dungeonChance) == 1) {
      int midx=chunkX * 16 + 8;
      int midz=chunkZ * 16 + 8;
      int starty1=WorldGenerationTools.findSuitableEmptySpot(world,midx - 3,midz - 3);
      int starty2=WorldGenerationTools.findSuitableEmptySpot(world,midx + 3,midz - 3);
      int starty3=WorldGenerationTools.findSuitableEmptySpot(world,midx - 3,midz + 3);
      int starty4=WorldGenerationTools.findSuitableEmptySpot(world,midx + 3,midz + 3);
      int starty=(starty1 + starty2 + starty3+ starty4) / 4;
      if (starty > 1 && starty < world.getHeight() - 20) {
        generateDungeon(world,random,midx,starty,midz);
      }
    }
  }
  if (Math.abs(chunkX) >= 3 && Math.abs(chunkZ) >= 3 && information.hasFeatureType(FeatureType.FEATURE_VOLCANOES)) {
    if (random.nextInt(DimletConfiguration.volcanoChance) == 1) {
      int x=chunkX * 16 + random.nextInt(16);
      int z=chunkZ * 16 + random.nextInt(16);
      int y=world.getTopSolidOrLiquidBlock(x,z);
      int cntsolid=0;
      while (y > 3) {
        if (WorldGenerationTools.isSolid(world,x,y,z)) {
          cntsolid++;
          if (cntsolid > 5) {
            world.setBlock(x,y,z,SpecialSetup.volcanicCoreBlock,0,3);
            RFTools.log(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z);
            break;
          }
        }
 else {
          cntsolid=0;
        }
        y--;
      }
    }
  }
}","@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  RfToolsDimensionManager manager=RfToolsDimensionManager.getDimensionManager(world);
  if (manager.getDimensionDescriptor(world.provider.dimensionId) == null) {
    return;
  }
  DimensionInformation information=manager.getDimensionInformation(world.provider.dimensionId);
  BlockMeta baseBlock=information.getBaseBlockForTerrain();
  if (information.hasFeatureType(FeatureType.FEATURE_OREGEN)) {
    for (    BlockMeta block : information.getExtraOregen()) {
      addOreSpawn(block.getBlock(),block.getMeta(),baseBlock.getBlock(),world,random,chunkX * 16,chunkZ * 16,7,10,12,2,60);
    }
  }
  addOreSpawn(DimletSetup.dimensionalShardBlock,(byte)0,Blocks.stone,world,random,chunkX * 16,chunkZ * 16,5,8,3,2,40);
  if (chunkX == 0 && chunkZ == 0) {
    generateSpawnPlatform(world);
  }
 else   if ((Math.abs(chunkX) > 6 || Math.abs(chunkZ) > 6) && !information.hasFeatureType(FeatureType.FEATURE_NODIMLETBUILDINGS)) {
    if (random.nextInt(DimletConfiguration.dungeonChance) == 1) {
      int midx=chunkX * 16 + 8;
      int midz=chunkZ * 16 + 8;
      int starty1=WorldGenerationTools.findSuitableEmptySpot(world,midx - 3,midz - 3);
      int starty2=WorldGenerationTools.findSuitableEmptySpot(world,midx + 3,midz - 3);
      int starty3=WorldGenerationTools.findSuitableEmptySpot(world,midx - 3,midz + 3);
      int starty4=WorldGenerationTools.findSuitableEmptySpot(world,midx + 3,midz + 3);
      int starty=(starty1 + starty2 + starty3+ starty4) / 4;
      if (starty > 1 && starty < world.getHeight() - 20) {
        generateDungeon(world,random,midx,starty,midz);
      }
    }
  }
  if ((Math.abs(chunkX) >= 3 || Math.abs(chunkZ) >= 3) && information.hasFeatureType(FeatureType.FEATURE_VOLCANOES)) {
    if (random.nextInt(DimletConfiguration.volcanoChance) == 1) {
      int x=chunkX * 16 + random.nextInt(16);
      int z=chunkZ * 16 + random.nextInt(16);
      int y=world.getTopSolidOrLiquidBlock(x,z);
      int cntsolid=0;
      while (y > 3) {
        if (WorldGenerationTools.isSolid(world,x,y,z)) {
          cntsolid++;
          if (cntsolid > 5) {
            world.setBlock(x,y,z,SpecialSetup.volcanicCoreBlock,0,3);
            RFTools.log(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z);
            break;
          }
        }
 else {
          cntsolid=0;
        }
        y--;
      }
    }
  }
}",0.9975855130784708
165931,"@Override public void inject(DimletKey key,DimensionInformation dimensionInformation){
  if (""String_Node_Str"".equals(key.getName())) {
    dimensionInformation.setPatreonBit(Patreons.PATREON_FIREWORKS);
  }
 else   if (""String_Node_Str"".equals(key.getName())) {
    dimensionInformation.setPatreonBit(Patreons.PATREON_SICKMOON);
    dimensionInformation.setPatreonBit(Patreons.PATREON_SICKSUN);
  }
 else   if (""String_Node_Str"".equals(key.getName())) {
    dimensionInformation.setPatreonBit(Patreons.PATREON_PINKGRASS);
  }
}","@Override public void inject(DimletKey key,DimensionInformation dimensionInformation){
  if (""String_Node_Str"".equals(key.getName())) {
    dimensionInformation.setPatreonBit(Patreons.PATREON_FIREWORKS);
  }
 else   if (""String_Node_Str"".equals(key.getName())) {
    dimensionInformation.setPatreonBit(Patreons.PATREON_SICKMOON);
    dimensionInformation.setPatreonBit(Patreons.PATREON_SICKSUN);
  }
 else   if (""String_Node_Str"".equals(key.getName())) {
    dimensionInformation.setPatreonBit(Patreons.PATREON_PINKPILLARS);
  }
}",0.9924385633270322
165932,"@Override public void generateSlots(){
  for (  SlotFactory slotFactory : factory.getSlots()) {
    Slot slot;
    if (slotFactory.getSlotType() == SlotType.SLOT_PLAYERINV || slotFactory.getSlotType() == SlotType.SLOT_PLAYERHOTBAR) {
      slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
    }
 else {
      slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY()){
        @Override public boolean isItemValid(        ItemStack stack){
          return getSlotIndex() < getMaxSize();
        }
      }
;
    }
    addSlotToContainer(slot);
  }
}","@Override public void generateSlots(){
  for (  SlotFactory slotFactory : factory.getSlots()) {
    Slot slot;
    if (slotFactory.getSlotType() == SlotType.SLOT_PLAYERHOTBAR) {
      if (slotFactory.getIndex() == tabletIndex) {
        slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY()){
          @Override public boolean canTakeStack(          EntityPlayer player){
            return false;
          }
        }
;
      }
 else {
        slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
      }
    }
 else     if (slotFactory.getSlotType() == SlotType.SLOT_PLAYERINV) {
      slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY());
    }
 else {
      slot=new BaseSlot(inventories.get(slotFactory.getInventoryName()),slotFactory.getIndex(),slotFactory.getX(),slotFactory.getY()){
        @Override public boolean isItemValid(        ItemStack stack){
          return getSlotIndex() < getMaxSize();
        }
      }
;
    }
    addSlotToContainer(slot);
  }
}",0.5182058047493404
165933,"public ModularStorageItemContainer(EntityPlayer player){
  super(factory);
  this.entityPlayer=player;
  addInventory(CONTAINER_INVENTORY,new ModularStorageItemInventory(player));
  addInventory(ContainerFactory.CONTAINER_PLAYER,player.inventory);
  generateSlots();
}","public ModularStorageItemContainer(EntityPlayer player){
  super(factory);
  this.entityPlayer=player;
  addInventory(CONTAINER_INVENTORY,new ModularStorageItemInventory(player));
  addInventory(ContainerFactory.CONTAINER_PLAYER,player.inventory);
  tabletIndex=player.inventory.currentItem;
  generateSlots();
}",0.9241379310344828
165934,"@Override protected void setup(){
  addSlotBox(new SlotDefinition(SlotType.SLOT_SPECIFICITEM,new ItemStack(DimletSetup.knownDimlet)),CONTAINER_INVENTORY,SLOT_DIMLETS,13,6,13,18,7,18);
  addSlotBox(new SlotDefinition(SlotType.SLOT_OUTPUT),CONTAINER_INVENTORY,SLOT_TAB,13,142,1,18,1,18);
  layoutPlayerInventorySlots(85,142);
}","@Override protected void setup(){
  addSlotBox(new SlotDefinition(SlotType.SLOT_SPECIFICITEM,new ItemStack(DimletSetup.knownDimlet)),CONTAINER_INVENTORY,SLOT_DIMLETS,13,7,13,18,7,18);
  addSlotBox(new SlotDefinition(SlotType.SLOT_OUTPUT),CONTAINER_INVENTORY,SLOT_TAB,13,142,1,18,1,18);
  layoutPlayerInventorySlots(85,142);
}",0.9969230769230768
165935,"private void restartScan(){
  if (loopMode || (powered > 0 && scan == null)) {
    scan=minBox;
  }
 else {
    scan=null;
  }
}","private void restartScan(){
  if (loopMode || (powered > 0 && scan == null)) {
    calculateBox();
    scan=minBox;
  }
 else {
    scan=null;
  }
}",0.927536231884058
165936,"@Override public ItemStack getCraftingResult(InventoryCrafting inventoryCrafting){
  ItemStack stack=super.getCraftingResult(inventoryCrafting);
  if (stack != null) {
    NBTTagCompound tagCompound=getNBTFromObject(inventoryCrafting);
    if (tagCompound != null) {
      int damage=tagCompound.getInteger(""String_Node_Str"");
      tagCompound.removeTag(""String_Node_Str"");
      stack.setTagCompound(tagCompound);
      stack.setItemDamage(damage);
    }
  }
  return stack;
}","@Override public ItemStack getCraftingResult(InventoryCrafting inventoryCrafting){
  ItemStack stack=super.getCraftingResult(inventoryCrafting);
  if (stack != null) {
    NBTTagCompound tagCompound=getNBTFromObject(inventoryCrafting);
    if (tagCompound != null) {
      int damage=tagCompound.getInteger(""String_Node_Str"");
      NBTTagCompound newtag=new NBTTagCompound();
      for (      Object o : tagCompound.func_150296_c()) {
        String tag=(String)o;
        if (!""String_Node_Str"".equals(tag)) {
          newtag.setTag(tag,tagCompound.getTag(tag));
        }
      }
      stack.setTagCompound(newtag);
      stack.setItemDamage(damage);
    }
  }
  return stack;
}",0.7637931034482759
165937,"public void createChamber(EntityPlayer player){
  int x1=xCoord;
  int y1=yCoord;
  int z1=zCoord;
  int x2=x1;
  int y2=y1;
  int z2=z1;
  for (int i=1; i < SpaceProjectorConfiguration.maxSpaceChamberDimension; i++) {
    if (x2 == x1) {
      if (worldObj.getBlock(x1 - i,y1,z1) == SpaceProjectorSetup.spaceChamberBlock) {
        x2=x1 - i;
      }
 else       if (worldObj.getBlock(x1 + i,y1,z1) == SpaceProjectorSetup.spaceChamberBlock) {
        x2=x1 + i;
      }
    }
    if (z2 == z1) {
      if (worldObj.getBlock(x1,y1,z1 - i) == SpaceProjectorSetup.spaceChamberBlock) {
        z2=z1 - i;
      }
 else       if (worldObj.getBlock(x1,y1,z1 + i) == SpaceProjectorSetup.spaceChamberBlock) {
        z2=z1 + i;
      }
    }
  }
  if (x1 == x2 || z2 == z1) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  if (worldObj.getBlock(x2,y1,z2) != SpaceProjectorSetup.spaceChamberBlock) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  for (int i=1; i < SpaceProjectorConfiguration.maxSpaceChamberDimension; i++) {
    if (worldObj.getBlock(x1,y1 - i,z1) == SpaceProjectorSetup.spaceChamberBlock) {
      y2=y1 - i;
      break;
    }
    if (worldObj.getBlock(x1,y1 + i,z1) == SpaceProjectorSetup.spaceChamberBlock) {
      y2=y1 + i;
      break;
    }
  }
  if (y1 == y2) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  if (worldObj.getBlock(x2,y2,z2) != SpaceProjectorSetup.spaceChamberBlock) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  if (worldObj.getBlock(x1,y2,z2) != SpaceProjectorSetup.spaceChamberBlock) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  if (worldObj.getBlock(x2,y2,z1) != SpaceProjectorSetup.spaceChamberBlock) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  minCorner=new Coordinate(Math.min(x1,x2) + 1,Math.min(y1,y2) + 1,Math.min(z1,z2) + 1);
  maxCorner=new Coordinate(Math.max(x1,x2) - 1,Math.max(y1,y2) - 1,Math.max(z1,z2) - 1);
  if (minCorner.getX() > maxCorner.getX() || minCorner.getY() > maxCorner.getY() || minCorner.getZ() > maxCorner.getZ()) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    minCorner=null;
    maxCorner=null;
    return;
  }
  RFTools.message(player,EnumChatFormatting.WHITE + ""String_Node_Str"");
  SpaceChamberRepository chamberRepository=SpaceChamberRepository.getChannels(worldObj);
  SpaceChamberRepository.SpaceChamberChannel chamberChannel=chamberRepository.getOrCreateChannel(channel);
  chamberChannel.setDimension(worldObj.provider.dimensionId);
  chamberChannel.setMinCorner(minCorner);
  chamberChannel.setMaxCorner(maxCorner);
  chamberRepository.save(worldObj);
  markDirty();
}","public void createChamber(EntityPlayer player){
  int x1=xCoord;
  int y1=yCoord;
  int z1=zCoord;
  int x2=x1;
  int y2=y1;
  int z2=z1;
  for (int i=1; i < SpaceProjectorConfiguration.maxSpaceChamberDimension; i++) {
    if (x2 == x1) {
      if (worldObj.getBlock(x1 - i,y1,z1) == SpaceProjectorSetup.spaceChamberBlock) {
        x2=x1 - i;
      }
 else       if (worldObj.getBlock(x1 + i,y1,z1) == SpaceProjectorSetup.spaceChamberBlock) {
        x2=x1 + i;
      }
    }
    if (z2 == z1) {
      if (worldObj.getBlock(x1,y1,z1 - i) == SpaceProjectorSetup.spaceChamberBlock) {
        z2=z1 - i;
      }
 else       if (worldObj.getBlock(x1,y1,z1 + i) == SpaceProjectorSetup.spaceChamberBlock) {
        z2=z1 + i;
      }
    }
  }
  if (x1 == x2 || z2 == z1) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  if (worldObj.getBlock(x2,y1,z2) != SpaceProjectorSetup.spaceChamberBlock) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  for (int i=1; i < SpaceProjectorConfiguration.maxSpaceChamberDimension; i++) {
    if (worldObj.getBlock(x1,y1 - i,z1) == SpaceProjectorSetup.spaceChamberBlock) {
      y2=y1 - i;
      break;
    }
    if (worldObj.getBlock(x1,y1 + i,z1) == SpaceProjectorSetup.spaceChamberBlock) {
      y2=y1 + i;
      break;
    }
  }
  if (y1 == y2) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  if (worldObj.getBlock(x2,y2,z2) != SpaceProjectorSetup.spaceChamberBlock) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  if (worldObj.getBlock(x1,y2,z2) != SpaceProjectorSetup.spaceChamberBlock) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  if (worldObj.getBlock(x2,y2,z1) != SpaceProjectorSetup.spaceChamberBlock) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    return;
  }
  minCorner=new Coordinate(Math.min(x1,x2) + 1,Math.min(y1,y2) + 1,Math.min(z1,z2) + 1);
  maxCorner=new Coordinate(Math.max(x1,x2) - 1,Math.max(y1,y2) - 1,Math.max(z1,z2) - 1);
  if (minCorner.getX() > maxCorner.getX() || minCorner.getY() > maxCorner.getY() || minCorner.getZ() > maxCorner.getZ()) {
    RFTools.message(player,EnumChatFormatting.RED + ""String_Node_Str"");
    minCorner=null;
    maxCorner=null;
    return;
  }
  RFTools.message(player,EnumChatFormatting.WHITE + ""String_Node_Str"");
  SpaceChamberRepository chamberRepository=SpaceChamberRepository.getChannels(worldObj);
  SpaceChamberRepository.SpaceChamberChannel chamberChannel=chamberRepository.getOrCreateChannel(channel);
  chamberChannel.setDimension(worldObj.provider.dimensionId);
  chamberChannel.setMinCorner(minCorner);
  chamberChannel.setMaxCorner(maxCorner);
  chamberRepository.save(worldObj);
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}",0.9907777971115364
165938,"private void dumpInfo(World world,int x,int y,int z){
  Block block=world.getBlock(x,y,z);
  if (block == null || block.getMaterial() == Material.air) {
    return;
  }
  int meta=world.getBlockMetadata(x,y,z);
  String modid=RFToolsTools.getModidForBlock(block);
  RFTools.log(""String_Node_Str"" + block.getUnlocalizedName() + ""String_Node_Str""+ meta+ ""String_Node_Str""+ modid);
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity != null) {
    NBTTagCompound tag=new NBTTagCompound();
    tileEntity.writeToNBT(tag);
    StringBuffer buffer=new StringBuffer();
    RFToolsTools.convertNBTtoJson(buffer,tag,0);
    RFTools.log(buffer.toString());
  }
}","private void dumpInfo(World world,int x,int y,int z){
  Block block=world.getBlock(x,y,z);
  if (block == null || block.getMaterial() == Material.air) {
    return;
  }
  int meta=world.getBlockMetadata(x,y,z);
  String modid=RFToolsTools.getModidForBlock(block);
  RFTools.log(""String_Node_Str"" + block.getUnlocalizedName() + ""String_Node_Str""+ meta+ ""String_Node_Str""+ modid);
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity != null) {
    NBTTagCompound tag=new NBTTagCompound();
    try {
      tileEntity.writeToNBT(tag);
      StringBuffer buffer=new StringBuffer();
      RFToolsTools.convertNBTtoJson(buffer,tag,0);
      RFTools.log(buffer.toString());
    }
 catch (    Exception e) {
      RFTools.log(""String_Node_Str"");
    }
  }
}",0.9337979094076656
165939,"StorageFilterCache(ItemStack stack){
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound != null) {
    matchDamage=tagCompound.getBoolean(""String_Node_Str"");
    oredictMode=tagCompound.getBoolean(""String_Node_Str"");
    nbtMode=tagCompound.getBoolean(""String_Node_Str"");
    modMode=tagCompound.getBoolean(""String_Node_Str"");
    blacklistMode=""String_Node_Str"".equals(tagCompound.getString(""String_Node_Str""));
    NBTTagList bufferTagList=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    int cnt=0;
    for (int i=0; i < bufferTagList.tagCount(); i++) {
      NBTTagCompound nbtTagCompound=bufferTagList.getCompoundTagAt(i);
      ItemStack s=ItemStack.loadItemStackFromNBT(nbtTagCompound);
      if (s != null && s.stackSize > 0) {
        cnt++;
      }
    }
    stacks=new ItemStack[cnt];
    cnt=0;
    for (int i=0; i < bufferTagList.tagCount(); i++) {
      NBTTagCompound nbtTagCompound=bufferTagList.getCompoundTagAt(i);
      ItemStack s=ItemStack.loadItemStackFromNBT(nbtTagCompound);
      if (s != null && s.stackSize > 0) {
        stacks[cnt++]=s;
        if (oredictMode) {
          for (          int id : OreDictionary.getOreIDs(s)) {
            oredictMatches.add(id);
          }
        }
      }
    }
  }
}","StorageFilterCache(ItemStack stack){
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound != null) {
    matchDamage=tagCompound.getBoolean(""String_Node_Str"");
    oredictMode=tagCompound.getBoolean(""String_Node_Str"");
    nbtMode=tagCompound.getBoolean(""String_Node_Str"");
    modMode=tagCompound.getBoolean(""String_Node_Str"");
    blacklistMode=""String_Node_Str"".equals(tagCompound.getString(""String_Node_Str""));
    NBTTagList bufferTagList=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    int cnt=0;
    for (int i=0; i < bufferTagList.tagCount(); i++) {
      NBTTagCompound nbtTagCompound=bufferTagList.getCompoundTagAt(i);
      ItemStack s=ItemStack.loadItemStackFromNBT(nbtTagCompound);
      if (s != null && s.stackSize > 0) {
        cnt++;
      }
    }
    stacks=new ItemStack[cnt];
    cnt=0;
    for (int i=0; i < bufferTagList.tagCount(); i++) {
      NBTTagCompound nbtTagCompound=bufferTagList.getCompoundTagAt(i);
      ItemStack s=ItemStack.loadItemStackFromNBT(nbtTagCompound);
      if (s != null && s.stackSize > 0) {
        stacks[cnt++]=s;
        if (oredictMode) {
          for (          int id : OreDictionary.getOreIDs(s)) {
            oredictMatches.add(id);
          }
        }
      }
    }
  }
 else {
    stacks=new ItemStack[0];
  }
}",0.9842247018083878
165940,"public boolean match(ItemStack stack){
  if (stack != null) {
    boolean match=false;
    String modName=""String_Node_Str"";
    if (modMode) {
      modName=ModItemSorter.getMod(stack);
    }
    if (oredictMode) {
      for (      int id : OreDictionary.getOreIDs(stack)) {
        if (oredictMatches.contains(id)) {
          match=true;
          break;
        }
      }
    }
 else {
      for (      ItemStack itemStack : stacks) {
        if (matchDamage && itemStack.getItemDamage() != stack.getItemDamage()) {
          continue;
        }
        if (nbtMode && !ItemStack.areItemStackTagsEqual(itemStack,stack)) {
          continue;
        }
        if (modMode) {
          if (modName.equals(ModItemSorter.getMod(itemStack))) {
            match=true;
            break;
          }
        }
 else         if (itemStack.getItem().equals(stack.getItem())) {
          match=true;
          break;
        }
      }
    }
    return match != blacklistMode;
  }
  return true;
}","public boolean match(ItemStack stack){
  if (stack != null) {
    boolean match=false;
    String modName=""String_Node_Str"";
    if (modMode) {
      modName=ModItemSorter.getMod(stack);
    }
    if (oredictMode) {
      for (      int id : OreDictionary.getOreIDs(stack)) {
        if (oredictMatches.contains(id)) {
          match=true;
          break;
        }
      }
    }
 else     if (stacks != null) {
      for (      ItemStack itemStack : stacks) {
        if (matchDamage && itemStack.getItemDamage() != stack.getItemDamage()) {
          continue;
        }
        if (nbtMode && !ItemStack.areItemStackTagsEqual(itemStack,stack)) {
          continue;
        }
        if (modMode) {
          if (modName.equals(ModItemSorter.getMod(itemStack))) {
            match=true;
            break;
          }
        }
 else         if (itemStack.getItem().equals(stack.getItem())) {
          match=true;
          break;
        }
      }
    }
    return match != blacklistMode;
  }
  return true;
}",0.9880478087649402
165941,"@Override public void setInventorySlotContents(int index,ItemStack stack){
  if (index == ModularStorageContainer.SLOT_STORAGE_MODULE) {
    if (isServer()) {
      copyFromModule(stack);
    }
  }
 else   if (index == ModularStorageContainer.SLOT_TYPE_MODULE) {
    worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  }
 else   if (index == ModularStorageContainer.SLOT_FILTER_MODULE) {
    filterCache=null;
  }
  boolean s1=containsItem(index);
  setInventorySlotContentsHelper(getInventoryStackLimit(),index,stack);
  handleNewAmount(s1,index);
}","@Override public void setInventorySlotContents(int index,ItemStack stack){
  if (index == ModularStorageContainer.SLOT_STORAGE_MODULE) {
  }
 else   if (index == ModularStorageContainer.SLOT_TYPE_MODULE) {
    worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  }
 else   if (index == ModularStorageContainer.SLOT_FILTER_MODULE) {
    filterCache=null;
  }
  boolean s1=containsItem(index);
  setInventorySlotContentsHelper(getInventoryStackLimit(),index,stack);
  if (index == ModularStorageContainer.SLOT_STORAGE_MODULE) {
    if (isServer()) {
      copyFromModule(stack);
    }
  }
  handleNewAmount(s1,index);
}",0.8458904109589042
165942,"public void copyFromModule(ItemStack stack){
  for (int i=ModularStorageContainer.SLOT_STORAGE; i < inventoryHelper.getCount(); i++) {
    inventoryHelper.setInventorySlotContents(0,i,null);
  }
  if (stack == null) {
    setMaxSize(0);
    numStacks=-1;
    return;
  }
  remoteId=0;
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound == null || !tagCompound.hasKey(""String_Node_Str"")) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    remoteId=tagCompound.getInteger(""String_Node_Str"");
    RemoteStorageTileEntity remoteStorageTileEntity=getRemoteStorage(remoteId);
    if (remoteStorageTileEntity == null) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    ItemStack storageStack=remoteStorageTileEntity.findStorageWithId(remoteId);
    if (storageStack == null) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    setMaxSize(StorageModuleItem.MAXSIZE[storageStack.getItemDamage()]);
  }
 else {
    setMaxSize(StorageModuleItem.MAXSIZE[stack.getItemDamage()]);
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound != null) {
      readBufferFromItemNBT(tagCompound);
    }
  }
  updateStackCount();
}","public void copyFromModule(ItemStack stack){
  for (int i=ModularStorageContainer.SLOT_STORAGE; i < inventoryHelper.getCount(); i++) {
    inventoryHelper.setInventorySlotContents(0,i,null);
  }
  if (stack == null) {
    setMaxSize(0);
    numStacks=-1;
    return;
  }
  System.out.println(""String_Node_Str"" + stack);
  remoteId=0;
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound == null || !tagCompound.hasKey(""String_Node_Str"")) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    remoteId=tagCompound.getInteger(""String_Node_Str"");
    RemoteStorageTileEntity remoteStorageTileEntity=getRemoteStorage(remoteId);
    if (remoteStorageTileEntity == null) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    ItemStack storageStack=remoteStorageTileEntity.findStorageWithId(remoteId);
    if (storageStack == null) {
      setMaxSize(0);
      numStacks=-1;
      return;
    }
    setMaxSize(StorageModuleItem.MAXSIZE[storageStack.getItemDamage()]);
  }
 else {
    setMaxSize(StorageModuleItem.MAXSIZE[stack.getItemDamage()]);
    NBTTagCompound tagCompound=stack.getTagCompound();
    if (tagCompound != null) {
      readBufferFromItemNBT(tagCompound);
    }
  }
  updateStackCount();
}",0.9810151104223168
165943,"public void copyToModule(){
  ItemStack stack=inventoryHelper.getStackInSlot(ModularStorageContainer.SLOT_STORAGE_MODULE);
  if (stack == null) {
    return;
  }
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    return;
  }
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
    stack.setTagCompound(tagCompound);
  }
  int cnt=writeBufferToItemNBT(tagCompound);
  tagCompound.setInteger(""String_Node_Str"",cnt);
  for (int i=ModularStorageContainer.SLOT_STORAGE; i < inventoryHelper.getCount(); i++) {
    inventoryHelper.setInventorySlotContents(0,i,null);
  }
  numStacks=-1;
  remoteId=0;
  markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
}","public void copyToModule(){
  ItemStack stack=inventoryHelper.getStackInSlot(ModularStorageContainer.SLOT_STORAGE_MODULE);
  if (stack == null) {
    return;
  }
  System.out.println(""String_Node_Str"" + stack);
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    return;
  }
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
    stack.setTagCompound(tagCompound);
  }
  int cnt=writeBufferToItemNBT(tagCompound);
  tagCompound.setInteger(""String_Node_Str"",cnt);
}",0.7720644666155027
165944,"@Override public void setInventorySlotContents(int index,ItemStack stack){
  if (index < RemoteStorageContainer.SLOT_LINKER) {
    copyFromModule(stack,index);
  }
  inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,stack);
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  if (!worldObj.isRemote) {
    link(index);
  }
}","@Override public void setInventorySlotContents(int index,ItemStack stack){
  inventoryHelper.setInventorySlotContents(getInventoryStackLimit(),index,stack);
  if (index < RemoteStorageContainer.SLOT_LINKER) {
    copyFromModule(stack,index);
  }
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  if (!worldObj.isRemote) {
    link(index);
  }
}",0.7650429799426934
165945,"public void copyToModule(int si){
  ItemStack stack=inventoryHelper.getStackInSlot(si);
  if (stack == null) {
    return;
  }
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    return;
  }
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
    stack.setTagCompound(tagCompound);
  }
  int cnt=writeSlotsToNBT(tagCompound,""String_Node_Str"",si);
  tagCompound.setInteger(""String_Node_Str"",cnt);
  setMaxSize(si,0);
}","public void copyToModule(int si){
  ItemStack stack=inventoryHelper.getStackInSlot(si);
  if (stack == null) {
    return;
  }
  if (stack.getItemDamage() == StorageModuleItem.STORAGE_REMOTE) {
    return;
  }
  NBTTagCompound tagCompound=stack.getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
    stack.setTagCompound(tagCompound);
  }
  int cnt=writeSlotsToNBT(tagCompound,""String_Node_Str"",si);
  tagCompound.setInteger(""String_Node_Str"",cnt);
}",0.979757085020243
165946,"private void clearInvisibleBlocks(World world,int x,int y,int z){
  int meta=world.getBlockMetadata(x,y,z);
  if (meta == 2) {
    clearInvisibleBlockSafe(world,x - 1,y,z);
    clearInvisibleBlockSafe(world,x,y - 1,z);
    clearInvisibleBlockSafe(world,x - 1,y - 1,z);
  }
  if (meta == 3) {
    clearInvisibleBlockSafe(world,x + 1,y,z);
    clearInvisibleBlockSafe(world,x,y - 1,z);
    clearInvisibleBlockSafe(world,x + 1,y - 1,z);
  }
  if (meta == 4) {
    clearInvisibleBlockSafe(world,x,y,z + 1);
    clearInvisibleBlockSafe(world,x,y - 1,z);
    clearInvisibleBlockSafe(world,x,y - 1,z + 1);
  }
  if (meta == 5) {
    clearInvisibleBlockSafe(world,x,y,z - 1);
    clearInvisibleBlockSafe(world,x,y - 1,z);
    clearInvisibleBlockSafe(world,x,y - 1,z - 1);
  }
}","private void clearInvisibleBlocks(World world,int x,int y,int z,int meta){
  if (meta == 2) {
    clearInvisibleBlockSafe(world,x - 1,y,z);
    clearInvisibleBlockSafe(world,x,y - 1,z);
    clearInvisibleBlockSafe(world,x - 1,y - 1,z);
  }
  if (meta == 3) {
    clearInvisibleBlockSafe(world,x + 1,y,z);
    clearInvisibleBlockSafe(world,x,y - 1,z);
    clearInvisibleBlockSafe(world,x + 1,y - 1,z);
  }
  if (meta == 4) {
    clearInvisibleBlockSafe(world,x,y,z + 1);
    clearInvisibleBlockSafe(world,x,y - 1,z);
    clearInvisibleBlockSafe(world,x,y - 1,z + 1);
  }
  if (meta == 5) {
    clearInvisibleBlockSafe(world,x,y,z - 1);
    clearInvisibleBlockSafe(world,x,y - 1,z);
    clearInvisibleBlockSafe(world,x,y - 1,z - 1);
  }
}",0.9661129568106313
165947,"@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof ScreenTileEntity) {
    ScreenTileEntity screenTileEntity=(ScreenTileEntity)te;
    if (screenTileEntity.isLarge()) {
      clearInvisibleBlocks(world,x,y,z);
    }
  }
  super.breakBlock(world,x,y,z,block,meta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof ScreenTileEntity) {
    ScreenTileEntity screenTileEntity=(ScreenTileEntity)te;
    if (screenTileEntity.isLarge()) {
      clearInvisibleBlocks(world,x,y,z,meta);
    }
  }
  super.breakBlock(world,x,y,z,block,meta);
}",0.9931787175989086
165948,"@Override protected boolean wrenchUse(World world,int x,int y,int z,EntityPlayer player){
  ScreenTileEntity screenTileEntity=(ScreenTileEntity)world.getTileEntity(x,y,z);
  if (screenTileEntity.isTransparent() && screenTileEntity.isLarge()) {
    screenTileEntity.setTransparent(false);
  }
 else   if (screenTileEntity.isLarge()) {
    screenTileEntity.setLarge(false);
    clearInvisibleBlocks(world,x,y,z);
  }
 else   if (screenTileEntity.isTransparent()) {
    screenTileEntity.setLarge(true);
    setInvisibleBlocks(world,x,y,z);
  }
 else {
    screenTileEntity.setTransparent(true);
  }
  return true;
}","@Override protected boolean wrenchUse(World world,int x,int y,int z,EntityPlayer player){
  ScreenTileEntity screenTileEntity=(ScreenTileEntity)world.getTileEntity(x,y,z);
  if (screenTileEntity.isTransparent() && screenTileEntity.isLarge()) {
    screenTileEntity.setTransparent(false);
  }
 else   if (screenTileEntity.isLarge()) {
    screenTileEntity.setLarge(false);
    int meta=world.getBlockMetadata(x,y,z);
    clearInvisibleBlocks(world,x,y,z,meta);
  }
 else   if (screenTileEntity.isTransparent()) {
    screenTileEntity.setLarge(true);
    setInvisibleBlocks(world,x,y,z);
  }
 else {
    screenTileEntity.setTransparent(true);
  }
  return true;
}",0.9615082482325216
165949,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entityLivingBase,ItemStack itemStack){
  super.onBlockPlacedBy(world,x,y,z,entityLivingBase,itemStack);
  if (entityLivingBase instanceof EntityPlayer) {
    Achievements.trigger((EntityPlayer)entityLivingBase,Achievements.clearVision);
  }
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entityLivingBase,ItemStack itemStack){
  super.onBlockPlacedBy(world,x,y,z,entityLivingBase,itemStack);
  if (entityLivingBase instanceof EntityPlayer) {
    Achievements.trigger((EntityPlayer)entityLivingBase,Achievements.clearVision);
  }
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity instanceof ScreenTileEntity) {
    ScreenTileEntity screenTileEntity=(ScreenTileEntity)tileEntity;
    if (screenTileEntity.isLarge()) {
      setInvisibleBlocks(world,x,y,z);
    }
  }
}",0.7194719471947195
165950,"@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof ShieldTEBase) {
    ShieldTEBase shieldTileEntity=(ShieldTEBase)te;
    BlockTools.emptyInventoryInWorld(world,x,y,z,block,shieldTileEntity);
    if (!world.isRemote) {
      if (shieldTileEntity.isShieldComposed()) {
        shieldTileEntity.decomposeShield();
      }
    }
  }
  super.breakBlock(world,x,y,z,block,meta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block block,int meta){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof ShieldTEBase) {
    if (!world.isRemote) {
      ShieldTEBase shieldTileEntity=(ShieldTEBase)te;
      if (shieldTileEntity.isShieldComposed()) {
        shieldTileEntity.decomposeShield();
      }
    }
  }
  super.breakBlock(world,x,y,z,block,meta);
}",0.6947608200455581
165951,"public void addDimension(int id){
  data.writeByte(id);
}","public void addDimension(int id){
  data.writeInt(id);
}",0.9557522123893806
165952,"public void execute(){
  for (  byte id : dimensions) {
    RFTools.log(""String_Node_Str"" + id);
    if (!DimensionManager.isDimensionRegistered(id)) {
      DimensionManager.registerProviderType(id,GenericWorldProvider.class,false);
      DimensionManager.registerDimension(id,id);
    }
  }
}","public void execute(){
  for (  int id : dimensions) {
    RFTools.log(""String_Node_Str"" + id);
    if (!DimensionManager.isDimensionRegistered(id)) {
      DimensionManager.registerProviderType(id,GenericWorldProvider.class,false);
      DimensionManager.registerDimension(id,id);
    }
  }
}",0.9880749574105622
165953,"public void consumePacket(ByteBuf data){
  dimensions=new byte[data.readableBytes()];
  data.readBytes(dimensions);
}","public void consumePacket(ByteBuf data){
  int cnt=data.readableBytes() / 4;
  dimensions=new int[cnt];
  for (int i=0; i < cnt; i++) {
    dimensions[i]=data.readInt();
  }
}",0.5821917808219178
165954,"@Override protected Slot createSlot(SlotFactory slotFactory,IInventory inventory,int index,int x,int y,SlotType slotType){
  if (index >= SLOT_BUFFER && index < SLOT_BUFFEROUT) {
    return new BaseSlot(inventory,index,x,y){
      @Override public boolean isItemValid(      ItemStack stack){
        if (!crafterBaseTE.isItemValidForSlot(getSlotIndex(),stack)) {
          return false;
        }
        return super.isItemValid(stack);
      }
    }
;
  }
  return super.createSlot(slotFactory,inventory,index,x,y,slotType);
}","@Override protected Slot createSlot(SlotFactory slotFactory,IInventory inventory,int index,int x,int y,SlotType slotType){
  if (index >= SLOT_BUFFER && index < SLOT_BUFFEROUT && slotType == SlotType.SLOT_INPUT) {
    return new BaseSlot(inventory,index,x,y){
      @Override public boolean isItemValid(      ItemStack stack){
        if (!crafterBaseTE.isItemValidForSlot(getSlotIndex(),stack)) {
          return false;
        }
        return super.isItemValid(stack);
      }
    }
;
  }
  return super.createSlot(slotFactory,inventory,index,x,y,slotType);
}",0.9679193400549956
165955,"public Object[] getContentsValue(long millis,long contents,long maxContents){
  if (showdiff) {
    if (prevMillis == 0 || millis <= prevMillis) {
      prevMillis=millis;
      prevContents=contents;
      return new Object[]{contents,maxContents,0L};
    }
 else {
      long diff=millis - prevMillis;
      int ticks=(int)(diff * 20 / 1000);
      if (ticks == 0) {
        ticks=1;
      }
      long diffEnergy=contents - prevContents;
      prevMillis=millis;
      prevContents=contents;
      return new Object[]{contents,maxContents,diffEnergy / ticks};
    }
  }
 else {
    return new Object[]{contents,maxContents,0L};
  }
}","public Object[] getContentsValue(long millis,long contents,long maxContents){
  if (showdiff) {
    if (prevMillis == 0 || millis <= prevMillis + 100) {
      prevMillis=millis;
      prevContents=contents;
      return new Object[]{contents,maxContents,lastPerTick};
    }
 else {
      long diff=millis - prevMillis;
      int ticks=(int)(diff * 20 / 1000);
      if (ticks == 0) {
        ticks=1;
      }
      long diffEnergy=contents - prevContents;
      prevMillis=millis;
      prevContents=contents;
      lastPerTick=diffEnergy / ticks;
      return new Object[]{contents,maxContents,lastPerTick};
    }
  }
 else {
    return new Object[]{contents,maxContents,0L};
  }
}",0.9393019726858876
165956,"public static void init(Configuration cfg){
  ENVIRONMENTAL_MAXENERGY=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",ENVIRONMENTAL_MAXENERGY,""String_Node_Str"").getInt();
  ENVIRONMENTAL_RECEIVEPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",ENVIRONMENTAL_RECEIVEPERTICK,""String_Node_Str"").getInt();
  MIN_USAGE=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",MIN_USAGE,""String_Node_Str"").getInt();
  FEATHERFALLING_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",FEATHERFALLING_RFPERTICK,""String_Node_Str"").getInt();
  FEATHERFALLINGPLUS_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",FEATHERFALLINGPLUS_RFPERTICK,""String_Node_Str"").getInt();
  FLIGHT_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",FLIGHT_RFPERTICK,""String_Node_Str"").getInt();
  HASTE_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",HASTE_RFPERTICK,""String_Node_Str"").getInt();
  HASTEPLUS_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",HASTEPLUS_RFPERTICK,""String_Node_Str"").getInt();
  NIGHTVISION_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",NIGHTVISION_RFPERTICK,""String_Node_Str"").getInt();
  PEACEFUL_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",PEACEFUL_RFPERTICK,""String_Node_Str"").getInt();
  REGENERATION_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",REGENERATION_RFPERTICK,""String_Node_Str"").getInt();
  REGENERATIONPLUS_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",REGENERATIONPLUS_RFPERTICK,""String_Node_Str"").getInt();
  SATURATION_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",SATURATION_RFPERTICK,""String_Node_Str"").getInt();
  SATURATIONPLUS_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",SATURATIONPLUS_RFPERTICK,""String_Node_Str"").getInt();
  SPEED_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",SPEED_RFPERTICK,""String_Node_Str"").getInt();
  SPEEDPLUS_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",SPEEDPLUS_RFPERTICK,""String_Node_Str"").getInt();
  WATERBREATHING_RFPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",WATERBREATHING_RFPERTICK,""String_Node_Str"").getInt();
}","public static void init(Configuration cfg){
  ENVIRONMENTAL_MAXENERGY=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",ENVIRONMENTAL_MAXENERGY,""String_Node_Str"").getInt();
  ENVIRONMENTAL_RECEIVEPERTICK=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",ENVIRONMENTAL_RECEIVEPERTICK,""String_Node_Str"").getInt();
  MIN_USAGE=cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",MIN_USAGE,""String_Node_Str"").getInt();
  FEATHERFALLING_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",FEATHERFALLING_RFPERTICK,""String_Node_Str"").getDouble();
  FEATHERFALLINGPLUS_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",FEATHERFALLINGPLUS_RFPERTICK,""String_Node_Str"").getDouble();
  FLIGHT_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",FLIGHT_RFPERTICK,""String_Node_Str"").getDouble();
  HASTE_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",HASTE_RFPERTICK,""String_Node_Str"").getDouble();
  HASTEPLUS_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",HASTEPLUS_RFPERTICK,""String_Node_Str"").getDouble();
  NIGHTVISION_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",NIGHTVISION_RFPERTICK,""String_Node_Str"").getDouble();
  PEACEFUL_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",PEACEFUL_RFPERTICK,""String_Node_Str"").getDouble();
  REGENERATION_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",REGENERATION_RFPERTICK,""String_Node_Str"").getDouble();
  REGENERATIONPLUS_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",REGENERATIONPLUS_RFPERTICK,""String_Node_Str"").getDouble();
  SATURATION_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",SATURATION_RFPERTICK,""String_Node_Str"").getDouble();
  SATURATIONPLUS_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",SATURATIONPLUS_RFPERTICK,""String_Node_Str"").getDouble();
  SPEED_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",SPEED_RFPERTICK,""String_Node_Str"").getDouble();
  SPEEDPLUS_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",SPEEDPLUS_RFPERTICK,""String_Node_Str"").getDouble();
  WATERBREATHING_RFPERTICK=(float)cfg.get(CATEGORY_ENVIRONMENTAL,""String_Node_Str"",WATERBREATHING_RFPERTICK,""String_Node_Str"").getDouble();
}",0.9493441881501584
165957,"@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  GL11.glDisable(GL11.GL_LIGHTING);
  int xoffset;
  if (!line.isEmpty()) {
    fontRenderer.drawString(line,7,currenty + 2,color);
    xoffset=7 + 80;
  }
 else {
    xoffset=7 + 5;
  }
  boolean act=false;
  if (toggle) {
    if (screenData != null && screenData.length >= 1) {
      act=((Integer)screenData[0]) > 0;
    }
  }
 else {
    act=activated;
  }
  RenderHelper.drawBeveledBox(xoffset - 5,currenty,130 - 7,currenty + 12,act ? 0xff333333 : 0xffeeeeee,act ? 0xffeeeeee : 0xff333333,0xff666666);
  fontRenderer.drawString(fontRenderer.trimStringToWidth(button,130 - 7 - xoffset),xoffset + (act ? 1 : 0),currenty + 2 + (act ? 1 : 0),buttonColor);
}","@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  GL11.glDisable(GL11.GL_LIGHTING);
  int xoffset;
  if (!line.isEmpty()) {
    fontRenderer.drawString(line,7,currenty + 2,color);
    xoffset=7 + 80;
  }
 else {
    xoffset=7 + 5;
  }
  boolean act=false;
  if (toggle) {
    if (screenData != null && screenData.length >= 1 && screenData[0] instanceof Integer) {
      act=((Integer)screenData[0]) > 0;
    }
  }
 else {
    act=activated;
  }
  RenderHelper.drawBeveledBox(xoffset - 5,currenty,130 - 7,currenty + 12,act ? 0xff333333 : 0xffeeeeee,act ? 0xffeeeeee : 0xff333333,0xff666666);
  fontRenderer.drawString(fontRenderer.trimStringToWidth(button,130 - 7 - xoffset),xoffset + (act ? 1 : 0),currenty + 2 + (act ? 1 : 0),buttonColor);
}",0.9768934531450578
165958,"@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  GL11.glDisable(GL11.GL_LIGHTING);
  int xoffset;
  if (!line.isEmpty()) {
    fontRenderer.drawString(line,7,currenty,color);
    xoffset=7 + 40;
  }
 else {
    xoffset=7;
  }
  if (coordinate.isValid()) {
    int counter;
    if (screenData != null && screenData.length > 0) {
      counter=(Integer)screenData[0];
    }
 else {
      counter=0;
    }
    fontRenderer.drawString(ClientScreenModuleHelper.format(String.valueOf(counter),format),xoffset,currenty,cntcolor);
  }
 else {
    fontRenderer.drawString(""String_Node_Str"",xoffset,currenty,0xff0000);
  }
}","@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  GL11.glDisable(GL11.GL_LIGHTING);
  int xoffset;
  if (!line.isEmpty()) {
    fontRenderer.drawString(line,7,currenty,color);
    xoffset=7 + 40;
  }
 else {
    xoffset=7;
  }
  if (coordinate.isValid()) {
    int counter;
    if (screenData != null && screenData.length > 0 && screenData[0] instanceof Integer) {
      counter=(Integer)screenData[0];
    }
 else {
      counter=0;
    }
    fontRenderer.drawString(ClientScreenModuleHelper.format(String.valueOf(counter),format),xoffset,currenty,cntcolor);
  }
 else {
    fontRenderer.drawString(""String_Node_Str"",xoffset,currenty,0xff0000);
  }
}",0.9738372093023256
165959,"@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  GL11.glDisable(GL11.GL_LIGHTING);
  int xoffset;
  if (!line.isEmpty()) {
    fontRenderer.drawString(line,7,currenty,labcolor);
    xoffset=7 + 40;
  }
 else {
    xoffset=7;
  }
  if (coordinate.isValid() && screenData != null && screenData.length >= 1) {
    fontRenderer.drawString((String)screenData[0],xoffset,currenty,txtcolor);
  }
 else {
    fontRenderer.drawString(""String_Node_Str"",xoffset,currenty,0xff0000);
  }
}","@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  GL11.glDisable(GL11.GL_LIGHTING);
  int xoffset;
  if (!line.isEmpty()) {
    fontRenderer.drawString(line,7,currenty,labcolor);
    xoffset=7 + 40;
  }
 else {
    xoffset=7;
  }
  if (coordinate.isValid() && screenData != null && screenData.length >= 1 && screenData[0] instanceof String) {
    fontRenderer.drawString((String)screenData[0],xoffset,currenty,txtcolor);
  }
 else {
    fontRenderer.drawString(""String_Node_Str"",xoffset,currenty,0xff0000);
  }
}",0.9681528662420382
165960,"@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  GL11.glDisable(GL11.GL_LIGHTING);
  int xoffset;
  if (!line.isEmpty()) {
    fontRenderer.drawString(line,7,currenty,color);
    xoffset=7 + 40;
  }
 else {
    xoffset=7;
  }
  if (screenData != null && screenData.length > 0) {
    boolean rs=(Boolean)screenData[0];
    fontRenderer.drawString(rs ? yestext : notext,xoffset,currenty,rs ? yescolor : nocolor);
  }
 else {
    fontRenderer.drawString(""String_Node_Str"",xoffset,currenty,0xff0000);
  }
}","@Override public void render(FontRenderer fontRenderer,int currenty,Object[] screenData,float factor){
  GL11.glDisable(GL11.GL_LIGHTING);
  int xoffset;
  if (!line.isEmpty()) {
    fontRenderer.drawString(line,7,currenty,color);
    xoffset=7 + 40;
  }
 else {
    xoffset=7;
  }
  if (screenData != null && screenData.length > 0 && screenData[0] instanceof Boolean) {
    boolean rs=(Boolean)screenData[0];
    fontRenderer.drawString(rs ? yestext : notext,xoffset,currenty,rs ? yescolor : nocolor);
  }
 else {
    fontRenderer.drawString(""String_Node_Str"",xoffset,currenty,0xff0000);
  }
}",0.96875
165961,"@Override public String getLongLabel(ItemStack stack){
  if (stack.getItem() == DimletSetup.knownDimlet) {
    DimletKey key=KnownDimletConfiguration.getDimletKey(stack,null);
    if (key != null) {
      DimletEntry entry=KnownDimletConfiguration.getEntry(key);
      return PATTERN.matcher(stack.getDisplayName()).replaceAll(""String_Node_Str"") + ""String_Node_Str"" + entry.getRarity()+ ""String_Node_Str"";
    }
  }
  return stack.getDisplayName();
}","@Override public String getLongLabel(ItemStack stack){
  if (stack.getItem() == DimletSetup.knownDimlet) {
    DimletKey key=KnownDimletConfiguration.getDimletKey(stack,null);
    if (key != null) {
      DimletEntry entry=KnownDimletConfiguration.getEntry(key);
      if (entry != null) {
        return PATTERN.matcher(stack.getDisplayName()).replaceAll(""String_Node_Str"") + ""String_Node_Str"" + entry.getRarity()+ ""String_Node_Str"";
      }
    }
  }
  return stack.getDisplayName();
}",0.96051227321238
165962,"private Slot findEmptySlot(){
  for (  Object slotObject : inventorySlots.inventorySlots) {
    Slot slot=(Slot)slotObject;
    if ((!slot.getHasStack()) || slot.getStack().stackSize == 0) {
      return slot;
    }
  }
  return null;
}","private Slot findEmptySlot(){
  for (  Object slotObject : inventorySlots.inventorySlots) {
    Slot slot=(Slot)slotObject;
    if (tileEntity != null && slot.getSlotIndex() < ModularStorageContainer.SLOT_STORAGE) {
      continue;
    }
    if ((!slot.getHasStack()) || slot.getStack().stackSize == 0) {
      return slot;
    }
  }
  return null;
}",0.8054607508532423
165963,"public ModularStorageItemInventory(EntityPlayer player){
  this.entityPlayer=player;
  int maxSize=getMaxSize();
  stacks=new ItemStack[maxSize];
  NBTTagCompound tagCompound=entityPlayer.getHeldItem().getTagCompound();
  tagCompound.setInteger(""String_Node_Str"",maxSize);
  NBTTagList bufferTagList=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < Math.min(bufferTagList.tagCount(),maxSize); i++) {
    NBTTagCompound nbtTagCompound=bufferTagList.getCompoundTagAt(i);
    stacks[i]=ItemStack.loadItemStackFromNBT(nbtTagCompound);
  }
}","public ModularStorageItemInventory(EntityPlayer player){
  this.entityPlayer=player;
  int maxSize=getMaxSize();
  stacks=new ItemStack[maxSize];
  NBTTagCompound tagCompound=entityPlayer.getHeldItem().getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
    entityPlayer.getHeldItem().setTagCompound(tagCompound);
  }
  tagCompound.setInteger(""String_Node_Str"",maxSize);
  NBTTagList bufferTagList=tagCompound.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < Math.min(bufferTagList.tagCount(),maxSize); i++) {
    NBTTagCompound nbtTagCompound=bufferTagList.getCompoundTagAt(i);
    stacks[i]=ItemStack.loadItemStackFromNBT(nbtTagCompound);
  }
}",0.8980544747081712
165964,"/** 
 * Merges provided ItemStack with the first available one in this inventory. It will return the amount of items that could not be merged. Also fills the undo buffer in case you want to undo the operation.
 */
public static int mergeItemStack(IInventory inventory,ItemStack result,int start,int stop,List<SlotModifier> undo){
  int k=start;
  ItemStack itemstack1;
  int itemsToPlace=result.stackSize;
  if (result.isStackable()) {
    while (itemsToPlace > 0 && (k < stop)) {
      itemstack1=inventory.getStackInSlot(k);
      if (itemstack1 != null && itemstack1.getItem() == result.getItem() && (!result.getHasSubtypes() || result.getItemDamage() == itemstack1.getItemDamage()) && ItemStack.areItemStackTagsEqual(result,itemstack1)) {
        int l=itemstack1.stackSize + itemsToPlace;
        if (l <= result.getMaxStackSize()) {
          if (undo != null) {
            undo.add(new SlotModifier(k,itemstack1.copy()));
          }
          itemsToPlace=0;
          itemstack1.stackSize=l;
          inventory.markDirty();
        }
 else         if (itemstack1.stackSize < result.getMaxStackSize()) {
          if (undo != null) {
            undo.add(new SlotModifier(k,itemstack1.copy()));
          }
          itemsToPlace-=result.getMaxStackSize() - itemstack1.stackSize;
          itemstack1.stackSize=result.getMaxStackSize();
          inventory.markDirty();
        }
      }
      ++k;
    }
  }
  if (itemsToPlace > 0) {
    k=start;
    while (k < stop) {
      itemstack1=inventory.getStackInSlot(k);
      if (itemstack1 == null) {
        if (undo != null) {
          undo.add(new SlotModifier(k,null));
        }
        inventory.setInventorySlotContents(k,result.copy());
        inventory.markDirty();
        itemsToPlace=0;
        break;
      }
      ++k;
    }
  }
  return itemsToPlace;
}","/** 
 * Merges provided ItemStack with the first available one in this inventory. It will return the amount of items that could not be merged. Also fills the undo buffer in case you want to undo the operation.
 */
public static int mergeItemStack(IInventory inventory,ItemStack result,int start,int stop,List<SlotModifier> undo){
  int k=start;
  ItemStack itemstack1;
  int itemsToPlace=result.stackSize;
  if (result.isStackable()) {
    while (itemsToPlace > 0 && (k < stop)) {
      itemstack1=inventory.getStackInSlot(k);
      if (itemstack1 != null && itemstack1.getItem() == result.getItem() && (!result.getHasSubtypes() || result.getItemDamage() == itemstack1.getItemDamage()) && ItemStack.areItemStackTagsEqual(result,itemstack1)) {
        int l=itemstack1.stackSize + itemsToPlace;
        if (l <= result.getMaxStackSize()) {
          if (undo != null) {
            undo.add(new SlotModifier(k,itemstack1.copy()));
          }
          itemsToPlace=0;
          itemstack1.stackSize=l;
          inventory.markDirty();
        }
 else         if (itemstack1.stackSize < result.getMaxStackSize()) {
          if (undo != null) {
            undo.add(new SlotModifier(k,itemstack1.copy()));
          }
          itemsToPlace-=result.getMaxStackSize() - itemstack1.stackSize;
          itemstack1.stackSize=result.getMaxStackSize();
          inventory.markDirty();
        }
      }
      ++k;
    }
  }
  if (itemsToPlace > 0) {
    k=start;
    while (k < stop) {
      itemstack1=inventory.getStackInSlot(k);
      if (itemstack1 == null) {
        if (undo != null) {
          undo.add(new SlotModifier(k,null));
        }
        ItemStack copy=result.copy();
        copy.stackSize=itemsToPlace;
        inventory.setInventorySlotContents(k,copy);
        inventory.markDirty();
        itemsToPlace=0;
        break;
      }
      ++k;
    }
  }
  return itemsToPlace;
}",0.9774193548387096
165965,"private boolean craftOneItem(CraftingRecipe craftingRecipe){
  List<InventoryHelper.SlotModifier> undo=new ArrayList<InventoryHelper.SlotModifier>();
  int amountLeft=placeResult(craftingRecipe.isCraftInternal(),craftingRecipe.getResult(),undo);
  if (amountLeft == 0 && !craftingRecipe.getContainerItems().isEmpty()) {
    for (    ItemStack stack : craftingRecipe.getContainerItems()) {
      amountLeft=placeResult(craftingRecipe.isCraftInternal(),stack,undo);
      if (amountLeft != 0) {
        break;
      }
    }
  }
  if (amountLeft == 0) {
    consumeCraftingItems(craftingRecipe.getStacksWithCount(),craftingRecipe.isKeepOne() ? 1 : 0);
    return true;
  }
 else {
    for (    InventoryHelper.SlotModifier modifier : undo) {
      inventoryHelper.getStacks()[modifier.getSlot()]=modifier.getOld();
    }
    return false;
  }
}","private boolean craftOneItem(CraftingRecipe craftingRecipe){
  List<InventoryHelper.SlotModifier> undo=new ArrayList<InventoryHelper.SlotModifier>();
  int amountLeft=placeResult(craftingRecipe.isCraftInternal(),craftingRecipe.getResult(),undo);
  if (amountLeft == 0 && !craftingRecipe.getContainerItems().isEmpty()) {
  }
  if (amountLeft == 0) {
    consumeCraftingItems(craftingRecipe.isCraftInternal(),craftingRecipe.getStacksWithCount(),craftingRecipe.isKeepOne() ? 1 : 0);
    return true;
  }
 else {
    for (    InventoryHelper.SlotModifier modifier : undo) {
      inventoryHelper.getStacks()[modifier.getSlot()]=modifier.getOld();
    }
    return false;
  }
}",0.8446794448116325
165966,"private void consumeCraftingItems(List<CraftingRecipe.StackWithCount> stackWithCounts,int keep){
  for (  CraftingRecipe.StackWithCount stackWithCount : stackWithCounts) {
    ItemStack stack=stackWithCount.getStack();
    int count=stackWithCount.getCount();
    for (int j=0; j < CrafterContainer.BUFFER_SIZE; j++) {
      ItemStack input=inventoryHelper.getStacks()[CrafterContainer.SLOT_BUFFER + j];
      if (input != null && input.stackSize > keep) {
        if (OreDictionary.itemMatches(stack,input,false)) {
          int ss=count;
          if (input.stackSize - ss < keep) {
            ss=input.stackSize - keep;
          }
          count-=ss;
          input.splitStack(ss);
          if (input.stackSize == 0) {
            inventoryHelper.getStacks()[CrafterContainer.SLOT_BUFFER + j]=null;
          }
        }
      }
    }
  }
}","private void consumeCraftingItems(boolean internal,List<CraftingRecipe.StackWithCount> stackWithCounts,int keep){
  for (  CraftingRecipe.StackWithCount stackWithCount : stackWithCounts) {
    ItemStack stack=stackWithCount.getStack();
    int count=stackWithCount.getCount();
    for (int j=0; j < CrafterContainer.BUFFER_SIZE; j++) {
      ItemStack input=inventoryHelper.getStacks()[CrafterContainer.SLOT_BUFFER + j];
      if (input != null && input.stackSize > keep) {
        if (OreDictionary.itemMatches(stack,input,false)) {
          if (input.getItem().hasContainerItem(input)) {
            ItemStack containerItem=input.getItem().getContainerItem(input);
            if (containerItem != null && containerItem.isItemStackDamageable() && containerItem.getItemDamage() > containerItem.getMaxDamage()) {
            }
 else {
              placeResult(internal,containerItem,null);
            }
          }
          int ss=count;
          if (input.stackSize - ss < keep) {
            ss=input.stackSize - keep;
          }
          count-=ss;
          input.splitStack(ss);
          if (input.stackSize == 0) {
            inventoryHelper.getStacks()[CrafterContainer.SLOT_BUFFER + j]=null;
          }
        }
      }
    }
  }
}",0.8089566460219152
165967,"private boolean craftOneItem(CraftingRecipe craftingRecipe){
  List<InventoryHelper.SlotModifier> undo=new ArrayList<InventoryHelper.SlotModifier>();
  int amountLeft=placeResult(craftingRecipe.isCraftInternal(),craftingRecipe.getResult(),undo);
  if (amountLeft == 0 && !craftingRecipe.getContainerItems().isEmpty()) {
  }
  if (amountLeft == 0) {
    consumeCraftingItems(craftingRecipe.isCraftInternal(),craftingRecipe.getStacksWithCount(),craftingRecipe.isKeepOne() ? 1 : 0);
    return true;
  }
 else {
    for (    InventoryHelper.SlotModifier modifier : undo) {
      inventoryHelper.getStacks()[modifier.getSlot()]=modifier.getOld();
    }
    return false;
  }
}","private boolean craftOneItem(CraftingRecipe craftingRecipe){
  List<InventoryHelper.SlotModifier> undo=new ArrayList<InventoryHelper.SlotModifier>();
  int amountLeft=placeResult(craftingRecipe.isCraftInternal(),craftingRecipe.getResult(),undo);
  if (amountLeft == 0 && !craftingRecipe.getContainerItems().isEmpty()) {
    List<InventoryHelper.SlotModifier> undoContainers=new ArrayList<InventoryHelper.SlotModifier>();
    for (    ItemStack stack : craftingRecipe.getContainerItems()) {
      amountLeft=placeResult(craftingRecipe.isCraftInternal(),stack,undoContainers);
      if (amountLeft != 0) {
        break;
      }
    }
    undo(undoContainers);
  }
  if (amountLeft == 0) {
    consumeCraftingItems(craftingRecipe.isCraftInternal(),craftingRecipe.getStacksWithCount(),craftingRecipe.isKeepOne() ? 1 : 0);
    return true;
  }
 else {
    undo(undo);
    return false;
  }
}",0.6645285439384221
165968,"private void consumeCraftingItems(boolean internal,List<CraftingRecipe.StackWithCount> stackWithCounts,int keep){
  for (  CraftingRecipe.StackWithCount stackWithCount : stackWithCounts) {
    ItemStack stack=stackWithCount.getStack();
    int count=stackWithCount.getCount();
    for (int j=0; j < CrafterContainer.BUFFER_SIZE; j++) {
      ItemStack input=inventoryHelper.getStacks()[CrafterContainer.SLOT_BUFFER + j];
      if (input != null && input.stackSize > keep) {
        if (OreDictionary.itemMatches(stack,input,false)) {
          if (input.getItem().hasContainerItem(input)) {
            ItemStack containerItem=input.getItem().getContainerItem(input);
            if (containerItem != null && containerItem.isItemStackDamageable() && containerItem.getItemDamage() > containerItem.getMaxDamage()) {
            }
 else {
              placeResult(internal,containerItem,null);
            }
          }
          int ss=count;
          if (input.stackSize - ss < keep) {
            ss=input.stackSize - keep;
          }
          count-=ss;
          input.splitStack(ss);
          if (input.stackSize == 0) {
            inventoryHelper.getStacks()[CrafterContainer.SLOT_BUFFER + j]=null;
          }
        }
      }
    }
  }
}","private void consumeCraftingItems(boolean internal,List<CraftingRecipe.StackWithCount> stackWithCounts,int keep){
  for (  CraftingRecipe.StackWithCount stackWithCount : stackWithCounts) {
    ItemStack stack=stackWithCount.getStack();
    int count=stackWithCount.getCount();
    for (int j=0; j < CrafterContainer.BUFFER_SIZE; j++) {
      ItemStack input=inventoryHelper.getStacks()[CrafterContainer.SLOT_BUFFER + j];
      if (input != null && input.stackSize > keep) {
        if (OreDictionary.itemMatches(stack,input,false)) {
          if (input.getItem().hasContainerItem(input)) {
            ItemStack containerItem=input.getItem().getContainerItem(input);
            if (containerItem != null) {
              if ((!containerItem.isItemStackDamageable()) || containerItem.getItemDamage() <= containerItem.getMaxDamage()) {
                placeResult(internal,containerItem,null);
              }
            }
          }
          int ss=count;
          if (input.stackSize - ss < keep) {
            ss=input.stackSize - keep;
          }
          count-=ss;
          input.splitStack(ss);
          if (input.stackSize == 0) {
            inventoryHelper.getStacks()[CrafterContainer.SLOT_BUFFER + j]=null;
          }
        }
      }
    }
  }
}",0.9356632247815728
165969,"private void findContainerItems(){
  containerItems=new ArrayList<ItemStack>();
  for (int i=0; i < inv.getSizeInventory(); i++) {
    ItemStack stack=inv.getStackInSlot(i);
    if (stack != null && stack.getItem() != null) {
      ItemStack containerItem=stack.getItem().getContainerItem(stack);
      if (containerItem != null) {
        containerItems.add(containerItem);
      }
    }
  }
}","private void findContainerItems(){
  containerItems=new ArrayList<ItemStack>();
  for (int i=0; i < inv.getSizeInventory(); i++) {
    ItemStack stack=inv.getStackInSlot(i);
    if (stack != null && stack.getItem() != null) {
      ItemStack containerItem=stack.getItem().getContainerItem(stack);
      if (containerItem != null) {
        boolean found=false;
        for (        ItemStack item : containerItems) {
          if (item.isItemEqual(containerItem)) {
            item.stackSize+=containerItem.stackSize;
            found=true;
            break;
          }
        }
        if (!found) {
          containerItems.add(containerItem);
        }
      }
    }
  }
}",0.7337057728119181
165970,"@SubscribeEvent public void onDetonate(ExplosionEvent.Detonate event){
  int id=event.world.provider.dimensionId;
  BlockProtectors blockProtectors=BlockProtectors.getProtectors(event.world);
  Explosion explosion=event.explosion;
  Collection<GlobalCoordinate> protectors=blockProtectors.findProtectors((int)explosion.explosionX,(int)explosion.explosionY,(int)explosion.explosionZ,id,(int)explosion.explosionSize);
  if (protectors.isEmpty()) {
    return;
  }
  List<ChunkPosition> affectedBlocks=event.getAffectedBlocks();
  List<ChunkPosition> toremove=new ArrayList<ChunkPosition>();
  Vec3 explosionVector=Vec3.createVectorHelper(explosion.explosionX,explosion.explosionY,explosion.explosionZ);
  int rf=0;
  for (  GlobalCoordinate protector : protectors) {
    int cx=protector.getCoordinate().getX();
    int cy=protector.getCoordinate().getY();
    int cz=protector.getCoordinate().getZ();
    TileEntity te=event.world.getTileEntity(cx,cy,cz);
    if (te instanceof BlockProtectorTileEntity) {
      BlockProtectorTileEntity blockProtectorTileEntity=(BlockProtectorTileEntity)te;
      for (      ChunkPosition block : affectedBlocks) {
        Coordinate relative=blockProtectorTileEntity.absoluteToRelative(block.chunkPosX,block.chunkPosY,block.chunkPosZ);
        boolean b=blockProtectorTileEntity.isProtected(relative);
        if (b) {
          Vec3 blockVector=Vec3.createVectorHelper(block.chunkPosX,block.chunkPosY,block.chunkPosZ);
          double distanceTo=explosionVector.distanceTo(blockVector);
          int rfneeded=blockProtectorTileEntity.attemptExplosionProtection((float)(distanceTo / explosion.explosionSize),explosion.explosionSize);
          if (rfneeded > 0) {
            toremove.add(block);
            rf+=rfneeded;
          }
 else {
            blockProtectorTileEntity.removeProtection(relative);
          }
        }
      }
    }
  }
  for (  ChunkPosition block : toremove) {
    affectedBlocks.remove(block);
  }
  RFTools.logDebug(""String_Node_Str"" + rf);
}","@SubscribeEvent public void onDetonate(ExplosionEvent.Detonate event){
  BlockProtectors blockProtectors=BlockProtectors.getProtectors(event.world);
  if (blockProtectors == null) {
    return;
  }
  int id=event.world.provider.dimensionId;
  Explosion explosion=event.explosion;
  Collection<GlobalCoordinate> protectors=blockProtectors.findProtectors((int)explosion.explosionX,(int)explosion.explosionY,(int)explosion.explosionZ,id,(int)explosion.explosionSize);
  if (protectors.isEmpty()) {
    return;
  }
  List<ChunkPosition> affectedBlocks=event.getAffectedBlocks();
  List<ChunkPosition> toremove=new ArrayList<ChunkPosition>();
  Vec3 explosionVector=Vec3.createVectorHelper(explosion.explosionX,explosion.explosionY,explosion.explosionZ);
  int rf=0;
  for (  GlobalCoordinate protector : protectors) {
    int cx=protector.getCoordinate().getX();
    int cy=protector.getCoordinate().getY();
    int cz=protector.getCoordinate().getZ();
    TileEntity te=event.world.getTileEntity(cx,cy,cz);
    if (te instanceof BlockProtectorTileEntity) {
      BlockProtectorTileEntity blockProtectorTileEntity=(BlockProtectorTileEntity)te;
      for (      ChunkPosition block : affectedBlocks) {
        Coordinate relative=blockProtectorTileEntity.absoluteToRelative(block.chunkPosX,block.chunkPosY,block.chunkPosZ);
        boolean b=blockProtectorTileEntity.isProtected(relative);
        if (b) {
          Vec3 blockVector=Vec3.createVectorHelper(block.chunkPosX,block.chunkPosY,block.chunkPosZ);
          double distanceTo=explosionVector.distanceTo(blockVector);
          int rfneeded=blockProtectorTileEntity.attemptExplosionProtection((float)(distanceTo / explosion.explosionSize),explosion.explosionSize);
          if (rfneeded > 0) {
            toremove.add(block);
            rf+=rfneeded;
          }
 else {
            blockProtectorTileEntity.removeProtection(relative);
          }
        }
      }
    }
  }
  for (  ChunkPosition block : toremove) {
    affectedBlocks.remove(block);
  }
  RFTools.logDebug(""String_Node_Str"" + rf);
}",0.9668223150651266
165971,"@SubscribeEvent public void onBlockBreakEvent(BlockEvent.BreakEvent event){
  int id=event.world.provider.dimensionId;
  BlockProtectors blockProtectors=BlockProtectors.getProtectors(event.world);
  Collection<GlobalCoordinate> protectors=blockProtectors.findProtectors(event.x,event.y,event.z,id,2);
  for (  GlobalCoordinate protector : protectors) {
    int cx=protector.getCoordinate().getX();
    int cy=protector.getCoordinate().getY();
    int cz=protector.getCoordinate().getZ();
    TileEntity te=event.world.getTileEntity(cx,cy,cz);
    if (te instanceof BlockProtectorTileEntity) {
      BlockProtectorTileEntity blockProtectorTileEntity=(BlockProtectorTileEntity)te;
      Coordinate relative=blockProtectorTileEntity.absoluteToRelative(event.x,event.y,event.z);
      boolean b=blockProtectorTileEntity.isProtected(relative);
      if (b) {
        if (blockProtectorTileEntity.attemptHarvestProtection()) {
          event.setCanceled(true);
        }
 else {
          blockProtectorTileEntity.removeProtection(relative);
        }
        return;
      }
    }
  }
}","@SubscribeEvent public void onBlockBreakEvent(BlockEvent.BreakEvent event){
  BlockProtectors blockProtectors=BlockProtectors.getProtectors(event.world);
  if (blockProtectors == null) {
    return;
  }
  int id=event.world.provider.dimensionId;
  Collection<GlobalCoordinate> protectors=blockProtectors.findProtectors(event.x,event.y,event.z,id,2);
  for (  GlobalCoordinate protector : protectors) {
    int cx=protector.getCoordinate().getX();
    int cy=protector.getCoordinate().getY();
    int cz=protector.getCoordinate().getZ();
    TileEntity te=event.world.getTileEntity(cx,cy,cz);
    if (te instanceof BlockProtectorTileEntity) {
      BlockProtectorTileEntity blockProtectorTileEntity=(BlockProtectorTileEntity)te;
      Coordinate relative=blockProtectorTileEntity.absoluteToRelative(event.x,event.y,event.z);
      boolean b=blockProtectorTileEntity.isProtected(relative);
      if (b) {
        if (blockProtectorTileEntity.attemptHarvestProtection()) {
          event.setCanceled(true);
        }
 else {
          blockProtectorTileEntity.removeProtection(relative);
        }
        return;
      }
    }
  }
}",0.938996836873023
165972,"private static void renderPlanet(float partialTickTime,WorldClient world,TextureManager renderEngine,Tessellator tessellator,CelestialBodyDescriptor body,float size){
  GL11.glTranslatef(0.0F,0.0F,0.0F);
  GL11.glRotatef(body.getyAngle(),0.0F,1.0F,0.0F);
  float angle=world.provider.calculateCelestialAngle((long)(world.getWorldInfo().getWorldTime() * body.getTimeFactor() + body.getTimeOffset()),partialTickTime);
  GL11.glRotatef(angle * 360.0F,1.0F,0.0F,0.0F);
  renderEngine.bindTexture(locationPlanetPng);
  tessellator.startDrawingQuads();
  tessellator.addVertexWithUV((-size),100.0D,(-size),0.0D,0.0D);
  tessellator.addVertexWithUV(size,100.0D,(-size),1.0D,0.0D);
  tessellator.addVertexWithUV(size,100.0D,size,1.0D,1.0D);
  tessellator.addVertexWithUV((-size),100.0D,size,0.0D,1.0D);
  tessellator.draw();
}","private static void renderPlanet(float partialTickTime,WorldClient world,TextureManager renderEngine,Tessellator tessellator,CelestialBodyDescriptor body,float size){
  GL11.glTranslatef(0.0F,0.0F,0.0F);
  GL11.glRotatef(body.getyAngle(),0.0F,1.0F,0.0F);
  float angle=world.provider.calculateCelestialAngle(world.getWorldInfo().getWorldTime(),partialTickTime);
  angle*=body.getTimeFactor() + body.getTimeOffset();
  GL11.glRotatef(angle * 360.0F,1.0F,0.0F,0.0F);
  renderEngine.bindTexture(locationPlanetPng);
  tessellator.startDrawingQuads();
  tessellator.addVertexWithUV((-size),100.0D,(-size),0.0D,0.0D);
  tessellator.addVertexWithUV(size,100.0D,(-size),1.0D,0.0D);
  tessellator.addVertexWithUV(size,100.0D,size,1.0D,1.0D);
  tessellator.addVertexWithUV((-size),100.0D,size,0.0D,1.0D);
  tessellator.draw();
}",0.9669926650366748
165973,"private static void renderSun(float partialTickTime,WorldClient world,TextureManager renderEngine,Tessellator tessellator,CelestialBodyDescriptor body,float size){
  GL11.glTranslatef(0.0F,0.0F,0.0F);
  GL11.glRotatef(body.getyAngle(),0.0F,1.0F,0.0F);
  float angle=world.provider.calculateCelestialAngle((long)(world.getWorldInfo().getWorldTime() * body.getTimeFactor() + body.getTimeOffset()),partialTickTime);
  GL11.glRotatef(angle * 360.0F,1.0F,0.0F,0.0F);
  renderEngine.bindTexture(locationSunPng);
  tessellator.startDrawingQuads();
  tessellator.addVertexWithUV((-size),100.0D,(-size),0.0D,0.0D);
  tessellator.addVertexWithUV(size,100.0D,(-size),1.0D,0.0D);
  tessellator.addVertexWithUV(size,100.0D,size,1.0D,1.0D);
  tessellator.addVertexWithUV((-size),100.0D,size,0.0D,1.0D);
  tessellator.draw();
}","private static void renderSun(float partialTickTime,WorldClient world,TextureManager renderEngine,Tessellator tessellator,CelestialBodyDescriptor body,float size){
  GL11.glTranslatef(0.0F,0.0F,0.0F);
  GL11.glRotatef(body.getyAngle(),0.0F,1.0F,0.0F);
  float angle=world.provider.calculateCelestialAngle(world.getWorldInfo().getWorldTime(),partialTickTime);
  angle*=body.getTimeFactor() + body.getTimeOffset();
  GL11.glRotatef(angle * 360.0F,1.0F,0.0F,0.0F);
  renderEngine.bindTexture(locationSunPng);
  tessellator.startDrawingQuads();
  tessellator.addVertexWithUV((-size),100.0D,(-size),0.0D,0.0D);
  tessellator.addVertexWithUV(size,100.0D,(-size),1.0D,0.0D);
  tessellator.addVertexWithUV(size,100.0D,size,1.0D,1.0D);
  tessellator.addVertexWithUV((-size),100.0D,size,0.0D,1.0D);
  tessellator.draw();
}",0.9667487684729064
165974,"public void generate(World world,int chunkX,int chunkZ,Block[] ablock,byte[] ameta){
  BlockMeta[] blocks=large ? provider.dimensionInformation.getHugeLiquidSphereBlocks() : provider.dimensionInformation.getLiquidSphereBlocks();
  Block[] fluids=large ? provider.dimensionInformation.getHugeLiquidSphereFluids() : provider.dimensionInformation.getLiquidSphereFluids();
  for (int cx=-r; cx <= r; cx++) {
    for (int cz=-r; cz <= r; cz++) {
      Random random=new Random((world.getSeed() + (chunkX + cx)) * 37 + (chunkZ + cz) * 5 + 113);
      random.nextFloat();
      if (random.nextFloat() < .05f) {
        int x=cx * 16 + random.nextInt(16);
        int y=40 + random.nextInt(40);
        int z=cz * 16 + random.nextInt(16);
        int radius=random.nextInt(large ? 20 : 6) + (large ? 10 : 4);
        int index=0;
        if (blocks.length > 1) {
          index=random.nextInt(blocks.length);
        }
        int flindex=0;
        if (fluids.length > 1) {
          flindex=random.nextInt(fluids.length);
        }
        fillSphere(ablock,ameta,x,y,z,radius,blocks[index],fluids[flindex]);
      }
    }
  }
}","public void generate(World world,int chunkX,int chunkZ,Block[] ablock,byte[] ameta){
  BlockMeta[] blocks=large ? provider.dimensionInformation.getHugeLiquidSphereBlocks() : provider.dimensionInformation.getLiquidSphereBlocks();
  Block[] fluids=large ? provider.dimensionInformation.getHugeLiquidSphereFluids() : provider.dimensionInformation.getLiquidSphereFluids();
  for (int cx=-r; cx <= r; cx++) {
    for (int cz=-r; cz <= r; cz++) {
      Random random=new Random((world.getSeed() + (chunkX + cx)) * 37 + (chunkZ + cz) * 5 + 113);
      random.nextFloat();
      if (random.nextFloat() < .05f) {
        int x=cx * 16 + random.nextInt(16);
        int y=40 + random.nextInt(40);
        int z=cz * 16 + random.nextInt(16);
        int radius=random.nextInt(large ? 20 : 6) + (large ? 10 : 4);
        BlockMeta block=BlockMeta.STONE;
        if (blocks.length > 1) {
          block=blocks[random.nextInt(blocks.length)];
        }
 else         if (blocks.length == 1) {
          block=blocks[0];
        }
        Block fluid=Blocks.water;
        if (fluids.length > 1) {
          fluid=fluids[random.nextInt(fluids.length)];
        }
 else         if (fluids.length == 1) {
          fluid=fluids[0];
        }
        fillSphere(ablock,ameta,x,y,z,radius,block,fluid);
      }
    }
  }
}",0.7869798104655954
165975,"public void generate(World world,int chunkX,int chunkZ,Block[] ablock,byte[] ameta){
  BlockMeta[] blocks=large ? provider.dimensionInformation.getHugeSphereBlocks() : provider.dimensionInformation.getSphereBlocks();
  for (int cx=-r; cx <= r; cx++) {
    for (int cz=-r; cz <= r; cz++) {
      Random random=new Random((world.getSeed() + (chunkX + cx)) * 113 + (chunkZ + cz) * 31 + 77);
      random.nextFloat();
      if (random.nextFloat() < .05f) {
        int x=cx * 16 + random.nextInt(16);
        int y=40 + random.nextInt(40);
        int z=cz * 16 + random.nextInt(16);
        int radius=random.nextInt(large ? 20 : 6) + (large ? 10 : 4);
        int index=0;
        if (blocks.length > 1) {
          index=random.nextInt(blocks.length);
        }
        fillSphere(ablock,ameta,x,y,z,radius,blocks[index]);
      }
    }
  }
}","public void generate(World world,int chunkX,int chunkZ,Block[] ablock,byte[] ameta){
  BlockMeta[] blocks=large ? provider.dimensionInformation.getHugeSphereBlocks() : provider.dimensionInformation.getSphereBlocks();
  for (int cx=-r; cx <= r; cx++) {
    for (int cz=-r; cz <= r; cz++) {
      Random random=new Random((world.getSeed() + (chunkX + cx)) * 113 + (chunkZ + cz) * 31 + 77);
      random.nextFloat();
      if (random.nextFloat() < .05f) {
        int x=cx * 16 + random.nextInt(16);
        int y=40 + random.nextInt(40);
        int z=cz * 16 + random.nextInt(16);
        int radius=random.nextInt(large ? 20 : 6) + (large ? 10 : 4);
        BlockMeta block=BlockMeta.STONE;
        if (blocks.length > 1) {
          block=blocks[random.nextInt(blocks.length)];
        }
 else         if (blocks.length == 1) {
          block=blocks[0];
        }
        fillSphere(ablock,ameta,x,y,z,radius,block);
      }
    }
  }
}",0.835300730747611
165976,"@Override public void onBlockClicked(World world,int x,int y,int z,EntityPlayer player){
  if (world.isRemote) {
    ScreenHitTileEntity screenHitTileEntity=(ScreenHitTileEntity)world.getTileEntity(x,y,z);
    int dx=screenHitTileEntity.getDx();
    int dy=screenHitTileEntity.getDy();
    int dz=screenHitTileEntity.getDz();
    Block block=world.getBlock(x + dx,y + dy,z + dz);
    if (block != ScreenSetup.screenBlock) {
      return;
    }
    MovingObjectPosition mouseOver=Minecraft.getMinecraft().objectMouseOver;
    PacketHandler.INSTANCE.sendToServer(new PacketServerCommand(x + dx,y + dy,z + dz,ScreenTileEntity.CMD_CLICK,new Argument(""String_Node_Str"",mouseOver.hitVec.xCoord - x - dx),new Argument(""String_Node_Str"",mouseOver.hitVec.yCoord - y - dy),new Argument(""String_Node_Str"",mouseOver.hitVec.zCoord - z - dz),new Argument(""String_Node_Str"",mouseOver.sideHit)));
  }
}","@Override public void onBlockClicked(World world,int x,int y,int z,EntityPlayer player){
  if (world.isRemote) {
    ScreenHitTileEntity screenHitTileEntity=(ScreenHitTileEntity)world.getTileEntity(x,y,z);
    int dx=screenHitTileEntity.getDx();
    int dy=screenHitTileEntity.getDy();
    int dz=screenHitTileEntity.getDz();
    Block block=world.getBlock(x + dx,y + dy,z + dz);
    if (block != ScreenSetup.screenBlock) {
      return;
    }
    MovingObjectPosition mouseOver=Minecraft.getMinecraft().objectMouseOver;
    ScreenTileEntity screenTileEntity=(ScreenTileEntity)world.getTileEntity(x + dx,y + dy,z + dz);
    screenTileEntity.hitScreenClient(mouseOver.hitVec.xCoord - x - dx,mouseOver.hitVec.yCoord - y - dy,mouseOver.hitVec.zCoord - z - dz,mouseOver.sideHit);
  }
}",0.6406718656268746
165977,"@Override public Widget mouseClick(Window window,int x,int y,int button){
  if (isEnabledAndVisible()) {
    int index=choiceList.indexOf(currentChoice);
    index++;
    if (index >= choiceList.size()) {
      index=0;
    }
    currentChoice=choiceList.get(index);
    setText(currentChoice);
    fireChoiceEvents(currentChoice);
  }
  return null;
}","@Override public Widget mouseClick(Window window,int x,int y,int button){
  if (isEnabledAndVisible()) {
    if (choiceList.isEmpty()) {
      return null;
    }
    int index=choiceList.indexOf(currentChoice);
    index++;
    if (index >= choiceList.size()) {
      index=0;
    }
    currentChoice=choiceList.get(index);
    setText(currentChoice);
    fireChoiceEvents(currentChoice);
  }
  return null;
}",0.9250985545335084
165978,"/** 
 * Break a block in the world, convert it to an entity and remember all the settings for this block in the itemstack.
 * @param world
 * @param x
 * @param y
 * @param z
 */
protected void breakAndRemember(World world,int x,int y,int z){
  if (!world.isRemote) {
    world.setBlockToAir(x,y,z);
  }
}","/** 
 * Break a block in the world, convert it to an entity and remember all the settings for this block in the itemstack.
 */
protected void breakAndRemember(World world,EntityPlayer player,int x,int y,int z){
  if (!world.isRemote) {
    harvestBlock(world,player,x,y,z,world.getBlockMetadata(x,y,z));
  }
}",0.8045602605863192
165979,"/** 
 * In your onBlockActivated implementation you can use this method to get the default wrench usage (rotate/pick up with remembering).
 * @param world
 * @param x
 * @param y
 * @param z
 * @param player
 * @return
 */
protected boolean onBlockActivatedDefaultWrench(World world,int x,int y,int z,EntityPlayer player){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    rotateBlock(world,x,y,z);
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}","/** 
 * In your onBlockActivated implementation you can use this method to get the default wrench usage (rotate/pick up with remembering).
 * @param world
 * @param x
 * @param y
 * @param z
 * @param player
 * @return
 */
protected boolean onBlockActivatedDefaultWrench(World world,int x,int y,int z,EntityPlayer player){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    rotateBlock(world,x,y,z);
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,player,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}",0.9944838455476752
165980,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    if (world.isRemote) {
      EndergenicTileEntity endergenicTileEntity=(EndergenicTileEntity)world.getTileEntity(x,y,z);
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
      endergenicTileEntity.useWrench(player);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    if (world.isRemote) {
      EndergenicTileEntity endergenicTileEntity=(EndergenicTileEntity)world.getTileEntity(x,y,z);
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
      endergenicTileEntity.useWrench(player);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,player,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}",0.9946277820414428
165981,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    ScreenTileEntity screenTileEntity=(ScreenTileEntity)world.getTileEntity(x,y,z);
    if (screenTileEntity.isTransparent() && screenTileEntity.isLarge()) {
      screenTileEntity.setTransparent(false);
    }
 else     if (screenTileEntity.isLarge()) {
      screenTileEntity.setLarge(false);
    }
 else     if (screenTileEntity.isTransparent()) {
      screenTileEntity.setLarge(true);
    }
 else {
      screenTileEntity.setTransparent(true);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,x,y,z);
    return true;
  }
 else {
    ItemStack itemStack=player.getHeldItem();
    if (itemStack != null && itemStack.getItem() == Items.dye) {
      int damage=itemStack.getItemDamage();
      if (damage < 0) {
        damage=0;
      }
 else       if (damage > 15) {
        damage=15;
      }
      int color=ItemDye.field_150922_c[damage];
      ScreenTileEntity screenTileEntity=(ScreenTileEntity)world.getTileEntity(x,y,z);
      screenTileEntity.setColor(color);
      return true;
    }
 else {
      return openGui(world,x,y,z,player);
    }
  }
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    ScreenTileEntity screenTileEntity=(ScreenTileEntity)world.getTileEntity(x,y,z);
    if (screenTileEntity.isTransparent() && screenTileEntity.isLarge()) {
      screenTileEntity.setTransparent(false);
    }
 else     if (screenTileEntity.isLarge()) {
      screenTileEntity.setLarge(false);
    }
 else     if (screenTileEntity.isTransparent()) {
      screenTileEntity.setLarge(true);
    }
 else {
      screenTileEntity.setTransparent(true);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,player,x,y,z);
    return true;
  }
 else {
    ItemStack itemStack=player.getHeldItem();
    if (itemStack != null && itemStack.getItem() == Items.dye) {
      int damage=itemStack.getItemDamage();
      if (damage < 0) {
        damage=0;
      }
 else       if (damage > 15) {
        damage=15;
      }
      int color=ItemDye.field_150922_c[damage];
      ScreenTileEntity screenTileEntity=(ScreenTileEntity)world.getTileEntity(x,y,z);
      screenTileEntity.setColor(color);
      return true;
    }
 else {
      return openGui(world,x,y,z,player);
    }
  }
}",0.997394864160774
165982,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sidex,float sidey,float sidez){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    composeDecomposeShield(world,x,y,z);
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sidex,float sidey,float sidez){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    composeDecomposeShield(world,x,y,z);
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,player,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}",0.9924160346695556
165983,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    if (world.isRemote) {
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
    }
 else {
      SpaceChamberControllerTileEntity chamberControllerTileEntity=(SpaceChamberControllerTileEntity)world.getTileEntity(x,y,z);
      chamberControllerTileEntity.createChamber(player);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    if (world.isRemote) {
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
    }
 else {
      SpaceChamberControllerTileEntity chamberControllerTileEntity=(SpaceChamberControllerTileEntity)world.getTileEntity(x,y,z);
      chamberControllerTileEntity.createChamber(player);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,player,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}",0.995053003533569
165984,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    if (world.isRemote) {
      MatterBeamerTileEntity matterBeamerTileEntity=(MatterBeamerTileEntity)world.getTileEntity(x,y,z);
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
      matterBeamerTileEntity.useWrench(player);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    if (world.isRemote) {
      MatterBeamerTileEntity matterBeamerTileEntity=(MatterBeamerTileEntity)world.getTileEntity(x,y,z);
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
      matterBeamerTileEntity.useWrench(player);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,player,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}",0.9946929492039424
165985,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    if (world.isRemote) {
      SpawnerTileEntity spawnerTileEntity=(SpawnerTileEntity)world.getTileEntity(x,y,z);
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
      spawnerTileEntity.useWrench(player);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float sx,float sy,float sz){
  WrenchUsage wrenchUsed=testWrenchUsage(x,y,z,player);
  if (wrenchUsed == WrenchUsage.NORMAL) {
    if (world.isRemote) {
      SpawnerTileEntity spawnerTileEntity=(SpawnerTileEntity)world.getTileEntity(x,y,z);
      world.playSound(x,y,z,""String_Node_Str"",1.0f,1.0f,false);
      spawnerTileEntity.useWrench(player);
    }
    return true;
  }
 else   if (wrenchUsed == WrenchUsage.SNEAKING) {
    breakAndRemember(world,player,x,y,z);
    return true;
  }
 else {
    return openGui(world,x,y,z,player);
  }
}",0.9945269741985928
165986,"public PlayerName(ByteBuf buf){
  byte[] dst=new byte[buf.readInt()];
  buf.readBytes(dst);
  name=new String(dst);
}","public PlayerName(ByteBuf buf){
  name=NetworkTools.readString(buf);
}",0.5561497326203209
165987,"@Override public void toBytes(ByteBuf buf){
  buf.writeInt(getName().length());
  buf.writeBytes(getName().getBytes());
}","@Override public void toBytes(ByteBuf buf){
  NetworkTools.writeString(buf,getName());
}",0.6411483253588517
165988,"@Override public void toBytes(ByteBuf buf){
  if (coordinate == null) {
    buf.writeInt(-1);
    buf.writeInt(-1);
    buf.writeInt(-1);
  }
 else {
    buf.writeInt(coordinate.getX());
    buf.writeInt(coordinate.getY());
    buf.writeInt(coordinate.getZ());
  }
  buf.writeInt(dimension);
  buf.writeInt(getName().length());
  buf.writeBytes(getName().getBytes());
}","@Override public void toBytes(ByteBuf buf){
  if (coordinate == null) {
    buf.writeInt(-1);
    buf.writeInt(-1);
    buf.writeInt(-1);
  }
 else {
    buf.writeInt(coordinate.getX());
    buf.writeInt(coordinate.getY());
    buf.writeInt(coordinate.getZ());
  }
  buf.writeInt(dimension);
  NetworkTools.writeString(buf,getName());
}",0.8624113475177305
165989,"@Override public void toBytes(ByteBuf buf){
  super.toBytes(buf);
  buf.writeInt(getDimensionName().length());
  buf.writeBytes(getDimensionName().getBytes());
}","@Override public void toBytes(ByteBuf buf){
  super.toBytes(buf);
  NetworkTools.writeString(buf,getDimensionName());
}",0.7
165990,"@Override public void toBytes(ByteBuf buf){
  buf.writeInt(coordinate.getX());
  buf.writeInt(coordinate.getY());
  buf.writeInt(coordinate.getZ());
  buf.writeInt(getName().length());
  buf.writeBytes(getName().getBytes());
  teleportDestination.toBytes(buf);
}","@Override public void toBytes(ByteBuf buf){
  buf.writeInt(coordinate.getX());
  buf.writeInt(coordinate.getY());
  buf.writeInt(coordinate.getZ());
  NetworkTools.writeString(buf,getName());
  teleportDestination.toBytes(buf);
}",0.7006109979633401
165991,"public DimensionInformation(String name,DimensionDescriptor descriptor,ByteBuf buf){
  this.name=name;
  this.descriptor=descriptor;
  terrainType=ByteBufTools.readEnum(buf,TerrainType.values());
  ByteBufTools.readEnumCollection(buf,featureTypes,FeatureType.values());
  ByteBufTools.readEnumCollection(buf,structureTypes,StructureType.values());
  ByteBufTools.readEnumCollection(buf,effectTypes,EffectType.values());
  biomes.clear();
  int size=buf.readInt();
  for (int i=0; i < size; i++) {
    biomes.add(BiomeGenBase.getBiome(buf.readInt()));
  }
  controllerType=ByteBufTools.readEnum(buf,ControllerType.values());
  digitString=ByteBufTools.readString(buf);
  forcedDimensionSeed=buf.readLong();
  baseSeed=buf.readLong();
  worldVersion=buf.readInt();
  Block block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  int meta=buf.readInt();
  baseBlockForTerrain=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  tendrilBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  sphereBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  liquidSphereBlock=new BlockMeta(block,meta);
  liquidSphereFluid=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  canyonBlock=new BlockMeta(block,meta);
  fluidForTerrain=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  size=buf.readInt();
  List<BlockMeta> blocksMeta=new ArrayList<BlockMeta>();
  for (int i=0; i < size; i++) {
    Block b=(Block)Block.blockRegistry.getObjectById(buf.readInt());
    int m=buf.readInt();
    blocksMeta.add(new BlockMeta(b,m));
  }
  extraOregen=blocksMeta.toArray(new BlockMeta[blocksMeta.size()]);
  List<Block> blocks=new ArrayList<Block>();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    blocks.add((Block)Block.blockRegistry.getObjectById(buf.readInt()));
  }
  fluidsForLakes=blocks.toArray(new Block[blocks.size()]);
  peaceful=buf.readBoolean();
  shelter=buf.readBoolean();
  respawnHere=buf.readBoolean();
  celestialAngle=ByteBufTools.readFloat(buf);
  timeSpeed=ByteBufTools.readFloat(buf);
  probeCounter=buf.readInt();
  actualRfCost=buf.readInt();
  skyDescriptor=new SkyDescriptor.Builder().fromBytes(buf).build();
  calculateCelestialBodyDescriptors();
  weatherDescriptor=new WeatherDescriptor.Builder().fromBytes(buf).build();
  extraMobs.clear();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    String className=ByteBufTools.readString(buf);
    try {
      Class<? extends EntityLiving> c=(Class<? extends EntityLiving>)Class.forName(className);
      int chance=buf.readInt();
      int minGroup=buf.readInt();
      int maxGroup=buf.readInt();
      int maxLoaded=buf.readInt();
      MobDescriptor mob=new MobDescriptor(null,c,chance,minGroup,maxGroup,maxLoaded);
      extraMobs.add(mob);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  size=buf.readInt();
  dimensionTypes=new String[size];
  for (int i=0; i < size; i++) {
    dimensionTypes[i]=ByteBufTools.readString(buf);
  }
  setupBiomeMapping();
}","public DimensionInformation(String name,DimensionDescriptor descriptor,ByteBuf buf){
  this.name=name;
  this.descriptor=descriptor;
  terrainType=NetworkTools.readEnum(buf,TerrainType.values());
  NetworkTools.readEnumCollection(buf,featureTypes,FeatureType.values());
  NetworkTools.readEnumCollection(buf,structureTypes,StructureType.values());
  NetworkTools.readEnumCollection(buf,effectTypes,EffectType.values());
  biomes.clear();
  int size=buf.readInt();
  for (int i=0; i < size; i++) {
    biomes.add(BiomeGenBase.getBiome(buf.readInt()));
  }
  controllerType=NetworkTools.readEnum(buf,ControllerType.values());
  digitString=NetworkTools.readString(buf);
  forcedDimensionSeed=buf.readLong();
  baseSeed=buf.readLong();
  worldVersion=buf.readInt();
  Block block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  int meta=buf.readInt();
  baseBlockForTerrain=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  tendrilBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  sphereBlock=new BlockMeta(block,meta);
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  liquidSphereBlock=new BlockMeta(block,meta);
  liquidSphereFluid=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  block=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  meta=buf.readInt();
  canyonBlock=new BlockMeta(block,meta);
  fluidForTerrain=(Block)Block.blockRegistry.getObjectById(buf.readInt());
  size=buf.readInt();
  List<BlockMeta> blocksMeta=new ArrayList<BlockMeta>();
  for (int i=0; i < size; i++) {
    Block b=(Block)Block.blockRegistry.getObjectById(buf.readInt());
    int m=buf.readInt();
    blocksMeta.add(new BlockMeta(b,m));
  }
  extraOregen=blocksMeta.toArray(new BlockMeta[blocksMeta.size()]);
  List<Block> blocks=new ArrayList<Block>();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    blocks.add((Block)Block.blockRegistry.getObjectById(buf.readInt()));
  }
  fluidsForLakes=blocks.toArray(new Block[blocks.size()]);
  peaceful=buf.readBoolean();
  shelter=buf.readBoolean();
  respawnHere=buf.readBoolean();
  celestialAngle=NetworkTools.readFloat(buf);
  timeSpeed=NetworkTools.readFloat(buf);
  probeCounter=buf.readInt();
  actualRfCost=buf.readInt();
  skyDescriptor=new SkyDescriptor.Builder().fromBytes(buf).build();
  calculateCelestialBodyDescriptors();
  weatherDescriptor=new WeatherDescriptor.Builder().fromBytes(buf).build();
  extraMobs.clear();
  size=buf.readInt();
  for (int i=0; i < size; i++) {
    String className=NetworkTools.readString(buf);
    try {
      Class<? extends EntityLiving> c=(Class<? extends EntityLiving>)Class.forName(className);
      int chance=buf.readInt();
      int minGroup=buf.readInt();
      int maxGroup=buf.readInt();
      int maxLoaded=buf.readInt();
      MobDescriptor mob=new MobDescriptor(null,c,chance,minGroup,maxGroup,maxLoaded);
      extraMobs.add(mob);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  size=buf.readInt();
  dimensionTypes=new String[size];
  for (int i=0; i < size; i++) {
    dimensionTypes[i]=NetworkTools.readString(buf);
  }
  setupBiomeMapping();
}",0.9787104622871048
165992,"public void toBytes(ByteBuf buf){
  ByteBufTools.writeEnum(buf,terrainType,TerrainType.TERRAIN_VOID);
  ByteBufTools.writeEnumCollection(buf,featureTypes);
  ByteBufTools.writeEnumCollection(buf,structureTypes);
  ByteBufTools.writeEnumCollection(buf,effectTypes);
  buf.writeInt(biomes.size());
  for (  BiomeGenBase entry : biomes) {
    buf.writeInt(entry.biomeID);
  }
  ByteBufTools.writeEnum(buf,controllerType,ControllerType.CONTROLLER_DEFAULT);
  ByteBufTools.writeString(buf,digitString);
  buf.writeLong(forcedDimensionSeed);
  buf.writeLong(baseSeed);
  buf.writeInt(worldVersion);
  buf.writeInt(Block.blockRegistry.getIDForObject(baseBlockForTerrain.getBlock()));
  buf.writeInt(baseBlockForTerrain.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(tendrilBlock.getBlock()));
  buf.writeInt(tendrilBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(sphereBlock.getBlock()));
  buf.writeInt(sphereBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(liquidSphereBlock.getBlock()));
  buf.writeInt(liquidSphereBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(liquidSphereFluid));
  buf.writeInt(Block.blockRegistry.getIDForObject(canyonBlock.getBlock()));
  buf.writeInt(canyonBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(fluidForTerrain));
  buf.writeInt(extraOregen.length);
  for (  BlockMeta block : extraOregen) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block.getBlock()));
    buf.writeInt(block.getMeta());
  }
  buf.writeInt(fluidsForLakes.length);
  for (  Block block : fluidsForLakes) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block));
  }
  buf.writeBoolean(peaceful);
  buf.writeBoolean(shelter);
  buf.writeBoolean(respawnHere);
  ByteBufTools.writeFloat(buf,celestialAngle);
  ByteBufTools.writeFloat(buf,timeSpeed);
  buf.writeInt(probeCounter);
  buf.writeInt(actualRfCost);
  skyDescriptor.toBytes(buf);
  weatherDescriptor.toBytes(buf);
  buf.writeInt(extraMobs.size());
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() != null) {
        ByteBufTools.writeString(buf,mob.getEntityClass().getName());
        buf.writeInt(mob.getSpawnChance());
        buf.writeInt(mob.getMinGroup());
        buf.writeInt(mob.getMaxGroup());
        buf.writeInt(mob.getMaxLoaded());
      }
    }
  }
  buf.writeInt(dimensionTypes.length);
  for (  String type : dimensionTypes) {
    ByteBufTools.writeString(buf,type);
  }
}","public void toBytes(ByteBuf buf){
  NetworkTools.writeEnum(buf,terrainType,TerrainType.TERRAIN_VOID);
  NetworkTools.writeEnumCollection(buf,featureTypes);
  NetworkTools.writeEnumCollection(buf,structureTypes);
  NetworkTools.writeEnumCollection(buf,effectTypes);
  buf.writeInt(biomes.size());
  for (  BiomeGenBase entry : biomes) {
    buf.writeInt(entry.biomeID);
  }
  NetworkTools.writeEnum(buf,controllerType,ControllerType.CONTROLLER_DEFAULT);
  NetworkTools.writeString(buf,digitString);
  buf.writeLong(forcedDimensionSeed);
  buf.writeLong(baseSeed);
  buf.writeInt(worldVersion);
  buf.writeInt(Block.blockRegistry.getIDForObject(baseBlockForTerrain.getBlock()));
  buf.writeInt(baseBlockForTerrain.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(tendrilBlock.getBlock()));
  buf.writeInt(tendrilBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(sphereBlock.getBlock()));
  buf.writeInt(sphereBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(liquidSphereBlock.getBlock()));
  buf.writeInt(liquidSphereBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(liquidSphereFluid));
  buf.writeInt(Block.blockRegistry.getIDForObject(canyonBlock.getBlock()));
  buf.writeInt(canyonBlock.getMeta());
  buf.writeInt(Block.blockRegistry.getIDForObject(fluidForTerrain));
  buf.writeInt(extraOregen.length);
  for (  BlockMeta block : extraOregen) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block.getBlock()));
    buf.writeInt(block.getMeta());
  }
  buf.writeInt(fluidsForLakes.length);
  for (  Block block : fluidsForLakes) {
    buf.writeInt(Block.blockRegistry.getIDForObject(block));
  }
  buf.writeBoolean(peaceful);
  buf.writeBoolean(shelter);
  buf.writeBoolean(respawnHere);
  NetworkTools.writeFloat(buf,celestialAngle);
  NetworkTools.writeFloat(buf,timeSpeed);
  buf.writeInt(probeCounter);
  buf.writeInt(actualRfCost);
  skyDescriptor.toBytes(buf);
  weatherDescriptor.toBytes(buf);
  buf.writeInt(extraMobs.size());
  for (  MobDescriptor mob : extraMobs) {
    if (mob != null) {
      if (mob.getEntityClass() != null) {
        NetworkTools.writeString(buf,mob.getEntityClass().getName());
        buf.writeInt(mob.getSpawnChance());
        buf.writeInt(mob.getMinGroup());
        buf.writeInt(mob.getMaxGroup());
        buf.writeInt(mob.getMaxLoaded());
      }
    }
  }
  buf.writeInt(dimensionTypes.length);
  for (  String type : dimensionTypes) {
    NetworkTools.writeString(buf,type);
  }
}",0.9719887955182072
165993,"@Override public void toBytes(ByteBuf buf){
  buf.writeInt(dimlets.size());
  for (  Map.Entry<Integer,DimletKey> me : dimlets.entrySet()) {
    buf.writeInt(me.getKey());
    DimletKey key=me.getValue();
    String name=key.getName();
    if (name == null) {
      buf.writeInt(-1);
    }
 else     if (name.isEmpty()) {
      buf.writeInt(0);
    }
 else {
      buf.writeInt(name.length());
      buf.writeBytes(name.getBytes());
    }
    buf.writeInt(key.getType().ordinal());
  }
}","@Override public void toBytes(ByteBuf buf){
  buf.writeInt(dimlets.size());
  for (  Map.Entry<Integer,DimletKey> me : dimlets.entrySet()) {
    DimletKey key=me.getValue();
    buf.writeInt(me.getKey());
    NetworkTools.writeString(buf,key.getName());
    buf.writeInt(key.getType().ordinal());
  }
}",0.5171102661596958
165994,"@Override public void fromBytes(ByteBuf buf){
  int size=buf.readInt();
  dimlets=new HashMap<Integer,DimletKey>();
  for (int i=0; i < size; i++) {
    int id=buf.readInt();
    int s=buf.readInt();
    String name;
    if (s == -1) {
      name=null;
    }
 else     if (s == 0) {
      name=""String_Node_Str"";
    }
 else {
      byte[] dst=new byte[s];
      buf.readBytes(dst);
      name=new String(dst);
    }
    int typeOrdinal=buf.readInt();
    try {
      dimlets.put(id,new DimletKey(DimletType.values()[typeOrdinal],name));
    }
 catch (    Exception e) {
      RFTools.logError(""String_Node_Str"" + name + ""String_Node_Str""+ i+ ""String_Node_Str""+ size+ ""String_Node_Str"");
      throw new RuntimeException(e);
    }
  }
}","@Override public void fromBytes(ByteBuf buf){
  int size=buf.readInt();
  dimlets=new HashMap<Integer,DimletKey>();
  for (int i=0; i < size; i++) {
    int id=buf.readInt();
    String name=NetworkTools.readString(buf);
    int typeOrdinal=buf.readInt();
    try {
      dimlets.put(id,new DimletKey(DimletType.values()[typeOrdinal],name));
    }
 catch (    Exception e) {
      RFTools.logError(""String_Node_Str"" + name + ""String_Node_Str""+ i+ ""String_Node_Str""+ size+ ""String_Node_Str"");
      throw new RuntimeException(e);
    }
  }
}",0.7884012539184952
165995,"@Override public void toBytes(ByteBuf buf){
  buf.writeInt(dimensions.size());
  for (  Map.Entry<Integer,DimensionDescriptor> me : dimensions.entrySet()) {
    buf.writeInt(me.getKey());
    NBTTagCompound tagCompound=new NBTTagCompound();
    me.getValue().writeToNBT(tagCompound);
    PacketBuffer buffer=new PacketBuffer(buf);
    try {
      buffer.writeNBTTagCompoundToBuffer(tagCompound);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  buf.writeInt(dimensionInformation.size());
  for (  Map.Entry<Integer,DimensionInformation> me : dimensionInformation.entrySet()) {
    buf.writeInt(me.getKey());
    DimensionInformation dimInfo=me.getValue();
    buf.writeInt(dimInfo.getName().length());
    buf.writeBytes(dimInfo.getName().getBytes());
    dimInfo.toBytes(buf);
  }
}","@Override public void toBytes(ByteBuf buf){
  buf.writeInt(dimensions.size());
  for (  Map.Entry<Integer,DimensionDescriptor> me : dimensions.entrySet()) {
    buf.writeInt(me.getKey());
    NBTTagCompound tagCompound=new NBTTagCompound();
    me.getValue().writeToNBT(tagCompound);
    PacketBuffer buffer=new PacketBuffer(buf);
    try {
      buffer.writeNBTTagCompoundToBuffer(tagCompound);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  buf.writeInt(dimensionInformation.size());
  for (  Map.Entry<Integer,DimensionInformation> me : dimensionInformation.entrySet()) {
    buf.writeInt(me.getKey());
    DimensionInformation dimInfo=me.getValue();
    NetworkTools.writeString(buf,dimInfo.getName());
    dimInfo.toBytes(buf);
  }
}",0.9383343928798474
165996,"@Override public void fromBytes(ByteBuf buf){
  int size=buf.readInt();
  dimensions=new HashMap<Integer,DimensionDescriptor>();
  for (int i=0; i < size; i++) {
    int id=buf.readInt();
    PacketBuffer buffer=new PacketBuffer(buf);
    NBTTagCompound tagCompound;
    try {
      tagCompound=buffer.readNBTTagCompoundFromBuffer();
    }
 catch (    IOException e) {
      e.printStackTrace();
      return;
    }
    DimensionDescriptor descriptor=new DimensionDescriptor(tagCompound);
    dimensions.put(id,descriptor);
  }
  size=buf.readInt();
  dimensionInformation=new HashMap<Integer,DimensionInformation>();
  for (int i=0; i < size; i++) {
    int id=buf.readInt();
    byte[] dst=new byte[buf.readInt()];
    buf.readBytes(dst);
    String name=new String(dst);
    DimensionInformation dimInfo=new DimensionInformation(name,dimensions.get(id),buf);
    dimensionInformation.put(id,dimInfo);
  }
}","@Override public void fromBytes(ByteBuf buf){
  int size=buf.readInt();
  dimensions=new HashMap<Integer,DimensionDescriptor>();
  for (int i=0; i < size; i++) {
    int id=buf.readInt();
    PacketBuffer buffer=new PacketBuffer(buf);
    NBTTagCompound tagCompound;
    try {
      tagCompound=buffer.readNBTTagCompoundFromBuffer();
    }
 catch (    IOException e) {
      e.printStackTrace();
      return;
    }
    DimensionDescriptor descriptor=new DimensionDescriptor(tagCompound);
    dimensions.put(id,descriptor);
  }
  size=buf.readInt();
  dimensionInformation=new HashMap<Integer,DimensionInformation>();
  for (int i=0; i < size; i++) {
    int id=buf.readInt();
    String name=NetworkTools.readString(buf);
    DimensionInformation dimInfo=new DimensionInformation(name,dimensions.get(id),buf);
    dimensionInformation.put(id,dimInfo);
  }
}",0.8953027730616865
165997,"/** 
 * Set the dimlet key on a known dimlet item.
 */
public static void setDimletKey(DimletKey key,ItemStack itemStack){
  NBTTagCompound tagCompound=new NBTTagCompound();
  tagCompound.setString(""String_Node_Str"",key.getType().dimletType.getOpcode());
  tagCompound.setString(""String_Node_Str"",key.getName());
  itemStack.setTagCompound(tagCompound);
  DimletMapping mapping=DimletMapping.getInstance();
  if (mapping != null) {
    itemStack.setItemDamage(mapping.getId(key));
  }
}","/** 
 * Set the dimlet key on a known dimlet item.
 */
public static void setDimletKey(DimletKey key,ItemStack itemStack){
  NBTTagCompound tagCompound=new NBTTagCompound();
  tagCompound.setString(""String_Node_Str"",key.getType().dimletType.getOpcode());
  tagCompound.setString(""String_Node_Str"",key.getName());
  itemStack.setTagCompound(tagCompound);
  DimletMapping mapping=DimletMapping.getInstance();
  if (mapping != null) {
    Integer id=mapping.getId(key);
    if (id != null) {
      itemStack.setItemDamage(id);
    }
  }
}",0.8854064642507345
165998,"/** 
 * Set the dimlet key on a known dimlet item.
 */
public static void setDimletKey(DimletKey key,ItemStack itemStack){
  NBTTagCompound tagCompound=new NBTTagCompound();
  tagCompound.setString(""String_Node_Str"",key.getType().dimletType.getOpcode());
  tagCompound.setString(""String_Node_Str"",key.getName());
  itemStack.setTagCompound(tagCompound);
  DimletMapping mapping=DimletMapping.getInstance();
  itemStack.setItemDamage(mapping.getId(key));
}","/** 
 * Set the dimlet key on a known dimlet item.
 */
public static void setDimletKey(DimletKey key,ItemStack itemStack){
  NBTTagCompound tagCompound=new NBTTagCompound();
  tagCompound.setString(""String_Node_Str"",key.getType().dimletType.getOpcode());
  tagCompound.setString(""String_Node_Str"",key.getName());
  itemStack.setTagCompound(tagCompound);
  DimletMapping mapping=DimletMapping.getInstance();
  if (mapping != null) {
    itemStack.setItemDamage(mapping.getId(key));
  }
}",0.967056323060574
165999,"@Override protected void checkStateServer(){
  if (!isValid()) {
    counter=1;
    return;
  }
  counter--;
  if (counter > 0) {
    return;
  }
  counter=20;
  TileEntity tileEntity=worldObj.getTileEntity(monitorX,monitorY,monitorZ);
  if (!(tileEntity instanceof IFluidHandler)) {
    setInvalid();
    return;
  }
  IFluidHandler handler=(IFluidHandler)tileEntity;
  FluidTankInfo[] tankInfo=handler.getTankInfo(ForgeDirection.DOWN);
  long stored=0;
  long maxContents=0;
  if (tankInfo.length > 0) {
    if (tankInfo[0].fluid != null) {
      stored=tankInfo[0].fluid.amount;
    }
    maxContents=tankInfo[0].capacity;
  }
  int ratio=0;
  boolean alarm=false;
  if (maxContents > 0) {
    ratio=(int)(1 + (stored * 5) / maxContents);
    if (ratio < 1) {
      ratio=1;
    }
 else     if (ratio > 5) {
      ratio=5;
    }
switch (alarmMode) {
case MODE_OFF:
      alarm=false;
    break;
case MODE_LESS:
  alarm=((stored * 100 / maxContents) < alarmLevel);
break;
case MODE_MORE:
alarm=((stored * 100 / maxContents) > alarmLevel);
break;
}
}
Boolean v=inAlarm.getValue();
boolean alarmValue=v == null ? false : v;
if (getFluidLevel() != ratio || alarm != alarmValue) {
fluidlevel.setValue(ratio);
if (alarmValue != alarm) {
inAlarm.setValue(alarm);
}
notifyBlockUpdate();
}
}","@Override protected void checkStateServer(){
  if (!isValid()) {
    counter=1;
    return;
  }
  counter--;
  if (counter > 0) {
    return;
  }
  counter=20;
  TileEntity tileEntity=worldObj.getTileEntity(monitorX,monitorY,monitorZ);
  if (!(tileEntity instanceof IFluidHandler)) {
    setInvalid();
    return;
  }
  IFluidHandler handler=(IFluidHandler)tileEntity;
  FluidTankInfo[] tankInfo=handler.getTankInfo(ForgeDirection.DOWN);
  long stored=0;
  long maxContents=0;
  if (tankInfo != null && tankInfo.length > 0) {
    if (tankInfo[0].fluid != null) {
      stored=tankInfo[0].fluid.amount;
    }
    maxContents=tankInfo[0].capacity;
  }
  int ratio=0;
  boolean alarm=false;
  if (maxContents > 0) {
    ratio=(int)(1 + (stored * 5) / maxContents);
    if (ratio < 1) {
      ratio=1;
    }
 else     if (ratio > 5) {
      ratio=5;
    }
switch (alarmMode) {
case MODE_OFF:
      alarm=false;
    break;
case MODE_LESS:
  alarm=((stored * 100 / maxContents) < alarmLevel);
break;
case MODE_MORE:
alarm=((stored * 100 / maxContents) > alarmLevel);
break;
}
}
Boolean v=inAlarm.getValue();
boolean alarmValue=v == null ? false : v;
if (getFluidLevel() != ratio || alarm != alarmValue) {
fluidlevel.setValue(ratio);
if (alarmValue != alarm) {
inAlarm.setValue(alarm);
}
notifyBlockUpdate();
}
}",0.9922779922779924
166000,"@Override public Object[] getData(long millis){
  World world=DimensionManager.getWorld(dim);
  if (world == null) {
    return null;
  }
  if (!world.getChunkProvider().chunkExists(coordinate.getX() >> 4,coordinate.getZ() >> 4)) {
    return null;
  }
  TileEntity te=world.getTileEntity(coordinate.getX(),coordinate.getY(),coordinate.getZ());
  if (!(te instanceof IFluidHandler)) {
    return null;
  }
  IFluidHandler tank=(IFluidHandler)te;
  FluidTankInfo[] tankInfo=tank.getTankInfo(ForgeDirection.DOWN);
  int contents=0;
  int maxContents=0;
  if (tankInfo.length > 0) {
    if (tankInfo[0].fluid != null) {
      contents=tankInfo[0].fluid.amount;
    }
    maxContents=tankInfo[0].capacity;
  }
  return helper.getContentsValue(millis,contents,maxContents);
}","@Override public Object[] getData(long millis){
  World world=DimensionManager.getWorld(dim);
  if (world == null) {
    return null;
  }
  if (!world.getChunkProvider().chunkExists(coordinate.getX() >> 4,coordinate.getZ() >> 4)) {
    return null;
  }
  TileEntity te=world.getTileEntity(coordinate.getX(),coordinate.getY(),coordinate.getZ());
  if (!(te instanceof IFluidHandler)) {
    return null;
  }
  IFluidHandler tank=(IFluidHandler)te;
  FluidTankInfo[] tankInfo=tank.getTankInfo(ForgeDirection.DOWN);
  int contents=0;
  int maxContents=0;
  if (tankInfo != null && tankInfo.length > 0) {
    if (tankInfo[0].fluid != null) {
      contents=tankInfo[0].fluid.amount;
    }
    maxContents=tankInfo[0].capacity;
  }
  return helper.getContentsValue(millis,contents,maxContents);
}",0.9871794871794872
