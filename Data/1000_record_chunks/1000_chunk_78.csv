record_number,buggy_code,fixed_code,code_similarity
77001,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    return ""String_Node_Str"" + bookmark + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    return ""String_Node_Str"" + bookmark + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}",0.9889217134416544
77002,"/** 
 * Constructor.
 * @param context
 * @param operation
 * @param response
 */
public AbstractBaseActionHandler(IContext context,Operation operation,GetUpdatedObjectsResponse response){
  this.context=context;
  this.operation=operation;
  this.response=response;
}","/** 
 * Constructor.
 * @param context
 * @param operation
 * @param response
 */
public AbstractBaseActionHandler(IContext context,Operation operation,GetUpdatedObjectsResponse response){
  this.context=context;
  this.operation=operation;
  this.response=response;
  this.updateTaskId();
}",0.958855098389982
77003,"void layout(IReportItemExecutor executor,IContentEmitter output);","void layout(ILayoutManager parent,IReportItemExecutor executor,IContentEmitter output);",0.8552631578947368
77004,"/** 
 * output the content.
 */
protected void start(){
  if (emitter != null) {
    ContentEmitterUtil.startContent(content,emitter);
  }
}","/** 
 * output the content.
 */
protected abstract void start();",0.5392156862745098
77005,"protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      boolean skipPageHint=context.getSkipPageHint();
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(true);
      engine.layout(header,emitter);
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(skipPageHint);
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      boolean skipPageHint=context.getSkipPageHint();
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(true);
      engine.layout(this,header,emitter);
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(skipPageHint);
    }
  }
  isFirstLayout=false;
}",0.995417048579285
77006,"protected void repeatHeader(){
  if (!isFirstLayout) {
    IListContent list=(IListContent)content;
    if (list.isHeaderRepeat()) {
      IBandContent header=list.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(true);
        engine.layout(header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    IListContent list=(IListContent)content;
    if (list.isHeaderRepeat()) {
      IBandContent header=list.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(true);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}",0.9956483899042646
77007,"protected void start(){
  if (pageContent == null) {
    MasterPageDesign pageDesign=getMasterPage(report);
    pageNumber=pageNumber + 1;
    context.setPageNumber(pageNumber);
    pageContent=reportExecutor.createPage(pageNumber,pageDesign);
    if (emitter != null) {
      emitter.startPage(pageContent);
    }
  }
}","protected void start(){
  if (pageContent == null) {
    MasterPageDesign pageDesign=getMasterPage(report);
    pageNumber=pageNumber + 1;
    context.setPageNumber(pageNumber);
    pageContent=reportExecutor.createPage(pageNumber,pageDesign);
    if (emitter != null) {
      emitter.startPage(pageContent);
    }
  }
  isOutput=true;
}",0.974124809741248
77008,"public void layout(IContent content,IContentEmitter output){
  IReportItemExecutor executor=new DOMReportItemExecutor(content);
  layout(executor,output);
  executor.close();
}","public void layout(ILayoutManager parent,IContent content,IContentEmitter output){
  IReportItemExecutor executor=new DOMReportItemExecutor(content);
  layout(parent,executor,output);
  executor.close();
}",0.9238845144356956
77009,"protected void repeatHeader(){
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(true);
        engine.layout(header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(true);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}",0.9956859361518552
77010,"public void layout(IContent content,IContentEmitter output){
  IReportItemExecutor executor=new DOMReportItemExecutor(content);
  layout(executor,output);
  executor.close();
}","public void layout(ILayoutManager parent,IContent content,IContentEmitter output){
  IReportItemExecutor executor=new DOMReportItemExecutor(content);
  layout(parent,executor,output);
  executor.close();
}",0.9238845144356956
77011,"public boolean isInheritedProperty(){
  return true;
}","public boolean isInheritedProperty(){
  return false;
}",0.9357798165137616
77012,"protected boolean isHidden(){
  if (content != null) {
    IStyle style=content.getComputedStyle();
    if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_DISPLAY))) {
      ListValue formats=(ListValue)style.getProperty(IStyle.STYLE_VISIBLE_FORMAT);
      if (formats.getLength() == 0) {
        return false;
      }
 else {
        String format=context.getFormat();
        for (int i=0; i < formats.getLength(); i++) {
          String hiddenFormat=formats.item(i).getCssText();
          if (format.equalsIgnoreCase(hiddenFormat) || BIRTConstants.BIRT_ALL_VALUE.equalsIgnoreCase(hiddenFormat)) {
            return true;
          }
        }
        return false;
      }
    }
 else {
      return true;
    }
  }
  return false;
}","protected boolean isHidden(){
  if (content != null) {
    IStyle style=content.getComputedStyle();
    if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_DISPLAY))) {
      return isHiddenByVisibility();
    }
 else {
      return true;
    }
  }
  return false;
}",0.392578125
77013,"protected boolean isHidden(){
  if (columnWidth == 0 || !tableLM.isCellVisible(cellContent)) {
    return true;
  }
  return super.isHidden();
}","protected boolean isHidden(){
  if (columnWidth == 0 || !tableLM.isCellVisible(cellContent)) {
    return true;
  }
  return isHiddenByVisibility();
}",0.9387755102040816
77014,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str""))       resetInterval();
    }
  }
);
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(inputGroup));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Spinner(intervalRangeArea,SWT.BORDER);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setIncrement(1);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str""))       resetInterval();
    }
  }
);
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(inputGroup));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Text(intervalRangeArea,SWT.SINGLE | SWT.BORDER);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent event){
      if (event.text.length() <= 0) {
        return;
      }
      int beginIndex=Math.min(event.start,event.end);
      int endIndex=Math.max(event.start,event.end);
      String inputtedText=intervalRange.getText();
      String newString=inputtedText.substring(0,beginIndex);
      newString+=event.text;
      newString+=inputtedText.substring(endIndex);
      event.doit=false;
      try {
        double value=Double.parseDouble(newString);
        if (value >= 0) {
          event.doit=true;
        }
      }
 catch (      NumberFormatException e) {
        return;
      }
    }
  }
);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}",0.9113350696410372
77015,"protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  refreshColumnList();
  setKeyExpression(inputGroup.getKeyExpr());
  int index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
    intervalBaseButton.setEnabled(false);
    intervalBaseText.setEnabled(false);
  }
 else {
    intervalRange.setEnabled(true);
    BigDecimal value=new BigDecimal(inputGroup.getIntervalRange());
    value=value.movePointRight(intervalRange.getDigits());
    intervalRange.setSelection(value.intValue());
    if (getColumnType() == String.class) {
      intervalBaseButton.setEnabled(false);
      intervalBaseText.setEnabled(false);
    }
 else {
      intervalBaseButton.setEnabled(true);
      intervalBaseButton.setSelection(inputGroup.getIntervalBase() != null);
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
      if (inputGroup.getIntervalBase() != null) {
        intervalBaseText.setText(inputGroup.getIntervalBase());
      }
    }
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  index=getPagebreakBeforeIndex(inputGroup.getPageBreakBefore());
  if (index < 0 || index >= pagebreakBeforeCombo.getItemCount()) {
    pagebreakBeforeCombo.setText(inputGroup.getPageBreakBefore());
  }
 else {
    pagebreakBeforeCombo.select(index);
  }
  index=getPagebreakAfterIndex(inputGroup.getPageBreakAfter());
  if (index < 0 || index >= pagebreakAfterCombo.getItemCount()) {
    pagebreakAfterCombo.setText(inputGroup.getPageBreakAfter());
  }
 else {
    pagebreakAfterCombo.select(index);
  }
  if (inputGroup.repeatHeader()) {
    repeatHeaderButton.setSelection(true);
  }
  hideDetail.setSelection(inputGroup.hideDetail());
  return true;
}","protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  refreshColumnList();
  setKeyExpression(inputGroup.getKeyExpr());
  int index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
    intervalBaseButton.setEnabled(false);
    intervalBaseText.setEnabled(false);
  }
 else {
    intervalRange.setEnabled(true);
    if (inputGroup != null) {
      PropertyHandle property=inputGroup.getPropertyHandle(GroupElement.INTERVAL_RANGE_PROP);
      if (property != null) {
        intervalRange.setText(property.getStringValue());
      }
    }
    if (getColumnType() == String.class) {
      intervalBaseButton.setEnabled(false);
      intervalBaseText.setEnabled(false);
    }
 else {
      intervalBaseButton.setEnabled(true);
      intervalBaseButton.setSelection(inputGroup.getIntervalBase() != null);
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
      if (inputGroup.getIntervalBase() != null) {
        intervalBaseText.setText(inputGroup.getIntervalBase());
      }
    }
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  index=getPagebreakBeforeIndex(inputGroup.getPageBreakBefore());
  if (index < 0 || index >= pagebreakBeforeCombo.getItemCount()) {
    pagebreakBeforeCombo.setText(inputGroup.getPageBreakBefore());
  }
 else {
    pagebreakBeforeCombo.select(index);
  }
  index=getPagebreakAfterIndex(inputGroup.getPageBreakAfter());
  if (index < 0 || index >= pagebreakAfterCombo.getItemCount()) {
    pagebreakAfterCombo.setText(inputGroup.getPageBreakAfter());
  }
 else {
    pagebreakAfterCombo.select(index);
  }
  if (inputGroup.repeatHeader()) {
    repeatHeaderButton.setSelection(true);
  }
  hideDetail.setSelection(inputGroup.hideDetail());
  return true;
}",0.9161690948172916
77016,"/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getText());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.9974888931813792
77017,"void setExtension(int extension,Object value);","/** 
 * Set the extension of the content. Only 2 extension supported so far <li>0: document extension</li> <li>1: layout extension</li>
 * @param extension extension type
 * @param value extension value
 * @throws ArrayIndexOutOfBoundsException if index is outof range {0,1}
 */
void setExtension(int extension,Object value);",0.2479784366576819
77018,"public void setExtension(int extension,Object value){
}","public void setExtension(int extension,Object value){
  if (extensions == null) {
    extensions=new Object[LAST_EXTENSION];
  }
  extensions[extension]=value;
}",0.5092592592592593
77019,"DataIterator(IExtractionResults results,IResultIterator iterator,String[] selectedColumns){
  this.results=results;
  this.iterator=iterator;
  this.selectedColumns=selectedColumns;
}","DataIterator(IExtractionResults results,IResultIterator iterator){
  this.results=results;
  this.iterator=iterator;
}",0.7840531561461794
77020,"ExtractionResults(IResultIterator resultIterator,IResultMetaData metaData,String[] selectedColumns){
  this.selectedColumns=selectedColumns;
  this.resultIterator=resultIterator;
  this.metaData=metaData;
}","ExtractionResults(IResultIterator resultIterator,IResultMetaData metaData,String[] selectedColumns){
  this.resultIterator=resultIterator;
  if (null == selectedColumns) {
    this.metaData=metaData;
  }
 else {
    this.metaData=new ResultMetaData(metaData,selectedColumns);
  }
}",0.5872689938398358
77021,"public IDataIterator nextResultIterator() throws BirtException {
  if (iterator == null) {
    if (null == resultIterator && null != queryResults) {
      resultIterator=queryResults.getResultIterator();
    }
    this.iterator=new DataIterator(this,resultIterator,selectedColumns);
  }
  return iterator;
}","public IDataIterator nextResultIterator() throws BirtException {
  if (iterator == null) {
    if (null == resultIterator && null != queryResults) {
      resultIterator=queryResults.getResultIterator();
    }
    this.iterator=new DataIterator(this,resultIterator);
  }
  return iterator;
}",0.9732441471571908
77022,"public int getColumnType(int index) throws BirtException {
  index=getColumnIndex(index);
  MetaDataEntry entry=(MetaDataEntry)metaEntries.get(index);
  return entry.type;
}","public int getColumnType(int index) throws BirtException {
  index=getColumnIndex(index);
  if (null != parentMetaData) {
    return parentMetaData.getColumnType(index);
  }
 else {
    MetaDataEntry entry=(MetaDataEntry)metaEntries.get(index);
    return entry.type;
  }
}",0.7757847533632287
77023,"public String getColumnName(int index) throws BirtException {
  index=getColumnIndex(index);
  MetaDataEntry entry=(MetaDataEntry)metaEntries.get(index);
  return entry.name;
}","public String getColumnName(int index) throws BirtException {
  index=getColumnIndex(index);
  if (null != parentMetaData) {
    return parentMetaData.getColumnName(index);
  }
 else {
    MetaDataEntry entry=(MetaDataEntry)metaEntries.get(index);
    return entry.name;
  }
}",0.7787610619469026
77024,"public ResultMetaData(IBaseQueryDefinition query){
  initializeMetaData(query);
  this.selectedColumns=null;
}","public ResultMetaData(IResultMetaData parentMetaData,String[] selectedColumns){
  this.parentMetaData=parentMetaData;
  this.selectedColumns=selectedColumns;
}",0.4907063197026022
77025,"private int getColumnIndex(int index) throws BirtException {
  if (selectedColumns == null) {
    return index;
  }
  String name=selectedColumns[index];
  for (int i=0; i < metaEntries.size(); i++) {
    MetaDataEntry entry=(MetaDataEntry)metaEntries.get(i);
    if (entry.name.equals(name)) {
      return i;
    }
  }
  throw new EngineException(""String_Node_Str"");
}","private int getColumnIndex(int index) throws BirtException {
  if (selectedColumns == null) {
    return index;
  }
  String name=selectedColumns[index];
  if (null != parentMetaData) {
    for (int i=0; i < parentMetaData.getColumnCount(); i++) {
      String columnName=parentMetaData.getColumnName(i);
      if (columnName.equals(name)) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < metaEntries.size(); i++) {
      MetaDataEntry entry=(MetaDataEntry)metaEntries.get(i);
      if (entry.name.equals(name)) {
        return i;
      }
    }
  }
  throw new EngineException(""String_Node_Str"");
}",0.7004048582995951
77026,"public int getColumnCount(){
  if (selectedColumns != null) {
    return selectedColumns.length;
  }
  return metaEntries.size();
}","public int getColumnCount(){
  if (selectedColumns != null) {
    return selectedColumns.length;
  }
  if (null != parentMetaData) {
    return parentMetaData.getColumnCount();
  }
  return metaEntries.size();
}",0.7660818713450293
77027,"void layout(IReportItemExecutor executor,IContentEmitter output);","void layout(ILayoutManager parent,IReportItemExecutor executor,IContentEmitter output);",0.8552631578947368
77028,"/** 
 * output the content.
 */
protected void start(){
  if (emitter != null) {
    ContentEmitterUtil.startContent(content,emitter);
  }
}","/** 
 * output the content.
 */
protected abstract void start();",0.5392156862745098
77029,"protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      boolean skipPageHint=context.getSkipPageHint();
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(true);
      engine.layout(header,emitter);
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(skipPageHint);
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      boolean skipPageHint=context.getSkipPageHint();
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(true);
      engine.layout(this,header,emitter);
      context.setAllowPageBreak(pageBreak);
      context.setSkipPageHint(skipPageHint);
    }
  }
  isFirstLayout=false;
}",0.995417048579285
77030,"protected void repeatHeader(){
  if (!isFirstLayout) {
    IListContent list=(IListContent)content;
    if (list.isHeaderRepeat()) {
      IBandContent header=list.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(true);
        engine.layout(header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    IListContent list=(IListContent)content;
    if (list.isHeaderRepeat()) {
      IBandContent header=list.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(true);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}",0.9956483899042646
77031,"protected void start(){
  if (pageContent == null) {
    MasterPageDesign pageDesign=getMasterPage(report);
    pageNumber=pageNumber + 1;
    context.setPageNumber(pageNumber);
    pageContent=reportExecutor.createPage(pageNumber,pageDesign);
    if (emitter != null) {
      emitter.startPage(pageContent);
    }
  }
}","protected void start(){
  if (pageContent == null) {
    MasterPageDesign pageDesign=getMasterPage(report);
    pageNumber=pageNumber + 1;
    context.setPageNumber(pageNumber);
    pageContent=reportExecutor.createPage(pageNumber,pageDesign);
    if (emitter != null) {
      emitter.startPage(pageContent);
    }
  }
  isOutput=true;
}",0.974124809741248
77032,"public void layout(IContent content,IContentEmitter output){
  IReportItemExecutor executor=new DOMReportItemExecutor(content);
  layout(executor,output);
  executor.close();
}","public void layout(ILayoutManager parent,IContent content,IContentEmitter output){
  IReportItemExecutor executor=new DOMReportItemExecutor(content);
  layout(parent,executor,output);
  executor.close();
}",0.9238845144356956
77033,"protected void repeatHeader(){
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(true);
        engine.layout(header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean skipPageHint=context.getSkipPageHint();
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(true);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setSkipPageHint(skipPageHint);
      }
    }
  }
  isFirstLayout=false;
}",0.9956859361518552
77034,"public void layout(IContent content,IContentEmitter output){
  IReportItemExecutor executor=new DOMReportItemExecutor(content);
  layout(executor,output);
  executor.close();
}","public void layout(ILayoutManager parent,IContent content,IContentEmitter output){
  IReportItemExecutor executor=new DOMReportItemExecutor(content);
  layout(parent,executor,output);
  executor.close();
}",0.9238845144356956
77035,"/** 
 * Returns the interval range of this group.
 * @param intervalRange the interval range value as a double
 * @throws SemanticException if the property is locked.
 */
public void setIntervalRange(double intervalRange) throws SemanticException {
  setFloatProperty(GroupElement.INTERVAL_RANGE_PROP,intervalRange);
}","/** 
 * Sets the interval range of group.
 * @param intervalRange the interval range value as a string.value is locale dependent.
 * @throws SemanticException if the property is locked.
 */
public void setIntervalRange(String intervalRange) throws SemanticException {
  setStringProperty(GroupElement.INTERVAL_RANGE_PROP,intervalRange);
}",0.573170731707317
77036,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      Axis xAxis=((Axis)((ChartWithAxes)currentChart).getAxes().get(0));
      xAxis.setCategoryAxis(false);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        axisTypes.add(((Axis)axes.get(i)).getType());
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  addSampleData(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      Axis xAxis=((Axis)((ChartWithAxes)currentChart).getAxes().get(0));
      xAxis.setCategoryAxis(false);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        axisTypes.add(((Axis)axes.get(i)).getType());
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.9976257945929388
77037,"private void convertSampleData(Axis axis,AxisType axisType){
  if ((axis.getAssociatedAxes() != null) && (axis.getAssociatedAxes().size() != 0)) {
    BaseSampleData bsd=(BaseSampleData)getChartModel().getSampleData().getBaseSampleData().get(0);
    bsd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,bsd.getDataSetRepresentation()));
  }
 else {
    int iEndIndex=axis.getSeriesDefinitions().size();
    int iOSDSize=getChartModel().getSampleData().getOrthogonalSampleData().size();
    for (int i=0; i < iOSDSize; i++) {
      OrthogonalSampleData osd=(OrthogonalSampleData)getChartModel().getSampleData().getOrthogonalSampleData().get(i);
      if (osd.getSeriesDefinitionIndex() >= 0 && osd.getSeriesDefinitionIndex() <= iEndIndex) {
        osd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,osd.getDataSetRepresentation()));
      }
    }
  }
}","private void convertSampleData(Axis axis,AxisType axisType){
  if ((axis.getAssociatedAxes() != null) && (axis.getAssociatedAxes().size() != 0)) {
    BaseSampleData bsd=(BaseSampleData)getChartModel().getSampleData().getBaseSampleData().get(0);
    bsd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,bsd.getDataSetRepresentation()));
  }
 else {
    int iStartIndex=getFirstSeriesDefinitionIndexForAxis(axis);
    int iEndIndex=iStartIndex + axis.getSeriesDefinitions().size();
    int iOSDSize=getChartModel().getSampleData().getOrthogonalSampleData().size();
    for (int i=0; i < iOSDSize; i++) {
      OrthogonalSampleData osd=(OrthogonalSampleData)getChartModel().getSampleData().getOrthogonalSampleData().get(i);
      if (osd.getSeriesDefinitionIndex() >= iStartIndex && osd.getSeriesDefinitionIndex() < iEndIndex) {
        osd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,osd.getDataSetRepresentation()));
      }
    }
  }
}",0.9528741584671157
77038,"private void convertSampleData(Axis axis,AxisType axisType){
  if ((axis.getAssociatedAxes() != null) && (axis.getAssociatedAxes().size() != 0)) {
    BaseSampleData bsd=(BaseSampleData)chartModel.getSampleData().getBaseSampleData().get(0);
    bsd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,bsd.getDataSetRepresentation()));
  }
 else {
    int iEndIndex=axis.getSeriesDefinitions().size();
    int iOSDSize=chartModel.getSampleData().getOrthogonalSampleData().size();
    for (int i=0; i < iOSDSize; i++) {
      OrthogonalSampleData osd=(OrthogonalSampleData)chartModel.getSampleData().getOrthogonalSampleData().get(i);
      if (osd.getSeriesDefinitionIndex() >= 0 && osd.getSeriesDefinitionIndex() <= iEndIndex) {
        osd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,osd.getDataSetRepresentation()));
      }
    }
  }
}","private void convertSampleData(Axis axis,AxisType axisType){
  if ((axis.getAssociatedAxes() != null) && (axis.getAssociatedAxes().size() != 0)) {
    BaseSampleData bsd=(BaseSampleData)chartModel.getSampleData().getBaseSampleData().get(0);
    bsd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,bsd.getDataSetRepresentation()));
  }
 else {
    int iStartIndex=getFirstSeriesDefinitionIndexForAxis(axis);
    int iEndIndex=iStartIndex + axis.getSeriesDefinitions().size();
    int iOSDSize=chartModel.getSampleData().getOrthogonalSampleData().size();
    for (int i=0; i < iOSDSize; i++) {
      OrthogonalSampleData osd=(OrthogonalSampleData)chartModel.getSampleData().getOrthogonalSampleData().get(i);
      if (osd.getSeriesDefinitionIndex() >= iStartIndex && osd.getSeriesDefinitionIndex() < iEndIndex) {
        osd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,osd.getDataSetRepresentation()));
      }
    }
  }
}",0.9521304576538664
77039,"protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  sdTmp.getSeriesPalette().update(-seriesDefns.size());
  sdTmp.getSeries().add(EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getDesignTimeSeries()));
  sdTmp.setQuery((Query)EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getQuery()));
  cleanDataDefinition(sdTmp);
  sdTmp.eAdapters().addAll(((SeriesDefinition)seriesDefns.get(0)).eAdapters());
  int firstIndex=getFirstIndexOfSameAxis();
  EList list=getChart().getSampleData().getOrthogonalSampleData();
  OrthogonalSampleData sdOrthogonal=(OrthogonalSampleData)EcoreUtil.copy((EObject)list.get(firstIndex));
  sdOrthogonal.setSeriesDefinitionIndex(list.size());
  sdOrthogonal.eAdapters().addAll(getChart().getSampleData().eAdapters());
  boolean isNotificaionIgnored=ChartAdapter.isNotificationIgnored();
  ChartAdapter.ignoreNotifications(true);
  list.add(sdOrthogonal);
  ChartAdapter.ignoreNotifications(isNotificaionIgnored);
  seriesDefns.add(sdTmp);
}","protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  sdTmp.getSeriesPalette().update(-seriesDefns.size());
  sdTmp.getSeries().add(EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getDesignTimeSeries()));
  sdTmp.setQuery((Query)EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getQuery()));
  cleanDataDefinition(sdTmp);
  sdTmp.eAdapters().addAll(((SeriesDefinition)seriesDefns.get(0)).eAdapters());
  int firstIndex=getFirstIndexOfSameAxis();
  EList list=getChart().getSampleData().getOrthogonalSampleData();
  OrthogonalSampleData sdOrthogonal=(OrthogonalSampleData)EcoreUtil.copy((EObject)list.get(firstIndex));
  sdOrthogonal.setSeriesDefinitionIndex(ChartUIUtil.getLastSeriesIndexWithinAxis(getChart(),axisIndex) + 1);
  sdOrthogonal.eAdapters().addAll(getChart().getSampleData().eAdapters());
  boolean isNotificaionIgnored=ChartAdapter.isNotificationIgnored();
  ChartAdapter.ignoreNotifications(true);
  int sdIndex=sdOrthogonal.getSeriesDefinitionIndex();
  ArrayList al=new ArrayList();
  if (sdIndex >= list.size()) {
    list.add(sdOrthogonal);
  }
 else {
    for (int i=sdIndex; i < list.size(); i++) {
      al.add(list.get(i));
    }
    list.set(sdIndex,sdOrthogonal);
    for (int i=0; i < al.size() - 1; i++) {
      list.set(i + 1 + sdIndex,al.get(i));
    }
    list.add(al.get(al.size() - 1));
  }
  ChartAdapter.ignoreNotifications(isNotificaionIgnored);
  seriesDefns.add(sdTmp);
}",0.8059461631177179
77040,"public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.resultService.getBindingExpr(exprName) == null && this.resultService.getAutoBindingExpr(exprName) == null)   throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  if (this.isFirstRowPepared == false)   this.prepareCurrentRow();
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}","public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINER,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.resultService.getBindingExpr(exprName) == null && this.resultService.getAutoBindingExpr(exprName) == null)   throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  if (this.isFirstRowPepared == false)   this.prepareCurrentRow();
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}",0.999195494770716
77041,"public void dispose(){
  if (this.library != null) {
    this.library.close();
    this.library=null;
  }
  ResourceEntry[] children=getChildren();
  for (int i=0; i < children.length; i++) {
    children[i].dispose();
  }
}","public void dispose(){
  if (this.library != null) {
    this.library.close();
    this.library=null;
  }
  if (this.childrenList != null) {
    for (Iterator iterator=this.childrenList.iterator(); iterator.hasNext(); ) {
      ResourceEntry entry=(ResourceEntry)iterator.next();
      entry.dispose();
    }
  }
}",0.5130111524163569
77042,"public void run(){
  FileDialog dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.OPEN);
  dialog.setFilterExtensions(new String[]{""String_Node_Str""});
  String filename;
  try {
    filename=dialog.open();
  }
 catch (  Throwable e) {
    return;
  }
  if (filename != null) {
    if (!(new File(filename).exists())) {
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new String[]{filename}));
      return;
    }
    if (!(filename.endsWith(""String_Node_Str""))) {
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new String[]{filename,""String_Node_Str""}));
      return;
    }
    try {
      filename=copyToResourceFolder(filename);
      if (filename != null) {
        ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
        UIUtil.includeLibrary(moduleHandle,filename);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
    }
  }
}","public void run(){
  ResourceFileFolderSelectionDialog dialog=new ResourceFileFolderSelectionDialog(true,new String[]{""String_Node_Str""});
  if (dialog.open() == Window.OK) {
    try {
      String filename=dialog.getPath();
      ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
      UIUtil.includeLibrary(moduleHandle,filename);
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.3191489361702128
77043,"protected void writeImage(DataOutputStream out,ImageItemDesign image) throws IOException {
  writeReportItem(out,image);
  IOUtil.writeShort(out,FIELD_IMAGE_SOURCE);
  int imageSource=image.getImageSource();
  IOUtil.writeInt(out,imageSource);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
    IOUtil.writeString(out,image.getImageName());
  break;
case ImageItemDesign.IMAGE_FILE:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_URI:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_EXPRESSION:
IOUtil.writeString(out,image.getImageExpression());
IOUtil.writeString(out,image.getImageFormat());
break;
}
String altText=image.getAltText();
String altTextKey=image.getAltTextKey();
String helpText=image.getHelpText();
String helpTextKey=image.getHelpTextKey();
if (altText != null || altTextKey != null) {
IOUtil.writeShort(out,FIELD_ALT_TEXT);
IOUtil.writeString(out,altTextKey);
IOUtil.writeString(out,altText);
}
if (helpText != null || helpText != null) {
IOUtil.writeShort(out,FIELD_HELP_TEXT);
IOUtil.writeString(out,helpTextKey);
IOUtil.writeString(out,helpText);
}
}","protected void writeImage(DataOutputStream out,ImageItemDesign image) throws IOException {
  writeReportItem(out,image);
  IOUtil.writeShort(out,FIELD_IMAGE_SOURCE);
  int imageSource=image.getImageSource();
  IOUtil.writeInt(out,imageSource);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
{
      String imageName=image.getImageName();
      DesignElementHandle handle=image.getHandle();
      if (handle instanceof ImageHandle) {
        String designImageName=image.getImageName();
        if (imageName != null && imageName.equals(designImageName)) {
          imageName=null;
        }
      }
      IOUtil.writeString(out,imageName);
    }
  break;
case ImageItemDesign.IMAGE_FILE:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_URI:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_EXPRESSION:
IOUtil.writeString(out,image.getImageExpression());
IOUtil.writeString(out,image.getImageFormat());
break;
}
String altText=image.getAltText();
String altTextKey=image.getAltTextKey();
String helpText=image.getHelpText();
String helpTextKey=image.getHelpTextKey();
if (altText != null || altTextKey != null) {
IOUtil.writeShort(out,FIELD_ALT_TEXT);
IOUtil.writeString(out,altTextKey);
IOUtil.writeString(out,altText);
}
if (helpText != null || helpText != null) {
IOUtil.writeShort(out,FIELD_HELP_TEXT);
IOUtil.writeString(out,helpTextKey);
IOUtil.writeString(out,helpText);
}
}",0.8721109399075501
77044,"/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSourceExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
 else {
    try {
      ExtensionManifest extension=ManifestExplorer.getInstance().getExtensionManifest(extensionID);
      if (extension != null && extension.isDeprecated()) {
        extensionID=extension.getRelatedDataSourceId();
      }
    }
 catch (    OdaException e) {
    }
catch (    IllegalArgumentException e) {
    }
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSource)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
}","/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSourceExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
 else {
    String oldOdaXmlName=""String_Node_Str"";
    String newOdaXmlName=""String_Node_Str"";
    if (oldOdaXmlName.equals(extensionID)) {
      extensionID=newOdaXmlName;
    }
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSource)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
}",0.8447802197802198
77045,"/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSetExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSet)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
}","/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSetExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
 else {
    String oldOdaXmlName=""String_Node_Str"";
    String newOdaXmlName=""String_Node_Str"";
    if (oldOdaXmlName.equals(extensionID)) {
      extensionID=newOdaXmlName;
    }
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSet)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
}",0.9282930631332814
77046,"/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSourceExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSource)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
}","/** 
 * Parse the attribute of ""extensionId"" for extendable element.
 * @param attrs the SAX attributes object
 * @param extensionNameRequired whether extension name is required
 */
private void parseODADataSourceExtensionID(Attributes attrs,boolean extensionNameRequired){
  String extensionID=getAttrib(attrs,DesignSchemaConstants.EXTENSION_ID_ATTRIB);
  if (StringUtil.isBlank(extensionID)) {
    if (!extensionNameRequired)     return;
    SemanticError e=new SemanticError(element,SemanticError.DESIGN_EXCEPTION_MISSING_EXTENSION);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    return;
  }
  if (handler.versionNumber < VersionUtil.VERSION_3_0_0) {
    if (OBSOLETE_FLAT_FILE_ID.equalsIgnoreCase(extensionID))     extensionID=NEW_FLAT_FILE_ID;
  }
 else {
    try {
      ExtensionManifest extension=ManifestExplorer.getInstance().getExtensionManifest(extensionID);
      if (extension != null && extension.isDeprecated()) {
        extensionID=extension.getRelatedDataSourceId();
      }
    }
 catch (    OdaException e) {
    }
catch (    IllegalArgumentException e) {
    }
  }
  setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionID);
  provider=((OdaDataSource)element).getProvider();
  if (provider == null)   return;
  if (provider instanceof OdaDummyProvider) {
    SemanticError e=new SemanticError(element,new String[]{extensionID},SemanticError.DESIGN_EXCEPTION_EXTENSION_NOT_FOUND);
    RecoverableError.dealMissingInvalidExtension(handler,e);
    isValidExtensionId=false;
  }
}",0.8775659824046921
77047,"public void run() throws EngineException {
  setRunningFlag(true);
  if (!validateParameters()) {
    setRunningFlag(false);
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    Report reportDesign=executionContext.getReport();
    ReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
    IReportExecutor lExecutor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      HTMLTableLayoutNestEmitter tableLayoutEmitter=new HTMLTableLayoutNestEmitter(emitter);
      lExecutor.execute(reportDesign.getReportDesign(),tableLayoutEmitter);
    }
 else {
      String format=executionContext.getOutputFormat();
      boolean paginate=true;
      if (FORMAT_HTML.equalsIgnoreCase(format)) {
        if (renderOptions instanceof HTMLRenderOption) {
          HTMLRenderOption htmlOption=(HTMLRenderOption)renderOptions;
          paginate=htmlOption.getHtmlPagination();
        }
      }
synchronized (this) {
        if (!executionContext.isCanceled()) {
          layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
        }
      }
      if (layoutEngine != null) {
        OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
        layoutEngine.setPageHandler(handle);
        CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
        outputEmitters.addEmitter(emitter);
        outputEmitters.addEmitter(handle.getEmitter());
        layoutEngine.layout(lExecutor,outputEmitters,paginate);
      }
    }
    closeRender();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    err.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    setRunningFlag(false);
  }
}","public void run() throws EngineException {
  setRunningFlag(true);
  if (!validateParameters()) {
    setRunningFlag(false);
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    Report reportDesign=executionContext.getReport();
    ReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
    IReportExecutor lExecutor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      HTMLTableLayoutNestEmitter tableLayoutEmitter=new HTMLTableLayoutNestEmitter(emitter);
      lExecutor.execute(reportDesign.getReportDesign(),tableLayoutEmitter);
    }
 else {
      String format=executionContext.getOutputFormat();
      boolean paginate=true;
      if (FORMAT_HTML.equalsIgnoreCase(format)) {
        if (renderOptions instanceof HTMLRenderOption) {
          HTMLRenderOption htmlOption=(HTMLRenderOption)renderOptions;
          paginate=htmlOption.getHtmlPagination();
        }
      }
synchronized (this) {
        if (!executionContext.isCanceled()) {
          layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
        }
      }
      if (layoutEngine != null) {
        CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
        OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
        layoutPageHandler.addPageHandler(handle);
        layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
        layoutEngine.setPageHandler(layoutPageHandler);
        CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
        outputEmitters.addEmitter(emitter);
        outputEmitters.addEmitter(handle.getEmitter());
        layoutEngine.layout(lExecutor,outputEmitters,paginate);
      }
    }
    closeRender();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    err.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    setRunningFlag(false);
  }
}",0.94866116368029
77048,"protected void handlePageBreakAfter(){
  if (IStyle.ALWAYS_VALUE.equals(content.getStyle().getProperty(IStyle.STYLE_PAGE_BREAK_AFTER))) {
    listingExecutor.clearSoftBreak();
  }
}","protected void handlePageBreakAfter(){
}",0.3619909502262443
77049,"protected void handlePageBreakBefore(){
  if (IStyle.ALWAYS_VALUE.equals(content.getStyle().getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE))) {
    listingExecutor.clearSoftBreak();
  }
}","protected void handlePageBreakBefore(){
}",0.3660714285714285
77050,"public IContent execute(){
  ListBandDesign bandDesign=(ListBandDesign)getDesign();
  IListBandContent bandContent=report.createListBandContent();
  setContent(bandContent);
  restoreResultSet();
  initializeContent(bandDesign,bandContent);
  int type=bandDesign.getBandType();
  if ((type == BandDesign.BAND_DETAIL || type == BandDesign.GROUP_HEADER) && listExecutor.needSoftBreakBefore()) {
    IStyle style=content.getStyle();
    if (style != null) {
      CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
      if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
        style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
        listExecutor.clearSoftBreak();
      }
    }
  }
  startTOCEntry(bandContent);
  if (emitter != null) {
    emitter.startListBand(bandContent);
  }
  currentItem=0;
  return bandContent;
}","public IContent execute(){
  ListBandDesign bandDesign=(ListBandDesign)getDesign();
  IListBandContent bandContent=report.createListBandContent();
  setContent(bandContent);
  restoreResultSet();
  initializeContent(bandDesign,bandContent);
  int type=bandDesign.getBandType();
  if ((type == BandDesign.BAND_DETAIL || type == BandDesign.GROUP_HEADER) && listExecutor.needSoftBreakBefore()) {
    IStyle style=content.getStyle();
    if (style != null) {
      CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
      if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
        style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
      }
    }
  }
  startTOCEntry(bandContent);
  if (emitter != null) {
    emitter.startListBand(bandContent);
  }
  currentItem=0;
  return bandContent;
}",0.9771796372147454
77051,"public void close(){
  IListContent listContent=(IListContent)getContent();
  if (emitter != null) {
    emitter.endList(listContent);
  }
  finishTOCEntry();
  closeQuery();
}","public void close(){
  super.close();
  IListContent listContent=(IListContent)getContent();
  if (emitter != null) {
    emitter.endList(listContent);
  }
  finishTOCEntry();
  closeQuery();
}",0.9539295392953928
77052,"protected void initializeContent(ReportElementDesign design,IContent content){
  super.initializeContent(design,content);
  if (isPageBreakIntervalValid((ListingDesign)design)) {
    pageBreakInterval=((ListingDesign)design).getPageBreakInterval();
  }
}","protected void initializeContent(ReportElementDesign design,IContent content){
  super.initializeContent(design,content);
  if (isPageBreakIntervalValid((ListingDesign)design)) {
    pageBreakInterval=((ListingDesign)design).getPageBreakInterval();
    context.addPageBreakListener(this);
  }
}",0.927007299270073
77053,"public IContent execute(){
  TableBandDesign bandDesign=(TableBandDesign)getDesign();
  ITableBandContent bandContent=report.createTableBandContent();
  setContent(bandContent);
  restoreResultSet();
  initializeContent(bandDesign,bandContent);
  int type=bandDesign.getBandType();
  if ((type == TableBandDesign.BAND_DETAIL || type == TableBandDesign.GROUP_HEADER) && tableExecutor.needSoftBreakBefore()) {
    IStyle style=content.getStyle();
    if (style != null) {
      CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
      if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
        style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
        tableExecutor.clearSoftBreak();
      }
    }
  }
  startTOCEntry(bandContent);
  if (emitter != null) {
    emitter.startTableBand(bandContent);
  }
  currentRow=0;
  return content;
}","public IContent execute(){
  TableBandDesign bandDesign=(TableBandDesign)getDesign();
  ITableBandContent bandContent=report.createTableBandContent();
  setContent(bandContent);
  restoreResultSet();
  initializeContent(bandDesign,bandContent);
  int type=bandDesign.getBandType();
  if ((type == TableBandDesign.BAND_DETAIL || type == TableBandDesign.GROUP_HEADER) && tableExecutor.needSoftBreakBefore()) {
    IStyle style=content.getStyle();
    if (style != null) {
      CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
      if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
        style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
      }
    }
  }
  startTOCEntry(bandContent);
  if (emitter != null) {
    emitter.startTableBand(bandContent);
  }
  currentRow=0;
  return content;
}",0.8117782909930716
77054,"public void close(){
  ITableContent tableContent=(ITableContent)getContent();
  if (emitter != null) {
    emitter.endTable(tableContent);
  }
  finishTOCEntry();
  closeQuery();
}","public void close(){
  super.close();
  ITableContent tableContent=(ITableContent)getContent();
  if (emitter != null) {
    emitter.endTable(tableContent);
  }
  finishTOCEntry();
  closeQuery();
}",0.9551451187335092
77055,"public ReportDocumentBuilder(ExecutionContext context,ReportDocumentWriter document){
  this.executionContext=context;
  this.document=document;
  OnPageBreakLayoutPageHandle onPageBreakHandler=new OnPageBreakLayoutPageHandle(context);
  outputEmitters=new CompositeContentEmitter();
  outputEmitters.addEmitter(new PageEmitter());
  outputEmitters.addEmitter(onPageBreakHandler.getEmitter());
  layoutPageHandler=new CompositeLayoutPageHandler();
  layoutPageHandler.addPageHandler(new LayoutPageHandler());
  layoutPageHandler.addPageHandler(onPageBreakHandler);
  contentEmitter=new ContentEmitter();
}","public ReportDocumentBuilder(ExecutionContext context,ReportDocumentWriter document){
  this.executionContext=context;
  this.document=document;
  OnPageBreakLayoutPageHandle onPageBreakHandler=new OnPageBreakLayoutPageHandle(context);
  outputEmitters=new CompositeContentEmitter();
  outputEmitters.addEmitter(new PageEmitter());
  outputEmitters.addEmitter(onPageBreakHandler.getEmitter());
  layoutPageHandler=new CompositeLayoutPageHandler();
  layoutPageHandler.addPageHandler(new LayoutPageHandler());
  layoutPageHandler.addPageHandler(onPageBreakHandler);
  layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
  contentEmitter=new ContentEmitter();
}",0.9358081979891724
77056,"/** 
 * Build size style string say, ""width: 10.0mm;"".
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The property name
 * @param value The values of the property
 */
public static void buildSize(StringBuffer content,String name,DimensionType value){
  if (value != null) {
    if (HTMLTags.ATTR_MIN_HEIGHT.equals(name)) {
      addPropName(content,HTMLTags.ATTR_HEIGHT);
      addPropValue(content,""String_Node_Str"");
      content.append(';');
      addPropName(content,HTMLTags.ATTR_HEIGHT);
      addPropValue(content,value.toString());
      content.append(';');
      addPropName(content,HTMLTags.ATTR_MIN_HEIGHT);
      addPropValue(content,value.toString());
      content.append(';');
    }
 else {
      addPropName(content,name);
      addPropValue(content,value.toString());
      content.append(';');
    }
  }
}","/** 
 * Build size style string say, ""width: 10.0mm;"".
 * @param content The <code>StringBuffer</code> to which the result is output.
 * @param name The property name
 * @param value The values of the property
 */
public static void buildSize(StringBuffer content,String name,DimensionType value){
  if (value != null) {
    if (HTMLTags.ATTR_MIN_HEIGHT.equals(name)) {
      addPropName(content,HTMLTags.ATTR_MIN_HEIGHT);
      addPropValue(content,""String_Node_Str"");
      content.append(';');
      addPropName(content,HTMLTags.ATTR_HEIGHT);
      addPropValue(content,value.toString());
      content.append(';');
      addPropName(content,HTMLTags.ATTR_MIN_HEIGHT);
      addPropValue(content,value.toString());
      content.append(';');
    }
 else {
      addPropName(content,name);
      addPropValue(content,value.toString());
      content.append(';');
    }
  }
}",0.9977116704805492
77057,"public DataSetID(String dataSetName){
  this.dataSetName=dataSetName;
}","/** 
 * create a dataset id of a normal query.
 * @param dataSetName can't be null.
 */
public DataSetID(String dataSetName){
  if (null == dataSetName) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.dataSetName=dataSetName;
}",0.4409937888198758
77058,"/** 
 * Get the foreground color.
 * @param handle The handle of design element.
 * @return fore ground color
 */
public int getForegroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.COLOR_PROP);
  if (obj == null) {
    return 0x0;
  }
  if (obj instanceof String) {
    return ColorUtil.parseColor((String)obj);
  }
  return ((Integer)obj).intValue();
}","/** 
 * Get the foreground color.
 * @param handle The handle of design element.
 * @return fore ground color
 */
public int getForegroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.COLOR_PROP);
  int color=handle.getPropertyHandle(StyleHandle.COLOR_PROP).getIntValue();
  if (obj == null) {
    return 0x0;
  }
  return color;
}",0.7330677290836654
77059,"/** 
 * Get the background color.
 * @param handle The handle of design element.
 * @return back ground color
 */
public int getBackgroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.BACKGROUND_COLOR_PROP);
  if (obj == null) {
    return 0xFFFFFF;
  }
  if (obj instanceof String) {
    return ColorUtil.parseColor((String)obj);
  }
  return ((Integer)obj).intValue();
}","/** 
 * Get the background color.
 * @param handle The handle of design element.
 * @return back ground color
 */
public int getBackgroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.BACKGROUND_COLOR_PROP);
  int color=handle.getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue();
  if (obj == null) {
    return 0xFFFFFF;
  }
  return color;
}",0.7336683417085427
77060,"/** 
 * Convenient method to return the specified border color directly.
 * @return
 */
public int getTopBorderColor(){
  return ColorUtil.parseColor(topColor);
}","/** 
 * Convenient method to return the specified border color directly.
 * @return
 */
public int getTopBorderColor(){
  return topColor;
}",0.9271523178807948
77061,"/** 
 * Convenient method to return the specified border color directly.
 * @return
 */
public int getBottomBorderColor(){
  return ColorUtil.parseColor(bottomColor);
}","/** 
 * Convenient method to return the specified border color directly.
 * @return
 */
public int getBottomBorderColor(){
  return bottomColor;
}",0.929936305732484
77062,"/** 
 * Convenient method to return the specified border color directly.
 * @return
 */
public int getRightBorderColor(){
  return ColorUtil.parseColor(rightColor);
}","/** 
 * Convenient method to return the specified border color directly.
 * @return
 */
public int getRightBorderColor(){
  return rightColor;
}",0.9290322580645162
77063,"/** 
 * Convenient method to return the specified border color directly.
 * @return
 */
public int getLeftBorderColor(){
  return ColorUtil.parseColor(leftColor);
}","/** 
 * Convenient method to return the specified border color directly.
 * @return
 */
public int getLeftBorderColor(){
  return leftColor;
}",0.9281045751633988
77064,"/** 
 * @param figure
 * @param g
 * @param side
 * @param style
 * @param width the border width array, arranged by {top, bottom, left, right};
 * @param color
 * @param insets
 */
protected void drawBorder(IFigure figure,Graphics g,int side,int style,int[] width,String color,Insets insets){
  Rectangle r=figure.getBounds().getCopy().crop(insets);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(ColorUtil.parseColor(color)));
    if (style == -2) {
      BorderUtil.drawDoubleLine(g,side,width,r);
    }
 else {
      BorderUtil.drawSingleLine(g,side,style,width,r);
    }
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}","/** 
 * @param figure
 * @param g
 * @param side
 * @param style
 * @param width the border width array, arranged by {top, bottom, left, right};
 * @param color
 * @param insets
 */
protected void drawBorder(IFigure figure,Graphics g,int side,int style,int[] width,int color,Insets insets){
  Rectangle r=figure.getBounds().getCopy().crop(insets);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(color));
    if (style == -2) {
      BorderUtil.drawDoubleLine(g,side,width,r);
    }
 else {
      BorderUtil.drawSingleLine(g,side,style,width,r);
    }
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}",0.9786648313833448
77065,"public void setBackgroundColor(Object obj){
  if (obj != null) {
    if (obj instanceof String) {
      backgroundColor=ColorUtil.parseColor((String)obj);
    }
 else {
      backgroundColor=((Integer)obj).intValue();
    }
  }
}","public void setBackgroundColor(int color){
  if (color != 0) {
    backgroundColor=color;
  }
}",0.5123456790123457
77066,"/** 
 * Draw border of the section
 * @param figure
 * @param g
 * @param in
 * @param side
 * @param style
 * @param width
 * @param color
 */
private void drawBorder(IFigure figure,Graphics g,Insets in,int side,int style,int[] width,String color){
  Rectangle r=figure.getBounds().getCropped(in);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(ColorUtil.parseColor(color)));
    if (style == -2) {
      BorderUtil.drawDoubleLine(g,side,width,r);
    }
 else {
      BorderUtil.drawSingleLine(g,side,style,width,r);
    }
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}","/** 
 * Draw border of the section
 * @param figure
 * @param g
 * @param in
 * @param side
 * @param style
 * @param width
 * @param color
 */
private void drawBorder(IFigure figure,Graphics g,Insets in,int side,int style,int[] width,int color){
  Rectangle r=figure.getBounds().getCropped(in);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(color));
    if (style == -2) {
      BorderUtil.drawDoubleLine(g,side,width,r);
    }
 else {
      BorderUtil.drawSingleLine(g,side,style,width,r);
    }
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}",0.9770200148257968
77067,"public void refreshFigure(){
  int color=getBackgroundColor((MasterPageHandle)getModel());
  getFigure().setBackgroundColor(ColorManager.getColor(color));
  Dimension size=getMasterPageSize((MasterPageHandle)getModel());
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel()));
  reportDesignMarginBorder.setBackgroundColor(((MasterPageHandle)getModel()).getProperty(StyleHandle.BACKGROUND_COLOR_PROP));
  getFigure().setBorder(reportDesignMarginBorder);
  refreshBackground((MasterPageHandle)getModel());
}","public void refreshFigure(){
  int color=getBackgroundColor((MasterPageHandle)getModel());
  getFigure().setBackgroundColor(ColorManager.getColor(color));
  Dimension size=getMasterPageSize((MasterPageHandle)getModel());
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel()));
  reportDesignMarginBorder.setBackgroundColor(((MasterPageHandle)getModel()).getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue());
  getFigure().setBorder(reportDesignMarginBorder);
  refreshBackground((MasterPageHandle)getModel());
}",0.9865410497981156
77068,"public void refreshFigure(){
  SlotHandle slotHandle=((ModuleHandle)getModel()).getMasterPages();
  Iterator iter=slotHandle.iterator();
  SimpleMasterPageHandle masterPageHandle=(SimpleMasterPageHandle)iter.next();
  Dimension size=getMasterPageSize(masterPageHandle);
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ReportRootFigure figure=(ReportRootFigure)getFigure();
  figure.setShowMargin(showMargin);
  if (!showMargin) {
    Insets mg=getMasterPageInsets(masterPageHandle);
    bounds.width-=mg.getWidth();
    bounds.height-=mg.getHeight();
  }
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets(masterPageHandle));
  reportDesignMarginBorder.setBackgroundColor(masterPageHandle.getProperty(StyleHandle.BACKGROUND_COLOR_PROP));
  getFigure().setBorder(reportDesignMarginBorder);
  int color=getBackgroundColor(masterPageHandle);
  getFigure().setBackgroundColor(ColorManager.getColor(color));
  refreshBackground(masterPageHandle);
}","public void refreshFigure(){
  SlotHandle slotHandle=((ModuleHandle)getModel()).getMasterPages();
  Iterator iter=slotHandle.iterator();
  SimpleMasterPageHandle masterPageHandle=(SimpleMasterPageHandle)iter.next();
  Dimension size=getMasterPageSize(masterPageHandle);
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ReportRootFigure figure=(ReportRootFigure)getFigure();
  figure.setShowMargin(showMargin);
  if (!showMargin) {
    Insets mg=getMasterPageInsets(masterPageHandle);
    bounds.width-=mg.getWidth();
    bounds.height-=mg.getHeight();
  }
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets(masterPageHandle));
  reportDesignMarginBorder.setBackgroundColor(masterPageHandle.getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue());
  getFigure().setBorder(reportDesignMarginBorder);
  int color=getBackgroundColor(masterPageHandle);
  getFigure().setBackgroundColor(ColorManager.getColor(color));
  refreshBackground(masterPageHandle);
}",0.99096657633243
77069,"public static Test suite(){
  return new TestSuite(LibraryImportTest.class);
}","/** 
 * @return 
 */
public static Test suite(){
  return new TestSuite(LibraryImportTest.class);
}",0.8813559322033898
77070,"public void testImportLibrary() throws Exception {
  openDesign(fileName);
  designHandle.includeLibrary(inputLibraryName,""String_Node_Str"");
  LibraryHandle libHandle=designHandle.getLibrary(""String_Node_Str"");
  TextItemHandle textLibHandle=(TextItemHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",textLibHandle);
  TableHandle tableLibHandle=(TableHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",tableLibHandle);
  StyleHandle styleLibHandle=(StyleHandle)libHandle.findStyle(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",styleLibHandle);
  ParameterHandle parameterLibHandle=(ParameterHandle)libHandle.findParameter(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",parameterLibHandle);
  LabelHandle labelLibHandle=(LabelHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",labelLibHandle);
  ImageHandle imageLibHandle=(ImageHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",imageLibHandle);
  DataItemHandle dataLibHandle=(DataItemHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataLibHandle);
  DataSourceHandle dataSourceLibHandle=(DataSourceHandle)libHandle.findDataSource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSourceLibHandle);
  DataSetHandle dataSetLibHandle=(DataSetHandle)libHandle.findDataSet(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSetLibHandle);
  TextItemHandle textHandle=(TextItemHandle)designHandle.getElementFactory().newElementFrom(textLibHandle,""String_Node_Str"");
  TableHandle tableHandle=(TableHandle)designHandle.getElementFactory().newElementFrom(tableLibHandle,""String_Node_Str"");
  StyleHandle styleHandle=(StyleHandle)designHandle.getElementFactory().newStyle(""String_Node_Str"");
  ParameterHandle parameterHandle=(ParameterHandle)designHandle.getElementFactory().newElementFrom(parameterLibHandle,""String_Node_Str"");
  LabelHandle labelHandle=(LabelHandle)designHandle.getElementFactory().newElementFrom(labelLibHandle,""String_Node_Str"");
  ImageHandle imageHandle=(ImageHandle)designHandle.getElementFactory().newElementFrom(imageLibHandle,""String_Node_Str"");
  DataItemHandle dataHandle=(DataItemHandle)designHandle.getElementFactory().newElementFrom(dataLibHandle,""String_Node_Str"");
  DataSourceHandle dataSourceHandle=(DataSourceHandle)designHandle.getElementFactory().newOdaDataSource(""String_Node_Str"");
  DataSetHandle dataSetHandle=(DataSetHandle)designHandle.getElementFactory().newOdaDataSet(""String_Node_Str"");
  designHandle.getDataSources().add(dataSourceHandle);
  designHandle.getDataSets().add(dataSetHandle);
  designHandle.getStyles().add(styleHandle);
  designHandle.getBody().add(dataHandle);
  designHandle.getParameters().add(parameterHandle);
  designHandle.getBody().add(textHandle);
  designHandle.getBody().add(labelHandle);
  designHandle.getBody().add(tableHandle);
  designHandle.getBody().add(imageHandle);
  assertNotNull(designHandle);
  super.saveAs(outputFileName);
  assertTrue(compareTextFile(goldenFileName,outputFileName));
}","/** 
 * @throws Exception
 */
public void testImportLibrary() throws Exception {
  openDesign(fileName);
  designHandle.includeLibrary(inputLibraryName,""String_Node_Str"");
  LibraryHandle libHandle=designHandle.getLibrary(""String_Node_Str"");
  TextItemHandle textLibHandle=(TextItemHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",textLibHandle);
  TableHandle tableLibHandle=(TableHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",tableLibHandle);
  StyleHandle styleLibHandle=libHandle.findStyle(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",styleLibHandle);
  ParameterHandle parameterLibHandle=libHandle.findParameter(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",parameterLibHandle);
  LabelHandle labelLibHandle=(LabelHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",labelLibHandle);
  ImageHandle imageLibHandle=(ImageHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",imageLibHandle);
  DataItemHandle dataLibHandle=(DataItemHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataLibHandle);
  DataSourceHandle dataSourceLibHandle=libHandle.findDataSource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSourceLibHandle);
  DataSetHandle dataSetLibHandle=libHandle.findDataSet(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSetLibHandle);
  TextItemHandle textHandle=(TextItemHandle)designHandle.getElementFactory().newElementFrom(textLibHandle,""String_Node_Str"");
  TableHandle tableHandle=(TableHandle)designHandle.getElementFactory().newElementFrom(tableLibHandle,""String_Node_Str"");
  StyleHandle styleHandle=designHandle.getElementFactory().newStyle(""String_Node_Str"");
  ParameterHandle parameterHandle=(ParameterHandle)designHandle.getElementFactory().newElementFrom(parameterLibHandle,""String_Node_Str"");
  LabelHandle labelHandle=(LabelHandle)designHandle.getElementFactory().newElementFrom(labelLibHandle,""String_Node_Str"");
  ImageHandle imageHandle=(ImageHandle)designHandle.getElementFactory().newElementFrom(imageLibHandle,""String_Node_Str"");
  DataItemHandle dataHandle=(DataItemHandle)designHandle.getElementFactory().newElementFrom(dataLibHandle,""String_Node_Str"");
  DataSourceHandle dataSourceHandle=designHandle.getElementFactory().newOdaDataSource(""String_Node_Str"");
  DataSetHandle dataSetHandle=designHandle.getElementFactory().newOdaDataSet(""String_Node_Str"");
  designHandle.getDataSources().add(dataSourceHandle);
  designHandle.getDataSets().add(dataSetHandle);
  designHandle.getStyles().add(styleHandle);
  designHandle.getBody().add(dataHandle);
  designHandle.getParameters().add(parameterHandle);
  designHandle.getBody().add(textHandle);
  designHandle.getBody().add(labelHandle);
  designHandle.getBody().add(tableHandle);
  designHandle.getBody().add(imageHandle);
  assertNotNull(designHandle);
  super.saveAs(outputFileName);
  assertTrue(compareTextFile(goldenFileName,outputFileName));
}",0.8948480416057207
77071,"public LibraryImportTest(String name){
  super(name);
}","/** 
 * @param name
 */
public LibraryImportTest(String name){
  super(name);
}",0.8208955223880597
77072,"public static Test suite(){
  return new TestSuite(LibraryIncludeLibraryTest.class);
}","/** 
 * @return
 */
public static Test suite(){
  return new TestSuite(LibraryIncludeLibraryTest.class);
}",0.8958333333333334
77073,"public LibraryIncludeLibraryTest(String name){
  super(name);
}","/** 
 * @param name
 */
public LibraryIncludeLibraryTest(String name){
  super(name);
}",0.84
77074,"public void testIncludeLibrary() throws Exception {
  openLibrary(inputLibraryName2);
  libraryHandle.includeLibrary(inputLibraryName1,""String_Node_Str"");
  LibraryHandle libHandle=libraryHandle.getLibrary(""String_Node_Str"");
  TableHandle tableLibHandle=(TableHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",tableLibHandle);
  DataSourceHandle dataSourceLibHandle=(DataSourceHandle)libHandle.findDataSource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSourceLibHandle);
  DataSetHandle dataSetLibHandle=(DataSetHandle)libHandle.findDataSet(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSetLibHandle);
  TableHandle tableHandle=(TableHandle)libraryHandle.getElementFactory().newElementFrom(tableLibHandle,""String_Node_Str"");
  DataSourceHandle dataSourceHandle=(DataSourceHandle)libraryHandle.getElementFactory().newOdaDataSource(""String_Node_Str"");
  DataSetHandle dataSetHandle=(DataSetHandle)libraryHandle.getElementFactory().newOdaDataSet(""String_Node_Str"");
  libraryHandle.getDataSources().add(dataSourceHandle);
  libraryHandle.getDataSets().add(dataSetHandle);
  assertNotNull(libraryHandle);
  super.saveLibraryAs(outputFileName);
  assertTrue(compareTextFile(goldenFileName,outputFileName));
}","/** 
 * @throws Exception
 */
public void testIncludeLibrary() throws Exception {
  openLibrary(inputLibraryName2);
  libraryHandle.includeLibrary(inputLibraryName1,""String_Node_Str"");
  LibraryHandle libHandle=libraryHandle.getLibrary(""String_Node_Str"");
  TableHandle tableLibHandle=(TableHandle)libHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",tableLibHandle);
  DataSourceHandle dataSourceLibHandle=libHandle.findDataSource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSourceLibHandle);
  DataSetHandle dataSetLibHandle=libHandle.findDataSet(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSetLibHandle);
  TableHandle tableHandle=(TableHandle)libraryHandle.getElementFactory().newElementFrom(tableLibHandle,""String_Node_Str"");
  DataSourceHandle dataSourceHandle=libraryHandle.getElementFactory().newOdaDataSource(""String_Node_Str"");
  DataSetHandle dataSetHandle=libraryHandle.getElementFactory().newOdaDataSet(""String_Node_Str"");
  libraryHandle.getDataSources().add(dataSourceHandle);
  libraryHandle.getDataSets().add(dataSetHandle);
  assertNotNull(libraryHandle);
  super.saveLibraryAs(outputFileName);
  assertTrue(compareTextFile(goldenFileName,outputFileName));
}",0.8602409638554217
77075,"/** 
 * The constructor initializes a tiny image that provides a graphics context capable of performing computations in the absence of a visual component
 * @param _ids
 * @param _la
 */
public SwtTextMetrics(IDisplayServer _ids,Label _la){
  gc=new GC(((SwtDisplayServer)_ids).getDevice());
  ids=_ids;
  la=_la;
  reuse(la);
}","/** 
 * The constructor initializes a tiny image that provides a graphics context capable of performing computations in the absence of a visual component
 * @param _ids
 * @param _la
 */
public SwtTextMetrics(final IDisplayServer _ids,Label _la){
  final Display display=(Display)((SwtDisplayServer)_ids).getDevice();
  display.syncExec(new Runnable(){
    public void run(){
      gc=new GC(display);
    }
  }
);
  ids=_ids;
  la=_la;
  reuse(la);
}",0.7496790757381258
77076,"public final int getDpiResolution(){
  if (iDpiResolution == 0) {
    iDpiResolution=_d.getDPI().x;
  }
  return iDpiResolution;
}","public final int getDpiResolution(){
  if (iDpiResolution == 0) {
    ((Display)_d).syncExec(new Runnable(){
      public void run(){
        iDpiResolution=_d.getDPI().x;
      }
    }
);
  }
  return iDpiResolution;
}",0.7449856733524355
77077,"public AbstractContent(IContent content){
  this(content.getReportContent());
  this.name=content.getName();
  this.x=content.getX();
  this.y=content.getY();
  this.width=content.getWidth();
  this.height=content.getHeight();
  this.hyperlink=content.getHyperlinkAction();
  this.bookmark=content.getBookmark();
  this.helpText=content.getHelpText();
  this.inlineStyle=content.getInlineStyle();
  this.generateBy=content.getGenerateBy();
  this.styleClass=content.getStyleClass();
  this.instanceId=content.getInstanceID();
  this.toc=content.getTOC();
  Object ext=content.getExtension(IContent.DOCUMENT_EXTENSION);
  if (ext != null) {
    setExtension(IContent.DOCUMENT_EXTENSION,ext);
  }
}","public AbstractContent(IContent content){
}",0.1163734776725304
77078,"public void setReportContent(IReportContent report){
  this.report=report;
  this.cssEngine=report.getCSSEngine();
}","public void setReportContent(IReportContent report){
}",0.6352941176470588
77079,"/** 
 * @return temp root dir directory
 */
private void createTempRootDir(){
  if (tempRootDirStr != null && new File(tempRootDirStr).exists() == true)   return;
  String tempDirStr=DataEngineContextExt.getInstance().getTmpdir();
  File tempDtEDir=new File(tempDirStr,""String_Node_Str"");
  if (tempDtEDir.exists() == false) {
    tempDtEDir.mkdir();
  }
 else {
    File[] sessionsFolder=tempDtEDir.listFiles();
    for (int i=0; i < sessionsFolder.length; i++) {
      File[] oneSessionFolder=sessionsFolder[i].listFiles();
      for (int j=0; j < oneSessionFolder.length; j++) {
        if (oneSessionFolder[j].isDirectory()) {
          File[] oneSessionTempFiles=oneSessionFolder[j].listFiles();
          for (int k=0; k < oneSessionTempFiles.length; k++) {
            oneSessionTempFiles[k].delete();
          }
          oneSessionFolder[j].delete();
        }
 else {
          oneSessionFolder[j].delete();
        }
      }
      sessionsFolder[i].delete();
    }
  }
  try {
    tempRootDirStr=tempDtEDir.getCanonicalPath();
  }
 catch (  IOException e) {
  }
}","/** 
 * @return temp root dir directory
 */
private void createTempRootDir(){
  if (tempRootDirStr != null && new File(tempRootDirStr).exists() == true)   return;
  File tempDtEDir=null;
synchronized (cacheCounter1) {
    String tempDirStr=DataEngineContextExt.getInstance().getTmpdir();
    tempDtEDir=new File(tempDirStr,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1);
    cacheCounter1=new Integer(cacheCounter1.intValue() + 1);
    int x=0;
    while (tempDtEDir.exists()) {
      x++;
      tempDtEDir=new File(tempDirStr,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1+ ""String_Node_Str""+ x);
    }
    tempDtEDir.mkdir();
    tempDtEDir.deleteOnExit();
  }
  try {
    tempRootDirStr=tempDtEDir.getCanonicalPath();
  }
 catch (  IOException e) {
  }
}",0.4117962466487935
77080,"/** 
 * Creates Report default styles
 */
protected void createReportDefaultStyles(StyleHandle handle){
  nonInheritableReportStyle=new StyleDeclaration(cssEngine);
  inheritableReportStyle=new StyleDeclaration(cssEngine);
  addReportDefaultPropertyValue(Style.BACKGROUND_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BACKGROUND_IMAGE_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_POSITION_X_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_POSITION_Y_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_REPEAT_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_ALIGN_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_INDENT_PROP,handle);
  addReportDefaultPropertyValue(Style.LETTER_SPACING_PROP,handle);
  addReportDefaultPropertyValue(Style.LINE_HEIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.ORPHANS_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_TRANSFORM_PROP,handle);
  addReportDefaultPropertyValue(Style.VERTICAL_ALIGN_PROP,handle);
  addReportDefaultPropertyValue(Style.WHITE_SPACE_PROP,handle);
  addReportDefaultPropertyValue(Style.WIDOWS_PROP,handle);
  addReportDefaultPropertyValue(Style.WORD_SPACING_PROP,handle);
  addReportDefaultPropertyValue(Style.DISPLAY_PROP,handle);
  addReportDefaultPropertyValue(Style.MASTER_PAGE_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_AFTER_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_BEFORE_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_INSIDE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_FAMILY_PROP,handle);
  addReportDefaultPropertyValue(Style.COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.FONT_SIZE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_WEIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_VARIANT_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_LINE_THROUGH_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_OVERLINE_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_UNDERLINE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_TOP_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_TOP_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_TOP_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_TOP_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_LEFT_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_BOTTOM_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_RIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_TOP_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_LEFT_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_BOTTOM_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_RIGHT_PROP,handle);
  report.setRootStyleName(assignStyleName(inheritableReportStyle));
}","/** 
 * Creates Report default styles
 */
protected void createReportDefaultStyles(StyleHandle handle){
  nonInheritableReportStyle=new StyleDeclaration(cssEngine);
  inheritableReportStyle=new StyleDeclaration(cssEngine);
  addReportDefaultPropertyValue(Style.BACKGROUND_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BACKGROUND_IMAGE_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_POSITION_X_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_POSITION_Y_PROP,handle);
  addReportDefaultPropertyValue(Style.BACKGROUND_REPEAT_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_ALIGN_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_INDENT_PROP,handle);
  addReportDefaultPropertyValue(Style.LETTER_SPACING_PROP,handle);
  addReportDefaultPropertyValue(Style.LINE_HEIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.ORPHANS_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_TRANSFORM_PROP,handle);
  addReportDefaultPropertyValue(Style.VERTICAL_ALIGN_PROP,handle);
  addReportDefaultPropertyValue(Style.WHITE_SPACE_PROP,handle);
  addReportDefaultPropertyValue(Style.WIDOWS_PROP,handle);
  addReportDefaultPropertyValue(Style.WORD_SPACING_PROP,handle);
  addReportDefaultPropertyValue(Style.DISPLAY_PROP,handle);
  addReportDefaultPropertyValue(Style.MASTER_PAGE_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_AFTER_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_BEFORE_PROP,handle);
  addReportDefaultPropertyValue(Style.PAGE_BREAK_INSIDE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_FAMILY_PROP,handle);
  addReportDefaultPropertyValue(Style.COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.FONT_SIZE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_WEIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.FONT_VARIANT_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_LINE_THROUGH_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_OVERLINE_PROP,handle);
  addReportDefaultPropertyValue(Style.TEXT_UNDERLINE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_BOTTOM_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_LEFT_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_RIGHT_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_TOP_COLOR_PROP,handle,true);
  addReportDefaultPropertyValue(Style.BORDER_TOP_STYLE_PROP,handle);
  addReportDefaultPropertyValue(Style.BORDER_TOP_WIDTH_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_TOP_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_LEFT_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_BOTTOM_PROP,handle);
  addReportDefaultPropertyValue(Style.MARGIN_RIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_TOP_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_LEFT_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_BOTTOM_PROP,handle);
  addReportDefaultPropertyValue(Style.PADDING_RIGHT_PROP,handle);
  addReportDefaultPropertyValue(Style.STRING_FORMAT_PROP,handle);
  addReportDefaultPropertyValue(Style.NUMBER_FORMAT_PROP,handle);
  addReportDefaultPropertyValue(Style.DATE_TIME_FORMAT_PROP,handle);
  report.setRootStyleName(assignStyleName(inheritableReportStyle));
}",0.9728121195725686
77081,"/** 
 * Parses the old resultSets and resultSetHints list to the new resultSets list. <p> resultSetsHints maps to new result set name. resultSet maps to new result set native name. <p> The conversion is done from the file version 3.2.5. It is a part of automatic conversion for BIRT 2.1.1.
 * @param resultSets the result sets
 * @param resultSetHints the result set hints
 */
private void mergeResultSetAndResultSetHints(OdaDataSet dataSet){
  if (handler.versionNumber >= VersionUtil.VERSION_3_2_6 || handler.versionNumber < VersionUtil.VERSION_3_2_2) {
    return;
  }
  List resultSets=(List)dataSet.getLocalProperty(handler.module,IDataSetModel.RESULT_SET_PROP);
  List resultSetHints=(List)dataSet.getLocalProperty(handler.module,IDataSetModel.RESULT_SET_HINTS_PROP);
  if (resultSetHints == null) {
    updateOdaResultSetColumn(resultSets);
    return;
  }
  for (int i=0; i < resultSetHints.size(); i++) {
    ResultSetColumn hint=(ResultSetColumn)resultSetHints.get(i);
    OdaResultSetColumn currentColumn=findResultSet(resultSets,hint.getColumnName(),hint.getPosition());
    if (currentColumn == null) {
      currentColumn=convertResultSetColumnToOdaResultSetColumn(hint);
      resultSets.add(currentColumn);
    }
 else {
      String nativeName=currentColumn.getColumnName();
      String columnName=hint.getColumnName();
      currentColumn.setColumnName(columnName);
      currentColumn.setNativeName(nativeName);
      if (currentColumn.getDataType() == null)       currentColumn.setDataType(hint.getDataType());
      if (currentColumn.getNativeDataType() == null)       currentColumn.setNativeDataType(hint.getNativeDataType());
      if (currentColumn.getNativeName() == null)       currentColumn.setNativeName(currentColumn.getColumnName());
      if (currentColumn.getColumnName() == null)       currentColumn.setColumnName(currentColumn.getNativeName());
    }
  }
}","/** 
 * Parses the old resultSets and resultSetHints list to the new resultSets list. <p> resultSetsHints maps to new result set name. resultSet maps to new result set native name. <p> The conversion is done from the file version 3.2.5. It is a part of automatic conversion for BIRT 2.1.1.
 * @param resultSets the result sets
 * @param resultSetHints the result set hints
 */
private void mergeResultSetAndResultSetHints(OdaDataSet dataSet){
  if (handler.versionNumber >= VersionUtil.VERSION_3_2_6 || handler.versionNumber < VersionUtil.VERSION_3_2_2) {
    return;
  }
  List resultSets=(List)dataSet.getLocalProperty(handler.module,IDataSetModel.RESULT_SET_PROP);
  List resultSetHints=(List)dataSet.getLocalProperty(handler.module,IDataSetModel.RESULT_SET_HINTS_PROP);
  if (resultSetHints == null) {
    updateOdaResultSetColumn(resultSets);
    return;
  }
  for (int i=0; i < resultSetHints.size(); i++) {
    ResultSetColumn hint=(ResultSetColumn)resultSetHints.get(i);
    OdaResultSetColumn currentColumn=null;
    if (resultSets != null)     currentColumn=findResultSet(resultSets,hint.getColumnName(),hint.getPosition());
    if (currentColumn == null) {
      currentColumn=convertResultSetColumnToOdaResultSetColumn(hint);
      if (resultSets == null) {
        resultSets=new ArrayList();
        dataSet.setProperty(IDataSetModel.RESULT_SET_PROP,resultSets);
      }
      resultSets.add(currentColumn);
    }
 else {
      String nativeName=currentColumn.getColumnName();
      String columnName=hint.getColumnName();
      currentColumn.setColumnName(columnName);
      currentColumn.setNativeName(nativeName);
      if (currentColumn.getDataType() == null)       currentColumn.setDataType(hint.getDataType());
      if (currentColumn.getNativeDataType() == null)       currentColumn.setNativeDataType(hint.getNativeDataType());
      if (currentColumn.getNativeName() == null)       currentColumn.setNativeName(currentColumn.getColumnName());
      if (currentColumn.getColumnName() == null)       currentColumn.setColumnName(currentColumn.getNativeName());
    }
  }
}",0.9500125596583772
77082,"/** 
 * set Dte temporary dir.
 * @param tmpdir
 */
public void setTmpdir(String tmpdir){
  DataEngineContextExt.getInstance().setTmpdir(tmpdir);
}","/** 
 * set Dte temporary dir.
 * @param tmpdir
 */
public void setTmpdir(String tmpdir){
  this.tmpDir=tmpdir;
}",0.8307692307692308
77083,"/** 
 * get Dte temporary dir.
 * @return
 */
public String getTmpdir(){
  return DataEngineContextExt.getInstance().getTmpdir();
}","/** 
 * get Dte temporary dir.
 * @return
 */
public String getTmpdir(){
  return tmpDir;
}",0.8108108108108109
77084,"/** 
 * @param expr
 * @return
 */
private String getColumnRefExpression(String expr){
  return ""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(expr) + ""String_Node_Str"";
}","/** 
 * @param expr
 * @return
 */
private String getColumnRefExpression(String expr){
  return ExpressionUtil.createJSRowExpression(expr);
}",0.72782874617737
77085,"public void link(){
  report.setReportDesign(handle);
  PageSetupDesign pageSetup=report.getPageSetup();
  int masterPageCount=pageSetup.getMasterPageCount();
  for (int i=0; i < masterPageCount; i++) {
    SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)pageSetup.getMasterPage(i);
    linkReportElement(masterPage);
    int count=masterPage.getHeaderCount();
    for (int j=0; j < count; j++) {
      ReportItemDesign item=masterPage.getHeader(i);
      item.accept(this,null);
    }
    count=masterPage.getFooterCount();
    for (int j=0; j < count; j++) {
      ReportItemDesign item=masterPage.getFooter(i);
      item.accept(this,null);
    }
  }
  int count=report.getContentCount();
  for (int i=0; i < count; i++) {
    ReportItemDesign item=report.getContent(i);
    item.accept(this,null);
  }
}","public void link(){
  report.setReportDesign(handle);
  PageSetupDesign pageSetup=report.getPageSetup();
  int masterPageCount=pageSetup.getMasterPageCount();
  for (int i=0; i < masterPageCount; i++) {
    SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)pageSetup.getMasterPage(i);
    linkReportElement(masterPage);
    int count=masterPage.getHeaderCount();
    for (int j=0; j < count; j++) {
      ReportItemDesign item=masterPage.getHeader(j);
      item.accept(this,null);
    }
    count=masterPage.getFooterCount();
    for (int j=0; j < count; j++) {
      ReportItemDesign item=masterPage.getFooter(j);
      item.accept(this,null);
    }
  }
  int count=report.getContentCount();
  for (int i=0; i < count; i++) {
    ReportItemDesign item=report.getContent(i);
    item.accept(this,null);
  }
}",0.9975520195838432
77086,"/** 
 * @param cx
 * @param dataSetFilters
 * @param queryFilters
 * @param temporaryComputedColumns
 * @return
 */
private List prepareFilters(Context cx,List dataSetFilters,List queryFilters,List temporaryComputedColumns){
  List result=new ArrayList();
  prepareFilter(cx,dataSetFilters,temporaryComputedColumns,result);
  prepareFilter(cx,queryFilters,temporaryComputedColumns,result);
  return result;
}","/** 
 * @param cx
 * @param dataSetFilters
 * @param queryFilters
 * @param temporaryComputedColumns
 * @return
 * @throws DataException 
 */
private List prepareFilters(Context cx,List dataSetFilters,List queryFilters,List temporaryComputedColumns) throws DataException {
  List result=new ArrayList();
  prepareFilter(cx,dataSetFilters,temporaryComputedColumns,result);
  prepareFilter(cx,queryFilters,temporaryComputedColumns,result);
  return result;
}",0.9444444444444444
77087,"/** 
 * @param cx
 * @param dataSetFilters
 * @param temporaryComputedColumns
 * @param result
 */
private void prepareFilter(Context cx,List dataSetFilters,List temporaryComputedColumns,List result){
  if (dataSetFilters != null && !dataSetFilters.isEmpty()) {
    Iterator it=dataSetFilters.iterator();
    for (int i=0; it.hasNext(); i++) {
      IFilterDefinition src=(IFilterDefinition)it.next();
      IBaseExpression expr=src.getExpression();
      if (isGroupFilter(src)) {
        ConditionalExpression ce=((ConditionalExpression)expr);
        String exprText=ce.getExpression().getText();
        ColumnInfo columnInfo=QueryExecutorUtil.getColInfoFromJSExpr(cx,exprText);
        int index=columnInfo.getColumnIndex();
        String name=columnInfo.getColumnName();
        if (name == null && index < 0) {
          temporaryComputedColumns.add(new ComputedColumn(""String_Node_Str"" + i + ""String_Node_Str"",exprText,DataType.ANY_TYPE));
          it.remove();
          result.add(new FilterDefinition(new ConditionalExpression(new ScriptExpression(String.valueOf(""String_Node_Str"" + i + ""String_Node_Str"")),ce.getOperator(),ce.getOperand1(),ce.getOperand2())));
        }
      }
    }
  }
}","/** 
 * @param cx
 * @param dataSetFilters
 * @param temporaryComputedColumns
 * @param result
 * @throws DataException 
 */
private void prepareFilter(Context cx,List dataSetFilters,List temporaryComputedColumns,List result) throws DataException {
  if (dataSetFilters != null && !dataSetFilters.isEmpty()) {
    Iterator it=dataSetFilters.iterator();
    for (int i=0; it.hasNext(); i++) {
      IFilterDefinition src=(IFilterDefinition)it.next();
      IBaseExpression expr=src.getExpression();
      if (isGroupFilter(src)) {
        ConditionalExpression ce=((ConditionalExpression)expr);
        String exprText=ce.getExpression().getText();
        ColumnInfo columnInfo=QueryExecutorUtil.getColInfoFromJSExpr(cx,exprText);
        int index=columnInfo.getColumnIndex();
        String name=columnInfo.getColumnName();
        if (name == null && index < 0) {
          temporaryComputedColumns.add(new ComputedColumn(""String_Node_Str"" + i + ""String_Node_Str"",exprText,DataType.ANY_TYPE));
          it.remove();
          result.add(new FilterDefinition(new ConditionalExpression(new ScriptExpression(String.valueOf(""String_Node_Str"" + i + ""String_Node_Str"")),ce.getOperator(),ce.getOperand1(),ce.getOperand2())));
        }
      }
    }
  }
}",0.980456026058632
77088,"/** 
 * @param filter
 * @return
 */
private boolean isGroupFilter(IFilterDefinition filter){
  IBaseExpression expr=filter.getExpression();
  if (expr instanceof IConditionalExpression) {
    try {
      if (odiQuery instanceof BaseQuery) {
        return ((BaseQuery)odiQuery).getExprProcessor().hasAggregation(expr);
      }
    }
 catch (    DataException e) {
      return true;
    }
  }
  return false;
}","/** 
 * @param filter
 * @return
 * @throws DataException 
 */
private boolean isGroupFilter(IFilterDefinition filter) throws DataException {
  IBaseExpression expr=filter.getExpression();
  if (expr instanceof IConditionalExpression) {
    if (!ExpressionCompilerUtil.isValidExpressionInQueryFilter(expr))     throw new DataException(ResourceConstants.INVALID_DEFINITION_IN_FILTER,new Object[]{((IConditionalExpression)expr).getExpression().getText()});
    try {
      if (odiQuery instanceof BaseQuery) {
        return ((BaseQuery)odiQuery).getExprProcessor().hasAggregation(expr);
      }
    }
 catch (    DataException e) {
      return true;
    }
  }
  return false;
}",0.7555147058823529
77089,"/** 
 * Evaluates a property binding Javascript expression
 */
String evaluatePropertyBindingExpr(String expr) throws BirtException {
  Object result=JavascriptEvalUtil.evaluateScript(null,jsScope,expr,""String_Node_Str"",0);
  return result.toString();
}","/** 
 * Evaluates a property binding Javascript expression
 */
String evaluatePropertyBindingExpr(String expr) throws BirtException {
  Object result=JavascriptEvalUtil.evaluateScript(null,jsScope,expr,""String_Node_Str"",0);
  return result == null ? null : result.toString();
}",0.9547169811320756
77090,"private void fillExpression(Combo control){
  String te=""String_Node_Str"";
  if (handle != null) {
    te=handle.getTestExpression();
  }
  if (designHandle instanceof DataItemHandle && ((DataItemHandle)designHandle).getColumnBindings().iterator().hasNext()) {
    control.add(VALUE_OF_THIS_DATA_ITEM);
  }
  control.add(DEUtil.resolveNull(te));
  control.select(control.getItemCount() - 1);
}","private void fillExpression(Combo control){
  String te=""String_Node_Str"";
  if (handle != null) {
    te=handle.getTestExpression();
  }
  if (designHandle instanceof DataItemHandle && (((DataItemHandle)designHandle).getColumnBindings().iterator().hasNext() || (((DataItemHandle)designHandle).getResultSetColumn() != null))) {
    control.add(VALUE_OF_THIS_DATA_ITEM);
  }
  control.add(DEUtil.resolveNull(te));
  control.select(control.getItemCount() - 1);
}",0.9214536928487692
77091,"private void handleElement(Element ele,boolean needEscape,HashMap cssStyles,IContent content,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setParent(content);
    handleStyle(ele,cssStyles,container);
    ActionContent oldAction=action;
    handleAnchor(ele,container);
    processNodes(ele,needEscape,cssStyles,container);
    this.action=oldAction;
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.BLOCK_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.MIDDLE_VALUE);
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setInlineStyle(style);
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    TextContent text=new TextContent((ReportContent)content.getReportContent());
    addChild(container,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(""String_Node_Str"");
    }
    style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    text.setInlineStyle(style);
    IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
    addChild(container,childContainer);
    childContainer.setInlineStyle(style);
    processNodes(ele,needEscape,cssStyles,childContainer);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=new TextContent((ReportContent)content.getReportContent());
      addChild(content,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      processNodes(ele,needEscape,cssStyles,container);
    }
  }
 else {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    handleStyle(ele,cssStyles,container);
    if (htmlDisplayMode.contains(ele.getTagName())) {
      addChild(content,container);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      if (inlineContainerStack.isEmpty()) {
        container.setParent(content);
      }
 else {
        container.setParent((IContent)inlineContainerStack.peek());
      }
      inlineContainerStack.push(container);
      processNodes(ele,needEscape,cssStyles,content);
      inlineContainerStack.pop();
    }
  }
}","private void handleElement(Element ele,boolean needEscape,HashMap cssStyles,IContent content,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setParent(content);
    handleStyle(ele,cssStyles,container);
    ActionContent oldAction=action;
    handleAnchor(ele,container);
    processNodes(ele,needEscape,cssStyles,container);
    this.action=oldAction;
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.BLOCK_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.MIDDLE_VALUE);
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setInlineStyle(style);
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    IContainerContent orderContainer=new ContainerContent((ReportContent)content.getReportContent());
    CSSValue fontSizeValue=content.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
    orderContainer.setWidth(new DimensionType(2.1 * PropertyUtil.getDimensionValue(fontSizeValue) / 1000.0,EngineIRConstants.UNITS_PT));
    orderContainer.setInlineStyle(style);
    addChild(container,orderContainer);
    TextContent text=new TextContent((ReportContent)content.getReportContent());
    addChild(orderContainer,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(""String_Node_Str"");
    }
    text.setInlineStyle(style);
    IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
    addChild(container,childContainer);
    childContainer.setInlineStyle(style);
    processNodes(ele,needEscape,cssStyles,childContainer);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=new TextContent((ReportContent)content.getReportContent());
      addChild(content,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      processNodes(ele,needEscape,cssStyles,container);
    }
  }
 else {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    handleStyle(ele,cssStyles,container);
    if (htmlDisplayMode.contains(ele.getTagName())) {
      addChild(content,container);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      if (inlineContainerStack.isEmpty()) {
        container.setParent(content);
      }
 else {
        container.setParent((IContent)inlineContainerStack.peek());
      }
      inlineContainerStack.push(container);
      processNodes(ele,needEscape,cssStyles,content);
      inlineContainerStack.pop();
    }
  }
}",0.8742668230777434
77092,"public void visitReportDesign(ReportDesign obj){
  sourceDesign=obj;
  targetDesign=(ReportDesign)localize(obj);
  visitSlots(obj,targetDesign,ReportDesign.SLOT_COUNT);
  addExternalElements();
  addExternalStructures();
  release();
}","public void visitReportDesign(ReportDesign obj){
  sourceDesign=obj;
  targetDesign=(ReportDesign)localize(obj);
  visitSlots(obj,targetDesign,ReportDesign.SLOT_COUNT);
  addExternalElements();
  addExternalStructures();
  release();
  targetDesign.getVersionManager().setVersion(sourceDesign.getVersionManager().getVersion());
}",0.8333333333333334
77093,"/** 
 * Reset the result column name for the data item. Since the bound column name may recreated in this state, the corresponding result set colum must be resetted.
 * @param group the group element
 * @param columns the bound column list
 */
private void reCheckResultSetColumnName(GroupElement group,List columns,Module module){
}","/** 
 * Reset the result column name for the data item. Since the bound column name may recreated in this state, the corresponding result set colum must be resetted.
 * @param group the group element
 * @param columns the bound column list
 */
private void reCheckResultSetColumnName(GroupElement group,List columns,Module module){
  int level=-1;
  if (group instanceof TableGroup)   level=3;
  if (group instanceof ListGroup)   level=1;
  LevelContentIterator contentIter=new LevelContentIterator(group,level);
  while (contentIter.hasNext()) {
    DesignElement item=(DesignElement)contentIter.next();
    if (!(item instanceof DataItem))     continue;
    String resultSetColumn=(String)item.getLocalProperty(module,DataItem.RESULT_SET_COLUMN_PROP);
    if (StringUtil.isBlank(resultSetColumn))     continue;
    ComputedColumn foundColumn=DataColumnNameValidator.getColumn(columns,resultSetColumn);
    if (foundColumn == null)     continue;
    foundColumn=checkMatchedBoundColumnForGroup(columns,foundColumn.getExpression(),(String)group.getLocalProperty(module,GroupElement.GROUP_NAME_PROP));
    if (foundColumn == null)     continue;
    item.setProperty(DataItem.RESULT_SET_COLUMN_PROP,foundColumn.getName());
  }
}",0.4271969211032713
77094,"/** 
 * Create a row expression base on a binding column name.
 * @param columnName the column name
 * @return the expression, or null if the column name is blank.
 */
public static String getColumnExpression(String columnName){
  Assert.isNotNull(columnName);
  if (StringUtil.isBlank(columnName)) {
    return null;
  }
  return IReportElementConstants.BINDING_COLUMN_PREFIX + ""String_Node_Str"" + DEUtil.escape(columnName)+ ""String_Node_Str"";
}","/** 
 * Create a row expression base on a binding column name.
 * @param columnName the column name
 * @return the expression, or null if the column name is blank.
 */
public static String getColumnExpression(String columnName){
  Assert.isNotNull(columnName);
  if (StringUtil.isBlank(columnName)) {
    return null;
  }
  return ExpressionUtil.createJSRowExpression(columnName);
}",0.8115942028985508
77095,"/** 
 * Gets the proper expression for the given model
 * @param model the given model
 * @return Returns the proper expression for the given model, or null if noproper one exists
 */
public static String getExpression(Object model){
  if (model instanceof ParameterHandle) {
    return IReportElementConstants.PARAMETER_PREFIX + ""String_Node_Str"" + escape(((ParameterHandle)model).getQualifiedName())+ ""String_Node_Str"";
  }
  if (model instanceof DataSetItemModel) {
    String colName=((DataSetItemModel)model).getAlias();
    if (colName == null || colName.trim().length() == 0) {
      colName=((DataSetItemModel)model).getName();
    }
    return getColumnExpression(colName);
  }
  if (model instanceof ComputedColumnHandle) {
    return getColumnExpression(((ComputedColumnHandle)model).getName());
  }
  if (model instanceof ResultSetColumnHandle) {
    return getResultSetColumnExpression(((ResultSetColumnHandle)model).getColumnName());
  }
  if (model instanceof DataSetParameterHandle) {
    return IReportElementConstants.STOREDPROCUDURE_OUTPUT_PREFIX + ""String_Node_Str"" + escape(((DataSetParameterHandle)model).getName())+ ""String_Node_Str"";
  }
  return null;
}","/** 
 * Gets the proper expression for the given model
 * @param model the given model
 * @return Returns the proper expression for the given model, or null if noproper one exists
 */
public static String getExpression(Object model){
  if (model instanceof ParameterHandle) {
    return ExpressionUtil.createJSParameterExpression(((ParameterHandle)model).getQualifiedName());
  }
  if (model instanceof DataSetItemModel) {
    String colName=((DataSetItemModel)model).getAlias();
    if (colName == null || colName.trim().length() == 0) {
      colName=((DataSetItemModel)model).getName();
    }
    return getColumnExpression(colName);
  }
  if (model instanceof ComputedColumnHandle) {
    return getColumnExpression(((ComputedColumnHandle)model).getName());
  }
  if (model instanceof ResultSetColumnHandle) {
    return getResultSetColumnExpression(((ResultSetColumnHandle)model).getColumnName());
  }
  if (model instanceof DataSetParameterHandle) {
    return IReportElementConstants.STOREDPROCUDURE_OUTPUT_PREFIX + ""String_Node_Str"" + escape(((DataSetParameterHandle)model).getName())+ ""String_Node_Str"";
  }
  return null;
}",0.90995670995671
77096,"/** 
 * Create a row expression base on a result set column name.
 * @param columnName the column name
 * @return the expression, or null if the column name is blank.
 */
public static String getResultSetColumnExpression(String columnName){
  Assert.isNotNull(columnName);
  if (StringUtil.isBlank(columnName)) {
    return null;
  }
  return IReportElementConstants.RESULTSET_COLUMN_PREFIX + ""String_Node_Str"" + DEUtil.escape(columnName)+ ""String_Node_Str"";
}","/** 
 * Create a row expression base on a result set column name.
 * @param columnName the column name
 * @return the expression, or null if the column name is blank.
 */
public static String getResultSetColumnExpression(String columnName){
  Assert.isNotNull(columnName);
  if (StringUtil.isBlank(columnName)) {
    return null;
  }
  return ExpressionUtil.createJSDataSetRowExpression(columnName);
}",0.8362369337979094
77097,"/** 
 * Transform a String value to a Timestamp value
 * @param stringValue String value
 * @return Corresponding Timestamp value
 * @throws OdaException 
 */
private Timestamp stringToTimestamp(String stringValue) throws OdaException {
  testClosed();
  if (stringValue != null) {
    try {
      long timeMills=new Long(stringValue).longValue();
      return new Timestamp(timeMills);
    }
 catch (    NumberFormatException e1) {
      try {
        java.util.Date date=DateUtil.toDate(stringValue);
        Timestamp timeStamp=new Timestamp(date.getTime());
        return timeStamp;
      }
 catch (      OdaException oe) {
        this.wasNull=true;
        return null;
      }
    }
  }
  this.wasNull=true;
  return null;
}","/** 
 * Transform a String value to a Timestamp value
 * @param stringValue String value
 * @return Corresponding Timestamp value
 * @throws OdaException 
 */
private Timestamp stringToTimestamp(String stringValue) throws OdaException {
  testClosed();
  if (stringValue != null) {
    try {
      stringValue=stringValue.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")[0];
      return Timestamp.valueOf(stringValue);
    }
 catch (    IllegalArgumentException e) {
      try {
        long timeMills=new Long(stringValue).longValue();
        return new Timestamp(timeMills);
      }
 catch (      NumberFormatException e1) {
        try {
          java.util.Date date=DateUtil.toDate(stringValue);
          Timestamp timeStamp=new Timestamp(date.getTime());
          return timeStamp;
        }
 catch (        OdaException oe) {
          this.wasNull=true;
          return null;
        }
      }
    }
  }
  this.wasNull=true;
  return null;
}",0.7309941520467836
77098,"/** 
 * clear unused column hints
 * @throws BirtException 
 */
private final void clearUnusedColumnHints(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  if (handle != null && handle.getListValue() != null) {
    ArrayList list=handle.getListValue();
    int count=list.size();
    for (int n=count - 1; n >= 0; n--) {
      ColumnHint hint=(ColumnHint)list.get(n);
      String columnName=(String)hint.getProperty(handle.getDesign(),ColumnHint.COLUMN_NAME_MEMBER);
      boolean found=false;
      if (!isEmpty(hint,handle.getModule().getModuleHandle())) {
        for (int m=0; m < metaData.getColumnCount() && !found; m++) {
          found=columnName.equals(metaData.getColumnName(m + 1));
        }
      }
      if (!found) {
        try {
          handle.removeItem(hint);
        }
 catch (        PropertyValueException e) {
        }
      }
    }
  }
}","/** 
 * clear unused column hints
 * @throws BirtException 
 */
private final void clearUnusedColumnHints(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  if (handle != null && handle.getListValue() != null) {
    ArrayList list=handle.getListValue();
    int count=list.size();
    for (int n=count - 1; n >= 0; n--) {
      ColumnHint hint=(ColumnHint)list.get(n);
      String columnName=(String)hint.getProperty(handle.getModule(),ColumnHint.COLUMN_NAME_MEMBER);
      boolean found=false;
      if (!isEmpty(hint,handle.getModule().getModuleHandle())) {
        for (int m=0; m < metaData.getColumnCount() && !found; m++) {
          found=columnName.equals(metaData.getColumnName(m + 1));
        }
      }
      if (!found) {
        try {
          handle.removeItem(hint);
        }
 catch (        PropertyValueException e) {
        }
      }
    }
  }
}",0.9939086294416244
77099,"/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    if (!meta.isComputedColumn(i)) {
      rsColumn.setColumnName(meta.getColumnName(i));
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
    }
  }
  CompaibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}","/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompaibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}",0.8055235903337169
77100,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent) {
      CompaibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompaibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}",0.9888089528377298
77101,"/** 
 * @param dataSetHandle
 * @param metaData
 * @throws BirtException 
 */
private final void clearUnusedData(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  clearUnusedColumnHints(dataSetHandle,metaData);
  clearUnusedResultSetColumns(dataSetHandle,metaData);
}","/** 
 * @param dataSetHandle
 * @param metaData
 * @throws BirtException 
 */
private final void clearUnusedData(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  clearUnusedColumnHints(dataSetHandle,metaData);
}",0.8975791433891993
77102,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    if (dataSetHandle.canEdit())     addResultSetColumn(dataSetHandle,metaData);
    if (MetaDataPopulator.needsUseResultHint(dataSetHandle,metaData)) {
      metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
    }
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    addResultSetColumn(dataSetHandle,metaData);
    if (MetaDataPopulator.needsUseResultHint(dataSetHandle,metaData)) {
      metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
    }
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}",0.981917808219178
77103,"/** 
 * @param orgColumnNameSet
 * @param newColumnNameSet
 * @param columnName
 * @param index
 * @return
 */
private static String getUniqueName(HashSet orgColumnNameSet,HashSet newColumnNameSet,String columnName,int index){
  String newColumnName;
  if (columnName == null || columnName.trim().length() == 0 || newColumnNameSet.contains(columnName)) {
    if (columnName == null || columnName.trim().length() == 0)     newColumnName=UNNAME_PREFIX + RENAME_SEPARATOR + String.valueOf(index + 1);
 else     newColumnName=columnName + RENAME_SEPARATOR + String.valueOf(index + 1);
    int i=1;
    while (orgColumnNameSet.contains(newColumnName) || newColumnNameSet.contains(newColumnName)) {
      newColumnName+=String.valueOf(RENAME_SEPARATOR) + i;
      i++;
    }
  }
 else {
    newColumnName=columnName;
  }
  return newColumnName;
}","/** 
 * @param orgColumnNameSet
 * @param newColumnNameSet
 * @param columnName
 * @param index
 * @return
 */
public static String getUniqueName(HashSet orgColumnNameSet,HashSet newColumnNameSet,String columnName,int index){
  String newColumnName;
  if (columnName == null || columnName.trim().length() == 0 || newColumnNameSet.contains(columnName)) {
    if (columnName == null || columnName.trim().length() == 0)     newColumnName=UNNAME_PREFIX + RENAME_SEPARATOR + String.valueOf(index + 1);
 else     newColumnName=columnName + RENAME_SEPARATOR + String.valueOf(index + 1);
    int i=1;
    while (orgColumnNameSet.contains(newColumnName) || newColumnNameSet.contains(newColumnName)) {
      newColumnName+=String.valueOf(RENAME_SEPARATOR) + i;
      i++;
    }
  }
 else {
    newColumnName=columnName;
  }
  return newColumnName;
}",0.9934484812388328
77104,"/** 
 * This method returnt <code>true</code> in following condition: <p> 1. The multi selected elements are same type. <p> 2. And the multi selected elements have extends. <p> 3. If any of the given elements has local properties. <p>
 * @return <code>true</code> if the conditions is met.
 */
public final boolean hasLocalPropertiesForExtendedElements(){
  if (!isSameType())   return false;
  if (!allExtendedElements())   return false;
  List elements=getElements();
  for (Iterator iter=elements.iterator(); iter.hasNext(); ) {
    DesignElementHandle elementHandle=(DesignElementHandle)iter.next();
    Iterator propIter=elementHandle.getPropertyIterator();
    while (propIter.hasNext()) {
      PropertyHandle propertyHandle=(PropertyHandle)propIter.next();
      String name=propertyHandle.getDefn().getName();
      if ((IDesignElementModel.NAME_PROP.equals(name)) || (IDesignElementModel.EXTENDS_PROP.equals(name)) || IExtendedItemModel.EXTENSION_NAME_PROP.equals(name))       continue;
      if (elementHandle instanceof ExtendedItemHandle) {
        ExtendedItem elem=(ExtendedItem)elementHandle.getElement();
        if (elem.isExtensionXMLProperty(name))         continue;
        if (elem.isExtensionModelProperty(name)) {
          ExtendedItem parent=(ExtendedItem)elem.getExtendsElement();
          if (!elem.getLocalProperty(elementHandle.getModule(),name).equals(parent.getLocalProperty(parent.getRoot(),name)))           return true;
 else           continue;
        }
      }
      if (elementHandle.getElement().getLocalProperty(elementHandle.getModule(),name) != null)       return true;
    }
  }
  return false;
}","/** 
 * This method returnt <code>true</code> in following condition: <p> 1. The multi selected elements are same type. <p> 2. And the multi selected elements have extends. <p> 3. If any of the given elements has local properties. <p>
 * @return <code>true</code> if the conditions is met.
 */
public final boolean hasLocalPropertiesForExtendedElements(){
  if (!isSameType())   return false;
  if (!allExtendedElements())   return false;
  List elements=getElements();
  for (Iterator iter=elements.iterator(); iter.hasNext(); ) {
    DesignElementHandle elementHandle=(DesignElementHandle)iter.next();
    Iterator propIter=elementHandle.getPropertyIterator();
    while (propIter.hasNext()) {
      PropertyHandle propertyHandle=(PropertyHandle)propIter.next();
      String name=propertyHandle.getDefn().getName();
      if ((IDesignElementModel.NAME_PROP.equals(name)) || (IDesignElementModel.EXTENDS_PROP.equals(name)) || IExtendedItemModel.EXTENSION_NAME_PROP.equals(name))       continue;
      if (elementHandle instanceof ExtendedItemHandle) {
        ExtendedItem elem=(ExtendedItem)elementHandle.getElement();
        if (elem.isExtensionXMLProperty(name))         continue;
        if (elem.isExtensionModelProperty(name)) {
          ExtendedItem parent=(ExtendedItem)elem.getExtendsElement();
          try {
            parent.initializeReportItem(parent.getRoot());
          }
 catch (          ExtendedElementException e) {
          }
          Object value=elem.getLocalProperty(elementHandle.getModule(),name);
          if (value != null && !value.equals(parent.getLocalProperty(parent.getRoot(),name)))           return true;
 else           continue;
        }
      }
      if (elementHandle.getElement().getLocalProperty(elementHandle.getModule(),name) != null)       return true;
    }
  }
  return false;
}",0.786536248561565
77105,"/** 
 * Gets all the Styles available.
 * @return A String array contains all the Styles.
 */
public static String[] getStyles(){
  ArrayList list=new ArrayList();
  list.add(CHOICE_NONE);
  Iterator iterator=DEUtil.getStyles();
  if (iterator != null) {
    while (iterator.hasNext()) {
      ReportElementHandle elementHandle=(ReportElementHandle)iterator.next();
      list.add(elementHandle.getDisplayLabel());
    }
  }
  return (String[])list.toArray(new String[0]);
}","/** 
 * Gets all the Styles available.
 * @return A String array contains all the Styles.
 */
public static String[] getStyles(){
  ArrayList list=new ArrayList();
  list.add(CHOICE_NONE);
  Iterator iterator=DEUtil.getStyles();
  if (iterator != null) {
    while (iterator.hasNext()) {
      StyleHandle styleHandle=(StyleHandle)iterator.next();
      list.add(styleHandle.getName());
    }
  }
  return (String[])list.toArray(new String[0]);
}",0.782608695652174
77106,"private IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  initializePagination(format,extManager);
  IContentEmitter emitter=null;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  return emitter;
}","protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  initializePagination(format,extManager);
  IContentEmitter emitter=null;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  return emitter;
}",0.9950535861500412
77107,"protected boolean traverseChildren(){
  if (last != null) {
    parent.addArea(last);
    last=null;
    if (breakAfterRelayout) {
      breakAfterRelayout=false;
      return true;
    }
  }
  boolean childBreak=false;
  if (children.size() > 0) {
    Iterator iterLM=children.iterator();
    while (iterLM.hasNext()) {
      PDFAbstractLM childLM=(PDFAbstractLM)iterLM.next();
      child=childLM;
      boolean currentBreak=childLM.layout();
      if (currentBreak) {
        childBreak=true;
      }
 else {
        iterLM.remove();
      }
    }
    if (childBreak) {
      return true;
    }
 else {
      endLine();
    }
  }
  boolean childHasNext=false;
  while (executor.hasNextChild() || unfinishedExecutor != null) {
    IReportItemExecutor childExecutor=null;
    if (unfinishedExecutor != null) {
      childExecutor=unfinishedExecutor;
      unfinishedExecutor=null;
    }
 else {
      childExecutor=executor.getNextChild();
    }
    assert(childExecutor != null);
    childHasNext=handleChild(childExecutor) || childHasNext;
    if (childHasNext && unfinishedExecutor != null) {
      if (lineFinished) {
        return true;
      }
    }
  }
  return childHasNext;
}","protected boolean traverseChildren(){
  if (last != null) {
    parent.addArea(last);
    last=null;
    if (breakAfterRelayout) {
      breakAfterRelayout=false;
      return true;
    }
  }
  boolean childBreak=false;
  if (children.size() > 0) {
    Iterator iterLM=children.iterator();
    while (iterLM.hasNext()) {
      PDFAbstractLM childLM=(PDFAbstractLM)iterLM.next();
      child=childLM;
      boolean currentBreak=childLM.layout();
      if (currentBreak) {
        childBreak=true;
      }
 else {
        iterLM.remove();
      }
    }
    if (childBreak) {
      return true;
    }
  }
  boolean childHasNext=false;
  while (executor.hasNextChild() || unfinishedExecutor != null) {
    IReportItemExecutor childExecutor=null;
    if (unfinishedExecutor != null) {
      childExecutor=unfinishedExecutor;
      unfinishedExecutor=null;
    }
 else {
      childExecutor=executor.getNextChild();
    }
    assert(childExecutor != null);
    childHasNext=handleChild(childExecutor) || childHasNext;
    if (childHasNext) {
      if (lineFinished) {
        return true;
      }
    }
  }
  return childHasNext;
}",0.9736045002163566
77108,"protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.INSERT_EDIT_MAP_RULE_DIALOG_ID);
  GridData gdata;
  GridLayout glayout;
  Composite contents=new Composite(parent,SWT.NONE);
  contents.setLayout(new GridLayout());
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  createTitleArea(contents);
  Composite composite=new Composite(contents,SWT.NONE);
  glayout=new GridLayout();
  glayout.marginHeight=0;
  glayout.marginWidth=0;
  glayout.verticalSpacing=0;
  composite.setLayout(glayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  initializeDialogUnits(composite);
  Composite innerParent=(Composite)createDialogArea(composite);
  createButtonBar(composite);
  Label lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite condition=new Composite(innerParent,SWT.NONE);
  condition.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  fillExpression(expression);
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  expBuilder.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String value=getValueForOperator(operator.getText());
      int vv=determineValueVisible(value);
      if (vv == 0) {
        value1.setVisible(false);
        value2.setVisible(false);
        valBuilder1.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 1) {
        value1.setVisible(true);
        valBuilder1.setVisible(true);
        value2.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 2) {
        value1.setVisible(true);
        value2.setVisible(true);
        valBuilder1.setVisible(true);
        valBuilder2.setVisible(true);
        andLable.setVisible(true);
      }
      updateButtons();
    }
  }
);
  value1=createText(condition);
  value1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  valBuilder1=new Button(condition,SWT.PUSH);
  valBuilder1.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder1.setLayoutData(gdata);
  valBuilder1.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value1);
    }
  }
);
  createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setVisible(false);
  createDummy(condition,1);
  createDummy(condition,3);
  value2=createText(condition);
  value2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  value2.setVisible(false);
  valBuilder2=new Button(condition,SWT.PUSH);
  valBuilder2.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder2.setLayoutData(gdata);
  valBuilder2.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value2);
    }
  }
);
  valBuilder2.setVisible(false);
  if (operator.getItemCount() > 0) {
    operator.select(0);
  }
  lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite format=new Composite(innerParent,SWT.NONE);
  format.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout();
  format.setLayout(glayout);
  display=new Text(format,SWT.BORDER);
  gdata=new GridData();
  gdata.widthHint=300;
  display.setLayoutData(gdata);
  Composite space=new Composite(innerParent,SWT.NONE);
  gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.heightHint=20;
  space.setLayoutData(gdata);
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (handle != null) {
    syncViewProperties();
  }
  updateButtons();
  return composite;
}","protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.INSERT_EDIT_MAP_RULE_DIALOG_ID);
  GridData gdata;
  GridLayout glayout;
  Composite contents=new Composite(parent,SWT.NONE);
  contents.setLayout(new GridLayout());
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  createTitleArea(contents);
  Composite composite=new Composite(contents,SWT.NONE);
  glayout=new GridLayout();
  glayout.marginHeight=0;
  glayout.marginWidth=0;
  glayout.verticalSpacing=0;
  composite.setLayout(glayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  initializeDialogUnits(composite);
  Composite innerParent=(Composite)createDialogArea(composite);
  createButtonBar(composite);
  Label lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite condition=new Composite(innerParent,SWT.NONE);
  condition.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  expression.add(VALUE_OF_THIS_DATA_ITEM);
  gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  fillExpression(expression);
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  expBuilder.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String value=getValueForOperator(operator.getText());
      int vv=determineValueVisible(value);
      if (vv == 0) {
        value1.setVisible(false);
        value2.setVisible(false);
        valBuilder1.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 1) {
        value1.setVisible(true);
        valBuilder1.setVisible(true);
        value2.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 2) {
        value1.setVisible(true);
        value2.setVisible(true);
        valBuilder1.setVisible(true);
        valBuilder2.setVisible(true);
        andLable.setVisible(true);
      }
      updateButtons();
    }
  }
);
  value1=createText(condition);
  value1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  valBuilder1=new Button(condition,SWT.PUSH);
  valBuilder1.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder1.setLayoutData(gdata);
  valBuilder1.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value1);
    }
  }
);
  createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setVisible(false);
  createDummy(condition,1);
  createDummy(condition,3);
  value2=createText(condition);
  value2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  value2.setVisible(false);
  valBuilder2=new Button(condition,SWT.PUSH);
  valBuilder2.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder2.setLayoutData(gdata);
  valBuilder2.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value2);
    }
  }
);
  valBuilder2.setVisible(false);
  if (operator.getItemCount() > 0) {
    operator.select(0);
  }
  lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite format=new Composite(innerParent,SWT.NONE);
  format.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout();
  format.setLayout(glayout);
  display=new Text(format,SWT.BORDER);
  gdata=new GridData();
  gdata.widthHint=300;
  display.setLayoutData(gdata);
  Composite space=new Composite(innerParent,SWT.NONE);
  gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.heightHint=20;
  space.setLayoutData(gdata);
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (handle != null) {
    syncViewProperties();
  }
  updateButtons();
  return composite;
}",0.996038691847075
77109,"public boolean compose(){
  boolean hasMore;
  while ((hasMore=hasMore()) && !PDFTextLM.this.needPause()) {
    handleNext();
  }
  return hasMore;
}","public boolean compose(){
  while (hasMore()) {
    handleNext();
    if (PDFTextLM.this.needPause()) {
      return true;
    }
  }
  return false;
}",0.6956521739130435
77110,"protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.INSERT_EDIT_MAP_RULE_DIALOG_ID);
  GridData gdata;
  GridLayout glayout;
  Composite contents=new Composite(parent,SWT.NONE);
  contents.setLayout(new GridLayout());
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  createTitleArea(contents);
  Composite composite=new Composite(contents,SWT.NONE);
  glayout=new GridLayout();
  glayout.marginHeight=0;
  glayout.marginWidth=0;
  glayout.verticalSpacing=0;
  composite.setLayout(glayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  initializeDialogUnits(composite);
  Composite innerParent=(Composite)createDialogArea(composite);
  createButtonBar(composite);
  Label lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite condition=new Composite(innerParent,SWT.NONE);
  condition.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  expression.add(VALUE_OF_THIS_DATA_ITEM);
  gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  fillExpression(expression);
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  expBuilder.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String value=getValueForOperator(operator.getText());
      int vv=determineValueVisible(value);
      if (vv == 0) {
        value1.setVisible(false);
        value2.setVisible(false);
        valBuilder1.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 1) {
        value1.setVisible(true);
        valBuilder1.setVisible(true);
        value2.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 2) {
        value1.setVisible(true);
        value2.setVisible(true);
        valBuilder1.setVisible(true);
        valBuilder2.setVisible(true);
        andLable.setVisible(true);
      }
      updateButtons();
    }
  }
);
  value1=createText(condition);
  value1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  valBuilder1=new Button(condition,SWT.PUSH);
  valBuilder1.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder1.setLayoutData(gdata);
  valBuilder1.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value1);
    }
  }
);
  createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setVisible(false);
  createDummy(condition,1);
  createDummy(condition,3);
  value2=createText(condition);
  value2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  value2.setVisible(false);
  valBuilder2=new Button(condition,SWT.PUSH);
  valBuilder2.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder2.setLayoutData(gdata);
  valBuilder2.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value2);
    }
  }
);
  valBuilder2.setVisible(false);
  if (operator.getItemCount() > 0) {
    operator.select(0);
  }
  lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite format=new Composite(innerParent,SWT.NONE);
  format.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout();
  format.setLayout(glayout);
  display=new Text(format,SWT.BORDER);
  gdata=new GridData();
  gdata.widthHint=300;
  display.setLayoutData(gdata);
  Composite space=new Composite(innerParent,SWT.NONE);
  gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.heightHint=20;
  space.setLayoutData(gdata);
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (handle != null) {
    syncViewProperties();
  }
  updateButtons();
  return composite;
}","protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.INSERT_EDIT_MAP_RULE_DIALOG_ID);
  GridData gdata;
  GridLayout glayout;
  Composite contents=new Composite(parent,SWT.NONE);
  contents.setLayout(new GridLayout());
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  createTitleArea(contents);
  Composite composite=new Composite(contents,SWT.NONE);
  glayout=new GridLayout();
  glayout.marginHeight=0;
  glayout.marginWidth=0;
  glayout.verticalSpacing=0;
  composite.setLayout(glayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  initializeDialogUnits(composite);
  Composite innerParent=(Composite)createDialogArea(composite);
  createButtonBar(composite);
  Label lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite condition=new Composite(innerParent,SWT.NONE);
  condition.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  fillExpression(expression);
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  expBuilder.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String value=getValueForOperator(operator.getText());
      int vv=determineValueVisible(value);
      if (vv == 0) {
        value1.setVisible(false);
        value2.setVisible(false);
        valBuilder1.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 1) {
        value1.setVisible(true);
        valBuilder1.setVisible(true);
        value2.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 2) {
        value1.setVisible(true);
        value2.setVisible(true);
        valBuilder1.setVisible(true);
        valBuilder2.setVisible(true);
        andLable.setVisible(true);
      }
      updateButtons();
    }
  }
);
  value1=createText(condition);
  value1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  valBuilder1=new Button(condition,SWT.PUSH);
  valBuilder1.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder1.setLayoutData(gdata);
  valBuilder1.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value1);
    }
  }
);
  createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setVisible(false);
  createDummy(condition,1);
  createDummy(condition,3);
  value2=createText(condition);
  value2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  value2.setVisible(false);
  valBuilder2=new Button(condition,SWT.PUSH);
  valBuilder2.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder2.setLayoutData(gdata);
  valBuilder2.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value2);
    }
  }
);
  valBuilder2.setVisible(false);
  if (operator.getItemCount() > 0) {
    operator.select(0);
  }
  lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite format=new Composite(innerParent,SWT.NONE);
  format.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout();
  format.setLayout(glayout);
  display=new Text(format,SWT.BORDER);
  gdata=new GridData();
  gdata.widthHint=300;
  display.setLayoutData(gdata);
  Composite space=new Composite(innerParent,SWT.NONE);
  gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.heightHint=20;
  space.setLayoutData(gdata);
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (handle != null) {
    syncViewProperties();
  }
  updateButtons();
  return composite;
}",0.996038691847075
77111,"/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompaibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}","/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompaibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}",0.997991967871486
77112,"/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_NUMBER:
      return value;
case CSSPrimitiveValue.CSS_PX:
    float v=value.getFloatValue();
  CSSContext cx=engine.getCSSContext();
float ratio=cx.getPixelUnitToMillimeter();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * ratio / 25.4f * 72000.0f);
case CSSPrimitiveValue.CSS_MM:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v / 25.4f * 72000.0f);
case CSSPrimitiveValue.CSS_CM:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v / 2.54f * 72000.0f);
case CSSPrimitiveValue.CSS_IN:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * 72000.0f);
case CSSPrimitiveValue.CSS_PT:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * 1000.0f);
case CSSPrimitiveValue.CSS_PC:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v / 12.0f * 1000.0f);
case CSSPrimitiveValue.CSS_EMS:
v=value.getFloatValue();
Value fontSize=(Value)elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
float fs=fontSize.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * fs);
case CSSPrimitiveValue.CSS_EXS:
v=value.getFloatValue();
fontSize=(Value)elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
fs=fontSize.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * fs * 0.5f);
}
}
return value;
}","/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_NUMBER:
      return value;
case CSSPrimitiveValue.CSS_PX:
    float v=value.getFloatValue();
  CSSContext cx=engine.getCSSContext();
float ratio=cx.getPixelUnitToMillimeter();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * ratio / 25.4f * 72000.0f);
case CSSPrimitiveValue.CSS_MM:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v / 25.4f * 72000.0f);
case CSSPrimitiveValue.CSS_CM:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v / 2.54f * 72000.0f);
case CSSPrimitiveValue.CSS_IN:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * 72000.0f);
case CSSPrimitiveValue.CSS_PT:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * 1000.0f);
case CSSPrimitiveValue.CSS_PC:
v=value.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * 12.0f * 1000.0f);
case CSSPrimitiveValue.CSS_EMS:
v=value.getFloatValue();
Value fontSize=(Value)elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
float fs=fontSize.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * fs);
case CSSPrimitiveValue.CSS_EXS:
v=value.getFloatValue();
fontSize=(Value)elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
fs=fontSize.getFloatValue();
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,v * fs * 0.5f);
}
}
return value;
}",0.9994134897360704
77113,"protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  initializePagination(format,extManager);
  if (pagination != ExtensionManager.PAPER_SIZE_PAGINATION) {
    emitter=new HTMLTableLayoutNestEmitter(emitter);
  }
  return emitter;
}","protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  initializePagination(format,extManager);
  if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    emitter=new HTMLTableLayoutNestEmitter(emitter);
  }
  return emitter;
}",0.9879789631855748
77114,"/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompaibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}","/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompaibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}",0.9106425702811244
77115,"/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  PropertyHandle resultSetColumnHandle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_PROP);
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    if (!meta.isComputedColumn(i)) {
      try {
        rsColumn.setColumnName(meta.getColumnName(i));
        rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
        rsColumn.setNativeName(meta.getColumnName(i));
        rsColumn.setPosition(new Integer(i));
        resultSetColumnHandle.addItem(rsColumn);
      }
 catch (      BirtException e) {
        e.printStackTrace();
      }
    }
  }
}","/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    if (!meta.isComputedColumn(i)) {
      rsColumn.setColumnName(meta.getColumnName(i));
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
    }
  }
  CompaibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}",0.772215269086358
77116,"public void getBIRTHome(String birtHome){
  properties.put(BIRT_HOME,birtHome);
}","public String getBIRTHome(){
  Object birtHome=properties.get(BIRT_HOME);
  if (birtHome instanceof String) {
    return (String)birtHome;
  }
  return null;
}",0.5416666666666666
77117,"public void transform(ITextContent textContent){
  String transformType=textContent.getComputedStyle().getTextTransform();
  if (transformType.equalsIgnoreCase(""String_Node_Str"")) {
    textContent.setText(textContent.getText().toUpperCase());
  }
 else   if (transformType.equalsIgnoreCase(""String_Node_Str"")) {
    textContent.setText(textContent.getText().toLowerCase());
  }
 else   if (transformType.equalsIgnoreCase(""String_Node_Str"")) {
    textContent.setText(capitalize(textContent.getText()));
  }
}","public void transform(ITextContent textContent){
  String transformType=textContent.getComputedStyle().getTextTransform();
  if (transformType.equalsIgnoreCase(""String_Node_Str"")) {
    textContent.setText(textContent.getText().toUpperCase());
  }
 else   if (transformType.equalsIgnoreCase(""String_Node_Str"")) {
    textContent.setText(textContent.getText().toLowerCase());
  }
 else   if (transformType.equalsIgnoreCase(""String_Node_Str"")) {
    textContent.setText(capitalize(textContent.getText()));
  }
  ArabicShaping shaping=new ArabicShaping(ArabicShaping.LETTERS_SHAPE);
  try {
    String shapingText=shaping.shape(textContent.getText());
    textContent.setText(shapingText);
  }
 catch (  ArabicShapingException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
}",0.7885360185902401
77118,"public Image(IImageContent content){
  String imgUri=content.getURI();
  byte[] imgData=content.getData();
  extension=content.getExtension();
  if (extension == null) {
    String mimeType=content.getMIMEType();
    if (mimeType != null) {
      extension=FileUtil.getExtFromType(mimeType);
    }
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    if (imgUri != null) {
      this.id=imgUri;
      this.source=IImage.FILE_IMAGE;
    }
  break;
case IImageContent.IMAGE_NAME:
if (imgData != null) {
  this.data=imgData;
  this.source=IImage.DESIGN_IMAGE;
  this.id=imgUri;
}
break;
case IImageContent.IMAGE_EXPRESSION:
if (imgData != null) {
this.data=imgData;
this.source=IImage.CUSTOM_IMAGE;
this.id=content.getInstanceID().toString();
}
break;
case IImageContent.IMAGE_URL:
if (imgUri != null) {
this.id=imgUri;
this.source=IImage.URL_IMAGE;
}
break;
default :
assert(false);
}
}","public Image(IImageContent content){
  String imgUri=content.getURI();
  byte[] imgData=content.getData();
  extension=content.getExtension();
  if (extension == null) {
    String mimeType=content.getMIMEType();
    if (mimeType != null) {
      extension=FileUtil.getExtFromType(mimeType);
    }
  }
  if (content.getImageMap() != null) {
    this.imageMap=(String)content.getImageMap();
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    if (imgUri != null) {
      this.id=imgUri;
      this.source=IImage.FILE_IMAGE;
    }
  break;
case IImageContent.IMAGE_NAME:
if (imgData != null) {
  this.data=imgData;
  this.source=IImage.DESIGN_IMAGE;
  this.id=imgUri;
}
break;
case IImageContent.IMAGE_EXPRESSION:
if (imgData != null) {
this.data=imgData;
this.source=IImage.CUSTOM_IMAGE;
this.id=content.getInstanceID().toString();
}
break;
case IImageContent.IMAGE_URL:
if (imgUri != null) {
this.id=imgUri;
this.source=IImage.URL_IMAGE;
}
break;
default :
assert(false);
}
}",0.9516806722689076
77119,"/** 
 * Removes 'resultSetHit' property if version is between 3.2.2 and 3.2.6 .
 * @param dataSet the data set element
 */
private void doCompatibleRemoveResultSetHitProperty(OdaDataSet dataSet){
  if (dataSet == null)   return;
  if ((handler.versionNumber > VersionUtil.VERSION_3_2_2) && (handler.versionNumber < VersionUtil.VERSION_3_2_6)) {
    dataSet.setProperty(IDataSetModel.RESULT_SET_HINTS_PROP,null);
  }
}","/** 
 * Removes 'resultSetHit' property if version is between 3.2.2 and 3.2.6 .
 * @param dataSet the data set element
 */
private void doCompatibleRemoveResultSetHitProperty(OdaDataSet dataSet){
  if (dataSet == null)   return;
  if ((handler.versionNumber >= VersionUtil.VERSION_3_2_2) && (handler.versionNumber < VersionUtil.VERSION_3_2_6)) {
    dataSet.setProperty(IDataSetModel.RESULT_SET_HINTS_PROP,null);
  }
}",0.9988023952095808
77120,"/** 
 * @param parameterType The parameterType to set.
 */
public void setParameterType(int parameterType){
  this.parameterType=parameterType;
switch (parameterType) {
case IParameterDefnBase.FILTER_PARAMETER:
    this.typeName=FILTER;
  break;
case IParameterDefnBase.LIST_PARAMETER:
this.typeName=LIST;
break;
case IParameterDefnBase.TABLE_PARAMETER:
this.typeName=TABLE;
break;
case IParameterDefnBase.PARAMETER_GROUP:
this.typeName=GROUP;
break;
case IParameterDefnBase.SCALAR_PARAMETER:
default :
this.typeName=SCALAR;
break;
}
}","/** 
 * @param parameterType The parameterType to set.
 */
public void setParameterType(int parameterType){
  this.parameterType=parameterType;
}",0.4264705882352941
77121,"public String getTypeName(){
  return typeName;
}","public String getTypeName(){
  String typeName;
switch (parameterType) {
case IParameterDefnBase.FILTER_PARAMETER:
    typeName=FILTER;
  break;
case IParameterDefnBase.LIST_PARAMETER:
typeName=LIST;
break;
case IParameterDefnBase.TABLE_PARAMETER:
typeName=TABLE;
break;
case IParameterDefnBase.PARAMETER_GROUP:
typeName=GROUP;
break;
case IParameterDefnBase.SCALAR_PARAMETER:
default :
typeName=SCALAR;
break;
}
return typeName;
}",0.1458333333333333
77122,"/** 
 * Local do get.
 */
protected void __doGet(IContext context) throws ServletException, IOException, BirtException {
  ViewerAttributeBean bean=(ViewerAttributeBean)context.getBean();
  if (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(context.getRequest().getServletPath()) && bean != null && bean.isMissingParameter()) {
    requester.service(context.getRequest(),context.getResponse());
  }
 else   if (IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(context.getRequest().getServletPath())) {
    requester.service(context.getRequest(),context.getResponse());
  }
 else {
    engine.service(context.getRequest(),context.getResponse());
  }
}","/** 
 * Local do get.
 */
protected void __doGet(IContext context) throws ServletException, IOException, BirtException {
  context.getResponse().setHeader(""String_Node_Str"",""String_Node_Str"");
  context.getResponse().setHeader(""String_Node_Str"",""String_Node_Str"");
  context.getResponse().setHeader(""String_Node_Str"",""String_Node_Str"");
  context.getResponse().setDateHeader(""String_Node_Str"",0);
  ViewerAttributeBean bean=(ViewerAttributeBean)context.getBean();
  if (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(context.getRequest().getServletPath()) && bean != null && bean.isMissingParameter()) {
    requester.service(context.getRequest(),context.getResponse());
  }
 else   if (IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(context.getRequest().getServletPath())) {
    requester.service(context.getRequest(),context.getResponse());
  }
 else {
    engine.service(context.getRequest(),context.getResponse());
  }
}",0.8266331658291457
77123,"/** 
 * Local process http request with GET method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
protected void __doGet(IContext context) throws ServletException, IOException, BirtException {
  IFragment activeFragment=null;
  String servletPath=context.getRequest().getServletPath();
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath)) {
    activeFragment=viewer;
  }
  activeFragment.service(context.getRequest(),context.getResponse());
}","/** 
 * Local process http request with GET method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
protected void __doGet(IContext context) throws ServletException, IOException, BirtException {
  IFragment activeFragment=null;
  String servletPath=context.getRequest().getServletPath();
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath)) {
    activeFragment=viewer;
  }
  context.getResponse().setHeader(""String_Node_Str"",""String_Node_Str"");
  context.getResponse().setHeader(""String_Node_Str"",""String_Node_Str"");
  context.getResponse().setHeader(""String_Node_Str"",""String_Node_Str"");
  context.getResponse().setDateHeader(""String_Node_Str"",0);
  activeFragment.service(context.getRequest(),context.getResponse());
}",0.8031383737517832
77124,"/** 
 * Uses the new name space of the current module for reference property values of the given element. This method checks the <code>content</code> and nested elements in it.
 * @param module the module that <code>content</code> attaches.
 * @param content the element to revise
 * @param propDefn
 * @param nameSpace the new name space
 */
public static void revisePropertyNameSpace(Module module,DesignElement content,IElementPropertyDefn propDefn,String nameSpace){
  if (propDefn.getTypeCode() != IPropertyType.ELEMENT_REF_TYPE)   return;
  Object value=content.getLocalProperty(module,(ElementPropertyDefn)propDefn);
  if (value == null)   return;
  ReferenceValue refValue=(ReferenceValue)value;
  refValue.setLibraryNamespace(nameSpace);
}","/** 
 * Uses the new name space of the current module for reference property values of the given element. This method checks the <code>content</code> and nested elements in it.
 * @param module the module that <code>content</code> attaches.
 * @param content the element to revise
 * @param propDefn
 * @param nameSpace the new name space
 */
public static void revisePropertyNameSpace(Module module,DesignElement content,IElementPropertyDefn propDefn,String nameSpace){
  if (propDefn.getTypeCode() != IPropertyType.ELEMENT_REF_TYPE && propDefn.getTypeCode() != IPropertyType.EXTENDS_TYPE)   return;
  Object value=content.getLocalProperty(module,(ElementPropertyDefn)propDefn);
  if (value == null)   return;
  ReferenceValue refValue=(ReferenceValue)value;
  refValue.setLibraryNamespace(nameSpace);
}",0.963917525773196
77125,"/** 
 * Gets the display string for the value with default locale and default format, The value must be the valid data type. That is: <ul> <li>if data type is <code>PARAM_TYPE_DATETIME</code>, then the value must be <code>java.util.Date<code>.</li> <li>if the data type is <code>PARAM_TYPE_FLOAT</code>, then the value must be <code>java.lang.Double</code>.</li> <li>if the data type is <code>PARAM_TYPE_DECIMAL</code>, then the value must be <code>java.math.BigDecimal</code>.</li> <li>if the data type is <code>PARAM_TYPE_BOOLEAN</code>, then the value must be <code>java.lang.Boolean</code>.</li> <li>if the data type is <code>PARAM_TYPE_STRING</code>, then the value must be <code>java.lang.String</code>.</li> </ul>
 * @param value the input value to validate
 * @return the formatted string
 */
static public String getDisplayValue(Object value){
  if (value == null)   return null;
  if (value instanceof Float || value instanceof Double || value instanceof BigDecimal|| value instanceof com.ibm.icu.math.BigDecimal) {
    return value.toString();
  }
  return ParameterValidationUtil.getDisplayValue(value);
}","/** 
 * Gets the display string for the value with default locale and default format, The value must be the valid data type. That is: <ul> <li>if data type is <code>PARAM_TYPE_DATETIME</code>, then the value must be <code>java.util.Date<code>.</li> <li>if the data type is <code>PARAM_TYPE_FLOAT</code>, then the value must be <code>java.lang.Double</code>.</li> <li>if the data type is <code>PARAM_TYPE_DECIMAL</code>, then the value must be <code>java.math.BigDecimal</code>.</li> <li>if the data type is <code>PARAM_TYPE_BOOLEAN</code>, then the value must be <code>java.lang.Boolean</code>.</li> <li>if the data type is <code>PARAM_TYPE_STRING</code>, then the value must be <code>java.lang.String</code>.</li> </ul>
 * @param value the input value to validate
 * @return the formatted string
 */
public static String getDisplayValue(Object value){
  if (value == null)   return null;
  if (value instanceof Float || value instanceof Double || value instanceof BigDecimal|| value instanceof com.ibm.icu.math.BigDecimal) {
    return value.toString();
  }
  return ParameterValidationUtil.getDisplayValue(value);
}",0.9937332139659804
77126,"/** 
 * Creates iText BaseFont with the given font family name.	
 * @param ffn			the specified font family name.
 * @param encoding		the encoding for the font.
 * @return				the created BaseFont.
 */
private BaseFont createFont(String ffn,int fontStyle){
  String key=ffn + fontStyle;
synchronized (baseFonts) {
    BaseFont font=(BaseFont)baseFonts.get(key);
    if (font == null) {
      String encoding=getEncoding(ffn);
      Font f=FontFactory.getFont(ffn,encoding,BaseFont.NOT_EMBEDDED,14,fontStyle);
      font=f.getBaseFont();
      baseFonts.put(key,font);
    }
    return font;
  }
}","/** 
 * Creates iText BaseFont with the given font family name.	
 * @param ffn			the specified font family name.
 * @param encoding		the encoding for the font.
 * @return				the created BaseFont.
 */
private BaseFont createFont(String ffn,int fontStyle){
  String key=ffn + fontStyle;
synchronized (baseFonts) {
    BaseFont font=(BaseFont)baseFonts.get(key);
    if (font == null) {
      String encoding=getEncoding(ffn);
      Font f=null;
      try {
        f=FontFactory.getFont(ffn,encoding,BaseFont.NOT_EMBEDDED,14,fontStyle);
      }
 catch (      Throwable de) {
        logger.log(Level.WARNING,de.getLocalizedMessage());
        return null;
      }
      font=f.getBaseFont();
      if (font != null) {
        baseFonts.put(key,font);
      }
    }
    return font;
  }
}",0.8614938361131255
77127,"protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  if (!isRepeatHeader()) {
    return;
  }
  IListBandContent band=getHeader();
  if (band == null) {
    return;
  }
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(band);
  headerExecutor.execute();
  ContainerArea headerArea=(ContainerArea)AreaFactory.createLogicContainer(content.getReportContent());
  headerArea.setAllocatedWidth(parent.getMaxAvaWidth());
  PDFRegionLM regionLM=new PDFRegionLM(context,headerArea,band,headerExecutor);
  boolean allowPB=context.allowPageBreak();
  context.setAllowPageBreak(false);
  regionLM.layout();
  context.setAllowPageBreak(allowPB);
  if (headerArea.getAllocatedHeight() + currentBP < parent.getMaxAvaHeight()) {
    addArea(headerArea);
    repeatCount++;
  }
}","protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  if (!isCurrentDetailBand()) {
    return;
  }
  if (!isRepeatHeader()) {
    return;
  }
  IListBandContent band=getHeader();
  if (band == null) {
    return;
  }
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(band);
  headerExecutor.execute();
  ContainerArea headerArea=(ContainerArea)AreaFactory.createLogicContainer(content.getReportContent());
  headerArea.setAllocatedWidth(parent.getMaxAvaWidth());
  PDFRegionLM regionLM=new PDFRegionLM(context,headerArea,band,headerExecutor);
  boolean allowPB=context.allowPageBreak();
  context.setAllowPageBreak(false);
  regionLM.layout();
  context.setAllowPageBreak(allowPB);
  if (headerArea.getAllocatedHeight() + currentBP < parent.getMaxAvaHeight()) {
    addArea(headerArea);
    repeatCount++;
  }
}",0.971153846153846
77128,"protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableLM.getContent(),tableLM.getLayoutInfo());
  regionLM.initialize(header,tableLM.lastRowArea);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      count++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
    tableLM.setRepeatCount(tableLM.getRepeatCount() + count);
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  if (!isCurrentDetailBand()) {
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableLM.getContent(),tableLM.getLayoutInfo());
  regionLM.initialize(header,tableLM.lastRowArea);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      count++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
    tableLM.setRepeatCount(tableLM.getRepeatCount() + count);
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.985907222548444
77129,"public void run() throws EngineException {
  setRunningFlag(true);
  if (!validateParameters()) {
    setRunningFlag(false);
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    Report reportDesign=executionContext.getReport();
    ReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
    IReportExecutor lExecutor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      if (renderOptions instanceof HTMLRenderOption) {
        HTMLRenderOption htmlOption=(HTMLRenderOption)renderOptions;
        paginate=htmlOption.getHtmlPagination();
      }
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=LayoutEngineFactory.createLayoutEngine(emitter.getOutputFormat());
      }
    }
    if (layoutEngine != null) {
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutEngine.setPageHandler(handle);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      layoutEngine.layout(lExecutor,outputEmitters,paginate);
    }
    closeRender();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    err.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    new EngineException(""String_Node_Str"",t);
  }
 finally {
    setRunningFlag(false);
  }
}","public void run() throws EngineException {
  setRunningFlag(true);
  if (!validateParameters()) {
    setRunningFlag(false);
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    Report reportDesign=executionContext.getReport();
    ReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
    IReportExecutor lExecutor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      if (renderOptions instanceof HTMLRenderOption) {
        HTMLRenderOption htmlOption=(HTMLRenderOption)renderOptions;
        paginate=htmlOption.getHtmlPagination();
      }
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=LayoutEngineFactory.createLayoutEngine(emitter.getOutputFormat());
      }
    }
    if (layoutEngine != null) {
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutEngine.setPageHandler(handle);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      layoutEngine.layout(lExecutor,outputEmitters,paginate);
    }
    closeRender();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    err.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    setRunningFlag(false);
  }
}",0.9985666507405638
77130,"/** 
 * Creates the visibility rule( i.e. the hide)
 * @param handle the DE's handle
 * @return the created visibility rule
 */
protected VisibilityRuleDesign createHide(HideRuleHandle handle){
  VisibilityRuleDesign rule=new VisibilityRuleDesign();
  rule.setExpression(createExpression(handle.getExpression()));
  rule.setFormat(handle.getFormat());
  return rule;
}","/** 
 * Creates the visibility rule( i.e. the hide)
 * @param handle the DE's handle
 * @return the created visibility rule
 */
protected VisibilityRuleDesign createHide(HideRuleHandle handle){
  VisibilityRuleDesign rule=new VisibilityRuleDesign();
  rule.setExpression(createExpression(handle.getExpression()));
  String format=handle.getFormat();
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    format=EngineIRConstants.FORMAT_TYPE_VIEWER;
  }
  rule.setFormat(format);
  return rule;
}",0.7560693641618497
77131,"/** 
 * prepare the queries defined in the report.
 */
public void prepare(Report report,Map appContext){
  ReportDesignHandle rptHandle=report.getReportDesign();
  ModelDteApiAdapter adaptor=new ModelDteApiAdapter(context,context.getSharedScope());
  List dataSourceList=rptHandle.getAllDataSources();
  for (int i=0; i < dataSourceList.size(); i++) {
    DataSourceHandle dataSource=(DataSourceHandle)dataSourceList.get(i);
    try {
      dteEngine.defineDataSource(adaptor.createDataSourceDesign(dataSource));
    }
 catch (    BirtException be) {
      logger.log(Level.SEVERE,be.getMessage(),be);
      context.addException(dataSource,be);
    }
  }
  List dataSetList=rptHandle.getAllDataSets();
  for (int i=0; i < dataSetList.size(); i++) {
    DataSetHandle dataset=(DataSetHandle)dataSetList.get(i);
    try {
      dteEngine.defineDataSet(adaptor.createDataSetDesign(dataset));
    }
 catch (    BirtException be) {
      logger.log(Level.SEVERE,be.getMessage(),be);
      context.addException(dataset,be);
    }
  }
  new ReportQueryBuilder().build(report,context);
  doPrepareQuery(report,appContext);
}","public void prepare(Report report,Map appContext){
  ReportDesignHandle rptHandle=report.getReportDesign();
  List dataSetList=rptHandle.getAllDataSets();
  for (int i=0; i < dataSetList.size(); i++) {
    DataSetHandle dataset=(DataSetHandle)dataSetList.get(i);
    try {
      adapter.defineDataSet(dataset,dteEngine);
    }
 catch (    BirtException be) {
      logger.log(Level.SEVERE,be.getMessage(),be);
      context.addException(dataset,be);
    }
  }
  new ReportQueryBuilder().build(report,context);
  doPrepareQuery(report,appContext);
}",0.5633633633633633
77132,"public void defineDataSet(DataSetHandle dataSet){
  DataSourceHandle dataSource=dataSet.getDataSource();
  ModelDteApiAdapter adaptor=new ModelDteApiAdapter(context,context.getSharedScope());
  try {
    if (dataSource != null) {
      doDefineDataSource(adaptor,dataSource);
    }
    doDefineDataSet(adaptor,dataSet);
  }
 catch (  BirtException e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
}","public void defineDataSet(DataSetHandle dataSet){
  try {
    adapter.defineDataSet(dataSet,dteEngine);
  }
 catch (  BirtException e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
}",0.5932203389830508
77133,"/** 
 */
public IResultSet execute(IResultSet parent,IBaseQueryDefinition query){
  if (query instanceof IQueryDefinition) {
    return doExecuteQuery((DteResultSet)parent,(IQueryDefinition)query);
  }
 else   if (query instanceof ISubqueryDefinition) {
    return doExecuteSubQuery((DteResultSet)parent,query);
  }
  return null;
}","public IResultSet execute(IResultSet parent,IBaseQueryDefinition query){
  if (query instanceof IQueryDefinition) {
    return doExecuteQuery((DteResultSet)parent,(IQueryDefinition)query);
  }
 else   if (query instanceof ISubqueryDefinition) {
    return doExecuteSubQuery((DteResultSet)parent,query);
  }
  return null;
}",0.9862595419847328
77134,"public AbstractDataEngine(ExecutionContext context){
  this.context=context;
  try {
    Scriptable scope=context.getScope();
    context.registerBean(""String_Node_Str"",new NativeRowObject(scope,context));
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ex.printStackTrace();
  }
}","public AbstractDataEngine(ExecutionContext context){
  this.context=context;
  this.adapter=new ModelDteApiAdapter(context,context.getSharedScope());
  try {
    Scriptable scope=context.getScope();
    context.registerBean(""String_Node_Str"",new NativeRowObject(scope,context));
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ex.printStackTrace();
  }
}",0.8970380818053597
77135,"public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=new DummyEditpart(model);
  if (model instanceof ReportItemHandle && !((ReportItemHandle)model).isValidReferenceForCompoundElement()) {
    return new DestroyEditPart(model);
  }
 else   if (model instanceof ReportDesignHandle) {
    return new ReportDesignEditPart(model);
  }
 else   if (model instanceof MasterPageHandle) {
    return new MasterPageEditPart(model);
  }
 else   if (model instanceof ImageHandle) {
    return new ImageEditPart(model);
  }
  if (model instanceof TableHandle) {
    return new TableEditPart(model);
  }
  if (model instanceof CellHandle) {
    return new TableCellEditPart(model);
  }
  if (model instanceof AutoTextHandle) {
    return new AutoTextEditPart(model);
  }
  if (model instanceof LabelHandle) {
    return new LabelEditPart(model);
  }
  if (model instanceof TextItemHandle) {
    return new TextEditPart(model);
  }
  if (model instanceof DataItemHandle) {
    return new DataEditPart(model);
  }
  if (model instanceof TextDataHandle) {
    return new TextDataEditPart(model);
  }
  if (model instanceof ReportElementModel && (((ReportElementModel)model).getElementHandle() instanceof SimpleMasterPageHandle)) {
    return new AreaEditPart(model);
  }
  if (model instanceof GridHandle) {
    return new GridEditPart(model);
  }
  if (model instanceof ListHandle) {
    return new ListEditPart(model);
  }
  if (model instanceof ListBandProxy) {
    return new ListBandEditPart(model);
  }
  if (model instanceof TemplateElementHandle) {
    return new PlaceHolderEditPart(model);
  }
  IExtension extension=new IExtension.Stub(){
    public String getExtendsionIdentify(){
      return GuiExtensionManager.DESIGNER_FACTORY;
    }
  }
;
  Object obj=GuiExtensionManager.doExtension(extension,model);
  if (obj != null) {
    return (EditPart)obj;
  }
  return editPart;
}","public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=new DummyEditpart(model);
  if (model instanceof ReportItemHandle && !((ReportItemHandle)model).isValidLayoutForCompoundElement()) {
    return new DestroyEditPart(model);
  }
 else   if (model instanceof ReportDesignHandle) {
    return new ReportDesignEditPart(model);
  }
 else   if (model instanceof MasterPageHandle) {
    return new MasterPageEditPart(model);
  }
 else   if (model instanceof ImageHandle) {
    return new ImageEditPart(model);
  }
  if (model instanceof TableHandle) {
    return new TableEditPart(model);
  }
  if (model instanceof CellHandle) {
    return new TableCellEditPart(model);
  }
  if (model instanceof AutoTextHandle) {
    return new AutoTextEditPart(model);
  }
  if (model instanceof LabelHandle) {
    return new LabelEditPart(model);
  }
  if (model instanceof TextItemHandle) {
    return new TextEditPart(model);
  }
  if (model instanceof DataItemHandle) {
    return new DataEditPart(model);
  }
  if (model instanceof TextDataHandle) {
    return new TextDataEditPart(model);
  }
  if (model instanceof ReportElementModel && (((ReportElementModel)model).getElementHandle() instanceof SimpleMasterPageHandle)) {
    return new AreaEditPart(model);
  }
  if (model instanceof GridHandle) {
    return new GridEditPart(model);
  }
  if (model instanceof ListHandle) {
    return new ListEditPart(model);
  }
  if (model instanceof ListBandProxy) {
    return new ListBandEditPart(model);
  }
  if (model instanceof TemplateElementHandle) {
    return new PlaceHolderEditPart(model);
  }
  IExtension extension=new IExtension.Stub(){
    public String getExtendsionIdentify(){
      return GuiExtensionManager.DESIGNER_FACTORY;
    }
  }
;
  Object obj=GuiExtensionManager.doExtension(extension,model);
  if (obj != null) {
    return (EditPart)obj;
  }
  return editPart;
}",0.9960557454641072
77136,"/** 
 * @param val string to be handled
 * @param option to upper case or to lower case
 * @return
 */
private String handleCase(String val,char option){
  if (option == '<')   return val.toLowerCase();
 else   if (option == '>')   return val.toUpperCase();
 else   return val;
}","/** 
 * @param val string to be handled
 * @param option to upper case or to lower case
 * @return
 */
private String handleCase(String val,char option){
  if (option == '<')   return UCharacter.toLowerCase(locale,val);
 else   if (option == '>')   return UCharacter.toUpperCase(locale,val);
 else   return val;
}",0.9222972972972971
77137,"public XMLParserException semanticError(XMLParserException e){
  e.setLineNumber(locator.getLineNumber());
  MetaLogManager.log(e.getMessage(),e);
  logger.log(Level.SEVERE,e.getMessage());
  errors.add(e);
  return e;
}","public XMLParserException semanticError(XMLParserException e){
}",0.4507042253521127
77138,"public XMLParserException semanticError(XMLParserException e){
  e.setLineNumber(locator.getLineNumber());
  e.setTag(currentElement);
  errors.add(e);
  return e;
}","public XMLParserException semanticError(XMLParserException e){
  if (locator != null)   e.setLineNumber(locator.getLineNumber());
 else   e.setLineNumber(1);
  e.setTag(currentElement);
  errors.add(e);
  return e;
}",0.8661417322834646
77139,"public Object visitForeign(IForeignContent foreign,Object value){
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    if (converter == null) {
      converter=new HTML2Content(foreign.getReportContent().getDesign().getBasePath());
    }
    converter.html2Content(foreign);
    executor=new DOMReportItemExecutor(foreign);
    executor.execute();
    return visitContent(foreign,value);
  }
  LabelContent label=new LabelContent(foreign);
  return handleText(label);
}","public Object visitForeign(IForeignContent foreign,Object value){
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    if (converter == null) {
      converter=new HTML2Content(foreign.getReportContent().getDesign().getReportDesign());
    }
    converter.html2Content(foreign);
    executor=new DOMReportItemExecutor(foreign);
    executor.execute();
    return visitContent(foreign,value);
  }
  LabelContent label=new LabelContent(foreign);
  return handleText(label);
}",0.9814814814814816
77140,"public HTML2Content(String rootPath){
  this.rootPath=rootPath;
}","public HTML2Content(ReportDesignHandle report){
  this.report=report;
}",0.6911764705882353
77141,"protected void processForeignData(IForeignContent foreign){
  if (foreign.getChildren() != null && foreign.getChildren().size() > 0) {
    return;
  }
  HashMap styleMap=new HashMap();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(this.rootPath);
  Object rawValue=foreign.getRawValue();
  Document doc=null;
  if (null != rawValue) {
    doc=new TextParser().parse(foreign.getRawValue().toString(),(String)textTypeMapping.get(foreign.getRawType()));
  }
  Element body=null;
  if (doc != null) {
    Node node=doc.getFirstChild();
    if (node instanceof Element) {
      body=(Element)node;
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    processNodes(body,checkEscapeSpace(doc),styleMap,foreign);
  }
}","protected void processForeignData(IForeignContent foreign){
  if (foreign.getChildren() != null && foreign.getChildren().size() > 0) {
    return;
  }
  HashMap styleMap=new HashMap();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(report);
  Object rawValue=foreign.getRawValue();
  Document doc=null;
  if (null != rawValue) {
    doc=new TextParser().parse(foreign.getRawValue().toString(),(String)textTypeMapping.get(foreign.getRawType()));
  }
  Element body=null;
  if (doc != null) {
    Node node=doc.getFirstChild();
    if (node instanceof Element) {
      body=(Element)node;
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    processNodes(body,checkEscapeSpace(doc),styleMap,foreign);
  }
}",0.9872225958305312
77142,"/** 
 * Outputs the image
 * @param ele the IMG element instance
 */
protected void outputImg(Element ele,HashMap cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    IImageContent image=new ImageContent(content);
    addChild(content,image);
    handleStyle(ele,cssStyles,image);
    if (!FileUtil.isLocalResource(src)) {
      image.setImageSource(IImageContent.IMAGE_URL);
      image.setURI(src);
    }
 else {
      src=FileUtil.getAbsolutePath(rootPath,src);
      image.setImageSource(IImageContent.IMAGE_FILE);
      image.setURI(src);
    }
    if (null != ele.getAttribute(""String_Node_Str"") && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setAltText(ele.getAttribute(""String_Node_Str""));
    }
  }
}","/** 
 * Outputs the image
 * @param ele the IMG element instance
 */
protected void outputImg(Element ele,HashMap cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    IImageContent image=new ImageContent(content);
    addChild(content,image);
    handleStyle(ele,cssStyles,image);
    if (!FileUtil.isLocalResource(src)) {
      image.setImageSource(IImageContent.IMAGE_URL);
      image.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE);
      if (url != null) {
        src=url.getFile();
      }
      image.setImageSource(IImageContent.IMAGE_FILE);
      image.setURI(src);
    }
    if (null != ele.getAttribute(""String_Node_Str"") && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setAltText(ele.getAttribute(""String_Node_Str""));
    }
  }
}",0.8757214313197383
77143,"/** 
 * Constructor
 * @param context the execution context
 */
public HTMLStyleProcessor(String rootPath){
  cssEngine=new BIRTCSSEngine();
  this.rootPath=rootPath;
}","/** 
 * Constructor
 * @param context the execution context
 */
public HTMLStyleProcessor(ReportDesignHandle report){
  cssEngine=new BIRTCSSEngine();
  this.report=report;
}",0.8771929824561403
77144,"/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  StyleDeclaration style=null;
  StringBuffer strStyle=new StringBuffer();
  if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    appendStyle(strStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    if (ele.hasAttribute(""String_Node_Str"")) {
      try {
        int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
        appendStyle(strStyle,""String_Node_Str"",FONT_SIZE[size - 1]);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"");
      }
    }
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
  try {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      strStyle.append(inlineStyle);
    }
    if (strStyle.length() > 0) {
      style=(StyleDeclaration)cssEngine.parseStyleDeclaration(strStyle.toString());
      styles.put(ele,style);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + ele.getAttribute(""String_Node_Str""),e);
  }
  ele.removeAttribute(""String_Node_Str"");
  if (style != null) {
    CSSValue value=(CSSValue)style.getProperty(StyleConstants.STYLE_BACKGROUND_IMAGE);
    if (value != null && value instanceof URIValue) {
      String bgi=((URIValue)value).getStringValue();
      if ((null != bgi) && (!""String_Node_Str"".equals(bgi))) {
        if (FileUtil.isLocalResource(bgi)) {
          bgi=FileUtil.getAbsolutePath(rootPath,bgi);
        }
        if (bgi != null) {
          style.setBackgroundImage(bgi);
        }
 else {
          style.removeProperty(""String_Node_Str"");
        }
      }
    }
  }
  if (style != null) {
    styles.put(ele,style);
  }
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}","/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  StyleDeclaration style=null;
  StringBuffer strStyle=new StringBuffer();
  if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    appendStyle(strStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    if (ele.hasAttribute(""String_Node_Str"")) {
      try {
        int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
        appendStyle(strStyle,""String_Node_Str"",FONT_SIZE[size - 1]);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"");
      }
    }
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
  try {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      strStyle.append(inlineStyle);
    }
    if (strStyle.length() > 0) {
      style=(StyleDeclaration)cssEngine.parseStyleDeclaration(strStyle.toString());
      styles.put(ele,style);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + ele.getAttribute(""String_Node_Str""),e);
  }
  ele.removeAttribute(""String_Node_Str"");
  if (style != null) {
    CSSValue value=(CSSValue)style.getProperty(StyleConstants.STYLE_BACKGROUND_IMAGE);
    if (value != null && value instanceof URIValue) {
      String bgi=((URIValue)value).getStringValue();
      if ((null != bgi) && (!""String_Node_Str"".equals(bgi))) {
        if (report != null) {
          if (FileUtil.isLocalResource(bgi)) {
            URL url=report.findResource(bgi,IResourceLocator.IMAGE);
            if (url != null) {
              String fileName=url.getFile();
              if (fileName != null) {
                bgi=fileName;
              }
            }
          }
 else {
            bgi=""String_Node_Str"" + bgi + ""String_Node_Str"";
          }
        }
        if (bgi != null) {
          style.setBackgroundImage(bgi);
        }
 else {
          style.removeProperty(""String_Node_Str"");
        }
      }
    }
  }
  if (style != null) {
    styles.put(ele,style);
  }
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}",0.9349480968858132
77145,"public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=null;
  if (model instanceof LibRootModel) {
    model=((LibRootModel)model).getModel();
  }
 else   if (model instanceof LibraryHandle) {
    editPart=new EmptyEditPart(model){
      public void activate(){
      }
      public void deactivate(){
      }
    }
;
  }
  if (editPart != null) {
    return editPart;
  }
  editPart=super.createEditPart(context,model);
  if (editPart == null || editPart instanceof DummyEditpart) {
    editPart=new EmptyEditPart(model);
  }
  return editPart;
}","public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=null;
  if (model instanceof LibRootModel) {
    model=((LibRootModel)model).getModel();
  }
 else   if (model instanceof LibraryHandle) {
    editPart=new EmptyEditPart(model){
      public void activate(){
      }
      public void deactivate(){
      }
    }
;
  }
 else   if (model instanceof MasterPageHandle) {
    return new MasterPageEditPart(model);
  }
  if (editPart != null) {
    return editPart;
  }
  editPart=super.createEditPart(context,model);
  if (editPart == null || editPart instanceof DummyEditpart) {
    editPart=new EmptyEditPart(model);
  }
  return editPart;
}",0.9238171611868484
77146,"/** 
 * Updates values of <code>sourceHandle</code> with the given <code>sourceDesign</code>.
 * @param setDesign the ODA data source design
 * @param setHandle the Model handle
 * @param isSourceChanged <code>true</code> if the data source of the given design has been changed. Otherwise <code>false</code>.
 * @throws SemanticException if any of <code>sourceDesign</code> property values is not valid.
 */
public void updateDataSetHandle(DataSetDesign setDesign,OdaDataSetHandle setHandle,boolean isSourceChanged) throws SemanticException {
  if (setDesign == null || setHandle == null)   return;
  DesignUtil.validateObject(setDesign);
  CommandStack stack=setHandle.getModuleHandle().getCommandStack();
  stack.startTrans(null);
  try {
    setHandle.getElement().setProperty(OdaDataSourceHandle.EXTENSION_ID_PROP,setDesign.getOdaExtensionDataSetId());
    setHandle.setName(setDesign.getName());
    setHandle.setDisplayName(setDesign.getDisplayName());
    Properties props=setDesign.getPublicProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        setHandle.setProperty(prop.getName(),prop.getValue());
      }
    }
    props=setDesign.getPrivateProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        setHandle.setPrivateDriverProperty(prop.getName(),prop.getValue());
      }
    }
    DesignValues designerValues=null;
    try {
      designerValues=SerializerImpl.instance().read(setHandle.getDesignerValues());
    }
 catch (    IOException e) {
    }
    updateROMDataSetParamList(setHandle,new DataSetParameterAdapter().newROMSetParams(setDesign,setHandle,designerValues == null ? null : designerValues.getDataSetParameters()));
    ResultSets cachedResultSets=designerValues == null ? null : designerValues.getResultSets();
    ResultSetDefinition cachedResultDefn=null;
    if (cachedResultSets != null && !cachedResultSets.getResultSetDefinitions().isEmpty())     cachedResultDefn=(ResultSetDefinition)cachedResultSets.getResultSetDefinitions().get(0);
    updateROMResultSets(setHandle,new ResultSetsAdapter().newROMResultSets(setDesign,setHandle,cachedResultDefn));
    setHandle.setResultSetName(setDesign.getPrimaryResultSetName());
    setHandle.setQueryText(setDesign.getQueryText());
    String odaValues=serializeOdaValues(setDesign);
    setHandle.setDesignerValues(odaValues);
    DataSourceDesign sourceDesign=setDesign.getDataSourceDesign();
    if (sourceDesign != null) {
      OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)setHandle.getDataSource();
      if (isSourceChanged && sourceHandle != null && !sourceHandle.getModuleHandle().isReadOnly()) {
        setHandle.setDataSource(sourceDesign.getName());
        updateDataSourceHandle(sourceDesign,sourceHandle);
      }
      if (!isSourceChanged && sourceHandle != null && !sourceHandle.getModuleHandle().isReadOnly() && !(new EcoreUtil.EqualityHelper().equals(createDataSourceDesign(sourceHandle),sourceDesign))) {
        updateDataSourceHandle(sourceDesign,sourceHandle);
      }
    }
 else     setHandle.setDataSource(null);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * Updates values of <code>sourceHandle</code> with the given <code>sourceDesign</code>.
 * @param setDesign the ODA data source design
 * @param setHandle the Model handle
 * @param isSourceChanged <code>true</code> if the data source of the given design has been changed. Otherwise <code>false</code>.
 * @param newRule <code>true</code> new rule is that if parameter only defined in DataSetHandle , hold it. <code>false</code> old rule that override all parameters in DataSetHandle.
 * @throws SemanticException if any of <code>sourceDesign</code> property values is not valid.
 */
public void updateDataSetHandle(DataSetDesign setDesign,OdaDataSetHandle setHandle,boolean isSourceChanged,boolean newRule) throws SemanticException {
  if (setDesign == null || setHandle == null)   return;
  DesignUtil.validateObject(setDesign);
  CommandStack stack=setHandle.getModuleHandle().getCommandStack();
  stack.startTrans(null);
  try {
    setHandle.getElement().setProperty(OdaDataSourceHandle.EXTENSION_ID_PROP,setDesign.getOdaExtensionDataSetId());
    setHandle.setName(setDesign.getName());
    setHandle.setDisplayName(setDesign.getDisplayName());
    Properties props=setDesign.getPublicProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        setHandle.setProperty(prop.getName(),prop.getValue());
      }
    }
    props=setDesign.getPrivateProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        setHandle.setPrivateDriverProperty(prop.getName(),prop.getValue());
      }
    }
    DesignValues designerValues=null;
    try {
      designerValues=SerializerImpl.instance().read(setHandle.getDesignerValues());
    }
 catch (    IOException e) {
    }
    if (newRule) {
      List retList=new DataSetParameterAdapter().mergeParamDefnOfDataSetAndDataSetDesign(setHandle,setDesign);
      updateROMDataSetParamList(setHandle,retList);
    }
 else {
      updateROMDataSetParamList(setHandle,new DataSetParameterAdapter().newROMSetParams(setDesign,setHandle,designerValues == null ? null : designerValues.getDataSetParameters()));
    }
    ResultSets cachedResultSets=designerValues == null ? null : designerValues.getResultSets();
    ResultSetDefinition cachedResultDefn=null;
    if (cachedResultSets != null && !cachedResultSets.getResultSetDefinitions().isEmpty())     cachedResultDefn=(ResultSetDefinition)cachedResultSets.getResultSetDefinitions().get(0);
    updateROMResultSets(setHandle,new ResultSetsAdapter().newROMResultSets(setDesign,setHandle,cachedResultDefn));
    setHandle.setResultSetName(setDesign.getPrimaryResultSetName());
    setHandle.setQueryText(setDesign.getQueryText());
    String odaValues=serializeOdaValues(setDesign);
    setHandle.setDesignerValues(odaValues);
    DataSourceDesign sourceDesign=setDesign.getDataSourceDesign();
    if (sourceDesign != null) {
      OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)setHandle.getDataSource();
      if (isSourceChanged && sourceHandle != null && !sourceHandle.getModuleHandle().isReadOnly()) {
        setHandle.setDataSource(sourceDesign.getName());
        updateDataSourceHandle(sourceDesign,sourceHandle);
      }
      if (!isSourceChanged && sourceHandle != null && !sourceHandle.getModuleHandle().isReadOnly() && !(new EcoreUtil.EqualityHelper().equals(createDataSourceDesign(sourceHandle),sourceDesign))) {
        updateDataSourceHandle(sourceDesign,sourceHandle);
      }
    }
 else     setHandle.setDataSource(null);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.9439643155840536
77147,"/** 
 * Copies the value from resultSet to resultSetHints.
 * @param dataSet the data set element
 */
private void doCompatibleDataSetProperty(DesignElement dataSet){
}","/** 
 * Copies the value from resultSet to resultSetHints.
 * @param dataSet the data set element
 */
private void doCompatibleDataSetProperty(OdaDataSet dataSet){
  if (dataSet == null)   return;
  if (handler.versionNumber < VersionUtil.VERSION_3_2_2) {
    List dataSetColumns=(List)dataSet.getLocalProperty(handler.module,IDataSetModel.RESULT_SET_PROP);
    Object dataSetHints=dataSet.getLocalProperty(handler.module,IDataSetModel.RESULT_SET_HINTS_PROP);
    if (dataSetHints == null && dataSetColumns != null)     dataSet.setProperty(IDataSetModel.RESULT_SET_HINTS_PROP,ModelUtil.copyValue(dataSet.getPropertyDefn(IDataSetModel.RESULT_SET_HINTS_PROP),dataSetColumns));
  }
}",0.3443396226415094
77148,"public void end() throws SAXException {
  super.end();
  DesignElement tmpElement=getElement();
  doCompatibleDataSetProperty(tmpElement);
  mergeResultSetAndResultSetHints((OdaDataSet)tmpElement);
  TemplateParameterDefinition refTemplateParam=tmpElement.getTemplateParameterElement(handler.getModule());
  if (refTemplateParam == null)   return;
  doCompatibleDataSetProperty(refTemplateParam.getDefaultElement());
  mergeResultSetAndResultSetHints((OdaDataSet)refTemplateParam.getDefaultElement());
}","public void end() throws SAXException {
  super.end();
  OdaDataSet tmpElement=(OdaDataSet)getElement();
  doCompatibleDataSetProperty(tmpElement);
  mergeResultSetAndResultSetHints(tmpElement);
  doCompatibleRemoveResultSetProperty(tmpElement);
  doCompatibleRemoveResultSetHitProperty(tmpElement);
  TemplateParameterDefinition refTemplateParam=tmpElement.getTemplateParameterElement(handler.getModule());
  if (refTemplateParam == null)   return;
  OdaDataSet refDefaultElement=(OdaDataSet)refTemplateParam.getDefaultElement();
  doCompatibleDataSetProperty(refDefaultElement);
  mergeResultSetAndResultSetHints(refDefaultElement);
  doCompatibleRemoveResultSetProperty(refDefaultElement);
  doCompatibleRemoveResultSetHitProperty(refDefaultElement);
}",0.5675675675675675
77149,"public void deactivate(){
  if (!isActive())   return;
  removeGuideFeedBack();
  super.deactivate();
  if (isDelete()) {
    HandleAdapterFactory.getInstance().remove(getModel());
  }
}","public void deactivate(){
  if (!isActive())   return;
  removeGuideFeedBack();
  super.deactivate();
  HandleAdapterFactory.getInstance().remove(getModel());
}",0.9248554913294798
77150,"private void MergeContent(TableCellEditPart cellPart,List list) throws ContentException {
  CellHandle cellHandle=(CellHandle)cellPart.getModel();
  int size=list.size();
  for (int i=0; i < size; i++) {
    CellHandle handle=(CellHandle)(((TableCellEditPart)list.get(i)).getModel());
    List chList=handle.getSlot(CellHandle.CONTENT_SLOT).getContents();
    for (int j=0; j < chList.size(); j++) {
      DesignElementHandle contentHandle=(DesignElementHandle)chList.get(j);
      handle.getSlot(CellHandle.CONTENT_SLOT).move(contentHandle,cellHandle,CellHandle.CONTENT_SLOT);
    }
  }
}","private void MergeContent(TableCellEditPart cellPart,List list) throws ContentException {
  CellHandle cellHandle=(CellHandle)cellPart.getModel();
  int size=list.size();
  for (int i=0; i < size; i++) {
    CellHandle handle=(CellHandle)(((TableCellEditPart)list.get(i)).getModel());
    List chList=handle.getSlot(CellHandle.CONTENT_SLOT).getContents();
    for (int j=0; j < chList.size(); j++) {
      DesignElementHandle contentHandle=(DesignElementHandle)chList.get(j);
      try {
        DesignElementHandle copy=contentHandle.copy().getHandle(cellHandle.getModule());
        handle.getSlot(CellHandle.CONTENT_SLOT).drop(contentHandle);
        cellHandle.getModuleHandle().rename(copy);
        cellHandle.getSlot(CellHandle.CONTENT_SLOT).add(copy);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}",0.7701863354037267
77151,"/** 
 * whether need to use result hint
 * @param dataSetHandle
 * @return
 */
private static boolean checkHandleType(DataSetHandle dataSetHandle){
  if (dataSetHandle instanceof ScriptDataSetHandle)   return true;
 else   if (dataSetHandle instanceof JointDataSetHandle) {
    List dataSets=((JointDataSetHandle)dataSetHandle).getDataSetNames();
    for (int i=0; i < dataSets.size(); i++) {
      DataSetHandle dsHandle=((JointDataSetHandle)dataSetHandle).getModuleHandle().findDataSet(dataSets.get(i).toString());
      if (dsHandle != null && dsHandle instanceof ScriptDataSetHandle) {
        return true;
      }
 else       if (dsHandle instanceof JointDataSetHandle) {
        if (checkHandleType(dsHandle))         return true;
      }
    }
  }
  return false;
}","/** 
 * whether need to use result hint
 * @param dataSetHandle
 * @return
 */
private static boolean checkHandleType(DataSetHandle dataSetHandle){
  if (dataSetHandle instanceof ScriptDataSetHandle)   return true;
 else   if (dataSetHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dataSetHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)iter.next();
      if (dsHandle != null && dsHandle instanceof ScriptDataSetHandle) {
        return true;
      }
 else       if (dsHandle instanceof JointDataSetHandle) {
        if (checkHandleType(dsHandle))         return true;
      }
    }
  }
  return false;
}",0.7885010266940452
77152,"/** 
 * @param dataSet
 * @param dataSetDesign
 * @throws BirtException
 */
private void defineSourceDataSets(JointDataSetHandle jointDataSetHandle) throws BirtException {
  List dataSets=jointDataSetHandle.getDataSetNames();
  for (int i=0; i < dataSets.size(); i++) {
    DataSetHandle dsHandle=jointDataSetHandle.getModuleHandle().findDataSet(dataSets.get(i).toString());
    if (dsHandle != null) {
      defineDataSet(dsHandle);
    }
  }
}","/** 
 * @param dataSet
 * @param dataSetDesign
 * @throws BirtException
 */
private void defineSourceDataSets(JointDataSetHandle jointDataSetHandle) throws BirtException {
  Iterator iter=((JointDataSetHandle)jointDataSetHandle).dataSetsIterator();
  while (iter.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)iter.next();
    if (dsHandle != null) {
      defineDataSet(dsHandle);
    }
  }
}",0.6382978723404256
77153,"public Collection getSelectionListForCascadingGroup(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=getParameterDefinitionTask(design,options);
  ViewerAttributeBean bean=getViewerAttrBean(options);
  if (bean != null)   task.setParameterValues(bean.getParameters());
  task.evaluateQuery(groupName);
  Collection selectionList=task.getSelectionListForCascadingGroup(groupName,groupKeys);
  return convertEngineParameterSelectionChoice(selectionList);
}","public Collection getSelectionListForCascadingGroup(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  try {
    task=getParameterDefinitionTask(design,options);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(options);
      if (bean != null)       task.setParameterValues(bean.getParameters());
      task.evaluateQuery(groupName);
      Collection selectionList=task.getSelectionListForCascadingGroup(groupName,groupKeys);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    if (task != null)     task.close();
  }
  return null;
}",0.7918622848200313
77154,"private static ParameterGroupDefinition convertParameterGroup(IParameterGroupDefn engineParam,IGetParameterDefinitionTask task){
  boolean cascade=engineParam instanceof ICascadingParameterGroup;
  String name=engineParam.getName();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  ParameterGroupDefinition paramGroup=new ParameterGroupDefinition(name,displayName,promptText,null,cascade,helpText);
  List contents=convertParametersInGroup(engineParam.getContents(),paramGroup,task);
  paramGroup.setParameters(contents);
  return paramGroup;
}","private static ParameterGroupDefinition convertParameterGroup(IParameterGroupDefn engineParam){
  boolean cascade=engineParam instanceof ICascadingParameterGroup;
  String name=engineParam.getName();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  ParameterGroupDefinition paramGroup=new ParameterGroupDefinition(name,displayName,promptText,null,cascade,helpText);
  List contents=convertParametersInGroup(engineParam.getContents(),paramGroup);
  paramGroup.setParameters(contents);
  return paramGroup;
}",0.9695024077046548
77155,"private static List convertParametersInGroup(Collection scalarParameters,ParameterGroupDefinition group,IGetParameterDefinitionTask task){
  if (scalarParameters == null)   return null;
  List ret=new ArrayList();
  for (Iterator it=scalarParameters.iterator(); it.hasNext(); ) {
    IScalarParameterDefn engineParam=(IScalarParameterDefn)it.next();
    ParameterDefinition param=convertScalarParameter(engineParam,group,task);
    ret.add(param);
  }
  return ret;
}","private static List convertParametersInGroup(Collection scalarParameters,ParameterGroupDefinition group){
  if (scalarParameters == null)   return null;
  List ret=new ArrayList();
  for (Iterator it=scalarParameters.iterator(); it.hasNext(); ) {
    IScalarParameterDefn engineParam=(IScalarParameterDefn)it.next();
    ParameterDefinition param=convertScalarParameter(engineParam,group);
    ret.add(param);
  }
  return ret;
}",0.9575892857142856
77156,"public Collection getParameterSelectionList(IViewerReportDesignHandle design,InputOptions runOptions,String paramName) throws ReportServiceException {
  IGetParameterDefinitionTask task=getParameterDefinitionTask(design,runOptions);
  ViewerAttributeBean bean=getViewerAttrBean(runOptions);
  if (bean != null)   task.setParameterValues(bean.getParameters());
  Collection selectionList=task.getSelectionList(paramName);
  return convertEngineParameterSelectionChoice(selectionList);
}","public Collection getParameterSelectionList(IViewerReportDesignHandle design,InputOptions runOptions,String paramName) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  try {
    task=getParameterDefinitionTask(design,runOptions);
    if (task != null) {
      ViewerAttributeBean bean=getViewerAttrBean(runOptions);
      if (bean != null)       task.setParameterValues(bean.getParameters());
      Collection selectionList=task.getSelectionList(paramName);
      return convertEngineParameterSelectionChoice(selectionList);
    }
  }
  finally {
    if (task != null)     task.close();
  }
  return null;
}",0.7602862254025045
77157,"public Map getParsedParameters(IViewerReportDesignHandle design,InputOptions options,Map parameters) throws ReportServiceException {
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Collection parameterList=getParameterDefinitions(design,options,false);
  Map paramMap=new HashMap();
  Boolean isDesignerBoolean=(Boolean)options.getOption(InputOptions.OPT_IS_DESIGNER);
  boolean isDesigner=(isDesignerBoolean != null ? isDesignerBoolean.booleanValue() : false);
  IGetParameterDefinitionTask task=getParameterDefinitionTask(design,options);
  IReportRunnable runnable=getReportRunnable(design,getModuleOptions(options));
  Map configMap=runnable.getTestConfig();
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameterObj=(ParameterDefinition)iter.next();
    String paramValue=null;
    Object paramValueObj=null;
    String paramName=parameterObj.getName();
    String format=parameterObj.getPattern();
    ReportParameterConverter converter=new ReportParameterConverter(format,locale);
    Set paramNames=null;
    if (parameters != null) {
      paramNames=parameters.keySet();
    }
    if (parameters != null && paramName != null) {
      boolean found=false;
      for (Iterator it=paramNames.iterator(); it.hasNext(); ) {
        String name=(String)it.next();
        if (paramName.equals(name)) {
          if (parameters.get(name) != null)           paramValue=parameters.get(name).toString();
          paramValueObj=converter.parse(paramValue,parameterObj.getDataType());
          paramMap.put(paramName,paramValueObj);
          found=true;
          break;
        }
      }
      if (!found && configMap.containsKey(paramName) && isDesigner) {
        String configValue=(String)configMap.get(paramName);
        ReportParameterConverter cfgConverter=new ReportParameterConverter(format,Locale.US);
        paramValueObj=cfgConverter.parse(configValue,parameterObj.getDataType());
      }
 else       if (!found) {
        paramValueObj=task.getDefaultValue(parameterObj.getName());
      }
    }
  }
  return paramMap;
}","public Map getParsedParameters(IViewerReportDesignHandle design,InputOptions options,Map parameters) throws ReportServiceException {
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Collection parameterList=getParameterDefinitions(design,options,false);
  Map paramMap=new HashMap();
  Boolean isDesignerBoolean=(Boolean)options.getOption(InputOptions.OPT_IS_DESIGNER);
  boolean isDesigner=(isDesignerBoolean != null ? isDesignerBoolean.booleanValue() : false);
  IReportRunnable runnable=getReportRunnable(design,getModuleOptions(options));
  Map configMap=runnable.getTestConfig();
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameterObj=(ParameterDefinition)iter.next();
    String paramValue=null;
    Object paramValueObj=null;
    String paramName=parameterObj.getName();
    String format=parameterObj.getPattern();
    ReportParameterConverter converter=new ReportParameterConverter(format,locale);
    Set paramNames=null;
    if (parameters != null) {
      paramNames=parameters.keySet();
    }
    if (parameters != null && paramName != null) {
      boolean found=false;
      for (Iterator it=paramNames.iterator(); it.hasNext(); ) {
        String name=(String)it.next();
        if (paramName.equals(name)) {
          if (parameters.get(name) != null)           paramValue=parameters.get(name).toString();
          paramValueObj=converter.parse(paramValue,parameterObj.getDataType());
          paramMap.put(paramName,paramValueObj);
          found=true;
          break;
        }
      }
      if (!found && configMap.containsKey(paramName) && isDesigner) {
        String configValue=(String)configMap.get(paramName);
        ReportParameterConverter cfgConverter=new ReportParameterConverter(format,Locale.US);
        paramValueObj=cfgConverter.parse(configValue,parameterObj.getDataType());
      }
 else       if (!found) {
        paramValueObj=getParameterDefaultValue(design,parameterObj.getName(),options);
      }
    }
  }
  return paramMap;
}",0.9725301204819276
77158,"private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group,IGetParameterDefinitionTask task){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(name,pattern,displayFormat,displayName,helpText,promptText,dataType,controlType,hidden,allowNull,allowBlank,mustMatch,concealValue,group,null);
  return param;
}","private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(name,pattern,displayFormat,displayName,helpText,promptText,dataType,controlType,hidden,allowNull,allowBlank,mustMatch,concealValue,group,null);
  return param;
}",0.9867096254530808
77159,"private static Collection convertEngineParameters(Collection params,IGetParameterDefinitionTask task,boolean includeGroups){
  if (params == null)   return Collections.EMPTY_LIST;
  List ret=new ArrayList();
  for (Iterator it=params.iterator(); it.hasNext(); ) {
    Object o=it.next();
    if (o instanceof IScalarParameterDefn) {
      IScalarParameterDefn engineParam=(IScalarParameterDefn)o;
      ParameterGroupDefinition group=null;
      ParameterDefinition param=convertScalarParameter(engineParam,group,task);
      ret.add(param);
    }
 else     if (o instanceof IParameterGroupDefn) {
      IParameterGroupDefn engineParam=(IParameterGroupDefn)o;
      ParameterGroupDefinition paramGroup=convertParameterGroup(engineParam,task);
      ret.add(paramGroup);
    }
  }
  if (includeGroups)   return ret;
  return flattenGroups(ret);
}","/** 
 * Convert engine parameters (IScalarParameterDefn and IParameterGroupDefn) into service api parameters (ParameterDefinition and ParameterGroupDefinition)
 * @param params a Collection of IScalarParameterDefn or IParameterGroupDefn
 * @param includeGroups if true, include groups (ParameterGroupDefinition) in the result, otherwise flatten the result (i.e. include the contents of the groups in the result)
 * @return a Collection of ParameterDefinition and ParameterGroupDefinition,or a Collection of only ParameterDefinition if includeGroups == false
 */
private static Collection convertEngineParameters(Collection params,boolean includeGroups){
  if (params == null)   return Collections.EMPTY_LIST;
  List ret=new ArrayList();
  for (Iterator it=params.iterator(); it.hasNext(); ) {
    Object o=it.next();
    if (o instanceof IScalarParameterDefn) {
      IScalarParameterDefn engineParam=(IScalarParameterDefn)o;
      ParameterGroupDefinition group=null;
      ParameterDefinition param=convertScalarParameter(engineParam,group);
      ret.add(param);
    }
 else     if (o instanceof IParameterGroupDefn) {
      IParameterGroupDefn engineParam=(IParameterGroupDefn)o;
      ParameterGroupDefinition paramGroup=convertParameterGroup(engineParam);
      ret.add(paramGroup);
    }
  }
  if (includeGroups)   return ret;
  return flattenGroups(ret);
}",0.7116342236306021
77160,"public Collection getParameterDefinitions(IViewerReportDesignHandle design,InputOptions runOptions,boolean includeGroups) throws ReportServiceException {
  IGetParameterDefinitionTask task=getParameterDefinitionTask(design,runOptions);
  return convertEngineParameters(task.getParameterDefns(true),task,includeGroups);
}","public Collection getParameterDefinitions(IViewerReportDesignHandle design,InputOptions runOptions,boolean includeGroups) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  try {
    task=getParameterDefinitionTask(design,runOptions);
    if (task != null) {
      Collection params=task.getParameterDefns(true);
      return convertEngineParameters(params,includeGroups);
    }
  }
  finally {
    if (task != null)     task.close();
  }
  return null;
}",0.688360450563204
77161,"public Object getParameterDefaultValue(IViewerReportDesignHandle design,String parameterName,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=getParameterDefinitionTask(design,options);
  return task.getDefaultValue(parameterName);
}","public Object getParameterDefaultValue(IViewerReportDesignHandle design,String parameterName,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=null;
  Object defaultValue=null;
  try {
    task=getParameterDefinitionTask(design,options);
    if (task != null)     defaultValue=task.getDefaultValue(parameterName);
  }
  finally {
    if (task != null)     task.close();
  }
  return defaultValue;
}",0.7492957746478873
77162,"/** 
 * Returns the property value where a library name space is required.
 * @param memberName the structure name
 * @return the property value. If this value is not defined in the currentmodule, the library namespace is added.
 */
private String getPrefixStringProperty(String memberName){
  if (!JoinCondition.LEFT_DATASET_MEMBER.equalsIgnoreCase(memberName) && !JoinCondition.RIGHT_DATASET_MEMBER.equalsIgnoreCase(memberName))   return super.getStringProperty(memberName);
  if (!isExtendedJointDataSet())   return super.getStringProperty(memberName);
  String dataSetName=super.getStringProperty(memberName);
  if (StringUtil.isBlank(dataSetName))   return dataSetName;
  List dataSetRefs=elementHandle.getListProperty(JointDataSetHandle.DATA_SETS_PROP);
  if (dataSetRefs == null || dataSetRefs.isEmpty())   return dataSetName;
  Module tmpRoot=null;
  ElementRefValue refValue=null;
  for (int j=0; j < dataSetRefs.size(); j++) {
    ElementRefValue tmpRefValue=(ElementRefValue)dataSetRefs.get(j);
    if (tmpRefValue.getName().equalsIgnoreCase(dataSetName) && tmpRefValue.getElement() != null) {
      tmpRoot=tmpRefValue.getElement().getRoot();
      refValue=tmpRefValue;
      break;
    }
  }
  if (tmpRoot == null)   return dataSetName;
  return ReferenceValueUtil.needTheNamespacePrefix(refValue,getModule(),getModule());
}","/** 
 * Returns the property value where a library name space is required.
 * @param memberName the structure name
 * @return the property value. If this value is not defined in the currentmodule, the library namespace is added.
 */
private String getPrefixStringProperty(String memberName){
  if (!JoinCondition.LEFT_DATASET_MEMBER.equalsIgnoreCase(memberName) && !JoinCondition.RIGHT_DATASET_MEMBER.equalsIgnoreCase(memberName))   return super.getStringProperty(memberName);
  String dataSetName=super.getStringProperty(memberName);
  if (StringUtil.isBlank(dataSetName))   return dataSetName;
  List dataSetRefs=elementHandle.getListProperty(IJointDataSetModel.DATA_SETS_PROP);
  if (dataSetRefs == null || dataSetRefs.isEmpty())   return dataSetName;
  Module tmpRoot=null;
  for (int j=0; j < dataSetRefs.size(); j++) {
    ElementRefValue tmpRefValue=(ElementRefValue)dataSetRefs.get(j);
    if (tmpRefValue.getName().equalsIgnoreCase(dataSetName) && tmpRefValue.getElement() != null) {
      tmpRoot=tmpRefValue.getElement().getRoot();
      break;
    }
  }
  if (tmpRoot instanceof Library)   return StringUtil.buildQualifiedReference(((Library)tmpRoot).getNamespace(),dataSetName);
  return dataSetName;
}",0.7222875048962005
77163,"public boolean onBroughtToTop(IReportEditorPage page){
  GraphicalViewer view=getGraphicalViewer();
  if (view != null) {
    UIUtil.resetViewSelection(view,true);
  }
  return true;
}","public boolean onBroughtToTop(IReportEditorPage page){
  ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput());
  if (model != null && getModel() != model) {
    Object oldModel=getModel();
    setModel(model);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      this.getGraphicalViewer().setContents(getModel());
      hookModelEventManager(getModel());
      markPageStale(IPageStaleType.NONE);
    }
    updateStackActions();
  }
  GraphicalViewer view=getGraphicalViewer();
  if (view != null) {
    UIUtil.resetViewSelection(view,true);
  }
  return true;
}",0.4693877551020408
77164,"/** 
 * Gets the index of the current group at the specified group level. The index starts at 0  
 */
public int getCurrentGroupIndex(int groupLevel) throws DataException {
  checkHasCurrentRow();
  if (groupLevel < 0 || groupLevel > groups.length)   throw new DataException(ResourceConstants.INVALID_GROUP_LEVEL,new Integer(groupLevel));
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level > groupLevel - 1; level--) {
    GroupInfo currentGroup=findGroup(level,currentGroupIdx);
    currentGroupIdx=currentGroup.parent;
  }
  return currentGroupIdx;
}","/** 
 * Gets the index of the current group at the specified group level. The index starts at 0  
 */
public int getCurrentGroupIndex(int groupLevel) throws DataException {
  checkHasCurrentRow();
  if (groupLevel == 0)   return 0;
  if (groupLevel < 0 || groupLevel > groups.length)   throw new DataException(ResourceConstants.INVALID_GROUP_LEVEL,new Integer(groupLevel));
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level > groupLevel - 1; level--) {
    GroupInfo currentGroup=findGroup(level,currentGroupIdx);
    currentGroupIdx=currentGroup.parent;
  }
  return currentGroupIdx;
}",0.9710982658959536
77165,"public static int getLineHeight(String lineHeight){
  try {
    if (lineHeight.equalsIgnoreCase(""String_Node_Str"")) {
      return 0;
    }
    return Integer.parseInt(lineHeight);
  }
 catch (  NumberFormatException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",lineHeight);
    return 0;
  }
}","public static int getLineHeight(String lineHeight){
  try {
    if (lineHeight.equalsIgnoreCase(""String_Node_Str"")) {
      return 0;
    }
    return (int)Float.parseFloat(lineHeight);
  }
 catch (  NumberFormatException ex) {
    logger.log(Level.WARNING,""String_Node_Str"",lineHeight);
    return 0;
  }
}",0.9622331691297208
77166,"public void setGroupName(String name){
  if (name != null)   this.groupName=name;
 else   this.groupName=GROUP_OVERALL;
}","public void setGroupName(String name){
  if (name != null && name.trim().length() != 0)   this.groupName=name;
 else   this.groupName=GROUP_OVERALL;
}",0.8929889298892989
77167,"protected void createActions(){
  super.createActions();
  IAction contentAssistAction=new TextOperationAction(Messages.RESOURCE_BUNDLE,""String_Node_Str"",this,ISourceViewer.CONTENTASSIST_PROPOSALS,true);
  contentAssistAction.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",contentAssistAction);
}","protected void createActions(){
  super.createActions();
  IAction contentAssistAction=new TextOperationAction(Messages.getReportResourceBundle(),""String_Node_Str"",this,ISourceViewer.CONTENTASSIST_PROPOSALS,true);
  contentAssistAction.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",contentAssistAction);
}",0.9532967032967034
77168,"protected void createActions(){
  super.createActions();
}","protected void createActions(){
  super.createActions();
  IAction contentAssistAction=new TextOperationAction(Messages.RESOURCE_BUNDLE,""String_Node_Str"",this,ISourceViewer.CONTENTASSIST_PROPOSALS,true);
  contentAssistAction.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",contentAssistAction);
}",0.2781774580335731
77169,"protected void readGroupField(DataInputStream in,GroupDesign group,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_GROUP_LEVEL:
    int groupLevel=IOUtil.readInt(in);
  group.setGroupLevel(groupLevel);
break;
case FIELD_PAGE_BREAK_BEFORE:
String pageBreakBefore=IOUtil.readString(in);
group.setPageBreakBefore(pageBreakBefore);
break;
case FIELD_PAGE_BREAK_AFTER:
String pageBreakAfter=IOUtil.readString(in);
group.setPageBreakAfter(pageBreakAfter);
break;
case FIELD_HEADER_REPEAT:
boolean hideDetail=IOUtil.readBool(in);
group.setHideDetail(hideDetail);
break;
case FIELD_HIDE_DETAIL:
boolean headerRepeat=IOUtil.readBool(in);
group.setHeaderRepeat(headerRepeat);
break;
default :
readReportItemField(in,group,fieldType);
}
}","protected void readGroupField(DataInputStream in,GroupDesign group,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_GROUP_LEVEL:
    int groupLevel=IOUtil.readInt(in);
  group.setGroupLevel(groupLevel);
break;
case FIELD_PAGE_BREAK_BEFORE:
String pageBreakBefore=IOUtil.readString(in);
group.setPageBreakBefore(pageBreakBefore);
break;
case FIELD_PAGE_BREAK_AFTER:
String pageBreakAfter=IOUtil.readString(in);
group.setPageBreakAfter(pageBreakAfter);
break;
case FIELD_HIDE_DETAIL:
boolean hideDetail=IOUtil.readBool(in);
group.setHideDetail(hideDetail);
break;
case FIELD_HEADER_REPEAT:
boolean headerRepeat=IOUtil.readBool(in);
group.setHeaderRepeat(headerRepeat);
break;
default :
readReportItemField(in,group,fieldType);
}
}",0.8464619492656876
77170,"private TableLayoutInfo resolveTableLayoutInfo(TableArea area){
  assert(parent != null);
  int avaWidth=parent.getMaxAvaWidth() - parent.getCurrentIP();
  int parentMaxWidth=parent.getMaxAvaWidth();
  IStyle style=area.getStyle();
  validateBoxProperty(style);
  int marginWidth=getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_LEFT)) + getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_RIGHT));
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),parentMaxWidth);
  if (specifiedWidth + marginWidth > parentMaxWidth) {
    specifiedWidth=0;
  }
  boolean isInline=PropertyUtil.isInlineElement(content);
  if (specifiedWidth == 0) {
    if (isInline) {
      if (avaWidth - marginWidth > parentMaxWidth / 4) {
        tableWidth=avaWidth - marginWidth;
      }
 else {
        tableWidth=parentMaxWidth - marginWidth;
      }
    }
 else {
      tableWidth=avaWidth - marginWidth;
    }
    return new TableLayoutInfo(columnWidthResolver.resolve(tableWidth,tableWidth));
  }
 else {
    if (!isInline) {
      tableWidth=Math.min(specifiedWidth,avaWidth - marginWidth);
      return new TableLayoutInfo(handleColummVisibity(columnWidthResolver.resolve(tableWidth,avaWidth - marginWidth)));
    }
 else {
      tableWidth=Math.min(specifiedWidth,parentMaxWidth - marginWidth);
      return new TableLayoutInfo(handleColummVisibity(columnWidthResolver.resolve(tableWidth,parentMaxWidth - marginWidth)));
    }
  }
}","private TableLayoutInfo resolveTableLayoutInfo(TableArea area){
  assert(parent != null);
  int avaWidth=parent.getMaxAvaWidth() - parent.getCurrentIP();
  int parentMaxWidth=parent.getMaxAvaWidth();
  IStyle style=area.getStyle();
  validateBoxProperty(style);
  int marginWidth=getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_LEFT)) + getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_RIGHT));
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),parentMaxWidth);
  if (specifiedWidth + marginWidth > parentMaxWidth) {
    specifiedWidth=0;
  }
  boolean isInline=PropertyUtil.isInlineElement(content);
  if (specifiedWidth == 0) {
    if (isInline) {
      if (avaWidth - marginWidth > parentMaxWidth / 4) {
        tableWidth=avaWidth - marginWidth;
      }
 else {
        tableWidth=parentMaxWidth - marginWidth;
      }
    }
 else {
      tableWidth=avaWidth - marginWidth;
    }
    return new TableLayoutInfo(handleColummVisibity(columnWidthResolver.resolve(tableWidth,tableWidth)));
  }
 else {
    if (!isInline) {
      tableWidth=Math.min(specifiedWidth,avaWidth - marginWidth);
      return new TableLayoutInfo(handleColummVisibity(columnWidthResolver.resolve(tableWidth,avaWidth - marginWidth)));
    }
 else {
      tableWidth=Math.min(specifiedWidth,parentMaxWidth - marginWidth);
      return new TableLayoutInfo(handleColummVisibity(columnWidthResolver.resolve(tableWidth,parentMaxWidth - marginWidth)));
    }
  }
}",0.992491467576792
77171,"public void actionPerformed(ActionEvent e){
  int i=jcbModels.getSelectedIndex();
  cm=null;
switch (i) {
case 0:
    cm=DataCharts.createMinSliceChart();
  break;
case 1:
cm=DataCharts.createMulitYSeriesChart();
break;
case 2:
cm=DataCharts.createMultiYAxisChart();
break;
}
bNeedsGeneration=true;
dcv.repaint();
}","public void actionPerformed(ActionEvent e){
  int i=jcbModels.getSelectedIndex();
  cm=null;
switch (i) {
case 0:
    cm=DataCharts.createMinSliceChart();
  break;
case 1:
cm=DataCharts.createMultiYSeriesChart();
break;
case 2:
cm=DataCharts.createMultiYAxisChart();
break;
}
bNeedsGeneration=true;
dcv.repaint();
}",0.9936507936507936
77172,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE) {
    prePage.doSave(null);
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    prePage.doSave(null);
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}",0.9841509433962264
77173,"protected boolean allowPageBreak(){
  IBandContent band=(IBandContent)content;
  int type=band.getBandType();
  if (type == IBandContent.BAND_HEADER) {
    IElement listContent=band.getParent();
    if (listContent instanceof IListContent) {
      return !((IListContent)listContent).isHeaderRepeat();
    }
  }
 else   if (type == IBandContent.BAND_GROUP_HEADER) {
    IElement groupContent=band.getParent();
    if (groupContent instanceof IGroupContent) {
      return !((IGroupContent)groupContent).isHeaderRepeat();
    }
  }
  return true;
}","protected boolean allowPageBreak(){
  IBandContent band=(IBandContent)content;
  int type=band.getBandType();
  if (type == IBandContent.BAND_HEADER) {
    if (IStyle.SOFT_VALUE.equals(content.getStyle().getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE))) {
      return true;
    }
    IElement listContent=band.getParent();
    if (listContent instanceof IListContent) {
      return !((IListContent)listContent).isHeaderRepeat();
    }
  }
 else   if (type == IBandContent.BAND_GROUP_HEADER) {
    if (IStyle.SOFT_VALUE.equals(content.getStyle().getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE))) {
      return true;
    }
    IElement groupContent=band.getParent();
    if (groupContent instanceof IGroupContent) {
      return !((IGroupContent)groupContent).isHeaderRepeat();
    }
  }
  return true;
}",0.8139880952380952
77174,"private boolean canPageBreak(){
  if (!context.allowPageBreak()) {
    return false;
  }
  PDFAbstractLM p=parent;
  while (p != null) {
    if (!p.allowPageBreak()) {
      return false;
    }
    p=p.getParent();
  }
  return true;
}","protected boolean canPageBreak(){
  if (!context.allowPageBreak()) {
    return false;
  }
  PDFAbstractLM p=parent;
  while (p != null) {
    if (!p.allowPageBreak()) {
      return false;
    }
    p=p.getParent();
  }
  return true;
}",0.9745762711864406
77175,"protected boolean allowPageBreak(){
  if (type == IBandContent.BAND_GROUP_HEADER || type == IBandContent.BAND_HEADER) {
    return !repeatHeader;
  }
  return true;
}","protected boolean allowPageBreak(){
  if (type == IBandContent.BAND_GROUP_HEADER || type == IBandContent.BAND_HEADER) {
    if (!repeatHeader) {
      return true;
    }
 else {
      if (IStyle.SOFT_VALUE.equals(content.getStyle().getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE))) {
        return true;
      }
      return false;
    }
  }
  return true;
}",0.5988483685220729
77176,"public boolean addArea(IArea area){
  return parent.addArea(area);
}","public boolean addArea(IArea area){
  if (firstRow) {
    firstRow=false;
    IArea tocAnchor=AreaFactory.createTableGroupArea((IGroupContent)content);
    tableLM.addArea(tocAnchor);
    tableLM.setRepeatCount(tableLM.getRepeatCount() + 1);
  }
  return parent.addArea(area);
}",0.2254335260115607
77177,"protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    IArea tocAnchor=AreaFactory.createTableGroupArea((IGroupContent)content);
    tableLM.addArea(tocAnchor);
    tableLM.setRepeatCount(tableLM.getRepeatCount() + 1);
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableLM.getContent(),tableLM.getLayoutInfo());
  regionLM.initialize(header,tableLM.lastRowArea);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      count++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
    tableLM.setRepeatCount(tableLM.getRepeatCount() + count);
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableLM.getContent(),tableLM.getLayoutInfo());
  regionLM.initialize(header,tableLM.lastRowArea);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      count++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
    tableLM.setRepeatCount(tableLM.getRepeatCount() + count);
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.9523539421440728
77178,"/** 
 * convert String with ISO8601 date format to java.util.Date
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDateISO8601(String source) throws BirtException {
  Date resultDate=null;
  source=source.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < simpleDateFormatter.length - 1; i++) {
    try {
      resultDate=simpleDateFormatter[i].parse(source);
      return resultDate;
    }
 catch (    ParseException e1) {
    }
  }
  if (source.length() <= 4 && source.matches(""String_Node_Str"")) {
    try {
      resultDate=simpleDateFormatter[simpleDateFormatter.length - 1].parse(source);
      return resultDate;
    }
 catch (    ParseException e1) {
    }
  }
  if (resultDate == null) {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
  return resultDate;
}","/** 
 * convert String with ISO8601 date format to java.util.Date
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDateISO8601(String source) throws BirtException {
  Date resultDate=null;
  try {
    resultDate=DateFormatISO8601.parse(source);
    return resultDate;
  }
 catch (  ParseException e1) {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
}",0.6036217303822937
77179,"/** 
 * Sets the column name.
 * @param columnName the column name to set.
 * @throws SemanticException if the new column name duplicates with the existed ones.
 */
public void setName(String columnName) throws SemanticException {
  List resultList=ColumnBindingNameValidator.getInstance().validateForReplacing(getElementHandle(),getPropertyDefn(),getStructure(),columnName);
  if (resultList.size() > 0) {
    throw (PropertyValueException)resultList.get(0);
  }
  setProperty(ComputedColumn.NAME_MEMBER,columnName);
}","/** 
 * Sets the column name.
 * @param columnName the column name to set.
 * @throws SemanticException if the new column name duplicates with the existed ones.
 */
public void setName(String columnName) throws SemanticException {
  setProperty(ComputedColumn.NAME_MEMBER,columnName);
}",0.7105590062111802
77180,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    resultSetList=(List)dataSetHandle.getProperty(OdaDataSetHandle.RESULT_SET_PROP);
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(ModelAdapter.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,resultSetColumn.getColumnName());
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(ModelAdapter.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,computedColumn.getName()) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    resultSetList=(List)dataSetHandle.getProperty(OdaDataSetHandle.RESULT_SET_PROP);
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(ModelAdapter.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(ModelAdapter.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}",0.9879850849330204
77181,"private void appendErrorMessage(int index,ElementExceptionInfo info){
  EngineResourceHandle rc=EngineResourceHandle.getInstance();
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  String name=info.getName();
  if (name != null) {
    writer.text(rc.getMessage(MessageConstants.REPORT_ERROR_MESSAGE,new Object[]{info.getType(),name}),false);
  }
 else {
    writer.text(rc.getMessage(MessageConstants.REPORT_ERROR_MESSAGE_WITH_ID,new Object[]{info.getType(),info.getID()}),false);
  }
  writer.writeCode(""String_Node_Str"");
  ArrayList errorList=info.getErrorList();
  ArrayList countList=info.getCountList();
  for (int i=0; i < errorList.size(); i++) {
    String errorId=""String_Node_Str"" + index + ""String_Node_Str""+ i+ ""String_Node_Str"";
    String errorIcon=""String_Node_Str"" + index + ""String_Node_Str""+ i+ ""String_Node_Str"";
    String onClick=""String_Node_Str"" + errorId + ""String_Node_Str""+ errorIcon+ ""String_Node_Str""+ errorId+ ""String_Node_Str""+ ""String_Node_Str""+ errorIcon+ ""String_Node_Str""+ errorId+ ""String_Node_Str"";
    writer.writeCode(""String_Node_Str"");
    BirtException ex=(BirtException)errorList.get(i);
    writer.writeCode(""String_Node_Str"" + index + ""String_Node_Str""+ i+ ""String_Node_Str""+ onClick+ ""String_Node_Str"");
    writer.text(ex.getLocalizedMessage());
    writer.writeCode(""String_Node_Str"" + index + ""String_Node_Str""+ i+ ""String_Node_Str"");
    String messageTitle=rc.getMessage(MessageConstants.REPORT_ERROR_ID,new Object[]{ex.getErrorCode(),countList.get(i)});
    String detailTag=rc.getMessage(MessageConstants.REPORT_ERROR_DETAIL);
    String messageBody=getDetailMessage(ex);
    boolean indent=writer.isIndent();
    writer.setIndent(false);
    writer.text(messageTitle,false);
    writer.writeCode(""String_Node_Str"");
    writer.text(detailTag,false);
    writer.text(messageBody,false);
    writer.setIndent(indent);
    writer.writeCode(""String_Node_Str"");
    writer.writeCode(""String_Node_Str"");
  }
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
}","private void appendErrorMessage(EngineResourceHandle rc,int index,ElementExceptionInfo info){
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  String name=info.getName();
  if (name != null) {
    writer.text(rc.getMessage(MessageConstants.REPORT_ERROR_MESSAGE,new Object[]{info.getType(),name}),false);
  }
 else {
    writer.text(rc.getMessage(MessageConstants.REPORT_ERROR_MESSAGE_WITH_ID,new Object[]{info.getType(),info.getID()}),false);
  }
  writer.writeCode(""String_Node_Str"");
  ArrayList errorList=info.getErrorList();
  ArrayList countList=info.getCountList();
  for (int i=0; i < errorList.size(); i++) {
    String errorId=""String_Node_Str"" + index + ""String_Node_Str""+ i+ ""String_Node_Str"";
    String errorIcon=""String_Node_Str"" + index + ""String_Node_Str""+ i+ ""String_Node_Str"";
    String onClick=""String_Node_Str"" + errorId + ""String_Node_Str""+ errorIcon+ ""String_Node_Str""+ errorId+ ""String_Node_Str""+ ""String_Node_Str""+ errorIcon+ ""String_Node_Str""+ errorId+ ""String_Node_Str"";
    writer.writeCode(""String_Node_Str"");
    BirtException ex=(BirtException)errorList.get(i);
    writer.writeCode(""String_Node_Str"" + index + ""String_Node_Str""+ i+ ""String_Node_Str""+ onClick+ ""String_Node_Str"");
    writer.text(ex.getLocalizedMessage());
    writer.writeCode(""String_Node_Str"" + index + ""String_Node_Str""+ i+ ""String_Node_Str"");
    String messageTitle=rc.getMessage(MessageConstants.REPORT_ERROR_ID,new Object[]{ex.getErrorCode(),countList.get(i)});
    String detailTag=rc.getMessage(MessageConstants.REPORT_ERROR_DETAIL);
    String messageBody=getDetailMessage(ex);
    boolean indent=writer.isIndent();
    writer.setIndent(false);
    writer.text(messageTitle,false);
    writer.writeCode(""String_Node_Str"");
    writer.text(detailTag,false);
    writer.text(messageBody,false);
    writer.setIndent(indent);
    writer.writeCode(""String_Node_Str"");
    writer.writeCode(""String_Node_Str"");
  }
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
}",0.9789936492427944
77182,"protected boolean outputErrors(List errors){
  if (errors != null && !errors.isEmpty()) {
    writer.writeCode(""String_Node_Str"");
    writer.writeCode(""String_Node_Str"");
    writer.writeCode(""String_Node_Str"");
    writer.text(EngineResourceHandle.getInstance().getMessage(MessageConstants.ERRORS_ON_REPORT_PAGE),false);
    writer.writeCode(""String_Node_Str"");
    writer.writeCode(""String_Node_Str"");
    Iterator it=errors.iterator();
    int index=0;
    while (it.hasNext()) {
      appendErrorMessage(index++,(ElementExceptionInfo)it.next());
    }
    writer.writeCode(""String_Node_Str"");
    return true;
  }
  return false;
}","protected boolean outputErrors(List errors){
  if (errors != null && !errors.isEmpty()) {
    writer.writeCode(""String_Node_Str"");
    writer.writeCode(""String_Node_Str"");
    writer.writeCode(""String_Node_Str"");
    Locale locale=reportContext.getLocale();
    if (locale == null) {
      locale=Locale.getDefault();
    }
    EngineResourceHandle rc=new EngineResourceHandle(locale);
    writer.text(rc.getMessage(MessageConstants.ERRORS_ON_REPORT_PAGE),false);
    writer.writeCode(""String_Node_Str"");
    writer.writeCode(""String_Node_Str"");
    Iterator it=errors.iterator();
    int index=0;
    while (it.hasNext()) {
      appendErrorMessage(rc,index++,(ElementExceptionInfo)it.next());
    }
    writer.writeCode(""String_Node_Str"");
    return true;
  }
  return false;
}",0.867231638418079
77183,"public URL findResource(ModuleHandle moduleHandle,String fileName,int type){
  if (fileName == null)   return null;
  try {
    File f=new File(fileName);
    if (f.isAbsolute())     return f.exists() && f.isFile() ? f.getCanonicalFile().toURL() : null;
  }
 catch (  IOException e) {
    return null;
  }
  try {
    URL objURI=new URL(fileName);
    if (isGlobalResource(objURI))     return objURI;
    return tryLocalResourceSearch(objURI);
  }
 catch (  MalformedURLException e) {
  }
  if (moduleHandle == null)   return tryFragmentSearch(fileName);
  String resourcePath=moduleHandle.getModule().getSession().getResourceFolder();
  if (resourcePath == null)   resourcePath=moduleHandle.getResourceFolder();
  if (resourcePath != null) {
    File f=new File(resourcePath,fileName);
    try {
      if (f.exists() && f.isFile())       return f.getCanonicalFile().toURL();
    }
 catch (    IOException e) {
    }
  }
  URL url=tryFragmentSearch(fileName);
  if (url != null)   return url;
  URL systemId=moduleHandle.getModule().getSystemId();
  if (systemId == null)   return null;
  try {
    url=new URL(systemId,URIUtil.convertFileNameToURLString(fileName));
    if (isGlobalResource(url))     return url;
    return tryLocalResourceSearch(url);
  }
 catch (  MalformedURLException e) {
  }
  return null;
}","public URL findResource(ModuleHandle moduleHandle,String fileName,int type){
  URL u=null;
  if (fileName == null)   return u;
switch (type) {
case IResourceLocator.MESSAGE_FILE:
    u=getMessageFile(moduleHandle,fileName);
  break;
default :
u=getResource(moduleHandle,fileName);
break;
}
return u;
}",0.1497524752475247
77184,"/** 
 * Searches the file by the given file name. The actual search algorithm will be different in different environment. The file type is just helpful when different file searching steps for different files are required. Because new file type will be added if design file includes new file, the default searching steps are encouraged for unknown file type to improve robustness.
 * @param moduleHandle The module to tell the search context. This could be null if the search algorithm does not need the design. It can be the instance of one of <code>ReportDesignHandle</code> and <code>LibraryHandle</code>.
 * @param filename The file name to be searched. This could be an absolute path or a relative path.
 * @param type The type of the file to search. The value must be one of <code>IMAGE</code>,<code>LIBRARY</code> and <code>CASCADING_STYLE_SHEET</code>.
 * @return The <code>URL</code> object. <code>null</code> if the filecan not be found.
 */
public URL findResource(ModuleHandle moduleHandle,String filename,int type);","/** 
 * Searches the file by the given file name. The actual search algorithm will be different in different environment. The file type is just helpful when different file searching steps for different files are required. Because new file type will be added if design file includes new file, the default searching steps are encouraged for unknown file type to improve robustness.
 * @param moduleHandle The module to tell the search context. This could be null if the search algorithm does not need the design. It can be the instance of one of <code>ReportDesignHandle</code> and <code>LibraryHandle</code>.
 * @param filename The file name to be searched. This could be an absolute path or a relative path.
 * @param type The type of the file to search. The value must be one of <code>IMAGE</code>,<code>LIBRARY</code> , <code>CASCADING_STYLE_SHEET</code> and <code>MESSAGEFILE</code>.
 * @return The <code>URL</code> object. <code>null</code> if the filecan not be found.
 */
public URL findResource(ModuleHandle moduleHandle,String filename,int type);",0.984142239308025
77185,"/** 
 * Returns the <code>URL</code> object if the file with <code>fileName</code> exists. This method takes the following search steps: <ul> <li>Search file taking <code>fileName</code> as absolute file name; <li>Search file taking <code>fileName</code> as relative file name and basing ""base"" property of report design; <li>Search file with the file locator (<code>IResourceLocator</code>) in session. </ul>
 * @param fileName file name to search
 * @param fileType file type. The value should be one of: <ul> <li><code>IResourceLocator.IMAGE</code> <li><code>IResourceLocator.LIBRARY</code> </ul> Any invalid value will be treated as <code>IResourceLocator.IMAGE</code>.
 * @return the <code>URL</code> object if the file with<code>fileName</code> is found, or null otherwise.
 */
public URL findResource(String fileName,int fileType){
  return module.findResource(fileName,fileType);
}","/** 
 * Returns the <code>URL</code> object if the file with <code>fileName</code> exists. This method takes the following search steps: <ul> <li>Search file taking <code>fileName</code> as absolute file name; <li>Search file taking <code>fileName</code> as relative file name and basing ""base"" property of report design; <li>Search file with the file locator (<code>IResourceLocator</code>) in session. </ul>
 * @param fileName file name to search
 * @param fileType file type. The value should be one of: <ul> <li><code>IResourceLocator.IMAGE</code> <li><code>IResourceLocator.LIBRARY</code> <li><code>IResourceLocator.MESSAGEFILE</code> </ul> Any invalid value will be treated as <code>IResourceLocator.IMAGE</code>.
 * @return the <code>URL</code> object if the file with<code>fileName</code> is found, or null otherwise.
 */
public URL findResource(String fileName,int fileType){
  return module.findResource(fileName,fileType);
}",0.974780701754386
77186,"/** 
 * Returns the <code>URL</code> object if the file with <code>fileName</code> exists. This method takes the following search steps: <ul> <li>Search file taking <code>fileName</code> as absolute file name; <li>Search file taking <code>fileName</code> as relative file name and basing ""base"" property of module; <li>Search file with the file locator (<code>IResourceLocator</code>) in session. </ul>
 * @param fileName file name to search
 * @param fileType file type. The value should be one of: <ul> <li><code>IResourceLocator.IMAGE</code> <li><code>IResourceLocator.LIBRARY</code> </ul> Any invalid value will be treated as <code>IResourceLocator.IMAGE</code>.
 * @return the <code>URL</code> object if the file with<code>fileName</code> is found, or null otherwise.
 */
public URL findResource(String fileName,int fileType){
  URL url=getSession().getResourceLocator().findResource((ModuleHandle)getHandle(this),fileName,fileType);
  return url;
}","/** 
 * Returns the <code>URL</code> object if the file with <code>fileName</code> exists. This method takes the following search steps: <ul> <li>Search file taking <code>fileName</code> as absolute file name; <li>Search file taking <code>fileName</code> as relative file name and basing ""base"" property of module; <li>Search file with the file locator (<code>IResourceLocator</code>) in session. </ul>
 * @param fileName file name to search
 * @param fileType file type. The value should be one of: <ul> <li><code>IResourceLocator.IMAGE</code> <li><code>IResourceLocator.LIBRARY</code> <li><code>IResourceLocator.MESSAGEFILE</code> </ul> Any invalid value will be treated as <code>IResourceLocator.IMAGE</code>.
 * @return the <code>URL</code> object if the file with<code>fileName</code> is found, or null otherwise.
 */
public URL findResource(String fileName,int fileType){
  URL url=getSession().getResourceLocator().findResource((ModuleHandle)getHandle(this),fileName,fileType);
  return url;
}",0.9764585465711362
77187,"/** 
 * clear unused column hints
 * @throws BirtException 
 */
private final void clearUnusedColumnHints(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  ArrayList list=handle.getListValue();
  if (list != null) {
    int count=list.size();
    for (int n=count - 1; n >= 0; n--) {
      ColumnHint hint=(ColumnHint)list.get(n);
      String columnName=(String)hint.getProperty(handle.getDesign(),ColumnHint.COLUMN_NAME_MEMBER);
      boolean found=false;
      if (!isEmpty(hint,handle.getModule().getModuleHandle())) {
        for (int m=0; m < metaData.getColumnCount() && !found; m++) {
          found=columnName.equals(metaData.getColumnName(m + 1));
        }
      }
      if (!found) {
        try {
          handle.removeItem(hint);
        }
 catch (        PropertyValueException e) {
        }
      }
    }
  }
}","/** 
 * clear unused column hints
 * @throws BirtException 
 */
private final void clearUnusedColumnHints(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  if (handle != null && handle.getListValue() != null) {
    ArrayList list=handle.getListValue();
    int count=list.size();
    for (int n=count - 1; n >= 0; n--) {
      ColumnHint hint=(ColumnHint)list.get(n);
      String columnName=(String)hint.getProperty(handle.getDesign(),ColumnHint.COLUMN_NAME_MEMBER);
      boolean found=false;
      if (!isEmpty(hint,handle.getModule().getModuleHandle())) {
        for (int m=0; m < metaData.getColumnCount() && !found; m++) {
          found=columnName.equals(metaData.getColumnName(m + 1));
        }
      }
      if (!found) {
        try {
          handle.removeItem(hint);
        }
 catch (        PropertyValueException e) {
        }
      }
    }
  }
}",0.958096223486808
77188,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    if (dataSetHandle.canEdit())     addResultSetColumn(dataSetHandle,metaData);
  }
  if (needsUseResultHint(dataSetHandle,metaData)) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    if (dataSetHandle.canEdit())     addResultSetColumn(dataSetHandle,metaData);
    if (MetaDataPopulator.needsUseResultHint(dataSetHandle,metaData)) {
      metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
    }
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}",0.9847328244274808
77189,"/** 
 * handle the page-break-before of group. AUTO: page-break-always-excluding_fist for top level group, none for others. PAGE_BREAK_BEFORE_ALWAYS: always create page break PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST: create page-break for all groups except the first one.
 * @param bandDesign
 */
protected void handlePageBreakBeforeOfGroup(){
  boolean needPageBreak=false;
  GroupDesign groupDesign=(GroupDesign)design;
  if (groupDesign != null) {
    String pageBreakBefore=groupDesign.getPageBreakBefore();
    int groupLevel=groupDesign.getGroupLevel();
    if (DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS.equals(pageBreakBefore)) {
      needPageBreak=true;
    }
    if (DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST.equals(pageBreakBefore)) {
      if (rset.getStartingGroupLevel() > groupLevel) {
        needPageBreak=true;
      }
    }
    if (DesignChoiceConstants.PAGE_BREAK_BEFORE_AUTO.equals(pageBreakBefore) && groupLevel == 0) {
      if (isTopLevelListing()) {
        int startGroupLevel=rset.getStartingGroupLevel();
        if (startGroupLevel > 0) {
          needPageBreak=true;
        }
      }
    }
    if (needPageBreak) {
      content.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
    }
  }
}","/** 
 * handle the page-break-before of group. AUTO: page-break-always-excluding_fist for top level group, none for others. PAGE_BREAK_BEFORE_ALWAYS: always create page break PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST: create page-break for all groups except the first one.
 * @param bandDesign
 */
protected void handlePageBreakBeforeOfGroup(){
  boolean needPageBreak=false;
  GroupDesign groupDesign=(GroupDesign)design;
  if (groupDesign != null) {
    String pageBreakBefore=groupDesign.getPageBreakBefore();
    int groupLevel=groupDesign.getGroupLevel();
    if (DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS.equals(pageBreakBefore)) {
      needPageBreak=true;
    }
    if (DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST.equals(pageBreakBefore)) {
      if (rset.getStartingGroupLevel() > groupLevel) {
        needPageBreak=true;
      }
    }
    if (needPageBreak) {
      content.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
    }
  }
}",0.8188629352137505
77190,"private void locateGroupIcon(GroupDesign group){
  GroupHandle groupHandle=(GroupHandle)group.getHandle();
  String keyExpression=groupHandle.getKeyExpr();
  if (keyExpression == null) {
    return;
  }
  keyExpression=keyExpression.trim();
  BandDesign groupHeader=group.getHeader();
  for (int i=0; i < groupHeader.getContentCount(); i++) {
    RowDesign row=(RowDesign)groupHeader.getContent(0);
    for (int j=0; j < row.getCellCount(); j++) {
      CellDesign cell=row.getCell(j);
      for (int k=0; k < cell.getContentCount(); k++) {
        ReportItemDesign item=cell.getContent(k);
        if (item instanceof DataItemDesign) {
          DataItemDesign data=(DataItemDesign)item;
          String value=data.getValue();
          if (value != null && keyExpression.equals(value.trim())) {
            cell.setDisplayGroupIcon(true);
            return;
          }
        }
      }
    }
  }
}","private void locateGroupIcon(GroupDesign group){
  GroupHandle groupHandle=(GroupHandle)group.getHandle();
  String keyExpression=groupHandle.getKeyExpr();
  if (keyExpression == null) {
    return;
  }
  keyExpression=keyExpression.trim();
  BandDesign groupHeader=group.getHeader();
  for (int i=0; i < groupHeader.getContentCount(); i++) {
    RowDesign row=(RowDesign)groupHeader.getContent(0);
    for (int j=0; j < row.getCellCount(); j++) {
      CellDesign cell=row.getCell(j);
      for (int k=0; k < cell.getContentCount(); k++) {
        ReportItemDesign item=cell.getContent(k);
        if (hasExpression(item,keyExpression)) {
          cell.setDisplayGroupIcon(true);
          return;
        }
      }
    }
  }
}",0.8651960784313726
77191,"private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        currentPos=chunk.getText().length();
        PDFTextLM.this.newLine();
        return;
      }
      currentPos=0;
      this.wr=new DefaultWordRecognizer(chunk.getText());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      Dimension d=new Dimension(0,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      IArea builtArea=buildArea(""String_Node_Str"",content,chunk.getFontInfo(),d);
      PDFTextLM.this.addTextLine(builtArea);
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    IHyphenationManager hm=new DefaultHyphenationManager();
    Hyphenation hyph=hm.getHyphenation(str);
    int endHyphenIndex=hyphen(0,freeSpace - prevAreaWidth,hyph,chunk.getFontInfo());
    if (endHyphenIndex == 0) {
      if (nothingSplitted) {
        str=hyph.getHyphenText(0,endHyphenIndex + 1);
        addByForce=true;
        nothingSplitted=false;
      }
 else {
        nothingSplitted=true;
        vestigeIndex=currentPos;
        vestigeLength=(null == currentWord) ? vestigeLength : currentWord.getLength();
        return;
      }
    }
 else {
      str=hyph.getHyphenText(0,endHyphenIndex);
    }
    currentPos+=str.length();
    vestigeIndex=currentPos;
    vestigeLength=(null == currentWord) ? vestigeLength - str.length() : currentWord.getLength() - str.length();
    Dimension d=null;
    if (addByForce) {
      d=new Dimension(freeSpace,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      addByForce=false;
    }
 else {
      d=new Dimension(prevAreaWidth + (int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length(),(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    }
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),vestigeIndex);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    vestigeIndex=(null == currentWord) ? -1 : currentWord.getStart();
    vestigeLength=(null == currentWord) ? 0 : currentWord.getLength();
    return;
  }
}","private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        currentPos=chunk.getText().length();
        PDFTextLM.this.newLine();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      this.wr=new DefaultWordRecognizer(chunk.getText());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      Dimension d=new Dimension(0,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      IArea builtArea=buildArea(""String_Node_Str"",content,chunk.getFontInfo(),d);
      PDFTextLM.this.addTextLine(builtArea);
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    IHyphenationManager hm=new DefaultHyphenationManager();
    Hyphenation hyph=hm.getHyphenation(str);
    int endHyphenIndex=hyphen(0,freeSpace - prevAreaWidth,hyph,chunk.getFontInfo());
    if (endHyphenIndex == 0) {
      if (nothingSplitted) {
        str=hyph.getHyphenText(0,endHyphenIndex + 1);
        addByForce=true;
        nothingSplitted=false;
      }
 else {
        nothingSplitted=true;
        vestigeIndex=currentPos;
        vestigeLength=(null == currentWord) ? vestigeLength : currentWord.getLength();
        return;
      }
    }
 else {
      str=hyph.getHyphenText(0,endHyphenIndex);
    }
    currentPos+=str.length();
    vestigeIndex=currentPos;
    vestigeLength=(null == currentWord) ? vestigeLength - str.length() : currentWord.getLength() - str.length();
    Dimension d=null;
    if (addByForce) {
      d=new Dimension(freeSpace,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      addByForce=false;
    }
 else {
      d=new Dimension(prevAreaWidth + (int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length(),(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    }
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),vestigeIndex);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    vestigeIndex=(null == currentWord) ? -1 : currentWord.getStart();
    vestigeLength=(null == currentWord) ? 0 : currentWord.getLength();
    return;
  }
}",0.9976724699748628
77192,"public int getScale(int index) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ResultSetMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(rsMetadata);
  try {
    return rsMetadata.getScale(index);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_MEATADATA_SCALE_CANNOT_GET,e);
  }
}","public int getScale(int index) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ResultSetMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(rsMetadata);
  try {
    return rsMetadata.getScale(index);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_MEATADATA_SCALE_CANNOT_GET,e);
  }
catch (  RuntimeException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_MEATADATA_SCALE_CANNOT_GET,new SQLException(e.getMessage()));
  }
}",0.8278965129358831
77193,"public int getPrecision(int index) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ResultSetMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(rsMetadata);
  try {
    return rsMetadata.getPrecision(index);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_METADATA_PRECISION_CANNOT_GET,e);
  }
}","public int getPrecision(int index) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ResultSetMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(rsMetadata);
  try {
    return rsMetadata.getPrecision(index);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_METADATA_PRECISION_CANNOT_GET,e);
  }
catch (  RuntimeException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_METADATA_PRECISION_CANNOT_GET,new SQLException(e.getMessage()));
  }
}",0.8293216630196937
77194,"/** 
 * Create a parameter hint based on Parameter definition and value
 * @param paramDefn
 * @param evaValue
 */
private ParameterHint createParameterHint(IParameterDefinition paramDefn,Object paramValue) throws DataException {
}","/** 
 * Create a parameter hint based on Parameter definition and value
 * @param paramDefn
 * @param evaValue
 */
private ParameterHint createParameterHint(IParameterDefinition paramDefn,Object paramValue) throws DataException {
  ParameterHint parameterHint=new ParameterHint(paramDefn.getName(),paramDefn.isInputMode(),paramDefn.isOutputMode());
  if (paramDefn.getPosition() > 0)   parameterHint.setPosition(paramDefn.getPosition());
  Class dataTypeClass=DataType.getClass(paramDefn.getType());
  if (dataTypeClass == DataType.AnyType.class || dataTypeClass == Boolean.class || dataTypeClass == Blob.class) {
    dataTypeClass=String.class;
  }
  parameterHint.setDataType(dataTypeClass);
  parameterHint.setNativeDataType(paramDefn.getNativeType());
  parameterHint.setIsInputOptional(paramDefn.isInputOptional());
  if (parameterHint.isInputMode())   parameterHint.setDefaultInputValue(getParameterValueString(dataTypeClass,paramValue));
  parameterHint.setIsNullable(paramDefn.isNullable());
  return parameterHint;
}",0.3678343949044586
77195,"/** 
 * Check whether report design will overwrite report doc or not.
 * @param request
 * @return
 */
public static boolean isOverwrite(HttpServletRequest request){
  boolean overwrite=false;
  if (""String_Node_Str"".equalsIgnoreCase(getParameter(request,PARAM_OVERWRITE))) {
    overwrite=true;
  }
  return overwrite;
}","/** 
 * Check whether report design will overwrite report doc or not.
 * @param request
 * @return
 */
public static boolean isOverwrite(HttpServletRequest request){
  boolean overwrite=isOverWrite;
  String urlParam=getParameter(request,PARAM_OVERWRITE);
  if (""String_Node_Str"".equalsIgnoreCase(urlParam)) {
    overwrite=true;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(urlParam)) {
    overwrite=false;
  }
  return overwrite;
}",0.6885676741130092
77196,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  documentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=getRealPath(context,""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  if (documentFolder == null || documentFolder.trim().length() <= 0)   documentFolder=workingFolder;
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isDocumentFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  birtResourceFolder=context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH);
  clearDocuments();
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  documentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=getRealPath(context,""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  if (documentFolder == null || documentFolder.trim().length() <= 0)   documentFolder=workingFolder;
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isDocumentFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  birtResourceFolder=context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH);
  String s_overwrite=context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT);
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  clearDocuments();
  isInitContext=true;
}",0.907103825136612
77197,"IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      if (this.context != null && (this.context.getDataEngine() instanceof DataGenerationEngine || this.context.getEngine() instanceof DteDataEngine)) {
        if (""String_Node_Str"".equals(driverName) && (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) && propValue != null) {
          Object url=source.getModuleHandle().findResource((String)propValue,IResourceLocator.LIBRARY);
          propValue=url == null ? propValue : url.toString();
        }
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}","IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      if (this.context != null && (this.context.getDataEngine() instanceof DataGenerationEngine || this.context.getDataEngine() instanceof DteDataEngine)) {
        if (""String_Node_Str"".equals(driverName) && (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) && propValue != null) {
          Object url=source.getModuleHandle().findResource((String)propValue,IResourceLocator.LIBRARY);
          propValue=url == null ? propValue : url.toString();
        }
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}",0.9990489776509748
77198,"/** 
 * Convert report parameter from string into object. Need to be pointed out is it return a Double object when the value type is Float.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(locale);
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(locale);
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(locale);
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.toString());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.toString());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(locale);
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.toString());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.toString());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_INTEGER:
{
NumberFormatter nf=new NumberFormatter(locale);
if (format != null) {
nf.applyPattern(format);
}
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
  parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException ex) {
nf.applyPattern(""String_Node_Str"");
try {
  Number num=nf.parse(reportParameterValue);
  if (num != null) {
    parameterValueObj=new Integer(num.intValue());
  }
}
 catch (ParseException pex) {
  try {
    parameterValueObj=new Integer(reportParameterValue);
  }
 catch (  NumberFormatException nfe) {
    parameterValueObj=null;
  }
}
}
}
}
}
return parameterValueObj;
}","/** 
 * Convert report parameter from string into object. Need to be pointed out is it return a Double object when the value type is Float.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(locale);
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(locale);
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(locale);
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.toString());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.toString());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(locale);
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.toString());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new BigDecimal(num.toString());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_INTEGER:
{
NumberFormatter nf=new NumberFormatter(locale);
if (format != null) {
nf.applyPattern(format);
}
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
  parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException ex) {
nf.applyPattern(""String_Node_Str"");
try {
  Number num=nf.parse(reportParameterValue);
  if (num != null) {
    parameterValueObj=new Integer(num.intValue());
  }
}
 catch (ParseException pex) {
  try {
    parameterValueObj=new Integer(reportParameterValue);
  }
 catch (  NumberFormatException nfe) {
    parameterValueObj=null;
  }
}
}
}
}
}
return parameterValueObj;
}",0.9980425055928412
77199,"public void addPages(){
  saveAsPage=new WizardSaveAsPage(""String_Node_Str"");
  saveAsPage.setOriginalFile(orginalFile);
  saveAsPage.setTitle(SaveAsWizardPageTitle);
  saveAsPage.setMessage(SaveAsWizardPageDesc);
  addPage(saveAsPage);
  if (model instanceof ReportDesignHandle) {
    settingPage=new WizardReportSettingPage((ReportDesignHandle)model);
    settingPage.setTitle(ReportSettingPageTitle);
    settingPage.setMessage(Messages.getString(""String_Node_Str""));
    addPage(settingPage);
  }
}","public void addPages(){
  saveAsPage=new WizardSaveAsPage(""String_Node_Str"");
  saveAsPage.setOriginalFile(orginalFile);
  saveAsPage.setTitle(SaveAsWizardPageTitle);
  saveAsPage.setMessage(SaveAsWizardPageDesc);
  addPage(saveAsPage);
  if (model instanceof ReportDesignHandle) {
    settingPage=new WizardReportSettingPage((ReportDesignHandle)model);
    settingPage.setTitle(ReportSettingPageTitle);
    settingPage.setMessage(ReportSettingPageMessage);
    addPage(settingPage);
  }
}",0.9525731584258323
77200,"public void run() throws EngineException {
  setRunningFlag(true);
  Report reportDesign=executionContext.getReport();
  if (!validateParameters()) {
    setRunningFlag(false);
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    ReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
    IReportExecutor lExecutor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      if (renderOptions instanceof HTMLRenderOption) {
        HTMLRenderOption htmlOption=(HTMLRenderOption)renderOptions;
        paginate=htmlOption.getHtmlPagination();
      }
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=LayoutEngineFactory.createLayoutEngine(emitter.getOutputFormat());
      }
    }
    if (layoutEngine != null) {
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutEngine.setPageHandler(handle);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      layoutEngine.layout(lExecutor,outputEmitters,paginate);
    }
    closeRender();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    err.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    new EngineException(""String_Node_Str"",t);
  }
 finally {
    setRunningFlag(false);
  }
}","public void run() throws EngineException {
  setRunningFlag(true);
  if (!validateParameters()) {
    setRunningFlag(false);
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    Report reportDesign=executionContext.getReport();
    ReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
    IReportExecutor lExecutor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      if (renderOptions instanceof HTMLRenderOption) {
        HTMLRenderOption htmlOption=(HTMLRenderOption)renderOptions;
        paginate=htmlOption.getHtmlPagination();
      }
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=LayoutEngineFactory.createLayoutEngine(emitter.getOutputFormat());
      }
    }
    if (layoutEngine != null) {
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutEngine.setPageHandler(handle);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      layoutEngine.layout(lExecutor,outputEmitters,paginate);
    }
    closeRender();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    err.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    new EngineException(""String_Node_Str"",t);
  }
 finally {
    setRunningFlag(false);
  }
}",0.9746290090952608
77201,"/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  setRunningFlag(true);
  ReportRunnable report=executionContext.getRunnable();
  if (!validateParameters()) {
    setRunningFlag(false);
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    writer.saveDesign(report);
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      ReportExecutor executor=new ReportExecutor(executionContext,report.getReportIR(),emitter);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
 finally {
    documentBuilder=null;
    closeReportDocument();
    closeFactory();
    setRunningFlag(false);
  }
}","/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  setRunningFlag(true);
  if (!validateParameters()) {
    setRunningFlag(false);
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable report=executionContext.getRunnable();
    writer.saveDesign(report);
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      ReportExecutor executor=new ReportExecutor(executionContext,report.getReportIR(),emitter);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
 finally {
    documentBuilder=null;
    closeReportDocument();
    closeFactory();
    setRunningFlag(false);
  }
}",0.9643527204502814
77202,"/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public StringGroupCalculator(Object intervalStart,double intervalRange) throws BirtException {
  super(intervalStart,intervalRange);
}","/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public StringGroupCalculator(Object intervalStart,double intervalRange) throws BirtException {
  super(intervalStart,intervalRange);
  interval=(int)(Math.round(intervalRange));
}",0.9056603773584906
77203,"public Object calculate(Object value) throws BirtException {
  if (value == null || value.equals(""String_Node_Str"")) {
    return value;
  }
  return value.toString().substring(0,(int)(Math.round(intervalRange)));
}","public Object calculate(Object value) throws BirtException {
  if (value == null || value.equals(""String_Node_Str"")) {
    return value;
  }
  if (value.toString().length() <= interval)   return value;
  return value.toString().substring(0,interval);
}",0.7837259100642399
77204,"/** 
 * Render the report in html/pdf format by calling engine service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletOutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
      BirtExtractDataActionHandler extractDataHandler=new BirtExtractDataActionHandler(context,op,upResponse);
      extractDataHandler.execute();
    }
 else     if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else     if (ParameterAccessor.isGetReportlet(request)) {
      BirtGetReportletActionHandler getReportletHandler=new BirtGetReportletActionHandler(context,op,upResponse);
      getReportletHandler.execute();
    }
 else     if (context.getBean().documentInUrl) {
      BirtRenderReportActionHandler runReportHandler=new BirtRenderReportActionHandler(context,op,upResponse,out);
      runReportHandler.execute();
    }
 else {
      BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse);
      runAndRenderHandler.execute();
    }
  }
 catch (  RemoteException e) {
    AxisFault fault=(AxisFault)e;
    String message=""String_Node_Str"" + BirtResources.getMessage(""String_Node_Str"") + ""String_Node_Str""+ ParameterAccessor.htmlEncode(fault.getFaultString())+ ""String_Node_Str"";
    out.write(message.getBytes());
  }
}","/** 
 * Render the report in html/pdf format by calling engine service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletOutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
      BirtExtractDataActionHandler extractDataHandler=new BirtExtractDataActionHandler(context,op,upResponse);
      extractDataHandler.execute();
    }
 else     if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else     if (ParameterAccessor.isGetReportlet(request)) {
      BirtGetReportletActionHandler getReportletHandler=new BirtGetReportletActionHandler(context,op,upResponse);
      getReportletHandler.execute();
    }
 else     if (context.getBean().documentInUrl) {
      BirtRenderReportActionHandler runReportHandler=new BirtRenderReportActionHandler(context,op,upResponse,out);
      runReportHandler.execute();
    }
 else {
      BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse);
      runAndRenderHandler.execute();
    }
  }
 catch (  RemoteException e) {
    AxisFault fault=(AxisFault)e;
    response.setContentType(""String_Node_Str"");
    String message=""String_Node_Str"" + BirtResources.getMessage(""String_Node_Str"") + ""String_Node_Str""+ ParameterAccessor.htmlEncode(fault.getFaultString())+ ""String_Node_Str"";
    out.write(message.getBytes());
    out.flush();
    out.close();
  }
}",0.9785115303983228
77205,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffDay(defaultStart,(Date)value) / intervalRange));
  }
 else {
    if (DateTimeUtil.diffDay((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffDay((Date)intervalStart,(Date)value) / intervalRange));
    }
  }
}","public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffDay(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffDay((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffDay((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}",0.9768421052631578
77206,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffHour(defaultStart,(Date)value) / intervalRange));
  }
 else {
    if (DateTimeUtil.diffHour((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffHour((Date)intervalStart,(Date)value) / intervalRange));
    }
  }
}","public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffHour(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffHour((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffHour((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}",0.9769874476987448
77207,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMinute(defaultStart,(Date)value) / intervalRange));
  }
 else {
    if (DateTimeUtil.diffMinute((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMinute((Date)intervalStart,(Date)value) / intervalRange));
    }
  }
}","public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMinute(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffMinute((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMinute((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}",0.9772727272727272
77208,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMonth(defaultStart,(Date)value) / intervalRange));
  }
 else {
    if (DateTimeUtil.diffMonth((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMonth((Date)intervalStart,(Date)value) / intervalRange));
    }
  }
}","public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMonth(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffMonth((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMonth((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}",0.9771309771309772
77209,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffQuarter(defaultStart,(Date)value) / intervalRange));
  }
 else {
    if (DateTimeUtil.diffQuarter((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffQuarter((Date)intervalStart,(Date)value) / intervalRange));
    }
  }
}","public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffQuarter(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffQuarter((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffQuarter((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}",0.9774127310061602
77210,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffSecond(defaultStart,(Date)value) / intervalRange));
  }
 else {
    if (DateTimeUtil.diffSecond((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffSecond((Date)intervalStart,(Date)value) / intervalRange));
    }
  }
}","public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffSecond(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffSecond((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffSecond((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}",0.9772727272727272
77211,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffWeek(defaultStart,(Date)value) / intervalRange));
  }
 else {
    if (DateTimeUtil.diffWeek((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffWeek((Date)intervalStart,(Date)value) / intervalRange));
    }
  }
}","public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffWeek(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffWeek((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffWeek((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}",0.9769874476987448
77212,"public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffYear(defaultStart,(Date)value) / intervalRange));
  }
 else {
    if (DateTimeUtil.diffYear((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffYear((Date)intervalStart,(Date)value) / intervalRange));
    }
  }
}","public Object calculate(Object value){
  if (value == null) {
    return new Double(-1);
  }
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffYear(defaultStart,(Date)value) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffYear((Date)intervalStart,(Date)value) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffYear((Date)intervalStart,(Date)value) / getDateIntervalRange()));
    }
  }
}",0.9769874476987448
77213,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(FeaturesTest.class);
  suite.addTestSuite(MultiPass_FilterTest.class);
  suite.addTestSuite(MultiPass_NestedQueryTest.class);
  suite.addTestSuite(MultiPass_SortTest.class);
  suite.addTestSuite(MultiPassTest.class);
  suite.addTestSuite(ReportDoc_ComputedColumnTest.class);
  suite.addTestSuite(ReportDoc_FilterTest.class);
  suite.addTestSuite(ReportDoc_Gen_PreModeTest.class);
  suite.addTestSuite(ReportDoc_GroupTest.class);
  suite.addTestSuite(ReportDoc_ParameterTest.class);
  suite.addTestSuite(Reg_145508.class);
  suite.addTestSuite(ColumnAliasTest.class);
  suite.addTestSuite(ComputedColumnTest.class);
  suite.addTestSuite(DataSourceTest.class);
  suite.addTestSuite(FilterTest.class);
  suite.addTestSuite(InputParameterTest.class);
  suite.addTestSuite(ParameterInt.class);
  suite.addTestSuite(testPassThruContext.class);
  suite.addTestSuite(DsAggregationTest.class);
  suite.addTestSuite(DsCombinationTest.class);
  suite.addTestSuite(DsComputeColumnTest.class);
  suite.addTestSuite(DsFilterTest.class);
  suite.addTestSuite(DsGroupTest.class);
  suite.addTestSuite(DsParameterTest.class);
  suite.addTestSuite(DsSortTest.class);
  suite.addTestSuite(Reg_101568.class);
  suite.addTestSuite(Reg_101810.class);
  suite.addTestSuite(Reg_101864.class);
  suite.addTestSuite(Reg_104204.class);
  suite.addTestSuite(Reg_104611.class);
  suite.addTestSuite(Reg_107415.class);
  suite.addTestSuite(Reg_108248.class);
  suite.addTestSuite(Reg_110566.class);
  suite.addTestSuite(Reg_113200.class);
  suite.addTestSuite(Reg_114470.class);
  suite.addTestSuite(Reg_117274.class);
  suite.addTestSuite(Reg_122860.class);
  suite.addTestSuite(Reg_123389.class);
  suite.addTestSuite(Reg_123545.class);
  suite.addTestSuite(Reg_76549.class);
  suite.addTestSuite(Reg_79009.class);
  suite.addTestSuite(Reg_79012.class);
  suite.addTestSuite(Reg_79182.class);
  suite.addTestSuite(Reg_93220.class);
  suite.addTestSuite(Reg_101856.class);
  suite.addTestSuite(Reg_102128.class);
  suite.addTestSuite(Reg_103346.class);
  suite.addTestSuite(Reg_103802.class);
  suite.addTestSuite(Reg_114898.class);
  suite.addTestSuite(Reg_115989.class);
  suite.addTestSuite(Reg_116772.class);
  suite.addTestSuite(Reg_117437.class);
  suite.addTestSuite(Reg_117641.class);
  suite.addTestSuite(Reg_122066.class);
  suite.addTestSuite(Reg_122309.class);
  suite.addTestSuite(Reg_79505.class);
  suite.addTestSuite(Regression_141600.class);
  suite.addTestSuite(Regression_137080.class);
  suite.addTestSuite(Regression_103152.class);
  suite.addTestSuite(Regression_145508.class);
  suite.addTestSuite(Regression_123930.class);
  suite.addTestSuite(Regression_124065.class);
  suite.addTestSuite(Regression_131668.class);
  suite.addTestSuite(Regression_132519.class);
  suite.addTestSuite(Regression_136551.class);
  suite.addTestSuite(Regression_138273.class);
  suite.addTestSuite(Regression_138777.class);
  suite.addTestSuite(Regression_139365.class);
  suite.addTestSuite(Regression_142122.class);
  suite.addTestSuite(Regression_142939.class);
  suite.addTestSuite(Regression_137149.class);
  suite.addTestSuite(Regression_112288.class);
  suite.addTestSuite(Regression_136966.class);
  suite.addTestSuite(Regression_136296.class);
  suite.addTestSuite(Regression_135490.class);
  suite.addTestSuite(Regression_136259.class);
  suite.addTestSuite(Regression_132805.class);
  suite.addTestSuite(Regression_124593.class);
  suite.addTestSuite(Regression_128354.class);
  suite.addTestSuite(Regression_117686.class);
  suite.addTestSuite(Regression_123153.class);
  suite.addTestSuite(Regression_96025.class);
  suite.addTestSuite(Regression_121166.class);
  suite.addTestSuite(Regression_143105.class);
  suite.addTestSuite(Regression_143105.class);
  suite.addTestSuite(Regression_143816.class);
  suite.addTestSuite(Regression_144179.class);
  suite.addTestSuite(Regression_124448.class);
  suite.addTestSuite(Regression_134948.class);
  suite.addTestSuite(Regression_119999.class);
  suite.addTestSuite(Regression_120036.class);
  suite.addTestSuite(Regression_123157.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(FeaturesTest.class);
  suite.addTestSuite(MultiPass_FilterTest.class);
  suite.addTestSuite(MultiPass_NestedQueryTest.class);
  suite.addTestSuite(MultiPass_SortTest.class);
  suite.addTestSuite(MultiPassTest.class);
  suite.addTestSuite(Reg_145508.class);
  suite.addTestSuite(ColumnAliasTest.class);
  suite.addTestSuite(DataSourceTest.class);
  suite.addTestSuite(FilterTest.class);
  suite.addTestSuite(InputParameterTest.class);
  suite.addTestSuite(ParameterInt.class);
  suite.addTestSuite(DsGroupTest.class);
  suite.addTestSuite(DsParameterTest.class);
  suite.addTestSuite(DsSortTest.class);
  suite.addTestSuite(Reg_101568.class);
  suite.addTestSuite(Reg_101810.class);
  suite.addTestSuite(Reg_101864.class);
  suite.addTestSuite(Reg_104204.class);
  suite.addTestSuite(Reg_104611.class);
  suite.addTestSuite(Reg_107415.class);
  suite.addTestSuite(Reg_108248.class);
  suite.addTestSuite(Reg_110566.class);
  suite.addTestSuite(Reg_113200.class);
  suite.addTestSuite(Reg_114470.class);
  suite.addTestSuite(Reg_117274.class);
  suite.addTestSuite(Reg_122860.class);
  suite.addTestSuite(Reg_123389.class);
  suite.addTestSuite(Reg_123545.class);
  suite.addTestSuite(Reg_76549.class);
  suite.addTestSuite(Reg_79009.class);
  suite.addTestSuite(Reg_79012.class);
  suite.addTestSuite(Reg_79182.class);
  suite.addTestSuite(Reg_93220.class);
  suite.addTestSuite(Reg_101856.class);
  suite.addTestSuite(Reg_102128.class);
  suite.addTestSuite(Reg_103346.class);
  suite.addTestSuite(Reg_103802.class);
  suite.addTestSuite(Reg_114898.class);
  suite.addTestSuite(Reg_115989.class);
  suite.addTestSuite(Reg_116772.class);
  suite.addTestSuite(Reg_117437.class);
  suite.addTestSuite(Reg_117641.class);
  suite.addTestSuite(Reg_122066.class);
  suite.addTestSuite(Reg_122309.class);
  suite.addTestSuite(Reg_79505.class);
  suite.addTestSuite(Regression_141600.class);
  suite.addTestSuite(Regression_137080.class);
  suite.addTestSuite(Regression_103152.class);
  suite.addTestSuite(Regression_145508.class);
  suite.addTestSuite(Regression_123930.class);
  suite.addTestSuite(Regression_124065.class);
  suite.addTestSuite(Regression_131668.class);
  suite.addTestSuite(Regression_132519.class);
  suite.addTestSuite(Regression_136551.class);
  suite.addTestSuite(Regression_138273.class);
  suite.addTestSuite(Regression_138777.class);
  suite.addTestSuite(Regression_139365.class);
  suite.addTestSuite(Regression_142122.class);
  suite.addTestSuite(Regression_142939.class);
  suite.addTestSuite(Regression_137149.class);
  suite.addTestSuite(Regression_112288.class);
  suite.addTestSuite(Regression_136966.class);
  suite.addTestSuite(Regression_136296.class);
  suite.addTestSuite(Regression_135490.class);
  suite.addTestSuite(Regression_136259.class);
  suite.addTestSuite(Regression_132805.class);
  suite.addTestSuite(Regression_124593.class);
  suite.addTestSuite(Regression_128354.class);
  suite.addTestSuite(Regression_117686.class);
  suite.addTestSuite(Regression_123153.class);
  suite.addTestSuite(Regression_96025.class);
  suite.addTestSuite(Regression_121166.class);
  suite.addTestSuite(Regression_143105.class);
  suite.addTestSuite(Regression_143105.class);
  suite.addTestSuite(Regression_143816.class);
  suite.addTestSuite(Regression_144179.class);
  suite.addTestSuite(Regression_124448.class);
  suite.addTestSuite(Regression_134948.class);
  suite.addTestSuite(Regression_119999.class);
  suite.addTestSuite(Regression_120036.class);
  suite.addTestSuite(Regression_123157.class);
  return suite;
}",0.8947301263238484
77214,"/** 
 * Test feature of aggregation expression 
 */
public void test_RunningAggregationExpression() throws Exception {
  String testSQL=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(testSQL);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",2),new ScriptExpression(""String_Node_Str"",2)};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  GroupDefinition[] groupDef=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDef[0].setKeyExpression(""String_Node_Str"");
  groupDef[1].setKeyExpression(""String_Node_Str"");
  QueryDefinition queryDefn=newReportQuery();
  queryDefn.addGroup(groupDef[0]);
  queryDefn.addGroup(groupDef[1]);
  queryDefn.addResultSetExpression(names[0],expressions[0]);
  queryDefn.addResultSetExpression(names[1],expressions[1]);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(jsScope);
  IResultIterator resultIt=queryResults.getResultIterator();
  assertTrue(resultIt.next());
  resultIt.getValue(names[0]);
  resultIt.getValue(names[1]);
}","/** 
 * Test feature of aggregation expression
 */
public void test_RunningAggregationExpression() throws Exception {
  String testSQL=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(testSQL);
  IBaseExpression[] bindingExprGroup=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",2)};
  String names[]={""String_Node_Str"",""String_Node_Str""};
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameRow=new String[3];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[3];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  createAndRunQuery(names,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  checkOutputFile();
}",0.5470155355682748
77215,"/** 
 * Return an instance of JointResultMeta.
 * @param left
 * @param right
 * @return
 * @throws DataException
 */
private JointResultMetadata getJointResultMetadata(IResultMetaData left,IResultMetaData right) throws DataException {
  if (left == null || right == null) {
    throw new DataException(ResourceConstants.UNEXPECTED_ERROR);
  }
  try {
    String leftPrefix=dataSet.getLeftDataSetDesignName();
    String rightPrefix=dataSet.getRightDataSetDesignName();
    if (leftPrefix.equals(rightPrefix)) {
      leftPrefix=leftPrefix + ""String_Node_Str"";
      rightPrefix=rightPrefix + ""String_Node_Str"";
    }
    leftPrefix=leftPrefix + COLUMN_NAME_SPLITTER;
    rightPrefix=rightPrefix + COLUMN_NAME_SPLITTER;
    JointResultMetadata meta=populatorJointResultMetadata(left,leftPrefix,right,rightPrefix);
    return meta;
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}","/** 
 * Return an instance of JointResultMeta.
 * @param left
 * @param right
 * @return
 * @throws DataException
 */
private JointResultMetadata getJointResultMetadata(IResultMetaData left,IResultMetaData right) throws DataException {
  if (left == null || right == null) {
    throw new DataException(ResourceConstants.UNEXPECTED_ERROR);
  }
  try {
    String leftPrefix=getDataSetName(dataSet.getLeftDataSetDesignName());
    String rightPrefix=getDataSetName(dataSet.getRightDataSetDesignName());
    if (leftPrefix.equals(rightPrefix)) {
      leftPrefix=leftPrefix + ""String_Node_Str"";
      rightPrefix=rightPrefix + ""String_Node_Str"";
    }
    leftPrefix=leftPrefix + COLUMN_NAME_SPLITTER;
    rightPrefix=rightPrefix + COLUMN_NAME_SPLITTER;
    JointResultMetadata meta=populatorJointResultMetadata(left,leftPrefix,right,rightPrefix);
    return meta;
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}",0.982608695652174
77216,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9903496282233824
77217,"/** 
 * @throws DataException
 */
private void initSaveRowUtil() throws DataException {
  rowExprsOs=streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  rowLenOs=streamManager.getOutStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  this.rowSaveUtil=new RowSaveUtil(rowCount,rowExprsOs,rowLenOs);
}","/** 
 * @throws DataException
 */
private void initSaveRowUtil() throws DataException {
  rowExprsOs=streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  rowLenOs=streamManager.getOutStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  this.rowSaveUtil=new RowSaveUtil(rowCount,rowExprsOs,rowLenOs,this.getExprNameSet());
}",0.9739952718676124
77218,"/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    int totalRowCount=0;
    if (finish == true)     totalRowCount=rowCount;
 else     totalRowCount=rowCount == 0 ? 1 : rowCount;
    IOUtil.writeInt(this.rowExprsDos,totalRowCount);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    int totalRowCount=0;
    if (finish == true)     totalRowCount=rowCount;
 else     totalRowCount=rowCount == 0 ? 1 : rowCount;
    IOUtil.writeInt(this.rowExprsDos,totalRowCount);
    Map map=new HashMap();
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object value=it.next();
      map.put(value,value);
    }
    int rowBytes=this.saveExprValue(map);
    IOUtil.writeInt(this.rowExprsDos,rowBytes);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.7777777777777778
77219,"/** 
 * @param rowCount
 * @param rowExprsOs
 * @param rowLenOs
 */
RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs){
  this.rowCount=rowCount;
  this.exprNameSet=new HashSet();
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
  this.lastRowIndex=-1;
}","/** 
 * @param rowCount
 * @param rowExprsOs
 * @param rowLenOs
 */
RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet){
  this.rowCount=rowCount;
  this.exprNameSet=new HashSet();
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
  this.lastRowIndex=-1;
  this.exprNameSet=exprNameSet;
}",0.9318181818181818
77220,"/** 
 * @param currIndex
 * @param exprID
 * @param exprValue
 * @throws DataException
 */
private int saveExprValue(Map valueMap) throws DataException {
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  try {
    IOUtil.writeInt(tempDos,valueMap.size());
    Iterator it=valueMap.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Entry)it.next();
      String exprID=(String)entry.getKey();
      Object value=entry.getValue();
      IOUtil.writeString(tempDos,exprID);
      IOUtil.writeObject(tempDos,value);
      exprNameSet.add(exprID);
    }
    tempDos.flush();
    tempBos.flush();
    tempBaos.flush();
    byte[] bytes=tempBaos.toByteArray();
    int rowBytes=bytes.length;
    IOUtil.writeRawBytes(this.rowExprsDos,bytes);
    tempBaos=null;
    tempBos=null;
    tempDos=null;
    return rowBytes;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","/** 
 * @param currIndex
 * @param exprID
 * @param exprValue
 * @throws DataException
 */
private int saveExprValue(Map valueMap) throws DataException {
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  try {
    IOUtil.writeInt(tempDos,valueMap.size());
    Iterator it=valueMap.keySet().iterator();
    while (it.hasNext()) {
      Object key=it.next();
      Object value=valueMap.get(key);
      IOUtil.writeObject(tempDos,value);
    }
    tempDos.flush();
    tempBos.flush();
    tempBaos.flush();
    byte[] bytes=tempBaos.toByteArray();
    int rowBytes=bytes.length;
    IOUtil.writeRawBytes(this.rowExprsDos,bytes);
    tempBaos=null;
    tempBos=null;
    tempDos=null;
    return rowBytes;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.8654970760233918
77221,"/** 
 * @param rowExprsRAIs
 * @param rowLenRAIs
 * @param version
 */
ExprDataReader1(RAInputStream rowExprsRAIs,RAInputStream rowLenRAIs,int version) throws DataException {
  try {
    rowCount=IOUtil.readInt(rowExprsRAIs);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsDis=new DataInputStream(rowExprsRAIs);
  this.rowExprsRAIs=rowExprsRAIs;
  this.rowLenRAIs=rowLenRAIs;
  this.version=version;
  this.currReadIndex=0;
  this.currRowIndex=-1;
  this.INT_LENGTH=IOUtil.INT_LENGTH;
}","/** 
 * @param rowExprsRAIs
 * @param rowLenRAIs
 * @param version
 */
ExprDataReader1(RAInputStream rowExprsRAIs,RAInputStream rowLenRAIs,int version) throws DataException {
  this.INT_LENGTH=IOUtil.INT_LENGTH;
  try {
    this.rowCount=IOUtil.readInt(rowExprsRAIs);
    int exprCount=IOUtil.readInt(rowExprsRAIs);
    this.exprKeys=new ArrayList();
    this.rowExprsDis=new DataInputStream(rowExprsRAIs);
    for (int i=0; i < exprCount; i++) {
      this.exprKeys.add(IOUtil.readString(this.rowExprsDis));
    }
    this.metaOffset=INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsRAIs=rowExprsRAIs;
  this.rowLenRAIs=rowLenRAIs;
  this.version=version;
  this.currReadIndex=0;
  this.currRowIndex=-1;
}",0.3
77222,"/** 
 * @param absoluteRowIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteRowIndex) throws IOException, DataException {
  if (currReadIndex == absoluteRowIndex)   return;
  if (version == VersionManager.VERSION_2_0) {
    int exprCount;
    int gapRows=absoluteRowIndex - currReadIndex;
    for (int j=0; j < gapRows; j++) {
      exprCount=IOUtil.readInt(rowExprsDis);
      for (int i=0; i < exprCount; i++) {
        IOUtil.readString(rowExprsDis);
        IOUtil.readObject(rowExprsDis);
      }
    }
  }
 else {
    rowLenRAIs.seek(absoluteRowIndex * INT_LENGTH);
    int rowOffsetAbsolute=IOUtil.readInt(rowLenRAIs);
    rowExprsRAIs.seek(rowOffsetAbsolute + 4);
    rowExprsDis=new DataInputStream(rowExprsRAIs);
  }
}","/** 
 * @param absoluteRowIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteRowIndex) throws IOException, DataException {
  if (currReadIndex == absoluteRowIndex)   return;
  if (version == VersionManager.VERSION_2_0) {
    int exprCount;
    int gapRows=absoluteRowIndex - currReadIndex;
    for (int j=0; j < gapRows; j++) {
      exprCount=IOUtil.readInt(rowExprsDis);
      for (int i=0; i < exprCount; i++) {
        IOUtil.readObject(rowExprsDis);
      }
    }
  }
 else {
    rowLenRAIs.seek(absoluteRowIndex * INT_LENGTH);
    int rowOffsetAbsolute=IOUtil.readInt(rowLenRAIs);
    rowExprsRAIs.seek(rowOffsetAbsolute + this.metaOffset);
    rowExprsDis=new DataInputStream(rowExprsRAIs);
  }
}",0.9629139072847682
77223,"/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=IOUtil.readString(rowExprsDis);
    Object exprValue=IOUtil.readObject(rowExprsDis);
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}","/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}",0.9367088607594936
77224,"/** 
 * @param absoluteIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteIndex) throws IOException, DataException {
  if (currRowLenReadIndex == absoluteIndex)   return;
  currRowLenReadIndex=absoluteIndex + 1;
  rowLenIs.seek(absoluteIndex * 4);
  rowExprsIs.seek(IOUtil.readInt(rowLenIs) + 4);
  rowExprsDis=new DataInputStream(rowExprsIs);
}","/** 
 * @param absoluteIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteIndex) throws IOException, DataException {
  if (currRowLenReadIndex == absoluteIndex)   return;
  currRowLenReadIndex=absoluteIndex + 1;
  rowLenIs.seek(absoluteIndex * 4);
  rowExprsIs.seek(IOUtil.readInt(rowLenIs) + this.metaOffset);
  rowExprsDis=new DataInputStream(rowExprsIs);
}",0.979539641943734
77225,"/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=IOUtil.readString(rowExprsDis);
    Object exprValue=IOUtil.readObject(rowExprsDis);
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}","/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}",0.9367088607594936
77226,"public static String relativize(URL url){
  if (url.getProtocol().equals(""String_Node_Str"")) {
    try {
      return new File(ReportPlugin.getDefault().getResourceFolder()).toURI().relativize(new URI(url.toString())).getPath();
    }
 catch (    URISyntaxException e) {
    }
  }
  return url.getPath();
}","public static String relativize(URL url){
  if (url.getProtocol().equals(""String_Node_Str"")) {
    return URIUtil.getRelativePath(ReportPlugin.getDefault().getResourceFolder(),url.getPath());
  }
  return url.getPath();
}",0.4781783681214421
77227,"/** 
 * @return
 * @throws DataException save error
 */
Map getColumnsValue() throws DataException {
  Map exprValueMap=new HashMap();
  Map realValueMap=new HashMap();
  for (int i=0; i < allManualBindingExprs.size(); i++) {
    List list=(List)allManualBindingExprs.get(i);
    Iterator it=list.iterator();
    while (it.hasNext()) {
      BindingColumn bindingColumn=(BindingColumn)it.next();
      Object exprValue=evaluateValue(bindingColumn,MANUAL_BINDING);
      exprValueMap.put(bindingColumn.columnName,exprValue);
      if (exprValue instanceof BirtException == false)       realValueMap.put(bindingColumn.columnName,exprValue);
    }
  }
  Iterator itr=this.allAutoBindingExprs.iterator();
  while (itr.hasNext()) {
    BindingColumn bindingColumn=(BindingColumn)itr.next();
    Object exprValue=evaluateValue(bindingColumn,AUTO_BINDING);
    exprValueMap.put(bindingColumn.columnName,exprValue);
    if (exprValue instanceof BirtException == false)     realValueMap.put(bindingColumn.columnName,exprValue);
  }
  saveHelper.doSaveExpr(realValueMap);
  return exprValueMap;
}","/** 
 * @return
 * @throws DataException save error
 */
Map getColumnsValue() throws DataException {
  Map exprValueMap=new HashMap();
  for (int i=0; i < allManualBindingExprs.size(); i++) {
    List list=(List)allManualBindingExprs.get(i);
    Iterator it=list.iterator();
    while (it.hasNext()) {
      BindingColumn bindingColumn=(BindingColumn)it.next();
      Object exprValue=evaluateValue(bindingColumn,MANUAL_BINDING);
      exprValueMap.put(bindingColumn.columnName,exprValue);
    }
  }
  Iterator itr=this.allAutoBindingExprs.iterator();
  while (itr.hasNext()) {
    BindingColumn bindingColumn=(BindingColumn)itr.next();
    Object exprValue=evaluateValue(bindingColumn,AUTO_BINDING);
    exprValueMap.put(bindingColumn.columnName,exprValue);
  }
  saveHelper.doSaveExpr(exprValueMap);
  return exprValueMap;
}",0.799163179916318
77228,"/** 
 * @param rowCount
 * @param rowExprsOs
 * @param rowLenOs
 */
RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet){
  this.rowCount=rowCount;
  this.exprNameSet=new HashSet();
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
  this.lastRowIndex=-1;
  this.exprNameSet=exprNameSet;
}","/** 
 * @param rowCount
 * @param rowExprsOs
 * @param rowLenOs
 */
RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet){
  this.rowCount=rowCount;
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
  this.lastRowIndex=-1;
  this.exprNameSet=exprNameSet;
}",0.9526462395543176
77229,"/** 
 * @param currIndex
 * @param exprID
 * @param exprValue
 * @throws DataException
 */
private int saveExprValue(Map valueMap) throws DataException {
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  try {
    IOUtil.writeInt(tempDos,valueMap.size());
    Iterator it=valueMap.keySet().iterator();
    while (it.hasNext()) {
      Object key=it.next();
      Object value=valueMap.get(key);
      IOUtil.writeObject(tempDos,value);
    }
    tempDos.flush();
    tempBos.flush();
    tempBaos.flush();
    byte[] bytes=tempBaos.toByteArray();
    int rowBytes=bytes.length;
    IOUtil.writeRawBytes(this.rowExprsDos,bytes);
    tempBaos=null;
    tempBos=null;
    tempDos=null;
    return rowBytes;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","/** 
 * @param currIndex
 * @param exprID
 * @param exprValue
 * @throws DataException
 */
private int saveExprValue(Map valueMap) throws DataException {
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  try {
    IOUtil.writeInt(tempDos,valueMap.size());
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object key=it.next();
      Object value=valueMap.get(key);
      if (value instanceof DataException)       value=EXCEPTION_INDICATOR;
      IOUtil.writeObject(tempDos,value);
    }
    tempDos.flush();
    tempBos.flush();
    tempBaos.flush();
    byte[] bytes=tempBaos.toByteArray();
    int rowBytes=bytes.length;
    IOUtil.writeRawBytes(this.rowExprsDos,bytes);
    tempBaos=null;
    tempBos=null;
    tempDos=null;
    return rowBytes;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.9512807634354596
77230,"/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}","/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue))     continue;
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}",0.9070063694267516
77231,"/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}","/** 
 * @throws IOException
 */
private Map getValueMap() throws IOException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue))     continue;
    valueMap.put(exprID,exprValue);
  }
  return valueMap;
}",0.9070063694267516
77232,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) && !ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=null;
          URL url=null;
          try {
            String reportPath=this.reportDesignName;
            if (!reportPath.startsWith(""String_Node_Str""))             reportPath=""String_Node_Str"" + reportPath;
            url=request.getSession().getServletContext().getResource(reportPath);
            is=url.openStream();
          }
 catch (          Exception e) {
          }
          reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,this.getModuleOptions(request));
        }
 else {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) && !ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=null;
          URL url=null;
          try {
            String reportPath=this.reportDesignName;
            if (!reportPath.startsWith(""String_Node_Str""))             reportPath=""String_Node_Str"" + reportPath;
            url=request.getSession().getServletContext().getResource(reportPath);
            if (url != null)             is=url.openStream();
            if (is != null)             reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,this.getModuleOptions(request));
          }
 catch (          Exception e) {
          }
        }
        if (reportRunnable == null) {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9465127621524956
77233,"/** 
 */
public void test_122600(){
  MetaDataDictionary instance=MetaDataDictionary.getInstance();
  IChoiceSet choiceset=instance.getChoiceSet(""String_Node_Str"");
  IChoice[] naturedSortedChoices=choiceset.getChoices(null);
  assertEquals(""String_Node_Str"",naturedSortedChoices[17].getName());
  assertEquals(""String_Node_Str"",naturedSortedChoices[1].getName());
  assertEquals(""String_Node_Str"",naturedSortedChoices[10].getName());
  assertEquals(""String_Node_Str"",naturedSortedChoices[12].getName());
}","/** 
 */
public void test_122600(){
  MetaDataDictionary instance=MetaDataDictionary.getInstance();
  IChoiceSet choiceset=instance.getChoiceSet(""String_Node_Str"");
  IChoice[] naturedSortedChoices=choiceset.getChoices(null);
  boolean topN=false;
  boolean bottomN=false;
  boolean like=false;
  boolean match=false;
  for (int i=0; i < naturedSortedChoices.length; i++) {
    IChoice choice=(IChoice)naturedSortedChoices[i];
    if (""String_Node_Str"".equals(choice.getName()))     topN=true;
 else     if (""String_Node_Str"".equals(choice.getName()))     bottomN=true;
 else     if (""String_Node_Str"".equals(choice.getName()))     like=true;
 else     if (""String_Node_Str"".equals(choice.getName()))     match=true;
  }
  assertTrue(topN);
  assertTrue(bottomN);
  assertTrue(like);
  assertTrue(match);
}",0.3856707317073171
77234,"/** 
 * Reset for test case
 */
synchronized void resetForTest(){
  cacheMap=new HashMap();
  folderUtil=new FolderUtil();
}","/** 
 * Reset for test case
 */
void resetForTest(){
synchronized (this) {
    cacheMap=new HashMap();
    folderUtil=new FolderUtil();
  }
}",0.8377358490566038
77235,"/** 
 * @param dsAndDs
 * @return
 */
synchronized boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs){
  String cacheDirStr=(String)this.cacheMap.get(dsAndDs);
  if (cacheDirStr != null && new File(cacheDirStr).exists() == true)   return true;
 else   return false;
}","/** 
 * @param dsAndDs
 * @return
 */
boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs){
  String cacheDirStr=null;
synchronized (this.cacheMap) {
    cacheDirStr=(String)this.cacheMap.get(dsAndDs);
  }
  if (cacheDirStr != null && new File(cacheDirStr).exists() == true)   return true;
 else   return false;
}",0.8809523809523809
77236,"/** 
 * @param dataSourceDesign2
 * @param dataSetDesign2
 */
synchronized void clearCache(DataSourceAndDataSet dsAndDs){
  Object cacheDir=cacheMap.get(dsAndDs);
  if (cacheDir != null) {
    cacheMap.remove(dsAndDs);
    folderUtil.deleteDir((String)cacheDir);
  }
}","/** 
 * @param dataSourceDesign2
 * @param dataSetDesign2
 */
void clearCache(DataSourceAndDataSet dsAndDs){
  Object cacheDir=null;
synchronized (this.cacheMap) {
    cacheDir=cacheMap.remove(dsAndDs);
  }
  if (cacheDir != null) {
    folderUtil.deleteDir((String)cacheDir);
  }
}",0.6763636363636364
77237,"/** 
 * @return
 */
synchronized boolean doesSaveToCache(DataSourceAndDataSet dsAndDs){
  String cacheDirStr=(String)this.cacheMap.get(dsAndDs);
  if (cacheDirStr != null && new File(cacheDirStr).exists() == true) {
    return false;
  }
 else {
    this.cacheMap.put(dsAndDs,folderUtil.createSessionTempDir());
    return true;
  }
}","/** 
 * @return
 */
boolean doesSaveToCache(DataSourceAndDataSet dsAndDs){
  String cacheDirStr=null;
synchronized (this.cacheMap) {
    cacheDirStr=(String)this.cacheMap.get(dsAndDs);
  }
  if (cacheDirStr != null && new File(cacheDirStr).exists() == true) {
    return false;
  }
 else {
synchronized (this.cacheMap) {
      cacheDirStr=(String)this.cacheMap.get(dsAndDs);
      if (cacheDirStr != null && new File(cacheDirStr).exists() == true) {
        return false;
      }
 else {
        this.cacheMap.put(dsAndDs,folderUtil.createSessionTempDir());
        return true;
      }
    }
  }
}",0.4484978540772532
77238,"/** 
 * Returns the matched ODA data set parameter by the given ROM data set parameter and data set design.
 * @param param the ROM data set parameter
 * @param dataSetDesign the oda data set design
 * @return the matched ODA parameter defintion
 */
private static ParameterDefinition getValidParameterDefinition(OdaDataSetParameterHandle param,DataSetParameters odaParams){
  if (param == null || odaParams == null)   return null;
  if (odaParams.getParameterDefinitions().isEmpty())   return null;
  ParameterDefinition matchedParam=DataSetParameterAdapter.findParameterDefinition(odaParams,param.getName(),param.getPosition());
  return matchedParam;
}","/** 
 * Returns the matched ODA data set parameter by the given ROM data set parameter and data set design.
 * @param param the ROM data set parameter
 * @param dataSetDesign the oda data set design
 * @return the matched ODA parameter defintion
 */
private static ParameterDefinition getValidParameterDefinition(OdaDataSetParameterHandle param,DataSetParameters odaParams){
  if (param == null || odaParams == null)   return null;
  if (odaParams.getParameterDefinitions().isEmpty())   return null;
  ParameterDefinition matchedParam=DataSetParameterAdapter.findParameterDefinition(odaParams,param.getNativeName(),param.getPosition());
  return matchedParam;
}",0.9954407294832828
77239,"/** 
 * Checks whether the given report parameter is updated. This method checks values of report parameters and values in data set design. <p> If any input argument is null or the matched ODA parameter definition cannot be found, return <code>true</code>.
 * @param reportParam the report parameter
 * @param param the ROM data set parameter
 * @param dataSetDesign the data set design
 * @return <code>true</code> if the report paramter is updated or has noparameter definition in the data set design. Otherwise <code>false</code>.
 */
boolean isUpdatedReportParameter(ScalarParameterHandle reportParam,ParameterDefinition odaParam,String newDataType){
  if (reportParam == null || odaParam == null)   return true;
  DataElementAttributes dataAttrs=odaParam.getAttributes();
  boolean allowNull=reportParam.allowNull();
  Boolean odaAllowNull=getROMNullability(dataAttrs.getNullability());
  if (odaAllowNull != null && allowNull != odaAllowNull.booleanValue())   return false;
  if (!DesignChoiceConstants.PARAM_TYPE_ANY.equalsIgnoreCase(newDataType)) {
    if (!isEquals(newDataType,reportParam.getDataType()))     return false;
  }
  DataElementUIHints dataUiHints=dataAttrs.getUiHints();
  if (dataUiHints != null) {
    String newPromptText=dataUiHints.getDisplayName();
    String newHelpText=dataUiHints.getDescription();
    if (!isEquals(newPromptText,reportParam.getPromptText()))     return false;
    if (!isEquals(newHelpText,reportParam.getHelpText()))     return false;
  }
  InputParameterAttributes paramAttrs=odaParam.getInputAttributes();
  InputParameterAttributes tmpParamDefn=(InputParameterAttributes)EcoreUtil.copy(paramAttrs);
  DynamicValuesQuery tmpDynamicQuery=tmpParamDefn.getElementAttributes().getDynamicValueChoices();
  String tmpDataSetName=null;
  if (tmpDynamicQuery != null) {
    tmpDataSetName=tmpDynamicQuery.getDataSetDesign().getName();
    tmpDynamicQuery.setDataSetDesign(null);
  }
  if (tmpParamDefn.getUiHints() != null) {
    tmpParamDefn.setUiHints(null);
  }
  InputParameterAttributes tmpParamDefn1=DesignFactory.eINSTANCE.createInputParameterAttributes();
  updateInputElementAttrs(tmpParamDefn1,reportParam,null);
  if (tmpParamDefn1.getUiHints() != null) {
    tmpParamDefn1.setUiHints(null);
  }
  DynamicValuesQuery tmpDynamicQuery1=tmpParamDefn1.getElementAttributes().getDynamicValueChoices();
  String tmpDataSetName1=null;
  if (tmpDynamicQuery1 != null) {
    tmpDataSetName1=tmpDynamicQuery1.getDataSetDesign().getName();
    tmpDynamicQuery1.setDataSetDesign(null);
  }
  if (!isEquals(tmpDataSetName,tmpDataSetName1))   return false;
  return EcoreUtil.equals(tmpParamDefn,tmpParamDefn1);
}","/** 
 * Checks whether the given report parameter is updated. This method checks values of report parameters and values in data set design. <p> If any input argument is null or the matched ODA parameter definition cannot be found, return <code>true</code>.
 * @param reportParam the report parameter
 * @param param the ROM data set parameter
 * @param dataSetDesign the data set design
 * @return <code>true</code> if the report paramter is updated or has noparameter definition in the data set design. Otherwise <code>false</code>.
 */
boolean isUpdatedReportParameter(ScalarParameterHandle reportParam,ParameterDefinition odaParam,String newDataType){
  if (reportParam == null || odaParam == null)   return true;
  DataElementAttributes dataAttrs=odaParam.getAttributes();
  boolean allowNull=reportParam.allowNull();
  Boolean odaAllowNull=getROMNullability(dataAttrs.getNullability());
  if (odaAllowNull != null && allowNull != odaAllowNull.booleanValue())   return false;
  if (!DesignChoiceConstants.PARAM_TYPE_ANY.equalsIgnoreCase(newDataType)) {
    if (!isEquals(newDataType,reportParam.getDataType()))     return false;
  }
  DataElementUIHints dataUiHints=dataAttrs.getUiHints();
  if (dataUiHints != null) {
    String newPromptText=dataUiHints.getDisplayName();
    String newHelpText=dataUiHints.getDescription();
    if (!isEquals(newPromptText,reportParam.getPromptText()))     return false;
    if (!isEquals(newHelpText,reportParam.getHelpText()))     return false;
  }
  InputParameterAttributes paramAttrs=odaParam.getInputAttributes();
  InputParameterAttributes tmpParamDefn=null;
  String tmpDataSetName=null;
  if (paramAttrs != null) {
    tmpParamDefn=(InputParameterAttributes)EcoreUtil.copy(paramAttrs);
    DynamicValuesQuery tmpDynamicQuery=tmpParamDefn.getElementAttributes().getDynamicValueChoices();
    if (tmpDynamicQuery != null) {
      tmpDataSetName=tmpDynamicQuery.getDataSetDesign().getName();
      tmpDynamicQuery.setDataSetDesign(null);
    }
    if (tmpParamDefn.getUiHints() != null) {
      tmpParamDefn.setUiHints(null);
    }
  }
 else   tmpParamDefn=DesignFactory.eINSTANCE.createInputParameterAttributes();
  InputParameterAttributes tmpParamDefn1=DesignFactory.eINSTANCE.createInputParameterAttributes();
  updateInputElementAttrs(tmpParamDefn1,reportParam,null);
  if (tmpParamDefn1.getUiHints() != null) {
    tmpParamDefn1.setUiHints(null);
  }
  DynamicValuesQuery tmpDynamicQuery1=tmpParamDefn1.getElementAttributes().getDynamicValueChoices();
  String tmpDataSetName1=null;
  if (tmpDynamicQuery1 != null) {
    tmpDataSetName1=tmpDynamicQuery1.getDataSetDesign().getName();
    tmpDynamicQuery1.setDataSetDesign(null);
  }
  if (!isEquals(tmpDataSetName,tmpDataSetName1))   return false;
  return EcoreUtil.equals(tmpParamDefn,tmpParamDefn1);
}",0.9483705602343464
77240,"/** 
 * @throws DataException
 */
void saveQueryDefn() throws DataException {
  OutputStream outputStream;
  if (queryDefn instanceof QueryDefinition && ((QueryDefinition)queryDefn).getQueryResultsID() == null) {
    outputStream=streamManager.getOutStream(DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  }
  outputStream=streamManager.getOutStream(DataEngineContext.QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  try {
    outputStream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @throws DataException
 */
void saveQueryDefn() throws DataException {
  OutputStream outputStream;
  if (queryDefn instanceof QueryDefinition && ((QueryDefinition)queryDefn).getQueryResultsID() == null) {
    outputStream=streamManager.getOutStream(DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
    try {
      outputStream.close();
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
    }
  }
  outputStream=streamManager.getOutStream(DataEngineContext.QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  try {
    outputStream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9112063686466626
77241,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          String paramValue=configVar.getValue();
          if (paramName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName(paramValue);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam);
            if (paramName != null) {
              if (this.displayTexts == null)               this.displayTexts=new HashMap();
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName);
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=null;
            if (typeVar != null)             dataType=typeVar.getValue();
            if (dataType == null || !dataType.equalsIgnoreCase(parameter.getDataType())) {
              continue;
            }
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType())) {
                Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          String paramValue=configVar.getValue();
          if (paramName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName(paramValue);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam);
            if (paramName != null) {
              if (this.displayTexts == null)               this.displayTexts=new HashMap();
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName);
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=parameter.getDataType();
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType)) {
              continue;
            }
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType) && !DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
                String pattern=parameter.getPattern();
                Object paramValueObj=ParameterValidationUtil.validate(dataType,pattern,paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(dataType,pattern,paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}",0.9130361648444072
77242,"/** 
 * Parse report object and get the parameter default values
 * @param design IViewerReportDesignHandle
 * @param paramName String
 * @param options InputOptionsF
 * @return String
 */
protected String getParameterDefaultValues(IViewerReportDesignHandle design,String paramName,InputOptions options) throws ReportServiceException {
  if (design == null)   return null;
  String defalutValue=null;
  Object defaultValueObj=null;
  try {
    defaultValueObj=this.getReportService().getParameterDefaultValue(design,paramName,options);
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
  ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
  if (defaultValueObj != null && parameter != null) {
    defalutValue=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),defaultValueObj,locale);
  }
  if (defalutValue == null && parameter != null) {
    defalutValue=parameter.getDefaultValue();
  }
  return defalutValue;
}","/** 
 * Parse report object and get the parameter default values
 * @param design IViewerReportDesignHandle
 * @param paramName String
 * @param options InputOptionsF
 * @return String
 */
protected String getParameterDefaultValues(IViewerReportDesignHandle design,String paramName,InputOptions options) throws ReportServiceException {
  if (design == null)   return null;
  String defalutValue=null;
  Object defaultValueObj=null;
  try {
    defaultValueObj=this.getReportService().getParameterDefaultValue(design,paramName,options);
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
  ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
  if (defaultValueObj != null && parameter != null) {
    String dataType=parameter.getDataType();
    String pattern=parameter.getPattern();
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
      defalutValue=ParameterValidationUtil.getDisplayValue(defaultValueObj);
    }
 else {
      if (DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType)) {
        pattern=null;
      }
      defalutValue=ParameterValidationUtil.getDisplayValue(null,pattern,defaultValueObj,locale);
    }
  }
  if (defalutValue == null && parameter != null) {
    defalutValue=parameter.getDefaultValue();
  }
  return defalutValue;
}",0.8161512027491409
77243,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) && !ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=null;
          URL url=null;
          try {
            String reportPath=this.reportDesignName;
            if (!reportPath.startsWith(""String_Node_Str""))             reportPath=""String_Node_Str"" + reportPath;
            url=request.getSession().getServletContext().getResource(reportPath);
            if (url != null)             is=url.openStream();
            if (is != null)             reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,this.getModuleOptions(request));
          }
 catch (          Exception e) {
          }
        }
        if (reportRunnable == null) {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      if (!reportDocumentInstance.isComplete() && ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT))       this.isDocumentProcessing=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) && !ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=null;
          URL url=null;
          try {
            String reportPath=this.reportDesignName;
            if (!reportPath.startsWith(""String_Node_Str""))             reportPath=""String_Node_Str"" + reportPath;
            url=request.getSession().getServletContext().getResource(reportPath);
            if (url != null)             is=url.openStream();
            if (is != null)             reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,this.getModuleOptions(request));
          }
 catch (          Exception e) {
          }
        }
        if (reportRunnable == null) {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9734789391575664
77244,"/** 
 * @throws DataException
 */
void doSaveFinish() throws DataException {
  if (needsSaveToDoc() == false)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    this.getRdSave().saveResultIterator(new DummyCachedResult(),-1,null);
  }
  this.getRdSave().saveFinish(0);
}","/** 
 * @throws DataException
 */
void doSaveFinish() throws DataException {
  if (needsSaveToDoc() == false)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    this.getRdSave().saveResultIterator(new DummyCachedResult(),-1,new int[]{0,1});
  }
  this.getRdSave().saveFinish(0);
}",0.9554794520547946
77245,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    addResultSetColumn(dataSetHandle,metaData);
  }
  if (needsUseResultHint(dataSetHandle,metaData)) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    if (dataSetHandle.canEdit())     addResultSetColumn(dataSetHandle,metaData);
  }
  if (needsUseResultHint(dataSetHandle,metaData)) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}",0.9814293753517164
77246,"/** 
 * Creates a ODA InputParameterAttributes with the given ROM report parameter.
 * @param paramDefn the ROM report parameter.
 * @param dataSetDesign
 * @return the created <code>InputParameterAttributes</code>.
 */
private InputParameterAttributes updateInputElementAttrs(InputParameterAttributes inputParamAttrs,ScalarParameterHandle paramDefn,DataSetDesign dataSetDesign){
  if (inputParamAttrs == null)   inputParamAttrs=DesignFactory.eINSTANCE.createInputParameterAttributes();
  InputElementAttributes inputAttrs=inputParamAttrs.getElementAttributes();
  if (inputAttrs == null)   inputAttrs=DesignFactory.eINSTANCE.createInputElementAttributes();
  inputAttrs.setDefaultScalarValue(paramDefn.getDefaultValue());
  inputAttrs.setOptional(paramDefn.allowBlank());
  inputAttrs.setMasksValue(paramDefn.isConcealValue());
  ScalarValueChoices staticChoices=null;
  Iterator selectionList=paramDefn.choiceIterator();
  while (selectionList.hasNext()) {
    if (staticChoices == null)     staticChoices=DesignFactory.eINSTANCE.createScalarValueChoices();
    SelectionChoiceHandle choice=(SelectionChoiceHandle)selectionList.next();
    ScalarValueDefinition valueDefn=DesignFactory.eINSTANCE.createScalarValueDefinition();
    valueDefn.setValue(choice.getValue());
    valueDefn.setDisplayName(choice.getLabel());
    staticChoices.getScalarValues().add(valueDefn);
  }
  inputAttrs.setStaticValueChoices(staticChoices);
  DataSetHandle setHandle=paramDefn.getDataSet();
  String valueExpr=paramDefn.getValueExpr();
  String labelExpr=paramDefn.getLabelExpr();
  if (setHandle instanceof OdaDataSetHandle && (valueExpr != null || labelExpr != null)) {
    DynamicValuesQuery valueQuery=DesignFactory.eINSTANCE.createDynamicValuesQuery();
    DataSetDesign targetDataSetDesign=dataSetDesign;
    if (!setHandle.getName().equals(dataSetDesign.getName()))     targetDataSetDesign=new ModelOdaAdapter().createDataSetDesign((OdaDataSetHandle)setHandle);
    valueQuery.setDataSetDesign(targetDataSetDesign);
    valueQuery.setDisplayNameColumn(labelExpr);
    valueQuery.setValueColumn(valueExpr);
    valueQuery.setEnabled(true);
    inputAttrs.setDynamicValueChoices(valueQuery);
  }
  InputElementUIHints uiHints=DesignFactory.eINSTANCE.createInputElementUIHints();
  uiHints.setPromptStyle(newPromptStyle(paramDefn.getControlType(),paramDefn.isMustMatch()));
  inputAttrs.setUiHints(uiHints);
  if (paramDefn.getContainer() instanceof ParameterGroupHandle) {
    ParameterGroupHandle groupHandle=(ParameterGroupHandle)paramDefn.getContainer();
    InputParameterUIHints paramUiHints=DesignFactory.eINSTANCE.createInputParameterUIHints();
    paramUiHints.setGroupPromptDisplayName(groupHandle.getDisplayName());
    inputParamAttrs.setUiHints(paramUiHints);
  }
  inputParamAttrs.setElementAttributes(inputAttrs);
  return inputParamAttrs;
}","/** 
 * Creates a ODA InputParameterAttributes with the given ROM report parameter.
 * @param paramDefn the ROM report parameter.
 * @param dataSetDesign
 * @return the created <code>InputParameterAttributes</code>.
 */
private InputParameterAttributes updateInputElementAttrs(InputParameterAttributes inputParamAttrs,ScalarParameterHandle paramDefn,DataSetDesign dataSetDesign){
  if (inputParamAttrs == null)   inputParamAttrs=DesignFactory.eINSTANCE.createInputParameterAttributes();
  InputElementAttributes inputAttrs=inputParamAttrs.getElementAttributes();
  if (inputAttrs == null)   inputAttrs=DesignFactory.eINSTANCE.createInputElementAttributes();
  inputAttrs.setDefaultScalarValue(paramDefn.getDefaultValue());
  inputAttrs.setOptional(paramDefn.allowBlank());
  inputAttrs.setMasksValue(paramDefn.isConcealValue());
  ScalarValueChoices staticChoices=null;
  Iterator selectionList=paramDefn.choiceIterator();
  while (selectionList.hasNext()) {
    if (staticChoices == null)     staticChoices=DesignFactory.eINSTANCE.createScalarValueChoices();
    SelectionChoiceHandle choice=(SelectionChoiceHandle)selectionList.next();
    ScalarValueDefinition valueDefn=DesignFactory.eINSTANCE.createScalarValueDefinition();
    valueDefn.setValue(choice.getValue());
    valueDefn.setDisplayName(choice.getLabel());
    staticChoices.getScalarValues().add(valueDefn);
  }
  inputAttrs.setStaticValueChoices(staticChoices);
  DataSetHandle setHandle=paramDefn.getDataSet();
  String valueExpr=paramDefn.getValueExpr();
  String labelExpr=paramDefn.getLabelExpr();
  if (setHandle instanceof OdaDataSetHandle && (valueExpr != null || labelExpr != null)) {
    DynamicValuesQuery valueQuery=DesignFactory.eINSTANCE.createDynamicValuesQuery();
    if (dataSetDesign != null) {
      DataSetDesign targetDataSetDesign=(DataSetDesign)EcoreUtil.copy(dataSetDesign);
      if (!setHandle.getName().equals(dataSetDesign.getName()))       targetDataSetDesign=new ModelOdaAdapter().createDataSetDesign((OdaDataSetHandle)setHandle);
      valueQuery.setDataSetDesign(targetDataSetDesign);
    }
 else {
      DataSetDesign targetDataSetDesign=new ModelOdaAdapter().createDataSetDesign((OdaDataSetHandle)setHandle);
      valueQuery.setDataSetDesign(targetDataSetDesign);
    }
    valueQuery.setDisplayNameColumn(labelExpr);
    valueQuery.setValueColumn(valueExpr);
    valueQuery.setEnabled(true);
    inputAttrs.setDynamicValueChoices(valueQuery);
  }
  InputElementUIHints uiHints=DesignFactory.eINSTANCE.createInputElementUIHints();
  uiHints.setPromptStyle(newPromptStyle(paramDefn.getControlType(),paramDefn.isMustMatch()));
  inputAttrs.setUiHints(uiHints);
  if (paramDefn.getContainer() instanceof ParameterGroupHandle) {
    ParameterGroupHandle groupHandle=(ParameterGroupHandle)paramDefn.getContainer();
    InputParameterUIHints paramUiHints=DesignFactory.eINSTANCE.createInputParameterUIHints();
    paramUiHints.setGroupPromptDisplayName(groupHandle.getDisplayName());
    inputParamAttrs.setUiHints(paramUiHints);
  }
  inputParamAttrs.setElementAttributes(inputAttrs);
  return inputParamAttrs;
}",0.9402082633523682
77247,"/** 
 * Checks whether the given report parameter is updated. This method checks values of report parameters and values in data set design. <p> If any input argument is null or the matched ODA parameter definition cannot be found, return <code>true</code>.
 * @param reportParam the report parameter
 * @param param the ROM data set parameter
 * @param dataSetDesign the data set design
 * @return <code>true</code> if the report paramter is updated or has noparameter definition in the data set design. Otherwise <code>false</code>.
 */
public static boolean isUpdatedReportParameter(ScalarParameterHandle reportParam,OdaDataSetParameterHandle param,DataSetDesign dataSetDesign){
  if (reportParam == null || param == null || dataSetDesign == null)   return true;
  ParameterDefinition matchedParam=getValidParameterDefinition(param,dataSetDesign.getParameters());
  if (matchedParam == null)   return true;
  ParameterDefinition reportParamDefn=DesignFactory.eINSTANCE.createParameterDefinition();
  DataElementAttributes dataAttrs=DesignFactory.eINSTANCE.createDataElementAttributes();
  dataAttrs.setName(param.getNativeName());
  Integer position=param.getPosition();
  if (position != null)   dataAttrs.setPosition(position.intValue());
  reportParamDefn.setAttributes(dataAttrs);
  reportParamDefn=new ReportParameterAdapter().updateParameterDefinitionFromReportParam(reportParamDefn,reportParam,dataSetDesign);
  String reportParamString=DesignObjectSerializer.toExternalForm(reportParamDefn);
  String matchedParamString=DesignObjectSerializer.toExternalForm(matchedParam);
  if (reportParamString.equals(matchedParamString))   return true;
  return false;
}","/** 
 * Checks whether the given report parameter is updated. This method checks values of report parameters and values in data set design. <p> If any input argument is null or the matched ODA parameter definition cannot be found, return <code>true</code>.
 * @param reportParam the report parameter
 * @param param the ROM data set parameter
 * @param dataSetDesign the data set design
 * @return <code>true</code> if the report paramter is updated or has noparameter definition in the data set design. Otherwise <code>false</code>.
 */
boolean isUpdatedReportParameter(ScalarParameterHandle reportParam,ParameterDefinition odaParam,String newDataType){
  if (reportParam == null || odaParam == null)   return true;
  DataElementAttributes dataAttrs=odaParam.getAttributes();
  boolean allowNull=reportParam.allowNull();
  Boolean odaAllowNull=getROMNullability(dataAttrs.getNullability());
  if (odaAllowNull != null && allowNull != odaAllowNull.booleanValue())   return false;
  if (!DesignChoiceConstants.PARAM_TYPE_ANY.equalsIgnoreCase(newDataType)) {
    if (!isEquals(newDataType,reportParam.getDataType()))     return false;
  }
  DataElementUIHints dataUiHints=dataAttrs.getUiHints();
  if (dataUiHints != null) {
    String newPromptText=dataUiHints.getDisplayName();
    String newHelpText=dataUiHints.getDescription();
    if (!isEquals(newPromptText,reportParam.getPromptText()))     return false;
    if (!isEquals(newHelpText,reportParam.getHelpText()))     return false;
  }
  InputParameterAttributes paramAttrs=odaParam.getInputAttributes();
  InputParameterAttributes tmpParamDefn=(InputParameterAttributes)EcoreUtil.copy(paramAttrs);
  DynamicValuesQuery tmpDynamicQuery=tmpParamDefn.getElementAttributes().getDynamicValueChoices();
  String tmpDataSetName=null;
  if (tmpDynamicQuery != null) {
    tmpDataSetName=tmpDynamicQuery.getDataSetDesign().getName();
    tmpDynamicQuery.setDataSetDesign(null);
  }
  if (tmpParamDefn.getUiHints() != null) {
    tmpParamDefn.setUiHints(null);
  }
  InputParameterAttributes tmpParamDefn1=DesignFactory.eINSTANCE.createInputParameterAttributes();
  updateInputElementAttrs(tmpParamDefn1,reportParam,null);
  if (tmpParamDefn1.getUiHints() != null) {
    tmpParamDefn1.setUiHints(null);
  }
  DynamicValuesQuery tmpDynamicQuery1=tmpParamDefn1.getElementAttributes().getDynamicValueChoices();
  String tmpDataSetName1=null;
  if (tmpDynamicQuery1 != null) {
    tmpDataSetName1=tmpDynamicQuery1.getDataSetDesign().getName();
    tmpDynamicQuery1.setDataSetDesign(null);
  }
  if (!isEquals(tmpDataSetName,tmpDataSetName1))   return false;
  return EcoreUtil.equals(tmpParamDefn,tmpParamDefn1);
}",0.3529956049040018
77248,"/** 
 * Create a row expression base on a binding column name.
 * @param columnName the column name
 * @return the expression, or null if the column name is blank.
 */
public static String getColumnExpression(String columnName){
  Assert.isNotNull(columnName);
  if (StringUtil.isBlank(columnName)) {
    return null;
  }
  return BINDING_COLUMN_PREFIX + ""String_Node_Str"" + escape(columnName)+ ""String_Node_Str"";
}","/** 
 * Create a row expression base on a binding column name.
 * @param columnName the column name
 * @return the expression, or null if the column name is blank.
 */
public static String getColumnExpression(String columnName){
  Assert.isNotNull(columnName);
  if (StringUtil.isBlank(columnName)) {
    return null;
  }
  return ExpressionUtil.createJSRowExpression(columnName);
}",0.8456712672521958
77249,"/** 
 * compile simple column ref expression
 * @param refNode
 * @param rowName
 * @param columnExprList
 * @throws BirtException 
 */
private void compileSimpleColumnRefExpr(Node refNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node rowName=refNode.getFirstChild();
  String str=rowName.getString();
  assert(str != null);
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (!str.equals(ROW_INDICATOR)) {
    if (rowColumn != null && rowColumn.getNext() != null)     processChild(rowColumn.getNext(),tree,columnExprList);
    return;
  }
  if ((refNode.getType() == Token.GETPROP || refNode.getType() == Token.SETPROP) && rowColumn.getType() == Token.STRING) {
    int outer_count=0;
    if (""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()))     return;
    if (""String_Node_Str"".equals(rowColumn.getString())) {
      outer_count++;
      Node outer_Node=refNode.getNext();
      Node before_Node=outer_Node;
      while (outer_Node != null && outer_Node.getString() != null && ""String_Node_Str"".equals(outer_Node.getString())) {
        outer_count++;
        before_Node=outer_Node;
        outer_Node=outer_Node.getNext();
      }
      ColumnBinding info=new ColumnBinding(before_Node.getString(),""String_Node_Str"",outer_count);
      columnExprList.add(info);
      return;
    }
    ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
    columnExprList.add(binding);
  }
  if (refNode.getType() == Token.GETELEM || refNode.getType() == Token.SETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
      if (0 == rowColumn.getDouble())       return;
    }
 else     if (rowColumn.getType() == Token.STRING) {
      if (""String_Node_Str"".equals(rowColumn.getString()))       return;
      ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
      columnExprList.add(binding);
    }
  }
  if (rowColumn != null && rowColumn.getNext() != null)   processChild(rowColumn.getNext(),tree,columnExprList);
}","/** 
 * compile simple column ref expression
 * @param refNode
 * @param rowName
 * @param columnExprList
 * @throws BirtException 
 */
private void compileSimpleColumnRefExpr(Node refNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node rowName=refNode.getFirstChild();
  String str=rowName.getString();
  assert(str != null);
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (!str.equals(ROW_INDICATOR)) {
    if (rowColumn != null && rowColumn.getNext() != null)     processChild(rowColumn.getNext(),tree,columnExprList);
    return;
  }
  if ((refNode.getType() == Token.GETPROP || refNode.getType() == Token.SETPROP) && rowColumn.getType() == Token.STRING) {
    int outer_count=0;
    if (""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()))     return;
    if (""String_Node_Str"".equals(rowColumn.getString())) {
      outer_count++;
      Node outer_Node=refNode.getNext();
      Node before_Node=outer_Node;
      while (outer_Node != null && outer_Node.getString() != null && ""String_Node_Str"".equals(outer_Node.getString())) {
        outer_count++;
        before_Node=outer_Node;
        outer_Node=outer_Node.getNext();
      }
      ColumnBinding info=new ColumnBinding(before_Node.getString(),""String_Node_Str"",outer_count);
      columnExprList.add(info);
      return;
    }
    ColumnBinding binding=new ColumnBinding(rowColumn.getString(),ExpressionUtil.createDataSetRowExpression(rowColumn.getString()));
    columnExprList.add(binding);
  }
  if (refNode.getType() == Token.GETELEM || refNode.getType() == Token.SETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
      if (0 == rowColumn.getDouble())       return;
    }
 else     if (rowColumn.getType() == Token.STRING) {
      if (""String_Node_Str"".equals(rowColumn.getString()))       return;
      ColumnBinding binding=new ColumnBinding(rowColumn.getString(),ExpressionUtil.createJSDataSetRowExpression(rowColumn.getString()));
      columnExprList.add(binding);
    }
  }
  if (rowColumn != null && rowColumn.getNext() != null)   processChild(rowColumn.getNext(),tree,columnExprList);
}",0.9339146397430014
77250,"/** 
 * compile row position expression
 * @param refNode
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void compileRowPositionRef(Node refNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node rowFirstNode=refNode.getFirstChild();
  if (rowFirstNode.getType() == Token.GETELEM || rowFirstNode.getType() == Token.SETELEM) {
    Node rowNode=rowFirstNode.getFirstChild();
    if (rowNode != null && rowNode.getType() == Token.NAME && rowNode.getString().equals(ROWS_0_INDICATOR)) {
      Node rowColumn=rowNode.getNext();
      if (rowColumn.getDouble() == 0.0) {
        rowColumn=rowFirstNode.getNext();
        if (rowColumn.getType() == Token.STRING && (refNode.getType() == Token.GETELEM || refNode.getType() == Token.SETELEM)) {
          ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"",1);
          columnExprList.add(binding);
          ;
        }
      }
    }
  }
}","/** 
 * compile row position expression
 * @param refNode
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void compileRowPositionRef(Node refNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node rowFirstNode=refNode.getFirstChild();
  if (rowFirstNode.getType() == Token.GETELEM || rowFirstNode.getType() == Token.SETELEM) {
    Node rowNode=rowFirstNode.getFirstChild();
    if (rowNode != null && rowNode.getType() == Token.NAME && rowNode.getString().equals(ROWS_0_INDICATOR)) {
      Node rowColumn=rowNode.getNext();
      if (rowColumn.getDouble() == 0.0) {
        rowColumn=rowFirstNode.getNext();
        if (rowColumn.getType() == Token.STRING && (refNode.getType() == Token.GETELEM || refNode.getType() == Token.SETELEM)) {
          ColumnBinding binding=new ColumnBinding(rowColumn.getString(),ExpressionUtil.createJSDataSetRowExpression(rowColumn.getString()),1);
          columnExprList.add(binding);
          ;
        }
      }
    }
  }
}",0.9366093366093368
77251,"/** 
 * The method which extracts column name from group definition.
 * @param group
 * @return
 */
private String getGroupKeyExpression(GroupDefinition group){
  String columnName;
  if (group.getKeyColumn() != null) {
    columnName=""String_Node_Str"" + group.getKeyColumn() + ""String_Node_Str"";
  }
 else {
    columnName=group.getKeyExpression();
  }
  return columnName;
}","/** 
 * The method which extracts column name from group definition.
 * @param group
 * @return
 */
private String getGroupKeyExpression(GroupDefinition group){
  String columnName;
  if (group.getKeyColumn() != null) {
    columnName=ExpressionUtil.createJSRowExpression(group.getKeyColumn());
  }
 else {
    columnName=group.getKeyExpression();
  }
  return columnName;
}",0.8986666666666666
77252,"public void initAutoBinding() throws DataException {
  if (needAutoBinding() == false)   return;
  Context cx=Context.enter();
  IResultMetaData metaData=getResultMetaData();
  int columnCount=metaData.getColumnCount();
  for (int i=0; i < columnCount; i++) {
    int colIndex=i + 1;
    try {
      String colName=metaData.getColumnAlias(colIndex);
      if (colName == null)       colName=metaData.getColumnName(colIndex);
      ScriptExpression baseExpr=new ScriptExpression(""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(colName) + ""String_Node_Str"",metaData.getColumnType(colIndex));
      CompiledExpression compiledExpr=ExpressionCompilerUtil.compile(baseExpr.getText(),cx);
      baseExpr.setHandle(compiledExpr);
      this.exprManager.addAutoBindingExpr(colName,baseExpr);
    }
 catch (    BirtException e) {
    }
  }
  Context.exit();
}","public void initAutoBinding() throws DataException {
  if (needAutoBinding() == false)   return;
  Context cx=Context.enter();
  IResultMetaData metaData=getResultMetaData();
  int columnCount=metaData.getColumnCount();
  for (int i=0; i < columnCount; i++) {
    int colIndex=i + 1;
    try {
      String colName=metaData.getColumnAlias(colIndex);
      if (colName == null)       colName=metaData.getColumnName(colIndex);
      ScriptExpression baseExpr=new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(colName),metaData.getColumnType(colIndex));
      CompiledExpression compiledExpr=ExpressionCompilerUtil.compile(baseExpr.getText(),cx);
      baseExpr.setHandle(compiledExpr);
      this.exprManager.addAutoBindingExpr(colName,baseExpr);
    }
 catch (    BirtException e) {
    }
  }
  Context.exit();
}",0.9183431952662722
77253,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(new ParameterAdapter(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(new ParameterAdapter(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}",0.9994138335287222
77254,"public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   setNativeType(modelParam.getNativeDataType().intValue());
  setType(ModelAdapter.adaptModelDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
    setDefaultInputValue(ExpressionUtil.createParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName()));
  }
 else   setDefaultInputValue(modelParam.getDefaultValue());
}","public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   setNativeType(modelParam.getNativeDataType().intValue());
  setType(ModelAdapter.adaptModelDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
    setDefaultInputValue(ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName()));
  }
 else   setDefaultInputValue(modelParam.getDefaultValue());
}",0.998803827751196
77255,"/** 
 * @param result
 * @param key
 */
private void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName){
  IConditionalExpression ce=key;
  if (groupName != null)   ce.setGroupName(groupName);
  String bindingName=TOTAL_PREFIX + totalColumnSuffix;
  totalColumnSuffix++;
  ColumnBinding columnBinding=new ColumnBinding(bindingName,ce);
  List allColumnBindings=new ArrayList();
  allColumnBindings.add(columnBinding);
  result.addColumnBindings(allColumnBindings);
  result.addNewExpression(""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(bindingName) + ""String_Node_Str"");
}","/** 
 * @param result
 * @param key
 */
private void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName){
  IConditionalExpression ce=key;
  if (groupName != null)   ce.setGroupName(groupName);
  String bindingName=TOTAL_PREFIX + totalColumnSuffix;
  totalColumnSuffix++;
  ColumnBinding columnBinding=new ColumnBinding(bindingName,ce);
  List allColumnBindings=new ArrayList();
  allColumnBindings.add(columnBinding);
  result.addColumnBindings(allColumnBindings);
  result.addNewExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(bindingName));
}",0.8888888888888888
77256,"/** 
 * Translate the old expression with ""row"" as indicator to new expression using ""dataSetRow"" as indicator.
 * @param oldExpression
 * @return
 */
private String prepareTotalExpression(String oldExpression,List columnBindings,String groupName){
  if (oldExpression == null)   return null;
  char[] chars=oldExpression.toCharArray();
  if (chars.length < 8)   return oldExpression;
 else {
    ParseIndicator indicator=new ParseIndicator(0,0,false,false,true,true);
    for (int i=0; i < chars.length; i++) {
      indicator=getParseIndicator(chars,i,indicator.omitNextQuote(),indicator.getCandidateKey1(),indicator.getCandidateKey2());
      i=indicator.getNewIndex();
      if (i >= indicator.getRetrieveSize() + 6) {
        if (indicator.isCandidateKey() && chars[i - indicator.getRetrieveSize() - 6] == 'T' && chars[i - indicator.getRetrieveSize() - 5] == 'o' && chars[i - indicator.getRetrieveSize() - 4] == 't' && chars[i - indicator.getRetrieveSize() - 3] == 'a' && chars[i - indicator.getRetrieveSize() - 2] == 'l' && chars[i - indicator.getRetrieveSize() - 1] == '.') {
          if (i - indicator.getRetrieveSize() - 7 <= 0 || isValidProceeding(chars[i - indicator.getRetrieveSize() - 7])) {
            String firstPart=oldExpression.substring(0,i - indicator.getRetrieveSize() - 6);
            int startIndex=i - indicator.getRetrieveSize() - 6;
            i=advanceToNextValidEncloser(chars,i);
            String secondPart=""String_Node_Str"";
            String name=""String_Node_Str"";
            String expr=""String_Node_Str"";
            if (i < chars.length) {
              int endIndex=i + 1;
              expr=oldExpression.substring(startIndex,endIndex);
              secondPart=prepareTotalExpression(oldExpression.substring(i + 1 - indicator.getRetrieveSize()),columnBindings,groupName);
            }
 else {
              expr=oldExpression.substring(startIndex);
            }
            boolean shouldAddToList=true;
            for (int j=0; j < columnBindings.size(); j++) {
              IBaseExpression expression=((IColumnBinding)columnBindings.get(j)).getBoundExpression();
              if (expression instanceof IScriptExpression) {
                if (oldExpression.equals(((IScriptExpression)expression).getText())) {
                  shouldAddToList=false;
                  name=((IColumnBinding)columnBindings.get(j)).getResultSetColumnName();
                  break;
                }
              }
            }
            if (shouldAddToList) {
              name=TOTAL_PREFIX + totalColumnSuffix;
              totalColumnSuffix++;
              columnBindings.add(new ColumnBinding(name,expr,groupName));
            }
            String newExpression=firstPart + ""String_Node_Str"" + name+ ""String_Node_Str""+ secondPart;
            return newExpression;
          }
        }
      }
    }
  }
  return oldExpression;
}","/** 
 * Translate the old expression with ""row"" as indicator to new expression using ""dataSetRow"" as indicator.
 * @param oldExpression
 * @return
 */
private String prepareTotalExpression(String oldExpression,List columnBindings,String groupName){
  if (oldExpression == null)   return null;
  char[] chars=oldExpression.toCharArray();
  if (chars.length < 8)   return oldExpression;
 else {
    ParseIndicator indicator=new ParseIndicator(0,0,false,false,true,true);
    for (int i=0; i < chars.length; i++) {
      indicator=getParseIndicator(chars,i,indicator.omitNextQuote(),indicator.getCandidateKey1(),indicator.getCandidateKey2());
      i=indicator.getNewIndex();
      if (i >= indicator.getRetrieveSize() + 6) {
        if (indicator.isCandidateKey() && chars[i - indicator.getRetrieveSize() - 6] == 'T' && chars[i - indicator.getRetrieveSize() - 5] == 'o' && chars[i - indicator.getRetrieveSize() - 4] == 't' && chars[i - indicator.getRetrieveSize() - 3] == 'a' && chars[i - indicator.getRetrieveSize() - 2] == 'l' && chars[i - indicator.getRetrieveSize() - 1] == '.') {
          if (i - indicator.getRetrieveSize() - 7 <= 0 || isValidProceeding(chars[i - indicator.getRetrieveSize() - 7])) {
            String firstPart=oldExpression.substring(0,i - indicator.getRetrieveSize() - 6);
            int startIndex=i - indicator.getRetrieveSize() - 6;
            i=advanceToNextValidEncloser(chars,i);
            String secondPart=""String_Node_Str"";
            String name=""String_Node_Str"";
            String expr=""String_Node_Str"";
            if (i < chars.length) {
              int endIndex=i + 1;
              expr=oldExpression.substring(startIndex,endIndex);
              secondPart=prepareTotalExpression(oldExpression.substring(i + 1 - indicator.getRetrieveSize()),columnBindings,groupName);
            }
 else {
              expr=oldExpression.substring(startIndex);
            }
            boolean shouldAddToList=true;
            for (int j=0; j < columnBindings.size(); j++) {
              IBaseExpression expression=((IColumnBinding)columnBindings.get(j)).getBoundExpression();
              if (expression instanceof IScriptExpression) {
                if (oldExpression.equals(((IScriptExpression)expression).getText())) {
                  shouldAddToList=false;
                  name=((IColumnBinding)columnBindings.get(j)).getResultSetColumnName();
                  break;
                }
              }
            }
            if (shouldAddToList) {
              name=TOTAL_PREFIX + totalColumnSuffix;
              totalColumnSuffix++;
              columnBindings.add(new ColumnBinding(name,expr,groupName));
            }
            String newExpression=firstPart + org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(name) + secondPart;
            return newExpression;
          }
        }
      }
    }
  }
  return oldExpression;
}",0.9683773976153448
77257,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(newParam(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(newParam(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}",0.999415546464056
77258,"public void visitDataItem(DataItemHandle handle){
  DataItemDesign data=new DataItemDesign();
  setupReportItem(data,handle);
  data.setName(handle.getName());
  String expr=handle.getResultSetColumn();
  if (expr != null && expr.trim().length() > 0) {
    expr=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(expr) + ""String_Node_Str"";
    data.setValue(expr);
  }
  ActionHandle action=handle.getActionHandle();
  if (action != null) {
    data.setAction(createAction(action));
  }
  data.setHelpText(handle.getHelpTextKey(),handle.getHelpText());
  setHighlight(data,expr);
  setMap(data,expr);
  currentElement=data;
}","public void visitDataItem(DataItemHandle handle){
  DataItemDesign data=new DataItemDesign();
  setupReportItem(data,handle);
  data.setName(handle.getName());
  String expr=handle.getResultSetColumn();
  if (expr != null && expr.trim().length() > 0) {
    expr=ExpressionUtil.createJSRowExpression(expr);
    data.setValue(expr);
  }
  ActionHandle action=handle.getActionHandle();
  if (action != null) {
    data.setAction(createAction(action));
  }
  data.setHelpText(handle.getHelpTextKey(),handle.getHelpText());
  setHighlight(data,expr);
  setMap(data,expr);
  currentElement=data;
}",0.4352078239608802
77259,"/** 
 * Checks if the text is a data content in table header/footer or table group header/footer and uses the query of the table.
 * @param text the text content.
 */
private boolean isAggregatable(ITextContent text){
  Object generateBy=text.getGenerateBy();
  DataItemDesign data=(DataItemDesign)generateBy;
  if (data.getQuery() != null) {
    return false;
  }
  IElement parent=text.getParent();
  while (parent != null) {
    if (parent instanceof IContent) {
      IContent content=(IContent)parent;
      ReportItemDesign design=(ReportItemDesign)content.getGenerateBy();
      if (design.getQuery() != null) {
        return false;
      }
    }
    if (parent instanceof IBandContent) {
      IBandContent bandContent=(IBandContent)parent;
      BandDesign bandDesing=(BandDesign)bandContent.getGenerateBy();
      if (bandDesing.getBandType() == BandDesign.BAND_HEADER || bandDesing.getBandType() == BandDesign.BAND_FOOTER || bandDesing.getBandType() == BandDesign.GROUP_HEADER || bandDesing.getBandType() == BandDesign.GROUP_FOOTER) {
        IElement bandParent=bandContent.getParent();
        if (bandParent instanceof IGroupContent) {
          bandParent=bandParent.getParent();
        }
        if (bandParent instanceof ITableContent) {
          return true;
        }
      }
    }
    parent=parent.getParent();
  }
  return false;
}","/** 
 * Checks if the text is a data content in table header/footer or table group header/footer and uses the query of the table.
 * @param text the text content.
 */
private boolean isAggregatable(ITextContent text){
  Object generateBy=text.getGenerateBy();
  DataItemDesign data=(DataItemDesign)generateBy;
  if (data.getQuery() != null) {
    return false;
  }
  IElement parent=text.getParent();
  while (parent != null) {
    if (parent instanceof IContent) {
      IContent content=(IContent)parent;
      ReportItemDesign design=(ReportItemDesign)content.getGenerateBy();
      if (design.getQuery() != null) {
        return false;
      }
    }
    if (parent instanceof IBandContent) {
      IBandContent bandContent=(IBandContent)parent;
      BandDesign bandDesing=(BandDesign)bandContent.getGenerateBy();
      if (bandDesing.getBandType() == BandDesign.BAND_HEADER || bandDesing.getBandType() == BandDesign.BAND_FOOTER || bandDesing.getBandType() == BandDesign.GROUP_HEADER || bandDesing.getBandType() == BandDesign.GROUP_FOOTER) {
        IElement bandParent=bandContent.getParent();
        while (bandParent instanceof IGroupContent) {
          bandParent=bandParent.getParent();
        }
        if (bandParent instanceof ITableContent) {
          return true;
        }
      }
    }
    parent=parent.getParent();
  }
  return false;
}",0.9974217311233886
77260,"/** 
 * Copies values of <code>sourceHandle</code> to <code>sourceDesign</code>.
 * @param setHandle the Model handle
 * @param setDesign the ODA data source design
 * @param propertyName the property name
 */
public void updateDataSetDesign(OdaDataSetHandle setHandle,DataSetDesign setDesign,String propertyName){
  if (setHandle == null || setDesign == null || propertyName == null)   return;
  if (OdaDataSetHandle.NAME_PROP.equalsIgnoreCase(propertyName))   setDesign.setName(setHandle.getName());
 else   if (OdaDataSetHandle.DISPLAY_NAME_PROP.equalsIgnoreCase(propertyName))   setDesign.setDisplayName(setHandle.getDisplayName());
 else   if (OdaDataSourceHandle.EXTENSION_ID_PROP.equalsIgnoreCase(propertyName))   setDesign.setOdaExtensionDataSetId(setHandle.getExtensionID());
 else   if (OdaDataSetHandle.PRIVATE_DRIVER_PROPERTIES_PROP.equalsIgnoreCase(propertyName))   setDesign.setPrivateProperties(newOdaPrivateProperties(setHandle.privateDriverPropertiesIterator()));
 else   if (OdaDataSetHandle.RESULT_SET_NAME_PROP.equalsIgnoreCase(propertyName))   setDesign.setPrimaryResultSetName(setHandle.getResultSetName());
 else   if (OdaDataSetHandle.QUERY_TEXT_PROP.equalsIgnoreCase(propertyName))   setDesign.setQueryText(setHandle.getQueryText());
 else   if (OdaDataSetHandle.DATA_SOURCE_PROP.equalsIgnoreCase(propertyName)) {
    OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)setHandle.getDataSource();
    if (sourceHandle != null)     setDesign.setDataSourceDesign(createDataSourceDesign(sourceHandle));
  }
 else   if (OdaDataSetHandle.PARAMETERS_PROP.equalsIgnoreCase(propertyName))   setDesign.setParameters(new DataSetParameterAdapter().newOdaDataSetParams(setHandle.parametersIterator()));
 else   if (OdaDataSetHandle.RESULT_SET_PROP.equalsIgnoreCase(propertyName))   setDesign.setPrimaryResultSet(new ResultSetsAdapter().newOdaResultSetDefinition(setHandle));
}","/** 
 * Copies values of <code>sourceHandle</code> to <code>sourceDesign</code>.
 * @param setHandle the Model handle
 * @param setDesign the ODA data source design
 * @param propertyName the property name
 */
public void updateDataSetDesign(OdaDataSetHandle setHandle,DataSetDesign setDesign,String propertyName){
  if (setHandle == null || setDesign == null || propertyName == null)   return;
  if (OdaDataSetHandle.NAME_PROP.equalsIgnoreCase(propertyName))   setDesign.setName(setHandle.getName());
 else   if (OdaDataSetHandle.DISPLAY_NAME_PROP.equalsIgnoreCase(propertyName))   setDesign.setDisplayName(setHandle.getDisplayName());
 else   if (OdaDataSourceHandle.EXTENSION_ID_PROP.equalsIgnoreCase(propertyName))   setDesign.setOdaExtensionDataSetId(setHandle.getExtensionID());
 else   if (OdaDataSetHandle.PRIVATE_DRIVER_PROPERTIES_PROP.equalsIgnoreCase(propertyName))   setDesign.setPrivateProperties(newOdaPrivateProperties(setHandle.privateDriverPropertiesIterator()));
 else   if (OdaDataSetHandle.RESULT_SET_NAME_PROP.equalsIgnoreCase(propertyName))   setDesign.setPrimaryResultSetName(setHandle.getResultSetName());
 else   if (OdaDataSetHandle.QUERY_TEXT_PROP.equalsIgnoreCase(propertyName))   setDesign.setQueryText(setHandle.getQueryText());
 else   if (OdaDataSetHandle.DATA_SOURCE_PROP.equalsIgnoreCase(propertyName)) {
    OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)setHandle.getDataSource();
    if (sourceHandle != null)     setDesign.setDataSourceDesign(createDataSourceDesign(sourceHandle));
  }
 else   if (OdaDataSetHandle.PARAMETERS_PROP.equalsIgnoreCase(propertyName))   setDesign.setParameters(new DataSetParameterAdapter().newOdaDataSetParams(setHandle.parametersIterator(),setDesign));
 else   if (OdaDataSetHandle.RESULT_SET_PROP.equalsIgnoreCase(propertyName))   setDesign.setPrimaryResultSet(new ResultSetsAdapter().newOdaResultSetDefinition(setHandle));
}",0.9973628691983122
77261,"/** 
 * Creates an ParameterDefinition with the given report parameter.
 * @param paramDefn the ROM report parameter.
 * @return the created ParameterDefinition
 */
ParameterDefinition updateParameterDefinitionFromReportParam(ParameterDefinition paramDefn,ScalarParameterHandle paramHandle){
}","/** 
 * Creates an ParameterDefinition with the given report parameter.
 * @param paramDefn the ROM report parameter.
 * @return the created ParameterDefinition
 */
ParameterDefinition updateParameterDefinitionFromReportParam(ParameterDefinition paramDefn,ScalarParameterHandle paramHandle,DataSetDesign dataSetDesign){
}",0.9543973941368078
77262,"/** 
 * Creates a ODA InputParameterAttributes with the given ROM report parameter.
 * @param paramDefn the ROM report parameter.
 * @return the created <code>InputParameterAttributes</code>.
 */
private InputParameterAttributes updateInputElementAttrs(InputParameterAttributes inputParamAttrs,ScalarParameterHandle paramDefn){
  if (inputParamAttrs == null)   inputParamAttrs=DesignFactory.eINSTANCE.createInputParameterAttributes();
  InputElementAttributes inputAttrs=inputParamAttrs.getElementAttributes();
  if (inputAttrs == null)   inputAttrs=DesignFactory.eINSTANCE.createInputElementAttributes();
  inputAttrs.setDefaultScalarValue(paramDefn.getDefaultValue());
  inputAttrs.setOptional(paramDefn.allowBlank());
  inputAttrs.setMasksValue(paramDefn.isConcealValue());
  ScalarValueChoices staticChoices=null;
  Iterator selectionList=paramDefn.choiceIterator();
  while (selectionList.hasNext()) {
    if (staticChoices == null)     staticChoices=DesignFactory.eINSTANCE.createScalarValueChoices();
    SelectionChoiceHandle choice=(SelectionChoiceHandle)selectionList.next();
    ScalarValueDefinition valueDefn=DesignFactory.eINSTANCE.createScalarValueDefinition();
    valueDefn.setValue(choice.getValue());
    valueDefn.setDisplayName(choice.getLabel());
    staticChoices.getScalarValues().add(valueDefn);
  }
  inputAttrs.setStaticValueChoices(staticChoices);
  DataSetHandle setHandle=paramDefn.getDataSet();
  String valueExpr=paramDefn.getValueExpr();
  String labelExpr=paramDefn.getLabelExpr();
  if (setHandle instanceof OdaDataSetHandle && (valueExpr != null || labelExpr != null)) {
    DynamicValuesQuery valueQuery=DesignFactory.eINSTANCE.createDynamicValuesQuery();
    valueQuery.setDataSetDesign(new ModelOdaAdapter().createDataSetDesign((OdaDataSetHandle)setHandle));
    valueQuery.setDisplayNameColumn(labelExpr);
    valueQuery.setValueColumn(valueExpr);
    valueQuery.setEnabled(true);
    inputAttrs.setDynamicValueChoices(valueQuery);
  }
  InputElementUIHints uiHints=DesignFactory.eINSTANCE.createInputElementUIHints();
  uiHints.setPromptStyle(newPromptStyle(paramDefn.getControlType(),paramDefn.isMustMatch()));
  inputAttrs.setUiHints(uiHints);
  if (paramDefn.getContainer() instanceof ParameterGroupHandle) {
    ParameterGroupHandle groupHandle=(ParameterGroupHandle)paramDefn.getContainer();
    InputParameterUIHints paramUiHints=DesignFactory.eINSTANCE.createInputParameterUIHints();
    paramUiHints.setGroupPromptDisplayName(groupHandle.getDisplayName());
    inputParamAttrs.setUiHints(paramUiHints);
  }
  inputParamAttrs.setElementAttributes(inputAttrs);
  return inputParamAttrs;
}","/** 
 * Creates a ODA InputParameterAttributes with the given ROM report parameter.
 * @param paramDefn the ROM report parameter.
 * @param dataSetDesign
 * @return the created <code>InputParameterAttributes</code>.
 */
private InputParameterAttributes updateInputElementAttrs(InputParameterAttributes inputParamAttrs,ScalarParameterHandle paramDefn,DataSetDesign dataSetDesign){
  if (inputParamAttrs == null)   inputParamAttrs=DesignFactory.eINSTANCE.createInputParameterAttributes();
  InputElementAttributes inputAttrs=inputParamAttrs.getElementAttributes();
  if (inputAttrs == null)   inputAttrs=DesignFactory.eINSTANCE.createInputElementAttributes();
  inputAttrs.setDefaultScalarValue(paramDefn.getDefaultValue());
  inputAttrs.setOptional(paramDefn.allowBlank());
  inputAttrs.setMasksValue(paramDefn.isConcealValue());
  ScalarValueChoices staticChoices=null;
  Iterator selectionList=paramDefn.choiceIterator();
  while (selectionList.hasNext()) {
    if (staticChoices == null)     staticChoices=DesignFactory.eINSTANCE.createScalarValueChoices();
    SelectionChoiceHandle choice=(SelectionChoiceHandle)selectionList.next();
    ScalarValueDefinition valueDefn=DesignFactory.eINSTANCE.createScalarValueDefinition();
    valueDefn.setValue(choice.getValue());
    valueDefn.setDisplayName(choice.getLabel());
    staticChoices.getScalarValues().add(valueDefn);
  }
  inputAttrs.setStaticValueChoices(staticChoices);
  DataSetHandle setHandle=paramDefn.getDataSet();
  String valueExpr=paramDefn.getValueExpr();
  String labelExpr=paramDefn.getLabelExpr();
  if (setHandle instanceof OdaDataSetHandle && (valueExpr != null || labelExpr != null)) {
    DynamicValuesQuery valueQuery=DesignFactory.eINSTANCE.createDynamicValuesQuery();
    DataSetDesign targetDataSetDesign=dataSetDesign;
    if (!setHandle.getName().equals(dataSetDesign.getName()))     targetDataSetDesign=new ModelOdaAdapter().createDataSetDesign((OdaDataSetHandle)setHandle);
    valueQuery.setDataSetDesign(targetDataSetDesign);
    valueQuery.setDisplayNameColumn(labelExpr);
    valueQuery.setValueColumn(valueExpr);
    valueQuery.setEnabled(true);
    inputAttrs.setDynamicValueChoices(valueQuery);
  }
  InputElementUIHints uiHints=DesignFactory.eINSTANCE.createInputElementUIHints();
  uiHints.setPromptStyle(newPromptStyle(paramDefn.getControlType(),paramDefn.isMustMatch()));
  inputAttrs.setUiHints(uiHints);
  if (paramDefn.getContainer() instanceof ParameterGroupHandle) {
    ParameterGroupHandle groupHandle=(ParameterGroupHandle)paramDefn.getContainer();
    InputParameterUIHints paramUiHints=DesignFactory.eINSTANCE.createInputParameterUIHints();
    paramUiHints.setGroupPromptDisplayName(groupHandle.getDisplayName());
    inputParamAttrs.setUiHints(paramUiHints);
  }
  inputParamAttrs.setElementAttributes(inputAttrs);
  return inputParamAttrs;
}",0.935789857716162
77263,"/** 
 * Checks whether the given report parameter is updated. This method checks values of report parameters and values in data set design. <p> If any input argument is null or the matched ODA parameter definition cannot be found, return <code>true</code>.
 * @param reportParam the report parameter
 * @param param the ROM data set parameter
 * @param dataSetDesign the data set design
 * @return <code>true</code> if the report paramter is updated or has noparameter definition in the data set design. Otherwise <code>false</code>.
 */
public static boolean isUpdatedReportParameter(ScalarParameterHandle reportParam,OdaDataSetParameterHandle param,DataSetDesign dataSetDesign){
  if (reportParam == null || param == null || dataSetDesign == null)   return true;
  ParameterDefinition matchedParam=getValidParameterDefinition(param,dataSetDesign.getParameters());
  if (matchedParam == null)   return true;
  ParameterDefinition reportParamDefn=DesignFactory.eINSTANCE.createParameterDefinition();
  DataElementAttributes dataAttrs=DesignFactory.eINSTANCE.createDataElementAttributes();
  dataAttrs.setName(param.getNativeName());
  Integer position=param.getPosition();
  if (position != null)   dataAttrs.setPosition(position.intValue());
  reportParamDefn.setAttributes(dataAttrs);
  reportParamDefn=new ReportParameterAdapter().updateParameterDefinitionFromReportParam(reportParamDefn,reportParam);
  String reportParamString=DesignObjectSerializer.toExternalForm(reportParamDefn);
  String matchedParamString=DesignObjectSerializer.toExternalForm(matchedParam);
  if (reportParamString.equals(matchedParamString))   return true;
  return false;
}","/** 
 * Checks whether the given report parameter is updated. This method checks values of report parameters and values in data set design. <p> If any input argument is null or the matched ODA parameter definition cannot be found, return <code>true</code>.
 * @param reportParam the report parameter
 * @param param the ROM data set parameter
 * @param dataSetDesign the data set design
 * @return <code>true</code> if the report paramter is updated or has noparameter definition in the data set design. Otherwise <code>false</code>.
 */
public static boolean isUpdatedReportParameter(ScalarParameterHandle reportParam,OdaDataSetParameterHandle param,DataSetDesign dataSetDesign){
  if (reportParam == null || param == null || dataSetDesign == null)   return true;
  ParameterDefinition matchedParam=getValidParameterDefinition(param,dataSetDesign.getParameters());
  if (matchedParam == null)   return true;
  ParameterDefinition reportParamDefn=DesignFactory.eINSTANCE.createParameterDefinition();
  DataElementAttributes dataAttrs=DesignFactory.eINSTANCE.createDataElementAttributes();
  dataAttrs.setName(param.getNativeName());
  Integer position=param.getPosition();
  if (position != null)   dataAttrs.setPosition(position.intValue());
  reportParamDefn.setAttributes(dataAttrs);
  reportParamDefn=new ReportParameterAdapter().updateParameterDefinitionFromReportParam(reportParamDefn,reportParam,dataSetDesign);
  String reportParamString=DesignObjectSerializer.toExternalForm(reportParamDefn);
  String matchedParamString=DesignObjectSerializer.toExternalForm(matchedParam);
  if (reportParamString.equals(matchedParamString))   return true;
  return false;
}",0.9957831325301204
77264,"/** 
 * Constructor.
 * @param servletConfig
 * @param config
 */
private ReportEngineService(ServletConfig servletConfig){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletConfig == null) {
    return;
  }
  config=new EngineConfig();
  HTMLEmitterConfig emitterConfig=new HTMLEmitterConfig();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (imageDirectory == null || imageDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(imageDirectory)) {
    imageDirectory=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  imageBaseUrl=""String_Node_Str"";
  String logDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (logDirectory == null || logDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(logDirectory)) {
    logDirectory=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  String logLevel=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  Level level=Level.OFF;
  if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.SEVERE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.WARNING;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.INFO;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.CONFIG;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINEST;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.OFF;
  }
  config.setLogConfig(logDirectory,level);
  String scriptLibDir=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (scriptLibDir == null || scriptLibDir.trim().length() <= 0 || ParameterAccessor.isRelativePath(scriptLibDir)) {
    scriptLibDir=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}","/** 
 * Constructor.
 * @param servletConfig
 * @param config
 */
private ReportEngineService(ServletConfig servletConfig){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletConfig == null) {
    return;
  }
  config=new EngineConfig();
  HTMLEmitterConfig emitterConfig=new HTMLEmitterConfig();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (imageDirectory == null || imageDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(imageDirectory)) {
    imageDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  imageBaseUrl=""String_Node_Str"";
  String logDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (logDirectory == null || logDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(logDirectory)) {
    logDirectory=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  String logLevel=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  Level level=Level.OFF;
  if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.SEVERE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.WARNING;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.INFO;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.CONFIG;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINEST;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.OFF;
  }
  config.setLogConfig(logDirectory,level);
  String scriptLibDir=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (scriptLibDir == null || scriptLibDir.trim().length() <= 0 || ParameterAccessor.isRelativePath(scriptLibDir)) {
    scriptLibDir=ParameterAccessor.getRealPath(servletConfig.getServletContext(),""String_Node_Str"");
  }
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}",0.9784313725490196
77265,"/** 
 * Gets the resource folder.
 * @param request the request to retrieve
 * @return the resource folder of the request
 */
public static String getResourceFolder(HttpServletRequest request){
  String resourceFolder=null;
  resourceFolder=getParameter(request,PARAM_RESOURCE_FOLDER);
  if (resourceFolder == null || resourceFolder.trim().length() <= 0)   resourceFolder=birtResourceFolder;
  return resourceFolder;
}","/** 
 * Get the resource folder.
 * @param request the request to retrieve
 * @return the resource folder of the request
 */
public static String getResourceFolder(HttpServletRequest request){
  String resourceFolder=null;
  resourceFolder=getParameter(request,PARAM_RESOURCE_FOLDER);
  if (resourceFolder == null || resourceFolder.trim().length() <= 0)   resourceFolder=birtResourceFolder;
  return resourceFolder;
}",0.9988023952095808
77266,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  documentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=context.getRealPath(""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  if (documentFolder == null || documentFolder.trim().length() <= 0)   documentFolder=workingFolder;
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isDocumentFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  birtResourceFolder=context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH);
  clearDocuments();
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  documentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=getRealPath(context,""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  if (documentFolder == null || documentFolder.trim().length() <= 0)   documentFolder=workingFolder;
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isDocumentFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  birtResourceFolder=context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH);
  clearDocuments();
  isInitContext=true;
}",0.9941434846266471
77267,"/** 
 * Process the parameter definition for some special case
 * @param defn
 * @param parameters
 */
private static void proccessParamDefn(ParameterDefinition defn,DataSetParameters parameters){
  if (defn.getAttributes().getName() == null || defn.getAttributes().getName().trim().equals(""String_Node_Str""))   defn.getAttributes().setName(SQLUtility.getUniqueName(parameters));
  if (defn.getAttributes().getNativeDataTypeCode() == Types.NULL) {
    defn.getAttributes().setNativeDataTypeCode(Types.CHAR);
  }
}","/** 
 * Process the parameter definition for some special case
 * @param defn
 * @param parameters
 */
private static void proccessParamDefn(ParameterDefinition defn,DataSetParameters parameters){
  if (defn.getAttributes().getNativeDataTypeCode() == Types.NULL) {
    defn.getAttributes().setNativeDataTypeCode(Types.CHAR);
  }
}",0.7829181494661922
77268,"private boolean needColumnFilter(ICellContent cell){
  DetailRowState state=(DetailRowState)detailRowStateStack.peek();
  if (cell.getColumnInstance() == null) {
    return false;
  }
  return state.isStartOfDetail && cell.getColumnInstance().hasDataItemsInDetail() && displayFilterIcon&& HTMLUtil.getFilterConditions(cell).size() > 0;
}","private boolean needColumnFilter(ICellContent cell){
  DetailRowState state=(DetailRowState)detailRowStateStack.peek();
  IColumn columnInstance=cell.getColumnInstance();
  if (columnInstance == null) {
    return false;
  }
  return state.isStartOfDetail && columnInstance.hasDataItemsInDetail() && displayFilterIcon&& HTMLUtil.getFilterConditions(cell).size() > 0;
}",0.825531914893617
77269,"/** 
 * Gets filter conditions of the column which contains the specified cell.
 * @param cell the cell.
 * @return the column filter conditions.
 */
public static List getFilterConditions(ICellContent cell){
  IRowContent row=(IRowContent)cell.getParent();
  IBandContent band=(IBandContent)row.getParent();
  IElement parentOfBand=band.getParent();
  while (!(parentOfBand instanceof ITableContent) && parentOfBand != null) {
    parentOfBand=parentOfBand.getParent();
  }
  ITableContent tableContent=(ITableContent)parentOfBand;
  TableHandle tableHandle=(TableHandle)((TableItemDesign)tableContent.getGenerateBy()).getHandle();
  return (tableHandle.getFilters(cell.getColumn()));
}","/** 
 * Gets filter conditions of the column which contains the specified cell.
 * @param cell the cell.
 * @return the column filter conditions. Empty list is returned when thecolumn has no filter conditions.
 */
public static List getFilterConditions(ICellContent cell){
  IRowContent row=(IRowContent)cell.getParent();
  ITableContent table=row.getTable();
  List filters=null;
  if (table != null) {
    Object genBy=table.getGenerateBy();
    if (genBy instanceof TableItemDesign) {
      TableHandle tableHandle=(TableHandle)((TableItemDesign)genBy).getHandle();
      filters=tableHandle.getFilters(cell.getColumn());
    }
  }
  return filters == null ? Collections.EMPTY_LIST : filters;
}",0.4797687861271676
77270,"/** 
 * Get the aggregate value
 * @param aggrIndex
 * @return
 * @throws DataException
 */
private Object getAggregateValue(int aggrIndex) throws DataException {
  AggrExprInfo aggrInfo=getAggrInfo(aggrIndex);
  if (this.odiResult.getRowCount() == 0) {
    if (aggrInfo.aggregation.getName().equalsIgnoreCase(""String_Node_Str""))     return new Integer(0);
 else     return null;
  }
  try {
    int groupIndex;
    if (aggrInfo.aggregation.getType() == IAggregation.SUMMARY_AGGR) {
      if (aggrInfo.groupLevel == 0)       groupIndex=0;
 else       groupIndex=this.odiResult.getCurrentGroupIndex(aggrInfo.groupLevel);
    }
 else {
      groupIndex=this.odiResult.getCurrentResultIndex();
    }
    return this.aggrValues[aggrIndex].get(groupIndex);
  }
 catch (  DataException e) {
    throw e;
  }
}","/** 
 * Get the aggregate value
 * @param aggrIndex
 * @return
 * @throws DataException
 */
private Object getAggregateValue(int aggrIndex) throws DataException {
  AggrExprInfo aggrInfo=getAggrInfo(aggrIndex);
  if (this.odiResult.getRowCount() == 0) {
    if (aggrInfo.aggregation.getName().equalsIgnoreCase(BuiltInAggregationFactory.TOTAL_COUNT_FUNC) || aggrInfo.aggregation.getName().equalsIgnoreCase(BuiltInAggregationFactory.TOTAL_COUNTDISTINCT_FUNC))     return new Integer(0);
 else     return null;
  }
  try {
    int groupIndex;
    if (aggrInfo.aggregation.getType() == IAggregation.SUMMARY_AGGR) {
      if (aggrInfo.groupLevel == 0)       groupIndex=0;
 else       groupIndex=this.odiResult.getCurrentGroupIndex(aggrInfo.groupLevel);
    }
 else {
      groupIndex=this.odiResult.getCurrentResultIndex();
    }
    return this.aggrValues[aggrIndex].get(groupIndex);
  }
 catch (  DataException e) {
    throw e;
  }
}",0.9100346020761244
77271,"/** 
 * Gets the display string for the value with the given data type and the locale. The value must be the valid data type.
 * @param dataType the data type of the input value
 * @param value the input value to validate
 * @param locale the locale information
 * @return the formatted string
 */
static private String getDisplayValue(String dataType,Object value,ULocale locale){
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType) || value instanceof Date) {
    DateFormat formatter=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM,locale);
    return formatter.format((Date)value);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equalsIgnoreCase(dataType) || value instanceof Float || value instanceof Double) {
    if (value instanceof Float) {
      NumberFormat formatter=NumberFormat.getNumberInstance(locale);
      return formatter.format(((Number)value).floatValue());
    }
 else {
      NumberFormat formatter=NumberFormat.getNumberInstance(locale);
      return formatter.format(((Number)value).doubleValue());
    }
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equalsIgnoreCase(dataType) || value instanceof BigDecimal) {
    NumberFormat formatter=NumberFormat.getNumberInstance(locale);
    return formatter.format(((BigDecimal)value));
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equalsIgnoreCase(dataType) || value instanceof Integer || value instanceof Long) {
    NumberFormat formatter=NumberFormat.getNumberInstance(locale);
    return formatter.format(((Number)value).longValue());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equalsIgnoreCase(dataType) || value instanceof Boolean) {
    if (((Boolean)value).booleanValue()) {
      return getMessage(locale,BooleanPropertyType.BOOLEAN_TRUE_RESOURCE_KEY);
    }
    return getMessage(locale,BooleanPropertyType.BOOLEAN_FALSE_RESOURCE_KEY);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType) || value instanceof String) {
    return (String)value;
  }
 else {
    return value.toString();
  }
}","/** 
 * Gets the display string for the value with the given data type, format and the default locale defined by the class(Locale.US). The value must be the valid data type. That is: <ul> <li>if data type is <code>PARAM_TYPE_DATETIME</code>, then the value must be <code>java.util.Date<code>.</li> <li>if the data type is <code>PARAM_TYPE_FLOAT</code>, then the value must be <code>java.lang.Double</code>.</li> <li>if the data type is <code>PARAM_TYPE_DECIMAL</code>, then the value must be <code>java.math.BigDecimal</code>.</li> <li>if the data type is <code>PARAM_TYPE_BOOLEAN</code>, then the value must be <code>java.lang.Boolean</code>.</li> <li>if the data type is <code>PARAM_TYPE_STRING</code>, then the value must be <code>java.lang.String</code>.</li> </ul>
 * @param dataType the data type of the input value
 * @param format the format pattern to validate
 * @param value the input value to validate
 * @return the formatted string
 */
static public String getDisplayValue(String dataType,String format,Object value){
  return getDisplayValue(dataType,format,value,DEFAULT_LOCALE);
}",0.1268844221105527
77272,"/** 
 * Check whether there is columnReferenceExpression in aggregation. If so, return true. else return false;
 * @return
 */
public static boolean hasAggregationInExpr(IBaseExpression expression){
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    return hasAggregation(text);
  }
 else   if (expression instanceof IConditionalExpression) {
    String expr=getExprText(((IConditionalExpression)expression).getExpression());
    String oprand1=getExprText(((IConditionalExpression)expression).getOperand1());
    String oprand2=getExprText(((IConditionalExpression)expression).getOperand2());
    return hasAggregation(expr) || hasAggregation(oprand1) || hasAggregation(oprand2);
  }
  return false;
}","/** 
 * Check whether there is columnReferenceExpression in aggregation. If so, return true. else return false;
 * @return
 */
public static boolean hasAggregationInExpr(IBaseExpression expression){
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    return ExpressionUtil.hasAggregation(text);
  }
 else   if (expression instanceof IConditionalExpression) {
    String expr=getExprText(((IConditionalExpression)expression).getExpression());
    String oprand1=getExprText(((IConditionalExpression)expression).getOperand1());
    String oprand2=getExprText(((IConditionalExpression)expression).getOperand2());
    return ExpressionUtil.hasAggregation(expr) || ExpressionUtil.hasAggregation(oprand1) || ExpressionUtil.hasAggregation(oprand2);
  }
  return false;
}",0.9621689785624212
77273,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    filters=rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters();
    FilterDefnUtil.getRealFilterList(filters,queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0)   runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0)   runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  return runningOnRS;
}",0.9869818943588208
77274,"public IReportDocument openReportDocument(String systemId,IDocArchiveReader archive,Map options) throws EngineException {
  ReportDocumentReader reader=new ReportDocumentReader(systemId,engine,archive);
  if (options != null) {
    options=new HashMap();
  }
  intializeModuleOptions(options);
  reader.setModuleOptions(options);
  return reader;
}","public IReportDocument openReportDocument(String systemId,IDocArchiveReader archive,Map options) throws EngineException {
  ReportDocumentReader reader=new ReportDocumentReader(systemId,engine,archive);
  if (options == null) {
    options=new HashMap();
  }
  intializeModuleOptions(options);
  reader.setModuleOptions(options);
  return reader;
}",0.9971264367816092
77275,"/** 
 * @param expr
 * @return
 */
private static boolean checkColumnRefInAggregation(CompiledExpression expr){
  int type=expr.getType();
switch (type) {
case CompiledExpression.TYPE_DIRECT_COL_REF:
case CompiledExpression.TYPE_CONSTANT_EXPR:
case CompiledExpression.TYPE_INVALID_EXPR:
    return false;
case CompiledExpression.TYPE_SINGLE_AGGREGATE:
{
    Iterator args=((AggregateExpression)expr).getArguments().iterator();
    while (args.hasNext()) {
      if (flattenExpression((CompiledExpression)args.next()))       return true;
      break;
    }
    break;
  }
case CompiledExpression.TYPE_COMPLEX_EXPR:
{
  Iterator col=((ComplexExpression)expr).getSubExpressions().iterator();
  while (col.hasNext()) {
    if (checkColumnRefInAggregation((CompiledExpression)col.next()))     return true;
  }
  break;
}
}
return false;
}","/** 
 * @param expr
 * @return
 */
private static boolean checkColumnRefInAggregation(CompiledExpression expr){
  int type=expr.getType();
switch (type) {
case CompiledExpression.TYPE_DIRECT_COL_REF:
case CompiledExpression.TYPE_CONSTANT_EXPR:
case CompiledExpression.TYPE_INVALID_EXPR:
    return false;
case CompiledExpression.TYPE_SINGLE_AGGREGATE:
{
    Iterator args=((AggregateExpression)expr).getArguments().iterator();
    while (args.hasNext()) {
      return true;
    }
    break;
  }
case CompiledExpression.TYPE_COMPLEX_EXPR:
{
  Iterator col=((ComplexExpression)expr).getSubExpressions().iterator();
  while (col.hasNext()) {
    if (checkColumnRefInAggregation((CompiledExpression)col.next()))     return true;
  }
  break;
}
}
return false;
}",0.9390320553111252
77276,"/** 
 * @param query
 * @return
 */
private static boolean hasAggregationOnRowObjects(Iterator it){
  while (it.hasNext()) {
    Object o=it.next();
    if (ExpressionCompilerUtil.hasRowExprInAggregation((IBaseExpression)o)) {
      return true;
    }
  }
  return false;
}","/** 
 * @param query
 * @return
 */
private static boolean hasAggregationOnRowObjects(Iterator it){
  while (it.hasNext()) {
    Object o=it.next();
    if (ExpressionCompilerUtil.hasAggregationInExpr((IBaseExpression)o)) {
      return true;
    }
  }
  return false;
}",0.9465930018416208
77277,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0)   runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  }
  return runningOnRS;
}",0.9842449464922712
77278,"private static String generateFileName(String logDirectory,String logPrefix){
  File logDir=new File(logDirectory);
  if ((logDir.isDirectory() && !logDir.isAbsolute()) || logDirectory.startsWith(""String_Node_Str"")) {
    try {
      URL url=OdaJdbcDriver.getInstallDirectory();
      if (url != null) {
        String driverHomeDir=url.getPath();
        logDir=new File(driverHomeDir,logDirectory);
        logDirectory=logDir.getPath();
      }
    }
 catch (    OdaException e) {
    }
catch (    IOException e) {
    }
  }
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String logfileName=(logDirectory.endsWith(""String_Node_Str"") || logDirectory.endsWith(""String_Node_Str"")) ? logDirectory : logDirectory + ""String_Node_Str"";
  logfileName+=logPrefix + ""String_Node_Str"";
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  logfileName+=dateFormat.format(timestamp) + ""String_Node_Str"";
  return logfileName;
}","private static String generateFileName(String logDirectory,String logPrefix){
  File logDir=new File(logDirectory);
  if ((logDir.isDirectory() && !logDir.isAbsolute()) || logDirectory.startsWith(""String_Node_Str"")) {
    try {
      URL url=OdaJdbcDriver.getInstallDirectory();
      if (url != null) {
        String driverHomeDir=url.getPath();
        logDir=new File(driverHomeDir,getQualifiedLogDir(logDirectory));
        if (!logDir.exists()) {
          logDir.mkdir();
        }
        logDirectory=logDir.getPath();
      }
    }
 catch (    OdaException e) {
    }
catch (    IOException e) {
    }
  }
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String logfileName=(logDirectory.endsWith(""String_Node_Str"") || logDirectory.endsWith(""String_Node_Str"")) ? logDirectory : logDirectory + File.separator;
  logfileName+=logPrefix + ""String_Node_Str"";
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  logfileName+=dateFormat.format(timestamp) + ""String_Node_Str"";
  return logfileName;
}",0.926463231615808
77279,"/** 
 * @param filterDefn1
 * @param filterDefn2
 * @return
 */
private static boolean isEqualGroup(IGroupDefinition groupDefn1,IGroupDefinition groupDefn2){
  if (groupDefn1 == groupDefn2)   return true;
  if (groupDefn1 == null || groupDefn2 == null)   return false;
  return isEqualStr(groupDefn1.getName(),groupDefn2.getName()) && isEqualStr(groupDefn1.getKeyColumn(),groupDefn2.getKeyColumn()) && isEqualStr(groupDefn1.getKeyExpression(),groupDefn2.getKeyExpression())&& groupDefn1.getSortDirection() == groupDefn2.getSortDirection();
}","/** 
 * @param filterDefn1
 * @param filterDefn2
 * @return
 */
private static boolean isEqualGroup(IGroupDefinition groupDefn1,IGroupDefinition groupDefn2){
  if (groupDefn1 == groupDefn2)   return true;
  if (groupDefn1 == null || groupDefn2 == null)   return false;
  return isEqualStr(groupDefn1.getName(),groupDefn2.getName()) && isEqualStr(groupDefn1.getKeyColumn(),groupDefn2.getKeyColumn()) && isEqualStr(groupDefn1.getKeyExpression(),groupDefn2.getKeyExpression())&& groupDefn1.getSortDirection() == groupDefn2.getSortDirection() && QueryDefnUtil.isCompatibleSQs(groupDefn1.getSubqueries(),groupDefn2.getSubqueries());
}",0.9247863247863248
77280,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(new ParameterAdapter(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=PARAMS_PREFIX + ""String_Node_Str"" + ((OdaDataSetParameterHandle)modelParam).getParamName()+ ""String_Node_Str"";
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(new ParameterAdapter(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}",0.9406606255480854
77281,"public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   setNativeType(modelParam.getNativeDataType().intValue());
  setType(ModelAdapter.adaptModelDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
    setDefaultInputValue(PARAMS_PREFIX + ""String_Node_Str"" + ((OdaDataSetParameterHandle)modelParam).getParamName()+ ""String_Node_Str"");
  }
 else   setDefaultInputValue(modelParam.getDefaultValue());
}","public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   setNativeType(modelParam.getNativeDataType().intValue());
  setType(ModelAdapter.adaptModelDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
    setDefaultInputValue(ExpressionUtil.createParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName()));
  }
 else   setDefaultInputValue(modelParam.getDefaultValue());
}",0.8021390374331551
77282,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(newParam(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=""String_Node_Str"" + ""String_Node_Str"" + ((OdaDataSetParameterHandle)modelParam).getParamName() + ""String_Node_Str"";
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(newParam(modelParam));
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}",0.939499709133217
77283,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) && !ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=request.getSession().getServletContext().getResourceAsStream(this.reportDesignName);
          reportRunnable=ReportEngineService.getInstance().openReportDesign(is,this.getModuleOptions(request));
        }
 else {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) && !ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=null;
          URL url=null;
          try {
            String reportPath=this.reportDesignName;
            if (!reportPath.startsWith(""String_Node_Str""))             reportPath=""String_Node_Str"" + reportPath;
            url=request.getSession().getServletContext().getResource(reportPath);
            is=url.openStream();
          }
 catch (          Exception e) {
          }
          reportRunnable=ReportEngineService.getInstance().openReportDesign(url.toString(),is,this.getModuleOptions(request));
        }
 else {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9371846180615974
77284,"/** 
 * Open report design by using the input stream
 * @param name the system Id of the report design
 * @param reportStream -the input stream
 * @param options the config options in the report design
 * @return IReportRunnable
 * @throws EngineException
 */
public IReportRunnable openReportDesign(InputStream reportStream,Map options) throws EngineException {
  return engine.openReportDesign(null,reportStream,options);
}","/** 
 * Open report design by using the input stream
 * @param systemId the system Id of the report design
 * @param reportStream -the input stream
 * @param options the config options in the report design
 * @return IReportRunnable
 * @throws EngineException
 */
public IReportRunnable openReportDesign(String systemId,InputStream reportStream,Map options) throws EngineException {
  return engine.openReportDesign(systemId,reportStream,options);
}",0.954233409610984
77285,"/** 
 * Populate the whole tree until all the leaves have no child.
 * @param root
 */
private static void populateRoot(ATreeNode root){
  Object[] toBeIterated=root.getChildren();
  for (int i=0; i < toBeIterated.length; i++) {
    Object value=((ATreeNode)toBeIterated[i]).getDataType();
    List container=new ArrayList();
    findNodeWithValue(root,value.toString(),container);
    for (int j=0; j < container.size(); j++) {
      if (((ATreeNode)container.get(j)).getChildren().length == 0) {
        Object[] os=((ATreeNode)toBeIterated[i]).getChildren();
        for (int k=0; k < os.length; k++) {
          if (!(((ATreeNode)os[k]).getDataType() != null && ((ATreeNode)os[k]).getDataType().equals(((ATreeNode)container.get(j)).getDataType())))           ((ATreeNode)container.get(j)).addChild(os[k]);
        }
      }
    }
  }
}","/** 
 * Populate the whole tree until all the leaves have no child.
 * @param root
 */
private static void populateRoot(ATreeNode root){
  Object[] toBeIterated=root.getChildren();
  for (int i=0; i < toBeIterated.length; i++) {
    Object value=((ATreeNode)toBeIterated[i]).getDataType();
    List container=new ArrayList();
    findNodeWithValue(root,value.toString(),container,new VisitingRecorder());
    for (int j=0; j < container.size(); j++) {
      if (((ATreeNode)container.get(j)).getChildren().length == 0) {
        Object[] os=((ATreeNode)toBeIterated[i]).getChildren();
        for (int k=0; k < os.length; k++) {
          if (!(((ATreeNode)os[k]).getDataType() != null && ((ATreeNode)os[k]).getDataType().equals(((ATreeNode)container.get(j)).getDataType())))           ((ATreeNode)container.get(j)).addChild(os[k]);
        }
      }
    }
  }
}",0.9864785420340976
77286,"/** 
 * Starting from a tree node, find all nodes with given value, and put it to container.
 * @param root
 * @param value
 * @param container
 */
private static void findNodeWithValue(ATreeNode root,String value,List container){
  if (root.getDataType() != null && root.getDataType().equals(value))   container.add(root);
  Object[] children=root.getChildren();
  for (int i=0; i < children.length; i++) {
    findNodeWithValue((ATreeNode)children[i],value,container);
  }
}","/** 
 * Starting from a tree node, find all nodes with given value, and put it to container.
 * @param root
 * @param value
 * @param container
 */
private static void findNodeWithValue(ATreeNode root,String value,List container,VisitingRecorder vr){
  if (root.getType() == ATreeNode.ELEMENT_TYPE && !vr.visit(root.getValue().toString()))   return;
  if (root.getDataType() != null && root.getDataType().equals(value))   container.add(root);
  Object[] children=root.getChildren();
  for (int i=0; i < children.length; i++) {
    findNodeWithValue((ATreeNode)children[i],value,container,vr);
  }
}",0.8864059590316573
77287,"/** 
 * Return the root node of a schema tree.
 * @param fileName
 * @return
 * @throws OdaException
 * @throws MalformedURLException 
 * @throws URISyntaxException 
 */
public static ATreeNode getSchemaTree(String fileName,boolean incAttr) throws OdaException, MalformedURLException, URISyntaxException {
  includeAttribute=incAttr;
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  URI uri=null;
  File f=new File(fileName);
  if (f.exists())   uri=f.toURI();
 else {
    URL url=new URL(fileName);
    uri=new URI(url.getProtocol(),url.getUserInfo(),url.getHost(),url.getPort(),url.getPath(),url.getQuery(),url.getRef());
  }
  if (uri == null) {
    uri=new URI(fileName);
  }
  XSLoader xsLoader=new XMLSchemaLoader();
  XSModel xsModel=xsLoader.loadURI(uri.toString());
  ATreeNode complexTypesRoot=populateComplexTypeTree(xsModel);
  XSNamedMap map=xsModel.getComponents(XSConstants.ELEMENT_DECLARATION);
  ATreeNode root=new ATreeNode();
  root.setValue(""String_Node_Str"");
  for (int i=0; i < map.getLength(); i++) {
    ATreeNode node=new ATreeNode();
    XSElementDecl element=(XSElementDecl)map.item(i);
    node.setValue(element.getName());
    node.setType(ATreeNode.ELEMENT_TYPE);
    node.setDataType(element.getName());
    if (element.getTypeDefinition() instanceof XSComplexTypeDecl) {
      XSComplexTypeDecl complexType=(XSComplexTypeDecl)element.getTypeDefinition();
      if (complexType.getName() != null) {
        node.setDataType(complexType.getName());
        ATreeNode n=findComplexElement(complexTypesRoot,complexType.getName());
        if (n != null)         node.addChild(n.getChildren());
      }
 else {
        addParticleAndAttributeInfo(node,complexType,complexTypesRoot);
      }
    }
    root.addChild(node);
  }
  populateRoot(root);
  return root;
}","/** 
 * Return the root node of a schema tree.
 * @param fileName
 * @return
 * @throws OdaException
 * @throws MalformedURLException 
 * @throws URISyntaxException 
 */
public static ATreeNode getSchemaTree(String fileName,boolean incAttr) throws OdaException, MalformedURLException, URISyntaxException {
  includeAttribute=incAttr;
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  URI uri=null;
  File f=new File(fileName);
  if (f.exists())   uri=f.toURI();
 else {
    URL url=new URL(fileName);
    uri=new URI(url.getProtocol(),url.getUserInfo(),url.getHost(),url.getPort(),url.getPath(),url.getQuery(),url.getRef());
  }
  if (uri == null) {
    uri=new URI(fileName);
  }
  XSLoader xsLoader=new XMLSchemaLoader();
  XSModel xsModel=xsLoader.loadURI(uri.toString());
  ATreeNode complexTypesRoot=populateComplexTypeTree(xsModel);
  XSNamedMap map=xsModel.getComponents(XSConstants.ELEMENT_DECLARATION);
  ATreeNode root=new ATreeNode();
  root.setValue(""String_Node_Str"");
  for (int i=0; i < map.getLength(); i++) {
    ATreeNode node=new ATreeNode();
    XSElementDecl element=(XSElementDecl)map.item(i);
    node.setValue(element.getName());
    node.setType(ATreeNode.ELEMENT_TYPE);
    node.setDataType(element.getName());
    if (element.getTypeDefinition() instanceof XSComplexTypeDecl) {
      XSComplexTypeDecl complexType=(XSComplexTypeDecl)element.getTypeDefinition();
      if (complexType.getName() != null) {
        node.setDataType(complexType.getName());
        ATreeNode n=findComplexElement(complexTypesRoot,complexType.getName());
        if (n != null)         node.addChild(n.getChildren());
      }
 else {
        addParticleAndAttributeInfo(node,complexType,complexTypesRoot,new VisitingRecorder());
      }
    }
    root.addChild(node);
  }
  populateRoot(root);
  return root;
}",0.9938255033557049
77288,"/** 
 * @param node
 * @param complexTypesRoot
 * @param group
 * @throws OdaException
 */
private static void addElementToNode(ATreeNode node,ATreeNode complexTypesRoot,XSModelGroupImpl group) throws OdaException {
  XSObjectList list=group.getParticles();
  for (int j=0; j < list.getLength(); j++) {
    if (((XSParticleDecl)list.item(j)).getTerm() instanceof XSModelGroupImpl) {
      addElementToNode(node,complexTypesRoot,(XSModelGroupImpl)((XSParticleDecl)list.item(j)).getTerm());
      continue;
    }
    ATreeNode childNode=new ATreeNode();
    childNode.setValue(((XSParticleDecl)list.item(j)).getTerm().getName());
    String dataType=((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition().getName();
    if (dataType == null || dataType.length() == 0)     dataType=childNode.getValue().toString();
    childNode.setDataType(dataType);
    childNode.setType(ATreeNode.ELEMENT_TYPE);
    XSTypeDefinition xstype=((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition();
    if ((!dataType.equals(""String_Node_Str"")) && xstype instanceof XSComplexTypeDecl) {
      if (xstype.getName() == null)       addParticleAndAttributeInfo(childNode,(XSComplexTypeDecl)xstype,complexTypesRoot);
      ATreeNode n=findComplexElement(complexTypesRoot,dataType);
      if (n != null) {
        childNode.addChild(n.getChildren());
      }
    }
    node.addChild(childNode);
  }
}","/** 
 * @param node
 * @param complexTypesRoot
 * @param group
 * @throws OdaException
 */
private static void addElementToNode(ATreeNode node,ATreeNode complexTypesRoot,XSModelGroupImpl group,VisitingRecorder vr) throws OdaException {
  if (!vr.visit(node.getValue().toString()))   return;
  XSObjectList list=group.getParticles();
  for (int j=0; j < list.getLength(); j++) {
    if (((XSParticleDecl)list.item(j)).getTerm() instanceof XSModelGroupImpl) {
      addElementToNode(node,complexTypesRoot,(XSModelGroupImpl)((XSParticleDecl)list.item(j)).getTerm(),vr);
      continue;
    }
    ATreeNode childNode=new ATreeNode();
    childNode.setValue(((XSParticleDecl)list.item(j)).getTerm().getName());
    String dataType=((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition().getName();
    if (dataType == null || dataType.length() == 0)     dataType=childNode.getValue().toString();
    childNode.setDataType(dataType);
    childNode.setType(ATreeNode.ELEMENT_TYPE);
    XSTypeDefinition xstype=((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition();
    if ((!dataType.equals(""String_Node_Str"")) && xstype instanceof XSComplexTypeDecl) {
      if (xstype.getName() == null)       addParticleAndAttributeInfo(childNode,(XSComplexTypeDecl)xstype,complexTypesRoot,vr);
      ATreeNode n=findComplexElement(complexTypesRoot,dataType);
      if (n != null) {
        childNode.addChild(n.getChildren());
      }
    }
    node.addChild(childNode);
  }
}",0.9722887444406432
77289,"/** 
 * Add the particles and attributes that defined in an implicitly defined ComplexType to the node.
 * @param node
 * @param complexType
 * @throws OdaException 
 */
private static void addParticleAndAttributeInfo(ATreeNode node,XSComplexTypeDecl complexType,ATreeNode complexTypesRoot) throws OdaException {
  XSParticle particle=complexType.getParticle();
  if (particle != null) {
    addElementToNode(node,complexTypesRoot,(XSModelGroupImpl)particle.getTerm());
  }
  if (!includeAttribute)   return;
  XSAttributeGroupDecl group=complexType.getAttrGrp();
  if (group != null) {
    XSObjectList list=group.getAttributeUses();
    for (int j=0; j < list.getLength(); j++) {
      ATreeNode childNode=new ATreeNode();
      childNode.setValue(((XSAttributeUseImpl)list.item(j)).getAttrDeclaration().getName());
      childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
      node.addChild(childNode);
    }
  }
}","/** 
 * Add the particles and attributes that defined in an implicitly defined ComplexType to the node.
 * @param node
 * @param complexType
 * @throws OdaException 
 */
private static void addParticleAndAttributeInfo(ATreeNode node,XSComplexTypeDecl complexType,ATreeNode complexTypesRoot,VisitingRecorder vr) throws OdaException {
  if (!vr.visit(node.getValue().toString()))   return;
  XSParticle particle=complexType.getParticle();
  if (particle != null) {
    addElementToNode(node,complexTypesRoot,(XSModelGroupImpl)particle.getTerm(),vr);
  }
  if (!includeAttribute)   return;
  XSAttributeGroupDecl group=complexType.getAttrGrp();
  if (group != null) {
    XSObjectList list=group.getAttributeUses();
    for (int j=0; j < list.getLength(); j++) {
      ATreeNode childNode=new ATreeNode();
      childNode.setValue(((XSAttributeUseImpl)list.item(j)).getAttrDeclaration().getName());
      childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
      node.addChild(childNode);
    }
  }
}",0.9589905362776026
77290,"protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableLM.getContent(),tableLM.getLayoutInfo());
  regionLM.initialize(header,tableLM.lastRowArea);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      count++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
    tableLM.setRepeatCount(tableLM.getRepeatCount() + count);
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    IArea tocAnchor=AreaFactory.createTableGroupArea((IGroupContent)content);
    tableLM.addArea(tocAnchor);
    tableLM.setRepeatCount(tableLM.getRepeatCount() + 1);
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableLM.getContent(),tableLM.getLayoutInfo());
  regionLM.initialize(header,tableLM.lastRowArea);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      count++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
    tableLM.setRepeatCount(tableLM.getRepeatCount() + count);
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.951304347826087
77291,"protected Value resolveProperty(int index){
  CSSStylableElement parent=(CSSStylableElement)cell.getParent();
  IStyle pcs=null;
  if (parent != null) {
    pcs=parent.getComputedStyle();
  }
  IStyle s=cell.getStyle();
  Value sv=s == null ? null : (Value)s.getProperty(index);
  if (sv == null && columnStyle != null) {
    if (engine.isInheritedProperty(index) == false) {
      if (isBackgroundProperties(index)) {
        Value rowValue=null;
        if (rowStyle != null) {
          rowValue=(Value)rowStyle.getProperty(index);
        }
        if (rowValue == null) {
          sv=(Value)columnStyle.getProperty(index);
        }
      }
 else       if (index == STYLE_VERTICAL_ALIGN) {
        if (rowStyle != null) {
          sv=(Value)rowStyle.getProperty(index);
        }
        if (sv == null) {
          sv=(Value)columnStyle.getProperty(index);
        }
      }
 else {
        sv=(Value)columnStyle.getProperty(index);
      }
    }
  }
  Value cv=engine.resolveStyle(elt,index,sv,pcs);
  return cv;
}","protected Value resolveProperty(int index){
  CSSStylableElement parent=(CSSStylableElement)cell.getParent();
  IStyle pcs=null;
  if (parent != null) {
    pcs=parent.getComputedStyle();
  }
  IStyle s=cell.getStyle();
  Value sv=s == null ? null : (Value)s.getProperty(index);
  if (sv == null && columnStyle != null) {
    if (engine.isInheritedProperty(index) == false) {
      if (isBackgroundProperties(index)) {
        Value rowValue=null;
        if (rowStyle != null) {
          rowValue=(Value)rowStyle.getProperty(index);
        }
        if (rowValue == null) {
          sv=(Value)columnStyle.getProperty(index);
        }
      }
 else       if (index == STYLE_VERTICAL_ALIGN) {
        if (rowStyle != null) {
          sv=(Value)rowStyle.getProperty(index);
        }
        if (sv == null) {
          sv=(Value)columnStyle.getProperty(index);
        }
      }
 else {
        sv=(Value)columnStyle.getProperty(index);
      }
    }
 else {
      sv=(Value)rowStyle.getProperty(index);
      if (sv == null) {
        sv=(Value)columnStyle.getProperty(index);
      }
    }
  }
  Value cv=engine.resolveStyle(elt,index,sv,pcs);
  return cv;
}",0.935528120713306
77292,"/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  LinkedHashMap lhmLookup=new LinkedHashMap();
  Collection co=getRowExpressions(cm,iae);
  Iterator it=co.iterator();
  String sxp;
  int i=0;
  while (it.hasNext()) {
    sxp=(String)it.next();
    lhmLookup.put(sxp,new Integer(i++));
  }
  final int iColumnCount=i;
  final List liResultSet=new ArrayList();
  Object[] oaTuple;
  int iColumnIndex;
  boolean hasFirst=idre.first();
  if (hasFirst) {
    do {
      oaTuple=new Object[iColumnCount];
      it=co.iterator();
      iColumnIndex=0;
      while (it.hasNext()) {
        oaTuple[iColumnIndex++]=idre.evaluate((String)it.next());
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  final GroupKey[] groupKeys=findGroupKeys(cm);
  for (i=0; i < groupKeys.length; i++) {
    groupKeys[i].setKeyIndex(((Integer)lhmLookup.get(groupKeys[i].getKey())).intValue());
  }
  final ResultSetWrapper rsw=new ResultSetWrapper(lhmLookup.keySet(),liResultSet,groupKeys);
  SeriesDefinition sdGrouping=null;
  String[] saOrthogonalDataDefinitions=null;
  if (cm instanceof ChartWithAxes) {
    ArrayList alODD=new ArrayList(8);
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis[] axaBase=cwa.getBaseAxes();
    Axis[] axaOrthogonal=null;
    Series SE;
    String sExpression;
    EList elSD, elDD;
    for (int j=0; j < axaBase.length; j++) {
      sdGrouping=(SeriesDefinition)axaBase[j].getSeriesDefinitions().get(0);
      axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
      for (i=0; i < axaOrthogonal.length; i++) {
        elSD=axaOrthogonal[i].getSeriesDefinitions();
        for (int k=0; k < elSD.size(); k++) {
          SE=((SeriesDefinition)elSD.get(k)).getDesignTimeSeries();
          if (SE != null) {
            elDD=SE.getDataDefinition();
            for (int n=0; n < elDD.size(); n++) {
              sExpression=((Query)elDD.get(n)).getDefinition();
              if (sExpression != null && sExpression.trim().length() > 0 && !alODD.contains(sExpression)) {
                alODD.add(sExpression);
              }
            }
          }
        }
      }
    }
    saOrthogonalDataDefinitions=(String[])alODD.toArray(new String[alODD.size()]);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ArrayList alODD=new ArrayList(8);
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    Series SE;
    String sExpression;
    EList elSD, elDD;
    sdGrouping=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
    elSD=sdGrouping.getSeriesDefinitions();
    for (int k=0; k < elSD.size(); k++) {
      SE=((SeriesDefinition)elSD.get(k)).getDesignTimeSeries();
      if (SE != null) {
        elDD=SE.getDataDefinition();
        for (int n=0; n < elDD.size(); n++) {
          sExpression=((Query)elDD.get(n)).getDefinition();
          if (sExpression != null && sExpression.trim().length() > 0 && !alODD.contains(sExpression)) {
            alODD.add(sExpression);
          }
        }
      }
    }
    saOrthogonalDataDefinitions=(String[])alODD.toArray(new String[alODD.size()]);
  }
  rsw.applyBaseSeriesSortingAndGrouping(sdGrouping,saOrthogonalDataDefinitions);
  return rsw;
}","/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  LinkedHashMap lhmLookup=new LinkedHashMap();
  Collection co=getRowExpressions(cm,iae);
  Iterator it=co.iterator();
  String sxp;
  int i=0;
  while (it.hasNext()) {
    sxp=(String)it.next();
    lhmLookup.put(sxp,new Integer(i++));
  }
  final int iColumnCount=i;
  final List liResultSet=new ArrayList();
  Object[] oaTuple;
  int iColumnIndex;
  boolean hasFirst=idre.first();
  if (hasFirst) {
    do {
      oaTuple=new Object[iColumnCount];
      it=co.iterator();
      iColumnIndex=0;
      while (it.hasNext()) {
        oaTuple[iColumnIndex++]=idre.evaluate((String)it.next());
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  final GroupKey[] groupKeys=findGroupKeys(cm);
  for (i=0; i < groupKeys.length; i++) {
    groupKeys[i].setKeyIndex(((Integer)lhmLookup.get(groupKeys[i].getKey())).intValue());
  }
  final ResultSetWrapper rsw=new ResultSetWrapper(lhmLookup.keySet(),liResultSet,groupKeys);
  SeriesDefinition sdGrouping=null;
  String[] saOrthogonalDataDefinitions=null;
  if (cm instanceof ChartWithAxes) {
    ArrayList alODD=new ArrayList(8);
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis[] axaBase=cwa.getBaseAxes();
    Axis[] axaOrthogonal=null;
    Series SE;
    String sExpression;
    EList elSD, elDD;
    for (int j=0; j < axaBase.length; j++) {
      sdGrouping=(SeriesDefinition)axaBase[j].getSeriesDefinitions().get(0);
      axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
      for (i=0; i < axaOrthogonal.length; i++) {
        elSD=axaOrthogonal[i].getSeriesDefinitions();
        for (int k=0; k < elSD.size(); k++) {
          SE=((SeriesDefinition)elSD.get(k)).getDesignTimeSeries();
          if (SE != null) {
            elDD=SE.getDataDefinition();
            for (int n=0; n < elDD.size(); n++) {
              sExpression=((Query)elDD.get(n)).getDefinition();
              if (sExpression != null && sExpression.trim().length() > 0 && !alODD.contains(sExpression)) {
                alODD.add(sExpression);
              }
            }
          }
        }
      }
    }
    saOrthogonalDataDefinitions=(String[])alODD.toArray(new String[alODD.size()]);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ArrayList alODD=new ArrayList(8);
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    Series SE;
    String sExpression;
    EList elSD, elDD;
    sdGrouping=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
    elSD=sdGrouping.getSeriesDefinitions();
    for (int k=0; k < elSD.size(); k++) {
      SE=((SeriesDefinition)elSD.get(k)).getDesignTimeSeries();
      if (SE != null) {
        elDD=SE.getDataDefinition();
        for (int n=0; n < elDD.size(); n++) {
          sExpression=((Query)elDD.get(n)).getDefinition();
          if (sExpression != null && sExpression.trim().length() > 0 && !alODD.contains(sExpression)) {
            alODD.add(sExpression);
          }
        }
      }
    }
    saOrthogonalDataDefinitions=(String[])alODD.toArray(new String[alODD.size()]);
  }
  if (rsw.getRowCount() > 0) {
    rsw.applyBaseSeriesSortingAndGrouping(sdGrouping,saOrthogonalDataDefinitions);
  }
  return rsw;
}",0.9945014117996732
77293,"/** 
 * Groups rows of data as specified in the grouping criteria for the series definition
 * @throws ChartException
 */
public void applyBaseSeriesSortingAndGrouping(SeriesDefinition sd,String[] saExpressionKeys) throws ChartException {
  if (bBaseGroupingApplied) {
    return;
  }
  bBaseGroupingApplied=true;
  boolean needBaseGrouping=true;
  final SeriesGrouping sg=sd.getGrouping();
  if (sg == null || !sg.isEnabled()) {
    needBaseGrouping=false;
    ;
  }
  final Series seBaseDesignTime=sd.getDesignTimeSeries();
  final Query q=(Query)seBaseDesignTime.getDataDefinition().get(0);
  final int iSortColumnIndex=((Integer)htLookup.get(q.getDefinition())).intValue();
  SortOption so=null;
  if (!sd.isSetSorting()) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{sd},ULocale.getDefault()));
    if (needBaseGrouping) {
      so=SortOption.ASCENDING_LITERAL;
    }
  }
 else {
    so=sd.getSorting();
  }
  new GroupingSorter().sort(workingResultSet,iSortColumnIndex,so,iaGroupBreaks);
  if (!needBaseGrouping) {
    return;
  }
  final String sFunctionName=sg.getAggregateExpression();
  final int iOrthogonalSeriesCount=saExpressionKeys.length;
  IAggregateFunction[] iafa=new IAggregateFunction[iOrthogonalSeriesCount];
  try {
    for (int i=0; i < iOrthogonalSeriesCount; i++) {
      iafa[i]=PluginSettings.instance().getAggregateFunction(sFunctionName);
      iafa[i].initialize();
    }
  }
 catch (  ChartException pex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,pex);
  }
  final DataType dtGrouping=sg.getGroupType();
  if (dtGrouping == DataType.NUMERIC_LITERAL) {
    groupNumerically(workingResultSet,iSortColumnIndex,saExpressionKeys,iaGroupBreaks,null,sg.getGroupingInterval(),iafa);
  }
 else   if (dtGrouping == DataType.DATE_TIME_LITERAL) {
    groupDateTime(workingResultSet,iSortColumnIndex,saExpressionKeys,iaGroupBreaks,null,sg.getGroupingInterval(),sg.getGroupingUnit(),iafa);
  }
 else   if (dtGrouping == DataType.TEXT_LITERAL) {
    groupTextually(workingResultSet,iSortColumnIndex,saExpressionKeys,iaGroupBreaks,null,sg.getGroupingInterval(),iafa);
  }
  initializeMeta();
}","/** 
 * Groups rows of data as specified in the grouping criteria for the series definition
 * @throws ChartException
 */
public void applyBaseSeriesSortingAndGrouping(SeriesDefinition sd,String[] saExpressionKeys) throws ChartException {
  if (bBaseGroupingApplied) {
    return;
  }
  bBaseGroupingApplied=true;
  boolean needBaseGrouping=true;
  final SeriesGrouping sg=sd.getGrouping();
  if (sg == null || !sg.isEnabled()) {
    needBaseGrouping=false;
    ;
  }
  final Series seBaseDesignTime=sd.getDesignTimeSeries();
  final Query q=(Query)seBaseDesignTime.getDataDefinition().get(0);
  final int iSortColumnIndex=((Integer)htLookup.get(q.getDefinition())).intValue();
  SortOption so=null;
  if (!sd.isSetSorting()) {
    if (needBaseGrouping) {
      so=SortOption.ASCENDING_LITERAL;
    }
  }
 else {
    so=sd.getSorting();
  }
  new GroupingSorter().sort(workingResultSet,iSortColumnIndex,so,iaGroupBreaks);
  if (!needBaseGrouping) {
    return;
  }
  final String sFunctionName=sg.getAggregateExpression();
  final int iOrthogonalSeriesCount=saExpressionKeys.length;
  IAggregateFunction[] iafa=new IAggregateFunction[iOrthogonalSeriesCount];
  try {
    for (int i=0; i < iOrthogonalSeriesCount; i++) {
      iafa[i]=PluginSettings.instance().getAggregateFunction(sFunctionName);
      iafa[i].initialize();
    }
  }
 catch (  ChartException pex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,pex);
  }
  final DataType dtGrouping=sg.getGroupType();
  if (dtGrouping == DataType.NUMERIC_LITERAL) {
    groupNumerically(workingResultSet,iSortColumnIndex,saExpressionKeys,iaGroupBreaks,null,sg.getGroupingInterval(),iafa);
  }
 else   if (dtGrouping == DataType.DATE_TIME_LITERAL) {
    groupDateTime(workingResultSet,iSortColumnIndex,saExpressionKeys,iaGroupBreaks,null,sg.getGroupingInterval(),sg.getGroupingUnit(),iafa);
  }
 else   if (dtGrouping == DataType.TEXT_LITERAL) {
    groupTextually(workingResultSet,iSortColumnIndex,saExpressionKeys,iaGroupBreaks,null,sg.getGroupingInterval(),iafa);
  }
  initializeMeta();
}",0.9744071378257808
77294,"public URL getResource(String name){
  URL url=super.getResource(name);
  if (url == null) {
    return loader.getResource(name);
  }
  return url;
}","public URL getResource(String name){
  URL url=ApplicationClassLoader.class.getClassLoader().getResource(name);
  if (url == null) {
    if (loader == null) {
      createWrappedClassLoaders();
    }
    return loader.getResource(name);
  }
  return null;
}",0.6995073891625616
77295,"protected void createClassLoaderFromDesign(){
  IReportRunnable runnable=context.getRunnable();
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    ArrayList urls=new ArrayList();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLibHandle lib=(ScriptLibHandle)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY);
      if (url != null) {
        urls.add(url);
      }
    }
    if (urls.size() != 0) {
      URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
      ClassLoader parent=appClassLoader == null ? systemClassLoader : appClassLoader;
      designClassLoader=new URLClassLoader(jarUrls,parent);
    }
  }
}","protected ClassLoader createClassLoaderFromDesign(ClassLoader parent){
  IReportRunnable runnable=context.getRunnable();
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    ArrayList urls=new ArrayList();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLibHandle lib=(ScriptLibHandle)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY);
      if (url != null) {
        urls.add(url);
      }
    }
    if (urls.size() != 0) {
      URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
      return new URLClassLoader(jarUrls,parent);
    }
  }
  return parent;
}",0.8904016337644656
77296,"protected void createClassLoaderFromProperty(){
  systemClassLoader=ExecutionContext.class.getClassLoader();
  ArrayList urls=new ArrayList();
  for (int i=0; i < classPathes.length; i++) {
    String classPath=System.getProperty(classPathes[i]);
    if (classPath != null && classPath.length() != 0) {
      String[] jars=classPath.split(PROPERTYSEPARATOR,-1);
      if (jars != null && jars.length != 0) {
        for (int j=0; j < jars.length; j++) {
          File file=new File(jars[j]);
          try {
            urls.add(file.toURL());
          }
 catch (          MalformedURLException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  if (urls.size() != 0) {
    systemClassLoader=new URLClassLoader((URL[])urls.toArray(new URL[0]),systemClassLoader);
  }
}","protected ClassLoader createClassLoaderFromProperty(ClassLoader parent){
  ArrayList urls=new ArrayList();
  for (int i=0; i < classPathes.length; i++) {
    String classPath=System.getProperty(classPathes[i]);
    if (classPath != null && classPath.length() != 0) {
      String[] jars=classPath.split(PROPERTYSEPARATOR,-1);
      if (jars != null && jars.length != 0) {
        for (int j=0; j < jars.length; j++) {
          File file=new File(jars[j]);
          try {
            urls.add(file.toURL());
          }
 catch (          MalformedURLException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  if (urls.size() != 0) {
    return new URLClassLoader((URL[])urls.toArray(new URL[0]),parent);
  }
  return parent;
}",0.899165061014772
77297,"public Class loadClass(String className) throws ClassNotFoundException {
  try {
    return super.loadClass(className);
  }
 catch (  ClassNotFoundException ex) {
    return loader.loadClass(className);
  }
}","public Class loadClass(String className) throws ClassNotFoundException {
  try {
    return Class.forName(className);
  }
 catch (  ClassNotFoundException ex) {
    if (loader == null) {
      createWrappedClassLoaders();
    }
    return loader.loadClass(className);
  }
}",0.8066528066528067
77298,"protected void createWrappedClassLoaders(){
}","protected void createWrappedClassLoaders(){
  ClassLoader root=getAppClassLoader();
  if (root == null) {
    root=ExecutionContext.class.getClassLoader();
  }
  loader=createClassLoaderFromProperty(root);
  loader=createClassLoaderFromDesign(loader);
}",0.3020134228187919
77299,"public int[] resolve(int specifiedWidth,int maxWidth){
  assert(specifiedWidth <= maxWidth);
  int columnNumber=table.getColumnCount();
  int[] columns=new int[columnNumber];
  int columnWithWidth=0;
  int colSum=0;
  for (int j=0; j < table.getColumnCount(); j++) {
    IColumn column=(IColumn)table.getColumn(j);
    int columnWidth=getDimensionValue(column.getWidth(),tableWidth);
    if (columnWidth > 0) {
      columns[j]=columnWidth;
      colSum+=columnWidth;
      columnWithWidth++;
    }
 else {
      columns[j]=-1;
    }
  }
  if (columnWithWidth == columnNumber) {
    if (colSum <= maxWidth) {
      return columns;
    }
 else {
      int delta=(colSum - maxWidth) / columnNumber;
      assert(delta >= 0);
      for (int i=0; i < columnNumber; i++) {
        columns[i]-=delta;
      }
      return columns;
    }
  }
 else {
    if (specifiedWidth == 0) {
      if (colSum < maxWidth) {
        int colNumber=columnNumber - columnWithWidth;
        int aw=(maxWidth - colSum) / colNumber;
        distributeWidth(columns,colNumber,aw);
      }
 else {
        distributeWidth(columns,columnNumber,maxWidth / columnNumber);
      }
    }
 else {
      if (colSum < specifiedWidth) {
        int colNumber=columnNumber - columnWithWidth;
        int aw=(specifiedWidth - colSum) / colNumber;
        distributeWidth(columns,colNumber,aw);
      }
 else {
        if (colSum < maxWidth) {
          int colNumber=columnNumber - columnWithWidth;
          int aw=(maxWidth - colSum) / colNumber;
          distributeWidth(columns,colNumber,aw);
        }
 else {
          distributeWidth(columns,columnNumber,specifiedWidth / columnNumber);
        }
      }
    }
  }
  return columns;
}","public int[] resolve(int specifiedWidth,int maxWidth){
  assert(specifiedWidth <= maxWidth);
  int columnNumber=table.getColumnCount();
  int[] columns=new int[columnNumber];
  int columnWithWidth=0;
  int colSum=0;
  for (int j=0; j < table.getColumnCount(); j++) {
    IColumn column=(IColumn)table.getColumn(j);
    int columnWidth=getDimensionValue(column.getWidth(),tableWidth);
    if (columnWidth > 0) {
      columns[j]=columnWidth;
      colSum+=columnWidth;
      columnWithWidth++;
    }
 else {
      columns[j]=-1;
    }
  }
  if (columnWithWidth == columnNumber) {
    if (colSum <= maxWidth) {
      return columns;
    }
 else {
      float delta=colSum - maxWidth;
      for (int i=0; i < columnNumber; i++) {
        columns[i]-=(int)(delta * columns[i] / colSum);
      }
      return columns;
    }
  }
 else {
    if (specifiedWidth == 0) {
      if (colSum < maxWidth) {
        distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
      }
 else {
        redistributeWidth(columns,colSum - maxWidth + (columnNumber - columnWithWidth) * maxWidth / columnNumber,maxWidth,colSum);
      }
    }
 else {
      if (colSum < specifiedWidth) {
        distributeLeftWidth(columns,(specifiedWidth - colSum) / columnNumber - columnWithWidth);
      }
 else {
        if (colSum < maxWidth) {
          distributeLeftWidth(columns,(maxWidth - colSum) / (columnNumber - columnWithWidth));
        }
 else {
          redistributeWidth(columns,colSum - specifiedWidth + (columnNumber - columnWithWidth) * specifiedWidth / columnNumber,specifiedWidth,colSum);
        }
      }
    }
  }
  return columns;
}",0.5787589498806682
77300,"public boolean addArea(IArea area){
  assert(area instanceof RowArea);
  RowArea row=(RowArea)area;
  lastRowArea=row;
  return super.addArea(area);
}","public boolean addArea(IArea area){
  if (area instanceof RowArea) {
    lastRowArea=(RowArea)area;
  }
  return super.addArea(area);
}",0.8631578947368421
77301,"/** 
 * Sort the group array according to the values in sortKeys[] of GroupBoundaryInfo intances. within them.
 * @param groupArray
 */
void sortGroupBoundaryInfos(ArrayList[] groupArray){
  for (int i=0; i < groupArray.length; i++) {
    Object[] toBeSorted=new Object[groupArray[i].size()];
    for (int j=0; j < toBeSorted.length; j++) {
      toBeSorted[j]=groupArray[i].get(j);
    }
    Arrays.sort(toBeSorted,new GroupBoundaryInfoComparator());
    groupArray[i].clear();
    for (int j=0; j < toBeSorted.length; j++) {
      groupArray[i].add(toBeSorted[j]);
    }
  }
}","/** 
 * Sort the group array according to the values in sortKeys[] of GroupBoundaryInfo intances. within them.
 * @param groupArray
 */
void sortGroupBoundaryInfos(List[] groupArray){
  for (int i=0; i < groupArray.length; i++) {
    Object[] toBeSorted=new Object[groupArray[i].size()];
    for (int j=0; j < toBeSorted.length; j++) {
      toBeSorted[j]=groupArray[i].get(j);
    }
    Arrays.sort(toBeSorted,new GroupBoundaryInfoComparator());
    groupArray[i].clear();
    for (int j=0; j < toBeSorted.length; j++) {
      groupArray[i].add(toBeSorted[j]);
    }
  }
}",0.9956559513466552
77302,"/** 
 * This method is used to filter out the GroupBoundaryInfo instances that are marked as ""not accepted"" from GroupBoundaryInfos.
 * @param groupArray
 * @return
 */
ArrayList[] filterGroupBoundaryInfos(ArrayList[] groupArray){
  ArrayList[] result=new ArrayList[groupArray.length];
  for (int i=0; i < result.length; i++) {
    result[i]=new ArrayList();
  }
  for (int i=0; i < groupArray.length; i++) {
    for (int j=0; j < groupArray[i].size(); j++) {
      if (((GroupBoundaryInfo)groupArray[i].get(j)).isAccpted()) {
        result[i].add(groupArray[i].get(j));
      }
    }
  }
  return result;
}","/** 
 * This method is used to filter out the GroupBoundaryInfo instances that are marked as ""not accepted"" from GroupBoundaryInfos.
 * @param groupArray
 * @return
 */
List[] filterGroupBoundaryInfos(List[] groupArray){
  List[] result=new List[groupArray.length];
  for (int i=0; i < result.length; i++) {
    result[i]=new CachedList(GroupBoundaryInfo.getCreator());
  }
  for (int i=0; i < groupArray.length; i++) {
    for (int j=0; j < groupArray[i].size(); j++) {
      if (((GroupBoundaryInfo)groupArray[i].get(j)).isAccpted()) {
        result[i].add(groupArray[i].get(j));
      }
    }
  }
  return result;
}",0.9502852485737572
77303,"/** 
 * Releases the palette viewer from the edit domain
 * @see Page#dispose()
 */
public void dispose(){
  super.dispose();
  tree.dispose();
  treeCommon.dispose();
}","/** 
 * Releases the palette viewer from the edit domain
 * @see Page#dispose()
 */
public void dispose(){
  tree.dispose();
  super.dispose();
}",0.8980891719745223
77304,"/** 
 * Creates the palette viewer and its control.
 * @see Page#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite parent){
  if (getViewer() == null) {
    return;
  }
  tree=new Tree(parent,SWT.NONE);
  treeCommon.setTree(tree);
  treeCommon.setExpressionViewer(getViewer());
  treeCommon.createDefaultExpressionTree(SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets());
  treeCommon.addMouseTrackListener();
  treeCommon.addMouseListener();
  treeCommon.addDragSupportToTree();
  treeCommon.addDropSupportToViewer();
  tree.setToolTipText(""String_Node_Str"");
}","/** 
 * Creates the palette viewer and its control.
 * @see Page#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite parent){
  if (getViewer() == null) {
    return;
  }
  tree=new Tree(parent,SWT.NONE);
  treeCommon.setTree(tree);
  treeCommon.setExpressionViewer(getViewer());
  treeCommon.createDefaultExpressionTree(SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets());
  treeCommon.addMouseTrackListener();
  treeCommon.addMouseListener();
  treeCommon.addDragSupportToTree();
  treeCommon.addDropSupportToViewer();
  tree.setToolTipText(""String_Node_Str"");
  tree.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      treeCommon.removeDropSupportToViewer();
    }
  }
);
}",0.8873239436619719
77305,"/** 
 * Adds drop support to viewer.Must set viewer before execution.
 */
public void addDropSupportToViewer(){
  Assert.isNotNull(expressionViewer);
  final StyledText text=expressionViewer.getTextWidget();
  dropTarget=new DropTarget(text,DND.DROP_COPY | DND.DROP_DEFAULT);
  dropTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dropTarget.addDropListener(new DropTargetAdapter(){
    public void dragEnter(    DropTargetEvent event){
      text.setFocus();
      if (event.detail == DND.DROP_DEFAULT)       event.detail=DND.DROP_COPY;
      if (event.detail != DND.DROP_COPY)       event.detail=DND.DROP_NONE;
    }
    public void dragOver(    DropTargetEvent event){
      event.feedback=DND.FEEDBACK_SCROLL | DND.FEEDBACK_INSERT_BEFORE;
    }
    public void dragOperationChanged(    DropTargetEvent event){
      dragEnter(event);
    }
    public void drop(    DropTargetEvent event){
      if (event.data instanceof String)       insertText((String)event.data);
    }
  }
);
}","/** 
 * Adds drop support to viewer.Must set viewer before execution.
 */
public void addDropSupportToViewer(){
  Assert.isNotNull(expressionViewer);
  if (dropTarget == null || dropTarget.isDisposed()) {
    final StyledText text=expressionViewer.getTextWidget();
    dropTarget=new DropTarget(text,DND.DROP_COPY | DND.DROP_DEFAULT);
    dropTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    dropTargetAdapter=new DropTargetAdapter(){
      public void dragEnter(      DropTargetEvent event){
        text.setFocus();
        if (event.detail == DND.DROP_DEFAULT)         event.detail=DND.DROP_COPY;
        if (event.detail != DND.DROP_COPY)         event.detail=DND.DROP_NONE;
      }
      public void dragOver(      DropTargetEvent event){
        event.feedback=DND.FEEDBACK_SCROLL | DND.FEEDBACK_INSERT_BEFORE;
      }
      public void dragOperationChanged(      DropTargetEvent event){
        dragEnter(event);
      }
      public void drop(      DropTargetEvent event){
        if (event.data instanceof String)         insertText((String)event.data);
      }
    }
;
    dropTarget.addDropListener(dropTargetAdapter);
  }
}",0.9035250463821892
77306,"protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle binding){
  String name=binding.getName();
  String expr=binding.getExpression();
  String type=binding.getDataType();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=new ScriptExpression(expr,dbType);
  dbExpr.setGroupName(binding.getAggregrateOn());
  transfer.getResultSetExpressions().put(name,dbExpr);
}","protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle binding){
  String name=binding.getName();
  String expr=binding.getExpression();
  String type=binding.getDataType();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=new ScriptExpression(expr,dbType);
  dbExpr.setGroupName(binding.getAggregateOn());
  transfer.getResultSetExpressions().put(name,dbExpr);
}",0.99880810488677
77307,"/** 
 * @param group a grouping in a list
 * @param handle handle to a grouping element
 */
protected void handleListingGroup(GroupDesign group,GroupHandle handle,Object value){
  IGroupDefinition groupDefn=handleGroup(group,handle);
  pushQuery(groupDefn);
  handleListingBand(group.getHeader(),value);
  handleListingBand(group.getFooter(),value);
  popQuery();
}","/** 
 * @param group a grouping in a list
 * @param handle handle to a grouping element
 */
protected void handleListingGroup(GroupDesign group,GroupHandle handle,Object value){
  IGroupDefinition groupDefn=handleGroup(group,handle);
  pushQuery(groupDefn);
  transformExpressions(group);
  handleListingBand(group.getHeader(),value);
  handleListingBand(group.getFooter(),value);
  popQuery();
}",0.9592641261498028
77308,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    filters=rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters();
    FilterDefnUtil.getRealFilterList(filters,queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0)   runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    filters=rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters();
    FilterDefnUtil.getRealFilterList(filters,queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0)   runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  return runningOnRS;
}",0.979293544457978
77309,"public boolean compose(){
  boolean hasMore;
  while (hasMore=hasMore() && !PDFTextLM.this.needPause()) {
    handleNext();
  }
  return hasMore;
}","public boolean compose(){
  boolean hasMore;
  while ((hasMore=hasMore()) && !PDFTextLM.this.needPause()) {
    handleNext();
  }
  return hasMore;
}",0.9932432432432432
77310,"public void handleSelectionChanged(ISelection selection){
  if (getSourceViewer() == null || !getSourceViewer().getTextWidget().isVisible()) {
    return;
  }
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    settingText=true;
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1 && sel[0] instanceof DesignElementHandle) {
      editObject=sel[0];
      palettePage.getSupport().setCurrentEditObject(editObject);
      if (editObject instanceof ExtendedItemHandle) {
        disableEditor();
        cmbExpList.removeAll();
        cmbItemLastSelected=null;
        getSourceViewer().getTextWidget().setEnabled(true);
        setEditorText(((ExtendedItemHandle)editObject).getExternalScript());
        context.setVariable(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        setComboViewerInput(editObject);
        cmbItemLastSelected=null;
        setEditorText(""String_Node_Str"");
        if (cmbExpList.getItemCount() > 0) {
          enableEditor();
          selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
        }
 else {
          disableEditor();
        }
      }
      checkDirty();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    updateAnnotationLabel(sel.length > 0 ? sel[0] : null);
    settingText=false;
  }
}","public void handleSelectionChanged(ISelection selection){
  if (getSourceViewer() == null || !getSourceViewer().getTextWidget().isVisible()) {
    return;
  }
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    settingText=true;
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1 && sel[0] instanceof DesignElementHandle) {
      editObject=sel[0];
      palettePage.getSupport().setCurrentEditObject(editObject);
      if (editObject instanceof ExtendedItemHandle) {
        disableEditor();
        cmbExpList.removeAll();
        cmbItemLastSelected=null;
        getSourceViewer().getTextWidget().setEnabled(true);
        setEditorText(((ExtendedItemHandle)editObject).getExternalScript());
        context.setVariable(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        setComboViewerInput(editObject);
        cmbItemLastSelected=null;
        setEditorText(""String_Node_Str"");
        if (cmbExpList.getItemCount() > 0) {
          enableEditor();
          selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
        }
 else {
          disableEditor();
        }
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    updateAnnotationLabel(sel.length > 0 ? sel[0] : null);
    settingText=false;
  }
}",0.9813369528333898
77311,"/** 
 * Sets focus on the palette's control
 * @see Page#setFocus()
 */
public void setFocus(){
  tree.setFocus();
}","/** 
 * Sets focus on the palette's control
 * @see Page#setFocus()
 */
public void setFocus(){
  tree.setFocus();
  treeCommon.updateParametersTree();
}",0.862453531598513
77312,"public void setCurrentEditObject(Object obj){
  this.currentEditObject=obj;
  removeTreeItem();
}","public void setCurrentEditObject(Object obj){
  this.currentEditObject=obj;
  clearTreeItem(contextItem);
}",0.9019607843137256
77313,"/** 
 * Create parameters band. Must set Tree before execution.
 */
public void createParamtersTree(){
  Assert.isNotNull(tree);
  TreeItem topItem=createTopTreeItem(tree,TREE_ITEM_PARAMETERS);
  for (Iterator iterator=SessionHandleAdapter.getInstance().getReportDesignHandle().getAllParameters().iterator(); iterator.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)iterator.next();
    if (handle instanceof ParameterHandle) {
      createSubTreeItem(topItem,DEUtil.getDisplayLabel(handle,false),ReportPlatformUIImages.getImage(handle),DEUtil.getExpression(handle),((ParameterHandle)handle).getHelpText(),true);
    }
 else     if (handle instanceof ParameterGroupHandle) {
      TreeItem groupItem=createSubTreeItem(topItem,DEUtil.getDisplayLabel(handle,false),ReportPlatformUIImages.getImage(handle),true);
      for (Iterator itor=((ParameterGroupHandle)handle).getParameters().iterator(); itor.hasNext(); ) {
        ParameterHandle parameter=(ParameterHandle)itor.next();
        createSubTreeItem(groupItem,parameter.getDisplayLabel(),ReportPlatformUIImages.getImage(handle),DEUtil.getExpression(parameter),parameter.getDisplayLabel(),true);
      }
    }
  }
}","/** 
 * Create parameters band. Must set Tree before execution.
 */
public void createParamtersTree(){
  Assert.isNotNull(tree);
  parametersItem=createTopTreeItem(tree,TREE_ITEM_PARAMETERS);
  buildParameterTree();
}",0.282051282051282
77314,"/** 
 * Create data sets band.Must set Tree before execution.
 */
public void createDataSetsTree(List dataSetList){
  Assert.isNotNull(tree);
  TreeItem topItem=createTopTreeItem(tree,TREE_ITEM_DATASETS);
  for (Iterator iterator=dataSetList.iterator(); iterator.hasNext(); ) {
    DataSetHandle handle=(DataSetHandle)iterator.next();
    TreeItem dataSetItem=createSubTreeItem(topItem,DEUtil.getDisplayLabel(handle,false),ReportPlatformUIImages.getImage(handle),true);
    try {
      CachedMetaDataHandle cachedMetadata=DataSetUIUtil.getCachedMetaDataHandle(handle);
      for (Iterator iter=cachedMetadata.getResultSet().iterator(); iter.hasNext(); ) {
        ResultSetColumnHandle element=(ResultSetColumnHandle)iter.next();
        createSubTreeItem(dataSetItem,element.getColumnName(),IMAGE_COLUMN,DEUtil.getExpression(element),element.getColumnName(),true);
      }
    }
 catch (    SemanticException e) {
    }
  }
}","/** 
 * Create data sets band.Must set Tree before execution.
 */
public void createDataSetsTree(List dataSetList){
  Assert.isNotNull(tree);
  dataSetsItem=createTopTreeItem(tree,TREE_ITEM_DATASETS);
  buildDataSetsTree(dataSetList);
}",0.3597246127366609
77315,"/** 
 * Creates context objects tree. Context ojects tree is used in JS editor palette, which displays current object method's arguments.
 */
public void createContextObjects(String methodName){
  if (contextItem != null && !contextItem.isDisposed() && currentEditObject != null && methodName != null) {
    removeTreeItem();
    DesignElementHandle handle=(DesignElementHandle)currentEditObject;
    Map argMap=DEUtil.getDesignElementMethodArguments(handle,methodName);
    for (Iterator iter=argMap.keySet().iterator(); iter.hasNext(); ) {
      String argName=(String)iter.next();
      createSubTreeItem(contextItem,argName,IMAGE_METHOD,argName,""String_Node_Str"",true);
    }
  }
}","/** 
 * Creates context objects tree. Context ojects tree is used in JS editor palette, which displays current object method's arguments.
 */
public void createContextObjects(String methodName){
  if (contextItem != null && !contextItem.isDisposed() && currentEditObject != null && methodName != null) {
    clearTreeItem(contextItem);
    DesignElementHandle handle=(DesignElementHandle)currentEditObject;
    Map argMap=DEUtil.getDesignElementMethodArguments(handle,methodName);
    for (Iterator iter=argMap.keySet().iterator(); iter.hasNext(); ) {
      String argName=(String)iter.next();
      createSubTreeItem(contextItem,argName,IMAGE_METHOD,argName,""String_Node_Str"",true);
    }
  }
}",0.9840579710144928
77316,"/** 
 * @param dateStyle
 * @param locale
 * @return
 */
public static DateFormat getDateInstance(int dateStyle,ULocale locale){
  String key=String.valueOf(dateStyle) + ""String_Node_Str"" + locale.getName();
  DateFormat result=(DateFormat)dateFormatHolder.get(key);
  if (result == null) {
synchronized (dateTimeFormatholder) {
      result=(DateFormat)dateFormatHolder.get(key);
      if (result == null) {
        result=DateFormat.getDateInstance(dateStyle,locale);
        dateFormatHolder.put(key,result);
      }
    }
  }
  return result;
}","/** 
 * @param dateStyle
 * @param locale
 * @return
 */
public static DateFormat getDateInstance(int dateStyle,ULocale locale){
  String key=String.valueOf(dateStyle) + ""String_Node_Str"" + locale.getName();
  DateFormat result=(DateFormat)dateFormatHolder.get(key);
  if (result == null) {
synchronized (dateTimeFormatholder) {
      result=(DateFormat)dateFormatHolder.get(key);
      if (result == null) {
        result=DateFormat.getDateInstance(dateStyle,locale);
        result.setLenient(false);
        dateFormatHolder.put(key,result);
      }
    }
  }
  return result;
}",0.9699115044247788
77317,"/** 
 * @param dateStyle
 * @param timeStyle
 * @param locale
 * @return
 */
public static DateFormat getDateTimeInstance(int dateStyle,int timeStyle,ULocale locale){
  String key=String.valueOf(dateStyle) + ""String_Node_Str"" + String.valueOf(timeStyle)+ ""String_Node_Str""+ locale.getName();
  DateFormat result=(DateFormat)dateTimeFormatholder.get(key);
  if (result == null) {
synchronized (dateTimeFormatholder) {
      result=(DateFormat)dateTimeFormatholder.get(key);
      if (result == null) {
        result=DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
        dateTimeFormatholder.put(key,result);
      }
    }
  }
  return result;
}","/** 
 * @param dateStyle
 * @param timeStyle
 * @param locale
 * @return
 */
public static DateFormat getDateTimeInstance(int dateStyle,int timeStyle,ULocale locale){
  String key=String.valueOf(dateStyle) + ""String_Node_Str"" + String.valueOf(timeStyle)+ ""String_Node_Str""+ locale.getName();
  DateFormat result=(DateFormat)dateTimeFormatholder.get(key);
  if (result == null) {
synchronized (dateTimeFormatholder) {
      result=(DateFormat)dateTimeFormatholder.get(key);
      if (result == null) {
        result=DateFormat.getDateTimeInstance(dateStyle,timeStyle,locale);
        result.setLenient(false);
        dateTimeFormatholder.put(key,result);
      }
    }
  }
  return result;
}",0.9748148148148148
77318,"public Object visitAutoText(IAutoTextContent autoText,Object value){
  if (IAutoTextContent.PAGE_NUMBER == autoText.getType()) {
    String originalPageNumber=autoText.getText();
    NumberFormatter nf=new NumberFormatter();
    String patternStr=autoText.getComputedStyle().getNumberFormat();
    nf.applyPattern(patternStr);
    autoText.setText(nf.format(Integer.parseInt(originalPageNumber)));
    return handleText(autoText);
  }
  return new PDFTemplateLM(context,parent,autoText,executor);
}","public Object visitAutoText(IAutoTextContent autoText,Object value){
  if (IAutoTextContent.PAGE_NUMBER == autoText.getType()) {
    if (parent instanceof PDFLineAreaLM) {
      String originalPageNumber=autoText.getText();
      NumberFormatter nf=new NumberFormatter();
      String patternStr=autoText.getComputedStyle().getNumberFormat();
      nf.applyPattern(patternStr);
      try {
        autoText.setText(nf.format(Integer.parseInt(originalPageNumber)));
      }
 catch (      NumberFormatException nfe) {
        autoText.setText(originalPageNumber);
      }
    }
    return handleText(autoText);
  }
  return new PDFTemplateLM(context,parent,autoText,executor);
}",0.3015332197614991
77319,"public IParameterDefnBase getParameterDefn(String name){
  IParameterDefnBase ret=null;
  if (name == null) {
    return ret;
  }
  Collection original=((ReportRunnable)runnable).getParameterDefns(true);
  Iterator iter=original.iterator();
  while (iter.hasNext()) {
    ParameterDefnBase pBase=(ParameterDefnBase)iter.next();
    if (name.equals(pBase.getName())) {
      try {
        ret=(IParameterDefnBase)pBase.clone();
        break;
      }
 catch (      CloneNotSupportedException e) {
        log.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
  if (ret != null) {
    if (ret instanceof ScalarParameterDefn) {
      ((ScalarParameterDefn)ret).setReportDesign((ReportDesignHandle)runnable.getDesignHandle());
      ((ScalarParameterDefn)ret).setLocale(locale);
      ((ScalarParameterDefn)ret).evaluateSelectionList();
    }
 else     if (ret instanceof ParameterGroupDefn) {
      Iterator iter2=((ParameterGroupDefn)ret).getContents().iterator();
      while (iter2.hasNext()) {
        IParameterDefnBase p=(IParameterDefnBase)iter2.next();
        if (p instanceof ScalarParameterDefn) {
          ((ScalarParameterDefn)p).setReportDesign((ReportDesignHandle)runnable.getDesignHandle());
          ((ScalarParameterDefn)p).setLocale(locale);
          ((ScalarParameterDefn)p).evaluateSelectionList();
        }
      }
    }
  }
  return ret;
}","public IParameterDefnBase getParameterDefn(String name){
  IParameterDefnBase ret=null;
  if (name == null) {
    return ret;
  }
  Collection original=((ReportRunnable)runnable).getParameterDefns(true);
  Iterator iter=original.iterator();
  while (iter.hasNext()) {
    ret=getParamDefnBaseByName((ParameterDefnBase)iter.next(),name);
    if (ret != null)     break;
  }
  if (ret != null) {
    if (ret instanceof ScalarParameterDefn) {
      ((ScalarParameterDefn)ret).setReportDesign((ReportDesignHandle)runnable.getDesignHandle());
      ((ScalarParameterDefn)ret).setLocale(locale);
      ((ScalarParameterDefn)ret).evaluateSelectionList();
    }
 else     if (ret instanceof ParameterGroupDefn) {
      Iterator iter2=((ParameterGroupDefn)ret).getContents().iterator();
      while (iter2.hasNext()) {
        IParameterDefnBase p=(IParameterDefnBase)iter2.next();
        if (p instanceof ScalarParameterDefn) {
          ((ScalarParameterDefn)p).setReportDesign((ReportDesignHandle)runnable.getDesignHandle());
          ((ScalarParameterDefn)p).setLocale(locale);
          ((ScalarParameterDefn)p).evaluateSelectionList();
        }
      }
    }
  }
  return ret;
}",0.8777996070726916
77320,"protected Object getRenderContext(IReportContext context){
  Map appContext=context.getAppContext();
  if (appContext != null) {
    String renderContextKey=EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT;
    String format=context.getOutputFormat();
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      renderContextKey=EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT;
    }
    return appContext.get(renderContextKey);
  }
  return null;
}","protected Object getRenderContext(IReportContext context){
  if (context == null) {
    return null;
  }
  Map appContext=context.getAppContext();
  if (appContext != null) {
    String renderContextKey=EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT;
    String format=context.getOutputFormat();
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      renderContextKey=EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT;
    }
    return appContext.get(renderContextKey);
  }
  return null;
}",0.9508547008547008
77321,"public IReportContext getReportContext(){
  return task.getReportContext();
}","public IReportContext getReportContext(){
  if (task == null) {
    return null;
  }
  return task.getReportContext();
}",0.7817258883248731
77322,"/** 
 */
public void test_136279(){
  IMetaDataDictionary dict=MetaDataDictionary.getInstance();
  IChoiceSet datatypes=dict.getChoiceSet(""String_Node_Str"");
  IChoice[] choices=datatypes.getChoices();
  assertEquals(""String_Node_Str"",choices[0].getName());
  assertEquals(""String_Node_Str"",choices[1].getName());
  assertEquals(""String_Node_Str"",choices[2].getName());
  assertEquals(""String_Node_Str"",choices[3].getName());
  assertEquals(""String_Node_Str"",choices[4].getName());
  assertEquals(""String_Node_Str"",choices[5].getName());
  assertEquals(6,choices.length);
}","/** 
 */
public void test_136279(){
  IMetaDataDictionary dict=MetaDataDictionary.getInstance();
  IChoiceSet datatypes=dict.getChoiceSet(""String_Node_Str"");
  IChoice[] choices=datatypes.getChoices();
  boolean valid=true;
  for (int i=0; i < choices.length; i++) {
    if (""String_Node_Str"".equals(choices[i].getName()) || ""String_Node_Str"".equals(choices[i].getName())) {
      valid=false;
      break;
    }
  }
  assertTrue(valid);
}",0.4545454545454545
77323,"protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableLM.getContent(),tableLM.getLayoutInfo());
  regionLM.initialize(header,tableLM.lastRowArea);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      count++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
    tableLM.setRepeatCount(tableLM.getRepeatCount() + count);
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  ITableBandContent header=(ITableBandContent)groupContent.getHeader();
  if (!isRepeatHeader() || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_GROUP_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableLM.getContent(),tableLM.getLayoutInfo());
  regionLM.initialize(header,tableLM.lastRowArea);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableLM.getContent().getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    int count=0;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      count++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
    tableLM.setRepeatCount(tableLM.getRepeatCount() + count);
  }
  tableLM.getContent().setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.9864113650401484
77324,"protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  IReportContent report=tableContent.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  captionLabel.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(tableContent.getColumnCount());
  cell.setRowSpan(1);
  cell.setColumn(0);
  captionLabel.setParent(cell);
  cell.getChildren().add(captionLabel);
  IRowContent row=report.createRowContent();
  row.getChildren().add(cell);
  cell.setParent(row);
  ITableBandContent band=report.createTableBandContent();
  band.getChildren().add(row);
  row.setParent(band);
  band.setParent(tableContent);
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(context.getLayoutEngine());
  con.setFactory(context.getFactory());
  con.setFormat(context.getFormat());
  con.setAllowPageBreak(false);
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,content,layoutInfo);
  regionLM.initialize(band,null);
  regionLM.layout();
  TableArea tableRegion=(TableArea)content.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      root.addChild(rowArea);
      rowArea.setPosition(0,currentBP);
      setCurrentBP(currentBP + rowArea.getHeight());
      repeatRowCount++;
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  IReportContent report=tableContent.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  captionLabel.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(tableContent.getColumnCount());
  cell.setRowSpan(1);
  cell.setColumn(0);
  captionLabel.setParent(cell);
  cell.getChildren().add(captionLabel);
  IRowContent row=report.createRowContent();
  row.getChildren().add(cell);
  cell.setParent(row);
  ITableBandContent band=report.createTableBandContent();
  band.getChildren().add(row);
  row.setParent(band);
  band.setParent(tableContent);
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(context.getLayoutEngine());
  con.setFactory(context.getFactory());
  con.setFormat(context.getFormat());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,content,layoutInfo);
  regionLM.initialize(band,null);
  regionLM.layout();
  TableArea tableRegion=(TableArea)content.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      root.addChild(rowArea);
      rowArea.setPosition(0,currentBP);
      setCurrentBP(currentBP + rowArea.getHeight());
      repeatRowCount++;
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.9867708959711364
77325,"protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  ITableBandContent header=(ITableBandContent)tableContent.getHeader();
  if (!repeatHeader || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableContent,layoutInfo);
  regionLM.initialize(header,null);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableContent.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      repeatRowCount++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
  }
  tableContent.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (isFirst) {
    isFirst=false;
    return;
  }
  ITableBandContent header=(ITableBandContent)tableContent.getHeader();
  if (!repeatHeader || header == null) {
    return;
  }
  if (header.getChildren().isEmpty()) {
    return;
  }
  if (child != null) {
    IContent content=child.getContent();
    if (content instanceof ITableBandContent) {
      if (((ITableBandContent)content).getBandType() == IBandContent.BAND_HEADER) {
        return;
      }
    }
  }
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setMaxHeight(context.getMaxHeight());
  con.setAllowPageBreak(false);
  IReportItemExecutor headerExecutor=new DOMReportItemExecutor(header);
  headerExecutor.execute();
  PDFTableRegionLM regionLM=new PDFTableRegionLM(con,tableContent,layoutInfo);
  regionLM.initialize(header,null);
  regionLM.layout();
  TableArea tableRegion=(TableArea)tableContent.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < this.getMaxAvaHeight() - currentBP) {
    Iterator iter=tableRegion.getChildren();
    RowArea row=null;
    while (iter.hasNext()) {
      row=(RowArea)iter.next();
      addArea(row);
      repeatRowCount++;
    }
    if (row != null) {
      removeBottomBorder(row);
    }
  }
  tableContent.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.9852051109616676
77326,"protected void newContext(){
  createRoot();
  buildTableLayoutInfo();
  root.setWidth(layoutInfo.getTableWidth());
  setMaxAvaHeight(getAvaHeight());
  setMaxAvaWidth(layoutInfo.getTableWidth());
  setCurrentIP(0);
  setCurrentBP(0);
  repeatRowCount=0;
  rowCount=0;
  setCurrentIP(0);
}","protected void newContext(){
  createRoot();
  buildTableLayoutInfo();
  root.setWidth(layoutInfo.getTableWidth());
  setMaxAvaHeight(getAvaHeight());
  setMaxAvaWidth(layoutInfo.getTableWidth());
  setCurrentIP(0);
  setCurrentBP(0);
  repeatRowCount=0;
  rowCount=0;
  lastRowArea=null;
  setCurrentIP(0);
}",0.9665551839464884
77327,"/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int rowID=cellArea.getRowID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle cellAreaStyle=cellArea.getStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  if (rowID == currentRowID - 1) {
    if (columnID > 0 && currentRowContent[columnID - 1] != null) {
      leftCellContentStyle=currentRowContent[columnID - 1].cell.getComputedStyle();
    }
    if (lastRow != null) {
      if (rowCount > 1) {
        preRowStyle=lastRow.row.getComputedStyle();
        if (lastRowContent[columnID] != null) {
          topCellStyle=lastRowContent[columnID].cell.getComputedStyle();
        }
      }
 else {
        if (root.getChildrenCount() > 0 && lastRowArea != null) {
          preRowStyle=lastRowArea.getContent().getComputedStyle();
          Iterator iter=lastRowArea.getChildren();
          while (iter.hasNext()) {
            CellArea cell=(CellArea)iter.next();
            ICellContent cc=(ICellContent)cell.getContent();
            if (cc != null && cc.getColumn() == columnID) {
              topCellStyle=cc.getComputedStyle();
              break;
            }
          }
        }
      }
    }
  }
  if (rowID == 0) {
    if (tablepaginated) {
      bcr.resolvePagenatedTableTopBorder(rowStyle,cellContentStyle,cellAreaStyle);
      tablepaginated=false;
    }
 else {
      bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID == 0) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan == columnNumber) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
 else {
    if (tablepaginated) {
      bcr.resolvePagenatedTableTopBorder(rowStyle,cellContentStyle,cellAreaStyle);
      tablepaginated=false;
    }
 else {
      bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID == 0) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan == columnNumber) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
}","/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int rowID=cellArea.getRowID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle cellAreaStyle=cellArea.getStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  if (columnID > 0 && currentRowContent[columnID - 1] != null) {
    leftCellContentStyle=currentRowContent[columnID - 1].cell.getComputedStyle();
  }
  if (rowCount > 1 && lastRow != null) {
    preRowStyle=lastRow.row.getComputedStyle();
    if (lastRowContent[columnID] != null) {
      topCellStyle=lastRowContent[columnID].cell.getComputedStyle();
    }
  }
 else {
    if (lastRowArea != null) {
      preRowStyle=lastRowArea.getContent().getComputedStyle();
      Iterator iter=lastRowArea.getChildren();
      while (iter.hasNext()) {
        CellArea cell=(CellArea)iter.next();
        ICellContent cc=(ICellContent)cell.getContent();
        if (cc != null && cc.getColumn() == columnID) {
          topCellStyle=cc.getComputedStyle();
          break;
        }
      }
    }
  }
  if (rowID == 0) {
    if (tablepaginated) {
      bcr.resolvePagenatedTableTopBorder(rowStyle,cellContentStyle,cellAreaStyle);
      tablepaginated=false;
    }
 else {
      bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID == 0) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan == columnNumber) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
 else {
    bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle,cellAreaStyle);
    if (columnID == 0) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan == columnNumber) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
}",0.7468200034849277
77328,"public void initialize(ITableBandContent content,RowArea lastRowArea){
  this.executor=new DOMReportItemExecutor(content);
  this.executor.execute();
  this.lastRowArea=lastRowArea;
}","public void initialize(ITableBandContent content,RowArea lastRowArea){
  this.executor=new DOMReportItemExecutor(content);
  this.executor.execute();
  this.lastRow=lastRowArea;
}",0.988950276243094
77329,"/** 
 * Delete folder
 * @param dirStr
 */
private void deleteDir(String dirStr){
  File sessionsFolder=new File(dirStr);
  File[] sessionFiles=sessionsFolder.listFiles();
  for (int i=0; i < sessionFiles.length; i++)   sessionFiles[i].delete();
  sessionsFolder.delete();
}","/** 
 * Delete folder
 * @param dirStr
 */
private void deleteDir(String dirStr){
  File sessionsFolder=new File(dirStr);
  if (!sessionsFolder.exists())   return;
  File[] sessionFiles=sessionsFolder.listFiles();
  for (int i=0; i < sessionFiles.length; i++)   sessionFiles[i].delete();
  sessionsFolder.delete();
}",0.928813559322034
77330,"/** 
 * @return temp root dir directory
 */
private void createTempRootDir(){
  if (tempRootDirStr != null)   return;
  String tempDirStr=System.getProperty(""String_Node_Str"");
  File tempDtEDir=new File(tempDirStr,""String_Node_Str"");
  if (tempDtEDir.exists() == false) {
    tempDtEDir.mkdir();
  }
 else {
    File[] sessionsFolder=tempDtEDir.listFiles();
    for (int i=0; i < sessionsFolder.length; i++) {
      File[] oneSessionFolder=sessionsFolder[i].listFiles();
      for (int j=0; j < oneSessionFolder.length; j++) {
        if (oneSessionFolder[j].isDirectory()) {
          File[] oneSessionTempFiles=oneSessionFolder[j].listFiles();
          for (int k=0; k < oneSessionTempFiles.length; k++) {
            oneSessionTempFiles[k].delete();
          }
          oneSessionFolder[j].delete();
        }
 else {
          oneSessionFolder[j].delete();
        }
      }
      sessionsFolder[i].delete();
    }
  }
  try {
    tempRootDirStr=tempDtEDir.getCanonicalPath();
  }
 catch (  IOException e) {
  }
}","/** 
 * @return temp root dir directory
 */
private void createTempRootDir(){
  if (tempRootDirStr != null && new File(tempRootDirStr).exists() == true)   return;
  String tempDirStr=System.getProperty(""String_Node_Str"");
  File tempDtEDir=new File(tempDirStr,""String_Node_Str"");
  if (tempDtEDir.exists() == false) {
    tempDtEDir.mkdir();
  }
 else {
    File[] sessionsFolder=tempDtEDir.listFiles();
    for (int i=0; i < sessionsFolder.length; i++) {
      File[] oneSessionFolder=sessionsFolder[i].listFiles();
      for (int j=0; j < oneSessionFolder.length; j++) {
        if (oneSessionFolder[j].isDirectory()) {
          File[] oneSessionTempFiles=oneSessionFolder[j].listFiles();
          for (int k=0; k < oneSessionTempFiles.length; k++) {
            oneSessionTempFiles[k].delete();
          }
          oneSessionFolder[j].delete();
        }
 else {
          oneSessionFolder[j].delete();
        }
      }
      sessionsFolder[i].delete();
    }
  }
  try {
    tempRootDirStr=tempDtEDir.getCanonicalPath();
  }
 catch (  IOException e) {
  }
}",0.9784379492093914
77331,"/** 
 * Constructs a SubqueryDefn. A name must be provided that uniquely identifies the subquery within the report query that contains it.
 * @param name
 */
public SubqueryDefinition(String name){
  super(null);
  this.name=name;
  this.onGroup=true;
}","/** 
 * Constructs a SubqueryDefn. A name must be provided that uniquely identifies the subquery within the report query that contains it. The outer query (parent) can be another query, or a sub query.
 * @param name
 */
public SubqueryDefinition(String name,BaseQueryDefinition parent){
  super(parent);
  this.name=name;
  this.onGroup=true;
}",0.8327759197324415
77332,"private IExtractionResults extractByInstanceID(InstanceID iid) throws EngineException {
  DataID dataId=iid.getDataID();
  DataSetID dataSetId=dataId.getDataSetID();
  DataEngine dataEngine=executionContext.getDataEngine().getDataEngine();
  Scriptable scope=executionContext.getSharedScope();
  IResultIterator dataIter=null;
  try {
    dataIter=getResultSet(dataEngine,dataSetId,scope);
  }
 catch (  BirtException e) {
    e.printStackTrace();
    throw new EngineException(""String_Node_Str"",e);
  }
  IResultMetaData metaData=getMetaDateByInstanceID(iid);
  if (null != metaData) {
    return new ExtractionResults(dataIter,metaData,this.selectedColumns);
  }
 else {
    return null;
  }
}","private IExtractionResults extractByInstanceID(InstanceID iid) throws EngineException {
  DataID dataId=iid.getDataID();
  DataSetID dataSetId=dataId.getDataSetID();
  DataEngine dataEngine=executionContext.getDataEngine().getDataEngine();
  Scriptable scope=executionContext.getSharedScope();
  IResultIterator dataIter=null;
  IBaseQueryDefinition query=null;
  try {
    if (null == filterExpressions) {
      dataIter=getResultSetIterator(dataEngine,dataSetId,scope);
    }
 else {
      long id=iid.getComponentID();
      ReportItemDesign design=(ReportItemDesign)report.getReportItemByID(id);
      query=design.getQuery();
      if (null == query) {
        return null;
      }
      for (int iNum=0; iNum < filterExpressions.length; iNum++) {
        query.getFilters().add(filterExpressions[iNum]);
      }
      IBaseQueryDefinition rootQuery=query;
      while (rootQuery instanceof SubqueryDefinition) {
        rootQuery=rootQuery.getParentQuery();
      }
      QueryDefinition newRootQuery=queryCopy((QueryDefinition)rootQuery);
      HashMap queryIds=report.getQueryIDs();
      String queryId=(String)queryIds.get(rootQuery);
      String rsetId=queryId2rsetId(queryId);
      newRootQuery.setQueryResultsID(rsetId);
      IPreparedQuery preparedQuery=dataEngine.prepare(newRootQuery);
      IQueryResults rootResults=preparedQuery.execute(scope);
      dataIter=getFilterResultSetIterator(dataEngine,dataSetId,scope,rootResults);
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
    throw new EngineException(""String_Node_Str"",e);
  }
 finally {
    if (null != query) {
      for (int iNum=0; iNum < filterExpressions.length; iNum++) {
        query.getFilters().remove(filterExpressions[iNum]);
      }
      filterExpressions=null;
    }
  }
  IResultMetaData metaData=getMetaDateByInstanceID(iid);
  if (null != metaData) {
    return new ExtractionResults(dataIter,metaData,this.selectedColumns);
  }
 else {
    return null;
  }
}",0.3983495873968492
77333,"protected BaseQueryDefinition createSubQuery(ReportItemDesign item){
  BaseQueryDefinition query=null;
  IBaseTransform parentQuery=getTransform();
  if (parentQuery == null) {
    query=new QueryDefinition(getParentQuery());
    this.queryIDs.put(query,String.valueOf(item.getID()));
    this.queries.add(query);
    registerQueryAndElement(query,item);
  }
 else {
    String name=String.valueOf(item.getID());
    query=new SubqueryDefinition(name);
    parentQuery.getSubqueries().add(query);
    this.queryIDs.put(query,String.valueOf(item.getID()));
    registerQueryAndElement(query,item);
    String currentCondition=getCurrentCondition();
    if (currentCondition.equals(String.valueOf(true))) {
      ((SubqueryDefinition)query).setApplyOnGroupFlag(true);
    }
 else {
      ((SubqueryDefinition)query).setApplyOnGroupFlag(false);
    }
  }
  query.setMaxRows(maxRows);
  item.setQuery(query);
  if (item.getHandle() instanceof ReportItemHandle) {
    ReportItemHandle designHandle=(ReportItemHandle)item.getHandle();
    Iterator iter=designHandle.columnBindingsIterator();
    while (iter.hasNext()) {
      ComputedColumnHandle binding=(ComputedColumnHandle)iter.next();
      addColumBinding(query,binding);
    }
  }
  addSortAndFilter(item,query);
  ResultMetaData metaData=new ResultMetaData(query);
  resultMetaData.put(query,metaData);
  return query;
}","protected BaseQueryDefinition createSubQuery(ReportItemDesign item){
  BaseQueryDefinition query=null;
  IBaseTransform parentQuery=getTransform();
  if (parentQuery == null) {
    query=new QueryDefinition(getParentQuery());
    this.queryIDs.put(query,String.valueOf(item.getID()));
    this.queries.add(query);
    registerQueryAndElement(query,item);
  }
 else {
    String name=String.valueOf(item.getID());
    query=new SubqueryDefinition(name,getParentQuery());
    parentQuery.getSubqueries().add(query);
    this.queryIDs.put(query,String.valueOf(item.getID()));
    registerQueryAndElement(query,item);
    String currentCondition=getCurrentCondition();
    if (currentCondition.equals(String.valueOf(true))) {
      ((SubqueryDefinition)query).setApplyOnGroupFlag(true);
    }
 else {
      ((SubqueryDefinition)query).setApplyOnGroupFlag(false);
    }
  }
  query.setMaxRows(maxRows);
  item.setQuery(query);
  if (item.getHandle() instanceof ReportItemHandle) {
    ReportItemHandle designHandle=(ReportItemHandle)item.getHandle();
    Iterator iter=designHandle.columnBindingsIterator();
    while (iter.hasNext()) {
      ComputedColumnHandle binding=(ComputedColumnHandle)iter.next();
      addColumBinding(query,binding);
    }
  }
  addSortAndFilter(item,query);
  ResultMetaData metaData=new ResultMetaData(query);
  resultMetaData.put(query,metaData);
  return query;
}",0.9938472674629026
77334,"/** 
 * Check if the expression is a direct column reference type. If so, returns an instance of DirectColRefExpr that represents it; otherwise returns null.
 * @param parent
 * @param refNode
 * @param customerChecked
 * @return
 * @throws DataException
 */
abstract CompiledExpression compileDirectColRefExpr(Node parent,Node refNode,Node grandFather,boolean customerChecked,Context context) throws DataException ;","/** 
 * Check if the expression is a direct column reference type. If so, returns an instance of DirectColRefExpr that represents it; otherwise returns null.
 * @param parent
 * @param refNode
 * @param customerChecked
 * @return
 * @throws DataException
 */
protected abstract CompiledExpression compileDirectColRefExpr(Node parent,Node refNode,Node grandFather,boolean customerChecked,Context context) throws DataException ;",0.98812351543943
77335,"/** 
 * Check the expression is an aggregate expression. If so, returns an instance of AggregateExpression, otherwise return null
 * @param context
 * @param parent
 * @param callNode
 * @return
 * @throws DataException
 */
abstract AggregateExpression compileAggregateExpr(Context context,Node parent,Node callNode) throws DataException ;","/** 
 * Check the expression is an aggregate expression. If so, returns an instance of AggregateExpression, otherwise return null
 * @param context
 * @param parent
 * @param callNode
 * @return
 * @throws DataException
 */
protected abstract AggregateExpression compileAggregateExpr(Context context,Node parent,Node callNode) throws DataException ;",0.9854651162790696
77336,"public boolean equals(Object other){
  if (other == null || !(other instanceof AggregateExpression))   return false;
  AggregateExpression expr2=(AggregateExpression)other;
  if (!aggregation.getName().equals(expr2.getAggregation().getName()))   return false;
  if (arguments.size() != expr2.getArguments().size())   return false;
  for (int i=0; i < arguments.size(); i++) {
    if (!arguments.get(i).equals(expr2.getArguments().get(i)))     return false;
  }
  return true;
}","public boolean equals(Object other){
  if (other == null || !(other instanceof AggregateExpression))   return false;
  AggregateExpression expr2=(AggregateExpression)other;
  if (!aggregation.getName().equals(expr2.getAggregation().getName()))   return false;
  if (groupLevel != expr2.getGroupLevel())   return false;
  if (this.getCalculationLevel() != expr2.getCalculationLevel())   return false;
  if (arguments.size() != expr2.getArguments().size())   return false;
  for (int i=0; i < arguments.size(); i++) {
    if (!arguments.get(i).equals(expr2.getArguments().get(i)))     return false;
  }
  return true;
}",0.8427787934186471
77337,"AggregateExpression(IAggregation aggregation){
  logger.entering(AggregateExpression.class.getName(),""String_Node_Str"");
  this.aggregation=aggregation;
  this.arguments=new ArrayList();
  logger.exiting(AggregateExpression.class.getName(),""String_Node_Str"");
}","AggregateExpression(IAggregation aggregation){
  logger.entering(AggregateExpression.class.getName(),""String_Node_Str"");
  this.aggregation=aggregation;
  this.arguments=new ArrayList();
  this.groupLevel=-1;
  logger.exiting(AggregateExpression.class.getName(),""String_Node_Str"");
}",0.9595588235294118
77338,"/** 
 * Compares equivalency of two aggregate expressions
 * @param
 * @return
 */
public boolean equals(Object other){
  if (other == null || !(other instanceof AggregateObject))   return false;
  AggregateObject rhs=(AggregateObject)other;
  if (!aggregateExp.getAggregation().getName().equals(rhs.getAggregateExpr().getAggregation().getName()) || aggregateExp.getType() != rhs.getAggregateExpr().getType())   return false;
  List list1=this.getAggregateExpr().getArguments();
  List list2=rhs.getAggregateExpr().getArguments();
  if (list1 == null || list2 == null || list1.size() != list2.size())   return false;
 else {
    for (int i=0; i < list1.size(); i++) {
      if (!list1.get(i).equals(list2.get(i)))       return false;
    }
  }
  return true;
}","/** 
 * Compares equivalency of two aggregate expressions
 * @param
 * @return
 */
public boolean equals(Object other){
  if (other == null || !(other instanceof AggregateObject))   return false;
  AggregateObject rhs=(AggregateObject)other;
  if (!aggregateExp.getAggregation().getName().equals(rhs.getAggregateExpr().getAggregation().getName()) || aggregateExp.getType() != rhs.getAggregateExpr().getType())   return false;
  if (!this.getAggregateExpr().equals(rhs.getAggregateExpr()))   return false;
  return true;
}",0.7166276346604216
77339,"/** 
 * Populate the AggregateTable instance using given AggregateObject. 
 * @param table
 * @param aggreObjList
 * @param groupLvl
 * @param aftergroup
 * @return
 * @throws DataException
 */
public static int populateAggregationTable(AggregateTable table,AggregateObject aggreObj,int groupLvl,boolean aftergroup,boolean isDetailedRow) throws DataException {
  Context cx=Context.enter();
  AggregateRegistry reg=table.getAggrRegistry(groupLvl,isDetailedRow,cx);
  try {
    return reg.register(aggreObj.getAggregateExpr());
  }
 catch (  DataException e) {
    throw e;
  }
 finally {
    Context.exit();
  }
}","/** 
 * Populate the AggregateTable instance using given AggregateObject. 
 * @param table
 * @param aggreObjList
 * @param groupLvl
 * @param aftergroup
 * @return
 * @throws DataException
 */
public static int populateAggregationTable(AggregateTable table,AggregateObject aggreObj,int groupLvl,int calculationLvl,boolean aftergroup,boolean isDetailedRow) throws DataException {
  Context cx=Context.enter();
  AggregateRegistry reg=table.getAggrRegistry(groupLvl,calculationLvl,isDetailedRow,cx);
  try {
    return reg.register(aggreObj.getAggregateExpr());
  }
 catch (  DataException e) {
    throw e;
  }
 finally {
    Context.exit();
  }
}",0.973015873015873
77340,"int getType(){
  return CompiledExpression.TYPE_COMPLEX_EXPR;
}","/** 
 */
int getType(){
  return CompiledExpression.TYPE_COMPLEX_EXPR;
}",0.9333333333333332
77341,"CompiledExpression compileDirectColRefExpr(Node parent,Node refNode,Node grandFather,boolean customerChecked,Context context) throws DataException {
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME)   return null;
  String str=rowName.getString();
  assert(str != null);
  if (!str.equals(rowIndicator))   return null;
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (refNode.getType() == Token.GETPROP && rowColumn.getType() == Token.STRING) {
    if (""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()))     return null;
    return new ColumnReferenceExpression(getDataSetMode() ? STRING_ROW : STRING_DATASETROW,rowColumn.getString());
  }
  if (refNode.getType() == Token.GETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
      if (0 == rowColumn.getDouble())       return null;
      return new ColumnReferenceExpression(getDataSetMode() ? STRING_ROW : STRING_DATASETROW,(int)rowColumn.getDouble());
    }
 else     if (rowColumn.getType() == Token.STRING) {
      if (""String_Node_Str"".equals(rowColumn.getString()))       return null;
      return new ColumnReferenceExpression(getDataSetMode() ? STRING_ROW : STRING_DATASETROW,rowColumn.getString());
    }
  }
  return null;
}","protected CompiledExpression compileDirectColRefExpr(Node parent,Node refNode,Node grandFather,boolean customerChecked,Context context) throws DataException {
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME)   return null;
  String str=rowName.getString();
  assert(str != null);
  if (!str.equals(rowIndicator))   return null;
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (refNode.getType() == Token.GETPROP && rowColumn.getType() == Token.STRING) {
    if (""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()))     return null;
    return new ColumnReferenceExpression(getDataSetMode() ? STRING_ROW : STRING_DATASETROW,rowColumn.getString());
  }
  if (refNode.getType() == Token.GETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
      if (0 == rowColumn.getDouble())       return null;
      return new ColumnReferenceExpression(getDataSetMode() ? STRING_ROW : STRING_DATASETROW,(int)rowColumn.getDouble());
    }
 else     if (rowColumn.getType() == Token.STRING) {
      if (""String_Node_Str"".equals(rowColumn.getString()))       return null;
      return new ColumnReferenceExpression(getDataSetMode() ? STRING_ROW : STRING_DATASETROW,rowColumn.getString());
    }
  }
  return null;
}",0.9965682910089224
77342,"AggregateExpression compileAggregateExpr(Context context,Node parent,Node callNode) throws DataException {
  assert(callNode.getType() == Token.CALL);
  IAggregation aggregation=getAggregationFunction(callNode);
  if (aggregation == null)   return null;
  AggregateExpression aggregateExpression=new AggregateExpression(aggregation);
  extractArguments(context,aggregateExpression,callNode);
  replaceAggregateNode(aggregateExpression,parent,callNode);
  return aggregateExpression;
}","protected AggregateExpression compileAggregateExpr(Context context,Node parent,Node callNode) throws DataException {
  assert(callNode.getType() == Token.CALL);
  IAggregation aggregation=getAggregationFunction(callNode);
  if (aggregation == null)   return null;
  AggregateExpression aggregateExpression=new AggregateExpression(aggregation);
  extractArguments(context,aggregateExpression,callNode);
  replaceAggregateNode(aggregateExpression,parent,callNode);
  return aggregateExpression;
}",0.9897750511247444
77343,"/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
    String filename=ParameterAccessor.generateFileName(request);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename + ""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType + ""String_Node_Str"");
 else     response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
    String filename=ParameterAccessor.generateFileName(request);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename + ""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9912049252418644
77344,"/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
    String filename=ParameterAccessor.generateFileName(request);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename + ""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType + ""String_Node_Str"");
 else     response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
    String filename=ParameterAccessor.generateFileName(request);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename + ""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9892357373519914
77345,"private void createDrillthroughSelectFormat(Composite container){
  Group group=new Group(container,SWT.NONE);
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  htmlButton=new Button(group,SWT.RADIO);
  htmlButton.setText(Messages.getString(""String_Node_Str""));
  pdfButton=new Button(group,SWT.RADIO);
  pdfButton.setText(Messages.getString(""String_Node_Str""));
}","private void createDrillthroughSelectFormat(Composite container){
  Group group=new Group(container,SWT.NONE);
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(Messages.getString(""String_Node_Str""));
  group.setLayout(new GridLayout());
  ReportEngine engine=new ReportEngine(new EngineConfig());
  supportedFormats=engine.getSupportedFormats();
  formatCheckBtns=new HashMap();
  for (int i=0; i < supportedFormats.length; i++) {
    Button btn=new Button(group,SWT.RADIO);
    if (supportedFormats.equals(""String_Node_Str"")) {
      btn.setText(Messages.getString(""String_Node_Str""));
    }
 else     if (supportedFormats.equals(""String_Node_Str"")) {
      btn.setText(Messages.getString(""String_Node_Str""));
    }
 else {
      btn.setText(supportedFormats[i]);
    }
    formatCheckBtns.put(supportedFormats[i],btn);
  }
}",0.4713855421686747
77346,"private void initDisplayArea(){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
    if (inputHandle.getURI() != null) {
      locationEditor.setText(inputHandle.getURI());
    }
    if (inputHandle.getTargetWindow() != null) {
      targetChooser.setText(ChoiceSetFactory.getDisplayNameFromChoiceSet(inputHandle.getTargetWindow(),CHOICESET_TARGET));
    }
 else {
      targetChooser.select(0);
    }
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType)) {
    if (inputHandle.getTargetBookmark() != null) {
      bookmarkEditor.setText(inputHandle.getTargetBookmark());
    }
    initBookmarkList(SessionHandleAdapter.getInstance().getReportDesignHandle());
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
    if (DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT.equals(inputHandle.getTargetFileType())) {
      reportDocumentButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        documentEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDocumentButton);
    }
 else {
      reportDesignButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        locationEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDesignButton);
    }
    if (inputHandle.getReportName() != null) {
      initTargetReport(inputHandle.getReportName());
    }
    if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(inputHandle.getTargetBookmarkType())) {
      targetBookmarkButton.setSelection(true);
      initAnchorChooser(targetReportHandle,false);
    }
 else     if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC.equals(inputHandle.getTargetBookmarkType())) {
      tocButton.setSelection(true);
      initAnchorChooser(targetReportHandle,true);
    }
    if (inputHandle.getTargetBookmark() != null) {
      bookmarkEditor.setText(inputHandle.getTargetBookmark());
    }
    if (DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK.equals(inputHandle.getTargetWindow())) {
      newWindowButton.setSelection(true);
    }
 else {
      sameWindowButton.setSelection(true);
    }
    if (DesignChoiceConstants.FORMAT_TYPE_PDF.equals(inputHandle.getFormatType())) {
      pdfButton.setSelection(true);
    }
 else {
      htmlButton.setSelection(true);
    }
  }
  updateButtons();
}","private void initDisplayArea(){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
    if (inputHandle.getURI() != null) {
      locationEditor.setText(inputHandle.getURI());
    }
    if (inputHandle.getTargetWindow() != null) {
      targetChooser.setText(ChoiceSetFactory.getDisplayNameFromChoiceSet(inputHandle.getTargetWindow(),CHOICESET_TARGET));
    }
 else {
      targetChooser.select(0);
    }
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType)) {
    if (inputHandle.getTargetBookmark() != null) {
      bookmarkEditor.setText(inputHandle.getTargetBookmark());
    }
    initBookmarkList(SessionHandleAdapter.getInstance().getReportDesignHandle());
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
    if (DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT.equals(inputHandle.getTargetFileType())) {
      reportDocumentButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        documentEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDocumentButton);
    }
 else {
      reportDesignButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        locationEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDesignButton);
    }
    if (inputHandle.getReportName() != null) {
      initTargetReport(inputHandle.getReportName());
    }
    if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(inputHandle.getTargetBookmarkType())) {
      targetBookmarkButton.setSelection(true);
      initAnchorChooser(targetReportHandle,false);
    }
 else     if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC.equals(inputHandle.getTargetBookmarkType())) {
      tocButton.setSelection(true);
      initAnchorChooser(targetReportHandle,true);
    }
    if (inputHandle.getTargetBookmark() != null) {
      bookmarkEditor.setText(inputHandle.getTargetBookmark());
    }
    if (DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK.equals(inputHandle.getTargetWindow())) {
      newWindowButton.setSelection(true);
    }
 else {
      sameWindowButton.setSelection(true);
    }
    if (inputHandle.getFormatType() != null) {
      ((Button)formatCheckBtns.get(inputHandle.getFormatType())).setSelection(true);
    }
 else {
      ((Button)formatCheckBtns.get(""String_Node_Str"")).setSelection(true);
    }
  }
  updateButtons();
}",0.9328160098019196
77347,"protected void okPressed(){
  try {
    inputHandle.setURI(null);
    inputHandle.setTargetBookmark(null);
    inputHandle.setTargetWindow(null);
    inputHandle.setReportName(null);
    inputHandle.setFormatType(null);
    inputHandle.getMember(Action.PARAM_BINDINGS_MEMBER).setValue(null);
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
      inputHandle.setURI(locationEditor.getText().trim());
      inputHandle.setTargetWindow(ChoiceSetFactory.getValueFromChoiceSet(targetChooser.getText(),CHOICESET_TARGET));
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType)) {
      inputHandle.setTargetBookmark(bookmarkEditor.getText().trim());
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
      if (reportDesignButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DESIGN);
        inputHandle.setReportName(locationEditor.getText().trim());
        for (Iterator iter=bindingList.iterator(); iter.hasNext(); ) {
          inputHandle.addParamBinding((ParamBinding)iter.next());
        }
      }
 else       if (reportDocumentButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT);
        inputHandle.setReportName(documentEditor.getText().trim());
      }
      if (!StringUtil.isBlank(bookmarkEditor.getText())) {
        inputHandle.setTargetBookmark(bookmarkEditor.getText().trim());
      }
      if (targetBookmarkButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK);
      }
 else       if (tocButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC);
      }
      if (sameWindowButton.getSelection()) {
        inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_SELF);
      }
 else {
        inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK);
      }
      if (htmlButton.getSelection()) {
        inputHandle.setFormatType(""String_Node_Str"");
      }
 else {
        inputHandle.setFormatType(DesignChoiceConstants.FORMAT_TYPE_PDF);
      }
    }
    inputHandle.setLinkType(selectedType);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  setResult(inputHandle);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputHandle.setURI(null);
    inputHandle.setTargetBookmark(null);
    inputHandle.setTargetWindow(null);
    inputHandle.setReportName(null);
    inputHandle.setFormatType(null);
    inputHandle.getMember(Action.PARAM_BINDINGS_MEMBER).setValue(null);
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
      inputHandle.setURI(locationEditor.getText().trim());
      inputHandle.setTargetWindow(ChoiceSetFactory.getValueFromChoiceSet(targetChooser.getText(),CHOICESET_TARGET));
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType)) {
      inputHandle.setTargetBookmark(bookmarkEditor.getText().trim());
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
      if (reportDesignButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DESIGN);
        inputHandle.setReportName(locationEditor.getText().trim());
        for (Iterator iter=bindingList.iterator(); iter.hasNext(); ) {
          inputHandle.addParamBinding((ParamBinding)iter.next());
        }
      }
 else       if (reportDocumentButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT);
        inputHandle.setReportName(documentEditor.getText().trim());
      }
      if (!StringUtil.isBlank(bookmarkEditor.getText())) {
        inputHandle.setTargetBookmark(bookmarkEditor.getText().trim());
      }
      if (targetBookmarkButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK);
      }
 else       if (tocButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC);
      }
      if (sameWindowButton.getSelection()) {
        inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_SELF);
      }
 else {
        inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK);
      }
      for (int i=0; i < supportedFormats.length; i++) {
        if (((Button)formatCheckBtns.get(supportedFormats[i])).getSelection()) {
          inputHandle.setFormatType(supportedFormats[i]);
        }
      }
    }
    inputHandle.setLinkType(selectedType);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  setResult(inputHandle);
  super.okPressed();
}",0.9516063440422936
77348,"/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
    String filename=ParameterAccessor.generateFileName(request);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename + ""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
    String filename=ParameterAccessor.generateFileName(request);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename + ""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
  }
}",0.9721842225262198
77349,"/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
    String filename=ParameterAccessor.generateFileName(request);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename + ""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
    response.setContentType(""String_Node_Str"");
    String filename=ParameterAccessor.generateFileName(request);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename + ""String_Node_Str"");
  }
 else {
    String mimeType=ReportEngineService.getInstance().getMIMEType(format);
    if (mimeType != null && mimeType.length() > 0)     response.setContentType(mimeType);
 else     response.setContentType(""String_Node_Str"");
  }
}",0.9656724817107484
77350,"/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
static List compileColumnExpression(String expression) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return new ArrayList();
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=instance.parse(expression,context);
    instance.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(instance.pluginId,ResourceConstants.INVALID_EXPRESSION,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}","/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
static List compileColumnExpression(String expression,boolean rowMode) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return new ArrayList();
  if (rowMode)   ROW_INDICATOR=ROW_COLUMN_INDICATOR;
 else   ROW_INDICATOR=DATASETROW_INDICATOR;
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=instance.parse(expression,context);
    instance.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(instance.pluginId,ResourceConstants.INVALID_EXPRESSION,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}",0.9270497094899935
77351,"/** 
 * @return
 * @throws BirtException 
 */
static boolean hasAggregation(String expression) throws BirtException {
  hasAggregation=false;
  compileColumnExpression(expression);
  return hasAggregation;
}","/** 
 * @return
 * @throws BirtException 
 */
static boolean hasAggregation(String expression,boolean mode) throws BirtException {
  hasAggregation=false;
  compileColumnExpression(expression,mode);
  return hasAggregation;
}",0.9583333333333334
77352,"/** 
 * extract all column expression info excluding outer_level > 0
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static List extractColumnExpressions(String oldExpression) throws BirtException {
  if (oldExpression == null || oldExpression.trim().length() == 0)   return new ArrayList();
  return ExpressionParserUtility.compileColumnExpression(oldExpression);
}","/** 
 * Extract all column expression info
 * @param oldExpression
 * @param mode if true, it means to compile the ""row"" expression.else extract ""dataSetRow"" expression
 * @return
 * @throws BirtException
 */
public static List extractColumnExpressions(String oldExpression,boolean mode) throws BirtException {
  if (oldExpression == null || oldExpression.trim().length() == 0)   return new ArrayList();
  return ExpressionParserUtility.compileColumnExpression(oldExpression,mode);
}",0.5481651376146789
77353,"/** 
 * whethter the expression has aggregation 
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static boolean hasAggregation(String expression){
  if (expression == null)   return false;
  try {
    return ExpressionParserUtility.hasAggregation(expression);
  }
 catch (  BirtException e) {
    return false;
  }
}","/** 
 * whethter the expression has aggregation 
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static boolean hasAggregation(String expression){
  if (expression == null)   return false;
  try {
    return ExpressionParserUtility.hasAggregation(expression,true);
  }
 catch (  BirtException e) {
    return false;
  }
}",0.9926793557833088
77354,"/** 
 * Serialize instance status into output stream.
 * @param outputStream
 * @throws DataException 
 */
public void doSave(OutputStream outputStream) throws DataException {
}","/** 
 * Serialize instance status into output stream.
 * @param outputStream
 * @throws DataException 
 */
public void doSave(OutputStream outputStream,Map requestColumnMap) throws DataException {
}",0.944
77355,"public void doSave(OutputStream outputStream) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    for (int i=0; i < rowCount; i++) {
      ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount);
    }
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void doSave(OutputStream outputStream,Map cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    for (int i=0; i < rowCount; i++) {
      ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet);
    }
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.8963636363636364
77356,"/** 
 * Serialize to an output stream
 * @param outputStream
 */
public void doSave(OutputStream outputStream) throws DataException ;","/** 
 * Serialize to an output stream
 * @param outputStream
 */
public void doSave(OutputStream outputStream,Map cacheRequestMapping) throws DataException ;",0.9172413793103448
77357,"/** 
 * @param dos
 * @param resultObject
 * @param count
 * @throws DataException
 * @throws IOException
 */
public static void writeResultObject(DataOutputStream dos,IResultObject resultObject,int count) throws DataException, IOException {
  for (int i=1; i <= count; i++)   IOUtil.writeObject(dos,resultObject.getFieldValue(i));
}","/** 
 * Write the result object value if it is used in column binding map
 * @param dos
 * @param resultObject
 * @param nameSet
 * @throws DataException
 * @throws IOException
 */
public static void writeResultObject(DataOutputStream dos,IResultObject resultObject,int count,Set nameSet) throws DataException, IOException {
  if (resultObject.getResultClass() == null)   return;
  for (int i=1; i <= count; i++) {
    if (nameSet != null && nameSet.contains(resultObject.getResultClass().getFieldName(i)))     IOUtil.writeObject(dos,resultObject.getFieldValue(i));
  }
}",0.7278761061946902
77358,"public void doSave(OutputStream outputStream) throws DataException {
  this.resultSetCache.doSave(outputStream);
}","public void doSave(OutputStream outputStream,Map cacheRequestMap) throws DataException {
  this.resultSetCache.doSave(outputStream,cacheRequestMap);
}",0.8636363636363636
77359,"public void doSave(OutputStream outputStream) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  try {
    int rowCount=this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    int currIndex=this.currResultIndex;
    this.reset();
    for (int i=0; i < rowCount; i++) {
      ResultSetUtil.writeResultObject(dos,this.diskBasedResultSet.nextRow(),colCount);
    }
    this.reset();
    this.moveTo(currIndex);
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void doSave(OutputStream outputStream,Map cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    int currIndex=this.currResultIndex;
    this.reset();
    for (int i=0; i < rowCount; i++) {
      ResultSetUtil.writeResultObject(dos,this.diskBasedResultSet.nextRow(),colCount,resultSetNameSet);
    }
    this.reset();
    this.moveTo(currIndex);
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9161764705882351
77360,"public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass());
  }
  if (streamsWrapper.getStreamForDataSet() != null) {
    this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet());
  }
}","public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass(),resultSetPopulator.getEventHandler().getColumnMappings());
  }
  if (streamsWrapper.getStreamForDataSet() != null) {
    this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(),resultSetPopulator.getEventHandler().getColumnMappings());
  }
}",0.9164222873900292
77361,"public Collection getSelectionListForCascadingGroup(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=getParameterDefinitionTask(design,options);
  task.evaluateQuery(groupName);
  Collection selectionList=task.getSelectionListForCascadingGroup(groupName,groupKeys);
  return convertEngineParameterSelectionChoice(selectionList);
}","public Collection getSelectionListForCascadingGroup(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws ReportServiceException {
  IGetParameterDefinitionTask task=getParameterDefinitionTask(design,options);
  ViewerAttributeBean bean=getViewerAttrBean(options);
  if (bean != null)   task.setParameterValues(bean.getParameters());
  task.evaluateQuery(groupName);
  Collection selectionList=task.getSelectionListForCascadingGroup(groupName,groupKeys);
  return convertEngineParameterSelectionChoice(selectionList);
}",0.780439121756487
77362,"public Collection getParameterSelectionList(IViewerReportDesignHandle design,InputOptions runOptions,String paramName) throws ReportServiceException {
  IGetParameterDefinitionTask task=getParameterDefinitionTask(design,runOptions);
  Collection selectionList=task.getSelectionList(paramName);
  return convertEngineParameterSelectionChoice(selectionList);
}","public Collection getParameterSelectionList(IViewerReportDesignHandle design,InputOptions runOptions,String paramName) throws ReportServiceException {
  IGetParameterDefinitionTask task=getParameterDefinitionTask(design,runOptions);
  ViewerAttributeBean bean=getViewerAttrBean(runOptions);
  if (bean != null)   task.setParameterValues(bean.getParameters());
  Collection selectionList=task.getSelectionList(paramName);
  return convertEngineParameterSelectionChoice(selectionList);
}",0.7924080664294187
77363,"/** 
 * @param options
 * @return
 */
Map getModuleOptions(InputOptions options){
  if (options != null) {
    HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
    if (request != null) {
      ViewerAttributeBean bean=(ViewerAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
      if (bean != null)       return bean.getModuleOptions();
    }
  }
  return null;
}","/** 
 * Get Module options from ViewerAttributeBean
 * @param options
 * @return
 */
private Map getModuleOptions(InputOptions options){
  ViewerAttributeBean bean=getViewerAttrBean(options);
  if (bean != null)   return bean.getModuleOptions();
  return null;
}",0.3386861313868613
77364,"private static String toString_OdaDataSourceDesign(Object source){
  OdaDataSourceDesign dataSource=(OdaDataSourceDesign)source;
  StringBuffer stringBuffer=new StringBuffer(""String_Node_Str"");
  if (!isEmpty(dataSource.getName()))   stringBuffer.append(""String_Node_Str"" + dataSource.getName() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getAfterCloseScript()))   stringBuffer.append(""String_Node_Str"" + dataSource.getAfterCloseScript() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getAfterOpenScript()))   stringBuffer.append(""String_Node_Str"" + dataSource.getAfterOpenScript() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getBeforeCloseScript()))   stringBuffer.append(""String_Node_Str"" + dataSource.getBeforeCloseScript() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getBeforeOpenScript()))   stringBuffer.append(""String_Node_Str"" + dataSource.getBeforeOpenScript() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getExtensionID()))   stringBuffer.append(""String_Node_Str"" + dataSource.getExtensionID() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getPrivateProperties()))   stringBuffer.append(""String_Node_Str"" + dataSource.getPrivateProperties() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getPublicProperties()))   stringBuffer.append(""String_Node_Str"" + dataSource.getPublicProperties() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"");
  return stringBuffer.toString();
}","private static String toString_OdaDataSourceDesign(Object source){
  OdaDataSourceDesign dataSource=(OdaDataSourceDesign)source;
  StringBuffer stringBuffer=new StringBuffer(""String_Node_Str"");
  if (!isEmpty(dataSource.getName()))   stringBuffer.append(""String_Node_Str"" + dataSource.getName() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getAfterCloseScript()))   stringBuffer.append(""String_Node_Str"" + dataSource.getAfterCloseScript() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getAfterOpenScript()))   stringBuffer.append(""String_Node_Str"" + dataSource.getAfterOpenScript() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getBeforeCloseScript()))   stringBuffer.append(""String_Node_Str"" + dataSource.getBeforeCloseScript() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getBeforeOpenScript()))   stringBuffer.append(""String_Node_Str"" + dataSource.getBeforeOpenScript() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getExtensionID()))   stringBuffer.append(""String_Node_Str"" + dataSource.getExtensionID() + ""String_Node_Str"");
  if (!isEmpty(dataSource.getPrivateProperties()))   stringBuffer.append(""String_Node_Str"" + dataSource.getPrivateProperties() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"");
  return stringBuffer.toString();
}",0.9452105851658592
77365,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=request.getSession().getServletContext().getResourceAsStream(this.reportDesignName);
          reportRunnable=ReportEngineService.getInstance().openReportDesign(is,this.getModuleOptions(request));
        }
 else {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.getModuleOptions(request));
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) && !ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName,this.getModuleOptions(request));
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=request.getSession().getServletContext().getResourceAsStream(this.reportDesignName);
          reportRunnable=ReportEngineService.getInstance().openReportDesign(is,this.getModuleOptions(request));
        }
 else {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.984103235459136
77366,"/** 
 * get allocated height
 * @return
 */
public int getAllocatedHeight(){
  int topMarginHeight=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_TOP));
  int bottomMarginHeight=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_BOTTOM));
  int result=0;
  if (topMarginHeight >= 0)   result=height + topMarginHeight;
  if (bottomMarginHeight >= 0)   result=result + bottomMarginHeight;
  return result;
}","/** 
 * get allocated height
 * @return
 */
public int getAllocatedHeight(){
  return height + PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_TOP)) + PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_BOTTOM));
}",0.6831275720164609
77367,"public String onCustomImage(IImage image,IReportContext context){
  return onCustomImage(image,context.getAppContext());
}","public String onCustomImage(IImage image,IReportContext context){
  return onCustomImage(image,getRenderContext(context));
}",0.902439024390244
77368,"public IParameterDefnBase getParameterDefn(String name){
  IParameterDefnBase ret=null;
  if (name == null) {
    return ret;
  }
  Collection original=((ReportRunnable)runnable).getParameterDefns(false);
  Iterator iter=original.iterator();
  while (iter.hasNext()) {
    ParameterDefnBase pBase=(ParameterDefnBase)iter.next();
    if (name.equals(pBase.getName())) {
      try {
        ret=(IParameterDefnBase)pBase.clone();
        break;
      }
 catch (      CloneNotSupportedException e) {
        log.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
  if (ret != null) {
    if (ret instanceof ScalarParameterDefn) {
      ((ScalarParameterDefn)ret).setReportDesign((ReportDesignHandle)runnable.getDesignHandle());
      ((ScalarParameterDefn)ret).setLocale(locale);
      ((ScalarParameterDefn)ret).evaluateSelectionList();
    }
 else     if (ret instanceof ParameterGroupDefn) {
      Iterator iter2=((ParameterGroupDefn)ret).getContents().iterator();
      while (iter2.hasNext()) {
        IParameterDefnBase p=(IParameterDefnBase)iter2.next();
        if (p instanceof ScalarParameterDefn) {
          ((ScalarParameterDefn)p).setReportDesign((ReportDesignHandle)runnable.getDesignHandle());
          ((ScalarParameterDefn)p).setLocale(locale);
          ((ScalarParameterDefn)p).evaluateSelectionList();
        }
      }
    }
  }
  return ret;
}","public IParameterDefnBase getParameterDefn(String name){
  IParameterDefnBase ret=null;
  if (name == null) {
    return ret;
  }
  Collection original=((ReportRunnable)runnable).getParameterDefns(true);
  Iterator iter=original.iterator();
  while (iter.hasNext()) {
    ParameterDefnBase pBase=(ParameterDefnBase)iter.next();
    if (name.equals(pBase.getName())) {
      try {
        ret=(IParameterDefnBase)pBase.clone();
        break;
      }
 catch (      CloneNotSupportedException e) {
        log.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
  if (ret != null) {
    if (ret instanceof ScalarParameterDefn) {
      ((ScalarParameterDefn)ret).setReportDesign((ReportDesignHandle)runnable.getDesignHandle());
      ((ScalarParameterDefn)ret).setLocale(locale);
      ((ScalarParameterDefn)ret).evaluateSelectionList();
    }
 else     if (ret instanceof ParameterGroupDefn) {
      Iterator iter2=((ParameterGroupDefn)ret).getContents().iterator();
      while (iter2.hasNext()) {
        IParameterDefnBase p=(IParameterDefnBase)iter2.next();
        if (p instanceof ScalarParameterDefn) {
          ((ScalarParameterDefn)p).setReportDesign((ReportDesignHandle)runnable.getDesignHandle());
          ((ScalarParameterDefn)p).setLocale(locale);
          ((ScalarParameterDefn)p).evaluateSelectionList();
        }
      }
    }
  }
  return ret;
}",0.9974405850091408
77369,"IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      if (this.context.getDataEngine() instanceof DataGenerationEngine || this.context.getEngine() instanceof DteDataEngine) {
        if (""String_Node_Str"".equals(driverName) && (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) && propValue != null) {
          Object url=source.getModuleHandle().findResource((String)propValue,IResourceLocator.LIBRARY);
          propValue=url == null ? propValue : url.toString();
        }
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}","IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      if (this.context != null && (this.context.getDataEngine() instanceof DataGenerationEngine || this.context.getEngine() instanceof DteDataEngine)) {
        if (""String_Node_Str"".equals(driverName) && (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) && propValue != null) {
          Object url=source.getModuleHandle().findResource((String)propValue,IResourceLocator.LIBRARY);
          propValue=url == null ? propValue : url.toString();
        }
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}",0.9937739463601531
77370,"IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      if (""String_Node_Str"".equals(driverName) && (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) && propValue != null) {
        Object url=source.getModuleHandle().findResource((String)propValue,IResourceLocator.LIBRARY);
        propValue=url == null ? propValue : url.toString();
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}","IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      if (this.context.getDataEngine() instanceof DataGenerationEngine || this.context.getEngine() instanceof DteDataEngine) {
        if (""String_Node_Str"".equals(driverName) && (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) && propValue != null) {
          Object url=source.getModuleHandle().findResource((String)propValue,IResourceLocator.LIBRARY);
          propValue=url == null ? propValue : url.toString();
        }
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}",0.964312453206888
77371,"/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  dteParam.setType(toDteDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}","/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  dteParam.setType(toDteDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  dteParam.setNativeType(modelParam.getNativeDataType().intValue());
  return dteParam;
}",0.9532203389830508
77372,"void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    HashMap paramBindingCandidates=new HashMap();
    Iterator elmtIter=modelDataSet.parametersIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
        dteDataSet.addParameter(newParam(modelParam));
        if (modelParam.isInput()) {
          String defaultValueExpr=null;
          if (modelParam instanceof OdaDataSetParameterHandle) {
            if (((OdaDataSetParameterHandle)modelParam).getParamName() != null)             defaultValueExpr=""String_Node_Str"" + ((OdaDataSetParameterHandle)modelParam).getParamName() + ""String_Node_Str"";
          }
 else           defaultValueExpr=modelParam.getDefaultValue();
          if (defaultValueExpr != null)           paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
    }
    elmtIter=modelDataSet.paramBindingsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
        paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
      }
    }
    if (paramBindingCandidates.size() > 0) {
      elmtIter=paramBindingCandidates.keySet().iterator();
      while (elmtIter.hasNext()) {
        Object paramName=elmtIter.next();
        assert(paramName != null && paramName instanceof String);
        String expression=(String)paramBindingCandidates.get(paramName);
        dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
      }
    }
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  Iterator elmtIter=modelDataSet.computedColumnsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ComputedColumnHandle modelCmptdColumn=(ComputedColumnHandle)elmtIter.next();
      IComputedColumn dteCmptdColumn=newComputedColumn(modelCmptdColumn);
      dteDataSet.addComputedColumn(dteCmptdColumn);
    }
  }
  elmtIter=modelDataSet.filtersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      FilterConditionHandle modelFilter=(FilterConditionHandle)elmtIter.next();
      IFilterDefinition dteFilter=newFilter(modelFilter);
      dteDataSet.addFilter(dteFilter);
    }
  }
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(newColumnDefn((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}","void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    HashMap paramBindingCandidates=new HashMap();
    Iterator elmtIter=modelDataSet.parametersIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
        dteDataSet.addParameter(newParam(modelParam));
        if (modelParam.isInput()) {
          String defaultValueExpr=null;
          if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
            defaultValueExpr=""String_Node_Str"" + ""String_Node_Str"" + ((OdaDataSetParameterHandle)modelParam).getParamName() + ""String_Node_Str"";
          }
 else           defaultValueExpr=modelParam.getDefaultValue();
          if (defaultValueExpr != null)           paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
    }
    elmtIter=modelDataSet.paramBindingsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
        paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
      }
    }
    if (paramBindingCandidates.size() > 0) {
      elmtIter=paramBindingCandidates.keySet().iterator();
      while (elmtIter.hasNext()) {
        Object paramName=elmtIter.next();
        assert(paramName != null && paramName instanceof String);
        String expression=(String)paramBindingCandidates.get(paramName);
        dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
      }
    }
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  Iterator elmtIter=modelDataSet.computedColumnsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ComputedColumnHandle modelCmptdColumn=(ComputedColumnHandle)elmtIter.next();
      IComputedColumn dteCmptdColumn=newComputedColumn(modelCmptdColumn);
      dteDataSet.addComputedColumn(dteCmptdColumn);
    }
  }
  elmtIter=modelDataSet.filtersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      FilterConditionHandle modelFilter=(FilterConditionHandle)elmtIter.next();
      IFilterDefinition dteFilter=newFilter(modelFilter);
      dteDataSet.addFilter(dteFilter);
    }
  }
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(newColumnDefn((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}",0.994557501183152
77373,"/** 
 * Insert a row to a specific position.
 * @param rowNumber The row number. 1 insert after position. -1 insert before position
 * @param parentRowNumber The row number in the table.
 * @throws SemanticException
 */
public void insertRow(int rowNumber,int parentRowNumber) throws SemanticException {
  transStar(TRANS_LABEL_INSERT_ROW);
  Assert.isLegal(rowNumber != 0);
  int realRowNumber=rowNumber > 0 ? parentRowNumber + rowNumber : parentRowNumber + rowNumber + 1;
  int shiftPos=rowNumber > 0 ? rowNumber : rowNumber + 1;
  RowHandle row=(RowHandle)getRow(parentRowNumber);
  RowHandleAdapter adapt=HandleAdapterFactory.getInstance().getRowHandleAdapter(row);
  RowHandle copy=(RowHandle)adapt.copy();
  TableHandleAdapter.RowUIInfomation rowInfo=getRowInfo(row);
  List rowList=rowInfo.getAllChildren();
  int rowSize=rowList.size();
  for (int i=0; i < rowSize; i++) {
    CellHandle parentCell=(CellHandle)rowList.get(i);
    CellHandle cell=getCellHandleCopy(parentCell);
    copy.getSlot(RowHandle.CONTENT_SLOT).add(cell);
  }
  SlotHandle parentHandle=row.getContainerSlotHandle();
  parentHandle.add((copy));
  int pos=parentHandle.findPosn(row);
  parentHandle.shift(copy,pos + shiftPos);
  RowHandleAdapter copyAdapt=HandleAdapterFactory.getInstance().getRowHandleAdapter(copy);
  List copyChildren=copyAdapt.getChildren();
  getModelAdaptHelper().markDirty(true);
  TableHandleAdapter.RowUIInfomation info=getRowInfo(copy);
  List list=info.getAllChildren();
  List temp=new ArrayList();
  int size=list.size();
  List hasAdjust=new ArrayList();
  for (int i=0; i < size; i++) {
    Object fillCell=list.get(i);
    CellHandleAdapter cellAdapt=HandleAdapterFactory.getInstance().getCellHandleAdapter(fillCell);
    if (cellAdapt.getRowNumber() != realRowNumber) {
      if (!hasAdjust.contains(fillCell)) {
        cellAdapt.setRowSpan(cellAdapt.getRowSpan() + 1);
        hasAdjust.add(fillCell);
      }
      temp.add(new Integer(i));
    }
  }
  int copyRowSize=copyChildren.size();
  for (int i=0; i < copyRowSize; i++) {
    if (temp.contains(new Integer(i))) {
      ((CellHandle)copyChildren.get(i)).drop();
    }
  }
  transEnd();
}","/** 
 * Insert a row to a specific position.
 * @param rowNumber The row number. 1 insert after position. -1 insert before position
 * @param parentRowNumber The row number in the table.
 * @throws SemanticException
 */
public void insertRow(int rowNumber,int parentRowNumber) throws SemanticException {
  transStar(TRANS_LABEL_INSERT_ROW);
  Assert.isLegal(rowNumber != 0);
  int realRowNumber=rowNumber > 0 ? parentRowNumber + rowNumber : parentRowNumber + rowNumber + 1;
  int shiftPos=rowNumber > 0 ? rowNumber : rowNumber + 1;
  RowHandle row=(RowHandle)getRow(parentRowNumber);
  RowHandleAdapter adapt=HandleAdapterFactory.getInstance().getRowHandleAdapter(row);
  RowHandle copy=(RowHandle)adapt.copy();
  TableHandleAdapter.RowUIInfomation rowInfo=getRowInfo(row);
  List rowList=rowInfo.getAllChildren();
  int rowSize=rowList.size();
  for (int i=0; i < rowSize; i++) {
    CellHandle parentCell=(CellHandle)rowList.get(i);
    CellHandle cell=getCellHandleCopy(parentCell);
    copy.getSlot(RowHandle.CONTENT_SLOT).add(cell);
  }
  SlotHandle parentHandle=row.getContainerSlotHandle();
  parentHandle.add((copy));
  int pos=parentHandle.findPosn(row);
  parentHandle.shift(copy,pos + shiftPos);
  RowHandleAdapter copyAdapt=HandleAdapterFactory.getInstance().getRowHandleAdapter(copy);
  List copyChildren=copyAdapt.getChildren();
  if (getModelAdaptHelper() != null) {
    getModelAdaptHelper().markDirty(true);
  }
  TableHandleAdapter.RowUIInfomation info=getRowInfo(copy);
  List list=info.getAllChildren();
  List temp=new ArrayList();
  int size=list.size();
  List hasAdjust=new ArrayList();
  for (int i=0; i < size; i++) {
    Object fillCell=list.get(i);
    CellHandleAdapter cellAdapt=HandleAdapterFactory.getInstance().getCellHandleAdapter(fillCell);
    if (cellAdapt.getRowNumber() != realRowNumber) {
      if (!hasAdjust.contains(fillCell)) {
        cellAdapt.setRowSpan(cellAdapt.getRowSpan() + 1);
        hasAdjust.add(fillCell);
      }
      temp.add(new Integer(i));
    }
  }
  int copyRowSize=copyChildren.size();
  for (int i=0; i < copyRowSize; i++) {
    if (temp.contains(new Integer(i))) {
      ((CellHandle)copyChildren.get(i)).drop();
    }
  }
  transEnd();
}",0.9896954430959468
77374,"/** 
 * Sets the data type in parameter type choices to this parameter. The allowed values are: <ul> <li>PARAM_TYPE_ANY <li>PARAM_TYPE_INTEGER <li>PARAM_TYPE_STRING <li>PARAM_TYPE_DATETIME <li>PARAM_TYPE_DECIMAL <li>PARAM_TYPE_FLOAT <li>PARAM_TYPE_BOOLEAN </ul>
 * @param dataType the data type to set
 * @throws SemanticException if the value is not in the above list.
 */
public void setParameterDataType(String dataType) throws SemanticException {
  setProperty(DATA_TYPE_MEMBER,dataType);
}","/** 
 * Sets the data type in parameter type choices to this parameter. The allowed values are: <ul> <li>PARAM_TYPE_ANY <li>PARAM_TYPE_INTEGER <li>PARAM_TYPE_STRING <li>PARAM_TYPE_DATETIME <li>PARAM_TYPE_DECIMAL <li>PARAM_TYPE_FLOAT <li>PARAM_TYPE_BOOLEAN </ul>
 * @param dataType the data type to set
 * @throws SemanticException if the value is not in the above list.
 */
public void setParameterDataType(String dataType){
  setProperty(DATA_TYPE_MEMBER,dataType);
}",0.972972972972973
77375,"/** 
 * Return the IQueryResults
 * @param dataEngine
 * @param dataSetDesignName
 * @param appContext
 * @param joinConditions
 * @param isLeftDataSet
 * @return
 * @throws DataException
 */
private IQueryResults getResultSetQuery(DataEngineImpl dataEngine,String dataSetDesignName,Map appContext,List joinConditions,boolean isLeftDataSet) throws DataException {
  QueryDefinition queryDefinition=new QueryDefinition();
  queryDefinition.setDataSetName(dataSetDesignName);
  IPreparedQuery preparedQuery;
  try {
    preparedQuery=PreparedQueryUtil.newInstance(dataEngine,queryDefinition,appContext);
    IQueryResults ri=preparedQuery.execute(null);
    return ri;
  }
 catch (  BirtException e) {
    throw new DataException(e.getMessage());
  }
}","/** 
 * Return the IQueryResults
 * @param dataEngine
 * @param dataSetDesignName
 * @param appContext
 * @param joinConditions
 * @param isLeftDataSet
 * @return
 * @throws DataException
 */
private IQueryResults getResultSetQuery(DataEngineImpl dataEngine,String dataSetDesignName,Map appContext,List joinConditions,boolean isLeftDataSet) throws DataException {
  QueryDefinition queryDefinition=new QueryDefinition();
  queryDefinition.setDataSetName(dataSetDesignName);
  setParameterBindings(dataEngine,dataSetDesignName,isLeftDataSet,queryDefinition);
  IPreparedQuery preparedQuery;
  try {
    preparedQuery=PreparedQueryUtil.newInstance(dataEngine,queryDefinition,appContext);
    IQueryResults ri=preparedQuery.execute(null);
    return ri;
  }
 catch (  BirtException e) {
    throw new DataException(e.getMessage());
  }
}",0.946969696969697
77376,"/** 
 * Initialize the resultClass. This method is lightweight.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initializeResultClass(DataEngineImpl dataEngine,Map appContext) throws DataException {
  try {
    IQueryResults left=getResultSetQuery(dataEngine,dataSet.getLeftDataSetDesignName(),appContext,dataSet.getJoinConditions(),false);
    IQueryResults right=getResultSetQuery(dataEngine,dataSet.getRightDataSetDesignName(),appContext,dataSet.getJoinConditions(),false);
    JointResultMetadata meta=getJointResultMetadata(left.getResultMetaData(),right.getResultMetaData());
    resultClass=meta.getResultClass();
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}","/** 
 * Initialize the resultClass. This method is lightweight.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initializeResultClass(DataEngineImpl dataEngine,Map appContext) throws DataException {
  try {
    IQueryResults left=getResultSetQuery(dataEngine,dataSet.getLeftDataSetDesignName(),appContext,dataSet.getJoinConditions(),true);
    IQueryResults right=getResultSetQuery(dataEngine,dataSet.getRightDataSetDesignName(),appContext,dataSet.getJoinConditions(),false);
    JointResultMetadata meta=getJointResultMetadata(left.getResultMetaData(),right.getResultMetaData());
    resultClass=meta.getResultClass();
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}",0.99535500995355
77377,"/** 
 * Constructor.
 * @param dataEngine
 * @param queryDefn
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
PreparedJointDataSourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext);
  this.dataEngine=dataEngine;
  this.dataSetDesign=dataSetDesign;
  this.appContext=appContext;
}","/** 
 * Constructor.
 * @param dataEngine
 * @param queryDefn
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
PreparedJointDataSourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext);
  this.dataEngine=dataEngine;
  this.dataSetDesign=dataSetDesign;
  this.appContext=appContext;
  this.parameterBindings=queryDefn.getInputParamBindings();
}",0.9365750528541226
77378,"/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    HashMap paramBindingCandidates=new HashMap();
    Iterator elmtIter=modelDataSet.parametersIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
        if (modelParam.isInput()) {
          String defaultValueExpr=null;
          if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
            defaultValueExpr=PARAMS_PREFIX + ""String_Node_Str"" + ((OdaDataSetParameterHandle)modelParam).getParamName()+ ""String_Node_Str"";
          }
 else           defaultValueExpr=modelParam.getDefaultValue();
          if (defaultValueExpr != null)           paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
    }
    elmtIter=modelDataSet.paramBindingsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
        paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
      }
    }
    if (paramBindingCandidates.size() > 0) {
      elmtIter=paramBindingCandidates.keySet().iterator();
      while (elmtIter.hasNext()) {
        Object paramName=elmtIter.next();
        assert(paramName != null && paramName instanceof String);
        String expression=(String)paramBindingCandidates.get(paramName);
        dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
      }
    }
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  Iterator elmtIter=modelDataSet.computedColumnsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ComputedColumnHandle modelCmptdColumn=(ComputedColumnHandle)elmtIter.next();
      dteDataSet.addComputedColumn(new ComputedColumnAdapter(modelCmptdColumn));
    }
  }
  elmtIter=modelDataSet.filtersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      FilterConditionHandle modelFilter=(FilterConditionHandle)elmtIter.next();
      dteDataSet.addFilter(new FilterAdapter(modelFilter));
    }
  }
  if (modelDataSet instanceof OdaDataSetHandle) {
    elmtIter=modelDataSet.resultSetIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        OdaResultSetColumnHandle modelColumn=(OdaResultSetColumnHandle)elmtIter.next();
        if (!modelColumn.getColumnName().equals(modelColumn.getNativeName()))         dteDataSet.addResultSetHint(new ColumnAdapter((ResultSetColumnHandle)modelColumn));
      }
    }
  }
 else {
    elmtIter=modelDataSet.resultSetHintsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
        dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
      }
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
}","/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  mergeHints(modelDataSet,dteDataSet);
}",0.3007915567282322
77379,"/** 
 * Informs this session some resources is changed. Session will check all opened mudules, all interfered modules will be informed of the changes. <p> Current, only changes of library or message file is supported.
 * @param ev the library change event to fire
 */
public void fireLibChange(LibraryChangeEvent ev){
  String path=ev.getChangedResourcePath();
  try {
    path=new File(path).toURL().toString();
  }
 catch (  MalformedURLException e) {
    return;
  }
  Iterator iter=getModuleIterator();
  while (iter.hasNext()) {
    Module module=(Module)iter.next();
    if (module.getLocation().equalsIgnoreCase(path) || module.getLibraryByLocation(path,IAccessControl.ARBITARY_LEVEL) != null) {
      LibraryChangeEvent event=new LibraryChangeEvent(ev.getChangedResourcePath());
      event.setTarget(module);
      event.setDeliveryPath(ev.getDeliveryPath());
      module.broadcastResourceChangeEvent(event);
    }
  }
}","/** 
 * Informs this session some resources is changed. Session will check all opened mudules, all interfered modules will be informed of the changes. <p> Current, only changes of library or message file is supported.
 * @param ev the library change event to fire
 */
public void fireLibChange(LibraryChangeEvent ev){
  String path=ev.getChangedResourcePath();
  try {
    path=new File(path).toURL().toString();
  }
 catch (  MalformedURLException e) {
    return;
  }
  Iterator iter=getModuleIterator();
  while (iter.hasNext()) {
    Module module=(Module)iter.next();
    if (module.getLocation().equalsIgnoreCase(path) || module.getLibraryByLocation(path,IAccessControl.ARBITARY_LEVEL) != null) {
      LibraryChangeEvent event=new LibraryChangeEvent(ev.getChangedResourcePath());
      event.setTarget(module);
      event.setDeliveryPath(ev.getDeliveryPath());
      module.broadcastResourceChangeEvent(event);
    }
  }
  broadcastResourceChangeEvent(ev);
}",0.981012658227848
77380,"/** 
 * test abnormal input arguments
 */
public void testReportDocumentAbnormal(){
  String report_design=path + INPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  String report_document=path + OUTPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  try {
    createReportDocument(report_design,report_document);
    IDocArchiveReader archive=new FileArchiveReader(report_document);
    IReportDocument reportDoc=engine.openReportDocument(report_document);
    TOCNode tocNode;
    tocNode=(TOCNode)reportDoc.findTOC(null);
    assertEquals(""String_Node_Str"",null,tocNode.getDisplayString());
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    List children;
    children=reportDoc.getChildren(null);
    assertNotNull(children);
    assertEquals(""String_Node_Str"",1,children.size());
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    long pageNum;
    String bookmark=null;
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
    bookmark=""String_Node_Str"";
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
    bookmark=""String_Node_Str"";
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * test abnormal input arguments
 */
public void testReportDocumentAbnormal(){
  String report_design=path + INPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  String report_document=path + OUTPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  try {
    createReportDocument(report_design,report_document);
    IReportDocument reportDoc=engine.openReportDocument(report_document);
    TOCNode tocNode;
    tocNode=(TOCNode)reportDoc.findTOC(null);
    assertEquals(""String_Node_Str"",null,tocNode.getDisplayString());
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    List children;
    children=reportDoc.getChildren(null);
    assertNotNull(children);
    assertEquals(""String_Node_Str"",1,children.size());
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    long pageNum;
    String bookmark=null;
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
    bookmark=""String_Node_Str"";
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
    bookmark=""String_Node_Str"";
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.980587909040488
77381,"/** 
 * test informations which should be contained by report document
 */
public void testReportDocument(){
  String report_design=path + INPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  String report_document=path + OUTPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  try {
    createReportDocument_param(report_design,report_document);
    IDocArchiveReader archive=new FileArchiveReader(report_document);
    IReportDocument reportDoc=engine.openReportDocument(report_document);
    TOCNode root, tableNode, headerNode, groupNode, detailNode, footerNode;
    root=reportDoc.findTOC(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",root);
    assertNotNull(""String_Node_Str"",root.getChildren());
    tableNode=(TOCNode)root.getChildren().get(0);
    assertNotNull(""String_Node_Str"",tableNode);
    assertEquals(""String_Node_Str"",""String_Node_Str"",tableNode.getDisplayString());
    assertNotNull(""String_Node_Str"",tableNode.getChildren());
    assertEquals(""String_Node_Str"",6,tableNode.getChildren().size());
    headerNode=(TOCNode)tableNode.getChildren().get(0);
    groupNode=(TOCNode)((TOCNode)tableNode.getChildren().get(1)).getChildren().get(0);
    footerNode=(TOCNode)tableNode.getChildren().get(5);
    assertNotNull(""String_Node_Str"",headerNode);
    assertNotNull(""String_Node_Str"",groupNode);
    assertNotNull(""String_Node_Str"",footerNode);
    assertEquals(""String_Node_Str"",""String_Node_Str"",headerNode.getDisplayString());
    assertEquals(""String_Node_Str"",""String_Node_Str"",groupNode.getDisplayString());
    assertEquals(""String_Node_Str"",""String_Node_Str"",footerNode.getDisplayString());
    assertNotNull(""String_Node_Str"",groupNode.getChildren());
    detailNode=(TOCNode)((TOCNode)tableNode.getChildren().get(1)).getChildren().get(1);
    assertEquals(""String_Node_Str"",""String_Node_Str"",detailNode.getDisplayString());
    IDocArchiveReader arch=reportDoc.getArchive();
    assertNotNull(""String_Node_Str"",arch);
    assertEquals(""String_Node_Str"",archive.getName(),arch.getName());
    ArrayList bookmarks=(ArrayList)reportDoc.getBookmarks();
    String hMark=""String_Node_Str"", gMark=""String_Node_Str"", dMark=""String_Node_Str"";
    String fMark=""String_Node_Str"", pMark=""String_Node_Str"";
    assertNotNull(""String_Node_Str"",bookmarks);
    assertTrue(""String_Node_Str"" + hMark,bookmarks.contains(hMark));
    assertTrue(""String_Node_Str"" + gMark,bookmarks.contains(gMark));
    assertTrue(""String_Node_Str"" + dMark,bookmarks.contains(dMark));
    assertTrue(""String_Node_Str"" + fMark,bookmarks.contains(fMark));
    assertTrue(""String_Node_Str"" + pMark,bookmarks.contains(pMark));
    List root_children=reportDoc.getChildren(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",root_children);
    assertNotNull(""String_Node_Str"",root_children.get(0));
    TOCNode table_toc=(TOCNode)root_children.get(0);
    List table_children=reportDoc.getChildren(table_toc.getNodeID());
    assertNotNull(""String_Node_Str"",table_children);
    assertEquals(""String_Node_Str"",6,table_children.size());
    InputStream designStream=reportDoc.getDesignStream();
    FileInputStream designFile=new FileInputStream(report_design);
    assertNotNull(""String_Node_Str"",designStream);
    int length=designStream.available();
    byte[] fBytes=new byte[length];
    designStream.read(fBytes,0,length);
    String tempFile=path + OUTPUT_FOLDER + ""String_Node_Str"";
    File tmp=new File(tempFile);
    FileOutputStream fos=new FileOutputStream(tmp);
    fos.write(fBytes);
    fos.close();
    designStream.close();
    designFile.close();
    assertEquals(""String_Node_Str"",-6,new File(report_design).compareTo(tmp));
    removeFile(tempFile);
    assertEquals(""String_Node_Str"",5,reportDoc.getPageCount());
    assertEquals(""String_Node_Str"",5,reportDoc.getPageNumber(pMark));
    HashMap params=(HashMap)reportDoc.getParameterValues();
    assertNotNull(""String_Node_Str"",params);
    assertEquals(""String_Node_Str"",2,params.size());
    assertNotNull(""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertNotNull(""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertEquals(""String_Node_Str"",""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertEquals(""String_Node_Str"",new Integer(2),params.get(new String(""String_Node_Str"")));
    String name=report_document;
    name=name.replace('/','\\').substring(1);
    assertEquals(""String_Node_Str"",name,reportDoc.getName());
    IReportRunnable report=reportDoc.getReportRunnable();
    assertNotNull(""String_Node_Str"",report);
    assertEquals(""String_Node_Str"",reportRunnable.getReportEngine(),report.getReportEngine());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * test informations which should be contained by report document
 */
public void testReportDocument(){
  String report_design=path + INPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  String report_document=path + OUTPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  try {
    createReportDocument_param(report_design,report_document);
    IDocArchiveReader archive=new FileArchiveReader(report_document);
    IReportDocument reportDoc=engine.openReportDocument(report_document);
    TOCNode root, tableNode, headerNode, groupNode, detailNode, footerNode;
    root=reportDoc.findTOC(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",root);
    assertNotNull(""String_Node_Str"",root.getChildren());
    tableNode=(TOCNode)root.getChildren().get(0);
    assertNotNull(""String_Node_Str"",tableNode);
    assertEquals(""String_Node_Str"",""String_Node_Str"",tableNode.getDisplayString());
    assertNotNull(""String_Node_Str"",tableNode.getChildren());
    assertEquals(""String_Node_Str"",6,tableNode.getChildren().size());
    headerNode=(TOCNode)tableNode.getChildren().get(0);
    groupNode=(TOCNode)((TOCNode)tableNode.getChildren().get(1)).getChildren().get(0);
    footerNode=(TOCNode)tableNode.getChildren().get(5);
    assertNotNull(""String_Node_Str"",headerNode);
    assertNotNull(""String_Node_Str"",groupNode);
    assertNotNull(""String_Node_Str"",footerNode);
    assertEquals(""String_Node_Str"",""String_Node_Str"",headerNode.getDisplayString());
    assertEquals(""String_Node_Str"",""String_Node_Str"",groupNode.getDisplayString());
    assertEquals(""String_Node_Str"",""String_Node_Str"",footerNode.getDisplayString());
    assertNotNull(""String_Node_Str"",groupNode.getChildren());
    detailNode=(TOCNode)((TOCNode)tableNode.getChildren().get(1)).getChildren().get(1);
    assertEquals(""String_Node_Str"",""String_Node_Str"",detailNode.getDisplayString());
    IDocArchiveReader arch=reportDoc.getArchive();
    assertNotNull(""String_Node_Str"",arch);
    assertEquals(""String_Node_Str"",archive.getName(),arch.getName());
    ArrayList bookmarks=(ArrayList)reportDoc.getBookmarks();
    String hMark=""String_Node_Str"", gMark=""String_Node_Str"", dMark=""String_Node_Str"";
    String fMark=""String_Node_Str"", pMark=""String_Node_Str"";
    assertNotNull(""String_Node_Str"",bookmarks);
    assertTrue(""String_Node_Str"" + hMark,bookmarks.contains(hMark));
    assertTrue(""String_Node_Str"" + gMark,bookmarks.contains(gMark));
    assertTrue(""String_Node_Str"" + dMark,bookmarks.contains(dMark));
    assertTrue(""String_Node_Str"" + fMark,bookmarks.contains(fMark));
    assertTrue(""String_Node_Str"" + pMark,bookmarks.contains(pMark));
    List root_children=reportDoc.getChildren(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",root_children);
    assertNotNull(""String_Node_Str"",root_children.get(0));
    TOCNode table_toc=(TOCNode)root_children.get(0);
    List table_children=reportDoc.getChildren(table_toc.getNodeID());
    assertNotNull(""String_Node_Str"",table_children);
    assertEquals(""String_Node_Str"",6,table_children.size());
    InputStream designStream=reportDoc.getDesignStream();
    FileInputStream designFile=new FileInputStream(report_design);
    assertNotNull(designStream);
    int length=designStream.available();
    assertTrue(length > 0);
    designStream.close();
    designFile.close();
    assertEquals(""String_Node_Str"",5,reportDoc.getPageCount());
    assertEquals(""String_Node_Str"",5,reportDoc.getPageNumber(pMark));
    HashMap params=(HashMap)reportDoc.getParameterValues();
    assertNotNull(""String_Node_Str"",params);
    assertEquals(""String_Node_Str"",2,params.size());
    assertNotNull(""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertNotNull(""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertEquals(""String_Node_Str"",""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertEquals(""String_Node_Str"",new Integer(2),params.get(new String(""String_Node_Str"")));
    String name=report_document;
    name=name.replace('/','\\').substring(1);
    assertEquals(""String_Node_Str"",name,reportDoc.getName());
    IReportRunnable report=reportDoc.getReportRunnable();
    assertNotNull(""String_Node_Str"",report);
    assertEquals(""String_Node_Str"",reportRunnable.getReportEngine(),report.getReportEngine());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.946494867875082
77382,"/** 
 * Map oda data type to model data type.
 * @param modelDataType
 * @return
 */
private static String toModelDataType(int modelDataType){
  if (modelDataType == DataType.INTEGER_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
 else   if (modelDataType == DataType.STRING_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
 else   if (modelDataType == DataType.DATE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
 else   if (modelDataType == DataType.DECIMAL_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL;
 else   if (modelDataType == DataType.DOUBLE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT;
  return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
}","/** 
 * Map oda data type to model data type.
 * @param modelDataType
 * @return
 */
public static String toModelDataType(int modelDataType){
  if (modelDataType == DataType.INTEGER_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER;
 else   if (modelDataType == DataType.STRING_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
 else   if (modelDataType == DataType.DATE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
 else   if (modelDataType == DataType.DECIMAL_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL;
 else   if (modelDataType == DataType.DOUBLE_TYPE)   return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT;
  return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY;
}",0.9924502402196294
77383,"public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"" + getSourceViewer());
  }
  if (isEnabled()) {
    DataSetHandle handle=(DataSetHandle)getSelectedObjects().getFirstElement();
    try {
      DataSetUIUtil.updateColumnCache(handle);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
    getSourceViewer().refresh(handle);
  }
}","public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"" + getSourceViewer());
  }
  if (isEnabled()) {
    DataSetHandle handle=(DataSetHandle)getSelectedObjects().getFirstElement();
    try {
      DataSetUIUtil.updateColumnCacheAfterCleanRs(handle);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
    getSourceViewer().refresh(handle);
  }
}",0.9852579852579852
77384,"/** 
 * @param resultSetColumnHandle
 * @param uniqueColumnName
 * @param index
 * @throws BirtException
 */
private void addResultSetColumn(PropertyHandle resultSetColumnHandle,String uniqueColumnName,int index) throws BirtException {
  ResultSetColumn rsColumn=new ResultSetColumn();
  rsColumn.setColumnName(uniqueColumnName);
  rsColumn.setPosition(new Integer(index));
  resultSetColumnHandle.addItem(rsColumn);
}","/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  PropertyHandle resultSetColumnHandle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_PROP);
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    if (!meta.isComputedColumn(i)) {
      try {
        rsColumn.setColumnName(meta.getColumnName(i));
        rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
        rsColumn.setNativeName(meta.getColumnName(i));
        rsColumn.setPosition(new Integer(i));
        resultSetColumnHandle.addItem(rsColumn);
      }
 catch (      BirtException e) {
        e.printStackTrace();
      }
    }
  }
}",0.3275862068965517
77385,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    if (needsUseResultHint(dataSetHandle,metaData)) {
      metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
    }
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    addResultSetColumn(dataSetHandle,metaData);
  }
  if (needsUseResultHint(dataSetHandle,metaData)) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}",0.8307873090481787
77386,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    resultSetList=(List)dataSetHandle.getProperty(OdaDataSetHandle.RESULT_SET_PROP);
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int index=0;
  if (resultSetList != null) {
    ResultSetColumn resultSetColumn;
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      columnDef=new ResultSetColumnDefinition(resultSetColumn.getColumnName());
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(ModelAdapter.adaptModelDataType(resultSetColumn.getDataType()));
      columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
      index++;
    }
    if (computedList != null) {
      ComputedColumn computedColumn;
      Iterator computedColumnIterator=computedList.iterator();
      while (computedColumnIterator.hasNext()) {
        computedColumn=(ComputedColumn)computedColumnIterator.next();
        columnDef=new ResultSetColumnDefinition(computedColumn.getName());
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(ModelAdapter.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,computedColumn.getName()) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,computedColumn.getName());
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
        index++;
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    resultSetList=(List)dataSetHandle.getProperty(OdaDataSetHandle.RESULT_SET_PROP);
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int index=0;
  if (resultSetList != null) {
    ResultSetColumn resultSetColumn;
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      columnDef=new ResultSetColumnDefinition(resultSetColumn.getColumnName());
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(ModelAdapter.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
      index++;
    }
    if (computedList != null) {
      ComputedColumn computedColumn;
      Iterator computedColumnIterator=computedList.iterator();
      while (computedColumnIterator.hasNext()) {
        computedColumn=(ComputedColumn)computedColumnIterator.next();
        columnDef=new ResultSetColumnDefinition(computedColumn.getName());
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(ModelAdapter.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,computedColumn.getName()) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,computedColumn.getName());
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
        index++;
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}",0.9512670565302144
77387,"public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  setType(ModelAdapter.adaptModelDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  if (modelParam instanceof OdaDataSetParameterHandle) {
    if (((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
      setDefaultInputValue(PARAMS_PREFIX + ""String_Node_Str"" + ((OdaDataSetParameterHandle)modelParam).getParamName()+ ""String_Node_Str"");
    }
  }
 else   setDefaultInputValue(modelParam.getDefaultValue());
}","public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   setNativeType(modelParam.getNativeDataType().intValue());
  setType(ModelAdapter.adaptModelDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
    setDefaultInputValue(PARAMS_PREFIX + ""String_Node_Str"" + ((OdaDataSetParameterHandle)modelParam).getParamName()+ ""String_Node_Str"");
  }
 else   setDefaultInputValue(modelParam.getDefaultValue());
}",0.8082191780821918
77388,"/** 
 * save the dataset design's metadata info
 * @param design
 */
public static void saveDataSetDesign(DataSetDesign design){
  IConnection conn=null;
  try {
    IDriver jdbcDriver=new OdaJdbcDriver();
    conn=jdbcDriver.getConnection(null);
    java.util.Properties prop=new java.util.Properties();
    DataSourceDesign dataSourceDesign=design.getDataSourceDesign();
    if (dataSourceDesign != null) {
      prop.put(Constants.ODADriverClass,dataSourceDesign.getPublicProperties().getProperty(Constants.ODADriverClass) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODADriverClass));
      prop.put(Constants.ODAURL,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAURL) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAURL));
      prop.put(Constants.ODAUser,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAUser) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAUser));
      prop.put(Constants.ODAPassword,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAPassword) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAPassword));
    }
    conn.open(prop);
    IQuery query=conn.newQuery(design.getOdaExtensionDataSetId());
    query.setMaxRows(1);
    query.prepare(design.getQueryText());
    setParameterMetaData(design,query);
    IResultSetMetaData metadata=query.getMetaData();
    if (metadata != null)     setResultSetMetaData(design,metadata);
 else {
      query.executeQuery();
      metadata=query.getMetaData();
      setResultSetMetaData(design,metadata);
    }
  }
 catch (  OdaException e) {
    design.setResultSets(null);
  }
 finally {
    if (conn != null)     try {
      conn.close();
    }
 catch (    OdaException e) {
      e.printStackTrace();
    }
    ;
  }
}","/** 
 * save the dataset design's metadata info
 * @param design
 */
public static void saveDataSetDesign(DataSetDesign design){
  IConnection conn=null;
  try {
    IDriver jdbcDriver=new OdaJdbcDriver();
    conn=jdbcDriver.getConnection(null);
    java.util.Properties prop=new java.util.Properties();
    DataSourceDesign dataSourceDesign=design.getDataSourceDesign();
    if (dataSourceDesign != null) {
      prop.put(Constants.ODADriverClass,dataSourceDesign.getPublicProperties().getProperty(Constants.ODADriverClass) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODADriverClass));
      prop.put(Constants.ODAURL,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAURL) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAURL));
      prop.put(Constants.ODAUser,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAUser) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAUser));
      prop.put(Constants.ODAPassword,dataSourceDesign.getPublicProperties().getProperty(Constants.ODAPassword) == null ? ""String_Node_Str"" : dataSourceDesign.getPublicProperties().getProperty(Constants.ODAPassword));
    }
    conn.open(prop);
    IQuery query=conn.newQuery(design.getOdaExtensionDataSetId());
    query.setMaxRows(1);
    query.prepare(design.getQueryText());
    setParameterMetaData(design,query);
    IResultSetMetaData metadata=query.getMetaData();
    setResultSetMetaData(design,metadata);
  }
 catch (  OdaException e) {
    design.setResultSets(null);
  }
 finally {
    if (conn != null)     try {
      conn.close();
    }
 catch (    OdaException e) {
      e.printStackTrace();
    }
    ;
  }
}",0.8808036926418681
77389,"/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  dteParam.setType(toDteDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  dteParam.setNativeType(modelParam.getNativeDataType().intValue());
  return dteParam;
}","/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   dteParam.setNativeType(modelParam.getNativeDataType().intValue());
  dteParam.setType(toDteDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}",0.8578616352201258
77390,"/** 
 * Sets the column name.
 * @param columnName the column name to set.
 * @throws SemanticException if the new column name duplicates with the existed ones.
 */
public void setName(String columnName) throws SemanticException {
  if (columnName != null) {
    String tmpName=DataBoundColumnUtil.makeUniqueName(getElementHandle(),columnName,(ComputedColumn)getStructure());
    if (!columnName.equals(tmpName)) {
      throw new PropertyValueException(getElementHandle().getElement(),getPropertyDefn(),columnName,PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS);
    }
  }
  setProperty(ComputedColumn.NAME_MEMBER,columnName);
}","/** 
 * Sets the column name.
 * @param columnName the column name to set.
 * @throws SemanticException if the new column name duplicates with the existed ones.
 */
public void setName(String columnName) throws SemanticException {
  List resultList=ColumnBindingNameValidator.getInstance().validateForReplacing(getElementHandle(),getPropertyDefn(),getStructure(),columnName);
  if (resultList.size() > 0) {
    throw (PropertyValueException)resultList.get(0);
  }
  setProperty(ComputedColumn.NAME_MEMBER,columnName);
}",0.5771230502599654
77391,"/** 
 * Removes all script libs.
 * @throws SemanticException
 */
public void dropAllScriptLibs() throws SemanticException {
  List scriptLibs=getListProperty(SCRIPTLIBS_PROP);
  int count=scriptLibs.size();
  for (int i=count - 1; i >= 0; --i) {
    ScriptLib scriptLib=(ScriptLib)scriptLibs.get(i);
    dropScriptLib(scriptLib);
  }
}","/** 
 * Removes all script libs.
 * @throws SemanticException
 */
public void dropAllScriptLibs() throws SemanticException {
  List scriptLibs=getFilteredStructureList(SCRIPTLIBS_PROP,ScriptLib.SCRIPTLIB_NAME_MEMBER);
  if (scriptLibs == null)   return;
  int count=scriptLibs.size();
  for (int i=count - 1; i >= 0; --i) {
    ScriptLibHandle scriptLibHandle=(ScriptLibHandle)scriptLibs.get(i);
    dropScriptLib(scriptLibHandle);
  }
}",0.7813712807244502
77392,"/** 
 * Removes special script lib.
 * @param scriptLib script lib
 * @throws SemanticException
 */
public void dropScriptLib(ScriptLib scriptLib) throws SemanticException {
  ElementPropertyDefn propDefn=module.getPropertyDefn(SCRIPTLIBS_PROP);
  if (scriptLib == null)   return;
  PropertyCommand cmd=new PropertyCommand(getModule(),getElement());
  cmd.removeItem(new CachedMemberRef(propDefn),scriptLib);
}","/** 
 * Removes special script lib handle.
 * @param scriptLibHandle script lib handle
 * @throws SemanticException
 */
public void dropScriptLib(ScriptLibHandle scriptLibHandle) throws SemanticException {
  ElementPropertyDefn propDefn=module.getPropertyDefn(SCRIPTLIBS_PROP);
  if (scriptLibHandle == null)   return;
  PropertyCommand cmd=new PropertyCommand(getModule(),getElement());
  cmd.removeItem(new CachedMemberRef(propDefn),scriptLibHandle.getStructure());
}",0.8850967007963595
77393,"/** 
 * Shifts jar file from source position to destination position.
 * @param sourceIndex source position
 * @param destIndex destination position
 * @throws SemanticException
 */
public void shiftScriptLibs(int sourceIndex,int destIndex) throws SemanticException {
  ElementPropertyDefn propDefn=module.getPropertyDefn(SCRIPTLIBS_PROP);
  PropertyCommand cmd=new PropertyCommand(getModule(),getElement());
  cmd.moveItem(new CachedMemberRef(propDefn),sourceIndex,destIndex);
}","/** 
 * Shifts jar file from source position to destination position. For example, if a list has A, B, C scriptLib in order, when move A scriptLib to <code>newPosn</code> with the value 2, the sequence becomes B, A, C.
 * @param sourceIndex source position. The range is <code>sourceIndex &lt; 0 || sourceIndex &gt;= list.size()</code>
 * @param destIndex destination position.The range is <code> destIndex &lt; 0 || destIndex &gt;= list.size()</code>
 * @throws SemanticException
 */
public void shiftScriptLibs(int sourceIndex,int destIndex) throws SemanticException {
  ElementPropertyDefn propDefn=module.getPropertyDefn(SCRIPTLIBS_PROP);
  PropertyCommand cmd=new PropertyCommand(getModule(),getElement());
  cmd.moveItem(new CachedMemberRef(propDefn),sourceIndex,destIndex);
}",0.7597145122918318
77394,"/** 
 * Add script lib
 * @param scriptLib script lib
 * @throws SemanticException
 */
public void addScriptLib(ScriptLib scriptLib) throws SemanticException {
  ElementPropertyDefn propDefn=module.getPropertyDefn(SCRIPTLIBS_PROP);
  if (scriptLib == null || StringUtil.isBlank(scriptLib.getName())) {
    throw new PropertyValueException(getElement(),propDefn,scriptLib,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE);
  }
  PropertyCommand cmd=new PropertyCommand(getModule(),getElement());
  cmd.addItem(new CachedMemberRef(propDefn),scriptLib);
}","/** 
 * Add script lib
 * @param scriptLib script lib
 * @throws SemanticException
 */
public void addScriptLib(ScriptLib scriptLib) throws SemanticException {
  ElementPropertyDefn propDefn=module.getPropertyDefn(SCRIPTLIBS_PROP);
  PropertyCommand cmd=new PropertyCommand(getModule(),getElement());
  cmd.addItem(new CachedMemberRef(propDefn),scriptLib);
}",0.7825136612021858
77395,"/** 
 * This method tests whether column bindings in ExprManager is valid or not.
 * @param exprManager
 * @return
 * @throws DataException
 */
public static void validateColumnBinding(ExprManager exprManager) throws DataException {
  ExprManagerUtil util=new ExprManagerUtil();
  util.exprManager=exprManager;
  util.checkDependencyCycle();
  util.checkGroupNameValidation();
}","/** 
 * This method tests whether column bindings in ExprManager is valid or not.
 * @param exprManager
 * @return
 * @throws DataException
 */
public static void validateColumnBinding(ExprManager exprManager) throws DataException {
  ExprManagerUtil util=new ExprManagerUtil();
  util.exprManager=exprManager;
  util.checkColumnBindingExpression();
  util.checkDependencyCycle();
  util.checkGroupNameValidation();
}",0.9509433962264152
77396,"/** 
 * Test whether high level group keys are depended on low level group keys.
 * @param exprManager
 * @return
 * @throws DataException 
 */
private void checkGroupNameValidation() throws DataException {
  HashMap map=this.getGroupKeys();
  Iterator it=map.keySet().iterator();
  while (it.hasNext()) {
    Integer level=(Integer)it.next();
    exprManager.setEntryGroupLevel(level.intValue());
    if (!ExpressionCompilerUtil.hasColumnRow(map.get(level).toString(),exprManager)) {
      exprManager.setEntryGroupLevel(ExprManager.OVERALL_GROUP);
      if (!isColumnBindingExist(map.get(level).toString())) {
        throw new DataException(ResourceConstants.COLUMN_BINDING_NOT_EXIST,map.get(level).toString());
      }
      throw new DataException(ResourceConstants.INVALID_GROUP_KEY,new Object[]{map.get(level).toString(),level});
    }
  }
  exprManager.setEntryGroupLevel(ExprManager.OVERALL_GROUP);
}","/** 
 * Test whether high level group keys are depended on low level group keys.
 * @param exprManager
 * @return
 * @throws DataException 
 */
private void checkGroupNameValidation() throws DataException {
  HashMap map=this.getGroupKeys();
  Iterator it=map.keySet().iterator();
  while (it.hasNext()) {
    Integer level=(Integer)it.next();
    exprManager.setEntryGroupLevel(level.intValue());
    if (!ExpressionCompilerUtil.hasColumnRow(map.get(level).toString(),exprManager)) {
      exprManager.setEntryGroupLevel(ExprManager.OVERALL_GROUP);
      if (!isColumnBindingExist(map.get(level).toString())) {
        throw new DataException(ResourceConstants.COLUMN_BINDING_NOT_EXIST,map.get(level).toString());
      }
      throw new DataException(ResourceConstants.INVALID_GROUP_KEY_COLUMN,new Object[]{map.get(level).toString(),level});
    }
  }
  exprManager.setEntryGroupLevel(ExprManager.OVERALL_GROUP);
}",0.9961643835616438
77397,"protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (documentInUrl)   this.missingParameter=false;
 else   this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
  this.parametersAsString=getParsedParametersAsStringWithDefaultValue(this.parametersAsString,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
  this.displayTexts=getDisplayTexts(this.displayTexts,request);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (documentInUrl)   this.missingParameter=false;
 else   this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
  this.parametersAsString=getParsedParametersAsStringWithDefaultValue(this.parametersAsString,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
  this.displayTexts=getDisplayTexts(this.displayTexts,request);
}",0.9792284866468842
77398,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
      this.parameterMap=reportDocumentInstance.getParameterValues();
    }
    if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)     this.documentInUrl=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable == null) {
    try {
      File file=new File(this.reportDesignName);
      if (file.exists()) {
        reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName);
      }
 else       if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
        this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
        InputStream is=request.getSession().getServletContext().getResourceAsStream(this.reportDesignName);
        reportRunnable=ReportEngineService.getInstance().openReportDesign(is);
      }
    }
 catch (    EngineException e) {
      this.exception=e;
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
 else {
    design=new BirtViewerReportDesignHandle(null,reportDesignName);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  boolean isValidDocument=ParameterAccessor.isValidFilePath(this.reportDocumentName);
  if (isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
    if (reportDocumentInstance != null) {
      reportRunnable=reportDocumentInstance.getReportRunnable();
      if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        this.parameterMap=reportDocumentInstance.getParameterValues();
      }
      if (ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT) != null)       this.documentInUrl=true;
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT)) {
      if (isValidDocument)       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
 else       this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
      return design;
    }
    if (!ParameterAccessor.isValidFilePath(this.reportDesignName)) {
      this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{this.reportDesignName});
    }
 else {
      try {
        File file=new File(this.reportDesignName);
        if (file.exists()) {
          reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName);
        }
 else         if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
          this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
          InputStream is=request.getSession().getServletContext().getResourceAsStream(this.reportDesignName);
          reportRunnable=ReportEngineService.getInstance().openReportDesign(is);
        }
 else {
          this.exception=new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.579363179315298
77399,"/** 
 * Returns the resource handle with the locale of this thread. The resource handle will be cached.
 * @return the resource handle with the locale of this thread
 */
private static ViewerResourceHandle getResourceHandle(){
  Locale locale=getLocale();
  ViewerResourceHandle resourceHandle=(ViewerResourceHandle)resourceMap.get(locale);
  if (resourceHandle != null)   return resourceHandle;
synchronized (resourceMap) {
    if (resourceMap.get(locale) != null)     return (ViewerResourceHandle)resourceMap.get(locale);
    resourceHandle=new ViewerResourceHandle(locale);
    resourceMap.put(locale,resourceHandle);
  }
  return resourceHandle;
}","/** 
 * Returns the resource handle with the locale of this thread. The resource handle will be cached.
 * @return the resource handle with the locale of this thread
 */
public static ViewerResourceHandle getResourceHandle(){
  Locale locale=getLocale();
  ViewerResourceHandle resourceHandle=(ViewerResourceHandle)resourceMap.get(locale);
  if (resourceHandle != null)   return resourceHandle;
synchronized (resourceMap) {
    if (resourceMap.get(locale) != null)     return (ViewerResourceHandle)resourceMap.get(locale);
    resourceHandle=new ViewerResourceHandle(locale);
    resourceMap.put(locale,resourceHandle);
  }
  return resourceHandle;
}",0.9915449654112222
77400,"/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (bStepFixed)   return false;
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE)   return false;
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        oStep=new Double(dStep * 10);
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            oStep=new Double(iaLogarithmicDeltas[i + 1]);
            return true;
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=(Math.log(dStep) / LOG_10);
        if (dPower < 0) {
          dPower=Math.floor(dPower);
        }
        dPower=Math.pow(10,dPower);
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        int i=0;
        for (; i < n; i++) {
          if (dStep == iaLinearDeltas[i]) {
            if (i < n - 1) {
              dStep=iaLinearDeltas[i + 1] * dPower;
              if (dStep > 1)               dStep=Math.round(dStep);
            }
 else {
              dPower*=10;
              dStep=iaLinearDeltas[0] * dPower;
              if (dStep > 1)               dStep=Math.round(dStep);
            }
            break;
          }
        }
        if (i == n) {
          throw new RuntimeException(new ChartException(ChartEnginePlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",new Object[]{new Double(dStep)},Messages.getResourceBundle(rtc.getULocale())));
        }
        if (((Number)oStep).doubleValue() == dStep) {
          return false;
        }
        oStep=new Double(dStep);
      }
 else {
        dStep*=2;
        oStep=new Double(dStep);
      }
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          oStep=new Integer(iStep);
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            oUnit=new Integer(iaCalendarUnits[icu + 1]);
            if (ia == null) {
              oStep=new Integer(1);
              return false;
            }
            i=-1;
          }
          oStep=new Integer(ia[i + 1]);
          break;
        }
      }
    }
  }
  return true;
}","/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (bStepFixed) {
    return false;
  }
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        oStep=new Double(dStep * 10);
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            oStep=new Double(iaLogarithmicDeltas[i + 1]);
            return true;
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=(Math.log(dStep) / LOG_10);
        if (dPower < 0) {
          dPower=Math.floor(dPower);
        }
        dPower=Math.pow(10,dPower);
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        int i=0;
        for (; i < n; i++) {
          if (dStep == iaLinearDeltas[i]) {
            if (i < n - 1) {
              dStep=iaLinearDeltas[i + 1] * dPower;
              if (dStep > 1) {
                dStep=Math.round(dStep);
              }
            }
 else {
              dPower*=20;
              dStep=iaLinearDeltas[0] * dPower;
              if (dStep > 1) {
                dStep=Math.round(dStep);
              }
            }
            break;
          }
        }
        if (i == n) {
          throw new RuntimeException(new ChartException(ChartEnginePlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",new Object[]{new Double(dStep)},Messages.getResourceBundle(rtc.getULocale())));
        }
        if (((Number)oStep).doubleValue() == dStep) {
          return false;
        }
        oStep=new Double(dStep);
      }
 else {
        dStep*=2;
        oStep=new Double(dStep);
      }
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          oStep=new Integer(iStep);
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            oUnit=new Integer(iaCalendarUnits[icu + 1]);
            if (ia == null) {
              oStep=new Integer(1);
              return false;
            }
            i=-1;
          }
          oStep=new Integer(ia[i + 1]);
          break;
        }
      }
    }
  }
  return true;
}",0.9801547258661284
77401,"/** 
 * Zooms IN 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomIn(){
  if (bStepFixed)   return false;
  if (ChartUtil.mathEqual(0,((Number)oStep).doubleValue()))   return false;
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) > 1) {
        oStep=new Double(dStep / 10);
      }
 else {
        int n=iaLogarithmicDeltas.length;
        for (int i=n - 1; i >= 0; i--) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            if (i > 0) {
              oStep=new Double(iaLogarithmicDeltas[i - 1]);
              return true;
            }
 else {
              return false;
            }
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=(Math.log(dStep) / LOG_10);
        dPower=Math.floor(dPower);
        dPower=Math.pow(10.0,dPower);
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLinearDeltas[i]) {
            if (i > 0) {
              dStep=iaLinearDeltas[i - 1] * dPower;
            }
 else {
              dPower/=10;
              dStep=iaLinearDeltas[n - 1] * dPower;
            }
            break;
          }
        }
        oStep=new Double(dStep);
      }
 else {
        dStep/=2;
        oStep=new Double(dStep);
      }
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep--;
          if (iStep == 0) {
            oStep=new Integer(iaMonthDeltas[iaMonthDeltas.length - 1]);
            oUnit=new Integer(Calendar.MONTH);
          }
        }
 else {
          int i=0;
          for (; i < ia.length; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == 0) {
            if (icu == 0)             return false;
            ia=iaCalendarDeltas[icu - 1];
            i=ia.length;
            oUnit=new Integer(iaCalendarUnits[icu - 1]);
          }
          oStep=new Integer(ia[i - 1]);
          break;
        }
      }
    }
  }
  return true;
}","/** 
 * Zooms IN 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomIn(){
  if (bStepFixed) {
    return false;
  }
  if (ChartUtil.mathEqual(0,((Number)oStep).doubleValue())) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) > 1) {
        oStep=new Double(dStep / 10);
      }
 else {
        int n=iaLogarithmicDeltas.length;
        for (int i=n - 1; i >= 0; i--) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            if (i > 0) {
              oStep=new Double(iaLogarithmicDeltas[i - 1]);
              return true;
            }
 else {
              return false;
            }
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=(Math.log(dStep) / LOG_10);
        dPower=Math.floor(dPower);
        dPower=Math.pow(10.0,dPower);
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLinearDeltas[i]) {
            if (i > 0) {
              dStep=iaLinearDeltas[i - 1] * dPower;
            }
 else {
              dPower/=10;
              dStep=iaLinearDeltas[n - 2] * dPower;
            }
            break;
          }
        }
        oStep=new Double(dStep);
      }
 else {
        dStep/=2;
        oStep=new Double(dStep);
      }
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep--;
          if (iStep == 0) {
            oStep=new Integer(iaMonthDeltas[iaMonthDeltas.length - 1]);
            oUnit=new Integer(Calendar.MONTH);
          }
        }
 else {
          int i=0;
          for (; i < ia.length; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == 0) {
            if (icu == 0)             return false;
            ia=iaCalendarDeltas[icu - 1];
            i=ia.length;
            oUnit=new Integer(iaCalendarUnits[icu - 1]);
          }
          oStep=new Integer(ia[i - 1]);
          break;
        }
      }
    }
  }
  return true;
}",0.9850631941784757
77402,"/** 
 * Convert report parameter from string into object.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(locale);
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(locale);
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(locale);
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.doubleValue());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.doubleValue());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(locale);
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.doubleValue());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.doubleValue());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_INTEGER:
{
NumberFormatter nf=new NumberFormatter(locale);
if (format != null) {
nf.applyPattern(format);
}
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
  parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException ex) {
nf.applyPattern(""String_Node_Str"");
try {
  Number num=nf.parse(reportParameterValue);
  if (num != null) {
    parameterValueObj=new Integer(num.intValue());
  }
}
 catch (ParseException pex) {
  try {
    parameterValueObj=new Integer(reportParameterValue);
  }
 catch (  NumberFormatException nfe) {
    parameterValueObj=null;
  }
}
}
}
}
}
return parameterValueObj;
}","/** 
 * Convert report parameter from string into object. Need to be pointed out is it return a Double object when the value type is Float.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(locale);
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(locale);
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(locale);
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.doubleValue());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.doubleValue());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(locale);
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.doubleValue());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.doubleValue());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_INTEGER:
{
NumberFormatter nf=new NumberFormatter(locale);
if (format != null) {
nf.applyPattern(format);
}
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
  parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException ex) {
nf.applyPattern(""String_Node_Str"");
try {
  Number num=nf.parse(reportParameterValue);
  if (num != null) {
    parameterValueObj=new Integer(num.intValue());
  }
}
 catch (ParseException pex) {
  try {
    parameterValueObj=new Integer(reportParameterValue);
  }
 catch (  NumberFormatException nfe) {
    parameterValueObj=null;
  }
}
}
}
}
}
return parameterValueObj;
}",0.9884344146685472
77403,"public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  if (scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0)   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
 else   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}","public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}",0.9647274393037104
77404,"public Object getAdapter(Class adapter){
  if (adapter == ActionRegistry.class) {
    return jsEditor.getActionRegistry();
  }
  if (adapter == PalettePage.class) {
    return jsEditor.getAdapter(PalettePage.class);
  }
  if (adapter == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(getModel());
    return outlinePage;
  }
  return jsEditor.getAdapter(adapter);
}","public Object getAdapter(Class adapter){
  if (adapter == ActionRegistry.class) {
    return jsEditor.getActionRegistry();
  }
  if (adapter == PalettePage.class) {
    return jsEditor.getAdapter(PalettePage.class);
  }
  if (adapter == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(getModel());
    getModelEventManager().addModelEventProcessor(outlinePage.getModelProcessor());
    return outlinePage;
  }
  return jsEditor.getAdapter(adapter);
}",0.9064587973273942
77405,"public void dispose(){
  super.dispose();
  jsEditor.dispose();
  jsEditor=null;
}","public void dispose(){
  unhookModelEventManager(getModel());
  super.dispose();
  jsEditor.dispose();
  jsEditor=null;
}",0.8078817733990148
77406,"public void createPartControl(Composite parent){
  try {
    jsEditor.createPartControl(parent);
    Control[] children=parent.getChildren();
    control=children[children.length - 1];
    if (previouPage != null) {
      onBroughtToTop(previouPage);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void createPartControl(Composite parent){
  try {
    jsEditor.createPartControl(parent);
    Control[] children=parent.getChildren();
    control=children[children.length - 1];
    if (previouPage != null) {
      onBroughtToTop(previouPage);
    }
    hookModelEventManager(getModel());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9418777943368108
77407,"protected void handleDrop(){
  boolean isScalarparameter=false;
  boolean isResultSetColumn=false;
  boolean isEmbeddImage=false;
  final Object template=TemplateTransfer.getInstance().getTemplate();
  Assert.isNotNull(template);
  Assert.isTrue(handleValidateDrag(template));
  updateTargetRequest();
  updateTargetEditPart();
  AbstractToolHandleExtends preHandle=null;
  String transName=null;
  if (template instanceof String) {
    transName=TRANS_LABEL_CREATE_ELEMENT;
    preHandle=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(template);
  }
 else   if (handleValidateInsert(template)) {
    transName=InsertInLayoutAction.DISPLAY_TEXT;
    Object objectType=getFactory(template).getObjectType();
    if (objectType instanceof DataSetHandle) {
      preHandle=new DataSetToolExtends();
    }
 else     if (objectType instanceof DataSetItemModel) {
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ResultSetColumnHandle) {
      isResultSetColumn=true;
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ScalarParameterHandle) {
      isScalarparameter=true;
      preHandle=new ParameterToolExtends();
    }
  }
 else   if (handleValidateLibrary(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      DNDUtil.copyHandles(dragObj,getTargetEditPart().getModel());
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
 else     preHandle=new LibraryElementsToolHandleExtends((DesignElementHandle)dragObj);
  }
 else   if (handleValidateOutline(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
  }
  if (preHandle != null) {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().startTrans(transName);
    preHandle.setRequest(this.getCreateRequest());
    preHandle.setTargetEditPart(getTargetEditPart());
    Command command=this.getCommand();
    if (command != null && command.canExecute()) {
      if (!(preHandle.preHandleMouseUp())) {
        SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
        return;
      }
    }
    boolean isTheme=checkTheme(preHandle,getSingleTransferData(template));
    if (isTheme) {
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
    }
 else {
      super.handleDrop();
      if (!preHandle.postHandleCreation()) {
        SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
        return;
      }
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
      if (isScalarparameter || isResultSetColumn) {
        Request request=new Request(ReportRequest.CREATE_SCALARPARAMETER_OR_RESULTSETCOLUMN);
        selectAddedObject(request);
      }
 else       if (isEmbeddImage) {
        Object dragObj=getSingleTransferData(template);
        final Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        try {
          ((ImageHandle)model).setImageName(((EmbeddedImageHandle)dragObj).getName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
        CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
        stack.startTrans(IMG_TRANS_MSG);
        stack.commit();
      }
 else       selectAddedObject();
    }
  }
}","protected void handleDrop(){
  boolean isScalarparameter=false;
  boolean isResultSetColumn=false;
  boolean isEmbeddImage=false;
  final Object template=TemplateTransfer.getInstance().getTemplate();
  Assert.isNotNull(template);
  Assert.isTrue(handleValidateDrag(template));
  updateTargetRequest();
  updateTargetEditPart();
  AbstractToolHandleExtends preHandle=null;
  String transName=null;
  if (template instanceof String) {
    transName=TRANS_LABEL_CREATE_ELEMENT;
    preHandle=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(template);
  }
 else   if (handleValidateInsert(template)) {
    transName=InsertInLayoutAction.DISPLAY_TEXT;
    Object objectType=getFactory(template).getObjectType();
    if (objectType instanceof DataSetHandle) {
      preHandle=new DataSetToolExtends();
    }
 else     if (objectType instanceof DataSetItemModel) {
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ResultSetColumnHandle) {
      isResultSetColumn=true;
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ScalarParameterHandle) {
      isScalarparameter=true;
      preHandle=new ParameterToolExtends();
    }
  }
 else   if (handleValidateLibrary(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
      LibraryHandle library=(LibraryHandle)((EmbeddedImageHandle)dragObj).getElementHandle().getRoot();
      try {
        if (UIUtil.includeLibrary(moduleHandle,library)) {
          EmbeddedImage image=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)dragObj,moduleHandle);
          DNDUtil.addEmbeddedImageHandle(getTargetEditPart().getModel(),image);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
 else     preHandle=new LibraryElementsToolHandleExtends((DesignElementHandle)dragObj);
  }
 else   if (handleValidateOutline(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
  }
  if (preHandle != null) {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().startTrans(transName);
    preHandle.setRequest(this.getCreateRequest());
    preHandle.setTargetEditPart(getTargetEditPart());
    Command command=this.getCommand();
    if (command != null && command.canExecute()) {
      if (!(preHandle.preHandleMouseUp())) {
        SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
        return;
      }
    }
    boolean isTheme=checkTheme(preHandle,getSingleTransferData(template));
    if (isTheme) {
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
    }
 else {
      super.handleDrop();
      if (!preHandle.postHandleCreation()) {
        SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
        return;
      }
      SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
      if (isScalarparameter || isResultSetColumn) {
        Request request=new Request(ReportRequest.CREATE_SCALARPARAMETER_OR_RESULTSETCOLUMN);
        selectAddedObject(request);
      }
 else       if (isEmbeddImage) {
        Object dragObj=getSingleTransferData(template);
        final Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        try {
          ((ImageHandle)model).setImageName(((EmbeddedImageHandle)dragObj).getName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
        CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
        stack.startTrans(IMG_TRANS_MSG);
        stack.commit();
      }
 else       selectAddedObject();
    }
  }
}",0.9235194143025232
77408,"/** 
 * Justifies whether a library resource with the given file name is a valid library.
 * @param sessionHandle the current session of the library
 * @param fileName the file name of the library
 * @param is the input stream of the library
 * @return true if the library resource is a valid library, otherwise false
 */
public static boolean isValidLibrary(SessionHandle sessionHandle,String fileName,InputStream is){
  Library lib=null;
  try {
    lib=LibraryReader.getInstance().read(sessionHandle.getSession(),fileName,is);
    return lib != null;
  }
 catch (  DesignFileException e) {
    return false;
  }
}","/** 
 * Justifies whether a library resource with the given file name is a valid library.
 * @param sessionHandle the current session of the library
 * @param fileName the file name of the library
 * @param is the input stream of the library
 * @return true if the library resource is a valid library, otherwise false
 */
public static boolean isValidLibrary(SessionHandle sessionHandle,String fileName,InputStream is){
  Library lib=null;
  try {
    ModuleOption options=new ModuleOption();
    options.setSemanticCheck(false);
    lib=LibraryReader.getInstance().read(sessionHandle.getSession(),fileName,is,options);
    return lib != null;
  }
 catch (  DesignFileException e) {
    return false;
  }
}",0.9319213313161876
77409,"/** 
 * Checks the input stream with given file name. If it is a valid design/library, return <code>ModuleUtil.REPORT_DESIGN</code>/<code>ModuleUtil.LIBRARY</code>, otherwise, <code>ModuleUtil.INVALID</code> is return.
 * @param sessionHandle the current session of the library
 * @param fileName the file name of the library
 * @param is the input stream of the library
 * @return <code>ModuleUtil.REPORT_DESIGN</code> if the input stream is areport design, <code>ModuleUtil.LIBRARY</code> if the input stream is a library, <code>ModuleUtil.INVALID</code> otherwise.
 */
public static int checkModule(SessionHandle sessionHandle,String fileName,InputStream is){
  Module rtnModule=null;
  try {
    rtnModule=GenericModuleReader.getInstance().read(sessionHandle.getSession(),fileName,is);
  }
 catch (  DesignFileException e) {
    return INVALID_MODULE;
  }
  return rtnModule instanceof Library ? LIBRARY : REPORT_DESIGN;
}","/** 
 * Checks the input stream with given file name. If it is a valid design/library, return <code>ModuleUtil.REPORT_DESIGN</code>/<code>ModuleUtil.LIBRARY</code>, otherwise, <code>ModuleUtil.INVALID</code> is return.
 * @param sessionHandle the current session of the library
 * @param fileName the file name of the library
 * @param is the input stream of the library
 * @return <code>ModuleUtil.REPORT_DESIGN</code> if the input stream is areport design, <code>ModuleUtil.LIBRARY</code> if the input stream is a library, <code>ModuleUtil.INVALID</code> otherwise.
 */
public static int checkModule(SessionHandle sessionHandle,String fileName,InputStream is){
  Module rtnModule=null;
  try {
    ModuleOption options=new ModuleOption();
    options.setSemanticCheck(false);
    rtnModule=GenericModuleReader.getInstance().read(sessionHandle.getSession(),fileName,is,options);
  }
 catch (  DesignFileException e) {
    return INVALID_MODULE;
  }
  return rtnModule instanceof Library ? LIBRARY : REPORT_DESIGN;
}",0.9536560247167868
77410,"/** 
 * Justifies whether a given input stream is a valid report design.
 * @param sessionHandle the current session of the report design
 * @param fileName the file name of the report design
 * @param is the input stream of the report design
 * @return true if the input stream is a valid report design, otherwisefalse
 */
public static boolean isValidDesign(SessionHandle sessionHandle,String fileName,InputStream is){
  ReportDesign design=null;
  try {
    design=DesignReader.getInstance().read(sessionHandle.getSession(),fileName,is);
    return design != null;
  }
 catch (  DesignFileException e) {
    return false;
  }
}","/** 
 * Justifies whether a given input stream is a valid report design.
 * @param sessionHandle the current session of the report design
 * @param fileName the file name of the report design
 * @param is the input stream of the report design
 * @return true if the input stream is a valid report design, otherwisefalse
 */
public static boolean isValidDesign(SessionHandle sessionHandle,String fileName,InputStream is){
  ReportDesign design=null;
  try {
    ModuleOption options=new ModuleOption();
    options.setSemanticCheck(false);
    design=DesignReader.getInstance().read(sessionHandle.getSession(),fileName,is,options);
    return design != null;
  }
 catch (  DesignFileException e) {
    return false;
  }
}",0.9333333333333332
77411,"/** 
 * Checks whether the compound element is valid if the element has no extends property value or if the current element is compound elements and extends value is unresovled.
 * @return <code>true</code> if the compound element is valid. Otherwise<code>false</code>.
 */
public boolean isValidReferenceForCompoundElement(){
  ElementRefValue refValue=(ElementRefValue)element.getLocalProperty(getModule(),IDesignElementModel.EXTENDS_PROP);
  if (refValue == null)   return true;
  if (element.getDefn().isContainer() && !refValue.isResolved())   return false;
  return true;
}","/** 
 * Checks whether the compound element is valid if the element has no extends property value or if the current element is compound elements and extends value is unresovled.
 * @return <code>true</code> if the compound element is valid. Otherwise<code>false</code>.
 */
public boolean isValidReferenceForCompoundElement(){
  return ModelUtil.isValidReferenceForCompoundElement(getModule(),element);
}",0.7182095625635809
77412,"/** 
 * Sends the notifications. This method check the current record state, and fire event to corresponding method of listener.
 * @param event activity stack event.
 */
protected void sendNotifcations(ActivityStackEvent event){
  if (listeners != null) {
    Iterator iter=listeners.iterator();
    while (iter.hasNext()) {
      ActivityStackListener listener=((ActivityStackListener)iter.next());
      listener.stackChanged(event);
    }
  }
}","/** 
 * Sends the notifications. This method check the current record state, and fire event to corresponding method of listener.
 * @param event activity stack event.
 */
public void sendNotifcations(ActivityStackEvent event){
  if (listeners != null) {
    Iterator iter=listeners.iterator();
    while (iter.hasNext()) {
      ActivityStackListener listener=((ActivityStackListener)iter.next());
      listener.stackChanged(event);
    }
  }
}",0.9854423292273236
77413,"protected void sendNotifcations(ActivityStackEvent event){
}","public void sendNotifcations(ActivityStackEvent event){
}",0.905982905982906
77414,"/** 
 * Add script lib
 * @param scriptLib script lib
 * @throws SemanticException
 */
public void addScriptLib(ScriptLib scriptLib) throws SemanticException {
  ElementPropertyDefn propDefn=module.getPropertyDefn(SCRIPTLIBS_PROP);
  if (scriptLib == null || StringUtil.isBlank(scriptLib.getName())) {
    throw new PropertyValueException(getElement(),propDefn,scriptLib,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE);
  }
  if (findScriptLib(scriptLib.getName()) != null) {
    throw new NameException(getElement(),scriptLib.getName(),NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
  PropertyCommand cmd=new PropertyCommand(getModule(),getElement());
  cmd.addItem(new CachedMemberRef(propDefn),scriptLib);
}","/** 
 * Add script lib
 * @param scriptLib script lib
 * @throws SemanticException
 */
public void addScriptLib(ScriptLib scriptLib) throws SemanticException {
  ElementPropertyDefn propDefn=module.getPropertyDefn(SCRIPTLIBS_PROP);
  if (scriptLib == null || StringUtil.isBlank(scriptLib.getName())) {
    throw new PropertyValueException(getElement(),propDefn,scriptLib,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE);
  }
  PropertyCommand cmd=new PropertyCommand(getModule(),getElement());
  cmd.addItem(new CachedMemberRef(propDefn),scriptLib);
}",0.8744113029827315
77415,"/** 
 * Returns all script libs.
 * @return list which structure is <code>ScriptLib</code>
 */
public List getAllScriptLibs(){
  return getListProperty(SCRIPTLIBS_PROP);
}","/** 
 * Returns all script libs.
 * @return list which structure is <code>ScriptLibHandle</code>
 */
public List getAllScriptLibs(){
  return getFilteredStructureList(SCRIPTLIBS_PROP,ScriptLib.SCRIPTLIB_NAME_MEMBER);
}",0.8174807197943444
77416,"/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location,IAccessControl.ARBITARY_LEVEL);
  if (library == null)   throw new LibraryException(library,null,LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  while (library != null) {
    if (library.getHost() == module)     break;
    library=(Library)library.getHost();
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startSilentTrans(true);
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  LibraryReloadedEvent event=new LibraryReloadedEvent(module.getLibraryByLocation(url.toExternalForm()));
  module.broadcast(event);
  activityStack.commit();
  activityStack.flush();
}","/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location,IAccessControl.ARBITARY_LEVEL);
  if (library == null)   throw new LibraryException(library,null,LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  while (library != null) {
    if (library.getHost() == module)     break;
    library=(Library)library.getHost();
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startSilentTrans(true);
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  LibraryReloadedEvent event=new LibraryReloadedEvent(module.getLibraryByLocation(url.toExternalForm()));
  module.broadcast(event);
  activityStack.commit();
  activityStack.flush();
  module.setSaveState(0);
  activityStack.sendNotifcations(new ActivityStackEvent(activityStack,ActivityStackEvent.DONE));
}",0.9678599425137184
77417,"private void startContent(IContent content,String tag,String styleName){
  tagStack.push(tag);
  writer.openTag(tag);
  writer.attribute(HTMLTags.ATTR_CLASS,styleName);
  setActiveIDTypeIID(content);
  HTMLEmitterUtil.setBookmark(writer,tag,content.getBookmark());
}","private void startContent(IContent content,String tag,String styleName){
  tagStack.push(tag);
  writer.openTag(tag);
  if (content.getBookmark() == null) {
    content.setBookmark(idGenerator.generateUniqueID());
  }
  writer.attribute(HTMLTags.ATTR_CLASS,styleName);
  setActiveIDTypeIID(content);
  HTMLEmitterUtil.setBookmark(writer,tag,content.getBookmark());
}",0.8417721518987342
77418,"/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      try {
        String format=ParameterAccessor.getFormat(request,paramName);
        if (format != null && format.length() > 0) {
          paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),format,paramValueObj.toString(),locale);
        }
 else {
          try {
            paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValueObj.toString(),locale);
          }
 catch (          ValidationValueException e1) {
            paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),ParameterValidationUtil.DEFAULT_DATETIME_FORMAT,paramValueObj.toString());
          }
        }
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}","/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      try {
        String format=ParameterAccessor.getFormat(request,paramName);
        if (format == null || format.length() <= 0) {
          format=parameter.getPattern();
        }
        paramValueObj=DataUtil.validate(parameter.getDataType(),format,paramValueObj.toString(),locale);
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}",0.8527713625866051
77419,"/** 
 * Groups the svg drawing instructions that represents this primitive events. Each group is assigned an id that identifies the source object of the primitive event
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void groupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    StructureSource sourceObject=(StructureSource)pre.getSource();
    Series seDT=(Series)getElementFromSource(sourceObject,StructureType.SERIES);
    if (seDT != null) {
      String groupIdentifier=null;
      try {
        if (isColoredByCategories() && getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT) != null) {
          seDT=findCategorySeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
          DataPointHints dph=(DataPointHints)getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT);
          groupIdentifier+=""String_Node_Str"";
          groupIdentifier+=((DataPointHints)dph).getIndex();
        }
 else {
          seDT=findDesignTimeSeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
        }
      }
 catch (      ChartException e) {
        logger.log(e);
        return;
      }
      if (drawText) {
        String id=Integer.toString(pre.hashCode());
        List components=(List)labelPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          labelPrimitives.put(seDT,components);
        }
        components.add(id);
        Element outerGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(outerGroup);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        outerGroup.appendChild(primGroup);
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id+ ""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(seDT,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
 else {
      Object designObject=null;
      if (getElementFromSource(sourceObject,StructureType.TITLE) != null) {
        designObject=sourceObject.getSource();
      }
 else       if (getElementFromSource(sourceObject,StructureType.CHART_BLOCK) != null) {
        designObject=sourceObject.getSource();
      }
 else       if (getElementFromSource(sourceObject,StructureType.PLOT) != null) {
        designObject=sourceObject.getSource();
      }
 else       if (getElementFromSource(sourceObject,StructureType.AXIS) != null) {
        designObject=sourceObject.getSource();
      }
      if (designObject != null) {
        String groupIdentifier=String.valueOf(designObject.hashCode());
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(designObject);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(designObject,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
  }
}","/** 
 * Groups the svg drawing instructions that represents this primitive events. Each group is assigned an id that identifies the source object of the primitive event
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void groupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    StructureSource sourceObject=(StructureSource)pre.getSource();
    Series seDT=(Series)getElementFromSource(sourceObject,StructureType.SERIES);
    if (seDT != null) {
      String groupIdentifier=null;
      try {
        if (isColoredByCategories() && getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT) != null) {
          seDT=findCategorySeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
          DataPointHints dph=(DataPointHints)getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT);
          groupIdentifier+=""String_Node_Str"";
          groupIdentifier+=dph.getIndex();
        }
 else {
          seDT=findDesignTimeSeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
        }
      }
 catch (      ChartException e) {
        logger.log(e);
        return;
      }
      if (drawText) {
        String id=Integer.toString(pre.hashCode());
        List components=(List)labelPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          labelPrimitives.put(seDT,components);
        }
        components.add(id);
        Element outerGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(outerGroup);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        outerGroup.appendChild(primGroup);
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id+ ""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(seDT,components);
        }
        String idTemp=id;
        if (components.size() > 0) {
          idTemp=id + ""String_Node_Str"" + components.size();
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
 else {
      Object designObject=null;
      if (getElementFromSource(sourceObject,StructureType.TITLE) != null) {
        designObject=sourceObject.getSource();
      }
 else       if (getElementFromSource(sourceObject,StructureType.CHART_BLOCK) != null) {
        designObject=sourceObject.getSource();
      }
 else       if (getElementFromSource(sourceObject,StructureType.PLOT) != null) {
        designObject=sourceObject.getSource();
      }
 else       if (getElementFromSource(sourceObject,StructureType.AXIS) != null) {
        designObject=sourceObject.getSource();
      }
      if (designObject != null) {
        String groupIdentifier=String.valueOf(designObject.hashCode());
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(designObject);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(designObject,components);
        }
        String idTemp=id;
        if (components.size() > 0) {
          idTemp=id + ""String_Node_Str"" + components.size();
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
  }
}",0.9649122807017544
77420,"/** 
 * @param event
 */
private void populateEventData(TypedEvent event){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  if (selection == null)   selection=selectionMac;
  String identifierQuoteString;
  try {
    identifierQuoteString=metaDataProvider.getMetaData().getIdentifierQuoteString();
  }
 catch (  SQLException e) {
    identifierQuoteString=""String_Node_Str"";
  }
  if (selection.length > 0) {
    String data=""String_Node_Str"";
    for (int i=0; i < selection.length; i++) {
      Object obj=selection[i].getData();
      if (obj instanceof DbObject) {
        data+=SQLUtility.getDnDString(((DbObject)obj).getName(),identifierQuoteString,identifierQuoteStringCheckBox.getSelection());
      }
 else       if (obj instanceof Procedure) {
        data+=SQLUtility.getDnDString(((Procedure)obj).getProcedureNameWithSchema(),identifierQuoteString,identifierQuoteStringCheckBox.getSelection());
      }
 else {
        data+=SQLUtility.getDnDString(obj,identifierQuoteString,identifierQuoteStringCheckBox.getSelection());
      }
      data+=i != selection.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    event.data=data;
  }
}","/** 
 * @param event
 */
private void populateEventData(TypedEvent event){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  if (selection == null || selection.length == 0)   selection=selectionMac;
  String identifierQuoteString;
  try {
    identifierQuoteString=metaDataProvider.getMetaData().getIdentifierQuoteString();
  }
 catch (  SQLException e) {
    identifierQuoteString=""String_Node_Str"";
  }
  if (selection.length > 0) {
    String data=""String_Node_Str"";
    for (int i=0; i < selection.length; i++) {
      Object obj=selection[i].getData();
      if (obj instanceof DbObject) {
        data+=SQLUtility.getDnDString(((DbObject)obj).getName(),identifierQuoteString,identifierQuoteStringCheckBox.getSelection());
      }
 else       if (obj instanceof Procedure) {
        data+=SQLUtility.getDnDString(((Procedure)obj).getProcedureNameWithSchema(),identifierQuoteString,identifierQuoteStringCheckBox.getSelection());
      }
 else {
        data+=SQLUtility.getDnDString(obj,identifierQuoteString,identifierQuoteStringCheckBox.getSelection());
      }
      data+=i != selection.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    event.data=data;
  }
}",0.9894112664125372
77421,"protected Object clone() throws CloneNotSupportedException {
  ReferencableStructure struct=(ReferencableStructure)super.clone();
  struct.libReference=null;
  struct.clients=new ArrayList();
  struct.clientStructures=new ArrayList();
  Iterator propIter=getDefn().getPropertyIterator();
  while (propIter.hasNext()) {
    PropertyDefn prop=(PropertyDefn)propIter.next();
    if (struct.getLocalProperty(null,prop) != null || LIB_REFERENCE_MEMBER.equals(prop.getName()))     continue;
    StructRefValue libRef=this.libReference;
    while (libRef != null) {
      ReferencableStructure libStructure=libReference.getTargetStructure();
      Object value=libStructure.getLocalProperty(null,prop);
      if (value != null)       struct.setProperty(prop,value);
      libRef=(StructRefValue)libStructure.getLocalProperty(null,LIB_REFERENCE_MEMBER);
    }
  }
  return struct;
}","protected Object clone() throws CloneNotSupportedException {
  ReferencableStructure struct=(ReferencableStructure)super.clone();
  struct.libReference=null;
  struct.clients=new ArrayList();
  struct.clientStructures=new ArrayList();
  if (libReference == null)   return struct;
  Iterator propIter=getDefn().getPropertyIterator();
  while (propIter.hasNext()) {
    PropertyDefn prop=(PropertyDefn)propIter.next();
    if (struct.getLocalProperty(null,prop) != null || LIB_REFERENCE_MEMBER.equals(prop.getName()))     continue;
    StructRefValue libRef=this.libReference;
    while (libRef != null) {
      ReferencableStructure libStructure=libRef.getTargetStructure();
      if (libStructure == null) {
        struct.libReference=new StructRefValue(libReference.getLibraryNamespace(),libReference.getName());
        return struct;
      }
      Object value=libStructure.getLocalProperty(null,prop);
      if (value != null) {
        struct.setProperty(prop,value);
        break;
      }
      libRef=(StructRefValue)libStructure.getLocalProperty(null,LIB_REFERENCE_MEMBER);
    }
  }
  return struct;
}",0.8741188318227593
77422,"public void run(){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(DISPLAY_TEXT);
  try {
    if (Policy.TRACING_ACTIONS) {
      System.out.println(""String_Node_Str"");
    }
    Object newElement=InsertInLayoutUtil.performInsert(getSelection(),getTargetEditPart());
    if (newElement != null)     runCreate(newElement,targetPart.getModel());
    stack.commit();
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    stack.rollback();
  }
}","public void run(){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(DISPLAY_TEXT);
  try {
    if (Policy.TRACING_ACTIONS) {
      System.out.println(""String_Node_Str"");
    }
    Object newElement=InsertInLayoutUtil.performInsert(getSelection(),getTargetEditPart());
    if (newElement != null)     runCreate(newElement,targetPart.getModel());
    stack.commit();
    fireCreateRequest(newElement);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    stack.rollback();
  }
}",0.9665711556829036
77423,"protected ClassLoader createClassLoaderFromDesign(ClassLoader parent){
  IReportRunnable runnable=context.getRunnable();
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    ArrayList urls=new ArrayList();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLib lib=(ScriptLib)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY);
      if (url != null) {
        urls.add(url);
      }
    }
    if (urls.size() != 0) {
      URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
      return new URLClassLoader(jarUrls,parent);
    }
    return parent;
  }
  return null;
}","protected void createClassLoaderFromDesign(){
  IReportRunnable runnable=context.getRunnable();
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    ArrayList urls=new ArrayList();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLibHandle lib=(ScriptLibHandle)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY);
      if (url != null) {
        urls.add(url);
      }
    }
    if (urls.size() != 0) {
      URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
      ClassLoader parent=appClassLoader == null ? systemClassLoader : appClassLoader;
      designClassLoader=new URLClassLoader(jarUrls,parent);
    }
  }
}",0.8710990502035278
77424,"protected ClassLoader createClassLoaderFromContext(ClassLoader parent){
  Map appContext=context.getAppContext();
  if (appContext != null) {
    Object appLoader=appContext.get(EngineConstants.APPCONTEXT_CLASSLOADER_KEY);
    if (appLoader instanceof ClassLoader) {
      return new UnionClassLoader((ClassLoader)appLoader,parent);
    }
  }
  return parent;
}","protected void createClassLoaderFromContext(){
  Map appContext=context.getAppContext();
  if (appContext != null) {
    Object appLoader=appContext.get(EngineConstants.APPCONTEXT_CLASSLOADER_KEY);
    if (appLoader instanceof ClassLoader) {
      appClassLoader=new UnionClassLoader((ClassLoader)appLoader,systemClassLoader);
    }
  }
}",0.8640915593705293
77425,"protected ClassLoader createClassLoaderFromProperty(){
  ClassLoader parent=ExecutionContext.class.getClassLoader();
  ArrayList urls=new ArrayList();
  for (int i=0; i < classPathes.length; i++) {
    String classPath=System.getProperty(classPathes[i]);
    if (classPath != null && classPath.length() != 0) {
      String[] jars=classPath.split(PROPERTYSEPARATOR,-1);
      if (jars != null && jars.length != 0) {
        for (int j=0; j < jars.length; j++) {
          File file=new File(jars[j]);
          try {
            urls.add(file.toURL());
          }
 catch (          MalformedURLException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  if (urls.size() != 0) {
    return new URLClassLoader((URL[])urls.toArray(new URL[0]),parent);
  }
  return parent;
}","protected void createClassLoaderFromProperty(){
  systemClassLoader=ExecutionContext.class.getClassLoader();
  ArrayList urls=new ArrayList();
  for (int i=0; i < classPathes.length; i++) {
    String classPath=System.getProperty(classPathes[i]);
    if (classPath != null && classPath.length() != 0) {
      String[] jars=classPath.split(PROPERTYSEPARATOR,-1);
      if (jars != null && jars.length != 0) {
        for (int j=0; j < jars.length; j++) {
          File file=new File(jars[j]);
          try {
            urls.add(file.toURL());
          }
 catch (          MalformedURLException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  if (urls.size() != 0) {
    systemClassLoader=new URLClassLoader((URL[])urls.toArray(new URL[0]),systemClassLoader);
  }
}",0.9106808244846972
77426,"public static Date convertToDate(String xmlString) throws ParseException {
  String pattern=null;
  if (xmlString.indexOf('T') != -1) {
    if (xmlString.indexOf('.') != -1) {
      pattern=XMLDATE_PATTERN_FULL;
    }
 else     if (xmlString.indexOf(':') == xmlString.lastIndexOf(':')) {
      pattern=XMLDATE_PATTERN_WITH_OUT_SECOND;
    }
 else {
      pattern=XMLDATE_PATTERN_WITH_OUT_MILLISECOND;
    }
  }
 else {
    pattern=XMLDATE_PATTERN_DATE_ONLY;
  }
  DateFormatter formater=new DateFormatter(pattern);
  return formater.parse(xmlString);
}","public static Date convertToDate(String xmlString) throws ParseException {
  if (StringUtil.isBlank(xmlString)) {
    return null;
  }
  String pattern=null;
  if (xmlString.indexOf('T') != -1) {
    if (xmlString.indexOf('.') != -1) {
      pattern=XMLDATE_PATTERN_FULL;
    }
 else     if (xmlString.indexOf(':') == xmlString.lastIndexOf(':')) {
      pattern=XMLDATE_PATTERN_WITH_OUT_SECOND;
    }
 else {
      pattern=XMLDATE_PATTERN_WITH_OUT_MILLISECOND;
    }
  }
 else {
    pattern=XMLDATE_PATTERN_DATE_ONLY;
  }
  DateFormatter formater=new DateFormatter(pattern);
  return formater.parse(xmlString);
}",0.9484536082474226
77427,"public static String convertToXMLString(Date date){
  GregorianCalendar cal=new GregorianCalendar();
  cal.setTime(date);
  String pattern=XMLDATE_PATTERN_FULL;
  if (!cal.isSet(Calendar.HOUR)) {
    pattern=XMLDATE_PATTERN_DATE_ONLY;
  }
 else   if (!cal.isSet(Calendar.SECOND)) {
    pattern=XMLDATE_PATTERN_WITH_OUT_SECOND;
  }
 else   if (!cal.isSet(Calendar.MILLISECOND)) {
    pattern=XMLDATE_PATTERN_WITH_OUT_MILLISECOND;
  }
  DateFormatter formater=new DateFormatter(pattern);
  return formater.format(date);
}","public static String convertToXMLString(Date date){
  if (date == null) {
    return null;
  }
  GregorianCalendar cal=new GregorianCalendar();
  cal.setTime(date);
  String pattern=XMLDATE_PATTERN_FULL;
  if (!cal.isSet(Calendar.HOUR)) {
    pattern=XMLDATE_PATTERN_DATE_ONLY;
  }
 else   if (!cal.isSet(Calendar.SECOND)) {
    pattern=XMLDATE_PATTERN_WITH_OUT_SECOND;
  }
 else   if (!cal.isSet(Calendar.MILLISECOND)) {
    pattern=XMLDATE_PATTERN_WITH_OUT_MILLISECOND;
  }
  DateFormatter formater=new DateFormatter(pattern);
  return formater.format(date);
}",0.9602220166512488
77428,"private String convertToStandardFormat(Date date){
  return new DateFormatter(STANDARD_DATE_TIME_PATTERN,ULocale.US).format(date);
}","private String convertToStandardFormat(Date date){
  if (date == null) {
    return null;
  }
  return new DateFormatter(STANDARD_DATE_TIME_PATTERN,ULocale.US).format(date);
}",0.8599348534201955
77429,"/** 
 * Add the particles and attributes that defined in an implicitly defined ComplexType to the node.
 * @param node
 * @param complexType
 * @throws OdaException 
 */
private static void addParticleAndAttributeInfo(ATreeNode node,XSComplexTypeDecl complexType,ATreeNode complexTypesRoot) throws OdaException {
  XSParticle particle=complexType.getParticle();
  if (particle != null) {
    XSObjectList list=((XSModelGroupImpl)particle.getTerm()).getParticles();
    for (int j=0; j < list.getLength(); j++) {
      ATreeNode childNode=new ATreeNode();
      childNode.setValue(((XSParticleDecl)list.item(j)).getTerm().getName());
      String dataType=((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition().getName();
      if (dataType == null || dataType.length() == 0)       dataType=childNode.getValue().toString();
      childNode.setDataType(dataType);
      childNode.setType(ATreeNode.ELEMENT_TYPE);
      XSTypeDefinition xstype=((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition();
      if ((!dataType.equals(""String_Node_Str"")) && xstype instanceof XSComplexTypeDecl) {
        if (xstype.getName() == null)         addParticleAndAttributeInfo(childNode,(XSComplexTypeDecl)xstype,complexTypesRoot);
        ATreeNode n=findComplexElement(complexTypesRoot,dataType);
        if (n != null) {
          childNode.addChild(n.getChildren());
        }
      }
      node.addChild(childNode);
    }
  }
  if (!includeAttribute)   return;
  XSAttributeGroupDecl group=complexType.getAttrGrp();
  if (group != null) {
    XSObjectList list=group.getAttributeUses();
    for (int j=0; j < list.getLength(); j++) {
      ATreeNode childNode=new ATreeNode();
      childNode.setValue(((XSAttributeUseImpl)list.item(j)).getAttrDeclaration().getName());
      childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
      node.addChild(childNode);
    }
  }
}","/** 
 * Add the particles and attributes that defined in an implicitly defined ComplexType to the node.
 * @param node
 * @param complexType
 * @throws OdaException 
 */
private static void addParticleAndAttributeInfo(ATreeNode node,XSComplexTypeDecl complexType,ATreeNode complexTypesRoot) throws OdaException {
  XSParticle particle=complexType.getParticle();
  if (particle != null) {
    addElementToNode(node,complexTypesRoot,(XSModelGroupImpl)particle.getTerm());
  }
  if (!includeAttribute)   return;
  XSAttributeGroupDecl group=complexType.getAttrGrp();
  if (group != null) {
    XSObjectList list=group.getAttributeUses();
    for (int j=0; j < list.getLength(); j++) {
      ATreeNode childNode=new ATreeNode();
      childNode.setValue(((XSAttributeUseImpl)list.item(j)).getAttrDeclaration().getName());
      childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
      node.addChild(childNode);
    }
  }
}",0.5072927783706865
77430,"/** 
 * is in factory mode
 * @return true, factory mode, false not in factory mode
 */
public boolean isInFactory(){
  return factoryMode;
}","/** 
 * is in factory mode
 * @return true, factory mode, false not in factory mode
 */
public boolean isInFactory(){
  return true;
}",0.9672727272727272
77431,"/** 
 * Determines if the slot can contain a given element.
 * @param module the module
 * @param slotId the slot id
 * @param element the element to insert
 * @return a list containing exceptions.
 */
public final List checkContainmentContext(Module module,int slotId,DesignElement element){
  boolean retValue=canContainInRom(slotId,element.getDefn());
  ContentException e=new ContentException(this,slotId,element,ContentException.DESIGN_EXCEPTION_INVALID_CONTEXT_CONTAINMENT);
  List errors=new ArrayList();
  if (!retValue) {
    errors.add(e);
    return errors;
  }
  if (!canContainTemplateElement(module,slotId,element)) {
    errors.add(e);
    return errors;
  }
  if (isRootIncludedByModule()) {
    errors.add(e);
    return errors;
  }
  if (isVirtualElement() || getExtendsName() != null) {
    errors.add(e);
    return errors;
  }
  DesignElement tmpContainer=this;
  while (tmpContainer != null) {
    if (tmpContainer instanceof ListingElement || tmpContainer instanceof Theme || tmpContainer instanceof MasterPage) {
      errors=tmpContainer.checkContent(module,this,slotId,element);
      return errors;
    }
    tmpContainer=tmpContainer.getContainer();
  }
  return Collections.EMPTY_LIST;
}","/** 
 * Determines if the slot can contain a given element.
 * @param module the module
 * @param slotId the slot id
 * @param element the element to insert
 * @return a list containing exceptions.
 */
public final List checkContainmentContext(Module module,int slotId,DesignElement element){
  boolean retValue=canContainInRom(slotId,element.getDefn());
  ContentException e=new ContentException(this,slotId,element,ContentException.DESIGN_EXCEPTION_INVALID_CONTEXT_CONTAINMENT);
  List errors=new ArrayList();
  if (!retValue) {
    errors.add(e);
    return errors;
  }
  if (!canContainTemplateElement(module,slotId,element)) {
    errors.add(e);
    return errors;
  }
  if (isRootIncludedByModule()) {
    errors.add(e);
    return errors;
  }
  if (isVirtualElement() || getExtendsName() != null) {
    errors.add(e);
    return errors;
  }
  DesignElement tmpContainer=this;
  while (tmpContainer != null) {
    if (tmpContainer == element) {
      errors.add(e);
      return errors;
    }
    if (tmpContainer instanceof ListingElement || tmpContainer instanceof Theme || tmpContainer instanceof MasterPage) {
      errors=tmpContainer.checkContent(module,this,slotId,element);
      return errors;
    }
    tmpContainer=tmpContainer.getContainer();
  }
  return Collections.EMPTY_LIST;
}",0.9669980119284294
77432,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    filters=rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters();
    FilterDefnUtil.getRealFilterList(filters,queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0)   runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    filters=rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters();
    FilterDefnUtil.getRealFilterList(filters,queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0)   runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  return runningOnRS;
}",0.9590488771466316
77433,"/** 
 * Creates a new instance of the proper subclass based on the type of the query passed in.
 * @param dataEngine
 * @param queryDefn
 * @param appContext	Application context map; could be null.
 * @return PreparedReportQuery
 * @throws DataException 
 */
static IPreparedQuery newInstance(DataEngineImpl dataEngine,IQueryDefinition queryDefn,Map appContext) throws DataException {
}","/** 
 * Creates a new instance of the proper subclass based on the type of the query passed in.
 * @param dataEngine
 * @param queryDefn
 * @param appContext Application context map; could be null.
 * @return PreparedReportQuery
 * @throws DataException
 */
static IPreparedQuery newInstance(DataEngineImpl dataEngine,IQueryDefinition queryDefn,Map appContext) throws DataException {
}",0.9961089494163424
77434,"private void doPreview(String pattern){
  String type=getSelectedDataType();
  String formatStr=""String_Node_Str"";
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    formatStr=new StringFormatter(pattern,ULocale.getDefault()).format(DEFAULT_PREVIEW_STRING);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    formatStr=new DateFormatter(pattern).format(new Date());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    formatStr=new NumberFormatter(pattern).format(DEFAULT_PREVIEW_NUMBER);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    formatStr=new NumberFormatter(pattern).format(DEFAULT_PREVIEW_INTEGER_NUMBER);
  }
  previewLable.setText(formatStr);
}","private void doPreview(String pattern){
  String type=getSelectedDataType();
  String formatStr=""String_Node_Str"";
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    formatStr=new StringFormatter(pattern,ULocale.getDefault()).format(DEFAULT_PREVIEW_STRING);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    formatStr=new DateFormatter(pattern).format(new Date());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    formatStr=new NumberFormatter(pattern).format(DEFAULT_PREVIEW_NUMBER);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    formatStr=new NumberFormatter(pattern).format(DEFAULT_PREVIEW_INTEGER_NUMBER);
  }
  previewLable.setText(UIUtil.convertToGUIString(formatStr));
}",0.9725776965265084
77435,"private void updateFormatField(){
  String displayFormat;
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM) {
      displayFormat+=""String_Node_Str"" + formatPattern;
    }
  }
  formatField.setText(""String_Node_Str"" + displayFormat);
  changeFormat.setEnabled(choiceSet != null);
  if (selectedParameter != null) {
    doPreview(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern);
  }
}","private void updateFormatField(){
  String displayFormat;
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (isCustom()) {
      displayFormat+=""String_Node_Str"" + formatPattern;
    }
  }
  formatField.setText(""String_Node_Str"" + displayFormat);
  changeFormat.setEnabled(choiceSet != null);
  if (selectedParameter != null) {
    doPreview(isCustom() ? formatPattern : formatCategroy);
  }
}",0.8738738738738738
77436,"private void createDefaultEditor(){
  createLabel(valueArea,LABEL_DEFAULT_VALUE);
  defaultValueEditor=new Text(valueArea,SWT.BORDER);
  defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  defaultValueEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      defaultValue=UIUtil.convertToModelString(defaultValueEditor.getText(),false);
      if (isStatic()) {
        refreshValueTable();
      }
      updateFormatField();
      updateMessageLine();
    }
  }
);
}","private void createDefaultEditor(){
  createLabel(valueArea,LABEL_DEFAULT_VALUE);
  defaultValueEditor=new Text(valueArea,SWT.BORDER);
  defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  defaultValueEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      changeDefaultValue(UIUtil.convertToModelString(defaultValueEditor.getText(),false));
      if (isStatic()) {
        refreshValueTable();
      }
    }
  }
);
}",0.9144542772861356
77437,"private void updateFormatField(){
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(type);
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (defaultValue != null) {
      previewString=format(defaultValue);
    }
 else {
      if (formatCategroy == DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM) {
        displayFormat+=""String_Node_Str"" + formatPattern;
      }
      if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
        previewString=new DateFormatter(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM.equals(formatCategroy) ? formatPattern : formatCategroy,ULocale.getDefault()).format(new Date());
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        previewString=new StringFormatter(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(Messages.getString(""String_Node_Str""));
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER)) {
        previewString=new NumberFormatter(formatCategroy != DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(1234567890);
      }
 else {
        previewString=new NumberFormatter(formatCategroy != DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(123456789.01234);
      }
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(convertNullString(previewString));
  changeFormat.setEnabled(choiceSet != null);
}","private void updateFormatField(){
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(type);
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (defaultValue != null) {
      previewString=format(defaultValue);
    }
 else {
      if (isCustom()) {
        displayFormat+=""String_Node_Str"" + formatPattern;
      }
      if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
        previewString=new DateFormatter(isCustom() ? formatPattern : formatCategroy,ULocale.getDefault()).format(new Date());
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        previewString=new StringFormatter(isCustom() ? formatPattern : formatCategroy,ULocale.getDefault()).format(Messages.getString(""String_Node_Str""));
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER)) {
        previewString=new NumberFormatter(isCustom() ? formatPattern : formatCategroy,ULocale.getDefault()).format(1234567890);
      }
 else {
        previewString=new NumberFormatter(isCustom() ? formatPattern : formatCategroy,ULocale.getDefault()).format(123456789.01234);
      }
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(convertNullString(previewString));
  changeFormat.setEnabled(choiceSet != null);
}",0.821969696969697
77438,"private String format(String string){
  if (canBeNull() && string == null) {
    return LABEL_NULL;
  }
  if (StringUtil.isBlank(string) || formatCategroy == null) {
    return string;
  }
  try {
    String pattern=formatPattern;
    if (formatPattern == null) {
      if (DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM.equals(formatCategroy) || DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM.equals(formatCategroy) || DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM.equals(formatCategroy)) {
        return string;
      }
      pattern=formatCategroy;
    }
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      Date date=DataTypeUtil.toDate(string,ULocale.US);
      DateFormatter formatter=new DateFormatter(pattern);
      string=formatter.format(date);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
      string=new NumberFormatter(pattern).format(DataTypeUtil.toDouble(string).doubleValue());
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType())) {
      string=new NumberFormatter(pattern).format(DataTypeUtil.toBigDecimal(string));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
      string=new StringFormatter(pattern).format(string);
    }
  }
 catch (  BirtException e) {
  }
  return string;
}","private String format(String string){
  if (canBeNull() && string == null) {
    return LABEL_NULL;
  }
  if (StringUtil.isBlank(string) || formatCategroy == null) {
    return string;
  }
  try {
    String pattern=formatPattern;
    if (formatPattern == null) {
      if (isCustom()) {
        return string;
      }
      pattern=formatCategroy;
    }
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      Date date=DataTypeUtil.toDate(string,ULocale.US);
      DateFormatter formatter=new DateFormatter(pattern);
      string=formatter.format(date);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
      string=new NumberFormatter(pattern).format(DataTypeUtil.toDouble(string).doubleValue());
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType())) {
      string=new NumberFormatter(pattern).format(DataTypeUtil.toBigDecimal(string));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
      string=new StringFormatter(pattern).format(string);
    }
  }
 catch (  BirtException e) {
  }
  return string;
}",0.9111635220125788
77439,"public void modifyText(ModifyEvent e){
  defaultValue=UIUtil.convertToModelString(defaultValueEditor.getText(),false);
  if (isStatic()) {
    refreshValueTable();
  }
  updateFormatField();
  updateMessageLine();
}","public void modifyText(ModifyEvent e){
  changeDefaultValue(UIUtil.convertToModelString(defaultValueEditor.getText(),false));
  if (isStatic()) {
    refreshValueTable();
  }
}",0.8542199488491049
77440,"public boolean removeItem(Object[] elements){
  for (int i=0; i < elements.length; i++) {
    choiceList.remove(elements[i]);
  }
  return true;
}","public boolean removeItem(Object[] elements){
  for (int i=0; i < elements.length; i++) {
    if (isDefaultChoice((SelectionChoice)elements[i])) {
      changeDefaultValue(null);
    }
    choiceList.remove(elements[i]);
  }
  return true;
}",0.7545219638242894
77441,"public boolean editItem(final Object element){
  final SelectionChoice choice=(SelectionChoice)element;
  boolean isDefault=isDefaultChoice(choice);
  SelectionChoiceDialog dialog=new SelectionChoiceDialog(Messages.getString(""String_Node_Str""));
  dialog.setInput(choice);
  dialog.setValidator(new SelectionChoiceDialog.ISelectionChoiceValidator(){
    public String validate(    String displayLabel,    String value){
      return validateChoice(choice,displayLabel,value);
    }
  }
);
  if (dialog.open() == Dialog.OK) {
    choice.setValue(convertToStandardFormat(choice.getValue()));
    if (isDefault) {
      defaultValue=choice.getValue();
    }
    return true;
  }
  return false;
}","public boolean editItem(final Object element){
  final SelectionChoice choice=(SelectionChoice)element;
  boolean isDefault=isDefaultChoice(choice);
  SelectionChoiceDialog dialog=new SelectionChoiceDialog(Messages.getString(""String_Node_Str""));
  dialog.setInput(choice);
  dialog.setValidator(new SelectionChoiceDialog.ISelectionChoiceValidator(){
    public String validate(    String displayLabel,    String value){
      return validateChoice(choice,displayLabel,value);
    }
  }
);
  if (dialog.open() == Dialog.OK) {
    choice.setValue(convertToStandardFormat(choice.getValue()));
    if (isDefault) {
      changeDefaultValue(choice.getValue());
    }
    return true;
  }
  return false;
}",0.9921033740129216
77442,"private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableAreaComposite=new Composite(valueArea,SWT.NONE);
  tableAreaComposite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableAreaComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  TableArea tableArea=new TableArea(tableAreaComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER,tableAreaModifier);
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=tableArea.getTable();
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  String[] columns;
  int[] columnWidth;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=tableArea.getTableViewer();
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  tableArea.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableAreaComposite,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String type=getSelectedDataType();
      ImportValueDialog dialog=new ImportValueDialog(type);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        for (int i=0; i < importValues.length; i++) {
          if (!containValue(null,importValues[i],COLUMN_VALUE)) {
            SelectionChoice choice=StructureFactory.createSelectionChoice();
            choice.setValue(importValues[i]);
            choiceList.add(choice);
          }
        }
        refreshValueTable();
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        defaultValue=null;
      }
 else {
        defaultValue=choice.getValue();
      }
      refreshValueTable();
      updateMessageLine();
      updateButtons();
      changeDefault.getParent().layout();
    }
  }
);
  createPromptLine(tableAreaComposite);
  updateTableButtons();
}","private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableAreaComposite=new Composite(valueArea,SWT.NONE);
  tableAreaComposite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableAreaComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  TableArea tableArea=new TableArea(tableAreaComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER,tableAreaModifier);
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=tableArea.getTable();
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  String[] columns;
  int[] columnWidth;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=tableArea.getTableViewer();
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  tableArea.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableAreaComposite,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String type=getSelectedDataType();
      ImportValueDialog dialog=new ImportValueDialog(type);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        for (int i=0; i < importValues.length; i++) {
          if (!containValue(null,importValues[i],COLUMN_VALUE)) {
            SelectionChoice choice=StructureFactory.createSelectionChoice();
            choice.setValue(importValues[i]);
            choiceList.add(choice);
          }
        }
        refreshValueTable();
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        changeDefaultValue(null);
      }
 else {
        changeDefaultValue(choice.getValue());
      }
      refreshValueTable();
      changeDefault.getParent().layout();
    }
  }
);
  createPromptLine(tableAreaComposite);
  updateTableButtons();
}",0.9535420098846789
77443,"public long findPage(long offset) throws IOException {
  for (long page=1; page <= totalPage; page++) {
    IPageHint pageHint=getPageHint(page);
    for (int section=0; section < pageHint.getSectionCount(); section++) {
      long start=pageHint.getSectionStart(section);
      long end=pageHint.getSectionEnd(section);
      if (start <= offset && offset <= end) {
        return page;
      }
    }
  }
  return -1;
}","public long findPage(long offset) throws IOException {
  getTotalPage();
  for (long page=1; page <= totalPage; page++) {
    IPageHint pageHint=getPageHint(page);
    for (int section=0; section < pageHint.getSectionCount(); section++) {
      long start=pageHint.getSectionStart(section);
      long end=pageHint.getSectionEnd(section);
      if (start <= offset && offset <= end) {
        return page;
      }
    }
  }
  return -1;
}",0.9790209790209792
77444,"/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  try {
    return toDate(source,ULocale.getDefault());
  }
 catch (  BirtException e) {
    try {
      return toDate(source,DEFAULT_LOCALE);
    }
 catch (    BirtException use) {
      return toDateISO8601(source);
    }
  }
}","/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  try {
    return toDateISO8601(source);
  }
 catch (  BirtException e) {
    try {
      return toDate(source,DEFAULT_LOCALE);
    }
 catch (    BirtException use) {
      return toDate(source,DEFAULT_LOCALE);
    }
  }
}",0.6961805555555556
77445,"/** 
 * convert String with ISO8601 date format to java.util.Date
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDateISO8601(String source) throws BirtException {
  Date resultDate=null;
  source=source.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < simpleDateFormatter.length; i++) {
    try {
      resultDate=simpleDateFormatter[i].parse(source);
      return resultDate;
    }
 catch (    ParseException e1) {
    }
  }
  if (resultDate == null) {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
  return resultDate;
}","/** 
 * convert String with ISO8601 date format to java.util.Date
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDateISO8601(String source) throws BirtException {
  Date resultDate=null;
  source=source.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < simpleDateFormatter.length - 1; i++) {
    try {
      resultDate=simpleDateFormatter[i].parse(source);
      return resultDate;
    }
 catch (    ParseException e1) {
    }
  }
  if (source.length() <= 4 && source.matches(""String_Node_Str"")) {
    try {
      resultDate=simpleDateFormatter[simpleDateFormatter.length - 1].parse(source);
      return resultDate;
    }
 catch (    ParseException e1) {
    }
  }
  if (resultDate == null) {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
  return resultDate;
}",0.8583283935981031
77446,"public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  try {
    if (COLUMN_NAME.equals(property)) {
      String newName=UIUtil.convertToModelString((String)value,false);
      if (element == dummyChoice) {
        if (newName == null) {
          return;
        }
      }
 else {
        ComputedColumnHandle columnHandle=(ComputedColumnHandle)element;
        boolean selectedNameChanged=false;
        if (columnHandle.getName().equals(selectedColumnName)) {
          selectedNameChanged=true;
        }
        if (highLightName != null && highLightName.equals(((ComputedColumnHandle)element).getName()) && !highLightName.equals(newName)) {
          bindingTable.getTable().getItem(bindingTable.getTable().getSelectionIndex()).setForeground(1,Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND));
        }
        ((ComputedColumnHandle)element).setName(newName);
        if (selectedNameChanged) {
          selectedColumnName=newName;
        }
      }
    }
 else {
      ComputedColumnHandle bindingHandle=((ComputedColumnHandle)element);
      if (COLUMN_DATATYPE.equals(property)) {
        bindingHandle.setDataType(dataTypes[((Integer)value).intValue()].getName());
      }
 else       if (COLUMN_EXPRESSION.equals(property)) {
        bindingHandle.setExpression((String)value);
        String groupType=DEUtil.getGroupControlType(inputElement);
        if (ExpressionUtil.hasAggregation(bindingHandle.getExpression())) {
          if (!groupType.equals(DEUtil.TYPE_GROUP_NONE))           bindingHandle.setAggregrateOn(((GroupHandle)DEUtil.getGroups(inputElement).get(0)).getName());
 else           bindingHandle.setAggregrateOn(null);
        }
        if (!ExpressionUtil.hasAggregation(bindingHandle.getExpression()) || groupType.equals(DEUtil.TYPE_GROUP_NONE)) {
          bindingHandle.setAggregrateOn(null);
        }
      }
 else       if (COLUMN_AGGREGATEON.equals(property)) {
        if (((Integer)value).intValue() == 0)         bindingHandle.setAggregrateOn(null);
 else         bindingHandle.setAggregrateOn(groups[((Integer)value).intValue()]);
      }
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  refreshBindingTable();
}","public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  try {
    if (COLUMN_NAME.equals(property)) {
      String newName=UIUtil.convertToModelString((String)value,false);
      if (element == dummyChoice) {
        if (newName == null) {
          return;
        }
      }
 else {
        ComputedColumnHandle columnHandle=(ComputedColumnHandle)element;
        boolean selectedNameChanged=false;
        if (columnHandle.getName().equals(selectedColumnName)) {
          selectedNameChanged=true;
        }
        if (highLightName != null && highLightName.equals(((ComputedColumnHandle)element).getName()) && !highLightName.equals(newName)) {
          bindingTable.getTable().getItem(bindingTable.getTable().getSelectionIndex()).setForeground(1,Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND));
        }
        ((ComputedColumnHandle)element).setName(newName);
        if (selectedNameChanged) {
          selectedColumnName=newName;
        }
      }
    }
 else {
      ComputedColumnHandle bindingHandle=((ComputedColumnHandle)element);
      if (COLUMN_DATATYPE.equals(property)) {
        bindingHandle.setDataType(dataTypes[((Integer)value).intValue()].getName());
      }
 else       if (COLUMN_EXPRESSION.equals(property)) {
        if (!(bindingHandle.getExpression() != null && bindingHandle.getExpression().equals((String)value))) {
          bindingHandle.setExpression((String)value);
          String groupType=DEUtil.getGroupControlType(inputElement);
          if (ExpressionUtil.hasAggregation(bindingHandle.getExpression())) {
            if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))             bindingHandle.setAggregrateOn(((GroupHandle)DEUtil.getGroups(inputElement).get(0)).getName());
 else             if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))             bindingHandle.setAggregrateOn(null);
          }
          if (!ExpressionUtil.hasAggregation(bindingHandle.getExpression()) || groupType.equals(DEUtil.TYPE_GROUP_NONE)) {
            bindingHandle.setAggregrateOn(null);
          }
        }
      }
 else       if (COLUMN_AGGREGATEON.equals(property)) {
        if (((Integer)value).intValue() == 0)         bindingHandle.setAggregrateOn(null);
 else         bindingHandle.setAggregrateOn(groups[((Integer)value).intValue()]);
      }
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  refreshBindingTable();
}",0.9051003344481604
77447,"/** 
 * @throws SemanticException
 */
public void test_137129() throws SemanticException {
  SessionHandle session=new DesignEngine(new DesignConfig()).newSessionHandle(ULocale.ENGLISH);
  designHandle=session.createDesign();
  ElementFactory factory=designHandle.getElementFactory();
  DataItemHandle data=factory.newDataItem(""String_Node_Str"");
  designHandle.getBody().add(data);
  ComputedColumn column1=StructureFactory.newComputedColumn(data,""String_Node_Str"");
  column1.setExpression(""String_Node_Str"");
  data.addColumnBinding(column1,true);
  ComputedColumn column2=StructureFactory.newComputedColumn(data,""String_Node_Str"");
  column2.setExpression(""String_Node_Str"");
  try {
    data.addColumnBinding(column2,true);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(NameException.DESIGN_EXCEPTION_DUPLICATE,e.getErrorCode());
  }
}","/** 
 * @throws SemanticException
 */
public void test_137129() throws SemanticException {
  SessionHandle session=new DesignEngine(new DesignConfig()).newSessionHandle(ULocale.ENGLISH);
  designHandle=session.createDesign();
  ElementFactory factory=designHandle.getElementFactory();
  DataItemHandle data=factory.newDataItem(""String_Node_Str"");
  designHandle.getBody().add(data);
  ComputedColumn column1=StructureFactory.newComputedColumn(data,""String_Node_Str"");
  column1.setExpression(""String_Node_Str"");
  data.addColumnBinding(column1,true);
  ComputedColumn column2=StructureFactory.newComputedColumn(data,""String_Node_Str"");
  column2.setExpression(""String_Node_Str"");
  assertEquals(""String_Node_Str"",column2.getName());
  try {
    column2.setName(""String_Node_Str"");
    data.addColumnBinding(column2,true);
    fail();
  }
 catch (  SemanticException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS,e.getErrorCode());
  }
}",0.9326027397260274
77448,"/** 
 * @throws DesignFileException
 * @throws SemanticException
 */
public void test_142432() throws DesignFileException, SemanticException {
  openLibrary(libraryname);
  MasterPageHandle masterpage=libraryHandle.findMasterPage(""String_Node_Str"");
  openDesign(filename);
  designHandle.includeLibrary(libraryname,""String_Node_Str"");
  MasterPageHandle mp=(MasterPageHandle)designHandle.getElementFactory().newElementFrom(masterpage,""String_Node_Str"");
  designHandle.getMasterPages().add(mp);
  assertFalse(mp.hasLocalProperties());
  mp.setOrientation(DesignChoiceConstants.PAGE_ORIENTATION_LANDSCAPE);
  assertTrue(mp.hasLocalProperties());
  List pages=new ArrayList();
  pages.add(mp);
  GroupElementHandle group=new SimpleGroupElementHandle(designHandle,pages);
  assertFalse(group.hasLocalPropertiesForExtendedElements());
}","/** 
 * @throws DesignFileException
 * @throws SemanticException
 */
public void test_142432() throws DesignFileException, SemanticException {
  openLibrary(libraryname);
  MasterPageHandle masterpage=libraryHandle.findMasterPage(""String_Node_Str"");
  openDesign(filename);
  designHandle.includeLibrary(libraryname,""String_Node_Str"");
  MasterPageHandle mp=(MasterPageHandle)designHandle.getElementFactory().newElementFrom(masterpage,""String_Node_Str"");
  designHandle.getMasterPages().add(mp);
  assertFalse(mp.hasLocalProperties());
  mp.setOrientation(DesignChoiceConstants.PAGE_ORIENTATION_LANDSCAPE);
  assertTrue(mp.hasLocalProperties());
  List pages=new ArrayList();
  pages.add(mp);
  GroupElementHandle group=new SimpleGroupElementHandle(designHandle,pages);
  assertTrue(group.hasLocalPropertiesForExtendedElements());
}",0.9645645645645644
77449,"private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)attrBean.findParameter(paramName);
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item != null && item.getValue() != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        Object value=item.getValue();
        String label=item.getLabel();
        if (value == null)         continue;
        if (label == null || label.length() <= 0) {
          label=ParameterValidationUtil.getDisplayValue(null,parameterHandle.getPattern(),value,attrBean.getLocale());
        }
        if (label != null) {
          selectItemChoice.setLabel(label);
          selectItemChoice.setValue(ParameterValidationUtil.getDisplayValue(value));
          selectionList.add(index++,selectItemChoice);
        }
      }
    }
  }
  return selectionList;
}","private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)attrBean.findParameter(paramName);
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item != null && item.getValue() != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        Object value=item.getValue();
        String label=item.getLabel();
        if (value == null)         continue;
        if (label == null || label.length() <= 0) {
          label=ParameterValidationUtil.getDisplayValue(null,parameterHandle.getPattern(),value,attrBean.getLocale());
        }
 else {
          label=ParameterValidationUtil.getDisplayValue(null,parameterHandle.getPattern(),label,attrBean.getLocale());
        }
        if (label != null) {
          selectItemChoice.setLabel(label);
          selectItemChoice.setValue(ParameterValidationUtil.getDisplayValue(value));
          selectionList.add(index++,selectItemChoice);
        }
      }
    }
  }
  return selectionList;
}",0.9529047782743212
77450,"public boolean onBroughtToTop(IReportEditorPage page){
  return true;
}","public boolean onBroughtToTop(IReportEditorPage page){
  GraphicalViewer view=getGraphicalViewer();
  if (view != null) {
    UIUtil.resetViewSelection(view,true);
  }
  return true;
}",0.5568627450980392
77451,"public boolean onBroughtToTop(IReportEditorPage prePage){
  boolean isDisplay=false;
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (isDirtyModel()) {
    doSave(null);
  }
  if (prePage.isDirty()) {
    prePage.doSave(null);
  }
  if (isMissingParameter()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
        if (isMissingParameter()) {
          editor.setActivePage(prePage.getId());
          return false;
        }
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  boolean isDisplay=false;
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (isDirtyModel()) {
    doSave(null);
  }
  if (prePage.isDirty()) {
    prePage.doSave(null);
  }
  if (isMissingParameter()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
        if (isMissingParameter()) {
          editor.setActivePage(prePage.getId());
          return false;
        }
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  ReportRequest request=new ReportRequest(ReportPreviewFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}",0.8509643483343075
77452,"public void deactivate(){
  if (!isActive())   return;
  removeGuideFeedBack();
  super.deactivate();
  HandleAdapterFactory.getInstance().remove(getModel());
}","public void deactivate(){
  if (!isActive())   return;
  removeGuideFeedBack();
  super.deactivate();
  if (isDelete()) {
    HandleAdapterFactory.getInstance().remove(getModel());
  }
}",0.9248554913294798
77453,"private void initFormatField(){
  if ((DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(lastControlType) && DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) || (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(lastControlType) && DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType()))) {
    return;
  }
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    formatCategroy=formatPattern=null;
  }
 else {
    if (!loading || ((inputParameter.getCategory() == null && inputParameter.getPattern() == null))) {
      if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getName();
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED).getName();
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType()) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.NUMBER_FORMAT_TYPE_UNFORMATTED).getName();
      }
      formatPattern=null;
    }
 else {
      formatCategroy=inputParameter.getCategory();
      if (formatCategroy == null) {
        formatCategroy=DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED;
      }
      formatPattern=inputParameter.getPattern();
    }
  }
  updateFormatField();
}","private void initFormatField(){
  if ((DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(lastControlType) && DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) || (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(lastControlType) && DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType()))) {
    return;
  }
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    formatCategroy=formatPattern=null;
  }
 else {
    if (!loading || ((inputParameter.getCategory() == null && inputParameter.getPattern() == null))) {
      if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getName();
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED).getName();
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType()) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType()) || DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(getSelectedDataType())) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.NUMBER_FORMAT_TYPE_UNFORMATTED).getName();
      }
      formatPattern=null;
    }
 else {
      formatCategroy=inputParameter.getCategory();
      if (formatCategroy == null) {
        formatCategroy=DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED;
      }
      formatPattern=inputParameter.getPattern();
    }
  }
  updateFormatField();
}",0.976961394769614
77454,"/** 
 * Adapts a Model data type (string) to Data Engine data type constant (integer)
 */
public static int adaptModelDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  return DataType.UNKNOWN_TYPE;
}","/** 
 * Adapts a Model data type (string) to Data Engine data type constant (integer) on column
 */
public static int adaptModelDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  return DataType.UNKNOWN_TYPE;
}",0.9943310657596371
77455,"public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  setType(ModelAdapter.adaptModelDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  setDefaultInputValue(modelParam.getDefaultValue());
}","public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  setType(ModelAdapter.adaptModelParamDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  setDefaultInputValue(modelParam.getDefaultValue());
}",0.9947312961011592
77456,"/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  dteParam.setType(toDteDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}","/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  dteParam.setType(adaptModelParamDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}",0.9858757062146892
77457,"/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String configFileName=getConfigFileName(this.getFileUri());
  if (configFileName == null)   return configVars;
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            String paramName=getParameterName(configVar.getName());
            if (paramName != null && paramName.length() > 0) {
              configVars.put(paramName,configVar.getValue());
            }
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
  return configVars;
}","/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String configFileName=getConfigFileName(this.getFileUri());
  if (configFileName == null)   return configVars;
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            String paramName=getParameterName(configVar.getName());
            ScalarParameterHandle parameter=findParameter(paramName);
            if (parameter != null) {
              String typeVarName=configVar.getName() + ""String_Node_Str"" + PROP_TYPE;
              ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
              String dataType=null;
              if (typeVar != null)               dataType=typeVar.getValue();
              if (dataType == null || !dataType.equalsIgnoreCase(parameter.getDataType())) {
                continue;
              }
            }
            if (paramName != null && paramName.length() > 0) {
              configVars.put(paramName,configVar.getValue());
            }
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
  return configVars;
}",0.8311688311688312
77458,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          String paramValue=configVar.getValue();
          if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName(paramValue);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam);
            if (paramName != null) {
              if (this.displayTexts == null)               this.displayTexts=new HashMap();
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName);
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType())) {
                Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          String paramValue=configVar.getValue();
          if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName(paramValue);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam);
            if (paramName != null) {
              if (this.displayTexts == null)               this.displayTexts=new HashMap();
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName);
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=null;
            if (typeVar != null)             dataType=typeVar.getValue();
            if (dataType == null || !dataType.equalsIgnoreCase(parameter.getDataType())) {
              continue;
            }
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType())) {
                Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}",0.9259859535386278
77459,"protected boolean isHidden(){
  if (content != null) {
    IStyle style=content.getComputedStyle();
    String formats=style.getVisibleFormat();
    String format=context.getFormat();
    if (CSSConstants.CSS_NONE_VALUE.equalsIgnoreCase(style.getDisplay()) || (formats != null && formats.length() > 0 && (formats.indexOf(format) >= 0 || formats.indexOf(BIRTConstants.BIRT_ALL_VALUE.toUpperCase()) >= 0))) {
      return true;
    }
  }
  return false;
}","protected boolean isHidden(){
  if (content != null) {
    IStyle style=content.getComputedStyle();
    String formats=style.getVisibleFormat();
    String format=context.getFormat();
    if (CSSConstants.CSS_NONE_VALUE.equalsIgnoreCase(style.getDisplay()) || (formats != null && formats.length() > 0 && (formats.indexOf(format) >= 0 || formats.toUpperCase().indexOf(BIRTConstants.BIRT_ALL_VALUE.toUpperCase()) >= 0))) {
      return true;
    }
  }
  return false;
}",0.9847826086956522
77460,"public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  try {
    if (COLUMN_NAME.equals(property)) {
      String newName=UIUtil.convertToModelString((String)value,false);
      if (element == dummyChoice) {
        if (newName == null) {
          return;
        }
      }
 else {
        ComputedColumnHandle columnHandle=(ComputedColumnHandle)element;
        boolean selectedNameChanged=false;
        if (columnHandle.getName().equals(selectedColumnName)) {
          selectedNameChanged=true;
        }
        if (highLightName != null && highLightName.equals(((ComputedColumnHandle)element).getName()) && !highLightName.equals(newName)) {
          bindingTable.getTable().getItem(bindingTable.getTable().getSelectionIndex()).setForeground(1,Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND));
        }
        ((ComputedColumnHandle)element).setName(newName);
        if (selectedNameChanged) {
          selectedColumnName=newName;
        }
      }
    }
 else {
      ComputedColumnHandle bindingHandle=((ComputedColumnHandle)element);
      if (COLUMN_DATATYPE.equals(property)) {
        bindingHandle.setDataType(dataTypes[((Integer)value).intValue()].getName());
      }
 else       if (COLUMN_EXPRESSION.equals(property)) {
        bindingHandle.setExpression((String)value);
        String groupType=DEUtil.getGroupControlType(inputElement);
        if (ExpressionUtil.hasAggregation(bindingHandle.getExpression())) {
          if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))           bindingHandle.setAggregrateOn(((GroupHandle)DEUtil.getGroups(inputElement).get(0)).getName());
 else           if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))           bindingHandle.setAggregrateOn(null);
        }
        if (!ExpressionUtil.hasAggregation(bindingHandle.getExpression()) || groupType.equals(DEUtil.TYPE_GROUP_NONE)) {
          bindingHandle.setAggregrateOn(null);
        }
      }
 else       if (COLUMN_AGGREGATEON.equals(property)) {
        if (((Integer)value).intValue() == 0)         bindingHandle.setAggregrateOn(null);
 else         bindingHandle.setAggregrateOn(groups[((Integer)value).intValue()]);
      }
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  refreshBindingTable();
}","public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  try {
    if (COLUMN_NAME.equals(property)) {
      String newName=UIUtil.convertToModelString((String)value,false);
      if (element == dummyChoice) {
        if (newName == null) {
          return;
        }
      }
 else {
        ComputedColumnHandle columnHandle=(ComputedColumnHandle)element;
        boolean selectedNameChanged=false;
        if (columnHandle.getName().equals(selectedColumnName)) {
          selectedNameChanged=true;
        }
        if (highLightName != null && highLightName.equals(((ComputedColumnHandle)element).getName()) && !highLightName.equals(newName)) {
          bindingTable.getTable().getItem(bindingTable.getTable().getSelectionIndex()).setForeground(1,Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND));
        }
        ((ComputedColumnHandle)element).setName(newName);
        if (selectedNameChanged) {
          selectedColumnName=newName;
        }
      }
    }
 else {
      ComputedColumnHandle bindingHandle=((ComputedColumnHandle)element);
      if (COLUMN_DATATYPE.equals(property)) {
        bindingHandle.setDataType(dataTypes[((Integer)value).intValue()].getName());
      }
 else       if (COLUMN_EXPRESSION.equals(property)) {
        bindingHandle.setExpression((String)value);
        String groupType=DEUtil.getGroupControlType(inputElement);
        if (ExpressionUtil.hasAggregation(bindingHandle.getExpression())) {
          if (!groupType.equals(DEUtil.TYPE_GROUP_NONE))           bindingHandle.setAggregrateOn(((GroupHandle)DEUtil.getGroups(inputElement).get(0)).getName());
 else           bindingHandle.setAggregrateOn(null);
        }
        if (!ExpressionUtil.hasAggregation(bindingHandle.getExpression()) || groupType.equals(DEUtil.TYPE_GROUP_NONE)) {
          bindingHandle.setAggregrateOn(null);
        }
      }
 else       if (COLUMN_AGGREGATEON.equals(property)) {
        if (((Integer)value).intValue() == 0)         bindingHandle.setAggregrateOn(null);
 else         bindingHandle.setAggregrateOn(groups[((Integer)value).intValue()]);
      }
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  refreshBindingTable();
}",0.885585003232062
77461,"public void test_120073(){
  MetaDataDictionary instance=MetaDataDictionary.getInstance();
  IElementDefn label=instance.getElement(""String_Node_Str"");
  List list=label.getMethods();
  int i=0;
  assertEquals(Label.ON_PREPARE_METHOD,((PropertyDefn)list.get(i++)).getName());
  assertEquals(Label.ON_CREATE_METHOD,((PropertyDefn)list.get(i++)).getName());
  assertEquals(Label.ON_RENDER_METHOD,((PropertyDefn)list.get(i++)).getName());
  assertEquals(Label.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(i++)).getName());
  MethodInfo onprepare=label.getProperty(Label.ON_PREPARE_METHOD).getMethodInfo();
  Iterator iter=onprepare.argumentListIterator();
  ArgumentInfoList argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  MethodInfo oncreate=label.getProperty(Label.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  MethodInfo onrender=label.getProperty(Label.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  MethodInfo onpagebreak=label.getProperty(Label.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn text=instance.getElement(""String_Node_Str"");
  list=text.getMethods();
  int j=0;
  assertEquals(TextItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(j++)).getName());
  assertEquals(TextItem.ON_CREATE_METHOD,((PropertyDefn)list.get(j++)).getName());
  assertEquals(TextItem.ON_RENDER_METHOD,((PropertyDefn)list.get(j++)).getName());
  assertEquals(TextItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(j++)).getName());
  onprepare=text.getProperty(TextItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=text.getProperty(TextItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=text.getProperty(TextItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=text.getProperty(TextItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn image=instance.getElement(""String_Node_Str"");
  list=image.getMethods();
  int k=0;
  assertEquals(ImageItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(k++)).getName());
  assertEquals(ImageItem.ON_CREATE_METHOD,((PropertyDefn)list.get(k++)).getName());
  assertEquals(ImageItem.ON_RENDER_METHOD,((PropertyDefn)list.get(k++)).getName());
  assertEquals(ImageItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(k++)).getName());
  onprepare=image.getProperty(ImageItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=image.getProperty(ImageItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=image.getProperty(ImageItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=image.getProperty(ImageItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn grid=instance.getElement(""String_Node_Str"");
  list=grid.getMethods();
  int m=0;
  assertEquals(GridItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(m++)).getName());
  assertEquals(GridItem.ON_CREATE_METHOD,((PropertyDefn)list.get(m++)).getName());
  assertEquals(GridItem.ON_RENDER_METHOD,((PropertyDefn)list.get(m++)).getName());
  assertEquals(GridItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(m++)).getName());
  onprepare=grid.getProperty(GridItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=grid.getProperty(GridItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=grid.getProperty(GridItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=grid.getProperty(GridItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn textdata=instance.getElement(""String_Node_Str"");
  list=textdata.getMethods();
  int n=0;
  assertEquals(TextDataItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(n++)).getName());
  assertEquals(TextDataItem.ON_CREATE_METHOD,((PropertyDefn)list.get(n++)).getName());
  assertEquals(TextDataItem.ON_RENDER_METHOD,((PropertyDefn)list.get(n++)).getName());
  assertEquals(TextDataItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(n++)).getName());
  onprepare=textdata.getProperty(TextDataItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=textdata.getProperty(TextDataItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=textdata.getProperty(TextDataItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=textdata.getProperty(TextDataItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn table=instance.getElement(""String_Node_Str"");
  list=table.getMethods();
  int l=0;
  assertEquals(TableItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(l++)).getName());
  assertEquals(TableItem.ON_CREATE_METHOD,((PropertyDefn)list.get(l++)).getName());
  assertEquals(TableItem.ON_RENDER_METHOD,((PropertyDefn)list.get(l++)).getName());
  assertEquals(TableItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(l++)).getName());
  onprepare=table.getProperty(TableItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=table.getProperty(TableItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=table.getProperty(TableItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=table.getProperty(TableItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn row=instance.getElement(""String_Node_Str"");
  list=row.getMethods();
  int p=0;
  assertEquals(TableRow.ON_PREPARE_METHOD,((PropertyDefn)list.get(p++)).getName());
  assertEquals(TableRow.ON_CREATE_METHOD,((PropertyDefn)list.get(p++)).getName());
  assertEquals(TableRow.ON_RENDER_METHOD,((PropertyDefn)list.get(p++)).getName());
  onprepare=row.getProperty(TableRow.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=row.getProperty(TableRow.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=row.getProperty(TableRow.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn listitem=instance.getElement(""String_Node_Str"");
  list=listitem.getMethods();
  int q=0;
  assertEquals(ListItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(q++)).getName());
  assertEquals(ListItem.ON_CREATE_METHOD,((PropertyDefn)list.get(q++)).getName());
  assertEquals(ListItem.ON_RENDER_METHOD,((PropertyDefn)list.get(q++)).getName());
  assertEquals(ListItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(q++)).getName());
  onprepare=listitem.getProperty(ListItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=listitem.getProperty(ListItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=listitem.getProperty(ListItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=listitem.getProperty(ListItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
}","public void test_120073(){
  MetaDataDictionary instance=MetaDataDictionary.getInstance();
  IElementDefn label=instance.getElement(""String_Node_Str"");
  List list=label.getMethods();
  int i=0;
  assertEquals(Label.ON_PREPARE_METHOD,((PropertyDefn)list.get(i++)).getName());
  assertEquals(Label.ON_CREATE_METHOD,((PropertyDefn)list.get(i++)).getName());
  assertEquals(Label.ON_RENDER_METHOD,((PropertyDefn)list.get(i++)).getName());
  assertEquals(Label.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(i++)).getName());
  IMethodInfo onprepare=label.getProperty(Label.ON_PREPARE_METHOD).getMethodInfo();
  Iterator iter=onprepare.argumentListIterator();
  ArgumentInfoList argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IMethodInfo oncreate=label.getProperty(Label.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IMethodInfo onrender=label.getProperty(Label.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IMethodInfo onpagebreak=label.getProperty(Label.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn text=instance.getElement(""String_Node_Str"");
  list=text.getMethods();
  int j=0;
  assertEquals(TextItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(j++)).getName());
  assertEquals(TextItem.ON_CREATE_METHOD,((PropertyDefn)list.get(j++)).getName());
  assertEquals(TextItem.ON_RENDER_METHOD,((PropertyDefn)list.get(j++)).getName());
  assertEquals(TextItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(j++)).getName());
  onprepare=text.getProperty(TextItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=text.getProperty(TextItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=text.getProperty(TextItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=text.getProperty(TextItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn image=instance.getElement(""String_Node_Str"");
  list=image.getMethods();
  int k=0;
  assertEquals(ImageItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(k++)).getName());
  assertEquals(ImageItem.ON_CREATE_METHOD,((PropertyDefn)list.get(k++)).getName());
  assertEquals(ImageItem.ON_RENDER_METHOD,((PropertyDefn)list.get(k++)).getName());
  assertEquals(ImageItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(k++)).getName());
  onprepare=image.getProperty(ImageItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=image.getProperty(ImageItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=image.getProperty(ImageItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=image.getProperty(ImageItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn grid=instance.getElement(""String_Node_Str"");
  list=grid.getMethods();
  int m=0;
  assertEquals(GridItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(m++)).getName());
  assertEquals(GridItem.ON_CREATE_METHOD,((PropertyDefn)list.get(m++)).getName());
  assertEquals(GridItem.ON_RENDER_METHOD,((PropertyDefn)list.get(m++)).getName());
  assertEquals(GridItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(m++)).getName());
  onprepare=grid.getProperty(GridItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=grid.getProperty(GridItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=grid.getProperty(GridItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=grid.getProperty(GridItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn textdata=instance.getElement(""String_Node_Str"");
  list=textdata.getMethods();
  int n=0;
  assertEquals(TextDataItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(n++)).getName());
  assertEquals(TextDataItem.ON_CREATE_METHOD,((PropertyDefn)list.get(n++)).getName());
  assertEquals(TextDataItem.ON_RENDER_METHOD,((PropertyDefn)list.get(n++)).getName());
  assertEquals(TextDataItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(n++)).getName());
  onprepare=textdata.getProperty(TextDataItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=textdata.getProperty(TextDataItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=textdata.getProperty(TextDataItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=textdata.getProperty(TextDataItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn table=instance.getElement(""String_Node_Str"");
  list=table.getMethods();
  int l=0;
  assertEquals(TableItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(l++)).getName());
  assertEquals(TableItem.ON_CREATE_METHOD,((PropertyDefn)list.get(l++)).getName());
  assertEquals(TableItem.ON_RENDER_METHOD,((PropertyDefn)list.get(l++)).getName());
  assertEquals(TableItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(l++)).getName());
  onprepare=table.getProperty(TableItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=table.getProperty(TableItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=table.getProperty(TableItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=table.getProperty(TableItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn row=instance.getElement(""String_Node_Str"");
  list=row.getMethods();
  int p=0;
  assertEquals(TableRow.ON_PREPARE_METHOD,((PropertyDefn)list.get(p++)).getName());
  assertEquals(TableRow.ON_CREATE_METHOD,((PropertyDefn)list.get(p++)).getName());
  assertEquals(TableRow.ON_RENDER_METHOD,((PropertyDefn)list.get(p++)).getName());
  onprepare=row.getProperty(TableRow.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=row.getProperty(TableRow.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=row.getProperty(TableRow.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  IElementDefn listitem=instance.getElement(""String_Node_Str"");
  list=listitem.getMethods();
  int q=0;
  assertEquals(ListItem.ON_PREPARE_METHOD,((PropertyDefn)list.get(q++)).getName());
  assertEquals(ListItem.ON_CREATE_METHOD,((PropertyDefn)list.get(q++)).getName());
  assertEquals(ListItem.ON_RENDER_METHOD,((PropertyDefn)list.get(q++)).getName());
  assertEquals(ListItem.ON_PAGE_BREAK_METHOD,((PropertyDefn)list.get(q++)).getName());
  onprepare=listitem.getProperty(ListItem.ON_PREPARE_METHOD).getMethodInfo();
  iter=onprepare.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  oncreate=listitem.getProperty(ListItem.ON_CREATE_METHOD).getMethodInfo();
  iter=oncreate.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onrender=listitem.getProperty(ListItem.ON_RENDER_METHOD).getMethodInfo();
  iter=onrender.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
  onpagebreak=listitem.getProperty(ListItem.ON_PAGE_BREAK_METHOD).getMethodInfo();
  iter=onpagebreak.argumentListIterator();
  argumentList=(ArgumentInfoList)iter.next();
  assertNotNull(argumentList.getArgument(""String_Node_Str""));
}",0.9998104804321046
77462,"/** 
 * Inserts a copied column to the given column index.
 * @param columnIndex the column index
 * @param insertFlag The column insert sign. 1 insert after position. -1 insert before position
 * @return a list containing post-parsing errors. Each element in the listis <code>ErrorDetail</code>.
 * @throws SemanticException if layouts of slots are different.
 */
protected List insertColumnBand(int columnIndex,int insertFlag) throws SemanticException {
  boolean canDone=canInsert(columnIndex,insertFlag);
  if (!canDone)   throw new SemanticError(adapter.getElementHandle().getElement(),new String[]{adapter.getElementHandle().getName()},SemanticError.DESIGN_EXCEPTION_COLUMN_INSERT_FORBIDDEN);
  TableColumn column=new TableColumn();
  adapter.getModule().getActivityStack().startTrans();
  try {
    pasteColumn(column,targetColumnIndex,true);
    insertCells(targetColumnIndex);
  }
 catch (  SemanticException e) {
    adapter.getModule().getActivityStack().rollback();
    throw e;
  }
  adapter.getModule().getActivityStack().commit();
  return Collections.EMPTY_LIST;
}","/** 
 * Inserts a copied column to the given column index.
 * @param columnIndex the column index
 * @param insertFlag The column insert sign. 1 insert after position. -1 insert before position
 * @return a list containing post-parsing errors. Each element in the listis <code>ErrorDetail</code>.
 * @throws SemanticException if layouts of slots are different.
 */
protected List insertColumnBand(int columnIndex,int insertFlag) throws SemanticException {
  boolean canDone=canInsert(columnIndex,insertFlag);
  if (!canDone)   throw new SemanticError(adapter.getElementHandle().getElement(),new String[]{adapter.getElementHandle().getName()},SemanticError.DESIGN_EXCEPTION_COLUMN_INSERT_FORBIDDEN);
  TableColumn column=new TableColumn();
  adapter.getModule().getActivityStack().startSilentTrans();
  try {
    pasteColumn(column,targetColumnIndex,true);
    insertCells(targetColumnIndex);
  }
 catch (  SemanticException e) {
    adapter.getModule().getActivityStack().rollback();
    throw e;
  }
  adapter.getModule().getActivityStack().commit();
  return Collections.EMPTY_LIST;
}",0.997229916897507
77463,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @param insertFlag The column insert sign. 1 insert after position. -1 insert before position
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsert(int columnIndex,int insertFlag){
  int columnCount=adapter.getColumnCount();
  targetColumnIndex=columnIndex;
  if (insertFlag == INSERT_BEFORE)   targetColumnIndex=targetColumnIndex - 1;
  if (targetColumnIndex > columnCount)   targetColumnIndex=columnCount;
  if (targetColumnIndex >= columnCount || targetColumnIndex < 1) {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(1));
  }
 else {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(targetColumnIndex,false));
    if (!isValidInsertAndPasteArea(originalCells))     return false;
  }
  return true;
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @param insertFlag The column insert sign. 1 insert after position. -1 insert before position
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsert(int columnIndex,int insertFlag){
  if (adapter.hasParent())   return false;
  int columnCount=adapter.getColumnCount();
  targetColumnIndex=columnIndex;
  if (insertFlag == INSERT_BEFORE)   targetColumnIndex=targetColumnIndex - 1;
  if (targetColumnIndex > columnCount)   targetColumnIndex=columnCount;
  if (targetColumnIndex >= columnCount || targetColumnIndex < 1) {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(1));
  }
 else {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(targetColumnIndex,false));
    if (!isValidInsertAndPasteArea(originalCells))     return false;
  }
  return true;
}",0.9788697788697788
77464,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @param data the copied column band data
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsertAndPaste(int columnIndex,ColumnBandData data){
  int columnCount=adapter.getColumnCount();
  int targetColumnIndex=columnIndex + 1;
  List originalCells=null;
  if (targetColumnIndex > columnCount) {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(1));
  }
 else {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(targetColumnIndex));
    if (!isValidInsertAndPasteArea(originalCells))     return false;
  }
  List cells=data.getCells();
  try {
    isSameLayout(cells,originalCells);
  }
 catch (  SemanticException e) {
    return false;
  }
  return true;
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @param data the copied column band data
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsertAndPaste(int columnIndex,ColumnBandData data){
  if (adapter.hasParent())   return false;
  int columnCount=adapter.getColumnCount();
  int targetColumnIndex=columnIndex + 1;
  List originalCells=null;
  if (targetColumnIndex > columnCount) {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(1));
  }
 else {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(targetColumnIndex));
    if (!isValidInsertAndPasteArea(originalCells))     return false;
  }
  List cells=data.getCells();
  try {
    isSameLayout(cells,originalCells);
  }
 catch (  SemanticException e) {
    return false;
  }
  return true;
}",0.9777547853078116
77465,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @param inForce <code>true</code> indicates to paste the column regardless of the different layout of cells. <code>false</code> indicates not.
 * @param data the copied column band data
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canPaste(int columnIndex,boolean inForce,ColumnBandData data){
  List cells=data.getCells();
  List originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(columnIndex));
  if (!isRectangleArea(originalCells,1))   return false;
  boolean isSameLayout=false;
  try {
    isSameLayout=isSameLayout(cells,originalCells);
  }
 catch (  SemanticException e) {
    return false;
  }
  if (!inForce && !isSameLayout)   return false;
  return true;
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @param inForce <code>true</code> indicates to paste the column regardless of the different layout of cells. <code>false</code> indicates not.
 * @param data the copied column band data
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canPaste(int columnIndex,boolean inForce,ColumnBandData data){
  if (adapter.hasParent())   return false;
  List cells=data.getCells();
  List originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(columnIndex));
  if (!isRectangleArea(originalCells,1))   return false;
  boolean isSameLayout=false;
  try {
    isSameLayout=isSameLayout(cells,originalCells);
  }
 catch (  SemanticException e) {
    return false;
  }
  if (!inForce && !isSameLayout)   return false;
  return true;
}",0.977498691784406
77466,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param sourceColumn the source column to shift
 * @param destColumn the target column to shift
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean checkTargetColumn(int sourceColumn,int destColumn){
  int newPosn=adjustDestPosn(sourceColumn,destColumn);
  if (newPosn == -1)   return true;
  int columnCount=adapter.getColumnCount();
  if (newPosn == 0 || newPosn == columnCount)   return true;
  List originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(newPosn));
  if (!isRectangleArea(originalCells,1))   return false;
  return true;
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param sourceColumn the source column to shift
 * @param destColumn the target column to shift
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean checkTargetColumn(int sourceColumn,int destColumn){
  if (adapter.hasParent())   return false;
  int newPosn=adjustDestPosn(sourceColumn,destColumn);
  if (newPosn == -1)   return true;
  int columnCount=adapter.getColumnCount();
  if (newPosn == 0 || newPosn == columnCount)   return true;
  List originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(newPosn));
  if (!isRectangleArea(originalCells,1))   return false;
  return true;
}",0.9724182168056448
77467,"/** 
 * Checks whether the insert operation can be done with the given slot id , group id , index and the operation flag.
 * @param copiedRow source copied table row
 * @param parameters parameters needed by insert operation.
 * @return <code>true</code> indicates the insert operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsert(RowOperationParameters parameters){
  int destIndex=parameters.getDestIndex();
  SlotHandle slotHandle=getSlotHandle(parameters);
  if (slotHandle == null)   return false;
  if (destIndex < 0 || destIndex > slotHandle.getCount())   return false;
  if (destIndex == 0)   return true;
  RowHandle destHandle=(RowHandle)slotHandle.get(destIndex - 1);
  if (!containsRowSpan(destHandle) && isRectangleArea(destHandle))   return true;
  return false;
}","/** 
 * Checks whether the insert operation can be done with the given slot id , group id , index and the operation flag.
 * @param copiedRow source copied table row
 * @param parameters parameters needed by insert operation.
 * @return <code>true</code> indicates the insert operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsert(RowOperationParameters parameters){
  if (adapter.hasParent())   return false;
  int destIndex=parameters.getDestIndex();
  SlotHandle slotHandle=getSlotHandle(parameters);
  if (slotHandle == null)   return false;
  if (destIndex < 0 || destIndex > slotHandle.getCount())   return false;
  if (destIndex == 0)   return true;
  RowHandle destHandle=(RowHandle)slotHandle.get(destIndex - 1);
  if (!containsRowSpan(destHandle) && isRectangleArea(destHandle))   return true;
  return false;
}",0.9740494870247436
77468,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param clonedRow the copied table row.
 * @param parameters parameters needed by insert operation.
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsertAndPaste(TableRow clonedRow,RowOperationParameters parameters){
  int destIndex=parameters.getDestIndex();
  int desColumnCount=adapter.getColumnCount();
  SlotHandle slotHandle=getSlotHandle(parameters);
  if (slotHandle == null)   return false;
  if (destIndex < 0 || destIndex >= slotHandle.getCount())   return false;
  int count=adapter.computeRowCount(clonedRow);
  if (count != desColumnCount)   return false;
  RowHandle destHandle=(RowHandle)slotHandle.get(destIndex);
  if (isRectangleArea(destHandle) && !containsRowSpan(destHandle))   return true;
  return false;
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param clonedRow the copied table row.
 * @param parameters parameters needed by insert operation.
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsertAndPaste(TableRow clonedRow,RowOperationParameters parameters){
  if (adapter.hasParent())   return false;
  int destIndex=parameters.getDestIndex();
  int desColumnCount=adapter.getColumnCount();
  SlotHandle slotHandle=getSlotHandle(parameters);
  if (slotHandle == null)   return false;
  if (destIndex < 0 || destIndex >= slotHandle.getCount())   return false;
  int count=adapter.computeRowCount(clonedRow);
  if (count != desColumnCount)   return false;
  RowHandle destHandle=(RowHandle)slotHandle.get(destIndex);
  if (isRectangleArea(destHandle) && !containsRowSpan(destHandle))   return true;
  return false;
}",0.9778007227671656
77469,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param clonedRow the copied table row.
 * @param parameters parameters needed by insert operation.
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canPaste(TableRow clonedRow,RowOperationParameters parameters){
  int destIndex=parameters.getDestIndex();
  int desColumnCount=adapter.getColumnCount();
  SlotHandle slotHandle=getSlotHandle(parameters);
  if (slotHandle == null)   return false;
  if (destIndex < 0 || destIndex >= slotHandle.getCount())   return false;
  RowHandle destHandle=(RowHandle)slotHandle.get(destIndex);
  int count=adapter.computeRowCount(clonedRow);
  if ((count == desColumnCount) && isRectangleArea(destHandle) && !containsRowSpan(destHandle))   return true;
  return false;
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param clonedRow the copied table row.
 * @param parameters parameters needed by insert operation.
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canPaste(TableRow clonedRow,RowOperationParameters parameters){
  if (adapter.hasParent())   return false;
  int destIndex=parameters.getDestIndex();
  int desColumnCount=adapter.getColumnCount();
  SlotHandle slotHandle=getSlotHandle(parameters);
  if (slotHandle == null)   return false;
  if (destIndex < 0 || destIndex >= slotHandle.getCount())   return false;
  RowHandle destHandle=(RowHandle)slotHandle.get(destIndex);
  int count=adapter.computeRowCount(clonedRow);
  if ((count == desColumnCount) && isRectangleArea(destHandle) && !containsRowSpan(destHandle))   return true;
  return false;
}",0.9771640998406798
77470,"/** 
 * Checks whether the shift operation can be done with the given parameters
 * @param parameters parameters needed by insert operation.
 * @return <code>true</code> indicates the shift operation can be done.Otherwise <code>false</code>.
 */
protected boolean canShift(RowOperationParameters parameters){
  int destIndex=parameters.getDestIndex();
  int sourceIndex=parameters.getSourceIndex();
  SlotHandle slotHandle=getSlotHandle(parameters);
  if (slotHandle == null)   return false;
  if (sourceIndex < 0 || sourceIndex >= slotHandle.getCount())   return false;
  if (destIndex < 0 || destIndex > slotHandle.getCount())   return false;
  if (sourceIndex == destIndex)   return false;
  RowHandle sourceHandle=(RowHandle)slotHandle.get(sourceIndex);
  if (destIndex > 0)   --destIndex;
  RowHandle destHandle=(RowHandle)slotHandle.get(destIndex);
  if (isRectangleArea(sourceHandle) && isRectangleArea(destHandle) && !containsRowSpan(sourceHandle)&& !containsRowSpan(destHandle)) {
    return true;
  }
  return false;
}","/** 
 * Checks whether the shift operation can be done with the given parameters
 * @param parameters parameters needed by insert operation.
 * @return <code>true</code> indicates the shift operation can be done.Otherwise <code>false</code>.
 */
protected boolean canShift(RowOperationParameters parameters){
  if (adapter.hasParent())   return false;
  int destIndex=parameters.getDestIndex();
  int sourceIndex=parameters.getSourceIndex();
  SlotHandle slotHandle=getSlotHandle(parameters);
  if (slotHandle == null)   return false;
  if (sourceIndex < 0 || sourceIndex >= slotHandle.getCount())   return false;
  if (destIndex < 0 || destIndex > slotHandle.getCount())   return false;
  if (sourceIndex == destIndex)   return false;
  RowHandle sourceHandle=(RowHandle)slotHandle.get(sourceIndex);
  if (destIndex > 0)   --destIndex;
  RowHandle destHandle=(RowHandle)slotHandle.get(destIndex);
  if (isRectangleArea(sourceHandle) && isRectangleArea(destHandle) && !containsRowSpan(sourceHandle)&& !containsRowSpan(destHandle)) {
    return true;
  }
  return false;
}",0.9795140543115768
77471,"protected void contentChange(Map info){
  int intValue=((Integer)info.get(GraphicsViewModelEventProcessor.CONTENT_EVENTTYPE)).intValue();
  if (intValue == ContentEvent.REMOVE) {
    List list=(List)info.get(GraphicsViewModelEventProcessor.EVENT_CONTENTS);
    int size=list.size();
    for (int i=0; i < size; i++) {
      Object obj=list.get(i);
      if (obj instanceof DesignElementHandle) {
        getListHandleAdapt().remove(obj);
      }
    }
  }
  super.contentChange(info);
}","protected void contentChange(Map info){
  Object action=info.get(GraphicsViewModelEventProcessor.CONTENT_EVENTTYPE);
  if (action instanceof Integer) {
    int intValue=((Integer)action).intValue();
    if (intValue == ContentEvent.REMOVE) {
      List list=(List)info.get(GraphicsViewModelEventProcessor.EVENT_CONTENTS);
      int size=list.size();
      for (int i=0; i < size; i++) {
        Object obj=list.get(i);
        if (obj instanceof DesignElementHandle) {
          getListHandleAdapt().remove(obj);
        }
      }
    }
  }
  super.contentChange(info);
}",0.8647114474929044
77472,"public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  String tagName;
  String selectHandleTag=null;
  String url=validate(foreign.getHyperlinkAction());
  if (url != null) {
    if (enableMetadata) {
      selectHandleTag=HTMLTags.TAG_SPAN;
      writer.openTag(selectHandleTag);
      writer.attribute(HTMLTags.ATTR_CLASS,""String_Node_Str"");
      setActiveIDTypeIID(foreign);
      setBookmark(selectHandleTag,foreign.getBookmark());
    }
    tagName=HTMLTags.TAG_A;
    outputAction(foreign.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (enableMetadata) {
      selectHandleTag=getTagByType(display,DISPLAY_FLAG_ALL);
      writer.openTag(selectHandleTag);
      writer.attribute(HTMLTags.ATTR_CLASS,""String_Node_Str"");
      setActiveIDTypeIID(foreign);
      setBookmark(selectHandleTag,foreign.getBookmark());
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(foreign.getStyleClass());
  if (!enableMetadata) {
    outputBookmark(foreign,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(foreign,styleBuffer,false);
  Object rawValue=foreign.getRawValue();
  String rawType=foreign.getRawType();
  boolean isHtml=IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  String text=rawValue == null ? null : rawValue.toString();
  if (isHtml) {
    Document doc=new TextParser().parse(text,TextParser.TEXT_TYPE_HTML);
    ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
    HTMLProcessor htmlProcessor=new HTMLProcessor(design);
    HashMap styleMap=new HashMap();
    Element body=null;
    if (doc != null) {
      NodeList bodys=doc.getElementsByTagName(""String_Node_Str"");
      if (bodys.getLength() > 0) {
        body=(Element)bodys.item(0);
      }
    }
    if (body != null) {
      htmlProcessor.execute(body,styleMap);
      processNodes(body,styleMap);
    }
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    writer.closeTag(selectHandleTag);
  }
}","public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  resizeTemplateElement(foreign);
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  String tagName;
  String selectHandleTag=null;
  String url=validate(foreign.getHyperlinkAction());
  if (url != null) {
    if (enableMetadata) {
      selectHandleTag=HTMLTags.TAG_SPAN;
      writer.openTag(selectHandleTag);
      writer.attribute(HTMLTags.ATTR_CLASS,""String_Node_Str"");
      setActiveIDTypeIID(foreign);
      setBookmark(selectHandleTag,foreign.getBookmark());
    }
    tagName=HTMLTags.TAG_A;
    outputAction(foreign.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (enableMetadata) {
      selectHandleTag=getTagByType(display,DISPLAY_FLAG_ALL);
      writer.openTag(selectHandleTag);
      writer.attribute(HTMLTags.ATTR_CLASS,""String_Node_Str"");
      setActiveIDTypeIID(foreign);
      setBookmark(selectHandleTag,foreign.getBookmark());
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(foreign.getStyleClass());
  if (!enableMetadata) {
    outputBookmark(foreign,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  if (isTalbeTemplateElement(foreign)) {
    mergedStyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_FONT_FAMILY,IStyle.SANS_SERIF_VALUE);
  }
  String textAlign=foreign.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(foreign,styleBuffer,false);
  String rawType=foreign.getRawType();
  boolean isHtml=IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  if (isHtml) {
    String verticalAlign=mergedStyle.getVerticalAlign();
    if (!""String_Node_Str"".equals(verticalAlign) && height != null) {
      writer.openTag(HTMLTags.TAG_TABLE);
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
      writer.openTag(HTMLTags.TAG_TR);
      writer.openTag(HTMLTags.TAG_TD);
      StringBuffer textStyleBuffer=new StringBuffer();
      textStyleBuffer.append(""String_Node_Str"");
      textStyleBuffer.append(verticalAlign);
      textStyleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
      outputHtmlText(foreign);
      writer.closeTag(HTMLTags.TAG_TD);
      writer.closeTag(HTMLTags.TAG_TR);
      writer.closeTag(HTMLTags.TAG_TABLE);
    }
 else {
      outputHtmlText(foreign);
    }
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    writer.closeTag(selectHandleTag);
  }
}",0.6345185906803053
77473,"public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  resizeTemplateElement(text);
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  String selectHandleTag=null;
  String url=validate(text.getHyperlinkAction());
  boolean needMetadata=enableMetadata && (text.getGenerateBy() instanceof LabelItemDesign || text.getGenerateBy() instanceof TemplateDesign);
  if (url != null) {
    if (needMetadata) {
      selectHandleTag=HTMLTags.TAG_SPAN;
      writer.openTag(selectHandleTag);
      writer.attribute(HTMLTags.ATTR_CLASS,""String_Node_Str"");
      setActiveIDTypeIID(text);
      setBookmark(selectHandleTag,text.getBookmark());
    }
    tagName=HTMLTags.TAG_A;
    outputAction(text.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (needMetadata) {
      selectHandleTag=getTagByType(display,DISPLAY_FLAG_ALL);
      writer.openTag(selectHandleTag);
      writer.attribute(HTMLTags.ATTR_CLASS,""String_Node_Str"");
      setActiveIDTypeIID(text);
      setBookmark(selectHandleTag,text.getBookmark());
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  if (!needMetadata) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  if (isTalbeTemplateElement(text)) {
    mergedStyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_FONT_FAMILY,IStyle.SANS_SERIF_VALUE);
  }
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  handleStyle(text,styleBuffer,false);
  String verticalAlign=mergedStyle.getVerticalAlign();
  if (!""String_Node_Str"".equals(verticalAlign) && height != null) {
    writer.openTag(HTMLTags.TAG_TABLE);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(verticalAlign);
    textStyleBuffer.append(""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
 else {
    writer.text(textValue);
  }
  writer.closeTag(tagName);
  if (needMetadata) {
    writer.closeTag(selectHandleTag);
  }
}","public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  String selectHandleTag=null;
  String url=validate(text.getHyperlinkAction());
  boolean needMetadata=enableMetadata && (text.getGenerateBy() instanceof LabelItemDesign || text.getGenerateBy() instanceof TemplateDesign);
  if (url != null) {
    if (needMetadata) {
      selectHandleTag=HTMLTags.TAG_SPAN;
      writer.openTag(selectHandleTag);
      writer.attribute(HTMLTags.ATTR_CLASS,""String_Node_Str"");
      setActiveIDTypeIID(text);
      setBookmark(selectHandleTag,text.getBookmark());
    }
    tagName=HTMLTags.TAG_A;
    outputAction(text.getHyperlinkAction(),url);
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    if (needMetadata) {
      selectHandleTag=getTagByType(display,DISPLAY_FLAG_ALL);
      writer.openTag(selectHandleTag);
      writer.attribute(HTMLTags.ATTR_CLASS,""String_Node_Str"");
      setActiveIDTypeIID(text);
      setBookmark(selectHandleTag,text.getBookmark());
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  if (!needMetadata) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  handleStyle(text,styleBuffer,false);
  String verticalAlign=mergedStyle.getVerticalAlign();
  if (!""String_Node_Str"".equals(verticalAlign) && height != null) {
    writer.openTag(HTMLTags.TAG_TABLE);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(verticalAlign);
    textStyleBuffer.append(""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
 else {
    writer.text(textValue);
  }
  writer.closeTag(tagName);
  if (needMetadata) {
    writer.closeTag(selectHandleTag);
  }
}",0.9301578024547048
77474,"protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (rawType != null) {
    IOUtil.writeInt(out,FIELD_ROW_TYPE);
    IOUtil.writeString(out,rawType);
  }
  if (rawValue != null) {
    IOUtil.writeInt(out,FIELD_ROWVALUE);
    IOUtil.writeObject(out,rawValue);
  }
  if (altText != null) {
    IOUtil.writeInt(out,FIELD_ALTTEXT);
    IOUtil.writeString(out,altText);
  }
  if (altTextKey != null) {
    IOUtil.writeInt(out,FIELD_ALTTEXTKEY);
    IOUtil.writeString(out,altTextKey);
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (rawType != null) {
    IOUtil.writeInt(out,FIELD_ROW_TYPE);
    IOUtil.writeString(out,rawType);
  }
  if (rawValue != null) {
    IOUtil.writeInt(out,FIELD_ROWVALUE);
    IOUtil.writeObject(out,rawValue);
  }
  if (altText != null) {
    IOUtil.writeInt(out,FIELD_ALTTEXT);
    IOUtil.writeString(out,altText);
  }
  if (altTextKey != null) {
    IOUtil.writeInt(out,FIELD_ALTTEXTKEY);
    IOUtil.writeString(out,altTextKey);
  }
  if (rawKey != null) {
    IOUtil.writeInt(out,FIELD_RAWKEY);
    IOUtil.writeString(out,rawKey);
  }
}",0.9120409906063194
77475,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_ROW_TYPE:
    rawType=IOUtil.readString(in);
  break;
case FIELD_ROWVALUE:
rawValue=IOUtil.readObject(in);
break;
case FIELD_ALTTEXT:
altText=IOUtil.readString(in);
break;
case FIELD_ALTTEXTKEY:
altTextKey=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in);
}
}","protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_ROW_TYPE:
    rawType=IOUtil.readString(in);
  break;
case FIELD_ROWVALUE:
rawValue=IOUtil.readObject(in);
break;
case FIELD_ALTTEXT:
altText=IOUtil.readString(in);
break;
case FIELD_ALTTEXTKEY:
altTextKey=IOUtil.readString(in);
break;
case FIELD_RAWKEY:
rawKey=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in);
}
}",0.935483870967742
77476,"/** 
 * execute a template and output an text item content. The execution process is: <li> create an text <li> push it into the stack <li> intialize the content <li> call emitter to start the text <li> popup the text.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExcutor#execute(IContentEmitter)
 */
public IContent execute(){
  TemplateDesign templateDesign=(TemplateDesign)design;
  ILabelContent textContent=report.createLabelContent();
  setContent(textContent);
  restoreResultSet();
  context.registerOnPageBreak(content);
  IStyle style=textContent.getStyle();
  style.setProperty(IStyle.STYLE_BORDER_TOP_COLOR,IStyle.GRAY_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.SOLID_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH,IStyle.THIN_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR,IStyle.GRAY_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE,IStyle.SOLID_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH,IStyle.THIN_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_LEFT_COLOR,IStyle.GRAY_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.SOLID_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_LEFT_WIDTH,IStyle.THIN_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_COLOR,IStyle.GRAY_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.SOLID_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH,IStyle.THIN_VALUE);
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.MIDDLE_VALUE);
  initializeContent(templateDesign,textContent);
  textContent.setLabelText(templateDesign.getPromptText());
  textContent.setLabelKey(templateDesign.getPromptTextKey());
  processVisibility(templateDesign,textContent);
  if (emitter != null) {
    emitter.startLabel(textContent);
  }
  return textContent;
}","/** 
 * execute a template and output an text item content. The execution process is: <li> create an text <li> push it into the stack <li> intialize the content <li> call emitter to start the text <li> popup the text.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExcutor#execute(IContentEmitter)
 */
public IContent execute(){
  TemplateDesign templateDesign=(TemplateDesign)design;
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  textContent.setRawType(IForeignContent.HTML_TYPE);
  IStyle style=textContent.getStyle();
  style.setProperty(IStyle.STYLE_BORDER_TOP_COLOR,IStyle.GRAY_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.SOLID_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH,IStyle.THIN_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR,IStyle.GRAY_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE,IStyle.SOLID_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH,IStyle.THIN_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_LEFT_COLOR,IStyle.GRAY_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.SOLID_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_LEFT_WIDTH,IStyle.THIN_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_COLOR,IStyle.GRAY_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.SOLID_VALUE);
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH,IStyle.THIN_VALUE);
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.MIDDLE_VALUE);
  initializeContent(templateDesign,textContent);
  textContent.setRawValue(templateDesign.getPromptText());
  textContent.setRawKey(templateDesign.getPromptTextKey());
  processVisibility(templateDesign,textContent);
  if (emitter != null) {
    emitter.startForeign(textContent);
  }
  return textContent;
}",0.9358090185676392
77477,"/** 
 * handle the foreign content object. Foreign content can be created by following design element: <li> Text(HTML). It will create a TEMPLATE_TYPE foreign object. <li> MultiLine(HTML). It will create a HTML_TYPE forign object <li> MultiLine(PlainText).It will create a TEXT_TYPE foreign object <li> Extended item. It will create a TEXT_TYPE/HTML_TYPE/IMAGE_TYPE/VALUE_TYPE foreign object.
 */
public Object visitForeign(IForeignContent foreignContent,Object value){
  IReportContent reportContent=getReportContent();
  String rawFormat=foreignContent.getRawType();
  Object rawValue=foreignContent.getRawValue();
  if (IForeignContent.TEMPLATE_TYPE.equals(rawFormat)) {
    TextItemScriptExecutor.handleOnRender(foreignContent,context);
    processTemplateContent(foreignContent);
    return foreignContent;
  }
  if (IForeignContent.EXTERNAL_TYPE.equals(rawFormat)) {
    return processExtendedContent(foreignContent);
  }
  if (IForeignContent.IMAGE_TYPE.equals(rawFormat)) {
    if (rawValue instanceof IImageContent) {
      IImageContent image=(IImageContent)rawValue;
      processImage(image);
      return image;
    }
    if (rawValue instanceof byte[]) {
      IImageContent imageContent=reportContent.createImageContent(foreignContent);
      imageContent.setImageSource(IImageContent.IMAGE_EXPRESSION);
      imageContent.setData((byte[])rawValue);
      processImage(imageContent);
      return imageContent;
    }
  }
  if (IForeignContent.TEXT_TYPE.equals(rawFormat)) {
    TextItemScriptExecutor.handleOnRender(foreignContent,context);
    ITextContent textContent=reportContent.createDataContent(foreignContent);
    textContent.setText(rawValue == null ? ""String_Node_Str"" : rawValue.toString());
    return textContent;
  }
  if (IForeignContent.VALUE_TYPE.equals(rawFormat)) {
    DynamicTextScriptExecutor.handleOnRender(foreignContent,context);
    IDataContent dataContent=reportContent.createDataContent(foreignContent);
    dataContent.setValue(rawValue);
    processData(dataContent);
    return dataContent;
  }
  return foreignContent;
}","/** 
 * handle the foreign content object. Foreign content can be created by following design element: <li> Text(HTML). It will create a TEMPLATE_TYPE foreign object. <li> MultiLine(HTML). It will create a HTML_TYPE forign object <li> MultiLine(PlainText).It will create a TEXT_TYPE foreign object <li> Extended item. It will create a TEXT_TYPE/HTML_TYPE/IMAGE_TYPE/VALUE_TYPE foreign object.
 */
public Object visitForeign(IForeignContent foreignContent,Object value){
  IReportContent reportContent=getReportContent();
  String rawFormat=foreignContent.getRawType();
  Object rawValue=foreignContent.getRawValue();
  if (IForeignContent.TEMPLATE_TYPE.equals(rawFormat)) {
    TextItemScriptExecutor.handleOnRender(foreignContent,context);
    processTemplateContent(foreignContent);
    return foreignContent;
  }
  if (IForeignContent.EXTERNAL_TYPE.equals(rawFormat)) {
    return processExtendedContent(foreignContent);
  }
  if (IForeignContent.IMAGE_TYPE.equals(rawFormat)) {
    if (rawValue instanceof IImageContent) {
      IImageContent image=(IImageContent)rawValue;
      processImage(image);
      return image;
    }
    if (rawValue instanceof byte[]) {
      IImageContent imageContent=reportContent.createImageContent(foreignContent);
      imageContent.setImageSource(IImageContent.IMAGE_EXPRESSION);
      imageContent.setData((byte[])rawValue);
      processImage(imageContent);
      return imageContent;
    }
  }
  if (IForeignContent.TEXT_TYPE.equals(rawFormat)) {
    TextItemScriptExecutor.handleOnRender(foreignContent,context);
    ITextContent textContent=reportContent.createDataContent(foreignContent);
    textContent.setText(rawValue == null ? ""String_Node_Str"" : rawValue.toString());
    return textContent;
  }
  if (IForeignContent.HTML_TYPE.equals(rawFormat)) {
    TextItemScriptExecutor.handleOnRender(foreignContent,context);
    String htmlText=(String)foreignContent.getRawValue();
    String text=localize(foreignContent,foreignContent.getRawKey(),htmlText);
    foreignContent.setRawValue(text);
    return foreignContent;
  }
  if (IForeignContent.VALUE_TYPE.equals(rawFormat)) {
    DynamicTextScriptExecutor.handleOnRender(foreignContent,context);
    IDataContent dataContent=reportContent.createDataContent(foreignContent);
    dataContent.setValue(rawValue);
    processData(dataContent);
    return dataContent;
  }
  return foreignContent;
}",0.9271790275599372
77478,"private void doPreview(String pattern){
  String type=getSelectedDataType();
  String formatStr=""String_Node_Str"";
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    formatStr=new StringFormatter(pattern,ULocale.getDefault()).format(DEFAULT_PREVIEW_STRING);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    formatStr=new DateFormatter(pattern).format(new Date());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type) || DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    formatStr=new NumberFormatter(pattern).format(DEFAULT_PREVIEW_NUMBER);
  }
  previewLable.setText(formatStr);
}","private void doPreview(String pattern){
  String type=getSelectedDataType();
  String formatStr=""String_Node_Str"";
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    formatStr=new StringFormatter(pattern,ULocale.getDefault()).format(DEFAULT_PREVIEW_STRING);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    formatStr=new DateFormatter(pattern).format(new Date());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    formatStr=new NumberFormatter(pattern).format(DEFAULT_PREVIEW_NUMBER);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    formatStr=new NumberFormatter(pattern).format(DEFAULT_PREVIEW_INTEGER_NUMBER);
  }
  previewLable.setText(formatStr);
}",0.8594059405940594
77479,"private void updateFormatField(){
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(type);
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (defaultValue != null) {
      previewString=format(defaultValue);
    }
 else {
      if (formatCategroy == DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM) {
        displayFormat+=""String_Node_Str"" + formatPattern;
      }
      if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
        previewString=new DateFormatter(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM.equals(formatCategroy) ? formatPattern : formatCategroy,ULocale.getDefault()).format(new Date());
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        previewString=new StringFormatter(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(Messages.getString(""String_Node_Str""));
      }
 else {
        previewString=new NumberFormatter(formatCategroy != DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(123456789.01234);
      }
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(convertNullString(previewString));
  changeFormat.setEnabled(choiceSet != null);
}","private void updateFormatField(){
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(type);
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (defaultValue != null) {
      previewString=format(defaultValue);
    }
 else {
      if (formatCategroy == DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM) {
        displayFormat+=""String_Node_Str"" + formatPattern;
      }
      if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
        previewString=new DateFormatter(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM.equals(formatCategroy) ? formatPattern : formatCategroy,ULocale.getDefault()).format(new Date());
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        previewString=new StringFormatter(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(Messages.getString(""String_Node_Str""));
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER)) {
        previewString=new NumberFormatter(formatCategroy != DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(1234567890);
      }
 else {
        previewString=new NumberFormatter(formatCategroy != DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(123456789.01234);
      }
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(convertNullString(previewString));
  changeFormat.setEnabled(choiceSet != null);
}",0.9314997405293202
77480,"private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  final boolean isRightToLeft=rtc.isRightToLeft();
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Insets ins=bl.getInsets();
  Bounds bo=boFull.adjustedInstance(ins);
  Legend lg=cm.getLegend();
  Plot p=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  Size szTitle=(!tb.isVisible()) ? SizeImpl.create(0,0) : tb.getPreferredSize(xs,cm,rtc);
  Bounds boPlot=p.getBounds();
  Bounds boLegend=lg.getBounds();
  Bounds boTitle=tb.getBounds();
  Anchor titleAnchor=tb.getAnchor();
  boTitle.setLeft(bo.getLeft());
  boTitle.setWidth(bo.getWidth());
  boTitle.setTop(bo.getTop());
  boTitle.setHeight(szTitle.getHeight());
  Size szLegend=(!lg.isVisible()) ? SizeImpl.create(0,0) : lg.getPreferredSize(xs,cm,rtc);
  if (!lg.isSetPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,Messages.getString(""String_Node_Str"",ULocale.getDefault()));
  }
  double plotWidthHint=-1, plotHeightHint=-1;
  if (p.isSetWidthHint()) {
    plotWidthHint=p.getWidthHint();
  }
  if (p.isSetHeightHint()) {
    plotHeightHint=p.getHeightHint();
  }
  double plotLeft, plotTop;
  Position po=lg.getPosition();
  if (isRightToLeft) {
    if (po == Position.RIGHT_LITERAL) {
      po=Position.LEFT_LITERAL;
    }
 else     if (po == Position.LEFT_LITERAL) {
      po=Position.RIGHT_LITERAL;
    }
  }
switch (po.getValue()) {
case Position.ABOVE:
case Position.BELOW:
    if (szLegend.getHeight() > bo.getHeight() / 3) {
      szLegend.setHeight(bo.getHeight() / 3);
    }
  break;
case Position.LEFT:
case Position.RIGHT:
case Position.OUTSIDE:
if (szLegend.getWidth() > bo.getWidth() / 3) {
  szLegend.setWidth(bo.getWidth() / 3);
}
break;
default :
break;
}
Anchor anchor=p.getAnchor();
if (isRightToLeft) {
switch (anchor.getValue()) {
case Anchor.EAST:
anchor=Anchor.WEST_LITERAL;
break;
case Anchor.NORTH_EAST:
anchor=Anchor.NORTH_WEST_LITERAL;
break;
case Anchor.SOUTH_EAST:
anchor=Anchor.SOUTH_WEST_LITERAL;
break;
case Anchor.WEST:
anchor=Anchor.EAST_LITERAL;
break;
case Anchor.NORTH_WEST:
anchor=Anchor.NORTH_EAST_LITERAL;
break;
case Anchor.SOUTH_WEST:
anchor=Anchor.SOUTH_EAST_LITERAL;
break;
}
}
switch (po.getValue()) {
case Position.INSIDE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.set(0,0,szLegend.getWidth(),szLegend.getHeight());
break;
case Position.RIGHT:
case Position.OUTSIDE:
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft() + bo.getWidth() - szLegend.getWidth());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(boTitle.getLeft() - szLegend.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.LEFT:
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
plotLeft=bo.getLeft() + szLegend.getWidth();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=boLegend.getLeft() + szLegend.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.ABOVE:
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(szLegend.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
plotLeft=bo.getLeft();
plotTop=bo.getTop() + boLegend.getHeight();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + boLegend.getHeight() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.BELOW:
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(szLegend.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boTitle.getHeight() - boLegend.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
boLegend.setTop(bo.getTop() + bo.getHeight() - szLegend.getHeight());
boLegend.setLeft(bo.getLeft());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boLegend.setTop(boTitle.getTop() - szLegend.getHeight());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
}
for (Iterator itr=bl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
if (cbl != lg && cbl != p && cbl != tb) {
layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
}
}
for (Iterator itr=lg.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
}
for (Iterator itr=tb.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
}
for (Iterator itr=p.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,p.getBounds(),p.getInsets(),cbl,rtc);
}
}","private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  final boolean isRightToLeft=rtc.isRightToLeft();
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Insets ins=bl.getInsets();
  Bounds bo=boFull.adjustedInstance(ins);
  Legend lg=cm.getLegend();
  Plot p=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  Size szTitle=(!tb.isVisible()) ? SizeImpl.create(0,0) : tb.getPreferredSize(xs,cm,rtc);
  Bounds boPlot=p.getBounds();
  Bounds boLegend=lg.getBounds();
  Bounds boTitle=tb.getBounds();
  Anchor titleAnchor=tb.getAnchor();
  boTitle.setLeft(bo.getLeft());
  boTitle.setWidth(bo.getWidth());
  boTitle.setTop(bo.getTop());
  boTitle.setHeight(szTitle.getHeight());
  Size szLegend=(!lg.isVisible()) ? SizeImpl.create(0,0) : lg.getPreferredSize(xs,cm,rtc);
  if (!lg.isSetPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,Messages.getString(""String_Node_Str"",ULocale.getDefault()));
  }
  double plotWidthHint=-1, plotHeightHint=-1;
  if (p.isSetWidthHint()) {
    plotWidthHint=p.getWidthHint();
  }
  if (p.isSetHeightHint()) {
    plotHeightHint=p.getHeightHint();
  }
  double plotLeft, plotTop;
  Position po=lg.getPosition();
  if (isRightToLeft) {
    if (po == Position.RIGHT_LITERAL) {
      po=Position.LEFT_LITERAL;
    }
 else     if (po == Position.LEFT_LITERAL) {
      po=Position.RIGHT_LITERAL;
    }
  }
  final double renderLegendHeight=szLegend.getHeight();
  final double renderLegendWidth=szLegend.getWidth();
switch (po.getValue()) {
case Position.ABOVE:
case Position.BELOW:
    if (szLegend.getHeight() > bo.getHeight() / 3) {
      szLegend.setHeight(bo.getHeight() / 3);
    }
  break;
case Position.LEFT:
case Position.RIGHT:
case Position.OUTSIDE:
if (szLegend.getWidth() > bo.getWidth() / 3) {
  szLegend.setWidth(bo.getWidth() / 3);
}
break;
default :
break;
}
Anchor anchor=p.getAnchor();
if (isRightToLeft) {
switch (anchor.getValue()) {
case Anchor.EAST:
anchor=Anchor.WEST_LITERAL;
break;
case Anchor.NORTH_EAST:
anchor=Anchor.NORTH_WEST_LITERAL;
break;
case Anchor.SOUTH_EAST:
anchor=Anchor.SOUTH_WEST_LITERAL;
break;
case Anchor.WEST:
anchor=Anchor.EAST_LITERAL;
break;
case Anchor.NORTH_WEST:
anchor=Anchor.NORTH_EAST_LITERAL;
break;
case Anchor.SOUTH_WEST:
anchor=Anchor.SOUTH_EAST_LITERAL;
break;
}
}
switch (po.getValue()) {
case Position.INSIDE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.set(0,0,szLegend.getWidth(),szLegend.getHeight());
break;
case Position.RIGHT:
case Position.OUTSIDE:
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft() + bo.getWidth() - szLegend.getWidth());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(boTitle.getLeft() - szLegend.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.LEFT:
boLegend.setWidth(renderLegendWidth);
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft() + szLegend.getWidth() - renderLegendWidth);
plotLeft=bo.getLeft() + szLegend.getWidth();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
boLegend.setLeft(bo.getLeft() + szTitle.getWidth() + szLegend.getWidth() - renderLegendWidth);
plotLeft=bo.getLeft() + szTitle.getWidth() + szLegend.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.ABOVE:
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(renderLegendHeight);
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
boLegend.setTop(bo.getTop() + szLegend.getHeight() - renderLegendHeight);
boLegend.setLeft(bo.getLeft());
plotLeft=bo.getLeft();
plotTop=bo.getTop() + szLegend.getHeight();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szLegend.getHeight() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight() + szLegend.getHeight() - renderLegendHeight);
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.BELOW:
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(szLegend.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boTitle.getHeight() - boLegend.getHeight()) : plotHeightHint);
switch (titleAnchor.getValue()) {
case Anchor.EAST:
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setWidth(szTitle.getWidth());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
break;
}
boLegend.setTop(bo.getTop() + bo.getHeight() - szLegend.getHeight());
boLegend.setLeft(bo.getLeft());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.WEST:
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.EAST:
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boLegend.setTop(boTitle.getTop() - szLegend.getHeight());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (anchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
}
for (Iterator itr=bl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
if (cbl != lg && cbl != p && cbl != tb) {
layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
}
}
for (Iterator itr=lg.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
}
for (Iterator itr=tb.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
}
for (Iterator itr=p.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,p.getBounds(),p.getInsets(),cbl,rtc);
}
}",0.9808529919027156
77481,"/** 
 * Renders the legend block based on the legend rendering rules.
 * @param ipr
 * @param lg
 * @param htRenderers
 * @throws ChartException
 */
public void renderLegend(IPrimitiveRenderer ipr,Legend lg,Map htRenderers) throws ChartException {
  if (!lg.isVisible()) {
    return;
  }
  renderBlock(ipr,lg,StructureSource.createLegend(lg));
  final IDisplayServer xs=getDevice().getDisplayServer();
  final double dScale=getDeviceScale();
  Bounds bo=lg.getBounds().scaledInstance(dScale);
  Size sz=null;
  double dX, dY;
  if (lg.getPosition() != Position.INSIDE_LITERAL) {
    try {
      sz=lg.getPreferredSize(xs,cm,rtc);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    sz.scale(dScale);
    if (sz.getWidth() > bo.getWidth()) {
      sz.setWidth(bo.getWidth());
    }
    if (sz.getHeight() > bo.getHeight()) {
      sz.setHeight(bo.getHeight());
    }
    dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
    dY=0;
    if (lg.isSetAnchor()) {
      int iAnchor=lg.getAnchor().getValue();
      if (isRightToLeft()) {
        if (iAnchor == Anchor.EAST) {
          iAnchor=Anchor.WEST;
        }
 else         if (iAnchor == Anchor.NORTH_EAST) {
          iAnchor=Anchor.NORTH_WEST;
        }
 else         if (iAnchor == Anchor.SOUTH_EAST) {
          iAnchor=Anchor.SOUTH_WEST;
        }
 else         if (iAnchor == Anchor.WEST) {
          iAnchor=Anchor.EAST;
        }
 else         if (iAnchor == Anchor.NORTH_WEST) {
          iAnchor=Anchor.NORTH_EAST;
        }
 else         if (iAnchor == Anchor.SOUTH_WEST) {
          iAnchor=Anchor.SOUTH_EAST;
        }
      }
switch (iAnchor) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
        dY=bo.getTop();
      break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
    dY=bo.getTop() + bo.getHeight() - sz.getHeight();
  break;
default :
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
break;
}
switch (iAnchor) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
dX=bo.getLeft();
break;
case Anchor.EAST:
case Anchor.SOUTH_EAST:
dX=bo.getLeft() + bo.getWidth() - sz.getWidth();
break;
default :
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
break;
}
}
 else {
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
}
}
 else {
dX=bo.getLeft();
dY=bo.getTop();
sz=SizeImpl.create(bo.getWidth(),bo.getHeight());
}
final LegendLayoutHints lilh=rtc.getLegendLayoutHints();
Label lgTitle=lg.getTitle();
double lgTitleWidth=0, lgTitleHeight=0;
double yOffset=0, xOffset=0, wOffset=0, hOffset=0;
final boolean bRenderLegendTitle=lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible();
int iTitlePos=Position.ABOVE;
if (bRenderLegendTitle) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
if (lilh != null) {
Size titleSize=lilh.getTitleSize();
lgTitleWidth=titleSize.getWidth();
lgTitleHeight=titleSize.getHeight();
}
 else {
BoundingBox bb=null;
try {
bb=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
}
lgTitleWidth=bb.getWidth();
lgTitleHeight=bb.getHeight();
}
iTitlePos=lg.getTitlePosition().getValue();
if (isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
switch (iTitlePos) {
case Position.ABOVE:
yOffset=lgTitleHeight;
hOffset=-yOffset;
break;
case Position.BELOW:
hOffset=-lgTitleHeight;
break;
case Position.LEFT:
xOffset=lgTitleWidth;
wOffset=-xOffset;
break;
case Position.RIGHT:
wOffset=-lgTitleWidth;
break;
}
}
final ClientArea ca=lg.getClientArea();
final Insets lgIns=lg.getInsets().scaledInstance(dScale);
LineAttributes lia=ca.getOutline();
bo=BoundsImpl.create(dX,dY,sz.getWidth(),sz.getHeight());
bo=bo.adjustedInstance(lgIns);
dX=bo.getLeft();
dY=bo.getTop();
bo.delta(xOffset,yOffset,wOffset,hOffset);
dX=bo.getLeft();
dY=bo.getTop();
final double dBaseX=dX;
final double dBaseY=dY;
final RectangleRenderEvent rre=(RectangleRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
if (ca.getShadowColor() != null) {
rre.setBounds(bo.translateInstance(3,3));
rre.setBackground(ca.getShadowColor());
ipr.fillRectangle(rre);
}
rre.setBounds(bo);
rre.setOutline(lia);
rre.setBackground(ca.getBackground());
ipr.fillRectangle(rre);
ipr.drawRectangle(rre);
lia=LineAttributesImpl.copyInstance(lia);
lia.setVisible(true);
LineAttributes liSep=lg.getSeparator() == null ? lia : lg.getSeparator();
final SeriesDefinition[] seda=cm.getSeriesForLegend();
final Orientation o=lg.getOrientation();
final Direction d=lg.getDirection();
final Label la=LabelImpl.create();
la.setCaption(TextImpl.copyInstance(lg.getText()));
la.getCaption().setValue(""String_Node_Str"");
final ITextMetrics itm=xs.getTextMetrics(la);
final double maxWrappingSize=lg.getWrappingSize() * dScale;
final double dItemHeight=itm.getFullHeight();
final double dHorizontalSpacing=4;
final double dVerticalSpacing=4;
double dSeparatorThickness=lia.getThickness();
Insets insCA=ca.getInsets().scaledInstance(dScale);
Series seBase;
List al;
LegendItemRenderingHints lirh;
Palette pa;
int iPaletteCount;
EList elPaletteEntries;
Fill fPaletteEntry;
final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
Block bl=cm.getBlock();
Bounds boFull=bl.getBounds().scaledInstance(dScale);
Insets ins=bl.getInsets().scaledInstance(dScale);
double dMaxX=boFull.getLeft() + boFull.getWidth() - ins.getRight() - lgIns.getRight();
double dMaxY=boFull.getTop() + boFull.getHeight() - ins.getBottom() - lgIns.getBottom();
String sMinSliceLabel=null;
boolean bMinSliceApplied=false;
if (lilh != null) {
sMinSliceLabel=lilh.getMinSliceText();
bMinSliceApplied=lilh.isMinSliceApplied();
}
 else {
boolean bMinSliceDefined=false;
double dMinSlice=0;
boolean bPercentageMinSlice=false;
if (cm instanceof ChartWithoutAxes) {
bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
dMinSlice=((ChartWithoutAxes)cm).getMinSlice();
bPercentageMinSlice=((ChartWithoutAxes)cm).isMinSlicePercent();
sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
if (sMinSliceLabel == null || sMinSliceLabel.length() == 0) {
sMinSliceLabel=IConstants.UNDEFINED_STRING;
}
 else {
sMinSliceLabel=rtc.externalizedMessage(sMinSliceLabel);
}
}
if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
if (!((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
SeriesDefinition sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
SeriesDefinition[] sdOrtho=(SeriesDefinition[])sdBase.getSeriesDefinitions().toArray();
DataSetIterator dsiOrtho=null;
double dCurrentMinSlice=0;
for (int i=0; i < sdOrtho.length && !bMinSliceApplied; i++) {
try {
dsiOrtho=new DataSetIterator(((Series)sdOrtho[i].getRunTimeSeries().get(0)).getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
}
if (bPercentageMinSlice) {
double total=0;
while (dsiOrtho.hasNext()) {
Object obj=dsiOrtho.next();
if (obj instanceof Number) {
total+=((Number)obj).doubleValue();
}
}
dsiOrtho.reset();
dCurrentMinSlice=total * dMinSlice / 100d;
}
 else {
dCurrentMinSlice=dMinSlice;
}
while (dsiOrtho.hasNext()) {
Object obj=dsiOrtho.next();
if (obj instanceof Number) {
double val=((Number)obj).doubleValue();
if (val < dCurrentMinSlice) {
bMinSliceApplied=true;
break;
}
}
}
}
}
}
}
if (o.getValue() == Orientation.VERTICAL) {
double dXOffset=0, dMaxW=0;
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
FormatSpecifier fs=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
Map columnCache=searchMaxColumnWidth(liha);
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
}
 else {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
}
if (sdBase != null) {
fs=sdBase.getFormatSpecifier();
}
int i=0;
while (dsiBase.hasNext()) {
Object obj=dsiBase.next();
dY+=insCA.getTop();
String lgtext=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
fPaletteEntry=(Fill)elPaletteEntries.get(i++ % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (dY + itm.getFullHeight() + insCA.getBottom() > dMaxY) {
dXOffset+=dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2 + dHorizontalSpacing;
dMaxW=0;
dY=bo.getTop() + insCA.getTop();
dX=bo.getLeft() + dXOffset;
}
dMaxW=Math.max(dMaxW,itm.getFullWidth());
renderLegendItem(ipr,lg,la,null,dX,dY,itm.getFullWidth(),dItemHeight,itm.getFullHeight(),0,bo.getWidth(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dY+=itm.getFullHeight() + insCA.getBottom();
}
if (bMinSliceApplied) {
dY+=insCA.getTop();
la.getCaption().setValue(sMinSliceLabel);
itm.reuse(la,maxWrappingSize);
fPaletteEntry=(Fill)elPaletteEntries.get(dsiBase.size() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (dY + itm.getFullHeight() + insCA.getBottom() > dMaxY) {
dXOffset+=dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2 + dHorizontalSpacing;
dMaxW=0;
dY=bo.getTop() + insCA.getTop();
dX=bo.getLeft() + dXOffset;
}
dMaxW=Math.max(dMaxW,itm.getFullWidth());
renderLegendItem(ipr,lg,la,null,dX,dY,itm.getFullWidth(),dItemHeight,itm.getFullHeight(),0,bo.getWidth(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dY+=itm.getFullHeight() + insCA.getBottom();
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else {
dSeparatorThickness+=dVerticalSpacing;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
FormatSpecifier fs=seda[j].getFormatSpecifier();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
dY+=insCA.getTop();
Object obj=seBase.getSeriesIdentifier();
String lgtext=rtc.externalizedMessage(String.valueOf(obj));
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
double dFWidth=itm.getFullWidth();
double dFHeight=itm.getFullHeight();
Label valueLa=null;
double valueHeight=0;
if (lg.isShowValue()) {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
}
if (dsiBase.hasNext()) {
obj=dsiBase.next();
String valueText=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
}
 catch (ChartException e) {
}
}
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(valueText);
itm.reuse(valueLa);
dFWidth=Math.max(dFWidth,itm.getFullWidth());
valueHeight=itm.getFullHeight();
}
}
if (dY + dFHeight + valueHeight+ 2+ insCA.getBottom() > dMaxY) {
dXOffset+=dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2 + dHorizontalSpacing;
dMaxW=0;
dY=bo.getTop() + insCA.getTop();
dX=bo.getLeft() + dXOffset;
}
dMaxW=Math.max(dMaxW,dFWidth);
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dX,dY,dFWidth,dItemHeight,dFHeight,valueHeight,bo.getWidth(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dY+=dFHeight + insCA.getBottom() + valueHeight+ 2;
}
if (j < seda.length - 1) {
renderSeparator(ipr,lg,liSep,dX,dY + dSeparatorThickness / 2,dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2,Orientation.HORIZONTAL_LITERAL);
dY+=dSeparatorThickness;
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
dSeparatorThickness+=dHorizontalSpacing;
for (int j=0; j < seda.length; j++) {
dMaxW=0;
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
FormatSpecifier fs=seda[j].getFormatSpecifier();
for (int i=0; i < al.size(); i++) {
dY+=insCA.getTop();
seBase=(Series)al.get(i);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
Object obj=seBase.getSeriesIdentifier();
String lgtext=rtc.externalizedMessage(String.valueOf(obj));
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
double dFWidth=itm.getFullWidth();
double dFHeight=itm.getFullHeight();
Label valueLa=null;
double valueHeight=0;
if (lg.isShowValue()) {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
}
if (dsiBase.hasNext()) {
obj=dsiBase.next();
String valueText=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
}
 catch (ChartException e) {
}
}
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(valueText);
itm.reuse(valueLa);
dFWidth=Math.max(dFWidth,itm.getFullWidth());
valueHeight=itm.getFullHeight();
}
}
if (dY + dFHeight + valueHeight+ 2+ insCA.getBottom() > dMaxY) {
dXOffset+=dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2 + dHorizontalSpacing;
dMaxW=0;
dY=bo.getTop();
dX=bo.getLeft() + dXOffset;
}
dMaxW=Math.max(dMaxW,dFWidth);
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dX,dY,dFWidth,dItemHeight,dFHeight,valueHeight,bo.getWidth(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dY+=dFHeight + insCA.getBottom() + valueHeight+ 2;
}
dXOffset+=insCA.getLeft() + (3 * dItemHeight / 2) + dHorizontalSpacing+ dMaxW+ insCA.getRight();
dX+=insCA.getLeft() + (3 * dItemHeight / 2) + dHorizontalSpacing+ dMaxW+ insCA.getRight();
dY=bo.getTop();
if (j < seda.length - 1) {
renderSeparator(ipr,lg,liSep,dX + dSeparatorThickness / 2,dY,bo.getHeight(),Orientation.VERTICAL_LITERAL);
dX+=dSeparatorThickness;
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else if (o.getValue() == Orientation.HORIZONTAL) {
double dYOffset=0, dMaxH=0;
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
FormatSpecifier fs=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
}
 else {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
}
if (sdBase != null) {
fs=sdBase.getFormatSpecifier();
}
int i=0;
double dFullWidth=0;
dY+=insCA.getTop();
while (dsiBase.hasNext()) {
Object obj=dsiBase.next();
dX+=insCA.getLeft();
String lgtext=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
fPaletteEntry=(Fill)elPaletteEntries.get(i++ % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
dFullWidth=itm.getFullWidth();
if (dX + dFullWidth + (3 * dItemHeight) / 2 + insCA.getRight() > dMaxX) {
dYOffset+=dMaxH + insCA.getTop() + insCA.getBottom()+ dVerticalSpacing;
dMaxH=0;
dX=bo.getLeft() + insCA.getLeft();
dY=bo.getTop() + insCA.getTop() + dYOffset;
}
dMaxH=Math.max(dMaxH,itm.getFullHeight());
renderLegendItem(ipr,lg,la,null,dX,dY,dFullWidth,dItemHeight,itm.getFullHeight(),0,dFullWidth + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dX+=dFullWidth + (3 * dItemHeight) / 2 + insCA.getRight();
}
if (bMinSliceApplied) {
dX+=insCA.getLeft();
la.getCaption().setValue(sMinSliceLabel);
itm.reuse(la,maxWrappingSize);
fPaletteEntry=(Fill)elPaletteEntries.get(dsiBase.size() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
dFullWidth=itm.getFullWidth();
if (dX + dFullWidth + (3 * dItemHeight) / 2 + insCA.getRight() > dMaxX) {
dYOffset+=dMaxH + insCA.getTop() + insCA.getBottom()+ dVerticalSpacing;
dMaxH=0;
dX=bo.getLeft() + insCA.getLeft();
dY=bo.getTop() + insCA.getTop() + dYOffset;
}
dMaxH=Math.max(dMaxH,itm.getFullHeight());
renderLegendItem(ipr,lg,la,null,dX,dY,dFullWidth,dItemHeight,itm.getFullHeight(),0,dFullWidth + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dX+=dFullWidth + (3 * dItemHeight) / 2 + insCA.getRight();
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else {
dSeparatorThickness+=dVerticalSpacing;
for (int j=0; j < seda.length; j++) {
dMaxH=0;
dY+=insCA.getTop();
dX=bo.getLeft() + insCA.getLeft();
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
FormatSpecifier fs=seda[j].getFormatSpecifier();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
Object obj=seBase.getSeriesIdentifier();
String lgtext=rtc.externalizedMessage(String.valueOf(obj));
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
double dFWidth=itm.getFullWidth();
double dFHeight=itm.getFullHeight();
Label valueLa=null;
double valueHeight=0;
if (lg.isShowValue()) {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
}
if (dsiBase.hasNext()) {
obj=dsiBase.next();
String valueText=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
}
 catch (ChartException e) {
}
}
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(valueText);
itm.reuse(valueLa);
dFWidth=Math.max(dFWidth,itm.getFullWidth());
valueHeight=itm.getFullHeight();
}
}
if (dX + insCA.getLeft() + dFWidth+ (3 * dItemHeight) / 2 + insCA.getRight() > dMaxX) {
dYOffset+=dMaxH + insCA.getTop() + insCA.getBottom()+ dVerticalSpacing;
dMaxH=0;
dX=bo.getLeft() + insCA.getLeft();
dY=bo.getTop() + insCA.getTop() + dYOffset;
}
dMaxH=Math.max(dMaxH,dFHeight + valueHeight + 2);
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dX,dY,dFWidth,dItemHeight,dFHeight,valueHeight,dFWidth + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dX+=insCA.getLeft() + (3 * dItemHeight) / 2 + dFWidth + insCA.getRight();
}
dYOffset+=insCA.getTop() + insCA.getBottom() + dMaxH+ dVerticalSpacing;
dY+=insCA.getTop() + insCA.getBottom() + dMaxH+ dVerticalSpacing;
dX=bo.getLeft() + insCA.getLeft();
if (j < seda.length - 1) {
renderSeparator(ipr,lg,liSep,dX,dY + dSeparatorThickness / 2,bo.getWidth(),Orientation.HORIZONTAL_LITERAL);
dY+=dSeparatorThickness;
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
dSeparatorThickness+=dHorizontalSpacing;
dX+=insCA.getLeft();
dY+=insCA.getTop();
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
FormatSpecifier fs=seda[j].getFormatSpecifier();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
Object obj=seBase.getSeriesIdentifier();
String lgtext=rtc.externalizedMessage(String.valueOf(obj));
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
double dFWidth=itm.getFullWidth();
double dFHeight=itm.getFullHeight();
Label valueLa=null;
double valueHeight=0;
if (lg.isShowValue()) {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
}
if (dsiBase.hasNext()) {
obj=dsiBase.next();
String valueText=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
}
 catch (ChartException e) {
}
}
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(valueText);
itm.reuse(valueLa);
dFWidth=Math.max(dFWidth,itm.getFullWidth());
valueHeight=itm.getFullHeight();
}
}
if (dX + insCA.getLeft() + dFWidth+ (3 * dItemHeight) / 2 + insCA.getRight() > dMaxX) {
dYOffset+=dMaxH + insCA.getTop() + insCA.getBottom()+ dVerticalSpacing;
dMaxH=0;
dX=bo.getLeft() + insCA.getLeft();
dY=bo.getTop() + dYOffset;
}
dMaxH=Math.max(dMaxH,dFHeight + valueHeight + 2);
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dX,dY,dFWidth,dItemHeight,dFHeight,valueHeight,dFWidth + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dX+=insCA.getLeft() + (3 * dItemHeight) / 2 + dHorizontalSpacing + dFWidth + insCA.getRight();
}
if (j < seda.length - 1) {
renderSeparator(ipr,lg,liSep,dX + dSeparatorThickness / 2,dY,dMaxH,Orientation.VERTICAL_LITERAL);
dX+=dSeparatorThickness;
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{o.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
if (bRenderLegendTitle) {
double lX=bo.getLeft();
double lY=bo.getTop();
switch (iTitlePos) {
case Position.ABOVE:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() - lgTitleHeight;
break;
case Position.BELOW:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() + bo.getHeight();
break;
case Position.LEFT:
lX=bo.getLeft() - lgTitleWidth;
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
case Position.RIGHT:
lX=bo.getLeft() + bo.getWidth();
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
}
final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(WrappedStructureSource.createLegendTitle(lg,lgTitle),TextRenderEvent.class);
tre.setBlockBounds(BoundsImpl.create(lX,lY,lgTitleWidth,lgTitleHeight));
TextAlignment ta=TextAlignmentImpl.create();
ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
tre.setBlockAlignment(ta);
tre.setLabel(lgTitle);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
ipr.drawText(tre);
}
itm.dispose();
}","/** 
 * Renders the legend block based on the legend rendering rules.
 * @param ipr
 * @param lg
 * @param htRenderers
 * @throws ChartException
 */
public void renderLegend(IPrimitiveRenderer ipr,Legend lg,Map htRenderers) throws ChartException {
  if (!lg.isVisible()) {
    return;
  }
  renderBlock(ipr,lg,StructureSource.createLegend(lg));
  final IDisplayServer xs=getDevice().getDisplayServer();
  final double dScale=getDeviceScale();
  Bounds bo=lg.getBounds().scaledInstance(dScale);
  Size sz=null;
  double dX, dY;
  if (lg.getPosition() != Position.INSIDE_LITERAL) {
    try {
      sz=lg.getPreferredSize(xs,cm,rtc);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    sz.scale(dScale);
    if (sz.getWidth() > bo.getWidth()) {
      sz.setWidth(bo.getWidth());
    }
    if (sz.getHeight() > bo.getHeight()) {
      sz.setHeight(bo.getHeight());
    }
    dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
    dY=0;
    if (lg.isSetAnchor()) {
      int iAnchor=lg.getAnchor().getValue();
      if (isRightToLeft()) {
        if (iAnchor == Anchor.EAST) {
          iAnchor=Anchor.WEST;
        }
 else         if (iAnchor == Anchor.NORTH_EAST) {
          iAnchor=Anchor.NORTH_WEST;
        }
 else         if (iAnchor == Anchor.SOUTH_EAST) {
          iAnchor=Anchor.SOUTH_WEST;
        }
 else         if (iAnchor == Anchor.WEST) {
          iAnchor=Anchor.EAST;
        }
 else         if (iAnchor == Anchor.NORTH_WEST) {
          iAnchor=Anchor.NORTH_EAST;
        }
 else         if (iAnchor == Anchor.SOUTH_WEST) {
          iAnchor=Anchor.SOUTH_EAST;
        }
      }
switch (iAnchor) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
        dY=bo.getTop();
      break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
    dY=bo.getTop() + bo.getHeight() - sz.getHeight();
  break;
default :
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
break;
}
switch (iAnchor) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
dX=bo.getLeft();
break;
case Anchor.EAST:
case Anchor.SOUTH_EAST:
case Anchor.NORTH_EAST:
dX=bo.getLeft() + bo.getWidth() - sz.getWidth();
break;
default :
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
break;
}
}
 else {
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
}
}
 else {
dX=bo.getLeft();
dY=bo.getTop();
sz=SizeImpl.create(bo.getWidth(),bo.getHeight());
}
final LegendLayoutHints lilh=rtc.getLegendLayoutHints();
Label lgTitle=lg.getTitle();
double lgTitleWidth=0, lgTitleHeight=0;
double yOffset=0, xOffset=0, wOffset=0, hOffset=0;
final boolean bRenderLegendTitle=lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible();
int iTitlePos=Position.ABOVE;
if (bRenderLegendTitle) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
if (lilh != null) {
Size titleSize=lilh.getTitleSize();
lgTitleWidth=titleSize.getWidth();
lgTitleHeight=titleSize.getHeight();
}
 else {
BoundingBox bb=null;
try {
bb=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
}
lgTitleWidth=bb.getWidth();
lgTitleHeight=bb.getHeight();
}
iTitlePos=lg.getTitlePosition().getValue();
if (isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
switch (iTitlePos) {
case Position.ABOVE:
yOffset=lgTitleHeight;
hOffset=-yOffset;
break;
case Position.BELOW:
hOffset=-lgTitleHeight;
break;
case Position.LEFT:
xOffset=lgTitleWidth;
wOffset=-xOffset;
break;
case Position.RIGHT:
wOffset=-lgTitleWidth;
break;
}
}
final ClientArea ca=lg.getClientArea();
final Insets lgIns=lg.getInsets().scaledInstance(dScale);
LineAttributes lia=ca.getOutline();
bo=BoundsImpl.create(dX,dY,sz.getWidth(),sz.getHeight());
bo=bo.adjustedInstance(lgIns);
dX=bo.getLeft();
dY=bo.getTop();
bo.delta(xOffset,yOffset,wOffset,hOffset);
dX=bo.getLeft();
dY=bo.getTop();
final double dBaseX=dX;
final double dBaseY=dY;
final RectangleRenderEvent rre=(RectangleRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
if (ca.getShadowColor() != null) {
rre.setBounds(bo.translateInstance(3,3));
rre.setBackground(ca.getShadowColor());
ipr.fillRectangle(rre);
}
rre.setBounds(bo);
rre.setOutline(lia);
rre.setBackground(ca.getBackground());
ipr.fillRectangle(rre);
ipr.drawRectangle(rre);
lia=LineAttributesImpl.copyInstance(lia);
lia.setVisible(true);
LineAttributes liSep=lg.getSeparator() == null ? lia : lg.getSeparator();
final SeriesDefinition[] seda=cm.getSeriesForLegend();
final Orientation o=lg.getOrientation();
final Direction d=lg.getDirection();
final Label la=LabelImpl.create();
la.setCaption(TextImpl.copyInstance(lg.getText()));
la.getCaption().setValue(""String_Node_Str"");
final ITextMetrics itm=xs.getTextMetrics(la);
final double maxWrappingSize=lg.getWrappingSize() * dScale;
final double dItemHeight=itm.getFullHeight();
final double dHorizontalSpacing=4;
final double dVerticalSpacing=4;
double dSeparatorThickness=lia.getThickness();
Insets insCA=ca.getInsets().scaledInstance(dScale);
Series seBase;
List al;
LegendItemRenderingHints lirh;
Palette pa;
int iPaletteCount;
EList elPaletteEntries;
Fill fPaletteEntry;
final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
Block bl=cm.getBlock();
Bounds boFull=bl.getBounds().scaledInstance(dScale);
Insets ins=bl.getInsets().scaledInstance(dScale);
double dMaxX=boFull.getLeft() + boFull.getWidth() - ins.getRight() - lgIns.getRight();
double dMaxY=boFull.getTop() + boFull.getHeight() - ins.getBottom() - lgIns.getBottom();
String sMinSliceLabel=null;
boolean bMinSliceApplied=false;
if (lilh != null) {
sMinSliceLabel=lilh.getMinSliceText();
bMinSliceApplied=lilh.isMinSliceApplied();
}
 else {
boolean bMinSliceDefined=false;
double dMinSlice=0;
boolean bPercentageMinSlice=false;
if (cm instanceof ChartWithoutAxes) {
bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
dMinSlice=((ChartWithoutAxes)cm).getMinSlice();
bPercentageMinSlice=((ChartWithoutAxes)cm).isMinSlicePercent();
sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
if (sMinSliceLabel == null || sMinSliceLabel.length() == 0) {
sMinSliceLabel=IConstants.UNDEFINED_STRING;
}
 else {
sMinSliceLabel=rtc.externalizedMessage(sMinSliceLabel);
}
}
if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
if (!((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
SeriesDefinition sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
SeriesDefinition[] sdOrtho=(SeriesDefinition[])sdBase.getSeriesDefinitions().toArray();
DataSetIterator dsiOrtho=null;
double dCurrentMinSlice=0;
for (int i=0; i < sdOrtho.length && !bMinSliceApplied; i++) {
try {
dsiOrtho=new DataSetIterator(((Series)sdOrtho[i].getRunTimeSeries().get(0)).getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
}
if (bPercentageMinSlice) {
double total=0;
while (dsiOrtho.hasNext()) {
Object obj=dsiOrtho.next();
if (obj instanceof Number) {
total+=((Number)obj).doubleValue();
}
}
dsiOrtho.reset();
dCurrentMinSlice=total * dMinSlice / 100d;
}
 else {
dCurrentMinSlice=dMinSlice;
}
while (dsiOrtho.hasNext()) {
Object obj=dsiOrtho.next();
if (obj instanceof Number) {
double val=((Number)obj).doubleValue();
if (val < dCurrentMinSlice) {
bMinSliceApplied=true;
break;
}
}
}
}
}
}
}
if (o.getValue() == Orientation.VERTICAL) {
double dXOffset=0, dMaxW=0;
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
FormatSpecifier fs=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
Map columnCache=searchMaxColumnWidth(liha);
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
}
 else {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
}
if (sdBase != null) {
fs=sdBase.getFormatSpecifier();
}
int i=0;
while (dsiBase.hasNext()) {
Object obj=dsiBase.next();
dY+=insCA.getTop();
String lgtext=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
fPaletteEntry=(Fill)elPaletteEntries.get(i++ % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (dY + itm.getFullHeight() + insCA.getBottom() > dMaxY) {
dXOffset+=dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2 + dHorizontalSpacing;
dMaxW=0;
dY=bo.getTop() + insCA.getTop();
dX=bo.getLeft() + dXOffset;
}
dMaxW=Math.max(dMaxW,itm.getFullWidth());
renderLegendItem(ipr,lg,la,null,dX,dY,itm.getFullWidth(),dItemHeight,itm.getFullHeight(),0,bo.getWidth(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dY+=itm.getFullHeight() + insCA.getBottom();
}
if (bMinSliceApplied) {
dY+=insCA.getTop();
la.getCaption().setValue(sMinSliceLabel);
itm.reuse(la,maxWrappingSize);
fPaletteEntry=(Fill)elPaletteEntries.get(dsiBase.size() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (dY + itm.getFullHeight() + insCA.getBottom() > dMaxY) {
dXOffset+=dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2 + dHorizontalSpacing;
dMaxW=0;
dY=bo.getTop() + insCA.getTop();
dX=bo.getLeft() + dXOffset;
}
dMaxW=Math.max(dMaxW,itm.getFullWidth());
renderLegendItem(ipr,lg,la,null,dX,dY,itm.getFullWidth(),dItemHeight,itm.getFullHeight(),0,bo.getWidth(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dY+=itm.getFullHeight() + insCA.getBottom();
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else {
dSeparatorThickness+=dVerticalSpacing;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
FormatSpecifier fs=seda[j].getFormatSpecifier();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
dY+=insCA.getTop();
Object obj=seBase.getSeriesIdentifier();
String lgtext=rtc.externalizedMessage(String.valueOf(obj));
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
double dFWidth=itm.getFullWidth();
double dFHeight=itm.getFullHeight();
Label valueLa=null;
double valueHeight=0;
if (lg.isShowValue()) {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
}
if (dsiBase.hasNext()) {
obj=dsiBase.next();
String valueText=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
}
 catch (ChartException e) {
}
}
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(valueText);
itm.reuse(valueLa);
dFWidth=Math.max(dFWidth,itm.getFullWidth());
valueHeight=itm.getFullHeight();
}
}
if (dY + dFHeight + valueHeight+ 2+ insCA.getBottom() > dMaxY) {
dXOffset+=dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2 + dHorizontalSpacing;
dMaxW=0;
dY=bo.getTop() + insCA.getTop();
dX=bo.getLeft() + dXOffset;
}
dMaxW=Math.max(dMaxW,dFWidth);
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dX,dY,dFWidth,dItemHeight,dFHeight,valueHeight,bo.getWidth(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dY+=dFHeight + insCA.getBottom() + valueHeight+ 2;
}
if (j < seda.length - 1) {
renderSeparator(ipr,lg,liSep,dX,dY + dSeparatorThickness / 2,dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2,Orientation.HORIZONTAL_LITERAL);
dY+=dSeparatorThickness;
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
dSeparatorThickness+=dHorizontalSpacing;
for (int j=0; j < seda.length; j++) {
dMaxW=0;
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
FormatSpecifier fs=seda[j].getFormatSpecifier();
for (int i=0; i < al.size(); i++) {
dY+=insCA.getTop();
seBase=(Series)al.get(i);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
Object obj=seBase.getSeriesIdentifier();
String lgtext=rtc.externalizedMessage(String.valueOf(obj));
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
double dFWidth=itm.getFullWidth();
double dFHeight=itm.getFullHeight();
Label valueLa=null;
double valueHeight=0;
if (lg.isShowValue()) {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
}
if (dsiBase.hasNext()) {
obj=dsiBase.next();
String valueText=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
}
 catch (ChartException e) {
}
}
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(valueText);
itm.reuse(valueLa);
dFWidth=Math.max(dFWidth,itm.getFullWidth());
valueHeight=itm.getFullHeight();
}
}
if (dY + dFHeight + valueHeight+ 2+ insCA.getBottom() > dMaxY) {
dXOffset+=dMaxW + insCA.getLeft() + insCA.getRight()+ (3 * dItemHeight) / 2 + dHorizontalSpacing;
dMaxW=0;
dY=bo.getTop();
dX=bo.getLeft() + dXOffset;
}
dMaxW=Math.max(dMaxW,dFWidth);
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dX,dY,dFWidth,dItemHeight,dFHeight,valueHeight,bo.getWidth(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dY+=dFHeight + insCA.getBottom() + valueHeight+ 2;
}
dXOffset+=insCA.getLeft() + (3 * dItemHeight / 2) + dHorizontalSpacing+ dMaxW+ insCA.getRight();
dX+=insCA.getLeft() + (3 * dItemHeight / 2) + dHorizontalSpacing+ dMaxW+ insCA.getRight();
dY=bo.getTop();
if (j < seda.length - 1) {
renderSeparator(ipr,lg,liSep,dX + dSeparatorThickness / 2,dY,bo.getHeight(),Orientation.VERTICAL_LITERAL);
dX+=dSeparatorThickness;
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else if (o.getValue() == Orientation.HORIZONTAL) {
double dYOffset=0, dMaxH=0;
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
FormatSpecifier fs=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
}
 else {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
}
if (sdBase != null) {
fs=sdBase.getFormatSpecifier();
}
int i=0;
double dFullWidth=0;
dY+=insCA.getTop();
while (dsiBase.hasNext()) {
Object obj=dsiBase.next();
dX+=insCA.getLeft();
String lgtext=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
fPaletteEntry=(Fill)elPaletteEntries.get(i++ % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
dFullWidth=itm.getFullWidth();
if (dX + dFullWidth + (3 * dItemHeight) / 2 + insCA.getRight() > dMaxX) {
dYOffset+=dMaxH + insCA.getTop() + insCA.getBottom()+ dVerticalSpacing;
dMaxH=0;
dX=bo.getLeft() + insCA.getLeft();
dY=bo.getTop() + insCA.getTop() + dYOffset;
}
dMaxH=Math.max(dMaxH,itm.getFullHeight());
renderLegendItem(ipr,lg,la,null,dX,dY,dFullWidth,dItemHeight,itm.getFullHeight(),0,dFullWidth + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dX+=dFullWidth + (3 * dItemHeight) / 2 + insCA.getRight();
}
if (bMinSliceApplied) {
dX+=insCA.getLeft();
la.getCaption().setValue(sMinSliceLabel);
itm.reuse(la,maxWrappingSize);
fPaletteEntry=(Fill)elPaletteEntries.get(dsiBase.size() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
dFullWidth=itm.getFullWidth();
if (dX + dFullWidth + (3 * dItemHeight) / 2 + insCA.getRight() > dMaxX) {
dYOffset+=dMaxH + insCA.getTop() + insCA.getBottom()+ dVerticalSpacing;
dMaxH=0;
dX=bo.getLeft() + insCA.getLeft();
dY=bo.getTop() + insCA.getTop() + dYOffset;
}
dMaxH=Math.max(dMaxH,itm.getFullHeight());
renderLegendItem(ipr,lg,la,null,dX,dY,dFullWidth,dItemHeight,itm.getFullHeight(),0,dFullWidth + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dX+=dFullWidth + (3 * dItemHeight) / 2 + insCA.getRight();
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else {
dSeparatorThickness+=dVerticalSpacing;
for (int j=0; j < seda.length; j++) {
dMaxH=0;
dY+=insCA.getTop();
dX=bo.getLeft() + insCA.getLeft();
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
FormatSpecifier fs=seda[j].getFormatSpecifier();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
Object obj=seBase.getSeriesIdentifier();
String lgtext=rtc.externalizedMessage(String.valueOf(obj));
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
double dFWidth=itm.getFullWidth();
double dFHeight=itm.getFullHeight();
Label valueLa=null;
double valueHeight=0;
if (lg.isShowValue()) {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
}
if (dsiBase.hasNext()) {
obj=dsiBase.next();
String valueText=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
}
 catch (ChartException e) {
}
}
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(valueText);
itm.reuse(valueLa);
dFWidth=Math.max(dFWidth,itm.getFullWidth());
valueHeight=itm.getFullHeight();
}
}
if (dX + insCA.getLeft() + dFWidth+ (3 * dItemHeight) / 2 + insCA.getRight() > dMaxX) {
dYOffset+=dMaxH + insCA.getTop() + insCA.getBottom()+ dVerticalSpacing;
dMaxH=0;
dX=bo.getLeft() + insCA.getLeft();
dY=bo.getTop() + insCA.getTop() + dYOffset;
}
dMaxH=Math.max(dMaxH,dFHeight + valueHeight + 2);
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dX,dY,dFWidth,dItemHeight,dFHeight,valueHeight,dFWidth + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dX+=insCA.getLeft() + (3 * dItemHeight) / 2 + dFWidth + insCA.getRight();
}
dYOffset+=insCA.getTop() + insCA.getBottom() + dMaxH+ dVerticalSpacing;
dY+=insCA.getTop() + insCA.getBottom() + dMaxH+ dVerticalSpacing;
dX=bo.getLeft() + insCA.getLeft();
if (j < seda.length - 1) {
renderSeparator(ipr,lg,liSep,dX,dY + dSeparatorThickness / 2,bo.getWidth(),Orientation.HORIZONTAL_LITERAL);
dY+=dSeparatorThickness;
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh != null && lilh.getLegendItemHints() != null) {
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
dSeparatorThickness+=dHorizontalSpacing;
dX+=insCA.getLeft();
dY+=insCA.getTop();
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
FormatSpecifier fs=seda[j].getFormatSpecifier();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
Object obj=seBase.getSeriesIdentifier();
String lgtext=rtc.externalizedMessage(String.valueOf(obj));
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,getRunTimeContext().getULocale(),null);
}
 catch (ChartException e) {
}
}
la.getCaption().setValue(lgtext);
itm.reuse(la,maxWrappingSize);
double dFWidth=itm.getFullWidth();
double dFHeight=itm.getFullHeight();
Label valueLa=null;
double valueHeight=0;
if (lg.isShowValue()) {
DataSetIterator dsiBase=null;
try {
dsiBase=new DataSetIterator(seBase.getDataSet());
}
 catch (Exception ex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
}
if (dsiBase.hasNext()) {
obj=dsiBase.next();
String valueText=String.valueOf(obj);
if (fs != null) {
try {
lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
}
 catch (ChartException e) {
}
}
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(valueText);
itm.reuse(valueLa);
dFWidth=Math.max(dFWidth,itm.getFullWidth());
valueHeight=itm.getFullHeight();
}
}
if (dX + insCA.getLeft() + dFWidth+ (3 * dItemHeight) / 2 + insCA.getRight() > dMaxX) {
dYOffset+=dMaxH + insCA.getTop() + insCA.getBottom()+ dVerticalSpacing;
dMaxH=0;
dX=bo.getLeft() + insCA.getLeft();
dY=bo.getTop() + dYOffset;
}
dMaxH=Math.max(dMaxH,dFHeight + valueHeight + 2);
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dX,dY,dFWidth,dItemHeight,dFHeight,valueHeight,dFWidth + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i);
dX+=insCA.getLeft() + (3 * dItemHeight) / 2 + dHorizontalSpacing + dFWidth + insCA.getRight();
}
if (j < seda.length - 1) {
renderSeparator(ipr,lg,liSep,dX + dSeparatorThickness / 2,dY,dMaxH,Orientation.VERTICAL_LITERAL);
dX+=dSeparatorThickness;
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{o.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
if (bRenderLegendTitle) {
double lX=bo.getLeft();
double lY=bo.getTop();
switch (iTitlePos) {
case Position.ABOVE:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() - lgTitleHeight;
break;
case Position.BELOW:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() + bo.getHeight();
break;
case Position.LEFT:
lX=bo.getLeft() - lgTitleWidth;
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
case Position.RIGHT:
lX=bo.getLeft() + bo.getWidth();
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
}
final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(WrappedStructureSource.createLegendTitle(lg,lgTitle),TextRenderEvent.class);
tre.setBlockBounds(BoundsImpl.create(lX,lY,lgTitleWidth,lgTitleHeight));
TextAlignment ta=TextAlignmentImpl.create();
ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
tre.setBlockAlignment(ta);
tre.setLabel(lgTitle);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
ipr.drawText(tre);
}
itm.dispose();
}",0.9992401456387524
77482,"/** 
 * Convert report parameter from string into object.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(locale);
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(locale);
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(locale);
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.doubleValue());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.doubleValue());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(locale);
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.doubleValue());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.doubleValue());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
}
}
return parameterValueObj;
}","/** 
 * Convert report parameter from string into object.
 * @param reportParameterValue report parameter value in string.
 * @param parameterValueType report parameter type.
 * @return parameter value object.
 */
public Object parse(String reportParameterValue,int parameterValueType){
  Object parameterValueObj=null;
  if (reportParameterValue != null && locale != null) {
switch (parameterValueType) {
case IScalarParameterDefn.TYPE_STRING:
{
        StringFormatter sf=new StringFormatter(locale);
        if (format != null) {
          sf.applyPattern(format);
        }
        try {
          parameterValueObj=sf.parser(reportParameterValue);
        }
 catch (        ParseException e) {
          parameterValueObj=reportParameterValue;
        }
        break;
      }
case IScalarParameterDefn.TYPE_DATE_TIME:
{
      DateFormatter df=new DateFormatter(locale);
      if (format != null) {
        df.applyPattern(format);
      }
      try {
        parameterValueObj=df.parse(reportParameterValue);
      }
 catch (      ParseException e) {
        df.applyPattern(""String_Node_Str"");
        try {
          parameterValueObj=df.parse(reportParameterValue);
        }
 catch (        ParseException ex) {
          df.applyPattern(""String_Node_Str"");
          try {
            parameterValueObj=df.parse(reportParameterValue);
          }
 catch (          ParseException exx) {
            parameterValueObj=null;
          }
        }
      }
      break;
    }
case IScalarParameterDefn.TYPE_FLOAT:
{
    NumberFormatter nf=new NumberFormatter(locale);
    if (format != null) {
      nf.applyPattern(format);
    }
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.doubleValue());
      }
    }
 catch (    ParseException e) {
      nf.applyPattern(""String_Node_Str"");
      try {
        Number num=nf.parse(reportParameterValue);
        if (num != null) {
          parameterValueObj=new Double(num.doubleValue());
        }
      }
 catch (      ParseException ex) {
        parameterValueObj=null;
      }
    }
    break;
  }
case IScalarParameterDefn.TYPE_DECIMAL:
{
  NumberFormatter nf=new NumberFormatter(locale);
  if (format != null) {
    nf.applyPattern(format);
  }
  try {
    Number num=nf.parse(reportParameterValue);
    if (num != null) {
      parameterValueObj=new BigDecimal(num.doubleValue());
    }
  }
 catch (  ParseException e) {
    nf.applyPattern(""String_Node_Str"");
    try {
      Number num=nf.parse(reportParameterValue);
      if (num != null) {
        parameterValueObj=new Double(num.doubleValue());
      }
    }
 catch (    ParseException ex) {
      parameterValueObj=null;
    }
  }
  break;
}
case IScalarParameterDefn.TYPE_BOOLEAN:
{
parameterValueObj=Boolean.valueOf(reportParameterValue);
break;
}
case IScalarParameterDefn.TYPE_INTEGER:
{
NumberFormatter nf=new NumberFormatter(locale);
if (format != null) {
nf.applyPattern(format);
}
try {
Number num=nf.parse(reportParameterValue);
if (num != null) {
  parameterValueObj=new Integer(num.intValue());
}
}
 catch (ParseException ex) {
nf.applyPattern(""String_Node_Str"");
try {
  Number num=nf.parse(reportParameterValue);
  if (num != null) {
    parameterValueObj=new Integer(num.intValue());
  }
}
 catch (ParseException pex) {
  try {
    parameterValueObj=new Integer(reportParameterValue);
  }
 catch (  NumberFormatException nfe) {
    parameterValueObj=null;
  }
}
}
}
}
}
return parameterValueObj;
}",0.8971464408905613
77483,"/** 
 * @param p the scalar parameter
 * @param expr the default value expression
 */
protected Object stringToObject(int type,String value) throws BirtException {
  if (value == null) {
    return null;
  }
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
    return DataTypeUtil.toBoolean(value);
case IScalarParameterDefn.TYPE_DATE_TIME:
  return DataTypeUtil.toDate(value);
case IScalarParameterDefn.TYPE_DECIMAL:
return DataTypeUtil.toBigDecimal(value);
case IScalarParameterDefn.TYPE_FLOAT:
return DataTypeUtil.toDouble(value);
case IScalarParameterDefn.TYPE_STRING:
return DataTypeUtil.toString(value);
}
return null;
}","/** 
 * @param p the scalar parameter
 * @param expr the default value expression
 */
protected Object stringToObject(int type,String value) throws BirtException {
  if (value == null) {
    return null;
  }
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
    return DataTypeUtil.toBoolean(value);
case IScalarParameterDefn.TYPE_DATE_TIME:
  return DataTypeUtil.toDate(value);
case IScalarParameterDefn.TYPE_DECIMAL:
return DataTypeUtil.toBigDecimal(value);
case IScalarParameterDefn.TYPE_FLOAT:
return DataTypeUtil.toDouble(value);
case IScalarParameterDefn.TYPE_STRING:
return DataTypeUtil.toString(value);
case IScalarParameterDefn.TYPE_INTEGER:
return DataTypeUtil.toInteger(value);
}
return null;
}",0.9419642857142856
77484,"/** 
 * set parameter choice value. The string value is in English locale, and needs to be parsed back into object value based on the data type. 
 * @param value the string value for the object
 * @param type the parameter data type
 */
public void setValue(String value,int type){
  try {
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
      this.value=DataTypeUtil.toBoolean(value);
    break;
case IScalarParameterDefn.TYPE_DATE_TIME:
  this.value=DataTypeUtil.toDate(value);
break;
case IScalarParameterDefn.TYPE_DECIMAL:
this.value=DataTypeUtil.toBigDecimal(value);
break;
case IScalarParameterDefn.TYPE_FLOAT:
this.value=DataTypeUtil.toDouble(value);
break;
case IScalarParameterDefn.TYPE_STRING:
default :
this.value=DataTypeUtil.toString(value);
break;
}
}
 catch (BirtException e) {
log.log(Level.SEVERE,e.getLocalizedMessage(),e);
this.value=null;
}
}","/** 
 * set parameter choice value. The string value is in English locale, and needs to be parsed back into object value based on the data type. 
 * @param value the string value for the object
 * @param type the parameter data type
 */
public void setValue(String value,int type){
  try {
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
      this.value=DataTypeUtil.toBoolean(value);
    break;
case IScalarParameterDefn.TYPE_DATE_TIME:
  this.value=DataTypeUtil.toDate(value);
break;
case IScalarParameterDefn.TYPE_DECIMAL:
this.value=DataTypeUtil.toBigDecimal(value);
break;
case IScalarParameterDefn.TYPE_FLOAT:
this.value=DataTypeUtil.toDouble(value);
break;
case IScalarParameterDefn.TYPE_INTEGER:
this.value=DataTypeUtil.toInteger(value);
break;
case IScalarParameterDefn.TYPE_STRING:
default :
this.value=DataTypeUtil.toString(value);
break;
}
}
 catch (BirtException e) {
log.log(Level.SEVERE,e.getLocalizedMessage(),e);
this.value=null;
}
}",0.9513395297977036
77485,"public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  if (scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0)   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
 else   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}","public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  if (scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0)   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
 else   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}",0.9833614661200868
77486,"/** 
 * Parameter typer convertion.
 * @param type
 * @return
 */
public static final int getEngineDataType(String type){
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return IScalarParameterDefn.TYPE_BOOLEAN;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    return IScalarParameterDefn.TYPE_DATE_TIME;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
    return IScalarParameterDefn.TYPE_DECIMAL;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    return IScalarParameterDefn.TYPE_FLOAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    return IScalarParameterDefn.TYPE_STRING;
  }
  return IScalarParameterDefn.TYPE_ANY;
}","/** 
 * Parameter typer convertion.
 * @param type
 * @return
 */
public static final int getEngineDataType(String type){
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return IScalarParameterDefn.TYPE_BOOLEAN;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    return IScalarParameterDefn.TYPE_DATE_TIME;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
    return IScalarParameterDefn.TYPE_DECIMAL;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    return IScalarParameterDefn.TYPE_FLOAT;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    return IScalarParameterDefn.TYPE_STRING;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    return IScalarParameterDefn.TYPE_INTEGER;
  }
  return IScalarParameterDefn.TYPE_ANY;
}",0.9239332096474954
77487,"private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    ResultSetColumnHandle selectedColumn=null;
    try {
      BaseQueryDefinition query=(BaseQueryDefinition)DataUtil.getPreparedQuery(engine,getDataSetHandle()).getReportQueryDefn();
      String queryExpr=null;
      for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
        if (column.getColumnName().equals(columnChooser.getText())) {
          queryExpr=DEUtil.getResultSetColumnExpression(column.getColumnName());
          selectedColumn=column;
          break;
        }
      }
      if (queryExpr == null) {
        return;
      }
      ScriptExpression expression=new ScriptExpression(queryExpr);
      String columnBindingName=""String_Node_Str"";
      query.addResultSetExpression(columnBindingName,expression);
      IPreparedQuery preparedQuery=engine.prepare((IQueryDefinition)query);
      IQueryResults results=preparedQuery.execute(null);
      if (results != null) {
        IResultIterator iter=results.getResultIterator();
        if (iter != null) {
          DateFormatter formatter=new DateFormatter(DATE_TIME_PATTERN);
          while (iter.next()) {
            String result=null;
            if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(selectedColumn.getDataType())) {
              result=formatter.format(iter.getDate(columnBindingName));
            }
 else {
              result=iter.getString(columnBindingName);
            }
            if (!StringUtil.isBlank(result) && !resultList.contains(result)) {
              resultList.add(result);
            }
          }
        }
        results.close();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      valueList.removeAll();
      valueList.deselectAll();
      updateButtons();
    }
    filteValues();
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}","private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    ResultSetColumnHandle selectedColumn=null;
    try {
      BaseQueryDefinition query=(BaseQueryDefinition)DataUtil.getPreparedQuery(engine,getDataSetHandle()).getReportQueryDefn();
      String queryExpr=null;
      for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
        if (column.getColumnName().equals(columnChooser.getText())) {
          queryExpr=DEUtil.getResultSetColumnExpression(column.getColumnName());
          selectedColumn=column;
          break;
        }
      }
      if (queryExpr == null) {
        return;
      }
      ScriptExpression expression=new ScriptExpression(queryExpr);
      String columnBindingName=""String_Node_Str"";
      query.addResultSetExpression(columnBindingName,expression);
      IPreparedQuery preparedQuery=engine.prepare((IQueryDefinition)query);
      IQueryResults results=preparedQuery.execute(null);
      if (results != null) {
        IResultIterator iter=results.getResultIterator();
        if (iter != null) {
          DateFormatter formatter=new DateFormatter(DATE_TIME_PATTERN,ULocale.US);
          while (iter.next()) {
            String result=null;
            if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(selectedColumn.getDataType())) {
              result=formatter.format(iter.getDate(columnBindingName));
            }
 else {
              result=iter.getString(columnBindingName);
            }
            if (!StringUtil.isBlank(result) && !resultList.contains(result)) {
              resultList.add(result);
            }
          }
        }
        results.close();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      valueList.removeAll();
      valueList.deselectAll();
      updateButtons();
    }
    filteValues();
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}",0.9972657220979368
77488,"/** 
 * Constructor
 */
public HTMLTextParser(){
  try {
    Properties props=new Properties();
    props.load(getClass().getResourceAsStream(""String_Node_Str""));
    tidy.setConfigurationFromProps(props);
    supportAllTags=true;
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,ex.getMessage(),ex);
  }
}","/** 
 * Constructor
 */
public HTMLTextParser(){
  tidy.setConfigurationFromProps(props);
  supportAllTags=true;
}",0.5314685314685315
77489,"protected void initializeGraphicalViewer(){
  super.initializeGraphicalViewer();
  GraphicalViewer viewer=getGraphicalViewer();
  if (getModel() != null) {
    getGraphicalViewer().setContents(getModel());
    hookModelEventManager(getModel());
  }
  viewer.addDropTargetListener(createTemplateTransferDropTargetListener(viewer));
}","protected void initializeGraphicalViewer(){
  super.initializeGraphicalViewer();
  GraphicalViewer viewer=getGraphicalViewer();
  if (getModel() != null) {
    setContents();
    hookModelEventManager(getModel());
  }
  viewer.addDropTargetListener(createTemplateTransferDropTargetListener(viewer));
}",0.9510268562401264
77490,"/** 
 * @see org.eclipse.gef.ui.parts.GraphicalEditor#initializeGraphicalViewer()
 */
protected void initializeGraphicalViewer(){
  super.initializeGraphicalViewer();
  setViewContentsAsMasterPage();
}","/** 
 * @see org.eclipse.gef.ui.parts.GraphicalEditor#initializeGraphicalViewer()
 */
protected void initializeGraphicalViewer(){
  super.initializeGraphicalViewer();
}",0.9105691056910568
77491,"protected boolean hasNextRow() throws DataException {
  this.odiResult.last(lowestGroupLevel);
  return odiResult.next();
}","protected boolean hasNextRow() throws DataException {
  this.odiResult.last(lowestGroupLevel);
  boolean result=odiResult.next();
  if (result)   cachedStartingGroupLevel=odiResult.getStartingGroupLevel();
  return result;
}",0.6685878962536023
77492,"/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param useDetails
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(IServiceForResultSet rService,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Scriptable scope) throws DataException {
  super(rService,odiResult,scope);
  this.lowestGroupLevel=rService.getQueryDefn().getGroups().size();
  this.currRowIndex=-1;
}","/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param useDetails
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(IServiceForResultSet rService,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Scriptable scope) throws DataException {
  super(rService,odiResult,scope);
  this.lowestGroupLevel=rService.getQueryDefn().getGroups().size();
  this.currRowIndex=-1;
  this.cachedStartingGroupLevel=0;
}",0.9600912200684152
77493,"public boolean next() throws DataException {
  if (this.exprResultSet.getCurrentIndex() >= 0)   exprResultSet.skipToEnd(lowestGroupLevel);
  boolean hasNext=super.next();
  if (hasNext)   currRowIndex++;
  return hasNext;
}","public boolean next() throws DataException {
  if (this.exprResultSet.getCurrentIndex() >= 0)   exprResultSet.skipToEnd(lowestGroupLevel);
  boolean hasNext=super.next();
  if (hasNext) {
    currRowIndex++;
    cachedStartingGroupLevel=exprResultSet.getStartingGroupLevel();
  }
  return hasNext;
}",0.8544061302681992
77494,"/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(DataEngineContext context,IQueryResults queryResults,String queryResultID,int lowestGroupLevel) throws DataException {
  super(context,queryResults,queryResultID);
  this.lowestGroupLevel=lowestGroupLevel;
  this.currRowIndex=-1;
}","/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(DataEngineContext context,IQueryResults queryResults,String queryResultID,int lowestGroupLevel) throws DataException {
  super(context,queryResults,queryResultID);
  this.lowestGroupLevel=lowestGroupLevel;
  this.currRowIndex=-1;
  this.cachedStartingGroupLevel=0;
}",0.9551856594110116
77495,"public void testAddDataSet() throws Exception {
  openDesign(filename);
  JointDataSetHandle jointds=designHandle.findJointDataSet(""String_Node_Str"");
  jointds.addDataSet(""String_Node_Str"");
  jointds.addDataSet(""String_Node_Str"");
  assertEquals(2,jointds.getListProperty(JointDataSet.DATA_SETS_PROP).size());
  jointds.removeDataSet(""String_Node_Str"");
  assertEquals(1,jointds.getListProperty(JointDataSet.DATA_SETS_PROP).size());
}","public void testAddDataSet() throws Exception {
  openDesign(filename);
  JointDataSetHandle jointds=designHandle.findJointDataSet(""String_Node_Str"");
  jointds.addDataSet(""String_Node_Str"");
  assertEquals(3,jointds.getListProperty(JointDataSet.DATA_SETS_PROP).size());
  jointds.removeDataSet(""String_Node_Str"");
  assertEquals(2,jointds.getListProperty(JointDataSet.DATA_SETS_PROP).size());
}",0.6546329723225031
77496,"public void testJointDataSetType() throws Exception {
  openDesign(filename1);
  JointDataSetHandle jointds1=designHandle.findJointDataSet(""String_Node_Str"");
  jointds1.addDataSet(""String_Node_Str"");
  jointds1.addDataSet(""String_Node_Str"");
  assertEquals(2,jointds1.getListProperty(JointDataSet.DATA_SETS_PROP).size());
  JointDataSetHandle jointds2=designHandle.findJointDataSet(""String_Node_Str"");
  jointds2.addDataSet(""String_Node_Str"");
  jointds2.addDataSet(""String_Node_Str"");
  assertEquals(2,jointds2.getListProperty(JointDataSet.DATA_SETS_PROP).size());
  JointDataSetHandle jointds3=designHandle.findJointDataSet(""String_Node_Str"");
  jointds3.addDataSet(""String_Node_Str"");
  assertEquals(1,jointds3.getListProperty(JointDataSet.DATA_SETS_PROP).size());
  Iterator joinConditionsIterator=jointds3.joinConditionsIterator();
  JoinConditionHandle joinConditionHandle=(JoinConditionHandle)joinConditionsIterator.next();
  joinConditionHandle.setLeftDataSet(""String_Node_Str"");
  joinConditionHandle.setLeftDataSet(""String_Node_Str"");
}","public void testJointDataSetType() throws Exception {
  openDesign(filename1);
  JointDataSetHandle jointds1=designHandle.findJointDataSet(""String_Node_Str"");
  jointds1.addDataSet(""String_Node_Str"");
  jointds1.addDataSet(""String_Node_Str"");
  assertEquals(2,jointds1.getListProperty(JointDataSet.DATA_SETS_PROP).size());
  JointDataSetHandle jointds2=designHandle.findJointDataSet(""String_Node_Str"");
  jointds2.addDataSet(""String_Node_Str"");
  jointds2.addDataSet(""String_Node_Str"");
  assertEquals(2,jointds2.getListProperty(JointDataSet.DATA_SETS_PROP).size());
  JointDataSetHandle jointds3=designHandle.findJointDataSet(""String_Node_Str"");
  jointds3.addDataSet(""String_Node_Str"");
  assertEquals(1,jointds3.getListProperty(JointDataSet.DATA_SETS_PROP).size());
}",0.8475509080902587
77497,"/** 
 * Gets symbolic name of this module if defined. This property is needed when search resources in fragments. Usually it should be the plug-in id of the host plug-in.
 * @return 
 */
public String getSymbolicName(){
  return this.getStringProperty(SYMBOLIC_NAME_PROP);
}","/** 
 * Gets symbolic name of this module if defined. This property is needed when search resources in fragments. Usually it should be the plug-in id of the host plug-in.
 * @return
 */
public String getSymbolicName(){
  return this.getStringProperty(SYMBOLIC_NAME_PROP);
}",0.9981718464351006
77498,"/** 
 * Reloads all libraries this module included. <p> Call this method cautiously ONLY on the condition that the library file is REALLY changed outside. After reload successfully, the command stack is cleared.  {@link #reloadLibrary(LibraryHandle)}
 * @throws SemanticException 
 * @throws DesignFileException 
 */
public void reloadLibraries() throws SemanticException, DesignFileException {
  for (Iterator iter=getLibraries().iterator(); iter.hasNext(); ) {
    LibraryHandle library=(LibraryHandle)iter.next();
    reloadLibrary(library);
  }
}","/** 
 * Reloads all libraries this module included. <p> Call this method cautiously ONLY on the condition that the library file is REALLY changed outside. After reload successfully, the command stack is cleared.  {@link #reloadLibrary(LibraryHandle)}
 * @throws SemanticException
 * @throws DesignFileException
 */
public void reloadLibraries() throws SemanticException, DesignFileException {
  for (Iterator iter=getLibraries().iterator(); iter.hasNext(); ) {
    LibraryHandle library=(LibraryHandle)iter.next();
    reloadLibrary(library);
  }
}",0.9981785063752276
77499,"/** 
 * Sets symbolic name of this module. This property is needed when search resources in fragments. Usually it should be the plug-in id of the host plug-in.
 * @param symbolicName 
 * @throws SemanticException 
 */
public void setSymbolicName(String symbolicName) throws SemanticException {
  setStringProperty(SYMBOLIC_NAME_PROP,symbolicName);
}","/** 
 * Sets symbolic name of this module. This property is needed when search resources in fragments. Usually it should be the plug-in id of the host plug-in.
 * @param symbolicName
 * @throws SemanticException
 */
public void setSymbolicName(String symbolicName) throws SemanticException {
  setStringProperty(SYMBOLIC_NAME_PROP,symbolicName);
}",0.9971264367816092
77500,"public boolean isDelete(){
  boolean bool=false;
  if (getModel() instanceof DesignElementHandle) {
    if (!(getModel() instanceof ModuleHandle)) {
      bool=((DesignElementHandle)getModel()).getContainer() == null;
    }
  }
  return bool;
}","public boolean isDelete(){
  boolean bool=false;
  if (getModel() instanceof DesignElementHandle) {
    if (!(getModel() instanceof ModuleHandle)) {
      bool=((DesignElementHandle)getModel()).getContainer() == null || ((DesignElementHandle)getModel()).getRoot() == null;
    }
  }
  return bool;
}",0.8987108655616943
77501,"private boolean matchType(ResultSetColumnHandle column){
  if (style.equals(DesignChoiceConstants.PARAM_TYPE_STRING) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(column.getDataType())) {
    return true;
  }
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT) || style.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL);
  }
  return false;
}","private boolean matchType(ResultSetColumnHandle column){
  if (style.equals(DesignChoiceConstants.PARAM_TYPE_STRING) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(column.getDataType())) {
    return true;
  }
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL) || style.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER);
  }
  return false;
}",0.932258064516129
77502,"private String format(String string){
  if (canBeNull() && string == null) {
    return LABEL_NULL;
  }
  if (StringUtil.isBlank(string) || formatCategroy == null) {
    return string;
  }
  try {
    String pattern=formatPattern;
    if (formatPattern == null) {
      if (DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM.equals(formatCategroy) || DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM.equals(formatCategroy) || DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM.equals(formatCategroy)) {
        return string;
      }
      pattern=formatCategroy;
    }
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      DateFormatter formatter=new DateFormatter(STANDARD_DATE_TIME_PATTERN);
      Date date=formatter.parse(string);
      formatter.applyPattern(pattern);
      string=formatter.format(date);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
      string=new NumberFormatter(pattern).format(DataTypeUtil.toDouble(string).doubleValue());
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType())) {
      string=new NumberFormatter(pattern).format(DataTypeUtil.toBigDecimal(string));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
      string=new StringFormatter(pattern).format(string);
    }
  }
 catch (  BirtException e) {
  }
catch (  ParseException e) {
  }
  return string;
}","private String format(String string){
  if (canBeNull() && string == null) {
    return LABEL_NULL;
  }
  if (StringUtil.isBlank(string) || formatCategroy == null) {
    return string;
  }
  try {
    String pattern=formatPattern;
    if (formatPattern == null) {
      if (DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM.equals(formatCategroy) || DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM.equals(formatCategroy) || DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM.equals(formatCategroy)) {
        return string;
      }
      pattern=formatCategroy;
    }
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      Date date=DataTypeUtil.toDate(string,ULocale.US);
      DateFormatter formatter=new DateFormatter(pattern);
      string=formatter.format(date);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
      string=new NumberFormatter(pattern).format(DataTypeUtil.toDouble(string).doubleValue());
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType())) {
      string=new NumberFormatter(pattern).format(DataTypeUtil.toBigDecimal(string));
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
      string=new StringFormatter(pattern).format(string);
    }
  }
 catch (  BirtException e) {
  }
  return string;
}",0.9215547703180212
77503,"private String convertToStandardFormat(String string){
  if (string != null && DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
    try {
      string=new DateFormatter(STANDARD_DATE_TIME_PATTERN).format(DataTypeUtil.toDate(string,ULocale.US));
    }
 catch (    BirtException e) {
    }
  }
  return string;
}","private String convertToStandardFormat(String string){
  if (string != null && DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
    try {
      string=new DateFormatter(STANDARD_DATE_TIME_PATTERN,ULocale.US).format(DataTypeUtil.toDate(string,ULocale.US));
    }
 catch (    BirtException e) {
    }
  }
  return string;
}",0.9838945827232796
77504,"private boolean isDefaultChoice(SelectionChoice choice){
  String choiceValue=choice.getValue();
  String defaultValue=convertToStandardFormat(this.defaultValue);
{
    if (canBeNull() && choiceValue == null && defaultValue == null) {
      return true;
    }
    return choiceValue != null && isEqual(choiceValue,defaultValue);
  }
}","private boolean isDefaultChoice(SelectionChoice choice){
  String choiceValue=choice.getValue();
  String defaultValue=convertToStandardFormat(this.defaultValue);
  if (canBeNull() && choiceValue == null && defaultValue == null) {
    return true;
  }
  return choiceValue != null && isEqual(choiceValue,defaultValue);
}",0.7767584097859327
77505,"/** 
 * @param request
 */
protected void handlerLoadMasterPage(ReportRequest request){
  Object handle=request.getSelectionModelList().get(0);
  if (getGraphicalViewer().getContents().getModel() != handle) {
    getGraphicalViewer().setContents(handle);
  }
}","/** 
 * @param request
 */
protected void handlerLoadMasterPage(ReportRequest request){
  Object handle=request.getSelectionModelList().get(0);
  if (getGraphicalViewer().getContents().getModel() != handle) {
    getGraphicalViewer().setContents(handle);
    hookModelEventManager(handle);
  }
}",0.9369369369369368
77506,"/** 
 * Hook the root.
 * @param obj
 */
public void hookRoot(Object obj){
  if (root == obj) {
    return;
  }
  unhookRoot(root);
  listenerList.clear();
  if (obj instanceof DesignElementHandle) {
    getListenerElementVisitor().addListener((DesignElementHandle)obj);
  }
  this.root=obj;
}","/** 
 * Hook the root.
 * @param obj
 */
public void hookRoot(Object obj){
  if (root == obj) {
    return;
  }
  unhookRoot(root);
  if (obj instanceof DesignElementHandle) {
    getListenerElementVisitor().addListener(((DesignElementHandle)obj).getModuleHandle());
  }
  this.root=obj;
}",0.6288659793814433
77507,"/** 
 * @param focus
 * @param info
 */
protected void contentChange(Object focus,Map info){
  if (getViewer() == null || !getViewer().getControl().isVisible()) {
    return;
  }
  Object obj=getViewer().getEditPartRegistry().get(focus);
  if (obj instanceof ReportElementEditPart && !((ReportElementEditPart)obj).isDelete()) {
    ((ReportElementEditPart)obj).contentChange(info);
    return;
  }
  List temp=new ArrayList();
  getEditPartsFormModel(this,focus,temp);
  int size=temp.size();
  for (int i=0; i < size; i++) {
    Object part=temp.get(i);
    if (part instanceof ReportElementEditPart && !((ReportElementEditPart)part).isDelete()) {
      ((ReportElementEditPart)part).contentChange(info);
    }
  }
}","/** 
 * @param focus
 * @param info
 */
protected void contentChange(Object focus,Map info){
  if (getViewer() == null) {
    return;
  }
  Object obj=getViewer().getEditPartRegistry().get(focus);
  if (obj instanceof ReportElementEditPart && !((ReportElementEditPart)obj).isDelete()) {
    ((ReportElementEditPart)obj).contentChange(info);
    return;
  }
  List temp=new ArrayList();
  getEditPartsFormModel(this,focus,temp);
  int size=temp.size();
  for (int i=0; i < size; i++) {
    Object part=temp.get(i);
    if (part instanceof ReportElementEditPart && !((ReportElementEditPart)part).isDelete()) {
      ((ReportElementEditPart)part).contentChange(info);
    }
  }
}",0.9705671213208902
77508,"/** 
 * @param focus
 * @param info
 */
protected void propertyChange(Object focus,Map info){
  Object obj=getViewer().getEditPartRegistry().get(focus);
  if (obj instanceof ReportElementEditPart && !((ReportElementEditPart)obj).isDelete()) {
    ((ReportElementEditPart)obj).propertyChange(info);
    return;
  }
  List temp=new ArrayList();
  getEditPartsFormModel(this,focus,temp);
  int size=temp.size();
  for (int i=0; i < size; i++) {
    Object part=temp.get(i);
    if (part instanceof ReportElementEditPart && !((ReportElementEditPart)part).isDelete()) {
      ((ReportElementEditPart)part).propertyChange(info);
    }
  }
}","/** 
 * @param focus
 * @param info
 */
protected void propertyChange(Object focus,Map info){
  if (getViewer() == null) {
    return;
  }
  Object obj=getViewer().getEditPartRegistry().get(focus);
  if (obj instanceof ReportElementEditPart && !((ReportElementEditPart)obj).isDelete()) {
    ((ReportElementEditPart)obj).propertyChange(info);
    return;
  }
  List temp=new ArrayList();
  getEditPartsFormModel(this,focus,temp);
  int size=temp.size();
  for (int i=0; i < size; i++) {
    Object part=temp.get(i);
    if (part instanceof ReportElementEditPart && !((ReportElementEditPart)part).isDelete()) {
      ((ReportElementEditPart)part).propertyChange(info);
    }
  }
}",0.9657273419649656
77509,"public void run(){
  runModelChange();
  notifyModelChange(getFocus());
}","public void run(){
  if (isDispose()) {
    return;
  }
  runModelChange();
  notifyModelChange(getFocus());
}",0.7978142076502732
77510,"private boolean isEqual(String value1,String value2){
  Object v1=null;
  Object v2=null;
  try {
    v1=getValue(value1);
    v2=getValue(value2);
  }
 catch (  BirtException e) {
  }
  if (v1 == null) {
    return v2 == null;
  }
  if (v1 instanceof Double && v2 instanceof Double) {
    return ((Double)v1).compareTo(v2) == 0;
  }
  if (v1 instanceof BigDecimal && v2 instanceof BigDecimal) {
    return ((BigDecimal)v1).compareTo(v2) == 0;
  }
  if (v1 instanceof Integer && v2 instanceof Integer) {
    return ((Integer)v1).compareTo(v2) == 0;
  }
  return v1.equals(v2);
}","private boolean isEqual(String value1,String value2){
  Object v1=null;
  Object v2=null;
  try {
    v1=getValue(value1);
    v2=getValue(value2);
  }
 catch (  BirtException e) {
  }
  if (v1 == null) {
    return v2 == null;
  }
  if (v1 instanceof Double && v2 instanceof Double) {
    return ((Double)v1).compareTo((Double)v2) == 0;
  }
  if (v1 instanceof BigDecimal && v2 instanceof BigDecimal) {
    return ((BigDecimal)v1).compareTo((BigDecimal)v2) == 0;
  }
  if (v1 instanceof Integer && v2 instanceof Integer) {
    return ((Integer)v1).compareTo((Integer)v2) == 0;
  }
  return v1.equals(v2);
}",0.9755274261603376
77511,"private int getErrorLIine(){
  IEditorInput input=getEditorInput();
  if (!(input instanceof IPathEditorInput)) {
    return 0;
  }
  IPath path=((IPathEditorInput)input).getPath();
  try {
    if (path.toOSString().endsWith(IReportEditorContants.LIBRARY_FILE_EXTENTION)) {
      try {
        SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(path.toOSString());
      }
 catch (      DesignFileException e) {
        return getExpetionErrorLine(e);
      }
    }
 else {
      try {
        SessionHandleAdapter.getInstance().getSessionHandle().openDesign(path.toOSString(),new FileInputStream(path.toFile()));
      }
 catch (      DesignFileException e) {
        return getExpetionErrorLine(e);
      }
    }
  }
 catch (  FileNotFoundException e) {
    return 0;
  }
  return -1;
}","private int getErrorLIine(){
  IEditorInput input=getEditorInput();
  if (!(input instanceof IPathEditorInput)) {
    return 0;
  }
  IPath path=((IPathEditorInput)input).getPath();
  try {
    if (path.toOSString().endsWith(IReportEditorContants.LIBRARY_FILE_EXTENTION)) {
      LibraryHandle library=null;
      try {
        library=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(path.toOSString());
      }
 catch (      DesignFileException e) {
        return getExpetionErrorLine(e);
      }
 finally {
        if (library != null) {
          library.close();
        }
      }
    }
 else {
      ReportDesignHandle report=null;
      try {
        report=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(path.toOSString(),new FileInputStream(path.toFile()));
      }
 catch (      DesignFileException e) {
        return getExpetionErrorLine(e);
      }
 finally {
        if (report != null) {
          report.close();
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    return 0;
  }
  return -1;
}",0.8257372654155496
77512,"/** 
 * Returns if the property need to be hiden under some cases.
 * @param propName the property name to check
 * @return true if the property need to be hiden under some cases, falseotherwise.
 */
private boolean needHide(String propName){
}","/** 
 * Returns if the property need to be hiden under some cases.
 * @param propName the property name to check
 * @return true if the property need to be hiden under some cases, falseotherwise.
 */
private boolean needHide(String propName){
  if (!(ReportItemHandle.BOOKMARK_PROP.equals(propName) || ReportItemHandle.TOC_PROP.equals(propName) || StyleHandle.PAGE_BREAK_AFTER_PROP.equals(propName)|| StyleHandle.PAGE_BREAK_BEFORE_PROP.equals(propName)|| CellHandle.DROP_PROP.equals(propName)))   return false;
  for (int i=0; i < elements.size(); i++) {
    DesignElementHandle current=((DesignElementHandle)elements.get(i));
    DesignElementHandle container=current.getContainer();
    if (CellHandle.DROP_PROP.equals(propName)) {
      if (current instanceof CellHandle) {
        if (container == null) {
          continue;
        }
        if (!(container.getContainer() instanceof GroupHandle))         return true;
      }
    }
 else {
      while (container != null) {
        if (container instanceof MasterPageHandle)         return true;
        container=container.getContainer();
      }
    }
  }
  return false;
}",0.3546511627906977
77513,"public void write(byte b[],int off,int len) throws IOException {
  while (len > 0) {
    int ret=currentBuffer.write(b,off,len);
    len-=ret;
    off+=ret;
    if (len > 0)     currentBuffer=getBuffer(currentBuffer.getOffset() + IOUtil.RA_STREAM_BUFFER_LENGTH);
  }
}","public void write(byte b[],int off,int len) throws IOException {
  while (len > 0) {
    int ret=currentBuffer.write(b,off,len);
    len-=ret;
    off+=ret;
    if (len > 0) {
      currentBuffer=getBuffer(currentBuffer.getOffset() + IOUtil.RA_STREAM_BUFFER_LENGTH);
      currentBuffer.setBufCur(0);
    }
  }
}",0.9241379310344828
77514,"/** 
 * Reloads the library with the given library file path. If the library already is included, reload it. If the library is not included, exception will be thrown. <p> Call this method cautiously ONLY on the condition that the library file is REALLY changed outside. After reload successfully, the command stack is cleared.
 * @param libraryToReload the library instance
 * @throws SemanticException if error is encountered when handling <code>IncludeLibrary</code> structure list. Or it maybe because that the given library is not found in the design. Or that the library has descedents in the current module
 * @throws DesignFileException if the library file is not found, or has fatal error.
 */
public void reloadLibrary(LibraryHandle libraryToReload) throws SemanticException, DesignFileException {
  if (libraryToReload == null)   return;
  LibraryCommand command=new LibraryCommand(module);
  command.reloadLibrary(libraryToReload.getLocation());
}","/** 
 * Reloads the library with the given library file path. If the library already is included directly or indirectly(that is, the reload path could be the path of grandson of this module), reload it. If the library is not included, exception will be thrown. <p> Call this method cautiously ONLY on the condition that the library file is REALLY changed outside. After reload successfully, the command stack is cleared.
 * @param reloadPath this is supposed to be an absolute path, not in url form.
 * @throws SemanticException if error is encountered when handling <code>IncludeLibrary</code> structure list. Or it maybe because that the given library is not found in the design. Or that the library has descedents in the current module
 * @throws DesignFileException if the library file is not found, or has fatal error.
 */
public void reloadLibrary(String reloadPath) throws SemanticException, DesignFileException {
  if (StringUtil.isEmpty(reloadPath))   return;
  String path=null;
  try {
    path=new File(reloadPath).toURL().toString();
  }
 catch (  MalformedURLException e) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  LibraryCommand command=new LibraryCommand(module);
  command.reloadLibrary(path);
}",0.6401340594888982
77515,"/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location);
  if (!module.getLibraries().contains(library)) {
    throw new LibraryException(library,new String[]{library == null ? null : library.getNamespace()},LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startSilentTrans(true);
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  LibraryReloadedEvent event=new LibraryReloadedEvent(module.getLibraryByLocation(url.toExternalForm()));
  module.broadcast(event);
  activityStack.commit();
  activityStack.flush();
}","/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location,IAccessControl.ARBITARY_LEVEL);
  if (library == null)   throw new LibraryException(library,null,LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  while (library != null) {
    if (library.getHost() == module)     break;
    library=(Library)library.getHost();
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startSilentTrans(true);
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  LibraryReloadedEvent event=new LibraryReloadedEvent(module.getLibraryByLocation(url.toExternalForm()));
  module.broadcast(event);
  activityStack.commit();
  activityStack.flush();
}",0.9127332601536772
77516,"/** 
 * Get next available buffer for the data from position offset.
 * @param offset
 * @return
 * @throws IOException
 */
private RAStreamBuffer getBuffer(long offset) throws IOException {
  RAStreamBuffer buffer=(RAStreamBuffer)bufferMap.get(offset);
  if (buffer != null)   return buffer;
  if (totalBuffer < IOUtil.MAX_NUMBER_OF_STREAM_BUFFER) {
    buffer=new RAStreamBuffer(this.randomFile);
    buffer.resetBuffer(offset);
    totalBuffer++;
    bufferList.add(buffer);
    bufferMap.put(offset,buffer);
    return buffer;
  }
  buffer=(RAStreamBuffer)bufferList.get(0);
  buffer.flushBuffer();
  bufferMap.remove(buffer.getOffset());
  buffer.resetBuffer(offset);
  bufferMap.put(offset,buffer);
  bufferList.remove(0);
  bufferList.add(buffer);
  return buffer;
}","/** 
 * Get next available buffer for the data from position offset.
 * @param offset
 * @return
 * @throws IOException
 */
private RAStreamBuffer getBuffer(long offset) throws IOException {
  Long offsetKey=new Long(offset);
  RAStreamBuffer buffer=(RAStreamBuffer)bufferMap.get(offsetKey);
  if (buffer != null)   return buffer;
  if (totalBuffer < IOUtil.MAX_NUMBER_OF_STREAM_BUFFER) {
    buffer=new RAStreamBuffer(this.randomFile);
    buffer.resetBuffer(offset);
    totalBuffer++;
    bufferList.add(buffer);
    bufferMap.put(offsetKey,buffer);
    return buffer;
  }
  buffer=(RAStreamBuffer)bufferList.get(0);
  buffer.flushBuffer();
  bufferMap.remove(new Long(buffer.getOffset()));
  buffer.resetBuffer(offset);
  bufferMap.put(offsetKey,buffer);
  bufferList.remove(0);
  bufferList.add(buffer);
  return buffer;
}",0.9575
77517,"/** 
 * Sets the column name.
 * @param columnName the column name to set
 */
public void setColumnName(String columnName){
  setPropertySilently(ColumnHint.COLUMN_NAME_MEMBER,columnName);
}","/** 
 * Sets the column name.
 * @param columnName the column name to set
 * @throws SemanticException value required exception.
 */
public void setColumnName(String columnName) throws SemanticException {
  setProperty(ColumnHint.COLUMN_NAME_MEMBER,columnName);
}",0.8035320088300221
77518,"/** 
 * Sets the aggregateOn expression used to define this computed column.
 * @param aggregateOn the aggregateOn expression to set
 * @deprecated by {@link #setAggregateOn(String)}            
 */
public void setAggregrateOn(String aggregateOn){
  setAggregateOn(aggregateOn);
}","/** 
 * Sets the aggregateOn expression used to define this computed column.
 * @param aggregateOn the aggregateOn expression to set
 * @deprecated by {@link #setAggregateOn(String)}
 */
public void setAggregrateOn(String aggregateOn){
  setAggregateOn(aggregateOn);
}",0.978102189781022
77519,"/** 
 * Sets the expression used to define this computed column.
 * @param expression the expression to set
 */
public void setExpression(String expression){
  setPropertySilently(ComputedColumn.EXPRESSION_MEMBER,expression);
}","/** 
 * Sets the expression used to define this computed column.
 * @param expression the expression to set
 * @throws SemanticException value required exception
 */
public void setExpression(String expression) throws SemanticException {
  setProperty(ComputedColumn.EXPRESSION_MEMBER,expression);
}",0.8326996197718631
77520,"/** 
 * Sets the custom color name.
 * @param name the custom color name to set
 */
public void setName(String name){
  setPropertySilently(CustomColor.NAME_MEMBER,name);
}","/** 
 * Sets the custom color name.
 * @param name the custom color name to set
 * @throws SemanticException value required exception
 */
public void setName(String name) throws SemanticException {
  setProperty(CustomColor.NAME_MEMBER,name);
}",0.7884615384615384
77521,"/** 
 * Sets the color value.
 * @param colorValue the color value to be set.
 */
public void setColor(String colorValue){
  setPropertySilently(CustomColor.COLOR_MEMBER,colorValue);
}","/** 
 * Sets the color value.
 * @param colorValue the color value to be set.
 * @throws SemanticException value required exception
 */
public void setColor(String colorValue) throws SemanticException {
  setProperty(CustomColor.COLOR_MEMBER,colorValue);
}",0.8
77522,"/** 
 * Sets the parameter name.
 * @param name the name to set
 */
public void setName(String name){
  String oldName=getName();
  setPropertySilently(DataSetParameter.NAME_MEMBER,name);
  if (oldName != null) {
    updateParamBindings(oldName,name);
  }
}","/** 
 * Sets the parameter name.
 * @param name the name to set
 * @throws SemanticException value required exception
 */
public void setName(String name) throws SemanticException {
  String oldName=getName();
  setProperty(DataSetParameter.NAME_MEMBER,name);
  if (oldName != null) {
    updateParamBindings(oldName,name);
  }
}",0.8498293515358362
77523,"/** 
 * Sets the embedded image name. This name is used to identify an embedded image by image item.
 * @param name the embedded image name to set
 */
public void setName(String name){
  setPropertySilently(EmbeddedImage.NAME_MEMBER,name);
}","/** 
 * Sets the embedded image name. This name is used to identify an embedded image by image item.
 * @param name the embedded image name to set
 * @throws SemanticException value required exception
 */
public void setName(String name) throws SemanticException {
  setProperty(EmbeddedImage.NAME_MEMBER,name);
}",0.8411552346570397
77524,"/** 
 * Returns the qualified name of this element. The qualified name is the  name of this element if this element is in module user is editing.
 * @return the qualified name of thie element.
 */
public String getQualifiedName(){
  if (getName() == null)   return null;
  Module module=getModule();
  if (module instanceof Library) {
    String namespace=((Library)module).getNamespace();
    return StringUtil.buildQualifiedReference(namespace,getName());
  }
  return getName();
}","/** 
 * Returns the qualified name of this element. The qualified name is the name of this element if this element is in module user is editing.
 * @return the qualified name of thie element.
 */
public String getQualifiedName(){
  if (getName() == null)   return null;
  Module module=getModule();
  if (module instanceof Library) {
    String namespace=((Library)module).getNamespace();
    return StringUtil.buildQualifiedReference(namespace,getName());
  }
  return getName();
}",0.998963730569948
77525,"/** 
 * Sets the filter expression.
 * @param filterExpr the filter expression to set
 * @deprecated Replaced by the method {@link #setExpr(String)}
 */
public void setFilterExpr(String filterExpr){
  setExpr(filterExpr);
}","/** 
 * Sets the filter expression.
 * @param filterExpr the filter expression to set
 * @throws SemanticException value required exception
 * @deprecated Replaced by the method {@link #setExpr(String)}
 */
public void setFilterExpr(String filterExpr) throws SemanticException {
  setExpr(filterExpr);
}",0.8479087452471483
77526,"/** 
 * Sets the filter expression.
 * @param filterExpr the filter expression to set
 */
public void setExpr(String filterExpr){
  setPropertySilently(FilterCondition.EXPR_MEMBER,filterExpr);
}","/** 
 * Sets the filter expression.
 * @param filterExpr the filter expression to set
 * @throws SemanticException value required exception
 */
public void setExpr(String filterExpr) throws SemanticException {
  setProperty(FilterCondition.EXPR_MEMBER,filterExpr);
}",0.808695652173913
77527,"/** 
 * Sets the right expression value of this condition.
 * @param rightExpression the right expression to set
 */
public void setRightExpression(String rightExpression){
  setPropertySilently(JoinCondition.RIGHT_EXPRESSION_MEMBER,rightExpression);
}","/** 
 * Sets the right expression value of this condition.
 * @param rightExpression the right expression to set
 * @throws SemanticException value required exception
 */
public void setRightExpression(String rightExpression) throws SemanticException {
  setProperty(JoinCondition.RIGHT_EXPRESSION_MEMBER,rightExpression);
}",0.8472222222222222
77528,"/** 
 * Sets the left expression value of this condition.
 * @param leftExpression the left expression to set
 */
public void setLeftExpression(String leftExpression){
  setPropertySilently(JoinCondition.LEFT_EXPRESSION_MEMBER,leftExpression);
}","/** 
 * Sets the left expression value of this condition.
 * @param leftExpression the left expression to set
 * @throws SemanticException value required exception
 */
public void setLeftExpression(String leftExpression) throws SemanticException {
  setProperty(JoinCondition.LEFT_EXPRESSION_MEMBER,leftExpression);
}",0.8434163701067615
77529,"/** 
 * Sets the left data set value of this condition.
 * @param leftDataset the left data set to set
 */
public void setLeftDataSet(String leftDataset){
  setPropertySilently(JoinCondition.LEFT_DATASET_MEMBER,leftDataset);
}","/** 
 * Sets the left data set value of this condition.
 * @param leftDataset the left data set to set
 * @throws SemanticException value required exception
 */
public void setLeftDataSet(String leftDataset) throws SemanticException {
  setProperty(JoinCondition.LEFT_DATASET_MEMBER,leftDataset);
}",0.8320610687022901
77530,"/** 
 * Sets the right data set value of this condition.
 * @param rightDataset the right data set to set
 */
public void setRightDataSet(String rightDataset){
  setPropertySilently(JoinCondition.RIGHT_DATASET_MEMBER,rightDataset);
}","/** 
 * Sets the right data set value of this condition.
 * @param rightDataset the right data set to set
 * @throws SemanticException value required exception
 */
public void setRightDataSet(String rightDataset) throws SemanticException {
  setProperty(JoinCondition.RIGHT_DATASET_MEMBER,rightDataset);
}",0.8364312267657993
77531,"public Object visitListItem(ListItemDesign list,Object value){
  BaseQueryDefinition query=prepareVisit(list);
  if (query == null) {
    pushCurrentCondition(true);
    handleListingBand(list.getHeader(),value);
    popCurrentCondition();
    pushCurrentCondition(true);
    handleListingBand(list.getFooter(),value);
    popCurrentCondition();
  }
 else {
    pushReportItemQuery(query);
    transformExpressions(list);
    pushCurrentCondition(true);
    handleListingBand(list.getHeader(),value);
    SlotHandle groupsSlot=((ListHandle)list.getHandle()).getGroups();
    for (int i=0; i < list.getGroupCount(); i++) {
      handleListingGroup(list.getGroup(i),(GroupHandle)groupsSlot.get(i),value);
    }
    popCurrentCondition();
    BandDesign detail=list.getDetail();
    if (detail != null && detail.getContentCount() != 0) {
      query.setUsesDetails(true);
    }
    pushCurrentCondition(false);
    handleListingBand(list.getDetail(),value);
    popCurrentCondition();
    pushCurrentCondition(true);
    handleListingBand(list.getFooter(),value);
    popCurrentCondition();
    popReportItemQuery();
  }
  finishVisit(query);
  return value;
}","public Object visitListItem(ListItemDesign list,Object value){
  BaseQueryDefinition query=prepareVisit(list);
  if (query == null) {
    pushCurrentCondition(true);
    handleListingBand(list.getHeader(),value);
    popCurrentCondition();
    pushCurrentCondition(true);
    handleListingBand(list.getFooter(),value);
    popCurrentCondition();
  }
 else {
    pushReportItemQuery(query);
    transformExpressions(list);
    pushCurrentCondition(true);
    handleListingBand(list.getHeader(),value);
    SlotHandle groupsSlot=((ListHandle)list.getHandle()).getGroups();
    for (int i=0; i < list.getGroupCount(); i++) {
      handleListingGroup(list.getGroup(i),(GroupHandle)groupsSlot.get(i),value);
    }
    popCurrentCondition();
    BandDesign detail=list.getDetail();
    if (detail == null || detail.getContentCount() == 0) {
      query.setUsesDetails(false);
    }
    pushCurrentCondition(false);
    handleListingBand(list.getDetail(),value);
    popCurrentCondition();
    pushCurrentCondition(true);
    handleListingBand(list.getFooter(),value);
    popCurrentCondition();
    popReportItemQuery();
  }
  finishVisit(query);
  return value;
}",0.9658747300215984
77532,"public Object visitTableItem(TableItemDesign table,Object value){
  BaseQueryDefinition query=prepareVisit(table);
  if (query == null) {
    pushCurrentCondition(true);
    handleListingBand(table.getHeader(),value);
    popCurrentCondition();
    pushCurrentCondition(true);
    handleListingBand(table.getFooter(),value);
    popCurrentCondition();
  }
 else {
    transformExpressions(table);
    for (int i=0; i < table.getColumnCount(); i++) {
      handleColumn(table.getColumn(i));
    }
    pushCurrentCondition(true);
    handleListingBand(table.getHeader(),value);
    SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
    for (int i=0; i < table.getGroupCount(); i++) {
      handleListingGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i),value);
    }
    popCurrentCondition();
    BandDesign detail=table.getDetail();
    if (detail != null && detail.getContentCount() != 0) {
      query.setUsesDetails(true);
    }
    pushCurrentCondition(false);
    handleListingBand(table.getDetail(),value);
    popCurrentCondition();
    pushCurrentCondition(true);
    handleListingBand(table.getFooter(),value);
    popCurrentCondition();
  }
  finishVisit(query);
  return value;
}","public Object visitTableItem(TableItemDesign table,Object value){
  BaseQueryDefinition query=prepareVisit(table);
  if (query == null) {
    pushCurrentCondition(true);
    handleListingBand(table.getHeader(),value);
    popCurrentCondition();
    pushCurrentCondition(true);
    handleListingBand(table.getFooter(),value);
    popCurrentCondition();
  }
 else {
    transformExpressions(table);
    for (int i=0; i < table.getColumnCount(); i++) {
      handleColumn(table.getColumn(i));
    }
    pushCurrentCondition(true);
    handleListingBand(table.getHeader(),value);
    SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
    for (int i=0; i < table.getGroupCount(); i++) {
      handleListingGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i),value);
    }
    popCurrentCondition();
    BandDesign detail=table.getDetail();
    if (detail == null || detail.getContentCount() == 0) {
      query.setUsesDetails(false);
    }
    pushCurrentCondition(false);
    handleListingBand(table.getDetail(),value);
    popCurrentCondition();
    pushCurrentCondition(true);
    handleListingBand(table.getFooter(),value);
    popCurrentCondition();
  }
  finishVisit(query);
  return value;
}",0.9674495261639884
77533,"public Object[] getChildren(Object parentElement){
  if (parentElement instanceof File) {
    File file=(File)parentElement;
    if (!file.exists()) {
      return new Object[]{Messages.getString(""String_Node_Str"")};
    }
    if (file.isDirectory()) {
      File[] children=file.listFiles(filter);
      List folderList=new ArrayList();
      List fileList=new ArrayList();
      for (int i=0; i < children.length; i++) {
        if (children[i].isDirectory()) {
          folderList.add(children[i]);
        }
 else {
          fileList.add(children[i]);
        }
      }
      folderList.addAll(fileList);
      return folderList.toArray();
    }
 else {
      try {
        LibraryHandle library=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(file.getAbsolutePath());
        Object[] rtns=super.getChildren(library);
        library.close();
        return rtns;
      }
 catch (      DesignFileException e) {
      }
    }
  }
  return super.getChildren(parentElement);
}","public Object[] getChildren(Object parentElement){
  if (parentElement instanceof File) {
    File file=(File)parentElement;
    if (!file.exists()) {
      return new Object[]{Messages.getString(""String_Node_Str"")};
    }
    if (file.isDirectory()) {
      File[] children=file.listFiles(filter);
      List folderList=new ArrayList();
      List fileList=new ArrayList();
      for (int i=0; i < children.length; i++) {
        if (children[i].isDirectory()) {
          folderList.add(children[i]);
        }
 else {
          fileList.add(children[i]);
        }
      }
      folderList.addAll(fileList);
      return folderList.toArray();
    }
 else {
      LibraryHandle library=null;
      try {
        library=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(file.getAbsolutePath());
        Object[] rtns=super.getChildren(library);
        return rtns;
      }
 catch (      DesignFileException e) {
      }
 finally {
        if (library != null)         library.close();
      }
    }
  }
  return super.getChildren(parentElement);
}",0.9292635658914729
77534,"private void updateFormatField(){
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (defaultValue != null) {
      previewString=format(defaultValue);
    }
 else {
      if (formatCategroy == DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM) {
        displayFormat+=""String_Node_Str"" + formatPattern;
      }
      if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
        previewString=new DateFormatter(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM.equals(formatCategroy) ? formatPattern : formatCategroy,ULocale.getDefault()).format(new Date());
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        previewString=new StringFormatter(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(Messages.getString(""String_Node_Str""));
      }
 else {
        previewString=new NumberFormatter(formatCategroy != DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(123456789.01234);
      }
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(convertNullString(previewString));
  changeFormat.setEnabled(choiceSet != null);
}","private void updateFormatField(){
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(type);
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (defaultValue != null) {
      previewString=format(defaultValue);
    }
 else {
      if (formatCategroy == DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM) {
        displayFormat+=""String_Node_Str"" + formatPattern;
      }
      if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
        previewString=new DateFormatter(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM.equals(formatCategroy) ? formatPattern : formatCategroy,ULocale.getDefault()).format(new Date());
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        previewString=new StringFormatter(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(Messages.getString(""String_Node_Str""));
      }
 else {
        previewString=new NumberFormatter(formatCategroy != DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(123456789.01234);
      }
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(convertNullString(previewString));
  changeFormat.setEnabled(choiceSet != null);
}",0.9930690324369282
77535,"private IChoiceSet getFormatChoiceSet(String type){
  IChoiceSet choiceSet=null;
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    choiceSet=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    choiceSet=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_DATETIME_FORMAT_TYPE);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    choiceSet=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_NUMBER_FORMAT_TYPE);
  }
  return choiceSet;
}","private IChoiceSet getFormatChoiceSet(String type){
  IChoiceSet choiceSet=null;
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    choiceSet=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    choiceSet=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_DATETIME_FORMAT_TYPE);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type) || DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    choiceSet=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_NUMBER_FORMAT_TYPE);
  }
  return choiceSet;
}",0.9606625258799172
77536,"public IResultIterator getResultIterator() throws DataException {
  if (queryService == null)   throw new DataException(ResourceConstants.RESULT_CLOSED);
  if (iterator == null) {
    this.queryService.initAutoBinding();
    this.queryService.validateQueryColumBinding();
    iterator=new ResultIterator(new ResultService(context,this),queryService.executeQuery(),this.queryScope);
  }
  logger.logp(Level.FINE,QueryResults.class.getName(),""String_Node_Str"",""String_Node_Str"");
  return iterator;
}","public IResultIterator getResultIterator() throws DataException {
  if (queryService == null)   throw new DataException(ResourceConstants.RESULT_CLOSED);
  if (iterator == null) {
    this.queryService.initAutoBinding();
    this.queryService.validateQueryColumBinding();
    if (queryService.getQueryDefn().usesDetails() == true)     iterator=new ResultIterator(new ResultService(context,this),queryService.executeQuery(),this.queryScope);
 else     iterator=new ResultIterator2(new ResultService(context,this),queryService.executeQuery(),this.queryScope);
  }
  logger.logp(Level.FINE,QueryResults.class.getName(),""String_Node_Str"",""String_Node_Str"");
  return iterator;
}",0.8498293515358362
77537,"public boolean next() throws BirtException {
  checkStarted();
  boolean hasNext=false;
  if (state == BEFORE_FIRST_ROW) {
    state=ON_ROW;
    hasNext=odiResult.getCurrentResult() != null;
  }
 else {
    hasNext=odiResult.next();
  }
  if (useDetails == false && hasNext) {
    savedStartingGroupLevel=odiResult.getStartingGroupLevel();
    odiResult.last(lowestGroupLevel);
  }
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (!hasNext)   state=AFTER_LAST_ROW;
  return hasNext;
}","public boolean next() throws BirtException {
  checkStarted();
  boolean hasNext=false;
  if (state == BEFORE_FIRST_ROW) {
    state=ON_ROW;
    hasNext=odiResult.getCurrentResult() != null;
  }
 else {
    hasNext=hasNextRow();
  }
  if (hasNext)   this.prepareCurrentRow();
  if (!hasNext)   state=AFTER_LAST_ROW;
  return hasNext;
}",0.6482758620689655
77538,"public int getStartingGroupLevel() throws DataException {
  if (useDetails == false) {
    logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
    return savedStartingGroupLevel;
  }
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
  return odiResult.getStartingGroupLevel();
}","public int getStartingGroupLevel() throws DataException {
  return odiResult.getStartingGroupLevel();
}",0.443010752688172
77539,"public int getRowId() throws BirtException {
  checkStarted();
  if (rowIDUtil == null)   rowIDUtil=new RowIDUtil();
  return rowIDUtil.getRowID(this.odiResult);
}","public int getRowId() throws BirtException {
  checkStarted();
  if (rowIDUtil == null)   rowIDUtil=new RowIDUtil();
  return rowIDUtil.getRowID(this.odiResult,getRowIndex());
}",0.9588235294117649
77540,"public int getEndingGroupLevel() throws DataException {
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
  return odiResult.getEndingGroupLevel();
}","public int getEndingGroupLevel() throws DataException {
  return odiResult.getEndingGroupLevel();
}",0.678082191780822
77541,"public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.resultService.getBindingExpr(exprName) == null && this.resultService.getAutoBindingExpr(exprName) == null)   throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  int currRowIndex=this.odiResult.getCurrentResultIndex();
  if (lastRowIndex < currRowIndex) {
    if (bindingColumnsEvalUtil == null) {
      bindingColumnsEvalUtil=new BindingColumnsEvalUtil(this.odiResult,this.scope,this.getRdSaveHelper(),this.resultService.getAllBindingExprs(),this.resultService.getAllAutoBindingExprs());
    }
    lastRowIndex=currRowIndex;
    boundColumnValueMap=bindingColumnsEvalUtil.getColumnsValue();
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}","public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.resultService.getBindingExpr(exprName) == null && this.resultService.getAutoBindingExpr(exprName) == null)   throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  if (this.isFirstRowPepared == false)   this.prepareCurrentRow();
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}",0.707635009310987
77542,"public void moveTo(int rowIndex) throws BirtException {
  checkStarted();
  if (state == BEFORE_FIRST_ROW)   state=ON_ROW;
  int currRowIndex=odiResult.getCurrentResultIndex();
  if (rowIndex < 0 || rowIndex >= this.odiResult.getRowCount())   throw new DataException(ResourceConstants.INVALID_ROW_INDEX,new Integer(rowIndex));
 else   if (rowIndex < currRowIndex)   throw new DataException(ResourceConstants.BACKWARD_SEEK_ERROR);
 else   if (rowIndex == currRowIndex)   return;
  int gapRows=rowIndex - currRowIndex;
  for (int i=0; i < gapRows; i++)   this.next();
}","public void moveTo(int rowIndex) throws BirtException {
  checkStarted();
  if (state == BEFORE_FIRST_ROW) {
    this.prepareCurrentRow();
    state=ON_ROW;
  }
  int currRowIndex=odiResult.getCurrentResultIndex();
  if (rowIndex < 0 || rowIndex >= this.odiResult.getRowCount())   throw new DataException(ResourceConstants.INVALID_ROW_INDEX,new Integer(rowIndex));
 else   if (rowIndex < currRowIndex)   throw new DataException(ResourceConstants.BACKWARD_SEEK_ERROR);
 else   if (rowIndex == currRowIndex)   return;
  int gapRows=rowIndex - currRowIndex;
  for (int i=0; i < gapRows; i++)   this.next();
}",0.9675767918088736
77543,"/** 
 * @param ri
 * @return
 * @throws DataException 
 */
public int getRowID(IResultIterator ri) throws DataException {
  if (mode == -1)   init(ri);
  if (mode == MODE_NORMAL) {
    return ri.getCurrentResultIndex();
  }
 else {
    IResultObject ob=ri.getCurrentResult();
    if (ob == null)     return -1;
 else     return ((Integer)ob.getFieldValue(rowIDPos)).intValue();
  }
}","/** 
 * @param ri
 * @return
 * @throws DataException 
 */
public int getRowID(IResultIterator ri,int currIndex) throws DataException {
  if (mode == -1)   init(ri);
  if (mode == MODE_NORMAL) {
    return currIndex;
  }
 else {
    IResultObject ob=ri.getCurrentResult();
    if (ob == null)     return -1;
 else     return ((Integer)ob.getFieldValue(rowIDPos)).intValue();
  }
}",0.6028833551769331
77544,"private void updateFormatField(){
  String displayFormat;
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    displayFormat=DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM) {
      displayFormat+=""String_Node_Str"" + formatPattern;
    }
  }
  formatField.setText(""String_Node_Str"" + displayFormat);
  changeFormat.setEnabled(choiceSet != null);
  if (selectedParameter != null) {
    doPreview(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern);
  }
}","private void updateFormatField(){
  String displayFormat;
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    displayFormat=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM) {
      displayFormat+=""String_Node_Str"" + formatPattern;
    }
  }
  formatField.setText(""String_Node_Str"" + displayFormat);
  changeFormat.setEnabled(choiceSet != null);
  if (selectedParameter != null) {
    doPreview(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern);
  }
}",0.991616766467066
77545,"private IChoiceSet getFormatChoiceSet(String type){
  IChoiceSet choiceSet=null;
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    choiceSet=DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    choiceSet=DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_DATETIME_FORMAT_TYPE);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    choiceSet=DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_NUMBER_FORMAT_TYPE);
  }
  return choiceSet;
}","private IChoiceSet getFormatChoiceSet(String type){
  IChoiceSet choiceSet=null;
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    choiceSet=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    choiceSet=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_DATETIME_FORMAT_TYPE);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type) || DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    choiceSet=DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_NUMBER_FORMAT_TYPE);
  }
  return choiceSet;
}",0.9284253578732108
77546,"public List getPropertyDefns(){
  if (provider != null)   return provider.getPropertyDefns();
  return super.getPropertyDefns();
}","public List getPropertyDefns(){
  if (provider != null && !(provider instanceof OdaDummyProvider))   return provider.getPropertyDefns();
  return super.getPropertyDefns();
}",0.858085808580858
77547,"protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_ID_PROP.equals(propName)) {
    extensionID=(String)value;
    if (extensionID != null)     provider=ODAProviderFactory.getInstance().createODAProvider(this,extensionID);
 else     provider=null;
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}","protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_ID_PROP.equals(propName)) {
    extensionID=(String)value;
    if (extensionID != null) {
      provider=ODAProviderFactory.getInstance().createODAProvider(this,extensionID);
      if (!provider.isValidODADataSetExtensionID(extensionID))       provider=new OdaDummyProvider(extensionID);
    }
 else     provider=null;
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}",0.8310727496917386
77548,"public void checkExtends(DesignElement parent) throws ExtendsException {
  super.checkExtends(parent);
  if (provider != null)   provider.checkExtends(parent);
 else {
    OdaDataSet odaParent=(OdaDataSet)parent;
    if (odaParent.extensionID != null && !odaParent.extensionID.equals(extensionID))     throw new WrongTypeException(this,parent,WrongTypeException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
    if (extensionID != null && !extensionID.equals(odaParent.extensionID))     throw new WrongTypeException(this,parent,WrongTypeException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
  }
}","public void checkExtends(DesignElement parent) throws ExtendsException {
  super.checkExtends(parent);
  if (provider != null && !(provider instanceof OdaDummyProvider))   provider.checkExtends(parent);
 else {
    OdaDataSet odaParent=(OdaDataSet)parent;
    if (odaParent.extensionID != null && !odaParent.extensionID.equals(extensionID))     throw new WrongTypeException(this,parent,WrongTypeException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
    if (extensionID != null && !extensionID.equals(odaParent.extensionID))     throw new WrongTypeException(this,parent,WrongTypeException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
  }
}",0.9646090534979423
77549,"public List getPropertyDefns(){
  if (provider != null)   return provider.getPropertyDefns();
  return super.getPropertyDefns();
}","public List getPropertyDefns(){
  if (provider != null && !(provider instanceof OdaDummyProvider))   return provider.getPropertyDefns();
  return super.getPropertyDefns();
}",0.858085808580858
77550,"protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_ID_PROP.equals(propName)) {
    extensionID=(String)value;
    if (extensionID != null)     provider=ODAProviderFactory.getInstance().createODAProvider(this,extensionID);
 else     provider=null;
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}","protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_ID_PROP.equals(propName)) {
    extensionID=(String)value;
    if (extensionID != null) {
      provider=ODAProviderFactory.getInstance().createODAProvider(this,extensionID);
      if (!provider.isValidODADataSourceExtensionID(extensionID))       provider=new OdaDummyProvider(extensionID);
    }
 else     provider=null;
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}",0.828009828009828
77551,"public void checkExtends(DesignElement parent) throws ExtendsException {
  super.checkExtends(parent);
  if (provider != null)   provider.checkExtends(parent);
 else {
    OdaDataSource odaParent=(OdaDataSource)parent;
    if (odaParent.extensionID != null && !odaParent.extensionID.equals(extensionID))     throw new WrongTypeException(this,parent,WrongTypeException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
    if (extensionID != null && !extensionID.equals(odaParent.extensionID))     throw new WrongTypeException(this,parent,WrongTypeException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
  }
}","public void checkExtends(DesignElement parent) throws ExtendsException {
  super.checkExtends(parent);
  if (provider != null && !(provider instanceof OdaDummyProvider))   provider.checkExtends(parent);
 else {
    OdaDataSource odaParent=(OdaDataSource)parent;
    if (odaParent.extensionID != null && !odaParent.extensionID.equals(extensionID))     throw new WrongTypeException(this,parent,WrongTypeException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
    if (extensionID != null && !extensionID.equals(odaParent.extensionID))     throw new WrongTypeException(this,parent,WrongTypeException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
  }
}",0.964955175224124
77552,"/** 
 * @param dataEngine
 * @param queryDefn
 * @param dataSetDesign
 * @throws DataException
 */
PreparedOdaDSQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext);
}","/** 
 * @param dataEngine
 * @param queryDefn
 * @param dataSetDesign
 * @throws DataException
 */
PreparedOdaDSQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext != null ? appContext : new HashMap());
}",0.9419152276295132
77553,"public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  return new SPParameterMetaData(getCallableParamMetaData());
}","public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    paramMetaList2.add(paramMetaList1.get(index - 1));
  }
  return new SPParameterMetaData(paramMetaList2);
}",0.4492512479201331
77554,"public void setAppContext(Object context) throws OdaException {
}","public void setAppContext(Object context) throws OdaException {
  if (context instanceof Map) {
    parameterDefn=(IParameterMetaData)(((Map)context).get(""String_Node_Str""));
  }
}",0.5306122448979592
77555,"/** 
 * get paremeter metadata for callableStatement, if metadata is null or data mode is unknown or SQLException is thrown, register output parameter on DatabaseMetadata, else register output paremeter on statement's metadata.
 * @throws OdaException
 */
private void registerOutputParameter() throws OdaException {
  ParameterMetaData metaData=null;
  try {
    metaData=this.callStat.getParameterMetaData();
  }
 catch (  SQLException e) {
    metaData=null;
  }
  try {
    if (metaData != null) {
      for (int index=1; index <= metaData.getParameterCount(); index++) {
        if (metaData.getParameterMode(index) == ParameterMetaData.parameterModeUnknown) {
          registerOnDbMetaData();
          break;
        }
 else         if (metaData.getParameterMode(index) == java.sql.ParameterMetaData.parameterModeOut || metaData.getParameterMode(index) == java.sql.ParameterMetaData.parameterModeInOut)         registerOutParameter(index,metaData.getParameterType(index));
      }
    }
 else     registerOnDbMetaData();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}","/** 
 * get paremeter metadata for callableStatement, if metadata is null or data mode is unknown or SQLException is thrown, register output parameter on DatabaseMetadata, else register output paremeter on statement's metadata.
 * @throws OdaException
 */
private void registerOutputParameter() throws OdaException {
  if (parameterDefn != null) {
    for (int i=0; i < parameterDefn.getParameterCount(); i++) {
      if (parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeOut || parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeInOut) {
        registerOutParameter(i + 1,parameterDefn.getParameterType(i));
      }
    }
  }
}",0.5530260966129927
77556,"private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  List dataSetList=new ArrayList();
  for (Iterator iterator=inputParameter.getModuleHandle().getVisibleDataSets().iterator(); iterator.hasNext(); ) {
    DataSetHandle DataSetHandle=(DataSetHandle)iterator.next();
    dataSetList.add(DataSetHandle.getQualifiedName());
  }
  if (!dataSetList.contains(inputParameter.getDataSetName())) {
    dataSetList.add(0,inputParameter.getDataSetName());
  }
  if (oldList.length != dataSetList.size()) {
    dataSetChooser.setItems((String[])dataSetList.toArray(new String[]{}));
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}","private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  List dataSetList=new ArrayList();
  for (Iterator iterator=inputParameter.getModuleHandle().getVisibleDataSets().iterator(); iterator.hasNext(); ) {
    DataSetHandle DataSetHandle=(DataSetHandle)iterator.next();
    dataSetList.add(DataSetHandle.getQualifiedName());
  }
  if (inputParameter.getDataSetName() != null && !dataSetList.contains(inputParameter.getDataSetName())) {
    dataSetList.add(0,inputParameter.getDataSetName());
  }
  if (oldList.length != dataSetList.size()) {
    dataSetChooser.setItems((String[])dataSetList.toArray(new String[]{}));
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}",0.975072463768116
77557,"/** 
 * Constructs a new instance of the dialog
 */
public ImportValueDialog(String style){
  super(DLG_TITLE);
  Assert.isTrue(DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_PARAM_TYPE).contains(style));
  this.style=style;
}","/** 
 * Constructs a new instance of the dialog
 */
public ImportValueDialog(String style){
  super(DLG_TITLE);
  Assert.isTrue(DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_PARAM_TYPE).contains(style));
  this.style=style;
}",0.9686274509803922
77558,"private void createColumnSelectionArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(2,true));
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite selectionArea=new Composite(composite,SWT.NONE);
  selectionArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  selectionArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE);
  new Label(selectionArea,SWT.NONE).setText(LABEL_SELECT_DATASET);
  dataSetChooser=new Combo(selectionArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  dataSetChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataSetChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String newSelection=dataSetChooser.getText();
      if (!currentDataSetName.equals(newSelection)) {
        currentDataSetName=newSelection;
        refreshColumns();
      }
    }
  }
);
  new Label(selectionArea,SWT.NONE).setText(LABEL_SELECT_COLUMN);
  columnChooser=new Combo(selectionArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  columnChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  columnChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      int newSelectedIndex=columnChooser.getSelectionIndex();
      if (selectedColumnIndex != newSelectedIndex) {
        selectedColumnIndex=newSelectedIndex;
        refreshValues();
      }
    }
  }
);
}","private void createColumnSelectionArea(Composite parent){
  Composite selectionArea=new Composite(parent,SWT.NONE);
  selectionArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  selectionArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(selectionArea,SWT.NONE).setText(LABEL_SELECT_DATASET);
  dataSetChooser=new Combo(selectionArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  dataSetChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataSetChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String newSelection=dataSetChooser.getText();
      if (!currentDataSetName.equals(newSelection)) {
        currentDataSetName=newSelection;
        refreshColumns();
      }
    }
  }
);
  new Label(selectionArea,SWT.NONE).setText(LABEL_SELECT_COLUMN);
  columnChooser=new Combo(selectionArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  columnChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  columnChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      int newSelectedIndex=columnChooser.getSelectionIndex();
      if (selectedColumnIndex != newSelectedIndex) {
        selectedColumnIndex=newSelectedIndex;
        refreshValues();
      }
    }
  }
);
}",0.5377558221594919
77559,"protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    bodyOnly=false;
  }
 else {
    bodyOnly=true;
  }
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=extManager.createEmitter(format,emitterID);
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  if (!bodyOnly) {
    emitter=new HTMLTableLayoutEmitter(emitter,true);
  }
  return emitter;
}","protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    bodyOnly=false;
  }
 else {
    bodyOnly=true;
  }
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=extManager.createEmitter(format,emitterID);
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  if (!bodyOnly) {
    emitter=new HTMLTableLayoutEmitter(emitter,true);
  }
  return emitter;
}",0.9900475984422328
77560,"/** 
 * @param offset the offset of the reportlet to be rendered
 * @throws EngineException throws exception if there is a rendering error
 */
protected void doRenderReportlet(long offset) throws OutOfMemoryError {
  try {
    if (offset != -1) {
      IContentEmitter emitter=createContentEmitter();
      ReportDesignHandle reportDesign=executionContext.getDesign();
      String format=executionContext.getOutputFormat();
      if (""String_Node_Str"".equalsIgnoreCase(format)) {
        IReportExecutor executor=new ReportletReader(executionContext,offset);
        executor=new LocalizedReportExecutor(executionContext,executor);
        executionContext.setExecutor(executor);
        initializeContentEmitter(emitter,executor);
        IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(format);
        OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
        layoutEngine.setPageHandler(handle);
        startRender();
        layoutEngine.layout(executor,emitter,false);
        closeRender();
        executor.close();
      }
 else {
        ReportContentLoader loader=new ReportContentLoader(executionContext);
        IReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
        executor=new LocalizedReportExecutor(executionContext,executor);
        executionContext.setExecutor(executor);
        initializeContentEmitter(emitter,executor);
        startRender();
        loader.loadReportlet(offset,emitter);
        closeRender();
        executor.close();
      }
    }
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}","/** 
 * @param offset the offset of the reportlet to be rendered
 * @throws EngineException throws exception if there is a rendering error
 */
protected void doRenderReportlet(long offset) throws EngineException {
  try {
    if (offset != -1) {
      IContentEmitter emitter=createContentEmitter();
      ReportDesignHandle reportDesign=executionContext.getDesign();
      String format=executionContext.getOutputFormat();
      if (""String_Node_Str"".equalsIgnoreCase(format)) {
        IReportExecutor executor=new ReportletReader(executionContext,offset);
        executor=new LocalizedReportExecutor(executionContext,executor);
        executionContext.setExecutor(executor);
        initializeContentEmitter(emitter,executor);
        IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(format);
        OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
        layoutEngine.setPageHandler(handle);
        startRender();
        layoutEngine.layout(executor,emitter,false);
        closeRender();
        executor.close();
      }
 else {
        ReportContentLoader loader=new ReportContentLoader(executionContext);
        IReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
        executor=new LocalizedReportExecutor(executionContext,executor);
        executionContext.setExecutor(executor);
        initializeContentEmitter(emitter,executor);
        startRender();
        loader.loadReportlet(offset,emitter);
        closeRender();
        executor.close();
      }
    }
  }
 catch (  EngineException e) {
    log.log(Level.SEVERE,""String_Node_Str"",e);
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}",0.9315818281335524
77561,"/** 
 * @param pageNumber the page to be rendered
 * @throws EngineException throws exception if there is a rendering error
 */
protected void doRender(List pageSequences) throws EngineException {
  if (pageSequences.size() == 0) {
    return;
  }
  try {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    IContentEmitter emitter=createContentEmitter();
    String format=executionContext.getOutputFormat();
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      IReportExecutor executor=new ReportPageReader(executionContext,pageSequences,false);
      executor=new LocalizedReportExecutor(executionContext,executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(format);
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutEngine.setPageHandler(handle);
      startRender();
      layoutEngine.layout(executor,emitter,true);
      closeRender();
      executor.close();
    }
 else {
      IReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
      executor=new LocalizedReportExecutor(executionContext,executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      ReportContentLoader loader=new ReportContentLoader(executionContext);
      startRender();
      IRenderOption renderOption=executionContext.getRenderOption();
      if (renderOption instanceof HTMLRenderOption) {
        boolean htmlPagination=((HTMLRenderOption)renderOption).getHtmlPagination();
        bodyOnly=!htmlPagination;
      }
      loader.loadPageRange(pageSequences,bodyOnly,emitter);
      closeRender();
      executor.close();
    }
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}","/** 
 * @param pageNumber the page to be rendered
 * @throws EngineException throws exception if there is a rendering error
 */
protected void doRender(List pageSequences) throws EngineException {
  if (pageSequences.size() == 0) {
    return;
  }
  try {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    IContentEmitter emitter=createContentEmitter();
    String format=executionContext.getOutputFormat();
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      IReportExecutor executor=new ReportPageReader(executionContext,pageSequences,false);
      executor=new LocalizedReportExecutor(executionContext,executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(format);
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutEngine.setPageHandler(handle);
      startRender();
      layoutEngine.layout(executor,emitter,true);
      closeRender();
      executor.close();
    }
 else {
      IReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
      executor=new LocalizedReportExecutor(executionContext,executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      ReportContentLoader loader=new ReportContentLoader(executionContext);
      startRender();
      IRenderOption renderOption=executionContext.getRenderOption();
      if (renderOption instanceof HTMLRenderOption) {
        boolean htmlPagination=((HTMLRenderOption)renderOption).getHtmlPagination();
        bodyOnly=!htmlPagination;
      }
      loader.loadPageRange(pageSequences,bodyOnly,emitter);
      closeRender();
      executor.close();
    }
  }
 catch (  EngineException e) {
    log.log(Level.SEVERE,""String_Node_Str"",e);
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}",0.9589307411907656
77562,"public int getParameterCount() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getParameterCount();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_COUNT_CANNOT_GET,e);
  }
}","public int getParameterCount() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getParameterCount();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_COUNT_CANNOT_GET,e);
  }
catch (  Exception e) {
    throw new JDBCException(ResourceConstants.PARAMETER_COUNT_CANNOT_GET,new SQLException(e.getMessage()));
  }
}",0.8433179723502304
77563,"public int getScale(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getScale(param);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_SCALE_CANNOT_GET,e);
  }
}","public int getScale(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getScale(param);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_SCALE_CANNOT_GET,e);
  }
catch (  Exception e) {
    throw new JDBCException(ResourceConstants.PARAMETER_SCALE_CANNOT_GET,new SQLException(e.getMessage()));
  }
}",0.8418604651162791
77564,"public int isNullable(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    int result=IParameterMetaData.parameterNullableUnknown;
    if (paraMetadata.isNullable(param) == java.sql.ParameterMetaData.parameterNullable)     result=IParameterMetaData.parameterNullable;
 else     if (paraMetadata.isNullable(param) == java.sql.ParameterMetaData.parameterNoNulls)     result=IParameterMetaData.parameterNoNulls;
    return result;
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_NULLABILITY_CANNOT_DETERMINE,e);
  }
}","public int isNullable(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    int result=IParameterMetaData.parameterNullableUnknown;
    if (paraMetadata.isNullable(param) == java.sql.ParameterMetaData.parameterNullable)     result=IParameterMetaData.parameterNullable;
 else     if (paraMetadata.isNullable(param) == java.sql.ParameterMetaData.parameterNoNulls)     result=IParameterMetaData.parameterNoNulls;
    return result;
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_NULLABILITY_CANNOT_DETERMINE,e);
  }
catch (  Exception e) {
    throw new JDBCException(ResourceConstants.PARAMETER_NULLABILITY_CANNOT_DETERMINE,new SQLException(e.getMessage()));
  }
}",0.9033942558746736
77565,"public int getParameterMode(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    int result=IParameterMetaData.parameterModeUnknown;
    if (paraMetadata.getParameterMode(param) == java.sql.ParameterMetaData.parameterModeIn)     result=IParameterMetaData.parameterModeIn;
 else     if (paraMetadata.getParameterMode(param) == java.sql.ParameterMetaData.parameterModeOut)     result=IParameterMetaData.parameterModeOut;
 else     if (paraMetadata.getParameterMode(param) == java.sql.ParameterMetaData.parameterModeInOut)     result=IParameterMetaData.parameterModeInOut;
    return result;
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_MODE_CANNOT_GET,e);
  }
}","public int getParameterMode(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    int result=IParameterMetaData.parameterModeUnknown;
    if (paraMetadata.getParameterMode(param) == java.sql.ParameterMetaData.parameterModeIn)     result=IParameterMetaData.parameterModeIn;
 else     if (paraMetadata.getParameterMode(param) == java.sql.ParameterMetaData.parameterModeOut)     result=IParameterMetaData.parameterModeOut;
 else     if (paraMetadata.getParameterMode(param) == java.sql.ParameterMetaData.parameterModeInOut)     result=IParameterMetaData.parameterModeInOut;
    return result;
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_MODE_CANNOT_GET,e);
  }
catch (  Exception e) {
    throw new JDBCException(ResourceConstants.PARAMETER_MODE_CANNOT_GET,new SQLException(e.getMessage()));
  }
}",0.9256198347107438
77566,"public String getParameterTypeName(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getParameterTypeName(param);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_TYPE_NAME_CANNOT_GET,e);
  }
}","public String getParameterTypeName(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getParameterTypeName(param);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_TYPE_NAME_CANNOT_GET,e);
  }
catch (  Exception e) {
    throw new JDBCException(ResourceConstants.PARAMETER_TYPE_NAME_CANNOT_GET,new SQLException(e.getMessage()));
  }
}",0.8488120950323974
77567,"public int getPrecision(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getPrecision(param);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_PRECISION_CANNOT_GET,e);
  }
}","public int getPrecision(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getPrecision(param);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_PRECISION_CANNOT_GET,e);
  }
catch (  Exception e) {
    throw new JDBCException(ResourceConstants.PARAMETER_PRECISION_CANNOT_GET,new SQLException(e.getMessage()));
  }
}",0.8423423423423423
77568,"public int getParameterType(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getParameterType(param);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_TYPE_CANNOT_GET,e);
  }
}","public int getParameterType(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,ParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paraMetadata);
  try {
    return paraMetadata.getParameterType(param);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PARAMETER_TYPE_CANNOT_GET,e);
  }
catch (  Exception e) {
    throw new JDBCException(ResourceConstants.PARAMETER_TYPE_CANNOT_GET,new SQLException(e.getMessage()));
  }
}",0.8481439820022497
77569,"/** 
 * Add this method according to GUI's requirement.This method is only for temporarily usage.
 * @param dataSetHandle
 * @return
 * @throws SemanticException
 * @deprecated
 */
public static CachedMetaDataHandle getCachedMetaDataHandle(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle.getCachedMetaDataHandle() == null) {
    updateColumnCache(dataSetHandle);
  }
  return dataSetHandle.getCachedMetaDataHandle();
}","/** 
 * Add this method according to GUI's requirement.This method is only for temporarily usage.
 * @param dataSetHandle
 * @return
 * @throws SemanticException
 * @deprecated
 */
public static CachedMetaDataHandle getCachedMetaDataHandle(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle.getCachedMetaDataHandle() == null) {
    updateColumnCache(dataSetHandle,true);
  }
  return dataSetHandle.getCachedMetaDataHandle();
}",0.9944258639910812
77570,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param items
 * @throws SemanticException
 */
public static void updateColumnCache(DataSetHandle dataSetHandle) throws SemanticException {
  DataSessionContext context=null;
  try {
    context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    drSession.refreshMetaData(dataSetHandle);
  }
 catch (  BirtException e) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{e});
  }
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param items
 * @throws SemanticException
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws SemanticException {
  DataSessionContext context=null;
  try {
    context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    drSession.refreshMetaData(dataSetHandle,holdEvent);
  }
 catch (  BirtException e) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{e});
  }
}",0.9775641025641024
77571,"/** 
 * Get the metadata information from the specified DataSetHandle. It will execute a query, force the cached metadata stored in the report design to be updated with the latest data set metadata read from out source. When there is any error in this action, an empty cached metadata will be inserted and an exception will be thrown out. Since This method will change the data of model and it does not process any model change event, it is the responsible of the caller to make sure these events will be properly handled.
 * @param dataSetHandle
 * @return the result metadata of specfied dataSetHandle
 * @throws BirtException
 */
public abstract IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException ;","/** 
 * This method basically shares the same function as <code> refreshMetaData( DataSetHandle dataSetHandle )</code>, the only difference is the caller of this method will have the control over whether to hold the event or not. It is added largely for the backward compatibility
 * @param dataSetHandle
 * @param holdEvent true if holdEvent, false otherwise
 * @return
 * @throws BirtException
 */
public abstract IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException ;",0.2946357085668535
77572,"public IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).refreshMetaData(dataSetHandle);
}","public IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).refreshMetaData(dataSetHandle,holdEvent);
}",0.9385964912280702
77573,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent) {
      CompaibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}",0.7959558823529411
77574,"protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (documentInUrl)   this.missingParameter=false;
 else   this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
  this.parametersAsString=getParsedParametersAsStringWithDefaultValue(this.parametersAsString,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (documentInUrl)   this.missingParameter=false;
 else   this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
  this.parametersAsString=getParsedParametersAsStringWithDefaultValue(this.parametersAsString,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
  this.displayTexts=getDisplayTexts(this.displayTexts,request);
}",0.9715048975957258
77575,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          String paramValue=configVar.getValue();
          if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName(paramValue);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
          paramName=getParameterName(paramName);
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType())) {
                Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          String paramValue=configVar.getValue();
          if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName(paramValue);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam);
            if (paramName != null) {
              if (this.displayTexts == null)               this.displayTexts=new HashMap();
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName);
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType())) {
                Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}",0.9103623649078194
77576,"public String runReport(IViewerReportDesignHandle design,String outputDocName,InputOptions runOptions,Map parameters) throws ReportServiceException {
  IReportRunnable runnable;
  HttpServletRequest request=(HttpServletRequest)runOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)runOptions.getOption(InputOptions.OPT_LOCALE);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  Map parsedParams=attrBean.getParameters();
  if (parameters != null) {
    parsedParams.putAll(parameters);
  }
  runnable=(IReportRunnable)design.getDesignObject();
  try {
    ReportEngineService.getInstance().runReport(request,runnable,outputDocName,locale,(HashMap)parsedParams);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  return outputDocName;
}","public String runReport(IViewerReportDesignHandle design,String outputDocName,InputOptions runOptions,Map parameters,Map displayTexts) throws ReportServiceException {
  IReportRunnable runnable;
  HttpServletRequest request=(HttpServletRequest)runOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)runOptions.getOption(InputOptions.OPT_LOCALE);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  Map parsedParams=attrBean.getParameters();
  if (parameters != null) {
    parsedParams.putAll(parameters);
  }
  Map displayTextMap=attrBean.getDisplayTexts();
  if (displayTexts != null) {
    displayTextMap.putAll(displayTexts);
  }
  runnable=(IReportRunnable)design.getDesignObject();
  try {
    ReportEngineService.getInstance().runReport(request,runnable,outputDocName,locale,parsedParams,displayTextMap);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  return outputDocName;
}",0.9049350649350648
77577,"public void runAndRenderReport(IViewerReportDesignHandle design,String outputDocName,InputOptions options,Map parameters,OutputStream out,List activeIds) throws ReportServiceException {
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)options.getOption(InputOptions.OPT_RENDER_FORMAT);
  Boolean isRtl=(Boolean)options.getOption(InputOptions.OPT_RTL);
  try {
    IReportRunnable runnable=(IReportRunnable)design.getDesignObject();
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),parameters,isMasterPageContent.booleanValue(),svgFlag.booleanValue());
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
}","public void runAndRenderReport(IViewerReportDesignHandle design,String outputDocName,InputOptions options,Map parameters,OutputStream out,List activeIds,Map displayTexts) throws ReportServiceException {
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)options.getOption(InputOptions.OPT_RENDER_FORMAT);
  Boolean isRtl=(Boolean)options.getOption(InputOptions.OPT_RTL);
  try {
    IReportRunnable runnable=(IReportRunnable)design.getDesignObject();
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),parameters,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),displayTexts);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
}",0.9856184084372004
77578,"/** 
 * Run report.
 * @param request
 * @param runnable
 * @param archive
 * @param documentName
 * @param locale
 * @param parameters
 * @throws RemoteException
 */
public void runReport(HttpServletRequest request,IReportRunnable runnable,String documentName,Locale locale,HashMap parameters) throws RemoteException {
}","/** 
 * Run report.
 * @param request
 * @param runnable
 * @param archive
 * @param documentName
 * @param locale
 * @param parameters
 * @param displayTexts
 * @throws RemoteException
 */
public void runReport(HttpServletRequest request,IReportRunnable runnable,String documentName,Locale locale,Map parameters,Map displayTexts) throws RemoteException {
}",0.935103244837758
77579,"private void runAndRenderReport(HttpServletRequest request,IReportRunnable runnable,OutputStream outputStream,String format,Locale locale,boolean rtl,Map parameters,boolean masterPage,boolean svgFlag,Boolean embeddable,List activeIds,HTMLRenderContext htmlRenderContext) throws RemoteException {
}","/** 
 * Run and render a report,
 * @param request
 * @param runnable
 * @param outputStream
 * @param locale
 * @param rtl
 * @param parameters
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param htmlRenderContext
 * @param displayTexts
 * @throws RemoteException
 * @throws IOException
 */
private void runAndRenderReport(HttpServletRequest request,IReportRunnable runnable,OutputStream outputStream,String format,Locale locale,boolean rtl,Map parameters,boolean masterPage,boolean svgFlag,Boolean embeddable,List activeIds,HTMLRenderContext htmlRenderContext,Map displayTexts) throws RemoteException {
}",0.6456521739130435
77580,"public static void shutdown(){
  instance=null;
}","/** 
 * Shutdown ReportEngineService, set instance as null
 */
public static void shutdown(){
  instance=null;
}",0.6086956521739131
77581,"/** 
 * Returns the library handle with the given namespace.
 * @param namespace the library namespace
 * @return the library handle with the given namespace
 */
public LibraryHandle getLibrary(String namespace){
  Module library=module.getLibraryWithNamespace(namespace,IModuleNameSpace.DIRECTLY_INCLUDED_LEVEL);
  if (library == null)   return null;
  return (LibraryHandle)library.getHandle(library);
}","/** 
 * Returns the library handle with the given namespace.
 * @param namespace the library namespace
 * @return the library handle with the given namespace
 */
public LibraryHandle getLibrary(String namespace){
  Module library=module.getLibraryWithNamespace(namespace,IModuleNameScope.DIRECTLY_INCLUDED_LEVEL);
  if (library == null)   return null;
  return (LibraryHandle)library.getHandle(library);
}",0.9925925925925926
77582,"/** 
 * Returns all data source handles that this modules and the included modules contain.
 * @return all data source handles that this modules and the includedmodules contain.
 */
public List getAllDataSources(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameSpace.ARBITARY_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns all data source handles that this modules and the included modules contain.
 * @return all data source handles that this modules and the includedmodules contain.
 */
public List getAllDataSources(){
  IModuleNameScope namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameScope.ARBITARY_LEVEL);
  return generateHandleList(elementList);
}",0.9857142857142858
77583,"/** 
 * Returns the libraries this report design includes directly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly.
 */
public List getLibraries(){
  return getLibraries(IModuleNameSpace.DIRECTLY_INCLUDED_LEVEL);
}","/** 
 * Returns the libraries this report design includes directly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly.
 */
public List getLibraries(){
  return getLibraries(IModuleNameScope.DIRECTLY_INCLUDED_LEVEL);
}",0.9933774834437086
77584,"/** 
 * Returns all template parameter definition handles that this modules and the included modules contain.
 * @return all template parameter definition handles that this modules andthe included modules contain.
 */
List getAllTemplateParameterDefinitions(){
  List elementList=module.getModuleNameSpace(Module.TEMPLATE_PARAMETER_NAME_SPACE).getElements(IModuleNameSpace.NATIVE_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns all template parameter definition handles that this modules and the included modules contain.
 * @return all template parameter definition handles that this modules andthe included modules contain.
 */
List getAllTemplateParameterDefinitions(){
  List elementList=module.getModuleNameSpace(Module.TEMPLATE_PARAMETER_NAME_SPACE).getElements(IModuleNameScope.NATIVE_LEVEL);
  return generateHandleList(elementList);
}",0.9930394431554525
77585,"/** 
 * Returns data set handles that are visible to this modules.
 * @return data set handles that are visible to this modules.
 */
public List getVisibleDataSets(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameSpace.NATIVE_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns data set handles that are visible to this modules.
 * @return data set handles that are visible to this modules.
 */
public List getVisibleDataSets(){
  IModuleNameScope namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameScope.NATIVE_LEVEL);
  return generateHandleList(elementList);
}",0.983651226158038
77586,"/** 
 * Returns all data set handles that this modules and the included modules contain.
 * @return all data set handles that this modules and the included modulescontain.
 */
public List getAllDataSets(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameSpace.ARBITARY_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns all data set handles that this modules and the included modules contain.
 * @return all data set handles that this modules and the included modulescontain.
 */
public List getAllDataSets(){
  IModuleNameScope namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameScope.ARBITARY_LEVEL);
  return generateHandleList(elementList);
}",0.9852941176470588
77587,"/** 
 * Returns data source handles that are visible to this modules.
 * @return data source handles that are visible to this modules.
 */
public List getVisibleDataSources(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameSpace.NATIVE_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns data source handles that are visible to this modules.
 * @return data source handles that are visible to this modules.
 */
public List getVisibleDataSources(){
  IModuleNameScope namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameScope.NATIVE_LEVEL);
  return generateHandleList(elementList);
}",0.9841688654353562
77588,"/** 
 * Returns all style element handles that this modules and the included modules contain.
 * @return all style element handles that this modules and the includedmodules contain.
 */
public List getAllStyles(){
  List elementList=module.getModuleNameSpace(Module.STYLE_NAME_SPACE).getElements(IModuleNameSpace.ARBITARY_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns all style element handles that this modules and the included modules contain.
 * @return all style element handles that this modules and the includedmodules contain.
 */
public List getAllStyles(){
  List elementList=module.getModuleNameSpace(Module.STYLE_NAME_SPACE).getElements(IModuleNameScope.ARBITARY_LEVEL);
  return generateHandleList(elementList);
}",0.9946380697050938
77589,"/** 
 * Returns the libraries this report design includes directly or indirectly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly or indirectly.
 */
public List getAllLibraries(){
  return getLibraries(IModuleNameSpace.ARBITARY_LEVEL);
}","/** 
 * Returns the libraries this report design includes directly or indirectly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly or indirectly.
 */
public List getAllLibraries(){
  return getLibraries(IModuleNameScope.ARBITARY_LEVEL);
}",0.9938271604938272
77590,"/** 
 * Draws image at the contentByte
 * @param image		the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  Image img=null;
  TranscoderInput ti=null;
  cb.saveState();
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int imageX=curPos.x + image.getX();
  int imageY=curPos.y + image.getY();
  IImageContent imageContent=((IImageContent)image.getContent());
  try {
    boolean isSvg=false;
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URI:
      if (null == ((IImageContent)image.getContent()).getURI())       return;
    if (imageContent.getURI().endsWith(""String_Node_Str"")) {
      isSvg=true;
      ti=new TranscoderInput(imageContent.getURI());
    }
 else {
      img=Image.getInstance(imageContent.getURI());
    }
  break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
if (null == imageContent.getData()) return;
isSvg=((imageContent.getMIMEType() != null) && imageContent.getMIMEType().equalsIgnoreCase(""String_Node_Str"")) || ((imageContent.getURI() != null) && imageContent.getURI().toLowerCase().endsWith(""String_Node_Str""));
if (isSvg) {
ti=new TranscoderInput(new ByteArrayInputStream(imageContent.getData()));
}
 else {
img=Image.getInstance(imageContent.getData());
}
}
if (!isSvg) {
cb.addImage(img,pdfMeasure(image.getWidth()),0f,0f,pdfMeasure(image.getHeight()),layoutAreaX2PDF(imageX),layoutAreaY2PDF(imageY,image.getHeight()));
}
 else {
try {
if (ti != null) {
double width=pdfMeasure(image.getWidth());
double height=pdfMeasure(image.getHeight());
double x=layoutAreaX2PDF(imageX);
double y=layoutAreaY2PDF(imageY,image.getHeight());
PdfTemplate template=cb.createTemplate(new Float(width).floatValue(),new Float(height).floatValue());
Graphics2D g2=template.createGraphics(new Float(width).floatValue(),new Float(height).floatValue());
PrintTranscoder prm=new PrintTranscoder();
prm.addTranscodingHint(PrintTranscoder.KEY_SCALE_TO_PAGE,new Boolean(true));
prm.transcode(ti,null);
PageFormat pg=new PageFormat();
Paper pp=new Paper();
pp.setSize(width,height);
pp.setImageableArea(0,0,width,height);
pg.setPaper(pp);
prm.print(g2,pg,0);
g2.dispose();
cb.addTemplate(template,new Float(x).floatValue(),new Float(y).floatValue());
}
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
 catch (BadElementException bee) {
logger.log(Level.WARNING,bee.getMessage(),bee);
}
catch (IOException ioe) {
logger.log(Level.WARNING,ioe.getMessage(),ioe);
}
catch (DocumentException de) {
logger.log(Level.WARNING,de.getMessage(),de);
}
catch (Throwable t) {
logger.log(Level.WARNING,t.getMessage(),t);
}
cb.restoreState();
makeBookmark(image,curPos);
handleHyperlinkAction(image,curPos);
}","/** 
 * Draws image at the contentByte
 * @param image		the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  Image img=null;
  TranscoderInput ti=null;
  cb.saveState();
  ContainerPosition curPos;
  if (!containerStack.isEmpty())   curPos=(ContainerPosition)containerStack.peek();
 else   curPos=new ContainerPosition(0,0);
  int imageX=curPos.x + image.getX();
  int imageY=curPos.y + image.getY();
  IImageContent imageContent=((IImageContent)image.getContent());
  try {
    boolean isSvg=false;
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
      if (null == imageContent.getURI())       return;
    if (imageContent.getURI().endsWith(""String_Node_Str"")) {
      isSvg=true;
      ti=new TranscoderInput(new FileInputStream(imageContent.getURI()));
    }
 else {
      img=Image.getInstance(imageContent.getURI());
    }
  break;
case IImageContent.IMAGE_URI:
if (null == imageContent.getURI()) return;
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
isSvg=true;
ti=new TranscoderInput(imageContent.getURI());
}
 else {
img=Image.getInstance(imageContent.getURI());
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
if (null == imageContent.getData()) return;
isSvg=((imageContent.getMIMEType() != null) && imageContent.getMIMEType().equalsIgnoreCase(""String_Node_Str"")) || ((imageContent.getURI() != null) && imageContent.getURI().toLowerCase().endsWith(""String_Node_Str""));
if (isSvg) {
ti=new TranscoderInput(new ByteArrayInputStream(imageContent.getData()));
}
 else {
img=Image.getInstance(imageContent.getData());
}
}
if (!isSvg) {
cb.addImage(img,pdfMeasure(image.getWidth()),0f,0f,pdfMeasure(image.getHeight()),layoutAreaX2PDF(imageX),layoutAreaY2PDF(imageY,image.getHeight()));
}
 else {
try {
if (ti != null) {
double width=pdfMeasure(image.getWidth());
double height=pdfMeasure(image.getHeight());
double x=layoutAreaX2PDF(imageX);
double y=layoutAreaY2PDF(imageY,image.getHeight());
PdfTemplate template=cb.createTemplate(new Float(width).floatValue(),new Float(height).floatValue());
Graphics2D g2=template.createGraphics(new Float(width).floatValue(),new Float(height).floatValue());
PrintTranscoder prm=new PrintTranscoder();
prm.addTranscodingHint(PrintTranscoder.KEY_SCALE_TO_PAGE,new Boolean(true));
prm.transcode(ti,null);
PageFormat pg=new PageFormat();
Paper pp=new Paper();
pp.setSize(width,height);
pp.setImageableArea(0,0,width,height);
pg.setPaper(pp);
prm.print(g2,pg,0);
g2.dispose();
cb.addTemplate(template,new Float(x).floatValue(),new Float(y).floatValue());
}
}
 catch (Exception e) {
e.printStackTrace();
}
}
}
 catch (BadElementException bee) {
logger.log(Level.WARNING,bee.getMessage(),bee);
}
catch (IOException ioe) {
logger.log(Level.WARNING,ioe.getMessage(),ioe);
}
catch (DocumentException de) {
logger.log(Level.WARNING,de.getMessage(),de);
}
catch (Throwable t) {
logger.log(Level.WARNING,t.getMessage(),t);
}
cb.restoreState();
makeBookmark(image,curPos);
handleHyperlinkAction(image,curPos);
}",0.9361774744027304
77591,"/** 
 * @return Returns the imageUri.
 */
public String getImageUri(){
}","/** 
 * @return Returns the imageUri.
 */
public String getImageUri(){
  return imageUri;
}",0.8834355828220859
77592,"/** 
 * Notice the return value of this function is IResultObject. The null value indicates the cursor exceeds the end of result set.
 * @return next result data
 * @throws DataException
 */
public IResultObject next() throws DataException {
  IResultObject ro=this.rowResultSet.next();
  if (ro == null)   return null;
  Object[] objs=new Object[this.resultClass.getFieldCount()];
  int roFieldCount=ro.getResultClass().getFieldCount();
  for (int i=0; i < objs.length; i++) {
    if (i + 1 <= roFieldCount)     objs[i]=ro.getFieldValue(i + 1);
 else     objs[i]=null;
  }
  return new ResultObject(resultClass,objs);
}","/** 
 * Notice the return value of this function is IResultObject. The null value indicates the cursor exceeds the end of result set.
 * @return next result data
 * @throws DataException
 */
public IResultObject next() throws DataException {
  IResultObject ro=this.rowResultSet.next();
  if (ro == null)   return null;
  Object[] objs=new Object[this.resultClass.getFieldCount()];
  if (objs.length > 0) {
    int roFieldCount=ro.getResultClass().getFieldCount();
    for (int i=0; i < objs.length; i++) {
      if (i + 1 <= roFieldCount)       objs[i]=ro.getFieldValue(i + 1);
 else       objs[i]=null;
    }
  }
  return new ResultObject(resultClass,objs);
}",0.9679937548790007
77593,"/** 
 * The first step to work with the cascading parameters. Create the query definition, prepare and execute the query. Cache the iterator of the result set and also cache the IBaseExpression used in the prepare.
 * @param parameterGroupName -the cascading parameter group name
 */
public void evaluateQuery(String parameterGroupName){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (dataCache == null)   dataCache=new HashMap();
  if (parameterGroup == null)   return;
  IResultIterator iterOld=(IResultIterator)dataCache.get(parameterGroup.getName());
  if (iterOld != null) {
    dataCache.remove(parameterGroup.getName());
    try {
      IQueryResults iresultOld=iterOld.getQueryResults();
      iterOld.close();
      iresultOld.close();
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage());
    }
  }
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      DataEngine dteDataEngine=getDataEngine();
      IDataEngine dataEngine=executionContext.getDataEngine();
      dataEngine.defineDataSet(dataSet);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSet.getQualifiedName());
      SlotHandle parameters=parameterGroup.getParameters();
      Iterator iter=parameters.iterator();
      if (labelColumnBindingNames == null)       labelColumnBindingNames=new ArrayList();
      while (iter.hasNext()) {
        Object param=iter.next();
        if (param instanceof ScalarParameterHandle) {
          String valueExpString=((ScalarParameterHandle)param).getValueExpr();
          ScriptExpression valueExpObject=new ScriptExpression(valueExpString);
          String keyValue=VALUE_PREFIX + parameterGroup.getName() + ""String_Node_Str""+ ((ScalarParameterHandle)param).getName();
          queryDefn.addResultSetExpression(keyValue,valueExpObject);
          String labelExpString=((ScalarParameterHandle)param).getLabelExpr();
          if (labelExpString != null && labelExpString.length() > 0) {
            ScriptExpression labelExpObject=new ScriptExpression(labelExpString);
            String keyLabel=LABEL_PREFIX + parameterGroup.getName() + ""String_Node_Str""+ ((ScalarParameterHandle)param).getName();
            labelColumnBindingNames.add(keyLabel);
            queryDefn.addResultSetExpression(keyLabel,labelExpObject);
          }
          GroupDefinition groupDef=new GroupDefinition();
          groupDef.setKeyExpression(valueExpString);
          queryDefn.addGroup(groupDef);
        }
      }
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteDataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator resultIter=result.getResultIterator();
      dataCache.put(parameterGroup.getName(),resultIter);
      return;
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  dataCache.put(parameterGroup.getName(),null);
}","/** 
 * The first step to work with the cascading parameters. Create the query definition, prepare and execute the query. Cache the iterator of the result set and also cache the IBaseExpression used in the prepare.
 * @param parameterGroupName -the cascading parameter group name
 */
public void evaluateQuery(String parameterGroupName){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (dataCache == null)   dataCache=new HashMap();
  if (parameterGroup == null)   return;
  IResultIterator iterOld=(IResultIterator)dataCache.get(parameterGroup.getName());
  if (iterOld != null) {
    dataCache.remove(parameterGroup.getName());
    try {
      IQueryResults iresultOld=iterOld.getQueryResults();
      iterOld.close();
      iresultOld.close();
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage());
    }
  }
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      DataEngine dteDataEngine=getDataEngine();
      IDataEngine dataEngine=executionContext.getDataEngine();
      dataEngine.defineDataSet(dataSet);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSet.getQualifiedName());
      SlotHandle parameters=parameterGroup.getParameters();
      Iterator iter=parameters.iterator();
      if (labelColumnBindingNames == null)       labelColumnBindingNames=new ArrayList();
      while (iter.hasNext()) {
        Object param=iter.next();
        if (param instanceof ScalarParameterHandle) {
          String valueExpString=((ScalarParameterHandle)param).getValueExpr();
          ScriptExpression valueExpObject=new ScriptExpression(valueExpString);
          String keyValue=VALUE_PREFIX + parameterGroup.getName() + ""String_Node_Str""+ ((ScalarParameterHandle)param).getName();
          queryDefn.addResultSetExpression(keyValue,valueExpObject);
          String labelExpString=((ScalarParameterHandle)param).getLabelExpr();
          if (labelExpString != null && labelExpString.length() > 0) {
            ScriptExpression labelExpObject=new ScriptExpression(labelExpString);
            String keyLabel=LABEL_PREFIX + parameterGroup.getName() + ""String_Node_Str""+ ((ScalarParameterHandle)param).getName();
            labelColumnBindingNames.add(keyLabel);
            queryDefn.addResultSetExpression(keyLabel,labelExpObject);
          }
          GroupDefinition groupDef=new GroupDefinition();
          groupDef.setKeyExpression(valueExpString);
          queryDefn.addGroup(groupDef);
        }
      }
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteDataEngine.prepare(queryDefn,this.appContext);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator resultIter=result.getResultIterator();
      dataCache.put(parameterGroup.getName(),resultIter);
      return;
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  dataCache.put(parameterGroup.getName(),null);
}",0.9973553719008263
77594,"/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String pattern,String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder){
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      IDataEngine dataEngine=executionContext.getDataEngine();
      DataEngine dteDataEngine=getDataEngine();
      dataEngine.defineDataSet(dataSet);
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      if (limit > 0) {
        queryDefn.setMaxRows(limit);
      }
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      String labelColumnName=LABEL_PREFIX;
      ;
      String valueColumnName=VALUE_PREFIX;
      ;
      if (labelExpr != null) {
        queryDefn.addResultSetExpression(labelColumnName,labelExpr);
      }
      queryDefn.addResultSetExpression(valueColumnName,valueExpr);
      GroupDefinition groupDef=new GroupDefinition();
      groupDef.setKeyColumn(valueColumnName);
      queryDefn.addGroup(groupDef);
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteDataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelColumnName);
        }
        Object value=iter.getValue(valueColumnName);
        choices.add(new SelectionChoice(label,convertToType(value,dataType)));
        count++;
        if ((limit != 0) && (count >= limit)) {
          break;
        }
        iter.skipToEnd(1);
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(true,pattern,ULocale.forLocale(locale)));
  return choices;
}","/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String pattern,String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder){
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      IDataEngine dataEngine=executionContext.getDataEngine();
      DataEngine dteDataEngine=getDataEngine();
      dataEngine.defineDataSet(dataSet);
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      if (limit > 0) {
        queryDefn.setMaxRows(limit);
      }
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      String labelColumnName=LABEL_PREFIX;
      ;
      String valueColumnName=VALUE_PREFIX;
      ;
      if (labelExpr != null) {
        queryDefn.addResultSetExpression(labelColumnName,labelExpr);
      }
      queryDefn.addResultSetExpression(valueColumnName,valueExpr);
      GroupDefinition groupDef=new GroupDefinition();
      groupDef.setKeyColumn(valueColumnName);
      queryDefn.addGroup(groupDef);
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteDataEngine.prepare(queryDefn,this.appContext);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelColumnName);
        }
        Object value=iter.getValue(valueColumnName);
        choices.add(new SelectionChoice(label,convertToType(value,dataType)));
        count++;
        if ((limit != 0) && (count >= limit)) {
          break;
        }
        iter.skipToEnd(1);
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(true,pattern,ULocale.forLocale(locale)));
  return choices;
}",0.9971408148677628
77595,"/** 
 * set script editor page active
 */
public static void setScriptActivityEditor(){
  if (UIUtil.getActiveReportEditor().findPage(""String_Node_Str"") != null) {
    UIUtil.getActiveReportEditor().setActivePage(""String_Node_Str"");
  }
}","/** 
 * set script editor page active The id must be same with ReportScriptFormPage.ID
 */
public static void setScriptActivityEditor(){
  final String SCRIPT_EDITOR_ID=""String_Node_Str"";
  if (UIUtil.getActiveReportEditor().findPage(SCRIPT_EDITOR_ID) != null) {
    UIUtil.getActiveReportEditor().setActivePage(SCRIPT_EDITOR_ID);
  }
}",0.7073170731707317
77596,"protected void createRoot(){
  super.createRoot();
  removeBoxProperty(root.getStyle());
}","protected void createRoot(){
  super.createRoot();
  IStyle style=root.getStyle();
  removeBoxProperty(root.getStyle());
  style.setProperty(StyleConstants.STYLE_BACKGROUND_IMAGE,IStyle.NONE_VALUE);
  style.setProperty(StyleConstants.STYLE_BACKGROUND_COLOR,IStyle.AUTO_VALUE);
}",0.4891304347826087
77597,"TextArea(ITextContent textContent,String text,FontInfo fi){
  super(textContent);
  this.text=text;
  this.fi=fi;
  style.setMarginBottom(CSSConstants.CSS_NONE_VALUE);
  style.setMarginTop(CSSConstants.CSS_NONE_VALUE);
  style.setMarginLeft(CSSConstants.CSS_NONE_VALUE);
  style.setMarginRight(CSSConstants.CSS_NONE_VALUE);
  style.setBorderBottom(CSSConstants.CSS_NONE_VALUE);
  style.setBorderTop(CSSConstants.CSS_NONE_VALUE);
  style.setBorderLeft(CSSConstants.CSS_NONE_VALUE);
  style.setBorderRight(CSSConstants.CSS_NONE_VALUE);
  style.setPaddingBottom(CSSConstants.CSS_NONE_VALUE);
  style.setPaddingTop(CSSConstants.CSS_NONE_VALUE);
  style.setPaddingLeft(CSSConstants.CSS_NONE_VALUE);
  style.setPaddingRight(CSSConstants.CSS_NONE_VALUE);
}","TextArea(ITextContent textContent,String text,FontInfo fi){
  super(textContent);
  this.text=text;
  this.fi=fi;
  removePadding();
  removeBorder();
  removeMargin();
}",0.3264417845484222
77598,"protected boolean needPageBreakBefore(){
  if (content == null) {
    return false;
  }
  boolean ret=hasMasterPageChanged();
  IStyle style=content.getStyle();
  String pageBreak=style.getPageBreakBefore();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak || IStyle.BIRT_SOFT_VALUE == pageBreak) {
    style.setPageBreakBefore(IStyle.CSS_AUTO_VALUE);
    return true;
  }
  return ret;
}","protected boolean needPageBreakBefore(){
  if (content == null) {
    return false;
  }
  boolean ret=hasMasterPageChanged();
  IStyle style=content.getStyle();
  String pageBreak=style.getPageBreakBefore();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak || IStyle.BIRT_SOFT_VALUE == pageBreak) {
    return true;
  }
  return ret;
}",0.938728323699422
77599,"protected boolean needPageBreakAfter(){
  if (content == null) {
    return false;
  }
  IStyle style=content.getStyle();
  String pageBreak=style.getPageBreakAfter();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak) {
    style.setPageBreakAfter(IStyle.CSS_AUTO_VALUE);
    return true;
  }
  return false;
}","protected boolean needPageBreakAfter(){
  if (content == null) {
    return false;
  }
  IStyle style=content.getStyle();
  String pageBreak=style.getPageBreakAfter();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak) {
    return true;
  }
  return false;
}",0.8366197183098592
77600,"protected boolean needPageBreakBefore(){
  if (content == null) {
    return false;
  }
  boolean ret=hasMasterPageChanged();
  IStyle style=content.getStyle();
  String pageBreak=style.getPageBreakBefore();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak || IStyle.BIRT_SOFT_VALUE == pageBreak) {
    style.setPageBreakBefore(IStyle.CSS_AUTO_VALUE);
    return true;
  }
  return ret;
}","protected boolean needPageBreakBefore(){
  if (content == null) {
    return false;
  }
  boolean ret=hasMasterPageChanged();
  IStyle style=content.getStyle();
  String pageBreak=style.getPageBreakBefore();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak || IStyle.BIRT_SOFT_VALUE == pageBreak) {
    return true;
  }
  return ret;
}",0.938728323699422
77601,"protected boolean needPageBreakAfter(){
  if (content == null) {
    return false;
  }
  IStyle style=content.getStyle();
  String pageBreak=style.getPageBreakAfter();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak) {
    style.setPageBreakAfter(IStyle.CSS_AUTO_VALUE);
    return true;
  }
  return false;
}","protected boolean needPageBreakAfter(){
  if (content == null) {
    return false;
  }
  IStyle style=content.getStyle();
  String pageBreak=style.getPageBreakAfter();
  if (IStyle.CSS_ALWAYS_VALUE == pageBreak || IStyle.CSS_LEFT_VALUE == pageBreak || IStyle.CSS_RIGHT_VALUE == pageBreak) {
    return true;
  }
  return false;
}",0.8366197183098592
77602,"/** 
 * Visits the children nodes of the specific node
 * @param visitor the ITextNodeVisitor instance
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 */
private void processNodes(Element ele,boolean needEscape,HashMap cssStyles,IContent content){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),checkEscapeSpace(node),cssStyles,content);
      }
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),needEscape,cssStyles,content);
      }
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
      addChild(content,label);
      label.setText(node.getNodeValue());
      StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
      inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      Node pNode=node.getParentNode();
      if (pNode != null) {
        if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName()) || ""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setTextUnderline(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setTextLineThrough(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setVerticalAlign(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setVerticalAlign(""String_Node_Str"");
        }
      }
      label.setInlineStyle(inlineStyle);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (supportedHTMLElementTags.contains(node.getNodeName().toUpperCase()) && node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,needEscape,cssStyles,content,++level);
    }
  }
}","/** 
 * Visits the children nodes of the specific node
 * @param visitor the ITextNodeVisitor instance
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 */
private void processNodes(Element ele,boolean needEscape,HashMap cssStyles,IContent content){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),checkEscapeSpace(node),cssStyles,content);
      }
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),needEscape,cssStyles,content);
      }
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
      addChild(content,label);
      label.setText(node.getNodeValue());
      StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
      inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      Node pNode=node.getParentNode();
      if (pNode != null) {
        if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName()) || ""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_UNDERLINE,IStyle.UNDERLINE_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_LINETHROUGH,IStyle.LINE_THROUGH_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.BOTTOM_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.TOP_VALUE);
        }
      }
      label.setInlineStyle(inlineStyle);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (supportedHTMLElementTags.contains(node.getNodeName().toUpperCase()) && node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,needEscape,cssStyles,content,++level);
    }
  }
}",0.9250433275563258
77603,"private void initList(){
  for (Iterator itor=getModuleHandle().imagesIterator(); itor.hasNext(); ) {
    EmbeddedImageHandle handle=(EmbeddedImageHandle)itor.next();
    embeddedImageList.add(handle.getQualifiedName());
  }
  int index=-1;
  if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equals(inputImage.getSource())) {
    String imageName=inputImage.getImageName();
    if (imageName != null) {
      index=embeddedImageList.indexOf(imageName);
    }
  }
  if (index != -1) {
    embeddedImageList.select(index);
    preview();
  }
 else {
    clearPreview();
  }
  updateButtons();
}","private void initList(){
  for (Iterator itor=getModuleHandle().getAllImages().iterator(); itor.hasNext(); ) {
    EmbeddedImageHandle handle=(EmbeddedImageHandle)itor.next();
    embeddedImageList.add(handle.getQualifiedName());
  }
  int index=-1;
  if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equals(inputImage.getSource())) {
    String imageName=inputImage.getImageName();
    if (imageName != null) {
      index=embeddedImageList.indexOf(imageName);
    }
  }
  if (index != -1) {
    embeddedImageList.select(index);
    preview();
  }
 else {
    clearPreview();
  }
  updateButtons();
}",0.9806560134566864
77604,"protected void verticalAlign(CellArea cell){
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  String verticalAlign=content.getComputedStyle().getVerticalAlign();
  if (CSSConstants.CSS_BOTTOM_VALUE.equals(verticalAlign) || CSSConstants.CSS_MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=child.getAllocatedHeight();
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (CSSConstants.CSS_BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
        }
      }
 else       if (CSSConstants.CSS_MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
        }
      }
    }
  }
}","protected void verticalAlign(CellArea cell){
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  CSSValue verticalAlign=content.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=child.getAllocatedHeight();
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
        }
      }
    }
  }
  CSSValue align=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  if ((IStyle.RIGHT_VALUE.equals(align) || IStyle.CENTER_VALUE.equals(align))) {
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      int spacing=cell.getContentWidth() - area.getAllocatedWidth();
      if (spacing > 0) {
        if (IStyle.RIGHT_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
}",0.7243172951885566
77605,"private boolean matchDataType(ResultSetColumnHandle column){
  String type=getSelectedDataType();
  if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(column.getDataType())) {
    return true;
  }
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(column.getDataType())) {
    return type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(column.getDataType())) {
    return type.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(column.getDataType())) {
    return type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(column.getDataType())) {
    return type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT) || type.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL);
  }
  return false;
}","private boolean matchDataType(ResultSetColumnHandle column){
  String type=getSelectedDataType();
  if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(column.getDataType())) {
    return true;
  }
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(column.getDataType())) {
    return type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(column.getDataType())) {
    return type.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(column.getDataType())) {
    return type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(column.getDataType())) {
    return type.equals(DesignChoiceConstants.PARAM_TYPE_INTEGER);
  }
  return false;
}",0.9642285104111052
77606,"/** 
 * Sets the image uri property. The source type is <code>IMAGE_REF_TYPE_URL</code>, and will automatically set in this method.
 * @param uri the uri to be set.
 * @throws SemanticException if the property is locked.
 */
public void setURI(String uri) throws SemanticException {
  String source=DesignChoiceConstants.IMAGE_REF_TYPE_URL;
  setURIProperty(uri,source);
}","/** 
 * Sets the image uri property. The source type is <code>IMAGE_REF_TYPE_URL</code>, and will automatically set in this method.
 * @param uri the uri to be set.
 * @throws SemanticException if the property is locked.
 * @deprecated should use {@link #setFile(String)} or{@link #setURL(String)}.
 */
public void setURI(String uri) throws SemanticException {
  setURL(uri);
}",0.7903871829105474
77607,"public void end() throws SAXException {
  Module module=handler.getModule();
  checkImageType();
  String refType=image.getStringProperty(module,ImageItem.SOURCE_PROP);
  if (DesignChoiceConstants.IMAGE_REF_TYPE_EXPR.equalsIgnoreCase(refType)) {
    String valueExpr=image.getStringProperty(module,ImageItem.VALUE_EXPR_PROP);
    if (StringUtil.isEmpty(valueExpr)) {
      handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_INVALID_IMAGEREF_EXPR_VALUE));
    }
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_URL.equalsIgnoreCase(refType) || DesignChoiceConstants.IMAGE_REF_TYPE_FILE.equalsIgnoreCase(refType)) {
    String uri=image.getStringProperty(module,ImageItem.URI_PROP);
    if (StringUtil.isEmpty(uri)) {
      handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_INVALID_IMAGE_URL_VALUE));
    }
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equalsIgnoreCase(refType)) {
    String name=image.getStringProperty(module,ImageItem.IMAGE_NAME_PROP);
    if (StringUtil.isEmpty(name)) {
      handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_INVALID_IMAGE_NAME_VALUE));
    }
  }
  super.end();
}","public void end() throws SAXException {
  Module module=handler.getModule();
  if (image.getLocalProperty(module,ImageItem.SOURCE_PROP) == null && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 1)   checkImageType();
  String refType=image.getStringProperty(module,ImageItem.SOURCE_PROP);
  if (DesignChoiceConstants.IMAGE_REF_TYPE_EXPR.equalsIgnoreCase(refType)) {
    String valueExpr=image.getStringProperty(module,ImageItem.VALUE_EXPR_PROP);
    if (StringUtil.isEmpty(valueExpr)) {
      handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_INVALID_IMAGEREF_EXPR_VALUE));
    }
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_URL.equalsIgnoreCase(refType) || DesignChoiceConstants.IMAGE_REF_TYPE_FILE.equalsIgnoreCase(refType)) {
    String uri=image.getStringProperty(module,ImageItem.URI_PROP);
    if (StringUtil.isEmpty(uri)) {
      handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_INVALID_IMAGE_URL_VALUE));
    }
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equalsIgnoreCase(refType)) {
    String name=image.getStringProperty(module,ImageItem.IMAGE_NAME_PROP);
    if (StringUtil.isEmpty(name)) {
      handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_INVALID_IMAGE_NAME_VALUE));
    }
  }
  super.end();
}",0.9478743068391868
77608,"/** 
 * Check whether the source type conflicts, and set the proper source type.
 */
private void checkImageType(){
  int type=0;
  Module module=handler.getModule();
  String uri=(String)image.getLocalProperty(module,ImageItem.URI_PROP);
  if (!StringUtil.isEmpty(uri)) {
    setProperty(ImageItem.SOURCE_PROP,DesignChoiceConstants.IMAGE_REF_TYPE_URL);
    type++;
  }
  StructRefValue imageName=(StructRefValue)image.getLocalProperty(module,ImageItem.IMAGE_NAME_PROP);
  if (imageName != null) {
    setProperty(ImageItem.SOURCE_PROP,DesignChoiceConstants.IMAGE_REF_TYPE_EMBED);
    type++;
  }
  String typeExpr=(String)image.getLocalProperty(module,ImageItem.TYPE_EXPR_PROP);
  String valueExpr=(String)image.getLocalProperty(module,ImageItem.VALUE_EXPR_PROP);
  if (!StringUtil.isEmpty(typeExpr) || !StringUtil.isEmpty(valueExpr)) {
    setProperty(ImageItem.SOURCE_PROP,DesignChoiceConstants.IMAGE_REF_TYPE_EXPR);
    type++;
  }
  if (type > 1)   handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_IMAGE_REF_CONFLICT));
}","/** 
 * Check whether the source type conflicts, and set the proper source type.
 */
private void checkImageType(){
  int type=0;
  Module module=handler.getModule();
  String uri=(String)image.getLocalProperty(module,ImageItem.URI_PROP);
  if (!StringUtil.isEmpty(uri)) {
    uri=StringUtil.trimQuotes(uri);
    try {
      URL url=new URL(uri);
      setProperty(ImageItem.SOURCE_PROP,DesignChoiceConstants.IMAGE_REF_TYPE_URL);
    }
 catch (    MalformedURLException e) {
      setProperty(ImageItem.SOURCE_PROP,DesignChoiceConstants.IMAGE_REF_TYPE_FILE);
    }
    type++;
  }
  StructRefValue imageName=(StructRefValue)image.getLocalProperty(module,ImageItem.IMAGE_NAME_PROP);
  if (imageName != null) {
    setProperty(ImageItem.SOURCE_PROP,DesignChoiceConstants.IMAGE_REF_TYPE_EMBED);
    type++;
  }
  String typeExpr=(String)image.getLocalProperty(module,ImageItem.TYPE_EXPR_PROP);
  String valueExpr=(String)image.getLocalProperty(module,ImageItem.VALUE_EXPR_PROP);
  if (!StringUtil.isEmpty(typeExpr) || !StringUtil.isEmpty(valueExpr)) {
    setProperty(ImageItem.SOURCE_PROP,DesignChoiceConstants.IMAGE_REF_TYPE_EXPR);
    type++;
  }
  if (type > 1)   handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_IMAGE_REF_CONFLICT));
}",0.8370526315789474
77609,"public void visitImage(ImageItem obj){
  boundColumnsMgr.dealImage(obj,getModule());
  writer.startElement(DesignSchemaConstants.IMAGE_TAG);
  super.visitImage(obj);
  property(obj,ImageItem.SIZE_PROP);
  property(obj,ImageItem.SCALE_PROP);
  String source=(String)obj.getLocalProperty(getModule(),ImageItem.SOURCE_PROP);
  if (DesignChoiceConstants.IMAGE_REF_TYPE_URL.equalsIgnoreCase(source) || DesignChoiceConstants.IMAGE_REF_TYPE_FILE.equalsIgnoreCase(source)) {
    property(obj,ImageItem.URI_PROP);
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equalsIgnoreCase(source)) {
    property(obj,ImageItem.IMAGE_NAME_PROP);
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_EXPR.equalsIgnoreCase(source)) {
    property(obj,ImageItem.TYPE_EXPR_PROP);
    property(obj,ImageItem.VALUE_EXPR_PROP);
  }
  resourceKey(obj,ImageItem.ALT_TEXT_KEY_PROP,ImageItem.ALT_TEXT_PROP);
  resourceKey(obj,ImageItem.HELP_TEXT_ID_PROP,ImageItem.HELP_TEXT_PROP);
  writeAction(obj,ImageItem.ACTION_PROP);
  writer.endElement();
}","public void visitImage(ImageItem obj){
  boundColumnsMgr.dealImage(obj,getModule());
  writer.startElement(DesignSchemaConstants.IMAGE_TAG);
  super.visitImage(obj);
  property(obj,ImageItem.SIZE_PROP);
  property(obj,ImageItem.SCALE_PROP);
  property(obj,ImageItem.SOURCE_PROP);
  String source=(String)obj.getLocalProperty(getModule(),ImageItem.SOURCE_PROP);
  if (DesignChoiceConstants.IMAGE_REF_TYPE_URL.equalsIgnoreCase(source) || DesignChoiceConstants.IMAGE_REF_TYPE_FILE.equalsIgnoreCase(source)) {
    property(obj,ImageItem.URI_PROP);
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equalsIgnoreCase(source)) {
    property(obj,ImageItem.IMAGE_NAME_PROP);
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_EXPR.equalsIgnoreCase(source)) {
    property(obj,ImageItem.TYPE_EXPR_PROP);
    property(obj,ImageItem.VALUE_EXPR_PROP);
  }
  resourceKey(obj,ImageItem.ALT_TEXT_KEY_PROP,ImageItem.ALT_TEXT_PROP);
  resourceKey(obj,ImageItem.HELP_TEXT_ID_PROP,ImageItem.HELP_TEXT_PROP);
  writeAction(obj,ImageItem.ACTION_PROP);
  writer.endElement();
}",0.9813664596273292
77610,"/** 
 * Returns the overridden value of the specified property given its internal name.
 * @param propName the name of the property to get. Can be a system-defined or user-defined property name.
 * @return the property binding, or null if the overridden value is not set
 */
public String getPropertyBinding(String propName){
  PropertyBinding propBinding=module.findPropertyBinding(getElement(),propName);
  if (propBinding == null)   return null;
  return propBinding.getValue();
}","/** 
 * Returns the overridden value of the specified property given its internal name.
 * @param propName the name of the property to get. Can be a system-defined or user-defined property name.
 * @return the property binding, or null if the overridden value is not set
 */
public String getPropertyBinding(String propName){
  if (propName == null)   return null;
  DesignElement element=getElement();
  while (element != null && element.getRoot() != null) {
    PropertyBinding propBinding=element.getRoot().findPropertyBinding(element,propName);
    if (propBinding != null)     return propBinding.getValue();
    if (element.isVirtualElement()) {
      element=element.getVirtualParent();
    }
 else {
      element=element.getExtendsElement();
    }
  }
  return null;
}",0.6322478157267672
77611,"private boolean matchDataType(ScalarParameterHandle handle,ResultSetColumnHandle columnHandle){
  String type=handle.getDataType();
  if (handle == selectedParameter) {
    type=getSelectedDataType();
  }
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(columnHandle.getDataType())) {
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(columnHandle.getDataType());
  }
  return false;
}","private boolean matchDataType(ScalarParameterHandle handle,ResultSetColumnHandle columnHandle){
  String type=handle.getDataType();
  if (handle == selectedParameter) {
    type=getSelectedDataType();
  }
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(columnHandle.getDataType())) {
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(columnHandle.getDataType());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    return DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(columnHandle.getDataType());
  }
  return false;
}",0.9155987627043748
77612,"private void doPreview(String pattern){
  String type=getSelectedDataType();
  String formatStr=""String_Node_Str"";
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    formatStr=new StringFormatter(pattern,ULocale.getDefault()).format(DEFAULT_PREVIEW_STRING);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    formatStr=new DateFormatter(pattern).format(new Date());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    formatStr=new NumberFormatter(pattern).format(DEFAULT_PREVIEW_NUMBER);
  }
  previewLable.setText(formatStr);
}","private void doPreview(String pattern){
  String type=getSelectedDataType();
  String formatStr=""String_Node_Str"";
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    formatStr=new StringFormatter(pattern,ULocale.getDefault()).format(DEFAULT_PREVIEW_STRING);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    formatStr=new DateFormatter(pattern).format(new Date());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type) || DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
    formatStr=new NumberFormatter(pattern).format(DEFAULT_PREVIEW_NUMBER);
  }
  previewLable.setText(formatStr);
}",0.958057395143488
77613,"private void initFormatField(String selectedDataType){
  IChoiceSet choiceSet=getFormatChoiceSet(selectedDataType);
  if (choiceSet == null) {
    formatCategroy=formatPattern=null;
  }
 else {
    if (!loading || (selectedParameter.getCategory() == null && selectedParameter.getPattern() == null)) {
      if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(selectedDataType)) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getName();
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(selectedDataType)) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED).getName();
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(selectedDataType) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(selectedDataType)) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.NUMBER_FORMAT_TYPE_UNFORMATTED).getName();
      }
      formatPattern=null;
    }
 else {
      formatCategroy=selectedParameter.getCategory();
      if (formatCategroy == null) {
        formatCategroy=DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED;
      }
      formatPattern=selectedParameter.getPattern();
    }
  }
  updateFormatField();
}","private void initFormatField(String selectedDataType){
  IChoiceSet choiceSet=getFormatChoiceSet(selectedDataType);
  if (choiceSet == null) {
    formatCategroy=formatPattern=null;
  }
 else {
    if (!loading || (selectedParameter.getCategory() == null && selectedParameter.getPattern() == null)) {
      if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(selectedDataType)) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getName();
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(selectedDataType)) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED).getName();
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(selectedDataType) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(selectedDataType) || DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(selectedDataType)) {
        formatCategroy=choiceSet.findChoice(DesignChoiceConstants.NUMBER_FORMAT_TYPE_UNFORMATTED).getName();
      }
      formatPattern=null;
    }
 else {
      formatCategroy=selectedParameter.getCategory();
      if (formatCategroy == null) {
        formatCategroy=DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED;
      }
      formatPattern=selectedParameter.getPattern();
    }
  }
  updateFormatField();
}",0.973573343546534
77614,"private boolean isEqual(String value1,String value2){
  Object v1=null;
  Object v2=null;
  try {
    v1=getValue(value1);
    v2=getValue(value2);
  }
 catch (  BirtException e) {
  }
  if (v1 == null) {
    return v2 == null;
  }
  if (v1 instanceof Double && v2 instanceof Double) {
    return ((Double)v1).compareTo(v2) == 0;
  }
  if (v1 instanceof BigDecimal && v2 instanceof BigDecimal) {
    return ((BigDecimal)v1).compareTo(v2) == 0;
  }
  return v1.equals(v2);
}","private boolean isEqual(String value1,String value2){
  Object v1=null;
  Object v2=null;
  try {
    v1=getValue(value1);
    v2=getValue(value2);
  }
 catch (  BirtException e) {
  }
  if (v1 == null) {
    return v2 == null;
  }
  if (v1 instanceof Double && v2 instanceof Double) {
    return ((Double)v1).compareTo(v2) == 0;
  }
  if (v1 instanceof BigDecimal && v2 instanceof BigDecimal) {
    return ((BigDecimal)v1).compareTo(v2) == 0;
  }
  if (v1 instanceof Integer && v2 instanceof Integer) {
    return ((Integer)v1).compareTo(v2) == 0;
  }
  return v1.equals(v2);
}",0.8829686013320647
77615,"private void refreshCheckBoxArea(){
  if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
    isHidden.setSelection(getProperty(CHECKBOX_HIDDEN));
  }
 else {
    isHidden.setSelection(inputParameter.isHidden());
  }
  if (!DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(getSelectedControlType())) {
    if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) {
      needSort.setEnabled(true);
      if (dirtyProperties.containsKey(CHECKBOX_SORT)) {
        needSort.setSelection(getProperty(CHECKBOX_SORT));
      }
 else {
        needSort.setSelection(!inputParameter.isFixedOrder());
      }
    }
 else {
      needSort.setEnabled(false);
      needSort.setSelection(false);
      checkBoxChange(needSort,CHECKBOX_SORT);
    }
    if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType()) || PARAM_CONTROL_LIST.equals(getSelectedControlType())) {
      allowBlank.setEnabled(true);
      allowNull.setEnabled(true);
      doNotEcho.setEnabled(true);
      if (dirtyProperties.containsKey(CHECKBOX_ALLOW_BLANK)) {
        allowBlank.setSelection(getProperty(CHECKBOX_ALLOW_BLANK));
      }
 else {
        allowBlank.setSelection(inputParameter.allowBlank());
      }
      if (dirtyProperties.containsKey(CHECKBOX_ALLOW_NULL)) {
        allowNull.setSelection(getProperty(CHECKBOX_ALLOW_NULL));
      }
 else {
        allowNull.setSelection(inputParameter.allowNull());
      }
    }
 else {
      allowBlank.setEnabled(false);
      allowNull.setEnabled(false);
    }
    if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) {
      doNotEcho.setEnabled(true);
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        doNotEcho.setSelection(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
 else {
        doNotEcho.setSelection(inputParameter.isConcealValue());
      }
    }
 else {
      doNotEcho.setEnabled(false);
    }
  }
  if (!DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
    allowBlank.setEnabled(false);
    allowBlank.setSelection(false);
    checkBoxChange(allowBlank,CHECKBOX_ALLOW_BLANK);
  }
}","private void refreshCheckBoxArea(){
  if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
    isHidden.setSelection(getProperty(CHECKBOX_HIDDEN));
  }
 else {
    isHidden.setSelection(inputParameter.isHidden());
  }
  if (!DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(getSelectedControlType())) {
    if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) {
      needSort.setEnabled(true);
      if (dirtyProperties.containsKey(CHECKBOX_SORT)) {
        needSort.setSelection(getProperty(CHECKBOX_SORT));
      }
 else {
        needSort.setSelection(!inputParameter.isFixedOrder());
      }
    }
 else {
      needSort.setEnabled(false);
      needSort.setSelection(false);
      checkBoxChange(needSort,CHECKBOX_SORT);
    }
    if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType()) || PARAM_CONTROL_LIST.equals(getSelectedControlType())) {
      allowBlank.setEnabled(true);
      allowNull.setEnabled(true);
      doNotEcho.setEnabled(true);
      if (dirtyProperties.containsKey(CHECKBOX_ALLOW_BLANK)) {
        allowBlank.setSelection(getProperty(CHECKBOX_ALLOW_BLANK));
      }
 else {
        allowBlank.setSelection(inputParameter.allowBlank());
      }
      if (dirtyProperties.containsKey(CHECKBOX_ALLOW_NULL)) {
        allowNull.setSelection(getProperty(CHECKBOX_ALLOW_NULL));
      }
 else {
        allowNull.setSelection(inputParameter.allowNull());
      }
    }
 else {
      allowBlank.setEnabled(false);
      allowNull.setEnabled(false);
    }
    if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) {
      doNotEcho.setEnabled(true);
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        doNotEcho.setSelection(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
 else {
        doNotEcho.setSelection(inputParameter.isConcealValue());
      }
    }
 else {
      doNotEcho.setEnabled(false);
    }
  }
 else {
    allowNull.setEnabled(false);
    allowNull.setSelection(false);
    checkBoxChange(allowBlank,CHECKBOX_ALLOW_BLANK);
  }
  if (!DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
    allowBlank.setEnabled(false);
    allowBlank.setSelection(false);
    checkBoxChange(allowBlank,CHECKBOX_ALLOW_BLANK);
  }
}",0.9699026929169496
77616,"private Object getValue(String value) throws BirtException {
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(getSelectedDataType())) {
    return DataTypeUtil.toBoolean(value);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType())) {
    return DataTypeUtil.toBigDecimal(value);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
    return DataTypeUtil.toDate(value,ULocale.US);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
    return DataTypeUtil.toDouble(value);
  }
  return value;
}","private Object getValue(String value) throws BirtException {
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(getSelectedDataType())) {
    return DataTypeUtil.toBoolean(value);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType())) {
    return DataTypeUtil.toBigDecimal(value);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
    return DataTypeUtil.toDate(value,ULocale.US);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
    return DataTypeUtil.toDouble(value);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(getSelectedDataType())) {
    return DataTypeUtil.toInteger(value);
  }
  return value;
}",0.8903703703703704
77617,"protected void createRoot(){
  root=AreaFactory.createCellArea(cellContent);
  tableLM.resolveBorderConflict((CellArea)root);
  root.setWidth(columnWidth);
  if (!isFirst) {
    IStyle areaStyle=root.getStyle();
    areaStyle.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
  }
}","protected void createRoot(){
  if (!isFirst) {
    int startColumn=cellContent.getColumn();
    int endColumn=startColumn + cellContent.getColSpan();
    columnWidth=tableLM.getCellWidth(startColumn,endColumn);
  }
  root=AreaFactory.createCellArea(cellContent);
  tableLM.resolveBorderConflict((CellArea)root);
  root.setWidth(columnWidth);
  if (!isFirst) {
    IStyle areaStyle=root.getStyle();
    areaStyle.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
  }
}",0.8214971209213052
77618,"public void contextDestroyed(ServletContextEvent event){
  ParameterAccessor.reset();
}","public void contextDestroyed(ServletContextEvent event){
  Platform.shutdown();
  ReportEngineService.shutdown();
  ParameterAccessor.reset();
}",0.7532467532467533
77619,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator parameters=parameterList.iterator();
      while (parameters != null && parameters.hasNext()) {
        Object parameterHandle=parameters.next();
        if (parameterHandle instanceof ScalarParameterHandle) {
          ScalarParameterHandle scalarParameterHandle=(ScalarParameterHandle)parameterHandle;
          if (scalarParameterHandle.getName() != null)           this.configMap.put(scalarParameterHandle.getName(),null);
        }
      }
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=getParameterName(configVar.getName());
          String paramValue=configVar.getValue();
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType())) {
                Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          String paramValue=configVar.getValue();
          if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName(paramValue);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
          paramName=getParameterName(paramName);
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType())) {
                Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}",0.7411579184501014
77620,"public void contextDestroyed(ServletContextEvent event){
  Platform.shutdown();
}","public void contextDestroyed(ServletContextEvent event){
  ParameterAccessor.reset();
}",0.8571428571428571
77621,"/** 
 * @param list
 * @param expression
 * @throws DataException
 */
private static void populateColumnList(List list,IScriptExpression expression) throws DataException {
  if (expression != null) {
    List l;
    try {
      l=ExpressionUtil.extractColumnExpressions(expression.getText());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
    for (int i=0; i < l.size(); i++) {
      IColumnBinding cb=(IColumnBinding)l.get(i);
      if (!list.contains(cb.getResultSetColumnName()))       list.add(cb.getResultSetColumnName());
    }
  }
}","/** 
 * @param list
 * @param expression
 * @throws DataException
 */
private static void populateColumnList(List list,IScriptExpression expression) throws DataException {
  if (expression != null) {
    List l;
    try {
      l=ExpressionUtil.extractColumnExpressions(expression.getText());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
    for (int i=0; i < l.size(); i++) {
      IColumnBinding cb=(IColumnBinding)l.get(i);
      if (!list.contains(cb.getResultSetColumnName()) && cb.getOuterLevel() == 0)       list.add(cb.getResultSetColumnName());
    }
  }
}",0.9769033361847732
77622,"public void prepare(String command) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str"");
  try {
    if (command == null) {
      logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
      throw new OdaException(""String_Node_Str"");
    }
    procedureName=getProcedureName(command);
    this.callStat=conn.prepareCall(formatQueryText(command));
    paramUtil=new SPParameterPositionUtil(formatQueryText(command),'@');
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.STATEMENT_CANNOT_PREPARE,e);
  }
}","public void prepare(String command) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str"");
  try {
    if (command == null) {
      logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
      throw new OdaException(""String_Node_Str"");
    }
    procedureName=getProcedureName(command);
    String queryText=SQLFormatter.formatQueryText(command);
    this.callStat=conn.prepareCall(queryText);
    paramUtil=new SPParameterPositionUtil(queryText,'@');
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.STATEMENT_CANNOT_PREPARE,e);
  }
}",0.890295358649789
77623,"public void prepare(String command) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str"");
  try {
    if (command == null) {
      logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
      throw new OdaException(""String_Node_Str"");
    }
    this.cachedResultMetaData=null;
    this.cachedResultSet=null;
    this.preStat=conn.prepareStatement(formatQueryText(command));
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.STATEMENT_CANNOT_PREPARE,e);
  }
}","public void prepare(String command) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str"");
  try {
    if (command == null) {
      logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
      throw new OdaException(""String_Node_Str"");
    }
    this.cachedResultMetaData=null;
    this.cachedResultSet=null;
    this.preStat=conn.prepareStatement(SQLFormatter.formatQueryText(command));
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.STATEMENT_CANNOT_PREPARE,e);
  }
}",0.98996138996139
77624,"public String getLocalizedMessage(){
  if (infoCode == CONVERT_FOR_COLUMN_BINDING) {
    return ModelMessages.getMessage(CONVERT_INFO_MSG,new String[]{COLUMN_BINDING_FROM_VERSION,COLUMN_BINDING_FEATURE});
  }
  return ModelMessages.getMessage(INVALID_DESIGN_FILE_MSG);
}","public String getLocalizedMessage(){
  if (infoCode == CONVERT_FOR_COLUMN_BINDING) {
    return ModelMessages.getMessage(CONVERT_INFO_MSG);
  }
  return ModelMessages.getMessage(INVALID_DESIGN_FILE_MSG);
}",0.8631578947368421
77625,"protected void execute(IReportItemExecutor executor,IContent content){
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=executor.getNextChild();
    if (childExecutor != null) {
      IContent childContent=childExecutor.execute();
      removePageBreak(childContent);
      content.getChildren().add(childContent);
      execute(childExecutor,childContent);
      childExecutor.close();
    }
  }
}","protected void execute(IReportItemExecutor executor,IContent content){
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=executor.getNextChild();
    if (childExecutor != null) {
      IContent childContent=childExecutor.execute();
      content.getChildren().add(childContent);
      execute(childExecutor,childContent);
      childExecutor.close();
    }
  }
}",0.899876390605686
77626,"public boolean hasNextChild(){
  if (!needUpdate) {
    return hasNext;
  }
  if (currentRunIn != null) {
    if (currentRunIn.hasNextChild()) {
      hasNext=true;
      needUpdate=false;
      return hasNext;
    }
 else {
      currentRunIn.close();
    }
  }
  currentRunIn=null;
  while (executor.hasNextChild()) {
    IReportItemExecutor next=executor.getNextChild();
    IContent nextContent=next.execute();
    if (nextContent instanceof IListBandContent) {
      IListBandContent band=(IListBandContent)nextContent;
      if (repeat && (band.getBandType() == IBandContent.BAND_HEADER || band.getBandType() == IBandContent.BAND_GROUP_HEADER)) {
        execute(next,nextContent);
        next.close();
        next=new DOMReportItemExecutor(nextContent);
        next.execute();
        nextContent.getParent().getChildren().add(nextContent);
      }
      if (next.hasNextChild()) {
        currentRunIn=next;
        break;
      }
    }
 else {
      childExecutor=next;
      childContent=nextContent;
      break;
    }
  }
  if (currentRunIn != null || childContent != null) {
    hasNext=true;
  }
 else {
    hasNext=false;
  }
  needUpdate=false;
  return hasNext;
}","public boolean hasNextChild(){
  if (!needUpdate) {
    return hasNext;
  }
  if (currentRunIn != null) {
    if (currentRunIn.hasNextChild()) {
      hasNext=true;
      needUpdate=false;
      return hasNext;
    }
 else {
      currentRunIn.close();
    }
  }
  currentRunIn=null;
  while (executor.hasNextChild()) {
    IReportItemExecutor next=executor.getNextChild();
    IContent nextContent=next.execute();
    if (nextContent instanceof IListBandContent) {
      IListBandContent band=(IListBandContent)nextContent;
      if (repeat && (band.getBandType() == IBandContent.BAND_HEADER || band.getBandType() == IBandContent.BAND_GROUP_HEADER)) {
        executeHeader(next,nextContent);
        next.close();
        next=new DOMReportItemExecutor(nextContent);
        next.execute();
        nextContent.getParent().getChildren().add(nextContent);
      }
      if (next.hasNextChild()) {
        currentRunIn=next;
        break;
      }
    }
 else {
      childExecutor=next;
      childContent=nextContent;
      break;
    }
  }
  if (currentRunIn != null || childContent != null) {
    hasNext=true;
  }
 else {
    hasNext=false;
  }
  needUpdate=false;
  return hasNext;
}",0.997470489038786
77627,"/** 
 * Makes a unqiue name for the given element.
 * @param element the element to make a unique name
 */
void makeUniqueName(DesignElement element);","/** 
 * Makes a unique name for the given element.
 * @param element the element to make a unique name
 */
void makeUniqueName(DesignElement element);",0.9933333333333332
77628,"/** 
 * Returns copied cells with the column number.
 * @param columnNumber the column number
 * @return new cell instances
 */
abstract protected List getCellsUnderColumn(int columnNumber);","/** 
 * Returns copied cells with the column number regardless whether the current position is where the cell element begins to span.
 * @param columnNumber the column number
 * @param mustBeStartPosition <code>true</code> if it is. Otherwise <code>false</code>.
 * @return the matched cell
 */
abstract protected List getCellsUnderColumn(int columnNumber,boolean mustBeStartPosition);",0.5669565217391305
77629,"/** 
 * Returns a copied cell with the given row and column number.
 * @param row the row
 * @param columnIndex the column number
 * @return a new cell instance
 */
private CellHandle getCellsInRow(RowHandle row,int columnIndex){
  SlotHandle cells=row.getCells();
  for (int i=0; i < cells.getCount(); i++) {
    CellHandle cell=(CellHandle)cells.get(i);
    int cellColumnIndex=getCellPosition(cell);
    if (cellColumnIndex == columnIndex)     return cell;
  }
  return null;
}","/** 
 * Returns a copied cell with the given row and column number.
 * @param row the row
 * @param columnIndex the column number
 * @param mustBeStartPosition <code>true</code> if it is. Otherwise <code>false</code>.
 * @return a new cell instance
 */
private CellHandle getCellsInRow(RowHandle row,int columnIndex,boolean mustBeStartPosition){
  SlotHandle cells=row.getCells();
  for (int i=0; i < cells.getCount(); i++) {
    CellHandle cell=(CellHandle)cells.get(i);
    int cellColumnIndex=getCellPosition(cell);
    if (cellColumnIndex == columnIndex)     return cell;
    if (!mustBeStartPosition && cellColumnIndex < columnIndex && cellColumnIndex + cell.getColumnSpan() >= columnIndex)     return cell;
  }
  return null;
}",0.7914262159934048
77630,"/** 
 * Returns copied cells with the given slot and column number.
 * @param handle the slot
 * @param columnIndex the column number
 * @return new cell instances
 */
protected List getCellsInSlot(SlotHandle handle,int columnIndex){
  List retValue=new ArrayList();
  for (int i=0; i < handle.getCount(); i++) {
    RowHandle row=(RowHandle)handle.get(i);
    CellHandle cell=getCellsInRow(row,columnIndex);
    if (cell != null)     retValue.add(cell);
  }
  return retValue;
}","/** 
 * Returns copied cells with the given slot and column number.
 * @param handle the slot
 * @param columnIndex the column number
 * @param mustBeStartPosition <code>true</code> if it is. Otherwise <code>false</code>.
 * @return new cell instances
 */
protected List getCellsInSlot(SlotHandle handle,int columnIndex,boolean mustBeStartPosition){
  List retValue=new ArrayList();
  for (int i=0; i < handle.getCount(); i++) {
    RowHandle row=(RowHandle)handle.get(i);
    CellHandle cell=getCellsInRow(row,columnIndex,mustBeStartPosition);
    if (cell != null)     retValue.add(cell);
  }
  return retValue;
}",0.8244972577696527
77631,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @param insertFlag The column insert sign. 1 insert after position. -1 insert before position
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsert(int columnIndex,int insertFlag){
  int columnCount=adapter.getColumnCount();
  targetColumnIndex=columnIndex;
  if (insertFlag == INSERT_BEFORE)   targetColumnIndex=targetColumnIndex - 1;
  if (targetColumnIndex > columnCount)   targetColumnIndex=columnCount;
  if (targetColumnIndex >= columnCount || targetColumnIndex < 1) {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(1));
  }
 else {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(targetColumnIndex));
    if (!isValidInsertAndPasteArea(originalCells))     return false;
  }
  return true;
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @param insertFlag The column insert sign. 1 insert after position. -1 insert before position
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsert(int columnIndex,int insertFlag){
  int columnCount=adapter.getColumnCount();
  targetColumnIndex=columnIndex;
  if (insertFlag == INSERT_BEFORE)   targetColumnIndex=targetColumnIndex - 1;
  if (targetColumnIndex > columnCount)   targetColumnIndex=columnCount;
  if (targetColumnIndex >= columnCount || targetColumnIndex < 1) {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(1));
  }
 else {
    originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(targetColumnIndex,false));
    if (!isValidInsertAndPasteArea(originalCells))     return false;
  }
  return true;
}",0.9969788519637462
77632,"/** 
 * Checks whether copied cells can be inserted and pasted.
 * @param cells cloned cells
 * @return <code>true</code> if the row count matches the count of""rowSpans"" in <code>cells</code>, otherwise <code>false</code>.
 */
private boolean isValidInsertAndPasteArea(List cells){
}","/** 
 * Checks whether copied cells can be inserted and pasted.
 * @param cells cloned cells
 * @return <code>true</code> if the row count matches the count of""rowSpans"" in <code>cells</code>, otherwise <code>false</code>.
 */
private boolean isValidInsertAndPasteArea(List cells){
  int numOfRows=adapter.getRowCount();
  int rowCount=0;
  for (int i=0; i < cells.size(); i++) {
    CellContextInfo contextInfo=(CellContextInfo)cells.get(i);
    rowCount+=contextInfo.getRowSpan();
  }
  if (rowCount < numOfRows)   return false;
  return true;
}",0.6819277108433734
77633,"protected List getCellsUnderColumn(int columnNumber){
  return getCellsInSlot(element.getRows(),columnNumber);
}","protected List getCellsUnderColumn(int columnNumber,boolean mustBeStartPosition){
  return getCellsInSlot(element.getRows(),columnNumber,mustBeStartPosition);
}",0.8235294117647058
77634,"/** 
 * Returns copied cells with the column number.
 * @param columnIndex the column number
 * @return new cell instances
 */
protected List getCellsUnderColumn(int columnIndex){
  List cells=new ArrayList();
  cells.addAll(getCellsInSlot(element.getHeader(),columnIndex));
  SlotHandle groups=element.getGroups();
  for (int i=0; i < groups.getCount(); i++) {
    GroupHandle group=(GroupHandle)groups.get(i);
    cells.addAll(getCellsInSlot(group.getHeader(),columnIndex));
    cells.addAll(getCellsInSlot(group.getFooter(),columnIndex));
  }
  cells.addAll(getCellsInSlot(element.getDetail(),columnIndex));
  cells.addAll(getCellsInSlot(element.getFooter(),columnIndex));
  return cells;
}","protected List getCellsUnderColumn(int columnIndex,boolean mustBeStartPosition){
  List cells=new ArrayList();
  cells.addAll(getCellsInSlot(element.getHeader(),columnIndex,mustBeStartPosition));
  SlotHandle groups=element.getGroups();
  for (int i=0; i < groups.getCount(); i++) {
    GroupHandle group=(GroupHandle)groups.get(i);
    cells.addAll(getCellsInSlot(group.getHeader(),columnIndex,mustBeStartPosition));
    cells.addAll(getCellsInSlot(group.getFooter(),columnIndex,mustBeStartPosition));
  }
  cells.addAll(getCellsInSlot(element.getDetail(),columnIndex,mustBeStartPosition));
  cells.addAll(getCellsInSlot(element.getFooter(),columnIndex,mustBeStartPosition));
  return cells;
}",0.745493871665465
77635,"/** 
 * Returns 1-based the column position with the given row index and the cell element.
 * @param rowId the row index
 * @param cell the cell to search
 * @return 1-based the column position
 */
protected int getColumnPos(int rowId,Cell cell){
  if (rowId < 0 || rowId >= rows.size())   return 0;
  LayoutRow row=(LayoutRow)getLayoutRow(rowId);
  return row.findCellColumnPos(cell);
}","/** 
 * Returns 1-based the column position with the given row index and the cell element.
 * @param rowId the row index
 * @param cell the cell to search
 * @return 1-based the column position
 */
protected int getColumnPos(int rowId,Cell cell){
  if (rowId < 0 || rowId >= rows.size())   return 0;
  LayoutRow row=getLayoutRow(rowId);
  return row.findCellColumnPos(cell);
}",0.9855832241153342
77636,"public synchronized static void shutdown(){
  if (launcher != null) {
    launcher.shutdown();
    launcher=null;
  }
}","public synchronized static void shutdown(){
  if (launcher != null) {
    launcher.shutdown();
    launcher=null;
  }
  platform=null;
}",0.9333333333333332
77637,"public void startup(PlatformConfig config) throws BirtException {
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(""String_Node_Str"" + root,root);
  }
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",platformDirectory.getAbsolutePath());
  File configurationDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!configurationDirectory.exists()) {
    configurationDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",configurationDirectory.getAbsolutePath());
  File workspaceDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!workspaceDirectory.exists()) {
    workspaceDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",workspaceDirectory.getAbsolutePath());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  final String framework=new File(path).getAbsolutePath();
  String[] args=config.getOSGiArguments();
  if (args == null) {
    args=new String[]{""String_Node_Str""};
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    URL frameworkUrl=new File(framework).toURL();
    System.setProperty(""String_Node_Str"",frameworkUrl.toExternalForm());
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new URLClassLoader(new URL[]{frameworkUrl},loader);
    try {
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{args,null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}","public void startup(PlatformConfig config) throws BirtException {
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(""String_Node_Str"" + root,root);
  }
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",platformDirectory.getAbsolutePath());
  File configurationDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!configurationDirectory.exists()) {
    configurationDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",configurationDirectory.getAbsolutePath());
  File workspaceDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!workspaceDirectory.exists()) {
    workspaceDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",workspaceDirectory.getAbsolutePath());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  final String framework=new File(path).getAbsolutePath();
  String[] args=config.getOSGiArguments();
  if (args == null) {
    args=new String[]{""String_Node_Str""};
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    URL frameworkUrl=new File(framework).toURL();
    System.setProperty(""String_Node_Str"",frameworkUrl.toExternalForm());
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new URLClassLoader(new URL[]{frameworkUrl},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{args,null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}",0.9837490551776266
77638,"/** 
 * @param dataSourceDesign
 * @param dataSetDesign
 * @param parameterBindings
 * @param cacheOption
 * @param alwaysCacheRowCount
 * @return
 */
public boolean doesLoadFromCache(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterHints,int cacheOption,int alwaysCacheRowCount){
  if (needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount) == false)   return false;
  this.setDataSourceAndDataSet(dataSourceDesign,dataSetDesign,parameterHints);
  return cacheMapManager.doesLoadFromCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,dataSetDesign,parameterHints));
}","/** 
 * only for test
 * @return
 */
public boolean doesLoadFromCache(){
  if (needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount) == false)   return false;
  return cacheMapManager.doesLoadFromCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints));
}",0.4442060085836909
77639,"protected IQuery createOdiQuery() throws DataException {
  return DataSourceFactory.getFactory().getDataSource(null,null,null,null).newCandidateQuery();
}","protected IQuery createOdiQuery() throws DataException {
  return DataSourceFactory.getFactory().getEmptyDataSource().newCandidateQuery();
}",0.9183673469387756
77640,"/** 
 * Temp interface
 * @param driverName
 * @param connProperties
 * @param dataSourceDesign
 * @param dataSetDesign
 * @param parameterBindings
 * @param cacheOption
 * @param alwaysCacheRowCount
 * @return
 */
public IDataSource getDataSource(String driverName,Map connProperties,IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterBindings,int cacheOption,int alwaysCacheRowCount);","/** 
 * Obtains a dedicated data source instance with the specified driver name and connection properties. A named property can be mapped to more than one values. <br> The property name is of String type. <br> The property value is a Set interface of string values. <p> An implementation might support a pool of connected but inactive data sources.  <br> If no existing data source instance with the specified properties is available, a new instance will be instantiated.
 * @param driverName	 The name of a data source driver.
 * @param connProperties The connection properties as a Map of name-set pairs.
 * @return			An instance of IDataSource.
 */
public IDataSource getDataSource(String driverName,Map connProperties,IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterBindings,int cacheOption,int alwaysCacheRowCount);",0.4306738962044926
77641,"/** 
 * @param pageNumber the page to be rendered
 * @throws EngineException throws exception if there is a rendering error
 */
protected void doRender(List pageSequences) throws EngineException {
  if (pageSequences.size() == 0) {
    return;
  }
  try {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    IContentEmitter emitter=createContentEmitter();
    String format=executionContext.getOutputFormat();
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      IReportExecutor executor=new ReportPageReader(executionContext,pageSequences,false);
      executor=new LocalizedReportExecutor(executionContext,executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(format);
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutEngine.setPageHandler(handle);
      startRender();
      layoutEngine.layout(executor,emitter,true);
      closeRender();
      executor.close();
    }
 else {
      IReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
      executor=new LocalizedReportExecutor(executionContext,executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      ReportContentLoader loader=new ReportContentLoader(executionContext);
      startRender();
      loader.loadPageRange(pageSequences,bodyOnly,emitter);
      closeRender();
      executor.close();
    }
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}","/** 
 * @param pageNumber the page to be rendered
 * @throws EngineException throws exception if there is a rendering error
 */
protected void doRender(List pageSequences) throws EngineException {
  if (pageSequences.size() == 0) {
    return;
  }
  try {
    ReportDesignHandle reportDesign=executionContext.getDesign();
    IContentEmitter emitter=createContentEmitter();
    String format=executionContext.getOutputFormat();
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      IReportExecutor executor=new ReportPageReader(executionContext,pageSequences,false);
      executor=new LocalizedReportExecutor(executionContext,executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(format);
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutEngine.setPageHandler(handle);
      startRender();
      layoutEngine.layout(executor,emitter,true);
      closeRender();
      executor.close();
    }
 else {
      IReportExecutor executor=new ReportExecutor(executionContext,reportDesign,null);
      executor=new LocalizedReportExecutor(executionContext,executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      ReportContentLoader loader=new ReportContentLoader(executionContext);
      startRender();
      IRenderOption renderOption=executionContext.getRenderOption();
      if (renderOption instanceof HTMLRenderOption) {
        boolean htmlPagination=((HTMLRenderOption)renderOption).getHtmlPagination();
        bodyOnly=!htmlPagination;
      }
      loader.loadPageRange(pageSequences,bodyOnly,emitter);
      closeRender();
      executor.close();
    }
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}",0.9327595481441636
77642,"/** 
 * Create HTML render context.
 * @param svgFlag
 * @param servletPath
 * @return HTML render context from the given arguments
 */
private HTMLRenderContext createHTMLrenderContext(boolean svgFlag,String servletPath){
  HTMLRenderContext renderContext=new HTMLRenderContext();
  renderContext.setImageDirectory(imageDirectory);
  renderContext.setBaseImageURL(contextPath + imageBaseUrl);
  if (servletPath != null && servletPath.length() > 0 && !servletPath.equalsIgnoreCase(IBirtConstants.SERVLET_PATH_PREVIEW)) {
    renderContext.setBaseURL(this.contextPath + servletPath);
  }
 else {
    renderContext.setBaseURL(this.contextPath + IBirtConstants.SERVLET_PATH_FRAMESET);
  }
  renderContext.setImageDirectory(imageDirectory);
  renderContext.setSupportedImageFormats(svgFlag ? ""String_Node_Str"" : ""String_Node_Str"");
  return renderContext;
}","/** 
 * Create HTML render context.
 * @param svgFlag
 * @param servletPath
 * @return HTML render context from the given arguments
 */
private HTMLRenderContext createHTMLrenderContext(boolean svgFlag,String servletPath){
  HTMLRenderContext renderContext=new HTMLRenderContext();
  renderContext.setImageDirectory(imageDirectory);
  renderContext.setBaseImageURL(contextPath + imageBaseUrl);
  if (servletPath != null && servletPath.length() > 0) {
    renderContext.setBaseURL(this.contextPath + servletPath);
  }
 else {
    renderContext.setBaseURL(this.contextPath + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderContext.setImageDirectory(imageDirectory);
  renderContext.setSupportedImageFormats(svgFlag ? ""String_Node_Str"" : ""String_Node_Str"");
  return renderContext;
}",0.7982832618025751
77643,"/** 
 * Create PDF render context.
 * @return the PDF render context
 */
private PDFRenderContext createPDFrenderContext(){
  PDFRenderContext renderContext=new PDFRenderContext();
  renderContext.setBaseURL(this.contextPath + IBirtConstants.SERVLET_PATH_RUN);
  renderContext.setSupportedImageFormats(""String_Node_Str"");
  return renderContext;
}","/** 
 * Create PDF render context.
 * @param servletPath
 * @return the PDF render context
 */
private PDFRenderContext createPDFrenderContext(String servletPath){
  PDFRenderContext renderContext=new PDFRenderContext();
  if (servletPath != null && servletPath.length() > 0) {
    renderContext.setBaseURL(this.contextPath + servletPath);
  }
 else {
    renderContext.setBaseURL(this.contextPath + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderContext.setSupportedImageFormats(""String_Node_Str"");
  return renderContext;
}",0.7967853042479908
77644,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  if (context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  if (context instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)context).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      baseURL=baseURL.replaceFirst(IBirtConstants.VIEWER_FRAMESET,IBirtConstants.VIEWER_RUN);
    }
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=ParameterValidationUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  if (context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  if (context instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)context).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=ParameterValidationUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9606875696323413
77645,"/** 
 * Check if a data set is added into this joint data set.
 * @param module the module.
 * @param dataSetName the name of the data set.
 * @param errors the errors.
 */
private void checkDataSet(Module module,String dataSetName,List errors,DesignElement element){
  if (dataSetName == null) {
    return;
  }
  List dataSetsReferences=(List)element.getProperty(module,JointDataSet.DATA_SETS_PROP);
  if (dataSetsReferences != null) {
    int dataSetIndex;
    for (dataSetIndex=0; dataSetIndex < dataSetsReferences.size(); dataSetIndex++) {
      if (((ElementRefValue)dataSetsReferences.get(dataSetIndex)).getName().equals(dataSetName)) {
        return;
      }
    }
  }
  errors.add(new SemanticError(element,new String[]{element.getName(),dataSetName},SemanticError.DESIGN_EXCEPTION_DATA_SET_MISSED_IN_JOINT_DATA_SET));
}","/** 
 * Check if a data set is added into this joint data set.
 * @param module the module.
 * @param dataSetName the name of the data set.
 * @param errors the errors.
 */
private void checkDataSet(Module module,String dataSetName,List errors,DesignElement element){
  if (dataSetName == null) {
    return;
  }
  List dataSetsReferences=(List)element.getProperty(module,JointDataSet.DATA_SETS_PROP);
  if (dataSetsReferences != null) {
    int dataSetIndex;
    for (dataSetIndex=0; dataSetIndex < dataSetsReferences.size(); dataSetIndex++) {
      if (((ElementRefValue)dataSetsReferences.get(dataSetIndex)).getQualifiedReference().equals(dataSetName)) {
        return;
      }
    }
  }
  errors.add(new SemanticError(element,new String[]{element.getName(),dataSetName},SemanticError.DESIGN_EXCEPTION_DATA_SET_MISSED_IN_JOINT_DATA_SET));
}",0.98805256869773
77646,"/** 
 * Gets the names of the data sets in this joint data set.
 * @param module the root module of the element
 * @return a list of names of data sets in this joint data set.
 */
public List getDataSetNames(Module module){
  List dataSetsReferences=getListProperty(module,JointDataSet.DATA_SETS_PROP);
  if (dataSetsReferences == null) {
    return Collections.EMPTY_LIST;
  }
  List results=new ArrayList();
  for (int i=0; i < dataSetsReferences.size(); i++) {
    results.add(((ElementRefValue)dataSetsReferences.get(i)).getName());
  }
  return results;
}","/** 
 * Gets the names of the data sets in this joint data set.
 * @param module the root module of the element
 * @return a list of names of data sets in this joint data set.
 */
public List getDataSetNames(Module module){
  List dataSetsReferences=getListProperty(module,JointDataSet.DATA_SETS_PROP);
  if (dataSetsReferences == null) {
    return Collections.EMPTY_LIST;
  }
  List results=new ArrayList();
  for (int i=0; i < dataSetsReferences.size(); i++) {
    results.add(((ElementRefValue)dataSetsReferences.get(i)).getQualifiedReference());
  }
  return results;
}",0.982363315696649
77647,"private MasterPageDesign getDefaultMasterPage(IReportContent report){
  PageSetupDesign pageSetup=report.getDesign().getPageSetup();
  int pageCount=pageSetup.getMasterPageCount();
  if (pageCount > 0) {
    return pageSetup.getMasterPage(0);
  }
  return null;
}","private MasterPageDesign getDefaultMasterPage(IReportContent report){
  PageSetupDesign pageSetup=report.getDesign().getPageSetup();
  int pageCount=pageSetup.getMasterPageCount();
  if (pageCount > 0) {
    MasterPageDesign pageDesign=pageSetup.getMasterPage(0);
    context.setMasterPage(pageDesign.getName());
    return pageDesign;
  }
  return null;
}",0.827140549273021
77648,"private MasterPageDesign getDefaultMasterPage(IReportContent report){
  PageSetupDesign pageSetup=report.getDesign().getPageSetup();
  int pageCount=pageSetup.getMasterPageCount();
  if (pageCount > 0) {
    return pageSetup.getMasterPage(0);
  }
  return null;
}","private MasterPageDesign getDefaultMasterPage(IReportContent report){
  PageSetupDesign pageSetup=report.getDesign().getPageSetup();
  int pageCount=pageSetup.getMasterPageCount();
  if (pageCount > 0) {
    MasterPageDesign pageDesign=pageSetup.getMasterPage(0);
    context.setMasterPage(pageDesign.getName());
    return pageDesign;
  }
  return null;
}",0.827140549273021
77649,"/** 
 * Get engine instance.
 * @param servletConfig
 * @throws BirtException
 */
public static void initEngineInstance(ServletConfig servletConfig) throws BirtException {
  if (ReportEngineService.instance != null) {
    return;
  }
  ReportEngineService.instance=new ReportEngineService(servletConfig);
}","/** 
 * Get engine instance.
 * @param servletConfig
 * @throws BirtException
 */
public synchronized static void initEngineInstance(ServletConfig servletConfig) throws BirtException {
  if (ReportEngineService.instance != null) {
    return;
  }
  ReportEngineService.instance=new ReportEngineService(servletConfig);
}",0.9792
77650,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    resultSetList=(List)dataSetHandle.getProperty(OdaDataSetHandle.RESULT_SET_PROP);
    dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP).clearValue();
  }
 else {
    return null;
  }
  int columnCount=0;
  if (resultSetList != null)   columnCount=resultSetList.size();
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  if (computedList != null)   columnCount+=computedList.size();
  DataSetViewData[] items=new DataSetViewData[columnCount];
  DataSetViewData item;
  int index=0;
  if (resultSetList != null) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      item=new DataSetViewData();
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String uniqueName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,resultSetColumn.getColumnName(),i);
      item.setName(uniqueName);
      uniqueColumnNameSet.add(uniqueName);
      item.setDataTypeName(resultSetColumn.getDataType());
      item.setPosition(resultSetColumn.getPosition().intValue());
      item.setComputedColumn(false);
      item.setDataSetColumnName(uniqueName);
      if (!uniqueName.equals(resultSetColumn.getColumnName())) {
        updateModelColumn(dataSetHandle,item);
      }
      ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueName);
      if (columnHint != null) {
        item.setAlias(columnHint.getAlias());
        item.setDisplayName(columnHint.getDisplayName());
      }
      items[index]=item;
      index++;
    }
    if (computedList != null) {
      ComputedColumn computedColumn;
      Iterator computedColumnIterator=computedList.iterator();
      while (computedColumnIterator.hasNext()) {
        item=new DataSetViewData();
        computedColumn=(ComputedColumn)computedColumnIterator.next();
        item.setName(computedColumn.getName());
        item.setDataTypeName(computedColumn.getDataType());
        item.setComputedColumn(true);
        if (findColumnHint(dataSetHandle,computedColumn.getName()) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,computedColumn.getName());
          item.setAlias(columnHint.getAlias());
          item.setDisplayName(columnHint.getDisplayName());
        }
        items[index]=item;
        index++;
      }
    }
    return items;
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle) throws BirtException {
  DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSetHandle.getModuleHandle());
  DataRequestSession session=DataRequestSession.newSession(context);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(metaData.getColumnTypeName(i + 1));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.201424711373127
77651,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,false).executeQuery(query).getResultMetaData();
  if (needsUseResultHint(dataSetHandle,metaData)) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,true).executeQuery(query).getResultMetaData();
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,false).executeQuery(query).getResultMetaData();
    if (needsUseResultHint(dataSetHandle,metaData)) {
      metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,true).executeQuery(query).getResultMetaData();
    }
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}",0.9314359637774904
77652,"/** 
 * @param streamPos
 * @param streamScope
 * @return query definition
 * @throws DataException
 */
public IBaseQueryDefinition loadQueryDefn(int streamPos,int streamScope) throws DataException {
  InputStream inputStream=streamManager.getInStream(DataEngineContext.QUERY_DEFN_STREAM,streamPos,streamScope);
  IBaseQueryDefinition queryDefn=QueryDefnUtil.loadQueryDefn(inputStream);
  try {
    inputStream.close();
  }
 catch (  IOException e) {
  }
  return queryDefn;
}","/** 
 * @param inputStream
 * @return
 * @throws DataException
 */
private IBaseQueryDefinition loadQueryDefn(InputStream inputStream) throws DataException {
  IBaseQueryDefinition queryDefn=QueryDefnUtil.loadQueryDefn(inputStream);
  try {
    inputStream.close();
  }
 catch (  IOException e) {
  }
  return queryDefn;
}",0.6942355889724311
77653,"/** 
 * @throws DataException
 */
void saveQueryDefn() throws DataException {
  OutputStream outputStream=streamManager.getOutStream(DataEngineContext.QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  try {
    outputStream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @throws DataException
 */
void saveQueryDefn() throws DataException {
  OutputStream outputStream;
  if (((QueryDefinition)queryDefn).getQueryResultsID() == null) {
    outputStream=streamManager.getOutStream(DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  }
  outputStream=streamManager.getOutStream(DataEngineContext.QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  try {
    outputStream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.741733690795353
77654,"/** 
 * @param context
 * @param queryResultID
 * @param subQueryName
 * @param subQueryIndex
 * @throws DataException
 */
RDSave(DataEngineContext context,IBaseQueryDefinition queryDefn,int rowCount,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rowCount=rowCount;
  this.streamManager=new StreamManager(context,queryResultInfo);
  this.rdSaveUtil=new RDSaveUtil(this.context.getMode(),queryDefn,this.streamManager);
}","/** 
 * @param context
 * @param queryResultID
 * @param subQueryName
 * @param subQueryIndex
 * @throws DataException
 */
RDSave(DataEngineContext context,IBaseQueryDefinition queryDefn,int rowCount,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rowCount=rowCount;
  this.queryDefn=queryDefn;
  this.streamManager=new StreamManager(context,queryResultInfo);
  this.rdSaveUtil=new RDSaveUtil(this.context.getMode(),queryDefn,this.streamManager);
}",0.970401691331924
77655,"/** 
 * @throws DataException
 */
private void saveForIV() throws DataException {
  this.rdSaveUtil.saveExprMetadata(exprNameSet);
  if (this.streamManager.isSubquery() == false)   this.rdSaveUtil.saveQueryDefn();
}","/** 
 * @throws DataException
 */
private void saveForIV() throws DataException {
  if (exprNameSet.size() == 0) {
    exprNameSet=getExprNameSet();
  }
  this.rdSaveUtil.saveExprMetadata(exprNameSet);
  if (this.streamManager.isSubquery() == false)   this.rdSaveUtil.saveQueryDefn();
}",0.8582834331337326
77656,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    filters=rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters();
    FilterDefnUtil.getRealFilterList(filters,queryDefn.getFilters());
  }
  return runningOnRS;
}",0.8529674917983895
77657,"/** 
 * @throws DataException
 */
void saveQueryDefn() throws DataException {
  OutputStream outputStream;
  if (((QueryDefinition)queryDefn).getQueryResultsID() == null) {
    outputStream=streamManager.getOutStream(DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  }
  outputStream=streamManager.getOutStream(DataEngineContext.QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  try {
    outputStream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * @throws DataException
 */
void saveQueryDefn() throws DataException {
  OutputStream outputStream;
  if (queryDefn instanceof QueryDefinition && ((QueryDefinition)queryDefn).getQueryResultsID() == null) {
    outputStream=streamManager.getOutStream(DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  }
  outputStream=streamManager.getOutStream(DataEngineContext.QUERY_DEFN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  QueryDefnUtil.saveBaseQueryDefn(outputStream,queryDefn);
  try {
    outputStream.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9723756906077348
77658,"public IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext.getModuleHandle()).refreshMetaData(dataSetHandle);
}","public IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).refreshMetaData(dataSetHandle);
}",0.9596412556053812
77659,"public IResultMetaData getDataSetMetaData(DataSetHandle dataSetHandle,boolean useCache) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext.getModuleHandle()).getDataSetMetaData(dataSetHandle,useCache);
}","public IResultMetaData getDataSetMetaData(DataSetHandle dataSetHandle,boolean useCache) throws BirtException {
  return new DataSetMetaDataHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).getDataSetMetaData(dataSetHandle,useCache);
}",0.9647058823529412
77660,"/** 
 * @param dataEngine
 * @param modelAdaptor
 * @param moduleHandle
 */
DataSetMetaDataHelper(DataEngine dataEngine,IModelAdapter modelAdaptor,ModuleHandle moduleHandle){
  this.dataEngine=dataEngine;
  this.modelAdaptor=modelAdaptor;
  this.moduleHandle=moduleHandle;
}","/** 
 * @param dataEngine
 * @param modelAdaptor
 * @param moduleHandle
 */
DataSetMetaDataHelper(DataEngine dataEngine,IModelAdapter modelAdaptor,DataSessionContext sessionContext){
  this.dataEngine=dataEngine;
  this.modelAdaptor=modelAdaptor;
  this.sessionContext=sessionContext;
}",0.8035714285714286
77661,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,false).executeQuery(query).getResultMetaData();
    if (needsUseResultHint(dataSetHandle,metaData)) {
      metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,true).executeQuery(query).getResultMetaData();
    }
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=MetaDataPopulator.retrieveResultMetaData(dataSetHandle);
  if (metaData == null) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,false).executeQuery(query).getResultMetaData();
    if (needsUseResultHint(dataSetHandle,metaData)) {
      metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,sessionContext,true).executeQuery(query).getResultMetaData();
    }
  }
  if (!(dataSetHandle instanceof ScriptDataSetHandle))   clearUnusedData(dataSetHandle,metaData);
  return metaData;
}",0.9685990338164252
77662,"/** 
 * Handles a Rhino script evaluation result, converting Javascript native objects into equivalent Java objects if necessary.
 * @param inputObj Object returned by rhino engine.
 * @return If inputObj is a native Javascript object, its equivalent Java object is returned; otherwise inputObj is returned
 */
public static Object convertJavascriptValue(Object inputObj){
  if (inputObj instanceof Undefined) {
    return null;
  }
  if (inputObj instanceof IdScriptableObject) {
    String jsClass=((Scriptable)inputObj).getClassName();
    if (""String_Node_Str"".equals(jsClass)) {
      return new Date((long)Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Boolean(Context.toBoolean(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Double(Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return inputObj.toString();
    }
  }
 else   if (inputObj instanceof NativeJavaObject) {
    return ((NativeJavaObject)inputObj).unwrap();
  }
  return inputObj;
}","/** 
 * Handles a Rhino script evaluation result, converting Javascript object into equivalent Java objects if necessary.
 * @param inputObj Object returned by rhino engine.
 * @return If inputObj is a native Javascript object, its equivalent Java object is returned; otherwise inputObj is returned
 */
public static Object convertJavascriptValue(Object inputObj){
  if (inputObj instanceof Undefined) {
    return null;
  }
  if (inputObj instanceof IdScriptableObject) {
    String jsClass=((Scriptable)inputObj).getClassName();
    if (""String_Node_Str"".equals(jsClass)) {
      return new Date((long)Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Boolean(Context.toBoolean(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Double(Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return inputObj.toString();
    }
  }
 else   if (inputObj instanceof Wrapper) {
    return ((Wrapper)inputObj).unwrap();
  }
  return inputObj;
}",0.9693593314763232
77663,"/** 
 * Returns externalized message. If There is no externalized message, return null.
 * @param element Design element.
 * @param propName Name of property
 * @param locale the locale
 * @return externalized message.
 */
private static String searchForExternalizedValue(DesignElement element,String propIDName,ULocale locale){
  while (element != null) {
    Module root=element.getRoot();
    String textKey=(String)element.getLocalProperty(root,propIDName);
    if (!StringUtil.isBlank(textKey)) {
      String externalizedText=root.getMessage(textKey,locale);
      return externalizedText;
    }
    element=element.getExtendsElement();
  }
  return null;
}","/** 
 * Returns externalized message. If There is no externalized message, return null.
 * @param element Design element.
 * @param propName Name of property
 * @param locale the locale
 * @return externalized message.
 */
private static String searchForExternalizedValue(DesignElement element,String propIDName,ULocale locale){
  while (element != null) {
    Module root=element.getRoot();
    String textKey=(String)element.getLocalProperty(root,propIDName);
    if (!StringUtil.isBlank(textKey)) {
      String externalizedText=root.getMessage(textKey,locale);
      return externalizedText;
    }
    if (DesignElement.NO_BASE_ID != element.getBaseId()) {
      element=element.getVirtualParent();
    }
 else {
      element=element.getExtendsElement();
    }
  }
  return null;
}",0.9054520358868184
77664,"/** 
 * @param dataSourceDesign
 * @param dataSetDesign
 * @return
 */
public static DataSourceAndDataSet newInstance(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterBindings){
  DataSourceAndDataSet dataSourceAndSet=new DataSourceAndDataSet();
  dataSourceAndSet.dataSourceDesign=dataSourceDesign;
  dataSourceAndSet.dataSetDesign=dataSetDesign;
  dataSourceAndSet.parameterBindings=parameterBindings;
  return dataSourceAndSet;
}","/** 
 * @param dataSourceDesign
 * @param dataSetDesign
 * @return
 */
public static DataSourceAndDataSet newInstance(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection paramterHints){
  DataSourceAndDataSet dataSourceAndSet=new DataSourceAndDataSet();
  dataSourceAndSet.dataSourceDesign=dataSourceDesign;
  dataSourceAndSet.dataSetDesign=dataSetDesign;
  dataSourceAndSet.paramterHints=paramterHints;
  return dataSourceAndSet;
}",0.9424307036247336
77665,"public boolean equals(Object obj){
  if (obj == null || obj instanceof DataSourceAndDataSet == false)   return false;
  if (this == obj)   return true;
  IBaseDataSourceDesign dataSourceDesign2=((DataSourceAndDataSet)obj).dataSourceDesign;
  IBaseDataSetDesign dataSetDesign2=((DataSourceAndDataSet)obj).dataSetDesign;
  Collection parameterBindings2=((DataSourceAndDataSet)obj).parameterBindings;
  if (this.dataSourceDesign == dataSourceDesign2) {
    if (this.dataSetDesign == dataSetDesign2) {
      if (isEqualParameterBindings(this.parameterBindings,parameterBindings2))       return true;
    }
 else     if (this.dataSetDesign == null || dataSetDesign2 == null) {
      return false;
    }
  }
 else   if (this.dataSourceDesign == null || dataSourceDesign2 == null) {
    return false;
  }
 else {
    if ((this.dataSetDesign != dataSetDesign2) && (this.dataSetDesign == null || dataSetDesign2 == null))     return false;
  }
  if (isEqualDataSourceDesign(dataSourceDesign,dataSourceDesign2) == false)   return false;
  if (isEqualDataSetDesign(dataSetDesign,dataSetDesign2) == false)   return false;
  if (this.isEqualParameterBindings(this.parameterBindings,parameterBindings2) == false)   return false;
  return true;
}","public boolean equals(Object obj){
  if (obj == null || obj instanceof DataSourceAndDataSet == false)   return false;
  if (this == obj)   return true;
  IBaseDataSourceDesign dataSourceDesign2=((DataSourceAndDataSet)obj).dataSourceDesign;
  IBaseDataSetDesign dataSetDesign2=((DataSourceAndDataSet)obj).dataSetDesign;
  Collection paramterHints2=((DataSourceAndDataSet)obj).paramterHints;
  if (this.dataSourceDesign == dataSourceDesign2) {
    if (this.dataSetDesign == dataSetDesign2) {
      if (isEqualParamterHints(this.paramterHints,paramterHints2))       return true;
    }
 else     if (this.dataSetDesign == null || dataSetDesign2 == null) {
      return false;
    }
  }
 else   if (this.dataSourceDesign == null || dataSourceDesign2 == null) {
    return false;
  }
 else {
    if ((this.dataSetDesign != dataSetDesign2) && (this.dataSetDesign == null || dataSetDesign2 == null))     return false;
  }
  if (isEqualDataSourceDesign(dataSourceDesign,dataSourceDesign2) == false)   return false;
  if (isEqualDataSetDesign(dataSetDesign,dataSetDesign2) == false)   return false;
  if (this.isEqualParamterHints(this.paramterHints,paramterHints2) == false)   return false;
  return true;
}",0.940691927512356
77666,"/** 
 * compare data set design
 * @param dataSetDesign
 * @param dataSetDesign2
 * @return
 */
private boolean isEqualDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign == dataSetDesign2)   return true;
  if (dataSetDesign == null || dataSetDesign2 == null)   return false;
  if (isEqualString(dataSetDesign.getBeforeOpenScript(),dataSetDesign2.getBeforeOpenScript()) == false || isEqualString(dataSetDesign.getAfterOpenScript(),dataSetDesign2.getAfterOpenScript()) == false || isEqualString(dataSetDesign.getBeforeCloseScript(),dataSetDesign2.getBeforeCloseScript()) == false || isEqualString(dataSetDesign.getAfterCloseScript(),dataSetDesign2.getAfterCloseScript()) == false)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameterBindings(dataSetDesign.getInputParamBindings(),dataSetDesign2.getInputParamBindings()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || design1.getJoinType() != design2.getJoinType() || isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
  }
 else {
    return false;
  }
  return true;
}","/** 
 * compare data set design
 * @param dataSetDesign
 * @param dataSetDesign2
 * @return
 */
private boolean isEqualDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign == dataSetDesign2)   return true;
  if (dataSetDesign == null || dataSetDesign2 == null)   return false;
  if (isEqualString(dataSetDesign.getBeforeOpenScript(),dataSetDesign2.getBeforeOpenScript()) == false || isEqualString(dataSetDesign.getAfterOpenScript(),dataSetDesign2.getAfterOpenScript()) == false || isEqualString(dataSetDesign.getBeforeCloseScript(),dataSetDesign2.getBeforeCloseScript()) == false || isEqualString(dataSetDesign.getAfterCloseScript(),dataSetDesign2.getAfterCloseScript()) == false)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || design1.getJoinType() != design2.getJoinType() || isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
  }
 else {
    return false;
  }
  return true;
}",0.9817024661893397
77667,"public IPreparedQuery prepare(IQueryDefinition querySpec,Map appContext) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(DataEngineImpl.class.getName(),""String_Node_Str"",LogUtil.toString(querySpec));
  if (dataSources == null) {
    IllegalStateException e=new IllegalStateException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + LogUtil.toString(querySpec));
  IPreparedQuery result=PreparedQueryUtil.newInstance(this,querySpec,appContext);
  configureDataSetCache(querySpec,appContext);
  logger.fine(""String_Node_Str"");
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
  return result;
}","public IPreparedQuery prepare(IQueryDefinition querySpec,Map appContext) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(DataEngineImpl.class.getName(),""String_Node_Str"",LogUtil.toString(querySpec));
  if (dataSources == null) {
    IllegalStateException e=new IllegalStateException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + LogUtil.toString(querySpec));
  IPreparedQuery result=PreparedQueryUtil.newInstance(this,querySpec,appContext);
  logger.fine(""String_Node_Str"");
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
  return result;
}",0.9094412331406552
77668,"/** 
 * Executes the prepared execution plan as an inner query that appears within the scope of another report query. The outer query must have been prepared and executed, and its results given as a parameter to this method.
 * @param outerResults QueryResults for the executed outer query
 * @return The QueryResults object opened and ready to return the results ofa report query.
 */
public IQueryResults execute(IQueryResults outerResults,Scriptable scope) throws DataException {
  return preparedQuery.doPrepare(outerResults,scope,newExecutor(),this);
}","/** 
 * Executes the prepared execution plan as an inner query that appears within the scope of another report query. The outer query must have been prepared and executed, and its results given as a parameter to this method.
 * @param outerResults QueryResults for the executed outer query
 * @return The QueryResults object opened and ready to return the results ofa report query.
 */
public IQueryResults execute(IQueryResults outerResults,Scriptable scope) throws DataException {
  this.configureDataSetCache(queryDefn,appContext,scope,dataEngine.getSharedScope());
  return preparedQuery.doPrepare(outerResults,scope,newExecutor(),this);
}",0.9283333333333332
77669,"public void handleEvent(Event event){
switch (event.type) {
case SWT.FocusOut:
    if (isPopupControl(event.widget)) {
      Control cTmp=isPressingKey ? Display.getCurrent().getFocusControl() : Display.getCurrent().getCursorControl();
      isPressingKey=false;
      if (cTmp != null) {
        if (isPopupControl(cTmp) || cTmp == cnvSelection || cTmp == btnDown) {
          return;
        }
        if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
          bJustFocusLost=true;
        }
      }
      cmpDropDown.getShell().close();
    }
  break;
case SWT.KeyDown:
if (cmpDropDown != null && !cmpDropDown.getShell().isDisposed()) {
  if (event.keyCode == SWT.ARROW_UP) {
    cmpDropDown.getShell().close();
  }
 else   if (event.keyCode == SWT.CR || event.keyCode == SWT.KEYPAD_CR) {
    this.iTransparency=srTransparency.getSelection();
    if (fCurrent instanceof ColorDefinition && bTransparencyChanged) {
      ((ColorDefinition)fCurrent).setTransparency(this.iTransparency);
    }
    this.setFill(fCurrent);
    cmpDropDown.getShell().close();
  }
}
break;
case SWT.MouseDown:
if (!bEnabled) {
return;
}
fireHandleEvent(MOUSE_CLICKED_EVENT);
if (event.widget.equals(cnvSelection)) {
if (!cnvSelection.isDisposed()) {
toggleDropDown();
}
}
 else if (event.widget instanceof ColorSelectionCanvas) {
ColorDefinition cTmp=AttributeFactory.eINSTANCE.createColorDefinition();
Color clrTmp=((ColorSelectionCanvas)event.widget).getColorAt(event.x,event.y);
cTmp.set(clrTmp.getRed(),clrTmp.getGreen(),clrTmp.getBlue());
int iTransparency=255;
if (fCurrent instanceof ColorDefinition && this.iTransparency != 0) {
iTransparency=(bTransparencyChanged) ? this.iTransparency : ((ColorDefinition)fCurrent).getTransparency();
}
cTmp.setTransparency(iTransparency);
addAdapters(cTmp);
setFill(cTmp);
fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
cmpDropDown.getShell().close();
}
break;
case SWT.Traverse:
switch (event.detail) {
case SWT.TRAVERSE_TAB_NEXT:
case SWT.TRAVERSE_TAB_PREVIOUS:
isPressingKey=true;
}
break;
}
}","public void handleEvent(Event event){
switch (event.type) {
case SWT.FocusOut:
    if (isPopupControl(event.widget)) {
      Control cTmp=isPressingKey ? Display.getCurrent().getFocusControl() : Display.getCurrent().getCursorControl();
      isPressingKey=false;
      if (cTmp != null) {
        if (isPopupControl(cTmp) || SWT.getPlatform().indexOf(""String_Node_Str"") == 0 && (cTmp.equals(cnvSelection) || cTmp.equals(btnDown))) {
          return;
        }
        if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
          bJustFocusLost=true;
        }
      }
      cmpDropDown.getShell().close();
    }
  break;
case SWT.KeyDown:
if (cmpDropDown != null && !cmpDropDown.getShell().isDisposed()) {
  if (event.keyCode == SWT.ARROW_UP) {
    cmpDropDown.getShell().close();
  }
 else   if (event.keyCode == SWT.CR || event.keyCode == SWT.KEYPAD_CR) {
    this.iTransparency=srTransparency.getSelection();
    if (fCurrent instanceof ColorDefinition && bTransparencyChanged) {
      ((ColorDefinition)fCurrent).setTransparency(this.iTransparency);
    }
    this.setFill(fCurrent);
    cmpDropDown.getShell().close();
  }
}
break;
case SWT.MouseDown:
if (!bEnabled) {
return;
}
fireHandleEvent(MOUSE_CLICKED_EVENT);
if (event.widget.equals(cnvSelection)) {
if (!cnvSelection.isDisposed()) {
toggleDropDown();
}
}
 else if (event.widget instanceof ColorSelectionCanvas) {
ColorDefinition cTmp=AttributeFactory.eINSTANCE.createColorDefinition();
Color clrTmp=((ColorSelectionCanvas)event.widget).getColorAt(event.x,event.y);
cTmp.set(clrTmp.getRed(),clrTmp.getGreen(),clrTmp.getBlue());
int iTransparency=255;
if (fCurrent instanceof ColorDefinition && this.iTransparency != 0) {
iTransparency=(bTransparencyChanged) ? this.iTransparency : ((ColorDefinition)fCurrent).getTransparency();
}
cTmp.setTransparency(iTransparency);
addAdapters(cTmp);
setFill(cTmp);
fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
cmpDropDown.getShell().close();
}
break;
case SWT.Traverse:
switch (event.detail) {
case SWT.TRAVERSE_TAB_NEXT:
case SWT.TRAVERSE_TAB_PREVIOUS:
isPressingKey=true;
}
break;
}
}",0.9746682750301568
77670,"/** 
 * Packs the wizard to display enough size
 */
public void packWizard(){
  boolean changed=false;
  Point wizardSize=getShell().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  int iWizardWidth=Math.max(wizardSize.x,iWizardWidthMinimum);
  int iWizardHeight=Math.max(wizardSize.y,iWizardHeightMinimum);
  Point oldSize=getShell().getSize();
  if (oldSize.x < iWizardWidth) {
    oldSize.x=iWizardWidth;
    changed=true;
  }
  if (oldSize.y < iWizardHeight) {
    oldSize.y=iWizardHeight;
    changed=true;
  }
  if (changed) {
    getShell().setSize(oldSize);
    getShell().layout();
  }
}","/** 
 * Packs the wizard to display enough size
 */
public void packWizard(){
  if (!packNeeded) {
    return;
  }
  boolean changed=false;
  Point wizardSize=getShell().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  int iWizardWidth=Math.max(wizardSize.x,iWizardWidthMinimum);
  int iWizardHeight=Math.max(wizardSize.y,iWizardHeightMinimum);
  Point oldSize=getShell().getSize();
  if (oldSize.x < iWizardWidth) {
    oldSize.x=iWizardWidth;
    changed=true;
  }
  if (oldSize.y < iWizardHeight) {
    oldSize.y=iWizardHeight;
    changed=true;
  }
  if (changed) {
    getShell().setSize(oldSize);
    getShell().layout();
  }
}",0.9694467382328654
77671,"protected void initializeBounds(){
  getShell().setText(wizardTitle);
  setTitle(wizardTitle);
  if (imgShell != null) {
    getShell().setImage(imgShell);
  }
  getShell().addControlListener(this);
  getShell().addDisposeListener(this);
  String[] allTasks=TasksManager.instance().getTasksForWizard(WizardBase.this.sWizardID);
  for (int i=0; i < allTasks.length; i++) {
    CTabItem item=new CTabItem(getTabContainer(),SWT.NONE);
    item.setText(TasksManager.instance().getTask(allTasks[i]).getTitle());
    item.setData(allTasks[i]);
  }
  if (tmpTopTaskId != null) {
    int taskIndex=vTaskIDs.indexOf(tmpTopTaskId);
    cmpTaskContainer.setSelection(taskIndex);
  }
  if (getCurrentTask() != null) {
    getCurrentTask().setContext(WizardBase.this.context);
    switchTo(sCurrentActiveTask);
  }
  super.initializeBounds();
}","protected void initializeBounds(){
  getShell().setText(wizardTitle);
  setTitle(wizardTitle);
  if (imgShell != null) {
    getShell().setImage(imgShell);
  }
  getShell().addControlListener(this);
  getShell().addDisposeListener(this);
  String[] allTasks=TasksManager.instance().getTasksForWizard(WizardBase.this.sWizardID);
  for (int i=0; i < allTasks.length; i++) {
    CTabItem item=new CTabItem(getTabContainer(),SWT.NONE);
    item.setText(TasksManager.instance().getTask(allTasks[i]).getTitle());
    item.setData(allTasks[i]);
  }
  if (tmpTopTaskId != null) {
    int taskIndex=vTaskIDs.indexOf(tmpTopTaskId);
    cmpTaskContainer.setSelection(taskIndex);
  }
  if (getCurrentTask() != null) {
    getCurrentTask().setContext(WizardBase.this.context);
    packNeeded=false;
    switchTo(sCurrentActiveTask);
    packNeeded=true;
  }
  super.initializeBounds();
}",0.9747800586510263
77672,"/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,QueryDefinition queryDefn,boolean useColumnHints,boolean useFilters) throws BirtException {
  DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
  DataRequestSession session=DataRequestSession.newSession(context);
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  if (dataSet.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP) != null && dataSet.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP).iterator().hasNext()) {
    for (int n=0; n < columnCount; n++) {
      String columnLabel=metaData.getColumnLabel(n + 1);
      String columnName=metaData.getColumnName(n + 1);
      if (!columnLabel.equals(columnName) && columnName.lastIndexOf(RENAME_SEPARATOR) >= 0 && !columnLabel.equals(columnName.substring(0,columnName.lastIndexOf(RENAME_SEPARATOR)))) {
        dataSet.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP).clearValue();
        return execute(dataSet,queryDefn,useColumnHints,useFilters);
      }
    }
  }
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}","/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,QueryDefinition queryDefn,boolean useColumnHints,boolean useFilters) throws BirtException {
  this.populateAllOutputColumns(dataSet);
  DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
  DataRequestSession session=DataRequestSession.newSession(context);
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}",0.6045751633986928
77673,"/** 
 * get parsed parameters as string.
 * @param parsedParameters Map
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsStringWithDefaultValue(Map parsedParameters,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  if (parsedParameters == null) {
    parsedParameters=new HashMap();
    return parsedParameters;
  }
  for (Iterator iter=parsedParameters.keySet().iterator(); iter.hasNext(); ) {
    String paramName=iter.next().toString();
    Object paramValue=parsedParameters.get(paramName);
    if (paramValue == null && !ParameterAccessor.isReportParameterExist(request,paramName) && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || (this.configMap != null && !this.configMap.containsKey(paramName)))) {
      paramValue=this.getParameterDefaultValues(reportDesignHandle,paramName,options);
      parsedParameters.put(paramName,paramValue);
    }
  }
  return parsedParameters;
}","/** 
 * get parsed parameters as string.
 * @param parsedParameters Map
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsStringWithDefaultValue(Map parsedParameters,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  if (parsedParameters == null) {
    parsedParameters=new HashMap();
    return parsedParameters;
  }
  for (Iterator iter=parsedParameters.keySet().iterator(); iter.hasNext(); ) {
    String paramName=iter.next().toString();
    Object paramValue=parsedParameters.get(paramName);
    if (paramValue == null && !ParameterAccessor.isReportParameterExist(request,paramName) && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || this.configMap == null || !this.configMap.containsKey(paramName))) {
      paramValue=this.getParameterDefaultValues(reportDesignHandle,paramName,options);
      parsedParameters.put(paramName,paramValue);
    }
  }
  return parsedParameters;
}",0.8115234375
77674,"public BorderColorManager(String propertyName){
  super(propertyName,false,null);
}","public BorderColorManager(String propertyName){
  super(propertyName,false,CSSValueConstants.BLACK_RGB_VALUE);
}",0.8205128205128205
77675,"protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getMaxAvaWidth();
  Dimension content=getSpecifiedDimension(image);
  IStyle style=image.getComputedStyle();
  root=(ContainerArea)AreaFactory.createInlineContainer(image,true,true);
  int marginWidth=getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_LEFT)) + getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_RIGHT));
  int borderWidth=getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH)) + getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
  IStyle areaStyle=root.getStyle();
  if (marginWidth > maxWidth) {
    areaStyle.setMarginLeft(""String_Node_Str"");
    areaStyle.setMarginRight(""String_Node_Str"");
    marginWidth=0;
  }
  int maxContentWidth=maxWidth - marginWidth;
  if (content.getWidth() > maxContentWidth) {
    content.setDimension(maxContentWidth,(int)(maxContentWidth / content.getRatio()));
  }
  if (borderWidth > content.getWidth()) {
    areaStyle.setProperty(IStyle.STYLE_BORDER_LEFT_WIDTH,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH,IStyle.NUMBER_0);
    borderWidth=0;
  }
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image,content);
  root.addChild(imageArea);
  imageArea.setPosition(getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH)),getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH)));
  root.setWidth(content.getWidth());
  root.setHeight(content.getHeight());
  removePadding(areaStyle);
  imageArea.setWidth(root.getContentWidth());
  imageArea.setHeight(root.getContentHeight());
}","protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getMaxAvaWidth();
  Dimension content=getSpecifiedDimension(image);
  IStyle style=image.getComputedStyle();
  root=(ContainerArea)AreaFactory.createInlineContainer(image,true,true);
  int marginWidth=getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_LEFT)) + getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_RIGHT));
  int borderWidth=getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH)) + getDimensionValue(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
  int paddingWidth=getDimensionValue(style.getProperty(StyleConstants.STYLE_PADDING_LEFT)) + getDimensionValue(style.getProperty(StyleConstants.STYLE_PADDING_RIGHT));
  IStyle areaStyle=root.getStyle();
  if (marginWidth > maxWidth) {
    areaStyle.setMarginLeft(""String_Node_Str"");
    areaStyle.setMarginRight(""String_Node_Str"");
    marginWidth=0;
  }
  int maxContentWidthWithBorder=maxWidth - marginWidth;
  if (borderWidth > maxContentWidthWithBorder) {
    areaStyle.setProperty(IStyle.STYLE_BORDER_LEFT_WIDTH,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH,IStyle.NUMBER_0);
    borderWidth=0;
  }
  int maxContentWidthWithoutBorder=maxContentWidthWithBorder - borderWidth;
  if (paddingWidth > maxContentWidthWithoutBorder) {
    areaStyle.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    areaStyle.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    paddingWidth=0;
  }
  int maxContentWidth=maxContentWidthWithoutBorder - paddingWidth;
  if (content.getWidth() > maxContentWidth) {
    content.setDimension(maxContentWidth,(int)(maxContentWidth / content.getRatio()));
  }
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image,content);
  root.addChild(imageArea);
  int posX=(borderWidth == 0 ? 0 : getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH))) + (paddingWidth == 0 ? 0 : getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_LEFT)));
  int posY=getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH)) + getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_TOP));
  imageArea.setPosition(posX,posY);
  root.setWidth(content.getWidth() + (borderWidth == 0 ? 0 : (getDimensionValue(image.getComputedStyle().getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH)) + getDimensionValue(image.getComputedStyle().getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH)))) + (paddingWidth == 0 ? 0 : (getDimensionValue(image.getComputedStyle().getProperty(StyleConstants.STYLE_PADDING_LEFT)) + getDimensionValue(image.getComputedStyle().getProperty(StyleConstants.STYLE_PADDING_RIGHT)))));
  root.setHeight(content.getHeight() + getDimensionValue(image.getComputedStyle().getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH)) + getDimensionValue(image.getComputedStyle().getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH))+ getDimensionValue(image.getComputedStyle().getProperty(StyleConstants.STYLE_PADDING_TOP))+ getDimensionValue(image.getComputedStyle().getProperty(StyleConstants.STYLE_PADDING_BOTTOM)));
  imageArea.setWidth(content.getWidth());
  imageArea.setHeight(content.getHeight());
}",0.578505793048342
77676,"/** 
 * Create an IJointDataSetDesign instance.
 * @param handle
 * @param context2
 * @return
 * @throws BirtException
 */
private IJointDataSetDesign newJointDataSet(JointDataSetHandle handle,ExecutionContext context2) throws BirtException {
  Iterator it=handle.joinConditionsIterator();
  List joinConditions=new ArrayList();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    joinConditions.add(new JoinCondition(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),toDteJoinOperator(jc.getOperator())));
  }
  int joinType=toDteJoinType(jc.getJoinType());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(handle,context);
  JointDataSetDesign dteDataSet=new JointDataSetDesign(handle.getName(),jc.getLeftDataSet(),jc.getRightDataSet(),joinType,joinConditions);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(handle,dteDataSet);
  return dteDataSet;
}","/** 
 * Create an IJointDataSetDesign instance.
 * @param handle
 * @param context2
 * @return
 * @throws BirtException
 */
private IJointDataSetDesign newJointDataSet(JointDataSetHandle handle,ExecutionContext context2) throws BirtException {
  Iterator it=handle.joinConditionsIterator();
  List joinConditions=new ArrayList();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    joinConditions.add(new JoinCondition(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),toDteJoinOperator(jc.getOperator())));
  }
  int joinType=toDteJoinType(jc.getJoinType());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(handle,context);
  JointDataSetDesign dteDataSet=new JointDataSetDesign(handle.getQualifiedName(),jc.getLeftDataSet(),jc.getRightDataSet(),joinType,joinConditions);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(handle,dteDataSet);
  return dteDataSet;
}",0.9954058192955588
77677,"/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      try {
        try {
          paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValueObj.toString(),locale);
        }
 catch (        ValidationValueException e1) {
          paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),ParameterValidationUtil.DEFAULT_DATETIME_FORMAT,paramValueObj.toString());
        }
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}","/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      try {
        String format=ParameterAccessor.getFormat(request,paramName);
        if (format != null && format.length() > 0) {
          paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),format,paramValueObj.toString(),locale);
        }
 else {
          try {
            paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValueObj.toString(),locale);
          }
 catch (          ValidationValueException e1) {
            paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),ParameterValidationUtil.DEFAULT_DATETIME_FORMAT,paramValueObj.toString());
          }
        }
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}",0.90587243607755
77678,"/** 
 * Get report format.
 * @param request http request
 * @return report format
 */
public static String getFormat(HttpServletRequest request){
  String format=getParameter(request,PARAM_FORMAT);
  if (format != null && format.length() > 0) {
    if (PARAM_FORMAT_HTM.equalsIgnoreCase(format))     return PARAM_FORMAT_HTML;
    return format;
  }
  return PARAM_FORMAT_HTML;
}","/** 
 * Get current format of parameter.
 * @param request HttpServletRequest
 * @param paramName String
 * @return String
 */
public static String getFormat(HttpServletRequest request,String paramName){
  if (request == null || paramName == null)   return null;
  return getParameter(request,paramName + ""String_Node_Str"");
}",0.3546099290780142
77679,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,Object context){
  if (action == null || context == null)   return null;
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  String bookmark=action.getBookmark();
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  String baseURL=null;
  if (context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  if (context instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)context).getBaseURL();
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=action.getReportName();
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,Object context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  if (context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  if (context instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)context).getBaseURL();
  }
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    return ""String_Node_Str"" + bookmark + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=action.getReportName();
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}",0.8634716069271043
77680,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  if (context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  if (context instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)context).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=ParameterValidationUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  if (context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  if (context instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)context).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_RUN;
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      baseURL=baseURL.replaceFirst(IBirtConstants.VIEWER_FRAMESET,IBirtConstants.VIEWER_RUN);
    }
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=ParameterValidationUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9416255765866072
77681,"public Object visitForeign(IForeignContent foreign,Object value){
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    if (converter == null) {
      converter=new HTML2Content(foreign.getReportContent().getDesign().getBasePath());
    }
    converter.html2Content(foreign);
    executor=new DOMReportItemExecutor(foreign);
    executor.execute();
    return visitContent(foreign,value);
  }
  LabelContent label=new LabelContent(foreign);
  label.setText((String)foreign.getRawValue());
  return handleText(label);
}","public Object visitForeign(IForeignContent foreign,Object value){
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    if (converter == null) {
      converter=new HTML2Content(foreign.getReportContent().getDesign().getBasePath());
    }
    converter.html2Content(foreign);
    executor=new DOMReportItemExecutor(foreign);
    executor.execute();
    return visitContent(foreign,value);
  }
  LabelContent label=new LabelContent(foreign);
  return handleText(label);
}",0.9271653543307088
77682,"protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  Collection parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (documentInUrl)   this.missingParameter=false;
 else   this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
  this.parametersAsString=getParsedParametersAsStringWithDefaultValue(this.parametersAsString,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (documentInUrl)   this.missingParameter=false;
 else   this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
  this.parametersAsString=getParsedParametersAsStringWithDefaultValue(this.parametersAsString,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
}",0.9926873857404022
77683,"private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group,IGetParameterDefinitionTask task){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  Collection selectionList=convertEngineParameterSelectionChoice(task.getSelectionList(name));
  ParameterDefinition param=new ParameterDefinition(name,pattern,displayFormat,displayName,helpText,promptText,dataType,controlType,hidden,allowNull,allowBlank,mustMatch,concealValue,group,selectionList);
  return param;
}","private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group,IGetParameterDefinitionTask task){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(name,pattern,displayFormat,displayName,helpText,promptText,dataType,controlType,hidden,allowNull,allowBlank,mustMatch,concealValue,group,null);
  return param;
}",0.9572519083969464
77684,"private Map getParameterSelectionLists(IViewerReportDesignHandle design,Map params,InputOptions options,ViewerAttributeBean attrBean) throws ReportServiceException {
  if (params == null || params.size() == 0)   return new HashMap();
  List[] listArray=null;
  Map ret=new HashMap();
  List remainingParamNames=new ArrayList();
  String firstName=(String)params.keySet().iterator().next();
  Collection paramDefs=getReportService().getParameterDefinitions(design,options,false);
  ParameterDefinition paramDef=null;
  for (Iterator it=paramDefs.iterator(); it.hasNext(); ) {
    ParameterDefinition temp=(ParameterDefinition)it.next();
    if (temp.getName().equals(firstName)) {
      paramDef=temp;
      break;
    }
  }
  if (paramDef == null) {
    throw new ReportServiceException(BirtResources.getFormattedString(ResourceConstants.REPORT_SERVICE_EXCEPTION_INVALID_PARAMETER,new String[]{firstName}));
  }
  ParameterGroupDefinition group=paramDef.getGroup();
  if (group != null) {
    if (group.getParameterCount() > params.size()) {
      int remainingParams=group.getParameterCount() - params.size();
      for (int i=0; i < remainingParams; i++) {
        ParameterDefinition def=(ParameterDefinition)group.getParameters().get(params.size() + i);
        remainingParamNames.add(def.getName());
      }
    }
  }
  try {
    if (remainingParamNames.size() > 0) {
      listArray=new List[remainingParamNames.size()];
      for (int k=0; k < remainingParamNames.size(); k++) {
        Object[] keyValue=new Object[params.size() + k];
        Set values=params.keySet();
        int i=0;
        for (Iterator it=values.iterator(); it.hasNext(); ) {
          keyValue[i]=params.get(it.next());
          i++;
        }
        for (i=0; i < k; i++) {
          if (listArray[i].isEmpty()) {
            keyValue[params.size() + i]=null;
          }
 else {
            keyValue[params.size() + i]=listArray[i].get(0);
          }
        }
        listArray[k]=doQueryCascadeParameterSelectionList(remainingParamNames.get(k).toString(),design,group.getName(),keyValue,options,attrBean);
        ret.put(remainingParamNames.get(k),listArray[k]);
      }
    }
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  return ret;
}","private Map getParameterSelectionLists(IViewerReportDesignHandle design,Map params,InputOptions options,ViewerAttributeBean attrBean) throws ReportServiceException {
  if (params == null || params.size() == 0)   return new HashMap();
  List[] listArray=null;
  Map ret=new HashMap();
  List remainingParamNames=new ArrayList();
  String firstName=(String)params.keySet().iterator().next();
  Collection paramDefs=attrBean.getParameterDefList();
  ParameterDefinition paramDef=null;
  for (Iterator it=paramDefs.iterator(); it.hasNext(); ) {
    ParameterDefinition temp=(ParameterDefinition)it.next();
    if (temp.getName().equals(firstName)) {
      paramDef=temp;
      break;
    }
  }
  if (paramDef == null) {
    throw new ReportServiceException(BirtResources.getFormattedString(ResourceConstants.REPORT_SERVICE_EXCEPTION_INVALID_PARAMETER,new String[]{firstName}));
  }
  ParameterGroupDefinition group=paramDef.getGroup();
  if (group != null) {
    if (group.getParameterCount() > params.size()) {
      int remainingParams=group.getParameterCount() - params.size();
      for (int i=0; i < remainingParams; i++) {
        ParameterDefinition def=(ParameterDefinition)group.getParameters().get(params.size() + i);
        remainingParamNames.add(def.getName());
      }
    }
  }
  try {
    if (remainingParamNames.size() > 0) {
      listArray=new List[remainingParamNames.size()];
      for (int k=0; k < remainingParamNames.size(); k++) {
        Object[] keyValue=new Object[params.size() + k];
        Set values=params.keySet();
        int i=0;
        for (Iterator it=values.iterator(); it.hasNext(); ) {
          keyValue[i]=params.get(it.next());
          i++;
        }
        for (i=0; i < k; i++) {
          if (listArray[i].isEmpty()) {
            keyValue[params.size() + i]=null;
          }
 else {
            keyValue[params.size() + i]=listArray[i].get(0);
          }
        }
        listArray[k]=doQueryCascadeParameterSelectionList(remainingParamNames.get(k).toString(),design,group.getName(),keyValue,options,attrBean);
        ret.put(remainingParamNames.get(k),listArray[k]);
      }
    }
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  return ret;
}",0.98677831643896
77685,"private static ParameterGroupDefinition convertParameterGroup(IParameterGroupDefn engineParam,IGetParameterDefinitionTask task){
  boolean cascade=engineParam instanceof ICascadingParameterGroup;
  ParameterGroupDefinition paramGroup=new ParameterGroupDefinition(engineParam.getName(),engineParam.getDisplayName(),engineParam.getPromptText(),null,cascade);
  List contents=convertParametersInGroup(engineParam.getContents(),paramGroup,task);
  paramGroup.setParameters(contents);
  return paramGroup;
}","private static ParameterGroupDefinition convertParameterGroup(IParameterGroupDefn engineParam,IGetParameterDefinitionTask task){
  boolean cascade=engineParam instanceof ICascadingParameterGroup;
  String name=engineParam.getName();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  ParameterGroupDefinition paramGroup=new ParameterGroupDefinition(name,displayName,promptText,null,cascade,helpText);
  List contents=convertParametersInGroup(engineParam.getContents(),paramGroup,task);
  paramGroup.setParameters(contents);
  return paramGroup;
}",0.6958041958041958
77686,"public ParameterGroupDefinition(String name,String displayName,String promptText,List parameters,boolean cascade){
  this.name=name;
  this.displayName=displayName;
  this.promptText=promptText;
  this.parameters=parameters;
  this.cascade=cascade;
}","public ParameterGroupDefinition(){
}",0.2517482517482518
77687,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  this.format=ParameterAccessor.getFormat(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(ResourceConstants.BIRT_VIEWER_TITLE);
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.__initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  this.format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.PARAM_FORMAT_HTM.equalsIgnoreCase(this.format)) {
    this.format=ParameterAccessor.PARAM_FORMAT_HTML;
  }
  if (!ParameterAccessor.validateFormat(this.format)) {
    this.exception=new Exception(BirtResources.getString(ResourceConstants.VIEWER_ERROR_UNSUPPORTEDFORMAT));
    return;
  }
  this.maxRows=ParameterAccessor.getMaxRows(request);
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(ResourceConstants.BIRT_VIEWER_TITLE);
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.__initParameters(request);
}",0.8723404255319149
77688,"void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.verticalSpacing=10;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverList=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=""String_Node_Str"";
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  new Label(content,SWT.NONE);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(content,IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
}","void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.verticalSpacing=10;
  layout.marginBottom=10;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverList=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=""String_Node_Str"";
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  new Label(content,SWT.NONE);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(content,IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
}",0.9965780468544354
77689,"protected Control createContents(Composite parent){
  Composite mainComposite=new Composite(parent,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  data.verticalSpan=5;
  GridLayout layout=new GridLayout();
  mainComposite.setLayout(layout);
  Group sqlDataSetGroup=new Group(mainComposite,SWT.NONE);
  sqlDataSetGroup.setLayout(layout);
  sqlDataSetGroup.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  sqlDataSetGroup.setLayoutData(data);
  sqlDataSetGroup.setEnabled(true);
  maxDisplaySchemaEditor=new IntegerFieldEditor(USER_MAX_NUM_OF_SCHEMA,""String_Node_Str"",sqlDataSetGroup);
  Label lab=maxDisplaySchemaEditor.getLabelControl(sqlDataSetGroup);
  lab.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  maxDisplaySchemaEditor.setPage(this);
  maxDisplaySchemaEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxDisplaySchemaEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxDisplaySchemaEditor.setValidRange(0,MAX_MAX_ROW);
  maxDisplaySchemaEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxDisplaySchemaEditor.isValid());
    }
  }
);
  maxDisplaySchemaEditor.setErrorMessage(JdbcPlugin.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_MAX_ROW)}));
  String defaultMaxSchema=JdbcPlugin.getDefault().getPluginPreferences().getString(USER_MAX_NUM_OF_SCHEMA);
  if (defaultMaxSchema == null || defaultMaxSchema.trim().length() <= 0) {
    defaultMaxSchema=String.valueOf(DEFAULT_MAX_NUM_OF_SCHEMA);
  }
  maxDisplaySchemaEditor.setStringValue(defaultMaxSchema);
  maxDisplayTableEditor=new IntegerFieldEditor(USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,""String_Node_Str"",sqlDataSetGroup);
  lab=maxDisplayTableEditor.getLabelControl(sqlDataSetGroup);
  lab.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  maxDisplayTableEditor.setPage(this);
  maxDisplayTableEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxDisplayTableEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxDisplayTableEditor.setValidRange(0,MAX_MAX_ROW);
  maxDisplayTableEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxDisplayTableEditor.isValid());
    }
  }
);
  maxDisplayTableEditor.setErrorMessage(JdbcPlugin.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_MAX_ROW)}));
  String defaultMaxTable=JdbcPlugin.getDefault().getPluginPreferences().getString(USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
  if (defaultMaxTable == null || defaultMaxTable.trim().length() <= 0) {
    defaultMaxTable=String.valueOf(DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA);
  }
  maxDisplayTableEditor.setStringValue(defaultMaxTable);
  Utility.setSystemHelp(mainComposite,IHelpConstants.CONEXT_ID_PREFERENCE_DATASET_JDBC);
  return mainComposite;
}","protected Control createContents(Composite parent){
  Composite mainComposite=new Composite(parent,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  data.verticalSpan=5;
  GridLayout layout=new GridLayout();
  mainComposite.setLayout(layout);
  Group sqlDataSetGroup=new Group(mainComposite,SWT.NONE);
  sqlDataSetGroup.setLayout(layout);
  sqlDataSetGroup.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  sqlDataSetGroup.setLayoutData(data);
  sqlDataSetGroup.setEnabled(true);
  maxDisplaySchemaEditor=new IntegerFieldEditor(USER_MAX_NUM_OF_SCHEMA,""String_Node_Str"",sqlDataSetGroup);
  Label lab=maxDisplaySchemaEditor.getLabelControl(sqlDataSetGroup);
  lab.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  maxDisplaySchemaEditor.setPage(this);
  maxDisplaySchemaEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxDisplaySchemaEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxDisplaySchemaEditor.setValidRange(0,MAX_MAX_ROW);
  maxDisplaySchemaEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxDisplaySchemaEditor.isValid());
    }
  }
);
  maxDisplaySchemaEditor.setErrorMessage(JdbcPlugin.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_MAX_ROW)}));
  String defaultMaxSchema=JdbcPlugin.getDefault().getPluginPreferences().getString(USER_MAX_NUM_OF_SCHEMA);
  if (defaultMaxSchema == null || defaultMaxSchema.trim().length() <= 0) {
    defaultMaxSchema=String.valueOf(DEFAULT_MAX_NUM_OF_SCHEMA);
  }
  maxDisplaySchemaEditor.setStringValue(defaultMaxSchema);
  maxDisplayTableEditor=new IntegerFieldEditor(USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,""String_Node_Str"",sqlDataSetGroup);
  lab=maxDisplayTableEditor.getLabelControl(sqlDataSetGroup);
  lab.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  maxDisplayTableEditor.setPage(this);
  maxDisplayTableEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxDisplayTableEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxDisplayTableEditor.setValidRange(0,MAX_MAX_ROW);
  maxDisplayTableEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxDisplayTableEditor.isValid());
    }
  }
);
  maxDisplayTableEditor.setErrorMessage(JdbcPlugin.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_MAX_ROW)}));
  String defaultMaxTable=JdbcPlugin.getDefault().getPluginPreferences().getString(USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
  if (defaultMaxTable == null || defaultMaxTable.trim().length() <= 0) {
    defaultMaxTable=String.valueOf(DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA);
  }
  maxDisplayTableEditor.setStringValue(defaultMaxTable);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_PREFERENCE_DATASET_JDBC);
  return mainComposite;
}",0.9959435339931852
77690,"private void handleElement(Element ele,boolean needEscape,HashMap cssStyles,IContent content,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setParent(content);
    handleStyle(ele,cssStyles,container);
    ActionContent oldAction=action;
    handleAnchor(ele,container);
    processNodes(ele,needEscape,cssStyles,container);
    this.action=oldAction;
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.BLOCK_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.MIDDLE_VALUE);
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setInlineStyle(style);
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    TextContent text=new TextContent((ReportContent)content.getReportContent());
    addChild(container,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(""String_Node_Str"");
    }
    style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    text.setInlineStyle(style);
    IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
    addChild(container,childContainer);
    childContainer.setInlineStyle(style);
    processNodes(ele,needEscape,cssStyles,childContainer);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      TextContent text=new TextContent((ReportContent)content.getReportContent());
      addChild(content,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      processNodes(ele,needEscape,cssStyles,container);
    }
  }
 else {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    handleStyle(ele,cssStyles,container);
    if (htmlDisplayMode.contains(ele.getTagName())) {
      addChild(content,container);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      if (inlineContainerStack.isEmpty()) {
        container.setParent(content);
      }
 else {
        container.setParent((IContent)inlineContainerStack.peek());
      }
      inlineContainerStack.push(container);
      processNodes(ele,needEscape,cssStyles,content);
      inlineContainerStack.pop();
    }
  }
}","private void handleElement(Element ele,boolean needEscape,HashMap cssStyles,IContent content,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setParent(content);
    handleStyle(ele,cssStyles,container);
    ActionContent oldAction=action;
    handleAnchor(ele,container);
    processNodes(ele,needEscape,cssStyles,container);
    this.action=oldAction;
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.BLOCK_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.MIDDLE_VALUE);
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setInlineStyle(style);
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    TextContent text=new TextContent((ReportContent)content.getReportContent());
    addChild(container,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(""String_Node_Str"");
    }
    style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    text.setInlineStyle(style);
    IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
    addChild(container,childContainer);
    childContainer.setInlineStyle(style);
    processNodes(ele,needEscape,cssStyles,childContainer);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=new TextContent((ReportContent)content.getReportContent());
      addChild(content,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      processNodes(ele,needEscape,cssStyles,container);
    }
  }
 else {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    handleStyle(ele,cssStyles,container);
    if (htmlDisplayMode.contains(ele.getTagName())) {
      addChild(content,container);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      if (inlineContainerStack.isEmpty()) {
        container.setParent(content);
      }
 else {
        container.setParent((IContent)inlineContainerStack.peek());
      }
      inlineContainerStack.push(container);
      processNodes(ele,needEscape,cssStyles,content);
      inlineContainerStack.pop();
    }
  }
}",0.8020004546487838
77691,"/** 
 * Sets the page break inside property for block-level elements. The input value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @param value the new page break inside property
 * @throws SemanticException if the value is not one of the above.
 */
public void setPageBreakInside(String value) throws SemanticException {
  setStringProperty(Style.PAGE_BREAK_INSIDE_PROP,value);
}","/** 
 * Sets the page break inside property for block-level elements. The input value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @param value the new page break inside property
 * @throws SemanticException if the value is not one of the above.
 * @deprecated
 */
public void setPageBreakInside(String value) throws SemanticException {
  setStringProperty(Style.PAGE_BREAK_INSIDE_PROP,value);
}",0.9862258953168044
77692,"/** 
 * Returns the page break inside property for block-level elements. The return value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @return the page break inside property
 */
public String getPageBreakInside(){
  return getStringProperty(Style.PAGE_BREAK_INSIDE_PROP);
}","/** 
 * Returns the page break inside property for block-level elements. The return value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @return the page break inside property
 * @deprecated
 */
public String getPageBreakInside(){
  return getStringProperty(Style.PAGE_BREAK_INSIDE_PROP);
}",0.9828571428571428
77693,"/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData() throws EngineException {
  DataInputStream dis=null;
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    dis=new DataInputStream(reader.getStream(ReportDocumentConstants.DATA_META_STREAM));
    HashMap queryCounts=new HashMap();
    while (true) {
      IOUtil.readString(dis);
      IOUtil.readLong(dis);
      String queryId=IOUtil.readString(dis);
      String rsetId=IOUtil.readString(dis);
      rsetId2queryIdMapping.put(rsetId,queryId);
      int count=-1;
      Integer countObj=(Integer)queryCounts.get(queryId);
      if (countObj != null) {
        count=countObj.intValue();
      }
      count++;
      String rsetName=getQueryName(queryId);
      if (count > 0) {
        rsetName=rsetName + ""String_Node_Str"" + count;
      }
      queryCounts.put(queryId,new Integer(count));
      rsetName2IdMapping.put(rsetName,rsetId);
      if (null != query2ResultMetaData) {
        IQueryDefinition query=getQuery(queryId);
        ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
        if (metaData.getColumnCount() > 0) {
          IResultSetItem resultItem=new ResultSetItem(rsetName,metaData);
          resultMetaList.add(resultItem);
        }
      }
    }
  }
 catch (  EOFException eofe) {
  }
catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
 finally {
    if (dis != null) {
      try {
        dis.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}","/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData() throws EngineException {
  DataInputStream dis=null;
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    dis=new DataInputStream(reader.getStream(ReportDocumentConstants.DATA_META_STREAM));
    HashMap queryCounts=new HashMap();
    while (true) {
      IOUtil.readString(dis);
      IOUtil.readLong(dis);
      String queryId=IOUtil.readString(dis);
      String rsetId=IOUtil.readString(dis);
      rsetId2queryIdMapping.put(rsetId,queryId);
      int count=-1;
      Integer countObj=(Integer)queryCounts.get(queryId);
      if (countObj != null) {
        count=countObj.intValue();
      }
      count++;
      String rsetName=getQueryName(queryId);
      if (count > 0) {
        rsetName=rsetName + ""String_Node_Str"" + count;
      }
      queryCounts.put(queryId,new Integer(count));
      rsetName2IdMapping.put(rsetName,rsetId);
      if (null != query2ResultMetaData) {
        IQueryDefinition query=getQuery(queryId);
        if (isMasterQuery(query)) {
          ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
          if (metaData.getColumnCount() > 0) {
            IResultSetItem resultItem=new ResultSetItem(rsetName,metaData);
            resultMetaList.add(resultItem);
          }
        }
      }
    }
  }
 catch (  EOFException eofe) {
  }
catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
 finally {
    if (dis != null) {
      try {
        dis.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}",0.9831730769230768
77694,"/** 
 * localzie the text.
 * @param key text key
 * @param text default text
 * @return localized text.
 */
private String localize(String key,String text){
  ReportDesignHandle reportDesign=getReportDesign();
  if (key != null && reportDesign != null) {
    String t=reportDesign.getMessage(key,locale);
    if (t != null) {
      return t;
    }
  }
  return text;
}","/** 
 * localzie the text.
 * @param key text key
 * @param text default text
 * @return localized text.
 */
private String localize(IContent content,String key,String text){
  assert(content != null);
  assert(content.getGenerateBy() != null);
  DesignElementHandle element=((ReportItemDesign)content.getGenerateBy()).getHandle();
  if (key != null && element != null) {
    String t=ModuleUtil.getExternalizedValue(element,key,text,ULocale.forLocale(locale));
    if (t != null) {
      return t;
    }
  }
  return text;
}",0.6465324384787472
77695,"public Object visitTable(ITableContent table,Object value){
  if (table.getGenerateBy() instanceof TableItemDesign)   TableScriptExecutor.handleOnRender(table,context);
 else   if (table.getGenerateBy() instanceof GridItemDesign)   GridScriptExecutor.handleOnRender(table,context);
  String captionText=table.getCaption();
  String captionKey=table.getCaptionKey();
  captionText=localize(captionKey,captionText);
  table.setCaption(captionText);
  return table;
}","public Object visitTable(ITableContent table,Object value){
  if (table.getGenerateBy() instanceof TableItemDesign)   TableScriptExecutor.handleOnRender(table,context);
 else   if (table.getGenerateBy() instanceof GridItemDesign)   GridScriptExecutor.handleOnRender(table,context);
  String captionText=table.getCaption();
  String captionKey=table.getCaptionKey();
  captionText=localize(table,captionKey,captionText);
  table.setCaption(captionText);
  return table;
}",0.9935760171306208
77696,"/** 
 * process the data content <li> localize the help text <li> format the value <li> handle it as it is an text.
 * @param data data object
 */
protected void processData(IDataContent data){
  String helpText=localize(data.getHelpKey(),data.getHelpText());
  data.setHelpText(helpText);
  String text=""String_Node_Str"";
  if (data.getLabelKey() != null || data.getLabelText() != null) {
    text=localize(data.getLabelKey(),data.getLabelText());
  }
 else {
    Object value=data.getValue();
    if (value != null) {
      IStyle style=data.getComputedStyle();
      if (value instanceof Number) {
        String format=style.getNumberFormat();
        NumberFormatter fmt=context.getNumberFormatter(format);
        text=fmt.format((Number)value);
        CSSValue align=style.getProperty(IStyle.STYLE_NUMBER_ALIGN);
        if (align != null && align != CSSValueConstants.NONE_VALUE) {
          data.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,align);
        }
      }
 else       if (value instanceof String) {
        StringFormatter fmt=context.getStringFormatter(style.getStringFormat());
        text=fmt.format((String)value);
      }
 else       if (value instanceof Date) {
        DateFormatter fmt=context.getDateFormatter(style.getDateFormat());
        text=fmt.format((Date)value);
      }
 else {
        text=value.toString();
      }
    }
  }
  data.setText(text);
}","/** 
 * process the data content <li> localize the help text <li> format the value <li> handle it as it is an text.
 * @param data data object
 */
protected void processData(IDataContent data){
  String helpText=localize(data,data.getHelpKey(),data.getHelpText());
  data.setHelpText(helpText);
  String text=""String_Node_Str"";
  if (data.getLabelKey() != null || data.getLabelText() != null) {
    text=localize(data,data.getLabelKey(),data.getLabelText());
  }
 else {
    Object value=data.getValue();
    if (value != null) {
      IStyle style=data.getComputedStyle();
      if (value instanceof Number) {
        String format=style.getNumberFormat();
        NumberFormatter fmt=context.getNumberFormatter(format);
        text=fmt.format((Number)value);
        CSSValue align=style.getProperty(IStyle.STYLE_NUMBER_ALIGN);
        if (align != null && align != CSSValueConstants.NONE_VALUE) {
          data.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,align);
        }
      }
 else       if (value instanceof String) {
        StringFormatter fmt=context.getStringFormatter(style.getStringFormat());
        text=fmt.format((String)value);
      }
 else       if (value instanceof Date) {
        DateFormatter fmt=context.getDateFormatter(style.getDateFormat());
        text=fmt.format((Date)value);
      }
 else {
        text=value.toString();
      }
    }
  }
  data.setText(text);
}",0.996423462088698
77697,"/** 
 * process the label content <li> localize the help text <li> localize the label content <li> handle it as it is an text
 * @param label label object
 */
protected void processLabel(ILabelContent label){
  String helpText=localize(label.getHelpKey(),label.getHelpText());
  label.setHelpText(helpText);
  String text=localize(label.getLabelKey(),label.getLabelText());
  label.setText(text);
}","/** 
 * process the label content <li> localize the help text <li> localize the label content <li> handle it as it is an text
 * @param label label object
 */
protected void processLabel(ILabelContent label){
  String helpText=localize(label,label.getHelpKey(),label.getHelpText());
  label.setHelpText(helpText);
  String text=localize(label,label.getLabelKey(),label.getLabelText());
  label.setText(text);
}",0.9851485148514852
77698,"protected void processImage(IImageContent image){
  String altText=localize(image.getAltTextKey(),image.getAltText());
  image.setAltText(altText);
  String helpText=localize(image.getHelpKey(),image.getHelpText());
  image.setHelpText(helpText);
}","protected void processImage(IImageContent image){
  String altText=localize(image,image.getAltTextKey(),image.getAltText());
  image.setAltText(altText);
  String helpText=localize(image,image.getHelpKey(),image.getHelpText());
  image.setHelpText(helpText);
}",0.9763779527559056
77699,"/** 
 * Returns externalized message for the given locale.
 * @param textIDProp the display key property name
 * @param textProp the property name
 * @param locale the locale
 * @return externalized message.
 */
public String getExternalizedValue(String textIDProp,String textProp,ULocale locale){
  return ModelUtil.getExternalizedValue(getElement(),textIDProp,textProp,locale);
}","/** 
 * Returns externalized message.
 * @param textIDProp the display key property name
 * @param textProp the property name
 * @return externalized message.
 */
public String getExternalizedValue(String textIDProp,String textProp){
  return ModelUtil.getExternalizedValue(getElement(),textIDProp,textProp,ThreadResources.getLocale());
}",0.8678720445062587
77700,"/** 
 * Returns externalized message for the given locale.
 * @param textIDProp the display key property name
 * @param textProp the property name
 * @param locale the locale
 * @return externalized message.
 */
public String getExternalizedValue(String textIDProp,String textProp,ULocale locale){
  return ModelUtil.getExternalizedValue(getElement(),textIDProp,textProp,locale);
}","/** 
 * Returns externalized message.
 * @param textIDProp the display key property name
 * @param textProp the property name
 * @return externalized message.
 */
public String getExternalizedValue(String textIDProp,String textProp){
  return ModelUtil.getExternalizedValue(getElement(),textIDProp,textProp,ThreadResources.getLocale());
}",0.8678720445062587
77701,"/** 
 * Declares all the workbench's images, including both ""shared"" ones and internal ones.
 */
private final static void declareImages(){
  declareImage(ISharedImages.IMG_OBJS_ERROR_TSK,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_OBJ_FOLDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_COPY,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_CUT,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_UNDO,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_REDO,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_PASTE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_DELETE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEMPLATEITEM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NEW_REPORT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NEW_LIBRARY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NEW_TEMPLATE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_FILE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_QUIK_EDIT,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_PERSPECTIVE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_PROJECT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_CELL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_JOINT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GRID,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXTDATA,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_IMAGE,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LABEL,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LINE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_MASTERPAGE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_GRAPHICMASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_CASCADING_PARAMETER_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ROW,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCALAR_PARAMETER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_SIMPLE_MASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_STYLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXT,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIBRARY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIBRARY_REFERENCED,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_THEME,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SET_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SOURCE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SET_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SOURCE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SET_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SOURCE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GRID_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXTDATA_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_IMAGE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LABEL_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXT_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_BODY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_MASTERPAGES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_STYLES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_HEADER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DETAILS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_FOOTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUPS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUP_HEADER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUP_FOOTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_LIBRARIES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_THEMES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_NORMAL,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_MASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_RULER,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_ALL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_BOTTOM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_TOP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_NOBORDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_MISSING_IMG,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATA_EXPLORER_VIEW,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DATA_SETS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DATA_SOURCES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_PARAMETERS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_DATA_TABLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATA_COLUMN,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_OPERATOR,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_GLOBAL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_METHOD,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_STATIC_METHOD,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_MEMBER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_STATIC_MEMBER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_BUILDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARD_DATASOURCE,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARD_DATASET,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARDPAGE_DATASETSELECTION,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_HISTORYTOOLBAR_BACKWARDDISABLED,ICONS_PATH + DATA_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_HISTORYTOOLBAR_BACKWARDENABLED,ICONS_PATH + DATA_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_HISTORYTOOLBAR_FORWARDDISABLED,ICONS_PATH + DATA_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_HISTORYTOOLBAR_FORWARDENABLED,ICONS_PATH + DATA_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_WIDTH,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_WIDTH + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_STYLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_STYLE + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_UNDERLINE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_UNDERLINE + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_LINE_THROUGH,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_LINE_THROUGH + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_NONE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_TOP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_BOTTOM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_CENTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_CENTER + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_JUSTIFY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_JUSTIFY + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_LEFT + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_RIGHT + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TOP_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BOTTOM_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_LEFT_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_RIGHT_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_PARAMETERS,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_PARAMETERS_HIDE,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_REFRESH,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_AUTOTEXT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DEFAULT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATAEDIT_DLG_TITLE_BANNER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_OPEN_FILE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(""String_Node_Str"",ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ENABLE_RESTORE_PROPERTIES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DISABLE_RESTORE_PROPERTIES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_TEMPLATE_NO_PREVIEW,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
}","/** 
 * Declares all the workbench's images, including both ""shared"" ones and internal ones.
 */
private final static void declareImages(){
  declareImage(ISharedImages.IMG_OBJS_ERROR_TSK,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_OBJ_FOLDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_COPY,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_CUT,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_UNDO,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_REDO,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_PASTE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_DELETE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEMPLATEITEM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NEW_REPORT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NEW_LIBRARY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NEW_TEMPLATE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_FILE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_QUIK_EDIT,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_PERSPECTIVE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_PROJECT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_CELL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_JOINT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GRID,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXTDATA,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_IMAGE,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LABEL,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LINE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_MASTERPAGE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_GRAPHICMASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_CASCADING_PARAMETER_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ROW,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCALAR_PARAMETER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_SIMPLE_MASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_STYLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXT,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIBRARY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIBRARY_REFERENCED,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_THEME,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SET_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SOURCE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SET_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SOURCE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SET_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SOURCE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_JOINT_DATA_SET_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GRID_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXTDATA_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_IMAGE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LABEL_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXT_LINK,ICONS_PATH + LINK_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_BODY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_MASTERPAGES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_STYLES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_HEADER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DETAILS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_FOOTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUPS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUP_HEADER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUP_FOOTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_LIBRARIES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_THEMES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_NORMAL,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_MASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_RULER,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_ALL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_BOTTOM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_TOP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_NOBORDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_MISSING_IMG,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATA_EXPLORER_VIEW,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DATA_SETS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DATA_SOURCES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_PARAMETERS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_DATA_TABLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATA_COLUMN,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_OPERATOR,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_GLOBAL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_METHOD,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_STATIC_METHOD,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_MEMBER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_STATIC_MEMBER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_BUILDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARD_DATASOURCE,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARD_DATASET,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARDPAGE_DATASETSELECTION,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_HISTORYTOOLBAR_BACKWARDDISABLED,ICONS_PATH + DATA_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_HISTORYTOOLBAR_BACKWARDENABLED,ICONS_PATH + DATA_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_HISTORYTOOLBAR_FORWARDDISABLED,ICONS_PATH + DATA_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_HISTORYTOOLBAR_FORWARDENABLED,ICONS_PATH + DATA_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_WIDTH,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_WIDTH + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_STYLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_STYLE + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_UNDERLINE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_UNDERLINE + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_LINE_THROUGH,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_LINE_THROUGH + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_NONE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_TOP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_BOTTOM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_CENTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_CENTER + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_JUSTIFY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_JUSTIFY + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_LEFT + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_RIGHT + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TOP_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BOTTOM_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_LEFT_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_RIGHT_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_PARAMETERS,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_PARAMETERS_HIDE,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_REFRESH,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_AUTOTEXT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DEFAULT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATAEDIT_DLG_TITLE_BANNER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_OPEN_FILE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(""String_Node_Str"",ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ENABLE_RESTORE_PROPERTIES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DISABLE_RESTORE_PROPERTIES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_TEMPLATE_NO_PREVIEW,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
}",0.996252762386702
77702,"/** 
 * Return an instance of JointResultMeta.
 * @param left
 * @param right
 * @return
 * @throws DataException
 */
private JointResultMetadata getJointResultMetadata(IResultMetaData left,IResultMetaData right) throws DataException {
  try {
    String leftPrefix=dataSet.getLeftDataSetDesignName();
    String rightPrefix=dataSet.getRightDataSetDesignName();
    if (leftPrefix.equals(rightPrefix)) {
      leftPrefix=leftPrefix + ""String_Node_Str"";
      rightPrefix=rightPrefix + ""String_Node_Str"";
    }
    leftPrefix=leftPrefix + COLUMN_NAME_SPLITTER;
    rightPrefix=rightPrefix + COLUMN_NAME_SPLITTER;
    JointResultMetadata meta=populatorJointResultMetadata(left,leftPrefix,right,rightPrefix);
    return meta;
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}","/** 
 * Return an instance of JointResultMeta.
 * @param left
 * @param right
 * @return
 * @throws DataException
 */
private JointResultMetadata getJointResultMetadata(IResultMetaData left,IResultMetaData right) throws DataException {
  if (left == null || right == null) {
    throw new DataException(ResourceConstants.UNEXPECTED_ERROR);
  }
  try {
    String leftPrefix=dataSet.getLeftDataSetDesignName();
    String rightPrefix=dataSet.getRightDataSetDesignName();
    if (leftPrefix.equals(rightPrefix)) {
      leftPrefix=leftPrefix + ""String_Node_Str"";
      rightPrefix=rightPrefix + ""String_Node_Str"";
    }
    leftPrefix=leftPrefix + COLUMN_NAME_SPLITTER;
    rightPrefix=rightPrefix + COLUMN_NAME_SPLITTER;
    JointResultMetadata meta=populatorJointResultMetadata(left,leftPrefix,right,rightPrefix);
    return meta;
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}",0.9364705882352942
77703,"/** 
 * whether need to use result hint
 * @param dataSetHandle
 * @return
 */
private boolean checkHandleType(DataSetHandle dataSetHandle){
  if (dataSetHandle instanceof ScriptDataSetHandle)   return true;
 else   if (dataSetHandle instanceof JointDataSetHandle) {
    List dataSets=((JointDataSetHandle)dataSetHandle).getDataSetNames();
    for (int i=0; i < dataSets.size(); i++) {
      DataSetHandle dsHandle=((JointDataSetHandle)dataSetHandle).getModuleHandle().findDataSet(dataSets.get(i).toString());
      if (dsHandle != null && dsHandle instanceof ScriptDataSetHandle) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * whether need to use result hint
 * @param dataSetHandle
 * @return
 */
private boolean checkHandleType(DataSetHandle dataSetHandle){
  if (dataSetHandle instanceof ScriptDataSetHandle)   return true;
 else   if (dataSetHandle instanceof JointDataSetHandle) {
    List dataSets=((JointDataSetHandle)dataSetHandle).getDataSetNames();
    for (int i=0; i < dataSets.size(); i++) {
      DataSetHandle dsHandle=((JointDataSetHandle)dataSetHandle).getModuleHandle().findDataSet(dataSets.get(i).toString());
      if (dsHandle != null && dsHandle instanceof ScriptDataSetHandle) {
        return true;
      }
 else       if (dsHandle instanceof JointDataSetHandle) {
        if (checkHandleType(dsHandle))         return true;
      }
    }
  }
  return false;
}",0.9102564102564102
77704,"public JointDataSetAdapter(JointDataSetHandle handle) throws BirtException {
  super(handle.getName());
  Iterator it=handle.joinConditionsIterator();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    addJoinCondition(new JoinCondition(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),adaptJoinOperator(jc.getOperator())));
  }
  if (jc != null) {
    setLeftDataSetDesignName(jc.getLeftDataSet());
    setRightDataSetDesignName(jc.getRightDataSet());
    setJoinType(adaptJoinType(jc.getJoinType()));
  }
  DataAdapterUtil.adaptBaseDataSet(handle,this);
}","public JointDataSetAdapter(JointDataSetHandle handle) throws BirtException {
  super(handle.getQualifiedName());
  Iterator it=handle.joinConditionsIterator();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    addJoinCondition(new JoinCondition(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),adaptJoinOperator(jc.getOperator())));
  }
  if (jc != null) {
    setLeftDataSetDesignName(jc.getLeftDataSet());
    setRightDataSetDesignName(jc.getRightDataSet());
    setJoinType(adaptJoinType(jc.getJoinType()));
  }
  DataAdapterUtil.adaptBaseDataSet(handle,this);
}",0.9930928626247122
77705,"/** 
 * Creates adaptor based on Model DataSourceHandle.
 * @param source model handle
 */
public ScriptDataSourceAdapter(ScriptDataSourceHandle source) throws BirtException {
  super(source.getName());
  DataAdapterUtil.adaptBaseDataSource(source,this);
  setOpenScript(source.getOpen());
  setCloseScript(source.getClose());
}","/** 
 * Creates adaptor based on Model DataSourceHandle.
 * @param source model handle
 */
public ScriptDataSourceAdapter(ScriptDataSourceHandle source) throws BirtException {
  super(source.getQualifiedName());
  DataAdapterUtil.adaptBaseDataSource(source,this);
  setOpenScript(source.getOpen());
  setCloseScript(source.getClose());
}",0.9864661654135338
77706,"/** 
 * submit current line to parent true if succeed
 * @return
 */
public boolean endLine(){
  updateLine();
  align();
  boolean ret=true;
  ret=parent.addArea(root);
  lineFinished=true;
  if (ret) {
    newContext();
    last=null;
    return true;
  }
 else {
    last=root;
    return false;
  }
}","/** 
 * submit current line to parent true if succeed
 * @return
 */
public boolean endLine(){
  updateLine();
  align();
  boolean ret=true;
  if (root.getChildrenCount() > 0) {
    ret=parent.addArea(root);
  }
  lineFinished=true;
  if (ret) {
    newContext();
    last=null;
    return true;
  }
 else {
    last=root;
    return false;
  }
}",0.93394777265745
77707,"/** 
 */
public RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet){
  this.rowCount=rowCount;
  this.exprNameSet=exprNameSet;
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
}","/** 
 */
public RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet){
  this.rowCount=rowCount;
  this.exprNameSet=exprNameSet;
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
  this.lastRowIndex=-1;
}",0.9568345323741008
77708,"/** 
 * @param currIndex
 * @param exprID
 * @param exprValue
 * @throws DataException
 */
public int saveExprValue(Map valueMap) throws DataException {
  initSave(false);
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  try {
    IOUtil.writeInt(tempDos,valueMap.size());
    Iterator it=valueMap.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Entry)it.next();
      String exprID=(String)entry.getKey();
      Object value=entry.getValue();
      IOUtil.writeString(tempDos,exprID);
      IOUtil.writeObject(tempDos,value);
      exprNameSet.add(exprID);
    }
    tempDos.flush();
    tempBos.flush();
    tempBaos.flush();
    byte[] bytes=tempBaos.toByteArray();
    int rowBytes=bytes.length;
    IOUtil.writeRawBytes(this.rowExprsDos,bytes);
    tempBaos=null;
    tempBos=null;
    tempDos=null;
    return rowBytes;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","/** 
 * @param currIndex
 * @param exprID
 * @param exprValue
 * @throws DataException
 */
private int saveExprValue(Map valueMap) throws DataException {
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  try {
    IOUtil.writeInt(tempDos,valueMap.size());
    Iterator it=valueMap.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Entry)it.next();
      String exprID=(String)entry.getKey();
      Object value=entry.getValue();
      IOUtil.writeString(tempDos,exprID);
      IOUtil.writeObject(tempDos,value);
      exprNameSet.add(exprID);
    }
    tempDos.flush();
    tempBos.flush();
    tempBaos.flush();
    byte[] bytes=tempBaos.toByteArray();
    int rowBytes=bytes.length;
    IOUtil.writeRawBytes(this.rowExprsDos,bytes);
    tempBaos=null;
    tempBos=null;
    tempDos=null;
    return rowBytes;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.9445454545454546
77709,"/** 
 * update row height
 * @param row
 */
public void updateRow(RowArea row,int specifiedHeight){
  ArrayList dropCells=this.dropList;
  CellWrapper[] cells=currentRowContent;
  Iterator iter=row.getChildren();
  int height=specifiedHeight;
  boolean[] hasCell=new boolean[columnNumber];
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    height=Math.max(height,cell.getHeight());
    int colID=cell.getColumnID();
    for (int i=colID; i < cell.getColumnID() + cell.getColSpan(); i++) {
      hasCell[i]=true;
    }
    if (cells[colID] != null && (cells[colID].rowSpan != 1)) {
      dropCells.add(new DropCellInfo(cell,cells[colID].rowSpan));
    }
  }
  Iterator iterator=dropCells.iterator();
  while (iterator.hasNext()) {
    DropCellInfo dropCell=(DropCellInfo)iterator.next();
    for (int i=dropCell.cell.getColumnID(); i < dropCell.cell.getColumnID() + dropCell.cell.getColSpan(); i++) {
      hasCell[i]=true;
    }
  }
  if (height > 0) {
    for (int i=0; i < dropCells.size(); i++) {
      DropCellInfo dropCell=(DropCellInfo)dropCells.get(i);
      dropCell.leftHeight-=height;
      if (dropCell.leftHeight <= 0) {
        dropCell.cell.setHeight(dropCell.cell.getHeight() - dropCell.leftHeight);
        dropCell.leftHeight=0;
      }
    }
    for (int i=0; i < columnNumber; i++) {
      if (!hasCell[i]) {
        ICellContent cellContent=null;
        if (cells[i] != null) {
          cellContent=cells[i].cell;
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(currentRow.row);
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell);
        IStyle style=emptyCell.getStyle();
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        row.addChild(emptyCell);
        emptyCell.setHeight(height);
        for (int j=startColumn; j < endColumn; j++) {
          hasCell[j]=true;
        }
        if (cells[i] != null) {
          if (cells[i].rowSpan != 1) {
            dropList.add(new DropCellInfo(emptyCell,0,cells[i].rowSpan));
          }
        }
      }
    }
    iter=row.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    row.setHeight(height);
  }
}","/** 
 * update row height
 * @param row
 */
public void updateRow(RowArea row,int specifiedHeight){
  ArrayList dropCells=this.dropList;
  CellWrapper[] cells=currentRowContent;
  Iterator iter=row.getChildren();
  int height=specifiedHeight;
  boolean[] hasCell=new boolean[columnNumber];
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    int colID=cell.getColumnID();
    if (currentRowContent[colID] != null && currentRowContent[colID].rowSpan == 1) {
      height=Math.max(height,cell.getHeight());
    }
    for (int i=colID; i < cell.getColumnID() + cell.getColSpan(); i++) {
      hasCell[i]=true;
    }
    if (cells[colID] != null && (cells[colID].rowSpan != 1)) {
      dropCells.add(new DropCellInfo(cell,cells[colID].rowSpan));
    }
  }
  Iterator iterator=dropCells.iterator();
  while (iterator.hasNext()) {
    DropCellInfo dropCell=(DropCellInfo)iterator.next();
    for (int i=dropCell.cell.getColumnID(); i < dropCell.cell.getColumnID() + dropCell.cell.getColSpan(); i++) {
      hasCell[i]=true;
    }
  }
  if (height > 0) {
    for (int i=0; i < dropCells.size(); i++) {
      DropCellInfo dropCell=(DropCellInfo)dropCells.get(i);
      dropCell.leftHeight-=height;
      if (dropCell.leftHeight <= 0) {
        dropCell.cell.setHeight(dropCell.cell.getHeight() - dropCell.leftHeight);
        dropCell.leftHeight=0;
      }
    }
    for (int i=0; i < columnNumber; i++) {
      if (!hasCell[i]) {
        ICellContent cellContent=null;
        if (cells[i] != null) {
          cellContent=cells[i].cell;
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(currentRow.row);
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell);
        IStyle style=emptyCell.getStyle();
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        row.addChild(emptyCell);
        emptyCell.setHeight(height);
        for (int j=startColumn; j < endColumn; j++) {
          hasCell[j]=true;
        }
        if (cells[i] != null) {
          if (cells[i].rowSpan != 1) {
            dropList.add(new DropCellInfo(emptyCell,0,cells[i].rowSpan));
          }
        }
      }
    }
    iter=row.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      int colID=cell.getColumnID();
      if (currentRowContent[colID] != null && currentRowContent[colID].rowSpan == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    row.setHeight(height);
  }
}",0.8950924608819346
77710,"protected void closeLayout(){
  if (root.getChildrenCount() == 0) {
    return;
  }
  if (!isLast) {
    updateAllUnresolvedCellArea();
    root.setHeight(getCurrentBP() + getOffsetY());
    return;
  }
  ArrayList list=this.dropList;
  int bottomMaxBorder=0;
  ArrayList changed=new ArrayList();
  for (int i=0; i < list.size(); i++) {
    DropCellInfo cell=(DropCellInfo)list.get(i);
    bottomMaxBorder=Math.max(resolveBottomBorder(cell.cell),bottomMaxBorder);
    changed.add(cell.cell);
  }
  updateAllUnresolvedCellArea();
  if (lastRowArea != null) {
    Iterator iter=lastRowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (!changed.contains(cell)) {
        bottomMaxBorder=Math.max(resolveBottomBorder(cell),bottomMaxBorder);
        changed.add(cell);
      }
    }
  }
  if (bottomMaxBorder > 0) {
    for (int i=0; i < changed.size(); i++) {
      CellArea cell=(CellArea)changed.get(i);
      cell.setHeight(cell.getHeight() + bottomMaxBorder);
    }
    if (lastRowArea != null) {
      lastRowArea.setHeight(lastRowArea.getHeight() + bottomMaxBorder);
    }
  }
  root.setHeight(getCurrentBP() + getOffsetY() + bottomMaxBorder);
}","protected void closeLayout(){
  if (root.getChildrenCount() == 0) {
    return;
  }
  ArrayList lastDropCells=new ArrayList();
  Iterator it=dropList.iterator();
  while (it.hasNext()) {
    DropCellInfo dropCell=(DropCellInfo)it.next();
    for (int columnID=dropCell.cell.getColumnID(); columnID < dropCell.cell.getColumnID() + dropCell.cell.getColSpan(); columnID++)     lastDropCells.add(new Integer(columnID));
  }
  if (!isLast) {
    updateAllUnresolvedCellArea(lastDropCells);
    root.setHeight(getCurrentBP() + getOffsetY());
    return;
  }
  ArrayList list=this.dropList;
  int bottomMaxBorder=0;
  ArrayList changed=new ArrayList();
  for (int i=0; i < list.size(); i++) {
    DropCellInfo cell=(DropCellInfo)list.get(i);
    bottomMaxBorder=Math.max(resolveBottomBorder(cell.cell),bottomMaxBorder);
    changed.add(cell.cell);
  }
  updateAllUnresolvedCellArea(lastDropCells);
  if (lastRowArea != null) {
    Iterator iter=lastRowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (!changed.contains(cell)) {
        bottomMaxBorder=Math.max(resolveBottomBorder(cell),bottomMaxBorder);
        changed.add(cell);
      }
    }
  }
  if (bottomMaxBorder > 0) {
    for (int i=0; i < changed.size(); i++) {
      CellArea cell=(CellArea)changed.get(i);
      cell.setHeight(cell.getHeight() + bottomMaxBorder);
    }
    if (lastRowArea != null) {
      lastRowArea.setHeight(lastRowArea.getHeight() + bottomMaxBorder);
    }
  }
  root.setHeight(getCurrentBP() + getOffsetY() + bottomMaxBorder);
}",0.868840579710145
77711,"protected void updateAllUnresolvedCellArea(){
  Iterator iter=dropList.iterator();
  while (iter.hasNext()) {
    DropCellInfo dropCell=(DropCellInfo)iter.next();
    verticalAlign(dropCell.cell);
    iter.remove();
  }
}","protected void updateAllUnresolvedCellArea(ArrayList lastDropCells){
  removeDropCells(lastDropCells);
}",0.5169230769230769
77712,"/** 
 * start row update content cache
 * @param row
 */
public void startRow(IRowContent row){
  currentRowID++;
  CellWrapper[] newRowContent=new CellWrapper[columnNumber];
  if (currentRowID > 0) {
    for (int i=0; i < columnNumber; i++) {
      if (currentRowContent[i] != null) {
        int rowSpan=currentRowContent[i].rowSpan;
        if (rowSpan > 0 && currentRowID < rowSpan + currentRowContent[i].rowID || rowSpan < 0) {
          newRowContent[i]=currentRowContent[i];
        }
 else {
          newRowContent[i]=null;
          removeDropAreaByIndex(i);
        }
      }
    }
  }
  lastRowContent=currentRowContent;
  lastRow=currentRow;
  currentRowContent=newRowContent;
  currentRow=new RowWrapper(row,currentRowID);
}","/** 
 * start row update content cache
 * @param row
 */
public void startRow(IRowContent row){
  currentRowID++;
  CellWrapper[] newRowContent=new CellWrapper[columnNumber];
  if (currentRowID > 0) {
    ArrayList removedDropCells=new ArrayList();
    for (int i=0; i < columnNumber; i++) {
      if (currentRowContent[i] != null) {
        int rowSpan=currentRowContent[i].rowSpan;
        if (rowSpan > 0 && currentRowID < rowSpan + currentRowContent[i].rowID || rowSpan < 0) {
          newRowContent[i]=currentRowContent[i];
        }
 else {
          newRowContent[i]=null;
          removedDropCells.add(new Integer(i));
        }
      }
    }
    if (removedDropCells.size() > 0) {
      removeDropCells(removedDropCells);
    }
  }
  lastRowContent=currentRowContent;
  lastRow=currentRow;
  currentRowContent=newRowContent;
  currentRow=new RowWrapper(row,currentRowID);
}",0.6966707768187423
77713,"protected void removeDropAreaBySpan(int rowSpan){
  Iterator iter=dropList.iterator();
  while (iter.hasNext()) {
    DropCellInfo dropCell=(DropCellInfo)iter.next();
    if (dropCell.rowSpan == rowSpan) {
      verticalAlign(dropCell.cell);
      iter.remove();
    }
  }
}","protected void removeDropAreaBySpan(int rowSpan){
  int maxHeight=0;
  Iterator iter=dropList.iterator();
  ArrayList removedList=new ArrayList();
  while (iter.hasNext()) {
    DropCellInfo dropCell=(DropCellInfo)iter.next();
    if (dropCell.rowSpan == rowSpan) {
      verticalAlign(dropCell.cell);
      iter.remove();
      removedList.add(dropCell);
      maxHeight=Math.max(maxHeight,dropCell.leftHeight);
    }
  }
  if (maxHeight > 0) {
    if (lastRowArea != null) {
      lastRowArea.setHeight(lastRowArea.getHeight() + maxHeight);
      Iterator rowIter=lastRowArea.getChildren();
      while (rowIter.hasNext()) {
        CellArea cell=(CellArea)rowIter.next();
        cell.setHeight(cell.getHeight() + maxHeight);
      }
    }
    Iterator removedIter=removedList.iterator();
    while (removedIter.hasNext()) {
      DropCellInfo cell=(DropCellInfo)removedIter.next();
      cell.cell.setHeight(cell.cell.getHeight() + maxHeight - cell.leftHeight);
    }
    currentBP+=maxHeight;
  }
}",0.4291307752545027
77714,"private void closeTargetReport(){
  if (targetReportHandle instanceof ReportDesignHandle) {
    ((ReportDesignHandle)targetReportHandle).close();
    targetReportHandle=null;
  }
}","private void closeTargetReport(){
  if (targetReportHandle instanceof ReportDesignHandle) {
    ((ReportDesignHandle)targetReportHandle).close();
  }
 else   if (targetReportHandle instanceof IReportDocument) {
    ((IReportDocument)targetReportHandle).close();
  }
  targetReportHandle=null;
}",0.7426160337552743
77715,"private void initTargetReport(String newFilename){
  targetReportHandle=null;
  String errorMessage=null;
  if (newFilename.endsWith(""String_Node_Str"")) {
    ReportEngine engine=new ReportEngine(new EngineConfig());
    try {
      targetReportHandle=engine.openReportDocument(URIUtil.resolveAbsolutePath(getBasePath(),newFilename));
    }
 catch (    EngineException e) {
      e.printStackTrace();
    }
  }
 else {
    try {
      targetReportHandle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(newFilename);
    }
 catch (    DesignFileException e) {
      try {
        targetReportHandle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(URIUtil.resolveAbsolutePath(getBasePath(),newFilename));
      }
 catch (      DesignFileException e1) {
        errorMessage=ERROR_MSG_INVALID_REPORT;
      }
    }
  }
  if (errorMessage != null) {
    messageLine.setText(errorMessage);
    messageLine.setImage(ERROR_ICON);
  }
 else {
    messageLine.setText(""String_Node_Str"");
    messageLine.setImage(null);
  }
}","private void initTargetReport(String newFilename){
  closeTargetReport();
  targetReportHandle=null;
  String errorMessage=null;
  if (newFilename.endsWith(""String_Node_Str"")) {
    ReportEngine engine=new ReportEngine(new EngineConfig());
    try {
      targetReportHandle=engine.openReportDocument(URIUtil.resolveAbsolutePath(getBasePath(),newFilename));
    }
 catch (    EngineException e) {
      e.printStackTrace();
    }
  }
 else {
    try {
      targetReportHandle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(newFilename);
    }
 catch (    DesignFileException e) {
      try {
        targetReportHandle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(URIUtil.resolveAbsolutePath(getBasePath(),newFilename));
      }
 catch (      DesignFileException e1) {
        errorMessage=ERROR_MSG_INVALID_REPORT;
      }
    }
  }
  if (errorMessage != null) {
    messageLine.setText(errorMessage);
    messageLine.setImage(ERROR_ICON);
  }
 else {
    messageLine.setText(""String_Node_Str"");
    messageLine.setImage(null);
  }
}",0.9891662741403674
77716,"public AbstractContent(IContent content){
  this(content.getReportContent());
  this.name=content.getName();
  this.x=content.getX();
  this.y=content.getY();
  this.width=content.getWidth();
  this.height=content.getHeight();
  this.hyperlink=content.getHyperlinkAction();
  this.bookmark=content.getBookmark();
  this.helpText=content.getHelpText();
  this.inlineStyle=content.getInlineStyle();
  this.generateBy=content.getGenerateBy();
  this.styleClass=content.getStyleClass();
  this.instanceId=content.getInstanceID();
  this.toc=content.getTOC();
}","public AbstractContent(IContent content){
  this(content.getReportContent());
  this.name=content.getName();
  this.x=content.getX();
  this.y=content.getY();
  this.width=content.getWidth();
  this.height=content.getHeight();
  this.hyperlink=content.getHyperlinkAction();
  this.bookmark=content.getBookmark();
  this.helpText=content.getHelpText();
  this.inlineStyle=content.getInlineStyle();
  this.generateBy=content.getGenerateBy();
  this.styleClass=content.getStyleClass();
  this.instanceId=content.getInstanceID();
  this.toc=content.getTOC();
  Object ext=content.getExtension(IContent.DOCUMENT_EXTENSION);
  if (ext != null) {
    setExtension(IContent.DOCUMENT_EXTENSION,ext);
  }
}",0.8881789137380192
77717,"public IReportItemExecutor getNextChild(){
  if (childContent != null) {
    IReportItemExecutor ret=new ItemExecutorWrapper(childExecutor,childContent);
    childContent=null;
    childExecutor=null;
    needUpdate=true;
    return ret;
  }
  if (currentRunIn != null) {
    needUpdate=true;
    return currentRunIn.getNextChild();
  }
  assert(false);
  return null;
}","public IReportItemExecutor getNextChild(){
  if (childContent != null) {
    IReportItemExecutor ret=new ItemExecutorWrapper(childExecutor,childContent);
    childContent=null;
    childExecutor=null;
    needUpdate=true;
    return ret;
  }
  if (currentRunIn != null) {
    needUpdate=true;
    IReportItemExecutor runInChild=currentRunIn.getNextChild();
    if (runInChild != null) {
      IContent runInContent=runInChild.execute();
      if (runInContent != null && (runInContent.getChildren() == null || runInContent.getChildren().size() == 0)) {
        execute(runInChild,runInContent);
        runInChild.close();
        runInChild=new DOMReportItemExecutor(runInContent);
      }
    }
    return runInChild;
  }
  assert(false);
  return null;
}",0.6441881100266194
77718,"protected boolean handleChild(IReportItemExecutor childExecutor){
  boolean childBreak=false;
  IContent childContent=childExecutor.execute();
  PDFAbstractLM childLM=getFactory().createLayoutManager(this,childContent,emitter,childExecutor);
  if (needLineBreak(childContent)) {
    unfinishedExecutor=childExecutor;
    return !endLine();
  }
 else {
    childBreak=childLM.layout();
    if (childBreak) {
      if (!childLM.isFinished()) {
        addChild(childLM);
      }
    }
    return childBreak;
  }
}","protected boolean handleChild(IReportItemExecutor childExecutor){
  boolean childBreak=false;
  IContent childContent=childExecutor.execute();
  PDFAbstractLM childLM=getFactory().createLayoutManager(this,childContent,emitter,childExecutor);
  if (needLineBreak(childContent)) {
    unfinishedExecutor=childExecutor;
    return !endLine();
  }
 else {
    childBreak=childLM.layout();
    if (childBreak) {
      if (!childLM.isFinished()) {
        addChild(childLM);
        if (currentIP < expectedIP) {
          currentIP=expectedIP;
        }
      }
    }
    return childBreak;
  }
}",0.9274047186932848
77719,"private boolean needLineBreak(IContent content){
  int specWidth=0;
  int avaWidth=getMaxAvaWidth() - this.getCurrentIP();
  int calWidth=getDimensionValue(content.getWidth());
  if (calWidth > 0 && calWidth < getMaxAvaWidth()) {
    specWidth=calWidth;
  }
  return specWidth > avaWidth;
}","private boolean needLineBreak(IContent content){
  int specWidth=0;
  int avaWidth=getMaxAvaWidth() - this.getCurrentIP();
  int calWidth=getDimensionValue(content.getWidth());
  if (calWidth > 0 && calWidth < getMaxAvaWidth()) {
    specWidth=calWidth;
  }
  if (specWidth <= avaWidth && specWidth > 0) {
    expectedIP=currentIP + specWidth;
  }
  return specWidth > avaWidth;
}",0.8567164179104477
77720,"protected boolean traverseChildren(){
  if (last != null) {
    parent.addArea(last);
    last=null;
    if (breakAfterRelayout) {
      breakAfterRelayout=false;
      return true;
    }
  }
  boolean childBreak=false;
  if (children.size() > 0) {
    Iterator iterLM=children.iterator();
    while (iterLM.hasNext()) {
      PDFAbstractLM childLM=(PDFAbstractLM)iterLM.next();
      child=childLM;
      boolean currentBreak=childLM.layout();
      if (currentBreak) {
        childBreak=true;
      }
 else {
        iterLM.remove();
      }
    }
    if (childBreak) {
      return true;
    }
 else {
      endLine();
    }
  }
  boolean childHasNext=false;
  while (executor.hasNextChild() || unfinishedExecutor != null) {
    IReportItemExecutor childExecutor=null;
    if (unfinishedExecutor != null) {
      childExecutor=unfinishedExecutor;
      unfinishedExecutor=null;
    }
 else {
      childExecutor=executor.getNextChild();
    }
    assert(childExecutor != null);
    childHasNext=handleChild(childExecutor) || childHasNext;
    if (childHasNext && unfinishedExecutor != null) {
      if (lineFinished) {
        return true;
      }
    }
  }
  return false;
}","protected boolean traverseChildren(){
  if (last != null) {
    parent.addArea(last);
    last=null;
    if (breakAfterRelayout) {
      breakAfterRelayout=false;
      return true;
    }
  }
  boolean childBreak=false;
  if (children.size() > 0) {
    Iterator iterLM=children.iterator();
    while (iterLM.hasNext()) {
      PDFAbstractLM childLM=(PDFAbstractLM)iterLM.next();
      child=childLM;
      boolean currentBreak=childLM.layout();
      if (currentBreak) {
        childBreak=true;
      }
 else {
        iterLM.remove();
      }
    }
    if (childBreak) {
      return true;
    }
 else {
      endLine();
    }
  }
  boolean childHasNext=false;
  while (executor.hasNextChild() || unfinishedExecutor != null) {
    IReportItemExecutor childExecutor=null;
    if (unfinishedExecutor != null) {
      childExecutor=unfinishedExecutor;
      unfinishedExecutor=null;
    }
 else {
      childExecutor=executor.getNextChild();
    }
    assert(childExecutor != null);
    childHasNext=handleChild(childExecutor) || childHasNext;
    if (childHasNext && unfinishedExecutor != null) {
      if (lineFinished) {
        return true;
      }
    }
  }
  return childHasNext;
}",0.990274841437632
77721,"/** 
 * Handles the hyperlink, bookmark and drillthrough.
 * @param area			the area which needs to handle the hyperlink action.
 * @param curPos		the position of the container of current area.
 */
private void handleHyperlinkAction(IArea area,ContainerPosition curPos){
  IContent content=area.getContent();
  if (null != content) {
    int areaX=curPos.x + area.getX();
    int areaY=curPos.y + area.getY();
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    if (null != hlAction)     try {
switch (hlAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
        writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(areaX),layoutPointY2PDF(areaY + area.getHeight()),layoutPointX2PDF(areaX + area.getWidth()),layoutPointY2PDF(areaY),createPdfAction(hlAction.getHyperlink(),hlAction.getBookmark(),hlAction.getTargetWindow(),IHyperlinkAction.ACTION_BOOKMARK)));
      break;
case IHyperlinkAction.ACTION_HYPERLINK:
    writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(areaX),layoutPointY2PDF(areaY + area.getHeight()),layoutPointX2PDF(areaX + area.getWidth()),layoutPointY2PDF(areaY),createPdfAction(hlAction.getHyperlink(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_HYPERLINK)));
  break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
Action act=new Action(hlAction);
IHTMLActionHandler actionHandler=new HTMLActionHandler();
String link=actionHandler.getURL(act,context);
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(areaX),layoutPointY2PDF(areaY + area.getHeight()),layoutPointX2PDF(areaX + area.getWidth()),layoutPointY2PDF(areaY),createPdfAction(link.toString(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_DRILLTHROUGH)));
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}","/** 
 * Handles the hyperlink, bookmark and drillthrough.
 * @param area			the area which needs to handle the hyperlink action.
 * @param curPos		the position of the container of current area.
 */
private void handleHyperlinkAction(IArea area,ContainerPosition curPos){
  IContent content=area.getContent();
  if (null != content) {
    int areaX=curPos.x + area.getX();
    int areaY=curPos.y + area.getY();
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    if (null != hlAction)     try {
switch (hlAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
        writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(areaX),layoutPointY2PDF(areaY + area.getHeight()),layoutPointX2PDF(areaX + area.getWidth()),layoutPointY2PDF(areaY),createPdfAction(hlAction.getHyperlink(),hlAction.getBookmark(),hlAction.getTargetWindow(),IHyperlinkAction.ACTION_BOOKMARK)));
      break;
case IHyperlinkAction.ACTION_HYPERLINK:
    writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(areaX),layoutPointY2PDF(areaY + area.getHeight()),layoutPointX2PDF(areaX + area.getWidth()),layoutPointY2PDF(areaY),createPdfAction(hlAction.getHyperlink(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_HYPERLINK)));
  break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
Action act=new Action(hlAction);
IHTMLActionHandler actionHandler=null;
Object ac=services.getOption(RenderOptionBase.ACTION_HANDLER);
if (ac != null && ac instanceof IHTMLActionHandler) {
actionHandler=(IHTMLActionHandler)ac;
}
String link=actionHandler.getURL(act,context);
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(areaX),layoutPointY2PDF(areaY + area.getHeight()),layoutPointX2PDF(areaX + area.getWidth()),layoutPointY2PDF(areaY),createPdfAction(link.toString(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_DRILLTHROUGH)));
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}",0.9602150537634409
77722,"/** 
 * Initializes the pdfEmitter.
 * @param services 							the emitter svervices object.
 */
public void initialize(IEmitterServices services){
  this.reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  Object renderContext=services.getRenderContext();
  if (renderContext != null && renderContext instanceof Map) {
    Object con=((Map)renderContext).get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (con instanceof PDFRenderContext) {
      this.context=(PDFRenderContext)con;
    }
  }
  Object fd=services.getOption(RenderOptionBase.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      File parent=file.getParentFile();
      if (parent != null && !parent.exists()) {
        parent.mkdirs();
      }
      output=new FileOutputStream(file);
    }
  }
 catch (  FileNotFoundException fnfe) {
    logger.log(Level.WARNING,fnfe.getMessage(),fnfe);
  }
  if (output == null) {
    Object value=services.getOption(RenderOptionBase.OUTPUT_STREAM);
    if (value != null && value instanceof OutputStream) {
      output=(OutputStream)value;
    }
 else {
      try {
        file=new File(REPORT_FILE);
        output=new FileOutputStream(file);
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}","/** 
 * Initializes the pdfEmitter.
 * @param services 							the emitter svervices object.
 */
public void initialize(IEmitterServices services){
  this.services=services;
  this.reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  Object renderContext=services.getRenderContext();
  if (renderContext != null && renderContext instanceof Map) {
    Object con=((Map)renderContext).get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (con instanceof PDFRenderContext) {
      this.context=(PDFRenderContext)con;
    }
  }
  Object fd=services.getOption(RenderOptionBase.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      File parent=file.getParentFile();
      if (parent != null && !parent.exists()) {
        parent.mkdirs();
      }
      output=new FileOutputStream(file);
    }
  }
 catch (  FileNotFoundException fnfe) {
    logger.log(Level.WARNING,fnfe.getMessage(),fnfe);
  }
  if (output == null) {
    Object value=services.getOption(RenderOptionBase.OUTPUT_STREAM);
    if (value != null && value instanceof OutputStream) {
      output=(OutputStream)value;
    }
 else {
      try {
        file=new File(REPORT_FILE);
        output=new FileOutputStream(file);
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}",0.9910158949550796
77723,"protected void prepareParameters() throws ReportServiceException, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  InputOptions options=new InputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    __bookmark=getBookmark(operation.getOprand(),__bean);
    options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
    __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
    if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
      __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
      __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
      if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getFormattedString(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{__bookmark}));
        throw fault;
      }
      __useBookmark=true;
    }
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getString(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}","protected void prepareParameters() throws ReportServiceException, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  InputOptions options=new InputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    __bookmark=getBookmark(operation.getOprand(),__bean);
    options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
    __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
    if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
      __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
      __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
      if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getFormattedString(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{__bookmark}));
        throw fault;
      }
    }
    __useBookmark=true;
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getString(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}",0.997596153846154
77724,"protected void createFieldEditors(){
  super.createFieldEditors();
  GridData gdata;
  EditableComboFieldEditor widows=new EditableComboFieldEditor(StyleHandle.WIDOWS_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.WIDOWS_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.WIDOWS_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=96;
  widows.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(widows);
  EditableComboFieldEditor orphans=new EditableComboFieldEditor(StyleHandle.ORPHANS_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.ORPHANS_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.ORPHANS_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=96;
  orphans.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(orphans);
  addField(new SeparatorFieldEditor(getFieldEditorParent(),false));
  ComboBoxFieldEditor before=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_BEFORE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_BEFORE_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_BEFORE_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=120;
  before.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(before);
  ComboBoxFieldEditor inside=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_INSIDE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_INSIDE_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_INSIDE_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=120;
  inside.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(inside);
  ComboBoxFieldEditor after=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_AFTER_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_AFTER_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_AFTER_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=120;
  after.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(after);
  UIUtil.bindHelp(getFieldEditorParent().getParent(),IHelpContextIds.STYLE_BUILDER_PAGEBREAK_ID);
}","protected void createFieldEditors(){
  super.createFieldEditors();
  GridData gdata;
  EditableComboFieldEditor widows=new EditableComboFieldEditor(StyleHandle.WIDOWS_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.WIDOWS_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.WIDOWS_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=96;
  widows.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(widows);
  EditableComboFieldEditor orphans=new EditableComboFieldEditor(StyleHandle.ORPHANS_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.ORPHANS_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.ORPHANS_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=96;
  orphans.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(orphans);
  addField(new SeparatorFieldEditor(getFieldEditorParent(),false));
  ComboBoxFieldEditor before=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_BEFORE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_BEFORE_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_BEFORE_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=120;
  before.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(before);
  ComboBoxFieldEditor after=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_AFTER_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_AFTER_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_AFTER_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=120;
  after.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(after);
  UIUtil.bindHelp(getFieldEditorParent().getParent(),IHelpContextIds.STYLE_BUILDER_PAGEBREAK_ID);
}",0.8756148981026002
77725,"/** 
 * @param ri
 * @return
 * @throws DataException 
 */
public int getRowID(IResultIterator ri) throws DataException {
  if (mode == -1)   init(ri);
  if (mode == MODE_NORMAL)   return ri.getCurrentResultIndex();
 else   return ((Integer)ri.getCurrentResult().getFieldValue(rowIDPos)).intValue();
}","/** 
 * @param ri
 * @return
 * @throws DataException 
 */
public int getRowID(IResultIterator ri) throws DataException {
  if (mode == -1)   init(ri);
  if (mode == MODE_NORMAL) {
    return ri.getCurrentResultIndex();
  }
 else {
    IResultObject ob=ri.getCurrentResult();
    if (ob == null)     return -1;
 else     return ((Integer)ob.getFieldValue(rowIDPos)).intValue();
  }
}",0.8099415204678363
77726,"public boolean layout(){
  if (status != STATUS_END) {
    context.setPageEmpty(false);
  }
  return super.layout();
}","public boolean layout(){
  boolean hasNext=super.layout();
  if (status != STATUS_START) {
    context.setPageEmpty(false);
  }
  return hasNext;
}",0.7849056603773585
77727,"protected boolean handleChild(IReportItemExecutor childExecutor){
  boolean childBreak=false;
  IContent childContent=childExecutor.execute();
  PDFAbstractLM childLM=getFactory().createLayoutManager(this,childContent,emitter,childExecutor);
  childBreak=childLM.layout();
  if (childBreak) {
    if (!childLM.isFinished()) {
      addChild(childLM);
    }
  }
  return childBreak;
}","protected boolean handleChild(IReportItemExecutor childExecutor){
  boolean childBreak=false;
  IContent childContent=childExecutor.execute();
  PDFAbstractLM childLM=getFactory().createLayoutManager(this,childContent,emitter,childExecutor);
  if (needLineBreak(childContent)) {
    unfinishedExecutor=childExecutor;
    return !endLine();
  }
 else {
    childBreak=childLM.layout();
    if (childBreak) {
      if (!childLM.isFinished()) {
        addChild(childLM);
      }
    }
    return childBreak;
  }
}",0.8568232662192393
77728,"protected boolean traverseChildren(){
  if (last != null) {
    parent.addArea(last);
    last=null;
    if (breakAfterRelayout) {
      breakAfterRelayout=false;
      return true;
    }
  }
  boolean childBreak=false;
  if (children.size() > 0) {
    Iterator iterLM=children.iterator();
    while (iterLM.hasNext()) {
      PDFAbstractLM childLM=(PDFAbstractLM)iterLM.next();
      child=childLM;
      boolean currentBreak=childLM.layout();
      if (currentBreak) {
        childBreak=true;
      }
 else {
        iterLM.remove();
      }
    }
    if (childBreak) {
      return true;
    }
  }
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=executor.getNextChild();
    assert(childExecutor != null);
    if (handleChild(childExecutor)) {
      if (lineFinished) {
        return true;
      }
    }
  }
  return false;
}","protected boolean traverseChildren(){
  if (last != null) {
    parent.addArea(last);
    last=null;
    if (breakAfterRelayout) {
      breakAfterRelayout=false;
      return true;
    }
  }
  boolean childBreak=false;
  if (children.size() > 0) {
    Iterator iterLM=children.iterator();
    while (iterLM.hasNext()) {
      PDFAbstractLM childLM=(PDFAbstractLM)iterLM.next();
      child=childLM;
      boolean currentBreak=childLM.layout();
      if (currentBreak) {
        childBreak=true;
      }
 else {
        iterLM.remove();
      }
    }
    if (childBreak) {
      return true;
    }
 else {
      endLine();
    }
  }
  boolean childHasNext=false;
  while (executor.hasNextChild() || unfinishedExecutor != null) {
    IReportItemExecutor childExecutor=null;
    if (unfinishedExecutor != null) {
      childExecutor=unfinishedExecutor;
      unfinishedExecutor=null;
    }
 else {
      childExecutor=executor.getNextChild();
    }
    assert(childExecutor != null);
    childHasNext=handleChild(childExecutor) || childHasNext;
    if (childHasNext && unfinishedExecutor != null) {
      if (lineFinished) {
        return true;
      }
    }
  }
  return false;
}",0.8353808353808354
77729,"protected void processForeignData(IForeignContent foreign){
  HashMap styleMap=new HashMap();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(this.rootPath);
  Object rawValue=foreign.getRawValue();
  Document doc=null;
  if (null != rawValue) {
    doc=new TextParser().parse(foreign.getRawValue().toString(),(String)textTypeMapping.get(foreign.getRawType()));
  }
  Element body=null;
  if (doc != null) {
    Node node=doc.getFirstChild();
    if (node instanceof Element) {
      body=(Element)node;
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    processNodes(body,checkEscapeSpace(doc),styleMap,foreign);
  }
}","protected void processForeignData(IForeignContent foreign){
  if (foreign.getChildren() != null && foreign.getChildren().size() > 0) {
    return;
  }
  HashMap styleMap=new HashMap();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(this.rootPath);
  Object rawValue=foreign.getRawValue();
  Document doc=null;
  if (null != rawValue) {
    doc=new TextParser().parse(foreign.getRawValue().toString(),(String)textTypeMapping.get(foreign.getRawType()));
  }
  Element body=null;
  if (doc != null) {
    Node node=doc.getFirstChild();
    if (node instanceof Element) {
      body=(Element)node;
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    processNodes(body,checkEscapeSpace(doc),styleMap,foreign);
  }
}",0.9351389878831076
77730,"protected void handlePageBreakAfterOfGroup(){
  boolean needPageBreak=false;
  GroupDesign groupDesign=(GroupDesign)design;
  if (groupDesign != null) {
    String pageBreakAfter=groupDesign.getPageBreakAfter();
    int groupLevel=groupDesign.getGroupLevel();
    if (DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS.equals(pageBreakAfter)) {
      needPageBreak=true;
    }
    if (DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS_EXCLUDING_LAST.equals(pageBreakAfter)) {
      int endGroup=rset.getEndingGroupLevel();
      if (endGroup >= groupLevel + 1) {
        needPageBreak=true;
      }
    }
    if (needPageBreak) {
      content.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.ALWAYS_VALUE);
    }
  }
}","protected void handlePageBreakAfterOfGroup(){
  boolean needPageBreak=false;
  GroupDesign groupDesign=(GroupDesign)design;
  if (groupDesign != null) {
    String pageBreakAfter=groupDesign.getPageBreakAfter();
    int groupLevel=groupDesign.getGroupLevel();
    if (DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS.equals(pageBreakAfter)) {
      needPageBreak=true;
    }
    if (DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS_EXCLUDING_LAST.equals(pageBreakAfter)) {
      int endGroup=rset.getEndingGroupLevel();
      if (endGroup >= groupLevel + 1) {
        setPageBreakBeforeForNextGroup();
      }
    }
    if (needPageBreak) {
      content.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.ALWAYS_VALUE);
    }
  }
}",0.9656593406593408
77731,"public void close(){
  IListGroupContent groupContent=(IListGroupContent)getContent();
  if (emitter != null) {
    emitter.endListGroup(groupContent);
  }
  finishGroupTOCEntry();
}","public void close(){
  handlePageBreakAfterOfGroup();
  IListGroupContent groupContent=(IListGroupContent)getContent();
  if (emitter != null) {
    emitter.endListGroup(groupContent);
  }
  finishGroupTOCEntry();
}",0.9168765743073048
77732,"public IContent execute(){
  ListGroupDesign groupDesign=(ListGroupDesign)getDesign();
  IListGroupContent groupContent=report.createListGroupContent();
  setContent(groupContent);
  restoreResultSet();
  initializeContent(groupDesign,groupContent);
  handlePageBreakOfGroup();
  startGroupTOCEntry();
  if (emitter != null) {
    emitter.startListGroup(groupContent);
  }
  prepareToExecuteChildren();
  return groupContent;
}","public IContent execute(){
  ListGroupDesign groupDesign=(ListGroupDesign)getDesign();
  IListGroupContent groupContent=report.createListGroupContent();
  setContent(groupContent);
  restoreResultSet();
  initializeContent(groupDesign,groupContent);
  handlePageBreakBeforeOfGroup();
  handlePageBreakAfterOfPreviousGroup();
  startGroupTOCEntry();
  if (emitter != null) {
    emitter.startListGroup(groupContent);
  }
  prepareToExecuteChildren();
  return groupContent;
}",0.9478357380688124
77733,"/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
public void reset(){
  this.rsetCursor=-1;
  super.reset();
}","/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
public void reset(){
  rsetCursor=-1;
  needPageBreak=false;
  super.reset();
}",0.9739292364990688
77734,"public void close(){
  ITableGroupContent groupContent=(ITableGroupContent)getContent();
  if (emitter != null) {
    emitter.endTableGroup(groupContent);
  }
  finishGroupTOCEntry();
}","public void close(){
  handlePageBreakAfterOfGroup();
  ITableGroupContent groupContent=(ITableGroupContent)getContent();
  if (emitter != null) {
    emitter.endTableGroup(groupContent);
  }
  finishGroupTOCEntry();
}",0.9181141439205956
77735,"public IContent execute(){
  TableGroupDesign groupDesign=(TableGroupDesign)getDesign();
  ITableGroupContent groupContent=report.createTableGroupContent();
  setContent(groupContent);
  restoreResultSet();
  initializeContent(groupDesign,groupContent);
  handlePageBreakOfGroup();
  startGroupTOCEntry();
  if (emitter != null) {
    emitter.startTableGroup(groupContent);
  }
  prepareToExecuteChildren();
  return groupContent;
}","public IContent execute(){
  TableGroupDesign groupDesign=(TableGroupDesign)getDesign();
  ITableGroupContent groupContent=report.createTableGroupContent();
  setContent(groupContent);
  restoreResultSet();
  initializeContent(groupDesign,groupContent);
  handlePageBreakBeforeOfGroup();
  handlePageBreakAfterOfPreviousGroup();
  startGroupTOCEntry();
  if (emitter != null) {
    emitter.startTableGroup(groupContent);
  }
  prepareToExecuteChildren();
  return groupContent;
}",0.9484083424807904
77736,"/** 
 * Whether need to use resultHint, which stands for resultSetHint, columnHint or both
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
private boolean needsUseResultHint(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  int columnCount=0;
  boolean hasResultSetHint=false;
  boolean hasColumnHint=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator().hasNext();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  if (metaData != null)   columnCount=metaData.getColumnCount();
  for (int i=0; i < columnCount; i++) {
    String columnName=metaData.getColumnName(i + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
    uniqueColumnNameSet.add(uniqueColumnName);
    if (!uniqueColumnName.equals(columnName)) {
      updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      if (hasResultSetHint != true)       hasResultSetHint=true;
    }
  }
  return hasResultSetHint || hasColumnHint;
}","/** 
 * Whether need to use resultHint, which stands for resultSetHint, columnHint or both
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
private boolean needsUseResultHint(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  int columnCount=0;
  boolean hasResultSetHint=false;
  boolean hasColumnHint=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator().hasNext();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  if (metaData != null)   columnCount=metaData.getColumnCount();
  for (int i=0; i < columnCount; i++) {
    String columnName=metaData.getColumnName(i + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
    uniqueColumnNameSet.add(uniqueColumnName);
    if (!uniqueColumnName.equals(columnName)) {
      updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      if (hasResultSetHint != true)       hasResultSetHint=true;
    }
  }
  if (!hasResultSetHint) {
    hasResultSetHint=checkHandleType(dataSetHandle);
  }
  return hasResultSetHint || hasColumnHint;
}",0.9615384615384616
77737,"/** 
 * @param array
 * @return 
 * @throws DataException
 */
private List getNodeArray() throws DataException {
  List array=new ArrayList();
  ResultSetCache cache=this.secondaryIterator.getResultSetCache();
  int count=cache.getCount();
  int blockSize=count / 1024;
  int size=1024;
  if (blockSize == 0) {
    size=count;
    blockSize=1;
  }
  int startingIndex=0;
  for (int i=0; i < size; i++) {
    if (startingIndex >= count)     break;
 else {
      Object[] min=matcher.getCompareValue(this.joinType == IJointDataSetDesign.RIGHT_OUTER_JOIN);
      Object[] max=null;
      int start=startingIndex;
      startingIndex+=blockSize;
      if (startingIndex < count) {
        max=matcher.getCompareValue(this.joinType == IJointDataSetDesign.RIGHT_OUTER_JOIN);
        cache.moveTo(startingIndex);
        while (JointDataSetUtil.compare(matcher.getCompareValue(this.joinType == IJointDataSetDesign.RIGHT_OUTER_JOIN),max) == 0) {
          startingIndex++;
          if (cache.fetch() == null)           break;
        }
        if (startingIndex < count)         cache.moveTo(startingIndex);
 else         cache.moveTo(count - 1);
      }
 else {
        cache.moveTo(count - 1);
        max=matcher.getCompareValue(this.joinType == IJointDataSetDesign.RIGHT_OUTER_JOIN);
      }
      array.add(new SegmentInfo(min,max,start,startingIndex - 1));
    }
  }
  this.secondaryIterator.first(0);
  return array;
}","/** 
 * @param array
 * @return 
 * @throws DataException
 */
private List getNodeArray() throws DataException {
  List array=new ArrayList();
  ResultSetCache cache=this.secondaryIterator.getResultSetCache();
  int count=cache.getCount();
  int blockSize=count / 1024;
  int size=1024;
  if (blockSize == 0) {
    size=count;
    blockSize=1;
  }
  int startingIndex=0;
  for (int i=0; i < size; i++) {
    if (startingIndex >= count)     break;
 else {
      Object[] min=matcher.getCompareValue(this.joinType == IJointDataSetDesign.RIGHT_OUTER_JOIN);
      Object[] max=null;
      int start=startingIndex;
      startingIndex+=blockSize;
      if (startingIndex < count) {
        cache.moveTo(startingIndex);
        max=matcher.getCompareValue(this.joinType == IJointDataSetDesign.RIGHT_OUTER_JOIN);
        while (JointDataSetUtil.compare(matcher.getCompareValue(this.joinType == IJointDataSetDesign.RIGHT_OUTER_JOIN),max) == 0) {
          startingIndex++;
          if (cache.fetch() == null)           break;
        }
        if (startingIndex < count)         cache.moveTo(startingIndex);
 else         cache.moveTo(count - 1);
      }
 else {
        cache.moveTo(count - 1);
        max=matcher.getCompareValue(this.joinType == IJointDataSetDesign.RIGHT_OUTER_JOIN);
      }
      array.add(new SegmentInfo(min,max,start,startingIndex - 1));
    }
  }
  this.secondaryIterator.first(0);
  return array;
}",0.9739069111424542
77738,"/** 
 * Sets the page break inside property for block-level elements. The input value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @param value the new page break inside property
 * @throws SemanticException if the value is not one of the above.
 */
public void setPageBreakInside(String value) throws SemanticException {
  setStringProperty(Style.PAGE_BREAK_INSIDE_PROP,value);
}","/** 
 * Sets the page break inside property for block-level elements. The input value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @param value the new page break inside property
 * @throws SemanticException if the value is not one of the above.
 * @deprecated
 */
public void setPageBreakInside(String value) throws SemanticException {
  setStringProperty(Style.PAGE_BREAK_INSIDE_PROP,value);
}",0.9862258953168044
77739,"/** 
 * Returns the page break inside property for block-level elements. The return value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @return the page break inside property
 */
public String getPageBreakInside(){
  return getStringProperty(Style.PAGE_BREAK_INSIDE_PROP);
}","/** 
 * Returns the page break inside property for block-level elements. The return value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @return the page break inside property
 * @deprecated
 */
public String getPageBreakInside(){
  return getStringProperty(Style.PAGE_BREAK_INSIDE_PROP);
}",0.9828571428571428
77740,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  this.format=ParameterAccessor.getFormat(request);
  this.isToc=ParameterAccessor.isToc(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(ResourceConstants.BIRT_VIEWER_TITLE);
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.__initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  this.format=ParameterAccessor.getFormat(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(ResourceConstants.BIRT_VIEWER_TITLE);
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.__initParameters(request);
}",0.9784304726938964
77741,"public String findTocByName(String docName,String name,InputOptions options){
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName);
  String tocId=null;
  if (doc.findTOCByName(name) != null && doc.findTOCByName(name).size() > 0)   return ((TOCNode)doc.findTOCByName(name).get(0)).getNodeID();
  return tocId;
}","public String findTocByName(String docName,String name,InputOptions options){
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName);
  String tocId=null;
  if (doc.findTOCByName(name) != null && doc.findTOCByName(name).size() > 0)   return ((TOCNode)doc.findTOCByName(name).get(0)).getBookmark();
  return tocId;
}",0.9811827956989247
77742,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=ParameterValidationUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
    if (!ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format) && action.getBookmark() != null) {
      try {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE)));
      }
 catch (      UnsupportedEncodingException e) {
      }
      if (!action.isBookmark()) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor._TOC,String.valueOf(true)));
      }
    }
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=ParameterValidationUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
    if (!ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format) && action.getBookmark() != null) {
      try {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE)));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  return link.toString();
}",0.9724703737465816
77743,"protected void __execute() throws RemoteException {
  BaseAttributeBean attrBean=(BaseAttributeBean)context.getBean();
  boolean svgFlag=getSVGFlag(operation.getOprand());
  runReport();
  String bookmark=null;
  boolean useBookmark=false;
  String docName=attrBean.getReportDocumentName();
  try {
    long pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),docName);
    if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
      InputOptions options=new InputOptions();
      bookmark=getBookmark(operation.getOprand(),attrBean);
      if (isToc(operation.getOprand(),attrBean)) {
        bookmark=(getReportService()).findTocByName(docName,bookmark,options);
      }
      if (bookmark != null && bookmark.length() > 0) {
        options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
        pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
        useBookmark=true;
      }
      if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
        pageNumber=1;
        useBookmark=false;
      }
    }
    doRenderPage(docName,pageNumber,svgFlag,attrBean.isMasterPageContent(),useBookmark,bookmark,attrBean.getLocale(),attrBean.isRtl());
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
}","protected void __execute() throws RemoteException {
  BaseAttributeBean attrBean=(BaseAttributeBean)context.getBean();
  boolean svgFlag=getSVGFlag(operation.getOprand());
  runReport();
  String bookmark=null;
  boolean useBookmark=false;
  String docName=attrBean.getReportDocumentName();
  try {
    long pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),docName);
    if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
      InputOptions options=new InputOptions();
      bookmark=getBookmark(operation.getOprand(),attrBean);
      if (bookmark != null && bookmark.length() > 0) {
        options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
        pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
        if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
          bookmark=(getReportService()).findTocByName(docName,bookmark,options);
          pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
        }
      }
      if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getFormattedString(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{bookmark}));
        throw fault;
      }
      useBookmark=true;
    }
    doRenderPage(docName,pageNumber,svgFlag,attrBean.isMasterPageContent(),useBookmark,bookmark,attrBean.getLocale(),attrBean.isRtl());
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
}",0.782274947662247
77744,"protected void prepareParameters() throws ReportServiceException, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  InputOptions options=new InputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __bookmark=getBookmark(operation.getOprand(),__bean);
  if (isToc(operation.getOprand(),__bean)) {
    __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
    __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
    if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
      AxisFault fault=new AxisFault();
      fault.setFaultReason(BirtResources.getFormattedString(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{__bookmark}));
      throw fault;
    }
    __useBookmark=true;
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getString(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}","protected void prepareParameters() throws ReportServiceException, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  InputOptions options=new InputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    __bookmark=getBookmark(operation.getOprand(),__bean);
    options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
    __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
    if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
      __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
      __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
      if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getFormattedString(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{__bookmark}));
        throw fault;
      }
      __useBookmark=true;
    }
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getString(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}",0.822183536433723
77745,"/** 
 * Return the array of simple nested column names of certain table.
 * @param tableName
 * @return
 */
public String[] getTableSimpleNestedXMLColumnNames(String tableName){
  return ((TableInfo)this.tableInfos.get(tableName)).getSimpleNestXMLColumnNames();
}","/** 
 * Return the array of simple nested column names of certain table.
 * @param tableName
 * @return
 */
public String[] getTableSimpleNestedXMLColumnNames(String tableName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getSimpleNestXMLColumnNames();
 else   return new String[0];
}",0.7112462006079028
77746,"/** 
 * Return the table filter.
 * @param tableName
 * @return
 */
public HashMap getTableFilter(String tableName){
  return ((TableInfo)this.tableInfos.get(tableName)).getFilter();
}","/** 
 * Return the table filter.
 * @param tableName
 * @return
 */
public HashMap getTableFilter(String tableName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getFilter();
 else   return null;
}",0.5824847250509165
77747,"/** 
 * Return the forward ref number of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public int getTableColumnForwardRefNumber(String tableName,String columnName){
  return ((TableInfo)this.tableInfos.get(tableName)).getForwardRefNumber(columnName);
}","/** 
 * Return the forward ref number of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public int getTableColumnForwardRefNumber(String tableName,String columnName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getForwardRefNumber(columnName == null ? ""String_Node_Str"" : columnName.trim());
 else   return -1;
}",0.7182910547396528
77748,"/** 
 * Return the array of column names of certain table.
 * @param tableName
 * @return
 */
public String[] getTableColumnNames(String tableName){
  return ((TableInfo)this.tableInfos.get(tableName)).getColumnNames();
}","/** 
 * Return the array of column names of certain table.
 * @param tableName
 * @return
 */
public String[] getTableColumnNames(String tableName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getColumnNames();
 else   return new String[0];
}",0.6689895470383276
77749,"/** 
 * Return the type of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public String getTableColumnType(String tableName,String columnName){
  return ((TableInfo)this.tableInfos.get(tableName)).getType(columnName);
}","/** 
 * Return the type of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public String getTableColumnType(String tableName,String columnName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getType(columnName == null ? ""String_Node_Str"" : columnName.trim());
 else   return null;
}",0.6872246696035242
77750,"/** 
 * Return the path of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public String getTableOriginalColumnPath(String tableName,String columnName){
  return ((TableInfo)this.tableInfos.get(tableName)).getOriginalPath(columnName);
}","/** 
 * Return the path of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public String getTableOriginalColumnPath(String tableName,String columnName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getOriginalPath(columnName == null ? ""String_Node_Str"" : columnName.trim());
 else   return null;
}",0.603085553997195
77751,"/** 
 * Return the table root path.
 * @param tableName
 * @return
 */
public String getTableRootPath(String tableName){
  return ((TableInfo)this.tableInfos.get(tableName)).getRootPath();
}","/** 
 * Return the table root path.
 * @param tableName
 * @return
 */
public String getTableRootPath(String tableName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getRootPath();
 else   return null;
}",0.584493041749503
77752,"/** 
 * Return the back ref number of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public int getTableNestedColumnBackRefNumber(String tableName,String columnName){
  return ((TableInfo)this.tableInfos.get(tableName)).getBackRefNumber(columnName);
}","/** 
 * Return the back ref number of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public int getTableNestedColumnBackRefNumber(String tableName,String columnName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getBackRefNumber(columnName == null ? ""String_Node_Str"" : columnName.trim());
 else   return -1;
}",0.7160161507402423
77753,"/** 
 * Return the table original root path.
 * @param tableName
 * @return
 */
public String getTableOriginalRootPath(String tableName){
  return ((TableInfo)this.tableInfos.get(tableName)).getOriginalRootPath();
}","/** 
 * Return the table original root path.
 * @param tableName
 * @return
 */
public String getTableOriginalRootPath(String tableName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getOriginalRootPath();
 else   return null;
}",0.593128390596745
77754,"/** 
 * Return the array of complex nested column names of certain table.
 * @param tableName
 * @return
 */
public String[] getTableComplexNestedXMLColumnNames(String tableName){
  return ((TableInfo)this.tableInfos.get(tableName)).getComplexNestXMLColumnNames();
}","/** 
 * Return the array of complex nested column names of certain table.
 * @param tableName
 * @return
 */
public String[] getTableComplexNestedXMLColumnNames(String tableName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getComplexNestXMLColumnNames();
 else   return new String[0];
}",0.713855421686747
77755,"/** 
 * Return the path of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public String getTableColumnPath(String tableName,String columnName){
  return ((TableInfo)this.tableInfos.get(tableName)).getPath(columnName);
}","/** 
 * Return the path of a column in certain table.
 * @param tableName
 * @param columnName
 * @return
 */
public String getTableColumnPath(String tableName,String columnName){
  Object tableInfo=this.tableInfos.get(tableName == null ? ""String_Node_Str"" : tableName.trim());
  if (tableInfo != null)   return ((TableInfo)tableInfo).getPath(columnName == null ? ""String_Node_Str"" : columnName.trim());
 else   return null;
}",0.6079295154185022
77756,"private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)attrBean.findParameter(paramName);
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item != null && item.getValue() != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        Object value=item.getValue();
        String label=item.getLabel();
        if (label == null || label.length() <= 0) {
          label=ParameterValidationUtil.getDisplayValue(null,parameterHandle.getPattern(),value,attrBean.getLocale());
        }
        selectItemChoice.setLabel(label);
        selectItemChoice.setValue(ParameterValidationUtil.getDisplayValue(value));
        selectionList.add(index++,selectItemChoice);
      }
    }
  }
  return selectionList;
}","private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)attrBean.findParameter(paramName);
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item != null && item.getValue() != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        Object value=item.getValue();
        String label=item.getLabel();
        if (value == null)         continue;
        if (label == null || label.length() <= 0) {
          label=ParameterValidationUtil.getDisplayValue(null,parameterHandle.getPattern(),value,attrBean.getLocale());
        }
        if (label != null) {
          selectItemChoice.setLabel(label);
          selectItemChoice.setValue(ParameterValidationUtil.getDisplayValue(value));
          selectionList.add(index++,selectItemChoice);
        }
      }
    }
  }
  return selectionList;
}",0.9500372856077554
77757,"public void close() throws BirtException {
  resultIterator.close();
}","public void close() throws BirtException {
  if (resultIterator != null)   resultIterator.close();
}",0.8235294117647058
77758,"protected void __execute() throws RemoteException {
  BaseAttributeBean attrBean=(BaseAttributeBean)context.getBean();
  boolean svgFlag=getSVGFlag(operation.getOprand());
  runReport();
  String bookmark=null;
  boolean useBookmark=false;
  String docName=attrBean.getReportDocumentName();
  try {
    long pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),docName);
    if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
      InputOptions options=new InputOptions();
      bookmark=getBookmark(operation.getOprand(),attrBean);
      if (bookmark != null && bookmark.length() > 0) {
        options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
        pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
        if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
          bookmark=(getReportService()).findTocByName(docName,bookmark,options);
          pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
        }
      }
      if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getFormattedString(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{bookmark}));
        throw fault;
      }
      useBookmark=true;
    }
    doRenderPage(docName,pageNumber,svgFlag,attrBean.isMasterPageContent(),useBookmark,bookmark,attrBean.getLocale(),attrBean.isRtl());
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
}","protected void __execute() throws RemoteException {
  BaseAttributeBean attrBean=(BaseAttributeBean)context.getBean();
  boolean svgFlag=getSVGFlag(operation.getOprand());
  runReport();
  String bookmark=null;
  boolean useBookmark=false;
  String docName=attrBean.getReportDocumentName();
  try {
    long pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),docName);
    if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
      InputOptions options=new InputOptions();
      bookmark=getBookmark(operation.getOprand(),attrBean);
      if (bookmark != null && bookmark.length() > 0) {
        options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
        pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
        if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
          bookmark=(getReportService()).findTocByName(docName,bookmark,options);
          pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
        }
        useBookmark=true;
      }
      if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
        pageNumber=1;
        useBookmark=false;
      }
    }
    doRenderPage(docName,pageNumber,svgFlag,attrBean.isMasterPageContent(),useBookmark,bookmark,attrBean.getLocale(),attrBean.isRtl());
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
}",0.9018425460636516
77759,"/** 
 * compile script expression
 * @param scriptExpr
 * @param name
 * @param cx
 * @throws DataException
 */
private void compileScriptExpression(IScriptExpression scriptExpr,Context cx){
  IScriptExpression cmptdColumn=scriptExpr;
  if (cmptdColumn.getText() == null || cmptdColumn.getText().trim().length() == 0) {
    DataException dataException=new DataException(ResourceConstants.EXPRESSION_CANNOT_BE_NULL_OR_BLANK);
    cmptdColumn.setHandle(new InvalidExpression(dataException));
  }
  try {
    CompiledExpression expr=helper.compileExpression(scriptExpr,cx);
    cmptdColumn.setHandle(expr);
  }
 catch (  Exception e) {
    DataException dataException=new DataException(ResourceConstants.INVALID_JS_EXPR,e,scriptExpr.getText());
    cmptdColumn.setHandle(new InvalidExpression(dataException));
  }
}","/** 
 * compile script expression
 * @param scriptExpr
 * @param name
 * @param cx
 * @throws DataException
 */
private void compileScriptExpression(IScriptExpression scriptExpr,Context cx){
  IScriptExpression cmptdColumn=scriptExpr;
  if (cmptdColumn.getText() == null || cmptdColumn.getText().trim().length() == 0) {
    DataException dataException=new DataException(ResourceConstants.EXPRESSION_CANNOT_BE_NULL_OR_BLANK);
    cmptdColumn.setHandle(new InvalidExpression(dataException));
    return;
  }
  try {
    CompiledExpression expr=helper.compileExpression(scriptExpr,cx);
    cmptdColumn.setHandle(expr);
  }
 catch (  Exception e) {
    DataException dataException=new DataException(ResourceConstants.INVALID_JS_EXPR,e,scriptExpr.getText());
    cmptdColumn.setHandle(new InvalidExpression(dataException));
  }
}",0.9926650366748166
77760,"/** 
 * Sets the page break inside property for block-level elements. The input value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @param value the new page break inside property
 * @throws SemanticException if the value is not one of the above.
 * @deprecated
 */
public void setPageBreakInside(String value) throws SemanticException {
  setStringProperty(Style.PAGE_BREAK_INSIDE_PROP,value);
}","/** 
 * Sets the page break inside property for block-level elements. The input value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @param value the new page break inside property
 * @throws SemanticException if the value is not one of the above.
 */
public void setPageBreakInside(String value) throws SemanticException {
  setStringProperty(Style.PAGE_BREAK_INSIDE_PROP,value);
}",0.9862258953168044
77761,"/** 
 * Returns the page break inside property for block-level elements. The return value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @return the page break inside property
 * @deprecated
 */
public String getPageBreakInside(){
  return getStringProperty(Style.PAGE_BREAK_INSIDE_PROP);
}","/** 
 * Returns the page break inside property for block-level elements. The return value is one of constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>PAGEBREAK_INSIDE_AVOID</code> <li><code>PAGEBREAK_INSIDE_AUTO</code> <li><code>PAGEBREAK_INSIDE_INHERIT</code> </ul>
 * @return the page break inside property
 */
public String getPageBreakInside(){
  return getStringProperty(Style.PAGE_BREAK_INSIDE_PROP);
}",0.9828571428571428
77762,"public boolean hasNextChild(){
  if (currentElement < totalElements) {
    return true;
  }
  if (endOfGroup) {
    return false;
  }
  while (!endOfGroup) {
    IResultSet rset=listingExecutor.getResultSet();
    GroupDesign groupDesign=(GroupDesign)getDesign();
    int endGroup=rset.getEndingGroupLevel();
    int groupLevel=groupDesign.getGroupLevel() + 1;
    if (endGroup <= groupLevel) {
      totalElements=0;
      currentElement=0;
      BandDesign footer=groupDesign.getFooter();
      if (footer != null) {
        executableElements[totalElements++]=footer;
      }
      endOfGroup=true;
      return true;
    }
    if (rset.next()) {
      collectExecutableElements();
      if (currentElement < totalElements) {
        return true;
      }
    }
  }
  return false;
}","public boolean hasNextChild(){
  if (currentElement < totalElements) {
    return true;
  }
  if (endOfGroup) {
    return false;
  }
  while (!endOfGroup) {
    IResultSet rset=listingExecutor.getResultSet();
    GroupDesign groupDesign=(GroupDesign)getDesign();
    int endGroup=rset.getEndingGroupLevel();
    int groupLevel=groupDesign.getGroupLevel() + 1;
    if (endGroup <= groupLevel) {
      totalElements=0;
      currentElement=0;
      BandDesign footer=groupDesign.getFooter();
      if (footer != null) {
        executableElements[totalElements++]=footer;
      }
      endOfGroup=true;
      return currentElement < totalElements;
    }
    if (rset.next()) {
      collectExecutableElements();
      if (currentElement < totalElements) {
        return true;
      }
    }
  }
  return false;
}",0.9786967418546366
77763,"public boolean hasNextChild(){
  if (currentElement < totalElements) {
    return true;
  }
  if (endOfListing) {
    return false;
  }
  int endGroup=rset.getEndingGroupLevel();
  if (endGroup <= 0) {
    ListingDesign listingDesign=(ListingDesign)getDesign();
    totalElements=0;
    currentElement=0;
    executableElements[totalElements++]=listingDesign.getFooter();
    endOfListing=true;
    return true;
  }
  if (rset.next()) {
    collectExecutableElements();
    return true;
  }
  return false;
}","public boolean hasNextChild(){
  if (currentElement < totalElements) {
    return true;
  }
  if (endOfListing) {
    return false;
  }
  int endGroup=rset.getEndingGroupLevel();
  if (endGroup <= 0) {
    ListingDesign listingDesign=(ListingDesign)getDesign();
    totalElements=0;
    currentElement=0;
    if (listingDesign.getFooter() != null) {
      executableElements[totalElements++]=listingDesign.getFooter();
    }
    endOfListing=true;
    return currentElement < totalElements;
  }
  if (rset.next()) {
    collectExecutableElements();
    return currentElement < totalElements;
  }
  return false;
}",0.8920606601248885
77764,"void collectExecutableElements(){
  currentElement=0;
  totalElements=0;
  endOfListing=false;
  ListingDesign listingDesign=(ListingDesign)getDesign();
  int groupCount=listingDesign.getGroupCount();
  int startGroup=rset.getStartingGroupLevel();
  if (startGroup == 0) {
    BandDesign header=listingDesign.getHeader();
    if (header != null) {
      executableElements[totalElements++]=header;
    }
  }
  if (groupCount > 0) {
    executableElements[totalElements++]=listingDesign.getGroup(0);
  }
 else {
    BandDesign detail=listingDesign.getDetail();
    if (detail != null) {
      executableElements[totalElements++]=detail;
    }
  }
  int endGroup=rset.getEndingGroupLevel();
  if (endGroup <= 0) {
    BandDesign footer=listingDesign.getFooter();
    if (footer != null) {
      executableElements[totalElements++]=listingDesign.getFooter();
    }
    endOfListing=true;
  }
}","void collectExecutableElements(){
  currentElement=0;
  totalElements=0;
  endOfListing=false;
  ListingDesign listingDesign=(ListingDesign)getDesign();
  int groupCount=listingDesign.getGroupCount();
  int startGroup=rset.getStartingGroupLevel();
  if (startGroup == 0) {
    BandDesign header=listingDesign.getHeader();
    if (header != null) {
      executableElements[totalElements++]=header;
    }
  }
  if (groupCount > 0) {
    executableElements[totalElements++]=listingDesign.getGroup(0);
  }
 else {
    BandDesign detail=listingDesign.getDetail();
    if (detail != null) {
      executableElements[totalElements++]=detail;
    }
  }
  int endGroup=rset.getEndingGroupLevel();
  if (endGroup <= 0) {
    BandDesign footer=listingDesign.getFooter();
    if (footer != null) {
      executableElements[totalElements++]=footer;
    }
    endOfListing=true;
  }
}",0.982396365701306
77765,"private Object handleText(ITextContent content){
  boolean isInline=parent instanceof PDFLineAreaLM;
  if (isInline) {
    assert(parent instanceof PDFLineAreaLM);
    DimensionType width=content.getWidth();
    if (width != null) {
      return new PDFTextInlineBlockLM(context,parent,content,emitter,executor);
    }
 else {
      return new PDFTextLM(context,parent,content,emitter,executor);
    }
  }
 else {
    return new PDFTextBlockContainerLM(context,parent,content,emitter,executor);
  }
}","private Object handleText(ITextContent content){
  boolean isInline=parent instanceof PDFLineAreaLM;
  if (isInline) {
    assert(parent instanceof PDFLineAreaLM);
    DimensionType width=content.getWidth();
    if (width != null) {
      return new PDFTextInlineBlockLM(context,parent,content,emitter,executor);
    }
 else {
      return new PDFTextLM(context,parent,content,emitter,executor);
    }
  }
 else {
    String text=content.getText();
    if (text == null || ""String_Node_Str"".equals(text)) {
      content.setText(""String_Node_Str"");
    }
    return new PDFTextBlockContainerLM(context,parent,content,emitter,executor);
  }
}",0.8764241893076249
77766,"public void contextInitialized(ServletContextEvent event){
}","public void contextInitialized(ServletContextEvent event){
  ParameterAccessor.initParameters(event.getServletContext());
}",0.6557377049180327
77767,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param config Servlet configuration
 */
public synchronized static void initParameters(ServletConfig config){
  ServletContext context=config.getServletContext();
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=context.getRealPath(""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  clearDocuments();
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=context.getRealPath(""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  clearDocuments();
}",0.953168044077135
77768,"/** 
 * Checks if the font is bold
 * @param value			the CSSValue
 * @return				true if the font is boldfalse if not
 */
public static boolean isBoldFont(CSSValue value){
  if (value instanceof StringValue && value != null) {
    String weight=((StringValue)value).getStringValue();
    if (""String_Node_Str"".equals(weight.toLowerCase()) || ""String_Node_Str"".equals(weight.toLowerCase()) || ""String_Node_Str"".equals(weight)|| ""String_Node_Str"".equals(weight)|| ""String_Node_Str"".equals(weight)|| ""String_Node_Str"".equals(weight)) {
      return true;
    }
  }
  return false;
}","/** 
 * Checks if the font is bold
 * @param value			the CSSValue
 * @return				true if the font is boldfalse if not
 */
public static boolean isBoldFont(CSSValue value){
  if (value != null) {
    String weight=value.getCssText();
    if (""String_Node_Str"".equals(weight.toLowerCase()) || ""String_Node_Str"".equals(weight.toLowerCase()) || ""String_Node_Str"".equals(weight)|| ""String_Node_Str"".equals(weight)|| ""String_Node_Str"".equals(weight)|| ""String_Node_Str"".equals(weight)) {
      return true;
    }
  }
  return false;
}",0.9339366515837104
77769,"public PDFTextLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IContentEmitter emitter,IReportItemExecutor executor){
  super(context,parent,content,emitter,executor);
  lineLM=(PDFLineAreaLM)getParent();
  ITextContent textContent=(ITextContent)content;
  String text=textContent.getText();
  if (!PropertyUtil.isInlineElement(content)) {
    if (text == null && ""String_Node_Str"".equals(text)) {
      textContent.setText(""String_Node_Str"");
    }
  }
  if (text != null && text.length() != 0) {
    this.textContent=textContent;
    comp=new Compositor(textContent,lineLM.getMaxAvaWidth(),this);
  }
}","public PDFTextLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IContentEmitter emitter,IReportItemExecutor executor){
  super(context,parent,content,emitter,executor);
  lineLM=(PDFLineAreaLM)getParent();
  ITextContent textContent=(ITextContent)content;
  String text=textContent.getText();
  if (text != null && text.length() != 0) {
    transform(textContent);
    this.textContent=textContent;
    comp=new Compositor(textContent,lineLM.getMaxAvaWidth(),this);
  }
}",0.7892857142857143
77770,"protected boolean layoutChildren(){
  if (null == textContent)   return false;
  transform(textContent);
  pause=false;
  return comp.compose();
}","protected boolean layoutChildren(){
  if (null == textContent)   return false;
  pause=false;
  return comp.compose();
}",0.9022556390977444
77771,"private void initParamterBindings(){
  if (targetReportHandle != null) {
    bindingList.clear();
    parameterList.clear();
    String errorMessage=null;
    String newFilename=locationEditor.getText().trim();
    if (newFilename.length() == 0) {
      errorMessage=ERROR_MSG_REPORT_REQUIRED;
    }
 else {
      if (targetReportHandle instanceof ReportDesignHandle) {
        for (Iterator iter=((ReportDesignHandle)targetReportHandle).getAllParameters().iterator(); iter.hasNext(); ) {
          Object obj=iter.next();
          if (obj instanceof ParameterHandle) {
            parameterList.add(obj);
          }
 else           if (obj instanceof ParameterGroupHandle) {
            parameterList.addAll(((ParameterGroupHandle)obj).getParameters().getContents());
          }
        }
        if (newFilename.equals(inputHandle.getReportName())) {
          for (Iterator iter=inputHandle.paramBindingsIterator(); iter.hasNext(); ) {
            ParamBindingHandle handle=(ParamBindingHandle)iter.next();
            bindingList.add(handle.getStructure());
          }
        }
      }
    }
    if (errorMessage != null) {
      messageLine.setText(errorMessage);
      messageLine.setImage(ERROR_ICON);
    }
 else {
      messageLine.setText(""String_Node_Str"");
      messageLine.setImage(null);
    }
    paramBindingTable.refresh();
    paramBindingTable.getTable().setEnabled(!parameterList.isEmpty());
    updateButtons();
  }
}","private void initParamterBindings(){
  if (targetReportHandle != null) {
    bindingList.clear();
    parameterList.clear();
    String errorMessage=null;
    String newFilename=locationEditor.getText().trim();
    if (newFilename.length() == 0) {
      errorMessage=ERROR_MSG_REPORT_REQUIRED;
    }
 else {
      if (targetReportHandle instanceof ReportDesignHandle) {
        for (Iterator iter=((ReportDesignHandle)targetReportHandle).getAllParameters().iterator(); iter.hasNext(); ) {
          Object obj=iter.next();
          if (obj instanceof ParameterHandle) {
            parameterList.add(obj);
          }
        }
        if (newFilename.equals(inputHandle.getReportName())) {
          for (Iterator iter=inputHandle.paramBindingsIterator(); iter.hasNext(); ) {
            ParamBindingHandle handle=(ParamBindingHandle)iter.next();
            bindingList.add(handle.getStructure());
          }
        }
      }
    }
    if (errorMessage != null) {
      messageLine.setText(errorMessage);
      messageLine.setImage(ERROR_ICON);
    }
 else {
      messageLine.setText(""String_Node_Str"");
      messageLine.setImage(null);
    }
    paramBindingTable.refresh();
    paramBindingTable.getTable().setEnabled(!parameterList.isEmpty());
    updateButtons();
  }
}",0.9397944199706314
77772,"private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)attrBean.findParameter(paramName);
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item != null && item.getValue() != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        Object value=item.getValue();
        String label=item.getLabel();
        if (label == null || label.length() <= 0) {
          label=ParameterValidationUtil.getDisplayValue(null,parameterHandle.getPattern(),value,attrBean.getLocale());
        }
        label=ParameterAccessor.htmlEncode(label);
        selectItemChoice.setLabel(label);
        selectItemChoice.setValue(ParameterValidationUtil.getDisplayValue(value));
        selectionList.add(index++,selectItemChoice);
      }
    }
  }
  return selectionList;
}","private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)attrBean.findParameter(paramName);
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item != null && item.getValue() != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        Object value=item.getValue();
        String label=item.getLabel();
        if (label == null || label.length() <= 0) {
          label=ParameterValidationUtil.getDisplayValue(null,parameterHandle.getPattern(),value,attrBean.getLocale());
        }
        selectItemChoice.setLabel(label);
        selectItemChoice.setValue(ParameterValidationUtil.getDisplayValue(value));
        selectionList.add(index++,selectItemChoice);
      }
    }
  }
  return selectionList;
}",0.9807037457434732
77773,"/** 
 * Displays the specified url using eclipse SWT browser.
 * @param report report report
 * @param format report format
 * @param browser SWT browser instance
 * @param servletName servlet name to viewer report
 */
public static void display(String report,String format,Browser browser,String servletName){
  startWebApp();
  browser.setUrl(createURL(servletName,report,format,true) + ""String_Node_Str"" + new Random().nextInt());
}","/** 
 * Displays the specified url using eclipse SWT browser.
 * @param report report report
 * @param format report format
 * @param browser SWT browser instance
 * @param servletName servlet name to viewer report
 */
public static void display(String report,String format,Browser browser,String servletName){
  browser.setUrl(createURL(servletName,report,format,true) + ""String_Node_Str"" + new Random().nextInt());
}",0.9800703399765534
77774,"/** 
 * returns true if the link is a toc, otherwise, return false means that is a bookmark.
 * @param params
 * @param bean
 * @return
 */
protected boolean isToc(Oprand[] params,BaseAttributeBean bean){
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_TOC.equalsIgnoreCase(params[i].getName())) {
        if (""String_Node_Str"".equalsIgnoreCase(params[i].getValue()))         return true;
      }
    }
  }
  return bean.isToc();
}","/** 
 * returns true if the link is a toc, otherwise, return false means that is a bookmark.
 * @param params
 * @param bean
 * @return
 */
protected boolean isToc(Oprand[] params,BaseAttributeBean bean){
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_BOOKMARK.equalsIgnoreCase(params[i].getName())) {
        return false;
      }
    }
  }
  return bean.isToc();
}",0.8940677966101694
77775,"public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      String masterPageStyleName=masterPage.getStyleName();
      IStyle classStyle=report.findStyle(masterPageStyleName);
      StringBuffer styleBuffer=new StringBuffer();
      AttributeBuilder.buildBackgroundStyle(styleBuffer,classStyle,this);
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null) {
    if (outputMasterPageContent) {
      writer.openTag(HTMLTags.TAG_DIV);
      handlePageStyle(page.getPageHeader().getStyleClass(),page.getPageHeader().getStyle());
      contentVisitor.visitChildren(page.getPageHeader(),null);
      writer.closeTag(HTMLTags.TAG_DIV);
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    IContent pageBody=page.getPageBody();
    IStyle bodyStyle=pageBody.getStyle();
    String bodyStyleName=pageBody.getStyleClass();
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      StringBuffer styleBuffer=new StringBuffer();
      if (isEmbeddable) {
        AttributeBuilder.buildPageStyle(styleBuffer,bodyStyle,this);
      }
 else {
        IStyle classStyle=report.findStyle(bodyStyleName);
        AttributeBuilder.buildPageStyle(styleBuffer,classStyle,this);
      }
      if (!pageFooterFloatFlag) {
        AttributeBuilder.buildSize(styleBuffer,HTMLTags.ATTR_MIN_HEIGHT,masterPage.getPageHeight());
      }
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
}","public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      String masterPageStyleName=masterPage.getStyleName();
      IStyle classStyle=report.findStyle(masterPageStyleName);
      StringBuffer styleBuffer=new StringBuffer();
      AttributeBuilder.buildBackgroundStyle(styleBuffer,classStyle,this);
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null) {
    if (outputMasterPageContent) {
      boolean showHeader=true;
      Object genBy=page.getGenerateBy();
      if (genBy instanceof SimpleMasterPageDesign) {
        SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)genBy;
        if (!masterPage.isShowHeaderOnFirst()) {
          if (page.getPageNumber() == 1) {
            showHeader=false;
          }
        }
      }
      if (showHeader) {
        writer.openTag(HTMLTags.TAG_DIV);
        handlePageStyle(page.getPageHeader().getStyleClass(),page.getPageHeader().getStyle());
        contentVisitor.visitChildren(page.getPageHeader(),null);
        writer.closeTag(HTMLTags.TAG_DIV);
      }
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    IContent pageBody=page.getPageBody();
    IStyle bodyStyle=pageBody.getStyle();
    String bodyStyleName=pageBody.getStyleClass();
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      StringBuffer styleBuffer=new StringBuffer();
      if (isEmbeddable) {
        AttributeBuilder.buildPageStyle(styleBuffer,bodyStyle,this);
      }
 else {
        IStyle classStyle=report.findStyle(bodyStyleName);
        AttributeBuilder.buildPageStyle(styleBuffer,classStyle,this);
      }
      if (!pageFooterFloatFlag) {
        AttributeBuilder.buildSize(styleBuffer,HTMLTags.ATTR_MIN_HEIGHT,masterPage.getPageHeight());
      }
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
}",0.9133333333333332
77776,"public void endPage(IPageContent page){
  logger.log(Level.FINE,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_DIV);
  if (page != null) {
    if (outputMasterPageContent) {
      writer.openTag(HTMLTags.TAG_DIV);
      handlePageStyle(page.getPageFooter().getStyleClass(),page.getPageFooter().getStyle());
      contentVisitor.visitChildren(page.getPageFooter(),null);
      writer.closeTag(HTMLTags.TAG_DIV);
    }
  }
  writer.closeTag(HTMLTags.TAG_DIV);
}","public void endPage(IPageContent page){
  logger.log(Level.FINE,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_DIV);
  if (page != null) {
    if (outputMasterPageContent) {
      boolean showFooter=true;
      Object genBy=page.getGenerateBy();
      if (genBy instanceof SimpleMasterPageDesign) {
        SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)genBy;
        if (!masterPage.isShowFooterOnLast()) {
          long totalPage=page.getPageNumber();
          IReportContent report=page.getReportContent();
          if (report != null) {
            totalPage=report.getTotalPage();
          }
          if (page.getPageNumber() == totalPage) {
            showFooter=false;
          }
        }
      }
      if (showFooter) {
        writer.openTag(HTMLTags.TAG_DIV);
        handlePageStyle(page.getPageFooter().getStyleClass(),page.getPageFooter().getStyle());
        contentVisitor.visitChildren(page.getPageFooter(),null);
        writer.closeTag(HTMLTags.TAG_DIV);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_DIV);
}",0.6108179419525066
77777,"protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    bodyOnly=false;
  }
 else {
    bodyOnly=true;
  }
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=extManager.createEmitter(format,emitterID);
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  return emitter;
}","protected IContentEmitter createContentEmitter() throws EngineException {
  String format=executionContext.getOutputFormat();
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    bodyOnly=false;
  }
 else {
    bodyOnly=true;
  }
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=extManager.createEmitter(format,emitterID);
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  if (!bodyOnly) {
    emitter=new HTMLTableLayoutEmitter(emitter);
  }
  return emitter;
}",0.9531109107303878
77778,"public AbstractDataEngine(ExecutionContext context){
  this.context=context;
  try {
    Scriptable scope=context.getScope();
    context.registerBean(""String_Node_Str"",new NativeRowObject(scope,rsets));
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ex.printStackTrace();
  }
}","public AbstractDataEngine(ExecutionContext context){
  this.context=context;
  try {
    Scriptable scope=context.getScope();
    context.registerBean(""String_Node_Str"",new NativeRowObject(scope,context));
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    ex.printStackTrace();
  }
}",0.9810725552050472
77779,"public void close(IResultSet rs){
  rsets.remove(rs);
}","public void close(IResultSet rs){
}",0.7777777777777778
77780,"public void shutdown(){
  rsets.clear();
  dteEngine.shutdown();
}","public void shutdown(){
  dteEngine.shutdown();
}",0.8521739130434782
77781,"public void shutdown(){
  rsets.clear();
  if (null != dos) {
    try {
      dos.close();
    }
 catch (    IOException e) {
    }
    dos=null;
  }
  dteEngine.shutdown();
}","public void shutdown(){
  if (null != dos) {
    try {
      dos.close();
    }
 catch (    IOException e) {
    }
    dos=null;
  }
  dteEngine.shutdown();
}",0.948948948948949
77782,"protected IResultSet doExecuteQuery(DteResultSet parentResult,IQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    IQueryResults parentQueryResults=null;
    if (parentResult != null) {
      parentQueryResults=parentResult.getQueryResults();
    }
    String resultSetID=null;
    if (parentQueryResults == null) {
      resultSetID=getResultID(null,-1,queryID);
    }
 else {
      String pRsetId=parentResult.getBaseRSetID();
      long rowid=parentResult.getRawID();
      resultSetID=getResultID(pRsetId,rowid,queryID);
    }
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    ((QueryDefinition)query).setQueryResultsID(resultSetID);
    IPreparedQuery pQuery=dteEngine.prepare(query);
    Scriptable scope=context.getSharedScope();
    String pRsetId=null;
    long rowId=-1;
    IQueryResults dteResults;
    DteResultSet resultSet=null;
    if (parentQueryResults == null) {
      dteResults=pQuery.execute(scope);
      resultSet=new DteResultSet(this,context,dteResults);
    }
 else {
      pRsetId=parentResult.getQueryResults().getID();
      rowId=parentResult.getRawID();
      dteResults=pQuery.execute(parentQueryResults,scope);
      resultSet=new DteResultSet(parentResult,dteResults);
    }
    resultSet.setBaseRSetID(resultSetID);
    rsets.addFirst(resultSet);
    storeDteMetaInfo(pRsetId,rowId,queryID,dteResults.getID());
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}","protected IResultSet doExecuteQuery(DteResultSet parentResult,IQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    IQueryResults parentQueryResults=null;
    if (parentResult != null) {
      parentQueryResults=parentResult.getQueryResults();
    }
    String resultSetID=null;
    if (parentQueryResults == null) {
      resultSetID=getResultID(null,-1,queryID);
    }
 else {
      String pRsetId=parentResult.getBaseRSetID();
      long rowid=parentResult.getRawID();
      resultSetID=getResultID(pRsetId,rowid,queryID);
    }
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    ((QueryDefinition)query).setQueryResultsID(resultSetID);
    IPreparedQuery pQuery=dteEngine.prepare(query);
    Scriptable scope=context.getSharedScope();
    String pRsetId=null;
    long rowId=-1;
    IQueryResults dteResults;
    DteResultSet resultSet=null;
    if (parentQueryResults == null) {
      dteResults=pQuery.execute(scope);
      resultSet=new DteResultSet(this,context,dteResults);
    }
 else {
      pRsetId=parentResult.getQueryResults().getID();
      rowId=parentResult.getRawID();
      dteResults=pQuery.execute(parentQueryResults,scope);
      resultSet=new DteResultSet(parentResult,dteResults);
    }
    resultSet.setBaseRSetID(resultSetID);
    storeDteMetaInfo(pRsetId,rowId,queryID,dteResults.getID());
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}",0.9901743264659272
77783,"public void shutdown(){
  rsets.clear();
  if (null != dos) {
    try {
      dos.close();
    }
 catch (    IOException e) {
    }
    dos=null;
  }
  dteEngine.shutdown();
}","public void shutdown(){
  if (null != dos) {
    try {
      dos.close();
    }
 catch (    IOException e) {
    }
    dos=null;
  }
  dteEngine.shutdown();
}",0.948948948948949
77784,"protected IResultSet doExecuteQuery(DteResultSet parentResult,IQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    IQueryResults queryResults=null;
    if (parentResult != null) {
      queryResults=parentResult.getQueryResults();
    }
    String resultSetID=null;
    if (queryResults == null) {
      resultSetID=getResultID(null,-1,queryID);
    }
 else {
      String pRsetId=queryResults.getID();
      long rowid=parentResult.getCurrentPosition();
      resultSetID=getResultID(pRsetId,rowid,queryID);
    }
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    queryResults=dteEngine.getQueryResults(resultSetID);
    DteResultSet resultSet=null;
    if (parentResult == null) {
      resultSet=new DteResultSet(this,context,queryResults);
    }
 else {
      resultSet=new DteResultSet(parentResult,queryResults);
    }
    rsets.addFirst(resultSet);
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}","protected IResultSet doExecuteQuery(DteResultSet parentResult,IQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    IQueryResults queryResults=null;
    if (parentResult != null) {
      queryResults=parentResult.getQueryResults();
    }
    String resultSetID=null;
    if (queryResults == null) {
      resultSetID=getResultID(null,-1,queryID);
    }
 else {
      String pRsetId=queryResults.getID();
      long rowid=parentResult.getCurrentPosition();
      resultSetID=getResultID(pRsetId,rowid,queryID);
    }
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    queryResults=dteEngine.getQueryResults(resultSetID);
    DteResultSet resultSet=null;
    if (parentResult == null) {
      resultSet=new DteResultSet(this,context,queryResults);
    }
 else {
      resultSet=new DteResultSet(parentResult,queryResults);
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}",0.985734008283479
77785,"protected IResultSet doExecuteQuery(DteResultSet resultSet,IQueryDefinition query){
  IPreparedQuery pQuery=(IPreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    return null;
  }
  try {
    Scriptable scope=context.getSharedScope();
    IQueryResults dteResults;
    if (resultSet == null) {
      dteResults=pQuery.execute(scope);
      resultSet=new DteResultSet(this,context,dteResults);
    }
 else {
      dteResults=pQuery.execute(resultSet.getQueryResults(),scope);
      resultSet=new DteResultSet(resultSet,dteResults);
    }
    rsets.addFirst(resultSet);
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
  }
  return null;
}","protected IResultSet doExecuteQuery(DteResultSet resultSet,IQueryDefinition query){
  IPreparedQuery pQuery=(IPreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    return null;
  }
  try {
    Scriptable scope=context.getSharedScope();
    IQueryResults dteResults;
    if (resultSet == null) {
      dteResults=pQuery.execute(scope);
      resultSet=new DteResultSet(this,context,dteResults);
    }
 else {
      dteResults=pQuery.execute(resultSet.getQueryResults(),scope);
      resultSet=new DteResultSet(resultSet,dteResults);
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
  }
  return null;
}",0.9783065080475856
77786,"public IBlob getBlob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Blob blob=rs.getBlob(index);
    return new Blob(blob);
  }
 catch (  UnsupportedOperationException e1) {
    try {
      InputStream inputStream=rs.getBinaryStream(index);
      return new Blob(SqlBlobUtil.newBlob(inputStream));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e);
  }
}","public IBlob getBlob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Blob blob=rs.getBlob(index);
    return new Blob(blob);
  }
 catch (  UnsupportedOperationException e1) {
    try {
      InputStream inputStream=rs.getBinaryStream(index);
      return new Blob(SqlBlobUtil.newBlob(inputStream));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
catch (  SQLException e) {
    try {
      byte[] bytes=rs.getBytes(index);
      return new Blob(SqlBlobUtil.newBlob(new ByteArrayInputStream(bytes)));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
}",0.8647416413373861
77787,"boolean isRowInDetailBand(IRowContent row){
  IBandContent band=(IBandContent)row.getParent();
  if (band.getBandType() == IBandContent.BAND_DETAIL) {
    return true;
  }
  return false;
}","boolean isRowInDetailBand(IRowContent row){
  IElement parent=row.getParent();
  if (!(parent instanceof IBandContent)) {
    return false;
  }
  IBandContent band=(IBandContent)parent;
  if (band.getBandType() == IBandContent.BAND_DETAIL) {
    return true;
  }
  return false;
}",0.673773987206823
77788,"/** 
 * @param result
 * @param key
 */
private static void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName){
  IConditionalExpression ce=key;
  if (groupName != null)   ce.setGroupName(groupName);
  String bindingName=TOTAL_PREFIX + totalColumnSuffix;
  totalColumnSuffix++;
  ColumnBinding columnBinding=new ColumnBinding(bindingName,ce);
  List allColumnBindings=new ArrayList();
  allColumnBindings.add(columnBinding);
  result.addColumnBindings(allColumnBindings);
  result.addNewExpression(""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(bindingName) + ""String_Node_Str"");
}","/** 
 * @param result
 * @param key
 */
private void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName){
  IConditionalExpression ce=key;
  if (groupName != null)   ce.setGroupName(groupName);
  String bindingName=TOTAL_PREFIX + totalColumnSuffix;
  totalColumnSuffix++;
  ColumnBinding columnBinding=new ColumnBinding(bindingName,ce);
  List allColumnBindings=new ArrayList();
  allColumnBindings.add(columnBinding);
  result.addColumnBindings(allColumnBindings);
  result.addNewExpression(""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(bindingName) + ""String_Node_Str"");
}",0.9946277820414428
77789,"/** 
 * Translate the old expression with ""row"" as indicator to new expression using ""dataSetRow"" as indicator.
 * @param oldExpression
 * @return
 */
private static String prepareTotalExpression(String oldExpression,List columnBindings,String groupName){
  if (oldExpression == null)   return null;
  char[] chars=oldExpression.toCharArray();
  if (chars.length < 8)   return oldExpression;
 else {
    ParseIndicator indicator=new ParseIndicator(0,0,false,false,true,true);
    for (int i=0; i < chars.length; i++) {
      indicator=getParseIndicator(chars,i,indicator.omitNextQuote(),indicator.getCandidateKey1(),indicator.getCandidateKey2());
      i=indicator.getNewIndex();
      if (i >= indicator.getRetrieveSize() + 6) {
        if (indicator.isCandidateKey() && chars[i - indicator.getRetrieveSize() - 6] == 'T' && chars[i - indicator.getRetrieveSize() - 5] == 'o' && chars[i - indicator.getRetrieveSize() - 4] == 't' && chars[i - indicator.getRetrieveSize() - 3] == 'a' && chars[i - indicator.getRetrieveSize() - 2] == 'l' && chars[i - indicator.getRetrieveSize() - 1] == '.') {
          if (i - indicator.getRetrieveSize() - 7 <= 0 || isValidProceeding(chars[i - indicator.getRetrieveSize() - 7])) {
            String firstPart=oldExpression.substring(0,i - indicator.getRetrieveSize() - 6);
            int startIndex=i - indicator.getRetrieveSize() - 6;
            i=advanceToNextValidEncloser(chars,i);
            String secondPart=""String_Node_Str"";
            String name=""String_Node_Str"";
            String expr=""String_Node_Str"";
            if (i < chars.length) {
              int endIndex=i + 1;
              expr=oldExpression.substring(startIndex,endIndex);
              secondPart=prepareTotalExpression(oldExpression.substring(i + 1 - indicator.getRetrieveSize()),columnBindings,groupName);
            }
 else {
              expr=oldExpression.substring(startIndex);
            }
            boolean shouldAddToList=true;
            for (int j=0; j < columnBindings.size(); j++) {
              IBaseExpression expression=((IColumnBinding)columnBindings.get(j)).getBoundExpression();
              if (expression instanceof IScriptExpression) {
                if (oldExpression.equals(((IScriptExpression)expression).getText())) {
                  shouldAddToList=false;
                  name=((IColumnBinding)columnBindings.get(j)).getResultSetColumnName();
                  break;
                }
              }
            }
            if (shouldAddToList) {
              name=TOTAL_PREFIX + totalColumnSuffix;
              totalColumnSuffix++;
              columnBindings.add(new ColumnBinding(name,expr,groupName));
            }
            String newExpression=firstPart + ""String_Node_Str"" + name+ ""String_Node_Str""+ secondPart;
            return newExpression;
          }
        }
      }
    }
  }
  return oldExpression;
}","/** 
 * Translate the old expression with ""row"" as indicator to new expression using ""dataSetRow"" as indicator.
 * @param oldExpression
 * @return
 */
private String prepareTotalExpression(String oldExpression,List columnBindings,String groupName){
  if (oldExpression == null)   return null;
  char[] chars=oldExpression.toCharArray();
  if (chars.length < 8)   return oldExpression;
 else {
    ParseIndicator indicator=new ParseIndicator(0,0,false,false,true,true);
    for (int i=0; i < chars.length; i++) {
      indicator=getParseIndicator(chars,i,indicator.omitNextQuote(),indicator.getCandidateKey1(),indicator.getCandidateKey2());
      i=indicator.getNewIndex();
      if (i >= indicator.getRetrieveSize() + 6) {
        if (indicator.isCandidateKey() && chars[i - indicator.getRetrieveSize() - 6] == 'T' && chars[i - indicator.getRetrieveSize() - 5] == 'o' && chars[i - indicator.getRetrieveSize() - 4] == 't' && chars[i - indicator.getRetrieveSize() - 3] == 'a' && chars[i - indicator.getRetrieveSize() - 2] == 'l' && chars[i - indicator.getRetrieveSize() - 1] == '.') {
          if (i - indicator.getRetrieveSize() - 7 <= 0 || isValidProceeding(chars[i - indicator.getRetrieveSize() - 7])) {
            String firstPart=oldExpression.substring(0,i - indicator.getRetrieveSize() - 6);
            int startIndex=i - indicator.getRetrieveSize() - 6;
            i=advanceToNextValidEncloser(chars,i);
            String secondPart=""String_Node_Str"";
            String name=""String_Node_Str"";
            String expr=""String_Node_Str"";
            if (i < chars.length) {
              int endIndex=i + 1;
              expr=oldExpression.substring(startIndex,endIndex);
              secondPart=prepareTotalExpression(oldExpression.substring(i + 1 - indicator.getRetrieveSize()),columnBindings,groupName);
            }
 else {
              expr=oldExpression.substring(startIndex);
            }
            boolean shouldAddToList=true;
            for (int j=0; j < columnBindings.size(); j++) {
              IBaseExpression expression=((IColumnBinding)columnBindings.get(j)).getBoundExpression();
              if (expression instanceof IScriptExpression) {
                if (oldExpression.equals(((IScriptExpression)expression).getText())) {
                  shouldAddToList=false;
                  name=((IColumnBinding)columnBindings.get(j)).getResultSetColumnName();
                  break;
                }
              }
            }
            if (shouldAddToList) {
              name=TOTAL_PREFIX + totalColumnSuffix;
              totalColumnSuffix++;
              columnBindings.add(new ColumnBinding(name,expr,groupName));
            }
            String newExpression=firstPart + ""String_Node_Str"" + name+ ""String_Node_Str""+ secondPart;
            return newExpression;
          }
        }
      }
    }
  }
  return oldExpression;
}",0.998786197329634
77790,"/** 
 * @param exprs
 * @return
 */
public static ITotalExprBindings prepareTotalExpressions(List exprs,String groupName){
  TotalExprBinding result=new TotalExprBinding();
  List l=new ArrayList();
  for (int i=0; i < exprs.size(); i++) {
    Object key=exprs.get(i);
    result.addColumnBindings(l);
    if (key instanceof String) {
      String expr=key == null ? null : key.toString();
      String newExpr=prepareTotalExpression(expr,l,groupName);
      result.addColumnBindings(l);
      result.addNewExpression(newExpr);
    }
 else     if (key instanceof IConditionalExpression) {
      addConditionalExprBindings(result,(IConditionalExpression)key,l,groupName);
    }
 else     if (key == null) {
      result.addNewExpression(null);
    }
  }
  return result;
}","/** 
 * @param exprs
 * @return
 */
public ITotalExprBindings prepareTotalExpressions(List exprs,String groupName){
  TotalExprBinding result=new TotalExprBinding();
  List l=new ArrayList();
  for (int i=0; i < exprs.size(); i++) {
    Object key=exprs.get(i);
    result.addColumnBindings(l);
    if (key instanceof String) {
      String expr=key == null ? null : key.toString();
      String newExpr=prepareTotalExpression(expr,l,groupName);
      result.addColumnBindings(l);
      result.addNewExpression(newExpr);
    }
 else     if (key instanceof IConditionalExpression) {
      addConditionalExprBindings(result,(IConditionalExpression)key,l,groupName);
    }
 else     if (key == null) {
      result.addNewExpression(null);
    }
  }
  return result;
}",0.9954397394136808
77791,"/** 
 * Transfer the old expression to column dataBinding and bind it to the Query. And create a news expression to replace the old expression.
 * @param expr expression to be transfered.return the transfered expression
 */
protected String transformExpression(String expr){
  if (expr == null) {
    return null;
  }
  IBaseQueryDefinition query=getParentQuery();
  if (query != null) {
    List expressions=new ArrayList();
    expressions.add(expr);
    ITotalExprBindings totalExpressionBinding=ExpressionUtil.prepareTotalExpressions(expressions,getCurrentGroupName());
    addNewColumnBindings(query,totalExpressionBinding);
    List newExpressions=totalExpressionBinding.getNewExpression();
    return (String)newExpressions.get(0);
  }
  return expr;
}","/** 
 * Transfer the old expression to column dataBinding and bind it to the Query. And create a news expression to replace the old expression.
 * @param expr expression to be transfered.return the transfered expression
 */
protected String transformExpression(String expr){
  if (expr == null) {
    return null;
  }
  IBaseQueryDefinition query=getParentQuery();
  if (query != null) {
    List expressions=new ArrayList();
    expressions.add(expr);
    ITotalExprBindings totalExpressionBinding=expressionUtil.prepareTotalExpressions(expressions,getCurrentGroupName());
    addNewColumnBindings(query,totalExpressionBinding);
    List newExpressions=totalExpressionBinding.getNewExpression();
    return (String)newExpressions.get(0);
  }
  return expr;
}",0.9986824769433466
77792,"/** 
 * Transfer the old visibility and hightlight expressions to column dataBinding and bind it to the Query. And create new visibility and hightlight expressions to replace the old.
 */
private void transformColumnExpressions(ColumnDesign column){
  IBaseQueryDefinition query=getParentQuery();
  if (query == null) {
    return;
  }
  List expressions=new ArrayList();
  VisibilityDesign visibilities=column.getVisibility();
  if (visibilities != null) {
    for (int i=0; i < visibilities.count(); i++) {
      expressions.add(visibilities.getRule(i).getExpression());
    }
  }
  HighlightDesign highlights=column.getHighlight();
  if (highlights != null) {
    for (int i=0; i < highlights.getRuleCount(); i++) {
      expressions.add(createConditionalExpression(highlights.getRule(i)));
    }
  }
  ITotalExprBindings totalExpressionBindings=ExpressionUtil.prepareTotalExpressions(expressions,getCurrentGroupName());
  addNewColumnBindings(query,totalExpressionBindings);
  int expressionIndex=0;
  List newExpressions=totalExpressionBindings.getNewExpression();
  if (visibilities != null) {
    for (int i=0; i < visibilities.count(); i++) {
      visibilities.getRule(i).setExpression((String)newExpressions.get(expressionIndex++));
    }
  }
  if (highlights != null) {
    for (int i=0; i < highlights.getRuleCount(); i++) {
      highlights.getRule(i).setConditionExpr((String)newExpressions.get(expressionIndex++));
    }
  }
}","/** 
 * Transfer the old visibility and hightlight expressions to column dataBinding and bind it to the Query. And create new visibility and hightlight expressions to replace the old.
 */
private void transformColumnExpressions(ColumnDesign column){
  IBaseQueryDefinition query=getParentQuery();
  if (query == null) {
    return;
  }
  List expressions=new ArrayList();
  VisibilityDesign visibilities=column.getVisibility();
  if (visibilities != null) {
    for (int i=0; i < visibilities.count(); i++) {
      expressions.add(visibilities.getRule(i).getExpression());
    }
  }
  HighlightDesign highlights=column.getHighlight();
  if (highlights != null) {
    for (int i=0; i < highlights.getRuleCount(); i++) {
      expressions.add(createConditionalExpression(highlights.getRule(i)));
    }
  }
  ITotalExprBindings totalExpressionBindings=expressionUtil.prepareTotalExpressions(expressions,getCurrentGroupName());
  addNewColumnBindings(query,totalExpressionBindings);
  int expressionIndex=0;
  List newExpressions=totalExpressionBindings.getNewExpression();
  if (visibilities != null) {
    for (int i=0; i < visibilities.count(); i++) {
      visibilities.getRule(i).setExpression((String)newExpressions.get(expressionIndex++));
    }
  }
  if (highlights != null) {
    for (int i=0; i < highlights.getRuleCount(); i++) {
      highlights.getRule(i).setConditionExpr((String)newExpressions.get(expressionIndex++));
    }
  }
}",0.9993060374739764
77793,"public ReportQueryBuilder(){
}","public ReportQueryBuilder(){
  expressionUtil=new ExpressionUtil();
}",0.6060606060606061
77794,"/** 
 * Boolean -> Integer true 	-> 1 others 	-> 0  Date -> Integer Date.getTime(); String -> Integer Integer.valueOf();
 * @param source
 * @return
 * @throws BirtException
 */
public static Integer toInteger(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Integer) {
    return (Integer)source;
  }
 else   if (source instanceof BigDecimal) {
    int intValue=((BigDecimal)source).intValue();
    return new Integer(intValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Integer(1);
    return new Integer(0);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new Integer((int)longValue);
  }
 else   if (source instanceof Double) {
    int intValue=((Double)source).intValue();
    return new Integer(intValue);
  }
 else   if (source instanceof String) {
    try {
      return Integer.valueOf((String)source);
    }
 catch (    NumberFormatException e) {
      throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
    }
  }
 else {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
}","/** 
 * Boolean -> Integer true 	-> 1 others 	-> 0  Date -> Integer Date.getTime(); String -> Integer Integer.valueOf();
 * @param source
 * @return
 * @throws BirtException
 */
public static Integer toInteger(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Integer) {
    return (Integer)source;
  }
 else   if (source instanceof BigDecimal) {
    int intValue=((BigDecimal)source).intValue();
    return new Integer(intValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Integer(1);
    return new Integer(0);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new Integer((int)longValue);
  }
 else   if (source instanceof Double) {
    int intValue=((Double)source).intValue();
    return new Integer(intValue);
  }
 else   if (source instanceof String) {
    try {
      return new Integer(Double.valueOf((String)source).intValue());
    }
 catch (    NumberFormatException e) {
      throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
    }
  }
 else {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
}",0.9861267341582304
77795,"/** 
 * compile the complex expression
 * @param complexNode
 * @throws BirtException
 */
private void compileComplexExpr(Node complexNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node child=complexNode.getFirstChild();
  while (child != null) {
    if (child.getType() == Token.FUNCTION) {
      int index=getFunctionIndex(child.getString(),tree);
      compileFunctionNode(tree.getFunctionNode(index),tree,columnExprList);
    }
    Node nextChild=child.getNext();
    if (child.getType() == Token.NUMBER || child.getType() == Token.STRING || child.getType() == Token.TRUE || child.getType() == Token.FALSE || child.getType() == Token.NULL) {
      processChild(complexNode,child,tree,columnExprList);
      child=nextChild;
      continue;
    }
    processChild(complexNode,child,tree,columnExprList);
    child=nextChild;
  }
}","/** 
 * compile the complex expression
 * @param complexNode
 * @throws BirtException
 */
private void compileComplexExpr(Node complexNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node child=complexNode.getFirstChild();
  while (child != null) {
    if (child.getType() == Token.FUNCTION) {
      int index=getFunctionIndex(child.getString(),tree);
      compileFunctionNode(tree.getFunctionNode(index),tree,columnExprList);
    }
    Node nextChild=child.getNext();
    if (child.getType() == Token.NUMBER || child.getType() == Token.STRING || child.getType() == Token.TRUE || child.getType() == Token.FALSE || child.getType() == Token.NULL) {
      processChild(child,tree,columnExprList);
      child=nextChild;
      continue;
    }
    processChild(child,tree,columnExprList);
    child=nextChild;
  }
}",0.8710059171597633
77796,"/** 
 * compile column reference expression
 * @param refNode
 * @throws BirtException
 */
private void compileDirectColRefExpr(Node refNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME) {
    if (refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM) {
      int level=compileOuterColRefExpr(refNode);
      if (level == -1) {
        compileComplexExpr(refNode,tree,columnExprList);
      }
 else {
        Node nextNode=refNode.getLastChild();
        if (nextNode.getType() == Token.STRING) {
          ColumnBinding info=new ColumnBinding(nextNode.getString(),""String_Node_Str"",level);
          columnExprList.add(info);
        }
      }
      return;
    }
    compileComplexExpr(refNode,tree,columnExprList);
    return;
  }
 else   compileSimpleColumnRefExpr(refNode,rowName,columnExprList);
}","/** 
 * compile column reference expression
 * @param refNode
 * @throws BirtException
 */
private void compileDirectColRefExpr(Node refNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM || refNode.getType() == Token.SETELEM || refNode.getType() == Token.SETPROP);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME) {
    if (refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM || refNode.getType() == Token.SETELEM || refNode.getType() == Token.SETPROP) {
      int level=compileOuterColRefExpr(refNode);
      if (level == -1) {
        compileComplexExpr(refNode,tree,columnExprList);
      }
 else {
        Node nextNode=refNode.getLastChild();
        if (nextNode.getType() == Token.STRING) {
          ColumnBinding info=new ColumnBinding(nextNode.getString(),""String_Node_Str"",level);
          columnExprList.add(info);
        }
      }
      return;
    }
    compileComplexExpr(refNode,tree,columnExprList);
    return;
  }
 else   compileSimpleColumnRefExpr(refNode,tree,columnExprList);
}",0.8374830239927569
77797,"/** 
 * process child node
 * @param parent
 * @param child
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void processChild(Node parent,Node child,ScriptOrFnNode tree,List columnExprList) throws BirtException {
switch (child.getType()) {
case Token.NUMBER:
case Token.STRING:
case Token.NULL:
case Token.TRUE:
case Token.FALSE:
    break;
case Token.GETPROP:
case Token.GETELEM:
  compileDirectColRefExpr(child,tree,columnExprList);
break;
case Token.CALL:
compileAggregateExpr(parent,child,tree,columnExprList);
break;
default :
compileComplexExpr(child,tree,columnExprList);
}
}","/** 
 * process child node
 * @param parent
 * @param child
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void processChild(Node child,ScriptOrFnNode tree,List columnExprList) throws BirtException {
switch (child.getType()) {
case Token.NUMBER:
case Token.STRING:
case Token.NULL:
case Token.TRUE:
case Token.FALSE:
    break;
case Token.GETPROP:
case Token.GETELEM:
case Token.SETPROP:
case Token.SETELEM:
{
    compileDirectColRefExpr(child,tree,columnExprList);
    break;
  }
case Token.CALL:
compileAggregateExpr(child,tree,columnExprList);
break;
default :
compileComplexExpr(child,tree,columnExprList);
}
}",0.9434262948207172
77798,"/** 
 * extract arguments from aggregation expression
 * @param context
 * @param callNode
 * @throws BirtException
 */
private void extractArguments(Node callNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node arg=callNode.getFirstChild().getNext();
  while (arg != null) {
    Node nextArg=arg.getNext();
    processChild(callNode,arg,tree,columnExprList);
    arg=nextArg;
  }
}","/** 
 * extract arguments from aggregation expression
 * @param context
 * @param callNode
 * @throws BirtException
 */
private void extractArguments(Node callNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node arg=callNode.getFirstChild().getNext();
  while (arg != null) {
    Node nextArg=arg.getNext();
    processChild(arg,tree,columnExprList);
    arg=nextArg;
  }
}",0.9712858926342072
77799,"/** 
 * @param refNode
 * @return
 */
private int compileOuterColRefExpr(Node refNode){
  int count=0;
  Node rowFirstNode=refNode.getFirstChild();
  if (refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM) {
    if (rowFirstNode.getType() == Token.NAME && rowFirstNode.getString().equals(ROW_INDICATOR)) {
      Node rowColumn=rowFirstNode.getNext();
      if (rowColumn.getType() == Token.STRING) {
        if (""String_Node_Str"".equals(rowColumn.getString()))         count++;
      }
      return count;
    }
 else     if (rowFirstNode.getType() == Token.GETPROP) {
      if (compileOuterColRefExpr(rowFirstNode) == -1)       return -1;
 else       count=count + compileOuterColRefExpr(rowFirstNode);
      Node nextChild=rowFirstNode.getNext();
      if (nextChild.getType() == Token.STRING) {
        if (""String_Node_Str"".equals(nextChild.getString()))         count++;
      }
    }
 else     return -1;
    return count;
  }
 else   return -1;
}","/** 
 * @param refNode
 * @return
 */
private int compileOuterColRefExpr(Node refNode){
  int count=0;
  Node rowFirstNode=refNode.getFirstChild();
  if (refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM || refNode.getType() == Token.SETPROP || refNode.getType() == Token.SETELEM) {
    if (rowFirstNode.getType() == Token.NAME && rowFirstNode.getString().equals(ROW_INDICATOR)) {
      Node rowColumn=rowFirstNode.getNext();
      if (rowColumn.getType() == Token.STRING) {
        if (""String_Node_Str"".equals(rowColumn.getString()))         count++;
      }
      return count;
    }
 else     if (rowFirstNode.getType() == Token.GETPROP || rowFirstNode.getType() == Token.SETPROP) {
      if (compileOuterColRefExpr(rowFirstNode) == -1)       return -1;
 else       count=count + compileOuterColRefExpr(rowFirstNode);
      Node nextChild=rowFirstNode.getNext();
      if (nextChild.getType() == Token.STRING) {
        if (""String_Node_Str"".equals(nextChild.getString()))         count++;
      }
    }
 else     return -1;
    return count;
  }
 else   return -1;
}",0.9424842919284678
77800,"/** 
 * compile the expression from a script tree
 * @param expression
 * @param context
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void CompiledExprFromTree(String expression,Context context,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  if (tree.getFirstChild() == tree.getLastChild()) {
    if (tree.getFirstChild().getType() == Token.FUNCTION) {
      int index=getFunctionIndex(tree.getFirstChild().getString(),tree);
      compileFunctionNode(tree.getFunctionNode(index),tree,columnExprList);
    }
 else {
      if (tree.getFirstChild().getType() != Token.EXPR_RESULT && tree.getFirstChild().getType() != Token.EXPR_VOID && tree.getFirstChild().getType() != Token.BLOCK) {
        throw new CoreException(pluginId,ResourceConstants.INVALID_EXPRESSION);
      }
      Node exprNode=tree.getFirstChild();
      Node child=exprNode.getFirstChild();
      assert(child != null);
      processChild(exprNode,child,tree,columnExprList);
    }
  }
 else {
    compileComplexExpr(tree,tree,columnExprList);
  }
}","/** 
 * compile the expression from a script tree
 * @param expression
 * @param context
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void CompiledExprFromTree(String expression,Context context,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  if (tree.getFirstChild() == tree.getLastChild()) {
    if (tree.getFirstChild().getType() == Token.FUNCTION) {
      int index=getFunctionIndex(tree.getFirstChild().getString(),tree);
      compileFunctionNode(tree.getFunctionNode(index),tree,columnExprList);
    }
 else {
      if (tree.getFirstChild().getType() != Token.EXPR_RESULT && tree.getFirstChild().getType() != Token.EXPR_VOID && tree.getFirstChild().getType() != Token.BLOCK) {
        throw new CoreException(pluginId,ResourceConstants.INVALID_EXPRESSION);
      }
      Node exprNode=tree.getFirstChild();
      processChild(exprNode,tree,columnExprList);
    }
  }
 else {
    compileComplexExpr(tree,tree,columnExprList);
  }
}",0.8673170731707317
77801,"/** 
 * compile aggregate expression
 * @param context
 * @param parent
 * @param callNode
 * @throws BirtException
 */
private void compileAggregateExpr(Node parent,Node callNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  assert(callNode.getType() == Token.CALL);
  compileAggregationFunction(callNode,tree,columnExprList);
  extractArguments(callNode,tree,columnExprList);
}","/** 
 * compile aggregate expression
 * @param context
 * @param parent
 * @param callNode
 * @throws BirtException
 */
private void compileAggregateExpr(Node callNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  assert(callNode.getType() == Token.CALL);
  compileAggregationFunction(callNode,tree,columnExprList);
  extractArguments(callNode,tree,columnExprList);
}",0.9847328244274808
77802,"/** 
 * compile simple column ref expression
 * @param refNode
 * @param rowName
 * @param columnExprList
 */
private void compileSimpleColumnRefExpr(Node refNode,Node rowName,List columnExprList){
  String str=rowName.getString();
  assert(str != null);
  if (!str.equals(ROW_INDICATOR))   return;
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (refNode.getType() == Token.GETPROP && rowColumn.getType() == Token.STRING) {
    int outer_count=0;
    if (""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()))     return;
    if (""String_Node_Str"".equals(rowColumn.getString())) {
      outer_count++;
      Node outer_Node=refNode.getNext();
      Node before_Node=outer_Node;
      while (outer_Node != null && outer_Node.getString() != null && ""String_Node_Str"".equals(outer_Node.getString())) {
        outer_count++;
        before_Node=outer_Node;
        outer_Node=outer_Node.getNext();
      }
      ColumnBinding info=new ColumnBinding(before_Node.getString(),""String_Node_Str"",outer_count);
      columnExprList.add(info);
      return;
    }
    ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
    columnExprList.add(binding);
  }
  if (refNode.getType() == Token.GETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
      if (0 == rowColumn.getDouble())       return;
    }
 else     if (rowColumn.getType() == Token.STRING) {
      if (""String_Node_Str"".equals(rowColumn.getString()))       return;
      ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
      columnExprList.add(binding);
    }
  }
}","/** 
 * compile simple column ref expression
 * @param refNode
 * @param rowName
 * @param columnExprList
 * @throws BirtException 
 */
private void compileSimpleColumnRefExpr(Node refNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node rowName=refNode.getFirstChild();
  String str=rowName.getString();
  assert(str != null);
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (!str.equals(ROW_INDICATOR)) {
    if (rowColumn != null && rowColumn.getNext() != null)     processChild(rowColumn.getNext(),tree,columnExprList);
    return;
  }
  if ((refNode.getType() == Token.GETPROP || refNode.getType() == Token.SETPROP) && rowColumn.getType() == Token.STRING) {
    int outer_count=0;
    if (""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()))     return;
    if (""String_Node_Str"".equals(rowColumn.getString())) {
      outer_count++;
      Node outer_Node=refNode.getNext();
      Node before_Node=outer_Node;
      while (outer_Node != null && outer_Node.getString() != null && ""String_Node_Str"".equals(outer_Node.getString())) {
        outer_count++;
        before_Node=outer_Node;
        outer_Node=outer_Node.getNext();
      }
      ColumnBinding info=new ColumnBinding(before_Node.getString(),""String_Node_Str"",outer_count);
      columnExprList.add(info);
      return;
    }
    ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
    columnExprList.add(binding);
  }
  if (refNode.getType() == Token.GETELEM || refNode.getType() == Token.SETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
      if (0 == rowColumn.getDouble())       return;
    }
 else     if (rowColumn.getType() == Token.STRING) {
      if (""String_Node_Str"".equals(rowColumn.getString()))       return;
      ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
      columnExprList.add(binding);
    }
  }
  if (rowColumn != null && rowColumn.getNext() != null)   processChild(rowColumn.getNext(),tree,columnExprList);
}",0.8425809691187547
77803,"public IQueryResults execute(IQueryResults outerResults,Scriptable scope) throws DataException {
  QueryResults queryResults=(QueryResults)super.execute(outerResults,scope);
  queryResults.setID(queryDefn.getQueryResultsID());
  return queryResults;
}","public IQueryResults execute(IQueryResults outerResults,Scriptable scope) throws DataException {
  String basedID=queryDefn.getQueryResultsID();
  String _1partID=QueryResultIDUtil.get1PartID(basedID);
  if (_1partID == null)   realBasedQueryID=basedID;
 else   realBasedQueryID=_1partID;
  QueryResults queryResults=(QueryResults)super.execute(outerResults,scope);
  queryResults.setID(realBasedQueryID);
  return queryResults;
}",0.4229074889867841
77804,"protected IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  RDLoad rdLoad=RDUtil.newLoad(engine.getContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,-1));
  DataSetResultSet dataSetResult=rdLoad.loadDataSetData();
  IResultClass meta=dataSetResult.getResultClass();
  IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler);
  dataSetResult.close();
  return resultIterator;
}","protected IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  RDLoad rdLoad=RDUtil.newLoad(engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
  DataSetResultSet dataSetResult=rdLoad.loadDataSetData();
  IResultClass meta=dataSetResult.getResultClass();
  IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler);
  dataSetResult.close();
  return resultIterator;
}",0.7418335089567967
77805,"public IResultMetaData getResultMetaData() throws DataException {
  RDLoad rdLoad=RDUtil.newLoad(engine.getContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,-1));
  return rdLoad.loadResultMetaData();
}","public IResultMetaData getResultMetaData() throws DataException {
  RDLoad rdLoad=RDUtil.newLoad(engine.getContext(),new QueryResultInfo(realBasedQueryID,null,-1));
  return rdLoad.loadResultMetaData();
}",0.9216152019002376
77806,"/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,QueryDefinition queryDefn,boolean useColumnHints,boolean useFilters) throws BirtException {
  DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
  DataRequestSession session=DataRequestSession.newSession(context);
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  if (dataSet.getPropertyHandle(DataSetHandle.RESULT_SET_PROP).iterator().hasNext()) {
    for (int n=0; n < columnCount; n++) {
      String columnLabel=metaData.getColumnLabel(n + 1);
      String columnName=metaData.getColumnName(n + 1);
      if (!columnLabel.equals(columnName) && columnName.lastIndexOf(RENAME_SEPARATOR) >= 0 && !columnLabel.equals(columnName.substring(0,columnName.lastIndexOf(RENAME_SEPARATOR)))) {
        dataSet.getPropertyHandle(DataSetHandle.RESULT_SET_PROP).clearValue();
        return execute(dataSet,queryDefn,useColumnHints,useFilters);
      }
    }
  }
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}","/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,QueryDefinition queryDefn,boolean useColumnHints,boolean useFilters) throws BirtException {
  DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
  DataRequestSession session=DataRequestSession.newSession(context);
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  if (dataSet.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP) != null && dataSet.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP).iterator().hasNext()) {
    for (int n=0; n < columnCount; n++) {
      String columnLabel=metaData.getColumnLabel(n + 1);
      String columnName=metaData.getColumnName(n + 1);
      if (!columnLabel.equals(columnName) && columnName.lastIndexOf(RENAME_SEPARATOR) >= 0 && !columnLabel.equals(columnName.substring(0,columnName.lastIndexOf(RENAME_SEPARATOR)))) {
        dataSet.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP).clearValue();
        return execute(dataSet,queryDefn,useColumnHints,useFilters);
      }
    }
  }
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}",0.7401273885350318
77807,"/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (columnName == null || columnName.trim().length() == 0) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          break;
        }
      }
    }
  }
}","/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (resultSetColumnHandle != null && (columnName == null || columnName.trim().length() == 0)) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          break;
        }
      }
    }
  }
}",0.9856693463823838
77808,"/** 
 * Gets all columns in a dataSet.
 * @param handle ReportItem object
 * @return Columns array.
 */
private String[] getDataSetColumns(ReportItemHandle handle){
  DataSetHandle dataSet=handle.getDataSet();
  if (dataSet == null)   return EMPTY;
  Iterator iterator=dataSet.resultSetIterator();
  if (iterator == null)   return EMPTY;
  ArrayList columns=new ArrayList();
  while (iterator.hasNext()) {
    ResultSetColumn resultSetColumn=(ResultSetColumn)iterator.next();
    columns.add(resultSetColumn.getColumnName());
  }
  return (String[])columns.toArray(new String[0]);
}","/** 
 * Gets all columns in a dataSet.
 * @param handle ReportItem object
 * @return Columns array.
 */
private String[] getDataSetColumns(ReportItemHandle handle){
  DataSetHandle dataSet=handle.getDataSet();
  if (dataSet == null)   return EMPTY;
  Iterator iterator=dataSet.resultSetHintsIterator();
  if (iterator == null)   return EMPTY;
  ArrayList columns=new ArrayList();
  while (iterator.hasNext()) {
    ResultSetColumn resultSetColumn=(ResultSetColumn)iterator.next();
    columns.add(resultSetColumn.getColumnName());
  }
  return (String[])columns.toArray(new String[0]);
}",0.9957228400342172
77809,"/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    HashMap paramBindingCandidates=new HashMap();
    Iterator elmtIter=modelDataSet.parametersIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
        if (modelParam.isInput()) {
          String defaultValueExpr=modelParam.getDefaultValue();
          if (defaultValueExpr != null)           paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
    }
    elmtIter=modelDataSet.paramBindingsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
        paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
      }
    }
    if (paramBindingCandidates.size() > 0) {
      elmtIter=paramBindingCandidates.keySet().iterator();
      while (elmtIter.hasNext()) {
        Object paramName=elmtIter.next();
        assert(paramName != null && paramName instanceof String);
        String expression=(String)paramBindingCandidates.get(paramName);
        dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
      }
    }
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  Iterator elmtIter=modelDataSet.computedColumnsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ComputedColumnHandle modelCmptdColumn=(ComputedColumnHandle)elmtIter.next();
      dteDataSet.addComputedColumn(new ComputedColumnAdapter(modelCmptdColumn));
    }
  }
  elmtIter=modelDataSet.filtersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      FilterConditionHandle modelFilter=(FilterConditionHandle)elmtIter.next();
      dteDataSet.addFilter(new FilterAdapter(modelFilter));
    }
  }
  elmtIter=modelDataSet.resultSetIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
}","/** 
 * Adapts base data set properties
 */
public static void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null) {
    throw new AdapterException(ResourceConstants.DATASOURCE_NULL_ERROR);
  }
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    HashMap paramBindingCandidates=new HashMap();
    Iterator elmtIter=modelDataSet.parametersIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
        if (modelParam.isInput()) {
          String defaultValueExpr=modelParam.getDefaultValue();
          if (defaultValueExpr != null)           paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
    }
    elmtIter=modelDataSet.paramBindingsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
        paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
      }
    }
    if (paramBindingCandidates.size() > 0) {
      elmtIter=paramBindingCandidates.keySet().iterator();
      while (elmtIter.hasNext()) {
        Object paramName=elmtIter.next();
        assert(paramName != null && paramName instanceof String);
        String expression=(String)paramBindingCandidates.get(paramName);
        dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
      }
    }
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  Iterator elmtIter=modelDataSet.computedColumnsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ComputedColumnHandle modelCmptdColumn=(ComputedColumnHandle)elmtIter.next();
      dteDataSet.addComputedColumn(new ComputedColumnAdapter(modelCmptdColumn));
    }
  }
  elmtIter=modelDataSet.filtersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      FilterConditionHandle modelFilter=(FilterConditionHandle)elmtIter.next();
      dteDataSet.addFilter(new FilterAdapter(modelFilter));
    }
  }
  elmtIter=modelDataSet.resultSetHintsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      dteDataSet.addResultSetHint(new ColumnAdapter(modelColumn));
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(new ColumnAdapter(modelColumnHint));
    }
  }
}",0.9992808859485114
77810,"void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    HashMap paramBindingCandidates=new HashMap();
    Iterator elmtIter=modelDataSet.parametersIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
        dteDataSet.addParameter(newParam(modelParam));
        if (modelParam.isInput()) {
          String defaultValueExpr=modelParam.getDefaultValue();
          if (defaultValueExpr != null)           paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
    }
    elmtIter=modelDataSet.paramBindingsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
        paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
      }
    }
    if (paramBindingCandidates.size() > 0) {
      elmtIter=paramBindingCandidates.keySet().iterator();
      while (elmtIter.hasNext()) {
        Object paramName=elmtIter.next();
        assert(paramName != null && paramName instanceof String);
        String expression=(String)paramBindingCandidates.get(paramName);
        dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
      }
    }
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  Iterator elmtIter=modelDataSet.computedColumnsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ComputedColumnHandle modelCmptdColumn=(ComputedColumnHandle)elmtIter.next();
      IComputedColumn dteCmptdColumn=newComputedColumn(modelCmptdColumn);
      dteDataSet.addComputedColumn(dteCmptdColumn);
    }
  }
  elmtIter=modelDataSet.filtersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      FilterConditionHandle modelFilter=(FilterConditionHandle)elmtIter.next();
      IFilterDefinition dteFilter=newFilter(modelFilter);
      dteDataSet.addFilter(dteFilter);
    }
  }
  elmtIter=modelDataSet.resultSetIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}","void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    HashMap paramBindingCandidates=new HashMap();
    Iterator elmtIter=modelDataSet.parametersIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
        dteDataSet.addParameter(newParam(modelParam));
        if (modelParam.isInput()) {
          String defaultValueExpr=modelParam.getDefaultValue();
          if (defaultValueExpr != null)           paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
    }
    elmtIter=modelDataSet.paramBindingsIterator();
    if (elmtIter != null) {
      while (elmtIter.hasNext()) {
        ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
        paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
      }
    }
    if (paramBindingCandidates.size() > 0) {
      elmtIter=paramBindingCandidates.keySet().iterator();
      while (elmtIter.hasNext()) {
        Object paramName=elmtIter.next();
        assert(paramName != null && paramName instanceof String);
        String expression=(String)paramBindingCandidates.get(paramName);
        dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
      }
    }
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  Iterator elmtIter=modelDataSet.computedColumnsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ComputedColumnHandle modelCmptdColumn=(ComputedColumnHandle)elmtIter.next();
      IComputedColumn dteCmptdColumn=newComputedColumn(modelCmptdColumn);
      dteDataSet.addComputedColumn(dteCmptdColumn);
    }
  }
  elmtIter=modelDataSet.filtersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      FilterConditionHandle modelFilter=(FilterConditionHandle)elmtIter.next();
      IFilterDefinition dteFilter=newFilter(modelFilter);
      dteDataSet.addFilter(dteFilter);
    }
  }
  elmtIter=modelDataSet.resultSetHintsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    List columnDefns=dteDataSet.getResultSetHints();
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumnHint.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumnHint);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
}",0.9992735725701004
77811,"/** 
 * Checks whether <code>filePath</code> is a file protocol if it is not a invalid URI. <p> A invalid URI contains excluded US-ASCII characters: <ul> <li>contro = <US-ASCII coded characters 00-1F and 7F hexadecimal> <li>space = <US-ASCII coded character 20 hexadecimal> <li>delims=""<"" | "">"" | ""#"" | ""%"" | <""> <li>unwise=""{"" | ""}"" | ""|"" | ""\"" | ""^"" | ""["" | ""]"" | ""`"" </ul> Details are described at the hyperlink: http://www.ietf.org/rfc/rfc2396.txt.
 * @param uri the input uri
 * @return the file path if <code>uri</code> refers to a file. Otherwisenull.
 */
private static String getLocalFileOfFailedURI(String uri){
  URL objURI=null;
  try {
    objURI=new URL(uri);
    if (objURI.getProtocol().equalsIgnoreCase(FILE_SCHEMA)) {
      return objURI.getAuthority() == null ? objURI.getPath() : objURI.getAuthority() + objURI.getPath();
    }
 else     if (objURI.getProtocol().equalsIgnoreCase(JAR_SCHEMA))     return uri;
 else     return null;
  }
 catch (  MalformedURLException e) {
    File file=new File(uri);
    if (uri.contains(JAR_EXTENTION))     return JAR_SCHEMA + ""String_Node_Str"" + FILE_SCHEMA+ ""String_Node_Str""+ file.getAbsolutePath();
    if (uri.startsWith(FILE_SCHEMA))     return file.toURI().getSchemeSpecificPart();
    return uri;
  }
}","/** 
 * Checks whether <code>filePath</code> is a file protocol if it is not a invalid URI. <p> A invalid URI contains excluded US-ASCII characters: <ul> <li>contro = <US-ASCII coded characters 00-1F and 7F hexadecimal> <li>space = <US-ASCII coded character 20 hexadecimal> <li>delims=""<"" | "">"" | ""#"" | ""%"" | <""> <li>unwise=""{"" | ""}"" | ""|"" | ""\"" | ""^"" | ""["" | ""]"" | ""`"" </ul> Details are described at the hyperlink: http://www.ietf.org/rfc/rfc2396.txt.
 * @param uri the input uri
 * @return the file path if <code>uri</code> refers to a file. Otherwisenull.
 */
private static String getLocalFileOfFailedURI(String uri){
  URL objURI=null;
  try {
    objURI=new URL(uri);
    if (objURI.getProtocol().equalsIgnoreCase(FILE_SCHEMA)) {
      return objURI.getAuthority() == null ? objURI.getPath() : objURI.getAuthority() + objURI.getPath();
    }
 else     if (objURI.getProtocol().equalsIgnoreCase(JAR_SCHEMA))     return uri;
 else     return null;
  }
 catch (  MalformedURLException e) {
    File file=new File(uri);
    if (uri.indexOf(JAR_EXTENTION) != 0)     return JAR_SCHEMA + ""String_Node_Str"" + FILE_SCHEMA+ ""String_Node_Str""+ file.getAbsolutePath();
    if (uri.startsWith(FILE_SCHEMA))     return file.toURI().getSchemeSpecificPart();
    return uri;
  }
}",0.9921135646687698
77812,"/** 
 * Converts a filename to a valid URL. The filename can include directory information, either relative or absolute directory. And the file should be on the local disk.
 * @param filePath the file name
 * @return a valid URL
 */
public static URL getDirectory(String filePath){
  if (filePath == null)   return null;
  URL url=null;
  try {
    url=new URL(convertFileNameToURLString(filePath));
  }
 catch (  MalformedURLException e) {
    if (filePath.contains(JAR_EXTENTION))     url=getJarDirectory(filePath);
 else     url=getFileDirectory(filePath);
    return url;
  }
  if (FILE_SCHEMA.equalsIgnoreCase(url.getProtocol()))   return getFileDirectory(url.getPath());
 else   if (JAR_SCHEMA.equalsIgnoreCase(url.getProtocol()) && !url.getPath().toLowerCase().startsWith(HTTP_SCHEMA))   return getJarDirectory(url.getPath());
  return getNetDirectory(url);
}","/** 
 * Converts a filename to a valid URL. The filename can include directory information, either relative or absolute directory. And the file should be on the local disk.
 * @param filePath the file name
 * @return a valid URL
 */
public static URL getDirectory(String filePath){
  if (filePath == null)   return null;
  URL url=null;
  try {
    url=new URL(convertFileNameToURLString(filePath));
  }
 catch (  MalformedURLException e) {
    if (filePath.indexOf(JAR_EXTENTION) != 0)     url=getJarDirectory(filePath);
 else     url=getFileDirectory(filePath);
    return url;
  }
  if (FILE_SCHEMA.equalsIgnoreCase(url.getProtocol()))   return getFileDirectory(url.getPath());
 else   if (JAR_SCHEMA.equalsIgnoreCase(url.getProtocol()) && !url.getPath().toLowerCase().startsWith(HTTP_SCHEMA))   return getJarDirectory(url.getPath());
  return getNetDirectory(url);
}",0.988479262672811
77813,"/** 
 * @param dataExpr
 * @param odiResult
 * @param scope
 * @param logger
 * @return
 * @throws BirtException
 */
public static Object evaluateExpression(IBaseExpression dataExpr,IResultIterator odiResult,Scriptable scope) throws BirtException {
  Object exprValue=null;
  if (dataExpr == null)   throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
  Object handle=dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope);
    try {
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INCONVERTIBLE_DATATYPE,new Object[]{value,value.getClass(),DataType.getClass(dataExpr.getDataType())});
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=evaluateExpression(ce.getExpression(),odiResult,scope);
    Object resultOp1=ce.getOperand1() != null ? evaluateExpression(ce.getOperand1(),odiResult,scope) : null;
    Object resultOp2=ce.getOperand2() != null ? evaluateExpression(ce.getOperand2(),odiResult,scope) : null;
    String op1Text=ce.getOperand1() != null ? ce.getOperand1().getText() : null;
    String op2Text=ce.getOperand2() != null ? ce.getOperand2().getText() : null;
    exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),ScriptEvalUtil.newExprInfo(op1Text,resultOp1),ScriptEvalUtil.newExprInfo(op2Text,resultOp2));
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    throw e;
  }
  if (exprValue instanceof DataExceptionMocker) {
    throw ((DataExceptionMocker)exprValue).getCause();
  }
  return exprValue;
}","/** 
 * @param dataExpr
 * @param odiResult
 * @param scope
 * @param logger
 * @return
 * @throws BirtException
 */
public static Object evaluateExpression(IBaseExpression dataExpr,IResultIterator odiResult,Scriptable scope) throws BirtException {
  Object exprValue=null;
  if (dataExpr == null)   throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
  Object handle=dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope);
    try {
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=evaluateExpression(ce.getExpression(),odiResult,scope);
    Object resultOp1=ce.getOperand1() != null ? evaluateExpression(ce.getOperand1(),odiResult,scope) : null;
    Object resultOp2=ce.getOperand2() != null ? evaluateExpression(ce.getOperand2(),odiResult,scope) : null;
    String op1Text=ce.getOperand1() != null ? ce.getOperand1().getText() : null;
    String op2Text=ce.getOperand2() != null ? ce.getOperand2().getText() : null;
    exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),ScriptEvalUtil.newExprInfo(op1Text,resultOp1),ScriptEvalUtil.newExprInfo(op2Text,resultOp2));
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    throw e;
  }
  if (exprValue instanceof DataExceptionMocker) {
    throw ((DataExceptionMocker)exprValue).getCause();
  }
  return exprValue;
}",0.9562270545043772
77814,"private boolean containValue(SelectionChoice selectedChoice,String newValue,String property){
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    SelectionChoice choice=(SelectionChoice)iter.next();
    if (choice != selectedChoice) {
      String value=null;
      if (COLUMN_VALUE.equals(property)) {
        value=choice.getValue();
      }
 else       if (COLUMN_DISPLAY_TEXT.equals(property)) {
        value=choice.getLabel();
        if (value == null) {
          value=choice.getValue();
        }
        if (value == null) {
          value=LABEL_NULL;
        }
      }
      if (isEqual(value,newValue)) {
        return true;
      }
    }
  }
  return false;
}","private boolean containValue(SelectionChoice selectedChoice,String newValue,String property){
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    SelectionChoice choice=(SelectionChoice)iter.next();
    if (choice != selectedChoice) {
      String value=null;
      if (COLUMN_VALUE.equals(property)) {
        value=choice.getValue();
        if (isEqual(value,newValue)) {
          return true;
        }
      }
 else       if (COLUMN_DISPLAY_TEXT.equals(property)) {
        value=choice.getLabel();
        if (value == null) {
          value=choice.getValue();
        }
        if (value == null) {
          value=LABEL_NULL;
        }
        if (value.equals(newValue)) {
          return true;
        }
      }
    }
  }
  return false;
}",0.8512679917751885
77815,"private boolean performRevertToTemplateItem(DesignElementHandle handle){
  try {
    handle.revertToTemplate(""String_Node_Str"");
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return true;
}","private boolean performRevertToTemplateItem(DesignElementHandle handle){
  try {
    handle.revertToTemplate(ReportPlugin.getDefault().getCustomName(ReportDesignConstants.TEMPLATE_REPORT_ITEM));
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return true;
}",0.449814126394052
77816,"private boolean checkNameExist(DesignElement element,String name){
  if (name == null || name.length() == 0)   return false;
  ElementDefn metaData=(ElementDefn)element.getDefn();
  int ns=metaData.getNameSpaceID();
  DesignElement existedElement=SessionHandleAdapter.getInstance().getReportDesignHandle().getModule().getNameSpace(ns).getElement(name);
  return (existedElement == null) ? false : true;
}","private boolean checkNameExist(DesignElement element,String name){
  if (name == null || name.length() == 0)   return false;
  ElementDefn metaData=(ElementDefn)element.getDefn();
  int ns=metaData.getNameSpaceID();
  DesignElement existedElement=SessionHandleAdapter.getInstance().getReportDesignHandle().getModule().getNameSpace(ns).getElement(name);
  return (existedElement == null || existedElement == element) ? false : true;
}",0.965352449223417
77817,"private boolean performCreatePlaceHolder(ReportElementHandle handle){
  boolean bIsNameExist=false;
  TemplateElementHandle template=null;
  String name=null;
  String desc=null;
  do {
    try {
      if (template == null) {
        template=handle.createTemplateElement(null);
      }
      if (name == null) {
        name=template.getName();
        name=(name == null) ? ""String_Node_Str"" : name;
      }
      if (desc == null) {
        desc=template.getDescription();
        desc=(desc == null) ? ""String_Node_Str"" : desc;
      }
      TemplateReportItemPropertiesDialog dialog=new TemplateReportItemPropertiesDialog(template.getDefaultElement().getDefn().getDisplayName(),name,desc);
      if (dialog.open() == Window.OK) {
        name=(String)dialog.getName().trim();
        desc=(String)dialog.getResult();
        bIsNameExist=checkNameExist(template.getElement(),name);
        if (bIsNameExist == false) {
          template.setDescription(desc);
          template.setName(name);
        }
 else {
          ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        }
      }
 else {
        return false;
      }
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
 while (bIsNameExist == true);
  return true;
}","private boolean performCreatePlaceHolder(ReportElementHandle handle){
  boolean bIsNameExist=false;
  TemplateElementHandle template=null;
  String name=null;
  String desc=null;
  do {
    try {
      if (template == null) {
        template=handle.createTemplateElement(ReportPlugin.getDefault().getCustomName(ReportDesignConstants.TEMPLATE_REPORT_ITEM));
      }
      if (name == null) {
        name=template.getName();
        name=(name == null) ? ""String_Node_Str"" : name;
      }
      if (desc == null) {
        desc=template.getDescription();
        desc=(desc == null) ? ""String_Node_Str"" : desc;
      }
      TemplateReportItemPropertiesDialog dialog=new TemplateReportItemPropertiesDialog(template.getDefaultElement().getDefn().getDisplayName(),name,desc);
      if (dialog.open() == Window.OK) {
        name=(String)dialog.getName().trim();
        desc=(String)dialog.getResult();
        bIsNameExist=checkNameExist(template.getElement(),name);
        if (bIsNameExist == false) {
          template.setDescription(desc);
          template.setName(name);
        }
 else {
          ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        }
      }
 else {
        return false;
      }
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
 while (bIsNameExist == true);
  return true;
}",0.9686937747391148
77818,"/** 
 * Set default element names for preference
 * @param store The preference for store
 */
private void setDefaultElementNamePreference(IPreferenceStore store){
  List tmpList;
  tmpList=DesignEngine.getMetaDataDictionary().getElements();
  int i;
  StringBuffer bufferDefaultName=new StringBuffer();
  StringBuffer bufferCustomName=new StringBuffer();
  StringBuffer bufferPreference=new StringBuffer();
  int nameOption;
  IElementDefn elementDefn;
  for (i=0; i < tmpList.size(); i++) {
    elementDefn=(IElementDefn)(tmpList.get(i));
    nameOption=elementDefn.getNameOption();
    if (nameOption == MetaDataConstants.NO_NAME) {
      continue;
    }
    nameCount++;
    bufferDefaultName.append(elementDefn.getName());
    bufferDefaultName.append(PREFERENCE_DELIMITER);
    bufferCustomName.append(""String_Node_Str"");
    bufferCustomName.append(PREFERENCE_DELIMITER);
    appendDefaultPreference(elementDefn.getName(),bufferPreference);
  }
  store.setDefault(DEFAULT_NAME_PREFERENCE,bufferDefaultName.toString());
  store.setDefault(CUSTOM_NAME_PREFERENCE,bufferCustomName.toString());
  store.setDefault(DESCRIPTION_PREFERENCE,bufferPreference.toString());
}","/** 
 * Set default element names for preference
 * @param store The preference for store
 */
private void setDefaultElementNamePreference(IPreferenceStore store){
  List tmpList=DesignEngine.getMetaDataDictionary().getElements();
  int i;
  StringBuffer bufferDefaultName=new StringBuffer();
  StringBuffer bufferCustomName=new StringBuffer();
  StringBuffer bufferPreference=new StringBuffer();
  int nameOption;
  IElementDefn elementDefn;
  for (i=0; i < tmpList.size(); i++) {
    elementDefn=(IElementDefn)(tmpList.get(i));
    nameOption=elementDefn.getNameOption();
    if (nameOption == MetaDataConstants.NO_NAME || filteName(elementDefn)) {
      continue;
    }
    nameCount++;
    bufferDefaultName.append(elementDefn.getName());
    bufferDefaultName.append(PREFERENCE_DELIMITER);
    bufferCustomName.append(""String_Node_Str"");
    bufferCustomName.append(PREFERENCE_DELIMITER);
    appendDefaultPreference(elementDefn.getName(),bufferPreference);
  }
  store.setDefault(DEFAULT_NAME_PREFERENCE,bufferDefaultName.toString());
  store.setDefault(CUSTOM_NAME_PREFERENCE,bufferCustomName.toString());
  store.setDefault(DESCRIPTION_PREFERENCE,bufferPreference.toString());
}",0.9843020789138736
77819,"/** 
 * Get the custom name preference of specified element name
 * @param defaultName The specified element name
 * @return String The custom name gotten
 */
public String getCustomName(Object defaultName){
  int i;
  String[] defaultNameArray=getDefaultNamePreference();
  String[] customNameArray=getCustomNamePreference();
  if (defaultNameArray.length != customNameArray.length) {
    return null;
  }
  for (i=0; i < defaultNameArray.length; i++) {
    if (defaultNameArray[i].trim().equals(defaultName)) {
      if (customNameArray[i].equals(""String_Node_Str"")) {
        return null;
      }
      return new String(customNameArray[i]);
    }
  }
  return null;
}","/** 
 * Get the custom name preference of specified element name
 * @param defaultName The specified element name
 * @return String The custom name gotten
 */
public String getCustomName(String defaultName){
  int i;
  String[] defaultNameArray=getDefaultNamePreference();
  String[] customNameArray=getCustomNamePreference();
  if (defaultNameArray.length != customNameArray.length) {
    return null;
  }
  for (i=0; i < defaultNameArray.length; i++) {
    if (defaultNameArray[i].trim().equals(defaultName)) {
      if (customNameArray[i].equals(""String_Node_Str"")) {
        return null;
      }
      return new String(customNameArray[i]);
    }
  }
  return null;
}",0.9910581222056632
77820,"protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_ELEMENT_NAMES_ID);
  Composite mainComposite=new Composite(parent,SWT.BORDER);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.grabExcessHorizontalSpace=true;
  mainComposite.setLayoutData(data);
  GridLayout layout=new GridLayout();
  mainComposite.setLayout(layout);
  createTable(mainComposite);
  createTableViewer();
  tableViewer.setContentProvider(new ContentProvider());
  tableViewer.setLabelProvider(new ElementNameLabelProvider());
  itemContentList=new ItemContentList();
  tableViewer.setInput(itemContentList);
  return mainComposite;
}","protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_ELEMENT_NAMES_ID);
  Composite mainComposite=new Composite(parent,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.grabExcessHorizontalSpace=true;
  mainComposite.setLayoutData(data);
  GridLayout layout=new GridLayout();
  mainComposite.setLayout(layout);
  createTable(mainComposite);
  createTableViewer();
  tableViewer.setContentProvider(new ContentProvider());
  tableViewer.setLabelProvider(new ElementNameLabelProvider());
  itemContentList=new ItemContentList();
  tableViewer.setInput(itemContentList);
  return mainComposite;
}",0.9940564635958395
77821,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null) {
    if (context instanceof HTMLRenderContext) {
      baseURL=((HTMLRenderContext)context).getBaseURL();
    }
    if (context instanceof PDFRenderContext) {
      baseURL=((PDFRenderContext)context).getBaseURL();
    }
  }
  if (baseURL == null) {
    baseURL=""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (!""String_Node_Str"".equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(""String_Node_Str"" + format);
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=valueObj.toString();
            link.append(""String_Node_Str"" + URLEncoder.encode(key,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(value,""String_Node_Str""));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(""String_Node_Str"");
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(""String_Node_Str"") > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null) {
    if (context instanceof HTMLRenderContext) {
      baseURL=((HTMLRenderContext)context).getBaseURL();
    }
    if (context instanceof PDFRenderContext) {
      baseURL=((PDFRenderContext)context).getBaseURL();
    }
  }
  if (baseURL == null) {
    baseURL=""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (!""String_Node_Str"".equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(""String_Node_Str"" + format);
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=ParameterValidationUtil.getDisplayValue(valueObj);
            link.append(""String_Node_Str"" + URLEncoder.encode(key,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(value,""String_Node_Str""));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(""String_Node_Str"");
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(""String_Node_Str"") > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9895615866388308
77822,"/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      try {
        paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValueObj.toString(),locale);
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}","/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      try {
        try {
          paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValueObj.toString(),locale);
        }
 catch (        ValidationValueException e1) {
          paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),ParameterValidationUtil.DEFAULT_DATETIME_FORMAT,paramValueObj.toString());
        }
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}",0.9212520593080724
77823,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=ParameterValidationUtil.getDisplayValue(null,null,valueObj,locale);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
    if (!ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format) && action.getBookmark() != null) {
      try {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE)));
      }
 catch (      UnsupportedEncodingException e) {
      }
      if (!action.isBookmark()) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor._TOC,String.valueOf(true)));
      }
    }
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=ParameterValidationUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
    if (!ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format) && action.getBookmark() != null) {
      try {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE)));
      }
 catch (      UnsupportedEncodingException e) {
      }
      if (!action.isBookmark()) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor._TOC,String.valueOf(true)));
      }
    }
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  return link.toString();
}",0.9969927472138688
77824,"public URL findResource(ModuleHandle moduleHandle,String fileName,int type){
  if (fileName == null)   return null;
  try {
    File f=new File(fileName);
    if (f.isAbsolute())     return f.exists() && f.isFile() ? f.getCanonicalFile().toURL() : null;
    try {
      URL objURI=new URL(fileName);
      if (URIUtil.FILE_SCHEMA.equalsIgnoreCase(objURI.getProtocol())) {
        f=new File(objURI.getPath());
        if (f.isAbsolute())         return f.exists() && f.isFile() ? f.getCanonicalFile().toURL() : null;
      }
    }
 catch (    MalformedURLException e) {
    }
    String resourcePath=moduleHandle.getModule().getSession().getBirtResourcePath();
    if (resourcePath != null) {
      f=new File(resourcePath,fileName);
      if (f.exists() && f.isFile())       return f.getCanonicalFile().toURL();
    }
    if (moduleHandle == null)     return null;
    URL systemId=moduleHandle.getModule().getSystemId();
    if (systemId == null)     return null;
    if (URIUtil.FILE_SCHEMA.equalsIgnoreCase(systemId.getProtocol()))     return tryFileSearch(systemId,fileName);
    return new URL(systemId,URIUtil.convertFileNameToURLString(fileName));
  }
 catch (  MalformedURLException e) {
  }
catch (  IOException e) {
  }
  return null;
}","public URL findResource(ModuleHandle moduleHandle,String fileName,int type){
  if (fileName == null)   return null;
  try {
    File f=new File(fileName);
    if (f.isAbsolute())     return f.exists() && f.isFile() ? f.getCanonicalFile().toURL() : null;
    try {
      URL objURI=new URL(fileName);
      String protocol=objURI.getProtocol();
      if (URIUtil.FILE_SCHEMA.equalsIgnoreCase(protocol)) {
        f=new File(objURI.getPath());
        if (f.isAbsolute())         return f.exists() && f.isFile() ? f.getCanonicalFile().toURL() : null;
      }
 else       if (URIUtil.JAR_SCHEMA.equalsIgnoreCase(protocol)) {
        URLConnection jarConnection=objURI.openConnection();
        try {
          jarConnection.connect();
          return objURI;
        }
 catch (        IOException e1) {
          return null;
        }
      }
    }
 catch (    MalformedURLException e) {
    }
    String resourcePath=moduleHandle.getModule().getSession().getBirtResourcePath();
    if (resourcePath != null) {
      f=new File(resourcePath,fileName);
      if (f.exists() && f.isFile())       return f.getCanonicalFile().toURL();
    }
    if (moduleHandle == null)     return null;
    URL systemId=moduleHandle.getModule().getSystemId();
    if (systemId == null)     return null;
    if (URIUtil.FILE_SCHEMA.equalsIgnoreCase(systemId.getProtocol()))     return tryFileSearch(systemId,fileName);
 else     if (URIUtil.JAR_SCHEMA.equalsIgnoreCase(systemId.getProtocol()))     return tryJarSearch(systemId,fileName);
    return new URL(systemId,URIUtil.convertFileNameToURLString(fileName));
  }
 catch (  IOException e) {
  }
  return null;
}",0.7418685121107267
77825,"/** 
 * Tests whether the input string is a valid resource directory.
 * @param resourceDir the resource directory
 * @return <code>true</code> if the input string is a valid resourcedirectory, <code>false</code> otherwise.
 */
public static boolean isValidResourcePath(String resourceDir){
  if (resourceDir == null)   return false;
  File f=new File(resourceDir);
  if (f.isAbsolute() && f.exists() && f.isDirectory())   return true;
  return false;
}","/** 
 * Tests whether the input string is a valid resource directory.
 * @param resourceDir the resource directory
 * @return <code>true</code> if the input string is a valid resourcedirectory, <code>false</code> otherwise.
 * @throws MalformedURLException
 */
public static boolean isValidResourcePath(String resourceDir){
  if (resourceDir == null)   return false;
  File f=new File(resourceDir);
  if (f.isAbsolute() && f.exists() && f.isDirectory())   return true;
  return false;
}",0.9648562300319488
77826,"/** 
 * Checks whether <code>filePath</code> is a file protocol if it is not a invalid URI. <p> A invalid URI contains excluded US-ASCII characters: <ul> <li>contro = <US-ASCII coded characters 00-1F and 7F hexadecimal> <li>space = <US-ASCII coded character 20 hexadecimal> <li>delims=""<"" | "">"" | ""#"" | ""%"" | <""> <li>unwise=""{"" | ""}"" | ""|"" | ""\"" | ""^"" | ""["" | ""]"" | ""`"" </ul> Details are described at the hyperlink: http://www.ietf.org/rfc/rfc2396.txt.
 * @param uri the input uri
 * @return the file path if <code>uri</code> refers to a file. Otherwisenull.
 */
private static String getLocalFileOfFailedURI(String uri){
  URL objURI=null;
  try {
    objURI=new URL(uri);
    if (!objURI.getProtocol().equalsIgnoreCase(FILE_SCHEMA))     return null;
    return objURI.getAuthority() == null ? objURI.getPath() : objURI.getAuthority() + objURI.getPath();
  }
 catch (  MalformedURLException e) {
    File file=new File(uri);
    if (uri.startsWith(FILE_SCHEMA))     return file.toURI().getSchemeSpecificPart();
    return uri;
  }
}","/** 
 * Checks whether <code>filePath</code> is a file protocol if it is not a invalid URI. <p> A invalid URI contains excluded US-ASCII characters: <ul> <li>contro = <US-ASCII coded characters 00-1F and 7F hexadecimal> <li>space = <US-ASCII coded character 20 hexadecimal> <li>delims=""<"" | "">"" | ""#"" | ""%"" | <""> <li>unwise=""{"" | ""}"" | ""|"" | ""\"" | ""^"" | ""["" | ""]"" | ""`"" </ul> Details are described at the hyperlink: http://www.ietf.org/rfc/rfc2396.txt.
 * @param uri the input uri
 * @return the file path if <code>uri</code> refers to a file. Otherwisenull.
 */
private static String getLocalFileOfFailedURI(String uri){
  URL objURI=null;
  try {
    objURI=new URL(uri);
    if (objURI.getProtocol().equalsIgnoreCase(FILE_SCHEMA)) {
      return objURI.getAuthority() == null ? objURI.getPath() : objURI.getAuthority() + objURI.getPath();
    }
 else     if (objURI.getProtocol().equalsIgnoreCase(JAR_SCHEMA))     return uri;
 else     return null;
  }
 catch (  MalformedURLException e) {
    File file=new File(uri);
    if (uri.contains(JAR_EXTENTION))     return JAR_SCHEMA + ""String_Node_Str"" + FILE_SCHEMA+ ""String_Node_Str""+ file.getAbsolutePath();
    if (uri.startsWith(FILE_SCHEMA))     return file.toURI().getSchemeSpecificPart();
    return uri;
  }
}",0.7690300130491518
77827,"/** 
 * Converts a filename to a valid URL. The filename can include directory information, either relative or absolute directory. And the file should be on the local disk.
 * @param filePath the file name
 * @return a valid URL
 */
public static URL getDirectory(String filePath){
  URL url=null;
  try {
    url=new URL(convertFileNameToURLString(filePath));
  }
 catch (  MalformedURLException e) {
  }
  if (url == null)   return getFileDirectory(filePath);
  if (FILE_SCHEMA.equalsIgnoreCase(url.getProtocol()))   return getFileDirectory(url.getPath());
  return getNetDirectory(url);
}","/** 
 * Converts a filename to a valid URL. The filename can include directory information, either relative or absolute directory. And the file should be on the local disk.
 * @param filePath the file name
 * @return a valid URL
 */
public static URL getDirectory(String filePath){
  if (filePath == null)   return null;
  URL url=null;
  try {
    url=new URL(convertFileNameToURLString(filePath));
  }
 catch (  MalformedURLException e) {
    if (filePath.contains(JAR_EXTENTION))     url=getJarDirectory(filePath);
 else     url=getFileDirectory(filePath);
    return url;
  }
  if (FILE_SCHEMA.equalsIgnoreCase(url.getProtocol()))   return getFileDirectory(url.getPath());
 else   if (JAR_SCHEMA.equalsIgnoreCase(url.getProtocol()) && !url.getPath().toLowerCase().startsWith(HTTP_SCHEMA))   return getJarDirectory(url.getPath());
  return getNetDirectory(url);
}",0.7343857240905971
77828,"/** 
 * Checks <code>uri</code> is file path. If <code>uri</code> is an absolute uri and refers to a file, removes ""file://"" and returns the file path. If <code>uri</code> is relative uri and refers to a file, returns the <code>uri</code>. For other cases, returns null. <p> For examples, following uri are supported: <ul> <li>file://C:/disk/test/data.file <li>/C:/disk/test/data.file <li>/usr/local/disk/test/data.file <li>C:\\disk\\test/data.file <li>C:/disk/test/data.file <li>./test/data.file </ul>
 * @param uri the input uri
 * @return the file path if <code>uri</code> refers to a file. Otherwisenull.
 */
public static String getLocalPath(String uri){
  if (uri == null)   return null;
  URI objURI=null;
  try {
    objURI=new URI(uri);
  }
 catch (  URISyntaxException e) {
    return getLocalFileOfFailedURI(uri);
  }
  if (objURI.getScheme() == null) {
    if (isFileProtocol(uri))     return uri;
  }
 else   if (objURI.getScheme().equalsIgnoreCase(FILE_SCHEMA)) {
    return objURI.getSchemeSpecificPart();
  }
 else {
    if (objURI.getScheme().length() == 1) {
      return uri;
    }
  }
  return null;
}","/** 
 * Checks <code>uri</code> is file path. If <code>uri</code> is an absolute uri and refers to a file, removes ""file://"" and returns the file path. If <code>uri</code> is relative uri and refers to a file, returns the <code>uri</code>. For other cases, returns null. <p> For examples, following uri are supported: <ul> <li>file://C:/disk/test/data.file <li>/C:/disk/test/data.file <li>/usr/local/disk/test/data.file <li>C:\\disk\\test/data.file <li>C:/disk/test/data.file <li>./test/data.file </ul>
 * @param uri the input uri
 * @return the file path if <code>uri</code> refers to a file. Otherwisenull.
 */
public static String getLocalPath(String uri){
  if (uri == null)   return null;
  URI objURI=null;
  try {
    objURI=new URI(uri);
  }
 catch (  URISyntaxException e) {
    return getLocalFileOfFailedURI(uri);
  }
  if (objURI.getScheme() == null) {
    if (isFileProtocol(uri))     return uri;
  }
 else   if (objURI.getScheme().equalsIgnoreCase(FILE_SCHEMA)) {
    return objURI.getSchemeSpecificPart();
  }
 else {
    if (objURI.getScheme().length() == 1 || objURI.getScheme().equalsIgnoreCase(JAR_SCHEMA)) {
      return uri;
    }
  }
  return null;
}",0.9777583951155692
77829,"/** 
 * @return
 * @throws DataException
 */
private boolean hasOutputParams(){
  Collection collection=null;
  try {
    collection=getParameterMetaData();
  }
 catch (  DataException e) {
    return false;
  }
  boolean hasOutputParam=false;
  if (collection != null) {
    Iterator it=collection.iterator();
    while (it.hasNext()) {
      IParameterMetaData metaData=(IParameterMetaData)it.next();
      if (metaData.isOutputMode().booleanValue()) {
        hasOutputParam=true;
        break;
      }
    }
  }
  return hasOutputParam;
}","/** 
 * whether there is output paramters in data set design
 * @return
 * @throws DataException
 */
private boolean hasOutputParams(){
  boolean hasOutputParam=false;
  if (this.parameterHints != null) {
    Iterator it=this.parameterHints.iterator();
    while (it.hasNext()) {
      ParameterHint hint=(ParameterHint)it.next();
      if (hint.isOutputMode()) {
        hasOutputParam=true;
        break;
      }
    }
  }
  return hasOutputParam;
}",0.4060301507537688
77830,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  this.format=ParameterAccessor.getFormat(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(ResourceConstants.BIRT_VIEWER_TITLE);
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.__initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  this.format=ParameterAccessor.getFormat(request);
  this.isToc=ParameterAccessor.isToc(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(ResourceConstants.BIRT_VIEWER_TITLE);
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.__initParameters(request);
}",0.9784304726938964
77831,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=valueObj.toString();
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
    if (!ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format) && action.getBookmark() != null) {
      try {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE)));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=valueObj.toString();
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
    if (!ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(format) && action.getBookmark() != null) {
      try {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE)));
      }
 catch (      UnsupportedEncodingException e) {
      }
      if (!action.isBookmark()) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor._TOC,String.valueOf(true)));
      }
    }
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  return link.toString();
}",0.9721658986175116
77832,"protected void prepareParameters() throws ReportServiceException, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __bookmark=getBookmark(operation.getOprand(),__bean);
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    InputOptions options=new InputOptions();
    options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
    __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
    if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
      AxisFault fault=new AxisFault();
      fault.setFaultReason(BirtResources.getFormattedString(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{__bookmark}));
      throw fault;
    }
    __useBookmark=true;
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getString(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}","protected void prepareParameters() throws ReportServiceException, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  InputOptions options=new InputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __bookmark=getBookmark(operation.getOprand(),__bean);
  if (isToc(operation.getOprand(),__bean)) {
    __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
    __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
    if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
      AxisFault fault=new AxisFault();
      fault.setFaultReason(BirtResources.getFormattedString(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{__bookmark}));
      throw fault;
    }
    __useBookmark=true;
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getString(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}",0.935501066098081
77833,"/** 
 * @param dataSetHandle
 * @param rsMeta
 * @return
 * @throws BirtException
 */
private boolean needsSetCachedMetaData(DataSetHandle dataSetHandle,IResultMetaData rsMeta) throws BirtException {
  if (dataSetHandle.getCachedMetaDataHandle() == null || rsMeta == null || rsMeta.getColumnCount() == 0)   return true;
  List list=new ArrayList();
  for (Iterator iter=dataSetHandle.getCachedMetaDataHandle().getResultSet().iterator(); iter.hasNext(); ) {
    list.add(iter.next());
  }
  if (list.size() != rsMeta.getColumnCount())   return true;
  for (int i=1; i <= rsMeta.getColumnCount(); i++) {
    ResultSetColumnHandle handle=(ResultSetColumnHandle)list.get(i - 1);
    if (!handle.getColumnName().equals(getColumnName(rsMeta,i)) || !handle.getDataType().equals(toModelDataType(rsMeta.getColumnType(i))))     return true;
  }
  return false;
}","/** 
 * @param dataSetHandle
 * @param rsMeta
 * @return
 * @throws BirtException
 */
private boolean needsSetCachedMetaData(DataSetHandle dataSetHandle,IResultMetaData rsMeta) throws BirtException {
  if (dataSetHandle.getCachedMetaDataHandle() == null || rsMeta == null || rsMeta.getColumnCount() == 0)   return true;
  List list=new ArrayList();
  for (Iterator iter=dataSetHandle.getCachedMetaDataHandle().getResultSet().iterator(); iter.hasNext(); ) {
    list.add(iter.next());
  }
  if (list.size() != rsMeta.getColumnCount())   return true;
  for (int i=1; i <= rsMeta.getColumnCount(); i++) {
    ResultSetColumnHandle handle=(ResultSetColumnHandle)list.get(i - 1);
    if (handle.getColumnName() == null || !handle.getColumnName().equals(getColumnName(rsMeta,i)) || !handle.getDataType().equals(toModelDataType(rsMeta.getColumnType(i))))     return true;
  }
  return false;
}",0.9804372842347526
77834,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  boolean useResultHints=needsUseResultHint(dataSetHandle);
  return new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,useResultHints).executeQuery(query).getResultMetaData();
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  IResultMetaData metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,false).executeQuery(query).getResultMetaData();
  if (needsUseResultHint(dataSetHandle,metaData)) {
    metaData=new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,true).executeQuery(query).getResultMetaData();
  }
  return metaData;
}",0.73224043715847
77835,"/** 
 * whether need to use result hint
 * @param dataSetHandle
 * @return
 */
private boolean needsUseResultHint(DataSetHandle dataSetHandle){
  if (dataSetHandle instanceof ScriptDataSetHandle)   return true;
 else   if (dataSetHandle instanceof JointDataSetHandle) {
    List dataSets=((JointDataSetHandle)dataSetHandle).getDataSetNames();
    for (int i=0; i < dataSets.size(); i++) {
      DataSetHandle dsHandle=((JointDataSetHandle)dataSetHandle).getModuleHandle().findDataSet(dataSets.get(i).toString());
      if (dsHandle != null && dsHandle instanceof ScriptDataSetHandle) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Whether need to use resultHint, which stands for resultSetHint, columnHint or both
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
private boolean needsUseResultHint(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  int columnCount=0;
  boolean hasResultSetHint=false;
  boolean hasColumnHint=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator().hasNext();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  if (metaData != null)   columnCount=metaData.getColumnCount();
  for (int i=0; i < columnCount; i++) {
    String columnName=metaData.getColumnName(i + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
    uniqueColumnNameSet.add(uniqueColumnName);
    if (!uniqueColumnName.equals(columnName)) {
      updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      if (hasResultSetHint != true)       hasResultSetHint=true;
    }
  }
  return hasResultSetHint || hasColumnHint;
}",0.2234042553191489
77836,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
      }
    }
    if (dataSetHandle instanceof ScriptDataSetHandle == false)     dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_PROP).clearValue();
  }
  if (e != null)   throw e;
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}",0.9287833827893176
77837,"public Collection getSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    if (parameter.getDataSetName() != null) {
      return getChoicesFromParameterQuery(parameter);
    }
 else     if (isCascadingParameter(parameter)) {
      Object[] parameterValuesAhead=getParameterValuesAhead(parameter);
      return getChoicesFromParameterGroup(parameter,parameterValuesAhead);
    }
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label != null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(true,parameter.getPattern(),ULocale.forLocale(locale)));
    return choices;
  }
  return Collections.EMPTY_LIST;
}","public Collection getSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    if (parameter.getDataSetName() != null) {
      return getChoicesFromParameterQuery(parameter);
    }
 else     if (isCascadingParameter(parameter)) {
      Object[] parameterValuesAhead=getParameterValuesAhead(parameter);
      return getChoicesFromParameterGroup(parameter,parameterValuesAhead);
    }
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label == null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(true,parameter.getPattern(),ULocale.forLocale(locale)));
    return choices;
  }
  return Collections.EMPTY_LIST;
}",0.9993573264781492
77838,"/** 
 * Return the relative path for the given <code>resource</code> according to <code>base</code>. Only handle file system. Network protocols such as http, ftp, etc. are not supported. <p> The <code>base</code> value should be directory ONLY and does NOT contain file name and the format can be: <ul> <li>./../hello/ <li>C:\\hello\..\ <li>/C:/../hello/ </ul> The spearator in the return path is platform-depedent.
 * @param base the base directory
 * @param relativePath the relative path
 * @return the absolute path
 */
public static String resolveAbsolutePath(String base,String relativePath){
  String baseDir=getLocalPath(base);
  String relativeDir=getLocalPath(relativePath);
  if (baseDir == null || relativeDir == null)   return relativePath;
  File baseFile=new File(baseDir);
  File resourceFile=new File(baseFile,relativeDir);
  return resourceFile.getPath();
}","/** 
 * Return the relative path for the given <code>resource</code> according to <code>base</code>. Only handle file system. Network protocols such as http, ftp, etc. are not supported. <p> The <code>base</code> value should be directory ONLY and does NOT contain file name and the format can be: <ul> <li>./../hello/ <li>C:\\hello\..\ <li>/C:/../hello/ </ul> The spearator in the return path is platform-depedent.
 * @param base the base directory
 * @param relativePath the relative path
 * @return the absolute path
 */
public static String resolveAbsolutePath(String base,String relativePath){
  File file=new File(relativePath);
  if (file.isAbsolute())   return relativePath;
  String baseDir=getLocalPath(base);
  String relativeDir=getLocalPath(relativePath);
  if (baseDir == null || relativeDir == null)   return relativePath;
  File baseFile=new File(baseDir);
  File resourceFile=new File(baseFile,relativeDir);
  return resourceFile.getPath();
}",0.9541984732824428
77839,"private static ScriptExpression newJSExpression(String expr){
  return expr == null ? null : new ScriptExpression(expr);
}","/** 
 * @param expr
 * @return
 */
private static ScriptExpression newJSExpression(String expr){
  return expr == null ? null : new ScriptExpression(expr);
}",0.8745519713261649
77840,"protected void prepareResponse() throws ReportServiceException, RemoteException {
  TOC toc=new TOC();
  List children=__node.getChildren();
  if (children != null && children.size() > 0) {
    TOC[] childTOCNodes=new TOC[children.size()];
    for (int i=0; i < children.size(); i++) {
      ToC child=(ToC)children.get(i);
      childTOCNodes[i]=new TOC();
      childTOCNodes[i].setId(child.getID());
      childTOCNodes[i].setDisplayName(ParameterAccessor.htmlEncode(child.getDisplayName()));
      childTOCNodes[i].setBookmark(child.getBookmark());
      childTOCNodes[i].setIsLeaf(new Boolean(child.getChildren() == null || child.getChildren().size() <= 0));
    }
    toc.setChild(childTOCNodes);
  }
  Data data=new Data();
  data.setTOC(toc);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}","protected void prepareResponse() throws ReportServiceException, RemoteException {
  TOC toc=new TOC();
  List children=__node.getChildren();
  if (children != null && children.size() > 0) {
    TOC[] childTOCNodes=new TOC[children.size()];
    for (int i=0; i < children.size(); i++) {
      ToC child=(ToC)children.get(i);
      childTOCNodes[i]=new TOC();
      childTOCNodes[i].setId(child.getID());
      childTOCNodes[i].setDisplayName(child.getDisplayName());
      childTOCNodes[i].setBookmark(child.getBookmark());
      childTOCNodes[i].setIsLeaf(new Boolean(child.getChildren() == null || child.getChildren().size() <= 0));
    }
    toc.setChild(childTOCNodes);
  }
  Data data=new Data();
  data.setTOC(toc);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}",0.984375
77841,"public void startElement(String uri,String name,String qName,Attributes atts){
  if (this.stopCurrentThread)   throw new ThreadStopException();
  String elementName=getElementName(uri,qName,name);
  String parentPath=pathHolder.getPath();
  if (this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName) == null) {
    this.currentElementRecoder.put(parentPath + UtilConstants.XPATH_SLASH + elementName,new Integer(1));
  }
 else {
    this.currentElementRecoder.put(parentPath + UtilConstants.XPATH_SLASH + elementName,new Integer(((Integer)this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName)).intValue() + 1));
  }
  pathHolder.push(elementName + ""String_Node_Str"" + ((Integer)this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName)).intValue()+ ""String_Node_Str"");
  spConsumer.detectNewRow(pathHolder.getPath(),true);
  for (int i=0; i < atts.getLength(); i++) {
    spConsumer.manipulateData(getAttributePath(atts,i),atts.getValue(i));
  }
}","public void startElement(String uri,String name,String qName,Attributes atts){
  if (this.stopCurrentThread)   throw new ThreadStopException();
  String elementName=getElementName(uri,qName,name);
  String parentPath=pathHolder.getPath();
  if (this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName) == null) {
    this.currentElementRecoder.put(parentPath + UtilConstants.XPATH_SLASH + elementName,new Integer(1));
  }
 else {
    this.currentElementRecoder.put(parentPath + UtilConstants.XPATH_SLASH + elementName,new Integer(((Integer)this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName)).intValue() + 1));
  }
  pathHolder.push(elementName + ""String_Node_Str"" + ((Integer)this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName)).intValue()+ ""String_Node_Str"");
  spConsumer.detectNewRow(pathHolder.getPath(),true);
  for (int i=0; i < atts.getLength(); i++) {
    spConsumer.manipulateData(getAttributePath(atts,i),atts.getValue(i));
    spConsumer.detectNewRow(getAttributePath(atts,i),true);
  }
}",0.9718045112781954
77842,"public void manipulateData(String path,String value){
  String treamedPath=path.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  this.insertNode(treamedPath);
}","public void manipulateData(String path,String value){
}",0.4910714285714285
77843,"/** 
 * Boolean -> BigDecimal true 	-> 1 others 	-> 0  Date -> BigDecimal Date.getTime(); String -> BigDecimal new BigDecimal(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static BigDecimal toBigDecimal(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Integer) {
    String str=((Integer)source).toString();
    return new BigDecimal(str);
  }
 else   if (source instanceof BigDecimal) {
    return (BigDecimal)source;
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new BigDecimal(1d);
    return new BigDecimal(0d);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new BigDecimal(longValue);
  }
 else   if (source instanceof Double) {
    double doubleValue=((Double)source).doubleValue();
    return new BigDecimal(doubleValue);
  }
 else   if (source instanceof String) {
    try {
      return new BigDecimal((String)source);
    }
 catch (    NumberFormatException e) {
      throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
    }
  }
 else {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
}","/** 
 * Boolean -> BigDecimal true 	-> 1 others 	-> 0  Date -> BigDecimal Date.getTime(); String -> BigDecimal new BigDecimal(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static BigDecimal toBigDecimal(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Integer) {
    String str=((Integer)source).toString();
    return new BigDecimal(str);
  }
 else   if (source instanceof BigDecimal) {
    return (BigDecimal)source;
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new BigDecimal(1d);
    return new BigDecimal(0d);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new BigDecimal(longValue);
  }
 else   if (source instanceof Double) {
    Double d2=(Double)source;
    if (d2.isNaN() || d2.isInfinite()) {
      throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{d2.isNaN() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str""},resourceBundle);
    }
    return new BigDecimal(d2.doubleValue());
  }
 else   if (source instanceof String) {
    try {
      return new BigDecimal((String)source);
    }
 catch (    NumberFormatException e) {
      throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
    }
  }
 else {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
}",0.7721345229924502
77844,"/** 
 * put sqlText to char array
 * @param sqlTxt
 * @param escaper
 * @return
 * @throws OdaException
 */
private char[] getParameterDefinitionChars(String sqlTxt,char escaper) throws OdaException {
  char[] temp=sqlTxt.toCharArray();
  int startPoint=-1;
  int endPoint=-1;
  boolean validBracket=true;
  for (int i=temp.length - 1; i >= 0; i--) {
    if (i > 0 && temp[i - 1] == escaper)     continue;
    if (validBracket) {
      if (')' == temp[i] && endPoint == -1) {
        endPoint=i;
      }
      if ('(' == temp[i]) {
        startPoint=i;
        break;
      }
    }
    if ('""' == temp[i]) {
      validBracket=!validBracket;
    }
  }
  if (startPoint >= endPoint || startPoint == -1)   throw new OdaException(""String_Node_Str"");
  return sqlTxt.substring(startPoint,endPoint).toCharArray();
}","/** 
 * put sqlText to char array
 * @param sqlTxt
 * @param escaper
 * @return
 * @throws OdaException
 */
private char[] getParameterDefinitionChars(String sqlTxt,char escaper) throws OdaException {
  char[] temp=sqlTxt.toCharArray();
  int startPoint=-1;
  int endPoint=-1;
  boolean validBracket=true;
  for (int i=temp.length - 1; i >= 0; i--) {
    if (i > 0 && temp[i - 1] == escaper)     continue;
    if (validBracket) {
      if (')' == temp[i] && endPoint == -1) {
        endPoint=i;
      }
      if ('(' == temp[i]) {
        startPoint=i;
        break;
      }
    }
    if ('""' == temp[i]) {
      validBracket=!validBracket;
    }
  }
  if (startPoint == -1 && endPoint == -1)   return new char[0];
 else   if (startPoint >= endPoint || startPoint == -1)   throw new OdaException(""String_Node_Str"");
  return sqlTxt.substring(startPoint,endPoint).toCharArray();
}",0.958628841607565
77845,"/** 
 * Indicate whether a new row should started according to the given xPath expression. A new row would only started when the given xPath matches the root path of certain table.
 * @param path
 */
public void detectNewRow(String path);","/** 
 * Indicate whether a new row should started according to the given xPath expression. A new row would only started when the given xPath matches the root path of certain table.
 * @param path
 * @param start
 */
public void detectNewRow(String path,boolean start);",0.9407114624505928
77846,"/** 
 * @param index
 * @param name
 * @param type
 * @param path
 * @param originalPath
 * @throws OdaException
 */
public ColumnInfo(int index,String name,String type,String rootPath,String relativePath,String originalPath) throws OdaException {
  this.index=index;
  this.name=name;
  this.type=type;
  if (!DataTypes.isValidType(type))   throw new OdaException(Messages.getString(""String_Node_Str""));
  this.path=fixTrailingAttr(SaxParserUtil.processParentAxis(combineColumnPath(rootPath,relativePath)));
  this.originalPath=originalPath;
  generateBackRefNumber(rootPath,originalPath);
}","/** 
 * @param index
 * @param name
 * @param type
 * @param path
 * @param originalPath
 * @throws OdaException
 */
public ColumnInfo(int index,String name,String type,String rootPath,String relativePath,String originalPath) throws OdaException {
  this.index=index;
  this.name=name;
  this.type=type;
  if (!DataTypes.isValidType(type))   throw new OdaException(Messages.getString(""String_Node_Str""));
  this.path=fixTrailingAttr(SaxParserUtil.processParentAxis(combineColumnPath(rootPath,relativePath)));
  this.originalPath=originalPath;
  this.initBackAndForwardRefNumbers();
}",0.9565957446808512
77847,"/** 
 * @param originalPath
 */
private void generateBackRefNumber(String rootPath,String originalPath){
  if (this.originalPath.matches(""String_Node_Str"")) {
    String[] originalPathFrags=originalPath.split(UtilConstants.XPATH_SLASH);
    int lastTwoDotAbbrevationPosition=0;
    int numberOfConcretePathFragsBefore2DotAbb=0;
    for (int i=0; i < originalPathFrags.length; i++) {
      if (originalPathFrags[i].equals(""String_Node_Str""))       lastTwoDotAbbrevationPosition=i;
    }
    for (int i=0; i < lastTwoDotAbbrevationPosition; i++) {
      if (!originalPathFrags[i].equals(""String_Node_Str""))       numberOfConcretePathFragsBefore2DotAbb++;
    }
    int numberOf2DotAbb=lastTwoDotAbbrevationPosition - numberOfConcretePathFragsBefore2DotAbb + 1;
    backRefNumber=numberOf2DotAbb - numberOfConcretePathFragsBefore2DotAbb;
    if (backRefNumber < 0) {
      backRefNumber=0;
      return;
    }
  }
 else {
    backRefNumber=0;
  }
}","/** 
 * @param originalPath
 */
private void generateBackRefNumber(String originalPath){
  if (this.originalPath.matches(""String_Node_Str"")) {
    String[] originalPathFrags=originalPath.split(UtilConstants.XPATH_SLASH);
    int lastTwoDotAbbrevationPosition=0;
    int numberOfConcretePathFragsBefore2DotAbb=0;
    for (int i=0; i < originalPathFrags.length; i++) {
      if (originalPathFrags[i].equals(""String_Node_Str""))       lastTwoDotAbbrevationPosition=i;
    }
    for (int i=0; i < lastTwoDotAbbrevationPosition; i++) {
      if (!originalPathFrags[i].equals(""String_Node_Str""))       numberOfConcretePathFragsBefore2DotAbb++;
    }
    int numberOf2DotAbb=lastTwoDotAbbrevationPosition - numberOfConcretePathFragsBefore2DotAbb + 1;
    backRefNumber=numberOf2DotAbb - numberOfConcretePathFragsBefore2DotAbb;
    if (backRefNumber < 0) {
      backRefNumber=0;
      return;
    }
  }
 else {
    backRefNumber=0;
  }
}",0.991462113127001
77848,"public void startElement(String uri,String name,String qName,Attributes atts){
  if (this.stopCurrentThread)   throw new ThreadStopException();
  String elementName=getElementName(uri,qName,name);
  String parentPath=pathHolder.getPath();
  if (this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName) == null) {
    this.currentElementRecoder.put(parentPath + UtilConstants.XPATH_SLASH + elementName,new Integer(1));
  }
 else {
    this.currentElementRecoder.put(parentPath + UtilConstants.XPATH_SLASH + elementName,new Integer(((Integer)this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName)).intValue() + 1));
  }
  pathHolder.push(elementName + ""String_Node_Str"" + ((Integer)this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName)).intValue()+ ""String_Node_Str"");
  for (int i=0; i < atts.getLength(); i++) {
    spConsumer.manipulateData(getAttributePath(atts,i),atts.getValue(i));
    spConsumer.detectNewRow(getAttributePath(atts,i));
  }
}","public void startElement(String uri,String name,String qName,Attributes atts){
  if (this.stopCurrentThread)   throw new ThreadStopException();
  String elementName=getElementName(uri,qName,name);
  String parentPath=pathHolder.getPath();
  if (this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName) == null) {
    this.currentElementRecoder.put(parentPath + UtilConstants.XPATH_SLASH + elementName,new Integer(1));
  }
 else {
    this.currentElementRecoder.put(parentPath + UtilConstants.XPATH_SLASH + elementName,new Integer(((Integer)this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName)).intValue() + 1));
  }
  pathHolder.push(elementName + ""String_Node_Str"" + ((Integer)this.currentElementRecoder.get(parentPath + UtilConstants.XPATH_SLASH + elementName)).intValue()+ ""String_Node_Str"");
  spConsumer.detectNewRow(pathHolder.getPath(),true);
  for (int i=0; i < atts.getLength(); i++) {
    spConsumer.manipulateData(getAttributePath(atts,i),atts.getValue(i));
  }
}",0.9473175447075882
77849,"public void endElement(String uri,String localName,String qName) throws SAXException {
  spConsumer.manipulateData(pathHolder.getPath(),this.currentCacheValue.trim());
  this.currentCacheValue=""String_Node_Str"";
  spConsumer.detectNewRow(pathHolder.getPath());
  String path=pathHolder.getPath();
  Object[] keys=this.currentElementRecoder.keySet().toArray();
  for (int i=0; i < keys.length && path != ""String_Node_Str""; i++) {
    if (keys[i].toString().startsWith(path) && (!keys[i].toString().equals(path))) {
      this.currentElementRecoder.remove(keys[i]);
    }
  }
  pathHolder.pop();
}","public void endElement(String uri,String localName,String qName) throws SAXException {
  spConsumer.manipulateData(pathHolder.getPath(),this.currentCacheValue.trim());
  this.currentCacheValue=""String_Node_Str"";
  spConsumer.detectNewRow(pathHolder.getPath(),false);
  String path=pathHolder.getPath();
  Object[] keys=this.currentElementRecoder.keySet().toArray();
  for (int i=0; i < keys.length && path != ""String_Node_Str""; i++) {
    if (keys[i].toString().startsWith(path) && (!keys[i].toString().equals(path))) {
      this.currentElementRecoder.remove(keys[i]);
    }
  }
  pathHolder.pop();
}",0.9949832775919732
77850,"/** 
 * The method would not be used in this implementation of ISaxParserConsumer.
 */
public void detectNewRow(String path){
}","/** 
 * The method would not be used in this implementation of ISaxParserConsumer.
 */
public void detectNewRow(String path,boolean start){
}",0.9477611940298508
77851,"/** 
 * Return a dataSetRow expression text according to given row name.
 * @param rowName
 * @return
 */
public static String createDataSetRowExpression(String rowName){
  return DATASET_ROW_INDICATOR + ""String_Node_Str"" + (rowName == null ? null : rowName.trim())+ ""String_Node_Str"";
}","/** 
 * Return a dataSetRow expression text according to given row name.
 * @param rowName
 * @return
 */
public static String createDataSetRowExpression(String rowName){
  return DATASET_ROW_INDICATOR + ""String_Node_Str"" + (rowName == null ? ""String_Node_Str"" : rowName.trim())+ ""String_Node_Str"";
}",0.9642248722316864
77852,"/** 
 * Creates the page menu
 * @return the page menu
 */
protected IMenuManager createPageMenu(){
  MenuManager newMenu=new MenuManager(Messages.getString(""String_Node_Str""),""String_Node_Str"");
  newMenu.add(new Separator(PAGE_SET_GROUP));
  newMenu.add(new Separator(PAGE_SET_GROUP_END));
  newMenu.add(getAction(GEFActionConstants.ZOOM_IN));
  newMenu.add(getAction(GEFActionConstants.ZOOM_OUT));
  newMenu.add(new Separator());
  return newMenu;
}","/** 
 * Creates the page menu
 * @return the page menu
 */
protected IMenuManager createPageMenu(){
  MenuManager newMenu=new MenuManager(Messages.getString(""String_Node_Str""),""String_Node_Str"");
  newMenu.add(new Separator(PAGE_SET_GROUP));
  newMenu.add(new Separator(PAGE_SET_GROUP_END));
  newMenu.add(new Separator());
  return newMenu;
}",0.8628930817610063
77853,"/** 
 * Compile the filter expression. If the filter contains the indirect nested row reference, this is, it refers to the row object in computed columns, then replace the field of expression and recompile the filter expression
 * @param filterState
 * @param computedColumns
 * @throws DataException
 */
public void compileFilter(List filterState,IComputedColumnsState computedColumns);","/** 
 * Compile the filter expression. If the filter contains the indirect nested row reference, this is, it refers to the row object in computed columns, then replace the field of expression and recompile the filter expression
 * @param filterState
 * @param computedColumns
 * @throws DataException
 */
public void compileFilter(List filterState,IComputedColumnsState computedColumns) throws DataException ;",0.9723618090452262
77854,"public void compileFilter(List filters,IComputedColumnsState computedColumns){
}","public void compileFilter(List filters,IComputedColumnsState computedColumns) throws DataException {
  IBaseExpression baseExpression=null;
  String expression=""String_Node_Str"";
  IScriptExpression operator=null;
  FilterExpressionParser parser=new FilterExpressionParser(metaData,computedColumns);
  parser.setDataSetMode(this.isDataSetMode);
  parser.setResultSetPopulator(this.rsPopulator);
  for (int i=0; i < filters.size(); i++) {
    try {
      baseExpression=((FilterDefinition)filters.get(i)).getExpression();
      if (baseExpression instanceof IConditionalExpression) {
        IConditionalExpression condition=(IConditionalExpression)baseExpression;
        operator=condition.getExpression();
        if (operator != null) {
          expression=operator.getText();
          operator.setHandle(parser.compileFilterExpression(expression));
        }
        operator=condition.getOperand1();
        if (operator != null) {
          expression=operator.getText();
          operator.setHandle(parser.compileFilterExpression(expression));
        }
        operator=condition.getOperand2();
        if (operator != null) {
          expression=operator.getText();
          operator.setHandle(parser.compileFilterExpression(expression));
        }
      }
 else       if (baseExpression instanceof IScriptExpression) {
        operator=(IScriptExpression)baseExpression;
        if (baseExpression != null && operator != null) {
          expression=operator.getText();
          baseExpression.setHandle(parser.compileFilterExpression(expression));
        }
      }
 else {
        throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER);
      }
    }
 catch (    DataException e) {
      DataException dataException=new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,e,new Object[]{expression});
      throw dataException;
    }
  }
}",0.0815078960774325
77855,"/** 
 * @param key
 * @param checkBox
 */
protected void checkBoxChange(Button checkBox,String key){
  dirtyProperties.put(key,new Boolean(checkBox.getSelection()));
  if (CHECKBOX_ALLOW_BLANK.equals(key) || CHECKBOX_ALLOW_NULL.equals(key)) {
    if (isStatic()) {
      refreshValueTable();
    }
    updateMessageLine();
  }
}","/** 
 * @param key
 * @param checkBox
 */
protected void checkBoxChange(Button checkBox,String key){
  dirtyProperties.put(key,new Boolean(checkBox.getSelection()));
  if (CHECKBOX_ALLOW_BLANK.equals(key) || CHECKBOX_ALLOW_NULL.equals(key)) {
    if (isStatic()) {
      makeUniqueAndValid();
      refreshValueTable();
    }
    updateMessageLine();
  }
}",0.95906432748538
77856,"/** 
 * Check if the specified value is valid
 * @param value the value to check
 * @return Returns the error message if the input value is invalid,or nullif it is valid
 */
private String isValidValue(String value){
  if (canBeNull()) {
    if (value == null || value.length() == 0) {
      return null;
    }
  }
 else {
    if (value == null || value.length() == 0) {
      return ERROR_MSG_CANNOT_BE_NULL;
    }
  }
  if (canBeBlank()) {
    if (StringUtil.isBlank(value)) {
      return null;
    }
  }
 else {
    if (StringUtil.isBlank(value)) {
      return ERROR_MSG_CANNOT_BE_BLANK;
    }
  }
  try {
    if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(getSelectedDataType())) {
      DataTypeUtil.toBoolean(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType())) {
      DataTypeUtil.toBigDecimal(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      DataTypeUtil.toDate(value,ULocale.US);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
      DataTypeUtil.toDouble(value);
    }
  }
 catch (  BirtException e) {
    return ERROR_MSG_MISMATCH_DATA_TYPE;
  }
  return null;
}","/** 
 * Check if the specified value is valid
 * @param value the value to check
 * @return Returns the error message if the input value is invalid,or nullif it is valid
 */
private String isValidValue(String value){
  if (canBeNull()) {
    if (value == null || value.length() == 0) {
      return null;
    }
  }
 else {
    if (value == null || value.length() == 0) {
      return ERROR_MSG_CANNOT_BE_NULL;
    }
  }
  if (canBeBlank()) {
    if (StringUtil.isBlank(value)) {
      return null;
    }
  }
 else {
    if (StringUtil.isBlank(value)) {
      return ERROR_MSG_CANNOT_BE_BLANK;
    }
  }
  try {
    getValue(value);
  }
 catch (  BirtException e) {
    return ERROR_MSG_MISMATCH_DATA_TYPE;
  }
  return null;
}",0.7344228804902962
77857,"private boolean containValue(SelectionChoice selectedChoice,String newValue,String property){
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    SelectionChoice choice=(SelectionChoice)iter.next();
    if (!choice.equals(selectedChoice)) {
      String value=null;
      if (COLUMN_VALUE.equals(property)) {
        value=choice.getValue();
      }
 else       if (COLUMN_DISPLAY_TEXT.equals(property)) {
        value=choice.getLabel();
        if (value == null) {
          value=choice.getValue();
        }
        if (value == null) {
          value=LABEL_NULL;
        }
      }
      if (!(value == null ^ newValue == null)) {
        if (newValue == null) {
          return true;
        }
        if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType())) {
          try {
            if (DataTypeUtil.toBigDecimal(value).compareTo(DataTypeUtil.toBigDecimal(newValue)) == 0) {
              return true;
            }
          }
 catch (          BirtException e) {
          }
        }
 else         if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
          try {
            if (DataTypeUtil.toDouble(value).compareTo(DataTypeUtil.toDouble(newValue)) == 0) {
              return true;
            }
          }
 catch (          BirtException e) {
          }
        }
 else {
          if (value.equals(newValue)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}","private boolean containValue(SelectionChoice selectedChoice,String newValue,String property){
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    SelectionChoice choice=(SelectionChoice)iter.next();
    if (choice != selectedChoice) {
      String value=null;
      if (COLUMN_VALUE.equals(property)) {
        value=choice.getValue();
      }
 else       if (COLUMN_DISPLAY_TEXT.equals(property)) {
        value=choice.getLabel();
        if (value == null) {
          value=choice.getValue();
        }
        if (value == null) {
          value=LABEL_NULL;
        }
      }
      if (isEqual(value,newValue)) {
        return true;
      }
    }
  }
  return false;
}",0.5591893136803316
77858,"public String getColumnText(Object element,int columnIndex){
  SelectionChoice choice=((SelectionChoice)element);
  final int valueIndex=valueTable.getColumnProperties().length - 2;
  String text=null;
  if (valueTable.getColumnProperties().length == 4 && columnIndex == 1) {
    if (isDefaultChoice(choice)) {
      text=FLAG_DEFAULT;
    }
  }
 else   if (columnIndex == valueIndex) {
    if (choice == dummyChoice) {
      text=INPUT_PROPMT;
    }
 else {
      text=choice.getValue();
    }
  }
 else   if (columnIndex == valueIndex + 1) {
    text=choice.getLabel();
    if (text == null) {
      text=format(choice.getValue());
    }
  }
  if (text == null) {
    text=""String_Node_Str"";
  }
  return text;
}","public String getColumnText(Object element,int columnIndex){
  SelectionChoice choice=((SelectionChoice)element);
  final int valueIndex=valueTable.getColumnProperties().length - 2;
  String text=null;
  if (valueTable.getColumnProperties().length == 4 && columnIndex == 1) {
    if (isDefaultChoice(choice)) {
      text=FLAG_DEFAULT;
    }
  }
 else   if (columnIndex == valueIndex) {
    if (choice == dummyChoice) {
      text=INPUT_PROPMT;
    }
 else {
      text=choice.getValue();
    }
  }
 else   if (columnIndex == valueIndex + 1) {
    if (choice != dummyChoice) {
      text=choice.getLabel();
      if (text == null) {
        text=format(choice.getValue());
      }
    }
  }
  if (text == null) {
    text=""String_Node_Str"";
  }
  return text;
}",0.9410169491525424
77859,"private boolean isDefaultChoice(SelectionChoice choice){
  String choiceValue=choice.getValue();
  String defaultValue=convertToStandardFormat(this.defaultValue);
  return (choice != dummyChoice && ((canBeNull() && choiceValue == null && defaultValue == null) || (choiceValue != null && choiceValue.equals(defaultValue))));
}","private boolean isDefaultChoice(SelectionChoice choice){
  String choiceValue=choice.getValue();
  String defaultValue=convertToStandardFormat(this.defaultValue);
  if (choice != dummyChoice) {
    if (canBeNull() && choiceValue == null && defaultValue == null) {
      return true;
    }
    return choiceValue != null && isEqual(choiceValue,defaultValue);
  }
  return false;
}",0.7954545454545454
77860,"public Object getValue(Object element,String property){
  SelectionChoice choice=((SelectionChoice)element);
  if (choice == dummyChoice) {
    return ""String_Node_Str"";
  }
  String value=null;
  if (COLUMN_VALUE.equals(property)) {
    value=choice.getValue();
  }
 else   if (COLUMN_DISPLAY_TEXT.equals(property)) {
    value=choice.getLabel();
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  return value;
}","private Object getValue(String value) throws BirtException {
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(getSelectedDataType())) {
    return DataTypeUtil.toBoolean(value);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(getSelectedDataType())) {
    return DataTypeUtil.toBigDecimal(value);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
    return DataTypeUtil.toDate(value,ULocale.US);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(getSelectedDataType())) {
    return DataTypeUtil.toDouble(value);
  }
  return value;
}",0.1373307543520309
77861,"/** 
 * @param computedCols
 * @return
 */
private List getRealComputedColumn(List computedCols){
  if (computedCols == null)   return null;
  List list=new ArrayList();
  for (int i=0; i < computedCols.size(); i++) {
    IComputedColumn cc=(IComputedColumn)computedCols.get(0);
    if (cc.getName().matches(""String_Node_Str"") || cc.getName().matches(""String_Node_Str"") || cc.getName().matches(""String_Node_Str""))     continue;
 else     list.add(cc);
  }
  return list;
}","/** 
 * @param computedCols
 * @return
 */
private List getRealComputedColumn(List computedCols){
  if (computedCols == null)   return null;
  List list=new ArrayList();
  for (int i=0; i < computedCols.size(); i++) {
    IComputedColumn cc=(IComputedColumn)computedCols.get(i);
    if (cc.getName().matches(""String_Node_Str"") || cc.getName().matches(""String_Node_Str"") || cc.getName().matches(""String_Node_Str""))     continue;
 else     list.add(cc);
  }
  return list;
}",0.9978813559322034
77862,"/** 
 * This method returnt <code>true</code> in following condition: <p> 1. The multi selected elements are same type. <p> 2. And the multi selected elements have extends. <p> 3. If any of the given elements has local properties. <p>
 * @return <code>true</code> if the conditions is met.
 */
public final boolean hasLocalPropertiesForExtendedElements(){
  if (!isSameType())   return false;
  if (!isExtendedElements())   return false;
  List elements=getElements();
  for (Iterator iter=elements.iterator(); iter.hasNext(); ) {
    DesignElementHandle elementHandle=(DesignElementHandle)iter.next();
    Iterator propIter=elementHandle.getPropertyIterator();
    while (propIter.hasNext()) {
      PropertyHandle propertyHandle=(PropertyHandle)propIter.next();
      String name=propertyHandle.getDefn().getName();
      if (IDesignElementModel.EXTENDS_PROP.equals(name))       continue;
      if (elementHandle.getElement().getLocalProperty(elementHandle.getModule(),name) != null)       return true;
    }
  }
  return false;
}","/** 
 * This method returnt <code>true</code> in following condition: <p> 1. The multi selected elements are same type. <p> 2. And the multi selected elements have extends. <p> 3. If any of the given elements has local properties. <p>
 * @return <code>true</code> if the conditions is met.
 */
public final boolean hasLocalPropertiesForExtendedElements(){
  if (!isSameType())   return false;
  if (!allExtendedElements())   return false;
  List elements=getElements();
  for (Iterator iter=elements.iterator(); iter.hasNext(); ) {
    DesignElementHandle elementHandle=(DesignElementHandle)iter.next();
    Iterator propIter=elementHandle.getPropertyIterator();
    while (propIter.hasNext()) {
      PropertyHandle propertyHandle=(PropertyHandle)propIter.next();
      String name=propertyHandle.getDefn().getName();
      if ((IDesignElementModel.NAME_PROP.equals(name)) || (IDesignElementModel.EXTENDS_PROP.equals(name)))       continue;
      if (elementHandle.getElement().getLocalProperty(elementHandle.getModule(),name) != null)       return true;
    }
  }
  return false;
}",0.9739952718676124
77863,"public boolean isExtendedElements(){
  if (elements.isEmpty())   return false;
  for (Iterator iter=elements.iterator(); iter.hasNext(); ) {
    Object next=iter.next();
    if (!(next instanceof DesignElementHandle))     return false;
    if (((DesignElementHandle)next).getExtends() == null)     return false;
  }
  return true;
}","public boolean isExtendedElements(){
  if (elements.isEmpty())   return false;
  for (Iterator iter=elements.iterator(); iter.hasNext(); ) {
    Object next=iter.next();
    if (!(next instanceof DesignElementHandle))     return false;
    DesignElementHandle designHandle=(DesignElementHandle)next;
    if (designHandle.getExtends() == null)     return false;
  }
  return true;
}",0.8976157082748948
77864,"/** 
 * Removes the parameter binding for the parameter with the given parameter name. The parameter binding is defined in clients of the data set in which this handle exists.
 * @param paramName name of the parameter
 * @throws PropertyValueException if error occurs when removing parameter binding.
 */
private void removeParamBindingsFor(String paramName) throws PropertyValueException {
  if (paramName == null)   return;
  Iterator iter=getElementHandle().clientsIterator();
  while (iter.hasNext()) {
    DesignElementHandle client=(DesignElementHandle)iter.next();
    PropertyHandle paramBindingsPropHandle=client.getPropertyHandle(ReportItem.PARAM_BINDINGS_PROP);
    removeParamBindingFor(paramBindingsPropHandle,paramName);
    PropertyHandle actionPropHandle=client.getPropertyHandle(ImageItem.ACTION_PROP);
    if (actionPropHandle != null) {
      Action action=(Action)actionPropHandle.getValue();
      ActionHandle actionHandle=(ActionHandle)action.getHandle(actionPropHandle);
      MemberHandle paramBindingsMemberHandle=actionHandle.getMember(Action.PARAM_BINDINGS_MEMBER);
      removeParamBindingFor(paramBindingsMemberHandle,paramName);
    }
  }
  PropertyHandle paramBindingsPropHandle=getElementHandle().getPropertyHandle(PARAM_BINDINGS_PROP);
  removeParamBindingFor(paramBindingsPropHandle,paramName);
}","/** 
 * Removes the parameter binding for the parameter with the given parameter name. The parameter binding is defined in clients of the data set in which this handle exists.
 * @param paramName name of the parameter
 * @throws PropertyValueException if error occurs when removing parameter binding.
 */
private void removeParamBindingsFor(String paramName) throws PropertyValueException {
  if (paramName == null)   return;
  Iterator iter=getElementHandle().clientsIterator();
  while (iter.hasNext()) {
    DesignElementHandle client=(DesignElementHandle)iter.next();
    PropertyHandle paramBindingsPropHandle=client.getPropertyHandle(ReportItem.PARAM_BINDINGS_PROP);
    removeParamBindingFor(paramBindingsPropHandle,paramName);
    PropertyHandle actionPropHandle=client.getPropertyHandle(ImageItem.ACTION_PROP);
    if (actionPropHandle != null) {
      Action action=(Action)actionPropHandle.getValue();
      if (action != null) {
        ActionHandle actionHandle=(ActionHandle)action.getHandle(actionPropHandle);
        MemberHandle paramBindingsMemberHandle=actionHandle.getMember(Action.PARAM_BINDINGS_MEMBER);
        removeParamBindingFor(paramBindingsMemberHandle,paramName);
      }
    }
  }
  PropertyHandle paramBindingsPropHandle=getElementHandle().getPropertyHandle(PARAM_BINDINGS_PROP);
  removeParamBindingFor(paramBindingsPropHandle,paramName);
}",0.9844674556213018
77865,"/** 
 * Return a dataSetRow expression text according to given row name.
 * @param rowName
 * @return
 */
public static String createDataSetRowExpression(String rowName){
  return DATASET_ROW_INDICATOR + ""String_Node_Str"" + rowName == null ? null : rowName.trim() + ""String_Node_Str"";
}","/** 
 * Return a dataSetRow expression text according to given row name.
 * @param rowName
 * @return
 */
public static String createDataSetRowExpression(String rowName){
  return DATASET_ROW_INDICATOR + ""String_Node_Str"" + (rowName == null ? null : rowName.trim())+ ""String_Node_Str"";
}",0.9947643979057592
77866,"/** 
 * TODO Remove it The expression of ComputedColumn with given index.
 * @param index
 * @return
 */
public ScriptExpression getExpression(int index);","/** 
 * TODO Remove it The expression of ComputedColumn with given index.
 * @param index
 * @return
 */
public IBaseExpression getExpression(int index);",0.9641693811074918
77867,"/** 
 * Populate the Group filter expression list and its corresponding group level list that being used in IExpressionProcessor.calculate() method.
 * @return
 */
private void populateGroupFilteringExpressions(List expressionList,List groupLevels){
  for (int i=0; i < this.populator.getQuery().getGrouping().length; i++) {
    List groupFilters=this.populator.getQuery().getGrouping()[i].getFilters();
    if (groupFilters == null)     continue;
    for (int j=0; j < groupFilters.size(); j++) {
      expressionList.add(((IFilterDefinition)groupFilters.get(j)).getExpression());
      groupLevels.add(new Integer(i + 1));
    }
  }
}","/** 
 * Populate the Group filter expression list and its corresponding group level list that being used in IExpressionProcessor.calculate() method.
 * @return
 */
private void populateGroupFilteringExpressions(List expressionList,List groupLevels){
  for (int i=0; i < this.populator.getQuery().getGrouping().length; i++) {
    List groupFilters=this.populator.getQuery().getGrouping()[i].getFilters();
    String name=this.populator.getQuery().getGrouping()[i].getName();
    if (groupFilters == null)     continue;
    for (int j=0; j < groupFilters.size(); j++) {
      IBaseExpression expr=((IFilterDefinition)groupFilters.get(j)).getExpression();
      expr.setGroupName(name);
      expressionList.add(expr);
      groupLevels.add(new Integer(i + 1));
    }
  }
}",0.8577524893314367
77868,"/** 
 * @param expressionList
 * @param groupLevels
 */
void populateGroupSortExpressions(List expressionList,List groupLevels){
  for (int i=0; i < this.populator.getQuery().getGrouping().length; i++) {
    List groupSorts=this.populator.getQuery().getGrouping()[i].getSorts();
    if (groupSorts == null)     continue;
    for (int j=0; j < groupSorts.size(); j++) {
      expressionList.add(((ISortDefinition)groupSorts.get(j)).getExpression());
      groupLevels.add(new Integer(i + 1));
    }
  }
}","/** 
 * @param expressionList
 * @param groupLevels
 */
void populateGroupSortExpressions(List expressionList,List groupLevels){
  for (int i=0; i < this.populator.getQuery().getGrouping().length; i++) {
    List groupSorts=this.populator.getQuery().getGrouping()[i].getSorts();
    String name=this.populator.getQuery().getGrouping()[i].getName();
    if (groupSorts == null)     continue;
    for (int j=0; j < groupSorts.size(); j++) {
      IBaseExpression expr=((ISortDefinition)groupSorts.get(j)).getExpression();
      expr.setGroupName(name);
      expressionList.add(expr);
      groupLevels.add(new Integer(i + 1));
    }
  }
}",0.7912280701754386
77869,"/** 
 * Set the value for the cached data set information.
 * @param metadata a structure value include output column information , input/output parameter definitions.
 * @return <code>CachedMetaDataHandle</code> to the input<code>metadata</code>, return <code>null</code> if <code>metadata</code> is <code>null</code>.
 * @throws SemanticException the input data is not valid.
 */
public CachedMetaDataHandle setCachedMetaData(CachedMetaData metadata) throws SemanticException {
  setProperty(SimpleDataSet.CACHED_METADATA_PROP,metadata);
  if (metadata == null)   return null;
  return (CachedMetaDataHandle)metadata.getHandle(getPropertyHandle(SimpleDataSet.CACHED_METADATA_PROP));
}","/** 
 * Set the value for the cached data set information.
 * @param metadata a structure value include output column information , input/output parameter definitions.
 * @return <code>CachedMetaDataHandle</code> to the input<code>metadata</code>, return <code>null</code> if <code>metadata</code> is <code>null</code>.
 * @throws SemanticException the input data is not valid.
 */
public CachedMetaDataHandle setCachedMetaData(CachedMetaData metadata) throws SemanticException {
  setProperty(CACHED_METADATA_PROP,metadata);
  if (metadata == null)   return null;
  return (CachedMetaDataHandle)metadata.getHandle(getPropertyHandle(CACHED_METADATA_PROP));
}",0.9791666666666666
77870,"/** 
 * @param inputStream
 * @param cacheProvider
 * @throws DataException
 */
RDGroupUtil(InputStream inputStream) throws DataException {
  this(inputStream,null);
}","/** 
 * @param inputStream
 * @param cacheProvider
 * @throws DataException
 */
public RDGroupUtil(InputStream inputStream) throws DataException {
  this(inputStream,null);
}",0.9794721407624634
77871,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
      this.parameterMap=reportDocumentInstance.getParameterValues();
    }
    reportDocumentInstance.close();
  }
  if (reportRunnable == null) {
    try {
      File file=new File(this.reportDesignName);
      if (file.exists()) {
        reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName);
      }
 else {
        this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
        InputStream is=request.getSession().getServletContext().getResourceAsStream(this.reportDesignName);
        reportRunnable=ReportEngineService.getInstance().openReportDesign(is);
      }
    }
 catch (    EngineException e) {
      this.exception=e;
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
 else {
    design=new BirtViewerReportDesignHandle(null,reportDesignName);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
      this.parameterMap=reportDocumentInstance.getParameterValues();
    }
    reportDocumentInstance.close();
  }
  if (reportRunnable == null) {
    try {
      File file=new File(this.reportDesignName);
      if (file.exists()) {
        reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName);
      }
 else       if (!ParameterAccessor.isWorkingFolderAccessOnly()) {
        this.reportDesignName=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT);
        InputStream is=request.getSession().getServletContext().getResourceAsStream(this.reportDesignName);
        reportRunnable=ReportEngineService.getInstance().openReportDesign(is);
      }
    }
 catch (    EngineException e) {
      this.exception=e;
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
 else {
    design=new BirtViewerReportDesignHandle(null,reportDesignName);
  }
  return design;
}",0.9804582210242588
77872,"/** 
 * This is used for PRESENTATION, the data in report document as the CachedResultSet.
 * @return
 * @throws DataException
 */
ExprResultSet loadExprResultSet() throws DataException {
  if (streamManager.isSecondRD() == true && streamManager.isSubquery() == true)   return new ExprResultSet2(streamManager,loadGroupUtil(StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),version,streamManager.isSecondRD());
  return new ExprResultSet(streamManager,loadGroupUtil(StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),version,streamManager.isSecondRD());
}","/** 
 * This is used for PRESENTATION, the data in report document as the CachedResultSet.
 * @return
 * @throws DataException
 */
ExprResultSet loadExprResultSet() throws DataException {
  if (streamManager.isSecondRD() == true && streamManager.isSubquery() == true)   return new ExprResultSet2(streamManager,version,streamManager.isSecondRD());
  return new ExprResultSet(streamManager,loadGroupUtil(StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),version,streamManager.isSecondRD());
}",0.7885714285714286
77873,"/** 
 * Save below information into report document: result class group information subquery information
 * @param odiResult
 * @throws DataException
 */
private void saveResultIterator(IResultIterator odiResult,int groupLevel,int[] subQueryInfo) throws DataException {
  try {
    OutputStream streamForDataSet=null;
    OutputStream streamForResultClass=null;
    OutputStream streamForGroupInfo=null;
    OutputStream streamForRowIndexInfo=null;
    boolean isSubQuery=streamManager.isSubquery();
    if (streamManager.isSecondRD() == false) {
      if (context.getMode() == DataEngineContext.MODE_GENERATION && isSubQuery == false) {
        streamForResultClass=streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
        streamForDataSet=streamManager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      }
    }
 else {
      streamForRowIndexInfo=streamManager.getOutStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    streamForGroupInfo=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    odiResult.doSave(new StreamWrapper(streamForResultClass,streamForDataSet,streamForGroupInfo,streamForRowIndexInfo),isSubQuery,RDSave.this.exprNameSet);
    if (streamForResultClass != null)     streamForResultClass.close();
    if (streamForGroupInfo != null)     streamForGroupInfo.close();
    if (streamForRowIndexInfo != null)     streamForRowIndexInfo.close();
    if (streamForDataSet != null)     streamForDataSet.close();
    if (isSubQuery == true && streamManager.hasOutStream(DataEngineContext.SUBQUERY_INFO_STREAM,StreamManager.SUB_QUERY_ROOT_STREAM,StreamManager.SELF_SCOPE) == false) {
      OutputStream streamForSubQuery=streamManager.getOutStream(DataEngineContext.SUBQUERY_INFO_STREAM,StreamManager.SUB_QUERY_ROOT_STREAM,StreamManager.SELF_SCOPE);
      RDSubQueryUtil.doSave(streamForSubQuery,groupLevel,subQueryInfo);
      streamForSubQuery.close();
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","/** 
 * Save below information into report document: result class group information subquery information
 * @param odiResult
 * @throws DataException
 */
private void saveResultIterator(IResultIterator odiResult,int groupLevel,int[] subQueryInfo) throws DataException {
  try {
    OutputStream streamForDataSet=null;
    OutputStream streamForResultClass=null;
    OutputStream streamForGroupInfo=null;
    OutputStream streamForRowIndexInfo=null;
    OutputStream streamForParentIndexInfo=null;
    boolean isSubQuery=streamManager.isSubquery();
    if (streamManager.isSecondRD() == false) {
      if (context.getMode() == DataEngineContext.MODE_GENERATION && isSubQuery == false) {
        streamForResultClass=streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
        streamForDataSet=streamManager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      }
    }
 else {
      streamForRowIndexInfo=streamManager.getOutStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      if (context.getMode() == DataEngineContext.MODE_UPDATE && isSubQuery == true)       streamForParentIndexInfo=streamManager.getOutStream(DataEngineContext.SUBQUERY_PARENTINDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    streamForGroupInfo=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    odiResult.doSave(new StreamWrapper(streamForResultClass,streamForDataSet,streamForGroupInfo,streamForRowIndexInfo,streamForParentIndexInfo),isSubQuery,RDSave.this.exprNameSet);
    if (streamForResultClass != null)     streamForResultClass.close();
    if (streamForGroupInfo != null)     streamForGroupInfo.close();
    if (streamForRowIndexInfo != null)     streamForRowIndexInfo.close();
    if (streamForDataSet != null)     streamForDataSet.close();
    if (streamForParentIndexInfo != null)     streamForParentIndexInfo.close();
    if (isSubQuery == true && streamManager.hasOutStream(DataEngineContext.SUBQUERY_INFO_STREAM,StreamManager.SUB_QUERY_ROOT_STREAM,StreamManager.SELF_SCOPE) == false) {
      OutputStream streamForSubQuery=streamManager.getOutStream(DataEngineContext.SUBQUERY_INFO_STREAM,StreamManager.SUB_QUERY_ROOT_STREAM,StreamManager.SELF_SCOPE);
      RDSubQueryUtil.doSave(streamForSubQuery,groupLevel,subQueryInfo);
      streamForSubQuery.close();
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.6343467543138867
77874,"/** 
 * @param streamForResultClass
 * @param streamForDataSet
 * @param streamForGroupInfo
 * @param streamForRowIndexInfo
 */
public StreamWrapper(OutputStream streamForResultClass,OutputStream streamForDataSet,OutputStream streamForGroupInfo,OutputStream streamForRowIndexInfo){
  this.streamForResultClass=streamForResultClass;
  this.streamForDataSet=streamForDataSet;
  this.streamForGroupInfo=streamForGroupInfo;
  this.streamForRowIndexInfo=streamForRowIndexInfo;
}","/** 
 * @param streamForResultClass
 * @param streamForDataSet
 * @param streamForGroupInfo
 * @param streamForRowIndexInfo
 */
public StreamWrapper(OutputStream streamForResultClass,OutputStream streamForDataSet,OutputStream streamForGroupInfo,OutputStream streamForRowIndexInfo,OutputStream streamForParentIndex){
  this.streamForResultClass=streamForResultClass;
  this.streamForDataSet=streamForDataSet;
  this.streamForGroupInfo=streamForGroupInfo;
  this.streamForRowIndexInfo=streamForRowIndexInfo;
  this.streamForParentIndex=streamForParentIndex;
}",0.9184466019417477
77875,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator parameters=parameterList.iterator();
      while (parameters != null && parameters.hasNext()) {
        Object parameterHandle=parameters.next();
        if (parameterHandle instanceof ScalarParameterHandle) {
          ScalarParameterHandle scalarParameterHandle=(ScalarParameterHandle)parameterHandle;
          if (scalarParameterHandle.getName() != null)           this.configMap.put(scalarParameterHandle.getName(),null);
        }
      }
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=getParameterName(configVar.getName());
          String paramValue=configVar.getValue();
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            try {
              Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
              paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator parameters=parameterList.iterator();
      while (parameters != null && parameters.hasNext()) {
        Object parameterHandle=parameters.next();
        if (parameterHandle instanceof ScalarParameterHandle) {
          ScalarParameterHandle scalarParameterHandle=(ScalarParameterHandle)parameterHandle;
          if (scalarParameterHandle.getName() != null)           this.configMap.put(scalarParameterHandle.getName(),null);
        }
      }
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=getParameterName(configVar.getName());
          String paramValue=configVar.getValue();
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            try {
              if (!DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType())) {
                Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
                paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
              }
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}",0.9721848362494392
77876,"public static void setSystemHelp(Control control,String contextId){
  control.setFocus();
  PlatformUI.getWorkbench().getHelpSystem().setHelp(control,contextId);
}","/** 
 * @param control
 * @param contextId
 */
public static void setSystemHelp(Control control,String contextId){
  PlatformUI.getWorkbench().getHelpSystem().setHelp(control,contextId);
}",0.8034188034188035
77877,"/** 
 * Override build method.
 */
protected void build(){
  addChild(new DocumentFragment());
  addChild(new DialogContainerFragment(new ExceptionDialogFragment()));
  addChild(new DialogContainerFragment(new ParameterDialogFragment()));
}","/** 
 * Override build method.
 */
protected void build(){
  addChild(new ParameterFragment());
}",0.5400593471810089
77878,"/** 
 * Return a dataSetRow expression text according to given row name.
 * @param rowName
 * @return
 */
public static String createDataSetRowExpression(String rowName){
  return DATASET_ROW_INDICATOR + ""String_Node_Str"" + rowName+ ""String_Node_Str"";
}","/** 
 * Return a dataSetRow expression text according to given row name.
 * @param rowName
 * @return
 */
public static String createDataSetRowExpression(String rowName){
  return DATASET_ROW_INDICATOR + ""String_Node_Str"" + rowName == null ? null : rowName.trim() + ""String_Node_Str"";
}",0.9387755102040816
77879,"public void createPageCustomControl(Composite parent){
  setControl(createPageControl(parent));
  initializeControl();
  getControl().setFocus();
  PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),this.CONEXT_ID_DATASET_JDBC);
}","public void createPageCustomControl(Composite parent){
  setControl(createPageControl(parent));
  initializeControl();
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASET_JDBC);
}",0.8200455580865603
77880,"protected Control createContents(Composite parent){
  Composite mainComposite=new Composite(parent,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  data.verticalSpan=5;
  GridLayout layout=new GridLayout();
  mainComposite.setLayout(layout);
  Group sqlDataSetGroup=new Group(mainComposite,SWT.NONE);
  sqlDataSetGroup.setLayout(layout);
  sqlDataSetGroup.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  sqlDataSetGroup.setLayoutData(data);
  sqlDataSetGroup.setEnabled(true);
  maxDisplaySchemaEditor=new IntegerFieldEditor(USER_MAX_NUM_OF_SCHEMA,""String_Node_Str"",sqlDataSetGroup);
  Label lab=maxDisplaySchemaEditor.getLabelControl(sqlDataSetGroup);
  lab.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  maxDisplaySchemaEditor.setPage(this);
  maxDisplaySchemaEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxDisplaySchemaEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxDisplaySchemaEditor.setValidRange(0,MAX_MAX_ROW);
  maxDisplaySchemaEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxDisplaySchemaEditor.isValid());
    }
  }
);
  maxDisplaySchemaEditor.setErrorMessage(JdbcPlugin.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_MAX_ROW)}));
  String defaultMaxSchema=JdbcPlugin.getDefault().getPluginPreferences().getString(USER_MAX_NUM_OF_SCHEMA);
  if (defaultMaxSchema == null || defaultMaxSchema.trim().length() <= 0) {
    defaultMaxSchema=String.valueOf(DEFAULT_MAX_NUM_OF_SCHEMA);
  }
  maxDisplaySchemaEditor.setStringValue(defaultMaxSchema);
  maxDisplayTableEditor=new IntegerFieldEditor(USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,""String_Node_Str"",sqlDataSetGroup);
  lab=maxDisplayTableEditor.getLabelControl(sqlDataSetGroup);
  lab.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  maxDisplayTableEditor.setPage(this);
  maxDisplayTableEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxDisplayTableEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxDisplayTableEditor.setValidRange(0,MAX_MAX_ROW);
  maxDisplayTableEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxDisplayTableEditor.isValid());
    }
  }
);
  maxDisplayTableEditor.setErrorMessage(JdbcPlugin.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_MAX_ROW)}));
  String defaultMaxTable=JdbcPlugin.getDefault().getPluginPreferences().getString(USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
  if (defaultMaxTable == null || defaultMaxTable.trim().length() <= 0) {
    defaultMaxTable=String.valueOf(DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA);
  }
  maxDisplayTableEditor.setStringValue(defaultMaxTable);
  return mainComposite;
}","protected Control createContents(Composite parent){
  Composite mainComposite=new Composite(parent,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  data.verticalSpan=5;
  GridLayout layout=new GridLayout();
  mainComposite.setLayout(layout);
  Group sqlDataSetGroup=new Group(mainComposite,SWT.NONE);
  sqlDataSetGroup.setLayout(layout);
  sqlDataSetGroup.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  sqlDataSetGroup.setLayoutData(data);
  sqlDataSetGroup.setEnabled(true);
  maxDisplaySchemaEditor=new IntegerFieldEditor(USER_MAX_NUM_OF_SCHEMA,""String_Node_Str"",sqlDataSetGroup);
  Label lab=maxDisplaySchemaEditor.getLabelControl(sqlDataSetGroup);
  lab.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  maxDisplaySchemaEditor.setPage(this);
  maxDisplaySchemaEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxDisplaySchemaEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxDisplaySchemaEditor.setValidRange(0,MAX_MAX_ROW);
  maxDisplaySchemaEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxDisplaySchemaEditor.isValid());
    }
  }
);
  maxDisplaySchemaEditor.setErrorMessage(JdbcPlugin.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_MAX_ROW)}));
  String defaultMaxSchema=JdbcPlugin.getDefault().getPluginPreferences().getString(USER_MAX_NUM_OF_SCHEMA);
  if (defaultMaxSchema == null || defaultMaxSchema.trim().length() <= 0) {
    defaultMaxSchema=String.valueOf(DEFAULT_MAX_NUM_OF_SCHEMA);
  }
  maxDisplaySchemaEditor.setStringValue(defaultMaxSchema);
  maxDisplayTableEditor=new IntegerFieldEditor(USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,""String_Node_Str"",sqlDataSetGroup);
  lab=maxDisplayTableEditor.getLabelControl(sqlDataSetGroup);
  lab.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  maxDisplayTableEditor.setPage(this);
  maxDisplayTableEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxDisplayTableEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxDisplayTableEditor.setValidRange(0,MAX_MAX_ROW);
  maxDisplayTableEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxDisplayTableEditor.isValid());
    }
  }
);
  maxDisplayTableEditor.setErrorMessage(JdbcPlugin.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_MAX_ROW)}));
  String defaultMaxTable=JdbcPlugin.getDefault().getPluginPreferences().getString(USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
  if (defaultMaxTable == null || defaultMaxTable.trim().length() <= 0) {
    defaultMaxTable=String.valueOf(DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA);
  }
  maxDisplayTableEditor.setStringValue(defaultMaxTable);
  Utility.setSystemHelp(mainComposite,IHelpConstants.CONEXT_ID_PREFERENCE_DATASET_JDBC);
  return mainComposite;
}",0.9853497942386832
77881,"void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.verticalSpacing=10;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverList=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : ""String_Node_Str"";
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(""String_Node_Str"");
        }
      }
      userName.setText(""String_Node_Str"");
      password.setText(""String_Node_Str"");
      updateTestButton();
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  new Label(content,SWT.NONE);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  content.setFocus();
  PlatformUI.getWorkbench().getHelpSystem().setHelp(content,CONEXT_ID_DATASOURCE_JDBC);
}","void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.verticalSpacing=10;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverList=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : ""String_Node_Str"";
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(""String_Node_Str"");
        }
      }
      userName.setText(""String_Node_Str"");
      password.setText(""String_Node_Str"");
      updateTestButton();
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  new Label(content,SWT.NONE);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(content,IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
}",0.9839602555003548
77882,"void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  content.setLayout(layout);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_driverClass=new Label(content,SWT.LEFT);
  m_driverClass.setText(SampleDBConstants.DRIVER_CLASS);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_driverURL=new Label(content,SWT.LEFT);
  m_driverURL.setText(SampleDBConstants.DRIVER_URL);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_sampleUser=new Label(content,SWT.LEFT);
  m_sampleUser.setText(SampleDBJDBCConnectionFactory.getDbUser());
  setMessage(DEFAULT_MESSAGE);
  content.setFocus();
  PlatformUI.getWorkbench().getHelpSystem().setHelp(content,CONEXT_ID_DATASOURCE_SAMPLEDB);
}","void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  content.setLayout(layout);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_driverClass=new Label(content,SWT.LEFT);
  m_driverClass.setText(SampleDBConstants.DRIVER_CLASS);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_driverURL=new Label(content,SWT.LEFT);
  m_driverURL.setText(SampleDBConstants.DRIVER_URL);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_sampleUser=new Label(content,SWT.LEFT);
  m_sampleUser.setText(SampleDBJDBCConnectionFactory.getDbUser());
  setMessage(DEFAULT_MESSAGE);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(content,CONEXT_ID_DATASOURCE_SAMPLEDB);
}",0.9873125720876584
77883,"/** 
 * This method returnt <code>true</code> in following condition: <p> 1. The multi selected elements are same type. <p> 2. And the multi selected elements have extends. <p> 3. If any of the given elements has local properties. <p>
 * @return <code>true</code> if the conditions is met.
 */
public final boolean hasLocalPropertiesForExtendedElements(){
  if (!isSameType())   return false;
  if (!isExtendedElements())   return false;
  List elements=getElements();
  for (Iterator iter=elements.iterator(); iter.hasNext(); ) {
    DesignElementHandle elementHandle=(DesignElementHandle)iter.next();
    if (elementHandle.getElement().hasLocalPropertyValues())     return true;
  }
  return false;
}","/** 
 * This method returnt <code>true</code> in following condition: <p> 1. The multi selected elements are same type. <p> 2. And the multi selected elements have extends. <p> 3. If any of the given elements has local properties. <p>
 * @return <code>true</code> if the conditions is met.
 */
public final boolean hasLocalPropertiesForExtendedElements(){
  if (!isSameType())   return false;
  if (!isExtendedElements())   return false;
  List elements=getElements();
  for (Iterator iter=elements.iterator(); iter.hasNext(); ) {
    DesignElementHandle elementHandle=(DesignElementHandle)iter.next();
    Iterator propIter=elementHandle.getPropertyIterator();
    while (propIter.hasNext()) {
      PropertyHandle propertyHandle=(PropertyHandle)propIter.next();
      String name=propertyHandle.getDefn().getName();
      if (IDesignElementModel.EXTENDS_PROP.equals(name))       continue;
      if (elementHandle.getElement().getLocalProperty(elementHandle.getModule(),name) != null)       return true;
    }
  }
  return false;
}",0.7508650519031141
77884,"/** 
 * Determines if the design has changed since it was last read from, or written to, the file. The dirty state reflects the action of the command stack. If the user saves the design and then changes it, the design is dirty. If the user then undoes the change, the design is no longer dirty.
 * @return <code>true</code> if the design has changed since the last loador save; <code>false</code> if it has not changed.
 */
public boolean needsSave(){
  List versionInfos=ModelUtil.checkVersion(module.getVersionManager().getVersion());
  if (!versionInfos.isEmpty())   return true;
  return module.isDirty();
}","/** 
 * Determines if the design has changed since it was last read from, or written to, the file. The dirty state reflects the action of the command stack. If the user saves the design and then changes it, the design is dirty. If the user then undoes the change, the design is no longer dirty.
 * @return <code>true</code> if the design has changed since the last loador save; <code>false</code> if it has not changed.
 */
public boolean needsSave(){
  String version=module.getVersionManager().getVersion();
  if (version != null) {
    List versionInfos=ModelUtil.checkVersion(version);
    if (!versionInfos.isEmpty())     return true;
  }
  return module.isDirty();
}",0.8916601714731099
77885,"/** 
 * Validates the input value at the given locale. The format is: short date and medium time.
 * @param value the value to validate
 * @param locale the locale information
 * @return the date value if validation is successful
 * @throws ValidationValueException if the value is invalid
 */
static final Date doVidateDateTime(String value,ULocale locale) throws ValidationValueException {
  DateFormat formatter=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM,locale);
  try {
    return formatter.parse(value);
  }
 catch (  ParseException e) {
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}","/** 
 * Validates the input value at the given locale. The format is: short date and medium time.
 * @param value the value to validate
 * @param locale the locale information
 * @return the date value if validation is successful
 * @throws ValidationValueException if the value is invalid
 */
static final Date doVidateDateTime(String value,ULocale locale) throws ValidationValueException {
  try {
    return DataTypeUtil.toDate(value,locale);
  }
 catch (  BirtException e) {
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}",0.85331347728965
77886,"/** 
 * Get vector from the list.
 * @param list
 * @return
 */
private SelectItemChoice[] getVectorFromList(List list){
  SelectItemChoice[] selectionList=new SelectItemChoice[list.size()];
  for (int i=0; i < list.size(); i++) {
    SelectItemChoice item=(SelectItemChoice)list.get(i);
    selectionList[i]=new SelectItemChoice(item.getValue(),item.getLabel());
  }
  return selectionList;
}","/** 
 * Get vector from the list.
 * @param list
 * @return
 */
private SelectItemChoice[] getVectorFromList(List list){
  SelectItemChoice[] selectionList=new SelectItemChoice[list.size()];
  for (int i=0; i < list.size(); i++) {
    SelectItemChoice item=(SelectItemChoice)list.get(i);
    String label=item.getLabel();
    String value=item.getValue();
    if (value == null)     continue;
    if (label == null)     label=value;
    selectionList[i]=new SelectItemChoice(value,label);
  }
  return selectionList;
}",0.7574094401756312
77887,"/** 
 * If miss parameter.
 * @return boolean
 */
public boolean isMissingParameter(){
  boolean missingParameter=false;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  HashMap params=(HashMap)this.getConfigVars();
  List parameters=model.getFlattenParameters();
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      if (parameters.get(i) instanceof ScalarParameterHandle) {
        ScalarParameterHandle parameter=((ScalarParameterHandle)parameters.get(i));
        if (parameter.isHidden()) {
          continue;
        }
        String paramValue=null;
        if (params != null && params.containsKey(parameter.getName())) {
          Object curVal=params.get(parameter.getName());
          if (curVal != null)           paramValue=curVal.toString();
        }
 else {
          paramValue=parameter.getDefaultValue();
        }
        if (paramValue == null && !parameter.allowNull()) {
          missingParameter=true;
          break;
        }
        if (paramValue != null && paramValue.trim().length() <= 0 && !parameter.allowBlank() && parameter.getDataType().equalsIgnoreCase(DesignChoiceConstants.PARAM_TYPE_STRING)) {
          missingParameter=true;
          break;
        }
      }
    }
  }
  return missingParameter;
}","/** 
 * If miss parameter.
 * @return boolean
 */
public boolean isMissingParameter(){
  boolean missingParameter=false;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  HashMap params=(HashMap)this.getConfigVars();
  List parameters=model.getFlattenParameters();
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      if (parameters.get(i) instanceof ScalarParameterHandle) {
        ScalarParameterHandle parameter=((ScalarParameterHandle)parameters.get(i));
        if (parameter.isHidden()) {
          continue;
        }
        String paramValue=null;
        if (params != null && params.containsKey(parameter.getName())) {
          Object curVal=params.get(parameter.getName());
          if (curVal != null)           paramValue=curVal.toString();
        }
        if (paramValue == null && !parameter.allowNull()) {
          missingParameter=true;
          break;
        }
        if (paramValue != null && paramValue.trim().length() <= 0 && !parameter.allowBlank() && parameter.getDataType().equalsIgnoreCase(DesignChoiceConstants.PARAM_TYPE_STRING)) {
          missingParameter=true;
          break;
        }
      }
    }
  }
  return missingParameter;
}",0.973249409913454
77888,"/** 
 * @param ob1
 * @param ob2
 * @return
 */
public static int compareObjects(Object ob1,Object ob2){
  int result=0;
  if (ob1 == ob2) {
    return result;
  }
  if (ob1 == null || ob2 == null) {
    if (ob1 == null) {
      result=-1;
    }
 else {
      result=1;
    }
    return result;
  }
  if (ob1.equals(ob2)) {
    return result;
  }
 else   if (ob1 instanceof Comparable && ob1 instanceof Comparable) {
    Comparable comp1=(Comparable)ob1;
    Comparable comp2=(Comparable)ob2;
    if (ob1.getClass() != ob2.getClass() && ob1 instanceof Number && ob1 instanceof Number) {
      try {
        comp1=(Comparable)DataTypeUtil.toDouble(ob1);
        comp2=(Comparable)DataTypeUtil.toDouble(ob2);
      }
 catch (      BirtException ex) {
      }
    }
    result=comp1.compareTo(comp2);
  }
 else   if (ob1 instanceof Boolean && ob2 instanceof Boolean) {
    Boolean bool=(Boolean)ob1;
    if (bool.equals(Boolean.TRUE))     result=1;
 else     result=-1;
  }
 else {
  }
  return result;
}","/** 
 * @param ob1
 * @param ob2
 * @return
 */
public static int compareObjects(Object ob1,Object ob2){
  int result=0;
  if (ob1 == ob2) {
    return result;
  }
  if (ob1 == null || ob2 == null) {
    if (ob1 == null) {
      result=-1;
    }
 else {
      result=1;
    }
    return result;
  }
  if (ob1.equals(ob2)) {
    return result;
  }
 else   if (ob1 instanceof Comparable && ob2 instanceof Comparable) {
    Comparable comp1=(Comparable)ob1;
    Comparable comp2=(Comparable)ob2;
    if (ob1.getClass() != ob2.getClass() && ob1 instanceof Number && ob2 instanceof Number) {
      try {
        comp1=(Comparable)DataTypeUtil.toDouble(ob1);
        comp2=(Comparable)DataTypeUtil.toDouble(ob2);
      }
 catch (      BirtException ex) {
      }
    }
    result=comp1.compareTo(comp2);
  }
 else   if (ob1 instanceof Boolean && ob2 instanceof Boolean) {
    Boolean bool=(Boolean)ob1;
    if (bool.equals(Boolean.TRUE))     result=1;
 else     result=-1;
  }
 else {
  }
  return result;
}",0.998001998001998
77889,"private int compareTwoValues(Object obj1,Object obj2){
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  if (obj1 instanceof Boolean) {
    if (obj1.equals(obj2))     return 0;
    Boolean bool=(Boolean)obj1;
    if (bool.equals(Boolean.TRUE))     return 1;
 else     return -1;
  }
 else   if (obj1 instanceof Comparable) {
    return ((Comparable)obj1).compareTo(obj2);
  }
 else {
    return obj1.toString().compareTo(obj2.toString());
  }
}","private int compareTwoValues(Object obj1,Object obj2){
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  if (obj1 instanceof Boolean) {
    if (obj1.equals(obj2))     return 0;
    Boolean bool=(Boolean)obj1;
    if (bool.equals(Boolean.TRUE))     return 1;
 else     return -1;
  }
 else   if (obj1 instanceof Comparable) {
    Comparable comp1=(Comparable)obj1;
    Comparable comp2=(Comparable)obj2;
    if (obj1.getClass() != obj2.getClass() && obj1 instanceof Number && obj2 instanceof Number) {
      try {
        comp1=(Comparable)DataTypeUtil.toDouble(obj1);
        comp2=(Comparable)DataTypeUtil.toDouble(obj2);
      }
 catch (      BirtException ex) {
      }
    }
    return comp1.compareTo(comp2);
  }
 else {
    return obj1.toString().compareTo(obj2.toString());
  }
}",0.7202702702702702
77890,"protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
  Collection parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  Collection parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
  this.parametersAsString=getParsedParametersAsStringWithDefaultValue(this.parametersAsString,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
}",0.8382502543234995
77891,"/** 
 * get parsed parameters as string.
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsString(Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    String paramValue=getParamValueAsString(request,parameter);
    if (paramValue == null && !ParameterAccessor.isReportParameterExist(request,paramName) && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || (this.configMap != null && !this.configMap.containsKey(paramName)))) {
      paramValue=this.getParameterDefaultValues(reportDesignHandle,paramName,options);
    }
    if (paramName != null)     params.put(paramName,paramValue);
  }
  return params;
}","/** 
 * get parsed parameters as string.
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsString(Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    String paramValue=getParamValueAsString(request,parameter);
    if (paramName != null)     params.put(paramName,paramValue);
  }
  return params;
}",0.7785171102661597
77892,"/** 
 * Get report locale from a given string.
 * @param locale locale string
 * @return report locale
 */
public static Locale getLocaleFromString(String locale){
  if (locale == null || locale.length() <= 0) {
    return Locale.getDefault();
  }
  int index=locale.indexOf('_');
  if (index != -1) {
    String language=locale.substring(0,index);
    String country=locale.substring(index + 1);
    return new Locale(language,country);
  }
  return new Locale(locale);
}","/** 
 * Get report locale from a given string.
 * @param locale locale string
 * @return report locale
 */
public static Locale getLocaleFromString(String locale){
  if (locale == null || locale.length() <= 0) {
    return null;
  }
  int index=locale.indexOf('_');
  if (index != -1) {
    String language=locale.substring(0,index);
    String country=locale.substring(index + 1);
    return new Locale(language,country);
  }
  return new Locale(locale);
}",0.9752421959095802
77893,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param config Servlet configuration
 */
public synchronized static void initParameters(ServletConfig config){
  ServletContext context=config.getServletContext();
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=context.getRealPath(""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  clearDocuments();
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param config Servlet configuration
 */
public synchronized static void initParameters(ServletConfig config){
  ServletContext context=config.getServletContext();
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=context.getRealPath(""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  clearDocuments();
}",0.9705069124423964
77894,"/** 
 * Get report locale from Http request.
 * @param request http request
 * @return report locale
 */
public static Locale getLocale(HttpServletRequest request){
  return getLocaleFromString(getParameter(request,PARAM_LOCALE));
}","/** 
 * Get report locale from Http request.
 * @param request http request
 * @return report locale
 */
public static Locale getLocale(HttpServletRequest request){
  Locale locale=null;
  locale=getLocaleFromString(getParameter(request,PARAM_LOCALE));
  if (locale == null)   locale=request.getLocale();
  if (locale == null)   locale=webAppLocale;
  return locale;
}",0.75
77895,"/** 
 * @return
 * @throws DataException
 */
private boolean hasOutputParams() throws DataException {
  Collection collection=getParameterMetaData();
  boolean hasOutputParam=false;
  if (collection != null) {
    Iterator it=collection.iterator();
    while (it.hasNext()) {
      IParameterMetaData metaData=(IParameterMetaData)it.next();
      if (metaData.isOutputMode().booleanValue()) {
        hasOutputParam=true;
        break;
      }
    }
  }
  return hasOutputParam;
}","/** 
 * @return
 * @throws DataException
 */
private boolean hasOutputParams(){
  Collection collection=null;
  try {
    collection=getParameterMetaData();
  }
 catch (  DataException e) {
    return false;
  }
  boolean hasOutputParam=false;
  if (collection != null) {
    Iterator it=collection.iterator();
    while (it.hasNext()) {
      IParameterMetaData metaData=(IParameterMetaData)it.next();
      if (metaData.isOutputMode().booleanValue()) {
        hasOutputParam=true;
        break;
      }
    }
  }
  return hasOutputParam;
}",0.837890625
77896,"/** 
 * Creates reusable actions for all BIRT graphical editors. (non-Javadoc)
 * @see org.eclipse.gef.ui.parts.GraphicalEditor#createActions()
 */
protected void createActions(){
  super.createActions();
  IAction action=new MergeAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SplitAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteRowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteColumnAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteTableGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertRowAboveAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertRowBelowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertTableGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertColumnRightAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertColumnLeftAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CutPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CopyPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new PastePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertListGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteListGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new AddStyleAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ImportCSSStylePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new AddGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CreatePlaceHolderPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new RevertToReportItemPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new RevertToTemplatePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ApplyStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ApplyThemeMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditGroupMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditBindingAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_TEXT_ID,ReportDesignConstants.TEXT_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_LABEL_ID,ReportDesignConstants.LABEL_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_DATA_ID,ReportDesignConstants.DATA_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_GRID_ID,ReportDesignConstants.GRID_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_LIST_ID,ReportDesignConstants.LIST_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_TABLE_ID,ReportDesignConstants.TABLE_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_IMAGE_ID,ReportDesignConstants.IMAGE_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID,ReportDesignConstants.TEXT_DATA_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new NewParameterAction(NewParameterAction.INSERT_SCALAR_PARAMETER,ReportDesignConstants.SCALAR_PARAMETER_ELEMENT);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewParameterAction(NewParameterAction.INSERT_PARAMETER_GROUP,ReportDesignConstants.PARAMETER_GROUP_ELEMENT);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewParameterAction(NewParameterAction.INSERT_CASCADING_PARAMETER_GROUP,ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertExpressionMenuAction(this);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new NewDataSourceAction();
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewDataSetAction();
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DirectEditAction((IWorkbenchPart)this);
  ((DirectEditAction)action).setDirectEditRequest(new Request(RequestConstants.REQ_OPEN));
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeHeaderAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeDetailAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeFooterAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new UseLibraryPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  registerInsertExtElementActions();
}","/** 
 * Creates reusable actions for all BIRT graphical editors. (non-Javadoc)
 * @see org.eclipse.gef.ui.parts.GraphicalEditor#createActions()
 */
protected void createActions(){
  super.createActions();
  IAction action=new MergeAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SplitAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteRowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteColumnAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteTableGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertRowAboveAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertRowBelowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertTableGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertColumnRightAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertColumnLeftAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CutPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CopyPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new PastePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertListGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteListGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new AddStyleAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ImportCSSStylePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new AddGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CreatePlaceHolderPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new RevertToReportItemPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new RevertToTemplatePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ApplyStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ApplyThemeMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditGroupMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditBindingAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_TEXT_ID,ReportDesignConstants.TEXT_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_LABEL_ID,ReportDesignConstants.LABEL_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_DATA_ID,ReportDesignConstants.DATA_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_GRID_ID,ReportDesignConstants.GRID_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_LIST_ID,ReportDesignConstants.LIST_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_TABLE_ID,ReportDesignConstants.TABLE_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_IMAGE_ID,ReportDesignConstants.IMAGE_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID,ReportDesignConstants.TEXT_DATA_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new NewParameterAction(NewParameterAction.INSERT_SCALAR_PARAMETER,ReportDesignConstants.SCALAR_PARAMETER_ELEMENT);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewParameterAction(NewParameterAction.INSERT_PARAMETER_GROUP,ReportDesignConstants.PARAMETER_GROUP_ELEMENT);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewParameterAction(NewParameterAction.INSERT_CASCADING_PARAMETER_GROUP,ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertExpressionMenuAction(this);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new NewDataSourceAction();
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewDataSetAction();
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DirectEditAction((IWorkbenchPart)this);
  ((DirectEditAction)action).setDirectEditRequest(new Request(RequestConstants.REQ_OPEN));
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeHeaderAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeDetailAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeFooterAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new UseLibraryPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SelectRowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SelectColumnAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  registerInsertExtElementActions();
}",0.9826292666441364
77897,"/** 
 * Constructor of KeyHandler
 * @param viewer
 * @param actionRegistry
 */
public ReportViewerKeyHandler(GraphicalViewer viewer,ActionRegistry actionRegistry){
  super(viewer);
  this.actionRegistry=actionRegistry;
  put(KeyStroke.getPressed(SWT.F2,0),actionRegistry.getAction(GEFActionConstants.DIRECT_EDIT));
  tableDelgate=new TableCellKeyDelegate(viewer);
}","/** 
 * Constructor of KeyHandler
 * @param viewer
 * @param actionRegistry
 */
public ReportViewerKeyHandler(GraphicalViewer viewer,ActionRegistry actionRegistry){
  super(viewer);
  this.actionRegistry=actionRegistry;
  put(KeyStroke.getPressed(SWT.F2,0),actionRegistry.getAction(GEFActionConstants.DIRECT_EDIT));
  tableDelgate=new TableCellKeyDelegate(viewer,actionRegistry);
}",0.9799196787148594
77898,"/** 
 * Default Constuctor.
 */
public TableCellKeyDelegate(GraphicalViewer viewer){
  super(viewer);
}","/** 
 * Default Constuctor.
 */
public TableCellKeyDelegate(GraphicalViewer viewer,ActionRegistry actionRegistry){
  super(viewer);
  this.actionRegistry=actionRegistry;
  put(KeyStroke.getPressed('r',114,SWT.ALT | SWT.SHIFT),actionRegistry.getAction(SelectRowAction.ID));
  put(KeyStroke.getPressed('R',114,SWT.ALT | SWT.SHIFT),actionRegistry.getAction(SelectRowAction.ID));
  put(KeyStroke.getPressed('c',99,SWT.ALT | SWT.SHIFT),actionRegistry.getAction(SelectColumnAction.ID));
  put(KeyStroke.getPressed('C',99,SWT.ALT | SWT.SHIFT),actionRegistry.getAction(SelectColumnAction.ID));
}",0.2985507246376812
77899,"/** 
 * Get vector from the list.
 * @param list
 * @return
 */
private SelectItemChoice[] getVectorFromList(List list){
  SelectItemChoice[] selectionList=new SelectItemChoice[list.size()];
  for (int i=0; i < list.size(); i++) {
    selectionList[i].setValue((String)list.get(i));
  }
  return selectionList;
}","/** 
 * Get vector from the list.
 * @param list
 * @return
 */
private SelectItemChoice[] getVectorFromList(List list){
  SelectItemChoice[] selectionList=new SelectItemChoice[list.size()];
  for (int i=0; i < list.size(); i++) {
    SelectItemChoice item=(SelectItemChoice)list.get(i);
    selectionList[i]=new SelectItemChoice(item.getValue(),item.getLabel());
  }
  return selectionList;
}",0.8312056737588652
77900,"private List doQueryCascadeParameterSelectionList(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item != null && item.getValue() != null) {
        try {
          selectionList.add(index++,(String)DataTypeUtil.convert(item.getValue(),DataType.STRING_TYPE));
        }
 catch (        BirtException e) {
          throw new ReportServiceException(e.getLocalizedMessage());
        }
      }
    }
  }
  return selectionList;
}","private List doQueryCascadeParameterSelectionList(IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options) throws RemoteException, ReportServiceException {
  List selectionList=new ArrayList();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    Iterator iList=list.iterator();
    int index=0;
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item != null && item.getValue() != null) {
        try {
          SelectItemChoice selectItemChoice=new SelectItemChoice();
          selectItemChoice.setLabel(item.getLabel());
          selectItemChoice.setValue((String)DataTypeUtil.convert(item.getValue(),DataType.STRING_TYPE));
          selectionList.add(index++,selectItemChoice);
        }
 catch (        BirtException e) {
          throw new ReportServiceException(e.getLocalizedMessage());
        }
      }
    }
  }
  return selectionList;
}",0.8832228454869965
77901,"protected void selectElement(final Object element,final boolean edit){
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (element instanceof ReportItemHandle) {
        IWorkbenchPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().getActivePart();
        if (part instanceof AbstractMultiPageEditor) {
          IEditorPart epart=((AbstractMultiPageEditor)part).getActivePageInstance();
          if (epart instanceof GraphicalEditorWithFlyoutPalette) {
            GraphicalViewer viewer=((GraphicalEditorWithFlyoutPalette)epart).getGraphicalViewer();
            Object cpart=viewer.getEditPartRegistry().get(element);
            if (cpart instanceof EditPart) {
              viewer.flush();
              viewer.select((EditPart)cpart);
            }
            if (edit && cpart instanceof LabelEditPart) {
              ((LabelEditPart)cpart).performDirectEdit();
            }
          }
        }
 else         if (part instanceof IReportEditor) {
          IEditorPart activeEditor=((IReportEditor)part).getEditorPart();
          if (activeEditor instanceof AbstractMultiPageEditor) {
            IEditorPart epart=((AbstractMultiPageEditor)activeEditor).getActivePageInstance();
            if (epart instanceof GraphicalEditorWithFlyoutPalette) {
              GraphicalViewer viewer=((GraphicalEditorWithFlyoutPalette)epart).getGraphicalViewer();
              Object cpart=viewer.getEditPartRegistry().get(element);
              if (cpart instanceof EditPart) {
                viewer.flush();
                viewer.select((EditPart)cpart);
              }
              if (edit && cpart instanceof LabelEditPart) {
                ((LabelEditPart)cpart).performDirectEdit();
              }
 else               if (edit && cpart instanceof ImageEditPart) {
                ((ImageEditPart)cpart).performDirectEdit();
              }
            }
          }
        }
      }
    }
  }
);
}","protected void selectElement(final Object element,final boolean edit){
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (element instanceof ReportItemHandle) {
        IWorkbenchPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().getActivePart();
        if (part instanceof AbstractMultiPageEditor) {
          IEditorPart epart=((AbstractMultiPageEditor)part).getActivePageInstance();
          if (epart instanceof GraphicalEditorWithFlyoutPalette) {
            GraphicalViewer viewer=((GraphicalEditorWithFlyoutPalette)epart).getGraphicalViewer();
            Object cpart=viewer.getEditPartRegistry().get(element);
            if (cpart instanceof EditPart) {
              viewer.flush();
              viewer.select((EditPart)cpart);
            }
            if (edit && cpart instanceof LabelEditPart) {
              ((LabelEditPart)cpart).performDirectEdit();
            }
          }
        }
 else         if (part instanceof IReportEditor) {
          IEditorPart activeEditor=((IReportEditor)part).getEditorPart();
          if (activeEditor instanceof AbstractMultiPageEditor) {
            IEditorPart epart=((AbstractMultiPageEditor)activeEditor).getActivePageInstance();
            if (epart instanceof GraphicalEditorWithFlyoutPalette) {
              GraphicalViewer viewer=((GraphicalEditorWithFlyoutPalette)epart).getGraphicalViewer();
              Object cpart=viewer.getEditPartRegistry().get(element);
              if (cpart instanceof EditPart) {
                viewer.flush();
                viewer.select((EditPart)cpart);
              }
              if (edit && cpart instanceof LabelEditPart) {
                ((LabelEditPart)cpart).performDirectEdit();
              }
 else               if (edit && cpart instanceof ImageEditPart) {
                ((ImageEditPart)cpart).performDirectEdit();
              }
 else               if (edit && cpart instanceof ExtendedEditPart) {
                ((ExtendedEditPart)cpart).performDirectEdit();
              }
            }
          }
        }
      }
    }
  }
);
}",0.9638318670576737
77902,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  if (baseURL == null) {
    baseURL=""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (!""String_Node_Str"".equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(""String_Node_Str"" + format);
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=valueObj.toString();
            link.append(""String_Node_Str"" + URLEncoder.encode(key,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(value,""String_Node_Str""));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(""String_Node_Str"");
    if (!""String_Node_Str"".equalsIgnoreCase(format) && action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(""String_Node_Str"") > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null) {
    if (context instanceof HTMLRenderContext) {
      baseURL=((HTMLRenderContext)context).getBaseURL();
    }
    if (context instanceof PDFRenderContext) {
      baseURL=((PDFRenderContext)context).getBaseURL();
    }
  }
  if (baseURL == null) {
    baseURL=""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (!""String_Node_Str"".equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(""String_Node_Str"" + format);
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=valueObj.toString();
            link.append(""String_Node_Str"" + URLEncoder.encode(key,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(value,""String_Node_Str""));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(""String_Node_Str"");
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(""String_Node_Str"") > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9538658692866296
77903,"protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.PREFERENCE_CHART);
  Composite cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    cmpTop.setLayout(layout);
  }
  btnEnableLivePreview=new Button(cmpTop,SWT.CHECK);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnEnableLivePreview.setLayoutData(gd);
    btnEnableLivePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnableLivePreview.setSelection(ChartReportItemUIActivator.getDefault().getPluginPreferences().getBoolean(ChartReportItemUIActivator.PREFERENCE_ENALBE_LIVE));
  }
  txtMaxRow=new IntegerFieldEditor(ChartReportItemUIActivator.PREFERENCE_MAX_ROW,Messages.getString(""String_Node_Str""),cmpTop);
{
    txtMaxRow.setErrorMessage(Messages.getString(""String_Node_Str"",new Object[]{new Integer(MAX_ROW_LIMIT)}));
    txtMaxRow.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
    txtMaxRow.setValidRange(1,MAX_ROW_LIMIT);
    txtMaxRow.setEmptyStringAllowed(false);
    txtMaxRow.setStringValue(ChartReportItemUIActivator.getDefault().getPluginPreferences().getString(ChartReportItemUIActivator.PREFERENCE_MAX_ROW));
    txtMaxRow.setPage(this);
    txtMaxRow.setPropertyChangeListener(this);
  }
  return cmpTop;
}","protected Control createContents(Composite parent){
  PlatformUI.getWorkbench().getHelpSystem().setHelp(parent,ChartHelpContextIds.PREFERENCE_CHART);
  Composite cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    cmpTop.setLayout(layout);
  }
  btnEnableLivePreview=new Button(cmpTop,SWT.CHECK);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnEnableLivePreview.setLayoutData(gd);
    btnEnableLivePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnableLivePreview.setSelection(ChartReportItemUIActivator.getDefault().getPluginPreferences().getBoolean(ChartReportItemUIActivator.PREFERENCE_ENALBE_LIVE));
  }
  txtMaxRow=new IntegerFieldEditor(ChartReportItemUIActivator.PREFERENCE_MAX_ROW,Messages.getString(""String_Node_Str""),cmpTop);
{
    txtMaxRow.setErrorMessage(Messages.getString(""String_Node_Str"",new Object[]{new Integer(MAX_ROW_LIMIT)}));
    txtMaxRow.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
    txtMaxRow.setValidRange(1,MAX_ROW_LIMIT);
    txtMaxRow.setEmptyStringAllowed(false);
    txtMaxRow.setStringValue(ChartReportItemUIActivator.getDefault().getPluginPreferences().getString(ChartReportItemUIActivator.PREFERENCE_MAX_ROW));
    txtMaxRow.setPage(this);
    txtMaxRow.setPropertyChangeListener(this);
  }
  return cmpTop;
}",0.9777274443186108
77904,"private void createOperatorsBar(Composite parent){
  Operator[] operators=provider.getOperators();
  if (operators == null || operators.length == 0) {
    return;
  }
  Composite operatorsBar=new Composite(parent,SWT.NONE);
  operatorsBar.setLayout(new GridLayout(2,false));
  operatorsBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lable=new Label(operatorsBar,SWT.NONE);
  lable.setText(LABEL_OPERATORS);
  lable.setLayoutData(new GridData(70,SWT.DEFAULT));
  Composite operatorsArea=new Composite(operatorsBar,SWT.NONE);
  operatorsArea.setLayout(UIUtil.createGridLayoutWithoutMargin(operators.length,true));
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Button button=(Button)e.getSource();
      insertText((String)button.getData());
    }
  }
;
  for (int i=0; i < operators.length; i++) {
    Button button=new Button(operatorsArea,SWT.PUSH);
    button.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (operators[i] != IExpressionProvider.OPERATOR_SEPARATOR) {
      button.setData(operators[i].insertString);
      String text=operators[i].symbol;
      if (text.indexOf(""String_Node_Str"") != -1) {
        text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      button.setText(text);
      button.setToolTipText(operators[i].tooltip);
      button.addSelectionListener(selectionAdapter);
    }
 else {
      button.setVisible(false);
    }
  }
}","private void createOperatorsBar(Composite parent){
  Operator[] operators=provider.getOperators();
  if (operators == null || operators.length == 0) {
    return;
  }
  Composite operatorsBar=new Composite(parent,SWT.NONE);
  operatorsBar.setLayout(new GridLayout(2,false));
  operatorsBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lable=new Label(operatorsBar,SWT.NONE);
  lable.setText(LABEL_OPERATORS);
  lable.setLayoutData(new GridData(70,SWT.DEFAULT));
  Composite operatorsArea=new Composite(operatorsBar,SWT.NONE);
  operatorsArea.setLayout(UIUtil.createGridLayoutWithoutMargin(operators.length,true));
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Button button=(Button)e.getSource();
      insertText((String)button.getData());
    }
  }
;
  for (int i=0; i < operators.length; i++) {
    Button button=new Button(operatorsArea,SWT.PUSH);
    button.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (operators[i] != IExpressionProvider.OPERATOR_SEPARATOR) {
      button.setData(operators[i].insertString);
      String text=operators[i].symbol;
      if (text.indexOf(""String_Node_Str"") != -1) {
        text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      button.setText(text);
      button.addSelectionListener(selectionAdapter);
    }
 else {
      button.setVisible(false);
    }
  }
}",0.9824561403508772
77905,"/** 
 * Retrieves all distinct values of a data set column and return them in a Collection.
 * @param dataSet Handle of data set to query
 * @param inputParamBindings An iterator of ParamBindingHandle objects that defines bindings for the data set's input parameters
 * @param columnBindings An iterator of ComputedColumnHandle objects that define all column binding expressions
 * @param columnName Name of the bound column to retrieve values for
 * @return If boundColumnName is bound to a single data set column, thismethod returns a collection of distinct values for that data set column. If boundColumnName to mapped to any other type of expressions, an empty collection will be returned.
 */
public abstract Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName) throws BirtException ;","/** 
 * Retrieves all distinct values of a data set column based on searchInfo and return in a Collection.
 * @param dataSet Handle of data set to query
 * @param inputParamBindings An iterator of ParamBindingHandle objects that defines bindings for the data set's input parameters
 * @param columnBindings An iterator of ComputedColumnHandle objects that define all column binding expressions
 * @param boundColumnName Name of the bound column to retrieve values for
 * @param requestInfo Information on result set retrieving(like start index,return row number...)
 * @return
 * @throws BirtException
 */
public abstract Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException ;",0.7377938517179023
77906,"public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName) throws BirtException {
}","public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  IQueryResults queryResults=getGroupingQueryResults(dataSet,inputParamBindings,columnBindings,boundColumnName);
  IResultIterator resultIt=queryResults.getResultIterator();
  int maxRowCount=-1;
  if (requestInfo != null) {
    resultIt.moveTo(requestInfo.getStartRow());
    maxRowCount=requestInfo.getMaxRow();
  }
  ArrayList values=new ArrayList();
  while (resultIt.next() && maxRowCount != 0) {
    Object value=resultIt.getValue(boundColumnName);
    values.add(value);
    resultIt.skipToEnd(1);
    maxRowCount--;
  }
  resultIt.close();
  queryResults.close();
  return values;
}",0.3397849462365591
77907,"/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location);
  if (!module.getLibraries().contains(library)) {
    throw new LibraryException(library,new String[]{library == null ? null : library.getNamespace()},LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startSilentTrans(true);
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  activityStack.commit();
  activityStack.flush();
  LibraryReloadedEvent event=new LibraryReloadedEvent(module.getLibraryByLocation(location));
  module.broadcast(event);
}","/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location);
  if (!module.getLibraries().contains(library)) {
    throw new LibraryException(library,new String[]{library == null ? null : library.getNamespace()},LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startSilentTrans(true);
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  activityStack.commit();
  activityStack.flush();
  LibraryReloadedEvent event=new LibraryReloadedEvent(module.getLibraryByLocation(url.toExternalForm()));
  module.broadcast(event);
}",0.992161254199328
77908,"protected void pageChange(int newPageIndex){
  int oldPageIndex=getCurrentPage();
  if (oldPageIndex == newPageIndex) {
    return;
  }
  if (oldPageIndex != -1) {
    Object oldPage=pages.get(oldPageIndex);
    Object newPage=pages.get(newPageIndex);
    super.pageChange(newPageIndex);
    updateRelatedViews();
    if (!prePageChanges(oldPage,newPage)) {
      super.setActivePage(oldPageIndex);
      updateRelatedViews();
      return;
    }
  }
 else {
    super.pageChange(newPageIndex);
    updateRelatedViews();
  }
}","protected void pageChange(int newPageIndex){
  int oldPageIndex=getCurrentPage();
  if (oldPageIndex == newPageIndex) {
    return;
  }
  if (oldPageIndex != -1) {
    Object oldPage=pages.get(oldPageIndex);
    Object newPage=pages.get(newPageIndex);
    super.pageChange(newPageIndex);
    updateRelatedViews();
    if (!prePageChanges(oldPage,newPage)) {
      super.setActivePage(oldPageIndex);
      updateRelatedViews();
      return;
    }
  }
 else {
    super.pageChange(newPageIndex);
  }
  updateRelatedViews();
}",0.9942857142857144
77909,"protected boolean performInsert(Object model,SlotHandle slotHandle,String type,String position,Map extendData) throws Exception {
  DesignElementHandle elementHandle=createElement(slotHandle,type);
  if (extendData != null) {
    extendData.put(IRequestConstants.REQUEST_KEY_RESULT,elementHandle);
  }
  if (elementHandle == null) {
    return false;
  }
  if (position == InsertAction.CURRENT) {
    slotHandle.add(elementHandle);
  }
 else {
    int pos=DNDUtil.calculateNextPosition(model,DNDUtil.handleValidateTargetCanContain(model,elementHandle,true));
    if (pos > 0 && position == InsertAction.ABOVE) {
      pos--;
    }
    if (pos == -1) {
      slotHandle.add(elementHandle);
    }
 else {
      slotHandle.add(elementHandle,pos);
    }
  }
  if (elementHandle instanceof ExtendedItemHandle) {
    if (!ElementProcessorFactory.createProcessor(elementHandle).editElement(elementHandle)) {
      return false;
    }
  }
  return true;
}","protected boolean performInsert(Object model,SlotHandle slotHandle,String type,String position,Map extendData) throws Exception {
  DesignElementHandle elementHandle=createElement(slotHandle,type);
  if (extendData != null) {
    extendData.put(IRequestConstants.REQUEST_KEY_RESULT,elementHandle);
  }
  if (elementHandle == null) {
    return false;
  }
  if (position == InsertAction.CURRENT) {
    slotHandle.add(elementHandle);
  }
 else {
    int pos=DNDUtil.calculateNextPosition(model,DNDUtil.handleValidateTargetCanContain(model,elementHandle,true));
    if (pos > 0 && position == InsertAction.ABOVE) {
      pos--;
    }
    if (pos == -1) {
      slotHandle.add(elementHandle);
    }
 else {
      slotHandle.add(elementHandle,pos);
    }
  }
  return true;
}",0.8817705299941759
77910,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  boolean useResultHints=dataSetHandle instanceof ScriptDataSetHandle;
  return new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,useResultHints).executeQuery(query).getResultMetaData();
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  boolean useResultHints=needsUseResultHint(dataSetHandle);
  return new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,useResultHints).executeQuery(query).getResultMetaData();
}",0.9200415368639668
77911,"private void populateEventData(TypedEvent event){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  if (selection.length > 0) {
    Object obj=selection[0].getData();
    if (obj instanceof DbObject) {
      event.data=getDnDString(((DbObject)obj).getName());
    }
 else     if (obj instanceof Procedure) {
      event.data=getDnDString(((Procedure)obj).getProcedureNameWithSchema());
    }
 else {
      event.data=getDnDString(selection[0].getData());
    }
  }
}","private void populateEventData(TypedEvent event){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  if (selection.length > 0) {
    String data=""String_Node_Str"";
    for (int i=0; i < selection.length; i++) {
      Object obj=selection[i].getData();
      if (obj instanceof DbObject) {
        data+=getDnDString(((DbObject)obj).getName());
      }
 else       if (obj instanceof Procedure) {
        data+=getDnDString(((Procedure)obj).getProcedureNameWithSchema());
      }
 else {
        data+=getDnDString(obj);
      }
      data+=i != selection.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    event.data=data;
  }
}",0.4187279151943462
77912,"/** 
 * get parsed parameters as string.
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsString(Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    String paramValue=getParamValueAsString(request,parameter);
    if (paramValue == null && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || (this.configMap != null && !this.configMap.containsKey(paramName)))) {
      paramValue=this.getParameterDefaultValues(reportDesignHandle,paramName,options);
    }
    if (paramName != null)     params.put(paramName,paramValue);
  }
  return params;
}","/** 
 * get parsed parameters as string.
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsString(Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    String paramValue=getParamValueAsString(request,parameter);
    if (paramValue == null && !ParameterAccessor.isReportParameterExist(request,paramName) && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || (this.configMap != null && !this.configMap.containsKey(paramName)))) {
      paramValue=this.getParameterDefaultValues(reportDesignHandle,paramName,options);
    }
    if (paramName != null)     params.put(paramName,paramValue);
  }
  return params;
}",0.9731318219983208
77913,"/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected String getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
  }
  if (paramValue != null)   return paramValue;
  Object paramValueObj=null;
  if (this.isDesigner && (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
    paramValueObj=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),paramValueObj,locale);
  }
  if (paramValueObj != null)   paramValue=paramValueObj.toString();
  return paramValue;
}","/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected String getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
    return paramValue;
  }
  Object paramValueObj=null;
  if (this.isDesigner && (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
    paramValueObj=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),paramValueObj,locale);
  }
  if (paramValueObj != null)   paramValue=paramValueObj.toString();
  return paramValue;
}",0.9696444058976584
77914,"/** 
 * Exports one design to library.
 * @param designToExport handle of the report design to export
 * @param targetLibraryHandle handle of target library
 * @param canOverride indicates whether the element with the same name in target library will be overriden.
 * @param genDefaultName if true, a default name will be generated if an element doesn't has a name. if false, an exception will be throwed indicate that the element to export must has a name
 * @throws SemanticException if error encountered when element name is duplicate in the target library.
 */
public static void exportDesign(ReportDesignHandle designToExport,LibraryHandle targetLibraryHandle,boolean canOverride,boolean genDefaultName) throws SemanticException {
  ElementExporter exporter=new ElementExporter(targetLibraryHandle);
  exporter.exportDesign(designToExport,canOverride,genDefaultName);
}","/** 
 * Exports one design to library.
 * @param designToExport handle of the report design to export
 * @param targetLibraryHandle handle of target library
 * @param canOverride indicates whether the element with the same name in target library will be overriden.
 * @param genDefaultName if true, a default name will be generated if an element doesn't has a name. if false, an exception will be throwed indicate that the element to export must has a name
 * @throws SemanticException if error encountered when element name is duplicate in the target library.
 */
public static void exportDesign(ReportDesignHandle designToExport,LibraryHandle targetLibraryHandle,boolean canOverride,boolean genDefaultName) throws SemanticException {
  if (ModelUtil.hasLibrary(designToExport,targetLibraryHandle)) {
    throw new SemanticException(designToExport.getElement(),LibraryException.DESIGN_EXCEPTION_LIBRARY_INCLUDED_RECURSIVELY);
  }
  ElementExporter exporter=new ElementExporter(targetLibraryHandle);
  exporter.exportDesign(designToExport,canOverride,genDefaultName);
}",0.8543489449305198
77915,"public void renderLegendGraphic(IPrimitiveRenderer ipr,Legend lg,Fill fPaletteEntry,Bounds bo) throws ChartException {
  final LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  if (fPaletteEntry == null) {
    fPaletteEntry=ColorDefinitionImpl.RED();
  }
  final double dXOffset=(bo.getWidth() - bo.getHeight()) / 2;
  Location[] loaFrontFace=null;
  loaFrontFace=new Location[4];
  loaFrontFace[0]=LocationImpl.create(bo.getLeft() + dXOffset,bo.getTop());
  loaFrontFace[1]=LocationImpl.create(bo.getLeft() + dXOffset,bo.getTop() + bo.getHeight());
  loaFrontFace[2]=LocationImpl.create(bo.getLeft() + dXOffset + bo.getHeight(),bo.getTop() + bo.getHeight());
  loaFrontFace[3]=LocationImpl.create(bo.getLeft() + dXOffset + bo.getHeight(),bo.getTop());
  renderPlane(ipr,StructureSource.createLegend(lg),loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),3,false);
}","public void renderLegendGraphic(IPrimitiveRenderer ipr,Legend lg,Fill fPaletteEntry,Bounds bo) throws ChartException {
  final LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  if (fPaletteEntry == null) {
    fPaletteEntry=ColorDefinitionImpl.RED();
  }
  final double dXOffset=(bo.getWidth() - bo.getHeight()) / 2;
  Location[] loaFrontFace=null;
  loaFrontFace=new Location[4];
  loaFrontFace[0]=LocationImpl.create(bo.getLeft() + dXOffset,bo.getTop());
  loaFrontFace[1]=LocationImpl.create(bo.getLeft() + dXOffset,bo.getTop() + bo.getHeight());
  loaFrontFace[2]=LocationImpl.create(bo.getLeft() + dXOffset + bo.getHeight(),bo.getTop() + bo.getHeight());
  loaFrontFace[3]=LocationImpl.create(bo.getLeft() + dXOffset + bo.getHeight(),bo.getTop());
  renderPlane(ipr,StructureSource.createLegend(lg),loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),3 * getDeviceScale(),false);
}",0.9898232458489556
77916,"public void renderLegendGraphic(IPrimitiveRenderer ipr,Legend lg,Fill fPaletteEntry,Bounds bo) throws ChartException {
  final LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  final double dXOffset=(bo.getWidth() - bo.getHeight()) / 2;
  Location[] loaFrontFace=null;
  loaFrontFace=new Location[4];
  loaFrontFace[0]=LocationImpl.create(bo.getLeft() + dXOffset,bo.getTop());
  loaFrontFace[1]=LocationImpl.create(bo.getLeft() + dXOffset,bo.getTop() + bo.getHeight());
  loaFrontFace[2]=LocationImpl.create(bo.getLeft() + dXOffset + bo.getHeight(),bo.getTop() + bo.getHeight());
  loaFrontFace[3]=LocationImpl.create(bo.getLeft() + dXOffset + bo.getHeight(),bo.getTop());
  renderPlane(ipr,StructureSource.createLegend(lg),loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),3,false);
}","public void renderLegendGraphic(IPrimitiveRenderer ipr,Legend lg,Fill fPaletteEntry,Bounds bo) throws ChartException {
  final LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  final double dXOffset=(bo.getWidth() - bo.getHeight()) / 2;
  Location[] loaFrontFace=null;
  loaFrontFace=new Location[4];
  loaFrontFace[0]=LocationImpl.create(bo.getLeft() + dXOffset,bo.getTop());
  loaFrontFace[1]=LocationImpl.create(bo.getLeft() + dXOffset,bo.getTop() + bo.getHeight());
  loaFrontFace[2]=LocationImpl.create(bo.getLeft() + dXOffset + bo.getHeight(),bo.getTop() + bo.getHeight());
  loaFrontFace[3]=LocationImpl.create(bo.getLeft() + dXOffset + bo.getHeight(),bo.getTop());
  renderPlane(ipr,StructureSource.createLegend(lg),loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),3 * getDeviceScale(),false);
}",0.9888693614528412
77917,"/** 
 * @param groups
 * @param groupIndex
 * @param deletedNum
 * @param level
 */
private static void resetStatus(List[] groups,int groupIndex,int deletedNum,int level){
  List levelList=groups[level];
  GroupInfo groupInfo=(GroupInfo)levelList.get(groupIndex);
  groupInfo.firstChild=-2;
}","/** 
 * @param groups
 * @param groupIndex
 * @param deletedNum
 * @param level
 */
private static void resetStatus(List[] groups,int groupIndex,int deletedNum,int level){
  List levelList=groups[level];
  GroupInfo deletedGroup=(GroupInfo)levelList.get(groupIndex);
  int index=groupIndex + 1;
  GroupInfo groupInfo;
  while (index < levelList.size()) {
    groupInfo=(GroupInfo)levelList.get(index);
    if (groupInfo.firstChild > 0 && groupInfo.firstChild > deletedGroup.firstChild)     groupInfo.firstChild=groupInfo.firstChild - deletedNum;
    index++;
  }
  deletedGroup.firstChild=-2;
}",0.618510158013544
77918,"protected QueryExecutor newExecutor(){
  return new IVDataSourceExecutor(engine.getSharedScope(),queryDefn,new AggregateTable());
}","protected QueryExecutor newExecutor(){
  return new IVDataSourceExecutor(engine.getSharedScope(),queryDefn,this.preparedQuery.getAggrTable());
}",0.8945454545454545
77919,"/** 
 * Look up a user-defined message for the given locale in the referenced message files, the search uses a reduced form of Java locale-driven search algorithm: Language&Country, language, default.
 * @param resourceKey Resource key of the user defined message.
 * @param locale locale of message, if the input <code>locale</code> is <code>null</code>, the locale for the current thread will be used instead.
 * @return the corresponding locale-dependent messages. Return<code>""""</code> if resoueceKey is blank or the message is not found.
 */
public String getMessage(String resourceKey,ULocale locale){
  Iterator bundleIter=gatherMessageBundles(locale).iterator();
  while (bundleIter.hasNext()) {
    String translation=(String)((PropertyResourceBundle)bundleIter.next()).handleGetObject(resourceKey);
    if (translation != null)     return translation;
  }
  return ""String_Node_Str"";
}","/** 
 * Look up a user-defined message for the given locale in the referenced message files, the search uses a reduced form of Java locale-driven search algorithm: Language&Country, language, default.
 * @param resourceKey Resource key of the user defined message.
 * @param locale locale of message, if the input <code>locale</code> is <code>null</code>, the locale for the current thread will be used instead.
 * @return the corresponding locale-dependent messages. Return<code>""""</code> if resoueceKey is blank. Return <code>null</code> if the message is not found.
 */
public String getMessage(String resourceKey,ULocale locale){
  Iterator bundleIter=gatherMessageBundles(locale).iterator();
  while (bundleIter.hasNext()) {
    String translation=(String)((PropertyResourceBundle)bundleIter.next()).handleGetObject(resourceKey);
    if (translation != null)     return translation;
  }
  return null;
}",0.9706045479755964
77920,"/** 
 * Finds user-defined messages for the given locale. <p> First we look up in the report itself, then look into the referenced message file. Each search uses a reduced form of Java locale-driven search algorithm: Language&Country, language, default.
 * @param resourceKey Resource key of the user defined message.
 * @param locale locale of message, if the input <code>locale</code> is <code>null</code>, the locale for the current thread will be used instead.
 * @return the corresponding locale-dependent messages. Return<code>""""</code> if translation can not be found, or <code>resourceKey</code> is blank or <code>null</code>.
 */
public String getMessage(String resourceKey,ULocale locale){
  if (StringUtil.isBlank(resourceKey))   return ""String_Node_Str"";
  if (locale == null)   locale=ThreadResources.getLocale();
  String msg=translations.getMessage(resourceKey,locale);
  if (msg != null)   return msg;
  String baseName=getStringProperty(this,INCLUDE_RESOURCE_PROP);
  if (baseName == null)   return ""String_Node_Str"";
  msg=BundleHelper.getHelper(this,baseName).getMessage(resourceKey,locale);
  return msg;
}","/** 
 * Finds user-defined messages for the given locale. <p> First we look up in the report itself, then look into the referenced message file. Each search uses a reduced form of Java locale-driven search algorithm: Language&Country, language, default.
 * @param resourceKey Resource key of the user defined message.
 * @param locale locale of message, if the input <code>locale</code> is <code>null</code>, the locale for the current thread will be used instead.
 * @return the corresponding locale-dependent messages. Return<code>""""</code> if translation can not be found, or <code>resourceKey</code> is blank or <code>null</code>.
 */
public String getMessage(String resourceKey,ULocale locale){
  if (StringUtil.isBlank(resourceKey))   return null;
  if (locale == null)   locale=ThreadResources.getLocale();
  String msg=translations.getMessage(resourceKey,locale);
  if (msg != null)   return msg;
  String baseName=getStringProperty(this,INCLUDE_RESOURCE_PROP);
  if (baseName == null)   return null;
  msg=BundleHelper.getHelper(this,baseName).getMessage(resourceKey,locale);
  return msg;
}",0.981132075471698
77921,"/** 
 * @param callNode
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void compileAggregationFunction(Node callNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node firstChild=callNode.getFirstChild();
  compileComplexExpr(firstChild,tree,columnExprList);
}","/** 
 * @param callNode
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void compileAggregationFunction(Node callNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  Node firstChild=callNode.getFirstChild();
  if (firstChild.getType() != Token.GETPROP)   return;
  Node getPropLeftChild=firstChild.getFirstChild();
  if (getPropLeftChild.getType() == Token.NAME && getPropLeftChild.getString().equals(TOTAL))   hasAggregation=true;
  compileComplexExpr(firstChild,tree,columnExprList);
}",0.7345971563981043
77922,"public void createPageCustomControl(Composite parent){
  setControl(createPageControl(parent));
  initializeControl();
}","public void createPageCustomControl(Composite parent){
  setControl(createPageControl(parent));
  initializeControl();
  getControl().setFocus();
  PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),this.CONEXT_ID_DATASET_JDBC);
}",0.6629834254143646
77923,"void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.verticalSpacing=10;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverList=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : ""String_Node_Str"";
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(""String_Node_Str"");
        }
      }
      userName.setText(""String_Node_Str"");
      password.setText(""String_Node_Str"");
      updateTestButton();
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  new Label(content,SWT.NONE);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
}","void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.verticalSpacing=10;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverList=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : ""String_Node_Str"";
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(""String_Node_Str"");
        }
      }
      userName.setText(""String_Node_Str"");
      password.setText(""String_Node_Str"");
      updateTestButton();
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  new Label(content,SWT.NONE);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  content.setFocus();
  PlatformUI.getWorkbench().getHelpSystem().setHelp(content,CONEXT_ID_DATASOURCE_JDBC);
}",0.9842180774748924
77924,"void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  content.setLayout(layout);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_driverClass=new Label(content,SWT.LEFT);
  m_driverClass.setText(SampleDBConstants.DRIVER_CLASS);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_driverURL=new Label(content,SWT.LEFT);
  m_driverURL.setText(SampleDBConstants.DRIVER_URL);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_sampleUser=new Label(content,SWT.LEFT);
  m_sampleUser.setText(SampleDBJDBCConnectionFactory.getDbUser());
  setMessage(DEFAULT_MESSAGE);
}","void createCustomControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  content.setLayout(layout);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_driverClass=new Label(content,SWT.LEFT);
  m_driverClass.setText(SampleDBConstants.DRIVER_CLASS);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_driverURL=new Label(content,SWT.LEFT);
  m_driverURL.setText(SampleDBConstants.DRIVER_URL);
  new Label(content,SWT.LEFT).setText(Messages.getMessage(""String_Node_Str""));
  m_sampleUser=new Label(content,SWT.LEFT);
  m_sampleUser.setText(SampleDBJDBCConnectionFactory.getDbUser());
  setMessage(DEFAULT_MESSAGE);
  content.setFocus();
  PlatformUI.getWorkbench().getHelpSystem().setHelp(content,CONEXT_ID_DATASOURCE_SAMPLEDB);
}",0.9305724725943972
77925,"public WizardBase(){
  TasksManager.instance();
  availableTasks=new LinkedHashMap();
  vTaskLabels=new Vector();
  vTaskIDs=new Vector();
}","public WizardBase(){
  this(""String_Node_Str"");
}",0.3492063492063492
77926,"protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.verticalSpacing=0;
    layout.horizontalSpacing=0;
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    composite.setFont(parent.getFont());
  }
  Label lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmpTaskContainer=new CTabFolder(composite,SWT.TOP | SWT.FLAT);
{
    cmpTaskContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpTaskContainer.setTabHeight(25);
    cmpTaskContainer.addSelectionListener(this);
  }
  lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  configureTaskArea(tmpTaskArray,tmpTopTaskId);
  FormData layoutData=(FormData)getTitleImageLabel().getParent().getLayoutData();
  layoutData.width=iWizardWidthMinimum;
  return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.verticalSpacing=0;
    layout.horizontalSpacing=0;
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    composite.setFont(parent.getFont());
  }
  Label lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmpTaskContainer=new CTabFolder(composite,SWT.TOP | SWT.FLAT);
{
    cmpTaskContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpTaskContainer.setTabHeight(25);
    cmpTaskContainer.addSelectionListener(this);
  }
  lblSeparator=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
  lblSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  FormData layoutData=(FormData)getTitleImageLabel().getParent().getLayoutData();
  layoutData.width=iWizardWidthMinimum;
  return composite;
}",0.977859778597786
77927,"protected void initializeBounds(){
  super.initializeBounds();
  getShell().setLocation((getShell().getDisplay().getClientArea().width / 2 - (getShell().getSize().x / 2)),(getShell().getDisplay().getClientArea().height / 2) - (getShell().getSize().y / 2));
}","protected void initializeBounds(){
  configureTaskArea(tmpTaskArray,tmpTopTaskId);
  super.initializeBounds();
  getShell().setLocation((getShell().getDisplay().getClientArea().width / 2 - (getShell().getSize().x / 2)),(getShell().getDisplay().getClientArea().height / 2) - (getShell().getSize().y / 2));
}",0.9148936170212766
77928,"public boolean preHandleMouseUp(){
  ExtendedItemHandle handle=DesignElementFactory.getInstance().newExtendedItem(null,extensionName);
  if (handle == null) {
    return false;
  }
  IReportItemBuilderUI builder=getbuilder();
  if (builder != null) {
    if (builder.open(handle) == Window.CANCEL) {
      return false;
    }
  }
  setModel(handle);
  return super.preHandleMouseUp();
}","public boolean preHandleMouseUp(){
  ExtendedItemHandle handle=DesignElementFactory.getInstance().newExtendedItem(null,extensionName);
  if (handle == null) {
    return false;
  }
  setModel(handle);
  return super.preHandleMouseUp();
}",0.593900481540931
77929,"protected void createEditPolicies(){
  installEditPolicy(EditPolicy.COMPONENT_ROLE,new ReportComponentEditPolicy());
}","protected void createEditPolicies(){
  installEditPolicy(EditPolicy.COMPONENT_ROLE,new ReportComponentEditPolicy(){
    public boolean understandsRequest(    Request request){
      if (RequestConstants.REQ_DIRECT_EDIT.equals(request.getType()) || RequestConstants.REQ_OPEN.equals(request.getType()) || ReportRequest.CREATE_ELEMENT.equals(request.getType()))       return true;
      return super.understandsRequest(request);
    }
  }
);
}",0.4193548387096774
77930,"protected void createFieldEditors(){
  super.createFieldEditors();
  GridData gdata;
  EditableComboFieldEditor widows=new EditableComboFieldEditor(StyleHandle.WIDOWS_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.WIDOWS_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.WIDOWS_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=96;
  widows.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(widows);
  EditableComboFieldEditor orphans=new EditableComboFieldEditor(StyleHandle.ORPHANS_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.ORPHANS_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.ORPHANS_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=96;
  orphans.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(orphans);
  addField(new SeparatorFieldEditor(getFieldEditorParent(),false));
  ComboBoxFieldEditor before=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_BEFORE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_BEFORE_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_BEFORE_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=100;
  before.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(before);
  ComboBoxFieldEditor inside=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_INSIDE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_INSIDE_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_INSIDE_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=100;
  inside.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(inside);
  ComboBoxFieldEditor after=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_AFTER_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_AFTER_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_AFTER_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=100;
  after.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(after);
}","protected void createFieldEditors(){
  super.createFieldEditors();
  GridData gdata;
  EditableComboFieldEditor widows=new EditableComboFieldEditor(StyleHandle.WIDOWS_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.WIDOWS_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.WIDOWS_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=96;
  widows.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(widows);
  EditableComboFieldEditor orphans=new EditableComboFieldEditor(StyleHandle.ORPHANS_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.ORPHANS_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.ORPHANS_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=96;
  orphans.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(orphans);
  addField(new SeparatorFieldEditor(getFieldEditorParent(),false));
  ComboBoxFieldEditor before=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_BEFORE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_BEFORE_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_BEFORE_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=120;
  before.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(before);
  ComboBoxFieldEditor inside=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_INSIDE_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_INSIDE_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_INSIDE_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=120;
  inside.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(inside);
  ComboBoxFieldEditor after=new ComboBoxFieldEditor(StyleHandle.PAGE_BREAK_AFTER_PROP,Messages.getString(((StyleHandle)model).getPropertyHandle(StyleHandle.PAGE_BREAK_AFTER_PROP).getDefn().getDisplayNameID()),getChoiceArray(StyleHandle.PAGE_BREAK_AFTER_PROP),getFieldEditorParent());
  gdata=new GridData();
  gdata.widthHint=120;
  after.getComboBoxControl(getFieldEditorParent()).setLayoutData(gdata);
  addField(after);
}",0.9986672589960016
77931,"protected void adjustGridLayout(){
  super.adjustGridLayout();
  ((GridData)name.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=166;
  ((GridData)color.getColorSelector().getLayoutData()).widthHint=96;
  ((GridData)size.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=88;
  ((GridData)size.getMeasureControl(getFieldEditorParent()).getLayoutData()).widthHint=50;
  ((GridData)style.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=170;
  ((GridData)weight.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=170;
}","protected void adjustGridLayout(){
  super.adjustGridLayout();
  ((GridData)name.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=166;
  ((GridData)color.getColorSelector().getLayoutData()).widthHint=96;
  ((GridData)size.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=108;
  ((GridData)size.getMeasureControl(getFieldEditorParent()).getLayoutData()).widthHint=50;
  ((GridData)style.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=170;
  ((GridData)weight.getComboBoxControl(getFieldEditorParent()).getLayoutData()).widthHint=170;
}",0.9974937343358397
77932,"private String getPatternForCategory(String category){
  String pattern;
  if (DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY.equals(category)) {
    String sym=""String_Node_Str"";
    Currency currency=Currency.getInstance(ULocale.getDefault());
    if (currency != null) {
      sym=currency.getSymbol();
    }
    pattern=sym + ""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.NUMBER_FORMAT_TYPE_FIXED.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.NUMBER_FORMAT_TYPE_PERCENT.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.NUMBER_FORMAT_TYPE_SCIENTIFIC.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else {
    pattern=""String_Node_Str"";
  }
  return pattern;
}","private String getPatternForCategory(String category){
  String pattern=null;
  if (DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY.equals(category)) {
    pattern=""String_Node_Str"";
    Currency currency=Currency.getInstance(ULocale.getDefault());
    if (currency != null) {
      String symbol=currency.getSymbol();
      NumberFormat formater=NumberFormat.getCurrencyInstance();
      String result=formater.format(1);
      if (result.endsWith(symbol)) {
        pattern=""String_Node_Str"";
      }
    }
  }
 else   if (DesignChoiceConstants.NUMBER_FORMAT_TYPE_FIXED.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.NUMBER_FORMAT_TYPE_PERCENT.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else   if (DesignChoiceConstants.NUMBER_FORMAT_TYPE_SCIENTIFIC.equals(category)) {
    pattern=""String_Node_Str"";
  }
 else {
    pattern=""String_Node_Str"";
  }
  return pattern;
}",0.8316597755463674
77933,"/** 
 * Test feature of aggregation expression 
 */
public void test_RunningAggregationExpression() throws Exception {
  String testSQL=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(testSQL);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",2),new ScriptExpression(""String_Node_Str"",2)};
  GroupDefinition[] groupDef=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDef[0].setKeyExpression(""String_Node_Str"");
  groupDef[1].setKeyExpression(""String_Node_Str"");
  QueryDefinition queryDefn=newReportQuery();
  queryDefn.addGroup(groupDef[0]);
  queryDefn.addGroup(groupDef[1]);
  queryDefn.addExpression(expressions[0],BaseTransform.ON_EACH_ROW);
  queryDefn.addExpression(expressions[1],BaseTransform.AFTER_LAST_ROW);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  assertTrue(resultIt.next());
  resultIt.getValue(expressions[0]);
  resultIt.getValue(expressions[1]);
}","/** 
 * Test feature of aggregation expression 
 */
public void test_RunningAggregationExpression() throws Exception {
  String testSQL=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(testSQL);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",2),new ScriptExpression(""String_Node_Str"",2)};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  GroupDefinition[] groupDef=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDef[0].setKeyExpression(""String_Node_Str"");
  groupDef[1].setKeyExpression(""String_Node_Str"");
  QueryDefinition queryDefn=newReportQuery();
  queryDefn.addGroup(groupDef[0]);
  queryDefn.addGroup(groupDef[1]);
  queryDefn.addResultSetExpression(names[0],expressions[0]);
  queryDefn.addResultSetExpression(names[1],expressions[1]);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(jsScope);
  IResultIterator resultIt=queryResults.getResultIterator();
  assertTrue(resultIt.next());
  resultIt.getValue(names[0]);
  resultIt.getValue(names[1]);
}",0.8782894736842105
77934,"/** 
 * filter on group with bottom N with invalid value
 * @throws Exception
 */
public void test_InvalidValueFilterGroup() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  int expreLength=expressions.length;
  int i=0;
  while (i < expreLength) {
    queryDefn.addExpression(expressions[i],BaseTransform.ON_EACH_ROW);
    i++;
  }
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_PERCENT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.setInterval(2);
  groupDefn.setIntervalRange(IGroupDefinition.MONTH_INTERVAL);
  groupDefn.addFilter(filterDefn);
  try {
    queryDefn.addGroup(groupDefn);
    IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
    IQueryResults queryResults=preparedQuery.execute(null);
    IResultIterator resultIt=queryResults.getResultIterator();
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","/** 
 * filter on group with bottom N with invalid value
 * @throws Exception
 */
public void test_InvalidValueFilterGroup() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  for (int i=0; i < expressions.length; i++) {
    queryDefn.addResultSetExpression(names[i],expressions[i]);
  }
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_PERCENT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.setInterval(2);
  groupDefn.setIntervalRange(IGroupDefinition.MONTH_INTERVAL);
  groupDefn.addFilter(filterDefn);
  try {
    queryDefn.addGroup(groupDefn);
    IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
    IQueryResults queryResults=preparedQuery.execute(null);
    IResultIterator resultIt=queryResults.getResultIterator();
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.9062388591800355
77935,"/** 
 * filter on group with bottom N with negative value
 * @throws Exception
 */
public void test_NegativeValueFilterGroup() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  int expreLength=expressions.length;
  int i=0;
  while (i < expreLength) {
    queryDefn.addExpression(expressions[i],BaseTransform.ON_EACH_ROW);
    i++;
  }
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_PERCENT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.setInterval(2);
  groupDefn.setIntervalRange(IGroupDefinition.MONTH_INTERVAL);
  groupDefn.addFilter(filterDefn);
  try {
    queryDefn.addGroup(groupDefn);
    IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
    IQueryResults queryResults=preparedQuery.execute(null);
    IResultIterator resultIt=queryResults.getResultIterator();
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}","/** 
 * filter on group with bottom N with negative value
 * @throws Exception
 */
public void test_NegativeValueFilterGroup() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  for (int i=0; i < expressions.length; i++) {
    queryDefn.addResultSetExpression(names[i],expressions[i]);
  }
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_PERCENT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.setInterval(2);
  groupDefn.setIntervalRange(IGroupDefinition.MONTH_INTERVAL);
  groupDefn.addFilter(filterDefn);
  try {
    queryDefn.addGroup(groupDefn);
    IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
    IQueryResults queryResults=preparedQuery.execute(null);
    IResultIterator resultIt=queryResults.getResultIterator();
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
}",0.906372374510502
77936,"/** 
 * Test feature of aggregation expression 
 */
public void test_FilteWithTopN() throws Exception {
  String testSQL=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(testSQL);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",2)};
  FilterDefinition filterDef=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""));
  QueryDefinition queryDefn=newReportQuery();
  queryDefn.addFilter(filterDef);
  queryDefn.addExpression(expressions[0],BaseTransform.ON_EACH_ROW);
  queryDefn.addExpression(expressions[1],BaseTransform.AFTER_LAST_ROW);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  outputQueryResult(resultIt,expressions);
  checkOutputFile();
}","/** 
 * Test feature of aggregation expression 
 */
public void test_FilteWithTopN() throws Exception {
  String testSQL=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(testSQL);
  ScriptExpression[] expressions=new ScriptExpression[2];
  expressions[0]=new ScriptExpression(""String_Node_Str"");
  expressions[1]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition filterDef=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""));
  QueryDefinition queryDefn=newReportQuery();
  queryDefn.addFilter(filterDef);
  queryDefn.addResultSetExpression(""String_Node_Str"",expressions[0]);
  queryDefn.addResultSetExpression(""String_Node_Str"",expressions[1]);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  outputQueryResult(resultIt,new String[]{""String_Node_Str"",""String_Node_Str""});
  checkOutputFile();
}",0.3054040654437283
77937,"/** 
 * filter on date time type column with operator Bottom N 
 */
public void test_FilterWithBottomN() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",2),new ScriptExpression(""String_Node_Str"",6)};
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  queryDefn.addFilter(filterDefn);
  queryDefn.addExpression(expressions[0],BaseTransform.ON_EACH_ROW);
  queryDefn.addExpression(expressions[1],BaseTransform.ON_EACH_ROW);
  queryDefn.addExpression(expressions[2],BaseTransform.ON_EACH_ROW);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  outputQueryResult(resultIt,expressions);
  checkOutputFile();
}","/** 
 * filter on date time type column with operator Bottom N 
 */
public void test_FilterWithBottomN() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",2),new ScriptExpression(""String_Node_Str"",6)};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  queryDefn.addFilter(filterDefn);
  for (int i=0; i < expressions.length; i++) {
    queryDefn.addResultSetExpression(names[i],expressions[i]);
  }
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  outputQueryResult(resultIt,names);
  checkOutputFile();
}",0.8616975441619992
77938,"/** 
 * add a filter to group
 */
public void test_FilterGroup() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  int expreLength=expressions.length;
  int i=0;
  while (i < expreLength) {
    queryDefn.addExpression(expressions[i],BaseTransform.ON_EACH_ROW);
    i++;
  }
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_PERCENT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.addFilter(filterDefn);
  queryDefn.addGroup(groupDefn);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  outputQueryResult(resultIt,expressions);
  checkOutputFile();
}","/** 
 * add a filter to group
 */
public void test_FilterGroup() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  for (int i=0; i < expressions.length; i++) {
    queryDefn.addResultSetExpression(names[i],expressions[i]);
  }
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_PERCENT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.addFilter(filterDefn);
  queryDefn.addGroup(groupDefn);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  outputQueryResult(resultIt,names);
  checkOutputFile();
}",0.8961303462321792
77939,"/** 
 * filter on group with bottom N
 * @throws Exception
 */
public void test_MultiPassFilterGroup() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  int expreLength=expressions.length;
  int i=0;
  while (i < expreLength) {
    queryDefn.addExpression(expressions[i],BaseTransform.ON_EACH_ROW);
    i++;
  }
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_PERCENT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.setInterval(2);
  groupDefn.setIntervalRange(IGroupDefinition.MONTH_INTERVAL);
  groupDefn.addFilter(filterDefn);
  queryDefn.addGroup(groupDefn);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  outputQueryResult(resultIt,expressions);
  checkOutputFile();
}","/** 
 * filter on group with bottom N
 * @throws Exception
 */
public void test_MultiPassFilterGroup() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  for (int i=0; i < expressions.length; i++) {
    queryDefn.addResultSetExpression(names[i],expressions[i]);
  }
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_PERCENT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.setInterval(2);
  groupDefn.setIntervalRange(IGroupDefinition.MONTH_INTERVAL);
  groupDefn.addFilter(filterDefn);
  queryDefn.addGroup(groupDefn);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResults=preparedQuery.execute(null);
  IResultIterator resultIt=queryResults.getResultIterator();
  outputQueryResult(resultIt,names);
  checkOutputFile();
}",0.8981243104082384
77940,"/** 
 * filter on group with nested query expression
 * @throws Exception
 */
public void test_NestedAggregation() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0)};
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.addFilter(filterDefn);
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  queryDefn.addExpression(expressions[0],BaseTransform.ON_EACH_ROW);
  queryDefn.addExpression(expressions[1],BaseTransform.ON_EACH_ROW);
  queryDefn.addExpression(expressions[2],BaseTransform.ON_EACH_ROW);
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResult=preparedQuery.execute(null);
  IResultIterator resultIt=queryResult.getResultIterator();
  outputQueryResult(resultIt,expressions);
  checkOutputFile();
}","/** 
 * filter on group with nested query expression
 * @throws Exception
 */
public void test_NestedAggregation() throws Exception {
  String sqlStatement=""String_Node_Str"" + getTestTableName();
  ((OdaDataSetDesign)this.dataSet).setQueryText(sqlStatement);
  IBaseExpression[] expressions=new IBaseExpression[]{new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"",0)};
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  FilterDefinition filterDefn=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str""));
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyExpression(""String_Node_Str"");
  groupDefn.addFilter(filterDefn);
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(this.dataSet.getName());
  for (int i=0; i < expressions.length; i++) {
    queryDefn.addResultSetExpression(names[i],expressions[i]);
  }
  IPreparedQuery preparedQuery=dataEngine.prepare(queryDefn);
  IQueryResults queryResult=preparedQuery.execute(null);
  IResultIterator resultIt=queryResult.getResultIterator();
  outputQueryResult(resultIt,names);
  checkOutputFile();
}",0.8728712871287129
77941,"/** 
 * if parameter existed in config file, return the correct parameter name
 * @param configVarName String
 * @return String
 */
private String getParameterName(String configVarName) throws ReportServiceException {
}","/** 
 * if parameter existed in config file, return the correct parameter name
 * @param configVarName String
 * @return String
 */
private String getParameterName(String configVarName) throws ReportServiceException {
  String paramName=null;
  List parameters=getParameterList();
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      ScalarParameterHandle parameter=null;
      if (parameters.get(i) instanceof ScalarParameterHandle) {
        parameter=((ScalarParameterHandle)parameters.get(i));
      }
      String curName=null;
      if (parameter != null && parameter.getName() != null) {
        curName=parameter.getName() + ""String_Node_Str"" + parameter.getID();
      }
      if (curName != null && curName.equalsIgnoreCase(configVarName)) {
        paramName=parameter.getName();
        break;
      }
    }
  }
  return paramName;
}",0.4007319304666056
77942,"protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (isDesigner)   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
  Collection parameterDefList=this.getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
  Collection parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
}",0.9337110481586404
77943,"/** 
 * @return the parameter handle
 */
public ParameterHandle findParameter(String paramName) throws ReportServiceException {
}","/** 
 * @return the parameter handle
 */
public ParameterHandle findParameter(String paramName) throws ReportServiceException {
  if (paramName == null)   return null;
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  ModuleHandle model=null;
  if (runnable != null)   model=runnable.getDesignHandle().getModuleHandle();
  if (model != null)   return model.findParameter(paramName);
 else   return null;
}",0.450261780104712
77944,"/** 
 * get parsed parameters as string.
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsString(Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
}","/** 
 * get parsed parameters as string.
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParametersAsString(Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    String paramValue=getParamValueAsString(request,parameter);
    if (paramValue == null && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || (this.configMap != null && !this.configMap.containsKey(paramName)))) {
      paramValue=this.getParameterDefaultValues(reportDesignHandle,paramName,options);
    }
    if (paramName != null)     params.put(paramName,paramValue);
  }
  return params;
}",0.4242012236573759
77945,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator parameters=parameterList.iterator();
      while (parameters != null && parameters.hasNext()) {
        Object parameterHandle=parameters.next();
        if (parameterHandle instanceof ScalarParameterHandle) {
          ScalarParameterHandle scalarParameterHandle=(ScalarParameterHandle)parameterHandle;
          if (scalarParameterHandle.getName() != null)           this.configMap.put(scalarParameterHandle.getName(),null);
        }
      }
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=getParameterName(configVar.getName());
          String paramValue=configVar.getValue();
          ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
          if (paramValue != null && parameter != null) {
            try {
              Object paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValue,ULocale.US);
              paramValue=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
            }
 catch (            Exception err) {
              paramValue=configVar.getValue();
            }
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}",0.1549595572584078
77946,"/** 
 * @return the parameter handle list
 */
private List getParameterList() throws ReportServiceException {
}","/** 
 * @return the parameter handle list
 */
private List getParameterList() throws ReportServiceException {
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  ModuleHandle model=null;
  if (runnable != null)   model=runnable.getDesignHandle().getModuleHandle();
  if (model != null)   return model.getFlattenParameters();
 else   return null;
}",0.4484848484848485
77947,"/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
}","/** 
 * get parsed parameters.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle parameter=null;
    Object parameterObj=iter.next();
    if (parameterObj instanceof ScalarParameterHandle) {
      parameter=(ScalarParameterHandle)parameterObj;
    }
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramValueObj=this.parametersAsString.get(paramName);
    if (paramValueObj != null) {
      try {
        paramValueObj=ParameterValidationUtil.validate(parameter.getDataType(),parameter.getPattern(),paramValueObj.toString(),locale);
        params.put(paramName,paramValueObj);
      }
 catch (      ValidationValueException e) {
        if (ParameterAccessor.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
          this.exception=e;
          break;
        }
      }
    }
 else {
      params.put(paramName,null);
    }
  }
  return params;
}",0.418552036199095
77948,"/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected String getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
  }
  if (paramValue != null)   return paramValue;
  Object paramValueObj=null;
  if (isDesigner && (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
    paramValueObj=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),paramValueObj,locale);
  }
  if (paramValueObj != null)   paramValue=paramValueObj.toString();
  return paramValue;
}","/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected String getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
  }
  if (paramValue != null)   return paramValue;
  Object paramValueObj=null;
  if (this.isDesigner && (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
    paramValueObj=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),paramValueObj,locale);
  }
  if (paramValueObj != null)   paramValue=paramValueObj.toString();
  return paramValue;
}",0.9978494623655914
77949,"/** 
 * Parse report object and get the parameter default values
 * @param design IViewerReportDesignHandle
 * @param paramName String
 * @param options InputOptionsF
 * @return String
 */
protected String getParameterDefaultValues(IViewerReportDesignHandle design,String paramName,InputOptions options) throws ReportServiceException {
}","/** 
 * Parse report object and get the parameter default values
 * @param design IViewerReportDesignHandle
 * @param paramName String
 * @param options InputOptionsF
 * @return String
 */
protected String getParameterDefaultValues(IViewerReportDesignHandle design,String paramName,InputOptions options) throws ReportServiceException {
  if (design == null)   return null;
  String defalutValue=null;
  Object defaultValueObj=null;
  try {
    defaultValueObj=this.getReportService().getParameterDefaultValue(design,paramName,options);
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
  ScalarParameterHandle parameter=(ScalarParameterHandle)findParameter(paramName);
  if (defaultValueObj != null && parameter != null) {
    defalutValue=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),defaultValueObj,locale);
  }
  if (defalutValue == null && parameter != null) {
    defalutValue=parameter.getDefaultValue();
  }
  return defalutValue;
}",0.5106060606060606
77950,"/** 
 * Render the report in html/pdf format by calling engine service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletOutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
      BirtExtractDataActionHandler extractDataHandler=new BirtExtractDataActionHandler(context,op,upResponse);
      extractDataHandler.execute();
    }
 else     if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else     if (ParameterAccessor.isGetReportlet(request)) {
      BirtGetReportletActionHandler getReportletHandler=new BirtGetReportletActionHandler(context,op,upResponse);
      getReportletHandler.execute();
    }
 else {
      BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse);
      runAndRenderHandler.execute();
    }
  }
 catch (  RemoteException e) {
    AxisFault fault=(AxisFault)e;
    String message=""String_Node_Str"" + ParameterAccessor.htmlEncode(fault.getFaultString()) + ""String_Node_Str"";
    out.write(message.getBytes());
  }
}","/** 
 * Render the report in html/pdf format by calling engine service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletOutputStream out=response.getOutputStream();
  GetUpdatedObjectsResponse upResponse=new GetUpdatedObjectsResponse();
  IContext context=new BirtContext(request,response);
  Operation op=null;
  try {
    if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
      BirtExtractDataActionHandler extractDataHandler=new BirtExtractDataActionHandler(context,op,upResponse);
      extractDataHandler.execute();
    }
 else     if (ParameterAccessor.isGetImageOperator(request)) {
      BirtRenderImageActionHandler renderImageHandler=new BirtRenderImageActionHandler(context,op,upResponse);
      renderImageHandler.execute();
    }
 else     if (ParameterAccessor.isGetReportlet(request)) {
      BirtGetReportletActionHandler getReportletHandler=new BirtGetReportletActionHandler(context,op,upResponse);
      getReportletHandler.execute();
    }
 else {
      BirtRunAndRenderActionHandler runAndRenderHandler=new BirtRunAndRenderActionHandler(context,op,upResponse);
      runAndRenderHandler.execute();
    }
  }
 catch (  RemoteException e) {
    AxisFault fault=(AxisFault)e;
    String message=""String_Node_Str"" + BirtResources.getString(""String_Node_Str"") + ""String_Node_Str""+ ParameterAccessor.htmlEncode(fault.getFaultString())+ ""String_Node_Str"";
    out.write(message.getBytes());
  }
}",0.980067463968108
77951,"/** 
 * Popup the builder for Data element
 */
public void performDirectEdit(){
  DataItemHandle handle=(DataItemHandle)getModel();
  handle.getModuleHandle().getCommandStack().startTrans(null);
  ColumnBindingDialog dialog=new ColumnBindingDialog(true);
  dialog.setInput(handle);
  if (dialog.open() == Dialog.OK) {
    handle.getModuleHandle().getCommandStack().commit();
    refreshVisuals();
  }
 else {
    handle.getModuleHandle().getCommandStack().rollbackAll();
  }
}","/** 
 * Popup the builder for Data element
 */
public void performDirectEdit(){
  DataItemHandle handle=(DataItemHandle)getModel();
  handle.getModuleHandle().getCommandStack().startTrans(null);
  ColumnBindingDialog dialog=new ColumnBindingDialog(true);
  dialog.setInput(handle);
  dialog.setGroupList(DEUtil.getGroups(handle));
  if (dialog.open() == Dialog.OK) {
    handle.getModuleHandle().getCommandStack().commit();
    refreshVisuals();
  }
 else {
    handle.getModuleHandle().getCommandStack().rollbackAll();
  }
}",0.951048951048951
77952,"/** 
 * Creates builder for given element
 * @param handle
 * @return
 */
public Object createBuilder(DesignElementHandle handle){
  if (handle instanceof TextItemHandle) {
    return new TextEditor(UIUtil.getDefaultShell(),TextEditor.DLG_TITLE_NEW,(TextItemHandle)handle);
  }
  if (handle instanceof TextDataHandle) {
    ExpressionBuilder dialog=new ExpressionBuilder(UIUtil.getDefaultShell(),((TextDataHandle)handle).getValueExpr());
    dialog.setExpressionProvier(new ExpressionProvider(handle));
    return (dialog);
  }
  if (handle instanceof DataItemHandle) {
    ColumnBindingDialog dialog=new ColumnBindingDialog(true);
    dialog.setInput((ReportItemHandle)handle);
    return (dialog);
  }
  if (handle instanceof ImageHandle) {
    ImageBuilder dialog=new ImageBuilder(UIUtil.getDefaultShell(),ImageBuilder.DLG_TITLE_NEW);
    dialog.setInput(handle);
    return dialog;
  }
  return null;
}","/** 
 * Creates builder for given element
 * @param handle
 * @return
 */
public Object createBuilder(DesignElementHandle handle){
  if (handle instanceof TextItemHandle) {
    return new TextEditor(UIUtil.getDefaultShell(),TextEditor.DLG_TITLE_NEW,(TextItemHandle)handle);
  }
  if (handle instanceof TextDataHandle) {
    ExpressionBuilder dialog=new ExpressionBuilder(UIUtil.getDefaultShell(),((TextDataHandle)handle).getValueExpr());
    dialog.setExpressionProvier(new ExpressionProvider(handle));
    return (dialog);
  }
  if (handle instanceof DataItemHandle) {
    ColumnBindingDialog dialog=new ColumnBindingDialog(true);
    dialog.setInput((ReportItemHandle)handle);
    dialog.setGroupList(DEUtil.getGroups(handle));
    return (dialog);
  }
  if (handle instanceof ImageHandle) {
    ImageBuilder dialog=new ImageBuilder(UIUtil.getDefaultShell(),ImageBuilder.DLG_TITLE_NEW);
    dialog.setInput(handle);
    return dialog;
  }
  return null;
}",0.9726247987117552
77953,"protected Control createDialogArea(Composite parent){
  Composite parentComposite=(Composite)super.createDialogArea(parent);
  if (this.canSelect) {
    Composite composite=new Composite(parentComposite,SWT.NONE);
    composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
    CLabel warnLabel=new CLabel(composite,SWT.NONE);
    warnLabel.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_WARN_TSK));
    warnLabel.setText(WARN_COLUMN_BINDINGS);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    warnLabel.setLayoutData(gd);
    Label label=new Label(composite,SWT.NONE);
    label.setText(LABEL_COLUMN_BINDINGS);
    label.setLayoutData(new GridData(GridData.BEGINNING));
    final CCombo combo=new CCombo(composite,SWT.READ_ONLY | SWT.BORDER);
    combo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    String[] dataSets=ChoiceSetFactory.getDataSets();
    String[] newList=new String[dataSets.length + 1];
    newList[0]=NONE;
    System.arraycopy(dataSets,0,newList,1,dataSets.length);
    combo.setItems(newList);
    String dataSetName=getDataSetName();
    combo.deselectAll();
    combo.setText(dataSetName);
    combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    gd=new GridData();
    gd.widthHint=250;
    combo.setLayoutData(gd);
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        String value=combo.getText();
        if (value.equals(NONE)) {
          value=null;
        }
        if (canChangeDataSet(value)) {
          try {
            startTrans(""String_Node_Str"");
            DataSetHandle dataSet=null;
            if (value != null) {
              dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value);
            }
            inputElement.setDataSet(dataSet);
            generateBindingColumns();
            getPropertyHandle().setStringValue(null);
            commit();
          }
 catch (          SemanticException e) {
            rollback();
            ExceptionHandler.handle(e);
          }
        }
 else {
          combo.setText(getDataSetName());
        }
      }
    }
);
  }
  Table table=new Table(parentComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER| (canSelect ? SWT.CHECK : 0));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        IStructuredSelection selection=(IStructuredSelection)bindingTable.getSelection();
        if (selection.getFirstElement() instanceof ComputedColumnHandle) {
          deleteRow((ComputedColumnHandle)selection.getFirstElement());
        }
      }
    }
  }
);
  String[] columns=null;
  int[] columnWidth=null;
  CellEditor[] cellEditors;
  expressionCellEditor=new ExpressionCellEditor(table);
  columns=new String[]{null,COLUMN_NAME,COLUMN_DATATYPE,COLUMN_EXPRESSION,COLUMN_AGGREGATEON};
  columnWidth=new int[]{canSelect ? 25 : 20,150,70,150,150};
  groupList=DEUtil.getGroups(inputElement);
  groups=new String[groupList.size() + 1];
  groups[0]=NONE;
  for (int i=0; i < groupList.size(); i++) {
    groups[i + 1]=((GroupHandle)groupList.get(i)).getName();
  }
  cellEditors=new CellEditor[]{null,new TextCellEditor(table),new ComboBoxCellEditor(table,dataTypeDisplayNames),expressionCellEditor,new ComboBoxCellEditor(table,groups,SWT.READ_ONLY)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  if (canSelect) {
    bindingTable=new CheckboxTableViewer(table);
    ((CheckboxTableViewer)bindingTable).addCheckStateListener(new ICheckStateListener(){
      public void checkStateChanged(      CheckStateChangedEvent event){
        if (event.getElement() instanceof ComputedColumnHandle) {
          ComputedColumnHandle handle=(ComputedColumnHandle)event.getElement();
          if (handle.getName().equals(selectedColumnName)) {
            selectedColumnName=null;
          }
 else {
            selectedColumnName=handle.getName();
          }
          updateSelection();
          updateButtons();
        }
 else {
          ((CheckboxTableViewer)bindingTable).setChecked(dummyChoice,false);
        }
      }
    }
);
  }
 else {
    bindingTable=new TableViewer(table);
  }
  bindingTable.setCellEditors(cellEditors);
  bindingTable.setColumnProperties(columns);
  bindingTable.setContentProvider(contentProvider);
  bindingTable.setLabelProvider(labelProvider);
  bindingTable.setCellModifier(cellModifier);
  bindingTable.setInput(inputElement);
  bindingTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!bindingTable.getSelection().isEmpty()) {
        Object obj=((IStructuredSelection)bindingTable.getSelection()).getFirstElement();
        if (obj == dummyChoice && !existHighLightColumn()) {
          bindingTable.refresh();
          setHihtLightColumn();
        }
 else         if (obj instanceof ComputedColumnHandle) {
          ComputedColumnHandle column=(ComputedColumnHandle)obj;
          BindingExpressionProvider provider=new BindingExpressionProvider(column.getElementHandle());
          provider.addFilter(new ComputedColumnExpressionFilter(bindingTable));
          expressionCellEditor.setExpressionProvider(provider);
        }
      }
    }
  }
);
  return parentComposite;
}","protected Control createDialogArea(Composite parent){
  Composite parentComposite=(Composite)super.createDialogArea(parent);
  if (this.canSelect) {
    Composite composite=new Composite(parentComposite,SWT.NONE);
    composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
    CLabel warnLabel=new CLabel(composite,SWT.NONE);
    warnLabel.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_WARN_TSK));
    warnLabel.setText(WARN_COLUMN_BINDINGS);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    warnLabel.setLayoutData(gd);
    Label label=new Label(composite,SWT.NONE);
    label.setText(LABEL_COLUMN_BINDINGS);
    label.setLayoutData(new GridData(GridData.BEGINNING));
    final CCombo combo=new CCombo(composite,SWT.READ_ONLY | SWT.BORDER);
    combo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    String[] dataSets=ChoiceSetFactory.getDataSets();
    String[] newList=new String[dataSets.length + 1];
    newList[0]=NONE;
    System.arraycopy(dataSets,0,newList,1,dataSets.length);
    combo.setItems(newList);
    String dataSetName=getDataSetName();
    combo.deselectAll();
    combo.setText(dataSetName);
    combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    gd=new GridData();
    gd.widthHint=250;
    combo.setLayoutData(gd);
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        String value=combo.getText();
        if (value.equals(NONE)) {
          value=null;
        }
        if (canChangeDataSet(value)) {
          try {
            startTrans(""String_Node_Str"");
            DataSetHandle dataSet=null;
            if (value != null) {
              dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value);
            }
            inputElement.setDataSet(dataSet);
            generateBindingColumns();
            getPropertyHandle().setStringValue(null);
            commit();
          }
 catch (          SemanticException e) {
            rollback();
            ExceptionHandler.handle(e);
          }
        }
 else {
          combo.setText(getDataSetName());
        }
      }
    }
);
  }
  Table table=new Table(parentComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER| (canSelect ? SWT.CHECK : 0));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        IStructuredSelection selection=(IStructuredSelection)bindingTable.getSelection();
        if (selection.getFirstElement() instanceof ComputedColumnHandle) {
          deleteRow((ComputedColumnHandle)selection.getFirstElement());
        }
      }
    }
  }
);
  String[] columns=null;
  int[] columnWidth=null;
  CellEditor[] cellEditors;
  expressionCellEditor=new ExpressionCellEditor(table);
  columns=new String[]{null,COLUMN_NAME,COLUMN_DATATYPE,COLUMN_EXPRESSION,COLUMN_AGGREGATEON};
  columnWidth=new int[]{canSelect ? 25 : 20,150,70,150,150};
  groups=new String[groupList.size() + 1];
  groups[0]=NONE;
  for (int i=0; i < groupList.size(); i++) {
    groups[i + 1]=((GroupHandle)groupList.get(i)).getName();
  }
  cellEditors=new CellEditor[]{null,new TextCellEditor(table),new ComboBoxCellEditor(table,dataTypeDisplayNames),expressionCellEditor,new ComboBoxCellEditor(table,groups,SWT.READ_ONLY)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  if (canSelect) {
    bindingTable=new CheckboxTableViewer(table);
    ((CheckboxTableViewer)bindingTable).addCheckStateListener(new ICheckStateListener(){
      public void checkStateChanged(      CheckStateChangedEvent event){
        if (event.getElement() instanceof ComputedColumnHandle) {
          ComputedColumnHandle handle=(ComputedColumnHandle)event.getElement();
          if (handle.getName().equals(selectedColumnName)) {
            selectedColumnName=null;
          }
 else {
            selectedColumnName=handle.getName();
          }
          updateSelection();
          updateButtons();
        }
 else {
          ((CheckboxTableViewer)bindingTable).setChecked(dummyChoice,false);
        }
      }
    }
);
  }
 else {
    bindingTable=new TableViewer(table);
  }
  bindingTable.setCellEditors(cellEditors);
  bindingTable.setColumnProperties(columns);
  bindingTable.setContentProvider(contentProvider);
  bindingTable.setLabelProvider(labelProvider);
  bindingTable.setCellModifier(cellModifier);
  bindingTable.setInput(inputElement);
  bindingTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!bindingTable.getSelection().isEmpty()) {
        Object obj=((IStructuredSelection)bindingTable.getSelection()).getFirstElement();
        if (obj == dummyChoice && !existHighLightColumn()) {
          bindingTable.refresh();
          setHihtLightColumn();
        }
 else         if (obj instanceof ComputedColumnHandle) {
          ComputedColumnHandle column=(ComputedColumnHandle)obj;
          BindingExpressionProvider provider=new BindingExpressionProvider(column.getElementHandle());
          provider.addFilter(new ComputedColumnExpressionFilter(bindingTable));
          expressionCellEditor.setExpressionProvider(provider);
        }
      }
    }
  }
);
  return parentComposite;
}",0.9963031423290204
77954,"private boolean performTransferPlaceHolder(TemplateElementHandle handle){
  DesignElementHandle copiedHandle=handle.getDefaultElement().copy().getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
  try {
    ((TemplateReportItemHandle)handle).transformToReportItem((ReportItemHandle)copiedHandle);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return true;
}","private boolean performTransferPlaceHolder(TemplateElementHandle handle){
  DesignElementHandle copiedHandle=handle.getDefaultElement().copyForTemplate().getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
  try {
    ((TemplateReportItemHandle)handle).transformToReportItem((ReportItemHandle)copiedHandle);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return true;
}",0.9875141884222476
77955,"/** 
 * Transforms the current template report item to the given real report item.
 * @param reportItemHandle the real report item handle to replace this template report item
 * @throws SemanticException if this template report item has no template definition or some containing contexts don't match
 */
public void transformToReportItem(ReportItemHandle reportItemHandle) throws SemanticException {
  if (getRoot() == null)   throw new TemplateException(getElement(),TemplateException.DESIGN_EXCEPTION_CREATE_TEMPLATE_ELEMENT_FORBIDDEN);
  TemplateCommand cmd=new TemplateCommand(getModule(),getContainer().getElement());
  cmd.transformToReportItem((TemplateReportItem)getElement(),(ReportItem)reportItemHandle.getElement(),getElement().getContainerSlot());
}","/** 
 * Transforms the current template report item to the given real report item.
 * @param reportItemHandle the real report item handle to replace this template report item
 * @throws SemanticException if this template report item has no template definition or some containing contexts don't match
 */
public void transformToReportItem(ReportItemHandle reportItemHandle) throws SemanticException {
  if (getRoot() == null)   throw new TemplateException(getElement(),TemplateException.DESIGN_EXCEPTION_CREATE_TEMPLATE_ELEMENT_FORBIDDEN);
  module.makeUniqueName(reportItemHandle.element);
  TemplateCommand cmd=new TemplateCommand(getModule(),getContainer().getElement());
  cmd.transformToReportItem((TemplateReportItem)getElement(),(ReportItem)reportItemHandle.getElement(),getElement().getContainerSlot());
}",0.9675778766687858
77956,"/** 
 * Sets the operator of this filter condition. The allowed values are defined in  {@link org.eclipse.birt.report.model.api.elements.DesignChoiceConstants}, and they are: <ul> <li><code>FILTER_OPERATOR_EQ</code> <li><code>FILTER_OPERATOR_NE</code> <li><code>FILTER_OPERATOR_LT</code> <li><code>FILTER_OPERATOR_LE</code> <li><code>FILTER_OPERATOR_GE</code> <li><code>FILTER_OPERATOR_GT</code> <li><code>FILTER_OPERATOR_BETWEEN</code> <li><code>FILTER_OPERATOR_NOT_BETWEEN</code> <li><code>FILTER_OPERATOR_NULL</code> <li><code>FILTER_OPERATOR_NOT_NULL</code> <li><code>FILTER_OPERATOR_TRUE</code> <li><code>FILTER_OPERATOR_FALSE</code> <li><code>FILTER_OPERATOR_LIKE</code> <li><code>FILTER_OPERATOR_TOP_N</code> <li><code>FILTER_OPERATOR_BOTTOM_N</code> <li><code>FILTER_OPERATOR_TOP_PERCENT</code> <li><code>FILTER_OPERATOR_BOTTOM_PERCENT</code> <li><code>FILTER_OPERATOR_ANY</code> </ul>
 * @param operator the operator to set
 * @throws SemanticException if operator is not in the choice list.
 */
public void setOperator(String operator) throws SemanticException {
  setProperty(FilterCondition.OPERATOR_MEMBER,operator);
}","/** 
 * Sets the operator of this filter condition. The allowed values are defined in  {@link org.eclipse.birt.report.model.api.elements.DesignChoiceConstants}, and they are: <ul> <li><code>FILTER_OPERATOR_EQ</code> <li><code>FILTER_OPERATOR_NE</code> <li><code>FILTER_OPERATOR_LT</code> <li><code>FILTER_OPERATOR_LE</code> <li><code>FILTER_OPERATOR_GE</code> <li><code>FILTER_OPERATOR_GT</code> <li><code>FILTER_OPERATOR_BETWEEN</code> <li><code>FILTER_OPERATOR_NOT_BETWEEN</code> <li><code>FILTER_OPERATOR_NULL</code> <li><code>FILTER_OPERATOR_NOT_NULL</code> <li><code>FILTER_OPERATOR_TRUE</code> <li><code>FILTER_OPERATOR_FALSE</code> <li><code>FILTER_OPERATOR_LIKE</code> <li><code>FILTER_OPERATOR_TOP_N</code> <li><code>FILTER_OPERATOR_BOTTOM_N</code> <li><code>FILTER_OPERATOR_TOP_PERCENT</code> <li><code>FILTER_OPERATOR_BOTTOM_PERCENT</code> <li><code>FILTER_OPERATOR_ANY</code> </ul>
 * @param operator the operator to set
 * @throws SemanticException if operator is not in the choice list.
 */
public void setOperator(String operator) throws SemanticException {
  ActivityStack stack=getModule().getActivityStack();
  stack.startTrans();
  try {
    setProperty(FilterCondition.OPERATOR_MEMBER,operator);
    int level=OperatorUtil.computeFilterOperatorLevel(operator);
switch (level) {
case OperatorUtil.OPERATOR_LEVEL_ONE:
      setValue2(null);
    break;
case OperatorUtil.OPERATOR_LEVEL_TWO:
  break;
case OperatorUtil.OPERATOR_LEVEL_ZERO:
setValue2(null);
setValue1(null);
break;
case OperatorUtil.OPERATOR_LEVEL_NOT_EXIST:
break;
}
}
 catch (SemanticException e) {
stack.rollback();
throw e;
}
stack.commit();
}",0.8195652173913044
77957,"/** 
 * Sets the operator. The allowed values are defined in  {@link org.eclipse.birt.report.model.api.elements.DesignChoiceConstants}, and they are: <ul> <li>MAP_OPERATOR_EQ <li>MAP_OPERATOR_NE <li>MAP_OPERATOR_LT <li>MAP_OPERATOR_LE <li>MAP_OPERATOR_GE <li>MAP_OPERATOR_GT <li>MAP_OPERATOR_BETWEEN <li>MAP_OPERATOR_NOT_BETWEEN <li>MAP_OPERATOR_NULL <li>MAP_OPERATOR_NOT_NULL <li>MAP_OPERATOR_TRUE <li>MAP_OPERATOR_FALSE <li>MAP_OPERATOR_LIKE <li>MAP_OPERATOR_ANY </ul>
 * @param operator the operator to set
 * @throws SemanticException if operator is not in the choice list.
 */
public void setOperator(String operator) throws SemanticException {
  setProperty(StyleRule.OPERATOR_MEMBER,operator);
}","/** 
 * Sets the operator. The allowed values are defined in  {@link org.eclipse.birt.report.model.api.elements.DesignChoiceConstants}, and they are: <ul> <li>MAP_OPERATOR_EQ <li>MAP_OPERATOR_NE <li>MAP_OPERATOR_LT <li>MAP_OPERATOR_LE <li>MAP_OPERATOR_GE <li>MAP_OPERATOR_GT <li>MAP_OPERATOR_BETWEEN <li>MAP_OPERATOR_NOT_BETWEEN <li>MAP_OPERATOR_NULL <li>MAP_OPERATOR_NOT_NULL <li>MAP_OPERATOR_TRUE <li>MAP_OPERATOR_FALSE <li>MAP_OPERATOR_LIKE <li>MAP_OPERATOR_ANY </ul>
 * @param operator the operator to set
 * @throws SemanticException if operator is not in the choice list.
 */
public void setOperator(String operator) throws SemanticException {
  ActivityStack stack=getModule().getActivityStack();
  stack.startTrans();
  try {
    setProperty(StyleRule.OPERATOR_MEMBER,operator);
    int level=OperatorUtil.computeStyleRuleOperatorLevel(operator);
switch (level) {
case OperatorUtil.OPERATOR_LEVEL_ONE:
      setValue2(null);
    break;
case OperatorUtil.OPERATOR_LEVEL_TWO:
  break;
case OperatorUtil.OPERATOR_LEVEL_ZERO:
setValue2(null);
setValue1(null);
break;
case OperatorUtil.OPERATOR_LEVEL_NOT_EXIST:
break;
}
}
 catch (SemanticException e) {
stack.rollback();
throw e;
}
stack.commit();
}",0.7370078740157481
77958,"public void end() throws SAXException {
  makeTestExpressionCompatible();
  Set elements=handler.tempValue.keySet();
  ContainerSlot groups=element.getSlot(ListingElement.GROUP_SLOT);
  for (int i=0; i < groups.getCount(); i++) {
    GroupElement group=(GroupElement)groups.getContent(i);
    handler.getModule().getNameManager().makeUniqueName(group);
    String groupName=(String)group.getLocalProperty(handler.getModule(),GroupElement.GROUP_NAME_PROP);
    if (!elements.contains(group))     continue;
    List columns=(List)handler.tempValue.get(group);
    if (columns == null || columns.isEmpty())     continue;
    List tmpList=(List)element.getLocalProperty(handler.module,ListingElement.BOUND_DATA_COLUMNS_PROP);
    if (tmpList == null) {
      tmpList=new ArrayList();
      element.setProperty(ListingElement.BOUND_DATA_COLUMNS_PROP,tmpList);
    }
    for (int j=0; j < columns.size(); j++) {
      ComputedColumn column=(ComputedColumn)columns.get(j);
      column.setAggregrateOn(groupName);
      ComputedColumn foundColumn=checkMatchedBoundColumnForGroup(tmpList,column.getExpression(),column.getAggregrateOn());
      if (foundColumn == null || !foundColumn.getName().equals(column.getName())) {
        String newName=getUniqueBoundColumnNameForGroup(tmpList,column);
        column.setName(newName);
        tmpList.add(column);
      }
    }
    reCheckResultSetColumnName(group,tmpList);
  }
  super.end();
}","public void end() throws SAXException {
  makeTestExpressionCompatible();
  Set elements=handler.tempValue.keySet();
  ContainerSlot groups=element.getSlot(ListingElement.GROUP_SLOT);
  for (int i=0; i < groups.getCount(); i++) {
    GroupElement group=(GroupElement)groups.getContent(i);
    handler.getModule().getNameManager().makeUniqueName(group);
    String groupName=(String)group.getLocalProperty(handler.getModule(),GroupElement.GROUP_NAME_PROP);
    if (!elements.contains(group))     continue;
    if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") >= 0) {
      continue;
    }
    List columns=(List)handler.tempValue.get(group);
    if (columns == null || columns.isEmpty())     continue;
    List tmpList=(List)element.getLocalProperty(handler.module,ListingElement.BOUND_DATA_COLUMNS_PROP);
    if (tmpList == null) {
      tmpList=new ArrayList();
      element.setProperty(ListingElement.BOUND_DATA_COLUMNS_PROP,tmpList);
    }
    if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") <= 0) {
      addCachedListWithAggregateOnToListing(columns,tmpList,group,groupName);
      continue;
    }
    addCachedListToListing(columns,tmpList,group,groupName);
  }
  super.end();
}",0.6764484574868322
77959,"/** 
 * Returns all visible column bindings for the given element
 * @param handle the handle of the element
 * @return the list of all visible column bindings.The list order is fromthe top to the given element
 */
public static List getVisiableColumnBindingsList(DesignElementHandle handle,boolean includeSelf){
  List bindingList=new ArrayList();
  if (includeSelf) {
    Iterator iterator=getBindingColumnIterator(handle);
    while (iterator.hasNext()) {
      bindingList.add(iterator.next());
    }
  }
  ReportItemHandle holder=getBindingHolder(handle);
  if (holder != null) {
    if (holder instanceof ListingHandle && ((ListingHandle)holder).getDetail() == handle.getContainerSlotHandle()) {
      SlotHandle groupSlotHandle=((ListingHandle)holder).getGroups();
      for (Iterator iter=groupSlotHandle.iterator(); iter.hasNext(); ) {
        GroupHandle group=(GroupHandle)iter.next();
        for (Iterator columnIter=group.columnBindingsIterator(); columnIter.hasNext(); ) {
          bindingList.add(columnIter.next());
        }
      }
    }
    for (DesignElementHandle elementHandle=handle.getContainer(); elementHandle != holder.getContainer(); elementHandle=elementHandle.getContainer()) {
      List subBindingList=new ArrayList();
      Iterator iterator=getBindingColumnIterator(elementHandle);
      while (iterator.hasNext()) {
        subBindingList.add(iterator.next());
      }
      bindingList.addAll(0,subBindingList);
    }
  }
  return bindingList;
}","/** 
 * Returns all visible column bindings for the given element
 * @param handle the handle of the element
 * @return the list of all visible column bindings.The list order is fromthe top to the given element
 */
public static List getVisiableColumnBindingsList(DesignElementHandle handle,boolean includeSelf){
  List bindingList=new ArrayList();
  if (includeSelf) {
    Iterator iterator=getBindingColumnIterator(handle);
    while (iterator.hasNext()) {
      bindingList.add(iterator.next());
    }
  }
  ReportItemHandle holder=getBindingHolder(handle);
  if (holder != null) {
    for (DesignElementHandle elementHandle=handle.getContainer(); elementHandle != holder.getContainer(); elementHandle=elementHandle.getContainer()) {
      List subBindingList=new ArrayList();
      Iterator iterator=getBindingColumnIterator(elementHandle);
      while (iterator.hasNext()) {
        subBindingList.add(iterator.next());
      }
      bindingList.addAll(0,subBindingList);
    }
  }
  return bindingList;
}",0.8102687525070197
77960,"/** 
 * Returns the element handle which can save binding columns the given element
 * @param handle the handle of the element which needs binding columns
 * @return the holder for the element,or itself if no holder available
 */
public static ReportItemHandle getBindingHolder(DesignElementHandle handle){
  if (handle instanceof ReportElementHandle) {
    if (handle instanceof ListingHandle) {
      return (ReportItemHandle)handle;
    }
    if (handle instanceof ReportItemHandle) {
      if (((ReportItemHandle)handle).getDataSet() != null && ((ReportItemHandle)handle).columnBindingsIterator().hasNext()) {
        return (ReportItemHandle)handle;
      }
    }
    ReportItemHandle result=getBindingHolder(handle.getContainer());
    if (result == null && handle instanceof ReportItemHandle) {
      result=(ReportItemHandle)handle;
    }
    return result;
  }
  return null;
}","/** 
 * Returns the element handle which can save binding columns the given element
 * @param handle the handle of the element which needs binding columns
 * @return the holder for the element,or itself if no holder available
 */
public static ReportItemHandle getBindingHolder(DesignElementHandle handle){
  if (handle instanceof ReportElementHandle) {
    if (handle instanceof ListingHandle) {
      return (ReportItemHandle)handle;
    }
    if (handle instanceof ReportItemHandle) {
      if (((ReportItemHandle)handle).getDataSet() != null || ((ReportItemHandle)handle).columnBindingsIterator().hasNext()) {
        return (ReportItemHandle)handle;
      }
    }
    ReportItemHandle result=getBindingHolder(handle.getContainer());
    if (result == null && handle instanceof ReportItemHandle) {
      result=(ReportItemHandle)handle;
    }
    return result;
  }
  return null;
}",0.6794582392776524
77961,"public void widgetSelected(SelectionEvent event){
  String value=combo.getText();
  if (value.equals(NONE)) {
    value=null;
  }
  if (canChangeDataSet(value)) {
    try {
      startTrans(""String_Node_Str"");
      DataSetHandle dataSet=null;
      if (value != null) {
        dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value);
      }
      inputElement.setDataSet(dataSet);
      generateBindingColumns();
      getPropertyHandle().setStringValue(null);
      commit();
    }
 catch (    SemanticException e) {
      rollback();
      ExceptionHandler.handle(e);
    }
  }
 else {
    combo.setText(getDataSetName());
  }
}","public void widgetSelected(SelectionEvent event){
  String value=combo.getText();
  if (value.equals(NONE)) {
    value=null;
  }
  int rCode=canChangeDataSet(value);
  if (rCode == 2) {
    combo.setText(getDataSetName());
  }
 else {
    try {
      DataSetHandle dataSet=null;
      if (value != null) {
        dataSet=inputElement.getModuleHandle().findDataSet(value);
      }
      inputElement.setDataSet(dataSet);
      getParameterBindingPropertyHandle().clearValue();
      if (rCode == 0) {
        inputElement.getColumnBindings().clearValue();
      }
      generateBindingColumns();
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.450222882615156
77962,"protected Control createDialogArea(Composite parent){
  Composite parentComposite=(Composite)super.createDialogArea(parent);
  if (this.canSelect) {
    Composite composite=new Composite(parentComposite,SWT.NONE);
    composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
    CLabel warnLabel=new CLabel(composite,SWT.NONE);
    warnLabel.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_WARN_TSK));
    warnLabel.setText(WARN_COLUMN_BINDINGS);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    warnLabel.setLayoutData(gd);
    Label label=new Label(composite,SWT.NONE);
    label.setText(LABEL_COLUMN_BINDINGS);
    label.setLayoutData(new GridData(GridData.BEGINNING));
    final CCombo combo=new CCombo(composite,SWT.READ_ONLY | SWT.BORDER);
    combo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    String[] dataSets=ChoiceSetFactory.getDataSets();
    String[] newList=new String[dataSets.length + 1];
    newList[0]=NONE;
    System.arraycopy(dataSets,0,newList,1,dataSets.length);
    combo.setItems(newList);
    String dataSetName=getDataSetName();
    combo.deselectAll();
    combo.setText(dataSetName);
    combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    gd=new GridData();
    gd.widthHint=250;
    combo.setLayoutData(gd);
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        String value=combo.getText();
        if (value.equals(NONE)) {
          value=null;
        }
        if (canChangeDataSet(value)) {
          try {
            startTrans(""String_Node_Str"");
            DataSetHandle dataSet=null;
            if (value != null) {
              dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value);
            }
            inputElement.setDataSet(dataSet);
            generateBindingColumns();
            getPropertyHandle().setStringValue(null);
            commit();
          }
 catch (          SemanticException e) {
            rollback();
            ExceptionHandler.handle(e);
          }
        }
 else {
          combo.setText(getDataSetName());
        }
      }
    }
);
  }
  Table table=new Table(parentComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER| (canSelect ? SWT.CHECK : 0));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        IStructuredSelection selection=(IStructuredSelection)bindingTable.getSelection();
        if (selection.getFirstElement() instanceof ComputedColumnHandle) {
          deleteRow((ComputedColumnHandle)selection.getFirstElement());
        }
      }
    }
  }
);
  String[] columns=null;
  int[] columnWidth=null;
  CellEditor[] cellEditors;
  expressionCellEditor=new ExpressionCellEditor(table);
  columns=new String[]{null,COLUMN_NAME,COLUMN_DATATYPE,COLUMN_EXPRESSION,COLUMN_AGGREGATEON};
  columnWidth=new int[]{canSelect ? 25 : 20,150,70,150,150};
  groups=new String[groupList.size() + 1];
  groups[0]=NONE;
  for (int i=0; i < groupList.size(); i++) {
    groups[i + 1]=((GroupHandle)groupList.get(i)).getName();
  }
  cellEditors=new CellEditor[]{null,new TextCellEditor(table),new ComboBoxCellEditor(table,dataTypeDisplayNames),expressionCellEditor,new ComboBoxCellEditor(table,groups,SWT.READ_ONLY)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  if (canSelect) {
    bindingTable=new CheckboxTableViewer(table);
    ((CheckboxTableViewer)bindingTable).addCheckStateListener(new ICheckStateListener(){
      public void checkStateChanged(      CheckStateChangedEvent event){
        if (event.getElement() instanceof ComputedColumnHandle) {
          ComputedColumnHandle handle=(ComputedColumnHandle)event.getElement();
          if (handle.getName().equals(selectedColumnName)) {
            selectedColumnName=null;
          }
 else {
            selectedColumnName=handle.getName();
          }
          updateSelection();
          updateButtons();
        }
 else {
          ((CheckboxTableViewer)bindingTable).setChecked(dummyChoice,false);
        }
      }
    }
);
  }
 else {
    bindingTable=new TableViewer(table);
  }
  bindingTable.setCellEditors(cellEditors);
  bindingTable.setColumnProperties(columns);
  bindingTable.setContentProvider(contentProvider);
  bindingTable.setLabelProvider(labelProvider);
  bindingTable.setCellModifier(cellModifier);
  bindingTable.setInput(inputElement);
  bindingTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!bindingTable.getSelection().isEmpty()) {
        Object obj=((IStructuredSelection)bindingTable.getSelection()).getFirstElement();
        if (obj == dummyChoice && !existHighLightColumn()) {
          bindingTable.refresh();
          setHihtLightColumn();
        }
 else         if (obj instanceof ComputedColumnHandle) {
          ComputedColumnHandle column=(ComputedColumnHandle)obj;
          BindingExpressionProvider provider=new BindingExpressionProvider(column.getElementHandle());
          provider.addFilter(new ComputedColumnExpressionFilter(bindingTable));
          expressionCellEditor.setExpressionProvider(provider);
        }
      }
    }
  }
);
  return parentComposite;
}","protected Control createDialogArea(Composite parent){
  Composite parentComposite=(Composite)super.createDialogArea(parent);
  if (this.canSelect) {
    Composite composite=new Composite(parentComposite,SWT.NONE);
    composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
    CLabel warnLabel=new CLabel(composite,SWT.NONE);
    warnLabel.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_WARN_TSK));
    warnLabel.setText(WARN_COLUMN_BINDINGS);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    warnLabel.setLayoutData(gd);
    Label label=new Label(composite,SWT.NONE);
    label.setText(LABEL_COLUMN_BINDINGS);
    label.setLayoutData(new GridData(GridData.BEGINNING));
    final CCombo combo=new CCombo(composite,SWT.READ_ONLY | SWT.BORDER);
    combo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
    String[] dataSets=ChoiceSetFactory.getDataSets();
    String[] newList=new String[dataSets.length + 1];
    newList[0]=NONE;
    System.arraycopy(dataSets,0,newList,1,dataSets.length);
    combo.setItems(newList);
    String dataSetName=getDataSetName();
    combo.deselectAll();
    combo.setText(dataSetName);
    combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    gd=new GridData();
    gd.widthHint=250;
    combo.setLayoutData(gd);
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        String value=combo.getText();
        if (value.equals(NONE)) {
          value=null;
        }
        int rCode=canChangeDataSet(value);
        if (rCode == 2) {
          combo.setText(getDataSetName());
        }
 else {
          try {
            DataSetHandle dataSet=null;
            if (value != null) {
              dataSet=inputElement.getModuleHandle().findDataSet(value);
            }
            inputElement.setDataSet(dataSet);
            getParameterBindingPropertyHandle().clearValue();
            if (rCode == 0) {
              inputElement.getColumnBindings().clearValue();
            }
            generateBindingColumns();
          }
 catch (          SemanticException e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
);
  }
  Table table=new Table(parentComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER| (canSelect ? SWT.CHECK : 0));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        IStructuredSelection selection=(IStructuredSelection)bindingTable.getSelection();
        if (selection.getFirstElement() instanceof ComputedColumnHandle) {
          deleteRow((ComputedColumnHandle)selection.getFirstElement());
        }
      }
    }
  }
);
  String[] columns=null;
  int[] columnWidth=null;
  CellEditor[] cellEditors;
  expressionCellEditor=new ExpressionCellEditor(table);
  columns=new String[]{null,COLUMN_NAME,COLUMN_DATATYPE,COLUMN_EXPRESSION,COLUMN_AGGREGATEON};
  columnWidth=new int[]{canSelect ? 25 : 20,150,70,150,150};
  groups=new String[groupList.size() + 1];
  groups[0]=NONE;
  for (int i=0; i < groupList.size(); i++) {
    groups[i + 1]=((GroupHandle)groupList.get(i)).getName();
  }
  cellEditors=new CellEditor[]{null,new TextCellEditor(table),new ComboBoxCellEditor(table,dataTypeDisplayNames),expressionCellEditor,new ComboBoxCellEditor(table,groups,SWT.READ_ONLY)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  if (canSelect) {
    bindingTable=new CheckboxTableViewer(table);
    ((CheckboxTableViewer)bindingTable).addCheckStateListener(new ICheckStateListener(){
      public void checkStateChanged(      CheckStateChangedEvent event){
        if (event.getElement() instanceof ComputedColumnHandle) {
          ComputedColumnHandle handle=(ComputedColumnHandle)event.getElement();
          if (handle.getName().equals(selectedColumnName)) {
            selectedColumnName=null;
          }
 else {
            selectedColumnName=handle.getName();
          }
          updateSelection();
          updateButtons();
        }
 else {
          ((CheckboxTableViewer)bindingTable).setChecked(dummyChoice,false);
        }
      }
    }
);
  }
 else {
    bindingTable=new TableViewer(table);
  }
  bindingTable.setCellEditors(cellEditors);
  bindingTable.setColumnProperties(columns);
  bindingTable.setContentProvider(contentProvider);
  bindingTable.setLabelProvider(labelProvider);
  bindingTable.setCellModifier(cellModifier);
  bindingTable.setInput(inputElement);
  bindingTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!bindingTable.getSelection().isEmpty()) {
        Object obj=((IStructuredSelection)bindingTable.getSelection()).getFirstElement();
        if (obj == dummyChoice && !existHighLightColumn()) {
          bindingTable.refresh();
          setHihtLightColumn();
        }
 else         if (obj instanceof ComputedColumnHandle) {
          ComputedColumnHandle column=(ComputedColumnHandle)obj;
          BindingExpressionProvider provider=new BindingExpressionProvider(column.getElementHandle());
          provider.addFilter(new ComputedColumnExpressionFilter(bindingTable));
          expressionCellEditor.setExpressionProvider(provider);
        }
      }
    }
  }
);
  return parentComposite;
}",0.9390777515987884
77963,"private boolean canChangeDataSet(String newName){
  String currentDataSetName=getDataSetName();
  if (NONE.equals(currentDataSetName)) {
    return true;
  }
 else   if (!currentDataSetName.equals(newName)) {
    return MessageDialog.openQuestion(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return false;
}","private int canChangeDataSet(String newName){
  String currentDataSetName=getDataSetName();
  if (NONE.equals(currentDataSetName) && !inputElement.columnBindingsIterator().hasNext()) {
    return 0;
  }
 else   if (currentDataSetName.equals(newName)) {
    return 2;
  }
  MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.INFORMATION,new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL,IDialogConstants.CANCEL_LABEL},0);
  return prefDialog.open();
}",0.6523143164693218
77964,"protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (isDesigner)   parseConfigVars(request);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
  Collection parameterDefList=this.getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=getParameterList();
  if (isDesigner)   parseConfigVars(request,parameterList);
  this.parametersAsString=getParsedParametersAsString(parameterList,request,options);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
  Collection parameterDefList=this.getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  this.missingParameter=validateParameters(parameterDefList,this.parametersAsString);
}",0.9915764139590856
77965,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request){
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
}",0.9262536873156342
77966,"private List doValidate(Module module,ExtendedItem toValidate){
  List list=new ArrayList();
  if (toValidate.getExtendedElement() == null) {
    try {
      toValidate.initializeReportItem(module);
    }
 catch (    ExtendedElementException e) {
      return list;
    }
  }
  List exceptions=toValidate.getExtendedElement().validate();
  if (exceptions != null)   list.addAll(exceptions);
  return list;
}","private List doValidate(Module module,ExtendedItem toValidate){
  List list=new ArrayList();
  if (toValidate.getExtendedElement() == null) {
    if (!((module instanceof Library) && ((Library)module).getHost() != null)) {
      try {
        toValidate.initializeReportItem(module);
      }
 catch (      ExtendedElementException e) {
        return list;
      }
    }
  }
  if (toValidate.getExtendedElement() != null) {
    List exceptions=toValidate.getExtendedElement().validate();
    if (exceptions != null)     list.addAll(exceptions);
  }
  return list;
}",0.8353909465020576
77967,"/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String reportDesignName=this.getFileUri();
  String configFileName=reportDesignName.replaceFirst(SUFFIX_DESIGN_FILE,SUFFIX_DESIGN_CONFIG);
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            String paramName=getParameterName(configVar.getName());
            if (paramName != null && paramName.length() > 0) {
              configVars.put(paramName,configVar.getValue());
            }
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
  return configVars;
}","/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String configFileName=getConfigFileName(this.getFileUri());
  if (configFileName == null)   return configVars;
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            String paramName=getParameterName(configVar.getName());
            if (paramName != null && paramName.length() > 0) {
              configVars.put(paramName,configVar.getValue());
            }
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
  return configVars;
}",0.933634992458522
77968,"/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected String getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
  }
  if (paramValue != null)   return paramValue;
  Object paramValueObj=null;
  if (isDesigner && IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath()) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
    paramValueObj=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),paramValueObj,locale);
  }
  if (paramValueObj != null)   paramValue=paramValueObj.toString();
  return paramValue;
}","/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected String getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
  }
  if (paramValue != null)   return paramValue;
  Object paramValueObj=null;
  if (isDesigner && (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
    paramValueObj=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),paramValueObj,locale);
  }
  if (paramValueObj != null)   paramValue=paramValueObj.toString();
  return paramValue;
}",0.9615040286481648
77969,"public void end() throws SAXException {
  if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") >= 0) {
    super.end();
    return;
  }
  try {
    element.initializeReportItem(handler.module);
  }
 catch (  ExtendedElementException e) {
    return;
  }
  Object reportItem=element.getExtendedElement();
  if (reportItem != null && reportItem instanceof ICompatibleReportItem) {
    List jsExprs=((ICompatibleReportItem)reportItem).getRowExpressions();
    Map updatedExprs=handleJavaExpression(jsExprs);
    ((ICompatibleReportItem)reportItem).updateRowExpressions(updatedExprs);
  }
  super.end();
}","public void end() throws SAXException {
  if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") >= 0) {
    super.end();
    return;
  }
  try {
    element.initializeReportItem(handler.module);
  }
 catch (  ExtendedElementException e) {
    return;
  }
  Object reportItem=element.getExtendedElement();
  if (reportItem != null && reportItem instanceof ICompatibleReportItem) {
    List jsExprs=((ICompatibleReportItem)reportItem).getRowExpressions();
    Map updatedExprs=DataBoundColumnUtil.handleJavaExpression(jsExprs,element,handler.module,handler.tempValue);
    ((ICompatibleReportItem)reportItem).updateRowExpressions(updatedExprs);
  }
  super.end();
}",0.9529683885890516
77970,"public void end() throws SAXException {
  super.end();
  if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") >= 0)   return;
  String content=(String)element.getLocalProperty(handler.getModule(),TextItem.CONTENT_PROP);
  if (StringUtil.isBlank(content))   return;
  List jsExprs=DataBoundColumnUtil.getExpressions(content,element,handler.getModule());
  updateExpressions(content,DataBoundColumnUtil.handleJavaExpression(jsExprs,element,handler.getModule()));
}","public void end() throws SAXException {
  super.end();
  if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") >= 0)   return;
  String content=(String)element.getLocalProperty(handler.getModule(),TextItem.CONTENT_PROP);
  if (StringUtil.isBlank(content))   return;
  List jsExprs=DataBoundColumnUtil.getExpressions(content,element,handler.getModule());
  updateExpressions(content,DataBoundColumnUtil.handleJavaExpression(jsExprs,element,handler.getModule(),handler.tempValue));
}",0.9815573770491804
77971,"/** 
 * Creates bound columns for the text.
 * @param element the text
 * @param module the root of the text
 */
protected void dealText(TextItem element,Module module){
  dealReportItem(element,module);
  String content=(String)element.getLocalProperty(module,TextItem.CONTENT_PROP);
  if (StringUtil.isBlank(content))   return;
  List jsExprs=DataBoundColumnUtil.getExpressions(content,element,module);
  DataBoundColumnUtil.handleJavaExpression(jsExprs,element,module);
}","/** 
 * Creates bound columns for the text.
 * @param element the text
 * @param module the root of the text
 */
protected void dealText(TextItem element,Module module){
  dealReportItem(element,module);
  String content=(String)element.getLocalProperty(module,TextItem.CONTENT_PROP);
  if (StringUtil.isBlank(content))   return;
  List jsExprs=DataBoundColumnUtil.getExpressions(content,element,module);
  DataBoundColumnUtil.handleJavaExpression(jsExprs,element,module,null);
}",0.994753410283316
77972,"/** 
 * Creates bound columns for extended item.
 * @param element the extended item
 * @param module the root of the report item
 */
protected void dealExtendedItem(ExtendedItem element,Module module){
  dealReportItem(element,module);
  List values=(List)element.getLocalProperty(module,ExtendedItem.FILTER_PROP);
  if (!(values == null || values.size() < 1)) {
    for (int i=0; i < values.size(); i++) {
      FilterCondition struct=(FilterCondition)values.get(i);
      handleBoundsForValue(element,module,struct.getExpr());
      handleBoundsForValue(element,module,struct.getValue1());
      handleBoundsForValue(element,module,struct.getValue2());
    }
  }
  Object reportItem=element.getExtendedElement();
  if (reportItem != null && reportItem instanceof ICompatibleReportItem) {
    List jsExprs=((ICompatibleReportItem)reportItem).getRowExpressions();
    for (int i=0; i < jsExprs.size(); i++)     handleBoundsForValue(element,module,(String)jsExprs.get(i));
    Map updatedExprs=DataBoundColumnUtil.handleJavaExpression(jsExprs,element,module);
    ((ICompatibleReportItem)reportItem).updateRowExpressions(updatedExprs);
  }
}","/** 
 * Creates bound columns for extended item.
 * @param element the extended item
 * @param module the root of the report item
 */
protected void dealExtendedItem(ExtendedItem element,Module module){
  dealReportItem(element,module);
  List values=(List)element.getLocalProperty(module,ExtendedItem.FILTER_PROP);
  if (!(values == null || values.size() < 1)) {
    for (int i=0; i < values.size(); i++) {
      FilterCondition struct=(FilterCondition)values.get(i);
      handleBoundsForValue(element,module,struct.getExpr());
      handleBoundsForValue(element,module,struct.getValue1());
      handleBoundsForValue(element,module,struct.getValue2());
    }
  }
  Object reportItem=element.getExtendedElement();
  if (reportItem != null && reportItem instanceof ICompatibleReportItem) {
    List jsExprs=((ICompatibleReportItem)reportItem).getRowExpressions();
    for (int i=0; i < jsExprs.size(); i++)     handleBoundsForValue(element,module,(String)jsExprs.get(i));
    Map updatedExprs=DataBoundColumnUtil.handleJavaExpression(jsExprs,element,module,null);
    ((ICompatibleReportItem)reportItem).updateRowExpressions(updatedExprs);
  }
}",0.9978137297770004
77973,"/** 
 * Initializes the report design when it is just created. <p> Set the value to the properties on repot design element which need the initialize valuel. All initialize operations will not go into the command stack and can not be undo redo.
 * @param properties the property name value pairs.Those properties in the map are which need to be initialized.
 * @throws SemanticException SemamticException will throw out when the give properties map contians invlid property name or property value.
 * @deprecated
 */
public void initializeModule(Map properties) throws SemanticException {
  if (isInitialized)   return;
  String name=null;
  Object value=null;
  Module module=(Module)getElement();
  Set propNames=properties.keySet();
  Iterator itre=propNames.iterator();
  while (itre.hasNext()) {
    name=(String)itre.next();
    value=PropertyValueValidationUtil.validateProperty(this,name,properties.get(name));
    module.setProperty(name,value);
  }
  isInitialized=true;
}","/** 
 * Initializes the report design when it is just created. <p> Set the value to the properties on repot design element which need the initialize valuel. All initialize operations will not go into the command stack and can not be undo redo.
 * @param properties the property name value pairs.Those properties in the map are which need to be initialized.
 * @throws SemanticException SemamticException will throw out when the give properties map contians invlid property name or property value.
 * @deprecated
 */
public void initializeModule(Map properties) throws SemanticException {
  if (isInitialized)   return;
  String name=null;
  Object value=null;
  Module root=(Module)getElement();
  Set propNames=properties.keySet();
  Iterator itre=propNames.iterator();
  while (itre.hasNext()) {
    name=(String)itre.next();
    value=PropertyValueValidationUtil.validateProperty(this,name,properties.get(name));
    root.setProperty(name,value);
  }
  isInitialized=true;
}",0.9897854954034728
77974,"/** 
 * Especially used for sub query
 * @param resultCache
 * @param odiAdpater
 * @param query
 * @param startIndex
 * @param endIndex
 * @param rsMeta
 * @param sortSpec
 * @throws DataException
 */
private void initInstance2(CacheRequest cacheRequest,ResultSetCache resultCache,OdiAdapter odiAdpater,int startIndex,int endIndex,IResultClass rsMeta) throws DataException {
  int length=endIndex - startIndex;
  if (cacheRequest.getMaxRow() == 0 || length <= cacheRequest.getMaxRow())   cacheRequest.setMaxRow(length);
  int oldIndex=resultCache.getCurrentIndex();
  resultCache.moveTo(startIndex - 1);
  initInstance(cacheRequest,odiAdpater,rsMeta);
  resultCache.moveTo(oldIndex);
}","/** 
 * Especially used for sub query
 * @param resultCache
 * @param odiAdpater
 * @param query
 * @param startIndex
 * @param endIndex
 * @param rsMeta
 * @param sortSpec
 * @throws DataException
 */
private void initInstance2(CacheRequest cacheRequest,ResultSetCache resultCache,OdiAdapter odiAdpater,int startIndex,int endIndex,IResultClass rsMeta) throws DataException {
  int length=endIndex - startIndex;
  if (cacheRequest.getMaxRow() <= 0 || length <= cacheRequest.getMaxRow())   cacheRequest.setMaxRow(length);
  int oldIndex=resultCache.getCurrentIndex();
  resultCache.moveTo(startIndex - 1);
  initInstance(cacheRequest,odiAdpater,rsMeta);
  resultCache.moveTo(oldIndex);
}",0.998542274052478
77975,"/** 
 * Sets the theme with the given element reference value. Call this method when the theme name or theme element has been validated. Otherwise, uses  {@link #setStyle(String)} or {@link #setStyleElement(Theme)}.
 * @param refValue the validated reference value
 * @throws StyleException if the style is not found.
 */
protected void setStyleRefValue(ElementRefValue refValue) throws StyleException {
  if (refValue == null && element.getStyle() == null)   return;
  doSetStyleRefValue(refValue);
}","/** 
 * Sets the theme with the given element reference value. Call this method when the theme name or theme element has been validated. Otherwise, uses  {@link #setStyle(String)} or {@link #setStyleElement(Theme)}.
 * @param refValue the validated reference value
 * @throws StyleException if the style is not found.
 */
protected void setStyleRefValue(ElementRefValue refValue) throws StyleException {
  if (refValue == null) {
    if ((element instanceof StyledElement) && (((StyledElement)element).getStyleName() == null)) {
      return;
    }
  }
  doSetStyleRefValue(refValue);
}",0.908923643054278
77976,"/** 
 * Returns the localized text for the label. If the localized text for the text resource key is found, it will be returned. Otherwise, the static text will be returned.
 * @return the localized text for the label
 */
public String getDisplayText(){
  String textKey=getStringProperty(Label.TEXT_ID_PROP);
  if (!StringUtil.isBlank(textKey)) {
    String localizedText=getModule().getMessage(textKey);
    if (!StringUtil.isBlank(localizedText))     return localizedText;
  }
  return getStringProperty(Label.TEXT_PROP);
}","/** 
 * Returns the localized text for the label. If the localized text for the text resource key is found, it will be returned. Otherwise, the static text will be returned.
 * @return the localized text for the label
 */
public String getDisplayText(){
  return getExternalizedValue(Label.TEXT_ID_PROP,Label.TEXT_PROP);
}",0.6957547169811321
77977,"/** 
 * Returns the localized description for the module. If the localized description for the description resource key is found, it will be returned. Otherwise, the static description will be returned.
 * @return the localized description for the module
 */
public String getDisplayDescription(){
  String textKey=getStringProperty(Module.DESCRIPTION_ID_PROP);
  if (!StringUtil.isBlank(textKey)) {
    String localizedText=getModule().getMessage(textKey);
    if (!StringUtil.isBlank(localizedText))     return localizedText;
  }
  return getStringProperty(Module.DESCRIPTION_PROP);
}","/** 
 * Returns the localized description for the module. If the localized description for the description resource key is found, it will be returned. Otherwise, the static description will be returned.
 * @return the localized description for the module
 */
public String getDisplayDescription(){
  return getExternalizedValue(Module.DESCRIPTION_ID_PROP,Module.DESCRIPTION_PROP);
}",0.737603305785124
77978,"/** 
 * Returns the localized text for prompt text. If the localized text for the text resource key is found, it will be returned. Otherwise, the static text will be returned.
 * @return the localized text for the prompt text
 */
public String getDisplayPromptText(){
  String textKey=getStringProperty(IScalarParameterModel.PROMPT_TEXT_ID_PROP);
  if (!StringUtil.isBlank(textKey)) {
    String localizedText=getModule().getMessage(textKey);
    if (!StringUtil.isBlank(localizedText))     return localizedText;
  }
  return getStringProperty(IScalarParameterModel.PROMPT_TEXT_PROP);
}","/** 
 * Returns the localized text for prompt text. If the localized text for the text resource key is found, it will be returned. Otherwise, the static text will be returned.
 * @return the localized text for the prompt text
 */
public String getDisplayPromptText(){
  return getExternalizedValue(IScalarParameterModel.PROMPT_TEXT_ID_PROP,IScalarParameterModel.PROMPT_TEXT_PROP);
}",0.6549586776859504
77979,"/** 
 * Returns the localized description for the template parameter definition. If the localized description for the description resource key is found, it will be returned. Otherwise, the static description will be returned.
 * @return the localized description for the template parameter definition
 */
public String getDisplayDescription(){
  String textKey=getStringProperty(ITemplateParameterDefinitionModel.DESCRIPTION_ID_PROP);
  if (!StringUtil.isBlank(textKey)) {
    String localizedText=getModule().getMessage(textKey);
    if (!StringUtil.isBlank(localizedText))     return localizedText;
  }
  return getDescription();
}","/** 
 * Returns the localized description for the template parameter definition. If the localized description for the description resource key is found, it will be returned. Otherwise, the static description will be returned.
 * @return the localized description for the template parameter definition
 */
public String getDisplayDescription(){
  return getExternalizedValue(ITemplateParameterDefinitionModel.DESCRIPTION_ID_PROP,ITemplateParameterDefinitionModel.DESCRIPTION_PROP);
}",0.7300448430493274
77980,"/** 
 * Returns the localized content for the text. If the localized text for the text resource key is found, it will be returned. Otherwise, the static text will be returned.
 * @return the localized content for the text.
 */
public String getDisplayContent(){
  String textKey=getStringProperty(TextItem.CONTENT_RESOURCE_KEY_PROP);
  ;
  if (!StringUtil.isBlank(textKey)) {
    String localizedText=getModule().getMessage(textKey);
    if (!StringUtil.isBlank(localizedText))     return localizedText;
  }
  return getStringProperty(TextItem.CONTENT_PROP);
}","/** 
 * Returns the localized content for the text. If the localized text for the text resource key is found, it will be returned. Otherwise, the static text will be returned.
 * @return the localized content for the text.
 */
public String getDisplayContent(){
  return super.getExternalizedValue(TextItem.CONTENT_RESOURCE_KEY_PROP,TextItem.CONTENT_PROP);
}",0.7080610021786492
77981,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  previouPage=prePage;
  ISelection selection=new StructuredSelection(SessionHandleAdapter.getInstance().getMediator().getCurrentState().getSelectionObject());
  jsEditor.handleSelectionChanged(selection);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  previouPage=prePage;
  IMediatorState state=SessionHandleAdapter.getInstance().getMediator().getCurrentState();
  ReportRequest request=new ReportRequest(state.getSource());
  List list=state.getSelectionObject();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}",0.499457111834962
77982,"protected void pageChange(int newPageIndex){
  int oldPageIndex=getCurrentPage();
  if (oldPageIndex == newPageIndex) {
    return;
  }
  if (oldPageIndex != -1) {
    Object oldPage=pages.get(oldPageIndex);
    Object newPage=pages.get(newPageIndex);
    super.pageChange(newPageIndex);
    if (!prePageChanges(oldPage,newPage)) {
      super.setActivePage(oldPageIndex);
      updateRelatedViews();
      return;
    }
  }
 else {
    super.pageChange(newPageIndex);
  }
  updateRelatedViews();
  bingdingKey(newPageIndex);
}","protected void pageChange(int newPageIndex){
  int oldPageIndex=getCurrentPage();
  if (oldPageIndex == newPageIndex) {
    return;
  }
  if (oldPageIndex != -1) {
    Object oldPage=pages.get(oldPageIndex);
    Object newPage=pages.get(newPageIndex);
    super.pageChange(newPageIndex);
    updateRelatedViews();
    if (!prePageChanges(oldPage,newPage)) {
      super.setActivePage(oldPageIndex);
      updateRelatedViews();
      return;
    }
  }
 else {
    super.pageChange(newPageIndex);
    updateRelatedViews();
  }
  bingdingKey(newPageIndex);
}",0.9297597042513864
77983,"public void partActivated(IWorkbenchPart part){
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
      GraphicalViewer view=editor.getGraphicalViewer();
      UIUtil.resetViewSelection(view,true);
    }
  }
}","public void partActivated(IWorkbenchPart part){
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette && getActivePageInstance() instanceof IReportEditorPage) {
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          ((IReportEditorPage)getActivePageInstance()).onBroughtToTop((IReportEditorPage)getActivePageInstance());
        }
      }
);
    }
  }
}",0.8930285069150438
77984,"/** 
 * Returns the IFigure that will receive focus upon a 'shift-tab' traverse event.
 * @param root The {@link LightweightSystem LightweightSystem's} root figure
 * @param focusOwner The IFigure who currently owns focus 
 * @return the previous focusable figure
 */
public IFigure getPreviousFocusableFigureInSameOrder(IFigure root,IFigure focusOwner){
  IFigure nextFocusOwner=focusOwner;
  if (focusOwner == null) {
    if (root.getChildren().size() != 0) {
      nextFocusOwner=findDeepestRightmostChildOf(root);
      if (isFocusEligible(nextFocusOwner))       return nextFocusOwner;
    }
 else     return null;
  }
  boolean found=false;
  while (!found) {
    IFigure parent=nextFocusOwner.getParent();
    if (parent == null)     return null;
    List siblings=parent.getChildren();
    int siblingPos=siblings.indexOf(nextFocusOwner);
    if (siblingPos != 0) {
      nextFocusOwner=((IFigure)(siblings.get(siblingPos - 1)));
      if (isFocusEligible(nextFocusOwner))       found=true;
    }
 else {
      nextFocusOwner=((IFigure)(siblings.get(siblings.size() - 1)));
      if (isFocusEligible(nextFocusOwner))       found=true;
    }
  }
  return nextFocusOwner;
}","/** 
 * Returns the IFigure that will receive focus upon a 'shift-tab' traverse event.
 * @param root The {@link LightweightSystem LightweightSystem's} root figure
 * @param focusOwner The IFigure who currently owns focus 
 * @return the previous focusable figure
 */
public IFigure getPreviousFocusableFigureInSameOrder(IFigure root,IFigure focusOwner){
  IFigure nextFocusOwner=focusOwner;
  if (focusOwner == null) {
    if (root.getChildren().size() != 0) {
      nextFocusOwner=findDeepestRightmostChildOf(root);
      if (isFocusEligible(nextFocusOwner))       return nextFocusOwner;
    }
 else     return null;
  }
  boolean found=false;
  ArrayList list=new ArrayList();
  while (!found) {
    IFigure parent=nextFocusOwner.getParent();
    if (parent == null)     return null;
    List siblings=parent.getChildren();
    int siblingPos=siblings.indexOf(nextFocusOwner);
    if (siblingPos != 0) {
      nextFocusOwner=((IFigure)(siblings.get(siblingPos - 1)));
      list.add(nextFocusOwner);
      if (isFocusEligible(nextFocusOwner))       found=true;
    }
 else     if (siblings.size() == 1) {
      nextFocusOwner=((IFigure)(siblings.get(0)));
      if (isFocusEligible(nextFocusOwner)) {
        found=true;
      }
 else {
        return null;
      }
    }
 else {
      nextFocusOwner=((IFigure)(siblings.get(siblings.size() - 1)));
      if (isFocusEligible(nextFocusOwner)) {
        found=true;
      }
 else       if (list.contains(nextFocusOwner)) {
        return null;
      }
 else {
        list.add(nextFocusOwner);
      }
    }
  }
  return nextFocusOwner;
}",0.8341163715215034
77985,"/** 
 * Returns the IFigure that will receive focus upon a 'tab' traverse event.
 * @param root the {@link LightweightSystem LightweightSystem's} root figure
 * @param focusOwner the IFigure who currently owns focus
 * @return the next focusable figure
 */
public IFigure getNextFocusableFigureInSameOrder(IFigure root,IFigure focusOwner){
  boolean found=false;
  IFigure nextFocusOwner=focusOwner;
  if (focusOwner == null) {
    if (root.getChildren().size() != 0) {
      nextFocusOwner=((IFigure)root.getChildren().get(0));
      if (isFocusEligible(nextFocusOwner))       return nextFocusOwner;
    }
 else     return null;
  }
  while (!found) {
    IFigure parent=nextFocusOwner.getParent();
    List siblings=parent.getChildren();
    int siblingPos=siblings.indexOf(nextFocusOwner);
    if (siblingPos < siblings.size() - 1) {
      nextFocusOwner=((IFigure)(siblings.get(siblingPos + 1)));
      if (isFocusEligible(nextFocusOwner))       found=true;
    }
 else {
      nextFocusOwner=((IFigure)(siblings.get(0)));
      if (isFocusEligible(nextFocusOwner))       found=true;
    }
  }
  return nextFocusOwner;
}","/** 
 * Returns the IFigure that will receive focus upon a 'tab' traverse event.
 * @param root the {@link LightweightSystem LightweightSystem's} root figure
 * @param focusOwner the IFigure who currently owns focus
 * @return the next focusable figure
 */
public IFigure getNextFocusableFigureInSameOrder(IFigure root,IFigure focusOwner){
  boolean found=false;
  IFigure nextFocusOwner=focusOwner;
  if (focusOwner == null) {
    if (root.getChildren().size() != 0) {
      nextFocusOwner=((IFigure)root.getChildren().get(0));
      if (isFocusEligible(nextFocusOwner))       return nextFocusOwner;
    }
 else     return null;
  }
  ArrayList list=new ArrayList();
  while (!found) {
    IFigure parent=nextFocusOwner.getParent();
    List siblings=parent.getChildren();
    int siblingPos=siblings.indexOf(nextFocusOwner);
    if (siblingPos < siblings.size() - 1) {
      nextFocusOwner=((IFigure)(siblings.get(siblingPos + 1)));
      list.add(nextFocusOwner);
      if (isFocusEligible(nextFocusOwner))       found=true;
    }
 else     if (siblings.size() == 1) {
      nextFocusOwner=((IFigure)(siblings.get(0)));
      if (isFocusEligible(nextFocusOwner)) {
        found=true;
      }
 else {
        return null;
      }
    }
 else {
      nextFocusOwner=((IFigure)(siblings.get(0)));
      if (isFocusEligible(nextFocusOwner)) {
        found=true;
      }
 else       if (list.contains(nextFocusOwner)) {
        return null;
      }
 else {
        list.add(nextFocusOwner);
      }
    }
  }
  return nextFocusOwner;
}",0.8281308762692742
77986,"/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected String getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
  }
  if (paramValue != null)   return paramValue;
  Object paramValueObj=null;
  if (ParameterAccessor.isDesigner(request) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
    paramValueObj=ParameterValidationUtil.getDisplayValue(parameter.getDataType(),parameter.getPattern(),paramValueObj,locale);
  }
  if (paramValueObj != null)   paramValue=paramValueObj.toString();
  return paramValue;
}","/** 
 * get parameter object.
 * @param request HttpServletRequest
 * @param parameter ScalarParameterHandle
 * @return
 */
protected String getParamValueAsString(HttpServletRequest request,ScalarParameterHandle parameter){
  String paramName=parameter.getName();
  String paramValue=null;
  if (ParameterAccessor.isReportParameterExist(request,paramName)) {
    paramValue=ParameterAccessor.getReportParameter(request,paramName,null);
  }
  if (paramValue != null)   return paramValue;
  Object paramValueObj=null;
  if (ParameterAccessor.isDesigner(request) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
    paramValueObj=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),paramValueObj,locale);
  }
  if (paramValueObj != null)   paramValue=paramValueObj.toString();
  return paramValue;
}",0.9869249394673124
77987,"/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
static List compileColumnExpression(String expression) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return null;
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=instance.parse(expression,context);
    instance.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(instance.pluginId,ResourceConstants.INVALID_EXPRESSION,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}","/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
static List compileColumnExpression(String expression) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return new ArrayList();
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=instance.parse(expression,context);
    instance.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(instance.pluginId,ResourceConstants.INVALID_EXPRESSION,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}",0.9880701754385964
77988,"/** 
 * Gets the display string for the value with the given data type and the locale. The value must be the valid data type.
 * @param dataType the data type of the input value
 * @param value the input value to validate
 * @param locale the locale information
 * @return the formatted string
 */
static private String getDisplayValue(String dataType,Object value,ULocale locale){
}","/** 
 * Gets the display string for the value with the given data type and the locale. The value must be the valid data type.
 * @param dataType the data type of the input value
 * @param value the input value to validate
 * @param locale the locale information
 * @return the formatted string
 */
static private String getDisplayValue(String dataType,Object value,ULocale locale){
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType) || value instanceof Date) {
    DateFormat formatter=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM,locale);
    return formatter.format((Date)value);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equalsIgnoreCase(dataType) || value instanceof Float || value instanceof Double) {
    NumberFormat formatter=NumberFormat.getNumberInstance(locale);
    return formatter.format(((Double)value).doubleValue());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equalsIgnoreCase(dataType) || value instanceof BigDecimal) {
    NumberFormat formatter=NumberFormat.getNumberInstance(locale);
    return formatter.format(((BigDecimal)value).doubleValue());
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equalsIgnoreCase(dataType) || value instanceof Boolean) {
    if (((Boolean)value).booleanValue()) {
      return getMessage(locale,BooleanPropertyType.BOOLEAN_TRUE_RESOURCE_KEY);
    }
    return getMessage(locale,BooleanPropertyType.BOOLEAN_FALSE_RESOURCE_KEY);
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType) || value instanceof String) {
    return (String)value;
  }
 else {
    return value.toString();
  }
}",0.3771541112752338
77989,"/** 
 * Creates the textual query editor 
 * @param parent
 */
private void createTextualQueryComposite(Composite parent){
  Composite composite=new Composite(parent,SWT.FILL);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  CompositeRuler ruler=new CompositeRuler();
  LineNumberRulerColumn lineNumbers=new LineNumberRulerColumn();
  ruler.addDecorator(0,lineNumbers);
  viewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  sourceViewerConfiguration=new JdbcSQLSourceViewerConfiguration(this.getDataSetDesign());
  viewer.configure(sourceViewerConfiguration);
  doc=new Document(getQueryText());
  FastPartitioner partitioner=new FastPartitioner(new SQLPartitionScanner(),new String[]{SQLPartitionScanner.SINGLE_LINE_COMMENT1,SQLPartitionScanner.SINGLE_LINE_COMMENT2,SQLPartitionScanner.MULTI_LINE_COMMENT,IDocument.DEFAULT_CONTENT_TYPE});
  partitioner.connect(doc);
  doc.setDocumentPartitioner(partitioner);
  viewer.setDocument(doc);
  viewer.getTextWidget().setFont(JFaceResources.getTextFont());
  viewer.getTextWidget().addBidiSegmentListener(new BidiSegmentListener(){
    public void lineGetSegments(    BidiSegmentEvent event){
      event.segments=getBidiLineSegments(event.lineText);
    }
  }
);
  attachMenus(viewer);
  GridData data=new GridData(GridData.FILL_BOTH);
  viewer.getControl().setLayoutData(data);
  addDropSupportToViewer();
  if (isExternalEditorConfigured()) {
    Button btnExternalEditor=new Button(composite,SWT.NONE);
    btnExternalEditor.setText(""String_Node_Str"");
    btnExternalEditor.addSelectionListener(this);
  }
  viewer.getTextWidget().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}","/** 
 * Creates the textual query editor 
 * @param parent
 */
private void createTextualQueryComposite(Composite parent){
  Composite composite=new Composite(parent,SWT.FILL | SWT.LEFT_TO_RIGHT);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  CompositeRuler ruler=new CompositeRuler();
  LineNumberRulerColumn lineNumbers=new LineNumberRulerColumn();
  ruler.addDecorator(0,lineNumbers);
  viewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  sourceViewerConfiguration=new JdbcSQLSourceViewerConfiguration(this.getDataSetDesign());
  viewer.configure(sourceViewerConfiguration);
  doc=new Document(getQueryText());
  FastPartitioner partitioner=new FastPartitioner(new SQLPartitionScanner(),new String[]{SQLPartitionScanner.SINGLE_LINE_COMMENT1,SQLPartitionScanner.SINGLE_LINE_COMMENT2,SQLPartitionScanner.MULTI_LINE_COMMENT,IDocument.DEFAULT_CONTENT_TYPE});
  partitioner.connect(doc);
  doc.setDocumentPartitioner(partitioner);
  viewer.setDocument(doc);
  viewer.getTextWidget().setFont(JFaceResources.getTextFont());
  viewer.getTextWidget().addBidiSegmentListener(new BidiSegmentListener(){
    public void lineGetSegments(    BidiSegmentEvent event){
      event.segments=getBidiLineSegments(event.lineText);
    }
  }
);
  attachMenus(viewer);
  GridData data=new GridData(GridData.FILL_BOTH);
  viewer.getControl().setLayoutData(data);
  addDropSupportToViewer();
  if (isExternalEditorConfigured()) {
    Button btnExternalEditor=new Button(composite,SWT.NONE);
    btnExternalEditor.setText(""String_Node_Str"");
    btnExternalEditor.addSelectionListener(this);
  }
  viewer.getTextWidget().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}",0.9956483899042646
77990,"/** 
 * Validates drop target from data set column in data view.
 * @return validate result
 */
protected static boolean handleValidateDataSetColumn(ResultSetColumnHandle insertObj,EditPart target){
  if (handleValidateDataSetColumnDropContainer(target) && DNDUtil.handleValidateTargetCanContainType(target.getModel(),ReportDesignConstants.DATA_ITEM)) {
    if (target.getModel() instanceof ModuleHandle) {
      return true;
    }
    DesignElementHandle handle=(DesignElementHandle)target.getParent().getModel();
    if (handle instanceof ReportItemHandle) {
      ReportItemHandle bindingHolder=DEUtil.getListingContainer(handle);
      DataSetHandle dataSet=DEUtil.getFirstDataSet(handle);
      return dataSet == null && (bindingHolder == null || !bindingHolder.getColumnBindings().iterator().hasNext()) || insertObj.getElementHandle().equals(dataSet);
    }
  }
  return false;
}","/** 
 * Validates drop target from data set column in data view.
 * @return validate result
 */
protected static boolean handleValidateDataSetColumn(ResultSetColumnHandle insertObj,EditPart target){
  if (handleValidateDataSetColumnDropContainer(target) && DNDUtil.handleValidateTargetCanContainType(target.getModel(),ReportDesignConstants.DATA_ITEM)) {
    if (target.getModel() instanceof ModuleHandle || isMasterPageHeaderOrFooter(target.getModel())) {
      return true;
    }
    DesignElementHandle handle=(DesignElementHandle)target.getParent().getModel();
    if (handle instanceof ReportItemHandle) {
      ReportItemHandle bindingHolder=DEUtil.getListingContainer(handle);
      DataSetHandle dataSet=DEUtil.getFirstDataSet(handle);
      return dataSet == null && (bindingHolder == null || !bindingHolder.getColumnBindings().iterator().hasNext()) || insertObj.getElementHandle().equals(dataSet);
    }
  }
  return false;
}",0.9730621220450796
77991,"/** 
 * Validates container of drop target from data set column in data view
 * @param dropPart
 * @return validate result
 */
protected static boolean handleValidateDataSetColumnDropContainer(EditPart dropPart){
  if (dropPart.getParent() == null) {
    return false;
  }
  Object container=dropPart.getParent().getModel();
  return (container instanceof GridHandle || container instanceof TableHandle || container instanceof FreeFormHandle|| container instanceof ListHandle|| dropPart.getModel() instanceof ModuleHandle);
}","/** 
 * Validates container of drop target from data set column in data view
 * @param dropPart
 * @return validate result
 */
protected static boolean handleValidateDataSetColumnDropContainer(EditPart dropPart){
  if (dropPart.getParent() == null) {
    return false;
  }
  Object container=dropPart.getParent().getModel();
  return (container instanceof GridHandle || container instanceof TableHandle || container instanceof FreeFormHandle|| container instanceof ListHandle|| container instanceof MasterPageHandle|| dropPart.getModel() instanceof ModuleHandle);
}",0.963302752293578
77992,"/** 
 * Validates object can be inserted to layout. Support the multiple.
 * @param insertObj single inserted object or multi-objects
 * @param targetPart
 * @return if can be inserted to layout
 */
public static boolean handleValidateInsertToLayout(Object insertObj,EditPart targetPart){
  if (targetPart == null) {
    return false;
  }
  if (insertObj instanceof Object[]) {
    Object[] array=(Object[])insertObj;
    if (!checkSameDataSetInMultiColumns(array)) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (!handleValidateInsertToLayout(array[i],targetPart)) {
        return false;
      }
    }
    return true;
  }
 else   if (insertObj instanceof IStructuredSelection) {
    return handleValidateInsertToLayout(((IStructuredSelection)insertObj).toArray(),targetPart);
  }
 else   if (insertObj instanceof DataSetHandle) {
    if (insertObj instanceof JointDataSetHandle)     return isHandleValid((DataSetHandle)insertObj) && handleValidateDataSet(targetPart);
 else     return isHandleValid((DataSetHandle)insertObj) && ((DataSetHandle)insertObj).getDataSource() != null && handleValidateDataSet(targetPart);
  }
 else   if (insertObj instanceof ResultSetColumnHandle) {
    return handleValidateDataSetColumn((ResultSetColumnHandle)insertObj,targetPart);
  }
 else   if (insertObj instanceof ScalarParameterHandle) {
    return isHandleValid((ScalarParameterHandle)insertObj) && handleValidateParameter(targetPart);
  }
  return false;
}","/** 
 * Validates object can be inserted to layout. Support the multiple.
 * @param insertObj single inserted object or multi-objects
 * @param targetPart
 * @return if can be inserted to layout
 */
public static boolean handleValidateInsertToLayout(Object insertObj,EditPart targetPart){
  if (targetPart == null) {
    return false;
  }
  if (insertObj instanceof Object[]) {
    Object[] array=(Object[])insertObj;
    if (!checkSameDataSetInMultiColumns(array)) {
      return false;
    }
    if (!checkContainContainMulitItem(array,targetPart.getModel())) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (!handleValidateInsertToLayout(array[i],targetPart)) {
        return false;
      }
    }
    return true;
  }
 else   if (insertObj instanceof IStructuredSelection) {
    return handleValidateInsertToLayout(((IStructuredSelection)insertObj).toArray(),targetPart);
  }
 else   if (insertObj instanceof DataSetHandle) {
    if (insertObj instanceof JointDataSetHandle)     return isHandleValid((DataSetHandle)insertObj) && handleValidateDataSet(targetPart);
 else     return isHandleValid((DataSetHandle)insertObj) && ((DataSetHandle)insertObj).getDataSource() != null && handleValidateDataSet(targetPart);
  }
 else   if (insertObj instanceof ResultSetColumnHandle) {
    return handleValidateDataSetColumn((ResultSetColumnHandle)insertObj,targetPart);
  }
 else   if (insertObj instanceof ScalarParameterHandle) {
    return isHandleValid((ScalarParameterHandle)insertObj) && handleValidateParameter(targetPart);
  }
  return false;
}",0.9686274509803922
77993,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginHeight=10;
  gridLayout.marginWidth=10;
  gridLayout.horizontalSpacing=10;
  gridLayout.verticalSpacing=10;
  composite.setLayout(gridLayout);
  Label label0=new Label(composite,SWT.NONE);
  label0.setText(MESSAGE_REPORT_TEMPLATES);
  Label previewLabel=new Label(composite,SWT.NONE);
  previewLabel.setText(MESSAGE_PREVIEW);
  GridData data=new GridData(GridData.BEGINNING);
  previewLabel.setLayoutData(data);
  templateList=new List(composite,SWT.BORDER);
  createCustomTemplateList();
  for (Iterator it=templates.iterator(); it.hasNext(); ) {
    templateList.add(((Template)it.next()).getName());
  }
  data=new GridData(GridData.BEGINNING | GridData.FILL_VERTICAL);
  data.widthHint=170;
  templateList.setLayoutData(data);
  previewPane=new Composite(composite,0);
  data=new GridData(GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
  previewPane.setLayoutData(data);
  gridLayout=new GridLayout();
  gridLayout.verticalSpacing=10;
  previewPane.setLayout(gridLayout);
  previewCanvas=new ImageCanvas(previewPane,SWT.BORDER);
  data=new GridData(GridData.BEGINNING);
  data.heightHint=229;
  data.widthHint=184;
  previewCanvas.setLayoutData(data);
  Label descriptionTitle=new Label(previewPane,SWT.NONE);
  descriptionTitle.setText(MESSAGE_DESCRIPTION);
  data=new GridData(GridData.FILL_HORIZONTAL);
  descriptionTitle.setLayoutData(data);
  description=new Label(previewPane,SWT.WRAP);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=184;
  data.horizontalIndent=20;
  description.setLayoutData(data);
  new Label(previewPane,SWT.NONE);
  chkBox=new Button(composite,SWT.CHECK);
  chkBox.setText(MESSAGE_SHOW_CHEATSHEET);
  chkBox.setSelection(ReportPlugin.readCheatSheetPreference());
  chkBox.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      ReportPlugin.writeCheatSheetPreference(chkBox.getSelection());
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      ReportPlugin.writeCheatSheetPreference(chkBox.getSelection());
    }
  }
);
  hookListeners();
  templateList.select(0);
  templateListener.handleEvent(new Event());
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginHeight=10;
  gridLayout.marginWidth=10;
  gridLayout.horizontalSpacing=10;
  gridLayout.verticalSpacing=10;
  composite.setLayout(gridLayout);
  Label label0=new Label(composite,SWT.NONE);
  label0.setText(MESSAGE_REPORT_TEMPLATES);
  Label previewLabel=new Label(composite,SWT.NONE);
  previewLabel.setText(MESSAGE_PREVIEW);
  GridData data=new GridData(GridData.BEGINNING);
  previewLabel.setLayoutData(data);
  templateList=new List(composite,SWT.BORDER | SWT.H_SCROLL);
  createCustomTemplateList();
  for (Iterator it=templates.iterator(); it.hasNext(); ) {
    templateList.add(((Template)it.next()).getName());
  }
  data=new GridData(GridData.BEGINNING | GridData.FILL_VERTICAL);
  data.widthHint=200;
  templateList.setLayoutData(data);
  previewPane=new Composite(composite,0);
  data=new GridData(GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
  previewPane.setLayoutData(data);
  gridLayout=new GridLayout();
  gridLayout.verticalSpacing=10;
  previewPane.setLayout(gridLayout);
  previewCanvas=new ImageCanvas(previewPane,SWT.BORDER);
  data=new GridData(GridData.BEGINNING);
  data.heightHint=229;
  data.widthHint=184;
  previewCanvas.setLayoutData(data);
  Label descriptionTitle=new Label(previewPane,SWT.NONE);
  descriptionTitle.setText(MESSAGE_DESCRIPTION);
  data=new GridData(GridData.FILL_HORIZONTAL);
  descriptionTitle.setLayoutData(data);
  description=new Label(previewPane,SWT.WRAP);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=184;
  data.horizontalIndent=20;
  description.setLayoutData(data);
  new Label(previewPane,SWT.NONE);
  chkBox=new Button(composite,SWT.CHECK);
  chkBox.setText(MESSAGE_SHOW_CHEATSHEET);
  chkBox.setSelection(ReportPlugin.readCheatSheetPreference());
  chkBox.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      ReportPlugin.writeCheatSheetPreference(chkBox.getSelection());
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      ReportPlugin.writeCheatSheetPreference(chkBox.getSelection());
    }
  }
);
  hookListeners();
  templateList.select(0);
  templateListener.handleEvent(new Event());
  setControl(composite);
}",0.9959668860114624
77994,"/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(String dataSetName) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetName);
  query.setMaxRows(1);
  return new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle).executeQuery(query,null,null,null).getResultMetaData();
}","/** 
 * @param dataSetName
 * @return
 * @throws BirtException
 */
private IResultMetaData getRealMetaData(DataSetHandle dataSetHandle) throws BirtException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(dataSetHandle.getQualifiedName());
  query.setMaxRows(1);
  boolean useResultHints=dataSetHandle instanceof ScriptDataSetHandle;
  return new QueryExecutionHelper(dataEngine,modelAdaptor,moduleHandle,useResultHints).executeQuery(query).getResultMetaData();
}",0.8109965635738832
77995,"/** 
 * @param dataSetHandle
 * @param useCache
 * @return
 * @throws BirtException
 */
IResultMetaData getDataSetMetaData(DataSetHandle dataSetHandle,boolean useCache) throws BirtException {
  if (dataSetHandle == null) {
    throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
  }
  if (useCache) {
    return getCachedMetaData(dataSetHandle.getCachedMetaDataHandle());
  }
 else {
    return getRealMetaData(dataSetHandle.getName());
  }
}","/** 
 * @param dataSetHandle
 * @param useCache
 * @return
 * @throws BirtException
 */
IResultMetaData getDataSetMetaData(DataSetHandle dataSetHandle,boolean useCache) throws BirtException {
  if (dataSetHandle == null) {
    throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
  }
  if (useCache) {
    return getCachedMetaData(dataSetHandle.getCachedMetaDataHandle());
  }
 else {
    return getRealMetaData(dataSetHandle);
  }
}",0.9890590809628008
77996,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
      }
    }
    if (dataSetHandle instanceof ScriptDataSetHandle == false)     dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_PROP).clearValue();
  }
  if (e != null)   throw e;
  return rsMeta;
}",0.9287833827893176
77997,"/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle) throws AdapterException, BirtException {
  if (handle == null)   throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  dataEngine.defineDataSet(this.modelAdaptor.adaptDataSet(handle));
}","/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle) throws AdapterException, BirtException {
  if (handle == null)   throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false)   baseDS.getResultSetHints().clear();
  dataEngine.defineDataSet(baseDS);
}",0.8950953678474114
77998,"/** 
 * @param dataEngine
 * @param modelAdaptor
 * @param moduleHandle
 */
QueryExecutionHelper(DataEngine dataEngine,IModelAdapter modelAdaptor,ModuleHandle moduleHandle){
  this.dataEngine=dataEngine;
  this.modelAdaptor=modelAdaptor;
  this.moduleHandle=moduleHandle;
}","/** 
 * @param dataEngine
 * @param modelAdaptor
 * @param moduleHandle
 * @param useResultHints
 */
QueryExecutionHelper(DataEngine dataEngine,IModelAdapter modelAdaptor,ModuleHandle moduleHandle,boolean useResultHints){
  this.dataEngine=dataEngine;
  this.modelAdaptor=modelAdaptor;
  this.moduleHandle=moduleHandle;
  this.useResultHints=useResultHints;
}",0.8639240506329114
77999,"private void createGeneralPart(Composite parent){
  Group group=new Group(parent,SWT.NULL);
  group.setText(LABEL_GROUP_GENERAL);
  group.setLayout(new GridLayout(2,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(group,SWT.NULL).setText(LABEL_CASCADING_PARAMETER_NAME);
  cascadingNameEditor=new Text(group,SWT.BORDER);
  cascadingNameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(group,SWT.NULL).setText(LABEL_PROMPT_TEXT1);
  promptTextEditor=new Text(group,SWT.BORDER);
  promptTextEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","private void createGeneralPart(Composite parent){
  Group group=new Group(parent,SWT.NULL);
  group.setText(LABEL_GROUP_GENERAL);
  group.setLayout(new GridLayout(2,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(group,SWT.NULL).setText(LABEL_CASCADING_PARAMETER_NAME);
  cascadingNameEditor=new Text(group,SWT.BORDER);
  cascadingNameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(group,SWT.NULL).setText(LABEL_GROUP_PROMPT_TEXT);
  promptTextEditor=new Text(group,SWT.BORDER);
  promptTextEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9943043124491456
78000,"private void createPropertiesPart(Composite parent){
  propertiesGroup=new Group(parent,SWT.NULL);
  propertiesGroup.setText(LABEL_GROUP_PROPERTIES);
  propertiesGroup.setLayout(new GridLayout(2,false));
  propertiesGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesGroup,LABEL_PARAM_NAME,maxStrLengthProperty);
  paramNameEditor=new Text(propertiesGroup,SWT.BORDER);
  paramNameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  paramNameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      valueTable.refresh(selectedParameter);
    }
  }
);
  createLabel(propertiesGroup,LABEL_PROMPT_TEXT2,maxStrLengthProperty);
  promptText=new Text(propertiesGroup,SWT.BORDER);
  promptText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesGroup,LABEL_DATA_TYPE,maxStrLengthProperty);
  dataTypeChooser=new Combo(propertiesGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
  dataTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataTypeChooser.setItems(ChoiceSetFactory.getDisplayNamefromChoiceSet(dataType));
  dataTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        changeDataType(dataType.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
        try {
          selectedParameter.setDataType(dataType.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
  createLabel(propertiesGroup,LABEL_DISPLAY_TYPE,maxStrLengthProperty);
  displayTypeChooser=new Combo(propertiesGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
  displayTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  displayTypeChooser.setItems(new String[]{DISPLAY_NAME_CONTROL_LIST,DISPLAY_NAME_CONTROL_COMBO});
  displayTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        try {
          String newControlType=getSelectedDisplayType();
          if (PARAM_CONTROL_COMBO.equals(newControlType)) {
            newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
            selectedParameter.setMustMatch(true);
          }
 else           if (PARAM_CONTROL_LIST.equals(newControlType)) {
            newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
            selectedParameter.setMustMatch(false);
          }
 else {
            selectedParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
          }
          selectedParameter.setControlType(newControlType);
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
  createLabel(propertiesGroup,LABEL_DEFAULT_VALUE,maxStrLengthProperty);
  defaultValueEditor=new Text(propertiesGroup,SWT.BORDER);
  defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","private void createPropertiesPart(Composite parent){
  propertiesGroup=new Group(parent,SWT.NULL);
  propertiesGroup.setText(LABEL_GROUP_PROPERTIES);
  propertiesGroup.setLayout(new GridLayout(2,false));
  propertiesGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesGroup,LABEL_PARAM_NAME,maxStrLengthProperty);
  paramNameEditor=new Text(propertiesGroup,SWT.BORDER);
  paramNameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  paramNameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      valueTable.refresh(selectedParameter);
    }
  }
);
  createLabel(propertiesGroup,LABEL_PARAMTER_PROMPT_TEXT,maxStrLengthProperty);
  promptText=new Text(propertiesGroup,SWT.BORDER);
  promptText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesGroup,LABEL_DATA_TYPE,maxStrLengthProperty);
  dataTypeChooser=new Combo(propertiesGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
  dataTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataTypeChooser.setItems(ChoiceSetFactory.getDisplayNamefromChoiceSet(dataType));
  dataTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        changeDataType(dataType.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
        try {
          selectedParameter.setDataType(dataType.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
  createLabel(propertiesGroup,LABEL_DISPLAY_TYPE,maxStrLengthProperty);
  displayTypeChooser=new Combo(propertiesGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
  displayTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  displayTypeChooser.setItems(new String[]{DISPLAY_NAME_CONTROL_LIST,DISPLAY_NAME_CONTROL_COMBO});
  displayTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        try {
          String newControlType=getSelectedDisplayType();
          if (PARAM_CONTROL_COMBO.equals(newControlType)) {
            newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
            selectedParameter.setMustMatch(true);
          }
 else           if (PARAM_CONTROL_LIST.equals(newControlType)) {
            newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
            selectedParameter.setMustMatch(false);
          }
 else {
            selectedParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
          }
          selectedParameter.setControlType(newControlType);
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
  createLabel(propertiesGroup,LABEL_DEFAULT_VALUE,maxStrLengthProperty);
  defaultValueEditor=new Text(propertiesGroup,SWT.BORDER);
  defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9977820025348544
