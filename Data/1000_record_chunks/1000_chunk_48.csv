record_number,buggy_code,fixed_code,code_similarity
47001,"@Override public Object[] getParameters(){
  return new Object[]{predicate};
}","@Override public Object[] getParameters(){
  return predicate == null ? null : new Object[]{predicate};
}",0.8524590163934426
47002,"private Collection<V> valuesForPagingPredicate(PagingPredicate pagingPredicate){
  pagingPredicate.setIterationType(IterationType.VALUE);
  MapQueryRequest request=new MapQueryRequest(name,pagingPredicate,IterationType.VALUE);
  QueryResultSet result=invoke(request);
  List<Entry> resultList=new ArrayList<Entry>(result.size());
  Iterator<Entry> iterator=result.rawIterator();
  while (iterator.hasNext()) {
    Entry entry=iterator.next();
    K key=toObject(entry.getKey());
    V value=toObject(entry.getValue());
    resultList.add(new AbstractMap.SimpleImmutableEntry<Object,V>(key,value));
  }
  return (Collection)getSortedQueryResultSet(resultList,pagingPredicate,IterationType.VALUE);
}","private Collection<V> valuesForPagingPredicate(PagingPredicate pagingPredicate){
  pagingPredicate.setIterationType(IterationType.ENTRY);
  MapQueryRequest request=new MapQueryRequest(name,pagingPredicate,IterationType.ENTRY);
  Collection<QueryResultRow> result=invoke(request);
  List<Entry> resultList=new ArrayList<Entry>(result.size());
  for (  QueryResultRow row : result) {
    K key=toObject(row.getKey());
    V value=toObject(row.getValue());
    resultList.add(new AbstractMap.SimpleImmutableEntry<Object,V>(key,value));
  }
  return (Collection)getSortedQueryResultSet(resultList,pagingPredicate,IterationType.VALUE);
}",0.2091798344620015
47003,"@Override @SuppressWarnings(""String_Node_Str"") public Set<Entry<K,V>> entrySet(Predicate predicate){
  PagingPredicate pagingPredicate=null;
  if (predicate instanceof PagingPredicate) {
    pagingPredicate=(PagingPredicate)predicate;
    pagingPredicate.setIterationType(IterationType.ENTRY);
  }
  MapQueryRequest request=new MapQueryRequest(name,predicate,IterationType.ENTRY);
  QueryResultSet result=invoke(request);
  if (pagingPredicate == null) {
    SerializationService serializationService=getContext().getSerializationService();
    InflatableSet.Builder<Entry<K,V>> setBuilder=InflatableSet.newBuilder(result.size());
    for (    Object data : result) {
      AbstractMap.SimpleImmutableEntry<Data,Data> dataEntry=(AbstractMap.SimpleImmutableEntry<Data,Data>)data;
      LazyMapEntry lazyEntry=new LazyMapEntry(dataEntry.getKey(),dataEntry.getValue(),serializationService);
      setBuilder.add(lazyEntry);
    }
    return setBuilder.build();
  }
  ArrayList<Map.Entry> resultList=new ArrayList<Map.Entry>();
  for (  Object data : result) {
    AbstractMap.SimpleImmutableEntry<Data,Data> dataEntry=(AbstractMap.SimpleImmutableEntry<Data,Data>)data;
    K key=toObject(dataEntry.getKey());
    V value=toObject(dataEntry.getValue());
    resultList.add(new AbstractMap.SimpleEntry<K,V>(key,value));
  }
  return (Set)getSortedQueryResultSet(resultList,pagingPredicate,IterationType.ENTRY);
}","@Override @SuppressWarnings(""String_Node_Str"") public Set<Entry<K,V>> entrySet(Predicate predicate){
  PagingPredicate pagingPredicate=null;
  if (predicate instanceof PagingPredicate) {
    pagingPredicate=(PagingPredicate)predicate;
    pagingPredicate.setIterationType(IterationType.ENTRY);
  }
  MapQueryRequest request=new MapQueryRequest(name,predicate,IterationType.ENTRY);
  Collection<QueryResultRow> result=invoke(request);
  if (pagingPredicate == null) {
    SerializationService serializationService=getContext().getSerializationService();
    InflatableSet.Builder<Entry<K,V>> setBuilder=InflatableSet.newBuilder(result.size());
    for (    QueryResultRow row : result) {
      LazyMapEntry entry=new LazyMapEntry(row.getKey(),row.getValue(),serializationService);
      setBuilder.add(entry);
    }
    return setBuilder.build();
  }
  ArrayList<Map.Entry> resultList=new ArrayList<Map.Entry>();
  for (  QueryResultRow data : result) {
    K key=toObject(data.getKey());
    V value=toObject(data.getValue());
    resultList.add(new AbstractMap.SimpleEntry<K,V>(key,value));
  }
  return (Set)getSortedQueryResultSet(resultList,pagingPredicate,IterationType.ENTRY);
}",0.6368197607101506
47004,"@Override public Collection<V> values(Predicate predicate){
  if (predicate instanceof PagingPredicate) {
    return valuesForPagingPredicate((PagingPredicate)predicate);
  }
  MapQueryRequest request=new MapQueryRequest(name,predicate,IterationType.VALUE);
  QueryResultSet result=invoke(request);
  List<V> values=new ArrayList<V>(result.size());
  for (  Object data : result) {
    V value=toObject(data);
    values.add(value);
  }
  return values;
}","@Override public Collection<V> values(Predicate predicate){
  if (predicate instanceof PagingPredicate) {
    return valuesForPagingPredicate((PagingPredicate)predicate);
  }
  MapQueryRequest request=new MapQueryRequest(name,predicate,IterationType.VALUE);
  Collection<QueryResultRow> result=invoke(request);
  List<V> values=new ArrayList<V>(result.size());
  for (  QueryResultRow row : result) {
    values.add((V)toObject(row.getValue()));
  }
  return values;
}",0.838569880823402
47005,"@Override @SuppressWarnings(""String_Node_Str"") public Set<K> keySet(Predicate predicate){
  PagingPredicate pagingPredicate=null;
  if (predicate instanceof PagingPredicate) {
    pagingPredicate=(PagingPredicate)predicate;
    pagingPredicate.setIterationType(IterationType.KEY);
  }
  MapQueryRequest request=new MapQueryRequest(name,predicate,IterationType.KEY);
  QueryResultSet result=invoke(request);
  if (pagingPredicate == null) {
    InflatableSet.Builder<K> setBuilder=InflatableSet.newBuilder(result.size());
    for (    Object o : result) {
      final K key=toObject(o);
      setBuilder.add(key);
    }
    return setBuilder.build();
  }
  Iterator<Entry> iterator=result.rawIterator();
  ArrayList<Map.Entry> resultList=new ArrayList<Map.Entry>();
  while (iterator.hasNext()) {
    Entry entry=iterator.next();
    K key=toObject(entry.getKey());
    resultList.add(new AbstractMap.SimpleImmutableEntry<K,V>(key,null));
  }
  return (Set<K>)getSortedQueryResultSet(resultList,pagingPredicate,IterationType.KEY);
}","@Override @SuppressWarnings(""String_Node_Str"") public Set<K> keySet(Predicate predicate){
  PagingPredicate pagingPredicate=null;
  if (predicate instanceof PagingPredicate) {
    pagingPredicate=(PagingPredicate)predicate;
    pagingPredicate.setIterationType(IterationType.KEY);
  }
  MapQueryRequest request=new MapQueryRequest(name,predicate,IterationType.KEY);
  Collection<QueryResultRow> result=invoke(request);
  if (pagingPredicate == null) {
    InflatableSet.Builder<K> setBuilder=InflatableSet.newBuilder(result.size());
    for (    QueryResultRow row : result) {
      K key=toObject(row.getKey());
      setBuilder.add(key);
    }
    return setBuilder.build();
  }
  ArrayList<Map.Entry> resultList=new ArrayList<Map.Entry>(result.size());
  for (  QueryResultRow row : result) {
    K key=toObject(row.getKey());
    resultList.add(new AbstractMap.SimpleImmutableEntry<K,V>(key,null));
  }
  return (Set<K>)getSortedQueryResultSet(resultList,pagingPredicate,IterationType.KEY);
}",0.7370498273310311
47006,"@Override protected final Object call() throws Exception {
  Collection<QueryResultEntry> result=new LinkedList<QueryResultEntry>();
  Collection<Member> members=nodeEngine.getClusterService().getMembers();
  List<Future> futures=new ArrayList<Future>();
  Predicate predicate=getPredicate();
  createInvocations(members,futures,predicate);
  int partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  Set<Integer> finishedPartitions=new HashSet<Integer>(partitionCount);
  collectResults(result,futures,finishedPartitions);
  if (hasMissingPartitions(finishedPartitions,partitionCount)) {
    List<Integer> missingList=findMissingPartitions(finishedPartitions,partitionCount);
    List<Future> missingFutures=new ArrayList<Future>(missingList.size());
    createInvocationsForMissingPartitions(missingList,missingFutures,predicate);
    collectResultsFromMissingPartitions(result,missingFutures);
  }
  return reduce(result);
}","@Override protected final Object call() throws Exception {
  Collection<QueryResultRow> result=new LinkedList<QueryResultRow>();
  Collection<Member> members=nodeEngine.getClusterService().getMembers();
  List<Future> futures=new ArrayList<Future>();
  Predicate predicate=getPredicate();
  createInvocations(members,futures,predicate);
  int partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  Set<Integer> finishedPartitions=new HashSet<Integer>(partitionCount);
  collectResults(result,futures,finishedPartitions);
  if (hasMissingPartitions(finishedPartitions,partitionCount)) {
    List<Integer> missingList=findMissingPartitions(finishedPartitions,partitionCount);
    List<Future> missingFutures=new ArrayList<Future>(missingList.size());
    createInvocationsForMissingPartitions(missingList,missingFutures,predicate);
    collectResultsFromMissingPartitions(result,missingFutures);
  }
  return reduce(result);
}",0.9915074309978767
47007,protected abstract Object reduce(Collection<QueryResultEntry> result);,protected abstract Object reduce(Collection<QueryResultRow> result);,0.9420289855072465
47008,"private void collectResults(Collection<QueryResultEntry> result,List<Future> futures,Set<Integer> finishedPartitions) throws InterruptedException, java.util.concurrent.ExecutionException {
  for (  Future future : futures) {
    QueryResult queryResult=(QueryResult)future.get();
    if (queryResult != null) {
      Collection<Integer> partitionIds=queryResult.getPartitionIds();
      if (partitionIds != null) {
        finishedPartitions.addAll(partitionIds);
        result.addAll(queryResult.getResult());
      }
    }
  }
}","private void collectResults(Collection<QueryResultRow> result,List<Future> futures,Set<Integer> finishedPartitions) throws InterruptedException, java.util.concurrent.ExecutionException {
  for (  Future future : futures) {
    QueryResult queryResult=(QueryResult)future.get();
    if (queryResult != null) {
      Collection<Integer> partitionIds=queryResult.getPartitionIds();
      if (partitionIds != null) {
        finishedPartitions.addAll(partitionIds);
        result.addAll(queryResult.getRows());
      }
    }
  }
}",0.9848771266540642
47009,"private void createInvocationsForMissingPartitions(List<Integer> missingPartitionsList,List<Future> futures,Predicate predicate){
  final InternalOperationService operationService=nodeEngine.getOperationService();
  for (  Integer partitionId : missingPartitionsList) {
    QueryPartitionOperation queryPartitionOperation=new QueryPartitionOperation(getDistributedObjectName(),predicate);
    queryPartitionOperation.setPartitionId(partitionId);
    try {
      Future future=operationService.invokeOnPartition(SERVICE_NAME,queryPartitionOperation,partitionId);
      futures.add(future);
    }
 catch (    Throwable t) {
      throw ExceptionUtil.rethrow(t);
    }
  }
}","private void createInvocationsForMissingPartitions(List<Integer> missingPartitionsList,List<Future> futures,Predicate predicate){
  final InternalOperationService operationService=nodeEngine.getOperationService();
  for (  Integer partitionId : missingPartitionsList) {
    QueryPartitionOperation queryPartitionOperation=new QueryPartitionOperation(getDistributedObjectName(),predicate,IterationType.ENTRY);
    queryPartitionOperation.setPartitionId(partitionId);
    try {
      Future future=operationService.invokeOnPartition(SERVICE_NAME,queryPartitionOperation,partitionId);
      futures.add(future);
    }
 catch (    Throwable t) {
      throw ExceptionUtil.rethrow(t);
    }
  }
}",0.9853157121879588
47010,"private void collectResultsFromMissingPartitions(Collection<QueryResultEntry> result,List<Future> futures) throws InterruptedException, java.util.concurrent.ExecutionException {
  for (  Future future : futures) {
    QueryResult queryResult=(QueryResult)future.get();
    result.addAll(queryResult.getResult());
  }
}","private void collectResultsFromMissingPartitions(Collection<QueryResultRow> result,List<Future> futures) throws InterruptedException, java.util.concurrent.ExecutionException {
  for (  Future future : futures) {
    QueryResult queryResult=(QueryResult)future.get();
    result.addAll(queryResult.getRows());
  }
}",0.9746835443037974
47011,"private void createInvocations(Collection<Member> members,List<Future> futures,Predicate predicate){
  final InternalOperationService operationService=nodeEngine.getOperationService();
  for (  Member member : members) {
    Future future=operationService.createInvocationBuilder(SERVICE_NAME,new QueryOperation(getDistributedObjectName(),predicate),member.getAddress()).invoke();
    futures.add(future);
  }
}","private void createInvocations(Collection<Member> members,List<Future> futures,Predicate predicate){
  final InternalOperationService operationService=nodeEngine.getOperationService();
  for (  Member member : members) {
    Future future=operationService.createInvocationBuilder(SERVICE_NAME,new QueryOperation(getDistributedObjectName(),predicate,IterationType.ENTRY),member.getAddress()).invoke();
    futures.add(future);
  }
}",0.97624703087886
47012,"@Override protected Object reduce(Collection<QueryResultEntry> result){
  HashMap<Data,Data> map=new HashMap<Data,Data>();
  for (  QueryResultEntry resultEntry : result) {
    map.put(resultEntry.getKeyData(),resultEntry.getValueData());
  }
  Set<Map.Entry<Data,Data>> entries=map.entrySet();
  return entries;
}","@Override protected Object reduce(Collection<QueryResultRow> result){
  HashMap<Data,Data> map=new HashMap<Data,Data>();
  for (  QueryResultRow resultEntry : result) {
    map.put(resultEntry.getKey(),resultEntry.getValue());
  }
  Set<Map.Entry<Data,Data>> entries=map.entrySet();
  return entries;
}",0.827922077922078
47013,"/** 
 * This copy-constructor is intended to be used by   {@link #clone()} method only.
 * @param other
 */
private InflatableSet(InflatableSet other){
  compactList=new ArrayList<T>(other.compactList.size());
  compactList.addAll(other.compactList);
  if (other.inflatedSet != null) {
    inflatedSet=new HashSet<T>(other.inflatedSet);
  }
  state=other.state;
}","/** 
 * This copy-constructor is intended to be used by   {@link #clone()} method only.
 * @param other other InflatableSet which should be cloned
 */
private InflatableSet(InflatableSet<T> other){
  compactList=new ArrayList<T>(other.compactList.size());
  compactList.addAll(other.compactList);
  if (other.inflatedSet != null) {
    inflatedSet=new HashSet<T>(other.inflatedSet);
  }
  state=other.state;
}",0.5181347150259067
47014,"/** 
 * Returns a shallow copy of this <tt>InflatableSet</tt> instance: the keys and values themselves are not cloned.
 * @return a shallow copy of this set
 */
@Override protected Object clone(){
  return new InflatableSet<T>(this);
}","/** 
 * Returns a shallow copy of this <tt>InflatableSet</tt> instance: the keys and values themselves are not cloned.
 * @return a shallow copy of this set
 */
@Override @SuppressFBWarnings(""String_Node_Str"") protected Object clone(){
  return new InflatableSet<T>(this);
}",0.9233791748526524
47015,"LinkedList<WanReplicationEvent> getFailureQ(){
  return failureQ;
}","List<WanReplicationEvent> getFailureQ(){
  return failureQ;
}",0.953125
47016,"@Test public void interruptedReplicationShouldNotDropAnEvent() throws InterruptedException {
  WanNoDelayReplication replication=spy(new WanNoDelayReplication());
  doThrow(InterruptedException.class).when(replication).getConnection();
  ReplicationEventObject eventObject=new MapReplicationUpdate();
  replication.publishReplicationEvent(""String_Node_Str"",eventObject);
  replication.run();
  replication.shutdown();
  assertEquals(0,replication.getEventQueue().size());
  assertEquals(1,replication.getFailureQ().size());
  assertSame(eventObject,replication.getFailureQ().peek().getEventObject());
}","@Test public void interruptedReplicationShouldNotDropAnEvent() throws InterruptedException {
  WanNoDelayReplication replication=spy(new WanNoDelayReplication());
  doThrow(InterruptedException.class).when(replication).getConnection();
  ReplicationEventObject eventObject=new MapReplicationUpdate();
  replication.publishReplicationEvent(""String_Node_Str"",eventObject);
  replication.run();
  replication.shutdown();
  assertEquals(0,replication.getEventQueue().size());
  assertEquals(1,replication.getFailureQ().size());
  assertSame(eventObject,replication.getFailureQ().get(0).getEventObject());
}",0.9916943521594684
47017,"public ClientExceptionFactory(boolean jcacheAvailable){
  if (jcacheAvailable) {
    register(ClientProtocolErrorCodes.CACHE,CacheException.class,new ExceptionFactory(){
      @Override public Throwable createException(      String message,      Throwable cause){
        return new CacheException(message,cause);
      }
    }
);
    register(ClientProtocolErrorCodes.CACHE_LOADER,CacheLoaderException.class,new ExceptionFactory(){
      @Override public Throwable createException(      String message,      Throwable cause){
        return new CacheLoaderException(message,cause);
      }
    }
);
    register(ClientProtocolErrorCodes.CACHE_WRITER,CacheWriterException.class,new ExceptionFactory(){
      @Override public Throwable createException(      String message,      Throwable cause){
        return new CacheWriterException(message,cause);
      }
    }
);
    register(ClientProtocolErrorCodes.ENTRY_PROCESSOR,EntryProcessorException.class,new ExceptionFactory(){
      @Override public Throwable createException(      String message,      Throwable cause){
        return new EntryProcessorException(message,cause);
      }
    }
);
  }
  register(ClientProtocolErrorCodes.ARRAY_INDEX_OUT_OF_BOUNDS,ArrayIndexOutOfBoundsException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ArrayIndexOutOfBoundsException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.ARRAY_STORE,ArrayStoreException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ArrayStoreException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.AUTHENTICATION,AuthenticationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new AuthenticationException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CACHE_NOT_EXISTS,CacheNotExistsException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new CacheNotExistsException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CALLER_NOT_MEMBER,CallerNotMemberException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new CallerNotMemberException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CANCELLATION,CancellationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new CancellationException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CLASS_CAST,ClassCastException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ClassCastException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CLASS_NOT_FOUND,ClassNotFoundException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ClassNotFoundException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.CONCURRENT_MODIFICATION,ConcurrentModificationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ConcurrentModificationException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CONFIG_MISMATCH,ConfigMismatchException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ConfigMismatchException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CONFIGURATION,ConfigurationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ConfigurationException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.DISTRIBUTED_OBJECT_DESTROYED,DistributedObjectDestroyedException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new DistributedObjectDestroyedException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.DUPLICATE_INSTANCE_NAME,DuplicateInstanceNameException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new DuplicateInstanceNameException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.EOF,EOFException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new EOFException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.EXECUTION,ExecutionException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ExecutionException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.HAZELCAST,HazelcastException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new HazelcastException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.HAZELCAST_INSTANCE_NOT_ACTIVE,HazelcastInstanceNotActiveException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new HazelcastInstanceNotActiveException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.HAZELCAST_OVERLOAD,HazelcastOverloadException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new HazelcastOverloadException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.HAZELCAST_SERIALIZATION,HazelcastSerializationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new HazelcastSerializationException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.IO,IOException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IOException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_ARGUMENT,IllegalArgumentException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalArgumentException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_MONITOR_STATE,IllegalMonitorStateException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalMonitorStateException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_STATE,IllegalStateException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalStateException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_THREAD_STATE,IllegalThreadStateException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalThreadStateException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.INDEX_OUT_OF_BOUNDS,IndexOutOfBoundsException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IndexOutOfBoundsException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.INTERRUPTED,InterruptedException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new InterruptedException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.INVALID_ADDRESS,AddressUtil.InvalidAddressException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new AddressUtil.InvalidAddressException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.INVALID_CONFIGURATION,InvalidConfigurationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new InvalidConfigurationException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.MEMBER_LEFT,MemberLeftException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new MemberLeftException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.NEGATIVE_ARRAY_SIZE,NegativeArraySizeException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new NegativeArraySizeException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.NO_SUCH_ELEMENT,NoSuchElementException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new NoSuchElementException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.NOT_SERIALIZABLE,NotSerializableException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new NotSerializableException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.NULL_POINTER,NullPointerException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new NullPointerException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.OPERATION_TIMEOUT,OperationTimeoutException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new OperationTimeoutException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.PARTITION_MIGRATING,PartitionMigratingException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new PartitionMigratingException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.QUERY,QueryException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new QueryException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.QUERY_RESULT_SIZE_EXCEEDED,QueryResultSizeExceededException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new QueryResultSizeExceededException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.QUORUM,QuorumException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new QuorumException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.REACHED_MAX_SIZE,ReachedMaxSizeException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ReachedMaxSizeException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.REJECTED_EXECUTION,RejectedExecutionException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RejectedExecutionException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.REMOTE_MAP_REDUCE,RemoteMapReduceException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RemoteMapReduceException(message,Collections.<Exception>emptyList());
    }
  }
);
  register(ClientProtocolErrorCodes.RESPONSE_ALREADY_SENT,ResponseAlreadySentException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ResponseAlreadySentException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.RETRYABLE_HAZELCAST,RetryableHazelcastException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RetryableHazelcastException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.RETRYABLE_IO,RetryableIOException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RetryableIOException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.RUNTIME,RuntimeException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RuntimeException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.SECURITY,SecurityException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new SecurityException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.SOCKET,SocketException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new SocketException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.STALE_SEQUENCE,StaleSequenceException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new StaleSequenceException(message,0);
    }
  }
);
  register(ClientProtocolErrorCodes.TARGET_DISCONNECTED,TargetDisconnectedException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TargetDisconnectedException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TARGET_NOT_MEMBER,TargetNotMemberException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TargetNotMemberException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TIMEOUT,TimeoutException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TimeoutException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TOPIC_OVERLOAD,TopicOverloadException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TopicOverloadException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TOPOLOGY_CHANGED,TopologyChangedException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TopologyChangedException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TRANSACTION,TransactionException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TransactionException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.TRANSACTION_NOT_ACTIVE,TransactionNotActiveException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TransactionNotActiveException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TRANSACTION_TIMED_OUT,TransactionTimedOutException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TransactionTimedOutException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.URI_SYNTAX,URISyntaxException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new URISyntaxException(null,message,-1);
    }
  }
);
  register(ClientProtocolErrorCodes.UTF_DATA_FORMAT,UTFDataFormatException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new UTFDataFormatException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.UNSUPPORTED_OPERATION,UnsupportedOperationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new UnsupportedOperationException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.WRONG_TARGET,WrongTargetException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new WrongTargetException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.XA,XAException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new XAException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.ACCESS_CONTROL,AccessControlException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new AccessControlException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.LOGIN,LoginException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new LoginException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.UNSUPPORTED_CALLBACK,UnsupportedCallbackException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new UnsupportedCallbackException(null,message);
    }
  }
);
}","public ClientExceptionFactory(boolean jcacheAvailable){
  if (jcacheAvailable) {
    register(ClientProtocolErrorCodes.CACHE,CacheException.class,new ExceptionFactory(){
      @Override public Throwable createException(      String message,      Throwable cause){
        return new CacheException(message,cause);
      }
    }
);
    register(ClientProtocolErrorCodes.CACHE_LOADER,CacheLoaderException.class,new ExceptionFactory(){
      @Override public Throwable createException(      String message,      Throwable cause){
        return new CacheLoaderException(message,cause);
      }
    }
);
    register(ClientProtocolErrorCodes.CACHE_WRITER,CacheWriterException.class,new ExceptionFactory(){
      @Override public Throwable createException(      String message,      Throwable cause){
        return new CacheWriterException(message,cause);
      }
    }
);
    register(ClientProtocolErrorCodes.ENTRY_PROCESSOR,EntryProcessorException.class,new ExceptionFactory(){
      @Override public Throwable createException(      String message,      Throwable cause){
        return new EntryProcessorException(message,cause);
      }
    }
);
  }
  register(ClientProtocolErrorCodes.ARRAY_INDEX_OUT_OF_BOUNDS,ArrayIndexOutOfBoundsException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ArrayIndexOutOfBoundsException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.ARRAY_STORE,ArrayStoreException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ArrayStoreException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.AUTHENTICATION,AuthenticationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new AuthenticationException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CACHE_NOT_EXISTS,CacheNotExistsException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new CacheNotExistsException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CALLER_NOT_MEMBER,CallerNotMemberException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new CallerNotMemberException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CANCELLATION,CancellationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new CancellationException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CLASS_CAST,ClassCastException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ClassCastException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CLASS_NOT_FOUND,ClassNotFoundException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ClassNotFoundException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.CONCURRENT_MODIFICATION,ConcurrentModificationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ConcurrentModificationException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CONFIG_MISMATCH,ConfigMismatchException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ConfigMismatchException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.CONFIGURATION,ConfigurationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ConfigurationException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.DISTRIBUTED_OBJECT_DESTROYED,DistributedObjectDestroyedException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new DistributedObjectDestroyedException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.DUPLICATE_INSTANCE_NAME,DuplicateInstanceNameException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new DuplicateInstanceNameException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.EOF,EOFException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new EOFException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.EXECUTION,ExecutionException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ExecutionException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.HAZELCAST,HazelcastException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new HazelcastException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.HAZELCAST_INSTANCE_NOT_ACTIVE,HazelcastInstanceNotActiveException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new HazelcastInstanceNotActiveException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.HAZELCAST_OVERLOAD,HazelcastOverloadException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new HazelcastOverloadException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.HAZELCAST_SERIALIZATION,HazelcastSerializationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new HazelcastSerializationException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.IO,IOException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IOException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_ARGUMENT,IllegalArgumentException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalArgumentException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_ACCESS_EXCEPTION,IllegalAccessException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalAccessException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_ACCESS_ERROR,IllegalAccessError.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalAccessError(message);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_MONITOR_STATE,IllegalMonitorStateException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalMonitorStateException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_STATE,IllegalStateException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalStateException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.ILLEGAL_THREAD_STATE,IllegalThreadStateException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IllegalThreadStateException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.INDEX_OUT_OF_BOUNDS,IndexOutOfBoundsException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new IndexOutOfBoundsException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.INTERRUPTED,InterruptedException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new InterruptedException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.INVALID_ADDRESS,AddressUtil.InvalidAddressException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new AddressUtil.InvalidAddressException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.INVALID_CONFIGURATION,InvalidConfigurationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new InvalidConfigurationException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.MEMBER_LEFT,MemberLeftException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new MemberLeftException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.NEGATIVE_ARRAY_SIZE,NegativeArraySizeException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new NegativeArraySizeException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.NO_SUCH_ELEMENT,NoSuchElementException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new NoSuchElementException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.NOT_SERIALIZABLE,NotSerializableException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new NotSerializableException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.NULL_POINTER,NullPointerException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new NullPointerException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.OPERATION_TIMEOUT,OperationTimeoutException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new OperationTimeoutException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.PARTITION_MIGRATING,PartitionMigratingException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new PartitionMigratingException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.QUERY,QueryException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new QueryException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.QUERY_RESULT_SIZE_EXCEEDED,QueryResultSizeExceededException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new QueryResultSizeExceededException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.QUORUM,QuorumException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new QuorumException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.REACHED_MAX_SIZE,ReachedMaxSizeException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ReachedMaxSizeException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.REJECTED_EXECUTION,RejectedExecutionException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RejectedExecutionException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.REMOTE_MAP_REDUCE,RemoteMapReduceException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RemoteMapReduceException(message,Collections.<Exception>emptyList());
    }
  }
);
  register(ClientProtocolErrorCodes.RESPONSE_ALREADY_SENT,ResponseAlreadySentException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new ResponseAlreadySentException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.RETRYABLE_HAZELCAST,RetryableHazelcastException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RetryableHazelcastException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.RETRYABLE_IO,RetryableIOException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RetryableIOException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.RUNTIME,RuntimeException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new RuntimeException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.SECURITY,SecurityException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new SecurityException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.SOCKET,SocketException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new SocketException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.STALE_SEQUENCE,StaleSequenceException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new StaleSequenceException(message,0);
    }
  }
);
  register(ClientProtocolErrorCodes.TARGET_DISCONNECTED,TargetDisconnectedException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TargetDisconnectedException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TARGET_NOT_MEMBER,TargetNotMemberException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TargetNotMemberException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TIMEOUT,TimeoutException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TimeoutException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TOPIC_OVERLOAD,TopicOverloadException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TopicOverloadException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TOPOLOGY_CHANGED,TopologyChangedException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TopologyChangedException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TRANSACTION,TransactionException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TransactionException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.TRANSACTION_NOT_ACTIVE,TransactionNotActiveException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TransactionNotActiveException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.TRANSACTION_TIMED_OUT,TransactionTimedOutException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new TransactionTimedOutException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.URI_SYNTAX,URISyntaxException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new URISyntaxException(null,message,-1);
    }
  }
);
  register(ClientProtocolErrorCodes.UTF_DATA_FORMAT,UTFDataFormatException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new UTFDataFormatException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.UNSUPPORTED_OPERATION,UnsupportedOperationException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new UnsupportedOperationException(message,cause);
    }
  }
);
  register(ClientProtocolErrorCodes.WRONG_TARGET,WrongTargetException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new WrongTargetException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.XA,XAException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new XAException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.ACCESS_CONTROL,AccessControlException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new AccessControlException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.LOGIN,LoginException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new LoginException(message);
    }
  }
);
  register(ClientProtocolErrorCodes.UNSUPPORTED_CALLBACK,UnsupportedCallbackException.class,new ExceptionFactory(){
    @Override public Throwable createException(    String message,    Throwable cause){
      return new UnsupportedCallbackException(null,message);
    }
  }
);
}",0.98567953112905
47018,"private void executeTask(Runnable task){
  NonBlockingIOThread target=getTargetIoThread(task);
  if (target == this) {
    task.run();
  }
 else {
    target.addTask(task);
  }
}","private void executeTask(Runnable task){
  NonBlockingIOThread target=getTargetIoThread(task);
  if (target == this) {
    task.run();
  }
 else {
    target.addTaskAndWakeup(task);
  }
}",0.9753424657534246
47019,"/** 
 * Adds a task to be executed by the NonBlockingIOThread and wakes up the selector so that it will eventually pick up the task.
 * @param task the task to add.
 * @throws NullPointerException if task is null
 */
public final void addTaskAndWakeup(Runnable task){
  taskQueue.add(task);
  if (!selectNow) {
    selector.wakeup();
  }
}","/** 
 * Adds a task to be executed by the NonBlockingIOThread and wakes up the selector so that it will eventually pick up the task.
 * @param task the task to add.
 * @throws NullPointerException if task is null
 */
public void addTaskAndWakeup(Runnable task){
  taskQueue.add(task);
  if (!selectNow) {
    selector.wakeup();
  }
}",0.9910714285714286
47020,"/** 
 * Overrides the public address of a member. Behind a NAT, two endpoints may not be able to see/access each other.  If both nodes set their public addresses to their defined addresses on NAT, then that way  they can communicate with each other. It should be set in the format “host IP address:port number”.
 */
public NetworkConfig setPublicAddress(String publicAddress){
  this.publicAddress=publicAddress;
  return this;
}","/** 
 * Overrides the public address of a member. Behind a NAT, two endpoints may not be able to see/access each other. If both nodes set their public addresses to their defined addresses on NAT, then that way they can communicate with each other. It should be set in the format “host IP address:port number”.
 */
public NetworkConfig setPublicAddress(String publicAddress){
  this.publicAddress=publicAddress;
  return this;
}",0.9976635514018692
47021,"@Override public void run(){
  if (!alive) {
    return;
  }
  final long now=Clock.currentTimeMillis();
  for (  ClientConnection connection : connections.values()) {
    if (now - connection.lastReadTime() > heartBeatTimeout) {
      if (connection.isHeartBeating()) {
        LOGGER.warning(""String_Node_Str"" + connection);
        connection.heartBeatingFailed();
        fireHeartBeatStopped(connection);
      }
    }
    if (now - connection.lastReadTime() > heartBeatInterval) {
      ClientMessage request=ClientPingCodec.encodeRequest();
      ClientInvocation clientInvocation=new ClientInvocation(client,request,connection);
      clientInvocation.setBypassHeartbeatCheck(true);
      clientInvocation.invoke();
    }
 else {
      if (!connection.isHeartBeating()) {
        LOGGER.warning(""String_Node_Str"" + connection);
        connection.heartBeatingSucceed();
        fireHeartBeatStarted(connection);
      }
    }
  }
}","@Override public void run(){
  if (!alive) {
    return;
  }
  final long now=Clock.currentTimeMillis();
  for (  ClientConnection connection : connections.values()) {
    if (now - connection.lastReadTimeMillis() > heartBeatTimeout) {
      if (connection.isHeartBeating()) {
        LOGGER.warning(""String_Node_Str"" + connection);
        connection.heartBeatingFailed();
        fireHeartBeatStopped(connection);
      }
    }
    if (now - connection.lastReadTimeMillis() > heartBeatInterval) {
      ClientMessage request=ClientPingCodec.encodeRequest();
      ClientInvocation clientInvocation=new ClientInvocation(client,request,connection);
      clientInvocation.setBypassHeartbeatCheck(true);
      clientInvocation.invoke();
    }
 else {
      if (!connection.isHeartBeating()) {
        LOGGER.warning(""String_Node_Str"" + connection);
        connection.heartBeatingSucceed();
        fireHeartBeatStarted(connection);
      }
    }
  }
}",0.9936507936507936
47022,"@Override public void run(){
  if (!alive) {
    return;
  }
  final long now=Clock.currentTimeMillis();
  for (  ClientConnection connection : connections.values()) {
    if (now - connection.lastReadTime() > heartBeatTimeout) {
      if (connection.isHeartBeating()) {
        connection.heartBeatingFailed();
        fireHeartBeatStopped(connection);
      }
    }
    if (now - connection.lastReadTime() > heartBeatInterval) {
      final ClientPingRequest request=new ClientPingRequest();
      new ClientInvocation(client,request,connection).invoke();
    }
 else {
      if (!connection.isHeartBeating()) {
        connection.heartBeatingSucceed();
        fireHeartBeatStarted(connection);
      }
    }
  }
}","@Override public void run(){
  if (!alive) {
    return;
  }
  final long now=Clock.currentTimeMillis();
  for (  ClientConnection connection : connections.values()) {
    if (now - connection.lastReadTimeMillis() > heartBeatTimeout) {
      if (connection.isHeartBeating()) {
        connection.heartBeatingFailed();
        fireHeartBeatStopped(connection);
      }
    }
    if (now - connection.lastReadTimeMillis() > heartBeatInterval) {
      final ClientPingRequest request=new ClientPingRequest();
      new ClientInvocation(client,request,connection).invoke();
    }
 else {
      if (!connection.isHeartBeating()) {
        connection.heartBeatingSucceed();
        fireHeartBeatStarted(connection);
      }
    }
  }
}",0.991701244813278
47023,"private void monitor(String memberUuid,ClientEndpointImpl clientEndpoint){
  if (clientEndpoint.isFirstConnection()) {
    return;
  }
  final Connection connection=clientEndpoint.getConnection();
  final long lastTimePackageReceived=connection.lastReadTime();
  final long timeoutInMillis=TimeUnit.SECONDS.toMillis(heartbeatTimeoutSeconds);
  final long currentTimeInMillis=Clock.currentTimeMillis();
  if (lastTimePackageReceived + timeoutInMillis < currentTimeInMillis) {
    if (memberUuid.equals(clientEndpoint.getPrincipal().getOwnerUuid())) {
      logger.log(Level.WARNING,""String_Node_Str"" + connection);
      connection.close();
    }
  }
}","private void monitor(String memberUuid,ClientEndpointImpl clientEndpoint){
  if (clientEndpoint.isFirstConnection()) {
    return;
  }
  final Connection connection=clientEndpoint.getConnection();
  final long lastTimePackageReceived=connection.lastReadTimeMillis();
  final long timeoutInMillis=TimeUnit.SECONDS.toMillis(heartbeatTimeoutSeconds);
  final long currentTimeInMillis=Clock.currentTimeMillis();
  if (lastTimePackageReceived + timeoutInMillis < currentTimeInMillis) {
    if (memberUuid.equals(clientEndpoint.getPrincipal().getOwnerUuid())) {
      logger.log(Level.WARNING,""String_Node_Str"" + connection);
      connection.close();
    }
  }
}",0.9954128440366972
47024,"@Override public void removeAll(Set<Data> keys,int completionId){
  final long now=Clock.currentTimeMillis();
  final Set<Data> localKeys=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
  try {
    deleteAllCacheEntry(localKeys);
  }
  finally {
    final Set<Data> keysToClean=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
    for (    Data key : keysToClean) {
      eventsBatchingEnabled=true;
      final R record=records.get(key);
      if (localKeys.contains(key) && record != null) {
        final boolean isExpired=processExpiredEntry(key,record,now);
        if (!isExpired) {
          deleteRecord(key,IGNORE_COMPLETION);
          if (isStatisticsEnabled()) {
            statistics.increaseCacheRemovals(1);
          }
        }
        keys.add(key);
      }
 else {
        keys.remove(key);
      }
      eventsBatchingEnabled=false;
      hasExpiringEntry=false;
    }
    int orderKey=keys.hashCode();
    publishBatchedEvents(name,CacheEventType.REMOVED,orderKey);
    if (isEventsEnabled()) {
      publishEvent(createCacheCompleteEvent(new DefaultData(),completionId));
    }
  }
}","@Override public void removeAll(Set<Data> keys,int completionId){
  final long now=Clock.currentTimeMillis();
  final Set<Data> localKeys=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
  try {
    deleteAllCacheEntry(localKeys);
  }
  finally {
    final Set<Data> keysToClean=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
    for (    Data key : keysToClean) {
      eventsBatchingEnabled=true;
      final R record=records.get(key);
      if (localKeys.contains(key) && record != null) {
        final boolean isExpired=processExpiredEntry(key,record,now);
        if (!isExpired) {
          deleteRecord(key,IGNORE_COMPLETION);
          if (isStatisticsEnabled()) {
            statistics.increaseCacheRemovals(1);
          }
        }
        keys.add(key);
      }
 else {
        keys.remove(key);
      }
      eventsBatchingEnabled=false;
      hasExpiringEntry=false;
    }
    int orderKey=keys.hashCode();
    publishBatchedEvents(name,CacheEventType.REMOVED,orderKey);
    if (isEventsEnabled()) {
      publishEvent(createCacheCompleteEvent(completionId));
    }
  }
}",0.9919786096256684
47025,"public void setAccessHit(long accessHit){
  this.accessHit=accessHit;
}","public CacheEventContext setAccessHit(long accessHit){
  this.accessHit=accessHit;
  return this;
}",0.8117647058823529
47026,"public void setIsOldValueAvailable(boolean isOldValueAvailable){
  this.isOldValueAvailable=isOldValueAvailable;
}","public CacheEventContext setIsOldValueAvailable(boolean isOldValueAvailable){
  this.isOldValueAvailable=isOldValueAvailable;
  return this;
}",0.875
47027,"public void setExpirationTime(long expirationTime){
  this.expirationTime=expirationTime;
}","public CacheEventContext setExpirationTime(long expirationTime){
  this.expirationTime=expirationTime;
  return this;
}",0.8476190476190476
47028,"public void setOrigin(String origin){
  this.origin=origin;
}","public CacheEventContext setOrigin(String origin){
  this.origin=origin;
  return this;
}",0.7866666666666666
47029,"public void setDataKey(Data dataKey){
  this.dataKey=dataKey;
}","public CacheEventContext setDataKey(Data dataKey){
  this.dataKey=dataKey;
  return this;
}",0.7922077922077922
47030,"public void setEventType(CacheEventType eventType){
  this.eventType=eventType;
}","public CacheEventContext setEventType(CacheEventType eventType){
  this.eventType=eventType;
  return this;
}",0.8315789473684211
47031,"public void setCacheName(String cacheName){
  this.cacheName=cacheName;
}","public CacheEventContext setCacheName(String cacheName){
  this.cacheName=cacheName;
  return this;
}",0.8160919540229885
47032,"public void setDataValue(Data dataValue){
  this.dataValue=dataValue;
}","public CacheEventContext setDataValue(Data dataValue){
  this.dataValue=dataValue;
  return this;
}",0.8117647058823529
47033,"public void setCompletionId(int completionId){
  this.completionId=completionId;
}","public CacheEventContext setCompletionId(int completionId){
  this.completionId=completionId;
  return this;
}",0.8333333333333334
47034,"public void setOrderKey(int orderKey){
  this.orderKey=orderKey;
}","public CacheEventContext setOrderKey(int orderKey){
  this.orderKey=orderKey;
  return this;
}",0.8
47035,"public void setDataOldValue(Data dataOldValue){
  this.dataOldValue=dataOldValue;
}","public CacheEventContext setDataOldValue(Data dataOldValue){
  this.dataOldValue=dataOldValue;
  return this;
}",0.8350515463917526
47036,"@Override public void beforeRun() throws Exception {
  ICacheService service=getService();
  cache=service.getCacheRecordStore(name,getPartitionId());
}","@Override public void beforeRun() throws Exception {
  service=getService();
  cache=service.getCacheRecordStore(name,getPartitionId());
}",0.9517241379310344
47037,"@Override public void run() throws Exception {
  if (cache == null) {
    return;
  }
  filterKeys();
  try {
    if (keys == null) {
      cache.removeAll(filteredKeys,completionId);
    }
 else     if (!filteredKeys.isEmpty()) {
      cache.removeAll(filteredKeys,completionId);
    }
    response=new CacheClearResponse(Boolean.TRUE);
  }
 catch (  CacheException e) {
    response=new CacheClearResponse(e);
  }
}","@Override public void run() throws Exception {
  if (cache == null) {
    service.publishEvent(createCacheCompleteEvent(completionId).setCacheName(name));
    return;
  }
  filterKeys();
  try {
    if (keys == null) {
      cache.removeAll(filteredKeys,completionId);
    }
 else     if (!filteredKeys.isEmpty()) {
      cache.removeAll(filteredKeys,completionId);
    }
 else {
      service.publishEvent(createCacheCompleteEvent(completionId).setCacheName(name));
    }
    response=new CacheClearResponse(Boolean.TRUE);
  }
 catch (  CacheException e) {
    response=new CacheClearResponse(e);
  }
}",0.8176470588235294
47038,"@Override public void removeAll(Set<Data> keys,int completionId){
  final long now=Clock.currentTimeMillis();
  final Set<Data> localKeys=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
  try {
    deleteAllCacheEntry(localKeys);
  }
  finally {
    final Set<Data> keysToClean=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
    for (    Data key : keysToClean) {
      eventsBatchingEnabled=true;
      final R record=records.get(key);
      if (localKeys.contains(key) && record != null) {
        final boolean isExpired=processExpiredEntry(key,record,now);
        if (!isExpired) {
          deleteRecord(key,IGNORE_COMPLETION);
          if (isStatisticsEnabled()) {
            statistics.increaseCacheRemovals(1);
          }
        }
        keys.add(key);
      }
 else {
        keys.remove(key);
      }
      eventsBatchingEnabled=false;
      hasExpiringEntry=false;
    }
    int orderKey=keys.hashCode();
    publishBatchedEvents(name,CacheEventType.REMOVED,orderKey);
    if (isEventsEnabled()) {
      publishEvent(createCacheCompleteEvent(new HeapData(),completionId));
    }
  }
}","@Override public void removeAll(Set<Data> keys,int completionId){
  final long now=Clock.currentTimeMillis();
  final Set<Data> localKeys=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
  try {
    deleteAllCacheEntry(localKeys);
  }
  finally {
    final Set<Data> keysToClean=new HashSet<Data>(keys.isEmpty() ? records.keySet() : keys);
    for (    Data key : keysToClean) {
      eventsBatchingEnabled=true;
      final R record=records.get(key);
      if (localKeys.contains(key) && record != null) {
        final boolean isExpired=processExpiredEntry(key,record,now);
        if (!isExpired) {
          deleteRecord(key,IGNORE_COMPLETION);
          if (isStatisticsEnabled()) {
            statistics.increaseCacheRemovals(1);
          }
        }
        keys.add(key);
      }
 else {
        keys.remove(key);
      }
      eventsBatchingEnabled=false;
      hasExpiringEntry=false;
    }
    int orderKey=keys.hashCode();
    publishBatchedEvents(name,CacheEventType.REMOVED,orderKey);
    if (isEventsEnabled()) {
      publishEvent(createCacheCompleteEvent(completionId));
    }
  }
}",0.9933065595716198
47039,"public void setAccessHit(long accessHit){
  this.accessHit=accessHit;
}","public CacheEventContext setAccessHit(long accessHit){
  this.accessHit=accessHit;
  return this;
}",0.8117647058823529
47040,"public void setIsOldValueAvailable(boolean isOldValueAvailable){
  this.isOldValueAvailable=isOldValueAvailable;
}","public CacheEventContext setIsOldValueAvailable(boolean isOldValueAvailable){
  this.isOldValueAvailable=isOldValueAvailable;
  return this;
}",0.875
47041,"public void setExpirationTime(long expirationTime){
  this.expirationTime=expirationTime;
}","public CacheEventContext setExpirationTime(long expirationTime){
  this.expirationTime=expirationTime;
  return this;
}",0.8476190476190476
47042,"public void setOrigin(String origin){
  this.origin=origin;
}","public CacheEventContext setOrigin(String origin){
  this.origin=origin;
  return this;
}",0.7866666666666666
47043,"public void setDataKey(Data dataKey){
  this.dataKey=dataKey;
}","public CacheEventContext setDataKey(Data dataKey){
  this.dataKey=dataKey;
  return this;
}",0.7922077922077922
47044,"public void setEventType(CacheEventType eventType){
  this.eventType=eventType;
}","public CacheEventContext setEventType(CacheEventType eventType){
  this.eventType=eventType;
  return this;
}",0.8315789473684211
47045,"public void setCacheName(String cacheName){
  this.cacheName=cacheName;
}","public CacheEventContext setCacheName(String cacheName){
  this.cacheName=cacheName;
  return this;
}",0.8160919540229885
47046,"public void setDataValue(Data dataValue){
  this.dataValue=dataValue;
}","public CacheEventContext setDataValue(Data dataValue){
  this.dataValue=dataValue;
  return this;
}",0.8117647058823529
47047,"public void setCompletionId(int completionId){
  this.completionId=completionId;
}","public CacheEventContext setCompletionId(int completionId){
  this.completionId=completionId;
  return this;
}",0.8333333333333334
47048,"public void setOrderKey(int orderKey){
  this.orderKey=orderKey;
}","public CacheEventContext setOrderKey(int orderKey){
  this.orderKey=orderKey;
  return this;
}",0.8
47049,"public void setDataOldValue(Data dataOldValue){
  this.dataOldValue=dataOldValue;
}","public CacheEventContext setDataOldValue(Data dataOldValue){
  this.dataOldValue=dataOldValue;
  return this;
}",0.8350515463917526
47050,"@Override public void beforeRun() throws Exception {
  ICacheService service=getService();
  cache=service.getRecordStore(name,getPartitionId());
}","@Override public void beforeRun() throws Exception {
  service=getService();
  cache=service.getRecordStore(name,getPartitionId());
}",0.95
47051,"@Override public void run() throws Exception {
  if (cache == null) {
    return;
  }
  filterKeys();
  try {
    if (keys == null) {
      cache.removeAll(filteredKeys,completionId);
    }
 else     if (!filteredKeys.isEmpty()) {
      cache.removeAll(filteredKeys,completionId);
    }
    response=new CacheClearResponse(Boolean.TRUE);
  }
 catch (  CacheException e) {
    response=new CacheClearResponse(e);
  }
}","@Override public void run() throws Exception {
  if (cache == null) {
    service.publishEvent(createCacheCompleteEvent(completionId).setCacheName(name));
    return;
  }
  filterKeys();
  try {
    if (keys == null) {
      cache.removeAll(filteredKeys,completionId);
    }
 else     if (!filteredKeys.isEmpty()) {
      cache.removeAll(filteredKeys,completionId);
    }
 else {
      service.publishEvent(createCacheCompleteEvent(completionId).setCacheName(name));
    }
    response=new CacheClearResponse(Boolean.TRUE);
  }
 catch (  CacheException e) {
    response=new CacheClearResponse(e);
  }
}",0.8176470588235294
47052,"static StringCreator createStringCreator(boolean fastStringEnabled){
  return fastStringEnabled ? buildFastStringCreator() : new DefaultStringCreator();
}","static StringCreator createStringCreator(boolean fastStringEnabled){
  StringCreator stringCreator=fastStringEnabled ? buildFastStringCreator() : new DefaultStringCreator();
  if (stringCreator == null) {
    stringCreator=new DefaultStringCreator();
  }
  return stringCreator;
}",0.6774193548387096
47053,"static StringCreator createStringCreator(boolean fastStringEnabled){
  return fastStringEnabled ? buildFastStringCreator() : new DefaultStringCreator();
}","static StringCreator createStringCreator(boolean fastStringEnabled){
  StringCreator stringCreator=fastStringEnabled ? buildFastStringCreator() : new DefaultStringCreator();
  if (stringCreator == null) {
    stringCreator=new DefaultStringCreator();
  }
  return stringCreator;
}",0.6774193548387096
47054,"private <T extends EventListener>T initializeListener(ListenerConfig listenerConfig){
  T listener=null;
  if (listenerConfig.getImplementation() != null) {
    listener=(T)listenerConfig.getImplementation();
  }
 else   if (listenerConfig.getClassName() != null) {
    try {
      return ClassLoaderUtil.newInstance(getNodeEngine().getConfigClassLoader(),listenerConfig.getClassName());
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
  if (listener instanceof HazelcastInstanceAware) {
    ((HazelcastInstanceAware)listener).setHazelcastInstance(getNodeEngine().getHazelcastInstance());
  }
  return listener;
}","private <T extends EventListener>T initializeListener(ListenerConfig listenerConfig){
  T listener=getListenerImplOrNull(listenerConfig);
  if (listener instanceof HazelcastInstanceAware) {
    ((HazelcastInstanceAware)listener).setHazelcastInstance(getNodeEngine().getHazelcastInstance());
  }
  return listener;
}",0.6243496357960457
47055,"@Test public void testListener() throws InterruptedException {
  ITopic topic=client.getReliableTopic(randomString());
  final CountDownLatch latch=new CountDownLatch(10);
  MessageListener listener=new MessageListener(){
    public void onMessage(    Message message){
      System.out.println(""String_Node_Str"");
      latch.countDown();
    }
  }
;
  topic.addMessageListener(listener);
  for (int i=0; i < 10; i++) {
    topic.publish(i);
  }
  assertTrue(latch.await(20,TimeUnit.SECONDS));
}","@Test public void testListener() throws InterruptedException {
  ITopic topic=client.getReliableTopic(randomString());
  int messageCount=10;
  final CountDownLatch latch=new CountDownLatch(messageCount);
  MessageListener listener=new MessageListener(){
    public void onMessage(    Message message){
      System.out.println(""String_Node_Str"");
      latch.countDown();
    }
  }
;
  topic.addMessageListener(listener);
  for (int i=0; i < messageCount; i++) {
    topic.publish(i);
  }
  assertTrue(latch.await(20,TimeUnit.SECONDS));
}",0.8772946859903382
47056,"@Override protected Object filter(Object response){
  ReadResultSetImpl readResultSet=(ReadResultSetImpl)response;
  int readCount=readResultSet.readCount();
  List<Data> items=new ArrayList<Data>(readCount);
  for (  Data item : readResultSet.getDataItems()) {
    items.add(item);
  }
  return new PortableReadResultSet<Object>(readCount,items);
}","@Override protected Object filter(Object response){
  ReadResultSetImpl readResultSet=(ReadResultSetImpl)response;
  int size=readResultSet.size();
  List<Data> items=new ArrayList<Data>(size);
  Data[] dataItems=readResultSet.getDataItems();
  for (int k=0; k < size; k++) {
    items.add(dataItems[k]);
  }
  int readCount=readResultSet.readCount();
  return new PortableReadResultSet<Object>(readCount,items);
}",0.7863695937090432
47057,"public static String getReturnDescription(String commentString){
  String result=""String_Node_Str"";
  final String RETURN_TAG=""String_Node_Str"";
  int returnTagStartIndex=commentString.indexOf(RETURN_TAG);
  if (returnTagStartIndex >= 0) {
    int descriptionStartIndex=returnTagStartIndex + RETURN_TAG.length();
    int nextTagIndex=commentString.indexOf(""String_Node_Str"",descriptionStartIndex);
    if (nextTagIndex >= 0) {
      result=commentString.substring(descriptionStartIndex,nextTagIndex);
    }
 else {
      result=commentString.substring(descriptionStartIndex);
    }
    result.trim();
    result=result.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return result;
}","public static String getReturnDescription(String commentString){
  String result=""String_Node_Str"";
  final String RETURN_TAG=""String_Node_Str"";
  int returnTagStartIndex=commentString.indexOf(RETURN_TAG);
  if (returnTagStartIndex >= 0) {
    int descriptionStartIndex=returnTagStartIndex + RETURN_TAG.length();
    int nextTagIndex=commentString.indexOf(""String_Node_Str"",descriptionStartIndex);
    if (nextTagIndex >= 0) {
      result=commentString.substring(descriptionStartIndex,nextTagIndex);
    }
 else {
      result=commentString.substring(descriptionStartIndex);
    }
    result=result.trim();
    result=result.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return result;
}",0.994931209268646
47058,"public AddAllRequest(String name,Data[] items,OverflowPolicy overflowPolicy){
  super(name);
  this.items=items;
  this.overflowPolicy=overflowPolicy;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) public AddAllRequest(String name,Data[] items,OverflowPolicy overflowPolicy){
  super(name);
  this.items=items;
  this.overflowPolicy=overflowPolicy;
}",0.8106666666666666
47059,"@Override public void read(PortableReader reader) throws IOException {
  super.read(reader);
  this.startSequence=reader.readLong(""String_Node_Str"");
  this.minCount=reader.readInt(""String_Node_Str"");
  this.maxCount=reader.readInt(""String_Node_Str"");
}","@Override public void read(PortableReader reader) throws IOException {
  super.read(reader);
  this.startSequence=reader.readLong(""String_Node_Str"");
  this.minCount=reader.readInt(""String_Node_Str"");
  this.maxCount=reader.readInt(""String_Node_Str"");
  filterData=reader.getRawDataInput().readData();
}",0.9100719424460432
47060,"public ReadManyRequest(String name,long startSequence,int minCount,int maxCount,Data filter){
  this.name=name;
  this.startSequence=startSequence;
  this.minCount=minCount;
  this.maxCount=maxCount;
  this.filter=filter;
}","public ReadManyRequest(String name,long startSequence,int minCount,int maxCount,Data filter){
  this.name=name;
  this.startSequence=startSequence;
  this.minCount=minCount;
  this.maxCount=maxCount;
  this.filterData=filter;
}",0.9911111111111112
47061,"@Override protected Operation prepareOperation(){
  return new ReadManyOperation(name,startSequence,minCount,maxCount,null);
}","@Override protected Operation prepareOperation(){
  SerializationService serializationService=getClientEngine().getSerializationService();
  IFunction filter=serializationService.toObject(filterData);
  return new ReadManyOperation(name,startSequence,minCount,maxCount,filter);
}",0.6024691358024692
47062,"@Override public void write(PortableWriter writer) throws IOException {
  super.write(writer);
  writer.writeLong(""String_Node_Str"",startSequence);
  writer.writeInt(""String_Node_Str"",minCount);
  writer.writeInt(""String_Node_Str"",maxCount);
}","@Override public void write(PortableWriter writer) throws IOException {
  super.write(writer);
  writer.writeLong(""String_Node_Str"",startSequence);
  writer.writeInt(""String_Node_Str"",minCount);
  writer.writeInt(""String_Node_Str"",maxCount);
  writer.getRawDataOutput().writeData(filterData);
}",0.905027932960894
47063,"@Override public void read(PortableReader reader) throws IOException {
  super.read(reader);
  this.startSequence=reader.readLong(""String_Node_Str"");
  this.minCount=reader.readInt(""String_Node_Str"");
  this.maxCount=reader.readInt(""String_Node_Str"");
}","@Override public void read(PortableReader reader) throws IOException {
  super.read(reader);
  this.startSequence=reader.readLong(""String_Node_Str"");
  this.minCount=reader.readInt(""String_Node_Str"");
  this.maxCount=reader.readInt(""String_Node_Str"");
  filterData=reader.getRawDataInput().readData();
}",0.9100719424460432
47064,"public ReadManyRequest(String name,long startSequence,int minCount,int maxCount,Data filter){
  this.name=name;
  this.startSequence=startSequence;
  this.minCount=minCount;
  this.maxCount=maxCount;
}","public ReadManyRequest(String name,long startSequence,int minCount,int maxCount,Data filter){
  this.name=name;
  this.startSequence=startSequence;
  this.minCount=minCount;
  this.maxCount=maxCount;
  this.filterData=filter;
}",0.9392523364485982
47065,"@Override protected Operation prepareOperation(){
  return new ReadManyOperation(name,startSequence,minCount,maxCount,null);
}","@Override protected Operation prepareOperation(){
  SerializationService serializationService=getClientEngine().getSerializationService();
  IFunction filter=serializationService.toObject(filterData);
  return new ReadManyOperation(name,startSequence,minCount,maxCount,filter);
}",0.6024691358024692
47066,"@Override public void write(PortableWriter writer) throws IOException {
  super.write(writer);
  writer.writeLong(""String_Node_Str"",startSequence);
  writer.writeInt(""String_Node_Str"",minCount);
  writer.writeInt(""String_Node_Str"",maxCount);
}","@Override public void write(PortableWriter writer) throws IOException {
  super.write(writer);
  writer.writeLong(""String_Node_Str"",startSequence);
  writer.writeInt(""String_Node_Str"",minCount);
  writer.writeInt(""String_Node_Str"",maxCount);
  writer.getRawDataOutput().writeData(filterData);
}",0.905027932960894
47067,"@Override public long capacity(){
  if (capacity == -1) {
    CapacityRequest request=new CapacityRequest(getName());
    capacity=invokeOnPartition(request,getPartitionId());
  }
  return capacity;
}","@Override public long capacity(){
  if (capacity == -1) {
    CapacityRequest request=new CapacityRequest(getName());
    capacity=(Long)invokeOnPartition(request,getPartitionId());
  }
  return capacity;
}",0.9852216748768472
47068,"/** 
 * Reads a batch of items from the Ringbuffer. If the number of available items after the first read item is smaller than the maxCount, these items are returned. So it could be the number of items read is smaller than the maxCount. If there are no items available, this call Reading a batch of items is likely to perform better because less overhead is involved. A filter can be provided to only select items that need to be read. If the filter is null, all items are read. If the filter is not null, only items where the filter function returns true are returned. Using filters is a good way to prevent getting items that are of no value to the receiver. This reduces the amount of IO and the number of operations being executed, and can result in a significant performance improvement.
 * @param startSequence the startSequence of the first item to read.
 * @param minCount      the minimum number of items to read.
 * @param maxCount      the maximum number of items to read.
 * @return a future containing the items read. Filter is allowed to be null, indicating there is no filter.
 * @throws java.lang.IllegalArgumentException if startSequence is smaller than 0or if startSequence larger than  {@link #tailSequence()}or if minCount smaller than 0 or if minCount larger than maxCount, or if maxCount larger than the capacity of the ringbuffer or if maxCount larger than 1000 (to prevent overload)
 */
ICompletableFuture<ReadResultSet<E>> readManyAsync(long startSequence,int minCount,int maxCount,IFunction<E,Boolean> filter);","/** 
 * Reads a batch of items from the Ringbuffer. If the number of available items after the first read item is smaller than the maxCount, these items are returned. So it could be the number of items read is smaller than the maxCount. If there are less items available than minCount, then this call blacks. Reading a batch of items is likely to perform better because less overhead is involved. A filter can be provided to only select items that need to be read. If the filter is null, all items are read. If the filter is not null, only items where the filter function returns true are returned. Using filters is a good way to prevent getting items that are of no value to the receiver. This reduces the amount of IO and the number of operations being executed, and can result in a significant performance improvement.
 * @param startSequence the startSequence of the first item to read.
 * @param minCount      the minimum number of items to read.
 * @param maxCount      the maximum number of items to read.
 * @param filter        the filter. Filter is allowed to be null, indicating there is no filter.
 * @return a future containing the items read.
 * @throws java.lang.IllegalArgumentException if startSequence is smaller than 0or if startSequence larger than  {@link #tailSequence()}or if minCount smaller than 0 or if minCount larger than maxCount, or if maxCount larger than the capacity of the ringbuffer or if maxCount larger than 1000 (to prevent overload)
 */
ICompletableFuture<ReadResultSet<E>> readManyAsync(long startSequence,int minCount,int maxCount,IFunction<E,Boolean> filter);",0.9474019764105832
47069,"private void symmetricEncInterceptorConfigXmlGenerator(StringBuilder xml,NetworkConfig netCfg){
  final SymmetricEncryptionConfig sec=netCfg.getSymmetricEncryptionConfig();
  if (sec != null) {
    xml.append(""String_Node_Str"").append(sec != null && sec.isEnabled()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sec.getAlgorithm()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sec.getSalt()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sec.getPassword()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sec.getIterationCount()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"");
  }
}","private void symmetricEncInterceptorConfigXmlGenerator(StringBuilder xml,NetworkConfig netCfg){
  final SymmetricEncryptionConfig sec=netCfg.getSymmetricEncryptionConfig();
  if (sec != null) {
    xml.append(""String_Node_Str"").append(sec.isEnabled()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sec.getAlgorithm()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sec.getSalt()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sec.getPassword()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sec.getIterationCount()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"");
  }
}",0.4575645756457565
47070,"@Override public Object executeOnKey(K key,EntryProcessor entryProcessor){
  checkNotNull(key,NULL_KEY_IS_NOT_ALLOWED);
  final Data keyData=toData(key);
  ClientMessage request=MapExecuteOnKeyCodec.encodeRequest(name,toData(entryProcessor),keyData,ThreadUtil.getThreadId());
  return invoke(request,keyData);
}","@Override public Object executeOnKey(K key,EntryProcessor entryProcessor){
  checkNotNull(key,NULL_KEY_IS_NOT_ALLOWED);
  final Data keyData=toData(key);
  ClientMessage request=MapExecuteOnKeyCodec.encodeRequest(name,toData(entryProcessor),keyData,ThreadUtil.getThreadId());
  ClientMessage response=invoke(request,keyData);
  MapExecuteOnKeyCodec.ResponseParameters resultParameters=MapExecuteOnKeyCodec.decodeResponse(response);
  return toObject(resultParameters.response);
}",0.769620253164557
47071,"@Override public void run() throws Exception {
  Assert.assertFalse(map.isLocked(key));
}","@Override public void run() throws Exception {
  String payload=randomString();
  Object ret=map.executeOnKey(key,new LockEntryProcessor(payload));
  assertEquals(payload,ret);
}",0.4943820224719101
47072,"@Override public void run() throws Exception {
  Assert.assertFalse(map.isLocked(key));
}","@Override public void run() throws Exception {
  String payload=randomString();
  Object ret=map.executeOnKey(key,new LockEntryProcessor(payload));
  assertEquals(payload,ret);
}",0.4943820224719101
47073,"public void read(PortableReader reader) throws IOException {
  name=reader.readUTF(""String_Node_Str"");
  submitToKey=reader.readBoolean(""String_Node_Str"");
  final ObjectDataInput in=reader.getRawDataInput();
  key=in.readData();
  processor=in.readObject();
}","public void read(PortableReader reader) throws IOException {
  name=reader.readUTF(""String_Node_Str"");
  submitToKey=reader.readBoolean(""String_Node_Str"");
  final ObjectDataInput in=reader.getRawDataInput();
  key=in.readData();
  processor=in.readObject();
  threadId=in.readLong();
}",0.9523809523809524
47074,"public void write(PortableWriter writer) throws IOException {
  writer.writeUTF(""String_Node_Str"",name);
  writer.writeBoolean(""String_Node_Str"",submitToKey);
  final ObjectDataOutput out=writer.getRawDataOutput();
  out.writeData(key);
  out.writeObject(processor);
}","public void write(PortableWriter writer) throws IOException {
  writer.writeUTF(""String_Node_Str"",name);
  writer.writeBoolean(""String_Node_Str"",submitToKey);
  final ObjectDataOutput out=writer.getRawDataOutput();
  out.writeData(key);
  out.writeObject(processor);
  out.writeLong(threadId);
}",0.9520426287744228
47075,"public LockBackupOperation(ObjectNamespace namespace,Data key,long threadId,String originalCallerUuid){
  super(namespace,key,threadId);
  this.originalCallerUuid=originalCallerUuid;
}","public LockBackupOperation(ObjectNamespace namespace,Data key,long threadId,long ttl,String originalCallerUuid){
  super(namespace,key,threadId);
  this.ttl=ttl;
  this.originalCallerUuid=originalCallerUuid;
}",0.9363867684478372
47076,"@Override public Operation getBackupOperation(){
  return new LockBackupOperation(namespace,key,threadId,getCallerUuid());
}","@Override public Operation getBackupOperation(){
  return new LockBackupOperation(namespace,key,threadId,ttl,getCallerUuid());
}",0.984126984126984
47077,"public void run(){
  try {
    lock.lockInterruptibly();
  }
 catch (  InterruptedException e) {
    latch.countDown();
  }
}","@Override public void run() throws Exception {
  assertFalse(""String_Node_Str"",lock.isLocked());
}",0.4035874439461883
47078,"@Test public void testConnectionFactoryImpl(){
  EqualsVerifier.forClass(ConnectionFactoryImpl.class).usingGetClass().withPrefabValues(ManagedConnectionFactoryImpl.class,new ManagedConnectionFactoryImpl(),new ManagedConnectionFactoryImpl()).suppress(Warning.NONFINAL_FIELDS).suppress(Warning.TRANSIENT_FIELDS).verify();
}","@Test public void testConnectionFactoryImpl(){
  EqualsVerifier.forClass(ConnectionFactoryImpl.class).usingGetClass().withPrefabValues(ManagedConnectionFactoryImpl.class,new ManagedConnectionFactoryImpl(),new ManagedConnectionFactoryImpl()).withPrefabValues(Reference.class,mock(Reference.class),mock(Reference.class)).suppress(Warning.NONFINAL_FIELDS).suppress(Warning.TRANSIENT_FIELDS).verify();
}",0.8916666666666667
47079,"private Map<TypeElement,Map<String,CodecModel>> createAllCodecModel(Lang lang){
  Map<TypeElement,Map<String,CodecModel>> model=new HashMap<TypeElement,Map<String,CodecModel>>();
  for (  Map.Entry<TypeElement,Map<String,ExecutableElement>> entry : requestMap.entrySet()) {
    HashMap<String,CodecModel> map=new HashMap<String,CodecModel>();
    TypeElement parent=entry.getKey();
    model.put(parent,map);
    for (    Map.Entry<String,ExecutableElement> entrySub : entry.getValue().entrySet()) {
      ExecutableElement methodElement=entrySub.getValue();
      CodecModel codecModel=createCodecModel(methodElement,lang);
      codecModel.commment=elementUtils.getDocComment(methodElement);
      map.put(entrySub.getKey(),codecModel);
    }
  }
  return model;
}","private Map<TypeElement,Map<String,CodecModel>> createAllCodecModel(Lang lang){
  Map<TypeElement,Map<String,CodecModel>> model=new HashMap<TypeElement,Map<String,CodecModel>>();
  for (  Map.Entry<TypeElement,Map<String,ExecutableElement>> entry : requestMap.entrySet()) {
    HashMap<String,CodecModel> map=new HashMap<String,CodecModel>();
    TypeElement parent=entry.getKey();
    model.put(parent,map);
    for (    Map.Entry<String,ExecutableElement> entrySub : entry.getValue().entrySet()) {
      ExecutableElement methodElement=entrySub.getValue();
      CodecModel codecModel=createCodecModel(methodElement,lang);
      codecModel.comment=elementUtils.getDocComment(methodElement);
      map.put(entrySub.getKey(),codecModel);
    }
  }
  return model;
}",0.999346832135859
47080,"@Test public void testAutoQueryRegionEviction(){
  sf.getCache().evictDefaultQueryRegion();
  int entityCount=10;
  insertDummyEntities(entityCount,0);
  executeQuery(sf);
  sleepMillis(200);
  executeUpdateQuery(sf,""String_Node_Str"");
  executeQuery(sf);
  sleepMillis(200);
  executeQuery(sf);
  assertEquals(1,sf.getStatistics().getQueryCacheHitCount());
  assertEquals(2,sf.getStatistics().getQueryCacheMissCount());
}","@Test public void testAutoQueryRegionEviction(){
  int entityCount=10;
  insertDummyEntities(entityCount,0);
  sleep(1);
  executeQuery(sf);
  executeUpdateQuery(sf,""String_Node_Str"");
  executeQuery(sf);
  executeQuery(sf);
  assertEquals(1,sf.getStatistics().getQueryCacheHitCount());
  assertEquals(2,sf.getStatistics().getQueryCacheMissCount());
}",0.8771021992238034
47081,"@Test public void testSpecificQueryRegionEviction(){
  sf.getCache().evictDefaultQueryRegion();
  int entityCount=10;
  insertDummyEntities(entityCount,0);
  Session session=sf.openSession();
  Transaction txn=session.beginTransaction();
  Query query=session.createQuery(""String_Node_Str"" + DummyEntity.class.getName());
  query.setCacheable(true).setCacheRegion(""String_Node_Str"");
  query.list();
  txn.commit();
  session.close();
  sf.getCache().evictQueryRegion(""String_Node_Str"");
  session=sf.openSession();
  txn=session.beginTransaction();
  query=session.createQuery(""String_Node_Str"" + DummyEntity.class.getName());
  query.setCacheable(true);
  query.list();
  txn.commit();
  session.close();
  assertEquals(0,sf.getStatistics().getQueryCacheHitCount());
  assertEquals(2,sf.getStatistics().getQueryCacheMissCount());
}","@Test public void testSpecificQueryRegionEviction(){
  int entityCount=10;
  insertDummyEntities(entityCount,0);
  sleep(1);
  Session session=sf.openSession();
  Transaction txn=session.beginTransaction();
  Query query=session.createQuery(""String_Node_Str"" + DummyEntity.class.getName());
  query.setCacheable(true).setCacheRegion(""String_Node_Str"");
  query.list();
  txn.commit();
  session.close();
  sf.getCache().evictQueryRegion(""String_Node_Str"");
  session=sf.openSession();
  txn=session.beginTransaction();
  query=session.createQuery(""String_Node_Str"" + DummyEntity.class.getName());
  query.setCacheable(true);
  query.list();
  txn.commit();
  session.close();
  assertEquals(0,sf.getStatistics().getQueryCacheHitCount());
  assertEquals(2,sf.getStatistics().getQueryCacheMissCount());
}",0.9663608562691132
47082,"@Test public void testAutoQueryRegionEviction(){
  sf.getCache().evictDefaultQueryRegion();
  int entityCount=10;
  insertDummyEntities(entityCount,0);
  executeQuery(sf);
  sleepMillis(200);
  executeUpdateQuery(sf,""String_Node_Str"");
  executeQuery(sf);
  sleepMillis(200);
  executeQuery(sf);
  assertEquals(1,sf.getStatistics().getQueryCacheHitCount());
  assertEquals(2,sf.getStatistics().getQueryCacheMissCount());
}","@Test public void testAutoQueryRegionEviction(){
  int entityCount=10;
  insertDummyEntities(entityCount,0);
  sleep(1);
  executeQuery(sf);
  executeUpdateQuery(sf,""String_Node_Str"");
  executeQuery(sf);
  executeQuery(sf);
  assertEquals(1,sf.getStatistics().getQueryCacheHitCount());
  assertEquals(2,sf.getStatistics().getQueryCacheMissCount());
}",0.8771021992238034
47083,"@Test public void testSpecificQueryRegionEviction(){
  sf.getCache().evictDefaultQueryRegion();
  int entityCount=10;
  insertDummyEntities(entityCount,0);
  Session session=sf.openSession();
  Transaction txn=session.beginTransaction();
  Query query=session.createQuery(""String_Node_Str"" + DummyEntity.class.getName());
  query.setCacheable(true).setCacheRegion(""String_Node_Str"");
  query.list();
  txn.commit();
  session.close();
  sf.getCache().evictQueryRegion(""String_Node_Str"");
  session=sf.openSession();
  txn=session.beginTransaction();
  query=session.createQuery(""String_Node_Str"" + DummyEntity.class.getName());
  query.setCacheable(true);
  query.list();
  txn.commit();
  session.close();
  assertEquals(0,sf.getStatistics().getQueryCacheHitCount());
  assertEquals(2,sf.getStatistics().getQueryCacheMissCount());
}","@Test public void testSpecificQueryRegionEviction(){
  int entityCount=10;
  insertDummyEntities(entityCount,0);
  sleep(1);
  Session session=sf.openSession();
  Transaction txn=session.beginTransaction();
  Query query=session.createQuery(""String_Node_Str"" + DummyEntity.class.getName());
  query.setCacheable(true).setCacheRegion(""String_Node_Str"");
  query.list();
  txn.commit();
  session.close();
  sf.getCache().evictQueryRegion(""String_Node_Str"");
  session=sf.openSession();
  txn=session.beginTransaction();
  query=session.createQuery(""String_Node_Str"" + DummyEntity.class.getName());
  query.setCacheable(true);
  query.list();
  txn.commit();
  session.close();
  assertEquals(0,sf.getStatistics().getQueryCacheHitCount());
  assertEquals(2,sf.getStatistics().getQueryCacheMissCount());
}",0.9663608562691132
47084,"@Override public long capacity(){
  if (capacity == -1) {
    CapacityRequest request=new CapacityRequest(getName());
    capacity=invoke(request);
  }
  return capacity;
}","@Override public long capacity(){
  if (capacity == -1) {
    CapacityRequest request=new CapacityRequest(getName());
    capacity=(Long)invoke(request);
  }
  return capacity;
}",0.9828571428571428
47085,"public Map<String,String> getAddresses() throws Exception {
  return new DescribeInstances(awsConfig).execute();
}","public Map<String,String> getAddresses() throws Exception {
  return new DescribeInstances(awsConfig,endpoint).execute();
}",0.9620253164556962
47086,"public Collection<String> getPrivateIpAddresses() throws Exception {
  final Map<String,String> result=new DescribeInstances(awsConfig).execute();
  return result.keySet();
}","public Collection<String> getPrivateIpAddresses() throws Exception {
  final Map<String,String> result=new DescribeInstances(awsConfig,endpoint).execute();
  return result.keySet();
}",0.9747899159663864
47087,"public AWSClient(AwsConfig awsConfig){
  if (awsConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getAccessKey() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getSecretKey() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.awsConfig=awsConfig;
  endpoint=awsConfig.getHostHeader();
}","public AWSClient(AwsConfig awsConfig){
  if (awsConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getAccessKey() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getSecretKey() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.awsConfig=awsConfig;
  endpoint=awsConfig.getHostHeader();
  if (awsConfig.getRegion() != null && awsConfig.getRegion().length() > 0) {
    setEndpoint(""String_Node_Str"" + awsConfig.getRegion() + ""String_Node_Str"");
  }
}",0.8345323741007195
47088,"public DescribeInstances(AwsConfig awsConfig){
  if (awsConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getAccessKey() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.awsConfig=awsConfig;
  rs=new EC2RequestSigner(awsConfig,timeStamp);
  attributes.put(""String_Node_Str"",this.getClass().getSimpleName());
  attributes.put(""String_Node_Str"",DOC_VERSION);
  attributes.put(""String_Node_Str"",SIGNATURE_METHOD_V4);
  attributes.put(""String_Node_Str"",rs.createFormattedCredential());
  attributes.put(""String_Node_Str"",timeStamp);
  attributes.put(""String_Node_Str"",""String_Node_Str"");
  attributes.put(""String_Node_Str"",""String_Node_Str"");
}","public DescribeInstances(AwsConfig awsConfig,String endpoint){
  if (awsConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getAccessKey() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.awsConfig=awsConfig;
  this.endpoint=endpoint;
  rs=new EC2RequestSigner(awsConfig,timeStamp,endpoint);
  attributes.put(""String_Node_Str"",this.getClass().getSimpleName());
  attributes.put(""String_Node_Str"",DOC_VERSION);
  attributes.put(""String_Node_Str"",SIGNATURE_METHOD_V4);
  attributes.put(""String_Node_Str"",rs.createFormattedCredential());
  attributes.put(""String_Node_Str"",timeStamp);
  attributes.put(""String_Node_Str"",""String_Node_Str"");
  attributes.put(""String_Node_Str"",""String_Node_Str"");
}",0.9657488247145736
47089,"public Map<String,String> execute() throws Exception {
  final String endpoint=String.format(awsConfig.getHostHeader());
  final String signature=rs.sign(""String_Node_Str"",attributes);
  attributes.put(""String_Node_Str"",signature);
  InputStream stream=callService(endpoint,signature);
  return CloudyUtility.unmarshalTheResponse(stream,awsConfig);
}","public Map<String,String> execute() throws Exception {
  final String signature=rs.sign(""String_Node_Str"",attributes);
  attributes.put(""String_Node_Str"",signature);
  InputStream stream=callService(endpoint,signature);
  return CloudyUtility.unmarshalTheResponse(stream,awsConfig);
}",0.8958990536277602
47090,"public EC2RequestSigner(AwsConfig config,final String timeStamp){
  if (config == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (timeStamp == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.config=config;
  this.timestamp=timeStamp;
  this.service=null;
}","public EC2RequestSigner(AwsConfig config,final String timeStamp,String endpoint){
  if (config == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (timeStamp == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.config=config;
  this.timestamp=timeStamp;
  this.service=null;
  this.endpoint=endpoint;
}",0.9375
47091,"protected String getCanonicalHeaders(){
  return String.format(""String_Node_Str"",config.getHostHeader()) + ""String_Node_Str"";
}","protected String getCanonicalHeaders(){
  return String.format(""String_Node_Str"",endpoint) + ""String_Node_Str"";
}",0.9
47092,"public TcpIpJoinerOverAWS(Node node){
  super(node);
  logger=node.getLogger(getClass());
  AwsConfig awsConfig=node.getConfig().getNetworkConfig().getJoin().getAwsConfig();
  aws=new AWSClient(awsConfig);
  if (awsConfig.getRegion() != null && awsConfig.getRegion().length() > 0) {
    aws.setEndpoint(""String_Node_Str"" + awsConfig.getRegion() + ""String_Node_Str"");
  }
}","public TcpIpJoinerOverAWS(Node node){
  super(node);
  logger=node.getLogger(getClass());
  AwsConfig awsConfig=node.getConfig().getNetworkConfig().getJoin().getAwsConfig();
  aws=new AWSClient(awsConfig);
}",0.7150259067357513
47093,"@Test public void deriveSigningKeyTest(){
  AwsConfig awsConfig=new AwsConfig();
  awsConfig.setRegion(TEST_REGION);
  awsConfig.setHostHeader(TEST_HOST);
  awsConfig.setAccessKey(TEST_ACCESS_KEY);
  awsConfig.setSecretKey(TEST_SECRET_KEY);
  DescribeInstances di=new DescribeInstances(awsConfig);
  try {
    Field field=null;
    Map<String,String> attributes=null;
    field=di.getClass().getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    attributes=(Map<String,String>)field.get(di);
    attributes.put(""String_Node_Str"",TEST_REQUEST_DATE);
    field.set(di,attributes);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  EC2RequestSigner rs=new EC2RequestSigner(awsConfig,TEST_REQUEST_DATE);
  byte[] derivedKey=null;
  try {
    Field field=null;
    field=rs.getClass().getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    field.set(rs,""String_Node_Str"");
    Method method=null;
    method=rs.getClass().getDeclaredMethod(""String_Node_Str"",null);
    method.setAccessible(true);
    derivedKey=(byte[])method.invoke(rs);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  assertEquals(TEST_DERIVED_EXPECTED,bytesToHex(derivedKey));
}","@Test public void deriveSigningKeyTest(){
  AwsConfig awsConfig=new AwsConfig();
  awsConfig.setRegion(TEST_REGION);
  awsConfig.setHostHeader(TEST_HOST);
  awsConfig.setAccessKey(TEST_ACCESS_KEY);
  awsConfig.setSecretKey(TEST_SECRET_KEY);
  DescribeInstances di=new DescribeInstances(awsConfig,TEST_HOST);
  try {
    Field field=null;
    Map<String,String> attributes=null;
    field=di.getClass().getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    attributes=(Map<String,String>)field.get(di);
    attributes.put(""String_Node_Str"",TEST_REQUEST_DATE);
    field.set(di,attributes);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  EC2RequestSigner rs=new EC2RequestSigner(awsConfig,TEST_REQUEST_DATE,TEST_HOST);
  byte[] derivedKey=null;
  try {
    Field field=null;
    field=rs.getClass().getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    field.set(rs,""String_Node_Str"");
    Method method=null;
    method=rs.getClass().getDeclaredMethod(""String_Node_Str"",null);
    method.setAccessible(true);
    derivedKey=(byte[])method.invoke(rs);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  assertEquals(TEST_DERIVED_EXPECTED,bytesToHex(derivedKey));
}",0.991869918699187
47094,"@Test public void testSigning() throws NoSuchFieldException, IllegalAccessException {
  AwsConfig awsConfig=new AwsConfig();
  awsConfig.setRegion(TEST_REGION);
  awsConfig.setHostHeader(TEST_HOST);
  awsConfig.setAccessKey(TEST_ACCESS_KEY);
  awsConfig.setSecretKey(TEST_SECRET_KEY);
  DescribeInstances di=new DescribeInstances(awsConfig);
  Field timeField=di.getClass().getDeclaredField(""String_Node_Str"");
  timeField.setAccessible(true);
  String timeStamp=(String)timeField.get(di);
  timeStamp=TEST_REQUEST_DATE;
  timeField.set(di,timeStamp);
  Field attributesField=di.getClass().getDeclaredField(""String_Node_Str"");
  attributesField.setAccessible(true);
  Map<String,String> attributes=(Map<String,String>)attributesField.get(di);
  attributes.put(""String_Node_Str"",TEST_REQUEST_DATE);
  EC2RequestSigner rs=new EC2RequestSigner(awsConfig,TEST_REQUEST_DATE);
  attributes.put(""String_Node_Str"",rs.createFormattedCredential());
  String signature=rs.sign(TEST_SERVICE,attributes);
  assertEquals(TEST_SIGNATURE_EXPECTED,signature);
}","@Test public void testSigning() throws NoSuchFieldException, IllegalAccessException {
  AwsConfig awsConfig=new AwsConfig();
  awsConfig.setRegion(TEST_REGION);
  awsConfig.setHostHeader(TEST_HOST);
  awsConfig.setAccessKey(TEST_ACCESS_KEY);
  awsConfig.setSecretKey(TEST_SECRET_KEY);
  DescribeInstances di=new DescribeInstances(awsConfig,TEST_HOST);
  Field timeField=di.getClass().getDeclaredField(""String_Node_Str"");
  timeField.setAccessible(true);
  String timeStamp=(String)timeField.get(di);
  timeStamp=TEST_REQUEST_DATE;
  timeField.set(di,timeStamp);
  Field attributesField=di.getClass().getDeclaredField(""String_Node_Str"");
  attributesField.setAccessible(true);
  Map<String,String> attributes=(Map<String,String>)attributesField.get(di);
  attributes.put(""String_Node_Str"",TEST_REQUEST_DATE);
  EC2RequestSigner rs=new EC2RequestSigner(awsConfig,TEST_REQUEST_DATE,TEST_HOST);
  attributes.put(""String_Node_Str"",rs.createFormattedCredential());
  String signature=rs.sign(TEST_SERVICE,attributes);
  assertEquals(TEST_SIGNATURE_EXPECTED,signature);
}",0.9905123339658444
47095,"private String getPathName(){
  Member localMember=hazelcastInstance.getCluster().getLocalMember();
  InetSocketAddress address=localMember.getSocketAddress();
  String addressString=address.getHostString().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + address.getPort();
  return ""String_Node_Str"" + addressString + ""String_Node_Str""+ currentTimeMillis()+ ""String_Node_Str"";
}","private String getPathName(){
  AbstractMember localMember=(AbstractMember)hazelcastInstance.getCluster().getLocalMember();
  Address address=localMember.getAddress();
  String addressString=address.getHost().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + address.getPort();
  return ""String_Node_Str"" + addressString + ""String_Node_Str""+ currentTimeMillis()+ ""String_Node_Str"";
}",0.9423558897243108
47096,"Object getLock(Object source){
  int hash=identityHashCode(source);
  hash=max(0,abs(hash));
  return stripe[hash % stripe.length];
}","Object getLock(Object source){
  int hash=identityHashCode(source);
  return hashToIndex(hash,stripe.length);
}",0.7950819672131147
47097,"private void deleteOld(){
  File file=new File(format(pathname,index - maxRollingFileCount));
  file.delete();
}","private void deleteOld(){
  File file=new File(format(pathname,index - maxRollingFileCount));
  boolean exist=file.exists();
  if (exist) {
    if (!file.delete()) {
      logger.warning(""String_Node_Str"" + file.getAbsolutePath());
    }
  }
}",0.5690140845070423
47098,"private int nextSelectorIndex(){
  return Math.abs(nextSelectorIndex.getAndIncrement()) % selectorThreadCount;
}","private int nextSelectorIndex(){
  int value=nextSelectorIndex.getAndIncrement();
  return HashUtil.hashToIndex(value,selectorThreadCount);
}",0.7509881422924901
47099,"@Probe(name=""String_Node_Str"") private long priorityBytesPending(){
  return bytesPending(urgentWriteQueue);
}","@Probe(name=""String_Node_Str"") public long priorityBytesPending(){
  return bytesPending(urgentWriteQueue);
}",0.958904109589041
47100,"protected Object getMutex(final Object key){
  return mutexes[key.hashCode() != Integer.MIN_VALUE ? Math.abs(key.hashCode()) % mutexes.length : 0];
}","protected Object getMutex(Object key){
  int hashCode=key.hashCode();
  return hashToIndex(hashCode,mutexes.length);
}",0.651685393258427
47101,"public InvocationRegistry(NodeEngineImpl nodeEngine,ILogger logger,BackpressureRegulator backpressureRegulator,int concurrencyLevel){
  this.nodeEngine=nodeEngine;
  this.logger=logger;
  this.callIdSequence=backpressureRegulator.newCallIdSequence();
  GroupProperties props=nodeEngine.getGroupProperties();
  this.slowInvocationThresholdMs=initSlowInvocationThresholdMs(props);
  this.backupTimeoutMillis=props.OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.invocations=new ConcurrentHashMap<Long,Invocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.inspectionThread=new InspectionThread();
  inspectionThread.start();
  nodeEngine.getMetricsRegistry().scanAndRegister(this,""String_Node_Str"");
}","public InvocationRegistry(NodeEngineImpl nodeEngine,ILogger logger,BackpressureRegulator backpressureRegulator,int concurrencyLevel){
  this.nodeEngine=nodeEngine;
  this.logger=logger;
  this.callIdSequence=backpressureRegulator.newCallIdSequence();
  GroupProperties props=nodeEngine.getGroupProperties();
  this.slowInvocationThresholdMs=initSlowInvocationThresholdMs(props);
  this.backupTimeoutMillis=props.OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.invocations=new ConcurrentHashMap<Long,Invocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  nodeEngine.getMetricsRegistry().scanAndRegister(this,""String_Node_Str"");
  this.inspectionThread=new InspectionThread();
  inspectionThread.start();
}",0.8934081346423562
47102,"private int getOrderLockIndex(String key){
  int hash=key.hashCode();
  if (hash == Integer.MIN_VALUE) {
    return 0;
  }
 else {
    return Math.abs(hash) % orderingLocks.length;
  }
}","private int getOrderLockIndex(String key){
  int hash=key.hashCode();
  return HashUtil.hashToIndex(hash,orderingLocks.length);
}",0.6857142857142857
47103,"Object getLock(Object source){
  int hash=identityHashCode(source);
  hash=max(0,abs(hash));
  return stripe[hash % stripe.length];
}","Object getLock(Object source){
  int hash=identityHashCode(source);
  return hashToIndex(hash,stripe.length);
}",0.7950819672131147
47104,"private void deleteOld(){
  File file=new File(format(pathname,index - maxRollingFileCount));
  file.delete();
}","private void deleteOld(){
  File file=new File(format(pathname,index - maxRollingFileCount));
  boolean exist=file.exists();
  if (exist) {
    if (!file.delete()) {
      logger.warning(""String_Node_Str"" + file.getAbsolutePath());
    }
  }
}",0.5690140845070423
47105,"private int nextSelectorIndex(){
  return Math.abs(nextSelectorIndex.getAndIncrement()) % selectorThreadCount;
}","private int nextSelectorIndex(){
  int value=nextSelectorIndex.getAndIncrement();
  return HashUtil.hashToIndex(value,selectorThreadCount);
}",0.7509881422924901
47106,"@Probe(name=""String_Node_Str"") private long priorityBytesPending(){
  return bytesPending(urgentWriteQueue);
}","@Probe(name=""String_Node_Str"") public long priorityBytesPending(){
  return bytesPending(urgentWriteQueue);
}",0.958904109589041
47107,"protected Object getMutex(final Object key){
  return mutexes[key.hashCode() != Integer.MIN_VALUE ? Math.abs(key.hashCode()) % mutexes.length : 0];
}","protected Object getMutex(Object key){
  int hashCode=key.hashCode();
  return hashToIndex(hashCode,mutexes.length);
}",0.651685393258427
47108,"public InvocationRegistry(NodeEngineImpl nodeEngine,ILogger logger,BackpressureRegulator backpressureRegulator,int concurrencyLevel){
  this.nodeEngine=nodeEngine;
  this.logger=logger;
  this.callIdSequence=backpressureRegulator.newCallIdSequence();
  GroupProperties props=nodeEngine.getGroupProperties();
  this.slowInvocationThresholdMs=initSlowInvocationThresholdMs(props);
  this.backupTimeoutMillis=props.OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.invocations=new ConcurrentHashMap<Long,Invocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.inspectionThread=new InspectionThread();
  inspectionThread.start();
  nodeEngine.getMetricsRegistry().scanAndRegister(this,""String_Node_Str"");
}","public InvocationRegistry(NodeEngineImpl nodeEngine,ILogger logger,BackpressureRegulator backpressureRegulator,int concurrencyLevel){
  this.nodeEngine=nodeEngine;
  this.logger=logger;
  this.callIdSequence=backpressureRegulator.newCallIdSequence();
  GroupProperties props=nodeEngine.getGroupProperties();
  this.slowInvocationThresholdMs=initSlowInvocationThresholdMs(props);
  this.backupTimeoutMillis=props.OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.invocations=new ConcurrentHashMap<Long,Invocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  nodeEngine.getMetricsRegistry().scanAndRegister(this,""String_Node_Str"");
  this.inspectionThread=new InspectionThread();
  inspectionThread.start();
}",0.8934081346423562
47109,"private int getOrderLockIndex(String key){
  int hash=key.hashCode();
  if (hash == Integer.MIN_VALUE) {
    return 0;
  }
 else {
    return Math.abs(hash) % orderingLocks.length;
  }
}","private int getOrderLockIndex(String key){
  int hash=key.hashCode();
  return HashUtil.hashToIndex(hash,orderingLocks.length);
}",0.6857142857142857
47110,"/** 
 * A selector is balanced if: - it has 1 active handler (so a high event count) - potentially 1 dead handler (duplicate connection). So event count should be low.
 * @param selector
 * @param handlers
 */
public void assertBalanced(IOSelector selector,Set<MigratableHandler> handlers){
  assertTrue(""String_Node_Str"" + selector,handlers.size() > 0);
  assertTrue(""String_Node_Str"" + selector,handlers.size() <= 2);
  Iterator<MigratableHandler> iterator=handlers.iterator();
  MigratableHandler activeHandler=iterator.next();
  if (handlers.size() == 2) {
    MigratableHandler deadHandler=iterator.next();
    if (activeHandler.getEventCount() < deadHandler.getEventCount()) {
      MigratableHandler tmp=deadHandler;
      deadHandler=activeHandler;
      activeHandler=tmp;
    }
    assertTrue(""String_Node_Str"",deadHandler.getEventCount() < 3);
  }
  assertTrue(activeHandler.getEventCount() > 10000);
}","/** 
 * A selector is balanced if: - it has 1 active handler (so a high event count) - potentially 1 dead handler (duplicate connection). So event count should be low.
 * @param selector
 * @param handlers
 */
public void assertBalanced(IOSelector selector,Set<MigratableHandler> handlers){
  assertTrue(""String_Node_Str"" + selector,handlers.size() > 0);
  assertTrue(""String_Node_Str"" + selector,handlers.size() <= 2);
  Iterator<MigratableHandler> iterator=handlers.iterator();
  MigratableHandler activeHandler=iterator.next();
  if (handlers.size() == 2) {
    MigratableHandler deadHandler=iterator.next();
    if (activeHandler.getEventCount() < deadHandler.getEventCount()) {
      MigratableHandler tmp=deadHandler;
      deadHandler=activeHandler;
      activeHandler=tmp;
    }
    assertTrue(""String_Node_Str"" + deadHandler.getEventCount(),deadHandler.getEventCount() < 10);
  }
  assertTrue(activeHandler.getEventCount() > 10000);
}",0.9822294022617124
47111,"public InSelectorImpl[] getInSelectors(){
  return inSelectors;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) public InSelectorImpl[] getInSelectors(){
  return inSelectors;
}",0.6467661691542289
47112,"public OutSelectorImpl[] getOutSelectors(){
  return outSelectors;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) public OutSelectorImpl[] getOutSelectors(){
  return outSelectors;
}",0.6570048309178744
47113,"public AddAllRequest(String name,Data[] items,OverflowPolicy overflowPolicy){
  super(name);
  this.items=items;
  this.overflowPolicy=overflowPolicy;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) public AddAllRequest(String name,Data[] items,OverflowPolicy overflowPolicy){
  super(name);
  this.items=items;
  this.overflowPolicy=overflowPolicy;
}",0.8106666666666666
47114,"public boolean registerConnection(final Address remoteEndPoint,final Connection connection){
  if (remoteEndPoint.equals(ioService.getThisAddress())) {
    return false;
  }
  if (connection instanceof TcpIpConnection) {
    TcpIpConnection tcpConnection=(TcpIpConnection)connection;
    Address currentEndPoint=tcpConnection.getEndPoint();
    if (currentEndPoint != null && !currentEndPoint.equals(remoteEndPoint)) {
      throw new IllegalArgumentException(connection + ""String_Node_Str"" + remoteEndPoint);
    }
    tcpConnection.setEndPoint(remoteEndPoint);
    if (!connection.isClient()) {
      TcpIpConnectionMonitor connectionMonitor=getConnectionMonitor(remoteEndPoint,true);
      tcpConnection.setMonitor(connectionMonitor);
    }
  }
  ioBalancer.connectionAdded(connection);
  connectionsMap.put(remoteEndPoint,connection);
  connectionsInProgress.remove(remoteEndPoint);
  ioService.getEventService().executeEventCallback(new StripedRunnable(){
    @Override public void run(){
      for (      ConnectionListener listener : connectionListeners) {
        listener.connectionAdded(connection);
      }
    }
    @Override public int getKey(){
      return remoteEndPoint.hashCode();
    }
  }
);
  return true;
}","public boolean registerConnection(final Address remoteEndPoint,final Connection connection){
  if (remoteEndPoint.equals(ioService.getThisAddress())) {
    return false;
  }
  if (connection instanceof TcpIpConnection) {
    TcpIpConnection tcpConnection=(TcpIpConnection)connection;
    Address currentEndPoint=tcpConnection.getEndPoint();
    if (currentEndPoint != null && !currentEndPoint.equals(remoteEndPoint)) {
      throw new IllegalArgumentException(connection + ""String_Node_Str"" + remoteEndPoint);
    }
    tcpConnection.setEndPoint(remoteEndPoint);
    if (!connection.isClient()) {
      TcpIpConnectionMonitor connectionMonitor=getConnectionMonitor(remoteEndPoint,true);
      tcpConnection.setMonitor(connectionMonitor);
    }
  }
  connectionsMap.put(remoteEndPoint,connection);
  connectionsInProgress.remove(remoteEndPoint);
  ioService.getEventService().executeEventCallback(new StripedRunnable(){
    @Override public void run(){
      for (      ConnectionListener listener : connectionListeners) {
        listener.connectionAdded(connection);
      }
    }
    @Override public int getKey(){
      return remoteEndPoint.hashCode();
    }
  }
);
  return true;
}",0.9826014913007456
47115,"TcpIpConnection assignSocketChannel(SocketChannelWrapper channel,Address endpoint){
  int index=nextSelectorIndex();
  final TcpIpConnection connection=new TcpIpConnection(this,inSelectors[index],outSelectors[index],connectionIdGen.incrementAndGet(),channel);
  connection.setEndPoint(endpoint);
  activeConnections.add(connection);
  acceptedSockets.remove(channel);
  connection.start();
  log(Level.INFO,""String_Node_Str"" + channel.socket().getLocalSocketAddress());
  return connection;
}","TcpIpConnection assignSocketChannel(SocketChannelWrapper channel,Address endpoint){
  int index=nextSelectorIndex();
  final TcpIpConnection connection=new TcpIpConnection(this,inSelectors[index],outSelectors[index],connectionIdGen.incrementAndGet(),channel);
  connection.setEndPoint(endpoint);
  activeConnections.add(connection);
  acceptedSockets.remove(channel);
  connection.start();
  ioBalancer.connectionAdded(connection);
  log(Level.INFO,""String_Node_Str"" + channel.socket().getLocalSocketAddress());
  return connection;
}",0.95906432748538
47116,"private void updateNewFinalImbalance(){
  imbalance.minimumEvents=Long.MAX_VALUE;
  imbalance.maximumEvents=Long.MIN_VALUE;
  imbalance.sourceSelector=null;
  imbalance.destinationSelector=null;
  for (  AbstractIOSelector selector : selectors) {
    long eventCount=selectorEvents.get(selector);
    if (eventCount > imbalance.maximumEvents) {
      imbalance.maximumEvents=eventCount;
      imbalance.sourceSelector=selector;
    }
    if (eventCount < imbalance.minimumEvents) {
      imbalance.minimumEvents=eventCount;
      imbalance.destinationSelector=selector;
    }
  }
}","private void updateNewFinalImbalance(){
  imbalance.minimumEvents=Long.MAX_VALUE;
  imbalance.maximumEvents=Long.MIN_VALUE;
  imbalance.sourceSelector=null;
  imbalance.destinationSelector=null;
  for (  AbstractIOSelector selector : selectors) {
    long eventCount=selectorEvents.get(selector);
    int handlerCount=selectorToHandlers.get(selector).size();
    if (eventCount > imbalance.maximumEvents && handlerCount > 1) {
      imbalance.maximumEvents=eventCount;
      imbalance.sourceSelector=selector;
    }
    if (eventCount < imbalance.minimumEvents) {
      imbalance.minimumEvents=eventCount;
      imbalance.destinationSelector=selector;
    }
  }
}",0.9340836012861736
47117,"@Test public void testEachConnectionUseDifferentSelectorEventually(){
  Config config=new Config();
  config.setProperty(GroupProperties.PROP_IO_BALANCER_INTERVAL_SECONDS,""String_Node_Str"");
  config.setProperty(GroupProperties.PROP_IO_THREAD_COUNT,""String_Node_Str"");
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance instance3=Hazelcast.newHazelcastInstance(config);
  instance2.shutdown();
  instance2=Hazelcast.newHazelcastInstance(config);
  IMap<Integer,Integer> map=instance1.getMap(randomMapName());
  long deadLine=System.currentTimeMillis() + TEST_DURATION_SECONDS * 1000;
  for (int i=0; System.currentTimeMillis() < deadLine; i++) {
    map.put(i % 1000,i);
  }
  TcpIpConnectionManager manager1=(TcpIpConnectionManager)getConnectionManager(instance1);
  Address address1=getAddress(instance1);
  TcpIpConnectionManager manager2=(TcpIpConnectionManager)getConnectionManager(instance2);
  Address address2=getAddress(instance2);
  TcpIpConnectionManager manager3=(TcpIpConnectionManager)getConnectionManager(instance3);
  Address address3=getAddress(instance3);
  assertUseDifferentSelectors(manager1,address2,address3);
  assertUseDifferentSelectors(manager2,address1,address3);
  assertUseDifferentSelectors(manager3,address1,address2);
}","@Repeat(25) @Test public void testEachConnectionUseDifferentSelectorEventually(){
  Config config=new Config();
  config.setProperty(GroupProperties.PROP_IO_BALANCER_INTERVAL_SECONDS,""String_Node_Str"");
  config.setProperty(GroupProperties.PROP_IO_THREAD_COUNT,""String_Node_Str"");
  HazelcastInstance instance1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance instance3=Hazelcast.newHazelcastInstance(config);
  instance2.shutdown();
  instance2=Hazelcast.newHazelcastInstance(config);
  IMap<Integer,Integer> map=instance1.getMap(randomMapName());
  long deadLine=System.currentTimeMillis() + TEST_DURATION_SECONDS * 1000;
  for (int i=0; System.currentTimeMillis() < deadLine; i++) {
    map.put(i % 1000,i);
  }
  assertBalanced(instance1);
  assertBalanced(instance2);
  assertBalanced(instance3);
}",0.7064587973273943
47118,"@Test public void testUpdateImbalance() throws Exception {
  MigratableHandler handler1=mock(MigratableHandler.class);
  when(handler1.getEventCount()).thenReturn(0l).thenReturn(100l);
  when(handler1.getOwner()).thenReturn(selector1);
  loadTracker.addHandler(handler1);
  MigratableHandler handler2=mock(MigratableHandler.class);
  when(handler2.getEventCount()).thenReturn(0l).thenReturn(200l);
  when(handler2.getOwner()).thenReturn(selector2);
  loadTracker.addHandler(handler2);
  MigratableHandler handler3=mock(MigratableHandler.class);
  when(handler3.getEventCount()).thenReturn(0l).thenReturn(100l);
  when(handler3.getOwner()).thenReturn(selector2);
  loadTracker.addHandler(handler3);
  LoadImbalance loadImbalance=loadTracker.updateImbalance();
  assertEquals(0,loadImbalance.minimumEvents);
  assertEquals(0,loadImbalance.maximumEvents);
  loadTracker.updateImbalance();
  assertEquals(100,loadImbalance.minimumEvents);
  assertEquals(300,loadImbalance.maximumEvents);
  assertEquals(selector1,loadImbalance.destinationSelector);
  assertEquals(selector2,loadImbalance.sourceSelector);
}","@Test public void testUpdateImbalance() throws Exception {
  MigratableHandler selector1Handler1=mock(MigratableHandler.class);
  when(selector1Handler1.getEventCount()).thenReturn(0l).thenReturn(100l);
  when(selector1Handler1.getOwner()).thenReturn(selector1);
  loadTracker.addHandler(selector1Handler1);
  MigratableHandler selector2Handler1=mock(MigratableHandler.class);
  when(selector2Handler1.getEventCount()).thenReturn(0l).thenReturn(200l);
  when(selector2Handler1.getOwner()).thenReturn(selector2);
  loadTracker.addHandler(selector2Handler1);
  MigratableHandler selector2Handler3=mock(MigratableHandler.class);
  when(selector2Handler3.getEventCount()).thenReturn(0l).thenReturn(100l);
  when(selector2Handler3.getOwner()).thenReturn(selector2);
  loadTracker.addHandler(selector2Handler3);
  LoadImbalance loadImbalance=loadTracker.updateImbalance();
  assertEquals(0,loadImbalance.minimumEvents);
  assertEquals(0,loadImbalance.maximumEvents);
  loadTracker.updateImbalance();
  assertEquals(100,loadImbalance.minimumEvents);
  assertEquals(300,loadImbalance.maximumEvents);
  assertEquals(selector1,loadImbalance.destinationSelector);
  assertEquals(selector2,loadImbalance.sourceSelector);
}",0.92560553633218
47119,"public InSelectorImpl[] getInSelectors(){
  return inSelectors;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) public InSelectorImpl[] getInSelectors(){
  return inSelectors;
}",0.6467661691542289
47120,"public OutSelectorImpl[] getOutSelectors(){
  return outSelectors;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) public OutSelectorImpl[] getOutSelectors(){
  return outSelectors;
}",0.6570048309178744
47121,"protected void markRecordStoreExpirable(long ttl){
  if (ttl > 0L) {
    hasEntryWithCustomTTL=true;
  }
}","protected void markRecordStoreExpirable(long ttl){
  if (ttl > 0L && ttl < Long.MAX_VALUE) {
    hasEntryWithCustomTTL=true;
  }
}",0.8983050847457628
47122,"@Override public boolean merge(Data key,EntryView mergingEntry,MapMergePolicy mergePolicy){
  checkIfLoaded();
  final long now=getNow();
  Record record=getRecordOrNull(key,now,false);
  mergingEntry=EntryViews.convertToLazyEntryView(mergingEntry,serializationService,mergePolicy);
  Object newValue;
  if (record == null) {
    final Object notExistingKey=mapServiceContext.toObject(key);
    final EntryView nullEntryView=EntryViews.createNullEntryView(notExistingKey);
    newValue=mergePolicy.merge(name,mergingEntry,nullEntryView);
    if (newValue == null) {
      return false;
    }
    newValue=mapDataStore.add(key,newValue,now);
    record=createRecord(key,newValue,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    Object oldValue=record.getValue();
    EntryView existingEntry=EntryViews.createLazyEntryView(record.getKey(),record.getValue(),record,serializationService,mergePolicy);
    newValue=mergePolicy.merge(name,mergingEntry,existingEntry);
    if (newValue == null) {
      removeIndex(key);
      mapDataStore.remove(key,now);
      onStore(record);
      updateSizeEstimator(-calculateRecordHeapCost(record));
      deleteRecord(key);
      return true;
    }
    if (mapServiceContext.compare(name,newValue,oldValue)) {
      return true;
    }
    newValue=mapDataStore.add(key,newValue,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    recordFactory.setValue(record,newValue);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
  saveIndex(record);
  return newValue != null;
}","@Override public boolean merge(Data key,EntryView mergingEntry,MapMergePolicy mergePolicy){
  checkIfLoaded();
  final long now=getNow();
  Record record=getRecordOrNull(key,now,false);
  mergingEntry=EntryViews.convertToLazyEntryView(mergingEntry,serializationService,mergePolicy);
  Object newValue;
  if (record == null) {
    final Object notExistingKey=mapServiceContext.toObject(key);
    final EntryView nullEntryView=EntryViews.createNullEntryView(notExistingKey);
    newValue=mergePolicy.merge(name,mergingEntry,nullEntryView);
    if (newValue == null) {
      return false;
    }
    newValue=mapDataStore.add(key,newValue,now);
    record=createRecord(key,newValue,now);
    mergeRecordExpiration(record,mergingEntry);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    Object oldValue=record.getValue();
    EntryView existingEntry=EntryViews.createLazyEntryView(record.getKey(),record.getValue(),record,serializationService,mergePolicy);
    newValue=mergePolicy.merge(name,mergingEntry,existingEntry);
    if (newValue == null) {
      removeIndex(key);
      mapDataStore.remove(key,now);
      onStore(record);
      updateSizeEstimator(-calculateRecordHeapCost(record));
      deleteRecord(key);
      return true;
    }
    if (newValue == mergingEntry.getValue()) {
      mergeRecordExpiration(record,mergingEntry);
    }
    if (mapServiceContext.compare(name,newValue,oldValue)) {
      return true;
    }
    newValue=mapDataStore.add(key,newValue,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    recordFactory.setValue(record,newValue);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
  saveIndex(record);
  return newValue != null;
}",0.9553386572020112
47123,"private void createDataIn(HazelcastInstance[] cluster,String mapName,int start,int end){
  HazelcastInstance node=getNode(cluster);
  IMap m=node.getMap(mapName);
  for (; start < end; start++) {
    m.put(start,node.getConfig().getGroupConfig().getName() + start);
  }
}","private void createDataIn(HazelcastInstance[] cluster,String mapName,int start,int end,long ttl,TimeUnit timeUnit){
  HazelcastInstance node=getNode(cluster);
  IMap m=node.getMap(mapName);
  for (; start < end; start++) {
    m.put(start,node.getConfig().getGroupConfig().getName() + start,ttl,timeUnit);
  }
}",0.9312714776632304
47124,"protected void markRecordStoreExpirable(long ttl){
  if (ttl > 0L) {
    hasEntryWithCustomTTL=true;
  }
}","protected void markRecordStoreExpirable(long ttl){
  if (ttl > 0L && ttl < Long.MAX_VALUE) {
    hasEntryWithCustomTTL=true;
  }
}",0.8983050847457628
47125,"@Override public boolean merge(Data key,EntryView mergingEntry,MapMergePolicy mergePolicy){
  checkIfLoaded();
  final long now=getNow();
  Record record=getRecordOrNull(key,now,false);
  mergingEntry=EntryViews.convertToLazyEntryView(mergingEntry,serializationService,mergePolicy);
  Object newValue;
  if (record == null) {
    final Object notExistingKey=mapServiceContext.toObject(key);
    final EntryView nullEntryView=EntryViews.createNullEntryView(notExistingKey);
    newValue=mergePolicy.merge(name,mergingEntry,nullEntryView);
    if (newValue == null) {
      return false;
    }
    newValue=mapDataStore.add(key,newValue,now);
    record=createRecord(key,newValue,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    Object oldValue=record.getValue();
    EntryView existingEntry=EntryViews.createLazyEntryView(record.getKey(),record.getValue(),record,serializationService,mergePolicy);
    newValue=mergePolicy.merge(name,mergingEntry,existingEntry);
    if (newValue == null) {
      removeIndex(key);
      mapDataStore.remove(key,now);
      onStore(record);
      updateSizeEstimator(-calculateRecordHeapCost(record));
      deleteRecord(key);
      return true;
    }
    if (mapServiceContext.compare(name,newValue,oldValue)) {
      return true;
    }
    newValue=mapDataStore.add(key,newValue,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    recordFactory.setValue(record,newValue);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
  saveIndex(record);
  return newValue != null;
}","@Override public boolean merge(Data key,EntryView mergingEntry,MapMergePolicy mergePolicy){
  checkIfLoaded();
  final long now=getNow();
  Record record=getRecordOrNull(key,now,false);
  mergingEntry=EntryViews.convertToLazyEntryView(mergingEntry,serializationService,mergePolicy);
  Object newValue;
  if (record == null) {
    final Object notExistingKey=mapServiceContext.toObject(key);
    final EntryView nullEntryView=EntryViews.createNullEntryView(notExistingKey);
    newValue=mergePolicy.merge(name,mergingEntry,nullEntryView);
    if (newValue == null) {
      return false;
    }
    newValue=mapDataStore.add(key,newValue,now);
    record=createRecord(key,newValue,now);
    mergeRecordExpiration(record,mergingEntry);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    Object oldValue=record.getValue();
    EntryView existingEntry=EntryViews.createLazyEntryView(record.getKey(),record.getValue(),record,serializationService,mergePolicy);
    newValue=mergePolicy.merge(name,mergingEntry,existingEntry);
    if (newValue == null) {
      removeIndex(key);
      mapDataStore.remove(key,now);
      onStore(record);
      updateSizeEstimator(-calculateRecordHeapCost(record));
      deleteRecord(key);
      return true;
    }
    if (newValue == mergingEntry.getValue()) {
      mergeRecordExpiration(record,mergingEntry);
    }
    if (mapServiceContext.compare(name,newValue,oldValue)) {
      return true;
    }
    newValue=mapDataStore.add(key,newValue,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    recordFactory.setValue(record,newValue);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
  saveIndex(record);
  return newValue != null;
}",0.9553386572020112
47126,"private void createDataIn(HazelcastInstance[] cluster,String mapName,int start,int end){
  HazelcastInstance node=getNode(cluster);
  IMap m=node.getMap(mapName);
  for (; start < end; start++) {
    m.put(start,node.getConfig().getGroupConfig().getName() + start);
  }
}","private void createDataIn(HazelcastInstance[] cluster,String mapName,int start,int end,long ttl,TimeUnit timeUnit){
  HazelcastInstance node=getNode(cluster);
  IMap m=node.getMap(mapName);
  for (; start < end; start++) {
    m.put(start,node.getConfig().getGroupConfig().getName() + start,ttl,timeUnit);
  }
}",0.9312714776632304
47127,"public static int getMaxSizePerNode(MaxSizeConfig maxSizeConfig){
  int maxSizePerNode=getApproximateMaxSize(maxSizeConfig,MaxSizePolicy.PER_NODE);
  if (maxSizePerNode == MaxSizeConfig.DEFAULT_MAX_SIZE) {
    return -1;
  }
  return maxSizePerNode;
}","public static int getMaxSizePerNode(MaxSizeConfig maxSizeConfig){
  double maxSizePerNode=getApproximateMaxSize(maxSizeConfig,MaxSizePolicy.PER_NODE);
  if (maxSizePerNode == MaxSizeConfig.DEFAULT_MAX_SIZE) {
    return -1;
  }
  return (int)maxSizePerNode;
}",0.9725490196078432
47128,"private boolean isEvictablePerPartition(final MapContainer mapContainer,int partitionId){
  final MapServiceContext mapServiceContext=mapContainer.getMapServiceContext();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final String mapName=mapContainer.getName();
  final PartitionContainer container=mapServiceContext.getPartitionContainer(partitionId);
  if (container == null) {
    return false;
  }
  final int size=getRecordStoreSize(mapName,container);
  return size >= maxSize;
}","private boolean isEvictablePerPartition(final MapContainer mapContainer,int partitionId){
  final MapServiceContext mapServiceContext=mapContainer.getMapServiceContext();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final String mapName=mapContainer.getName();
  final PartitionContainer container=mapServiceContext.getPartitionContainer(partitionId);
  if (container == null) {
    return false;
  }
  final int size=getRecordStoreSize(mapName,container);
  return size >= maxSize;
}",0.992430613961312
47129,"/** 
 * Get max size setting form config for given policy
 * @return max size or -1 if policy is different or not set
 */
public static int getApproximateMaxSize(MaxSizeConfig maxSizeConfig,MaxSizePolicy policy){
  if (maxSizeConfig.getMaxSizePolicy() == policy) {
    return getApproximateMaxSize(maxSizeConfig.getSize());
  }
  return -1;
}","/** 
 * Get max size setting form config for given policy
 * @return max size or -1 if policy is different or not set
 */
public static double getApproximateMaxSize(MaxSizeConfig maxSizeConfig,MaxSizePolicy policy){
  if (maxSizeConfig.getMaxSizePolicy() == policy) {
    return getApproximateMaxSize(maxSizeConfig.getSize());
  }
  return -1D;
}",0.9854651162790696
47130,"private boolean isEvictableFreeHeapPercentage(final MapContainer mapContainer){
  final long currentFreeHeapSize=getAvailableMemory();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int freeHeapPercentage=getApproximateMaxSize(maxSizeConfig.getSize());
  final long total=getTotalMemory();
  return freeHeapPercentage > (1D * ONE_HUNDRED_PERCENT * currentFreeHeapSize / total);
}","private boolean isEvictableFreeHeapPercentage(final MapContainer mapContainer){
  final long currentFreeHeapSize=getAvailableMemory();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double freeHeapPercentage=getApproximateMaxSize(maxSizeConfig.getSize());
  final long total=getTotalMemory();
  return freeHeapPercentage > (1D * ONE_HUNDRED_PERCENT * currentFreeHeapSize / total);
}",0.9894242068155112
47131,"private boolean isEvictablePerNode(MapContainer mapContainer){
  int nodeTotalSize=0;
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final String mapName=mapContainer.getName();
  final MapServiceContext mapServiceContext=mapContainer.getMapServiceContext();
  final List<Integer> partitionIds=findPartitionIds();
  for (  int partitionId : partitionIds) {
    final PartitionContainer container=mapServiceContext.getPartitionContainer(partitionId);
    if (container == null) {
      continue;
    }
    nodeTotalSize+=getRecordStoreSize(mapName,container);
    if (nodeTotalSize >= maxSize) {
      return true;
    }
  }
  return false;
}","private boolean isEvictablePerNode(MapContainer mapContainer){
  long nodeTotalSize=0;
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final String mapName=mapContainer.getName();
  final MapServiceContext mapServiceContext=mapContainer.getMapServiceContext();
  final List<Integer> partitionIds=findPartitionIds();
  for (  int partitionId : partitionIds) {
    final PartitionContainer container=mapServiceContext.getPartitionContainer(partitionId);
    if (container == null) {
      continue;
    }
    nodeTotalSize+=getRecordStoreSize(mapName,container);
    if (nodeTotalSize >= maxSize) {
      return true;
    }
  }
  return false;
}",0.9893333333333332
47132,"private boolean isEvictableHeapSize(final MapContainer mapContainer){
  final long usedHeapSize=getUsedHeapSize(mapContainer);
  if (usedHeapSize == -1L) {
    return false;
  }
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  return maxSize < (usedHeapSize / ONE_MEGABYTE);
}","private boolean isEvictableHeapSize(final MapContainer mapContainer){
  final long usedHeapSize=getUsedHeapSize(mapContainer);
  if (usedHeapSize == -1L) {
    return false;
  }
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  return maxSize < (1D * usedHeapSize / ONE_MEGABYTE);
}",0.9818181818181818
47133,"private boolean isEvictableHeapPercentage(final MapContainer mapContainer){
  final long usedHeapSize=getUsedHeapSize(mapContainer);
  if (usedHeapSize == -1L) {
    return false;
  }
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final long total=getTotalMemory();
  return maxSize < (1D * ONE_HUNDRED_PERCENT * usedHeapSize / total);
}","private boolean isEvictableHeapPercentage(final MapContainer mapContainer){
  final long usedHeapSize=getUsedHeapSize(mapContainer);
  if (usedHeapSize == -1L) {
    return false;
  }
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final long total=getTotalMemory();
  return maxSize < (1D * ONE_HUNDRED_PERCENT * usedHeapSize / total);
}",0.98989898989899
47134,"private boolean isEvictableFreeHeapSize(final MapContainer mapContainer){
  final long currentFreeHeapSize=getAvailableMemory();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int minFreeHeapSize=getApproximateMaxSize(maxSizeConfig.getSize());
  return minFreeHeapSize > (currentFreeHeapSize / ONE_MEGABYTE);
}","private boolean isEvictableFreeHeapSize(final MapContainer mapContainer){
  final long currentFreeHeapSize=getAvailableMemory();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double minFreeHeapSize=getApproximateMaxSize(maxSizeConfig.getSize());
  return minFreeHeapSize > (1D * currentFreeHeapSize / ONE_MEGABYTE);
}",0.98050139275766
47135,"@Test public void testUsedHeapPercentagePolicy(){
  final int maxUsedHeapPercentage=60;
  final int nodeCount=1;
  final int putCount=1000;
  final String mapName=randomMapName();
  final Config config=createConfig(MaxSizeConfig.MaxSizePolicy.USED_HEAP_PERCENTAGE,maxUsedHeapPercentage,mapName);
  final Collection<IMap> maps=createMaps(mapName,config,nodeCount);
  final long oneEntryHeapCostInMegaBytes=1 << 30;
  setTestSizeEstimator(maps,oneEntryHeapCostInMegaBytes);
  populateMaps(maps,putCount);
  assertUsedHeapPercentagePolicyTriggersEviction(maps,putCount);
}","@Test public void testUsedHeapPercentagePolicy(){
  final int maxUsedHeapPercentage=60;
  final int nodeCount=1;
  final int putCount=1000;
  final String mapName=randomMapName();
  final Config config=createConfig(MaxSizeConfig.MaxSizePolicy.USED_HEAP_PERCENTAGE,maxUsedHeapPercentage,mapName);
  final Collection<IMap> maps=createMaps(mapName,config,nodeCount);
  final long oneEntryHeapCostInMegaBytes=1 << 30;
  setTestSizeEstimator(maps,MemoryUnit.MEGABYTES.toBytes(oneEntryHeapCostInMegaBytes));
  populateMaps(maps,putCount);
  assertUsedHeapPercentagePolicyTriggersEviction(maps,putCount);
}",0.9743150684931506
47136,"@Test public void testUsedHeapSizePolicy(){
  final int perNodeHeapMaxSizeInMegaBytes=10;
  final int nodeCount=1;
  final String mapName=randomMapName();
  final Config config=createConfig(MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE,perNodeHeapMaxSizeInMegaBytes,mapName);
  final Collection<IMap> maps=createMaps(mapName,config,nodeCount);
  setTestSizeEstimator(maps,1);
  populateMaps(maps,100);
  assertUsedHeapSizePolicyWorks(maps,perNodeHeapMaxSizeInMegaBytes);
}","@Test public void testUsedHeapSizePolicy(){
  final int perNodeHeapMaxSizeInMegaBytes=10;
  final int nodeCount=1;
  final String mapName=randomMapName();
  final Config config=createConfig(MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE,perNodeHeapMaxSizeInMegaBytes,mapName);
  final Collection<IMap> maps=createMaps(mapName,config,nodeCount);
  setTestSizeEstimator(maps,MemoryUnit.MEGABYTES.toBytes(1));
  populateMaps(maps,100);
  assertUsedHeapSizePolicyWorks(maps,perNodeHeapMaxSizeInMegaBytes);
}",0.96900826446281
47137,"@Override public long getCost(Object record){
  return MemoryUnit.MEGABYTES.toBytes(oneEntryHeapCostInMegaBytes);
}","@Override public long getCost(Object record){
  return oneEntryHeapCostInBytes;
}",0.826530612244898
47138,"private void setTestSizeEstimator(IMap map,final long oneEntryHeapCostInMegaBytes){
  final MapProxyImpl mapProxy=(MapProxyImpl)map;
  final MapService mapService=(MapService)mapProxy.getService();
  final MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  final NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  final InternalPartitionService partitionService=nodeEngine.getPartitionService();
  for (int i=0; i < partitionService.getPartitionCount(); i++) {
    final Address owner=partitionService.getPartitionOwner(i);
    if (nodeEngine.getThisAddress().equals(owner)) {
      final PartitionContainer container=mapServiceContext.getPartitionContainer(i);
      if (container == null) {
        continue;
      }
      final RecordStore recordStore=container.getRecordStore(map.getName());
      final DefaultRecordStore defaultRecordStore=(DefaultRecordStore)recordStore;
      defaultRecordStore.setSizeEstimator(new SizeEstimator(){
        long size;
        @Override public long getSize(){
          return size;
        }
        @Override public void add(        long size){
          this.size+=size;
        }
        @Override public long getCost(        Object record){
          return MemoryUnit.MEGABYTES.toBytes(oneEntryHeapCostInMegaBytes);
        }
        @Override public void reset(){
          size=0;
        }
      }
);
    }
  }
}","private void setTestSizeEstimator(IMap map,final long oneEntryHeapCostInBytes){
  final MapProxyImpl mapProxy=(MapProxyImpl)map;
  final MapService mapService=(MapService)mapProxy.getService();
  final MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  final NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  final InternalPartitionService partitionService=nodeEngine.getPartitionService();
  for (int i=0; i < partitionService.getPartitionCount(); i++) {
    final Address owner=partitionService.getPartitionOwner(i);
    if (nodeEngine.getThisAddress().equals(owner)) {
      final PartitionContainer container=mapServiceContext.getPartitionContainer(i);
      if (container == null) {
        continue;
      }
      final RecordStore recordStore=container.getRecordStore(map.getName());
      final DefaultRecordStore defaultRecordStore=(DefaultRecordStore)recordStore;
      defaultRecordStore.setSizeEstimator(new SizeEstimator(){
        long size;
        @Override public long getSize(){
          return size;
        }
        @Override public void add(        long size){
          this.size+=size;
        }
        @Override public long getCost(        Object record){
          return oneEntryHeapCostInBytes;
        }
        @Override public void reset(){
          size=0;
        }
      }
);
    }
  }
}",0.9745269286754004
47139,"private Record isTTLExpired(Record record,long now,boolean backup){
  if (record == null) {
    return null;
  }
  final long ttl=record.getTtl();
  if (ttl < 1L) {
    return record;
  }
  final long lastUpdateTime=record.getLastUpdateTime();
  final long ttlMillis=calculateExpirationWithDelay(ttl,backupExpiryDelayMillis,backup);
  final long elapsedMillis=now - lastUpdateTime;
  return elapsedMillis >= ttlMillis ? null : record;
}","private Record isTTLExpired(Record record,long now,boolean backup){
  if (record == null) {
    return null;
  }
  final long ttl=record.getTtl();
  if (ttl < 1L) {
    return record;
  }
  final long lastUpdateTime=record.getLastUpdateTime();
  final long ttlMillis=calculateExpirationWithDelay(ttl,getBackupExpiryDelayMillis(),backup);
  final long elapsedMillis=now - lastUpdateTime;
  return elapsedMillis >= ttlMillis ? null : record;
}",0.992018244013683
47140,"protected AbstractEvictableRecordStore(MapContainer mapContainer,int partitionId){
  super(mapContainer,partitionId);
  final MapConfig mapConfig=mapContainer.getMapConfig();
  this.minEvictionCheckMillis=mapConfig.getMinEvictionCheckMillis();
  this.evictionPolicy=mapContainer.getMapConfig().getEvictionPolicy();
  this.evictionEnabled=!EvictionPolicy.NONE.equals(evictionPolicy);
  this.expirable=isRecordStoreExpirable();
  this.backupExpiryDelayMillis=getBackupExpiryDelayMillis();
}","protected AbstractEvictableRecordStore(MapContainer mapContainer,int partitionId){
  super(mapContainer,partitionId);
}",0.3920922570016474
47141,"/** 
 * Eviction waits at least   {@link #minEvictionCheckMillis} milliseconds to run.
 * @return <code>true</code> if in that time window,otherwise <code>false</code>
 */
private boolean inEvictableTimeWindow(long now){
  return minEvictionCheckMillis == 0L || (now - lastEvictionTime) > minEvictionCheckMillis;
}","/** 
 * Eviction waits at least   {@link MapConfig#minEvictionCheckMillis} milliseconds to run.
 * @return <code>true</code> if in that time window,otherwise <code>false</code>
 */
private boolean inEvictableTimeWindow(long now){
  long minEvictionCheckMillis=getMinEvictionCheckMillis();
  return minEvictionCheckMillis == 0L || (now - lastEvictionTime) > minEvictionCheckMillis;
}",0.9022988505747126
47142,"/** 
 * If there is no clean-up caused by puts after some time, try to clean-up from gets.
 * @param now now.
 */
protected void postReadCleanUp(long now,boolean backup){
  if (evictionEnabled) {
    readCountBeforeCleanUp++;
    if ((readCountBeforeCleanUp & POST_READ_CHECK_POINT) == 0) {
      cleanUp(now,backup);
    }
  }
}","/** 
 * If there is no clean-up caused by puts after some time, try to clean-up from gets.
 * @param now now.
 */
protected void postReadCleanUp(long now,boolean backup){
  if (isEvictionEnabled()) {
    readCountBeforeCleanUp++;
    if ((readCountBeforeCleanUp & POST_READ_CHECK_POINT) == 0) {
      cleanUp(now,backup);
    }
  }
}",0.9909365558912386
47143,"protected boolean shouldEvict(long now){
  return evictionEnabled && inEvictableTimeWindow(now) && isEvictable();
}","protected boolean shouldEvict(long now){
  return isEvictionEnabled() && inEvictableTimeWindow(now) && isEvictable();
}",0.9743589743589745
47144,"protected void markRecordStoreExpirable(long ttl){
  if (ttl > 0L) {
    expirable=true;
  }
}","protected void markRecordStoreExpirable(long ttl){
  if (ttl > 0L) {
    hasEntryWithCustomTTL=true;
  }
}",0.86
47145,"private boolean isRecordStoreExpirable(){
  final MapConfig mapConfig=mapContainer.getMapConfig();
  return mapConfig.getMaxIdleSeconds() > 0 || mapConfig.getTimeToLiveSeconds() > 0;
}","/** 
 * Returns   {@code true} if this record store has at least one candidate entryfor expiration (idle or tll) otherwise returns  {@code false}.
 */
private boolean isRecordStoreExpirable(){
  final MapConfig mapConfig=mapContainer.getMapConfig();
  return hasEntryWithCustomTTL || mapConfig.getMaxIdleSeconds() > 0 || mapConfig.getTimeToLiveSeconds() > 0;
}",0.6764705882352942
47146,"/** 
 * Check if record is reachable according to ttl or idle times. If not reachable return null.
 * @param record {@link com.hazelcast.map.impl.record.Record}
 * @return null if evictable.
 */
protected Record getOrNullIfExpired(Record record,long now,boolean backup){
  if (!expirable) {
    return record;
  }
  if (record == null) {
    return null;
  }
  final Data key=record.getKey();
  if (isLocked(key)) {
    return record;
  }
  if (!isExpired(record,now,backup)) {
    return record;
  }
  final Object value=record.getValue();
  evictInternal(key,backup);
  if (!backup) {
    doPostExpirationOperations(key,value);
  }
  return null;
}","/** 
 * Check if record is reachable according to ttl or idle times. If not reachable return null.
 * @param record {@link com.hazelcast.map.impl.record.Record}
 * @return null if evictable.
 */
protected Record getOrNullIfExpired(Record record,long now,boolean backup){
  if (!isRecordStoreExpirable()) {
    return record;
  }
  if (record == null) {
    return null;
  }
  final Data key=record.getKey();
  if (isLocked(key)) {
    return record;
  }
  if (!isExpired(record,now,backup)) {
    return record;
  }
  final Object value=record.getValue();
  evictInternal(key,backup);
  if (!backup) {
    doPostExpirationOperations(key,value);
  }
  return null;
}",0.9870722433460076
47147,"private Record isIdleExpired(Record record,long now,boolean backup){
  if (record == null) {
    return null;
  }
  final long lastAccessTime=record.getLastAccessTime();
  final long maxIdleMillis=mapContainer.getMaxIdleMillis();
  final long idleMillis=calculateExpirationWithDelay(maxIdleMillis,backupExpiryDelayMillis,backup);
  final long elapsedMillis=now - lastAccessTime;
  return elapsedMillis >= idleMillis ? null : record;
}","private Record isIdleExpired(Record record,long now,boolean backup){
  if (record == null) {
    return null;
  }
  final long lastAccessTime=record.getLastAccessTime();
  final long maxIdleMillis=calculateMaxIdleMillis(mapContainer.getMapConfig());
  final long idleMillis=calculateExpirationWithDelay(maxIdleMillis,getBackupExpiryDelayMillis(),backup);
  final long elapsedMillis=now - lastAccessTime;
  return elapsedMillis >= idleMillis ? null : record;
}",0.942889137737962
47148,"@Override public boolean isExpirable(){
  return expirable;
}","@Override public boolean isExpirable(){
  return isRecordStoreExpirable();
}",0.8905109489051095
47149,"@Override protected void accessRecord(Record record,long now){
  super.accessRecord(record,now);
  increaseRecordEvictionCriteriaNumber(record,evictionPolicy);
  final long maxIdleMillis=mapContainer.getMaxIdleMillis();
  setExpirationTime(record,maxIdleMillis);
}","@Override protected void accessRecord(Record record,long now){
  super.accessRecord(record,now);
  increaseRecordEvictionCriteriaNumber(record,getEvictionPolicy());
  final long maxIdleMillis=calculateMaxIdleMillis(mapContainer.getMapConfig());
  setExpirationTime(record,maxIdleMillis);
}",0.7920433996383364
47150,"/** 
 * TODO make checkEvictable fast by carrying threshold logic to partition. This cleanup adds some latency to write operations. But it sweeps records much better under high write loads. <p/>
 * @param now now in time.
 */
public void evictEntries(long now,boolean backup){
  if (evictionEnabled) {
    cleanUp(now,backup);
  }
}","/** 
 * TODO make checkEvictable fast by carrying threshold logic to partition. This cleanup adds some latency to write operations. But it sweeps records much better under high write loads. <p/>
 * @param now now in time.
 */
public void evictEntries(long now,boolean backup){
  if (isEvictionEnabled()) {
    cleanUp(now,backup);
  }
}",0.9910179640718564
47151,"@Override public void putTransient(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  mapDataStore.addTransient(key,now);
}","@Override public void putTransient(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  mapDataStore.addTransient(key,now);
}",0.9018087855297158
47152,"@Override public Object put(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue;
  if (record == null) {
    oldValue=mapDataStore.load(key);
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    saveIndex(record);
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,oldValue,value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
    saveIndex(record);
  }
  return oldValue;
}","@Override public Object put(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue;
  if (record == null) {
    oldValue=mapDataStore.load(key);
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    saveIndex(record);
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,oldValue,value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
    saveIndex(record);
  }
  return oldValue;
}",0.97288842544317
47153,"@Override public Object putFromLoad(Data key,Object value,long ttl){
  final long now=getNow();
  if (shouldEvict(now)) {
    return null;
  }
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue=null;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  return oldValue;
}","@Override public Object putFromLoad(Data key,Object value,long ttl){
  final long now=getNow();
  if (shouldEvict(now)) {
    return null;
  }
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue=null;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  return oldValue;
}",0.9321428571428572
47154,"@Override public boolean tryPut(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  return true;
}","@Override public boolean tryPut(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  return true;
}",0.9380116959064329
47155,"@Override public boolean set(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  boolean newRecord=false;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    newRecord=true;
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  return newRecord;
}","@Override public boolean set(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  boolean newRecord=false;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    newRecord=true;
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  return newRecord;
}",0.9358407079646016
47156,"@Override public Object putIfAbsent(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue;
  if (record == null) {
    oldValue=mapDataStore.load(key);
    if (oldValue != null) {
      record=createRecord(key,oldValue,now);
      records.put(key,record);
      updateSizeEstimator(calculateRecordHeapCost(record));
    }
  }
 else {
    accessRecord(record,now);
    oldValue=record.getValue();
  }
  if (oldValue == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  return oldValue;
}","@Override public Object putIfAbsent(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue;
  if (record == null) {
    oldValue=mapDataStore.load(key);
    if (oldValue != null) {
      record=createRecord(key,oldValue,now);
      records.put(key,record);
      updateSizeEstimator(calculateRecordHeapCost(record));
    }
  }
 else {
    accessRecord(record,now);
    oldValue=record.getValue();
  }
  if (oldValue == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  return oldValue;
}",0.9375684556407448
47157,"/** 
 * Updates records TTL and expiration time.
 */
public static void updateExpiryTime(Record record,long ttl,long maxIdleMillis){
  if (ttl < 0) {
    return;
  }
  ttl=checkedTime(ttl);
  record.setTtl(ttl);
  setExpirationTime(record,maxIdleMillis);
}","/** 
 * Updates records TTL and expiration time.
 */
public static void updateExpiryTime(Record record,long ttl,MapConfig mapConfig){
  if (ttl < 0) {
    return;
  }
  ttl=checkedTime(ttl);
  record.setTtl(ttl);
  long maxIdleMillis=calculateMaxIdleMillis(mapConfig);
  setExpirationTime(record,maxIdleMillis);
}",0.4639718804920913
47158,"/** 
 * Operations which are done in this constructor should obey the rules defined in the method comment   {@link com.hazelcast.spi.PostJoinAwareService#getPostJoinOperation()}Otherwise undesired situations, like deadlocks, may appear.
 */
public MapContainer(final String name,final MapConfig mapConfig,final MapServiceContext mapServiceContext){
  this.name=name;
  this.mapConfig=mapConfig;
  this.maxIdleMillis=calculateMaxIdleMillis(mapConfig);
  this.ttlMillisFromConfig=calculateTTLMillis(mapConfig);
  this.mapServiceContext=mapServiceContext;
  this.partitioningStrategy=createPartitioningStrategy();
  this.quorumName=mapConfig.getQuorumName();
  final NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  recordFactory=createRecordFactory(nodeEngine);
  initWanReplication(nodeEngine);
  interceptors=new CopyOnWriteArrayList<MapInterceptor>();
  interceptorMap=new ConcurrentHashMap<String,MapInterceptor>();
  nearCacheSizeEstimator=createNearCacheSizeEstimator();
  mapStoreContext=createMapStoreContext(this);
  mapStoreContext.start();
}","/** 
 * Operations which are done in this constructor should obey the rules defined in the method comment   {@link com.hazelcast.spi.PostJoinAwareService#getPostJoinOperation()}Otherwise undesired situations, like deadlocks, may appear.
 */
public MapContainer(final String name,final MapConfig mapConfig,final MapServiceContext mapServiceContext){
  this.name=name;
  this.mapConfig=mapConfig;
  this.mapServiceContext=mapServiceContext;
  this.partitioningStrategy=createPartitioningStrategy();
  this.quorumName=mapConfig.getQuorumName();
  final NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  recordFactory=createRecordFactory(nodeEngine);
  initWanReplication(nodeEngine);
  interceptors=new CopyOnWriteArrayList<MapInterceptor>();
  interceptorMap=new ConcurrentHashMap<String,MapInterceptor>();
  nearCacheSizeEstimator=createNearCacheSizeEstimator();
  mapStoreContext=createMapStoreContext(this);
  mapStoreContext.start();
}",0.9431704885343968
47159,"public Record createRecord(Data key,Object value,long ttlMillis,long now){
  Record record=getRecordFactory().newRecord(key,value);
  record.setLastAccessTime(now);
  record.setLastUpdateTime(now);
  record.setCreationTime(now);
  final long ttlMillisFromConfig=getTtlMillisFromConfig();
  final long ttl=pickTTL(ttlMillis,ttlMillisFromConfig);
  record.setTtl(ttl);
  final long maxIdleMillis=getMaxIdleMillis();
  setExpirationTime(record,maxIdleMillis);
  return record;
}","public Record createRecord(Data key,Object value,long ttlMillis,long now){
  Record record=getRecordFactory().newRecord(key,value);
  record.setLastAccessTime(now);
  record.setLastUpdateTime(now);
  record.setCreationTime(now);
  final long ttlMillisFromConfig=calculateTTLMillis(mapConfig);
  final long ttl=pickTTL(ttlMillis,ttlMillisFromConfig);
  record.setTtl(ttl);
  final long maxIdleMillis=calculateMaxIdleMillis(mapConfig);
  setExpirationTime(record,maxIdleMillis);
  return record;
}",0.9381443298969072
47160,"public static int getMaxSizePerNode(MaxSizeConfig maxSizeConfig){
  int maxSizePerNode=getApproximateMaxSize(maxSizeConfig,MaxSizePolicy.PER_NODE);
  if (maxSizePerNode == MaxSizeConfig.DEFAULT_MAX_SIZE) {
    return -1;
  }
  return maxSizePerNode;
}","public static int getMaxSizePerNode(MaxSizeConfig maxSizeConfig){
  double maxSizePerNode=getApproximateMaxSize(maxSizeConfig,MaxSizePolicy.PER_NODE);
  if (maxSizePerNode == MaxSizeConfig.DEFAULT_MAX_SIZE) {
    return -1;
  }
  return (int)maxSizePerNode;
}",0.9725490196078432
47161,"private boolean isEvictablePerPartition(final MapContainer mapContainer,int partitionId){
  final MapServiceContext mapServiceContext=mapContainer.getMapServiceContext();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final String mapName=mapContainer.getName();
  final PartitionContainer container=mapServiceContext.getPartitionContainer(partitionId);
  if (container == null) {
    return false;
  }
  final int size=getRecordStoreSize(mapName,container);
  return size >= maxSize;
}","private boolean isEvictablePerPartition(final MapContainer mapContainer,int partitionId){
  final MapServiceContext mapServiceContext=mapContainer.getMapServiceContext();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final String mapName=mapContainer.getName();
  final PartitionContainer container=mapServiceContext.getPartitionContainer(partitionId);
  if (container == null) {
    return false;
  }
  final int size=getRecordStoreSize(mapName,container);
  return size >= maxSize;
}",0.992430613961312
47162,"/** 
 * Get max size setting form config for given policy
 * @return max size or -1 if policy is different or not set
 */
public static int getApproximateMaxSize(MaxSizeConfig maxSizeConfig,MaxSizePolicy policy){
  if (maxSizeConfig.getMaxSizePolicy() == policy) {
    return getApproximateMaxSize(maxSizeConfig.getSize());
  }
  return -1;
}","/** 
 * Get max size setting form config for given policy
 * @return max size or -1 if policy is different or not set
 */
public static double getApproximateMaxSize(MaxSizeConfig maxSizeConfig,MaxSizePolicy policy){
  if (maxSizeConfig.getMaxSizePolicy() == policy) {
    return getApproximateMaxSize(maxSizeConfig.getSize());
  }
  return -1D;
}",0.9854651162790696
47163,"private boolean isEvictableFreeHeapPercentage(final MapContainer mapContainer){
  final long currentFreeHeapSize=getAvailableMemory();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int freeHeapPercentage=getApproximateMaxSize(maxSizeConfig.getSize());
  final long total=getTotalMemory();
  return freeHeapPercentage > (1D * ONE_HUNDRED_PERCENT * currentFreeHeapSize / total);
}","private boolean isEvictableFreeHeapPercentage(final MapContainer mapContainer){
  final long currentFreeHeapSize=getAvailableMemory();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double freeHeapPercentage=getApproximateMaxSize(maxSizeConfig.getSize());
  final long total=getTotalMemory();
  return freeHeapPercentage > (1D * ONE_HUNDRED_PERCENT * currentFreeHeapSize / total);
}",0.9894242068155112
47164,"private boolean isEvictablePerNode(MapContainer mapContainer){
  int nodeTotalSize=0;
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final String mapName=mapContainer.getName();
  final MapServiceContext mapServiceContext=mapContainer.getMapServiceContext();
  final List<Integer> partitionIds=findPartitionIds();
  for (  int partitionId : partitionIds) {
    final PartitionContainer container=mapServiceContext.getPartitionContainer(partitionId);
    if (container == null) {
      continue;
    }
    nodeTotalSize+=getRecordStoreSize(mapName,container);
    if (nodeTotalSize >= maxSize) {
      return true;
    }
  }
  return false;
}","private boolean isEvictablePerNode(MapContainer mapContainer){
  long nodeTotalSize=0;
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final String mapName=mapContainer.getName();
  final MapServiceContext mapServiceContext=mapContainer.getMapServiceContext();
  final List<Integer> partitionIds=findPartitionIds();
  for (  int partitionId : partitionIds) {
    final PartitionContainer container=mapServiceContext.getPartitionContainer(partitionId);
    if (container == null) {
      continue;
    }
    nodeTotalSize+=getRecordStoreSize(mapName,container);
    if (nodeTotalSize >= maxSize) {
      return true;
    }
  }
  return false;
}",0.9893333333333332
47165,"private boolean isEvictableHeapSize(final MapContainer mapContainer){
  final long usedHeapSize=getUsedHeapSize(mapContainer);
  if (usedHeapSize == -1L) {
    return false;
  }
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  return maxSize < (usedHeapSize / ONE_MEGABYTE);
}","private boolean isEvictableHeapSize(final MapContainer mapContainer){
  final long usedHeapSize=getUsedHeapSize(mapContainer);
  if (usedHeapSize == -1L) {
    return false;
  }
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  return maxSize < (1D * usedHeapSize / ONE_MEGABYTE);
}",0.9818181818181818
47166,"private boolean isEvictableHeapPercentage(final MapContainer mapContainer){
  final long usedHeapSize=getUsedHeapSize(mapContainer);
  if (usedHeapSize == -1L) {
    return false;
  }
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final long total=getTotalMemory();
  return maxSize < (1D * ONE_HUNDRED_PERCENT * usedHeapSize / total);
}","private boolean isEvictableHeapPercentage(final MapContainer mapContainer){
  final long usedHeapSize=getUsedHeapSize(mapContainer);
  if (usedHeapSize == -1L) {
    return false;
  }
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double maxSize=getApproximateMaxSize(maxSizeConfig.getSize());
  final long total=getTotalMemory();
  return maxSize < (1D * ONE_HUNDRED_PERCENT * usedHeapSize / total);
}",0.98989898989899
47167,"private boolean isEvictableFreeHeapSize(final MapContainer mapContainer){
  final long currentFreeHeapSize=getAvailableMemory();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final int minFreeHeapSize=getApproximateMaxSize(maxSizeConfig.getSize());
  return minFreeHeapSize > (currentFreeHeapSize / ONE_MEGABYTE);
}","private boolean isEvictableFreeHeapSize(final MapContainer mapContainer){
  final long currentFreeHeapSize=getAvailableMemory();
  final MaxSizeConfig maxSizeConfig=mapContainer.getMapConfig().getMaxSizeConfig();
  final double minFreeHeapSize=getApproximateMaxSize(maxSizeConfig.getSize());
  return minFreeHeapSize > (1D * currentFreeHeapSize / ONE_MEGABYTE);
}",0.98050139275766
47168,"@Test public void testUsedHeapPercentagePolicy(){
  final int maxUsedHeapPercentage=60;
  final int nodeCount=1;
  final int putCount=1000;
  final String mapName=randomMapName();
  final Config config=createConfig(MaxSizeConfig.MaxSizePolicy.USED_HEAP_PERCENTAGE,maxUsedHeapPercentage,mapName);
  final Collection<IMap> maps=createMaps(mapName,config,nodeCount);
  final long oneEntryHeapCostInMegaBytes=1 << 30;
  setTestSizeEstimator(maps,oneEntryHeapCostInMegaBytes);
  populateMaps(maps,putCount);
  assertUsedHeapPercentagePolicyTriggersEviction(maps,putCount);
}","@Test public void testUsedHeapPercentagePolicy(){
  final int maxUsedHeapPercentage=60;
  final int nodeCount=1;
  final int putCount=1000;
  final String mapName=randomMapName();
  final Config config=createConfig(MaxSizeConfig.MaxSizePolicy.USED_HEAP_PERCENTAGE,maxUsedHeapPercentage,mapName);
  final Collection<IMap> maps=createMaps(mapName,config,nodeCount);
  final long oneEntryHeapCostInMegaBytes=1 << 30;
  setTestSizeEstimator(maps,MemoryUnit.MEGABYTES.toBytes(oneEntryHeapCostInMegaBytes));
  populateMaps(maps,putCount);
  assertUsedHeapPercentagePolicyTriggersEviction(maps,putCount);
}",0.9743150684931506
47169,"@Test public void testUsedHeapSizePolicy(){
  final int perNodeHeapMaxSizeInMegaBytes=10;
  final int nodeCount=1;
  final String mapName=randomMapName();
  final Config config=createConfig(MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE,perNodeHeapMaxSizeInMegaBytes,mapName);
  final Collection<IMap> maps=createMaps(mapName,config,nodeCount);
  setTestSizeEstimator(maps,1);
  populateMaps(maps,100);
  assertUsedHeapSizePolicyWorks(maps,perNodeHeapMaxSizeInMegaBytes);
}","@Test public void testUsedHeapSizePolicy(){
  final int perNodeHeapMaxSizeInMegaBytes=10;
  final int nodeCount=1;
  final String mapName=randomMapName();
  final Config config=createConfig(MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE,perNodeHeapMaxSizeInMegaBytes,mapName);
  final Collection<IMap> maps=createMaps(mapName,config,nodeCount);
  setTestSizeEstimator(maps,MemoryUnit.MEGABYTES.toBytes(1));
  populateMaps(maps,100);
  assertUsedHeapSizePolicyWorks(maps,perNodeHeapMaxSizeInMegaBytes);
}",0.96900826446281
47170,"@Override public long getCost(Object record){
  return MemoryUnit.MEGABYTES.toBytes(oneEntryHeapCostInMegaBytes);
}","@Override public long getCost(Object record){
  return oneEntryHeapCostInBytes;
}",0.826530612244898
47171,"private void setTestSizeEstimator(IMap map,final long oneEntryHeapCostInMegaBytes){
  final MapProxyImpl mapProxy=(MapProxyImpl)map;
  final MapService mapService=(MapService)mapProxy.getService();
  final MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  final NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  final InternalPartitionService partitionService=nodeEngine.getPartitionService();
  for (int i=0; i < partitionService.getPartitionCount(); i++) {
    final Address owner=partitionService.getPartitionOwner(i);
    if (nodeEngine.getThisAddress().equals(owner)) {
      final PartitionContainer container=mapServiceContext.getPartitionContainer(i);
      if (container == null) {
        continue;
      }
      final RecordStore recordStore=container.getRecordStore(map.getName());
      final DefaultRecordStore defaultRecordStore=(DefaultRecordStore)recordStore;
      defaultRecordStore.setSizeEstimator(new SizeEstimator(){
        long size;
        @Override public long getSize(){
          return size;
        }
        @Override public void add(        long size){
          this.size+=size;
        }
        @Override public long getCost(        Object record){
          return MemoryUnit.MEGABYTES.toBytes(oneEntryHeapCostInMegaBytes);
        }
        @Override public void reset(){
          size=0;
        }
      }
);
    }
  }
}","private void setTestSizeEstimator(IMap map,final long oneEntryHeapCostInBytes){
  final MapProxyImpl mapProxy=(MapProxyImpl)map;
  final MapService mapService=(MapService)mapProxy.getService();
  final MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  final NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  final InternalPartitionService partitionService=nodeEngine.getPartitionService();
  for (int i=0; i < partitionService.getPartitionCount(); i++) {
    final Address owner=partitionService.getPartitionOwner(i);
    if (nodeEngine.getThisAddress().equals(owner)) {
      final PartitionContainer container=mapServiceContext.getPartitionContainer(i);
      if (container == null) {
        continue;
      }
      final RecordStore recordStore=container.getRecordStore(map.getName());
      final DefaultRecordStore defaultRecordStore=(DefaultRecordStore)recordStore;
      defaultRecordStore.setSizeEstimator(new SizeEstimator(){
        long size;
        @Override public long getSize(){
          return size;
        }
        @Override public void add(        long size){
          this.size+=size;
        }
        @Override public long getCost(        Object record){
          return oneEntryHeapCostInBytes;
        }
        @Override public void reset(){
          size=0;
        }
      }
);
    }
  }
}",0.9745269286754004
47172,"private Record isTTLExpired(Record record,long now,boolean backup){
  if (record == null) {
    return null;
  }
  final long ttl=record.getTtl();
  if (ttl < 1L) {
    return record;
  }
  final long lastUpdateTime=record.getLastUpdateTime();
  final long ttlMillis=calculateExpirationWithDelay(ttl,backupExpiryDelayMillis,backup);
  final long elapsedMillis=now - lastUpdateTime;
  return elapsedMillis >= ttlMillis ? null : record;
}","private Record isTTLExpired(Record record,long now,boolean backup){
  if (record == null) {
    return null;
  }
  final long ttl=record.getTtl();
  if (ttl < 1L) {
    return record;
  }
  final long lastUpdateTime=record.getLastUpdateTime();
  final long ttlMillis=calculateExpirationWithDelay(ttl,getBackupExpiryDelayMillis(),backup);
  final long elapsedMillis=now - lastUpdateTime;
  return elapsedMillis >= ttlMillis ? null : record;
}",0.992018244013683
47173,"protected AbstractEvictableRecordStore(MapContainer mapContainer,int partitionId){
  super(mapContainer,partitionId);
  final MapConfig mapConfig=mapContainer.getMapConfig();
  this.minEvictionCheckMillis=mapConfig.getMinEvictionCheckMillis();
  this.evictionPolicy=mapContainer.getMapConfig().getEvictionPolicy();
  this.evictionEnabled=!EvictionPolicy.NONE.equals(evictionPolicy);
  this.expirable=isRecordStoreExpirable();
  this.backupExpiryDelayMillis=getBackupExpiryDelayMillis();
}","protected AbstractEvictableRecordStore(MapContainer mapContainer,int partitionId){
  super(mapContainer,partitionId);
}",0.3920922570016474
47174,"/** 
 * Eviction waits at least   {@link #minEvictionCheckMillis} milliseconds to run.
 * @return <code>true</code> if in that time window,otherwise <code>false</code>
 */
private boolean inEvictableTimeWindow(long now){
  return minEvictionCheckMillis == 0L || (now - lastEvictionTime) > minEvictionCheckMillis;
}","/** 
 * Eviction waits at least   {@link MapConfig#minEvictionCheckMillis} milliseconds to run.
 * @return <code>true</code> if in that time window,otherwise <code>false</code>
 */
private boolean inEvictableTimeWindow(long now){
  long minEvictionCheckMillis=getMinEvictionCheckMillis();
  return minEvictionCheckMillis == 0L || (now - lastEvictionTime) > minEvictionCheckMillis;
}",0.9022988505747126
47175,"/** 
 * If there is no clean-up caused by puts after some time, try to clean-up from gets.
 * @param now now.
 */
protected void postReadCleanUp(long now,boolean backup){
  if (evictionEnabled) {
    readCountBeforeCleanUp++;
    if ((readCountBeforeCleanUp & POST_READ_CHECK_POINT) == 0) {
      cleanUp(now,backup);
    }
  }
}","/** 
 * If there is no clean-up caused by puts after some time, try to clean-up from gets.
 * @param now now.
 */
protected void postReadCleanUp(long now,boolean backup){
  if (isEvictionEnabled()) {
    readCountBeforeCleanUp++;
    if ((readCountBeforeCleanUp & POST_READ_CHECK_POINT) == 0) {
      cleanUp(now,backup);
    }
  }
}",0.9909365558912386
47176,"protected boolean shouldEvict(long now){
  return evictionEnabled && inEvictableTimeWindow(now) && isEvictable();
}","protected boolean shouldEvict(long now){
  return isEvictionEnabled() && inEvictableTimeWindow(now) && isEvictable();
}",0.9743589743589745
47177,"protected void markRecordStoreExpirable(long ttl){
  if (ttl > 0L) {
    expirable=true;
  }
}","protected void markRecordStoreExpirable(long ttl){
  if (ttl > 0L) {
    hasEntryWithCustomTTL=true;
  }
}",0.86
47178,"private boolean isRecordStoreExpirable(){
  final MapConfig mapConfig=mapContainer.getMapConfig();
  return mapConfig.getMaxIdleSeconds() > 0 || mapConfig.getTimeToLiveSeconds() > 0;
}","/** 
 * Returns   {@code true} if this record store has at least one candidate entryfor expiration (idle or tll) otherwise returns  {@code false}.
 */
private boolean isRecordStoreExpirable(){
  final MapConfig mapConfig=mapContainer.getMapConfig();
  return hasEntryWithCustomTTL || mapConfig.getMaxIdleSeconds() > 0 || mapConfig.getTimeToLiveSeconds() > 0;
}",0.6764705882352942
47179,"/** 
 * Check if record is reachable according to ttl or idle times. If not reachable return null.
 * @param record {@link com.hazelcast.map.impl.record.Record}
 * @return null if evictable.
 */
protected Record getOrNullIfExpired(Record record,long now,boolean backup){
  if (!expirable) {
    return record;
  }
  if (record == null) {
    return null;
  }
  final Data key=record.getKey();
  if (isLocked(key)) {
    return record;
  }
  if (!isExpired(record,now,backup)) {
    return record;
  }
  final Object value=record.getValue();
  evictInternal(key,backup);
  if (!backup) {
    doPostExpirationOperations(key,value);
  }
  return null;
}","/** 
 * Check if record is reachable according to ttl or idle times. If not reachable return null.
 * @param record {@link com.hazelcast.map.impl.record.Record}
 * @return null if evictable.
 */
protected Record getOrNullIfExpired(Record record,long now,boolean backup){
  if (!isRecordStoreExpirable()) {
    return record;
  }
  if (record == null) {
    return null;
  }
  final Data key=record.getKey();
  if (isLocked(key)) {
    return record;
  }
  if (!isExpired(record,now,backup)) {
    return record;
  }
  final Object value=record.getValue();
  evictInternal(key,backup);
  if (!backup) {
    doPostExpirationOperations(key,value);
  }
  return null;
}",0.9870722433460076
47180,"private Record isIdleExpired(Record record,long now,boolean backup){
  if (record == null) {
    return null;
  }
  final long lastAccessTime=record.getLastAccessTime();
  final long maxIdleMillis=mapContainer.getMaxIdleMillis();
  final long idleMillis=calculateExpirationWithDelay(maxIdleMillis,backupExpiryDelayMillis,backup);
  final long elapsedMillis=now - lastAccessTime;
  return elapsedMillis >= idleMillis ? null : record;
}","private Record isIdleExpired(Record record,long now,boolean backup){
  if (record == null) {
    return null;
  }
  final long lastAccessTime=record.getLastAccessTime();
  final long maxIdleMillis=calculateMaxIdleMillis(mapContainer.getMapConfig());
  final long idleMillis=calculateExpirationWithDelay(maxIdleMillis,getBackupExpiryDelayMillis(),backup);
  final long elapsedMillis=now - lastAccessTime;
  return elapsedMillis >= idleMillis ? null : record;
}",0.942889137737962
47181,"@Override public boolean isExpirable(){
  return expirable;
}","@Override public boolean isExpirable(){
  return isRecordStoreExpirable();
}",0.8905109489051095
47182,"@Override protected void accessRecord(Record record,long now){
  super.accessRecord(record,now);
  increaseRecordEvictionCriteriaNumber(record,evictionPolicy);
  final long maxIdleMillis=mapContainer.getMaxIdleMillis();
  setExpirationTime(record,maxIdleMillis);
}","@Override protected void accessRecord(Record record,long now){
  super.accessRecord(record,now);
  increaseRecordEvictionCriteriaNumber(record,getEvictionPolicy());
  final long maxIdleMillis=calculateMaxIdleMillis(mapContainer.getMapConfig());
  setExpirationTime(record,maxIdleMillis);
}",0.7920433996383364
47183,"/** 
 * TODO make checkEvictable fast by carrying threshold logic to partition. This cleanup adds some latency to write operations. But it sweeps records much better under high write loads. <p/>
 * @param now now in time.
 */
public void evictEntries(long now,boolean backup){
  if (evictionEnabled) {
    cleanUp(now,backup);
  }
}","/** 
 * TODO make checkEvictable fast by carrying threshold logic to partition. This cleanup adds some latency to write operations. But it sweeps records much better under high write loads. <p/>
 * @param now now in time.
 */
public void evictEntries(long now,boolean backup){
  if (isEvictionEnabled()) {
    cleanUp(now,backup);
  }
}",0.9910179640718564
47184,"@Override public void putTransient(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  mapDataStore.addTransient(key,now);
}","@Override public void putTransient(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  mapDataStore.addTransient(key,now);
}",0.9018087855297158
47185,"@Override public Object put(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue;
  if (record == null) {
    oldValue=mapDataStore.load(key);
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    saveIndex(record);
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,oldValue,value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
    saveIndex(record);
  }
  return oldValue;
}","@Override public Object put(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue;
  if (record == null) {
    oldValue=mapDataStore.load(key);
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    saveIndex(record);
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,oldValue,value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
    saveIndex(record);
  }
  return oldValue;
}",0.97288842544317
47186,"@Override public Object putFromLoad(Data key,Object value,long ttl){
  final long now=getNow();
  if (shouldEvict(now)) {
    return null;
  }
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue=null;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  return oldValue;
}","@Override public Object putFromLoad(Data key,Object value,long ttl){
  final long now=getNow();
  if (shouldEvict(now)) {
    return null;
  }
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue=null;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  return oldValue;
}",0.9321428571428572
47187,"@Override public boolean tryPut(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  return true;
}","@Override public boolean tryPut(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  return true;
}",0.9380116959064329
47188,"@Override public boolean set(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  boolean newRecord=false;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    newRecord=true;
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  return newRecord;
}","@Override public boolean set(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  boolean newRecord=false;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    newRecord=true;
  }
 else {
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  return newRecord;
}",0.9358407079646016
47189,"@Override public Object putIfAbsent(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue;
  if (record == null) {
    oldValue=mapDataStore.load(key);
    if (oldValue != null) {
      record=createRecord(key,oldValue,now);
      records.put(key,record);
      updateSizeEstimator(calculateRecordHeapCost(record));
    }
  }
 else {
    accessRecord(record,now);
    oldValue=record.getValue();
  }
  if (oldValue == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMaxIdleMillis());
  }
  saveIndex(record);
  return oldValue;
}","@Override public Object putIfAbsent(Data key,Object value,long ttl){
  checkIfLoaded();
  final long now=getNow();
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue;
  if (record == null) {
    oldValue=mapDataStore.load(key);
    if (oldValue != null) {
      record=createRecord(key,oldValue,now);
      records.put(key,record);
      updateSizeEstimator(calculateRecordHeapCost(record));
    }
  }
 else {
    accessRecord(record,now);
    oldValue=record.getValue();
  }
  if (oldValue == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    value=mapDataStore.add(key,value,now);
    onStore(record);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  return oldValue;
}",0.9375684556407448
47190,"/** 
 * Updates records TTL and expiration time.
 */
public static void updateExpiryTime(Record record,long ttl,long maxIdleMillis){
  if (ttl < 0) {
    return;
  }
  ttl=checkedTime(ttl);
  record.setTtl(ttl);
  setExpirationTime(record,maxIdleMillis);
}","/** 
 * Updates records TTL and expiration time.
 */
public static void updateExpiryTime(Record record,long ttl,MapConfig mapConfig){
  if (ttl < 0) {
    return;
  }
  ttl=checkedTime(ttl);
  record.setTtl(ttl);
  long maxIdleMillis=calculateMaxIdleMillis(mapConfig);
  setExpirationTime(record,maxIdleMillis);
}",0.4639718804920913
47191,"/** 
 * Operations which are done in this constructor should obey the rules defined in the method comment   {@link com.hazelcast.spi.PostJoinAwareService#getPostJoinOperation()}Otherwise undesired situations, like deadlocks, may appear.
 */
public MapContainer(final String name,final MapConfig mapConfig,final MapServiceContext mapServiceContext){
  this.name=name;
  this.mapConfig=mapConfig;
  this.maxIdleMillis=calculateMaxIdleMillis(mapConfig);
  this.ttlMillisFromConfig=calculateTTLMillis(mapConfig);
  this.mapServiceContext=mapServiceContext;
  this.partitioningStrategy=createPartitioningStrategy();
  this.quorumName=mapConfig.getQuorumName();
  final NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  recordFactory=createRecordFactory(nodeEngine);
  initWanReplication(nodeEngine);
  interceptors=new CopyOnWriteArrayList<MapInterceptor>();
  interceptorMap=new ConcurrentHashMap<String,MapInterceptor>();
  nearCacheSizeEstimator=createNearCacheSizeEstimator();
  mapStoreContext=createMapStoreContext(this);
  mapStoreContext.start();
}","/** 
 * Operations which are done in this constructor should obey the rules defined in the method comment   {@link com.hazelcast.spi.PostJoinAwareService#getPostJoinOperation()}Otherwise undesired situations, like deadlocks, may appear.
 */
public MapContainer(final String name,final MapConfig mapConfig,final MapServiceContext mapServiceContext){
  this.name=name;
  this.mapConfig=mapConfig;
  this.mapServiceContext=mapServiceContext;
  this.partitioningStrategy=createPartitioningStrategy();
  this.quorumName=mapConfig.getQuorumName();
  final NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  recordFactory=createRecordFactory(nodeEngine);
  initWanReplication(nodeEngine);
  interceptors=new CopyOnWriteArrayList<MapInterceptor>();
  interceptorMap=new ConcurrentHashMap<String,MapInterceptor>();
  nearCacheSizeEstimator=createNearCacheSizeEstimator();
  mapStoreContext=createMapStoreContext(this);
  mapStoreContext.start();
}",0.9431704885343968
47192,"public Record createRecord(Data key,Object value,long ttlMillis,long now){
  Record record=getRecordFactory().newRecord(key,value);
  record.setLastAccessTime(now);
  record.setLastUpdateTime(now);
  record.setCreationTime(now);
  final long ttlMillisFromConfig=getTtlMillisFromConfig();
  final long ttl=pickTTL(ttlMillis,ttlMillisFromConfig);
  record.setTtl(ttl);
  final long maxIdleMillis=getMaxIdleMillis();
  setExpirationTime(record,maxIdleMillis);
  return record;
}","public Record createRecord(Data key,Object value,long ttlMillis,long now){
  Record record=getRecordFactory().newRecord(key,value);
  record.setLastAccessTime(now);
  record.setLastUpdateTime(now);
  record.setCreationTime(now);
  final long ttlMillisFromConfig=calculateTTLMillis(mapConfig);
  final long ttl=pickTTL(ttlMillis,ttlMillisFromConfig);
  record.setTtl(ttl);
  final long maxIdleMillis=calculateMaxIdleMillis(mapConfig);
  setExpirationTime(record,maxIdleMillis);
  return record;
}",0.9381443298969072
47193,"public void setAttribute(final String name,final Object value){
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (value == null) {
    removeAttribute(name);
    return;
  }
  boolean transientEntry=false;
  if (transientAttributes.contains(name)) {
    transientEntry=true;
  }
  LocalCacheEntry entry=localCache.get(name);
  if (entry == null || entry == WebFilter.NULL_ENTRY) {
    entry=new LocalCacheEntry(transientEntry);
    localCache.put(name,entry);
  }
  entry.setValue(value);
  entry.setDirty(true);
  entry.setRemoved(false);
  if (!deferredWrite && !transientEntry) {
    try {
      webFilter.getClusteredSessionService().setAttribute(id,name,value);
      entry.setDirty(false);
    }
 catch (    Exception ignored) {
      EmptyStatement.ignore(ignored);
    }
  }
}","public void setAttribute(final String name,final Object value){
  if (name == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (value == null) {
    removeAttribute(name);
    return;
  }
  boolean transientEntry=false;
  if (transientAttributes.contains(name)) {
    transientEntry=true;
  }
  LocalCacheEntry entry=localCache.get(name);
  if (entry == null || entry == WebFilter.NULL_ENTRY) {
    entry=new LocalCacheEntry(transientEntry);
    localCache.put(name,entry);
  }
  entry.setValue(value);
  entry.setDirty(true);
  entry.setRemoved(false);
  entry.setReload(false);
  if (!deferredWrite && !transientEntry) {
    try {
      webFilter.getClusteredSessionService().setAttribute(id,name,value);
      entry.setDirty(false);
    }
 catch (    Exception ignored) {
      EmptyStatement.ignore(ignored);
    }
  }
}",0.9844124700239808
47194,"public void removeAttribute(final String name){
  LocalCacheEntry entry=localCache.get(name);
  if (entry != null && entry != WebFilter.NULL_ENTRY) {
    entry.setValue(null);
    entry.setRemoved(true);
    entry.setDirty(true);
  }
  if (!deferredWrite) {
    try {
      webFilter.getClusteredSessionService().deleteAttribute(id,name);
    }
 catch (    Exception ignored) {
      EmptyStatement.ignore(ignored);
    }
  }
}","public void removeAttribute(final String name){
  LocalCacheEntry entry=localCache.get(name);
  if (entry != null && entry != WebFilter.NULL_ENTRY) {
    entry.setValue(null);
    entry.setRemoved(true);
    entry.setDirty(true);
    entry.setReload(false);
  }
  if (!deferredWrite) {
    try {
      webFilter.getClusteredSessionService().deleteAttribute(id,name);
    }
 catch (    Exception ignored) {
      EmptyStatement.ignore(ignored);
    }
  }
}",0.9682539682539684
47195,"public final void doFilter(ServletRequest req,ServletResponse res,final FilterChain chain) throws IOException, ServletException {
  if (!(req instanceof HttpServletRequest)) {
    chain.doFilter(req,res);
  }
 else {
    if (req instanceof RequestWrapper) {
      LOGGER.finest(""String_Node_Str"");
      chain.doFilter(req,res);
      return;
    }
    HttpServletRequest httpReq=(HttpServletRequest)req;
    RequestWrapper existingReq=(RequestWrapper)req.getAttribute(HAZELCAST_REQUEST);
    final ResponseWrapper resWrapper=new ResponseWrapper((HttpServletResponse)res);
    final RequestWrapper reqWrapper=new RequestWrapper(httpReq,resWrapper);
    if (existingReq != null) {
      reqWrapper.setHazelcastSession(existingReq.hazelcastSession,existingReq.requestedSessionId);
    }
    chain.doFilter(reqWrapper,resWrapper);
    if (existingReq != null) {
      return;
    }
    HazelcastHttpSession session=reqWrapper.getSession(false);
    if (session != null && session.isValid()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + session.getId());
      }
      if (deferredWrite) {
        session.sessionDeferredWrite();
      }
    }
  }
}","public final void doFilter(ServletRequest req,ServletResponse res,final FilterChain chain) throws IOException, ServletException {
  if (!(req instanceof HttpServletRequest)) {
    chain.doFilter(req,res);
  }
 else {
    if (req instanceof RequestWrapper) {
      LOGGER.finest(""String_Node_Str"");
      chain.doFilter(req,res);
      return;
    }
    HttpServletRequest httpReq=(HttpServletRequest)req;
    RequestWrapper existingReq=(RequestWrapper)req.getAttribute(HAZELCAST_REQUEST);
    final ResponseWrapper resWrapper=new ResponseWrapper((HttpServletResponse)res);
    final RequestWrapper reqWrapper=new RequestWrapper(httpReq,resWrapper);
    if (existingReq != null) {
      reqWrapper.setHazelcastSession(existingReq.hazelcastSession,existingReq.clusteredSessionId);
    }
    chain.doFilter(reqWrapper,resWrapper);
    if (existingReq != null) {
      return;
    }
    HazelcastHttpSession session=reqWrapper.getSession(false);
    if (session != null && session.isValid()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + session.getId());
      }
      if (deferredWrite) {
        session.sessionDeferredWrite();
      }
    }
  }
}",0.994077834179357
47196,"public HazelcastHttpSession getOrCreateHazelcastSession(){
  if (requestedSessionId == null) {
    requestedSessionId=getSessionCookie(this);
    if (requestedSessionId == null) {
      requestedSessionId=getParameter(HAZELCAST_SESSION_COOKIE_NAME);
    }
  }
  if (requestedSessionId != null) {
    hazelcastSession=getSessionWithId(requestedSessionId);
  }
  if (hazelcastSession == null && !res.isCommitted()) {
    hazelcastSession=createNewSession(RequestWrapper.this,requestedSessionId);
  }
  return hazelcastSession;
}","public HazelcastHttpSession getOrCreateHazelcastSession(){
  if (hazelcastSession == null && !res.isCommitted()) {
    hazelcastSession=createNewSession(RequestWrapper.this,clusteredSessionId);
  }
  return hazelcastSession;
}",0.2393617021276596
47197,"private HazelcastHttpSession readSessionFromLocal(){
  if (hazelcastSession != null && !hazelcastSession.isValid()) {
    LOGGER.finest(""String_Node_Str"");
    destroySession(hazelcastSession,true);
    hazelcastSession=null;
  }
 else   if (hazelcastSession != null) {
    if (!hazelcastSession.isStickySession()) {
      hazelcastSession.updateReloadFlag();
    }
    return hazelcastSession;
  }
  HttpSession originalSession=getOriginalSession(false);
  if (originalSession != null) {
    String hazelcastSessionId=originalSessions.get(originalSession.getId());
    if (hazelcastSessionId != null) {
      hazelcastSession=sessions.get(hazelcastSessionId);
      if (!hazelcastSession.isStickySession()) {
        hazelcastSession.updateReloadFlag();
      }
      return hazelcastSession;
    }
    originalSessions.remove(originalSession.getId());
    originalSession.invalidate();
  }
  if (requestedSessionId != null) {
    hazelcastSession=sessions.get(requestedSessionId);
  }
  return null;
}","private HazelcastHttpSession readSessionFromLocal(){
  if (hazelcastSession != null && !hazelcastSession.isValid()) {
    LOGGER.finest(""String_Node_Str"");
    destroySession(hazelcastSession,true);
    hazelcastSession=null;
  }
 else   if (hazelcastSession != null) {
    return hazelcastSession;
  }
  HttpSession originalSession=getOriginalSession(false);
  if (originalSession != null) {
    String hazelcastSessionId=originalSessions.get(originalSession.getId());
    if (hazelcastSessionId != null) {
      hazelcastSession=sessions.get(hazelcastSessionId);
      if (!hazelcastSession.isStickySession()) {
        hazelcastSession.updateReloadFlag();
      }
      return hazelcastSession;
    }
    originalSessions.remove(originalSession.getId());
    originalSession.invalidate();
  }
  if (clusteredSessionId != null) {
    hazelcastSession=sessions.get(clusteredSessionId);
  }
  return readFromCookie();
}",0.4203954214360041
47198,"public void setHazelcastSession(HazelcastHttpSession hazelcastSession,String requestedSessionId){
  this.hazelcastSession=hazelcastSession;
  this.requestedSessionId=requestedSessionId;
}","public void setHazelcastSession(HazelcastHttpSession hazelcastSession,String requestedSessionId){
  this.hazelcastSession=hazelcastSession;
  this.clusteredSessionId=requestedSessionId;
}",0.9786096256684492
47199,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    resp.sendRedirect(""String_Node_Str"");
    return;
  }
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    HttpSession session=req.getSession(false);
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value.toString());
    return;
  }
  HttpSession session=req.getSession();
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.removeAttribute(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",null);
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.invalidate();
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    List<String> names=Collections.list(session.getAttributeNames());
    String nameList=names.toString();
    resp.getWriter().write(nameList.substring(1,nameList.length() - 1).replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.invalidate();
    session=req.getSession();
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session=req.getSession();
    session.setMaxInactiveInterval(1);
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session=req.getSession();
    resp.getWriter().write(session.isNew() == true ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (req.getRequestURI().contains(""String_Node_Str"")) {
    Enumeration<String> itParams=req.getParameterNames();
    while (itParams.hasMoreElements()) {
      String param=itParams.nextElement();
      Object value=req.getParameter(param);
      session.setAttribute(param,value);
    }
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().contains(""String_Node_Str"")) {
    Enumeration<String> itParams=req.getParameterNames();
    while (itParams.hasMoreElements()) {
      String param=itParams.nextElement();
      Object value=req.getParameter(param);
      session.setAttribute(param,value);
    }
    resp.getWriter().write(""String_Node_Str"");
  }
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    resp.sendRedirect(""String_Node_Str"");
    return;
  }
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    HttpSession session=req.getSession(false);
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value.toString());
    return;
  }
  HttpSession session=req.getSession();
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.removeAttribute(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",null);
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.invalidate();
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    session=req.getSession();
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    List<String> names=Collections.list(session.getAttributeNames());
    String nameList=names.toString();
    resp.getWriter().write(nameList.substring(1,nameList.length() - 1).replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.invalidate();
    session=req.getSession();
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session=req.getSession();
    session.setMaxInactiveInterval(1);
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session=req.getSession();
    resp.getWriter().write(session.isNew() == true ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (req.getRequestURI().contains(""String_Node_Str"")) {
    Enumeration<String> itParams=req.getParameterNames();
    while (itParams.hasMoreElements()) {
      String param=itParams.nextElement();
      Object value=req.getParameter(param);
      session.setAttribute(param,value);
    }
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().contains(""String_Node_Str"")) {
    Enumeration<String> itParams=req.getParameterNames();
    while (itParams.hasMoreElements()) {
      String param=itParams.nextElement();
      Object value=req.getParameter(param);
      session.setAttribute(param,value);
    }
    resp.getWriter().write(""String_Node_Str"");
  }
}",0.7869203966764943
47200,"/** 
 * Iterates through all bundles to get the available   {@link ScriptEngineFactory} classes
 * @return the names of the available ScriptEngineFactory classes
 * @throws IOException
 */
private List<String> findFactoryCandidates(BundleContext context) throws IOException {
  Bundle[] bundles=context.getBundles();
  List<String> factoryCandidates=new ArrayList<String>();
  for (  Bundle bundle : bundles) {
    if (bundle == null) {
      continue;
    }
    if (""String_Node_Str"".equals(bundle.getSymbolicName())) {
      continue;
    }
    Enumeration urls=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",false);
    if (urls == null) {
      continue;
    }
    while (urls.hasMoreElements()) {
      URL u=(URL)urls.nextElement();
      BufferedReader reader=new BufferedReader(new InputStreamReader(u.openStream(),""String_Node_Str""));
      String line;
      while ((line=reader.readLine()) != null) {
        line=line.trim();
        if (!line.startsWith(""String_Node_Str"") && line.length() > 0) {
          factoryCandidates.add(line);
        }
      }
      reader.close();
    }
  }
  if (isClassDefined(RHINO_SCRIPT_ENGINE_FACTORY)) {
    factoryCandidates.add(RHINO_SCRIPT_ENGINE_FACTORY);
  }
 else   if (isClassDefined(NASHORN_SCRIPT_ENGINE_FACTORY)) {
    factoryCandidates.add(NASHORN_SCRIPT_ENGINE_FACTORY);
  }
 else {
    logger.warning(""String_Node_Str"");
  }
  return factoryCandidates;
}","/** 
 * Iterates through all bundles to get the available   {@link ScriptEngineFactory} classes
 * @return the names of the available ScriptEngineFactory classes
 * @throws IOException
 */
private List<String> findFactoryCandidates(BundleContext context) throws IOException {
  Bundle[] bundles=context.getBundles();
  List<String> factoryCandidates=new ArrayList<String>();
  for (  Bundle bundle : bundles) {
    if (bundle == null) {
      continue;
    }
    if (""String_Node_Str"".equals(bundle.getSymbolicName())) {
      continue;
    }
    Enumeration urls=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",false);
    if (urls == null) {
      continue;
    }
    while (urls.hasMoreElements()) {
      URL u=(URL)urls.nextElement();
      BufferedReader reader=new BufferedReader(new InputStreamReader(u.openStream(),""String_Node_Str""));
      String line;
      while ((line=reader.readLine()) != null) {
        line=line.trim();
        if (!line.startsWith(""String_Node_Str"") && line.length() > 0) {
          factoryCandidates.add(line);
        }
      }
      reader.close();
    }
  }
  addJavaScriptEngine(factoryCandidates);
  return factoryCandidates;
}",0.881199538638985
47201,"/** 
 * Tries to load the given class.
 * @param className Name of the class to load
 * @return Loaded class
 * @throws ClassNotFoundException when the class is not found
 */
private static Class<?> tryLoadClass(String className) throws ClassNotFoundException {
  try {
    return Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    return Thread.currentThread().getContextClassLoader().loadClass(className);
  }
}","/** 
 * Tries to load the given class.
 * @param className Name of the class to load
 * @return Loaded class
 * @throws ClassNotFoundException when the class is not found
 */
private static Class<?> tryLoadClass(String className) throws ClassNotFoundException {
  try {
    return Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    return contextClassLoader.loadClass(className);
  }
}",0.9252437703141928
47202,"private boolean isJoinRequestFromAnExistingMember(JoinRequest joinRequest,Connection connection){
  MemberImpl member=getMember(joinRequest.getAddress());
  if (member == null) {
    return false;
  }
  Address target=member.getAddress();
  if (joinRequest.getUuid().equals(member.getUuid())) {
    if (node.isMaster()) {
      if (logger.isFinestEnabled()) {
        String message=""String_Node_Str"" + joinRequest;
        logger.finest(message);
      }
      final Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      final PostJoinOperation postJoinOp=postJoinOps != null && postJoinOps.length > 0 ? new PostJoinOperation(postJoinOps) : null;
      Operation op=new FinalizeJoinOperation(createMemberInfos(getMemberList()),postJoinOp,getClusterTime(),false);
      nodeEngine.getOperationService().send(op,target);
    }
 else {
      sendMasterAnswer(target);
    }
    return true;
  }
  if (node.isMaster() || target.equals(node.getMasterAddress())) {
    logger.warning(""String_Node_Str"" + member + ""String_Node_Str"");
    doRemoveAddress(target,false);
    Connection existing=node.connectionManager.getConnection(target);
    if (existing != connection) {
      node.connectionManager.destroyConnection(existing);
      node.connectionManager.registerConnection(target,connection);
    }
    return false;
  }
  return true;
}","private boolean isJoinRequestFromAnExistingMember(JoinRequest joinRequest,Connection connection){
  MemberImpl member=getMember(joinRequest.getAddress());
  if (member == null) {
    return false;
  }
  Address target=member.getAddress();
  if (joinRequest.getUuid().equals(member.getUuid())) {
    if (node.isMaster()) {
      if (logger.isFinestEnabled()) {
        String message=""String_Node_Str"" + joinRequest;
        logger.finest(message);
      }
      final Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      final PostJoinOperation postJoinOp=postJoinOps != null && postJoinOps.length > 0 ? new PostJoinOperation(postJoinOps) : null;
      Operation op=new FinalizeJoinOperation(createMemberInfoList(getMemberList()),postJoinOp,getClusterTime(),false);
      nodeEngine.getOperationService().send(op,target);
    }
 else {
      sendMasterAnswer(target);
    }
    return true;
  }
  if (node.isMaster() || target.equals(node.getMasterAddress())) {
    logger.warning(""String_Node_Str"" + member + ""String_Node_Str"");
    doRemoveAddress(target,false);
    Connection existing=node.connectionManager.getConnection(target);
    if (existing != connection) {
      node.connectionManager.destroyConnection(existing);
      node.connectionManager.registerConnection(target,connection);
    }
    return false;
  }
  return true;
}",0.998148833765272
47203,"private void startJoin(){
  logger.finest(""String_Node_Str"");
  lock.lock();
  try {
    try {
      joinInProgress=true;
      node.getPartitionService().pauseMigration();
      final Collection<MemberImpl> members=getMemberList();
      final Collection<MemberInfo> memberInfos=createMemberInfos(members);
      for (      MemberInfo memberJoining : setJoins) {
        memberInfos.add(memberJoining);
      }
      final long time=getClusterTime();
      final Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      final PostJoinOperation postJoinOp=postJoinOps != null && postJoinOps.length > 0 ? new PostJoinOperation(postJoinOps) : null;
      final int count=members.size() - 1 + setJoins.size();
      final List<Future> calls=new ArrayList<Future>(count);
      for (      MemberInfo member : setJoins) {
        calls.add(invokeClusterOperation(new FinalizeJoinOperation(memberInfos,postJoinOp,time),member.getAddress()));
      }
      for (      MemberImpl member : members) {
        if (!member.getAddress().equals(thisAddress)) {
          calls.add(invokeClusterOperation(new MemberInfoUpdateOperation(memberInfos,time,true),member.getAddress()));
        }
      }
      updateMembers(memberInfos);
      int timeout=Math.min(calls.size() * FINALIZE_JOIN_TIMEOUT_FACTOR,FINALIZE_JOIN_MAX_TIMEOUT);
      waitWithDeadline(calls,timeout,TimeUnit.SECONDS,whileFinalizeJoinsExceptionHandler);
    }
  finally {
      node.getPartitionService().resumeMigration();
    }
  }
  finally {
    lock.unlock();
  }
}","private void startJoin(){
  logger.finest(""String_Node_Str"");
  lock.lock();
  try {
    try {
      joinInProgress=true;
      node.getPartitionService().pauseMigration();
      final Collection<MemberImpl> members=getMemberList();
      final Collection<MemberInfo> memberInfos=createMemberInfoList(members);
      for (      MemberInfo memberJoining : setJoins) {
        memberInfos.add(memberJoining);
      }
      final long time=getClusterTime();
      final Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      final PostJoinOperation postJoinOp=postJoinOps != null && postJoinOps.length > 0 ? new PostJoinOperation(postJoinOps) : null;
      final int count=members.size() - 1 + setJoins.size();
      final List<Future> calls=new ArrayList<Future>(count);
      for (      MemberInfo member : setJoins) {
        calls.add(invokeClusterOperation(new FinalizeJoinOperation(memberInfos,postJoinOp,time),member.getAddress()));
      }
      for (      MemberImpl member : members) {
        if (!member.getAddress().equals(thisAddress)) {
          calls.add(invokeClusterOperation(new MemberInfoUpdateOperation(memberInfos,time,true),member.getAddress()));
        }
      }
      updateMembers(memberInfos);
      int timeout=Math.min(calls.size() * FINALIZE_JOIN_TIMEOUT_FACTOR,FINALIZE_JOIN_MAX_TIMEOUT);
      waitWithDeadline(calls,timeout,TimeUnit.SECONDS,whileFinalizeJoinsExceptionHandler);
    }
  finally {
      node.getPartitionService().resumeMigration();
    }
  }
  finally {
    lock.unlock();
  }
}",0.9983718658417452
47204,"private void sendMemberListToOthers(){
  if (!isMaster()) {
    return;
  }
  final Collection<MemberImpl> members=getMemberList();
  MemberInfoUpdateOperation op=new MemberInfoUpdateOperation(createMemberInfos(members),getClusterTime(),false);
  for (  MemberImpl member : members) {
    if (member.equals(thisMember)) {
      continue;
    }
    nodeEngine.getOperationService().send(op,member.getAddress());
  }
}","private void sendMemberListToOthers(){
  if (!isMaster()) {
    return;
  }
  final Collection<MemberImpl> members=getMemberList();
  MemberInfoUpdateOperation op=new MemberInfoUpdateOperation(createMemberInfoList(members),getClusterTime(),false);
  for (  MemberImpl member : members) {
    if (member.equals(thisMember)) {
      continue;
    }
    nodeEngine.getOperationService().send(op,member.getAddress());
  }
}",0.994011976047904
47205,"public void updateMembers(Collection<MemberInfo> members){
  lock.lock();
  try {
    Map<Address,MemberImpl> oldMemberMap=membersMapRef.get();
    if (oldMemberMap.size() == members.size()) {
      boolean same=true;
      for (      MemberInfo memberInfo : members) {
        MemberImpl member=oldMemberMap.get(memberInfo.getAddress());
        if (member == null || !member.getUuid().equals(memberInfo.getUuid())) {
          same=false;
          break;
        }
      }
      if (same) {
        logger.finest(""String_Node_Str"");
        return;
      }
    }
    MemberImpl[] newMembers=new MemberImpl[members.size()];
    int k=0;
    for (    MemberInfo memberInfo : members) {
      MemberImpl member=oldMemberMap.get(memberInfo.getAddress());
      if (member == null) {
        member=createMember(memberInfo.getAddress(),memberInfo.getUuid(),thisAddress.getScopeId(),memberInfo.getAttributes());
      }
      newMembers[k++]=member;
      member.didRead();
    }
    setMembers(newMembers);
    if (!getMemberList().contains(thisMember)) {
      throw new HazelcastException(""String_Node_Str"");
    }
    joinReset();
    heartBeater();
    node.setJoined();
    logger.info(membersString());
  }
  finally {
    lock.unlock();
  }
}","public void updateMembers(Collection<MemberInfo> members){
  lock.lock();
  try {
    Map<Address,MemberImpl> currentMemberMap=membersMapRef.get();
    if (!shouldProcessMemberUpdate(currentMemberMap,members)) {
      return;
    }
    MemberImpl[] newMembers=new MemberImpl[members.size()];
    int k=0;
    for (    MemberInfo memberInfo : members) {
      MemberImpl member=currentMemberMap.get(memberInfo.getAddress());
      if (member == null) {
        member=createMember(memberInfo.getAddress(),memberInfo.getUuid(),thisAddress.getScopeId(),memberInfo.getAttributes());
      }
      newMembers[k++]=member;
      member.didRead();
    }
    setMembers(newMembers);
    if (!getMemberList().contains(thisMember)) {
      throw new HazelcastException(""String_Node_Str"");
    }
    joinReset();
    heartBeater();
    node.setJoined();
    logger.info(membersString());
  }
  finally {
    lock.unlock();
  }
}",0.7809611829944547
47206,"SerializationServiceImpl(InputOutputFactory inputOutputFactory,int version,ClassLoader classLoader,Map<Integer,? extends DataSerializableFactory> dataSerializableFactories,Map<Integer,? extends PortableFactory> portableFactories,Collection<ClassDefinition> classDefinitions,boolean checkClassDefErrors,ManagedContext managedContext,PartitioningStrategy partitionStrategy,int initialOutputBufferSize,boolean enableCompression,boolean enableSharedObject){
  this.inputOutputFactory=inputOutputFactory;
  this.classLoader=classLoader;
  this.managedContext=managedContext;
  this.globalPartitioningStrategy=partitionStrategy;
  this.outputBufferSize=initialOutputBufferSize;
  dataOutputQueue=new ThreadLocalOutputCache(this);
  PortableHookLoader loader=new PortableHookLoader(portableFactories,classLoader);
  portableContext=new PortableContextImpl(this,version);
  for (  ClassDefinition cd : loader.getDefinitions()) {
    portableContext.registerClassDefinition(cd);
  }
  dataSerializerAdapter=createSerializerAdapter(new DataSerializer(dataSerializableFactories,classLoader));
  portableSerializer=new PortableSerializer(portableContext,loader.getFactories());
  portableSerializerAdapter=createSerializerAdapter(portableSerializer);
  registerConstantSerializers();
  registerJvmTypeSerializers(enableCompression,enableSharedObject);
  registerClassDefinitions(classDefinitions,checkClassDefErrors);
}","SerializationServiceImpl(InputOutputFactory inputOutputFactory,int version,ClassLoader classLoader,Map<Integer,? extends DataSerializableFactory> dataSerializableFactories,Map<Integer,? extends PortableFactory> portableFactories,Collection<ClassDefinition> classDefinitions,boolean checkClassDefErrors,ManagedContext managedContext,PartitioningStrategy partitionStrategy,int initialOutputBufferSize,boolean enableCompression,boolean enableSharedObject){
  this.inputOutputFactory=inputOutputFactory;
  this.classLoader=classLoader;
  this.managedContext=managedContext;
  this.globalPartitioningStrategy=partitionStrategy;
  this.outputBufferSize=initialOutputBufferSize;
  this.overrideCustomSerialization=parseBoolean(System.getProperty(SERIALIZATION_CUSTOM_OVERRIDE,""String_Node_Str""));
  dataOutputQueue=new ThreadLocalOutputCache(this);
  PortableHookLoader loader=new PortableHookLoader(portableFactories,classLoader);
  portableContext=new PortableContextImpl(this,version);
  for (  ClassDefinition cd : loader.getDefinitions()) {
    portableContext.registerClassDefinition(cd);
  }
  dataSerializerAdapter=createSerializerAdapter(new DataSerializer(dataSerializableFactories,classLoader));
  portableSerializer=new PortableSerializer(portableContext,loader.getFactories());
  portableSerializerAdapter=createSerializerAdapter(portableSerializer);
  registerConstantSerializers();
  registerJvmTypeSerializers(enableCompression,enableSharedObject);
  registerClassDefinitions(classDefinitions,checkClassDefErrors);
}",0.9597544338335608
47207,"private boolean isJoinRequestFromAnExistingMember(JoinRequest joinRequest,Connection connection){
  MemberImpl member=getMember(joinRequest.getAddress());
  if (member == null) {
    return false;
  }
  Address target=member.getAddress();
  if (joinRequest.getUuid().equals(member.getUuid())) {
    if (node.isMaster()) {
      if (logger.isFinestEnabled()) {
        String message=""String_Node_Str"" + joinRequest;
        logger.finest(message);
      }
      final Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      final PostJoinOperation postJoinOp=postJoinOps != null && postJoinOps.length > 0 ? new PostJoinOperation(postJoinOps) : null;
      Operation op=new FinalizeJoinOperation(createMemberInfos(getMemberList()),postJoinOp,clusterClock.getClusterTime(),false);
      nodeEngine.getOperationService().send(op,target);
    }
 else {
      sendMasterAnswer(target);
    }
    return true;
  }
  if (node.isMaster() || target.equals(node.getMasterAddress())) {
    logger.warning(""String_Node_Str"" + member + ""String_Node_Str"");
    doRemoveAddress(target,false);
    Connection existing=node.connectionManager.getConnection(target);
    if (existing != connection) {
      node.connectionManager.destroyConnection(existing);
      node.connectionManager.registerConnection(target,connection);
    }
    return false;
  }
  return true;
}","private boolean isJoinRequestFromAnExistingMember(JoinRequest joinRequest,Connection connection){
  MemberImpl member=getMember(joinRequest.getAddress());
  if (member == null) {
    return false;
  }
  Address target=member.getAddress();
  if (joinRequest.getUuid().equals(member.getUuid())) {
    if (node.isMaster()) {
      if (logger.isFinestEnabled()) {
        String message=""String_Node_Str"" + joinRequest;
        logger.finest(message);
      }
      final Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      final PostJoinOperation postJoinOp=postJoinOps != null && postJoinOps.length > 0 ? new PostJoinOperation(postJoinOps) : null;
      Operation op=new FinalizeJoinOperation(createMemberInfoList(getMemberList()),postJoinOp,clusterClock.getClusterTime(),false);
      nodeEngine.getOperationService().send(op,target);
    }
 else {
      sendMasterAnswer(target);
    }
    return true;
  }
  if (node.isMaster() || target.equals(node.getMasterAddress())) {
    logger.warning(""String_Node_Str"" + member + ""String_Node_Str"");
    doRemoveAddress(target,false);
    Connection existing=node.connectionManager.getConnection(target);
    if (existing != connection) {
      node.connectionManager.destroyConnection(existing);
      node.connectionManager.registerConnection(target,connection);
    }
    return false;
  }
  return true;
}",0.998166483314998
47208,"private void startJoin(){
  logger.finest(""String_Node_Str"");
  lock.lock();
  try {
    try {
      joinInProgress=true;
      node.getPartitionService().pauseMigration();
      final Collection<MemberImpl> members=getMemberList();
      final Collection<MemberInfo> memberInfos=createMemberInfos(members);
      for (      MemberInfo memberJoining : setJoins) {
        memberInfos.add(memberJoining);
      }
      final long time=clusterClock.getClusterTime();
      final Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      final PostJoinOperation postJoinOp=postJoinOps != null && postJoinOps.length > 0 ? new PostJoinOperation(postJoinOps) : null;
      final int count=members.size() - 1 + setJoins.size();
      final List<Future> calls=new ArrayList<Future>(count);
      for (      MemberInfo member : setJoins) {
        final long startTime=clusterClock.getClusterStartTime();
        calls.add(invokeClusterOperation(new FinalizeJoinOperation(memberInfos,postJoinOp,time,clusterId,startTime),member.getAddress()));
      }
      for (      MemberImpl member : members) {
        if (!member.getAddress().equals(thisAddress)) {
          calls.add(invokeClusterOperation(new MemberInfoUpdateOperation(memberInfos,time,true),member.getAddress()));
        }
      }
      updateMembers(memberInfos);
      int timeout=Math.min(calls.size() * FINALIZE_JOIN_TIMEOUT_FACTOR,FINALIZE_JOIN_MAX_TIMEOUT);
      waitWithDeadline(calls,timeout,TimeUnit.SECONDS,whileFinalizeJoinsExceptionHandler);
    }
  finally {
      node.getPartitionService().resumeMigration();
    }
  }
  finally {
    lock.unlock();
  }
}","private void startJoin(){
  logger.finest(""String_Node_Str"");
  lock.lock();
  try {
    try {
      joinInProgress=true;
      node.getPartitionService().pauseMigration();
      final Collection<MemberImpl> members=getMemberList();
      final Collection<MemberInfo> memberInfos=createMemberInfoList(members);
      for (      MemberInfo memberJoining : setJoins) {
        memberInfos.add(memberJoining);
      }
      final long time=clusterClock.getClusterTime();
      final Operation[] postJoinOps=nodeEngine.getPostJoinOperations();
      final PostJoinOperation postJoinOp=postJoinOps != null && postJoinOps.length > 0 ? new PostJoinOperation(postJoinOps) : null;
      final int count=members.size() - 1 + setJoins.size();
      final List<Future> calls=new ArrayList<Future>(count);
      for (      MemberInfo member : setJoins) {
        final long startTime=clusterClock.getClusterStartTime();
        calls.add(invokeClusterOperation(new FinalizeJoinOperation(memberInfos,postJoinOp,time,clusterId,startTime),member.getAddress()));
      }
      for (      MemberImpl member : members) {
        if (!member.getAddress().equals(thisAddress)) {
          calls.add(invokeClusterOperation(new MemberInfoUpdateOperation(memberInfos,time,true),member.getAddress()));
        }
      }
      updateMembers(memberInfos);
      int timeout=Math.min(calls.size() * FINALIZE_JOIN_TIMEOUT_FACTOR,FINALIZE_JOIN_MAX_TIMEOUT);
      waitWithDeadline(calls,timeout,TimeUnit.SECONDS,whileFinalizeJoinsExceptionHandler);
    }
  finally {
      node.getPartitionService().resumeMigration();
    }
  }
  finally {
    lock.unlock();
  }
}",0.9984695439240894
47209,"private void sendMemberListToOthers(){
  if (!isMaster()) {
    return;
  }
  final Collection<MemberImpl> members=getMemberList();
  MemberInfoUpdateOperation op=new MemberInfoUpdateOperation(createMemberInfos(members),clusterClock.getClusterTime(),false);
  for (  MemberImpl member : members) {
    if (member.equals(thisMember)) {
      continue;
    }
    nodeEngine.getOperationService().send(op,member.getAddress());
  }
}","private void sendMemberListToOthers(){
  if (!isMaster()) {
    return;
  }
  final Collection<MemberImpl> members=getMemberList();
  MemberInfoUpdateOperation op=new MemberInfoUpdateOperation(createMemberInfoList(members),clusterClock.getClusterTime(),false);
  for (  MemberImpl member : members) {
    if (member.equals(thisMember)) {
      continue;
    }
    nodeEngine.getOperationService().send(op,member.getAddress());
  }
}",0.994192799070848
47210,"public void updateMembers(Collection<MemberInfo> members){
  lock.lock();
  try {
    Map<Address,MemberImpl> oldMemberMap=membersMapRef.get();
    if (oldMemberMap.size() == members.size()) {
      boolean same=true;
      for (      MemberInfo memberInfo : members) {
        MemberImpl member=oldMemberMap.get(memberInfo.getAddress());
        if (member == null || !member.getUuid().equals(memberInfo.getUuid())) {
          same=false;
          break;
        }
      }
      if (same) {
        logger.finest(""String_Node_Str"");
        return;
      }
    }
    MemberImpl[] newMembers=new MemberImpl[members.size()];
    int k=0;
    for (    MemberInfo memberInfo : members) {
      MemberImpl member=oldMemberMap.get(memberInfo.getAddress());
      if (member == null) {
        member=createMember(memberInfo.getAddress(),memberInfo.getUuid(),thisAddress.getScopeId(),memberInfo.getAttributes());
      }
      newMembers[k++]=member;
      member.didRead();
    }
    setMembers(newMembers);
    if (!getMemberList().contains(thisMember)) {
      throw new HazelcastException(""String_Node_Str"");
    }
    joinReset();
    heartBeater();
    node.setJoined();
    logger.info(membersString());
  }
  finally {
    lock.unlock();
  }
}","public void updateMembers(Collection<MemberInfo> members){
  lock.lock();
  try {
    Map<Address,MemberImpl> currentMemberMap=membersMapRef.get();
    if (!shouldProcessMemberUpdate(currentMemberMap,members)) {
      return;
    }
    MemberImpl[] newMembers=new MemberImpl[members.size()];
    int k=0;
    for (    MemberInfo memberInfo : members) {
      MemberImpl member=currentMemberMap.get(memberInfo.getAddress());
      if (member == null) {
        member=createMember(memberInfo.getAddress(),memberInfo.getUuid(),thisAddress.getScopeId(),memberInfo.getAttributes());
      }
      newMembers[k++]=member;
      member.didRead();
    }
    setMembers(newMembers);
    if (!getMemberList().contains(thisMember)) {
      throw new HazelcastException(""String_Node_Str"");
    }
    joinReset();
    heartBeater();
    node.setJoined();
    logger.info(membersString());
  }
  finally {
    lock.unlock();
  }
}",0.7809611829944547
47211,"SerializationServiceImpl(InputOutputFactory inputOutputFactory,int version,ClassLoader classLoader,Map<Integer,? extends DataSerializableFactory> dataSerializableFactories,Map<Integer,? extends PortableFactory> portableFactories,Collection<ClassDefinition> classDefinitions,boolean checkClassDefErrors,ManagedContext managedContext,PartitioningStrategy partitionStrategy,int initialOutputBufferSize,boolean enableCompression,boolean enableSharedObject){
  this.inputOutputFactory=inputOutputFactory;
  this.classLoader=classLoader;
  this.managedContext=managedContext;
  this.globalPartitioningStrategy=partitionStrategy;
  this.outputBufferSize=initialOutputBufferSize;
  dataOutputQueue=new ThreadLocalOutputCache(this);
  PortableHookLoader loader=new PortableHookLoader(portableFactories,classLoader);
  portableContext=new PortableContextImpl(this,version);
  for (  ClassDefinition cd : loader.getDefinitions()) {
    portableContext.registerClassDefinition(cd);
  }
  dataSerializerAdapter=createSerializerAdapter(new DataSerializer(dataSerializableFactories,classLoader));
  portableSerializer=new PortableSerializer(portableContext,loader.getFactories());
  portableSerializerAdapter=createSerializerAdapter(portableSerializer);
  registerConstantSerializers();
  registerJvmTypeSerializers(enableCompression,enableSharedObject);
  registerClassDefinitions(classDefinitions,checkClassDefErrors);
}","SerializationServiceImpl(InputOutputFactory inputOutputFactory,int version,ClassLoader classLoader,Map<Integer,? extends DataSerializableFactory> dataSerializableFactories,Map<Integer,? extends PortableFactory> portableFactories,Collection<ClassDefinition> classDefinitions,boolean checkClassDefErrors,ManagedContext managedContext,PartitioningStrategy partitionStrategy,int initialOutputBufferSize,boolean enableCompression,boolean enableSharedObject){
  this.inputOutputFactory=inputOutputFactory;
  this.classLoader=classLoader;
  this.managedContext=managedContext;
  this.globalPartitioningStrategy=partitionStrategy;
  this.outputBufferSize=initialOutputBufferSize;
  this.overrideCustomSerialization=parseBoolean(System.getProperty(SERIALIZATION_CUSTOM_OVERRIDE,""String_Node_Str""));
  dataOutputQueue=new ThreadLocalOutputCache(this);
  PortableHookLoader loader=new PortableHookLoader(portableFactories,classLoader);
  portableContext=new PortableContextImpl(this,version);
  for (  ClassDefinition cd : loader.getDefinitions()) {
    portableContext.registerClassDefinition(cd);
  }
  dataSerializerAdapter=createSerializerAdapter(new DataSerializer(dataSerializableFactories,classLoader));
  portableSerializer=new PortableSerializer(portableContext,loader.getFactories());
  portableSerializerAdapter=createSerializerAdapter(portableSerializer);
  registerConstantSerializers();
  registerJvmTypeSerializers(enableCompression,enableSharedObject);
  registerClassDefinitions(classDefinitions,checkClassDefErrors);
}",0.9597544338335608
47212,"private V getResult(){
  if (defaultValue != null) {
    return defaultValue;
  }
  return deserializedValue;
}","private V getResult(){
  if (defaultValue != null) {
    return defaultValue;
  }
  if (deserializedValue != null) {
    return deserializedValue;
  }
 else {
    if (valueData != null) {
      deserializedValue=serializationService.toObject(valueData);
    }
    return deserializedValue;
  }
}",0.4137931034482758
47213,"private Object handleAuthenticated(){
  if (isOwnerConnection()) {
    final String uuid=getUuid();
    final String localMemberUUID=clientEngine.getLocalMember().getUuid();
    principal=new ClientPrincipal(uuid,localMemberUUID);
    reAuthLocal();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    for (    MemberImpl member : members) {
      if (!member.localMember()) {
        ClientReAuthOperation op=new ClientReAuthOperation(uuid);
        op.setCallerUuid(localMemberUUID);
        nodeEngine.getOperationService().send(op,member.getAddress());
      }
    }
  }
  boolean isMember=clientEngine.getClusterService().getMember(principal.getOwnerUuid()) == null;
  if (isMember) {
    throw new AuthenticationException(""String_Node_Str"" + principal.getOwnerUuid() + ""String_Node_Str"");
  }
  endpoint.authenticated(principal,credentials,isOwnerConnection());
  endpointManager.registerEndpoint(endpoint);
  clientEngine.bind(endpoint);
  final Address thisAddress=clientEngine.getThisAddress();
  return encodeAuth(thisAddress,principal.getUuid(),principal.getOwnerUuid());
}","private Object handleAuthenticated(){
  if (isOwnerConnection()) {
    final String uuid=getUuid();
    final String localMemberUUID=clientEngine.getLocalMember().getUuid();
    principal=new ClientPrincipal(uuid,localMemberUUID);
    reAuthLocal();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    for (    MemberImpl member : members) {
      if (!member.localMember()) {
        ClientReAuthOperation op=new ClientReAuthOperation(uuid);
        op.setCallerUuid(localMemberUUID);
        nodeEngine.getOperationService().send(op,member.getAddress());
      }
    }
  }
  boolean isNotMember=clientEngine.getClusterService().getMember(principal.getOwnerUuid()) == null;
  if (isNotMember) {
    throw new AuthenticationException(""String_Node_Str"" + principal.getOwnerUuid() + ""String_Node_Str"");
  }
  endpoint.authenticated(principal,credentials,isOwnerConnection());
  endpointManager.registerEndpoint(endpoint);
  clientEngine.bind(endpoint);
  final Address thisAddress=clientEngine.getThisAddress();
  return encodeAuth(thisAddress,principal.getUuid(),principal.getOwnerUuid());
}",0.997326203208556
47214,"@Override protected Object call() throws Exception {
  ReplicatedMapService replicatedMapService=getService(ReplicatedMapService.SERVICE_NAME);
  ReplicatedRecordStore recordStore=replicatedMapService.getReplicatedRecordStore(parameters.name,true);
  return recordStore.containsKey(parameters.key);
}","@Override protected Object call() throws Exception {
  ReplicatedMapService replicatedMapService=getService(ReplicatedMapService.SERVICE_NAME);
  ReplicatedRecordStore recordStore=replicatedMapService.getReplicatedRecordStore(parameters.name,true);
  return recordStore.containsKey(serializationService.toObject(parameters.key));
}",0.9508716323296356
47215,"@Override protected Object call() throws Exception {
  ReplicatedMapService replicatedMapService=getService(ReplicatedMapService.SERVICE_NAME);
  ReplicatedRecordStore recordStore=replicatedMapService.getReplicatedRecordStore(parameters.name,true);
  return recordStore.containsValue(parameters.value);
}","@Override protected Object call() throws Exception {
  ReplicatedMapService replicatedMapService=getService(ReplicatedMapService.SERVICE_NAME);
  ReplicatedRecordStore recordStore=replicatedMapService.getReplicatedRecordStore(parameters.name,true);
  return recordStore.containsValue(serializationService.toObject(parameters.value));
}",0.9514866979655712
47216,"@Override protected Object call() throws Exception {
  ReplicatedMapService replicatedMapService=getService(ReplicatedMapService.SERVICE_NAME);
  ReplicatedRecordStore recordStore=replicatedMapService.getReplicatedRecordStore(parameters.name,true);
  Object returnValue=recordStore.put(parameters.key,parameters.value,parameters.ttl,TimeUnit.MILLISECONDS);
  return serializationService.toData(returnValue);
}","@Override protected Object call() throws Exception {
  ReplicatedMapService replicatedMapService=getService(ReplicatedMapService.SERVICE_NAME);
  ReplicatedRecordStore recordStore=replicatedMapService.getReplicatedRecordStore(parameters.name,true);
  Object returnValue=recordStore.put(serializationService.toObject(parameters.key),serializationService.toObject(parameters.value),parameters.ttl,TimeUnit.MILLISECONDS);
  return serializationService.toData(returnValue);
}",0.8931818181818182
47217,"@Override protected Object call() throws Exception {
  ReplicatedMapService replicatedMapService=getService(ReplicatedMapService.SERVICE_NAME);
  ReplicatedRecordStore recordStore=replicatedMapService.getReplicatedRecordStore(parameters.name,true);
  Object returnValue=recordStore.remove(parameters.key);
  return serializationService.toData(returnValue);
}","@Override protected Object call() throws Exception {
  ReplicatedMapService replicatedMapService=getService(ReplicatedMapService.SERVICE_NAME);
  ReplicatedRecordStore recordStore=replicatedMapService.getReplicatedRecordStore(parameters.name,true);
  Object returnValue=recordStore.remove(serializationService.toObject(parameters.key));
  return serializationService.toData(returnValue);
}",0.9585006693440428
47218,"/** 
 * Sends an invalidation event for given <code>cacheName</code> with specified <code>key</code> from mentioned source with <code>sourceUuid</code>.
 * @param name       the name of the cache that invalidation event is sent for
 * @param key        the {@link Data} represents the invalidation event
 * @param sourceUuid an id that represents the source for invalidation event
 */
@Override public void sendInvalidationEvent(String name,Data key,String sourceUuid){
  if (key == null) {
    sendSingleInvalidationEvent(name,key,sourceUuid);
  }
 else {
    if (invalidationMessageBatchEnabled) {
      sendBatchInvalidationEvent(name,key,sourceUuid);
    }
 else {
      sendSingleInvalidationEvent(name,key,sourceUuid);
    }
  }
}","/** 
 * Sends an invalidation event for given <code>cacheName</code> with specified <code>key</code> from mentioned source with <code>sourceUuid</code>.
 * @param name       the name of the cache that invalidation event is sent for
 * @param key        the {@link Data} represents the invalidation event
 * @param sourceUuid an id that represents the source for invalidation event
 */
@Override public void sendInvalidationEvent(String name,Data key,String sourceUuid){
  if (key == null) {
    sendSingleInvalidationEvent(name,null,sourceUuid);
  }
 else {
    if (invalidationMessageBatchEnabled) {
      sendBatchInvalidationEvent(name,key,sourceUuid);
    }
 else {
      sendSingleInvalidationEvent(name,key,sourceUuid);
    }
  }
}",0.8323150033944331
47219,"/** 
 * It may be useful to use this   {@code init} method in some cases that same instance of this class can be usedinstead of creating a new one for every iteration when scanning large data sets, for example: <pre> <code>Predicate predicate = ... QueryEntry entry = new QueryEntry() for(i == 0; i < HUGE_NUMBER; i++) { entry.init(...) boolean valid = predicate.apply(queryEntry); if(valid) { .... } } </code> </pre>
 */
public void init(SerializationService serializationService,Data indexKey,Object key,Object value){
  if (indexKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.indexKey=indexKey;
  this.serializationService=serializationService;
  if (key instanceof Data) {
    this.keyData=(Data)key;
  }
 else {
    this.keyObject=key;
  }
  if (value instanceof Data) {
    this.valueData=(Data)value;
  }
 else {
    this.valueObject=value;
  }
}","/** 
 * It may be useful to use this   {@code init} method in some cases that same instance of this class can be usedinstead of creating a new one for every iteration when scanning large data sets, for example: <pre> <code>Predicate predicate = ... QueryEntry entry = new QueryEntry() for(i == 0; i < HUGE_NUMBER; i++) { entry.init(...) boolean valid = predicate.apply(queryEntry); if(valid) { .... } } </code> </pre>
 */
public void init(SerializationService serializationService,Data indexKey,Object key,Object value){
  if (indexKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.indexKey=indexKey;
  this.serializationService=serializationService;
  keyData=null;
  keyObject=null;
  if (key instanceof Data) {
    this.keyData=(Data)key;
  }
 else {
    this.keyObject=key;
  }
  valueData=null;
  valueObject=null;
  if (value instanceof Data) {
    this.valueData=(Data)value;
  }
 else {
    this.valueObject=value;
  }
}",0.8160237388724035
47220,"public void handleCache(Node node){
  BeanDefinitionBuilder cacheConfigBuilder=createBeanBuilder(CacheSimpleConfig.class);
  final Node attName=node.getAttributes().getNamedItem(""String_Node_Str"");
  final String name=getTextContent(attName);
  fillAttributeValues(node,cacheConfigBuilder);
  for (  Node childNode : new IterableNodeList(node.getChildNodes(),Node.ELEMENT_NODE)) {
    if (""String_Node_Str"".equals(cleanNodeName(childNode))) {
      cacheConfigBuilder.addPropertyValue(""String_Node_Str"",getEvictionConfig(childNode));
    }
 else     if (""String_Node_Str"".equals(cleanNodeName(childNode))) {
      ManagedList listeners=new ManagedList();
      for (      Node listenerNode : new IterableNodeList(childNode.getChildNodes(),Node.ELEMENT_NODE)) {
        final BeanDefinitionBuilder listenerConfBuilder=createBeanBuilder(CacheSimpleEntryListenerConfig.class);
        fillAttributeValues(listenerNode,listenerConfBuilder);
        listeners.add(listenerConfBuilder.getBeanDefinition());
      }
      cacheConfigBuilder.addPropertyValue(""String_Node_Str"",listeners);
    }
 else     if (""String_Node_Str"".equals(cleanNodeName(childNode))) {
      final BeanDefinitionBuilder wanReplicationRefBuilder=createBeanBuilder(WanReplicationRef.class);
      final AbstractBeanDefinition wanReplicationRefBeanDefinition=wanReplicationRefBuilder.getBeanDefinition();
      fillValues(childNode,wanReplicationRefBuilder);
      cacheConfigBuilder.addPropertyValue(""String_Node_Str"",wanReplicationRefBeanDefinition);
    }
  }
  cacheConfigManagedMap.put(name,cacheConfigBuilder.getBeanDefinition());
}","public void handleCache(Node node){
  BeanDefinitionBuilder cacheConfigBuilder=createBeanBuilder(CacheSimpleConfig.class);
  final Node attName=node.getAttributes().getNamedItem(""String_Node_Str"");
  final String name=getTextContent(attName);
  fillAttributeValues(node,cacheConfigBuilder);
  for (  Node childNode : new IterableNodeList(node.getChildNodes(),Node.ELEMENT_NODE)) {
    if (""String_Node_Str"".equals(cleanNodeName(childNode))) {
      cacheConfigBuilder.addPropertyValue(""String_Node_Str"",getEvictionConfig(childNode));
    }
 else     if (""String_Node_Str"".equals(cleanNodeName(childNode))) {
      cacheConfigBuilder.addPropertyValue(""String_Node_Str"",getExpiryPolicyFactoryConfig(childNode));
    }
 else     if (""String_Node_Str"".equals(cleanNodeName(childNode))) {
      ManagedList listeners=new ManagedList();
      for (      Node listenerNode : new IterableNodeList(childNode.getChildNodes(),Node.ELEMENT_NODE)) {
        final BeanDefinitionBuilder listenerConfBuilder=createBeanBuilder(CacheSimpleEntryListenerConfig.class);
        fillAttributeValues(listenerNode,listenerConfBuilder);
        listeners.add(listenerConfBuilder.getBeanDefinition());
      }
      cacheConfigBuilder.addPropertyValue(""String_Node_Str"",listeners);
    }
 else     if (""String_Node_Str"".equals(cleanNodeName(childNode))) {
      final BeanDefinitionBuilder wanReplicationRefBuilder=createBeanBuilder(WanReplicationRef.class);
      final AbstractBeanDefinition wanReplicationRefBeanDefinition=wanReplicationRefBuilder.getBeanDefinition();
      fillValues(childNode,wanReplicationRefBuilder);
      cacheConfigBuilder.addPropertyValue(""String_Node_Str"",wanReplicationRefBeanDefinition);
    }
  }
  cacheConfigManagedMap.put(name,cacheConfigBuilder.getBeanDefinition());
}",0.9479905437352246
47221,"@Override public Map<K,V> getAll(Set<? extends K> keys,ExpiryPolicy expiryPolicy){
  ensureOpen();
  validateNotNull(keys);
  if (keys.isEmpty()) {
    return Collections.EMPTY_MAP;
  }
  final Set<Data> keySet=new HashSet(keys.size());
  for (  K key : keys) {
    final Data k=toData(key);
    keySet.add(k);
  }
  Map<K,V> result=getAllFromNearCache(keySet);
  if (keySet.isEmpty()) {
    return result;
  }
  final CacheGetAllRequest request=new CacheGetAllRequest(nameWithPrefix,keySet,expiryPolicy);
  final MapEntrySet mapEntrySet=toObject(invoke(request));
  final Set<Map.Entry<Data,Data>> entrySet=mapEntrySet.getEntrySet();
  for (  Map.Entry<Data,Data> dataEntry : entrySet) {
    final Data keyData=dataEntry.getKey();
    final Data valueData=dataEntry.getValue();
    final K key=toObject(keyData);
    final V value=toObject(valueData);
    result.put(key,value);
    storeInNearCache(keyData,valueData,value);
  }
  return result;
}","@Override public Map<K,V> getAll(Set<? extends K> keys,ExpiryPolicy expiryPolicy){
  ensureOpen();
  validateNotNull(keys);
  if (keys.isEmpty()) {
    return Collections.EMPTY_MAP;
  }
  final Set<Data> keySet=new HashSet(keys.size());
  for (  K key : keys) {
    final Data k=toData(key);
    keySet.add(k);
  }
  Map<K,V> result=getAllFromNearCache(keySet);
  if (keySet.isEmpty()) {
    return result;
  }
  final Data expiryPolicyData=expiryPolicy != null ? toData(expiryPolicy) : DefaultData.NULL_DATA;
  final ClientMessage request=CacheGetAllParameters.encode(nameWithPrefix,keySet,expiryPolicyData);
  final ClientMessage responseMessage=invoke(request);
  final Map<Data,Data> mapEntrySet=MapDataDataResultParameters.decode(responseMessage).map;
  final Set<Map.Entry<Data,Data>> entrySet=mapEntrySet.entrySet();
  for (  Map.Entry<Data,Data> dataEntry : entrySet) {
    final Data keyData=dataEntry.getKey();
    final Data valueData=dataEntry.getValue();
    final K key=toObject(keyData);
    final V value=toObject(valueData);
    result.put(key,value);
    storeInNearCache(keyData,valueData,value);
  }
  return result;
}",0.5855294681360805
47222,"@Override public ICompletableFuture<V> getAsync(K key,ExpiryPolicy expiryPolicy){
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=nearCache != null ? nearCache.get(keyData) : null;
  if (cached != null && !NearCache.NULL_OBJECT.equals(cached)) {
    return createCompletedFuture(cached);
  }
  CacheGetRequest request=new CacheGetRequest(nameWithPrefix,keyData,expiryPolicy,cacheConfig.getInMemoryFormat());
  ClientInvocationFuture future;
  try {
    final int partitionId=clientContext.getPartitionService().getPartitionId(key);
    final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,request,partitionId);
    future=clientInvocation.invoke();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  SerializationService serializationService=clientContext.getSerializationService();
  ClientDelegatingFuture<V> delegatingFuture=new ClientDelegatingFuture<V>(future,serializationService);
  if (nearCache != null) {
    delegatingFuture.andThenInternal(new ExecutionCallback<Data>(){
      public void onResponse(      Data valueData){
        storeInNearCache(keyData,valueData,null);
      }
      public void onFailure(      Throwable t){
      }
    }
);
  }
  return delegatingFuture;
}","@Override public ICompletableFuture<V> getAsync(K key,ExpiryPolicy expiryPolicy){
}",0.1135430916552667
47223,"@Override public V getAndPut(K key,V value,ExpiryPolicy expiryPolicy){
  final ICompletableFuture<V> f=putAsyncInternal(key,value,expiryPolicy,true,true);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V getAndPut(K key,V value,ExpiryPolicy expiryPolicy){
  final ICompletableFuture<V> f=putAsyncInternal(key,value,expiryPolicy,true,true);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9830508474576272
47224,"@Override public int size(){
  ensureOpen();
  try {
    ClientMessage request=CacheSizeCodec.encodeRequest(nameWithPrefix);
    ClientMessage resultMessage=invoke(request);
    return CacheSizeCodec.decodeResponse(resultMessage).response;
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(t,CacheException.class);
  }
}","@Override public int size(){
}",0.1591511936339522
47225,"public void destroy(){
  close();
  if (!isDestroyed.compareAndSet(false,true)) {
    return;
  }
  isClosed.set(true);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(nameWithPrefix);
    CacheDestroyRequest request=new CacheDestroyRequest(nameWithPrefix,partitionId);
    final ClientInvocation clientInvocation=new ClientInvocation((HazelcastClientInstanceImpl)clientContext.getHazelcastInstance(),request,partitionId);
    clientInvocation.invoke().get();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","public void destroy(){
  close();
  if (!isDestroyed.compareAndSet(false,true)) {
    return;
  }
  isClosed.set(true);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(nameWithPrefix);
    ClientMessage request=CacheDestroyParameters.encode(nameWithPrefix);
    final ClientInvocation clientInvocation=new ClientInvocation((HazelcastClientInstanceImpl)clientContext.getHazelcastInstance(),request,partitionId);
    final Future<ClientMessage> future=clientInvocation.invoke();
    future.get();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.6084701815038893
47226,"protected ClientMessage invoke(ClientMessage clientMessage){
  try {
    final Future<ClientMessage> future=new ClientInvocation((HazelcastClientInstanceImpl)clientContext.getHazelcastInstance(),clientMessage).invoke();
    return future.get();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","protected ClientMessage invoke(ClientMessage clientMessage,Data keyData){
  try {
    if (keyData != null) {
      final int partitionId=clientContext.getPartitionService().getPartitionId(keyData);
      final Future future=new ClientInvocation((HazelcastClientInstanceImpl)clientContext.getHazelcastInstance(),clientMessage,partitionId).invoke();
      return (ClientMessage)future.get();
    }
    final Future<ClientMessage> future=new ClientInvocation((HazelcastClientInstanceImpl)clientContext.getHazelcastInstance(),clientMessage).invoke();
    return future.get();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.6269592476489029
47227,"protected <T>ICompletableFuture<T> invoke(ClientMessage req,Data keyData,boolean completionOperation){
  Integer completionId=null;
  if (completionOperation) {
    completionId=registerCompletionLatch(1);
  }
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(keyData);
    HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,req,partitionId);
    ClientInvocationFuture f=clientInvocation.invoke();
    if (completionOperation) {
      waitCompletionLatch(completionId,f);
    }
    return new ClientDelegatingFuture<T>(f,clientContext.getSerializationService());
  }
 catch (  Throwable e) {
    if (e instanceof IllegalStateException) {
      close();
    }
    if (completionOperation) {
      deregisterCompletionLatch(completionId);
    }
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","protected <T>ICompletableFuture<T> invoke(ClientMessage req,Data keyData,int completionId){
  final boolean completionOperation=completionId != -1;
  if (completionOperation) {
    registerCompletionLatch(completionId,1);
  }
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(keyData);
    HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,req,partitionId);
    ClientInvocationFuture f=clientInvocation.invoke();
    if (completionOperation) {
      waitCompletionLatch(completionId,f);
    }
    return new ClientDelegatingFuture<T>(f,clientContext.getSerializationService());
  }
 catch (  Throwable e) {
    if (e instanceof IllegalStateException) {
      close();
    }
    if (completionOperation) {
      deregisterCompletionLatch(completionId);
    }
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9154786150712833
47228,"protected Integer registerCompletionLatch(int count){
  if (!syncListenerRegistrations.isEmpty()) {
    final int id=completionIdCounter.incrementAndGet();
    int size=syncListenerRegistrations.size();
    CountDownLatch countDownLatch=new CountDownLatch(count * size);
    syncLocks.put(id,countDownLatch);
    return id;
  }
  return MutableOperation.IGNORE_COMPLETION;
}","protected Integer registerCompletionLatch(Integer countDownLatchId,int count){
  if (!syncListenerRegistrations.isEmpty()) {
    int size=syncListenerRegistrations.size();
    CountDownLatch countDownLatch=new CountDownLatch(count * size);
    syncLocks.put(countDownLatchId,countDownLatch);
    return countDownLatchId;
  }
  return MutableOperation.IGNORE_COMPLETION;
}",0.5208053691275167
47229,"protected void removeAllInternal(Set<? extends K> keys){
  final Set<Data> keysData;
  if (keys != null) {
    keysData=new HashSet<Data>();
    for (    K key : keys) {
      keysData.add(toData(key));
    }
  }
 else {
    keysData=null;
  }
  final int partitionCount=clientContext.getPartitionService().getPartitionCount();
  int completionId=registerCompletionLatch(partitionCount);
  ClientMessage request=CacheRemoveAllCodec.encodeRequest(nameWithPrefix,keysData,completionId);
  try {
    invoke(request);
    waitCompletionLatch(completionId,null);
  }
 catch (  Throwable t) {
    deregisterCompletionLatch(completionId);
    throw ExceptionUtil.rethrowAllowedTypeFirst(t,CacheException.class);
  }
}","protected void removeAllInternal(Set<? extends K> keys){
  final Set<Data> keysData;
  if (keys != null) {
    keysData=new HashSet<Data>();
    for (    K key : keys) {
      keysData.add(toData(key));
    }
  }
 else {
    keysData=null;
  }
  final int partitionCount=clientContext.getPartitionService().getPartitionCount();
  final int completionId=nextCompletionId();
  ClientMessage request=CacheRemoveAllCodec.encodeRequest(nameWithPrefix,keysData,completionId);
  try {
    invoke(request);
    waitCompletionLatch(completionId,null);
  }
 catch (  Throwable t) {
    deregisterCompletionLatch(completionId);
    throw ExceptionUtil.rethrowAllowedTypeFirst(t,CacheException.class);
  }
}",0.9565836298932384
47230,"protected <T>ICompletableFuture<T> removeAsyncInternal(K key,V oldValue,boolean hasOldValue,boolean isGet,boolean withCompletionEvent){
  ensureOpen();
  if (hasOldValue) {
    validateNotNull(key,oldValue);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,oldValue);
  }
 else {
    validateNotNull(key);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key);
  }
  final Data keyData=toData(key);
  final Data oldValueData=oldValue != null ? toData(oldValue) : null;
  ClientMessage request;
  if (isGet) {
    request=CacheGetAndRemoveCodec.encodeRequest(nameWithPrefix,keyData);
  }
 else {
    request=CacheRemoveCodec.encodeRequest(nameWithPrefix,keyData,oldValueData);
  }
  ICompletableFuture future;
  try {
    future=invoke(request,keyData,withCompletionEvent);
    invalidateNearCache(keyData);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return future;
}","protected <T>ICompletableFuture<T> removeAsyncInternal(K key,V oldValue,boolean hasOldValue,boolean isGet,boolean withCompletionEvent){
  ensureOpen();
  if (hasOldValue) {
    validateNotNull(key,oldValue);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,oldValue);
  }
 else {
    validateNotNull(key);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key);
  }
  final Data keyData=toData(key);
  final Data oldValueData=oldValue != null ? toData(oldValue) : DefaultData.NULL_DATA;
  final int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request;
  if (isGet) {
    request=CacheGetAndRemoveCodec.encodeRequest(nameWithPrefix,keyData);
  }
 else {
    request=CacheRemoveCodec.encodeRequest(nameWithPrefix,keyData,oldValueData);
  }
  ICompletableFuture future;
  try {
    future=invoke(request,keyData,completionId);
    invalidateNearCache(keyData);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return future;
}",0.9327024185068348
47231,"protected ICompletableFuture<Boolean> putIfAbsentAsyncInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean withCompletionEvent){
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  final Data keyData=toData(key);
  final Data valueData=toData(value);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CachePutIfAbsentCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData);
  ICompletableFuture<Boolean> future;
  try {
    future=invoke(request,keyData,withCompletionEvent);
    if (cacheOnUpdate) {
      storeInNearCache(keyData,valueData,value);
    }
 else {
      invalidateNearCache(keyData);
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return future;
}","protected ICompletableFuture<Boolean> putIfAbsentAsyncInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean withCompletionEvent){
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  final Data keyData=toData(key);
  final Data valueData=toData(value);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CachePutIfAbsentCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData);
  final int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ICompletableFuture<Boolean> future;
  try {
    future=invoke(request,keyData,completionId);
    if (cacheOnUpdate) {
      storeInNearCache(keyData,valueData,value);
    }
 else {
      invalidateNearCache(keyData);
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return future;
}",0.6855081178592904
47232,"protected <T>ICompletableFuture<T> putAsyncInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean isGet,boolean withCompletionEvent){
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  final Data keyData=toData(key);
  final Data valueData=toData(value);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CachePutCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,isGet);
  ICompletableFuture future;
  try {
    future=invoke(request,keyData,withCompletionEvent);
    if (cacheOnUpdate) {
      storeInNearCache(keyData,valueData,value);
    }
 else {
      invalidateNearCache(keyData);
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return future;
}","protected <T>ICompletableFuture<T> putAsyncInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean isGet,boolean withCompletionEvent){
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  final Data keyData=toData(key);
  final Data valueData=toData(value);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CachePutCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,isGet);
  final int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ICompletableFuture future;
  try {
    future=invoke(request,keyData,completionId);
    if (cacheOnUpdate) {
      storeInNearCache(keyData,valueData,value);
    }
 else {
      invalidateNearCache(keyData);
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return new DelegatingFuture<T>(future,clientContext.getSerializationService());
}",0.6565420560747663
47233,"protected <T>ICompletableFuture<T> replaceAsyncInternal(K key,V oldValue,V newValue,ExpiryPolicy expiryPolicy,boolean hasOldValue,boolean isGet,boolean withCompletionEvent){
  ensureOpen();
  if (hasOldValue) {
    validateNotNull(key,oldValue,newValue);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,oldValue,newValue);
  }
 else {
    validateNotNull(key,newValue);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,newValue);
  }
  final Data keyData=toData(key);
  final Data oldValueData=oldValue != null ? toData(oldValue) : null;
  final Data newValueData=newValue != null ? toData(newValue) : null;
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request;
  if (isGet) {
    request=CacheGetAndReplaceCodec.encodeRequest(nameWithPrefix,keyData,newValueData,expiryPolicyData);
  }
 else {
    request=CacheReplaceCodec.encodeRequest(nameWithPrefix,keyData,oldValueData,newValueData,expiryPolicyData);
  }
  ICompletableFuture future;
  try {
    future=invoke(request,keyData,withCompletionEvent);
    invalidateNearCache(keyData);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return future;
}","protected <T>ICompletableFuture<T> replaceAsyncInternal(K key,V oldValue,V newValue,ExpiryPolicy expiryPolicy,boolean hasOldValue,boolean isGet,boolean withCompletionEvent){
  ensureOpen();
  if (hasOldValue) {
    validateNotNull(key,oldValue,newValue);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,oldValue,newValue);
  }
 else {
    validateNotNull(key,newValue);
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,newValue);
  }
  final Data keyData=toData(key);
  final Data oldValueData=oldValue != null ? toData(oldValue) : DefaultData.NULL_DATA;
  final Data newValueData=newValue != null ? toData(newValue) : DefaultData.NULL_DATA;
  final Data expiryPolicyData=expiryPolicy != null ? toData(expiryPolicy) : DefaultData.NULL_DATA;
  final int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request;
  if (isGet) {
    request=CacheGetAndReplaceCodec.encodeRequest(nameWithPrefix,keyData,newValueData,expiryPolicyData);
  }
 else {
    request=CacheReplaceCodec.encodeRequest(nameWithPrefix,keyData,oldValueData,newValueData,expiryPolicyData);
  }
  ICompletableFuture future;
  try {
    future=invoke(request,keyData,completionId);
    invalidateNearCache(keyData);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return future;
}",0.6526994359387591
47234,"@Override public <T>T invoke(K key,EntryProcessor<K,V,T> entryProcessor,Object... arguments) throws EntryProcessorException {
  ensureOpen();
  validateNotNull(key);
  if (entryProcessor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final Data keyData=toData(key);
  Data epData=toData(entryProcessor);
  List<Data> argumentsData=null;
  if (arguments != null) {
    argumentsData=new ArrayList<Data>(arguments.length);
    for (int i=0; i < arguments.length; i++) {
      argumentsData.add(toData(arguments[i]));
    }
  }
  final ClientMessage request=CacheEntryProcessorCodec.encodeRequest(nameWithPrefix,keyData,epData,argumentsData);
  try {
    final ICompletableFuture<ClientMessage> f=invoke(request,keyData,true);
    final ClientMessage response=getSafely(f);
    final Data data=CacheEntryProcessorCodec.decodeResponse(response).response;
    return toObject(data);
  }
 catch (  CacheException ce) {
    throw ce;
  }
catch (  Exception e) {
    throw new EntryProcessorException(e);
  }
}","@Override public <T>T invoke(K key,EntryProcessor<K,V,T> entryProcessor,Object... arguments) throws EntryProcessorException {
  ensureOpen();
  validateNotNull(key);
  if (entryProcessor == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final Data keyData=toData(key);
  Data epData=toData(entryProcessor);
  List<Data> argumentsData=null;
  if (arguments != null) {
    argumentsData=new ArrayList<Data>(arguments.length);
    for (int i=0; i < arguments.length; i++) {
      argumentsData.add(toData(arguments[i]));
    }
  }
  final ClientMessage request=CacheEntryProcessorCodec.encodeRequest(nameWithPrefix,keyData,epData,argumentsData);
  final int completionId=nextCompletionId();
  try {
    final ICompletableFuture<ClientMessage> f=invoke(request,keyData,completionId);
    final ClientMessage response=getSafely(f);
    final Data data=CacheEntryProcessorCodec.decodeResponse(response).response;
    return toObject(data);
  }
 catch (  CacheException ce) {
    throw ce;
  }
catch (  Exception e) {
    throw new EntryProcessorException(e);
  }
}",0.9710488846701472
47235,"protected CacheKeyIteratorResult fetch(){
  CacheIterateRequest request=new CacheIterateRequest(cacheProxy.getNameWithPrefix(),partitionIndex,lastTableIndex,fetchSize,cacheProxy.cacheConfig.getInMemoryFormat());
  final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)context.getHazelcastInstance();
  try {
    final ClientInvocation clientInvocation=new ClientInvocation(client,request);
    final Future f=clientInvocation.invoke();
    return toObject(f.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","protected CacheKeyIteratorResult fetch(){
  ClientMessage request=CacheIterateParameters.encode(cacheProxy.getNameWithPrefix(),partitionIndex,lastTableIndex,fetchSize);
  final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)context.getHazelcastInstance();
  try {
    final ClientInvocation clientInvocation=new ClientInvocation(client,request);
    final Future f=clientInvocation.invoke();
    return toObject(f.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.8784165881244109
47236,"@Override public double getRatio(){
  return ((double)hits / misses) * 100.0;
}","@Override public double getRatio(){
  if (misses == 0) {
    if (hits == 0) {
      return Double.NaN;
    }
 else {
      return Double.POSITIVE_INFINITY;
    }
  }
 else {
    return ((double)hits / misses) * PERCENTAGE;
  }
}",0.4755700325732899
47237,"@Override public <R>R apply(IFunction<E,R> function){
  isNotNull(function,""String_Node_Str"");
  ClientMessage request=AtomicReferenceApplyCodec.encodeRequest(name,toData(function));
  AtomicReferenceApplyCodec.ResponseParameters resultParameters=AtomicReferenceApplyCodec.decodeResponse((ClientMessage)invoke(request));
  return toObject(resultParameters.response);
}","@Override public <R>R apply(IFunction<E,R> function){
  isNotNull(function,""String_Node_Str"");
  ClientMessage request=AtomicReferenceApplyCodec.encodeRequest(name,toData(function));
  ClientMessage response=invoke(request);
  AtomicReferenceApplyCodec.ResponseParameters resultParameters=AtomicReferenceApplyCodec.decodeResponse(response);
  return toObject(resultParameters.response);
}",0.8941798941798942
47238,"@Override public E setAndGet(E update){
  ClientMessage request=AtomicReferenceSetAndGetCodec.encodeRequest(name,toData(update));
  AtomicReferenceSetAndGetCodec.ResponseParameters resultParameters=AtomicReferenceSetAndGetCodec.decodeResponse((ClientMessage)invoke(request));
  return toObject(resultParameters.response);
}","@Override public E setAndGet(E update){
  ClientMessage request=AtomicReferenceSetAndGetCodec.encodeRequest(name,toData(update));
  ClientMessage response=invoke(request);
  return toObject(AtomicReferenceSetAndGetCodec.decodeResponse(response).response);
}",0.6310344827586207
47239,"@Override public E getAndAlter(IFunction<E,E> function){
  isNotNull(function,""String_Node_Str"");
  ClientMessage request=AtomicReferenceGetAndAlterCodec.encodeRequest(name,toData(function));
  AtomicReferenceGetAndAlterCodec.ResponseParameters resultParameters=AtomicReferenceGetAndAlterCodec.decodeResponse((ClientMessage)invoke(request));
  return toObject(resultParameters.response);
}","@Override public E getAndAlter(IFunction<E,E> function){
  isNotNull(function,""String_Node_Str"");
  ClientMessage request=AtomicReferenceGetAndAlterCodec.encodeRequest(name,toData(function));
  ClientMessage response=invoke(request);
  return toObject(AtomicReferenceGetAndAlterCodec.decodeResponse(response).response);
}",0.6901408450704225
47240,"@Override public boolean contains(E expected){
  ClientMessage request=AtomicReferenceContainsCodec.encodeRequest(name,toData(expected));
  AtomicReferenceContainsCodec.ResponseParameters resultParameters=AtomicReferenceContainsCodec.decodeResponse((ClientMessage)invoke(request));
  return resultParameters.response;
}","@Override public boolean contains(E expected){
  ClientMessage request=AtomicReferenceContainsCodec.encodeRequest(name,toData(expected));
  ClientMessage response=invoke(request);
  return AtomicReferenceContainsCodec.decodeResponse(response).response;
}",0.6038394415357766
47241,"@Override public boolean compareAndSet(E expect,E update){
  ClientMessage request=AtomicReferenceCompareAndSetCodec.encodeRequest(name,toData(expect),toData(update));
  AtomicReferenceCompareAndSetCodec.ResponseParameters resultParameters=AtomicReferenceCompareAndSetCodec.decodeResponse((ClientMessage)invoke(request));
  return resultParameters.response;
}","@Override public boolean compareAndSet(E expect,E update){
  ClientMessage request=AtomicReferenceCompareAndSetCodec.encodeRequest(name,toData(expect),toData(update));
  ClientMessage response=invoke(request);
  return AtomicReferenceCompareAndSetCodec.decodeResponse(response).response;
}",0.6419753086419753
47242,"@Override public E get(){
  ClientMessage request=AtomicReferenceGetCodec.encodeRequest(name);
  AtomicReferenceGetCodec.ResponseParameters resultParameters=AtomicReferenceGetCodec.decodeResponse((ClientMessage)invoke(request));
  return toObject(resultParameters.response);
}","@Override public E get(){
  ClientMessage request=AtomicReferenceGetCodec.encodeRequest(name);
  ClientMessage response=invoke(request);
  return toObject(AtomicReferenceGetCodec.decodeResponse(response).response);
}",0.6463414634146342
47243,"@Override public boolean isNull(){
  ClientMessage request=AtomicReferenceIsNullCodec.encodeRequest(name);
  AtomicReferenceIsNullCodec.ResponseParameters resultParameters=AtomicReferenceIsNullCodec.decodeResponse((ClientMessage)invoke(request));
  return resultParameters.response;
}","@Override public boolean isNull(){
  ClientMessage request=AtomicReferenceIsNullCodec.encodeRequest(name);
  ClientMessage response=invoke(request);
  return AtomicReferenceIsNullCodec.decodeResponse(response).response;
}",0.5544554455445545
47244,"@Override public E getAndSet(E newValue){
  ClientMessage request=AtomicReferenceGetAndSetCodec.encodeRequest(name,toData(newValue));
  AtomicReferenceGetAndSetCodec.ResponseParameters resultParameters=AtomicReferenceGetAndSetCodec.decodeResponse((ClientMessage)invoke(request));
  return toObject(resultParameters.response);
}","@Override public E getAndSet(E newValue){
  ClientMessage request=AtomicReferenceGetAndSetCodec.encodeRequest(name,toData(newValue));
  ClientMessage response=invoke(request);
  return toObject(AtomicReferenceGetAndSetCodec.decodeResponse(response).response);
}",0.6326530612244898
47245,"@Override public E alterAndGet(IFunction<E,E> function){
  isNotNull(function,""String_Node_Str"");
  ClientMessage request=AtomicReferenceAlterAndGetCodec.encodeRequest(name,toData(function));
  AtomicReferenceAlterAndGetCodec.ResponseParameters resultParameters=AtomicReferenceAlterAndGetCodec.decodeResponse((ClientMessage)invoke(request));
  return toObject(resultParameters.response);
}","@Override public E alterAndGet(IFunction<E,E> function){
  isNotNull(function,""String_Node_Str"");
  ClientMessage request=AtomicReferenceAlterAndGetCodec.encodeRequest(name,toData(function));
  ClientMessage response=invoke(request);
  return toObject(AtomicReferenceAlterAndGetCodec.decodeResponse(response).response);
}",0.6901408450704225
47246,"private boolean doAwait(long time,TimeUnit unit,long threadId) throws InterruptedException {
  final long timeoutInMillis=unit.toMillis(time);
  ClientMessage request=ConditionAwaitCodec.encodeRequest(conditionId,threadId,timeoutInMillis,lockProxy.getName());
  ConditionAwaitCodec.ResponseParameters resultParameters=ConditionAwaitCodec.decodeResponse((ClientMessage)invoke(request));
  return resultParameters.response;
}","private boolean doAwait(long time,TimeUnit unit,long threadId) throws InterruptedException {
  final long timeoutInMillis=unit.toMillis(time);
  ClientMessage request=ConditionAwaitCodec.encodeRequest(conditionId,threadId,timeoutInMillis,lockProxy.getName());
  ClientMessage response=invoke(request);
  return ConditionAwaitCodec.decodeResponse(response).response;
}",0.7417721518987341
47247,"@Override public void handle(String name,String serviceName,int eventType){
  final ObjectNamespace ns=new DefaultObjectNamespace(serviceName,name);
  ClientProxyFuture future=proxies.get(ns);
  ClientProxy proxy=future == null ? null : future.get();
  if (proxy == null) {
    proxy=getOrCreateProxy(serviceName,name);
  }
  if (DistributedObjectEvent.EventType.CREATED.equals(eventType)) {
    DistributedObjectEvent event=new DistributedObjectEvent(DistributedObjectEvent.EventType.CREATED,serviceName,proxy);
    listener.distributedObjectCreated(event);
  }
 else   if (DistributedObjectEvent.EventType.DESTROYED.equals(eventType)) {
    DistributedObjectEvent event=new DistributedObjectEvent(DistributedObjectEvent.EventType.DESTROYED,serviceName,proxy);
    listener.distributedObjectDestroyed(event);
  }
}","@Override public void handle(String name,String serviceName,String eventTypeName){
  final ObjectNamespace ns=new DefaultObjectNamespace(serviceName,name);
  ClientProxyFuture future=proxies.get(ns);
  ClientProxy proxy=future == null ? null : future.get();
  if (proxy == null) {
    proxy=getOrCreateProxy(serviceName,name);
  }
  DistributedObjectEvent.EventType eventType=DistributedObjectEvent.EventType.valueOf(eventTypeName);
  DistributedObjectEvent event=new DistributedObjectEvent(eventType,serviceName,proxy);
  if (DistributedObjectEvent.EventType.CREATED.equals(eventType)) {
    listener.distributedObjectCreated(event);
  }
 else   if (DistributedObjectEvent.EventType.DESTROYED.equals(eventType)) {
    listener.distributedObjectDestroyed(event);
  }
}",0.4977890082122552
47248,"public static void encode(com.hazelcast.instance.AbstractMember member,ClientMessage clientMessage){
  AddressCodec.encode(member.getAddress(),clientMessage);
  clientMessage.set(member.getUuid());
  Map<String,Object> attributes=new HashMap<String,Object>(member.getAttributes());
  clientMessage.set(attributes.size());
  for (  Map.Entry<String,Object> entry : attributes.entrySet()) {
    clientMessage.set(entry.getKey());
    Object value=entry.getValue();
    clientMessage.set(value.toString());
  }
}","public static void encode(Member member,ClientMessage clientMessage){
  AddressCodec.encode(((AbstractMember)member).getAddress(),clientMessage);
  clientMessage.set(member.getUuid());
  Map<String,Object> attributes=new HashMap<String,Object>(member.getAttributes());
  clientMessage.set(attributes.size());
  for (  Map.Entry<String,Object> entry : attributes.entrySet()) {
    clientMessage.set(entry.getKey());
    Object value=entry.getValue();
    clientMessage.set(value.toString());
  }
}",0.9393034825870646
47249,"public static int calculateDataSize(com.hazelcast.instance.AbstractMember member){
  int dataSize=AddressCodec.calculateDataSize(member.getAddress());
  dataSize+=ParameterUtil.calculateStringDataSize(member.getUuid());
  dataSize+=Bits.INT_SIZE_IN_BYTES;
  Map<String,Object> attributes=member.getAttributes();
  for (  Map.Entry<String,Object> entry : attributes.entrySet()) {
    dataSize+=ParameterUtil.calculateStringDataSize(entry.getKey());
    Object value=entry.getValue();
    dataSize+=ParameterUtil.calculateStringDataSize(value.toString());
  }
  return dataSize;
}","public static int calculateDataSize(Member member){
  int dataSize=AddressCodec.calculateDataSize(((AbstractMember)member).getAddress());
  dataSize+=ParameterUtil.calculateStringDataSize(member.getUuid());
  dataSize+=Bits.INT_SIZE_IN_BYTES;
  Map<String,Object> attributes=member.getAttributes();
  for (  Map.Entry<String,Object> entry : attributes.entrySet()) {
    dataSize+=ParameterUtil.calculateStringDataSize(entry.getKey());
    Object value=entry.getValue();
    dataSize+=ParameterUtil.calculateStringDataSize(value.toString());
  }
  return dataSize;
}",0.94663167104112
47250,"public static com.hazelcast.instance.AbstractMember decode(ClientMessage clientMessage){
  final Address address=AddressCodec.decode(clientMessage);
  String uuid=clientMessage.getStringUtf8();
  int attributeSize=clientMessage.getInt();
  Map<String,Object> attributes=new HashMap<String,Object>();
  for (int i=0; i < attributeSize; i++) {
    String key=clientMessage.getStringUtf8();
    String value=clientMessage.getStringUtf8();
    attributes.put(key,value);
  }
  return new com.hazelcast.client.impl.MemberImpl(address,uuid,attributes);
}","public static Member decode(ClientMessage clientMessage){
  final Address address=AddressCodec.decode(clientMessage);
  String uuid=clientMessage.getStringUtf8();
  int attributeSize=clientMessage.getInt();
  Map<String,Object> attributes=new HashMap<String,Object>();
  for (int i=0; i < attributeSize; i++) {
    String key=clientMessage.getStringUtf8();
    String value=clientMessage.getStringUtf8();
    attributes.put(key,value);
  }
  return new com.hazelcast.client.impl.MemberImpl(address,uuid,attributes);
}",0.9708920187793428
47251,"private void send(DistributedObjectEvent event){
  if (endpoint.isAlive()) {
    String name=event.getDistributedObject().getName();
    String serviceName=event.getServiceName();
    ClientMessage eventMessage=ClientAddDistributedObjectListenerCodec.encodeDistributedObjectEvent(name,serviceName,event.getEventType().ordinal());
    sendClientMessage(null,eventMessage);
  }
}","private void send(DistributedObjectEvent event){
  if (endpoint.isAlive()) {
    String name=event.getDistributedObject().getName();
    String serviceName=event.getServiceName();
    ClientMessage eventMessage=ClientAddDistributedObjectListenerCodec.encodeDistributedObjectEvent(name,serviceName,event.getEventType().name());
    sendClientMessage(null,eventMessage);
  }
}",0.985352862849534
47252,"@Override protected ClientMessage encodeResponse(Object response){
  Object[] responses=((TaskMultipleResponse)response).responses;
  return ClientAuthenticationCustomCodec.encodeResponse((Address)responses[0],(String)responses[1],(String)responses[2]);
}","@Override protected ClientMessage encodeResponse(Object response){
  Object[] responses=((TaskMultipleResponse)response).getResponses();
  return ClientAuthenticationCustomCodec.encodeResponse((Address)responses[0],(String)responses[1],(String)responses[2]);
}",0.9553398058252428
47253,"@Override protected ClientMessage encodeResponse(Object response){
  Object[] responses=((TaskMultipleResponse)response).responses;
  return ClientAuthenticationCodec.encodeResponse((Address)responses[0],(String)responses[1],(String)responses[2]);
}","@Override protected ClientMessage encodeResponse(Object response){
  Object[] responses=((TaskMultipleResponse)response).getResponses();
  return ClientAuthenticationCodec.encodeResponse((Address)responses[0],(String)responses[1],(String)responses[2]);
}",0.9542743538767396
47254,"@Override protected ClientMessage encodeResponse(Object response){
  Object[] responses=((TaskMultipleResponse)response).responses;
  return ClientGetPartitionsCodec.encodeResponse((Address[])responses[0],(int[])responses[1]);
}","@Override protected ClientMessage encodeResponse(Object response){
  Object[] responses=((TaskMultipleResponse)response).getResponses();
  return ClientGetPartitionsCodec.encodeResponse((Address[])responses[0],(int[])responses[1]);
}",0.9501084598698482
47255,"@Override protected Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  CacheService cacheService=getService(CacheService.SERVICE_NAME);
  String registrationId=cacheService.addInvalidationListener(parameters.name,new CacheEventListener(){
    @Override public void handleEvent(    Object eventObject){
      if (eventObject instanceof CacheInvalidationMessage) {
        CacheInvalidationMessage message=(CacheInvalidationMessage)eventObject;
        if (endpoint.isAlive()) {
          ClientMessage eventMessage=CacheAddInvalidationListenerCodec.encodeCacheInvalidationEvent(message.getName(),message.getKey(),message.getSourceUuid());
          sendClientMessage(message.getKey(),eventMessage);
        }
      }
    }
  }
);
  endpoint.setListenerRegistration(CacheService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}","@Override protected Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  CacheService cacheService=getService(CacheService.SERVICE_NAME);
  String registrationId=cacheService.addInvalidationListener(parameters.name,new CacheEventListener(){
    @Override public void handleEvent(    Object eventObject){
      if (!endpoint.isAlive()) {
        return;
      }
      if (eventObject instanceof CacheInvalidationMessage) {
        CacheInvalidationMessage message=(CacheInvalidationMessage)eventObject;
        ClientMessage eventMessage=CacheAddInvalidationListenerCodec.encodeCacheInvalidationEvent(message.getName(),message.getKey(),message.getSourceUuid());
        sendClientMessage(message.getKey(),eventMessage);
      }
    }
  }
);
  endpoint.setListenerRegistration(CacheService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}",0.9394114252740912
47256,"@Override public void handleEvent(Object eventObject){
  if (eventObject instanceof CacheInvalidationMessage) {
    CacheInvalidationMessage message=(CacheInvalidationMessage)eventObject;
    if (endpoint.isAlive()) {
      ClientMessage eventMessage=CacheAddInvalidationListenerCodec.encodeCacheInvalidationEvent(message.getName(),message.getKey(),message.getSourceUuid());
      sendClientMessage(message.getKey(),eventMessage);
    }
  }
}","@Override public void handleEvent(Object eventObject){
  if (!endpoint.isAlive()) {
    return;
  }
  if (eventObject instanceof CacheInvalidationMessage) {
    CacheInvalidationMessage message=(CacheInvalidationMessage)eventObject;
    ClientMessage eventMessage=CacheAddInvalidationListenerCodec.encodeCacheInvalidationEvent(message.getName(),message.getKey(),message.getSourceUuid());
    sendClientMessage(message.getKey(),eventMessage);
  }
}",0.904386951631046
47257,"@Override protected ClientMessage encodeResponse(Object response){
  Object[] responses=((TaskMultipleResponse)response).responses;
  return MapReduceJobProcessInformationCodec.encodeResponse((JobPartitionState[])responses[0],(Integer)responses[1]);
}","@Override protected ClientMessage encodeResponse(Object response){
  Object[] responses=((TaskMultipleResponse)response).getResponses();
  return MapReduceJobProcessInformationCodec.encodeResponse((JobPartitionState[])responses[0],(Integer)responses[1]);
}",0.9546351084812624
47258,"/** 
 * Here we are cleaning staging area upon a store operation.
 */
@Override public void afterStore(StoreEvent<DelayedEntry> storeEvent){
  final DelayedEntry delayedEntry=storeEvent.getSource();
  int partitionId=delayedEntry.getPartitionId();
  WriteBehindStore writeBehindStore=getWriteBehindStoreOrNull(partitionId);
  if (writeBehindStore == null) {
    return;
  }
  Data key=(Data)delayedEntry.getKey();
  Object value=delayedEntry.getValue();
  writeBehindStore.removeFromStagingArea(key,value);
  if (value == null) {
    writeBehindStore.removeFromWaitingDeletions(key);
  }
}","/** 
 * Here we are cleaning staging area upon a store operation.
 */
@Override public void afterStore(StoreEvent<DelayedEntry> storeEvent){
  DelayedEntry delayedEntry=storeEvent.getSource();
  int partitionId=delayedEntry.getPartitionId();
  WriteBehindStore writeBehindStore=getWriteBehindStoreOrNull(partitionId);
  if (writeBehindStore == null) {
    return;
  }
  writeBehindStore.removeFromStagingArea(delayedEntry);
}",0.7396449704142012
47259,"public static <T>WriteBehindQueue<T> createDefaultWriteBehindQueue(){
  final WriteBehindQueue queue=createCoalescedWriteBehindQueue();
  return createSyncronizedWriteBehindQueue(queue);
}","public static <T>WriteBehindQueue<T> createDefaultWriteBehindQueue(){
  final WriteBehindQueue queue=createCoalescedWriteBehindQueue();
  return createSynchronizedWriteBehindQueue(queue);
}",0.9973474801061007
47260,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  AbstractDelayedEntry that=(AbstractDelayedEntry)o;
  if (key != null ? !key.equals(that.key) : that.key != null) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object o){
  return this == o;
}",0.3109919571045576
47261,"/** 
 * Here we are cleaning staging area upon a store operation.
 */
@Override public void afterStore(StoreEvent<DelayedEntry> storeEvent){
  final DelayedEntry delayedEntry=storeEvent.getSource();
  int partitionId=delayedEntry.getPartitionId();
  WriteBehindStore writeBehindStore=getWriteBehindStoreOrNull(partitionId);
  if (writeBehindStore == null) {
    return;
  }
  Data key=(Data)delayedEntry.getKey();
  Object value=delayedEntry.getValue();
  writeBehindStore.removeFromStagingArea(key,value);
  if (value == null) {
    writeBehindStore.removeFromWaitingDeletions(key);
  }
}","/** 
 * Here we are cleaning staging area upon a store operation.
 */
@Override public void afterStore(StoreEvent<DelayedEntry> storeEvent){
  final DelayedEntry delayedEntry=storeEvent.getSource();
  int partitionId=delayedEntry.getPartitionId();
  WriteBehindStore writeBehindStore=getWriteBehindStoreOrNull(partitionId);
  if (writeBehindStore == null) {
    return;
  }
  writeBehindStore.removeProcessed(delayedEntry);
}",0.7514792899408284
47262,"@Override public Object add(Data key,Object value,long now){
  final long writeDelay=this.writeDelayTime;
  final long storeTime=now + writeDelay;
  final DelayedEntry<Data,Object> delayedEntry=DelayedEntry.create(key,value,storeTime,partitionId);
  writeBehindQueue.offer(delayedEntry);
  removeFromWaitingDeletions(key);
  transients.remove(key);
  return value;
}","public void add(DelayedEntry<Data,Object> delayedEntry){
  writeBehindQueue.offer(delayedEntry);
  stagingArea.put(delayedEntry.getKey(),delayedEntry);
}",0.4161849710982659
47263,"/** 
 * * Used in   {@link com.hazelcast.core.IMap#loadAll} calls.If write-behind map-store feature enabled, some things may lead possible data inconsistencies. These are: - calling evict/evictAll. - calling remove. - not yet stored write behind queue operation. <p/> With this method we can be sure that a key can be loadable from map-store or not.
 * @param key            to query whether loadable or not.
 * @param lastUpdateTime last update time.
 * @param now            in mills
 * @return <code>true</code> if loadable, otherwise false.
 */
@Override public boolean loadable(Data key,long lastUpdateTime,long now){
  if (hasWaitingWriteBehindDeleteOperation(key) || isInStagingArea(key,now) || hasAnyWaitingOperationInWriteBehindQueue(lastUpdateTime,now)) {
    return false;
  }
  return true;
}","/** 
 * * Used in   {@link com.hazelcast.core.IMap#loadAll} calls.If write-behind map-store feature enabled, some things may lead possible data inconsistencies. These are: - calling evict/evictAll. - calling remove. - not yet stored write behind queue operation. <p/> With this method we can be sure that a key can be loadable from map-store or not.
 * @param key            to query whether loadable or not.
 * @param lastUpdateTime last update time.
 * @param now            in mills
 * @return <code>true</code> if loadable, otherwise false.
 */
@Override public boolean loadable(Data key,long lastUpdateTime,long now){
  if (isInStagingArea(key,now) || hasAnyWaitingOperationInWriteBehindQueue(lastUpdateTime,now)) {
    return false;
  }
  return true;
}",0.9481765834932822
47264,"@Override public void clear(){
  writeBehindQueue.clear();
  writeBehindWaitingDeletions.clear();
  transients.clear();
  stagingArea.clear();
  flushCounter.set(0);
}","@Override public void clear(){
  writeBehindQueue.clear();
  stagingArea.clear();
  flushCounter.set(0);
}",0.7765567765567766
47265,"@Override public Map loadAll(Collection keys){
  if (keys == null || keys.isEmpty()) {
    return Collections.emptyMap();
  }
  final Map<Object,Object> map=new HashMap<Object,Object>();
  final Iterator iterator=keys.iterator();
  while (iterator.hasNext()) {
    final Object key=iterator.next();
    final Data dataKey=toData(key);
    if (hasWaitingWriteBehindDeleteOperation(dataKey)) {
      iterator.remove();
      continue;
    }
    final Object valueFromStagingArea=getFromStagingArea(dataKey);
    if (valueFromStagingArea != null) {
      map.put(dataKey,valueFromStagingArea);
      iterator.remove();
    }
  }
  map.putAll(super.loadAll(keys));
  return map;
}","@Override public Map loadAll(Collection keys){
  if (keys == null || keys.isEmpty()) {
    return Collections.emptyMap();
  }
  final Map<Object,Object> map=new HashMap<Object,Object>();
  final Iterator iterator=keys.iterator();
  while (iterator.hasNext()) {
    final Object key=iterator.next();
    final Data dataKey=toData(key);
    DelayedEntry delayedEntry=getFromStagingArea(dataKey);
    if (delayedEntry != null) {
      Object value=delayedEntry.getValue();
      if (value != null) {
        map.put(dataKey,toObject(value));
      }
      iterator.remove();
    }
  }
  map.putAll(super.loadAll(keys));
  return map;
}",0.5519877675840978
47266,"public WriteBehindStore(MapStoreWrapper store,SerializationService serializationService,long writeDelayTime,int partitionId){
  super(store,serializationService);
  this.writeDelayTime=writeDelayTime;
  this.partitionId=partitionId;
  this.stagingArea=createStagingArea();
  this.flushCounter=new AtomicInteger(0);
  this.writeBehindWaitingDeletions=new HashSet<Data>();
  this.transients=new HashSet<Data>();
}","public WriteBehindStore(MapStoreWrapper store,SerializationService serializationService,long writeDelayTime,int partitionId){
  super(store,serializationService);
  this.writeDelayTime=writeDelayTime;
  this.partitionId=partitionId;
  this.stagingArea=createStagingArea();
  this.flushCounter=new AtomicInteger(0);
}",0.8693259972489684
47267,"@Override public void addTransient(Data key,long now){
  removeFromWaitingDeletions(key);
  transients.add(key);
}","@Override public void addTransient(Data key,long now){
  stagingArea.put(key,TRANSIENT);
}",0.696078431372549
47268,"@Override public void remove(Data key,long now){
  final long writeDelay=this.writeDelayTime;
  final long storeTime=now + writeDelay;
  final DelayedEntry<Data,Object> delayedEntry=DelayedEntry.createWithNullValue(key,storeTime,partitionId);
  addToWaitingDeletions(key);
  removeFromStagingArea(key);
  transients.remove(key);
  writeBehindQueue.offer(delayedEntry);
}","@Override public void remove(Data key,long now){
  final long writeDelay=this.writeDelayTime;
  final long storeTime=now + writeDelay;
  final DelayedEntry<Data,Object> delayedEntry=DelayedEntry.createWithNullValue(key,storeTime,partitionId);
  add(delayedEntry);
}",0.8
47269,"private Object getFromStagingArea(Data key){
  final DelayedEntry entry=stagingArea.get(key);
  if (entry == null) {
    return null;
  }
  final long storeTime=entry.getStoreTime();
  final long now=Clock.currentTimeMillis();
  if (now >= storeTime) {
    return null;
  }
  return toObject(entry.getValue());
}","private DelayedEntry getFromStagingArea(Data key){
  DelayedEntry entry=stagingArea.get(key);
  if (entry == null || entry == TRANSIENT) {
    return null;
  }
  return entry;
}",0.6421267893660532
47270,"@Override public Object load(Data key){
  if (hasWaitingWriteBehindDeleteOperation(key)) {
    return null;
  }
  final Object valueFromStagingArea=getFromStagingArea(key);
  return valueFromStagingArea == null ? getStore().load(toObject(key)) : valueFromStagingArea;
}","@Override public Object load(Data key){
  DelayedEntry delayedEntry=getFromStagingArea(key);
  return delayedEntry == null ? getStore().load(toObject(key)) : toObject(delayedEntry.getValue());
}",0.6047516198704104
47271,"@Test public void testMapTryPut() throws InterruptedException {
  final IMap<Object,Object> map=getInstance().getMap(""String_Node_Str"");
  final String key1=""String_Node_Str"";
  final String key2=""String_Node_Str"";
  map.lock(key1);
  final AtomicInteger counter=new AtomicInteger(6);
  final CountDownLatch latch=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    public void run(){
      try {
        if (map.tryPut(key1,""String_Node_Str"",100,TimeUnit.MILLISECONDS) == false)         counter.decrementAndGet();
        if (map.get(key1) == null)         counter.decrementAndGet();
        if (map.tryPut(key2,""String_Node_Str"",100,TimeUnit.MILLISECONDS))         counter.decrementAndGet();
        if (map.get(key2).equals(""String_Node_Str""))         counter.decrementAndGet();
        if (map.tryPut(key1,""String_Node_Str"",5,TimeUnit.SECONDS))         counter.decrementAndGet();
        if (map.get(key1).equals(""String_Node_Str""))         counter.decrementAndGet();
        latch.countDown();
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
    }
  }
);
  thread.start();
  Thread.sleep(1000);
  map.unlock(""String_Node_Str"");
  latch.await(10,TimeUnit.SECONDS);
  assertEquals(0,counter.get());
  thread.join(10000);
}","@Test public void testMapTryPut() throws InterruptedException {
  final IMap<Object,Object> map=getInstance().getMap(""String_Node_Str"");
  final String key1=""String_Node_Str"";
  final String key2=""String_Node_Str"";
  map.lock(key1);
  final AtomicInteger counter=new AtomicInteger(6);
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch waitTryPutFailure=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    public void run(){
      try {
        if (map.tryPut(key1,""String_Node_Str"",100,TimeUnit.MILLISECONDS) == false) {
          counter.decrementAndGet();
          waitTryPutFailure.countDown();
        }
        if (map.get(key1) == null) {
          counter.decrementAndGet();
        }
        if (map.tryPut(key2,""String_Node_Str"",100,TimeUnit.MILLISECONDS)) {
          counter.decrementAndGet();
        }
        if (map.get(key2).equals(""String_Node_Str"")) {
          counter.decrementAndGet();
        }
        if (map.tryPut(key1,""String_Node_Str"",5,TimeUnit.SECONDS)) {
          counter.decrementAndGet();
        }
        if (map.get(key1).equals(""String_Node_Str"")) {
          counter.decrementAndGet();
        }
        latch.countDown();
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
    }
  }
);
  thread.start();
  assertOpenEventually(waitTryPutFailure);
  map.unlock(""String_Node_Str"");
  assertOpenEventually(latch);
  assertEquals(0,counter.get());
  assertJoinable(thread);
}",0.832205201282508
47272,"protected void waitCompletionLatch(Integer countDownLatchId,int offset){
  final CountDownLatch countDownLatch=syncLocks.get(countDownLatchId);
  if (countDownLatch != null) {
    for (int i=0; i < offset; i++) {
      countDownLatch.countDown();
    }
    awaitLatch(countDownLatch);
  }
}","protected void waitCompletionLatch(Integer countDownLatchId,int offset,ICompletableFuture future) throws ExecutionException {
  final CountDownLatch countDownLatch=syncLocks.get(countDownLatchId);
  if (countDownLatch != null) {
    for (int i=0; i < offset; i++) {
      countDownLatch.countDown();
    }
    awaitLatch(countDownLatch,future);
  }
}",0.903125
47273,"protected <T>ICompletableFuture<T> invoke(ClientMessage req,Data keyData,boolean completionOperation){
  Integer completionId=null;
  if (completionOperation) {
    completionId=registerCompletionLatch(1);
  }
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(keyData);
    HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,req,partitionId);
    ClientInvocationFuture f=clientInvocation.invoke();
    if (completionOperation) {
      waitCompletionLatch(completionId);
    }
    return new ClientDelegatingFuture<T>(f,clientContext.getSerializationService());
  }
 catch (  Throwable e) {
    if (e instanceof IllegalStateException) {
      close();
    }
    if (completionOperation) {
      deregisterCompletionLatch(completionId);
    }
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","protected <T>ICompletableFuture<T> invoke(ClientMessage req,Data keyData,boolean completionOperation){
  Integer completionId=null;
  if (completionOperation) {
    completionId=registerCompletionLatch(1);
  }
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(keyData);
    HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,req,partitionId);
    ClientInvocationFuture f=clientInvocation.invoke();
    if (completionOperation) {
      waitCompletionLatch(completionId,f);
    }
    return new ClientDelegatingFuture<T>(f,clientContext.getSerializationService());
  }
 catch (  Throwable e) {
    if (e instanceof IllegalStateException) {
      close();
    }
    if (completionOperation) {
      deregisterCompletionLatch(completionId);
    }
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.998972250770812
47274,"protected void removeAllInternal(Set<? extends K> keys){
  final Set<Data> keysData;
  if (keys != null) {
    keysData=new HashSet<Data>();
    for (    K key : keys) {
      keysData.add(toData(key));
    }
  }
 else {
    keysData=null;
  }
  final int partitionCount=clientContext.getPartitionService().getPartitionCount();
  int completionId=registerCompletionLatch(partitionCount);
  ClientMessage request=CacheRemoveAllParameters.encode(nameWithPrefix,keysData,completionId);
  try {
    invoke(request);
    waitCompletionLatch(completionId);
  }
 catch (  Throwable t) {
    deregisterCompletionLatch(completionId);
    throw ExceptionUtil.rethrowAllowedTypeFirst(t,CacheException.class);
  }
}","protected void removeAllInternal(Set<? extends K> keys){
  final Set<Data> keysData;
  if (keys != null) {
    keysData=new HashSet<Data>();
    for (    K key : keys) {
      keysData.add(toData(key));
    }
  }
 else {
    keysData=null;
  }
  final int partitionCount=clientContext.getPartitionService().getPartitionCount();
  int completionId=registerCompletionLatch(partitionCount);
  ClientMessage request=CacheRemoveAllParameters.encode(nameWithPrefix,keysData,completionId);
  try {
    invoke(request);
    waitCompletionLatch(completionId,null);
  }
 catch (  Throwable t) {
    deregisterCompletionLatch(completionId);
    throw ExceptionUtil.rethrowAllowedTypeFirst(t,CacheException.class);
  }
}",0.9964564138908576
47275,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch,ICompletableFuture future) throws ExecutionException {
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      if (future != null && future.isDone()) {
        Object response=future.get();
        if (response instanceof Throwable) {
          return;
        }
      }
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
    if (countDownLatch.getCount() > 0) {
      logger.finest(""String_Node_Str"" + MAX_COMPLETION_LATCH_WAIT_TIME + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.8070550507749866
47276,"protected void waitCompletionLatch(Integer countDownLatchId,int offset){
  final CountDownLatch countDownLatch=syncLocks.get(countDownLatchId);
  if (countDownLatch != null) {
    for (int i=0; i < offset; i++) {
      countDownLatch.countDown();
    }
    awaitLatch(countDownLatch);
  }
}","protected void waitCompletionLatch(Integer countDownLatchId,int offset,ICompletableFuture future) throws ExecutionException {
  final CountDownLatch countDownLatch=syncLocks.get(countDownLatchId);
  if (countDownLatch != null) {
    for (int i=0; i < offset; i++) {
      countDownLatch.countDown();
    }
    awaitLatch(countDownLatch,future);
  }
}",0.903125
47277,"protected <T>ICompletableFuture<T> invoke(ClientRequest req,Data keyData,boolean completionOperation){
  Integer completionId=null;
  if (completionOperation) {
    completionId=registerCompletionLatch(1);
    if (req instanceof AbstractCacheRequest) {
      ((AbstractCacheRequest)req).setCompletionId(completionId);
    }
  }
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(keyData);
    HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,req,partitionId);
    final ICompletableFuture<T> f=clientInvocation.invoke();
    if (completionOperation) {
      waitCompletionLatch(completionId);
    }
    return f;
  }
 catch (  Throwable e) {
    if (e instanceof IllegalStateException) {
      close();
    }
    if (completionOperation) {
      deregisterCompletionLatch(completionId);
    }
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","protected <T>ICompletableFuture<T> invoke(ClientRequest req,Data keyData,boolean completionOperation){
  Integer completionId=null;
  if (completionOperation) {
    completionId=registerCompletionLatch(1);
    if (req instanceof AbstractCacheRequest) {
      ((AbstractCacheRequest)req).setCompletionId(completionId);
    }
  }
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(keyData);
    HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,req,partitionId);
    final ICompletableFuture<T> f=clientInvocation.invoke();
    if (completionOperation) {
      waitCompletionLatch(completionId,f);
    }
    return f;
  }
 catch (  Throwable e) {
    if (e instanceof IllegalStateException) {
      close();
    }
    if (completionOperation) {
      deregisterCompletionLatch(completionId);
    }
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9990243902439024
47278,"protected void removeAllInternal(Set<? extends K> keys,boolean isRemoveAll){
  final Set<Data> keysData;
  if (keys != null) {
    keysData=new HashSet<Data>();
    for (    K key : keys) {
      keysData.add(toData(key));
    }
  }
 else {
    keysData=null;
  }
  final int partitionCount=clientContext.getPartitionService().getPartitionCount();
  int completionId=registerCompletionLatch(partitionCount);
  CacheClearRequest request=new CacheClearRequest(nameWithPrefix,keysData,isRemoveAll,completionId);
  try {
    final Map<Integer,Object> results=invoke(request);
    int completionCount=0;
    for (    Object result : results.values()) {
      if (result != null && result instanceof CacheClearResponse) {
        final Object response=((CacheClearResponse)result).getResponse();
        if (response instanceof Boolean) {
          completionCount++;
        }
        if (response instanceof Throwable) {
          throw (Throwable)response;
        }
      }
    }
    waitCompletionLatch(completionId,partitionCount - completionCount);
  }
 catch (  Throwable t) {
    deregisterCompletionLatch(completionId);
    throw ExceptionUtil.rethrowAllowedTypeFirst(t,CacheException.class);
  }
}","protected void removeAllInternal(Set<? extends K> keys,boolean isRemoveAll){
  final Set<Data> keysData;
  if (keys != null) {
    keysData=new HashSet<Data>();
    for (    K key : keys) {
      keysData.add(toData(key));
    }
  }
 else {
    keysData=null;
  }
  final int partitionCount=clientContext.getPartitionService().getPartitionCount();
  int completionId=registerCompletionLatch(partitionCount);
  CacheClearRequest request=new CacheClearRequest(nameWithPrefix,keysData,isRemoveAll,completionId);
  try {
    final Map<Integer,Object> results=invoke(request);
    int completionCount=0;
    for (    Object result : results.values()) {
      if (result != null && result instanceof CacheClearResponse) {
        final Object response=((CacheClearResponse)result).getResponse();
        if (response instanceof Boolean) {
          completionCount++;
        }
        if (response instanceof Throwable) {
          throw (Throwable)response;
        }
      }
    }
    waitCompletionLatch(completionId,partitionCount - completionCount,null);
  }
 catch (  Throwable t) {
    deregisterCompletionLatch(completionId);
    throw ExceptionUtil.rethrowAllowedTypeFirst(t,CacheException.class);
  }
}",0.9979244499792445
47279,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch,ICompletableFuture future) throws ExecutionException {
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      if (future != null && future.isDone()) {
        Object response=future.get();
        if (response instanceof Throwable) {
          return;
        }
      }
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
    if (countDownLatch.getCount() > 0) {
      logger.finest(""String_Node_Str"" + MAX_COMPLETION_LATCH_WAIT_TIME + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.8070550507749866
47280,"@Test public void testMapTryPut() throws InterruptedException {
  final IMap<Object,Object> map=getInstance().getMap(""String_Node_Str"");
  final String key1=""String_Node_Str"";
  final String key2=""String_Node_Str"";
  map.lock(key1);
  final AtomicInteger counter=new AtomicInteger(6);
  final CountDownLatch latch=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    public void run(){
      try {
        if (map.tryPut(key1,""String_Node_Str"",100,TimeUnit.MILLISECONDS) == false)         counter.decrementAndGet();
        if (map.get(key1) == null)         counter.decrementAndGet();
        if (map.tryPut(key2,""String_Node_Str"",100,TimeUnit.MILLISECONDS))         counter.decrementAndGet();
        if (map.get(key2).equals(""String_Node_Str""))         counter.decrementAndGet();
        if (map.tryPut(key1,""String_Node_Str"",5,TimeUnit.SECONDS))         counter.decrementAndGet();
        if (map.get(key1).equals(""String_Node_Str""))         counter.decrementAndGet();
        latch.countDown();
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
    }
  }
);
  thread.start();
  Thread.sleep(1000);
  map.unlock(""String_Node_Str"");
  latch.await(10,TimeUnit.SECONDS);
  assertEquals(0,counter.get());
  thread.join(10000);
}","@Test public void testMapTryPut() throws InterruptedException {
  final IMap<Object,Object> map=getInstance().getMap(""String_Node_Str"");
  final String key1=""String_Node_Str"";
  final String key2=""String_Node_Str"";
  map.lock(key1);
  final AtomicInteger counter=new AtomicInteger(6);
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch waitTryPutFailure=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    public void run(){
      try {
        if (map.tryPut(key1,""String_Node_Str"",100,TimeUnit.MILLISECONDS) == false) {
          counter.decrementAndGet();
          waitTryPutFailure.countDown();
        }
        if (map.get(key1) == null) {
          counter.decrementAndGet();
        }
        if (map.tryPut(key2,""String_Node_Str"",100,TimeUnit.MILLISECONDS)) {
          counter.decrementAndGet();
        }
        if (map.get(key2).equals(""String_Node_Str"")) {
          counter.decrementAndGet();
        }
        if (map.tryPut(key1,""String_Node_Str"",5,TimeUnit.SECONDS)) {
          counter.decrementAndGet();
        }
        if (map.get(key1).equals(""String_Node_Str"")) {
          counter.decrementAndGet();
        }
        latch.countDown();
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
    }
  }
);
  thread.start();
  assertOpenEventually(waitTryPutFailure);
  map.unlock(""String_Node_Str"");
  assertOpenEventually(latch);
  assertEquals(0,counter.get());
  assertJoinable(thread);
}",0.832205201282508
47281,"public void register(){
  ioSelector.addTask(this);
  ioSelector.wakeup();
}","public void register(){
  ioSelector.addTaskAndWakeup(this);
}",0.7681159420289855
47282,"public void register(){
  ioSelector.addTask(this);
  ioSelector.wakeup();
}","public void register(){
  ioSelector.addTaskAndWakeup(this);
}",0.7681159420289855
47283,"/** 
 * Migrates this handler to a new IOSelector thread. The migration logic is rather simple: <p><ul> <li>Submit a de-registration task to a current IOSelector thread</li> <li>The de-registration task submits a registration task to the new IOSelector thread</li> </ul></p>
 * @param newOwner target IOSelector this handler migrates to
 */
public void migrate(final IOSelector newOwner){
  if (ioSelector == newOwner || !socketChannel.isOpen()) {
    return;
  }
  ioSelector.addTask(new MigrationTask(newOwner));
  ioSelector.wakeup();
}","/** 
 * Migrates this handler to a new IOSelector thread. The migration logic is rather simple: <p><ul> <li>Submit a de-registration task to a current IOSelector thread</li> <li>The de-registration task submits a registration task to the new IOSelector thread</li> </ul></p>
 * @param newOwner target IOSelector this handler migrates to
 */
public void migrate(final IOSelector newOwner){
  if (ioSelector == newOwner || !socketChannel.isOpen()) {
    return;
  }
  ioSelector.addTaskAndWakeup(new MigrationTask(newOwner));
}",0.9699248120300752
47284,"public void start(){
  ioSelector.addTask(new Runnable(){
    @Override public void run(){
      getSelectionKey();
    }
  }
);
  ioSelector.wakeup();
}","public void start(){
  ioSelector.addTaskAndWakeup(new Runnable(){
    @Override public void run(){
      getSelectionKey();
    }
  }
);
}",0.8904109589041096
47285,"void shutdown(){
  ioSelector.addTask(new Runnable(){
    @Override public void run(){
      try {
        socketChannel.closeInbound();
      }
 catch (      IOException e) {
        logger.finest(""String_Node_Str"",e);
      }
    }
  }
);
  ioSelector.wakeup();
}","void shutdown(){
  ioSelector.addTaskAndWakeup(new Runnable(){
    @Override public void run(){
      try {
        socketChannel.closeInbound();
      }
 catch (      IOException e) {
        logger.finest(""String_Node_Str"",e);
      }
    }
  }
);
}",0.9341085271317828
47286,"void setProtocol(final String protocol){
  final CountDownLatch latch=new CountDownLatch(1);
  ioSelector.addTask(new Runnable(){
    public void run(){
      createWriter(protocol);
      latch.countDown();
    }
  }
);
  ioSelector.wakeup();
  try {
    latch.await(TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"",e);
  }
}","void setProtocol(final String protocol){
  final CountDownLatch latch=new CountDownLatch(1);
  ioSelector.addTaskAndWakeup(new Runnable(){
    public void run(){
      createWriter(protocol);
      latch.countDown();
    }
  }
);
  try {
    latch.await(TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"",e);
  }
}",0.9571045576407506
47287,"/** 
 * Makes sure this WriteHandler is scheduled to be executed by the IO thread. <p/> This call is made by 'outside' threads that interact with the connection. For example when a packet is placed on the connection to be written. It will never be made by an IO thread. <p/> If the WriteHandler already is scheduled, the call is ignored.
 */
private void schedule(){
  if (scheduled.get()) {
    return;
  }
  if (!scheduled.compareAndSet(false,true)) {
    return;
  }
  ioSelector.addTask(this);
  ioSelector.wakeup();
}","/** 
 * Makes sure this WriteHandler is scheduled to be executed by the IO thread. <p/> This call is made by 'outside' threads that interact with the connection. For example when a packet is placed on the connection to be written. It will never be made by an IO thread. <p/> If the WriteHandler already is scheduled, the call is ignored.
 */
private void schedule(){
  if (scheduled.get()) {
    return;
  }
  if (!scheduled.compareAndSet(false,true)) {
    return;
  }
  ioSelector.addTaskAndWakeup(this);
}",0.9689320388349516
47288,"public void shutdown(){
  writeQueue.clear();
  urgentWriteQueue.clear();
  final CountDownLatch latch=new CountDownLatch(1);
  ioSelector.addTask(new Runnable(){
    @Override public void run(){
      try {
        socketChannel.closeOutbound();
      }
 catch (      IOException e) {
        logger.finest(""String_Node_Str"",e);
      }
 finally {
        latch.countDown();
      }
    }
  }
);
  ioSelector.wakeup();
  try {
    latch.await(TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
}","public void shutdown(){
  writeQueue.clear();
  urgentWriteQueue.clear();
  final CountDownLatch latch=new CountDownLatch(1);
  ioSelector.addTaskAndWakeup(new Runnable(){
    @Override public void run(){
      try {
        socketChannel.closeOutbound();
      }
 catch (      IOException e) {
        logger.finest(""String_Node_Str"",e);
      }
 finally {
        latch.countDown();
      }
    }
  }
);
  try {
    latch.await(TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
}",0.9703153988868276
47289,"@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.979591836734694
47290,"@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9806949806949808
47291,"@Override public boolean replace(Data key,Object oldValue,Object newValue,ExpiryPolicy expiryPolicy,String caller,int completionId){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean isHit=false;
  boolean replaced=false;
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  try {
    if (record == null || isExpired) {
      replaced=false;
    }
 else {
      isHit=true;
      Object currentValue=toValue(record);
      if (compare(currentValue,toValue(oldValue))) {
        replaced=updateRecordWithExpiry(key,newValue,record,expiryPolicy,now,false,completionId);
      }
 else {
        onRecordAccess(record,expiryPolicy,now);
        replaced=false;
      }
    }
    if (!replaced) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId);
    }
    onReplace(key,oldValue,newValue,expiryPolicy,caller,false,record,isExpired,replaced);
    updateReplaceStat(replaced,isHit,start);
    updateHasExpiringEntry(record);
    return replaced;
  }
 catch (  Throwable error) {
    onReplaceError(key,oldValue,newValue,expiryPolicy,caller,false,record,isExpired,replaced,error);
    throw ExceptionUtil.rethrow(error);
  }
}","@Override public boolean replace(Data key,Object oldValue,Object newValue,ExpiryPolicy expiryPolicy,String caller,int completionId){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean isHit=false;
  boolean replaced=false;
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  try {
    if (record == null || isExpired) {
      replaced=false;
    }
 else {
      isHit=true;
      Object currentValue=toStorageValue(record);
      if (compare(currentValue,toStorageValue(oldValue))) {
        replaced=updateRecordWithExpiry(key,newValue,record,expiryPolicy,now,false,completionId);
      }
 else {
        onRecordAccess(record,expiryPolicy,now);
        replaced=false;
      }
    }
    if (!replaced) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId);
    }
    onReplace(key,oldValue,newValue,expiryPolicy,caller,false,record,isExpired,replaced);
    updateReplaceStat(replaced,isHit,start);
    updateHasExpiringEntry(record);
    return replaced;
  }
 catch (  Throwable error) {
    onReplaceError(key,oldValue,newValue,expiryPolicy,caller,false,record,isExpired,replaced,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.9946646341463414
47292,"protected <T>T toValue(Object obj){
  if (obj instanceof Data) {
    return (T)dataToValue((Data)obj);
  }
 else   if (obj instanceof CacheRecord) {
    return (T)recordToValue((R)obj);
  }
 else {
    return (T)obj;
  }
}","protected Object toValue(Object obj){
  if (obj instanceof Data) {
    return dataToValue((Data)obj);
  }
 else   if (obj instanceof CacheRecord) {
    return recordToValue((R)obj);
  }
 else {
    return obj;
  }
}",0.1922196796338672
47293,protected abstract <T>R valueToRecord(T value);,protected abstract R valueToRecord(Object value);,0.8958333333333334
47294,protected abstract <T>T recordToValue(R record);,protected abstract Object recordToValue(R record);,0.8979591836734694
47295,"@Override public boolean remove(Data key,Object value,String caller,int completionId){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean removed=false;
  try {
    if (record == null || isExpired) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
      removed=false;
    }
 else {
      hitCount++;
      if (compare(toValue(record),toValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId);
      }
 else {
        long expiryTime=onRecordAccess(record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now);
        removed=false;
      }
    }
    if (!removed) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId);
    }
    onRemove(key,value,caller,false,record,removed);
    if (records.size() == 0) {
      hasExpiringEntry=false;
    }
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,caller,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}","@Override public boolean remove(Data key,Object value,String caller,int completionId){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean removed=false;
  try {
    if (record == null || isExpired) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
      removed=false;
    }
 else {
      hitCount++;
      if (compare(toStorageValue(record),toStorageValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId);
      }
 else {
        long expiryTime=onRecordAccess(record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now);
        removed=false;
      }
    }
    if (!removed) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId);
    }
    onRemove(key,value,caller,false,record,removed);
    if (records.size() == 0) {
      hasExpiringEntry=false;
    }
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,caller,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.9943910256410255
47296,protected abstract <T>T dataToValue(Data data);,protected abstract Object dataToValue(Data data);,0.8958333333333334
47297,protected abstract <T>Data valueToData(T value);,protected abstract Data valueToData(Object value);,0.8979591836734694
47298,"/** 
 * Gets the TopicOverloadPolicy for this reliable topic. 
 * @return the TopicOverloadPolicy.
 */
public TopicOverloadPolicy getTopicOverloadPolicy(){
  return topicOverloadPolicy;
}","/** 
 * Gets the TopicOverloadPolicy for this reliable topic.
 * @return the TopicOverloadPolicy.
 */
public TopicOverloadPolicy getTopicOverloadPolicy(){
  return topicOverloadPolicy;
}",0.9973190348525468
47299,"/** 
 * Scans the source object for any fields/methods that have been given a name prefix with   {@link Probe} annotation, and registering these fields/methods as metrics. If metrics with the same name already exist, their source/inputs will be updated. Multiple registrations of the same object are ignored. If an object has no @Gauge annotations, the call is ignored.
 * @param source     the source object to scan.
 * @param namePrefix search the source object for fields/methods that have this name prefix.
 * @throws NullPointerException     if namePrefix or source is null.
 * @throws IllegalArgumentException if the source contains Gauge annotation on a field/method of unsupported type.
 */
<S>void scanAndRegister(S source,String namePrefix);","/** 
 * Scans the source object for any fields/methods that have been given a name prefix with   {@link Probe}annotation, and registering these fields/methods as metrics. If metrics with the same name already exist, their source/inputs will be updated. Multiple registrations of the same object are ignored. If an object has no @Gauge annotations, the call is ignored.
 * @param source     the source object to scan.
 * @param namePrefix search the source object for fields/methods that have this name prefix.
 * @throws NullPointerException     if namePrefix or source is null.
 * @throws IllegalArgumentException if the source contains Gauge annotation on a field/method of unsupported type.
 */
<S>void scanAndRegister(S source,String namePrefix);",0.9993337774816788
47300,"/** 
 * Registers a probe. If a Metric with the given name already has an input, that input will be overwritten.
 * @param source  the source object.
 * @param name  the name of the metric.
 * @param input the input for the metric.
 * @throws NullPointerException if name or input is null.
 */
<S>void register(S source,String name,DoubleProbe<S> input);","/** 
 * Registers a probe. If a Metric with the given name already has an input, that input will be overwritten.
 * @param source the source object.
 * @param name   the name of the metric.
 * @param input  the input for the metric.
 * @throws NullPointerException if name or input is null.
 */
<S>void register(S source,String name,DoubleProbe<S> input);",0.995768688293371
47301,"/** 
 * Gets the accessible object probe type for this class object type. accessible object probe    class object      TYPE_PRIMITIVE_LONG = 1    byte, short, int, long TYPE_LONG_NUMBER = 2       Byte, Short, Integer, Long, AtomicInteger, AtomicLong TYPE_DOUBLE_PRIMITIVE = 3  double, float TYPE_DOUBLE_NUMBER = 4     Double, Float TYPE_COLLECTION = 5        Collection TYPE_MAP = 6               Map TYPE_COUNTER = 7           Counter
 * @param classType the class object type.
 * @return the accessible object probe type.
 */
static int getType(Class classType){
  Integer type=TYPES.get(classType);
  if (type != null) {
    return type;
  }
  List<Class<?>> flattenedClasses=new ArrayList<Class<?>>();
  flatten(classType,flattenedClasses);
  for (  Class<?> clazz : flattenedClasses) {
    type=TYPES.get(clazz);
    if (type != null) {
      return type;
    }
  }
  return -1;
}","/** 
 * Gets the accessible object probe type for this class object type. accessible object probe    class object TYPE_PRIMITIVE_LONG = 1    byte, short, int, long TYPE_LONG_NUMBER = 2       Byte, Short, Integer, Long, AtomicInteger, AtomicLong TYPE_DOUBLE_PRIMITIVE = 3  double, float TYPE_DOUBLE_NUMBER = 4     Double, Float TYPE_COLLECTION = 5        Collection TYPE_MAP = 6               Map TYPE_COUNTER = 7           Counter
 * @param classType the class object type.
 * @return the accessible object probe type.
 */
static int getType(Class classType){
  Integer type=TYPES.get(classType);
  if (type != null) {
    return type;
  }
  List<Class<?>> flattenedClasses=new ArrayList<Class<?>>();
  flatten(classType,flattenedClasses);
  for (  Class<?> clazz : flattenedClasses) {
    type=TYPES.get(clazz);
    if (type != null) {
      return type;
    }
  }
  return -1;
}",0.9971671388101984
47302,"public void cleanResources(ConstructorFunction<Object,Throwable> responseCtor,ClientConnection connection){
  final Iterator<Map.Entry<Integer,ClientInvocation>> iter=callIdMap.entrySet().iterator();
  while (iter.hasNext()) {
    final Map.Entry<Integer,ClientInvocation> entry=iter.next();
    final ClientInvocation invocation=entry.getValue();
    if (invocation.getSendConnection().equals(connection)) {
      iter.remove();
      invocation.notifyException(responseCtor.createNew(null));
      eventHandlerMap.remove(entry.getKey());
    }
  }
  final Iterator<ClientInvocation> iterator=eventHandlerMap.values().iterator();
  while (iterator.hasNext()) {
    final ClientInvocation invocation=iterator.next();
    if (invocation.getSendConnection().equals(connection)) {
      iterator.remove();
      invocation.notifyException(responseCtor.createNew(null));
    }
  }
}","public void cleanResources(ConstructorFunction<Object,Throwable> responseCtor,ClientConnection connection){
  final Iterator<Map.Entry<Integer,ClientInvocation>> iter=callIdMap.entrySet().iterator();
  while (iter.hasNext()) {
    final Map.Entry<Integer,ClientInvocation> entry=iter.next();
    final ClientInvocation invocation=entry.getValue();
    if (connection.equals(invocation.getSendConnection())) {
      iter.remove();
      invocation.notifyException(responseCtor.createNew(null));
      eventHandlerMap.remove(entry.getKey());
    }
  }
  final Iterator<ClientInvocation> iterator=eventHandlerMap.values().iterator();
  while (iterator.hasNext()) {
    final ClientInvocation invocation=iterator.next();
    if (connection.equals(invocation.getSendConnection())) {
      iterator.remove();
      invocation.notifyException(responseCtor.createNew(null));
    }
  }
}",0.958997722095672
47303,"public void cleanResources(ConstructorFunction<Object,Throwable> responseCtor,ClientConnection connection){
  final Iterator<Map.Entry<Integer,ClientInvocation>> iter=callIdMap.entrySet().iterator();
  while (iter.hasNext()) {
    final Map.Entry<Integer,ClientInvocation> entry=iter.next();
    final ClientInvocation invocation=entry.getValue();
    if (invocation.getSendConnection().equals(connection)) {
      iter.remove();
      invocation.notify(responseCtor.createNew(null));
      eventHandlerMap.remove(entry.getKey());
    }
  }
  final Iterator<ClientInvocation> iterator=eventHandlerMap.values().iterator();
  while (iterator.hasNext()) {
    final ClientInvocation invocation=iterator.next();
    if (invocation.getSendConnection().equals(connection)) {
      iterator.remove();
      invocation.notify(responseCtor.createNew(null));
    }
  }
}","public void cleanResources(ConstructorFunction<Object,Throwable> responseCtor,ClientConnection connection){
  final Iterator<Map.Entry<Integer,ClientInvocation>> iter=callIdMap.entrySet().iterator();
  while (iter.hasNext()) {
    final Map.Entry<Integer,ClientInvocation> entry=iter.next();
    final ClientInvocation invocation=entry.getValue();
    if (connection.equals(invocation.getSendConnection())) {
      iter.remove();
      invocation.notify(responseCtor.createNew(null));
      eventHandlerMap.remove(entry.getKey());
    }
  }
  final Iterator<ClientInvocation> iterator=eventHandlerMap.values().iterator();
  while (iterator.hasNext()) {
    final ClientInvocation invocation=iterator.next();
    if (connection.equals(invocation.getSendConnection())) {
      iterator.remove();
      invocation.notify(responseCtor.createNew(null));
    }
  }
}",0.958139534883721
47304,"@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.979591836734694
47305,"@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9806949806949808
47306,"@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.979591836734694
47307,"@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9806949806949808
47308,"@Override public boolean replace(Data key,Object oldValue,Object newValue,ExpiryPolicy expiryPolicy,String source,int completionId){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean isHit=false;
  boolean replaced=false;
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  try {
    if (record == null || isExpired) {
      replaced=false;
    }
 else {
      isHit=true;
      Object currentValue=toValue(record);
      if (compare(currentValue,toValue(oldValue))) {
        replaced=updateRecordWithExpiry(key,newValue,record,expiryPolicy,now,false,completionId);
      }
 else {
        onRecordAccess(key,record,expiryPolicy,now);
        replaced=false;
      }
    }
    if (!replaced) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE);
    }
    onReplace(key,oldValue,newValue,expiryPolicy,source,false,record,isExpired,replaced);
    updateReplaceStat(replaced,isHit,start);
    updateHasExpiringEntry(record);
    return replaced;
  }
 catch (  Throwable error) {
    onReplaceError(key,oldValue,newValue,expiryPolicy,source,false,record,isExpired,replaced,error);
    throw ExceptionUtil.rethrow(error);
  }
}","@Override public boolean replace(Data key,Object oldValue,Object newValue,ExpiryPolicy expiryPolicy,String source,int completionId){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean isHit=false;
  boolean replaced=false;
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  try {
    if (record == null || isExpired) {
      replaced=false;
    }
 else {
      isHit=true;
      Object currentValue=toStorageValue(record);
      if (compare(currentValue,toStorageValue(oldValue))) {
        replaced=updateRecordWithExpiry(key,newValue,record,expiryPolicy,now,false,completionId);
      }
 else {
        onRecordAccess(key,record,expiryPolicy,now);
        replaced=false;
      }
    }
    if (!replaced) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE);
    }
    onReplace(key,oldValue,newValue,expiryPolicy,source,false,record,isExpired,replaced);
    updateReplaceStat(replaced,isHit,start);
    updateHasExpiringEntry(record);
    return replaced;
  }
 catch (  Throwable error) {
    onReplaceError(key,oldValue,newValue,expiryPolicy,source,false,record,isExpired,replaced,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.9948453608247424
47309,"protected <T>T toValue(Object obj){
  if (obj instanceof Data) {
    return (T)dataToValue((Data)obj);
  }
 else   if (obj instanceof CacheRecord) {
    return (T)recordToValue((R)obj);
  }
 else {
    return (T)obj;
  }
}","protected Object toValue(Object obj){
  if (obj instanceof Data) {
    return dataToValue((Data)obj);
  }
 else   if (obj instanceof CacheRecord) {
    return recordToValue((R)obj);
  }
 else {
    return obj;
  }
}",0.1922196796338672
47310,protected abstract <T>T recordToValue(R record);,protected abstract Object recordToValue(R record);,0.8979591836734694
47311,"public boolean remove(Data key,Object value,String source,int completionId,String origin){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean removed=false;
  try {
    if (record == null || isExpired) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
      removed=false;
    }
 else {
      hitCount++;
      if (compare(toValue(record),toValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId,source,origin);
      }
 else {
        long expiryTime=onRecordAccess(key,record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now,source,origin);
        removed=false;
      }
    }
    if (!removed) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,origin);
    }
    onRemove(key,value,source,false,record,removed);
    if (records.size() == 0) {
      hasExpiringEntry=false;
    }
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,source,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}","public boolean remove(Data key,Object value,String source,int completionId,String origin){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean removed=false;
  try {
    if (record == null || isExpired) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
      removed=false;
    }
 else {
      hitCount++;
      if (compare(toStorageValue(record),toStorageValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId,source,origin);
      }
 else {
        long expiryTime=onRecordAccess(key,record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now,source,origin);
        removed=false;
      }
    }
    if (!removed) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,origin);
    }
    onRemove(key,value,source,false,record,removed);
    if (records.size() == 0) {
      hasExpiringEntry=false;
    }
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,source,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.994748687171793
47312,protected abstract <T>T dataToValue(Data data);,protected abstract Object dataToValue(Data data);,0.8958333333333334
47313,protected abstract <T>Data valueToData(T value);,protected abstract Data valueToData(Object value);,0.8979591836734694
47314,"@Override protected <T>T dataToValue(Data data){
  return (T)serializationService.toObject(data);
}","@Override protected Object dataToValue(Data data){
  return serializationService.toObject(data);
}",0.934010152284264
47315,"@Override protected <T>T recordToValue(CacheRecord record){
  Object value=record.getValue();
  if (value instanceof Data) {
    return dataToValue((Data)value);
  }
 else {
    return (T)value;
  }
}","@Override protected Object recordToValue(CacheRecord record){
  Object value=record.getValue();
  if (value instanceof Data) {
switch (cacheConfig.getInMemoryFormat()) {
case BINARY:
      return value;
case OBJECT:
    return dataToValue((Data)value);
default :
  throw new IllegalStateException(""String_Node_Str"" + cacheConfig.getInMemoryFormat());
}
}
 else {
return value;
}
}",0.4068965517241379
47316,"@Override protected <T>CacheRecord createRecord(T value,long creationTime,long expiryTime){
  evictIfRequired();
  return cacheRecordFactory.newRecordWithExpiry(value,creationTime,expiryTime);
}","@Override protected CacheRecord createRecord(Object value,long creationTime,long expiryTime){
  evictIfRequired();
  return cacheRecordFactory.newRecordWithExpiry(value,creationTime,expiryTime);
}",0.9743589743589745
47317,"@Override protected <T>Data valueToData(T value){
  return cacheService.toData(value);
}","@Override protected Data valueToData(Object value){
  return cacheService.toData(value);
}",0.9438202247191012
47318,"@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.979591836734694
47319,"@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9806949806949808
47320,"@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.979591836734694
47321,"@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9806949806949808
47322,"@Override public boolean replace(Data key,Object oldValue,Object newValue,ExpiryPolicy expiryPolicy,String source,int completionId){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean isHit=false;
  boolean replaced=false;
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  try {
    if (record == null || isExpired) {
      replaced=false;
    }
 else {
      isHit=true;
      Object currentValue=toValue(record);
      if (compare(currentValue,toValue(oldValue))) {
        replaced=updateRecordWithExpiry(key,newValue,record,expiryPolicy,now,false,completionId);
      }
 else {
        onRecordAccess(key,record,expiryPolicy,now);
        replaced=false;
      }
    }
    if (!replaced) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE);
    }
    onReplace(key,oldValue,newValue,expiryPolicy,source,false,record,isExpired,replaced);
    updateReplaceStat(replaced,isHit,start);
    updateHasExpiringEntry(record);
    return replaced;
  }
 catch (  Throwable error) {
    onReplaceError(key,oldValue,newValue,expiryPolicy,source,false,record,isExpired,replaced,error);
    throw ExceptionUtil.rethrow(error);
  }
}","@Override public boolean replace(Data key,Object oldValue,Object newValue,ExpiryPolicy expiryPolicy,String source,int completionId){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean isHit=false;
  boolean replaced=false;
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  try {
    if (record == null || isExpired) {
      replaced=false;
    }
 else {
      isHit=true;
      Object currentValue=toStorageValue(record);
      if (compare(currentValue,toStorageValue(oldValue))) {
        replaced=updateRecordWithExpiry(key,newValue,record,expiryPolicy,now,false,completionId);
      }
 else {
        onRecordAccess(key,record,expiryPolicy,now);
        replaced=false;
      }
    }
    if (!replaced) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE);
    }
    onReplace(key,oldValue,newValue,expiryPolicy,source,false,record,isExpired,replaced);
    updateReplaceStat(replaced,isHit,start);
    updateHasExpiringEntry(record);
    return replaced;
  }
 catch (  Throwable error) {
    onReplaceError(key,oldValue,newValue,expiryPolicy,source,false,record,isExpired,replaced,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.9948453608247424
47323,"protected <T>T toValue(Object obj){
  if (obj instanceof Data) {
    return (T)dataToValue((Data)obj);
  }
 else   if (obj instanceof CacheRecord) {
    return (T)recordToValue((R)obj);
  }
 else {
    return (T)obj;
  }
}","protected Object toValue(Object obj){
  if (obj instanceof Data) {
    return dataToValue((Data)obj);
  }
 else   if (obj instanceof CacheRecord) {
    return recordToValue((R)obj);
  }
 else {
    return obj;
  }
}",0.1922196796338672
47324,protected abstract <T>T recordToValue(R record);,protected abstract Object recordToValue(R record);,0.8979591836734694
47325,"public boolean remove(Data key,Object value,String source,int completionId,String origin){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean removed=false;
  try {
    if (record == null || isExpired) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
      removed=false;
    }
 else {
      hitCount++;
      if (compare(toValue(record),toValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId,source,origin);
      }
 else {
        long expiryTime=onRecordAccess(key,record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now,source,origin);
        removed=false;
      }
    }
    if (!removed) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,origin);
    }
    onRemove(key,value,source,false,record,removed);
    if (records.size() == 0) {
      hasExpiringEntry=false;
    }
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,source,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}","public boolean remove(Data key,Object value,String source,int completionId,String origin){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean removed=false;
  try {
    if (record == null || isExpired) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
      removed=false;
    }
 else {
      hitCount++;
      if (compare(toStorageValue(record),toStorageValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId,source,origin);
      }
 else {
        long expiryTime=onRecordAccess(key,record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now,source,origin);
        removed=false;
      }
    }
    if (!removed) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,origin);
    }
    onRemove(key,value,source,false,record,removed);
    if (records.size() == 0) {
      hasExpiringEntry=false;
    }
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,source,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.994748687171793
47326,protected abstract <T>T dataToValue(Data data);,protected abstract Object dataToValue(Data data);,0.8958333333333334
47327,protected abstract <T>Data valueToData(T value);,protected abstract Data valueToData(Object value);,0.8979591836734694
47328,"@Override protected <T>T dataToValue(Data data){
  return (T)serializationService.toObject(data);
}","@Override protected Object dataToValue(Data data){
  return serializationService.toObject(data);
}",0.934010152284264
47329,"@Override protected <T>T recordToValue(CacheRecord record){
  Object value=record.getValue();
  if (value instanceof Data) {
    return dataToValue((Data)value);
  }
 else {
    return (T)value;
  }
}","@Override protected Object recordToValue(CacheRecord record){
  Object value=record.getValue();
  if (value instanceof Data) {
switch (cacheConfig.getInMemoryFormat()) {
case BINARY:
      return value;
case OBJECT:
    return dataToValue((Data)value);
default :
  throw new IllegalStateException(""String_Node_Str"" + cacheConfig.getInMemoryFormat());
}
}
 else {
return value;
}
}",0.4068965517241379
47330,"@Override protected <T>CacheRecord createRecord(T value,long creationTime,long expiryTime){
  evictIfRequired();
  return cacheRecordFactory.newRecordWithExpiry(value,creationTime,expiryTime);
}","@Override protected CacheRecord createRecord(Object value,long creationTime,long expiryTime){
  evictIfRequired();
  return cacheRecordFactory.newRecordWithExpiry(value,creationTime,expiryTime);
}",0.9743589743589745
47331,"@Override protected <T>Data valueToData(T value){
  return cacheService.toData(value);
}","@Override protected Data valueToData(Object value){
  return cacheService.toData(value);
}",0.9438202247191012
47332,"@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V get(K key,ExpiryPolicy expiryPolicy){
  final Future<V> f=getAsync(key,expiryPolicy);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.979591836734694
47333,"@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return f.get();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V getAndRemove(K key){
  final ICompletableFuture<V> f=removeAsyncInternal(key,null,false,true,true);
  try {
    return toObject(f.get());
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9806949806949808
47334,"@Override public boolean replace(Data key,Object oldValue,Object newValue,ExpiryPolicy expiryPolicy,String caller,int completionId){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean isHit=false;
  boolean replaced=false;
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  try {
    if (record == null || isExpired) {
      replaced=false;
    }
 else {
      isHit=true;
      Object currentValue=toValue(record);
      if (compare(currentValue,toValue(oldValue))) {
        replaced=updateRecordWithExpiry(key,newValue,record,expiryPolicy,now,false,completionId);
      }
 else {
        onRecordAccess(record,expiryPolicy,now);
        replaced=false;
      }
    }
    if (!replaced) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId);
    }
    onReplace(key,oldValue,newValue,expiryPolicy,caller,false,record,isExpired,replaced);
    updateReplaceStat(replaced,isHit,start);
    updateHasExpiringEntry(record);
    return replaced;
  }
 catch (  Throwable error) {
    onReplaceError(key,oldValue,newValue,expiryPolicy,caller,false,record,isExpired,replaced,error);
    throw ExceptionUtil.rethrow(error);
  }
}","@Override public boolean replace(Data key,Object oldValue,Object newValue,ExpiryPolicy expiryPolicy,String caller,int completionId){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean isHit=false;
  boolean replaced=false;
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  try {
    if (record == null || isExpired) {
      replaced=false;
    }
 else {
      isHit=true;
      Object currentValue=toStorageValue(record);
      if (compare(currentValue,toStorageValue(oldValue))) {
        replaced=updateRecordWithExpiry(key,newValue,record,expiryPolicy,now,false,completionId);
      }
 else {
        onRecordAccess(record,expiryPolicy,now);
        replaced=false;
      }
    }
    if (!replaced) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId);
    }
    onReplace(key,oldValue,newValue,expiryPolicy,caller,false,record,isExpired,replaced);
    updateReplaceStat(replaced,isHit,start);
    updateHasExpiringEntry(record);
    return replaced;
  }
 catch (  Throwable error) {
    onReplaceError(key,oldValue,newValue,expiryPolicy,caller,false,record,isExpired,replaced,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.9946646341463414
47335,"protected <T>T toValue(Object obj){
  if (obj instanceof Data) {
    return (T)dataToValue((Data)obj);
  }
 else   if (obj instanceof CacheRecord) {
    return (T)recordToValue((R)obj);
  }
 else {
    return (T)obj;
  }
}","protected Object toValue(Object obj){
  if (obj instanceof Data) {
    return dataToValue((Data)obj);
  }
 else   if (obj instanceof CacheRecord) {
    return recordToValue((R)obj);
  }
 else {
    return obj;
  }
}",0.1922196796338672
47336,protected abstract <T>R valueToRecord(T value);,protected abstract R valueToRecord(Object value);,0.8958333333333334
47337,protected abstract <T>T recordToValue(R record);,protected abstract Object recordToValue(R record);,0.8979591836734694
47338,"@Override public boolean remove(Data key,Object value,String caller,int completionId){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean removed=false;
  try {
    if (record == null || isExpired) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
      removed=false;
    }
 else {
      hitCount++;
      if (compare(toValue(record),toValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId);
      }
 else {
        long expiryTime=onRecordAccess(record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now);
        removed=false;
      }
    }
    if (!removed) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId);
    }
    onRemove(key,value,caller,false,record,removed);
    if (records.size() == 0) {
      hasExpiringEntry=false;
    }
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,caller,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}","@Override public boolean remove(Data key,Object value,String caller,int completionId){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean removed=false;
  try {
    if (record == null || isExpired) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
      removed=false;
    }
 else {
      hitCount++;
      if (compare(toStorageValue(record),toStorageValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId);
      }
 else {
        long expiryTime=onRecordAccess(record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now);
        removed=false;
      }
    }
    if (!removed) {
      publishEvent(CacheEventType.COMPLETED,key,null,null,false,completionId);
    }
    onRemove(key,value,caller,false,record,removed);
    if (records.size() == 0) {
      hasExpiringEntry=false;
    }
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,caller,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.9943910256410255
47339,protected abstract <T>T dataToValue(Data data);,protected abstract Object dataToValue(Data data);,0.8958333333333334
47340,protected abstract <T>Data valueToData(T value);,protected abstract Data valueToData(Object value);,0.8979591836734694
47341,"@Override protected <T>T recordToValue(CacheRecord record){
  Object value=record.getValue();
  if (value instanceof Data) {
    return dataToValue((Data)value);
  }
 else {
    return (T)value;
  }
}","@Override protected Object recordToValue(CacheRecord record){
  Object value=record.getValue();
  if (value instanceof Data) {
switch (cacheConfig.getInMemoryFormat()) {
case BINARY:
      return value;
case OBJECT:
    return dataToValue((Data)value);
default :
  throw new IllegalStateException(""String_Node_Str"" + cacheConfig.getInMemoryFormat());
}
}
 else {
return value;
}
}",0.4068965517241379
47342,"@Override protected <T>T dataToValue(Data data){
  return (T)serializationService.toObject(data);
}","@Override protected Object dataToValue(Data data){
  return serializationService.toObject(data);
}",0.934010152284264
47343,"@Override protected <T>CacheRecord createRecord(T value,long creationTime,long expiryTime){
  evictIfRequired();
  return cacheRecordFactory.newRecordWithExpiry(value,creationTime,expiryTime);
}","@Override protected CacheRecord createRecord(Object value,long creationTime,long expiryTime){
  evictIfRequired();
  return cacheRecordFactory.newRecordWithExpiry(value,creationTime,expiryTime);
}",0.9743589743589745
47344,"@Override protected <T>Data valueToData(T value){
  return cacheService.toData(value);
}","@Override protected Data valueToData(Object value){
  return cacheService.toData(value);
}",0.9438202247191012
47345,"@Override protected <T>CacheRecord valueToRecord(T value){
  return cacheRecordFactory.newRecord(value);
}","@Override protected CacheRecord valueToRecord(Object value){
  return cacheRecordFactory.newRecord(value);
}",0.9532710280373832
47346,"protected AbstractCompletableFuture(NodeEngine nodeEngine,ILogger logger){
  this.nodeEngine=nodeEngine;
  this.logger=logger;
  this.callbackUpdater=AtomicReferenceFieldUpdater.newUpdater(AbstractCompletableFuture.class,ExecutionCallbackNode.class,""String_Node_Str"");
  this.resultUpdater=AtomicReferenceFieldUpdater.newUpdater(AbstractCompletableFuture.class,Object.class,""String_Node_Str"");
}","protected AbstractCompletableFuture(NodeEngine nodeEngine,ILogger logger){
  this.nodeEngine=nodeEngine;
  this.logger=logger;
}",0.4894837476099426
47347,"protected void fireCallbacks(){
  ExecutionCallbackNode<V> callbackChain;
  for (; ; ) {
    callbackChain=callbackHead;
    if (callbackUpdater.compareAndSet(this,callbackChain,null)) {
      break;
    }
  }
  while (callbackChain != null) {
    runAsynchronous(callbackChain.callback,callbackChain.executor);
    callbackChain=callbackChain.next;
  }
}","protected void fireCallbacks(ExecutionCallbackNode<V> callbackChain){
  while (callbackChain != null) {
    runAsynchronous(callbackChain.callback,callbackChain.executor);
    callbackChain=callbackChain.next;
  }
}",0.7543859649122807
47348,"public void setResult(Object result){
  if (resultUpdater.compareAndSet(this,NULL_VALUE,result)) {
    fireCallbacks();
  }
}","public void setResult(Object result){
  ExecutionCallbackNode<V> callbackChain;
synchronized (completionLock) {
    if (isDoneInternal()) {
      return;
    }
    this.result=result;
    callbackChain=callbackHead;
    callbackHead=null;
  }
  fireCallbacks(callbackChain);
}",0.2942643391521197
47349,"private void runAsynchronous(final ExecutionCallback<V> callback,final Executor executor){
  final Object result=this.result;
  executor.execute(new Runnable(){
    @Override public void run(){
      try {
        if (result instanceof Throwable) {
          callback.onFailure((Throwable)result);
        }
 else {
          callback.onResponse((V)result);
        }
      }
 catch (      Throwable cause) {
        logger.severe(""String_Node_Str"" + callback + ""String_Node_Str""+ AbstractCompletableFuture.this,cause);
      }
    }
  }
);
}","private void runAsynchronous(final ExecutionCallback<V> callback,final Executor executor){
  try {
    final Object result=this.result;
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          if (result instanceof Throwable) {
            callback.onFailure((Throwable)result);
          }
 else {
            callback.onResponse((V)result);
          }
        }
 catch (        Throwable cause) {
          logger.severe(""String_Node_Str"" + callback + ""String_Node_Str""+ AbstractCompletableFuture.this,cause);
        }
      }
    }
);
  }
 catch (  RejectedExecutionException e) {
    logger.warning(""String_Node_Str"" + callback + ""String_Node_Str"",e);
  }
}",0.837620578778135
47350,"@Override public boolean isDone(){
  return result != NULL_VALUE;
}","@Override public boolean isDone(){
  return isDoneInternal();
}",0.7538461538461538
47351,"@Override public void andThen(ExecutionCallback<V> callback,Executor executor){
  isNotNull(callback,""String_Node_Str"");
  isNotNull(executor,""String_Node_Str"");
  if (isDone()) {
    runAsynchronous(callback,executor);
    return;
  }
  for (; ; ) {
    ExecutionCallbackNode oldCallbackHead=callbackHead;
    ExecutionCallbackNode newCallbackHead=new ExecutionCallbackNode<V>(callback,executor,oldCallbackHead);
    if (callbackUpdater.compareAndSet(this,oldCallbackHead,newCallbackHead)) {
      break;
    }
  }
}","@Override public void andThen(ExecutionCallback<V> callback,Executor executor){
  isNotNull(callback,""String_Node_Str"");
  isNotNull(executor,""String_Node_Str"");
  if (isDoneInternal()) {
    runAsynchronous(callback,executor);
    return;
  }
synchronized (completionLock) {
    if (isDoneInternal()) {
      runAsynchronous(callback,executor);
      return;
    }
    this.callbackHead=new ExecutionCallbackNode<V>(callback,executor,callbackHead);
  }
}",0.6646090534979424
47352,"protected AbstractCompletableFuture(NodeEngine nodeEngine,ILogger logger){
  this.nodeEngine=nodeEngine;
  this.logger=logger;
  this.callbackUpdater=AtomicReferenceFieldUpdater.newUpdater(AbstractCompletableFuture.class,ExecutionCallbackNode.class,""String_Node_Str"");
  this.resultUpdater=AtomicReferenceFieldUpdater.newUpdater(AbstractCompletableFuture.class,Object.class,""String_Node_Str"");
}","protected AbstractCompletableFuture(NodeEngine nodeEngine,ILogger logger){
  this.nodeEngine=nodeEngine;
  this.logger=logger;
}",0.4894837476099426
47353,"protected void fireCallbacks(){
  ExecutionCallbackNode<V> callbackChain;
  for (; ; ) {
    callbackChain=callbackHead;
    if (callbackUpdater.compareAndSet(this,callbackChain,null)) {
      break;
    }
  }
  while (callbackChain != null) {
    runAsynchronous(callbackChain.callback,callbackChain.executor);
    callbackChain=callbackChain.next;
  }
}","protected void fireCallbacks(ExecutionCallbackNode<V> callbackChain){
  while (callbackChain != null) {
    runAsynchronous(callbackChain.callback,callbackChain.executor);
    callbackChain=callbackChain.next;
  }
}",0.7543859649122807
47354,"public void setResult(Object result){
  if (resultUpdater.compareAndSet(this,NULL_VALUE,result)) {
    fireCallbacks();
  }
}","public void setResult(Object result){
  ExecutionCallbackNode<V> callbackChain;
synchronized (completionLock) {
    if (isDoneInternal()) {
      return;
    }
    this.result=result;
    callbackChain=callbackHead;
    callbackHead=null;
  }
  fireCallbacks(callbackChain);
}",0.2942643391521197
47355,"private void runAsynchronous(final ExecutionCallback<V> callback,final Executor executor){
  final Object result=this.result;
  executor.execute(new Runnable(){
    @Override public void run(){
      try {
        if (result instanceof Throwable) {
          callback.onFailure((Throwable)result);
        }
 else {
          callback.onResponse((V)result);
        }
      }
 catch (      Throwable cause) {
        logger.severe(""String_Node_Str"" + callback + ""String_Node_Str""+ AbstractCompletableFuture.this,cause);
      }
    }
  }
);
}","private void runAsynchronous(final ExecutionCallback<V> callback,final Executor executor){
  try {
    final Object result=this.result;
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          if (result instanceof Throwable) {
            callback.onFailure((Throwable)result);
          }
 else {
            callback.onResponse((V)result);
          }
        }
 catch (        Throwable cause) {
          logger.severe(""String_Node_Str"" + callback + ""String_Node_Str""+ AbstractCompletableFuture.this,cause);
        }
      }
    }
);
  }
 catch (  RejectedExecutionException e) {
    logger.warning(""String_Node_Str"" + callback + ""String_Node_Str"",e);
  }
}",0.837620578778135
47356,"@Override public boolean isDone(){
  return result != NULL_VALUE;
}","@Override public boolean isDone(){
  return isDoneInternal();
}",0.7538461538461538
47357,"@Override public void andThen(ExecutionCallback<V> callback,Executor executor){
  isNotNull(callback,""String_Node_Str"");
  isNotNull(executor,""String_Node_Str"");
  if (isDone()) {
    runAsynchronous(callback,executor);
    return;
  }
  for (; ; ) {
    ExecutionCallbackNode oldCallbackHead=callbackHead;
    ExecutionCallbackNode newCallbackHead=new ExecutionCallbackNode<V>(callback,executor,oldCallbackHead);
    if (callbackUpdater.compareAndSet(this,oldCallbackHead,newCallbackHead)) {
      break;
    }
  }
}","@Override public void andThen(ExecutionCallback<V> callback,Executor executor){
  isNotNull(callback,""String_Node_Str"");
  isNotNull(executor,""String_Node_Str"");
  if (isDoneInternal()) {
    runAsynchronous(callback,executor);
    return;
  }
synchronized (completionLock) {
    if (isDoneInternal()) {
      runAsynchronous(callback,executor);
      return;
    }
    this.callbackHead=new ExecutionCallbackNode<V>(callback,executor,callbackHead);
  }
}",0.6646090534979424
47358,"/** 
 * This test calls   {@link IMap} methods once which are expected to throw {@link QueryResultSizeExceededException}. <p/> This test fills the map to an amount where the exception is safely triggered. Then all   {@link IMap} methods are calledwhich should trigger the exception. <p/> This test fails if any of the called methods does not trigger the exception.
 * @param partitionCount  number of partitions the created cluster
 * @param limit           result size limit which will be configured for the cluster
 * @param preCheckTrigger number of partitions which will be used for local pre-check, <tt>-1</tt> deactivates the pre-check
 */
protected void runClientMapTestWithException(int partitionCount,int limit,int preCheckTrigger){
  internalSetUpClient(partitionCount,1,limit,preCheckTrigger);
  fillToUpperLimit(serverMap,clientMap);
  internalRunWithException(clientMap);
  shutdown(serverMap);
}","/** 
 * This test calls   {@link IMap} methods once which are expected to throw {@link QueryResultSizeExceededException}. <p/> This test fills the map to an amount where the exception is safely triggered. Then all   {@link IMap} methods are calledwhich should trigger the exception. <p/> This test fails if any of the called methods does not trigger the exception.
 * @param partitionCount  number of partitions the created cluster
 * @param limit           result size limit which will be configured for the cluster
 * @param preCheckTrigger number of partitions which will be used for local pre-check, <tt>-1</tt> deactivates the pre-check
 */
protected void runClientMapTestWithException(int partitionCount,int limit,int preCheckTrigger){
  internalSetUpClient(partitionCount,1,limit,preCheckTrigger);
  fillToUpperLimit(serverMap,clientMap);
  internalRunWithException(clientMap);
}",0.9871866295264624
47359,"/** 
 * Test which calls   {@link TransactionalMap} methods which are expected to throw {@link QueryResultSizeExceededException}. <p/> This test fills the map to an amount where the exception is safely triggered. Then all   {@link TransactionalMap} methods arecalled which should trigger the exception. <p/> This test fails if any of the called methods does not trigger the exception.
 * @param partitionCount  number of partitions the created cluster
 * @param limit           result size limit which will be configured for the cluster
 * @param preCheckTrigger number of partitions which will be used for local pre-check, <tt>-1</tt> deactivates the pre-check
 */
protected void runClientMapTestTxnWithException(int partitionCount,int limit,int preCheckTrigger){
  internalSetUpClient(partitionCount,1,limit,preCheckTrigger);
  fillToUpperLimit(serverMap,clientMap);
  internalRunTxnWithException(clientMap.getName());
  shutdown(serverMap);
}","/** 
 * Test which calls   {@link TransactionalMap} methods which are expected to throw {@link QueryResultSizeExceededException}. <p/> This test fills the map to an amount where the exception is safely triggered. Then all   {@link TransactionalMap} methods arecalled which should trigger the exception. <p/> This test fails if any of the called methods does not trigger the exception.
 * @param partitionCount  number of partitions the created cluster
 * @param limit           result size limit which will be configured for the cluster
 * @param preCheckTrigger number of partitions which will be used for local pre-check, <tt>-1</tt> deactivates the pre-check
 */
protected void runClientMapTestTxnWithException(int partitionCount,int limit,int preCheckTrigger){
  internalSetUpClient(partitionCount,1,limit,preCheckTrigger);
  fillToUpperLimit(serverMap,clientMap);
  internalRunTxnWithException(clientMap.getName());
}",0.987680771290841
47360,"/** 
 * Calls   {@link TransactionalMap} methods once which are expected to throw {@link QueryResultSizeExceededException}. <p/> This method requires the map to be filled to an amount where the exception is safely triggered. <p/> This methods fails if any of the called methods does not trigger the exception.
 */
private void internalRunTxnWithException(String mapName){
  TransactionContext transactionContext=instance.newTransactionContext();
  transactionContext.beginTransaction();
  TransactionalMap<Object,Integer> txnMap=transactionContext.getMap(mapName);
  try {
    txnMap.values(TruePredicate.INSTANCE);
    failExpectedException(""String_Node_Str"");
  }
 catch (  QueryResultSizeExceededException e) {
    EmptyStatement.ignore(e);
  }
  try {
    txnMap.keySet(TruePredicate.INSTANCE);
    failExpectedException(""String_Node_Str"");
  }
 catch (  QueryResultSizeExceededException e) {
    EmptyStatement.ignore(e);
  }
  transactionContext.rollbackTransaction();
}","/** 
 * Calls   {@link TransactionalMap} methods once which are expected to throw {@link QueryResultSizeExceededException}. <p/> This method requires the map to be filled to an amount where the exception is safely triggered. <p/> This methods fails if any of the called methods does not trigger the exception.
 */
private void internalRunTxnWithException(String mapName){
  TransactionContext transactionContext=instance.newTransactionContext();
  try {
    transactionContext.beginTransaction();
    TransactionalMap<Object,Integer> txnMap=transactionContext.getMap(mapName);
    try {
      txnMap.values(TruePredicate.INSTANCE);
      failExpectedException(""String_Node_Str"");
    }
 catch (    QueryResultSizeExceededException e) {
      checkException(e);
    }
    try {
      txnMap.keySet(TruePredicate.INSTANCE);
      failExpectedException(""String_Node_Str"");
    }
 catch (    QueryResultSizeExceededException e) {
      checkException(e);
    }
  }
  finally {
    transactionContext.rollbackTransaction();
  }
}",0.878
47361,"/** 
 * This test calls   {@link IMap} methods once which are not expected to throw {@link QueryResultSizeExceededException}. <p/> This test fills the map to an amount where the exception is safely triggered. Then all   {@link IMap} methods are calledwhich should not trigger the exception. <p/> This methods fails if any of the called methods triggers the exception.
 * @param partitionCount  number of partitions the created cluster
 * @param limit           result size limit which will be configured for the cluster
 * @param preCheckTrigger number of partitions which will be used for local pre-check, <tt>-1</tt> deactivates the pre-check
 */
protected void runClientMapTestWithoutException(int partitionCount,int limit,int preCheckTrigger){
  internalSetUpClient(partitionCount,1,limit,preCheckTrigger);
  fillToUpperLimit(serverMap,clientMap);
  internalRunWithoutException(clientMap);
  shutdown(serverMap);
}","/** 
 * This test calls   {@link IMap} methods once which are not expected to throw {@link QueryResultSizeExceededException}. <p/> This test fills the map to an amount where the exception is safely triggered. Then all   {@link IMap} methods are calledwhich should not trigger the exception. <p/> This methods fails if any of the called methods triggers the exception.
 * @param partitionCount  number of partitions the created cluster
 * @param limit           result size limit which will be configured for the cluster
 * @param preCheckTrigger number of partitions which will be used for local pre-check, <tt>-1</tt> deactivates the pre-check
 */
protected void runClientMapTestWithoutException(int partitionCount,int limit,int preCheckTrigger){
  internalSetUpClient(partitionCount,1,limit,preCheckTrigger);
  fillToUpperLimit(serverMap,clientMap);
  internalRunWithoutException(clientMap);
}",0.9873138444567016
47362,"/** 
 * Test which calls   {@link TransactionalMap} methods which are not expected to throw {@link QueryResultSizeExceededException}. <p/> This test fills the map to an amount where the exception is safely triggered. Then all   {@link TransactionalMap} methods arecalled which should not trigger the exception. <p/> This methods fails if any of the called methods triggers the exception.
 * @param partitionCount  number of partitions the created cluster
 * @param limit           result size limit which will be configured for the cluster
 * @param preCheckTrigger number of partitions which will be used for local pre-check, <tt>-1</tt> deactivates the pre-check
 */
protected void runClientMapTestTxnWithoutException(int partitionCount,int limit,int preCheckTrigger){
  internalSetUpClient(partitionCount,1,limit,preCheckTrigger);
  fillToUpperLimit(serverMap,clientMap);
  internalRunTxnWithoutException(clientMap.getName());
  shutdown(serverMap);
}","/** 
 * Test which calls   {@link TransactionalMap} methods which are not expected to throw {@link QueryResultSizeExceededException}. <p/> This test fills the map to an amount where the exception is safely triggered. Then all   {@link TransactionalMap} methods arecalled which should not trigger the exception. <p/> This methods fails if any of the called methods triggers the exception.
 * @param partitionCount  number of partitions the created cluster
 * @param limit           result size limit which will be configured for the cluster
 * @param preCheckTrigger number of partitions which will be used for local pre-check, <tt>-1</tt> deactivates the pre-check
 */
protected void runClientMapTestTxnWithoutException(int partitionCount,int limit,int preCheckTrigger){
  internalSetUpClient(partitionCount,1,limit,preCheckTrigger);
  fillToUpperLimit(serverMap,clientMap);
  internalRunTxnWithoutException(clientMap.getName());
}",0.9877984084880636
47363,"/** 
 * Calls   {@link TransactionalMap} methods once which are not expected to throw a {@link QueryResultSizeExceededException}. <p/> This method requires the map to be filled to an amount where the exception is safely triggered. <p/> This methods fails if any of the called methods triggers the exception.
 */
private void internalRunTxnWithoutException(String mapName){
  TransactionContext transactionContext=instance.newTransactionContext();
  transactionContext.beginTransaction();
  TransactionalMap<Object,Integer> txnMap=transactionContext.getMap(mapName);
  try {
    assertEquals(""String_Node_Str"",upperLimit,txnMap.values().size());
  }
 catch (  QueryResultSizeExceededException e) {
    failUnwantedException(""String_Node_Str"");
  }
  try {
    assertEquals(""String_Node_Str"",upperLimit,txnMap.keySet().size());
  }
 catch (  QueryResultSizeExceededException e) {
    failUnwantedException(""String_Node_Str"");
  }
  transactionContext.rollbackTransaction();
}","/** 
 * Calls   {@link TransactionalMap} methods once which are not expected to throw a {@link QueryResultSizeExceededException}. <p/> This method requires the map to be filled to an amount where the exception is safely triggered. <p/> This methods fails if any of the called methods triggers the exception.
 */
private void internalRunTxnWithoutException(String mapName){
  TransactionContext transactionContext=instance.newTransactionContext();
  try {
    transactionContext.beginTransaction();
    TransactionalMap<Object,Integer> txnMap=transactionContext.getMap(mapName);
    try {
      assertEquals(""String_Node_Str"",upperLimit,txnMap.values().size());
    }
 catch (    QueryResultSizeExceededException e) {
      failUnwantedException(""String_Node_Str"");
    }
    try {
      assertEquals(""String_Node_Str"",upperLimit,txnMap.keySet().size());
    }
 catch (    QueryResultSizeExceededException e) {
      failUnwantedException(""String_Node_Str"");
    }
  }
  finally {
    transactionContext.rollbackTransaction();
  }
}",0.9710578842315368
47364,"/** 
 * This test calls   {@link IMap} methods which have to be implemented but are not supported by the client.<p/> This methods fails if any of the called methods does not throw a  {@link UnsupportedOperationException}.
 */
protected void runClientMapTestCheckUnsupported(){
  internalSetUpClient(PARTITION_COUNT,1,1,PRE_CHECK_TRIGGER_LIMIT_INACTIVE);
  internalRunCheckUnsupported(clientMap);
  shutdown(serverMap);
}","/** 
 * This test calls   {@link IMap} methods which have to be implemented but are not supported by the client.<p/> This methods fails if any of the called methods does not throw a  {@link UnsupportedOperationException}.
 */
protected void runClientMapTestCheckUnsupported(){
  internalSetUpClient(PARTITION_COUNT,1,1,PRE_CHECK_TRIGGER_LIMIT_INACTIVE);
  internalRunCheckUnsupported(clientMap);
}",0.9718482252141984
47365,"/** 
 * Calls   {@link IMap} methods once which are expected to throw {@link QueryResultSizeExceededException}. <p/> This method requires the map to be filled to an amount where the exception is safely triggered. <p/> This methods fails if any of the called methods does not trigger the exception.
 */
private void internalRunWithException(IMap<Integer,Integer> queryMap){
  try {
    queryMap.values(TruePredicate.INSTANCE);
    failExpectedException(""String_Node_Str"");
  }
 catch (  QueryResultSizeExceededException e) {
    EmptyStatement.ignore(e);
  }
  try {
    queryMap.keySet(TruePredicate.INSTANCE);
    failExpectedException(""String_Node_Str"");
  }
 catch (  QueryResultSizeExceededException e) {
    EmptyStatement.ignore(e);
  }
  try {
    queryMap.entrySet(TruePredicate.INSTANCE);
    failExpectedException(""String_Node_Str"");
  }
 catch (  QueryResultSizeExceededException e) {
    EmptyStatement.ignore(e);
  }
}","/** 
 * Calls   {@link IMap} methods once which are expected to throw {@link QueryResultSizeExceededException}. <p/> This method requires the map to be filled to an amount where the exception is safely triggered. <p/> This methods fails if any of the called methods does not trigger the exception.
 */
private void internalRunWithException(IMap<Integer,Integer> queryMap){
  try {
    queryMap.values(TruePredicate.INSTANCE);
    failExpectedException(""String_Node_Str"");
  }
 catch (  QueryResultSizeExceededException e) {
    checkException(e);
  }
  try {
    queryMap.keySet(TruePredicate.INSTANCE);
    failExpectedException(""String_Node_Str"");
  }
 catch (  QueryResultSizeExceededException e) {
    checkException(e);
  }
  try {
    queryMap.entrySet(TruePredicate.INSTANCE);
    failExpectedException(""String_Node_Str"");
  }
 catch (  QueryResultSizeExceededException e) {
    checkException(e);
  }
}",0.9429657794676806
47366,"public AddAllBackupOperation(String name,Data[] items){
  super(name);
  this.items=items;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) public AddAllBackupOperation(String name,Data[] items){
  super(name);
  this.items=items;
}",0.7215686274509804
47367,"public AddAllOperation(String name,Data[] items,OverflowPolicy overflowPolicy){
  super(name);
  this.items=items;
  this.overflowPolicy=overflowPolicy;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) public AddAllOperation(String name,Data[] items,OverflowPolicy overflowPolicy){
  super(name);
  this.items=items;
  this.overflowPolicy=overflowPolicy;
}",0.8126649076517151
47368,"protected Config createConfig(){
  return new Config();
}","protected Config createConfig(){
  Config config=new Config();
  JoinConfig joinConfig=config.getNetworkConfig().getJoin();
  joinConfig.getAwsConfig().setEnabled(false);
  joinConfig.getMulticastConfig().setEnabled(false);
  joinConfig.getTcpIpConfig().setEnabled(false);
  return config;
}",0.2241379310344827
47369,"protected Config createConfig(){
  return new Config();
}","protected Config createConfig(){
  Config config=new Config();
  JoinConfig joinConfig=config.getNetworkConfig().getJoin();
  joinConfig.getAwsConfig().setEnabled(false);
  joinConfig.getMulticastConfig().setEnabled(false);
  joinConfig.getTcpIpConfig().setEnabled(false);
  return config;
}",0.2241379310344827
47370,"private EvictionConfig getEvictionConfig(final Node node){
  final EvictionConfig evictionConfig=new EvictionConfig();
  final Node size=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node maxSizePolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node evictionPolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  if (size != null) {
    evictionConfig.setSize(Integer.parseInt(getTextContent(size)));
  }
  if (maxSizePolicy != null) {
    evictionConfig.setMaxSizePolicy(EvictionConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
  }
  if (evictionPolicy != null) {
    evictionConfig.setEvictionPolicy(EvictionPolicy.valueOf(upperCaseInternal(getTextContent(evictionPolicy))));
  }
  return evictionConfig;
}","private EvictionConfig getEvictionConfig(final Node node){
  final EvictionConfig evictionConfig=new EvictionConfig();
  final Node size=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node maxSizePolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node evictionPolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  if (size != null) {
    evictionConfig.setSize(Integer.parseInt(getTextContent(size)));
  }
  if (maxSizePolicy != null) {
    evictionConfig.setMaximumSizePolicy(EvictionConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
  }
  if (evictionPolicy != null) {
    evictionConfig.setEvictionPolicy(EvictionPolicy.valueOf(upperCaseInternal(getTextContent(evictionPolicy))));
  }
  return evictionConfig;
}",0.9974522292993632
47371,"@Test public void testNearCacheConfigWithEvictionConfig() throws IOException {
  URL schemaResource=XMLConfigBuilderTest.class.getClassLoader().getResource(""String_Node_Str"");
  ClientConfig clientConfig=new XmlClientConfigBuilder(schemaResource).build();
  NearCacheConfig nearCacheConfig=clientConfig.getNearCacheConfig(""String_Node_Str"");
  assertEquals(10000,nearCacheConfig.getTimeToLiveSeconds());
  assertEquals(5000,nearCacheConfig.getMaxIdleSeconds());
  assertFalse(nearCacheConfig.isInvalidateOnChange());
  assertEquals(InMemoryFormat.OBJECT,nearCacheConfig.getInMemoryFormat());
  assertTrue(nearCacheConfig.isCacheLocalEntries());
  assertNotNull(nearCacheConfig.getEvictionConfig());
  assertEquals(100,nearCacheConfig.getEvictionConfig().getSize());
  assertEquals(EvictionConfig.MaxSizePolicy.ENTRY_COUNT,nearCacheConfig.getEvictionConfig().getMaxSizePolicy());
  assertEquals(EvictionPolicy.LFU,nearCacheConfig.getEvictionConfig().getEvictionPolicy());
}","@Test public void testNearCacheConfigWithEvictionConfig() throws IOException {
  URL schemaResource=XMLConfigBuilderTest.class.getClassLoader().getResource(""String_Node_Str"");
  ClientConfig clientConfig=new XmlClientConfigBuilder(schemaResource).build();
  NearCacheConfig nearCacheConfig=clientConfig.getNearCacheConfig(""String_Node_Str"");
  assertEquals(10000,nearCacheConfig.getTimeToLiveSeconds());
  assertEquals(5000,nearCacheConfig.getMaxIdleSeconds());
  assertFalse(nearCacheConfig.isInvalidateOnChange());
  assertEquals(InMemoryFormat.OBJECT,nearCacheConfig.getInMemoryFormat());
  assertTrue(nearCacheConfig.isCacheLocalEntries());
  assertNotNull(nearCacheConfig.getEvictionConfig());
  assertEquals(100,nearCacheConfig.getEvictionConfig().getSize());
  assertEquals(EvictionConfig.MaxSizePolicy.ENTRY_COUNT,nearCacheConfig.getEvictionConfig().getMaximumSizePolicy());
  assertEquals(EvictionPolicy.LFU,nearCacheConfig.getEvictionConfig().getEvictionPolicy());
}",0.997946611909651
47372,"private EvictionConfig getEvictionConfig(final Node node){
  final EvictionConfig evictionConfig=new EvictionConfig();
  final Node size=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node maxSizePolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node evictionPolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  if (size != null) {
    evictionConfig.setSize(Integer.parseInt(getTextContent(size)));
  }
  if (maxSizePolicy != null) {
    evictionConfig.setMaxSizePolicy(EvictionConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
  }
  if (evictionPolicy != null) {
    evictionConfig.setEvictionPolicy(EvictionPolicy.valueOf(upperCaseInternal(getTextContent(evictionPolicy))));
  }
  return evictionConfig;
}","private EvictionConfig getEvictionConfig(final Node node){
  final EvictionConfig evictionConfig=new EvictionConfig();
  final Node size=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node maxSizePolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node evictionPolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  if (size != null) {
    evictionConfig.setSize(Integer.parseInt(getTextContent(size)));
  }
  if (maxSizePolicy != null) {
    evictionConfig.setMaximumSizePolicy(EvictionConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
  }
  if (evictionPolicy != null) {
    evictionConfig.setEvictionPolicy(EvictionPolicy.valueOf(upperCaseInternal(getTextContent(evictionPolicy))));
  }
  return evictionConfig;
}",0.9974522292993632
47373,"@Test public void testNearCacheConfigWithEvictionConfig() throws IOException {
  URL schemaResource=XMLConfigBuilderTest.class.getClassLoader().getResource(""String_Node_Str"");
  ClientConfig clientConfig=new XmlClientConfigBuilder(schemaResource).build();
  NearCacheConfig nearCacheConfig=clientConfig.getNearCacheConfig(""String_Node_Str"");
  assertEquals(10000,nearCacheConfig.getTimeToLiveSeconds());
  assertEquals(5000,nearCacheConfig.getMaxIdleSeconds());
  assertFalse(nearCacheConfig.isInvalidateOnChange());
  assertEquals(InMemoryFormat.OBJECT,nearCacheConfig.getInMemoryFormat());
  assertTrue(nearCacheConfig.isCacheLocalEntries());
  assertNotNull(nearCacheConfig.getEvictionConfig());
  assertEquals(100,nearCacheConfig.getEvictionConfig().getSize());
  assertEquals(EvictionConfig.MaxSizePolicy.ENTRY_COUNT,nearCacheConfig.getEvictionConfig().getMaxSizePolicy());
  assertEquals(EvictionPolicy.LFU,nearCacheConfig.getEvictionConfig().getEvictionPolicy());
}","@Test public void testNearCacheConfigWithEvictionConfig() throws IOException {
  URL schemaResource=XMLConfigBuilderTest.class.getClassLoader().getResource(""String_Node_Str"");
  ClientConfig clientConfig=new XmlClientConfigBuilder(schemaResource).build();
  NearCacheConfig nearCacheConfig=clientConfig.getNearCacheConfig(""String_Node_Str"");
  assertEquals(10000,nearCacheConfig.getTimeToLiveSeconds());
  assertEquals(5000,nearCacheConfig.getMaxIdleSeconds());
  assertFalse(nearCacheConfig.isInvalidateOnChange());
  assertEquals(InMemoryFormat.OBJECT,nearCacheConfig.getInMemoryFormat());
  assertTrue(nearCacheConfig.isCacheLocalEntries());
  assertNotNull(nearCacheConfig.getEvictionConfig());
  assertEquals(100,nearCacheConfig.getEvictionConfig().getSize());
  assertEquals(EvictionConfig.MaxSizePolicy.ENTRY_COUNT,nearCacheConfig.getEvictionConfig().getMaximumSizePolicy());
  assertEquals(EvictionPolicy.LFU,nearCacheConfig.getEvictionConfig().getEvictionPolicy());
}",0.997946611909651
47374,"private EvictionConfig getEvictionConfig(final Node node){
  final EvictionConfig evictionConfig=new EvictionConfig();
  final Node size=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node maxSizePolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node evictionPolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  if (size != null) {
    evictionConfig.setSize(Integer.parseInt(getTextContent(size)));
  }
  if (maxSizePolicy != null) {
    evictionConfig.setMaxSizePolicy(EvictionConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
  }
  if (evictionPolicy != null) {
    evictionConfig.setEvictionPolicy(EvictionPolicy.valueOf(upperCaseInternal(getTextContent(evictionPolicy))));
  }
  return evictionConfig;
}","private EvictionConfig getEvictionConfig(final Node node){
  final EvictionConfig evictionConfig=new EvictionConfig();
  final Node size=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node maxSizePolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  final Node evictionPolicy=node.getAttributes().getNamedItem(""String_Node_Str"");
  if (size != null) {
    evictionConfig.setSize(Integer.parseInt(getTextContent(size)));
  }
  if (maxSizePolicy != null) {
    evictionConfig.setMaximumSizePolicy(EvictionConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
  }
  if (evictionPolicy != null) {
    evictionConfig.setEvictionPolicy(EvictionPolicy.valueOf(upperCaseInternal(getTextContent(evictionPolicy))));
  }
  return evictionConfig;
}",0.9974522292993632
47375,"@Test public void testConfig(){
  assertNotNull(instance1);
  CacheSimpleConfig simpleConfig=instance1.getConfig().getCacheConfigs().get(""String_Node_Str"");
  assertNotNull(simpleConfig);
  assertEquals(1,simpleConfig.getAsyncBackupCount());
  assertEquals(2,simpleConfig.getBackupCount());
  assertEquals(""String_Node_Str"",simpleConfig.getKeyType());
  assertEquals(""String_Node_Str"",simpleConfig.getValueType());
  assertTrue(simpleConfig.isStatisticsEnabled());
  assertTrue(simpleConfig.isManagementEnabled());
  assertTrue(simpleConfig.isReadThrough());
  assertTrue(simpleConfig.isWriteThrough());
  assertEquals(""String_Node_Str"",simpleConfig.getCacheLoaderFactory());
  assertEquals(""String_Node_Str"",simpleConfig.getCacheWriterFactory());
  assertEquals(""String_Node_Str"",simpleConfig.getExpiryPolicyFactory());
  assertEquals(InMemoryFormat.OBJECT,simpleConfig.getInMemoryFormat());
  assertNotNull(simpleConfig.getEvictionConfig());
  assertEquals(50,simpleConfig.getEvictionConfig().getSize());
  assertEquals(EvictionConfig.MaxSizePolicy.ENTRY_COUNT,simpleConfig.getEvictionConfig().getMaxSizePolicy());
  assertEquals(EvictionPolicy.LRU,simpleConfig.getEvictionConfig().getEvictionPolicy());
  NearCacheConfig nearCacheConfig=simpleConfig.getNearCacheConfig();
  assertNotNull(nearCacheConfig);
  assertEquals(10000,nearCacheConfig.getTimeToLiveSeconds());
  assertEquals(5000,nearCacheConfig.getMaxIdleSeconds());
  assertFalse(nearCacheConfig.isInvalidateOnChange());
  assertEquals(InMemoryFormat.OBJECT,nearCacheConfig.getInMemoryFormat());
  assertTrue(nearCacheConfig.isCacheLocalEntries());
  assertNotNull(nearCacheConfig.getEvictionConfig());
  assertEquals(100,nearCacheConfig.getEvictionConfig().getSize());
  assertEquals(EvictionConfig.MaxSizePolicy.ENTRY_COUNT,nearCacheConfig.getEvictionConfig().getMaxSizePolicy());
  assertEquals(EvictionPolicy.LFU,nearCacheConfig.getEvictionConfig().getEvictionPolicy());
}","@Test public void testConfig(){
  assertNotNull(instance1);
  CacheSimpleConfig simpleConfig=instance1.getConfig().getCacheConfigs().get(""String_Node_Str"");
  assertNotNull(simpleConfig);
  assertEquals(1,simpleConfig.getAsyncBackupCount());
  assertEquals(2,simpleConfig.getBackupCount());
  assertEquals(""String_Node_Str"",simpleConfig.getKeyType());
  assertEquals(""String_Node_Str"",simpleConfig.getValueType());
  assertTrue(simpleConfig.isStatisticsEnabled());
  assertTrue(simpleConfig.isManagementEnabled());
  assertTrue(simpleConfig.isReadThrough());
  assertTrue(simpleConfig.isWriteThrough());
  assertEquals(""String_Node_Str"",simpleConfig.getCacheLoaderFactory());
  assertEquals(""String_Node_Str"",simpleConfig.getCacheWriterFactory());
  assertEquals(""String_Node_Str"",simpleConfig.getExpiryPolicyFactory());
  assertEquals(InMemoryFormat.OBJECT,simpleConfig.getInMemoryFormat());
  assertNotNull(simpleConfig.getEvictionConfig());
  assertEquals(50,simpleConfig.getEvictionConfig().getSize());
  assertEquals(EvictionConfig.MaxSizePolicy.ENTRY_COUNT,simpleConfig.getEvictionConfig().getMaximumSizePolicy());
  assertEquals(EvictionPolicy.LRU,simpleConfig.getEvictionConfig().getEvictionPolicy());
  NearCacheConfig nearCacheConfig=simpleConfig.getNearCacheConfig();
  assertNotNull(nearCacheConfig);
  assertEquals(10000,nearCacheConfig.getTimeToLiveSeconds());
  assertEquals(5000,nearCacheConfig.getMaxIdleSeconds());
  assertFalse(nearCacheConfig.isInvalidateOnChange());
  assertEquals(InMemoryFormat.OBJECT,nearCacheConfig.getInMemoryFormat());
  assertTrue(nearCacheConfig.isCacheLocalEntries());
  assertNotNull(nearCacheConfig.getEvictionConfig());
  assertEquals(100,nearCacheConfig.getEvictionConfig().getSize());
  assertEquals(EvictionConfig.MaxSizePolicy.ENTRY_COUNT,nearCacheConfig.getEvictionConfig().getMaximumSizePolicy());
  assertEquals(EvictionPolicy.LFU,nearCacheConfig.getEvictionConfig().getEvictionPolicy());
}",0.997941327843541
47376,"public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaxSizePolicy());
  this.evictionPolicyEvaluator=createEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=createEvictionStrategy(evictionConfig);
  if (cacheWriter instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheWriter);
  }
  if (cacheLoader instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheLoader);
  }
  if (defaultExpiryPolicy instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)defaultExpiryPolicy);
  }
}","public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaximumSizePolicy());
  this.evictionPolicyEvaluator=createEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=createEvictionStrategy(evictionConfig);
  if (cacheWriter instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheWriter);
  }
  if (cacheLoader instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheLoader);
  }
  if (defaultExpiryPolicy instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)defaultExpiryPolicy);
  }
}",0.9989944695827048
47377,"protected MaxSizeChecker createNearCacheMaxSizeChecker(EvictionConfig evictionConfig,NearCacheConfig nearCacheConfig,NearCacheContext nearCacheContext){
  EvictionConfig.MaxSizePolicy maxSizePolicy=evictionConfig.getMaxSizePolicy();
  if (maxSizePolicy == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (maxSizePolicy == EvictionConfig.MaxSizePolicy.ENTRY_COUNT) {
    return new EntryCountNearCacheMaxSizeChecker(evictionConfig.getSize(),records);
  }
  throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + maxSizePolicy + ""String_Node_Str""+ getClass().getName()+ ""String_Node_Str""+ EvictionConfig.MaxSizePolicy.ENTRY_COUNT+ ""String_Node_Str"");
}","protected MaxSizeChecker createNearCacheMaxSizeChecker(EvictionConfig evictionConfig,NearCacheConfig nearCacheConfig,NearCacheContext nearCacheContext){
  EvictionConfig.MaxSizePolicy maxSizePolicy=evictionConfig.getMaximumSizePolicy();
  if (maxSizePolicy == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (maxSizePolicy == EvictionConfig.MaxSizePolicy.ENTRY_COUNT) {
    return new EntryCountNearCacheMaxSizeChecker(evictionConfig.getSize(),records);
  }
  throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + maxSizePolicy + ""String_Node_Str""+ getClass().getName()+ ""String_Node_Str""+ EvictionConfig.MaxSizePolicy.ENTRY_COUNT+ ""String_Node_Str"");
}",0.9971428571428572
47378,"/** 
 * Sets the   {@link EvictionConfig} instance for eviction configuration of the cache config.
 * @param evictionConfig the {@link EvictionConfig} instance for eviction configuration to set
 * @return current cache config instance
 */
public CacheConfig setEvictionConfig(EvictionConfig evictionConfig){
  this.evictionConfig=isNotNull(evictionConfig,""String_Node_Str"");
  return this;
}","/** 
 * Sets the   {@link EvictionConfig} instance for eviction configuration of the cache config.
 * @param evictionConfig the {@link EvictionConfig} instance for eviction configuration to set
 * @return current cache config instance
 */
public CacheConfig setEvictionConfig(EvictionConfig evictionConfig){
  isNotNull(evictionConfig,""String_Node_Str"");
  if (evictionConfig instanceof CacheEvictionConfig) {
    this.evictionConfig=(CacheEvictionConfig)evictionConfig;
  }
 else {
    this.evictionConfig=new CacheEvictionConfig(evictionConfig);
  }
  return this;
}",0.7507820646506778
47379,"public CacheConfig(CacheSimpleConfig simpleConfig) throws Exception {
  this.name=simpleConfig.getName();
  if (simpleConfig.getKeyType() != null) {
    this.keyType=(Class<K>)ClassLoaderUtil.loadClass(null,simpleConfig.getKeyType());
  }
  if (simpleConfig.getValueType() != null) {
    this.valueType=(Class<V>)ClassLoaderUtil.loadClass(null,simpleConfig.getValueType());
  }
  this.isStatisticsEnabled=simpleConfig.isStatisticsEnabled();
  this.isManagementEnabled=simpleConfig.isManagementEnabled();
  this.isReadThrough=simpleConfig.isReadThrough();
  this.isWriteThrough=simpleConfig.isWriteThrough();
  if (simpleConfig.getCacheLoaderFactory() != null) {
    this.cacheLoaderFactory=ClassLoaderUtil.newInstance(null,simpleConfig.getCacheLoaderFactory());
  }
  if (simpleConfig.getCacheWriterFactory() != null) {
    this.cacheWriterFactory=ClassLoaderUtil.newInstance(null,simpleConfig.getCacheWriterFactory());
  }
  if (simpleConfig.getExpiryPolicyFactory() != null) {
    this.expiryPolicyFactory=ClassLoaderUtil.newInstance(null,simpleConfig.getExpiryPolicyFactory());
  }
  this.asyncBackupCount=simpleConfig.getAsyncBackupCount();
  this.backupCount=simpleConfig.getBackupCount();
  this.inMemoryFormat=simpleConfig.getInMemoryFormat();
  if (simpleConfig.getEvictionConfig() != null) {
    this.evictionConfig=new EvictionConfig(simpleConfig.getEvictionConfig());
  }
  if (simpleConfig.getNearCacheConfig() != null) {
    this.nearCacheConfig=new NearCacheConfig(simpleConfig.getNearCacheConfig());
  }
  if (simpleConfig.getWanReplicationRef() != null) {
    this.wanReplicationRef=new WanReplicationRef(simpleConfig.getWanReplicationRef());
  }
  for (  CacheSimpleEntryListenerConfig simpleListener : simpleConfig.getCacheEntryListeners()) {
    Factory<? extends CacheEntryListener<? super K,? super V>> listenerFactory=null;
    Factory<? extends CacheEntryEventFilter<? super K,? super V>> filterFactory=null;
    if (simpleListener.getCacheEntryListenerFactory() != null) {
      listenerFactory=ClassLoaderUtil.newInstance(null,simpleListener.getCacheEntryListenerFactory());
    }
    if (simpleListener.getCacheEntryEventFilterFactory() != null) {
      filterFactory=ClassLoaderUtil.newInstance(null,simpleListener.getCacheEntryEventFilterFactory());
    }
    boolean isOldValueRequired=simpleListener.isOldValueRequired();
    boolean synchronous=simpleListener.isSynchronous();
    MutableCacheEntryListenerConfiguration<K,V> listenerConfiguration=new MutableCacheEntryListenerConfiguration<K,V>(listenerFactory,filterFactory,isOldValueRequired,synchronous);
    addCacheEntryListenerConfiguration(listenerConfiguration);
  }
}","public CacheConfig(CacheSimpleConfig simpleConfig) throws Exception {
  this.name=simpleConfig.getName();
  if (simpleConfig.getKeyType() != null) {
    this.keyType=(Class<K>)ClassLoaderUtil.loadClass(null,simpleConfig.getKeyType());
  }
  if (simpleConfig.getValueType() != null) {
    this.valueType=(Class<V>)ClassLoaderUtil.loadClass(null,simpleConfig.getValueType());
  }
  this.isStatisticsEnabled=simpleConfig.isStatisticsEnabled();
  this.isManagementEnabled=simpleConfig.isManagementEnabled();
  this.isReadThrough=simpleConfig.isReadThrough();
  this.isWriteThrough=simpleConfig.isWriteThrough();
  if (simpleConfig.getCacheLoaderFactory() != null) {
    this.cacheLoaderFactory=ClassLoaderUtil.newInstance(null,simpleConfig.getCacheLoaderFactory());
  }
  if (simpleConfig.getCacheWriterFactory() != null) {
    this.cacheWriterFactory=ClassLoaderUtil.newInstance(null,simpleConfig.getCacheWriterFactory());
  }
  if (simpleConfig.getExpiryPolicyFactory() != null) {
    this.expiryPolicyFactory=ClassLoaderUtil.newInstance(null,simpleConfig.getExpiryPolicyFactory());
  }
  this.asyncBackupCount=simpleConfig.getAsyncBackupCount();
  this.backupCount=simpleConfig.getBackupCount();
  this.inMemoryFormat=simpleConfig.getInMemoryFormat();
  if (simpleConfig.getEvictionConfig() != null) {
    this.evictionConfig=new CacheEvictionConfig(simpleConfig.getEvictionConfig());
  }
  if (simpleConfig.getNearCacheConfig() != null) {
    this.nearCacheConfig=new NearCacheConfig(simpleConfig.getNearCacheConfig());
  }
  if (simpleConfig.getWanReplicationRef() != null) {
    this.wanReplicationRef=new WanReplicationRef(simpleConfig.getWanReplicationRef());
  }
  for (  CacheSimpleEntryListenerConfig simpleListener : simpleConfig.getCacheEntryListeners()) {
    Factory<? extends CacheEntryListener<? super K,? super V>> listenerFactory=null;
    Factory<? extends CacheEntryEventFilter<? super K,? super V>> filterFactory=null;
    if (simpleListener.getCacheEntryListenerFactory() != null) {
      listenerFactory=ClassLoaderUtil.newInstance(null,simpleListener.getCacheEntryListenerFactory());
    }
    if (simpleListener.getCacheEntryEventFilterFactory() != null) {
      filterFactory=ClassLoaderUtil.newInstance(null,simpleListener.getCacheEntryEventFilterFactory());
    }
    boolean isOldValueRequired=simpleListener.isOldValueRequired();
    boolean synchronous=simpleListener.isSynchronous();
    MutableCacheEntryListenerConfiguration<K,V> listenerConfiguration=new MutableCacheEntryListenerConfiguration<K,V>(listenerFactory,filterFactory,isOldValueRequired,synchronous);
    addCacheEntryListenerConfiguration(listenerConfiguration);
  }
}",0.999059973679263
47380,"/** 
 * Gets the   {@link EvictionConfig} instance for eviction configuration of the cache config.
 * @return the {@link EvictionConfig} instance for eviction configuration
 */
public EvictionConfig getEvictionConfig(){
  return evictionConfig;
}","/** 
 * Gets the   {@link EvictionConfig} instance for eviction configuration of the cache config.
 * @return the {@link EvictionConfig} instance for eviction configuration
 */
public CacheEvictionConfig getEvictionConfig(){
  return evictionConfig;
}",0.9899396378269618
47381,"@Override public EvictionConfig getEvictionConfig(){
  final EvictionConfig evictionConfig=super.getEvictionConfig();
  if (evictionConfig == null) {
    return null;
  }
  return evictionConfig.getAsReadOnly();
}","@Override public CacheEvictionConfig getEvictionConfig(){
  final CacheEvictionConfig evictionConfig=super.getEvictionConfig();
  if (evictionConfig == null) {
    return null;
  }
  return (CacheEvictionConfig)evictionConfig.getAsReadOnly();
}",0.9321663019693656
47382,"private void initNearCache(){
  NearCacheConfig clientNearCacheConfig=clientContext.getClientConfig().getNearCacheConfig(name);
  NearCacheConfig cacheNearCacheConfig=cacheConfig.getNearCacheConfig();
  NearCacheConfig nearCacheConfig;
  if (clientNearCacheConfig == null) {
    nearCacheConfig=cacheNearCacheConfig;
  }
 else {
    if (cacheNearCacheConfig != null) {
      if (""String_Node_Str"".equals(clientNearCacheConfig.getName())) {
        nearCacheConfig=cacheNearCacheConfig;
      }
 else {
        nearCacheConfig=clientNearCacheConfig;
      }
    }
 else {
      nearCacheConfig=clientNearCacheConfig;
    }
  }
  if (nearCacheConfig != null) {
    cacheOnUpdate=nearCacheConfig.getLocalUpdatePolicy() == NearCacheConfig.LocalUpdatePolicy.CACHE;
    NearCacheContext nearCacheContext=new NearCacheContext(clientContext.getSerializationService(),createNearCacheExecutor(clientContext.getExecutionService()));
    nearCache=nearCacheManager.getOrCreateNearCache(nameWithPrefix,nearCacheConfig,nearCacheContext);
    registerInvalidationListener();
  }
}","private void initNearCache(){
  NearCacheConfig nearCacheConfig=clientContext.getClientConfig().getNearCacheConfig(name);
  if (nearCacheConfig != null) {
    cacheOnUpdate=nearCacheConfig.getLocalUpdatePolicy() == NearCacheConfig.LocalUpdatePolicy.CACHE;
    NearCacheContext nearCacheContext=new NearCacheContext(clientContext.getSerializationService(),createNearCacheExecutor(clientContext.getExecutionService()));
    nearCache=nearCacheManager.getOrCreateNearCache(nameWithPrefix,nearCacheConfig,nearCacheContext);
    registerInvalidationListener();
  }
}",0.6888068880688807
47383,"protected void putToCacheAndUpdateFromOtherNodeThenGetUpdatedFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=getNearCacheTest(DEFAULT_CACHE_NAME);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(DEFAULT_RECORD_COUNT + i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.close();
  nearCacheTestContext2.close();
}","protected void putToCacheAndUpdateFromOtherNodeThenGetUpdatedFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(DEFAULT_RECORD_COUNT + i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.close();
  nearCacheTestContext2.close();
}",0.993302973479775
47384,"protected void putToCacheAndRemoveFromOtherNodeThenCantGetUpdatedFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=getNearCacheTest(DEFAULT_CACHE_NAME);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.remove(i);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.close();
  nearCacheTestContext2.close();
}","protected void putToCacheAndRemoveFromOtherNodeThenCantGetUpdatedFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.remove(i);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.close();
  nearCacheTestContext2.close();
}",0.9912739965095986
47385,"protected NearCacheTestContext createNearCacheTest(String cacheName,NearCacheConfig nearCacheConfig){
  HazelcastClientProxy client=(HazelcastClientProxy)HazelcastClient.newHazelcastClient(createClientConfig());
  NearCacheManager nearCacheManager=client.client.getNearCacheManager();
  CachingProvider provider=HazelcastClientCachingProvider.createCachingProvider(client);
  HazelcastClientCacheManager cacheManager=(HazelcastClientCacheManager)provider.getCacheManager();
  CacheConfig<Integer,String> cacheConfig=new CacheConfig<Integer,String>();
  cacheConfig.setNearCacheConfig(nearCacheConfig);
  ICache<Integer,String> cache=cacheManager.createCache(cacheName,cacheConfig);
  NearCache<Data,String> nearCache=nearCacheManager.getNearCache(cacheManager.getCacheNameWithPrefix(cacheName));
  return new NearCacheTestContext(client,cacheManager,nearCacheManager,cache,nearCache);
}","protected NearCacheTestContext createNearCacheTest(String cacheName,NearCacheConfig nearCacheConfig){
  ClientConfig clientConfig=createClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  HazelcastClientProxy client=(HazelcastClientProxy)HazelcastClient.newHazelcastClient(clientConfig);
  NearCacheManager nearCacheManager=client.client.getNearCacheManager();
  CachingProvider provider=HazelcastClientCachingProvider.createCachingProvider(client);
  HazelcastClientCacheManager cacheManager=(HazelcastClientCacheManager)provider.getCacheManager();
  CacheConfig<Integer,String> cacheConfig=new CacheConfig<Integer,String>();
  ICache<Integer,String> cache=cacheManager.createCache(cacheName,cacheConfig);
  NearCache<Data,String> nearCache=nearCacheManager.getNearCache(cacheManager.getCacheNameWithPrefix(cacheName));
  return new NearCacheTestContext(client,cacheManager,nearCacheManager,cache,nearCache);
}",0.8991735537190083
47386,"protected void putToCacheAndClearOrDestroyThenCantGetAnyRecordFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=getNearCacheTest(DEFAULT_CACHE_NAME);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.cache.clear();
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.close();
  nearCacheTestContext2.close();
}","protected void putToCacheAndClearOrDestroyThenCantGetAnyRecordFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.cache.clear();
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.close();
  nearCacheTestContext2.close();
}",0.9908925318761383
47387,"@Override protected CachingProvider getCachingProvider(){
  Hazelcast.newHazelcastInstance();
  Hazelcast.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().addAddress(""String_Node_Str"");
  hazelcastInstance=HazelcastClient.newHazelcastClient(clientConfig);
  return HazelcastClientCachingProvider.createCachingProvider(hazelcastInstance);
}","@Override protected CachingProvider getCachingProvider(){
  Config config=new Config();
  JoinConfig joinConfig=config.getNetworkConfig().getJoin();
  joinConfig.getAwsConfig().setEnabled(false);
  joinConfig.getMulticastConfig().setEnabled(false);
  joinConfig.getTcpIpConfig().setEnabled(false);
  Hazelcast.newHazelcastInstance(config);
  Hazelcast.newHazelcastInstance(config);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().addAddress(""String_Node_Str"");
  hazelcastInstance=HazelcastClient.newHazelcastClient(clientConfig);
  return HazelcastClientCachingProvider.createCachingProvider(hazelcastInstance);
}",0.7586206896551724
47388,"protected ClientConfig createClientConfig(){
  return new ClientConfig();
}","protected ClientConfig createClientConfig(){
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().addAddress(""String_Node_Str"");
  return clientConfig;
}",0.5603112840466926
47389,"@Override protected CachingProvider getCachingProvider(){
  Hazelcast.newHazelcastInstance();
  Hazelcast.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().addAddress(""String_Node_Str"");
  hazelcastInstance=HazelcastClient.newHazelcastClient(clientConfig);
  return HazelcastClientCachingProvider.createCachingProvider(hazelcastInstance);
}","@Override protected CachingProvider getCachingProvider(){
  Config config=new Config();
  JoinConfig joinConfig=config.getNetworkConfig().getJoin();
  joinConfig.getAwsConfig().setEnabled(false);
  joinConfig.getMulticastConfig().setEnabled(false);
  joinConfig.getTcpIpConfig().setEnabled(false);
  Hazelcast.newHazelcastInstance(config);
  Hazelcast.newHazelcastInstance(config);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().addAddress(""String_Node_Str"");
  hazelcastInstance=HazelcastClient.newHazelcastClient(clientConfig);
  return HazelcastClientCachingProvider.createCachingProvider(hazelcastInstance);
}",0.7586206896551724
47390,"protected ClientConfig createClientConfig(){
  return new ClientConfig();
}","protected ClientConfig createClientConfig(){
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().addAddress(""String_Node_Str"");
  return clientConfig;
}",0.5603112840466926
47391,"static void assertTotalInvocations(final SlowOperationLog log,final int totalInvocations){
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEqualsStringFormat(""String_Node_Str"" + log.createDTO().toJson(),totalInvocations,log.totalInvocations.get());
    }
  }
,ASSERT_TRUE_TIMEOUT);
}","static void assertTotalInvocations(final SlowOperationLog log,final int totalInvocations){
  assertEqualsStringFormat(""String_Node_Str"" + log.createDTO().toJson(),totalInvocations,log.totalInvocations.get());
}",0.7650273224043715
47392,"static void assertNumberOfSlowOperationLogs(final Collection<SlowOperationLog> logs,final int expected){
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEqualsStringFormat(""String_Node_Str"",expected,logs.size());
    }
  }
,ASSERT_TRUE_TIMEOUT);
}","static void assertNumberOfSlowOperationLogs(final Collection<SlowOperationLog> logs,final int expected){
  assertEqualsStringFormat(""String_Node_Str"",expected,logs.size());
}",0.7295597484276729
47393,"@Test public void testSlowOperationOnPartitionOperationThread(){
  instance=getSingleNodeCluster(1000);
  SlowOperation operation=new SlowOperation(4,1);
  executeOperation(instance,operation);
  operation.await();
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,1);
  assertOperationContainsClassName(firstLog,""String_Node_Str"");
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
}","@Test public void testSlowOperationOnPartitionOperationThread(){
  instance=getSingleNodeCluster(1000);
  SlowOperation operation=new SlowOperation(4,2);
  executeOperation(instance,operation);
  operation.await();
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,1);
  assertOperationContainsClassName(firstLog,""String_Node_Str"");
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
}",0.9981684981684982
47394,"@Test public void testSlowOperationOnGenericOperationThread(){
  instance=getSingleNodeCluster(1000);
  SlowOperation operation=new SlowOperation(2);
  executeOperation(instance,operation);
  operation.await();
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,1);
  assertOperationContainsClassName(firstLog,""String_Node_Str"");
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
}","@Test public void testSlowOperationOnGenericOperationThread(){
  instance=getSingleNodeCluster(1000);
  SlowOperation operation=new SlowOperation(3);
  executeOperation(instance,operation);
  operation.await();
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,1);
  assertOperationContainsClassName(firstLog,""String_Node_Str"");
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
}",0.9981549815498156
47395,"@Test public void testSlowRecursiveOperation(){
  int partitionThreads=32;
  int numberOfOperations=50;
  int recursionDepth=20;
  Config config=new Config();
  config.setProperty(GroupProperties.PROP_SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS,""String_Node_Str"");
  config.setProperty(GroupProperties.PROP_PARTITION_OPERATION_THREAD_COUNT,String.valueOf(partitionThreads));
  instance=createHazelcastInstance(config);
  List<SlowRecursiveOperation> operations=new ArrayList<SlowRecursiveOperation>(numberOfOperations);
  int partitionCount=getNode(instance).nodeEngine.getPartitionService().getPartitionCount();
  int partitionIndex=1;
  for (int i=0; i < numberOfOperations; i++) {
    int partitionId=partitionIndex % partitionCount;
    SlowRecursiveOperation operation=new SlowRecursiveOperation(partitionId,recursionDepth,3);
    operations.add(operation);
    executeOperation(instance,operation);
    partitionIndex+=partitionCount / partitionThreads + 1;
  }
  for (  SlowRecursiveOperation operation : operations) {
    operation.await();
  }
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,numberOfOperations);
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
}","@Test public void testSlowRecursiveOperation(){
  int partitionThreads=32;
  int numberOfOperations=40;
  int recursionDepth=15;
  Config config=new Config();
  config.setProperty(GroupProperties.PROP_SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS,""String_Node_Str"");
  config.setProperty(GroupProperties.PROP_SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS,String.valueOf(Integer.MAX_VALUE));
  config.setProperty(GroupProperties.PROP_PARTITION_OPERATION_THREAD_COUNT,String.valueOf(partitionThreads));
  instance=createHazelcastInstance(config);
  List<SlowRecursiveOperation> operations=new ArrayList<SlowRecursiveOperation>(numberOfOperations);
  int partitionCount=getNode(instance).nodeEngine.getPartitionService().getPartitionCount();
  int partitionIndex=1;
  for (int i=0; i < numberOfOperations; i++) {
    int partitionId=partitionIndex % partitionCount;
    SlowRecursiveOperation operation=new SlowRecursiveOperation(partitionId,recursionDepth,4);
    operations.add(operation);
    executeOperation(instance,operation);
    partitionIndex+=partitionCount / partitionThreads + 1;
  }
  for (  SlowRecursiveOperation operation : operations) {
    operation.await();
  }
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,numberOfOperations);
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
}",0.9527220630372492
47396,"@Test public void testNestedSlowEntryProcessor(){
  HazelcastInstance instance=getSingleNodeCluster(1000);
  IMap<String,String> map=getMapWithSingleElement(instance);
  NestedSlowEntryProcessor entryProcessor=new NestedSlowEntryProcessor(map,2);
  map.executeOnEntries(entryProcessor);
  entryProcessor.await();
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,1);
  assertEntryProcessorOperation(firstLog);
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
}","@Test public void testNestedSlowEntryProcessor(){
  HazelcastInstance instance=getSingleNodeCluster(1000);
  IMap<String,String> map=getMapWithSingleElement(instance);
  NestedSlowEntryProcessor entryProcessor=new NestedSlowEntryProcessor(map,3);
  map.executeOnEntries(entryProcessor);
  entryProcessor.await();
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,1);
  assertEntryProcessorOperation(firstLog);
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
}",0.998546511627907
47397,"@Test public void testSlowEntryProcessor() throws InterruptedException {
  HazelcastInstance instance=getSingleNodeCluster(2000);
  IMap<String,String> map=getMapWithSingleElement(instance);
  for (int i=0; i < 3; i++) {
    map.executeOnEntries(getSlowEntryProcessor(3));
  }
  map.executeOnEntries(getSlowEntryProcessor(6));
  awaitSlowEntryProcessors();
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,4);
  assertEntryProcessorOperation(firstLog);
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
  Collection<SlowOperationLog.Invocation> invocations=getInvocations(firstLog);
  assertEqualsStringFormat(""String_Node_Str"",4,invocations.size());
  for (  SlowOperationLog.Invocation invocation : invocations) {
    assertInvocationDurationBetween(invocation,2000,6500);
  }
}","@Test public void testSlowEntryProcessor() throws InterruptedException {
  HazelcastInstance instance=getSingleNodeCluster(1000);
  IMap<String,String> map=getMapWithSingleElement(instance);
  for (int i=0; i < 3; i++) {
    map.executeOnEntries(getSlowEntryProcessor(3));
  }
  map.executeOnEntries(getSlowEntryProcessor(6));
  awaitSlowEntryProcessors();
  Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,1);
  SlowOperationLog firstLog=logs.iterator().next();
  assertTotalInvocations(firstLog,4);
  assertEntryProcessorOperation(firstLog);
  assertStackTraceContainsClassName(firstLog,""String_Node_Str"");
  Collection<SlowOperationLog.Invocation> invocations=getInvocations(firstLog);
  assertEqualsStringFormat(""String_Node_Str"",4,invocations.size());
  for (  SlowOperationLog.Invocation invocation : invocations) {
    assertInvocationDurationBetween(invocation,1000,6500);
  }
}",0.9978791092258747
47398,"@Test public void testMultipleSlowEntryProcessorClasses() throws InterruptedException {
  HazelcastInstance instance=getSingleNodeCluster(2000);
  IMap<String,String> map=getMapWithSingleElement(instance);
  for (int i=0; i < 3; i++) {
    map.executeOnEntries(getSlowEntryProcessor(3));
  }
  SlowEntryProcessorChild entryProcessorChild=new SlowEntryProcessorChild(3);
  map.executeOnEntries(entryProcessorChild);
  map.executeOnEntries(getSlowEntryProcessor(5));
  awaitSlowEntryProcessors();
  entryProcessorChild.await();
  final Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,2);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      Iterator<SlowOperationLog> iterator=logs.iterator();
      SlowOperationLog firstLog=iterator.next();
      SlowOperationLog secondLog=iterator.next();
      int firstSize=getInvocations(firstLog).size();
      int secondSize=getInvocations(secondLog).size();
      assertTrue(format(""String_Node_Str"",firstSize,secondSize,firstLog.createDTO().toJson(),secondLog.createDTO().toJson()),(firstSize == 1 ^ secondSize == 1) && (firstSize == 4 ^ secondSize == 4));
    }
  }
,ASSERT_TRUE_TIMEOUT);
}","@Test public void testMultipleSlowEntryProcessorClasses() throws InterruptedException {
  HazelcastInstance instance=getSingleNodeCluster(1000);
  IMap<String,String> map=getMapWithSingleElement(instance);
  for (int i=0; i < 3; i++) {
    map.executeOnEntries(getSlowEntryProcessor(3));
  }
  SlowEntryProcessorChild entryProcessorChild=new SlowEntryProcessorChild(3);
  map.executeOnEntries(entryProcessorChild);
  map.executeOnEntries(getSlowEntryProcessor(5));
  awaitSlowEntryProcessors();
  entryProcessorChild.await();
  final Collection<SlowOperationLog> logs=getSlowOperationLogs(instance);
  assertNumberOfSlowOperationLogs(logs,2);
  Iterator<SlowOperationLog> iterator=logs.iterator();
  SlowOperationLog firstLog=iterator.next();
  SlowOperationLog secondLog=iterator.next();
  Collection<SlowOperationLog.Invocation> firstInvocations=getInvocations(firstLog);
  Collection<SlowOperationLog.Invocation> secondInvocations=getInvocations(secondLog);
  int firstSize=firstInvocations.size();
  int secondSize=secondInvocations.size();
  assertTrue(format(""String_Node_Str"",firstSize,secondSize,firstLog.createDTO().toJson(),secondLog.createDTO().toJson()),(firstSize == 1 ^ secondSize == 1) && (firstSize == 4 ^ secondSize == 4));
  for (  SlowOperationLog.Invocation invocation : firstInvocations) {
    assertInvocationDurationBetween(invocation,1000,5500);
  }
  for (  SlowOperationLog.Invocation invocation : secondInvocations) {
    assertInvocationDurationBetween(invocation,1000,5500);
  }
}",0.6618075801749271
47399,"@Test public void testJSON_SlowEntryProcessor(){
  for (int i=0; i < 2; i++) {
    map.executeOnEntries(getSlowEntryProcessor(2));
  }
  map.executeOnEntries(getSlowEntryProcessor(3));
  map.executeOnEntries(getSlowEntryProcessor(2));
  awaitSlowEntryProcessors();
  logger.finest(getOperationStats(instance).toString());
  JsonObject firstLogJsonObject=getSlowOperationLogsJsonArray(instance).get(0).asObject();
  assertJSONContainsClassName(firstLogJsonObject,""String_Node_Str"");
  assertEqualsStringFormat(""String_Node_Str"",4,firstLogJsonObject.get(""String_Node_Str"").asArray().size());
}","@Test public void testJSON_SlowEntryProcessor(){
  for (int i=0; i < 2; i++) {
    map.executeOnEntries(getSlowEntryProcessor(3));
  }
  map.executeOnEntries(getSlowEntryProcessor(4));
  map.executeOnEntries(getSlowEntryProcessor(3));
  awaitSlowEntryProcessors();
  logger.finest(getOperationStats(instance).toString());
  JsonObject firstLogJsonObject=getSlowOperationLogsJsonArray(instance).get(0).asObject();
  assertJSONContainsClassName(firstLogJsonObject,""String_Node_Str"");
  assertEqualsStringFormat(""String_Node_Str"",4,firstLogJsonObject.get(""String_Node_Str"").asArray().size());
}",0.9137055837563453
47400,"@Test public void testJSON_multipleEntryProcessorClasses() throws InterruptedException {
  for (int i=0; i < 2; i++) {
    map.executeOnEntries(getSlowEntryProcessor(2));
  }
  SlowEntryProcessorChild entryProcessorChild=new SlowEntryProcessorChild(2);
  map.executeOnEntries(entryProcessorChild);
  map.executeOnEntries(getSlowEntryProcessor(4));
  awaitSlowEntryProcessors();
  entryProcessorChild.await();
  logger.finest(getOperationStats(instance).toString());
  JsonArray slowOperationLogsJsonArray=getSlowOperationLogsJsonArray(instance);
  JsonObject firstLogJsonObject=slowOperationLogsJsonArray.get(0).asObject();
  JsonObject secondLogJsonObject=slowOperationLogsJsonArray.get(1).asObject();
  assertJSONContainsClassNameJustOnce(firstLogJsonObject,secondLogJsonObject,""String_Node_Str"");
  assertJSONContainsClassNameJustOnce(firstLogJsonObject,secondLogJsonObject,""String_Node_Str"");
  int firstSize=firstLogJsonObject.get(""String_Node_Str"").asArray().size();
  int secondSize=secondLogJsonObject.get(""String_Node_Str"").asArray().size();
  assertTrue(format(""String_Node_Str"",firstSize,secondSize),(firstSize == 1 ^ secondSize == 1) && (firstSize == 3 ^ secondSize == 3));
}","@Test public void testJSON_multipleEntryProcessorClasses() throws InterruptedException {
  for (int i=0; i < 2; i++) {
    map.executeOnEntries(getSlowEntryProcessor(3));
  }
  SlowEntryProcessorChild entryProcessorChild=new SlowEntryProcessorChild(3);
  map.executeOnEntries(entryProcessorChild);
  map.executeOnEntries(getSlowEntryProcessor(4));
  awaitSlowEntryProcessors();
  entryProcessorChild.await();
  logger.finest(getOperationStats(instance).toString());
  JsonArray slowOperationLogsJsonArray=getSlowOperationLogsJsonArray(instance);
  JsonObject firstLogJsonObject=slowOperationLogsJsonArray.get(0).asObject();
  JsonObject secondLogJsonObject=slowOperationLogsJsonArray.get(1).asObject();
  assertJSONContainsClassNameJustOnce(firstLogJsonObject,secondLogJsonObject,""String_Node_Str"");
  assertJSONContainsClassNameJustOnce(firstLogJsonObject,secondLogJsonObject,""String_Node_Str"");
  int firstSize=firstLogJsonObject.get(""String_Node_Str"").asArray().size();
  int secondSize=secondLogJsonObject.get(""String_Node_Str"").asArray().size();
  assertTrue(format(""String_Node_Str"",firstSize,secondSize),(firstSize == 1 ^ secondSize == 1) && (firstSize == 3 ^ secondSize == 3));
}",0.9983150800336984
47401,"/** 
 * Tries to unschedule this WriteHandler. <p/> It will only be unscheduled if: - the outputBuffer is empty - there are no pending packets. <p/> If the outputBuffer is dirty then it will register itself for an OP_WRITE since we are interested in knowing if there is more space in the socket output buffer. If the outputBuffer is not dirty, then it will unregister itself from an OP_WRITE since it isn't interested in space in the socket outputBuffer. <p/> This call is only made by the IO thread.
 */
private void unschedule(){
  if (dirtyOutputBuffer()) {
    registerOp(SelectionKey.OP_WRITE);
    return;
  }
  unregisterOp(SelectionKey.OP_WRITE);
  scheduled.set(false);
  if (writeQueue.isEmpty() && urgentWriteQueue.isEmpty()) {
    return;
  }
  if (!scheduled.compareAndSet(false,true)) {
    return;
  }
  ioSelector.addTask(this);
}","/** 
 * Tries to unschedule this WriteHandler. <p/> It will only be unscheduled if: - the outputBuffer is empty - there are no pending packets. <p/> If the outputBuffer is dirty then it will register itself for an OP_WRITE since we are interested in knowing if there is more space in the socket output buffer. If the outputBuffer is not dirty, then it will unregister itself from an OP_WRITE since it isn't interested in space in the socket outputBuffer. <p/> This call is only made by the IO thread.
 */
private void unschedule(){
  if (dirtyOutputBuffer() || currentPacket != null) {
    registerOp(SelectionKey.OP_WRITE);
    return;
  }
  unregisterOp(SelectionKey.OP_WRITE);
  scheduled.set(false);
  if (writeQueue.isEmpty() && urgentWriteQueue.isEmpty()) {
    return;
  }
  if (!scheduled.compareAndSet(false,true)) {
    return;
  }
  ioSelector.addTask(this);
}",0.9854397204426324
47402,"TcpIpConnection assignSocketChannel(SocketChannelWrapper channel,Address endpoint){
  InetSocketAddress remoteSocketAddress=(InetSocketAddress)channel.socket().getRemoteSocketAddress();
  int index=nextSelectorIndex();
  final TcpIpConnection connection=new TcpIpConnection(this,inSelectors[index],outSelectors[index],connectionIdGen.incrementAndGet(),channel);
  ioBalancer.connectionAdded(connection);
  connection.setEndPoint(endpoint);
  activeConnections.add(connection);
  acceptedSockets.remove(channel);
  connection.start();
  log(Level.INFO,""String_Node_Str"" + channel.socket().getLocalSocketAddress());
  return connection;
}","TcpIpConnection assignSocketChannel(SocketChannelWrapper channel,Address endpoint){
  int index=nextSelectorIndex();
  final TcpIpConnection connection=new TcpIpConnection(this,inSelectors[index],outSelectors[index],connectionIdGen.incrementAndGet(),channel);
  ioBalancer.connectionAdded(connection);
  connection.setEndPoint(endpoint);
  activeConnections.add(connection);
  acceptedSockets.remove(channel);
  connection.start();
  log(Level.INFO,""String_Node_Str"" + channel.socket().getLocalSocketAddress());
  return connection;
}",0.9128205128205128
47403,"@Test public void createCache_WhenCacheConfigIsNull(){
  String cacheName=""String_Node_Str"";
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager();
  try {
    cacheManager.createCache(cacheName,null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException expected) {
    EmptyStatement.ignore(expected);
  }
}","@Test public void createCache_WhenCacheConfigIsNull(){
  String cacheName=""String_Node_Str"";
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager();
  try {
    cacheManager.createCache(cacheName,(Configuration<Object,Object>)null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException expected) {
    EmptyStatement.ignore(expected);
  }
}",0.9578651685393258
47404,"@Test public void createCache_WhenCacheConfigIsNull(){
  String cacheName=""String_Node_Str"";
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager();
  try {
    cacheManager.createCache(cacheName,null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException expected) {
  }
}","@Test public void createCache_WhenCacheConfigIsNull(){
  String cacheName=""String_Node_Str"";
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager();
  try {
    cacheManager.createCache(cacheName,null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException expected) {
    EmptyStatement.ignore(expected);
  }
}",0.9426356589147288
47405,"private void handleClientMessage(ClientMessage clientMessage) throws ClassNotFoundException, IllegalAccessException, InstantiationException {
  int correlationId=clientMessage.getCorrelationId();
  final ClientInvocation future=deRegisterCallId(correlationId);
  if (future == null) {
    logger.warning(""String_Node_Str"" + correlationId + ""String_Node_Str""+ clientMessage);
    return;
  }
  if (ClientMessageType.EXCEPTION.ordinal() == clientMessage.getMessageType()) {
    ExceptionResultParameters exceptionResultParameters=ExceptionResultParameters.decode(clientMessage);
    Class<?> clazz=Class.forName(exceptionResultParameters.className);
    Throwable exception=(Throwable)clazz.newInstance();
    future.notifyException(exception);
  }
 else {
    future.notify(clientMessage);
  }
}","private void handleClientMessage(ClientMessage clientMessage) throws ClassNotFoundException, IllegalAccessException, InstantiationException {
  int correlationId=clientMessage.getCorrelationId();
  final ClientInvocation future=deRegisterCallId(correlationId);
  if (future == null) {
    logger.warning(""String_Node_Str"" + correlationId + ""String_Node_Str""+ clientMessage);
    return;
  }
  if (ClientMessageType.EXCEPTION.id() == clientMessage.getMessageType()) {
    ExceptionResultParameters exceptionResultParameters=ExceptionResultParameters.decode(clientMessage);
    Class<?> clazz=Class.forName(exceptionResultParameters.className);
    Throwable exception=(Throwable)clazz.newInstance();
    future.notifyException(exception);
  }
 else {
    future.notify(clientMessage);
  }
}",0.9943145925457992
47406,"@Override public void authenticate(ClientConnection connection) throws AuthenticationException, IOException {
  final SerializationService ss=client.getSerializationService();
  String uuid=""String_Node_Str"";
  String ownerUuid=""String_Node_Str"";
  if (principal != null) {
    uuid=principal.getUuid();
    ownerUuid=principal.getOwnerUuid();
  }
  ClientMessage clientMessage;
  if (credentials instanceof UsernamePasswordCredentials) {
    UsernamePasswordCredentials cr=(UsernamePasswordCredentials)credentials;
    clientMessage=AuthenticationParameters.encode(cr.getUsername(),cr.getPassword(),uuid,ownerUuid,true);
  }
 else {
    Data data=ss.toData(credentials);
    clientMessage=AuthenticationCustomCredentialsParameters.encode(data.toByteArray(),uuid,ownerUuid,true);
  }
  connection.init();
  ClientMessage response;
  final ClientInvocation clientInvocation=new ClientInvocation(client,clientMessage,connection);
  final Future<ClientMessage> future=clientInvocation.invoke();
  try {
    response=ss.toObject(future.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e,IOException.class);
  }
  AuthenticationResultParameters resultParameters=AuthenticationResultParameters.decode(response);
  connection.setRemoteEndpoint(resultParameters.address);
  principal=new ClientPrincipal(resultParameters.uuid,resultParameters.ownerUuid);
}","@Override public void authenticate(ClientConnection connection) throws AuthenticationException, IOException {
  final SerializationService ss=client.getSerializationService();
  String uuid=""String_Node_Str"";
  String ownerUuid=""String_Node_Str"";
  if (principal != null) {
    uuid=principal.getUuid();
    ownerUuid=principal.getOwnerUuid();
  }
  ClientMessage clientMessage;
  if (credentials instanceof UsernamePasswordCredentials) {
    UsernamePasswordCredentials cr=(UsernamePasswordCredentials)credentials;
    clientMessage=AuthenticationParameters.encode(cr.getUsername(),cr.getPassword(),uuid,ownerUuid,true);
  }
 else {
    Data data=ss.toData(credentials);
    clientMessage=AuthenticationCustomCredentialsParameters.encode(data.toByteArray(),uuid,ownerUuid,true);
  }
  connection.init();
  ClientMessage response;
  final ClientInvocation clientInvocation=new ClientInvocation(client,clientMessage,connection);
  final Future<ClientMessage> future=clientInvocation.invoke();
  try {
    response=future.get();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e,IOException.class);
  }
  AuthenticationResultParameters resultParameters=AuthenticationResultParameters.decode(response);
  connection.setRemoteEndpoint(resultParameters.address);
  principal=new ClientPrincipal(resultParameters.uuid,resultParameters.ownerUuid);
}",0.995225853837679
47407,"@Override public void destroy(){
  clear();
  closeResources();
  closeListeners();
  onDestroy();
}","@Override public void destroy(){
  clear();
  closeListeners();
  onDestroy();
}",0.8888888888888888
47408,"public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaxSizePolicy());
  this.evictionPolicyEvaluator=createEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=creatEvictionStrategy(evictionConfig);
}","public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaxSizePolicy());
  this.evictionPolicyEvaluator=createEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=creatEvictionStrategy(evictionConfig);
  if (cacheWriter instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheWriter);
  }
  if (cacheLoader instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheLoader);
  }
  if (defaultExpiryPolicy instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)defaultExpiryPolicy);
  }
}",0.9045780474351904
47409,"@Override public boolean deregisterListener(String name,String registrationId){
  final EventService eventService=getNodeEngine().getEventService();
  return eventService.deregisterListener(SERVICE_NAME,name,registrationId);
}","@Override public boolean deregisterListener(String name,String registrationId){
  final EventService eventService=getNodeEngine().getEventService();
  boolean result=eventService.deregisterListener(SERVICE_NAME,name,registrationId);
  Closeable listener=closeableListeners.remove(registrationId);
  if (listener != null) {
    IOUtil.closeResource(listener);
  }
  return result;
}",0.7215815485996705
47410,"@Override public String registerListener(String distributedObjectName,CacheEventListener listener){
  final EventService eventService=getNodeEngine().getEventService();
  final EventRegistration registration=eventService.registerListener(AbstractCacheService.SERVICE_NAME,distributedObjectName,listener);
  return registration.getId();
}","@Override public String registerListener(String distributedObjectName,CacheEventListener listener){
  final EventService eventService=getNodeEngine().getEventService();
  final EventRegistration registration=eventService.registerListener(AbstractCacheService.SERVICE_NAME,distributedObjectName,listener);
  final String id=registration.getId();
  if (listener instanceof Closeable) {
    closeableListeners.put(id,(Closeable)listener);
  }
 else   if (listener instanceof CacheEntryListenerProvider) {
    CacheEntryListener cacheEntryListener=((CacheEntryListenerProvider)listener).getCacheEntryListener();
    if (cacheEntryListener instanceof Closeable) {
      closeableListeners.put(id,(Closeable)cacheEntryListener);
    }
  }
  return id;
}",0.584870848708487
47411,"@Override public void deregisterAllListener(String name){
  nodeEngine.getEventService().deregisterAllListeners(AbstractCacheService.SERVICE_NAME,name);
}","@Override public void deregisterAllListener(String name){
  final EventService eventService=getNodeEngine().getEventService();
  final Collection<EventRegistration> registrations=eventService.getRegistrations(SERVICE_NAME,name);
  if (registrations != null) {
    for (    EventRegistration registration : registrations) {
      Closeable listener=closeableListeners.remove(registration.getId());
      if (listener != null) {
        IOUtil.closeResource(listener);
      }
    }
  }
  eventService.deregisterAllListeners(AbstractCacheService.SERVICE_NAME,name);
}",0.2531293463143254
47412,"@Override public void destroyCache(String objectName,boolean isLocal,String callerUuid){
  CacheConfig config=deleteCacheConfig(objectName);
  destroySegments(objectName);
  if (!isLocal) {
    deregisterAllListener(objectName);
  }
  operationProviderCache.remove(objectName);
  setStatisticsEnabled(config,objectName,false);
  setManagementEnabled(config,objectName,false);
  deleteCacheConfig(objectName);
  deleteCacheStat(objectName);
  if (!isLocal) {
    destroyCacheOnAllMembers(objectName,callerUuid);
  }
}","@Override public void destroyCache(String objectName,boolean isLocal,String callerUuid){
  CacheConfig config=deleteCacheConfig(objectName);
  destroySegments(objectName);
  if (!isLocal) {
    deregisterAllListener(objectName);
  }
  operationProviderCache.remove(objectName);
  setStatisticsEnabled(config,objectName,false);
  setManagementEnabled(config,objectName,false);
  deleteCacheConfig(objectName);
  deleteCacheStat(objectName);
  deleteCacheResources(objectName);
  if (!isLocal) {
    destroyCacheOnAllMembers(objectName,callerUuid);
  }
}",0.9662921348314608
47413,"public CacheEventListenerAdaptor(ICache<K,V> source,CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,SerializationService serializationService){
  this.source=source;
  this.serializationService=serializationService;
  final CacheEntryListener<? super K,? super V> cacheEntryListener=cacheEntryListenerConfiguration.getCacheEntryListenerFactory().create();
  if (cacheEntryListener instanceof CacheEntryCreatedListener) {
    this.cacheEntryCreatedListener=(CacheEntryCreatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryCreatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryRemovedListener) {
    this.cacheEntryRemovedListener=(CacheEntryRemovedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryRemovedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryUpdatedListener) {
    this.cacheEntryUpdatedListener=(CacheEntryUpdatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryUpdatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryExpiredListener) {
    this.cacheEntryExpiredListener=(CacheEntryExpiredListener)cacheEntryListener;
  }
 else {
    this.cacheEntryExpiredListener=null;
  }
  final Factory<CacheEntryEventFilter<? super K,? super V>> filterFactory=cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();
  if (filterFactory != null) {
    filter=filterFactory.create();
  }
 else {
    filter=null;
  }
  isOldValueRequired=cacheEntryListenerConfiguration.isOldValueRequired();
}","public CacheEventListenerAdaptor(ICache<K,V> source,CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,SerializationService serializationService){
  this.source=source;
  this.serializationService=serializationService;
  final CacheEntryListener<? super K,? super V> cacheEntryListener=cacheEntryListenerConfiguration.getCacheEntryListenerFactory().create();
  this.cacheEntryListener=(CacheEntryListener<K,V>)cacheEntryListener;
  if (cacheEntryListener instanceof CacheEntryCreatedListener) {
    this.cacheEntryCreatedListener=(CacheEntryCreatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryCreatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryRemovedListener) {
    this.cacheEntryRemovedListener=(CacheEntryRemovedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryRemovedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryUpdatedListener) {
    this.cacheEntryUpdatedListener=(CacheEntryUpdatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryUpdatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryExpiredListener) {
    this.cacheEntryExpiredListener=(CacheEntryExpiredListener)cacheEntryListener;
  }
 else {
    this.cacheEntryExpiredListener=null;
  }
  final Factory<CacheEntryEventFilter<? super K,? super V>> filterFactory=cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();
  if (filterFactory != null) {
    this.filter=filterFactory.create();
  }
 else {
    this.filter=null;
  }
  this.isOldValueRequired=cacheEntryListenerConfiguration.isOldValueRequired();
}",0.9722938144329896
47414,"@Override public boolean deregisterListener(String name,String registrationId){
  final EventService eventService=getNodeEngine().getEventService();
  return eventService.deregisterListener(SERVICE_NAME,name,registrationId);
}","@Override public boolean deregisterListener(String name,String registrationId){
  final EventService eventService=getNodeEngine().getEventService();
  boolean result=eventService.deregisterListener(SERVICE_NAME,name,registrationId);
  Closeable listener=closeableListeners.remove(registrationId);
  if (listener != null) {
    IOUtil.closeResource(listener);
  }
  return result;
}",0.7215815485996705
47415,"public void addCacheResource(String name,Closeable resource){
  Set<Closeable> cacheResources;
synchronized (resources) {
    cacheResources=resources.get(name);
    if (cacheResources == null) {
      cacheResources=new HashSet<Closeable>();
      resources.put(name,cacheResources);
    }
  }
  cacheResources.add(resource);
}","public void addCacheResource(String name,Closeable resource){
  Set<Closeable> cacheResources=resources.get(name);
  if (cacheResources == null) {
synchronized (resources) {
      cacheResources=resources.get(name);
      if (cacheResources == null) {
        cacheResources=Collections.newSetFromMap(new ConcurrentHashMap<Closeable,Boolean>());
        resources.put(name,cacheResources);
      }
    }
  }
  cacheResources.add(resource);
}",0.6605981794538361
47416,"@Override public String registerListener(String distributedObjectName,CacheEventListener listener){
  final EventService eventService=getNodeEngine().getEventService();
  final EventRegistration registration=eventService.registerListener(AbstractCacheService.SERVICE_NAME,distributedObjectName,listener);
  return registration.getId();
}","@Override public String registerListener(String distributedObjectName,CacheEventListener listener){
  final EventService eventService=getNodeEngine().getEventService();
  final EventRegistration registration=eventService.registerListener(AbstractCacheService.SERVICE_NAME,distributedObjectName,listener);
  final String id=registration.getId();
  if (listener instanceof Closeable) {
    closeableListeners.put(id,(Closeable)listener);
  }
 else   if (listener instanceof CacheEntryListenerProvider) {
    CacheEntryListener cacheEntryListener=((CacheEntryListenerProvider)listener).getCacheEntryListener();
    if (cacheEntryListener instanceof Closeable) {
      closeableListeners.put(id,(Closeable)cacheEntryListener);
    }
  }
  return id;
}",0.584870848708487
47417,"@Override public void deregisterAllListener(String name){
  nodeEngine.getEventService().deregisterAllListeners(AbstractCacheService.SERVICE_NAME,name);
}","@Override public void deregisterAllListener(String name){
  final EventService eventService=getNodeEngine().getEventService();
  final Collection<EventRegistration> registrations=eventService.getRegistrations(SERVICE_NAME,name);
  if (registrations != null) {
    for (    EventRegistration registration : registrations) {
      Closeable listener=closeableListeners.remove(registration.getId());
      if (listener != null) {
        IOUtil.closeResource(listener);
      }
    }
  }
  eventService.deregisterAllListeners(AbstractCacheService.SERVICE_NAME,name);
}",0.2531293463143254
47418,"public CacheEventListenerAdaptor(ICache<K,V> source,CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,SerializationService serializationService){
  this.source=source;
  this.serializationService=serializationService;
  final CacheEntryListener<? super K,? super V> cacheEntryListener=cacheEntryListenerConfiguration.getCacheEntryListenerFactory().create();
  if (cacheEntryListener instanceof CacheEntryCreatedListener) {
    this.cacheEntryCreatedListener=(CacheEntryCreatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryCreatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryRemovedListener) {
    this.cacheEntryRemovedListener=(CacheEntryRemovedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryRemovedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryUpdatedListener) {
    this.cacheEntryUpdatedListener=(CacheEntryUpdatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryUpdatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryExpiredListener) {
    this.cacheEntryExpiredListener=(CacheEntryExpiredListener)cacheEntryListener;
  }
 else {
    this.cacheEntryExpiredListener=null;
  }
  final Factory<CacheEntryEventFilter<? super K,? super V>> filterFactory=cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();
  if (filterFactory != null) {
    filter=filterFactory.create();
  }
 else {
    filter=null;
  }
  isOldValueRequired=cacheEntryListenerConfiguration.isOldValueRequired();
}","public CacheEventListenerAdaptor(ICache<K,V> source,CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,SerializationService serializationService){
  this.source=source;
  this.serializationService=serializationService;
  final CacheEntryListener<? super K,? super V> cacheEntryListener=cacheEntryListenerConfiguration.getCacheEntryListenerFactory().create();
  this.cacheEntryListener=(CacheEntryListener<K,V>)cacheEntryListener;
  if (cacheEntryListener instanceof CacheEntryCreatedListener) {
    this.cacheEntryCreatedListener=(CacheEntryCreatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryCreatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryRemovedListener) {
    this.cacheEntryRemovedListener=(CacheEntryRemovedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryRemovedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryUpdatedListener) {
    this.cacheEntryUpdatedListener=(CacheEntryUpdatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryUpdatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryExpiredListener) {
    this.cacheEntryExpiredListener=(CacheEntryExpiredListener)cacheEntryListener;
  }
 else {
    this.cacheEntryExpiredListener=null;
  }
  final Factory<CacheEntryEventFilter<? super K,? super V>> filterFactory=cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();
  if (filterFactory != null) {
    this.filter=filterFactory.create();
  }
 else {
    this.filter=null;
  }
  this.isOldValueRequired=cacheEntryListenerConfiguration.isOldValueRequired();
}",0.9722938144329896
47419,"@Override public void destroy(){
  clear();
  closeResources();
  closeListeners();
}","@Override public void destroy(){
  clear();
  closeListeners();
}",0.8666666666666667
47420,"public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaxSizePolicy());
  this.evictionPolicyEvaluator=creatEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=creatEvictionStrategy(evictionConfig);
}","public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaxSizePolicy());
  this.evictionPolicyEvaluator=creatEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=creatEvictionStrategy(evictionConfig);
  if (cacheWriter instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheWriter);
  }
  if (cacheLoader instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheLoader);
  }
  if (defaultExpiryPolicy instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)defaultExpiryPolicy);
  }
}",0.9045253863134658
47421,"@Override public boolean deregisterListener(String name,String registrationId){
  final EventService eventService=getNodeEngine().getEventService();
  return eventService.deregisterListener(SERVICE_NAME,name,registrationId);
}","@Override public boolean deregisterListener(String name,String registrationId){
  final EventService eventService=getNodeEngine().getEventService();
  final boolean result=eventService.deregisterListener(SERVICE_NAME,name,registrationId);
  Closeable listener=closeableListeners.remove(registrationId);
  if (listener != null) {
    IOUtil.closeResource(listener);
  }
  return result;
}",0.7145187601957586
47422,"@Override public String registerListener(String distributedObjectName,CacheEventListener listener){
  final EventService eventService=getNodeEngine().getEventService();
  final EventRegistration registration=eventService.registerListener(AbstractCacheService.SERVICE_NAME,distributedObjectName,listener);
  return registration.getId();
}","@Override public String registerListener(String distributedObjectName,CacheEventListener listener){
  final EventService eventService=getNodeEngine().getEventService();
  final EventRegistration registration=eventService.registerListener(AbstractCacheService.SERVICE_NAME,distributedObjectName,listener);
  final String id=registration.getId();
  if (listener instanceof Closeable) {
    closeableListeners.put(id,(Closeable)listener);
  }
 else   if (listener instanceof CacheEntryListenerProvider) {
    CacheEntryListener cacheEntryListener=((CacheEntryListenerProvider)listener).getCacheEntryListener();
    if (cacheEntryListener instanceof Closeable) {
      closeableListeners.put(id,(Closeable)cacheEntryListener);
    }
  }
  return id;
}",0.584870848708487
47423,"@Override public void deregisterAllListener(String name){
  nodeEngine.getEventService().deregisterAllListeners(AbstractCacheService.SERVICE_NAME,name);
}","@Override public void deregisterAllListener(String name){
  final EventService eventService=getNodeEngine().getEventService();
  final Collection<EventRegistration> registrations=eventService.getRegistrations(SERVICE_NAME,name);
  if (registrations != null) {
    for (    EventRegistration registration : registrations) {
      Closeable listener=closeableListeners.remove(registration.getId());
      if (listener != null) {
        IOUtil.closeResource(listener);
      }
    }
  }
  eventService.deregisterAllListeners(AbstractCacheService.SERVICE_NAME,name);
}",0.2531293463143254
47424,"@Override public void destroyCache(String objectName,boolean isLocal,String callerUuid){
  CacheConfig config=deleteCacheConfig(objectName);
  destroySegments(objectName);
  if (!isLocal) {
    deregisterAllListener(objectName);
  }
  operationProviderCache.remove(objectName);
  setStatisticsEnabled(config,objectName,false);
  setManagementEnabled(config,objectName,false);
  deleteCacheConfig(objectName);
  deleteCacheStat(objectName);
  if (!isLocal) {
    destroyCacheOnAllMembers(objectName,callerUuid);
  }
}","@Override public void destroyCache(String objectName,boolean isLocal,String callerUuid){
  CacheConfig config=deleteCacheConfig(objectName);
  destroySegments(objectName);
  if (!isLocal) {
    deregisterAllListener(objectName);
  }
  operationProviderCache.remove(objectName);
  setStatisticsEnabled(config,objectName,false);
  setManagementEnabled(config,objectName,false);
  deleteCacheConfig(objectName);
  deleteCacheStat(objectName);
  deleteCacheResources(objectName);
  if (!isLocal) {
    destroyCacheOnAllMembers(objectName,callerUuid);
  }
}",0.9662921348314608
47425,"public CacheEventListenerAdaptor(ICache<K,V> source,CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,SerializationService serializationService){
  this.source=source;
  this.serializationService=serializationService;
  final CacheEntryListener<? super K,? super V> cacheEntryListener=cacheEntryListenerConfiguration.getCacheEntryListenerFactory().create();
  if (cacheEntryListener instanceof CacheEntryCreatedListener) {
    this.cacheEntryCreatedListener=(CacheEntryCreatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryCreatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryRemovedListener) {
    this.cacheEntryRemovedListener=(CacheEntryRemovedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryRemovedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryUpdatedListener) {
    this.cacheEntryUpdatedListener=(CacheEntryUpdatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryUpdatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryExpiredListener) {
    this.cacheEntryExpiredListener=(CacheEntryExpiredListener)cacheEntryListener;
  }
 else {
    this.cacheEntryExpiredListener=null;
  }
  final Factory<CacheEntryEventFilter<? super K,? super V>> filterFactory=cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();
  if (filterFactory != null) {
    filter=filterFactory.create();
  }
 else {
    filter=null;
  }
  isOldValueRequired=cacheEntryListenerConfiguration.isOldValueRequired();
}","public CacheEventListenerAdaptor(ICache<K,V> source,CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,SerializationService serializationService){
  this.source=source;
  this.serializationService=serializationService;
  final CacheEntryListener<? super K,? super V> cacheEntryListener=cacheEntryListenerConfiguration.getCacheEntryListenerFactory().create();
  this.cacheEntryListener=(CacheEntryListener<K,V>)cacheEntryListener;
  if (cacheEntryListener instanceof CacheEntryCreatedListener) {
    this.cacheEntryCreatedListener=(CacheEntryCreatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryCreatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryRemovedListener) {
    this.cacheEntryRemovedListener=(CacheEntryRemovedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryRemovedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryUpdatedListener) {
    this.cacheEntryUpdatedListener=(CacheEntryUpdatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryUpdatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryExpiredListener) {
    this.cacheEntryExpiredListener=(CacheEntryExpiredListener)cacheEntryListener;
  }
 else {
    this.cacheEntryExpiredListener=null;
  }
  final Factory<CacheEntryEventFilter<? super K,? super V>> filterFactory=cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();
  if (filterFactory != null) {
    this.filter=filterFactory.create();
  }
 else {
    this.filter=null;
  }
  this.isOldValueRequired=cacheEntryListenerConfiguration.isOldValueRequired();
}",0.9722938144329896
47426,"@Override public void destroy(){
  clear();
  closeResources();
  closeListeners();
}","@Override public void destroy(){
  clear();
  closeListeners();
}",0.8666666666666667
47427,"public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaxSizePolicy());
  this.evictionPolicyEvaluator=creatEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=creatEvictionStrategy(evictionConfig);
}","public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaxSizePolicy());
  this.evictionPolicyEvaluator=creatEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=creatEvictionStrategy(evictionConfig);
  if (cacheWriter instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheWriter);
  }
  if (cacheLoader instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheLoader);
  }
  if (defaultExpiryPolicy instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)defaultExpiryPolicy);
  }
}",0.9045253863134658
47428,"@Override public boolean deregisterListener(String name,String registrationId){
  final EventService eventService=getNodeEngine().getEventService();
  return eventService.deregisterListener(SERVICE_NAME,name,registrationId);
}","@Override public boolean deregisterListener(String name,String registrationId){
  final EventService eventService=getNodeEngine().getEventService();
  final boolean result=eventService.deregisterListener(SERVICE_NAME,name,registrationId);
  Closeable listener=closeableListeners.remove(registrationId);
  if (listener != null) {
    IOUtil.closeResource(listener);
  }
  return result;
}",0.7145187601957586
47429,"@Override public String registerListener(String distributedObjectName,CacheEventListener listener){
  final EventService eventService=getNodeEngine().getEventService();
  final EventRegistration registration=eventService.registerListener(AbstractCacheService.SERVICE_NAME,distributedObjectName,listener);
  return registration.getId();
}","@Override public String registerListener(String distributedObjectName,CacheEventListener listener){
  final EventService eventService=getNodeEngine().getEventService();
  final EventRegistration registration=eventService.registerListener(AbstractCacheService.SERVICE_NAME,distributedObjectName,listener);
  final String id=registration.getId();
  if (listener instanceof Closeable) {
    closeableListeners.put(id,(Closeable)listener);
  }
 else   if (listener instanceof CacheEntryListenerProvider) {
    CacheEntryListener cacheEntryListener=((CacheEntryListenerProvider)listener).getCacheEntryListener();
    if (cacheEntryListener instanceof Closeable) {
      closeableListeners.put(id,(Closeable)cacheEntryListener);
    }
  }
  return id;
}",0.584870848708487
47430,"@Override public void deregisterAllListener(String name){
  nodeEngine.getEventService().deregisterAllListeners(AbstractCacheService.SERVICE_NAME,name);
}","@Override public void deregisterAllListener(String name){
  final EventService eventService=getNodeEngine().getEventService();
  final Collection<EventRegistration> registrations=eventService.getRegistrations(SERVICE_NAME,name);
  if (registrations != null) {
    for (    EventRegistration registration : registrations) {
      Closeable listener=closeableListeners.remove(registration.getId());
      if (listener != null) {
        IOUtil.closeResource(listener);
      }
    }
  }
  eventService.deregisterAllListeners(AbstractCacheService.SERVICE_NAME,name);
}",0.2531293463143254
47431,"@Override public void destroyCache(String objectName,boolean isLocal,String callerUuid){
  CacheConfig config=deleteCacheConfig(objectName);
  destroySegments(objectName);
  if (!isLocal) {
    deregisterAllListener(objectName);
  }
  operationProviderCache.remove(objectName);
  setStatisticsEnabled(config,objectName,false);
  setManagementEnabled(config,objectName,false);
  deleteCacheConfig(objectName);
  deleteCacheStat(objectName);
  if (!isLocal) {
    destroyCacheOnAllMembers(objectName,callerUuid);
  }
}","@Override public void destroyCache(String objectName,boolean isLocal,String callerUuid){
  CacheConfig config=deleteCacheConfig(objectName);
  destroySegments(objectName);
  if (!isLocal) {
    deregisterAllListener(objectName);
  }
  operationProviderCache.remove(objectName);
  setStatisticsEnabled(config,objectName,false);
  setManagementEnabled(config,objectName,false);
  deleteCacheConfig(objectName);
  deleteCacheStat(objectName);
  deleteCacheResources(objectName);
  if (!isLocal) {
    destroyCacheOnAllMembers(objectName,callerUuid);
  }
}",0.9662921348314608
47432,"public CacheEventListenerAdaptor(ICache<K,V> source,CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,SerializationService serializationService){
  this.source=source;
  this.serializationService=serializationService;
  final CacheEntryListener<? super K,? super V> cacheEntryListener=cacheEntryListenerConfiguration.getCacheEntryListenerFactory().create();
  if (cacheEntryListener instanceof CacheEntryCreatedListener) {
    this.cacheEntryCreatedListener=(CacheEntryCreatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryCreatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryRemovedListener) {
    this.cacheEntryRemovedListener=(CacheEntryRemovedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryRemovedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryUpdatedListener) {
    this.cacheEntryUpdatedListener=(CacheEntryUpdatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryUpdatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryExpiredListener) {
    this.cacheEntryExpiredListener=(CacheEntryExpiredListener)cacheEntryListener;
  }
 else {
    this.cacheEntryExpiredListener=null;
  }
  final Factory<CacheEntryEventFilter<? super K,? super V>> filterFactory=cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();
  if (filterFactory != null) {
    filter=filterFactory.create();
  }
 else {
    filter=null;
  }
  isOldValueRequired=cacheEntryListenerConfiguration.isOldValueRequired();
}","public CacheEventListenerAdaptor(ICache<K,V> source,CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,SerializationService serializationService){
  this.source=source;
  this.serializationService=serializationService;
  final CacheEntryListener<? super K,? super V> cacheEntryListener=cacheEntryListenerConfiguration.getCacheEntryListenerFactory().create();
  this.cacheEntryListener=(CacheEntryListener<K,V>)cacheEntryListener;
  if (cacheEntryListener instanceof CacheEntryCreatedListener) {
    this.cacheEntryCreatedListener=(CacheEntryCreatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryCreatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryRemovedListener) {
    this.cacheEntryRemovedListener=(CacheEntryRemovedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryRemovedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryUpdatedListener) {
    this.cacheEntryUpdatedListener=(CacheEntryUpdatedListener)cacheEntryListener;
  }
 else {
    this.cacheEntryUpdatedListener=null;
  }
  if (cacheEntryListener instanceof CacheEntryExpiredListener) {
    this.cacheEntryExpiredListener=(CacheEntryExpiredListener)cacheEntryListener;
  }
 else {
    this.cacheEntryExpiredListener=null;
  }
  final Factory<CacheEntryEventFilter<? super K,? super V>> filterFactory=cacheEntryListenerConfiguration.getCacheEntryEventFilterFactory();
  if (filterFactory != null) {
    this.filter=filterFactory.create();
  }
 else {
    this.filter=null;
  }
  this.isOldValueRequired=cacheEntryListenerConfiguration.isOldValueRequired();
}",0.9722938144329896
47433,"@Override public <K,V>ICache<K,V> getCache(String cacheName){
  checkIfManagerNotClosed();
  ICacheInternal<?,?> cache=getCacheUnchecked(cacheName);
  if (cache != null) {
    Configuration<?,?> configuration=cache.getConfiguration(CacheConfig.class);
    if (Object.class.equals(configuration.getKeyType()) && Object.class.equals(configuration.getValueType())) {
      return ensureOpenIfAvailable((ICacheInternal<K,V>)cache);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + cacheName + ""String_Node_Str""+ ""String_Node_Str""+ configuration.getKeyType()+ ""String_Node_Str""+ configuration.getValueType()+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  return ensureOpenIfAvailable((ICacheInternal<K,V>)cache);
}","@Override public <K,V>ICache<K,V> getCache(String cacheName){
  checkIfManagerNotClosed();
  ICacheInternal<?,?> cache=getCacheUnchecked(cacheName);
  if (cache != null) {
    Configuration<?,?> configuration=cache.getConfiguration(CacheConfig.class);
    if (Object.class.equals(configuration.getKeyType()) && Object.class.equals(configuration.getValueType())) {
      return ensureOpenIfAvailable((ICacheInternal<K,V>)cache);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + cacheName + ""String_Node_Str""+ ""String_Node_Str""+ configuration.getKeyType()+ ""String_Node_Str""+ configuration.getValueType()+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  return null;
}",0.9630662020905923
47434,"@Override public void destroy(){
  clear();
  closeResources();
  closeListeners();
  onDestroy();
}","@Override public void destroy(){
  clear();
  closeListeners();
  onDestroy();
}",0.8888888888888888
47435,"public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaxSizePolicy());
  this.evictionPolicyEvaluator=createEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=creatEvictionStrategy(evictionConfig);
}","public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.nodeEngine=nodeEngine;
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + nodeEngine.getLocalMember());
  }
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.records=createRecordCacheMap();
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaxSizePolicy());
  this.evictionPolicyEvaluator=createEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=creatEvictionStrategy(evictionConfig);
  if (cacheWriter instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheWriter);
  }
  if (cacheLoader instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheLoader);
  }
  if (defaultExpiryPolicy instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)defaultExpiryPolicy);
  }
}",0.9045780474351904
47436,"@Override public void destroyCache(String objectName,boolean isLocal,String callerUuid){
  CacheConfig config=deleteCacheConfig(objectName);
  destroySegments(objectName);
  if (!isLocal) {
    deregisterAllListener(objectName);
  }
  operationProviderCache.remove(objectName);
  setStatisticsEnabled(config,objectName,false);
  setManagementEnabled(config,objectName,false);
  deleteCacheConfig(objectName);
  deleteCacheStat(objectName);
  if (!isLocal) {
    destroyCacheOnAllMembers(objectName,callerUuid);
  }
}","@Override public void destroyCache(String objectName,boolean isLocal,String callerUuid){
  CacheConfig config=deleteCacheConfig(objectName);
  destroySegments(objectName);
  if (!isLocal) {
    deregisterAllListener(objectName);
  }
  operationProviderCache.remove(objectName);
  setStatisticsEnabled(config,objectName,false);
  setManagementEnabled(config,objectName,false);
  deleteCacheConfig(objectName);
  deleteCacheStat(objectName);
  deleteCacheResources(objectName);
  if (!isLocal) {
    destroyCacheOnAllMembers(objectName,callerUuid);
  }
}",0.9662921348314608
47437,"@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  response=service.createCacheConfigIfAbsent(config);
  if (createAlsoOnOthers && response == null) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,true);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}","@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  response=service.createCacheConfigIfAbsent(config);
  if (createAlsoOnOthers) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,false);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}",0.9855227882037534
47438,"protected void doListNearCaches(){
  NearCacheManager nearCacheManager=createNearCacheManager();
  Collection<NearCache> nearCaches1=nearCacheManager.listAllNearCaches();
  assertEquals(0,nearCaches1.size());
  for (int i=0; i < DEFAULT_NEAR_CACHE_COUNT; i++) {
    createNearCache(nearCacheManager,DEFAULT_NEAR_CACHE_NAME + ""String_Node_Str"" + i);
  }
  Collection<NearCache> nearCaches2=nearCacheManager.listAllNearCaches();
  assertEquals(DEFAULT_NEAR_CACHE_COUNT,nearCaches2.size());
  int i=0;
  for (  NearCache nearCache : nearCaches2) {
    assertEquals(DEFAULT_NEAR_CACHE_NAME + ""String_Node_Str"" + (i++),nearCache.getName());
  }
}","protected void doListNearCaches(){
  NearCacheManager nearCacheManager=createNearCacheManager();
  Set<String> nearCacheNames=new HashSet<String>();
  Collection<NearCache> nearCaches1=nearCacheManager.listAllNearCaches();
  assertEquals(0,nearCaches1.size());
  for (int i=0; i < DEFAULT_NEAR_CACHE_COUNT; i++) {
    String nearCacheName=DEFAULT_NEAR_CACHE_NAME + ""String_Node_Str"" + i;
    createNearCache(nearCacheManager,nearCacheName);
    nearCacheNames.add(nearCacheName);
  }
  Collection<NearCache> nearCaches2=nearCacheManager.listAllNearCaches();
  assertEquals(DEFAULT_NEAR_CACHE_COUNT,nearCaches2.size());
  for (  NearCache nearCache : nearCaches2) {
    assertTrue(nearCacheNames.contains(nearCache.getName()));
  }
}",0.7720320466132556
47439,"private HazelcastServerCachingProvider createCachingProvider(Config hzConfig){
  HazelcastInstance hazelcastInstance=createHazelcastInstance(hzConfig);
  HazelcastServerCachingProvider cachingProvider=HazelcastServerCachingProvider.createCachingProvider(hazelcastInstance);
  return cachingProvider;
}","private HazelcastServerCachingProvider createCachingProvider(Config hzConfig){
  HazelcastInstance hazelcastInstance=Hazelcast.newHazelcastInstance(hzConfig);
  HazelcastServerCachingProvider cachingProvider=HazelcastServerCachingProvider.createCachingProvider(hazelcastInstance);
  return cachingProvider;
}",0.9688013136289
47440,"private Object waitForResponse(long time,TimeUnit unit){
  if (response != null && response != WAIT_RESPONSE) {
    return response;
  }
  WAITER_COUNT.incrementAndGet(this);
  try {
    long timeoutMs=toTimeoutMs(time,unit);
    long maxCallTimeoutMs=getMaxCallTimeout();
    boolean longPolling=timeoutMs > maxCallTimeoutMs;
    int pollCount=0;
    while (timeoutMs >= 0) {
      long pollTimeoutMs=min(maxCallTimeoutMs,timeoutMs);
      long startMs=Clock.currentTimeMillis();
      long lastPollTime=0;
      pollCount++;
      try {
        pollResponse(pollTimeoutMs);
        lastPollTime=Clock.currentTimeMillis() - startMs;
        timeoutMs=decrementTimeout(timeoutMs,lastPollTime);
        if (response == WAIT_RESPONSE) {
          RESPONSE.compareAndSet(this,WAIT_RESPONSE,null);
          continue;
        }
 else         if (response != null) {
          if (response != INTERRUPTED_RESPONSE && interrupted) {
            Thread.currentThread().interrupt();
          }
          return response;
        }
      }
 catch (      InterruptedException e) {
        interrupted=true;
      }
      if (!interrupted && longPolling) {
        Address target=invocation.getTarget();
        if (invocation.remote && invocation.nodeEngine.getThisAddress().equals(target)) {
          continue;
        }
        invocation.logger.warning(""String_Node_Str"" + lastPollTime + ""String_Node_Str""+ toString());
        boolean executing=operationService.getIsStillRunningService().isOperationExecuting(invocation);
        if (!executing) {
          Object operationTimeoutException=invocation.newOperationTimeoutException(pollCount * pollTimeoutMs);
          set(operationTimeoutException);
        }
      }
    }
    return TIMEOUT_RESPONSE;
  }
  finally {
    WAITER_COUNT.decrementAndGet(this);
  }
}","private Object waitForResponse(long time,TimeUnit unit){
  if (responseAvailable(response)) {
    return response;
  }
  WAITER_COUNT.incrementAndGet(this);
  try {
    long timeoutMs=toTimeoutMs(time,unit);
    long maxCallTimeoutMs=getMaxCallTimeout();
    boolean longPolling=timeoutMs > maxCallTimeoutMs;
    int pollCount=0;
    while (timeoutMs >= 0) {
      long pollTimeoutMs=min(maxCallTimeoutMs,timeoutMs);
      long startMs=Clock.currentTimeMillis();
      long lastPollTime=0;
      pollCount++;
      try {
        pollResponse(pollTimeoutMs);
        lastPollTime=Clock.currentTimeMillis() - startMs;
        timeoutMs=decrementTimeout(timeoutMs,lastPollTime);
        if (response == WAIT_RESPONSE) {
          RESPONSE.compareAndSet(this,WAIT_RESPONSE,null);
          continue;
        }
 else         if (response != null) {
          if (response != INTERRUPTED_RESPONSE && interrupted) {
            Thread.currentThread().interrupt();
          }
          return response;
        }
      }
 catch (      InterruptedException e) {
        interrupted=true;
      }
      if (!interrupted && longPolling) {
        Address target=invocation.getTarget();
        if (invocation.remote && invocation.nodeEngine.getThisAddress().equals(target)) {
          continue;
        }
        invocation.logger.warning(""String_Node_Str"" + lastPollTime + ""String_Node_Str""+ toString());
        boolean executing=operationService.getIsStillRunningService().isOperationExecuting(invocation);
        if (!executing) {
          Object operationTimeoutException=invocation.newOperationTimeoutException(pollCount * pollTimeoutMs);
          set(operationTimeoutException);
        }
      }
    }
    return TIMEOUT_RESPONSE;
  }
  finally {
    WAITER_COUNT.decrementAndGet(this);
  }
}",0.9850249584026622
47441,"@Override public boolean isDone(){
  return response != null;
}","@Override public boolean isDone(){
  return responseAvailable(response);
}",0.8175182481751825
47442,"@Override public <K,V>NearCache<K,V> getOrCreateNearCache(String name,NearCacheConfig nearCacheConfig,NearCacheContext nearCacheContext){
  NearCache<K,V> nearCache=nearCacheMap.get(name);
  if (nearCache == null) {
synchronized (nearCacheMap) {
      nearCache=nearCacheMap.get(name);
      if (nearCache == null) {
        nearCache=createNearCache(name,nearCacheConfig,nearCacheContext);
        nearCacheMap.put(name,nearCache);
      }
    }
  }
  return nearCache;
}","@Override public <K,V>NearCache<K,V> getOrCreateNearCache(String name,NearCacheConfig nearCacheConfig,NearCacheContext nearCacheContext){
  NearCache<K,V> nearCache=nearCacheMap.get(name);
  if (nearCache == null) {
synchronized (mutex) {
      nearCache=nearCacheMap.get(name);
      if (nearCache == null) {
        nearCache=createNearCache(name,nearCacheConfig,nearCacheContext);
        nearCacheMap.put(name,nearCache);
      }
    }
  }
  return nearCache;
}",0.9818569903948772
47443,"@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  response=service.createCacheConfigIfAbsent(config);
  if (createAlsoOnOthers && response == null) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,true);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}","@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  response=service.createCacheConfigIfAbsent(config);
  if (createAlsoOnOthers) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,false);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}",0.9855227882037534
47444,"protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false);
}","protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers);
}",0.9743589743589745
47445,"public CacheCreateConfigOperation(CacheConfig config,boolean createAlsoOnOthers,boolean ignoreLocal){
  super(config.getNameWithPrefix());
  this.config=config;
  this.createAlsoOnOthers=createAlsoOnOthers;
  this.ignoreLocal=ignoreLocal;
}","public CacheCreateConfigOperation(CacheConfig config,boolean createAlsoOnOthers){
  super(config.getNameWithPrefix());
  this.config=config;
  this.createAlsoOnOthers=createAlsoOnOthers;
}",0.8785046728971962
47446,"@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  if (!ignoreLocal) {
    response=service.createCacheConfigIfAbsent(config);
  }
  if (createAlsoOnOthers && response == null) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,true);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}","@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  response=service.createCacheConfigIfAbsent(config);
  if (createAlsoOnOthers && response == null) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,true);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}",0.9853556485355648
47447,"@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  config=in.readObject();
  createAlsoOnOthers=in.readBoolean();
  ignoreLocal=in.readBoolean();
}","@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  config=in.readObject();
  createAlsoOnOthers=in.readBoolean();
}",0.9144385026737968
47448,"@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeObject(config);
  out.writeBoolean(createAlsoOnOthers);
  out.writeBoolean(ignoreLocal);
}","@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeObject(config);
  out.writeBoolean(createAlsoOnOthers);
}",0.9151670951156812
47449,"protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false);
}","protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers);
}",0.9743589743589745
47450,"public CacheCreateConfigOperation(CacheConfig config,boolean createAlsoOnOthers,boolean ignoreLocal){
  super(config.getNameWithPrefix());
  this.config=config;
  this.createAlsoOnOthers=createAlsoOnOthers;
  this.ignoreLocal=ignoreLocal;
}","public CacheCreateConfigOperation(CacheConfig config,boolean createAlsoOnOthers){
  super(config.getNameWithPrefix());
  this.config=config;
  this.createAlsoOnOthers=createAlsoOnOthers;
}",0.8785046728971962
47451,"@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  if (!ignoreLocal) {
    response=service.createCacheConfigIfAbsent(config);
  }
  if (createAlsoOnOthers && response == null) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,true);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}","@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  response=service.createCacheConfigIfAbsent(config);
  if (createAlsoOnOthers && response == null) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,true);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}",0.9853556485355648
47452,"@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  config=in.readObject();
  createAlsoOnOthers=in.readBoolean();
  ignoreLocal=in.readBoolean();
}","@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  config=in.readObject();
  createAlsoOnOthers=in.readBoolean();
}",0.9144385026737968
47453,"@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeObject(config);
  out.writeBoolean(createAlsoOnOthers);
  out.writeBoolean(ignoreLocal);
}","@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeObject(config);
  out.writeBoolean(createAlsoOnOthers);
}",0.9151670951156812
47454,"private EventHandler<PortableEntryEvent> createHandler(final MapListener listener,final boolean includeValue){
  final ListenerAdapter listenerAdaptor=createMapListenerAdaptor(listener);
  return new ClientMapEventHandler(listenerAdaptor,includeValue);
}","private EventHandler<PortableEntryEvent> createHandler(final Object listener,final boolean includeValue){
  final ListenerAdapter listenerAdaptor=createListenerAdapter(listener);
  return new ClientMapEventHandler(listenerAdaptor,includeValue);
}",0.956
47455,"@Override public String addLocalEntryListener(MapListener listener,Predicate<K,V> predicate,K key,boolean includeValue){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public String addLocalEntryListener(EntryListener listener,Predicate<K,V> predicate,K key,boolean includeValue){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9783783783783784
47456,"@Override public String addEntryListener(MapListener listener,Predicate<K,V> predicate,boolean includeValue){
  MapAddEntryListenerRequest request=new MapAddEntryListenerRequest(name,null,includeValue,predicate);
  EventHandler<PortableEntryEvent> handler=createHandler(listener,includeValue);
  return listen(request,null,handler);
}","@Override public String addEntryListener(EntryListener listener,Predicate<K,V> predicate,boolean includeValue){
  MapAddEntryListenerRequest request=new MapAddEntryListenerRequest(name,null,includeValue,predicate);
  EventHandler<PortableEntryEvent> handler=createHandler(listener,includeValue);
  return listen(request,null,handler);
}",0.9880597014925372
47457,"private EventHandler<PortableEntryEvent> createHandler(final MapListener listener,final boolean includeValue){
  final ListenerAdapter listenerAdaptor=createMapListenerAdaptor(listener);
  return new ClientMapEventHandler(listenerAdaptor,includeValue);
}","private EventHandler<PortableEntryEvent> createHandler(final Object listener,final boolean includeValue){
  final ListenerAdapter listenerAdaptor=createListenerAdapter(listener);
  return new ClientMapEventHandler(listenerAdaptor,includeValue);
}",0.956
47458,"@Override public String addLocalEntryListener(MapListener listener,Predicate<K,V> predicate,K key,boolean includeValue){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public String addLocalEntryListener(EntryListener listener,Predicate<K,V> predicate,K key,boolean includeValue){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9783783783783784
47459,"@Override public String addEntryListener(MapListener listener,Predicate<K,V> predicate,boolean includeValue){
  MapAddEntryListenerRequest request=new MapAddEntryListenerRequest(name,null,includeValue,predicate);
  EventHandler<PortableEntryEvent> handler=createHandler(listener,includeValue);
  return listen(request,null,handler);
}","@Override public String addEntryListener(EntryListener listener,Predicate<K,V> predicate,boolean includeValue){
  MapAddEntryListenerRequest request=new MapAddEntryListenerRequest(name,null,includeValue,predicate);
  EventHandler<PortableEntryEvent> handler=createHandler(listener,includeValue);
  return listen(request,null,handler);
}",0.9880597014925372
47460,"@Override protected <K,V>CacheConfig<K,V> createConfigOnPartition(CacheConfig<K,V> cacheConfig){
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(cacheConfig.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(cacheConfig,true,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheConfig.getNameWithPrefix());
    return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","@Override protected <K,V>CacheConfig<K,V> createConfigOnPartition(CacheConfig<K,V> cacheConfig){
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(cacheConfig.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(cacheConfig,false,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheConfig.getNameWithPrefix());
    return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.994011976047904
47461,"public void read(PortableReader reader) throws IOException {
  create=reader.readBoolean(""String_Node_Str"");
  partitionId=reader.readInt(""String_Node_Str"");
  final ObjectDataInput in=reader.getRawDataInput();
  cacheConfig=in.readObject();
}","public void read(PortableReader reader) throws IOException {
  createAlsoOnOthers=reader.readBoolean(""String_Node_Str"");
  partitionId=reader.readInt(""String_Node_Str"");
  final ObjectDataInput in=reader.getRawDataInput();
  cacheConfig=in.readObject();
}",0.9759036144578314
47462,"protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,create,false);
}","protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false);
}",0.9473684210526316
47463,"public CacheCreateConfigRequest(CacheConfig cacheConfig,boolean create,int partitionId){
  this.cacheConfig=cacheConfig;
  this.create=create;
  this.partitionId=partitionId;
}","public CacheCreateConfigRequest(CacheConfig cacheConfig,boolean createAlsoOnOthers,int partitionId){
  this.cacheConfig=cacheConfig;
  this.createAlsoOnOthers=createAlsoOnOthers;
  this.partitionId=partitionId;
}",0.9072164948453608
47464,"public void write(PortableWriter writer) throws IOException {
  writer.writeBoolean(""String_Node_Str"",create);
  writer.writeInt(""String_Node_Str"",partitionId);
  final ObjectDataOutput out=writer.getRawDataOutput();
  out.writeObject(cacheConfig);
}","public void write(PortableWriter writer) throws IOException {
  writer.writeBoolean(""String_Node_Str"",createAlsoOnOthers);
  writer.writeInt(""String_Node_Str"",partitionId);
  final ObjectDataOutput out=writer.getRawDataOutput();
  out.writeObject(cacheConfig);
}",0.9765625
47465,"@Override protected <K,V>CacheConfig<K,V> createConfigOnPartition(CacheConfig<K,V> cacheConfig){
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(cacheConfig.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(cacheConfig,false,false,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheConfig.getNameWithPrefix());
    return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","@Override protected <K,V>CacheConfig<K,V> createConfigOnPartition(CacheConfig<K,V> cacheConfig){
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(cacheConfig.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(cacheConfig,true,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheConfig.getNameWithPrefix());
    return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.988936170212766
47466,"@Override protected <K,V>CacheConfig<K,V> createConfig(String cacheName,CacheConfig<K,V> config,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> currentCacheConfig=configs.get(cacheName);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(config.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(config,createAlsoOnOthers,false,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheName);
    if (syncCreate) {
      return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
    }
 else {
      return currentCacheConfig;
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","@Override protected <K,V>CacheConfig<K,V> createConfig(String cacheName,CacheConfig<K,V> config,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> currentCacheConfig=configs.get(cacheName);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(config.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(config,createAlsoOnOthers,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheName);
    if (syncCreate) {
      return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
    }
 else {
      return currentCacheConfig;
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.9960264900662252
47467,"public void read(PortableReader reader) throws IOException {
  createAlsoOnOthers=reader.readBoolean(""String_Node_Str"");
  ignoreLocal=reader.readBoolean(""String_Node_Str"");
  partitionId=reader.readInt(""String_Node_Str"");
  final ObjectDataInput in=reader.getRawDataInput();
  cacheConfig=in.readObject();
}","public void read(PortableReader reader) throws IOException {
  create=reader.readBoolean(""String_Node_Str"");
  partitionId=reader.readInt(""String_Node_Str"");
  final ObjectDataInput in=reader.getRawDataInput();
  cacheConfig=in.readObject();
}",0.8820326678765881
47468,"protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,ignoreLocal);
}","protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,create,false);
}",0.8974358974358975
47469,"public CacheCreateConfigRequest(CacheConfig cacheConfig,boolean createAlsoOnOthers,boolean ignoreLocal,int partitionId){
  this.cacheConfig=cacheConfig;
  this.createAlsoOnOthers=createAlsoOnOthers;
  this.ignoreLocal=ignoreLocal;
  this.partitionId=partitionId;
}","public CacheCreateConfigRequest(CacheConfig cacheConfig,boolean create,int partitionId){
  this.cacheConfig=cacheConfig;
  this.create=create;
  this.partitionId=partitionId;
}",0.8
47470,"public void write(PortableWriter writer) throws IOException {
  writer.writeBoolean(""String_Node_Str"",createAlsoOnOthers);
  writer.writeBoolean(""String_Node_Str"",ignoreLocal);
  writer.writeInt(""String_Node_Str"",partitionId);
  final ObjectDataOutput out=writer.getRawDataOutput();
  out.writeObject(cacheConfig);
}","public void write(PortableWriter writer) throws IOException {
  writer.writeBoolean(""String_Node_Str"",create);
  writer.writeInt(""String_Node_Str"",partitionId);
  final ObjectDataOutput out=writer.getRawDataOutput();
  out.writeObject(cacheConfig);
}",0.4134275618374558
47471,"@Override protected <K,V>CacheConfig<K,V> createConfigOnPartition(CacheConfig<K,V> cacheConfig){
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(cacheConfig.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(cacheConfig,false,false,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheConfig.getNameWithPrefix());
    return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","@Override protected <K,V>CacheConfig<K,V> createConfigOnPartition(CacheConfig<K,V> cacheConfig){
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(cacheConfig.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(cacheConfig,false,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheConfig.getNameWithPrefix());
    return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.9948979591836736
47472,"@Override protected <K,V>CacheConfig<K,V> createConfig(String cacheName,CacheConfig<K,V> config,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> currentCacheConfig=configs.get(cacheName);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(config.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(config,createAlsoOnOthers,false,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheName);
    if (syncCreate) {
      return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
    }
 else {
      return currentCacheConfig;
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","@Override protected <K,V>CacheConfig<K,V> createConfig(String cacheName,CacheConfig<K,V> config,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> currentCacheConfig=configs.get(cacheName);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(config.getNameWithPrefix());
    CacheCreateConfigRequest request=new CacheCreateConfigRequest(config,createAlsoOnOthers,partitionId);
    Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheName);
    if (syncCreate) {
      return (CacheConfig<K,V>)clientContext.getSerializationService().toObject(future.get());
    }
 else {
      return currentCacheConfig;
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.9960264900662252
47473,"public void read(PortableReader reader) throws IOException {
  createAlsoOnOthers=reader.readBoolean(""String_Node_Str"");
  ignoreLocal=reader.readBoolean(""String_Node_Str"");
  partitionId=reader.readInt(""String_Node_Str"");
  final ObjectDataInput in=reader.getRawDataInput();
  cacheConfig=in.readObject();
}","public void read(PortableReader reader) throws IOException {
  createAlsoOnOthers=reader.readBoolean(""String_Node_Str"");
  partitionId=reader.readInt(""String_Node_Str"");
  final ObjectDataInput in=reader.getRawDataInput();
  cacheConfig=in.readObject();
}",0.905861456483126
47474,"protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,ignoreLocal);
}","protected Operation prepareOperation(){
  return new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false);
}",0.951219512195122
47475,"public CacheCreateConfigRequest(CacheConfig cacheConfig,boolean createAlsoOnOthers,boolean ignoreLocal,int partitionId){
  this.cacheConfig=cacheConfig;
  this.createAlsoOnOthers=createAlsoOnOthers;
  this.ignoreLocal=ignoreLocal;
  this.partitionId=partitionId;
}","public CacheCreateConfigRequest(CacheConfig cacheConfig,boolean createAlsoOnOthers,int partitionId){
  this.cacheConfig=cacheConfig;
  this.createAlsoOnOthers=createAlsoOnOthers;
  this.partitionId=partitionId;
}",0.8907563025210085
47476,"public void write(PortableWriter writer) throws IOException {
  writer.writeBoolean(""String_Node_Str"",createAlsoOnOthers);
  writer.writeBoolean(""String_Node_Str"",ignoreLocal);
  writer.writeInt(""String_Node_Str"",partitionId);
  final ObjectDataOutput out=writer.getRawDataOutput();
  out.writeObject(cacheConfig);
}","public void write(PortableWriter writer) throws IOException {
  writer.writeBoolean(""String_Node_Str"",createAlsoOnOthers);
  writer.writeInt(""String_Node_Str"",partitionId);
  final ObjectDataOutput out=writer.getRawDataOutput();
  out.writeObject(cacheConfig);
}",0.8650519031141869
47477,"private void pollResponse(final long pollTimeoutMs) throws InterruptedException {
  if (pollTimeoutMs > 0 && response == null) {
    long currentTimeoutMs=pollTimeoutMs;
    final long waitStart=Clock.currentTimeMillis();
synchronized (this) {
      while (currentTimeoutMs > 0 && response == null) {
        wait(currentTimeoutMs);
        currentTimeoutMs=pollTimeoutMs - (Clock.currentTimeMillis() - waitStart);
      }
    }
  }
}","private void pollResponse(final long pollTimeoutMs) throws InterruptedException {
  if (pollTimeoutMs > 0 && response == null) {
    long currentTimeoutMs=pollTimeoutMs;
    final long waitStart=Clock.currentTimeMillis();
synchronized (this) {
      while (currentTimeoutMs > 0 && response == null) {
        wait(currentTimeoutMs);
        currentTimeoutMs=pollTimeoutMs - (Clock.currentTimeMillis() - waitStart);
      }
      notifyAll();
    }
  }
}",0.9785794813979708
47478,"@Override public void run() throws Exception {
  CacheService service=getService();
  for (  Map.Entry<String,Map<Data,CacheRecord>> entry : data.entrySet()) {
    ICacheRecordStore cache=service.getOrCreateCache(entry.getKey(),getPartitionId());
    Map<Data,CacheRecord> map=entry.getValue();
    Iterator<Map.Entry<Data,CacheRecord>> iter=map.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Data,CacheRecord> next=iter.next();
      Data key=next.getKey();
      CacheRecord record=next.getValue();
      iter.remove();
      cache.setRecord(key,record);
    }
  }
  data.clear();
}","@Override public void run() throws Exception {
  CacheService service=getService();
  for (  Map.Entry<String,Map<Data,CacheRecord>> entry : data.entrySet()) {
    ICacheRecordStore cache=service.getOrCreateCache(entry.getKey(),getPartitionId());
    Map<Data,CacheRecord> map=entry.getValue();
    Iterator<Map.Entry<Data,CacheRecord>> iter=map.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Data,CacheRecord> next=iter.next();
      Data key=next.getKey();
      CacheRecord record=next.getValue();
      iter.remove();
      cache.putRecord(key,record);
    }
  }
  data.clear();
}",0.996694214876033
47479,"@Override public void run() throws Exception {
  CacheService service=getService();
  for (  Map.Entry<String,Map<Data,CacheRecord>> entry : data.entrySet()) {
    ICacheRecordStore cache=service.getOrCreateCache(entry.getKey(),getPartitionId());
    Map<Data,CacheRecord> map=entry.getValue();
    Iterator<Map.Entry<Data,CacheRecord>> iter=map.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Data,CacheRecord> next=iter.next();
      Data key=next.getKey();
      CacheRecord record=next.getValue();
      iter.remove();
      cache.setRecord(key,record);
    }
  }
  data.clear();
}","@Override public void run() throws Exception {
  CacheService service=getService();
  for (  Map.Entry<String,Map<Data,CacheRecord>> entry : data.entrySet()) {
    ICacheRecordStore cache=service.getOrCreateCache(entry.getKey(),getPartitionId());
    Map<Data,CacheRecord> map=entry.getValue();
    Iterator<Map.Entry<Data,CacheRecord>> iter=map.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Data,CacheRecord> next=iter.next();
      Data key=next.getKey();
      CacheRecord record=next.getValue();
      iter.remove();
      cache.putRecord(key,record);
    }
  }
  data.clear();
}",0.996694214876033
47480,"@Test public void testCompletionTest() throws InterruptedException {
  String cacheName=""String_Node_Str"";
  CacheManager cacheManager=cachingProvider1.getCacheManager();
  CacheConfig<Integer,String> config=new CacheConfig<Integer,String>();
  SimpleEntryListener<Integer,String> listener=new SimpleEntryListener<Integer,String>();
  MutableCacheEntryListenerConfiguration<Integer,String> listenerConfiguration=new MutableCacheEntryListenerConfiguration<Integer,String>(FactoryBuilder.factoryOf(listener),null,true,true);
  config.addCacheEntryListenerConfiguration(listenerConfiguration);
  Cache<Integer,String> cache=cacheManager.createCache(cacheName,config);
  assertNotNull(cache);
  Integer key1=1;
  String value1=""String_Node_Str"";
  cache.put(key1,value1);
  assertEquals(1,listener.created.get());
  Integer key2=2;
  String value2=""String_Node_Str"";
  cache.put(key2,value2);
  assertEquals(2,listener.created.get());
  Set<Integer> keys=new HashSet<Integer>();
  keys.add(key1);
  keys.add(key2);
  cache.removeAll(keys);
  assertEquals(2,listener.removed.get());
}","@Test public void testCompletionTest() throws InterruptedException {
  String cacheName=""String_Node_Str"";
  CacheManager cacheManager=cachingProvider1.getCacheManager();
  CacheConfig<Integer,String> config=new CacheConfig<Integer,String>();
  final SimpleEntryListener<Integer,String> listener=new SimpleEntryListener<Integer,String>();
  MutableCacheEntryListenerConfiguration<Integer,String> listenerConfiguration=new MutableCacheEntryListenerConfiguration<Integer,String>(FactoryBuilder.factoryOf(listener),null,true,true);
  config.addCacheEntryListenerConfiguration(listenerConfiguration);
  Cache<Integer,String> cache=cacheManager.createCache(cacheName,config);
  assertNotNull(cache);
  Integer key1=1;
  String value1=""String_Node_Str"";
  cache.put(key1,value1);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(1,listener.created.get());
    }
  }
);
  Integer key2=2;
  String value2=""String_Node_Str"";
  cache.put(key2,value2);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(2,listener.created.get());
    }
  }
);
  Set<Integer> keys=new HashSet<Integer>();
  keys.add(key1);
  keys.add(key2);
  cache.removeAll(keys);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(2,listener.removed.get());
    }
  }
);
}",0.8663187474909675
47481,"@Override public void onCreated(Iterable<CacheEntryEvent<? extends K,? extends V>> cacheEntryEvents) throws CacheEntryListenerException {
  try {
    Thread.sleep(3000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  for (  CacheEntryEvent<? extends K,? extends V> cacheEntryEvent : cacheEntryEvents) {
    created.incrementAndGet();
  }
}","@Override public void onCreated(Iterable<CacheEntryEvent<? extends K,? extends V>> cacheEntryEvents) throws CacheEntryListenerException {
  for (  CacheEntryEvent<? extends K,? extends V> cacheEntryEvent : cacheEntryEvents) {
    created.incrementAndGet();
  }
}",0.5056
47482,"private void pollResponse(final long pollTimeoutMs) throws InterruptedException {
  if (pollTimeoutMs > 0 && response == null) {
    long currentTimeoutMs=pollTimeoutMs;
    final long waitStart=Clock.currentTimeMillis();
synchronized (this) {
      while (currentTimeoutMs > 0 && response == null) {
        wait(currentTimeoutMs);
        currentTimeoutMs=pollTimeoutMs - (Clock.currentTimeMillis() - waitStart);
      }
    }
  }
}","private void pollResponse(final long pollTimeoutMs) throws InterruptedException {
  if (pollTimeoutMs > 0 && response == null) {
    long currentTimeoutMs=pollTimeoutMs;
    final long waitStart=Clock.currentTimeMillis();
synchronized (this) {
      while (currentTimeoutMs > 0 && response == null) {
        wait(currentTimeoutMs);
        currentTimeoutMs=pollTimeoutMs - (Clock.currentTimeMillis() - waitStart);
      }
      notifyAll();
    }
  }
}",0.9785794813979708
47483,"@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleep(2);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}","@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleepAtLeastSeconds(1);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}",0.9925925925925926
47484,"@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleep(2);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}","@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleepAtLeastSeconds(1);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}",0.9925925925925926
47485,"@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleep(2);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}","@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleepAtLeastSeconds(1);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}",0.9925925925925926
47486,"@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleep(2);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}","@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleepAtLeastSeconds(1);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}",0.9925925925925926
47487,"@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleep(2);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}","@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleepAtLeastSeconds(1);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}",0.9925925925925926
47488,"@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleep(2);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}","@Test public void testQuery(){
  final int entityCount=10;
  final int queryCount=3;
  insertDummyEntities(entityCount);
  sleep(2);
  List<DummyEntity> list=null;
  for (int i=0; i < queryCount; i++) {
    list=executeQuery(sf);
    assertEquals(entityCount,list.size());
    sleepAtLeastSeconds(1);
  }
  assertNotNull(list);
  Session session=sf.openSession();
  Transaction tx=session.beginTransaction();
  try {
    for (    DummyEntity dummy : list) {
      session.delete(dummy);
    }
    tx.commit();
  }
 catch (  Exception e) {
    tx.rollback();
    e.printStackTrace();
  }
 finally {
    session.close();
  }
  Statistics stats=sf.getStatistics();
  assertEquals(1,stats.getQueryCachePutCount());
  assertEquals(1,stats.getQueryCacheMissCount());
  assertEquals(queryCount - 1,stats.getQueryCacheHitCount());
  assertEquals(1,stats.getQueryExecutionCount());
  assertEquals(entityCount,stats.getEntityInsertCount());
  assertEquals(entityCount,stats.getEntityLoadCount());
  assertEquals(entityCount,stats.getEntityDeleteCount());
  assertEquals(entityCount * (queryCount - 1) * 2,stats.getSecondLevelCacheHitCount());
  assertEquals(entityCount,stats.getSecondLevelCacheMissCount());
  stats.logSummary();
}",0.9925925925925926
47489,"@Override public void close(EventRegistration eventRegistration){
  Registration registration=(Registration)eventRegistration;
  if (!(registration.getListener() instanceof Closeable)) {
    return;
  }
  try {
    ((Closeable)eventRegistration).close();
  }
 catch (  IOException e) {
    EmptyStatement.ignore(e);
  }
}","@Override public void close(EventRegistration eventRegistration){
  Registration registration=(Registration)eventRegistration;
  Object listener=registration.getListener();
  if (!(listener instanceof Closeable)) {
    return;
  }
  try {
    ((Closeable)listener).close();
  }
 catch (  IOException e) {
    EmptyStatement.ignore(e);
  }
}",0.8411497730711044
47490,"@Override protected <K,V>CacheConfig<K,V> findConfig(String cacheName,String simpleCacheName,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> config=configs.get(cacheName);
  if (config == null) {
    if (config == null) {
      config=getCacheConfigFromPartition(cacheName,simpleCacheName);
    }
    if (config != null) {
      createConfig(cacheName,config,createAlsoOnOthers,syncCreate);
    }
  }
  return config;
}","@Override protected <K,V>CacheConfig<K,V> findConfig(String cacheName,String simpleCacheName,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> config=configs.get(cacheName);
  if (config == null) {
    config=getCacheConfigFromPartition(cacheName,simpleCacheName);
    if (config != null) {
      createConfig(cacheName,config,createAlsoOnOthers,syncCreate);
    }
  }
  return config;
}",0.9453681710213776
47491,"@Override protected <K,V>CacheConfig<K,V> findConfig(String cacheName,String simpleCacheName,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> config=configs.get(cacheName);
  if (config == null) {
    if (config == null) {
      config=getCacheConfigFromPartition(cacheName,simpleCacheName);
    }
    if (config != null) {
      createConfig(cacheName,config,createAlsoOnOthers,syncCreate);
    }
  }
  return config;
}","@Override protected <K,V>CacheConfig<K,V> findConfig(String cacheName,String simpleCacheName,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> config=configs.get(cacheName);
  if (config == null) {
    config=getCacheConfigFromPartition(cacheName,simpleCacheName);
    if (config != null) {
      createConfig(cacheName,config,createAlsoOnOthers,syncCreate);
    }
  }
  return config;
}",0.9453681710213776
47492,"public CacheSimpleConfig findCacheConfig(String simpleName){
  return nodeEngine.getConfig().findCacheConfig(simpleName);
}","public CacheSimpleConfig findCacheConfig(String simpleName){
  if (simpleName == null) {
    return null;
  }
  return nodeEngine.getConfig().findCacheConfig(simpleName);
}",0.8338983050847457
47493,"@Override public CacheConfig createCacheConfigIfAbsent(CacheConfig config){
  final CacheConfig localConfig=configs.putIfAbsent(config.getNameWithPrefix(),config);
  if (localConfig == null) {
    if (config.isStatisticsEnabled()) {
      setStatisticsEnabled(config,config.getNameWithPrefix(),true);
    }
    if (config.isManagementEnabled()) {
      setManagementEnabled(config,config.getNameWithPrefix(),true);
    }
  }
  return localConfig;
}","@Override public CacheConfig createCacheConfigIfAbsent(CacheConfig config,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig cacheConfig=createCacheConfigIfAbsent(config);
  if (createAlsoOnOthers) {
    OperationService operationService=nodeEngine.getOperationService();
    CacheCreateConfigOperation op=new CacheCreateConfigOperation(cacheConfig == null ? config : cacheConfig,false,true);
    InternalCompletableFuture future=operationService.invokeOnTarget(SERVICE_NAME,op,nodeEngine.getThisAddress());
    if (syncCreate) {
      future.getSafely();
    }
  }
  return cacheConfig;
}",0.2824427480916031
47494,"@Override public <K,V,C extends Configuration<K,V>>ICache<K,V> createCache(String cacheName,C configuration) throws IllegalArgumentException {
  checkIfManagerNotClosed();
  checkNotNull(cacheName,""String_Node_Str"");
  checkNotNull(configuration,""String_Node_Str"");
  final CacheConfig<K,V> newCacheConfig=createCacheConfig(cacheName,configuration);
  if (caches.containsKey(newCacheConfig.getNameWithPrefix())) {
    throw new CacheException(""String_Node_Str"" + cacheName + ""String_Node_Str"");
  }
  final ICache<K,V> cacheProxy=createCacheProxy(newCacheConfig);
  CacheConfig<K,V> current=createConfigOnPartition(newCacheConfig);
  if (current == null) {
    addCacheConfigIfAbsentToLocal(newCacheConfig);
    caches.put(newCacheConfig.getNameWithPrefix(),cacheProxy);
    registerListeners(newCacheConfig,cacheProxy);
    return cacheProxy;
  }
  ICache<?,?> cache=getOrPutIfAbsent(current.getNameWithPrefix(),cacheProxy);
  CacheConfig config=cache.getConfiguration(CacheConfig.class);
  if (config.equals(newCacheConfig)) {
    return (ICache<K,V>)cache;
  }
  throw new CacheException(""String_Node_Str"" + cacheName + ""String_Node_Str"");
}","@Override public <K,V,C extends Configuration<K,V>>ICache<K,V> createCache(String cacheName,C configuration) throws IllegalArgumentException {
  checkIfManagerNotClosed();
  checkNotNull(cacheName,""String_Node_Str"");
  checkNotNull(configuration,""String_Node_Str"");
  final CacheConfig<K,V> newCacheConfig=createCacheConfig(cacheName,configuration);
  if (caches.containsKey(newCacheConfig.getNameWithPrefix())) {
    throw new CacheException(""String_Node_Str"" + cacheName + ""String_Node_Str"");
  }
  final ICache<K,V> cacheProxy=createCacheProxy(newCacheConfig);
  CacheConfig<K,V> current=createConfigOnPartition(newCacheConfig);
  if (current == null) {
    addCacheConfigIfAbsent(newCacheConfig);
    caches.put(newCacheConfig.getNameWithPrefix(),cacheProxy);
    registerListeners(newCacheConfig,cacheProxy);
    return cacheProxy;
  }
  ICache<?,?> cache=getOrPutIfAbsent(current.getNameWithPrefix(),cacheProxy);
  CacheConfig config=cache.getConfiguration(CacheConfig.class);
  if (config.equals(newCacheConfig)) {
    return (ICache<K,V>)cache;
  }
  throw new CacheException(""String_Node_Str"" + cacheName + ""String_Node_Str"");
}",0.9969311705392372
47495,CacheConfig createCacheConfigIfAbsent(CacheConfig config);,"CacheConfig createCacheConfigIfAbsent(CacheConfig config,boolean createAlsoOnOthers,boolean syncCreate);",0.7160493827160493
47496,"public CacheCreateConfigOperation(CacheConfig config,boolean isLocal){
  super(config.getNameWithPrefix());
  this.config=config;
  this.isLocal=isLocal;
}","public CacheCreateConfigOperation(CacheConfig config,boolean isLocal,boolean ignoreLocal){
  super(config.getNameWithPrefix());
  this.config=config;
  this.isLocal=isLocal;
  this.ignoreLocal=ignoreLocal;
}",0.856353591160221
47497,"@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  response=service.createCacheConfigIfAbsent(config);
  if (!isLocal && response == null) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,true);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}","@Override public void run() throws Exception {
  AbstractCacheService service=getService();
  if (!ignoreLocal) {
    response=service.createCacheConfigIfAbsent(config);
  }
  if (!isLocal && response == null) {
    NodeEngine nodeEngine=getNodeEngine();
    Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
    int remoteNodeCount=members.size() - 1;
    if (remoteNodeCount > 0) {
      postponeReturnResponse();
      Callback<Object> callback=new CacheConfigCreateCallback(getResponseHandler(),remoteNodeCount);
      OperationService operationService=nodeEngine.getOperationService();
      for (      MemberImpl member : members) {
        if (!member.localMember()) {
          CacheCreateConfigOperation op=new CacheCreateConfigOperation(config,true);
          operationService.createInvocationBuilder(AbstractCacheService.SERVICE_NAME,op,member.getAddress()).setCallback(callback).invoke();
        }
      }
    }
  }
}",0.985200845665962
47498,"@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  config=in.readObject();
  isLocal=in.readBoolean();
}","@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  config=in.readObject();
  isLocal=in.readBoolean();
  ignoreLocal=in.readBoolean();
}",0.9090909090909092
47499,"@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeObject(config);
  out.writeBoolean(isLocal);
}","@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeObject(config);
  out.writeBoolean(isLocal);
  out.writeBoolean(ignoreLocal);
}",0.9100817438692098
47500,"@Override public void run() throws Exception {
  final CacheService service=getService();
  final CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    CacheSimpleConfig simpleConfig=service.findCacheConfig(simpleName);
    if (simpleConfig != null) {
      try {
        CacheConfig cacheConfigFromSimpleConfig=new CacheConfig(simpleConfig);
        cacheConfigFromSimpleConfig.setName(simpleName);
        cacheConfigFromSimpleConfig.setManagerPrefix(name.substring(0,name.lastIndexOf(simpleName)));
        if (service.createCacheConfigIfAbsent(cacheConfigFromSimpleConfig) == null) {
          response=cacheConfigFromSimpleConfig;
          return;
        }
      }
 catch (      Exception e) {
        throw new CacheException(e);
      }
    }
  }
  response=cacheConfig;
}","@Override public void run() throws Exception {
  final CacheService service=getService();
  final CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    CacheSimpleConfig simpleConfig=service.findCacheConfig(simpleName);
    if (simpleConfig != null) {
      try {
        CacheConfig cacheConfigFromSimpleConfig=new CacheConfig(simpleConfig);
        cacheConfigFromSimpleConfig.setName(simpleName);
        cacheConfigFromSimpleConfig.setManagerPrefix(name.substring(0,name.lastIndexOf(simpleName)));
        if (service.createCacheConfigIfAbsent(cacheConfigFromSimpleConfig,true,false) == null) {
          response=cacheConfigFromSimpleConfig;
          return;
        }
      }
 catch (      Exception e) {
        throw new CacheException(e);
      }
    }
  }
  response=cacheConfig;
}",0.9932885906040269
47501,"private void waitInitialMemberListFetched() throws InterruptedException {
  boolean success=initialListFetchedLatch.await(INITIAL_MEMBERS_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  if (success) {
    LOGGER.warning(""String_Node_Str"");
  }
}","private void waitInitialMemberListFetched() throws InterruptedException {
  boolean success=initialListFetchedLatch.await(INITIAL_MEMBERS_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  if (!success) {
    LOGGER.warning(""String_Node_Str"");
  }
}",0.997867803837953
47502,"private void waitInitialMemberListFetched() throws InterruptedException {
  boolean success=initialListFetchedLatch.await(INITIAL_MEMBERS_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  if (success) {
    LOGGER.warning(""String_Node_Str"");
  }
}","private void waitInitialMemberListFetched() throws InterruptedException {
  boolean success=initialListFetchedLatch.await(INITIAL_MEMBERS_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  if (!success) {
    LOGGER.warning(""String_Node_Str"");
  }
}",0.997867803837953
47503,"@Override protected <K,V>CacheConfig<K,V> findConfig(String cacheName,String simpleCacheName,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> config=configs.get(cacheName);
  if (config == null) {
    if (config == null) {
      config=getCacheConfigFromPartition(cacheName,simpleCacheName);
    }
    if (config != null) {
      createConfig(cacheName,config,createAlsoOnOthers,syncCreate);
    }
  }
  return config;
}","@Override protected <K,V>CacheConfig<K,V> findConfig(String cacheName,String simpleCacheName,boolean createAlsoOnOthers,boolean syncCreate){
  CacheConfig<K,V> config=configs.get(cacheName);
  if (config == null) {
    config=getCacheConfigFromPartition(cacheName,simpleCacheName);
    if (config != null) {
      createConfig(cacheName,config,createAlsoOnOthers,syncCreate);
    }
  }
  return config;
}",0.9453681710213776
47504,"@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      backPressureService.cleanup();
      sleep();
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}","@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      if (!shutdown) {
        backPressureService.cleanup();
      }
      if (!shutdown) {
        sleep();
      }
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}",0.8610169491525423
47505,"private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}","private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    if (shutdown) {
      return;
    }
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}",0.9646643109540636
47506,"@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
}","@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
  try {
    cleanupThread.join(CLEANUP_THREAD_MAX_WAIT_TIME_TO_FINISH);
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
}",0.841991341991342
47507,"BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.executionService=nodeEngine.getExecutionService();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.executingCalls=new ConcurrentHashMap<RemoteCallKey,RemoteCallKey>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.scheduler=new BasicOperationScheduler(node,executionService,new BasicDispatcherImpl());
  this.operationHandler=new OperationHandler();
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationPacketHandler=new OperationPacketHandler();
  this.responsePacketHandler=new ResponsePacketHandler();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  startCleanupThread();
}","BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.executionService=nodeEngine.getExecutionService();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.executingCalls=new ConcurrentHashMap<RemoteCallKey,RemoteCallKey>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.scheduler=new BasicOperationScheduler(node,executionService,new BasicDispatcherImpl());
  this.operationHandler=new OperationHandler();
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationPacketHandler=new OperationPacketHandler();
  this.responsePacketHandler=new ResponsePacketHandler();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.cleanupThread=new CleanupThread();
  this.cleanupThread.start();
}",0.972531066056246
47508,"@Override protected List<FrameworkMethod> getChildren(){
  final List<FrameworkMethod> children=super.getChildren();
  Collections.shuffle(children);
  return children;
}","@Override protected List<FrameworkMethod> getChildren(){
  final List<FrameworkMethod> children=super.getChildren();
  Collections.shuffle(new LinkedList<FrameworkMethod>(children));
  return children;
}",0.868632707774799
47509,"@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      backPressureService.cleanup();
      sleep();
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}","@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      if (!shutdown) {
        backPressureService.cleanup();
      }
      if (!shutdown) {
        sleep();
      }
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}",0.8610169491525423
47510,"private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}","private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    if (shutdown) {
      return;
    }
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}",0.9646643109540636
47511,"@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  operationExecutor.shutdown();
  slowOperationDetector.shutdown();
}","@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  operationExecutor.shutdown();
  slowOperationDetector.shutdown();
  try {
    cleanupThread.join(CLEANUP_THREAD_MAX_WAIT_TIME_TO_FINISH);
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
}",0.8557312252964426
47512,"BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationExecutor=new ClassicOperationExecutor(node.getGroupProperties(),node.loggingService,node.getThisAddress(),new BasicOperationRunnerFactory(),new BasicResponsePacketHandler(),node.getHazelcastThreadGroup(),node.getNodeExtension());
  ExecutionService executionService=nodeEngine.getExecutionService();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.slowOperationDetector=new SlowOperationDetector(operationExecutor.getGenericOperationRunners(),operationExecutor.getPartitionOperationRunners(),node.groupProperties,node.getHazelcastThreadGroup());
  startCleanupThread();
}","BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationExecutor=new ClassicOperationExecutor(node.getGroupProperties(),node.loggingService,node.getThisAddress(),new BasicOperationRunnerFactory(),new BasicResponsePacketHandler(),node.getHazelcastThreadGroup(),node.getNodeExtension());
  ExecutionService executionService=nodeEngine.getExecutionService();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.slowOperationDetector=new SlowOperationDetector(operationExecutor.getGenericOperationRunners(),operationExecutor.getPartitionOperationRunners(),node.groupProperties,node.getHazelcastThreadGroup());
  this.cleanupThread=new CleanupThread();
  this.cleanupThread.start();
}",0.9739130434782608
47513,"private void scan(long nowNanos,long nowMillis,OperationRunner[] operationRunners,CurrentOperationData[] currentOperationDataArray){
  for (int i=0; i < operationRunners.length; i++) {
    if (operationRunners[i].currentTask() == null) {
      continue;
    }
    scanOperationRunner(nowNanos,nowMillis,operationRunners[i],currentOperationDataArray[i]);
  }
}","private void scan(long nowNanos,long nowMillis,OperationRunner[] operationRunners,CurrentOperationData[] currentOperationDataArray){
  for (int i=0; i < operationRunners.length && running; i++) {
    if (operationRunners[i].currentTask() == null) {
      continue;
    }
    scanOperationRunner(nowNanos,nowMillis,operationRunners[i],currentOperationDataArray[i]);
  }
}",0.9849108367626886
47514,"public SlowOperationDetector(OperationRunner[] genericOperationRunners,OperationRunner[] partitionOperationRunners,GroupProperties groupProperties,HazelcastThreadGroup hazelcastThreadGroup){
  this.genericOperationRunners=genericOperationRunners;
  this.partitionOperationRunners=partitionOperationRunners;
  genericCurrentOperationData=initCurrentOperationData(genericOperationRunners);
  partitionCurrentOperationData=initCurrentOperationData(partitionOperationRunners);
  slowOperationThresholdNanos=getGroupPropertyMillisAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS);
  logPurgeIntervalNanos=getGroupPropertySecAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_LOG_PURGE_INTERVAL_SECONDS);
  logRetentionNanos=getGroupPropertySecAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS);
  new SlowOperationDetectorThread(hazelcastThreadGroup).start();
}","public SlowOperationDetector(OperationRunner[] genericOperationRunners,OperationRunner[] partitionOperationRunners,GroupProperties groupProperties,HazelcastThreadGroup hazelcastThreadGroup){
  this.genericOperationRunners=genericOperationRunners;
  this.partitionOperationRunners=partitionOperationRunners;
  genericCurrentOperationData=initCurrentOperationData(genericOperationRunners);
  partitionCurrentOperationData=initCurrentOperationData(partitionOperationRunners);
  slowOperationThresholdNanos=getGroupPropertyMillisAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS);
  logPurgeIntervalNanos=getGroupPropertySecAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_LOG_PURGE_INTERVAL_SECONDS);
  logRetentionNanos=getGroupPropertySecAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS);
  slowOperationDetectorThread=new SlowOperationDetectorThread(hazelcastThreadGroup);
  slowOperationDetectorThread.start();
}",0.9678824169842134
47515,"public void run(){
  long lastLogPurge=System.nanoTime();
  while (running) {
    long nowNanos=System.nanoTime();
    long nowMillis=System.currentTimeMillis();
    scan(nowNanos,nowMillis,genericOperationRunners,genericCurrentOperationData);
    scan(nowNanos,nowMillis,partitionOperationRunners,partitionCurrentOperationData);
    if (purge(nowNanos,lastLogPurge)) {
      lastLogPurge=nowNanos;
    }
    sleepInterval(nowNanos);
  }
}","public void run(){
  long lastLogPurge=System.nanoTime();
  while (running) {
    long nowNanos=System.nanoTime();
    long nowMillis=System.currentTimeMillis();
    scan(nowNanos,nowMillis,genericOperationRunners,genericCurrentOperationData);
    scan(nowNanos,nowMillis,partitionOperationRunners,partitionCurrentOperationData);
    if (purge(nowNanos,lastLogPurge)) {
      lastLogPurge=nowNanos;
    }
    if (running) {
      sleepInterval(nowNanos);
    }
  }
}",0.9701657458563536
47516,"private boolean purge(long nowNanos,long lastLogPurge){
  if (nowNanos - lastLogPurge <= logPurgeIntervalNanos) {
    return false;
  }
  for (  SlowOperationLog log : slowOperationLogs.values()) {
    log.purgeInvocations(nowNanos,logRetentionNanos);
    if (log.isEmpty()) {
      slowOperationLogs.remove(log.getStackTrace().hashCode());
    }
  }
  return true;
}","private boolean purge(long nowNanos,long lastLogPurge){
  if (nowNanos - lastLogPurge <= logPurgeIntervalNanos) {
    return false;
  }
  for (  SlowOperationLog log : slowOperationLogs.values()) {
    if (!running) {
      return false;
    }
    log.purgeInvocations(nowNanos,logRetentionNanos);
    if (log.isEmpty()) {
      slowOperationLogs.remove(log.getStackTrace().hashCode());
    }
  }
  return true;
}",0.941025641025641
47517,"void shutdown(){
  running=false;
}","void shutdown(){
  running=false;
  try {
    slowOperationDetectorThread.join(SLOW_OPERATION_THREAD_MAX_WAIT_TIME_TO_FINISH);
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
}",0.2953586497890295
47518,"@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      backPressureService.cleanup();
      sleep();
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}","@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      if (!shutdown) {
        backPressureService.cleanup();
      }
      if (!shutdown) {
        sleep();
      }
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}",0.8610169491525423
47519,"private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}","private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    if (shutdown) {
      return;
    }
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}",0.9646643109540636
47520,"@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  operationExecutor.shutdown();
  slowOperationDetector.shutdown();
}","@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  operationExecutor.shutdown();
  slowOperationDetector.shutdown();
  try {
    cleanupThread.join(CLEANUP_THREAD_MAX_WAIT_TIME_TO_FINISH);
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
}",0.8557312252964426
47521,"BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationExecutor=new ClassicOperationExecutor(node.getGroupProperties(),node.loggingService,node.getThisAddress(),new BasicOperationRunnerFactory(),new BasicResponsePacketHandler(),node.getHazelcastThreadGroup(),node.getNodeExtension());
  ExecutionService executionService=nodeEngine.getExecutionService();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.slowOperationDetector=new SlowOperationDetector(operationExecutor.getGenericOperationRunners(),operationExecutor.getPartitionOperationRunners(),node.groupProperties,node.getHazelcastThreadGroup());
  startCleanupThread();
}","BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationExecutor=new ClassicOperationExecutor(node.getGroupProperties(),node.loggingService,node.getThisAddress(),new BasicOperationRunnerFactory(),new BasicResponsePacketHandler(),node.getHazelcastThreadGroup(),node.getNodeExtension());
  ExecutionService executionService=nodeEngine.getExecutionService();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.slowOperationDetector=new SlowOperationDetector(operationExecutor.getGenericOperationRunners(),operationExecutor.getPartitionOperationRunners(),node.groupProperties,node.getHazelcastThreadGroup());
  cleanupThread=new CleanupThread();
  cleanupThread.start();
}",0.9769470404984424
47522,"private void scan(long nowNanos,long nowMillis,OperationRunner[] operationRunners,CurrentOperationData[] currentOperationDataArray){
  for (int i=0; i < operationRunners.length; i++) {
    if (operationRunners[i].currentTask() == null) {
      continue;
    }
    scanOperationRunner(nowNanos,nowMillis,operationRunners[i],currentOperationDataArray[i]);
  }
}","private void scan(long nowNanos,long nowMillis,OperationRunner[] operationRunners,CurrentOperationData[] currentOperationDataArray){
  for (int i=0; i < operationRunners.length && running; i++) {
    if (operationRunners[i].currentTask() == null) {
      continue;
    }
    scanOperationRunner(nowNanos,nowMillis,operationRunners[i],currentOperationDataArray[i]);
  }
}",0.9849108367626886
47523,"public SlowOperationDetector(OperationRunner[] genericOperationRunners,OperationRunner[] partitionOperationRunners,GroupProperties groupProperties,HazelcastThreadGroup hazelcastThreadGroup){
  this.genericOperationRunners=genericOperationRunners;
  this.partitionOperationRunners=partitionOperationRunners;
  genericCurrentOperationData=initCurrentOperationData(genericOperationRunners);
  partitionCurrentOperationData=initCurrentOperationData(partitionOperationRunners);
  slowOperationThresholdNanos=getGroupPropertyMillisAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS);
  logPurgeIntervalNanos=getGroupPropertySecAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_LOG_PURGE_INTERVAL_SECONDS);
  logRetentionNanos=getGroupPropertySecAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS);
  new SlowOperationDetectorThread(hazelcastThreadGroup).start();
}","public SlowOperationDetector(OperationRunner[] genericOperationRunners,OperationRunner[] partitionOperationRunners,GroupProperties groupProperties,HazelcastThreadGroup hazelcastThreadGroup){
  this.genericOperationRunners=genericOperationRunners;
  this.partitionOperationRunners=partitionOperationRunners;
  genericCurrentOperationData=initCurrentOperationData(genericOperationRunners);
  partitionCurrentOperationData=initCurrentOperationData(partitionOperationRunners);
  slowOperationThresholdNanos=getGroupPropertyMillisAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS);
  logPurgeIntervalNanos=getGroupPropertySecAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_LOG_PURGE_INTERVAL_SECONDS);
  logRetentionNanos=getGroupPropertySecAsNanos(groupProperties.SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS);
  slowOperationDetectorThread=new SlowOperationDetectorThread(hazelcastThreadGroup);
  slowOperationDetectorThread.start();
}",0.9678824169842134
47524,"public void run(){
  long lastLogPurge=System.nanoTime();
  while (running) {
    long nowNanos=System.nanoTime();
    long nowMillis=System.currentTimeMillis();
    scan(nowNanos,nowMillis,genericOperationRunners,genericCurrentOperationData);
    scan(nowNanos,nowMillis,partitionOperationRunners,partitionCurrentOperationData);
    if (purge(nowNanos,lastLogPurge)) {
      lastLogPurge=nowNanos;
    }
    sleepInterval(nowNanos);
  }
}","public void run(){
  long lastLogPurge=System.nanoTime();
  while (running) {
    long nowNanos=System.nanoTime();
    long nowMillis=System.currentTimeMillis();
    scan(nowNanos,nowMillis,genericOperationRunners,genericCurrentOperationData);
    scan(nowNanos,nowMillis,partitionOperationRunners,partitionCurrentOperationData);
    if (purge(nowNanos,lastLogPurge)) {
      lastLogPurge=nowNanos;
    }
    if (running) {
      sleepInterval(nowNanos);
    }
  }
}",0.9701657458563536
47525,"private boolean purge(long nowNanos,long lastLogPurge){
  if (nowNanos - lastLogPurge <= logPurgeIntervalNanos) {
    return false;
  }
  for (  SlowOperationLog log : slowOperationLogs.values()) {
    log.purgeInvocations(nowNanos,logRetentionNanos);
    if (log.isEmpty()) {
      slowOperationLogs.remove(log.getStackTrace().hashCode());
    }
  }
  return true;
}","private boolean purge(long nowNanos,long lastLogPurge){
  if (nowNanos - lastLogPurge <= logPurgeIntervalNanos) {
    return false;
  }
  for (  SlowOperationLog log : slowOperationLogs.values()) {
    if (!running) {
      return false;
    }
    log.purgeInvocations(nowNanos,logRetentionNanos);
    if (log.isEmpty()) {
      slowOperationLogs.remove(log.getStackTrace().hashCode());
    }
  }
  return true;
}",0.941025641025641
47526,"void shutdown(){
  running=false;
}","void shutdown(){
  running=false;
  try {
    slowOperationDetectorThread.join(SLOW_OPERATION_THREAD_MAX_WAIT_TIME_TO_FINISH);
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
}",0.2953586497890295
47527,"public boolean isHeartBeating(){
  return heartBeating;
}","public boolean isHeartBeating(){
  return live.get() && heartBeating;
}",0.890625
47528,"private void getPartitionsBlocking(){
  while (!getPartitions()) {
    try {
      Thread.sleep(PARTITION_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","private void getPartitionsBlocking(){
  while (!getPartitions() && client.getConnectionManager().isAlive()) {
    try {
      Thread.sleep(PARTITION_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9029345372460496
47529,"public boolean isHeartBeating(){
  return heartBeating;
}","public boolean isHeartBeating(){
  return live.get() && heartBeating;
}",0.890625
47530,"private void getPartitionsBlocking(){
  while (!getPartitions()) {
    try {
      Thread.sleep(PARTITION_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","private void getPartitionsBlocking(){
  while (!getPartitions() && client.getConnectionManager().isAlive()) {
    try {
      Thread.sleep(PARTITION_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9029345372460496
47531,"@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      backPressureService.cleanup();
      sleep();
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}","@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      if (!shutdown) {
        backPressureService.cleanup();
      }
      if (!shutdown) {
        sleep();
      }
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}",0.8610169491525423
47532,"private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}","private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    if (shutdown) {
      return;
    }
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}",0.9646643109540636
47533,"@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
}","@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
  try {
    cleanupThread.join(CLEANUP_THREAD_MAX_WAIT_TIME_TO_FINISH);
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
}",0.841991341991342
47534,"BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.executionService=nodeEngine.getExecutionService();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.executingCalls=new ConcurrentHashMap<RemoteCallKey,RemoteCallKey>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.scheduler=new BasicOperationScheduler(node,executionService,new BasicDispatcherImpl());
  this.operationHandler=new OperationHandler();
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationPacketHandler=new OperationPacketHandler();
  this.responsePacketHandler=new ResponsePacketHandler();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  startCleanupThread();
}","BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.executionService=nodeEngine.getExecutionService();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.executingCalls=new ConcurrentHashMap<RemoteCallKey,RemoteCallKey>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.scheduler=new BasicOperationScheduler(node,executionService,new BasicDispatcherImpl());
  this.operationHandler=new OperationHandler();
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationPacketHandler=new OperationPacketHandler();
  this.responsePacketHandler=new ResponsePacketHandler();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.cleanupThread=new CleanupThread();
  this.cleanupThread.start();
}",0.972531066056246
47535,"public boolean isHeartBeating(){
  return heartBeating;
}","public boolean isHeartBeating(){
  return live && heartBeating;
}",0.9344262295081968
47536,"@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      backPressureService.cleanup();
      sleep();
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}","@Override public void run(){
  try {
    while (!shutdown) {
      scanHandleOperationTimeout();
      if (!shutdown) {
        backPressureService.cleanup();
      }
      if (!shutdown) {
        sleep();
      }
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"",t);
  }
}",0.8610169491525423
47537,"private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}","private void scanHandleOperationTimeout(){
  if (invocations.isEmpty()) {
    return;
  }
  for (  BasicInvocation invocation : invocations.values()) {
    if (shutdown) {
      return;
    }
    try {
      invocation.handleOperationTimeout();
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
    try {
      invocation.handleBackupTimeout(backupOperationTimeoutMillis);
    }
 catch (    Throwable t) {
      inspectOutputMemoryError(t);
      logger.severe(""String_Node_Str"" + invocation,t);
    }
  }
}",0.9646643109540636
47538,"@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
}","@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
  try {
    cleanupThread.join(CLEANUP_THREAD_MAX_WAIT_TIME_TO_FINISH);
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
}",0.841991341991342
47539,"BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.executionService=nodeEngine.getExecutionService();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.executingCalls=new ConcurrentHashMap<RemoteCallKey,RemoteCallKey>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.scheduler=new BasicOperationScheduler(node,executionService,new BasicDispatcherImpl());
  this.operationHandler=new OperationHandler();
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationPacketHandler=new OperationPacketHandler();
  this.responsePacketHandler=new ResponsePacketHandler();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  startCleanupThread();
}","BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.executionService=nodeEngine.getExecutionService();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.executingCalls=new ConcurrentHashMap<RemoteCallKey,RemoteCallKey>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.scheduler=new BasicOperationScheduler(node,executionService,new BasicDispatcherImpl());
  this.operationHandler=new OperationHandler();
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationPacketHandler=new OperationPacketHandler();
  this.responsePacketHandler=new ResponsePacketHandler();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.cleanupThread=new CleanupThread();
  this.cleanupThread.start();
}",0.972531066056246
47540,"/** 
 * @param config
 */
public GroupProperties(Config config){
  HEALTH_MONITORING_LEVEL=new GroupProperty(config,PROP_HEALTH_MONITORING_LEVEL,HealthMonitorLevel.SILENT.toString());
  HEALTH_MONITORING_DELAY_SECONDS=new GroupProperty(config,PROP_HEALTH_MONITORING_DELAY_SECONDS,""String_Node_Str"");
  PERFORMANCE_MONITORING_ENABLED=new GroupProperty(config,PROP_PERFORMANCE_MONITORING_ENABLED,""String_Node_Str"");
  PERFORMANCE_MONITORING_DELAY_SECONDS=new GroupProperty(config,PROP_PERFORMANCE_MONITORING_DELAY_SECONDS,""String_Node_Str"");
  VERSION_CHECK_ENABLED=new GroupProperty(config,PROP_VERSION_CHECK_ENABLED,""String_Node_Str"");
  PREFER_IPv4_STACK=new GroupProperty(config,PROP_PREFER_IPv4_STACK,""String_Node_Str"");
  IO_THREAD_COUNT=new GroupProperty(config,PROP_IO_THREAD_COUNT,""String_Node_Str"");
  PARTITION_OPERATION_THREAD_COUNT=new GroupProperty(config,PROP_PARTITION_OPERATION_THREAD_COUNT,""String_Node_Str"");
  GENERIC_OPERATION_THREAD_COUNT=new GroupProperty(config,PROP_GENERIC_OPERATION_THREAD_COUNT,""String_Node_Str"");
  EVENT_THREAD_COUNT=new GroupProperty(config,PROP_EVENT_THREAD_COUNT,""String_Node_Str"");
  EVENT_QUEUE_CAPACITY=new GroupProperty(config,PROP_EVENT_QUEUE_CAPACITY,""String_Node_Str"");
  EVENT_QUEUE_TIMEOUT_MILLIS=new GroupProperty(config,PROP_EVENT_QUEUE_TIMEOUT_MILLIS,""String_Node_Str"");
  CLIENT_ENGINE_THREAD_COUNT=new GroupProperty(config,PROP_CLIENT_ENGINE_THREAD_COUNT,""String_Node_Str"");
  CONNECT_ALL_WAIT_SECONDS=new GroupProperty(config,PROP_CONNECT_ALL_WAIT_SECONDS,""String_Node_Str"");
  MEMCACHE_ENABLED=new GroupProperty(config,PROP_MEMCACHE_ENABLED,""String_Node_Str"");
  REST_ENABLED=new GroupProperty(config,PROP_REST_ENABLED,""String_Node_Str"");
  MAP_LOAD_CHUNK_SIZE=new GroupProperty(config,PROP_MAP_LOAD_CHUNK_SIZE,""String_Node_Str"");
  MERGE_FIRST_RUN_DELAY_SECONDS=new GroupProperty(config,PROP_MERGE_FIRST_RUN_DELAY_SECONDS,""String_Node_Str"");
  MERGE_NEXT_RUN_DELAY_SECONDS=new GroupProperty(config,PROP_MERGE_NEXT_RUN_DELAY_SECONDS,""String_Node_Str"");
  OPERATION_CALL_TIMEOUT_MILLIS=new GroupProperty(config,PROP_OPERATION_CALL_TIMEOUT_MILLIS,""String_Node_Str"");
  OPERATION_BACKUP_TIMEOUT_MILLIS=new GroupProperty(config,PROP_OPERATION_BACKUP_TIMEOUT_MILLIS,""String_Node_Str"");
  final GroupProperty SOCKET_BIND_ANY=new GroupProperty(config,PROP_SOCKET_BIND_ANY,""String_Node_Str"");
  SOCKET_SERVER_BIND_ANY=new GroupProperty(config,PROP_SOCKET_SERVER_BIND_ANY,SOCKET_BIND_ANY);
  SOCKET_CLIENT_BIND_ANY=new GroupProperty(config,PROP_SOCKET_CLIENT_BIND_ANY,SOCKET_BIND_ANY);
  SOCKET_CLIENT_BIND=new GroupProperty(config,PROP_SOCKET_CLIENT_BIND,""String_Node_Str"");
  SOCKET_RECEIVE_BUFFER_SIZE=new GroupProperty(config,PROP_SOCKET_RECEIVE_BUFFER_SIZE,""String_Node_Str"");
  SOCKET_SEND_BUFFER_SIZE=new GroupProperty(config,PROP_SOCKET_SEND_BUFFER_SIZE,""String_Node_Str"");
  SOCKET_LINGER_SECONDS=new GroupProperty(config,PROP_SOCKET_LINGER_SECONDS,""String_Node_Str"");
  SOCKET_CONNECT_TIMEOUT_SECONDS=new GroupProperty(config,PROP_SOCKET_CONNECT_TIMEOUT_SECONDS,""String_Node_Str"");
  SOCKET_KEEP_ALIVE=new GroupProperty(config,PROP_SOCKET_KEEP_ALIVE,""String_Node_Str"");
  SOCKET_NO_DELAY=new GroupProperty(config,PROP_SOCKET_NO_DELAY,""String_Node_Str"");
  SHUTDOWNHOOK_ENABLED=new GroupProperty(config,PROP_SHUTDOWNHOOK_ENABLED,""String_Node_Str"");
  WAIT_SECONDS_BEFORE_JOIN=new GroupProperty(config,PROP_WAIT_SECONDS_BEFORE_JOIN,""String_Node_Str"");
  MAX_WAIT_SECONDS_BEFORE_JOIN=new GroupProperty(config,PROP_MAX_WAIT_SECONDS_BEFORE_JOIN,""String_Node_Str"");
  MAX_JOIN_SECONDS=new GroupProperty(config,PROP_MAX_JOIN_SECONDS,""String_Node_Str"");
  MAX_JOIN_MERGE_TARGET_SECONDS=new GroupProperty(config,PROP_MAX_JOIN_MERGE_TARGET_SECONDS,""String_Node_Str"");
  HEARTBEAT_INTERVAL_SECONDS=new GroupProperty(config,PROP_HEARTBEAT_INTERVAL_SECONDS,""String_Node_Str"");
  MAX_NO_HEARTBEAT_SECONDS=new GroupProperty(config,PROP_MAX_NO_HEARTBEAT_SECONDS,""String_Node_Str"");
  MASTER_CONFIRMATION_INTERVAL_SECONDS=new GroupProperty(config,PROP_MASTER_CONFIRMATION_INTERVAL_SECONDS,""String_Node_Str"");
  MAX_NO_MASTER_CONFIRMATION_SECONDS=new GroupProperty(config,PROP_MAX_NO_MASTER_CONFIRMATION_SECONDS,""String_Node_Str"");
  MEMBER_LIST_PUBLISH_INTERVAL_SECONDS=new GroupProperty(config,PROP_MEMBER_LIST_PUBLISH_INTERVAL_SECONDS,""String_Node_Str"");
  ICMP_ENABLED=new GroupProperty(config,PROP_ICMP_ENABLED,""String_Node_Str"");
  ICMP_TIMEOUT=new GroupProperty(config,PROP_ICMP_TIMEOUT,""String_Node_Str"");
  ICMP_TTL=new GroupProperty(config,PROP_ICMP_TTL,""String_Node_Str"");
  INITIAL_MIN_CLUSTER_SIZE=new GroupProperty(config,PROP_INITIAL_MIN_CLUSTER_SIZE,""String_Node_Str"");
  INITIAL_WAIT_SECONDS=new GroupProperty(config,PROP_INITIAL_WAIT_SECONDS,""String_Node_Str"");
  MAP_REPLICA_SCHEDULED_TASK_DELAY_SECONDS=new GroupProperty(config,PROP_MAP_REPLICA_SCHEDULED_TASK_DELAY_SECONDS,""String_Node_Str"");
  PARTITION_COUNT=new GroupProperty(config,PROP_PARTITION_COUNT,""String_Node_Str"");
  LOGGING_TYPE=new GroupProperty(config,PROP_LOGGING_TYPE,""String_Node_Str"");
  ENABLE_JMX=new GroupProperty(config,PROP_ENABLE_JMX,""String_Node_Str"");
  ENABLE_JMX_DETAILED=new GroupProperty(config,PROP_ENABLE_JMX_DETAILED,""String_Node_Str"");
  MC_MAX_INSTANCE_COUNT=new GroupProperty(config,PROP_MC_MAX_VISIBLE_INSTANCE_COUNT,""String_Node_Str"");
  MC_MAX_SLOW_OPERATION_COUNT=new GroupProperty(config,PROP_MC_MAX_VISIBLE_SLOW_OPERATION_COUNT,""String_Node_Str"");
  MC_URL_CHANGE_ENABLED=new GroupProperty(config,PROP_MC_URL_CHANGE_ENABLED,""String_Node_Str"");
  CONNECTION_MONITOR_INTERVAL=new GroupProperty(config,PROP_CONNECTION_MONITOR_INTERVAL,""String_Node_Str"");
  CONNECTION_MONITOR_MAX_FAULTS=new GroupProperty(config,PROP_CONNECTION_MONITOR_MAX_FAULTS,""String_Node_Str"");
  PARTITION_MIGRATION_INTERVAL=new GroupProperty(config,PROP_PARTITION_MIGRATION_INTERVAL,""String_Node_Str"");
  PARTITION_MIGRATION_TIMEOUT=new GroupProperty(config,PROP_PARTITION_MIGRATION_TIMEOUT,""String_Node_Str"");
  PARTITION_MIGRATION_ZIP_ENABLED=new GroupProperty(config,PROP_PARTITION_MIGRATION_ZIP_ENABLED,""String_Node_Str"");
  PARTITION_TABLE_SEND_INTERVAL=new GroupProperty(config,PROP_PARTITION_TABLE_SEND_INTERVAL,""String_Node_Str"");
  PARTITION_BACKUP_SYNC_INTERVAL=new GroupProperty(config,PROP_PARTITION_BACKUP_SYNC_INTERVAL,""String_Node_Str"");
  PARTITION_MAX_PARALLEL_REPLICATIONS=new GroupProperty(config,PROP_PARTITION_MAX_PARALLEL_REPLICATIONS,""String_Node_Str"");
  PARTITIONING_STRATEGY_CLASS=new GroupProperty(config,PROP_PARTITIONING_STRATEGY_CLASS,""String_Node_Str"");
  GRACEFUL_SHUTDOWN_MAX_WAIT=new GroupProperty(config,PROP_GRACEFUL_SHUTDOWN_MAX_WAIT,""String_Node_Str"");
  SYSTEM_LOG_ENABLED=new GroupProperty(config,PROP_SYSTEM_LOG_ENABLED,""String_Node_Str"");
  SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS=new GroupProperty(config,PROP_SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS,""String_Node_Str"");
  SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS=new GroupProperty(config,PROP_SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS,""String_Node_Str"");
  SLOW_OPERATION_DETECTOR_LOG_PURGE_INTERVAL_SECONDS=new GroupProperty(config,PROP_SLOW_OPERATION_DETECTOR_LOG_PURGE_INTERVAL_SECONDS,""String_Node_Str"");
  ELASTIC_MEMORY_ENABLED=new GroupProperty(config,PROP_ELASTIC_MEMORY_ENABLED,""String_Node_Str"");
  ELASTIC_MEMORY_TOTAL_SIZE=new GroupProperty(config,PROP_ELASTIC_MEMORY_TOTAL_SIZE,""String_Node_Str"");
  ELASTIC_MEMORY_CHUNK_SIZE=new GroupProperty(config,PROP_ELASTIC_MEMORY_CHUNK_SIZE,""String_Node_Str"");
  ELASTIC_MEMORY_SHARED_STORAGE=new GroupProperty(config,PROP_ELASTIC_MEMORY_SHARED_STORAGE,""String_Node_Str"");
  ELASTIC_MEMORY_UNSAFE_ENABLED=new GroupProperty(config,PROP_ELASTIC_MEMORY_UNSAFE_ENABLED,""String_Node_Str"");
  ENTERPRISE_LICENSE_KEY=new GroupProperty(config,PROP_ENTERPRISE_LICENSE_KEY);
  MAP_WRITE_BEHIND_QUEUE_CAPACITY=new GroupProperty(config,PROP_MAP_WRITE_BEHIND_QUEUE_CAPACITY,""String_Node_Str"");
  ENTERPRISE_WAN_REP_QUEUESIZE=new GroupProperty(config,PROP_ENTERPRISE_WAN_REP_QUEUESIZE,""String_Node_Str"");
  CLIENT_HEARTBEAT_TIMEOUT_SECONDS=new GroupProperty(config,PROP_CLIENT_MAX_NO_HEARTBEAT_SECONDS,""String_Node_Str"");
  MIGRATION_MIN_DELAY_ON_MEMBER_REMOVED_SECONDS=new GroupProperty(config,PROP_MIGRATION_MIN_DELAY_ON_MEMBER_REMOVED_SECONDS,""String_Node_Str"");
  BACKPRESSURE_ENABLED=new GroupProperty(config,PROP_BACKPRESSURE_ENABLED,""String_Node_Str"");
  BACKPRESSURE_SYNCWINDOW=new GroupProperty(config,PROP_BACKPRESSURE_SYNCWINDOW,""String_Node_Str"");
}","/** 
 * @param config
 */
public GroupProperties(Config config){
  HEALTH_MONITORING_LEVEL=new GroupProperty(config,PROP_HEALTH_MONITORING_LEVEL,HealthMonitorLevel.SILENT.toString());
  HEALTH_MONITORING_DELAY_SECONDS=new GroupProperty(config,PROP_HEALTH_MONITORING_DELAY_SECONDS,""String_Node_Str"");
  PERFORMANCE_MONITORING_ENABLED=new GroupProperty(config,PROP_PERFORMANCE_MONITORING_ENABLED,""String_Node_Str"");
  PERFORMANCE_MONITORING_DELAY_SECONDS=new GroupProperty(config,PROP_PERFORMANCE_MONITORING_DELAY_SECONDS,""String_Node_Str"");
  VERSION_CHECK_ENABLED=new GroupProperty(config,PROP_VERSION_CHECK_ENABLED,""String_Node_Str"");
  PREFER_IPv4_STACK=new GroupProperty(config,PROP_PREFER_IPv4_STACK,""String_Node_Str"");
  IO_THREAD_COUNT=new GroupProperty(config,PROP_IO_THREAD_COUNT,""String_Node_Str"");
  PARTITION_OPERATION_THREAD_COUNT=new GroupProperty(config,PROP_PARTITION_OPERATION_THREAD_COUNT,""String_Node_Str"");
  GENERIC_OPERATION_THREAD_COUNT=new GroupProperty(config,PROP_GENERIC_OPERATION_THREAD_COUNT,""String_Node_Str"");
  EVENT_THREAD_COUNT=new GroupProperty(config,PROP_EVENT_THREAD_COUNT,""String_Node_Str"");
  EVENT_QUEUE_CAPACITY=new GroupProperty(config,PROP_EVENT_QUEUE_CAPACITY,""String_Node_Str"");
  EVENT_QUEUE_TIMEOUT_MILLIS=new GroupProperty(config,PROP_EVENT_QUEUE_TIMEOUT_MILLIS,""String_Node_Str"");
  CLIENT_ENGINE_THREAD_COUNT=new GroupProperty(config,PROP_CLIENT_ENGINE_THREAD_COUNT,""String_Node_Str"");
  CONNECT_ALL_WAIT_SECONDS=new GroupProperty(config,PROP_CONNECT_ALL_WAIT_SECONDS,""String_Node_Str"");
  MEMCACHE_ENABLED=new GroupProperty(config,PROP_MEMCACHE_ENABLED,""String_Node_Str"");
  REST_ENABLED=new GroupProperty(config,PROP_REST_ENABLED,""String_Node_Str"");
  MAP_LOAD_CHUNK_SIZE=new GroupProperty(config,PROP_MAP_LOAD_CHUNK_SIZE,""String_Node_Str"");
  MERGE_FIRST_RUN_DELAY_SECONDS=new GroupProperty(config,PROP_MERGE_FIRST_RUN_DELAY_SECONDS,""String_Node_Str"");
  MERGE_NEXT_RUN_DELAY_SECONDS=new GroupProperty(config,PROP_MERGE_NEXT_RUN_DELAY_SECONDS,""String_Node_Str"");
  OPERATION_CALL_TIMEOUT_MILLIS=new GroupProperty(config,PROP_OPERATION_CALL_TIMEOUT_MILLIS,""String_Node_Str"");
  OPERATION_BACKUP_TIMEOUT_MILLIS=new GroupProperty(config,PROP_OPERATION_BACKUP_TIMEOUT_MILLIS,""String_Node_Str"");
  final GroupProperty SOCKET_BIND_ANY=new GroupProperty(config,PROP_SOCKET_BIND_ANY,""String_Node_Str"");
  SOCKET_SERVER_BIND_ANY=new GroupProperty(config,PROP_SOCKET_SERVER_BIND_ANY,SOCKET_BIND_ANY);
  SOCKET_CLIENT_BIND_ANY=new GroupProperty(config,PROP_SOCKET_CLIENT_BIND_ANY,SOCKET_BIND_ANY);
  SOCKET_CLIENT_BIND=new GroupProperty(config,PROP_SOCKET_CLIENT_BIND,""String_Node_Str"");
  SOCKET_RECEIVE_BUFFER_SIZE=new GroupProperty(config,PROP_SOCKET_RECEIVE_BUFFER_SIZE,""String_Node_Str"");
  SOCKET_SEND_BUFFER_SIZE=new GroupProperty(config,PROP_SOCKET_SEND_BUFFER_SIZE,""String_Node_Str"");
  SOCKET_LINGER_SECONDS=new GroupProperty(config,PROP_SOCKET_LINGER_SECONDS,""String_Node_Str"");
  SOCKET_CONNECT_TIMEOUT_SECONDS=new GroupProperty(config,PROP_SOCKET_CONNECT_TIMEOUT_SECONDS,""String_Node_Str"");
  SOCKET_KEEP_ALIVE=new GroupProperty(config,PROP_SOCKET_KEEP_ALIVE,""String_Node_Str"");
  SOCKET_NO_DELAY=new GroupProperty(config,PROP_SOCKET_NO_DELAY,""String_Node_Str"");
  SHUTDOWNHOOK_ENABLED=new GroupProperty(config,PROP_SHUTDOWNHOOK_ENABLED,""String_Node_Str"");
  WAIT_SECONDS_BEFORE_JOIN=new GroupProperty(config,PROP_WAIT_SECONDS_BEFORE_JOIN,""String_Node_Str"");
  MAX_WAIT_SECONDS_BEFORE_JOIN=new GroupProperty(config,PROP_MAX_WAIT_SECONDS_BEFORE_JOIN,""String_Node_Str"");
  MAX_JOIN_SECONDS=new GroupProperty(config,PROP_MAX_JOIN_SECONDS,""String_Node_Str"");
  MAX_JOIN_MERGE_TARGET_SECONDS=new GroupProperty(config,PROP_MAX_JOIN_MERGE_TARGET_SECONDS,""String_Node_Str"");
  HEARTBEAT_INTERVAL_SECONDS=new GroupProperty(config,PROP_HEARTBEAT_INTERVAL_SECONDS,""String_Node_Str"");
  MAX_NO_HEARTBEAT_SECONDS=new GroupProperty(config,PROP_MAX_NO_HEARTBEAT_SECONDS,""String_Node_Str"");
  MASTER_CONFIRMATION_INTERVAL_SECONDS=new GroupProperty(config,PROP_MASTER_CONFIRMATION_INTERVAL_SECONDS,""String_Node_Str"");
  MAX_NO_MASTER_CONFIRMATION_SECONDS=new GroupProperty(config,PROP_MAX_NO_MASTER_CONFIRMATION_SECONDS,""String_Node_Str"");
  MEMBER_LIST_PUBLISH_INTERVAL_SECONDS=new GroupProperty(config,PROP_MEMBER_LIST_PUBLISH_INTERVAL_SECONDS,""String_Node_Str"");
  ICMP_ENABLED=new GroupProperty(config,PROP_ICMP_ENABLED,""String_Node_Str"");
  ICMP_TIMEOUT=new GroupProperty(config,PROP_ICMP_TIMEOUT,""String_Node_Str"");
  ICMP_TTL=new GroupProperty(config,PROP_ICMP_TTL,""String_Node_Str"");
  INITIAL_MIN_CLUSTER_SIZE=new GroupProperty(config,PROP_INITIAL_MIN_CLUSTER_SIZE,""String_Node_Str"");
  INITIAL_WAIT_SECONDS=new GroupProperty(config,PROP_INITIAL_WAIT_SECONDS,""String_Node_Str"");
  MAP_REPLICA_SCHEDULED_TASK_DELAY_SECONDS=new GroupProperty(config,PROP_MAP_REPLICA_SCHEDULED_TASK_DELAY_SECONDS,""String_Node_Str"");
  PARTITION_COUNT=new GroupProperty(config,PROP_PARTITION_COUNT,""String_Node_Str"");
  LOGGING_TYPE=new GroupProperty(config,PROP_LOGGING_TYPE,""String_Node_Str"");
  ENABLE_JMX=new GroupProperty(config,PROP_ENABLE_JMX,""String_Node_Str"");
  ENABLE_JMX_DETAILED=new GroupProperty(config,PROP_ENABLE_JMX_DETAILED,""String_Node_Str"");
  MC_MAX_INSTANCE_COUNT=new GroupProperty(config,PROP_MC_MAX_VISIBLE_INSTANCE_COUNT,""String_Node_Str"");
  MC_MAX_SLOW_OPERATION_COUNT=new GroupProperty(config,PROP_MC_MAX_VISIBLE_SLOW_OPERATION_COUNT,""String_Node_Str"");
  MC_URL_CHANGE_ENABLED=new GroupProperty(config,PROP_MC_URL_CHANGE_ENABLED,""String_Node_Str"");
  CONNECTION_MONITOR_INTERVAL=new GroupProperty(config,PROP_CONNECTION_MONITOR_INTERVAL,""String_Node_Str"");
  CONNECTION_MONITOR_MAX_FAULTS=new GroupProperty(config,PROP_CONNECTION_MONITOR_MAX_FAULTS,""String_Node_Str"");
  PARTITION_MIGRATION_INTERVAL=new GroupProperty(config,PROP_PARTITION_MIGRATION_INTERVAL,""String_Node_Str"");
  PARTITION_MIGRATION_TIMEOUT=new GroupProperty(config,PROP_PARTITION_MIGRATION_TIMEOUT,""String_Node_Str"");
  PARTITION_MIGRATION_ZIP_ENABLED=new GroupProperty(config,PROP_PARTITION_MIGRATION_ZIP_ENABLED,""String_Node_Str"");
  PARTITION_TABLE_SEND_INTERVAL=new GroupProperty(config,PROP_PARTITION_TABLE_SEND_INTERVAL,""String_Node_Str"");
  PARTITION_BACKUP_SYNC_INTERVAL=new GroupProperty(config,PROP_PARTITION_BACKUP_SYNC_INTERVAL,""String_Node_Str"");
  PARTITION_MAX_PARALLEL_REPLICATIONS=new GroupProperty(config,PROP_PARTITION_MAX_PARALLEL_REPLICATIONS,""String_Node_Str"");
  PARTITIONING_STRATEGY_CLASS=new GroupProperty(config,PROP_PARTITIONING_STRATEGY_CLASS,""String_Node_Str"");
  GRACEFUL_SHUTDOWN_MAX_WAIT=new GroupProperty(config,PROP_GRACEFUL_SHUTDOWN_MAX_WAIT,""String_Node_Str"");
  SYSTEM_LOG_ENABLED=new GroupProperty(config,PROP_SYSTEM_LOG_ENABLED,""String_Node_Str"");
  SLOW_OPERATION_DETECTOR_ENABLED=new GroupProperty(config,PROP_SLOW_OPERATION_DETECTOR_ENABLED,""String_Node_Str"");
  SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS=new GroupProperty(config,PROP_SLOW_OPERATION_DETECTOR_THRESHOLD_MILLIS,""String_Node_Str"");
  SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS=new GroupProperty(config,PROP_SLOW_OPERATION_DETECTOR_LOG_RETENTION_SECONDS,""String_Node_Str"");
  SLOW_OPERATION_DETECTOR_LOG_PURGE_INTERVAL_SECONDS=new GroupProperty(config,PROP_SLOW_OPERATION_DETECTOR_LOG_PURGE_INTERVAL_SECONDS,""String_Node_Str"");
  ELASTIC_MEMORY_ENABLED=new GroupProperty(config,PROP_ELASTIC_MEMORY_ENABLED,""String_Node_Str"");
  ELASTIC_MEMORY_TOTAL_SIZE=new GroupProperty(config,PROP_ELASTIC_MEMORY_TOTAL_SIZE,""String_Node_Str"");
  ELASTIC_MEMORY_CHUNK_SIZE=new GroupProperty(config,PROP_ELASTIC_MEMORY_CHUNK_SIZE,""String_Node_Str"");
  ELASTIC_MEMORY_SHARED_STORAGE=new GroupProperty(config,PROP_ELASTIC_MEMORY_SHARED_STORAGE,""String_Node_Str"");
  ELASTIC_MEMORY_UNSAFE_ENABLED=new GroupProperty(config,PROP_ELASTIC_MEMORY_UNSAFE_ENABLED,""String_Node_Str"");
  ENTERPRISE_LICENSE_KEY=new GroupProperty(config,PROP_ENTERPRISE_LICENSE_KEY);
  MAP_WRITE_BEHIND_QUEUE_CAPACITY=new GroupProperty(config,PROP_MAP_WRITE_BEHIND_QUEUE_CAPACITY,""String_Node_Str"");
  ENTERPRISE_WAN_REP_QUEUESIZE=new GroupProperty(config,PROP_ENTERPRISE_WAN_REP_QUEUESIZE,""String_Node_Str"");
  CLIENT_HEARTBEAT_TIMEOUT_SECONDS=new GroupProperty(config,PROP_CLIENT_MAX_NO_HEARTBEAT_SECONDS,""String_Node_Str"");
  MIGRATION_MIN_DELAY_ON_MEMBER_REMOVED_SECONDS=new GroupProperty(config,PROP_MIGRATION_MIN_DELAY_ON_MEMBER_REMOVED_SECONDS,""String_Node_Str"");
  BACKPRESSURE_ENABLED=new GroupProperty(config,PROP_BACKPRESSURE_ENABLED,""String_Node_Str"");
  BACKPRESSURE_SYNCWINDOW=new GroupProperty(config,PROP_BACKPRESSURE_SYNCWINDOW,""String_Node_Str"");
}",0.9931716505768778
47541,"public LocalOperationStatsImpl(Node node){
  this.logs=((InternalOperationService)node.nodeEngine.getOperationService()).getSlowOperationLogs();
  this.maxVisibleSlowOperationCount=node.groupProperties.MC_MAX_SLOW_OPERATION_COUNT.getInteger();
}","public LocalOperationStatsImpl(Node node){
  InternalOperationService operationService=(InternalOperationService)node.nodeEngine.getOperationService();
  this.slowOperations=operationService.getSlowOperations();
  this.maxVisibleSlowOperationCount=node.groupProperties.MC_MAX_SLOW_OPERATION_COUNT.getInteger();
}",0.6247755834829444
47542,"@Override public JsonObject toJson(){
  JsonObject root=new JsonObject();
  root.add(""String_Node_Str"",creationTime);
  root.add(""String_Node_Str"",maxVisibleSlowOperationCount);
  JsonArray slowOperationLogs=new JsonArray();
  int logCount=0;
  for (  SlowOperationLog log : logs) {
    if (logCount++ < maxVisibleSlowOperationCount) {
      slowOperationLogs.add(log.toJson());
    }
  }
  root.add(""String_Node_Str"",slowOperationLogs);
  return root;
}","@Override public JsonObject toJson(){
  JsonObject root=new JsonObject();
  root.add(""String_Node_Str"",creationTime);
  root.add(""String_Node_Str"",maxVisibleSlowOperationCount);
  JsonArray slowOperationArray=new JsonArray();
  int logCount=0;
  for (  JsonSerializable slowOperation : slowOperations) {
    if (logCount++ < maxVisibleSlowOperationCount) {
      slowOperationArray.add(slowOperation.toJson());
    }
  }
  root.add(""String_Node_Str"",slowOperationArray);
  return root;
}",0.7013815090329437
47543,"@Override public int hashCode(){
  int result=logs != null ? logs.hashCode() : 0;
  result=31 * result + (int)(creationTime ^ (creationTime >>> 32));
  result=31 * result + (int)(maxVisibleSlowOperationCount ^ (maxVisibleSlowOperationCount >>> 32));
  return result;
}","@Override public int hashCode(){
  int result=slowOperations != null ? slowOperations.hashCode() : 0;
  result=31 * result + (int)(creationTime ^ (creationTime >>> 32));
  result=31 * result + (int)(maxVisibleSlowOperationCount ^ (maxVisibleSlowOperationCount >>> 32));
  return result;
}",0.9424460431654677
47544,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof LocalOperationStatsImpl)) {
    return false;
  }
  LocalOperationStatsImpl that=(LocalOperationStatsImpl)o;
  if (creationTime != that.creationTime) {
    return false;
  }
  if (maxVisibleSlowOperationCount != that.maxVisibleSlowOperationCount) {
    return false;
  }
  if (logs != null ? !isEqualLogs(that.logs) : that.logs != null) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof LocalOperationStatsImpl)) {
    return false;
  }
  LocalOperationStatsImpl that=(LocalOperationStatsImpl)o;
  if (creationTime != that.creationTime) {
    return false;
  }
  if (maxVisibleSlowOperationCount != that.maxVisibleSlowOperationCount) {
    return false;
  }
  if (slowOperations != null ? !isEqualSlowOperations(that.slowOperations) : that.slowOperations != null) {
    return false;
  }
  return true;
}",0.936127744510978
47545,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + creationTime + ""String_Node_Str""+ logs+ ""String_Node_Str""+ maxVisibleSlowOperationCount+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + creationTime + ""String_Node_Str""+ slowOperations+ ""String_Node_Str""+ maxVisibleSlowOperationCount+ '}';
}",0.9675675675675676
47546,"BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationExecutor=new ClassicOperationExecutor(node.getGroupProperties(),node.loggingService,node.getThisAddress(),new BasicOperationRunnerFactory(),new BasicResponsePacketHandler(),node.getHazelcastThreadGroup(),node.getNodeExtension());
  ExecutionService executionService=nodeEngine.getExecutionService();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.slowOperationDetector=new SlowOperationDetector(operationExecutor.getGenericOperationRunners(),operationExecutor.getPartitionOperationRunners(),node.groupProperties,node.getHazelcastThreadGroup());
  this.cleanupThread=new CleanupThread();
  this.cleanupThread.start();
}","BasicOperationService(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.node=nodeEngine.getNode();
  this.logger=node.getLogger(OperationService.class);
  this.invocationLogger=nodeEngine.getLogger(BasicInvocation.class);
  this.defaultCallTimeoutMillis=node.getGroupProperties().OPERATION_CALL_TIMEOUT_MILLIS.getLong();
  this.backupOperationTimeoutMillis=node.getGroupProperties().OPERATION_BACKUP_TIMEOUT_MILLIS.getLong();
  this.backPressureService=new BasicBackPressureService(node.getGroupProperties(),logger);
  int coreSize=Runtime.getRuntime().availableProcessors();
  boolean reallyMultiCore=coreSize >= CORE_SIZE_CHECK;
  int concurrencyLevel=reallyMultiCore ? coreSize * CORE_SIZE_FACTOR : CONCURRENCY_LEVEL;
  this.invocations=new ConcurrentHashMap<Long,BasicInvocation>(INITIAL_CAPACITY,LOAD_FACTOR,concurrencyLevel);
  this.operationBackupHandler=new OperationBackupHandler();
  this.operationExecutor=new ClassicOperationExecutor(node.getGroupProperties(),node.loggingService,node.getThisAddress(),new BasicOperationRunnerFactory(),new BasicResponsePacketHandler(),node.getHazelcastThreadGroup(),node.getNodeExtension());
  ExecutionService executionService=nodeEngine.getExecutionService();
  this.asyncExecutor=executionService.register(ExecutionService.ASYNC_EXECUTOR,coreSize,ASYNC_QUEUE_CAPACITY,ExecutorType.CONCRETE);
  this.slowOperationDetector=initSlowOperationDetector();
  this.cleanupThread=new CleanupThread();
  this.cleanupThread.start();
}",0.9202178788849728
47547,"public boolean isHeartBeating(){
  return heartBeating;
}","public boolean isHeartBeating(){
  return live.get() && heartBeating;
}",0.890625
47548,"private void getPartitionsBlocking(){
  while (!getPartitions()) {
    try {
      Thread.sleep(PARTITION_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","private void getPartitionsBlocking(){
  while (!getPartitions() && client.getConnectionManager().isAlive()) {
    try {
      Thread.sleep(PARTITION_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9029345372460496
47549,"public boolean isHeartBeating(){
  return heartBeating;
}","public boolean isHeartBeating(){
  return live.get() && heartBeating;
}",0.890625
47550,"boolean isConnectionHealthy(long elapsed){
  if (elapsed >= heartBeatInterval) {
    if (sendConnection != null) {
      return sendConnection.isAlive() && sendConnection.isHeartBeating();
    }
 else {
      return true;
    }
  }
  return true;
}","boolean isConnectionHealthy(long elapsed){
  if (elapsed >= heartBeatInterval) {
    if (sendConnection != null) {
      return sendConnection.isHeartBeating();
    }
 else {
      return true;
    }
  }
  return true;
}",0.9401709401709402
47551,"@Override public void invokeOnConnection(ClientInvocation invocation,ClientConnection connection) throws IOException {
  if (connection == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!connection.isAlive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  send(invocation,connection);
}","@Override public void invokeOnConnection(ClientInvocation invocation,ClientConnection connection) throws IOException {
  if (connection == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  send(invocation,connection);
}",0.7548500881834215
47552,"public void invokeOnPartitionOwner(ClientInvocation invocation,int partitionId) throws IOException {
  final Address owner=partitionService.getPartitionOwner(partitionId);
  if (owner == null) {
    throw new IOException(""String_Node_Str"" + partitionId);
  }
  ClientConnection connection=(ClientConnection)connectionManager.getOrConnect(owner,authenticator);
  if (connection == null || !connection.isAlive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  send(invocation,connection);
}","public void invokeOnPartitionOwner(ClientInvocation invocation,int partitionId) throws IOException {
  final Address owner=partitionService.getPartitionOwner(partitionId);
  if (owner == null) {
    throw new IOException(""String_Node_Str"" + partitionId);
  }
  ClientConnection connection=(ClientConnection)connectionManager.getOrConnect(owner,authenticator);
  send(invocation,connection);
}",0.8182831661092531
47553,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.7796610169491526
47554,"@Override public void run(){
  long start=System.currentTimeMillis();
  String testName=method.getMethod().getDeclaringClass().getSimpleName() + ""String_Node_Str"" + method.getName();
  System.out.println(""String_Node_Str"" + testName);
  HazelcastParallelClassRunner.super.runChild(method,notifier);
  numThreads.decrementAndGet();
  float took=(float)(System.currentTimeMillis() - start) / 1000;
  System.out.println(String.format(""String_Node_Str"",testName,took));
}","@Override public void run(){
  FRAMEWORK_METHOD_THREAD_LOCAL.set(method);
  try {
    long start=System.currentTimeMillis();
    String testName=method.getMethod().getDeclaringClass().getSimpleName() + ""String_Node_Str"" + method.getName();
    System.out.println(""String_Node_Str"" + testName);
    HazelcastParallelClassRunner.super.runChild(method,notifier);
    numThreads.decrementAndGet();
    float took=(float)(System.currentTimeMillis() - start) / 1000;
    System.out.println(String.format(""String_Node_Str"",testName,took));
  }
  finally {
    FRAMEWORK_METHOD_THREAD_LOCAL.remove();
  }
}",0.8769953051643192
47555,"@Override protected void runChild(FrameworkMethod method,RunNotifier notifier){
  long start=System.currentTimeMillis();
  String testName=method.getMethod().getDeclaringClass().getSimpleName() + ""String_Node_Str"" + method.getName();
  System.out.println(""String_Node_Str"" + testName);
  super.runChild(method,notifier);
  float took=(float)(System.currentTimeMillis() - start) / 1000;
  System.out.println(String.format(""String_Node_Str"",testName,took));
}","@Override protected void runChild(FrameworkMethod method,RunNotifier notifier){
  FRAMEWORK_METHOD_THREAD_LOCAL.set(method);
  try {
    long start=System.currentTimeMillis();
    String testName=method.getMethod().getDeclaringClass().getSimpleName() + ""String_Node_Str"" + method.getName();
    System.out.println(""String_Node_Str"" + testName);
    super.runChild(method,notifier);
    float took=(float)(System.currentTimeMillis() - start) / 1000;
    System.out.println(String.format(""String_Node_Str"",testName,took));
  }
  finally {
    FRAMEWORK_METHOD_THREAD_LOCAL.remove();
  }
}",0.8763183125599233
47556,"/** 
 * This method executes the normal assertEquals with expected and actual values. In addition it formats the given string with those values to provide a good assert message.
 * @param message     assert message which is formatted with expected and actual values
 * @param expected    expected value which is used for assert
 * @param actual      actual value which is used for assert
 */
public static void assertEqualsStringFormat(String message,Object expected,Object actual){
  assertEquals(String.format(message,expected,actual),expected,actual);
}","/** 
 * This method executes the normal assertEquals with expected and actual values. In addition it formats the given string with those values to provide a good assert message.
 * @param message  assert message which is formatted with expected and actual values
 * @param expected expected value which is used for assert
 * @param actual   actual value which is used for assert
 */
public static void assertEqualsStringFormat(String message,Object expected,Object actual){
  assertEquals(String.format(message,expected,actual),expected,actual);
}",0.9918404351767904
47557,"public static String randomMapName(String mapNamePrefix){
  return mapNamePrefix + randomString();
}","public static String randomMapName(String namePrefix){
  return namePrefix + randomString();
}",0.9484536082474226
47558,"boolean isConnectionHealthy(long elapsed){
  if (elapsed >= heartBeatInterval) {
    if (sendConnection != null) {
      return sendConnection.isHeartBeating();
    }
 else {
      return true;
    }
  }
  return true;
}","boolean isConnectionHealthy(long elapsed){
  if (elapsed >= heartBeatInterval) {
    if (sendConnection != null) {
      return sendConnection.isAlive() && sendConnection.isHeartBeating();
    }
 else {
      return true;
    }
  }
  return true;
}",0.9401709401709402
47559,"@Override public void invokeOnConnection(ClientInvocation invocation,ClientConnection connection) throws IOException {
  if (connection == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  send(invocation,connection);
}","@Override public void invokeOnConnection(ClientInvocation invocation,ClientConnection connection) throws IOException {
  if (connection == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!connection.isAlive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  send(invocation,connection);
}",0.8395061728395061
47560,"private void getPartitionsBlocking(){
  while (!getPartitions()) {
    try {
      Thread.sleep(PARTITION_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","private void getPartitionsBlocking(){
  while (!getPartitions() && client.getConnectionManager().isAlive()) {
    try {
      Thread.sleep(PARTITION_WAIT_TIME);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9029345372460496
47561,"public void invokeOnPartitionOwner(ClientInvocation invocation,int partitionId) throws IOException {
  final Address owner=partitionService.getPartitionOwner(partitionId);
  if (owner == null) {
    throw new IOException(""String_Node_Str"" + partitionId);
  }
  ClientConnection connection=(ClientConnection)connectionManager.getOrConnect(owner,authenticator);
  send(invocation,connection);
}","public void invokeOnPartitionOwner(ClientInvocation invocation,int partitionId) throws IOException {
  final Address owner=partitionService.getPartitionOwner(partitionId);
  if (owner == null) {
    throw new IOException(""String_Node_Str"" + partitionId);
  }
  ClientConnection connection=(ClientConnection)connectionManager.getOrConnect(owner,authenticator);
  if (connection == null || !connection.isAlive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  send(invocation,connection);
}",0.8740245261984393
47562,"public static String randomNameOwnedBy(HazelcastInstance instance,String prefix){
  Cluster cluster=instance.getCluster();
  Member localMember=cluster.getLocalMember();
  PartitionService partitionService=instance.getPartitionService();
  for (; ; ) {
    String id=prefix + randomString();
    Partition partition=partitionService.getPartition(id);
    if (comparePartitionOwnership(true,localMember,partition)) {
      return id;
    }
  }
}","public static String randomNameOwnedBy(HazelcastInstance instance,String prefix){
  Cluster cluster=instance.getCluster();
  Member localMember=cluster.getLocalMember();
  PartitionService partitionService=instance.getPartitionService();
  for (; ; ) {
    String id=prefix + randomString();
    Partition partition=partitionService.getPartition(id);
    if (comparePartitionOwnership(false,localMember,partition)) {
      return id;
    }
  }
}",0.9921259842519684
47563,"@Test public void testMapStatistics_withClientOperations(){
  final String mapName=randomString();
  final IMap map=client.getMap(mapName);
  final int operationCount=1123;
  for (int i=0; i < operationCount; i++) {
    map.put(i,i);
    map.get(i);
    map.remove(i);
  }
  final LocalMapStats serverMapStats=server.getMap(mapName).getLocalMapStats();
  assertEquals(""String_Node_Str"",operationCount,serverMapStats.getPutOperationCount());
  assertEquals(""String_Node_Str"",operationCount,serverMapStats.getGetOperationCount());
  assertEquals(""String_Node_Str"",operationCount,serverMapStats.getRemoveOperationCount());
  assertTrue(""String_Node_Str"",0 < serverMapStats.getTotalPutLatency());
  assertTrue(""String_Node_Str"",0 < serverMapStats.getTotalGetLatency());
  assertTrue(""String_Node_Str"",0 < serverMapStats.getTotalRemoveLatency());
}","@Test public void testMapStatistics_withClientOperations(){
  final String mapName=randomString();
  final IMap map=client.getMap(mapName);
  final LocalMapStats serverMapStats=server.getMap(mapName).getLocalMapStats();
  final int operationCount=1123;
  for (int i=0; i < operationCount; i++) {
    map.put(i,i);
    map.get(i);
    map.remove(i);
  }
  assertEquals(""String_Node_Str"",operationCount,serverMapStats.getPutOperationCount());
  assertEquals(""String_Node_Str"",operationCount,serverMapStats.getGetOperationCount());
  assertEquals(""String_Node_Str"",operationCount,serverMapStats.getRemoveOperationCount());
  assertTrue(""String_Node_Str"",0 < serverMapStats.getTotalPutLatency());
  assertTrue(""String_Node_Str"",0 < serverMapStats.getTotalGetLatency());
  assertTrue(""String_Node_Str"",0 < serverMapStats.getTotalRemoveLatency());
}",0.9051008303677344
47564,"@Test public void testMapStatistics() throws Exception {
  String name=randomString();
  final IMap map=client.getMap(name);
  final int operationCount=1000;
  for (int i=0; i < operationCount; i++) {
    map.put(i,i);
    map.get(i);
    map.remove(i);
  }
  final LocalMapStats localMapStats=server.getMap(name).getLocalMapStats();
  assertEquals(""String_Node_Str"",operationCount,localMapStats.getPutOperationCount());
  assertEquals(""String_Node_Str"",operationCount,localMapStats.getGetOperationCount());
  assertEquals(""String_Node_Str"",operationCount,localMapStats.getRemoveOperationCount());
  assertTrue(""String_Node_Str"",0 < localMapStats.getTotalPutLatency());
  assertTrue(""String_Node_Str"",0 < localMapStats.getTotalGetLatency());
  assertTrue(""String_Node_Str"",0 < localMapStats.getTotalRemoveLatency());
}","@Test public void testMapStatistics() throws Exception {
  String name=randomString();
  final IMap map=client.getMap(name);
  final LocalMapStats localMapStats=server.getMap(name).getLocalMapStats();
  final int operationCount=1000;
  for (int i=0; i < operationCount; i++) {
    map.put(i,i);
    map.get(i);
    map.remove(i);
  }
  assertEquals(""String_Node_Str"",operationCount,localMapStats.getPutOperationCount());
  assertEquals(""String_Node_Str"",operationCount,localMapStats.getGetOperationCount());
  assertEquals(""String_Node_Str"",operationCount,localMapStats.getRemoveOperationCount());
  assertTrue(""String_Node_Str"",0 < localMapStats.getTotalPutLatency());
  assertTrue(""String_Node_Str"",0 < localMapStats.getTotalGetLatency());
  assertTrue(""String_Node_Str"",0 < localMapStats.getTotalRemoveLatency());
}",0.9070904645476772
47565,"/** 
 * Calculates and adds owner partition stats.
 */
private void addOwnerPartitionStats(LocalMapStatsImpl localMapStats,String mapName,int partitionId){
  final RecordStore recordStore=getRecordStoreOrNull(mapName,partitionId);
  if (!hasRecords(recordStore)) {
    return;
  }
  int lockedEntryCount=0;
  long lastAccessTime=0;
  long lastUpdateTime=0;
  long ownedEntryMemoryCost=0;
  long hits=0;
  final Iterator<Record> iterator=recordStore.iterator();
  while (iterator.hasNext()) {
    final Record record=iterator.next();
    hits+=getHits(record);
    ownedEntryMemoryCost+=record.getCost();
    lockedEntryCount+=isLocked(record,recordStore);
    lastAccessTime=Math.max(lastAccessTime,record.getLastAccessTime());
    lastUpdateTime=Math.max(lastUpdateTime,record.getLastUpdateTime());
  }
  localMapStats.incrementOwnedEntryMemoryCost(ownedEntryMemoryCost);
  localMapStats.incrementLockedEntryCount(lockedEntryCount);
  localMapStats.incrementHits(hits);
  localMapStats.incrementDirtyEntryCount(recordStore.getMapDataStore().notFinishedOperationsCount());
  localMapStats.setLastAccessTime(lastAccessTime);
  localMapStats.setLastUpdateTime(lastUpdateTime);
  localMapStats.incrementHeapCost(recordStore.getHeapCost());
  localMapStats.incrementOwnedEntryCount(recordStore.size());
}","/** 
 * Calculates and adds owner partition stats.
 */
private void addOwnerPartitionStats(LocalMapStatsImpl localMapStats,LocalMapOnDemandCalculatedStats localMapOnDemandCalculatedStats,String mapName,int partitionId){
  final RecordStore recordStore=getRecordStoreOrNull(mapName,partitionId);
  if (!hasRecords(recordStore)) {
    return;
  }
  int lockedEntryCount=0;
  long lastAccessTime=0;
  long lastUpdateTime=0;
  long ownedEntryMemoryCost=0;
  long hits=0;
  final Iterator<Record> iterator=recordStore.iterator();
  while (iterator.hasNext()) {
    final Record record=iterator.next();
    hits+=getHits(record);
    ownedEntryMemoryCost+=record.getCost();
    lockedEntryCount+=isLocked(record,recordStore);
    lastAccessTime=Math.max(lastAccessTime,record.getLastAccessTime());
    lastUpdateTime=Math.max(lastUpdateTime,record.getLastUpdateTime());
  }
  localMapOnDemandCalculatedStats.incrementOwnedEntryMemoryCost(ownedEntryMemoryCost);
  localMapOnDemandCalculatedStats.incrementLockedEntryCount(lockedEntryCount);
  localMapOnDemandCalculatedStats.incrementHits(hits);
  localMapOnDemandCalculatedStats.incrementDirtyEntryCount(recordStore.getMapDataStore().notFinishedOperationsCount());
  localMapStats.setLastAccessTime(lastAccessTime);
  localMapStats.setLastUpdateTime(lastUpdateTime);
  localMapOnDemandCalculatedStats.incrementHeapCost(recordStore.getHeapCost());
  localMapOnDemandCalculatedStats.incrementOwnedEntryCount(recordStore.size());
}",0.937950937950938
47566,"public LocalMapStatsImpl createLocalMapStats(String mapName){
  final NodeEngine nodeEngine=this.nodeEngine;
  final MapContainer mapContainer=mapServiceContext.getMapContainer(mapName);
  final LocalMapStatsImpl localMapStats=new LocalMapStatsImpl(getLocalMapStatsImpl(mapName));
  if (!mapContainer.getMapConfig().isStatisticsEnabled()) {
    return localMapStats;
  }
  final int backupCount=mapContainer.getTotalBackupCount();
  final ClusterService clusterService=nodeEngine.getClusterService();
  final InternalPartitionService partitionService=nodeEngine.getPartitionService();
  final Address thisAddress=clusterService.getThisAddress();
  localMapStats.setBackupCount(backupCount);
  addNearCacheStats(localMapStats,mapContainer);
  for (int partitionId=0; partitionId < partitionService.getPartitionCount(); partitionId++) {
    InternalPartition partition=partitionService.getPartition(partitionId);
    Address owner=partition.getOwnerOrNull();
    if (owner == null) {
      continue;
    }
    if (owner.equals(thisAddress)) {
      addOwnerPartitionStats(localMapStats,mapName,partitionId);
    }
 else {
      addReplicaPartitionStats(localMapStats,mapName,partitionId,partition,partitionService,backupCount,thisAddress);
    }
  }
  return localMapStats;
}","public LocalMapStatsImpl createLocalMapStats(String mapName){
  final NodeEngine nodeEngine=this.nodeEngine;
  final MapContainer mapContainer=mapServiceContext.getMapContainer(mapName);
  final LocalMapStatsImpl localMapStats=getLocalMapStatsImpl(mapName);
  if (!mapContainer.getMapConfig().isStatisticsEnabled()) {
    return localMapStats;
  }
  final int backupCount=mapContainer.getTotalBackupCount();
  final ClusterService clusterService=nodeEngine.getClusterService();
  final InternalPartitionService partitionService=nodeEngine.getPartitionService();
  final Address thisAddress=clusterService.getThisAddress();
  LocalMapOnDemandCalculatedStats localMapOnDemandCalculatedStats=new LocalMapOnDemandCalculatedStats();
  localMapOnDemandCalculatedStats.setBackupCount(backupCount);
  addNearCacheStats(localMapStats,localMapOnDemandCalculatedStats,mapContainer);
  for (int partitionId=0; partitionId < partitionService.getPartitionCount(); partitionId++) {
    InternalPartition partition=partitionService.getPartition(partitionId);
    Address owner=partition.getOwnerOrNull();
    if (owner == null) {
      continue;
    }
    if (owner.equals(thisAddress)) {
      addOwnerPartitionStats(localMapStats,localMapOnDemandCalculatedStats,mapName,partitionId);
    }
 else {
      addReplicaPartitionStats(localMapOnDemandCalculatedStats,mapName,partitionId,partition,partitionService,backupCount,thisAddress);
    }
  }
  localMapOnDemandCalculatedStats.copyValuesTo(localMapStats);
  return localMapStats;
}",0.8878538158366177
47567,"/** 
 * Calculates and adds replica partition stats.
 */
private void addReplicaPartitionStats(LocalMapStatsImpl localMapStats,String mapName,int partitionId,InternalPartition partition,InternalPartitionService partitionService,int backupCount,Address thisAddress){
  long heapCost=0;
  long backupEntryCount=0;
  long backupEntryMemoryCost=0;
  for (int replica=1; replica <= backupCount; replica++) {
    final Address replicaAddress=getReplicaAddress(replica,partition,partitionService,backupCount);
    if (notGotReplicaAddress(replicaAddress,partitionService,backupCount)) {
      printWarning(partition,replica);
      continue;
    }
    if (gotReplicaAddress(replicaAddress,thisAddress)) {
      RecordStore recordStore=getRecordStoreOrNull(mapName,partitionId);
      if (hasRecords(recordStore)) {
        heapCost+=recordStore.getHeapCost();
        backupEntryCount+=recordStore.size();
        backupEntryMemoryCost+=getMemoryCost(recordStore);
      }
    }
  }
  localMapStats.incrementHeapCost(heapCost);
  localMapStats.incrementBackupEntryCount(backupEntryCount);
  localMapStats.incrementBackupEntryMemoryCost(backupEntryMemoryCost);
}","/** 
 * Calculates and adds replica partition stats.
 */
private void addReplicaPartitionStats(LocalMapOnDemandCalculatedStats localMapOnDemandCalculatedStats,String mapName,int partitionId,InternalPartition partition,InternalPartitionService partitionService,int backupCount,Address thisAddress){
  long heapCost=0;
  long backupEntryCount=0;
  long backupEntryMemoryCost=0;
  for (int replica=1; replica <= backupCount; replica++) {
    final Address replicaAddress=getReplicaAddress(replica,partition,partitionService,backupCount);
    if (notGotReplicaAddress(replicaAddress,partitionService,backupCount)) {
      printWarning(partition,replica);
      continue;
    }
    if (gotReplicaAddress(replicaAddress,thisAddress)) {
      RecordStore recordStore=getRecordStoreOrNull(mapName,partitionId);
      if (hasRecords(recordStore)) {
        heapCost+=recordStore.getHeapCost();
        backupEntryCount+=recordStore.size();
        backupEntryMemoryCost+=getMemoryCost(recordStore);
      }
    }
  }
  localMapOnDemandCalculatedStats.incrementHeapCost(heapCost);
  localMapOnDemandCalculatedStats.incrementBackupEntryCount(backupEntryCount);
  localMapOnDemandCalculatedStats.incrementBackupEntryMemoryCost(backupEntryMemoryCost);
}",0.9565580618212196
47568,"/** 
 * Adds near cache stats.
 */
private void addNearCacheStats(LocalMapStatsImpl localMapStats,MapContainer mapContainer){
  if (!mapContainer.getMapConfig().isNearCacheEnabled()) {
    return;
  }
  final NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
  final NearCacheStatsImpl nearCacheStats=nearCacheProvider.getNearCache(mapContainer.getName()).getNearCacheStats();
  final long nearCacheHeapCost=mapContainer.getNearCacheSizeEstimator().getSize();
  localMapStats.setNearCacheStats(nearCacheStats);
  localMapStats.incrementHeapCost(nearCacheHeapCost);
}","/** 
 * Adds near cache stats.
 */
private void addNearCacheStats(LocalMapStatsImpl localMapStats,LocalMapOnDemandCalculatedStats localMapOnDemandCalculatedStats,MapContainer mapContainer){
  if (!mapContainer.getMapConfig().isNearCacheEnabled()) {
    return;
  }
  final NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
  final NearCacheStatsImpl nearCacheStats=nearCacheProvider.getNearCache(mapContainer.getName()).getNearCacheStats();
  final long nearCacheHeapCost=mapContainer.getNearCacheSizeEstimator().getSize();
  localMapStats.setNearCacheStats(nearCacheStats);
  localMapOnDemandCalculatedStats.incrementHeapCost(nearCacheHeapCost);
}",0.9354330708661416
47569,"private NearCacheStatsImpl createNearCacheStats(){
  final NearCacheStatsImpl nearCacheStats=new NearCacheStatsImpl(this.nearCacheStats);
  long ownedEntryCount=0;
  long ownedEntryMemoryCost=0;
  for (  CacheRecord record : cache.values()) {
    ownedEntryCount++;
    ownedEntryMemoryCost+=record.getCost();
  }
  nearCacheStats.setOwnedEntryCount(ownedEntryCount);
  nearCacheStats.setOwnedEntryMemoryCost(ownedEntryMemoryCost);
  return nearCacheStats;
}","private NearCacheStatsImpl createNearCacheStats(){
  long ownedEntryCount=0;
  long ownedEntryMemoryCost=0;
  for (  CacheRecord record : cache.values()) {
    ownedEntryCount++;
    ownedEntryMemoryCost+=record.getCost();
  }
  nearCacheStats.setOwnedEntryCount(ownedEntryCount);
  nearCacheStats.setOwnedEntryMemoryCost(ownedEntryMemoryCost);
  return nearCacheStats;
}",0.8950542822677925
47570,"private boolean isConnectionHealthy(long elapsed){
  if (elapsed >= heartBeatInterval) {
    return connection.isHeartBeating();
  }
  return true;
}","private boolean isConnectionHealthy(long elapsed){
  if (elapsed >= heartBeatInterval) {
    return connection.isAlive() && connection.isHeartBeating();
  }
  return true;
}",0.9254658385093169
47571,"private void sendInternal(ClientCallFuture future,ClientConnection connection,int partitionId){
  connection.registerCallId(future);
  future.setConnection(connection);
  final SerializationService ss=client.getSerializationService();
  final ClientRequest request=future.getRequest();
  final Data data=ss.toData(request);
  Packet packet=new Packet(data,partitionId,ss.getPortableContext());
  if (!isAllowedToSendRequest(connection,request) || !connection.write(packet)) {
    final int callId=request.getCallId();
    connection.deRegisterCallId(callId);
    connection.deRegisterEventHandler(callId);
    future.notify(new TargetNotMemberException(""String_Node_Str"" + connection.getRemoteEndpoint()));
  }
}","private void sendInternal(ClientCallFuture future,ClientConnection connection,int partitionId){
  if (connection == null || !connection.isAlive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  connection.registerCallId(future);
  future.setConnection(connection);
  final SerializationService ss=client.getSerializationService();
  final ClientRequest request=future.getRequest();
  final Data data=ss.toData(request);
  Packet packet=new Packet(data,partitionId,ss.getPortableContext());
  if (!isAllowedToSendRequest(connection,request) || !connection.write(packet)) {
    final int callId=request.getCallId();
    connection.deRegisterCallId(callId);
    connection.deRegisterEventHandler(callId);
    future.notify(new TargetNotMemberException(""String_Node_Str"" + connection.getRemoteEndpoint()));
  }
}",0.9264801561483408
47572,"public boolean isHeartBeating(){
  return heartBeating;
}","public boolean isHeartBeating(){
  return live && heartBeating;
}",0.9344262295081968
47573,"private boolean isConnectionHealthy(long elapsed){
  if (elapsed >= heartBeatInterval) {
    return connection.isAlive() && connection.isHeartBeating();
  }
  return true;
}","private boolean isConnectionHealthy(long elapsed){
  if (elapsed >= heartBeatInterval) {
    return connection.isHeartBeating();
  }
  return true;
}",0.9254658385093169
47574,"private void sendInternal(ClientCallFuture future,ClientConnection connection,int partitionId){
  if (connection == null || !connection.isAlive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  connection.registerCallId(future);
  future.setConnection(connection);
  final SerializationService ss=client.getSerializationService();
  final ClientRequest request=future.getRequest();
  final Data data=ss.toData(request);
  Packet packet=new Packet(data,partitionId,ss.getPortableContext());
  if (!isAllowedToSendRequest(connection,request) || !connection.write(packet)) {
    final int callId=request.getCallId();
    connection.deRegisterCallId(callId);
    connection.deRegisterEventHandler(callId);
    future.notify(new TargetNotMemberException(""String_Node_Str"" + connection.getRemoteEndpoint()));
  }
}","private void sendInternal(ClientCallFuture future,ClientConnection connection,int partitionId){
  connection.registerCallId(future);
  future.setConnection(connection);
  final SerializationService ss=client.getSerializationService();
  final ClientRequest request=future.getRequest();
  final Data data=ss.toData(request);
  Packet packet=new Packet(data,partitionId,ss.getPortableContext());
  if (!isAllowedToSendRequest(connection,request) || !connection.write(packet)) {
    final int callId=request.getCallId();
    connection.deRegisterCallId(callId);
    connection.deRegisterEventHandler(callId);
    future.notify(new TargetNotMemberException(""String_Node_Str"" + connection.getRemoteEndpoint()));
  }
}",0.2016916070266753
47575,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.7796610169491526
47576,"/** 
 * Directly access to local Cache Statistics.
 * @return CacheStatistics instance or an empty statistics if not enabled
 */
CacheStatistics getLocalCacheStatistics();",CacheStatistics getLocalCacheStatistics();,0.3943661971830985
47577,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!getNodeEngine().isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!getNodeEngine().isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.7803700724054706
47578,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.7796610169491526
47579,"/** 
 * Directly access to local Cache Statistics.
 * @return CacheStatistics instance or an empty statistics if not enabled
 */
CacheStatistics getLocalCacheStatistics();",CacheStatistics getLocalCacheStatistics();,0.3943661971830985
47580,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!getNodeEngine().isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!getNodeEngine().isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.7803700724054706
47581,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.7796610169491526
47582,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!getNodeEngine().isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!getNodeEngine().isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.7803700724054706
47583,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!clientContext.isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.7796610169491526
47584,"private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!getNodeEngine().isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}","private void awaitLatch(CountDownLatch countDownLatch){
  try {
    long currentTimeoutMs=MAX_COMPLETION_LATCH_WAIT_TIME;
    while (currentTimeoutMs > 0 && !countDownLatch.await(COMPLETION_LATCH_WAIT_TIME_STEP,TimeUnit.MILLISECONDS)) {
      currentTimeoutMs-=COMPLETION_LATCH_WAIT_TIME_STEP;
      if (!getNodeEngine().isActive()) {
        throw new HazelcastInstanceNotActiveException();
      }
 else       if (isClosed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
 else       if (isDestroyed()) {
        throw new IllegalStateException(""String_Node_Str"" + nameWithPrefix + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    ExceptionUtil.sneakyThrow(e);
  }
}",0.7803700724054706
47585,"public ClientConnectionManagerImpl(HazelcastClientInstanceImpl client,AddressTranslator addressTranslator){
  this.client=client;
  this.addressTranslator=addressTranslator;
  final ClientConfig config=client.getClientConfig();
  final ClientNetworkConfig networkConfig=config.getNetworkConfig();
  final int connTimeout=networkConfig.getConnectionTimeout();
  connectionTimeout=connTimeout == 0 ? Integer.MAX_VALUE : connTimeout;
  final ClientProperties clientProperties=client.getClientProperties();
  int timeout=clientProperties.getHeartbeatTimeout().getInteger();
  this.heartBeatTimeout=timeout > 0 ? timeout : Integer.parseInt(PROP_HEARTBEAT_TIMEOUT_DEFAULT);
  int interval=clientProperties.getHeartbeatInterval().getInteger();
  heartBeatInterval=interval > 0 ? interval : Integer.parseInt(PROP_HEARTBEAT_INTERVAL_DEFAULT);
  executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
  inSelector=new InSelectorImpl(client.getThreadGroup(),""String_Node_Str"",Logger.getLogger(InSelectorImpl.class),OUT_OF_MEMORY_HANDLER);
  outSelector=new OutSelectorImpl(client.getThreadGroup(),""String_Node_Str"",Logger.getLogger(OutSelectorImpl.class),OUT_OF_MEMORY_HANDLER);
  socketOptions=networkConfig.getSocketOptions();
  ClientExtension clientExtension=client.getClientExtension();
  socketChannelWrapperFactory=clientExtension.getSocketChannelWrapperFactory();
  socketInterceptor=initSocketInterceptor(networkConfig.getSocketInterceptorConfig());
}","public ClientConnectionManagerImpl(HazelcastClientInstanceImpl client,AddressTranslator addressTranslator){
  this.client=client;
  this.addressTranslator=addressTranslator;
  final ClientConfig config=client.getClientConfig();
  final ClientNetworkConfig networkConfig=config.getNetworkConfig();
  final int connTimeout=networkConfig.getConnectionTimeout();
  connectionTimeout=connTimeout == 0 ? Integer.MAX_VALUE : connTimeout;
  final ClientProperties clientProperties=client.getClientProperties();
  int timeout=clientProperties.getHeartbeatTimeout().getInteger();
  this.heartBeatTimeout=timeout > 0 ? timeout : Integer.parseInt(PROP_HEARTBEAT_TIMEOUT_DEFAULT);
  int interval=clientProperties.getHeartbeatInterval().getInteger();
  heartBeatInterval=interval > 0 ? interval : Integer.parseInt(PROP_HEARTBEAT_INTERVAL_DEFAULT);
  executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
  inSelector=new InSelectorImpl(client.getThreadGroup(),""String_Node_Str"",Logger.getLogger(InSelectorImpl.class),OUT_OF_MEMORY_HANDLER);
  outSelector=new ClientOutSelectorImpl(client.getThreadGroup(),""String_Node_Str"",Logger.getLogger(ClientOutSelectorImpl.class),OUT_OF_MEMORY_HANDLER);
  socketOptions=networkConfig.getSocketOptions();
  ClientExtension clientExtension=client.getClientExtension();
  socketChannelWrapperFactory=clientExtension.getSocketChannelWrapperFactory();
  socketInterceptor=initSocketInterceptor(networkConfig.getSocketInterceptorConfig());
}",0.9959486833220796
47586,"public void enqueueSocketWritable(SocketWritable socketWritable){
  writeQueue.offer(socketWritable);
  if (informSelector.compareAndSet(true,false)) {
    ioSelector.addTask(this);
    ioSelector.wakeup();
  }
}","public void enqueueSocketWritable(SocketWritable socketWritable){
  writeQueue.offer(socketWritable);
  if (informSelector.compareAndSet(true,false)) {
    register();
  }
}",0.8831168831168831
47587,"@Test(timeout=60000) public void testOperationRedo() throws Exception {
  final HazelcastInstance hz1=Hazelcast.newHazelcastInstance();
  final HazelcastInstance hz2=Hazelcast.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.setRedoOperation(true);
  HazelcastInstance client=HazelcastClient.newHazelcastClient(clientConfig);
  final Thread thread=new Thread(){
    public void run(){
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      hz1.getLifecycleService().shutdown();
    }
  }
;
  final IMap map=client.getMap(""String_Node_Str"");
  thread.start();
  int expected=1000;
  for (int i=0; i < expected; i++) {
    map.put(i,""String_Node_Str"" + i);
  }
  thread.join();
  assertEquals(expected,map.size());
}","@Test(timeout=60000) public void testOperationRedo() throws Exception {
  final HazelcastInstance hz1=Hazelcast.newHazelcastInstance();
  Hazelcast.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setRedoOperation(true);
  HazelcastInstance client=HazelcastClient.newHazelcastClient(clientConfig);
  final Thread thread=new Thread(){
    public void run(){
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      hz1.getLifecycleService().shutdown();
    }
  }
;
  final IMap map=client.getMap(""String_Node_Str"");
  thread.start();
  int expected=1000;
  for (int i=0; i < expected; i++) {
    map.put(i,""String_Node_Str"" + i);
  }
  thread.join();
  assertEquals(expected,map.size());
}",0.9714285714285714
47588,"@Test public void testCompletionTest() throws InterruptedException {
  String cacheName=""String_Node_Str"";
  CacheManager cacheManager=cachingProvider1.getCacheManager();
  CacheConfig<Integer,String> config=new CacheConfig<Integer,String>();
  SimpleEntryListener<Integer,String> listener=new SimpleEntryListener<Integer,String>();
  MutableCacheEntryListenerConfiguration<Integer,String> listenerConfiguration=new MutableCacheEntryListenerConfiguration<Integer,String>(FactoryBuilder.factoryOf(listener),null,true,true);
  config.addCacheEntryListenerConfiguration(listenerConfiguration);
  Cache<Integer,String> cache=cacheManager.createCache(cacheName,config);
  assertNotNull(cache);
  Integer key1=1;
  String value1=""String_Node_Str"";
  cache.put(key1,value1);
  assertEquals(1,listener.created.get());
  Integer key2=2;
  String value2=""String_Node_Str"";
  cache.put(key2,value2);
  assertEquals(2,listener.created.get());
  Set<Integer> keys=new HashSet<Integer>();
  keys.add(key1);
  keys.add(key2);
  cache.removeAll(keys);
  assertEquals(2,listener.removed.get());
}","@Test public void testCompletionTest() throws InterruptedException {
  String cacheName=""String_Node_Str"";
  CacheManager cacheManager=cachingProvider1.getCacheManager();
  CacheConfig<Integer,String> config=new CacheConfig<Integer,String>();
  final SimpleEntryListener<Integer,String> listener=new SimpleEntryListener<Integer,String>();
  MutableCacheEntryListenerConfiguration<Integer,String> listenerConfiguration=new MutableCacheEntryListenerConfiguration<Integer,String>(FactoryBuilder.factoryOf(listener),null,true,true);
  config.addCacheEntryListenerConfiguration(listenerConfiguration);
  Cache<Integer,String> cache=cacheManager.createCache(cacheName,config);
  assertNotNull(cache);
  Integer key1=1;
  String value1=""String_Node_Str"";
  cache.put(key1,value1);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(1,listener.created.get());
    }
  }
);
  Integer key2=2;
  String value2=""String_Node_Str"";
  cache.put(key2,value2);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(2,listener.created.get());
    }
  }
);
  Set<Integer> keys=new HashSet<Integer>();
  keys.add(key1);
  keys.add(key2);
  cache.removeAll(keys);
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertEquals(2,listener.removed.get());
    }
  }
);
}",0.8663187474909675
47589,"@Override public void onCreated(Iterable<CacheEntryEvent<? extends K,? extends V>> cacheEntryEvents) throws CacheEntryListenerException {
  try {
    Thread.sleep(3000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  for (  CacheEntryEvent<? extends K,? extends V> cacheEntryEvent : cacheEntryEvents) {
    created.incrementAndGet();
  }
}","@Override public void onCreated(Iterable<CacheEntryEvent<? extends K,? extends V>> cacheEntryEvents) throws CacheEntryListenerException {
  for (  CacheEntryEvent<? extends K,? extends V> cacheEntryEvent : cacheEntryEvents) {
    created.incrementAndGet();
  }
}",0.5056
47590,"@Override public JsonObject toJson(){
  if (lastAccessNanos < 0) {
    return null;
  }
  JsonObject root=new JsonObject();
  root.add(""String_Node_Str"",id);
  root.add(""String_Node_Str"",startedAt);
  root.add(""String_Node_Str"",durationNanos);
  return root;
}","@Override public JsonObject toJson(){
}",0.2608695652173913
47591,"@Override public String toString(){
  if (lastAccessNanos < 0) {
    return null;
  }
  return ""String_Node_Str"" + ""String_Node_Str"" + id + ""String_Node_Str""+ startedAt+ ""String_Node_Str""+ durationNanos+ '}';
}","@Override public String toString(){
}",0.2995951417004048
47592,"Invocation getOrCreateInvocation(int operationHashCode,long lastDurationNanos,long nowNanos,long nowMillis){
  totalInvocations++;
  Invocation invocation=ConcurrencyUtil.getOrPutIfAbsent(invocations,operationHashCode,INVOCATION_CONSTRUCTOR_FUNCTION);
  invocation.id=operationHashCode;
  invocation.startedAt=nowMillis - invocation.durationNanos;
  invocation.durationNanos=TimeUnit.NANOSECONDS.toMillis(lastDurationNanos);
  invocation.lastAccessNanos=nowNanos;
  return invocation;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") Invocation getOrCreateInvocation(int operationHashCode,long lastDurationNanos,long nowNanos,long nowMillis){
  totalInvocations++;
  Invocation invocation=ConcurrencyUtil.getOrPutIfAbsent(invocations,operationHashCode,INVOCATION_CONSTRUCTOR_FUNCTION);
  invocation.id=operationHashCode;
  invocation.startedAt=nowMillis - invocation.durationNanos;
  invocation.durationNanos=TimeUnit.NANOSECONDS.toMillis(lastDurationNanos);
  invocation.lastAccessNanos=nowNanos;
  return invocation;
}",0.9008341056533828
47593,"public void entryAdded(EntryEvent<K,V> event){
  addedCount++;
}","public void entryAdded(EntryEvent<K,V> event){
  addedCount.incrementAndGet();
}",0.8611111111111112
47594,"@Test public void testListener() throws InterruptedException {
  String mapName=""String_Node_Str"";
  long key=1L;
  String value=""String_Node_Str"";
  String value2=""String_Node_Str"";
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  HazelcastInstance instance1=factory.newHazelcastInstance();
  HazelcastInstance instance2=factory.newHazelcastInstance();
  CountingEntryListener<Object,Object> listener=new CountingEntryListener<Object,Object>();
  MultiMap<Object,Object> map=instance1.getMultiMap(mapName);
  map.addEntryListener(listener,true);
  TransactionContext ctx1=instance2.newTransactionContext();
  ctx1.beginTransaction();
  ctx1.getMultiMap(mapName).put(key,value);
  ctx1.commitTransaction();
  TransactionContext ctx2=instance2.newTransactionContext();
  ctx2.beginTransaction();
  ctx2.getMultiMap(mapName).remove(key,value);
  ctx2.commitTransaction();
  TransactionContext ctx3=instance2.newTransactionContext();
  ctx3.beginTransaction();
  ctx3.getMultiMap(mapName).put(key,value2);
  ctx3.commitTransaction();
  TransactionContext ctx4=instance1.newTransactionContext();
  ctx4.beginTransaction();
  ctx4.getMultiMap(mapName).remove(key,value2);
  ctx4.commitTransaction();
  Thread.sleep(100);
  assertEquals(2,listener.addedCount);
  assertEquals(2,listener.removedCount);
}","@Test public void testListener() throws InterruptedException {
  String mapName=""String_Node_Str"";
  long key=1L;
  String value=""String_Node_Str"";
  String value2=""String_Node_Str"";
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  HazelcastInstance instance1=factory.newHazelcastInstance();
  HazelcastInstance instance2=factory.newHazelcastInstance();
  CountingEntryListener<Object,Object> listener=new CountingEntryListener<Object,Object>();
  MultiMap<Object,Object> map=instance1.getMultiMap(mapName);
  map.addEntryListener(listener,true);
  TransactionContext ctx1=instance2.newTransactionContext();
  ctx1.beginTransaction();
  ctx1.getMultiMap(mapName).put(key,value);
  ctx1.commitTransaction();
  TransactionContext ctx2=instance2.newTransactionContext();
  ctx2.beginTransaction();
  ctx2.getMultiMap(mapName).remove(key,value);
  ctx2.commitTransaction();
  TransactionContext ctx3=instance2.newTransactionContext();
  ctx3.beginTransaction();
  ctx3.getMultiMap(mapName).put(key,value2);
  ctx3.commitTransaction();
  TransactionContext ctx4=instance1.newTransactionContext();
  ctx4.beginTransaction();
  ctx4.getMultiMap(mapName).remove(key,value2);
  ctx4.commitTransaction();
  Thread.sleep(100);
  assertEquals(2,listener.getAddedCount());
  assertEquals(2,listener.getRemovedCount());
}",0.994756554307116
47595,"public void entryRemoved(EntryEvent<K,V> event){
  removedCount++;
}","public void entryRemoved(EntryEvent<K,V> event){
  removedCount.incrementAndGet();
}",0.868421052631579
47596,"@Override public OperationHandler[] getPartitionOperationHandlers(){
  return partitionOperationHandlers;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) @Override public OperationHandler[] getPartitionOperationHandlers(){
  return partitionOperationHandlers;
}",0.7508771929824561
47597,"@Override public OperationHandler[] getGenericOperationHandlers(){
  return genericOperationHandlers;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) @Override public OperationHandler[] getGenericOperationHandlers(){
  return genericOperationHandlers;
}",0.7436823104693141
47598,"public PartitionOperationThread(String name,int threadId,ScheduleQueue scheduleQueue,ILogger logger,HazelcastThreadGroup threadGroup,NodeExtension nodeExtension,OperationHandler[] partitionOperationHandlers){
  super(name,threadId,scheduleQueue,logger,threadGroup,nodeExtension);
  this.partitionOperationHandlers=partitionOperationHandlers;
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) public PartitionOperationThread(String name,int threadId,ScheduleQueue scheduleQueue,ILogger logger,HazelcastThreadGroup threadGroup,NodeExtension nodeExtension,OperationHandler[] partitionOperationHandlers){
  super(name,threadId,scheduleQueue,logger,threadGroup,nodeExtension);
  this.partitionOperationHandlers=partitionOperationHandlers;
}",0.906208718626156
47599,"@Override public void readData(ObjectDataInput in) throws IOException {
  name=in.readUTF();
  evictionPolicy=in.readUTF();
  timeToLiveSeconds=in.readInt();
  maxSize=in.readInt();
  maxSize=in.readInt();
  invalidateOnChange=in.readBoolean();
  cacheLocalEntries=in.readBoolean();
  final int inMemoryFormatInt=in.readInt();
  inMemoryFormat=InMemoryFormat.values()[inMemoryFormatInt];
  final int localUpdatePolicyInt=in.readInt();
  localUpdatePolicy=LocalUpdatePolicy.values()[localUpdatePolicyInt];
}","@Override public void readData(ObjectDataInput in) throws IOException {
  name=in.readUTF();
  evictionPolicy=in.readUTF();
  timeToLiveSeconds=in.readInt();
  maxSize=in.readInt();
  invalidateOnChange=in.readBoolean();
  cacheLocalEntries=in.readBoolean();
  final int inMemoryFormatInt=in.readInt();
  inMemoryFormat=InMemoryFormat.values()[inMemoryFormatInt];
  final int localUpdatePolicyInt=in.readInt();
  localUpdatePolicy=LocalUpdatePolicy.values()[localUpdatePolicyInt];
}",0.9757085020242916
47600,"@Override public void readData(ObjectDataInput in) throws IOException {
  name=in.readUTF();
  evictionPolicy=in.readUTF();
  timeToLiveSeconds=in.readInt();
  maxSize=in.readInt();
  maxSize=in.readInt();
  invalidateOnChange=in.readBoolean();
  cacheLocalEntries=in.readBoolean();
  final int inMemoryFormatInt=in.readInt();
  inMemoryFormat=InMemoryFormat.values()[inMemoryFormatInt];
  final int localUpdatePolicyInt=in.readInt();
  localUpdatePolicy=LocalUpdatePolicy.values()[localUpdatePolicyInt];
}","@Override public void readData(ObjectDataInput in) throws IOException {
  name=in.readUTF();
  evictionPolicy=in.readUTF();
  timeToLiveSeconds=in.readInt();
  maxSize=in.readInt();
  invalidateOnChange=in.readBoolean();
  cacheLocalEntries=in.readBoolean();
  final int inMemoryFormatInt=in.readInt();
  inMemoryFormat=InMemoryFormat.values()[inMemoryFormatInt];
  final int localUpdatePolicyInt=in.readInt();
  localUpdatePolicy=LocalUpdatePolicy.values()[localUpdatePolicyInt];
}",0.9757085020242916
47601,"public void shutdown(){
  internalExecutor.shutdown();
  try {
    boolean success=internalExecutor.awaitTermination(terminateTimeoutSeconds,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + terminateTimeoutSeconds + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
  scheduledExecutor.shutdownNow();
  executor.shutdown();
  try {
    boolean success=executor.awaitTermination(terminateTimeoutSeconds,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + terminateTimeoutSeconds + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
}","public void shutdown(){
  internalExecutor.shutdown();
  try {
    boolean success=internalExecutor.awaitTermination(TERMINATE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + TERMINATE_TIMEOUT_SECONDS + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
  scheduledExecutor.shutdownNow();
  executor.shutdown();
  try {
    boolean success=executor.awaitTermination(TERMINATE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + TERMINATE_TIMEOUT_SECONDS + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
}",0.8659217877094972
47602,"public void shutdown(){
  internalExecutor.shutdown();
  try {
    boolean success=internalExecutor.awaitTermination(terminateTimeoutSeconds,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + terminateTimeoutSeconds + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
  scheduledExecutor.shutdownNow();
  executor.shutdown();
  try {
    boolean success=executor.awaitTermination(terminateTimeoutSeconds,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + terminateTimeoutSeconds + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
}","public void shutdown(){
  internalExecutor.shutdown();
  try {
    boolean success=internalExecutor.awaitTermination(TERMINATE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + TERMINATE_TIMEOUT_SECONDS + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
  scheduledExecutor.shutdownNow();
  executor.shutdown();
  try {
    boolean success=executor.awaitTermination(TERMINATE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + TERMINATE_TIMEOUT_SECONDS + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
}",0.8659217877094972
47603,"public String createFormattedCredential(){
  return config.getAccessKey() + ""String_Node_Str"" + timestamp.substring(0,lastIndex)+ ""String_Node_Str""+ config.getRegion()+ ""String_Node_Str""+ ""String_Node_Str"";
}","public String createFormattedCredential(){
  return config.getAccessKey() + ""String_Node_Str"" + timestamp.substring(0,LAST_INDEX)+ ""String_Node_Str""+ config.getRegion()+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.9592326139088728
47604,"CacheOperationProvider getOperationProvider(){
  ICacheService service=getService();
  CacheConfig cacheConfig=service.getCacheConfig(name);
  return service.getCacheOperationProvider(name,cacheConfig.getInMemoryFormat());
}","CacheOperationProvider getOperationProvider(){
  ICacheService service=getService();
  CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new RetryableHazelcastException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  return service.getCacheOperationProvider(name,cacheConfig.getInMemoryFormat());
}",0.7859649122807018
47605,"CacheOperationProvider getOperationProvider(){
  ICacheService service=getService();
  CacheConfig cacheConfig=service.getCacheConfig(name);
  return service.getCacheOperationProvider(name,cacheConfig.getInMemoryFormat());
}","CacheOperationProvider getOperationProvider(){
  ICacheService service=getService();
  CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    throw new RetryableHazelcastException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  return service.getCacheOperationProvider(name,cacheConfig.getInMemoryFormat());
}",0.7859649122807018
47606,"public void run(){
  try {
    lastCleanup=Clock.currentTimeMillis();
    for (    Map.Entry<K,CacheRecord<K>> entry : cache.entrySet()) {
      if (entry.getValue().expired()) {
        cache.remove(entry.getKey());
      }
    }
  }
  finally {
    canCleanUp.set(true);
  }
}","public void run(){
  try {
    lastCleanup=Clock.currentTimeMillis();
    for (    Map.Entry<K,NearCacheRecord> entry : cache.entrySet()) {
      if (entry.getValue().isExpired(maxIdleMillis,timeToLiveMillis)) {
        cache.remove(entry.getKey());
      }
    }
  }
  finally {
    canCleanUp.set(true);
  }
}",0.3837011884550085
47607,"public ClientHeapNearCache(String mapName,ClientContext context,NearCacheConfig nearCacheConfig){
  this.mapName=mapName;
  this.context=context;
  maxSize=nearCacheConfig.getMaxSize();
  maxIdleMillis=nearCacheConfig.getMaxIdleSeconds() * SEC_TO_MILLISEC;
  inMemoryFormat=nearCacheConfig.getInMemoryFormat();
  if (inMemoryFormat != InMemoryFormat.BINARY && inMemoryFormat != InMemoryFormat.OBJECT) {
    throw new IllegalArgumentException(""String_Node_Str"" + inMemoryFormat);
  }
  timeToLiveMillis=nearCacheConfig.getTimeToLiveSeconds() * SEC_TO_MILLISEC;
  invalidateOnChange=nearCacheConfig.isInvalidateOnChange();
  evictionPolicy=EvictionPolicy.valueOf(nearCacheConfig.getEvictionPolicy());
  cache=new ConcurrentHashMap<K,CacheRecord<K>>();
  canCleanUp=new AtomicBoolean(true);
  canEvict=new AtomicBoolean(true);
  lastCleanup=Clock.currentTimeMillis();
  stats=new NearCacheStatsImpl();
}","public ClientHeapNearCache(String mapName,ClientContext context,NearCacheConfig nearCacheConfig){
  this.mapName=mapName;
  this.context=context;
  maxSize=nearCacheConfig.getMaxSize();
  maxIdleMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getMaxIdleSeconds());
  inMemoryFormat=nearCacheConfig.getInMemoryFormat();
  if (inMemoryFormat != InMemoryFormat.BINARY && inMemoryFormat != InMemoryFormat.OBJECT) {
    throw new IllegalArgumentException(""String_Node_Str"" + inMemoryFormat);
  }
  timeToLiveMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getTimeToLiveSeconds());
  invalidateOnChange=nearCacheConfig.isInvalidateOnChange();
  evictionPolicy=EvictionPolicy.valueOf(nearCacheConfig.getEvictionPolicy());
  selectedComparator=NearCacheRecord.getComparator(evictionPolicy);
  cache=new ConcurrentHashMap<K,NearCacheRecord>();
  canCleanUp=new AtomicBoolean(true);
  canEvict=new AtomicBoolean(true);
  lastCleanup=Clock.currentTimeMillis();
  stats=new NearCacheStatsImpl();
}",0.9125596184419714
47608,"public void put(K key,Object object){
  fireTtlCleanup();
  if (evictionPolicy == EvictionPolicy.NONE && cache.size() >= maxSize) {
    return;
  }
  if (evictionPolicy != EvictionPolicy.NONE && cache.size() >= maxSize) {
    fireEvictCache();
  }
  Object value;
  if (object == null) {
    value=NULL_OBJECT;
  }
 else {
    SerializationService serializationService=context.getSerializationService();
    if (inMemoryFormat == InMemoryFormat.BINARY) {
      value=serializationService.toData(object);
    }
 else     if (inMemoryFormat == InMemoryFormat.OBJECT) {
      value=serializationService.toObject(object);
    }
 else {
      throw new IllegalArgumentException();
    }
  }
  cache.put(key,new CacheRecord<K>(key,value));
}","public void put(K key,Object object){
  fireTtlCleanup();
  if (evictionPolicy == EvictionPolicy.NONE && cache.size() >= maxSize) {
    return;
  }
  if (evictionPolicy != EvictionPolicy.NONE && cache.size() >= maxSize) {
    fireEvictCache();
  }
  Object value;
  if (object == null) {
    value=NULL_OBJECT;
  }
 else {
    SerializationService serializationService=context.getSerializationService();
    if (inMemoryFormat == InMemoryFormat.BINARY) {
      value=serializationService.toData(object);
    }
 else     if (inMemoryFormat == InMemoryFormat.OBJECT) {
      value=serializationService.toObject(object);
    }
 else {
      throw new IllegalArgumentException();
    }
  }
  cache.put(key,new NearCacheRecord(key,value));
}",0.9952413324269204
47609,"private void fireEvictCache(){
  if (canEvict.compareAndSet(true,false)) {
    try {
      context.getExecutionService().execute(new Runnable(){
        public void run(){
          try {
            TreeSet<CacheRecord<K>> records=new TreeSet<CacheRecord<K>>(comparator);
            records.addAll(cache.values());
            int evictSize=cache.size() * EVICTION_PERCENTAGE / HUNDRED_PERCENTAGE;
            int i=0;
            for (            CacheRecord<K> record : records) {
              cache.remove(record.key);
              if (++i > evictSize) {
                break;
              }
            }
          }
  finally {
            canEvict.set(true);
          }
        }
      }
);
    }
 catch (    RejectedExecutionException e) {
      canEvict.set(true);
    }
catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}","private void fireEvictCache(){
  if (canEvict.compareAndSet(true,false)) {
    try {
      context.getExecutionService().execute(new Runnable(){
        public void run(){
          try {
            TreeSet<NearCacheRecord> records=new TreeSet<NearCacheRecord>(selectedComparator);
            records.addAll(cache.values());
            int evictSize=cache.size() * EVICTION_PERCENTAGE / HUNDRED_PERCENTAGE;
            int i=0;
            for (            NearCacheRecord record : records) {
              cache.remove(record.getKey());
              if (++i > evictSize) {
                break;
              }
            }
          }
  finally {
            canEvict.set(true);
          }
        }
      }
);
    }
 catch (    RejectedExecutionException e) {
      canEvict.set(true);
    }
catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}",0.9148446490218642
47610,"public Object get(K key){
  fireTtlCleanup();
  CacheRecord<K> record=cache.get(key);
  if (record != null) {
    record.access();
    if (record.expired()) {
      cache.remove(key);
      stats.incrementMisses();
      return null;
    }
    if (record.value.equals(NULL_OBJECT)) {
      stats.incrementMisses();
      return NULL_OBJECT;
    }
    stats.incrementHits();
    return inMemoryFormat.equals(InMemoryFormat.BINARY) ? context.getSerializationService().toObject(record.value) : record.value;
  }
 else {
    stats.incrementMisses();
    return null;
  }
}","public Object get(K key){
  fireTtlCleanup();
  NearCacheRecord record=cache.get(key);
  if (record != null) {
    record.access();
    if (record.isExpired(maxIdleMillis,timeToLiveMillis)) {
      cache.remove(key);
      stats.incrementMisses();
      return null;
    }
    if (record.getValue().equals(NULL_OBJECT)) {
      stats.incrementMisses();
      return NULL_OBJECT;
    }
    stats.incrementHits();
    return inMemoryFormat.equals(InMemoryFormat.BINARY) ? context.getSerializationService().toObject(record.getValue()) : record.getValue();
  }
 else {
    stats.incrementMisses();
    return null;
  }
}",0.9273648648648648
47611,"private void fireTtlCleanup(){
  if (Clock.currentTimeMillis() < (lastCleanup + TTL_CLEANUP_INTERVAL_MILLS)) {
    return;
  }
  if (canCleanUp.compareAndSet(true,false)) {
    try {
      context.getExecutionService().execute(new Runnable(){
        public void run(){
          try {
            lastCleanup=Clock.currentTimeMillis();
            for (            Map.Entry<K,CacheRecord<K>> entry : cache.entrySet()) {
              if (entry.getValue().expired()) {
                cache.remove(entry.getKey());
              }
            }
          }
  finally {
            canCleanUp.set(true);
          }
        }
      }
);
    }
 catch (    RejectedExecutionException e) {
      canCleanUp.set(true);
    }
catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}","private void fireTtlCleanup(){
  if (Clock.currentTimeMillis() < (lastCleanup + TTL_CLEANUP_INTERVAL_MILLS)) {
    return;
  }
  if (canCleanUp.compareAndSet(true,false)) {
    try {
      context.getExecutionService().execute(new Runnable(){
        public void run(){
          try {
            lastCleanup=Clock.currentTimeMillis();
            for (            Map.Entry<K,NearCacheRecord> entry : cache.entrySet()) {
              if (entry.getValue().isExpired(maxIdleMillis,timeToLiveMillis)) {
                cache.remove(entry.getKey());
              }
            }
          }
  finally {
            canCleanUp.set(true);
          }
        }
      }
);
    }
 catch (    RejectedExecutionException e) {
      canCleanUp.set(true);
    }
catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}",0.9747692307692308
47612,"public NearCacheStatsImpl getNearCacheStats(){
  long ownedEntryCount=0;
  long ownedEntryMemory=0;
  for (  CacheRecord record : cache.values()) {
    ownedEntryCount++;
    ownedEntryMemory+=record.getCost();
  }
  stats.setOwnedEntryCount(ownedEntryCount);
  stats.setOwnedEntryMemoryCost(ownedEntryMemory);
  return stats;
}","public NearCacheStatsImpl getNearCacheStats(){
  long ownedEntryCount=0;
  long ownedEntryMemory=0;
  for (  NearCacheRecord record : cache.values()) {
    ownedEntryCount++;
    ownedEntryMemory+=record.getCost();
  }
  stats.setOwnedEntryCount(ownedEntryCount);
  stats.setOwnedEntryMemoryCost(ownedEntryMemory);
  return stats;
}",0.993939393939394
47613,"@Override public void run() throws Exception {
  final LocalMapStats localMapStats=clientMap.getLocalMapStats();
  NearCacheStats stats=localMapStats.getNearCacheStats();
  assertEquals(1,stats.getOwnedEntryCount());
}","@Override public void run() throws Exception {
  assertTrue(MAX_CACHE_SIZE > stats.getOwnedEntryCount());
}",0.5292307692307693
47614,"@BeforeClass public static void setup() throws Exception {
  h1=Hazelcast.newHazelcastInstance();
  h2=Hazelcast.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  NearCacheConfig basicConfigNoInvalidation=new NearCacheConfig();
  basicConfigNoInvalidation.setInMemoryFormat(InMemoryFormat.OBJECT);
  basicConfigNoInvalidation.setName(NEAR_CACHE_WITH_NO_INVALIDATION + ""String_Node_Str"");
  basicConfigNoInvalidation.setInvalidateOnChange(false);
  clientConfig.addNearCacheConfig(basicConfigNoInvalidation);
  NearCacheConfig maxSizeConfig=new NearCacheConfig();
  maxSizeConfig.setMaxSize(MAX_CACHE_SIZE);
  maxSizeConfig.setInvalidateOnChange(false);
  maxSizeConfig.setName(NEAR_CACHE_WITH_MAX_SIZE + ""String_Node_Str"");
  clientConfig.addNearCacheConfig(maxSizeConfig);
  NearCacheConfig ttlConfig=new NearCacheConfig();
  ttlConfig.setName(NEAR_CACHE_WITH_TTL + ""String_Node_Str"");
  ttlConfig.setInvalidateOnChange(false);
  ttlConfig.setTimeToLiveSeconds(MAX_TTL_SECONDS);
  clientConfig.addNearCacheConfig(ttlConfig);
  NearCacheConfig idleConfig=new NearCacheConfig();
  idleConfig.setName(NEAR_CACHE_WITH_IDLE + ""String_Node_Str"");
  idleConfig.setInvalidateOnChange(false);
  idleConfig.setMaxIdleSeconds(MAX_IDLE_SECONDS);
  clientConfig.addNearCacheConfig(idleConfig);
  NearCacheConfig longIdleConfig=new NearCacheConfig();
  idleConfig.setName(NEAR_CACHE_WITH_LONG_MAX_IDLE_TIME + ""String_Node_Str"");
  idleConfig.setInvalidateOnChange(true);
  idleConfig.setMaxIdleSeconds(LONG_MAX_IDLE_SECONDS);
  clientConfig.addNearCacheConfig(longIdleConfig);
  NearCacheConfig invalidateConfig=new NearCacheConfig();
  invalidateConfig.setName(NEAR_CACHE_WITH_INVALIDATION + ""String_Node_Str"");
  invalidateConfig.setInvalidateOnChange(true);
  clientConfig.addNearCacheConfig(invalidateConfig);
  client=HazelcastClient.newHazelcastClient(clientConfig);
}","@BeforeClass public static void setup() throws Exception {
  h1=Hazelcast.newHazelcastInstance();
  h2=Hazelcast.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  NearCacheConfig basicConfigNoInvalidation=new NearCacheConfig();
  basicConfigNoInvalidation.setInMemoryFormat(InMemoryFormat.OBJECT);
  basicConfigNoInvalidation.setName(NEAR_CACHE_WITH_NO_INVALIDATION + ""String_Node_Str"");
  basicConfigNoInvalidation.setInvalidateOnChange(false);
  clientConfig.addNearCacheConfig(basicConfigNoInvalidation);
  NearCacheConfig maxSizeConfig=new NearCacheConfig();
  maxSizeConfig.setMaxSize(MAX_CACHE_SIZE);
  maxSizeConfig.setInvalidateOnChange(false);
  maxSizeConfig.setName(NEAR_CACHE_WITH_MAX_SIZE + ""String_Node_Str"");
  clientConfig.addNearCacheConfig(maxSizeConfig);
  NearCacheConfig ttlConfig=new NearCacheConfig();
  ttlConfig.setName(NEAR_CACHE_WITH_TTL + ""String_Node_Str"");
  ttlConfig.setInvalidateOnChange(false);
  ttlConfig.setTimeToLiveSeconds(MAX_TTL_SECONDS);
  clientConfig.addNearCacheConfig(ttlConfig);
  NearCacheConfig idleConfig=new NearCacheConfig();
  idleConfig.setName(NEAR_CACHE_WITH_IDLE + ""String_Node_Str"");
  idleConfig.setInvalidateOnChange(false);
  idleConfig.setMaxIdleSeconds(MAX_IDLE_SECONDS);
  clientConfig.addNearCacheConfig(idleConfig);
  NearCacheConfig longIdleConfig=new NearCacheConfig();
  idleConfig.setName(NEAR_CACHE_WITH_LONG_MAX_IDLE_TIME + ""String_Node_Str"");
  idleConfig.setInvalidateOnChange(true);
  idleConfig.setMaxIdleSeconds(LONG_MAX_IDLE_SECONDS);
  clientConfig.addNearCacheConfig(longIdleConfig);
  NearCacheConfig invalidateConfig=new NearCacheConfig();
  invalidateConfig.setName(NEAR_CACHE_WITH_INVALIDATION + ""String_Node_Str"");
  invalidateConfig.setInvalidateOnChange(true);
  clientConfig.addNearCacheConfig(invalidateConfig);
  NearCacheConfig lfuMaxSizeConfig=new NearCacheConfig();
  lfuMaxSizeConfig.setName(NEAR_CACHE_LFU_WITH_MAX_SIZE + ""String_Node_Str"");
  lfuMaxSizeConfig.setInvalidateOnChange(true);
  lfuMaxSizeConfig.setMaxSize(MAX_CACHE_SIZE);
  lfuMaxSizeConfig.setEvictionPolicy(""String_Node_Str"");
  clientConfig.addNearCacheConfig(lfuMaxSizeConfig);
  client=HazelcastClient.newHazelcastClient(clientConfig);
}",0.9170518122111408
47615,"public int compare(CacheRecord<K> o1,CacheRecord<K> o2){
  if (EvictionPolicy.LRU.equals(evictionPolicy)) {
    return ((Long)o1.lastAccessTime).compareTo((o2.lastAccessTime));
  }
 else   if (EvictionPolicy.LFU.equals(evictionPolicy)) {
    return ((Long)o1.hit.get()).compareTo((o2.hit.get()));
  }
  return 0;
}","public int compare(CacheRecord<K> o1,CacheRecord<K> o2){
  return QuickMath.compareIntegers(o1.key.hashCode(),o2.key.hashCode());
}",0.4
47616,"public ClientHeapNearCache(String mapName,ClientContext context,NearCacheConfig nearCacheConfig){
  this.mapName=mapName;
  this.context=context;
  maxSize=nearCacheConfig.getMaxSize();
  maxIdleMillis=nearCacheConfig.getMaxIdleSeconds() * SEC_TO_MILLISEC;
  inMemoryFormat=nearCacheConfig.getInMemoryFormat();
  if (inMemoryFormat != InMemoryFormat.BINARY && inMemoryFormat != InMemoryFormat.OBJECT) {
    throw new IllegalArgumentException(""String_Node_Str"" + inMemoryFormat);
  }
  timeToLiveMillis=nearCacheConfig.getTimeToLiveSeconds() * SEC_TO_MILLISEC;
  invalidateOnChange=nearCacheConfig.isInvalidateOnChange();
  evictionPolicy=EvictionPolicy.valueOf(nearCacheConfig.getEvictionPolicy());
  cache=new ConcurrentHashMap<K,CacheRecord<K>>();
  canCleanUp=new AtomicBoolean(true);
  canEvict=new AtomicBoolean(true);
  lastCleanup=Clock.currentTimeMillis();
  stats=new NearCacheStatsImpl();
}","public ClientHeapNearCache(String mapName,ClientContext context,NearCacheConfig nearCacheConfig){
  this.mapName=mapName;
  this.context=context;
  maxSize=nearCacheConfig.getMaxSize();
  maxIdleMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getMaxIdleSeconds());
  inMemoryFormat=nearCacheConfig.getInMemoryFormat();
  if (inMemoryFormat != InMemoryFormat.BINARY && inMemoryFormat != InMemoryFormat.OBJECT) {
    throw new IllegalArgumentException(""String_Node_Str"" + inMemoryFormat);
  }
  timeToLiveMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getTimeToLiveSeconds());
  invalidateOnChange=nearCacheConfig.isInvalidateOnChange();
  evictionPolicy=EvictionPolicy.valueOf(nearCacheConfig.getEvictionPolicy());
  if (EvictionPolicy.LRU.equals(evictionPolicy)) {
    selectedComparator=lruComparator;
  }
 else   if (EvictionPolicy.LFU.equals(evictionPolicy)) {
    selectedComparator=lfuComparator;
  }
 else {
    selectedComparator=defaultComparator;
  }
  cache=new ConcurrentHashMap<K,CacheRecord<K>>();
  canCleanUp=new AtomicBoolean(true);
  canEvict=new AtomicBoolean(true);
  lastCleanup=Clock.currentTimeMillis();
  stats=new NearCacheStatsImpl();
}",0.6782945736434108
47617,"private void fireEvictCache(){
  if (canEvict.compareAndSet(true,false)) {
    try {
      context.getExecutionService().execute(new Runnable(){
        public void run(){
          try {
            TreeSet<CacheRecord<K>> records=new TreeSet<CacheRecord<K>>(comparator);
            records.addAll(cache.values());
            int evictSize=cache.size() * EVICTION_PERCENTAGE / HUNDRED_PERCENTAGE;
            int i=0;
            for (            CacheRecord<K> record : records) {
              cache.remove(record.key);
              if (++i > evictSize) {
                break;
              }
            }
          }
  finally {
            canEvict.set(true);
          }
        }
      }
);
    }
 catch (    RejectedExecutionException e) {
      canEvict.set(true);
    }
catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}","private void fireEvictCache(){
  if (canEvict.compareAndSet(true,false)) {
    try {
      context.getExecutionService().execute(new Runnable(){
        public void run(){
          try {
            TreeSet<CacheRecord<K>> records=new TreeSet<CacheRecord<K>>(selectedComparator);
            records.addAll(cache.values());
            int evictSize=cache.size() * EVICTION_PERCENTAGE / HUNDRED_PERCENTAGE;
            int i=0;
            for (            CacheRecord<K> record : records) {
              cache.remove(record.key);
              if (++i > evictSize) {
                break;
              }
            }
          }
  finally {
            canEvict.set(true);
          }
        }
      }
);
    }
 catch (    RejectedExecutionException e) {
      canEvict.set(true);
    }
catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}",0.9942196531791908
47618,"@Override public void run() throws Exception {
  final LocalMapStats localMapStats=clientMap.getLocalMapStats();
  NearCacheStats stats=localMapStats.getNearCacheStats();
  assertEquals(1,stats.getOwnedEntryCount());
}","@Override public void run() throws Exception {
  assertTrue(MAX_CACHE_SIZE > stats.getOwnedEntryCount());
}",0.5292307692307693
47619,"@BeforeClass public static void setup() throws Exception {
  h1=Hazelcast.newHazelcastInstance();
  h2=Hazelcast.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  NearCacheConfig basicConfigNoInvalidation=new NearCacheConfig();
  basicConfigNoInvalidation.setInMemoryFormat(InMemoryFormat.OBJECT);
  basicConfigNoInvalidation.setName(NEAR_CACHE_WITH_NO_INVALIDATION + ""String_Node_Str"");
  basicConfigNoInvalidation.setInvalidateOnChange(false);
  clientConfig.addNearCacheConfig(basicConfigNoInvalidation);
  NearCacheConfig maxSizeConfig=new NearCacheConfig();
  maxSizeConfig.setMaxSize(MAX_CACHE_SIZE);
  maxSizeConfig.setInvalidateOnChange(false);
  maxSizeConfig.setName(NEAR_CACHE_WITH_MAX_SIZE + ""String_Node_Str"");
  clientConfig.addNearCacheConfig(maxSizeConfig);
  NearCacheConfig ttlConfig=new NearCacheConfig();
  ttlConfig.setName(NEAR_CACHE_WITH_TTL + ""String_Node_Str"");
  ttlConfig.setInvalidateOnChange(false);
  ttlConfig.setTimeToLiveSeconds(MAX_TTL_SECONDS);
  clientConfig.addNearCacheConfig(ttlConfig);
  NearCacheConfig idleConfig=new NearCacheConfig();
  idleConfig.setName(NEAR_CACHE_WITH_IDLE + ""String_Node_Str"");
  idleConfig.setInvalidateOnChange(false);
  idleConfig.setMaxIdleSeconds(MAX_IDLE_SECONDS);
  clientConfig.addNearCacheConfig(idleConfig);
  NearCacheConfig longIdleConfig=new NearCacheConfig();
  idleConfig.setName(NEAR_CACHE_WITH_LONG_MAX_IDLE_TIME + ""String_Node_Str"");
  idleConfig.setInvalidateOnChange(true);
  idleConfig.setMaxIdleSeconds(LONG_MAX_IDLE_SECONDS);
  clientConfig.addNearCacheConfig(longIdleConfig);
  NearCacheConfig invalidateConfig=new NearCacheConfig();
  invalidateConfig.setName(NEAR_CACHE_WITH_INVALIDATION + ""String_Node_Str"");
  invalidateConfig.setInvalidateOnChange(true);
  clientConfig.addNearCacheConfig(invalidateConfig);
  client=HazelcastClient.newHazelcastClient(clientConfig);
}","@BeforeClass public static void setup() throws Exception {
  h1=Hazelcast.newHazelcastInstance();
  h2=Hazelcast.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  NearCacheConfig basicConfigNoInvalidation=new NearCacheConfig();
  basicConfigNoInvalidation.setInMemoryFormat(InMemoryFormat.OBJECT);
  basicConfigNoInvalidation.setName(NEAR_CACHE_WITH_NO_INVALIDATION + ""String_Node_Str"");
  basicConfigNoInvalidation.setInvalidateOnChange(false);
  clientConfig.addNearCacheConfig(basicConfigNoInvalidation);
  NearCacheConfig maxSizeConfig=new NearCacheConfig();
  maxSizeConfig.setMaxSize(MAX_CACHE_SIZE);
  maxSizeConfig.setInvalidateOnChange(false);
  maxSizeConfig.setName(NEAR_CACHE_WITH_MAX_SIZE + ""String_Node_Str"");
  clientConfig.addNearCacheConfig(maxSizeConfig);
  NearCacheConfig ttlConfig=new NearCacheConfig();
  ttlConfig.setName(NEAR_CACHE_WITH_TTL + ""String_Node_Str"");
  ttlConfig.setInvalidateOnChange(false);
  ttlConfig.setTimeToLiveSeconds(MAX_TTL_SECONDS);
  clientConfig.addNearCacheConfig(ttlConfig);
  NearCacheConfig idleConfig=new NearCacheConfig();
  idleConfig.setName(NEAR_CACHE_WITH_IDLE + ""String_Node_Str"");
  idleConfig.setInvalidateOnChange(false);
  idleConfig.setMaxIdleSeconds(MAX_IDLE_SECONDS);
  clientConfig.addNearCacheConfig(idleConfig);
  NearCacheConfig longIdleConfig=new NearCacheConfig();
  idleConfig.setName(NEAR_CACHE_WITH_LONG_MAX_IDLE_TIME + ""String_Node_Str"");
  idleConfig.setInvalidateOnChange(true);
  idleConfig.setMaxIdleSeconds(LONG_MAX_IDLE_SECONDS);
  clientConfig.addNearCacheConfig(longIdleConfig);
  NearCacheConfig invalidateConfig=new NearCacheConfig();
  invalidateConfig.setName(NEAR_CACHE_WITH_INVALIDATION + ""String_Node_Str"");
  invalidateConfig.setInvalidateOnChange(true);
  clientConfig.addNearCacheConfig(invalidateConfig);
  NearCacheConfig lfuMaxSizeConfig=new NearCacheConfig();
  lfuMaxSizeConfig.setName(NEAR_CACHE_LFU_WITH_MAX_SIZE + ""String_Node_Str"");
  lfuMaxSizeConfig.setInvalidateOnChange(true);
  lfuMaxSizeConfig.setMaxSize(MAX_CACHE_SIZE);
  lfuMaxSizeConfig.setEvictionPolicy(""String_Node_Str"");
  clientConfig.addNearCacheConfig(lfuMaxSizeConfig);
  client=HazelcastClient.newHazelcastClient(clientConfig);
}",0.9170518122111408
47620,"/** 
 * @param mapName    name of map which owns near cache.
 * @param nodeEngine node engine.
 */
public NearCache(String mapName,NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  Config config=nodeEngine.getConfig();
  NearCacheConfig nearCacheConfig=config.findMapConfig(mapName).getNearCacheConfig();
  maxSize=nearCacheConfig.getMaxSize() <= 0 ? Integer.MAX_VALUE : nearCacheConfig.getMaxSize();
  maxIdleMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getMaxIdleSeconds());
  inMemoryFormat=nearCacheConfig.getInMemoryFormat();
  timeToLiveMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getTimeToLiveSeconds());
  evictionPolicy=EvictionPolicy.valueOf(nearCacheConfig.getEvictionPolicy());
  cache=new ConcurrentHashMap<Data,CacheRecord>();
  canCleanUp=new AtomicBoolean(true);
  canEvict=new AtomicBoolean(true);
  nearCacheStats=new NearCacheStatsImpl();
  lastCleanup=Clock.currentTimeMillis();
  serializationService=nodeEngine.getSerializationService();
}","/** 
 * @param mapName    name of map which owns near cache.
 * @param nodeEngine node engine.
 */
public NearCache(String mapName,NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  Config config=nodeEngine.getConfig();
  NearCacheConfig nearCacheConfig=config.findMapConfig(mapName).getNearCacheConfig();
  maxSize=nearCacheConfig.getMaxSize() <= 0 ? Integer.MAX_VALUE : nearCacheConfig.getMaxSize();
  maxIdleMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getMaxIdleSeconds());
  inMemoryFormat=nearCacheConfig.getInMemoryFormat();
  timeToLiveMillis=TimeUnit.SECONDS.toMillis(nearCacheConfig.getTimeToLiveSeconds());
  evictionPolicy=EvictionPolicy.valueOf(nearCacheConfig.getEvictionPolicy());
  if (EvictionPolicy.LRU.equals(evictionPolicy)) {
    selectedComparator=lruComparator;
  }
 else   if (EvictionPolicy.LFU.equals(evictionPolicy)) {
    selectedComparator=lfuComparator;
  }
 else {
    selectedComparator=defaultComparator;
  }
  cache=new ConcurrentHashMap<Data,CacheRecord>();
  canCleanUp=new AtomicBoolean(true);
  canEvict=new AtomicBoolean(true);
  nearCacheStats=new NearCacheStatsImpl();
  lastCleanup=Clock.currentTimeMillis();
  serializationService=nodeEngine.getSerializationService();
}",0.8880800727934486
47621,"private void fireEvictCache(){
  if (canEvict.compareAndSet(true,false)) {
    try {
      nodeEngine.getExecutionService().execute(""String_Node_Str"",new Runnable(){
        public void run(){
          try {
            TreeSet<CacheRecord> records=new TreeSet<CacheRecord>(cache.values());
            int evictSize=cache.size() * EVICTION_PERCENTAGE / HUNDRED_PERCENT;
            int i=0;
            for (            CacheRecord record : records) {
              cache.remove(record.key);
              updateSizeEstimator(-calculateCost(record));
              if (++i > evictSize) {
                break;
              }
            }
          }
  finally {
            canEvict.set(true);
          }
        }
      }
);
    }
 catch (    RejectedExecutionException e) {
      canEvict.set(true);
    }
catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}","private void fireEvictCache(){
  if (canEvict.compareAndSet(true,false)) {
    try {
      nodeEngine.getExecutionService().execute(""String_Node_Str"",new Runnable(){
        public void run(){
          try {
            TreeSet<CacheRecord> records=new TreeSet<CacheRecord>(selectedComparator);
            records.addAll(cache.values());
            int evictSize=cache.size() * EVICTION_PERCENTAGE / HUNDRED_PERCENT;
            int i=0;
            for (            CacheRecord record : records) {
              cache.remove(record.key);
              updateSizeEstimator(-calculateCost(record));
              if (++i > evictSize) {
                break;
              }
            }
          }
  finally {
            canEvict.set(true);
          }
        }
      }
);
    }
 catch (    RejectedExecutionException e) {
      canEvict.set(true);
    }
catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}",0.9737130339539978
47622,"/** 
 * Return true if input argument is power of two. Input has to be a a positive integer. Result is undefined for zero or negative integers.
 * @param x
 * @return <code>true</code> if <code>x</code> is power of two
 */
public static boolean isPowerOfTwo(long x){
  return (x & (x - 1)) == 0;
}","/** 
 * Return true if input argument is power of two. Input has to be a a positive integer. <p/> Result is undefined for zero or negative integers.
 * @param x
 * @return <code>true</code> if <code>x</code> is power of two
 */
public static boolean isPowerOfTwo(long x){
  return (x & (x - 1)) == 0;
}",0.991652754590985
47623,ClusterClock getClusterClock();,"/** 
 * Returns the   {@link com.hazelcast.cluster.ClusterClock} of the cluster.The returned value will never be null and will never change.
 * @return the ClusterClock.
 */
ClusterClock getClusterClock();",0.2627118644067797
47624,"private void createMemState(MemberStateImpl memberState,Collection<DistributedObject> distributedObjects){
  int count=0;
  final Config config=instance.getConfig();
  final Iterator<DistributedObject> iterator=distributedObjects.iterator();
  while (iterator.hasNext() && count < maxVisibleInstanceCount) {
    DistributedObject distributedObject=iterator.next();
    if (distributedObject instanceof IQueue) {
      count=handleQueue(memberState,count,config,(IQueue)distributedObject);
    }
 else     if (distributedObject instanceof ITopic) {
      count=handleTopic(memberState,count,config,(ITopic)distributedObject);
    }
 else     if (distributedObject instanceof MultiMap) {
      count=handleMultimap(memberState,count,config,(MultiMap)distributedObject);
    }
 else     if (distributedObject instanceof IExecutorService) {
      count=handleExecutorService(memberState,count,config,(IExecutorService)distributedObject);
    }
 else {
      logger.finest(""String_Node_Str"" + distributedObject.getName());
    }
  }
  count=handleMap(memberState,count,config,getMapStats());
  if (cacheServiceEnabled) {
    final ICacheService cacheService=getCacheService();
    for (    CacheConfig cacheConfig : cacheService.getCacheConfigs()) {
      if (cacheConfig.isStatisticsEnabled()) {
        CacheStatistics statistics=cacheService.getStatistics(cacheConfig.getNameWithPrefix());
        count=handleCache(memberState,count,cacheConfig,statistics);
      }
    }
  }
}","private void createMemState(MemberStateImpl memberState,Collection<DistributedObject> distributedObjects){
  int count=0;
  final Config config=instance.getConfig();
  final Iterator<DistributedObject> iterator=distributedObjects.iterator();
  while (iterator.hasNext() && count < maxVisibleInstanceCount) {
    DistributedObject distributedObject=iterator.next();
    if (distributedObject instanceof IQueue) {
      count=handleQueue(memberState,count,config,(IQueue)distributedObject);
    }
 else     if (distributedObject instanceof ITopic) {
      count=handleTopic(memberState,count,config,(ITopic)distributedObject);
    }
 else     if (distributedObject instanceof MultiMap) {
      count=handleMultimap(memberState,count,config,(MultiMap)distributedObject);
    }
 else     if (distributedObject instanceof IExecutorService) {
      count=handleExecutorService(memberState,count,config,(IExecutorService)distributedObject);
    }
 else {
      logger.finest(""String_Node_Str"" + distributedObject.getName());
    }
  }
  count=handleMap(memberState,count,getMapStats());
  if (cacheServiceEnabled) {
    final ICacheService cacheService=getCacheService();
    for (    CacheConfig cacheConfig : cacheService.getCacheConfigs()) {
      if (cacheConfig.isStatisticsEnabled()) {
        CacheStatistics statistics=cacheService.getStatistics(cacheConfig.getNameWithPrefix());
        count=handleCache(memberState,count,cacheConfig,statistics);
      }
    }
  }
}",0.997623089983022
47625,"private int handleMap(MemberStateImpl memberState,int count,Config config,Map<String,LocalMapStatsImpl> maps){
  for (  String mapName : maps.keySet()) {
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else {
      memberState.putLocalMapStats(mapName,maps.get(mapName));
      count=count + 1;
    }
  }
  return count;
}","private int handleMap(MemberStateImpl memberState,int count,Map<String,LocalMapStatsImpl> maps){
  for (  Map.Entry<String,LocalMapStatsImpl> entry : maps.entrySet()) {
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else {
      memberState.putLocalMapStats(entry.getKey(),entry.getValue());
      count=count + 1;
    }
  }
  return count;
}",0.757532281205165
47626,"private OperationThread[] initPartitionThreads(GroupProperties groupProperties){
  int threadCount=groupProperties.PARTITION_OPERATION_THREAD_COUNT.getInteger();
  if (threadCount <= 0) {
    int coreSize=Runtime.getRuntime().availableProcessors();
    threadCount=Math.max(2,coreSize);
  }
  PartitionOperationThreadFactory threadFactory=new PartitionOperationThreadFactory();
  OperationThread[] threads=new OperationThread[threadCount];
  for (int threadId=0; threadId < threads.length; threadId++) {
    OperationThread operationThread=threadFactory.newThread(null);
    threads[threadId]=operationThread;
    operationThread.start();
  }
  return threads;
}","private OperationThread[] initPartitionThreads(GroupProperties groupProperties){
  int threadCount=groupProperties.PARTITION_OPERATION_THREAD_COUNT.getInteger();
  if (threadCount <= 0) {
    int coreSize=Runtime.getRuntime().availableProcessors();
    threadCount=Math.max(2,coreSize);
  }
  OperationThread[] threads=new OperationThread[threadCount];
  for (int threadId=0; threadId < threads.length; threadId++) {
    String threadName=threadGroup.getThreadPoolNamePrefix(""String_Node_Str"") + threadId;
    LinkedBlockingQueue workQueue=new LinkedBlockingQueue();
    ConcurrentLinkedQueue priorityWorkQueue=new ConcurrentLinkedQueue();
    OperationThread operationThread=new OperationThread(threadName,true,threadId,workQueue,priorityWorkQueue);
    threads[threadId]=operationThread;
    operationThread.start();
  }
  return threads;
}",0.6476063829787234
47627,"private OperationThread[] initGenericThreads(GroupProperties groupProperties){
  int threadCount=groupProperties.GENERIC_OPERATION_THREAD_COUNT.getInteger();
  if (threadCount <= 0) {
    int coreSize=Runtime.getRuntime().availableProcessors();
    threadCount=Math.max(2,coreSize / 2);
  }
  GenericOperationThreadFactory threadFactory=new GenericOperationThreadFactory();
  OperationThread[] threads=new OperationThread[threadCount];
  for (int threadId=0; threadId < threads.length; threadId++) {
    OperationThread operationThread=threadFactory.newThread(null);
    threads[threadId]=operationThread;
    operationThread.start();
  }
  return threads;
}","private OperationThread[] initGenericThreads(GroupProperties groupProperties){
  int threadCount=groupProperties.GENERIC_OPERATION_THREAD_COUNT.getInteger();
  if (threadCount <= 0) {
    int coreSize=Runtime.getRuntime().availableProcessors();
    threadCount=Math.max(2,coreSize / 2);
  }
  OperationThread[] threads=new OperationThread[threadCount];
  for (int threadId=0; threadId < threads.length; threadId++) {
    String threadName=threadGroup.getThreadPoolNamePrefix(""String_Node_Str"") + threadId;
    OperationThread operationThread=new OperationThread(threadName,false,threadId,genericWorkQueue,genericPriorityWorkQueue);
    threads[threadId]=operationThread;
    operationThread.start();
  }
  return threads;
}",0.7067342505430847
47628,"private int handleExecutorService(MemberStateImpl memberState,int count,Config config,Map<String,LocalExecutorStats> executorServices){
  for (  String name : executorServices.keySet()) {
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findExecutorConfig(name).isStatisticsEnabled()) {
      memberState.putLocalExecutorStats(name,executorServices.get(name));
      ++count;
    }
  }
  return count;
}","private int handleExecutorService(MemberStateImpl memberState,int count,Config config,Map<String,LocalExecutorStats> executorServices){
  for (  Map.Entry<String,LocalExecutorStats> entry : executorServices.entrySet()) {
    String name=entry.getKey();
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findExecutorConfig(name).isStatisticsEnabled()) {
      LocalExecutorStats stats=entry.getValue();
      memberState.putLocalExecutorStats(name,stats);
      ++count;
    }
  }
  return count;
}",0.8235294117647058
47629,"private int handleMap(MemberStateImpl memberState,int count,Config config,Map<String,LocalMapStats> maps){
  for (  String mapName : maps.keySet()) {
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findMapConfig(mapName).isStatisticsEnabled()) {
      memberState.putLocalMapStats(mapName,maps.get(mapName));
      count=count + 1;
    }
  }
  return count;
}","private int handleMap(MemberStateImpl memberState,int count,Config config,Map<String,LocalMapStats> maps){
  for (  Map.Entry<String,LocalMapStats> entry : maps.entrySet()) {
    String name=entry.getKey();
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findMapConfig(name).isStatisticsEnabled()) {
      LocalMapStats stats=entry.getValue();
      memberState.putLocalMapStats(name,stats);
      ++count;
    }
  }
  return count;
}",0.7236994219653179
47630,"private int handleQueue(MemberStateImpl memberState,int count,Config config,Map<String,LocalQueueStats> queues){
  for (  String name : queues.keySet()) {
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findQueueConfig(name).isStatisticsEnabled()) {
      memberState.putLocalQueueStats(name,queues.get(name));
      ++count;
    }
  }
  return count;
}","private int handleQueue(MemberStateImpl memberState,int count,Config config,Map<String,LocalQueueStats> queues){
  for (  Map.Entry<String,LocalQueueStats> entry : queues.entrySet()) {
    String name=entry.getKey();
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findQueueConfig(name).isStatisticsEnabled()) {
      LocalQueueStats stats=entry.getValue();
      memberState.putLocalQueueStats(name,stats);
      ++count;
    }
  }
  return count;
}",0.8228571428571428
47631,"private int handleTopic(MemberStateImpl memberState,int count,Config config,Map<String,LocalTopicStats> topics){
  for (  String name : topics.keySet()) {
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findTopicConfig(name).isStatisticsEnabled()) {
      memberState.putLocalTopicStats(name,topics.get(name));
      ++count;
    }
  }
  return count;
}","private int handleTopic(MemberStateImpl memberState,int count,Config config,Map<String,LocalTopicStats> topics){
  for (  Map.Entry<String,LocalTopicStats> entry : topics.entrySet()) {
    String name=entry.getKey();
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findTopicConfig(name).isStatisticsEnabled()) {
      LocalTopicStats stats=entry.getValue();
      memberState.putLocalTopicStats(name,stats);
      ++count;
    }
  }
  return count;
}",0.7748571428571429
47632,"private int handleMultimap(MemberStateImpl memberState,int count,Config config,Map<String,LocalMultiMapStats> multiMaps){
  for (  String name : multiMaps.keySet()) {
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findMultiMapConfig(name).isStatisticsEnabled()) {
      memberState.putLocalMultiMapStats(name,multiMaps.get(name));
      ++count;
    }
  }
  return count;
}","private int handleMultimap(MemberStateImpl memberState,int count,Config config,Map<String,LocalMultiMapStats> multiMaps){
  for (  Map.Entry<String,LocalMultiMapStats> entry : multiMaps.entrySet()) {
    String name=entry.getKey();
    if (count >= maxVisibleInstanceCount) {
      break;
    }
 else     if (config.findMultiMapConfig(name).isStatisticsEnabled()) {
      LocalMultiMapStats stats=entry.getValue();
      memberState.putLocalMultiMapStats(name,stats);
      ++count;
    }
  }
  return count;
}",0.8217391304347826
47633,"@Override public Map<Integer,List<DelayedEntry>> process(List<DelayedEntry> delayedEntries){
  Map<Integer,List<DelayedEntry>> failMap;
  sort(delayedEntries);
  if (writeBatchSize > 1) {
    failMap=doStoreUsingBatchSize(delayedEntries);
  }
 else {
    failMap=processInternal((List)delayedEntries);
  }
  return failMap;
}","@Override public Map<Integer,List<DelayedEntry>> process(List<DelayedEntry> delayedEntries){
  Map<Integer,List<DelayedEntry>> failMap;
  sort(delayedEntries);
  if (writeBatchSize > 1) {
    failMap=doStoreUsingBatchSize(delayedEntries);
  }
 else {
    failMap=processInternal(delayedEntries);
  }
  return failMap;
}",0.9906832298136646
47634,"/** 
 * Store chunk by chunk using write batch size   {@link #writeBatchSize}
 * @param sortedDelayedEntries entries to be stored.
 * @return not-stored entries per partition.
 */
private Map<Integer,List<DelayedEntry>> doStoreUsingBatchSize(Collection<DelayedEntry> sortedDelayedEntries){
  final Map<Integer,List<DelayedEntry>> failsPerPartition=new HashMap<Integer,List<DelayedEntry>>();
  int page=0;
  List<DelayedEntry> delayedEntryList;
  while ((delayedEntryList=getBatchChunk((List)sortedDelayedEntries,writeBatchSize,page++)) != null) {
    final Map<Integer,List<DelayedEntry>> fails=processInternal(delayedEntryList);
    final Set<Map.Entry<Integer,List<DelayedEntry>>> entries=fails.entrySet();
    for (    Map.Entry<Integer,List<DelayedEntry>> entry : entries) {
      final Integer partitionId=entry.getKey();
      final List<DelayedEntry> tmpFailList=entry.getValue();
      List<DelayedEntry> failList=failsPerPartition.get(partitionId);
      if (failList == null || failList.isEmpty()) {
        failsPerPartition.put(partitionId,tmpFailList);
        failList=failsPerPartition.get(partitionId);
      }
      failList.addAll(tmpFailList);
    }
  }
  return failsPerPartition;
}","/** 
 * Store chunk by chunk using write batch size   {@link #writeBatchSize}
 * @param sortedDelayedEntries entries to be stored.
 * @return not-stored entries per partition.
 */
private Map<Integer,List<DelayedEntry>> doStoreUsingBatchSize(List<DelayedEntry> sortedDelayedEntries){
  final Map<Integer,List<DelayedEntry>> failsPerPartition=new HashMap<Integer,List<DelayedEntry>>();
  int page=0;
  List<DelayedEntry> delayedEntryList;
  while ((delayedEntryList=getBatchChunk(sortedDelayedEntries,writeBatchSize,page++)) != null) {
    final Map<Integer,List<DelayedEntry>> fails=processInternal(delayedEntryList);
    final Set<Map.Entry<Integer,List<DelayedEntry>>> entries=fails.entrySet();
    for (    Map.Entry<Integer,List<DelayedEntry>> entry : entries) {
      final Integer partitionId=entry.getKey();
      final List<DelayedEntry> tmpFailList=entry.getValue();
      List<DelayedEntry> failList=failsPerPartition.get(partitionId);
      if (failList == null || failList.isEmpty()) {
        failsPerPartition.put(partitionId,tmpFailList);
        failList=failsPerPartition.get(partitionId);
      }
      failList.addAll(tmpFailList);
    }
  }
  return failsPerPartition;
}",0.991638795986622
47635,"@Override public synchronized void start(){
  if (alive) {
    return;
  }
  alive=true;
  inSelector.start();
  outSelector.start();
  HeartBeat heartBeat=new HeartBeat();
  executionService.scheduleWithFixedDelay(heartBeat,heartBeatInterval,heartBeatInterval,TimeUnit.MILLISECONDS);
  invocationService=client.getInvocationService();
}","@Override public synchronized void start(){
  if (alive) {
    return;
  }
  alive=true;
  inSelector.start();
  outSelector.start();
  HeartBeat heartBeat=new HeartBeat();
  executionService.scheduleWithFixedDelay(heartBeat,heartBeatInterval,heartBeatInterval,TimeUnit.MILLISECONDS);
}",0.9181380417335474
47636,"@Override public void handlePacket(Packet packet){
  final ClientConnection conn=(ClientConnection)packet.getConn();
  conn.incrementPacketCount();
  if (packet.isHeaderSet(Packet.HEADER_EVENT)) {
    final ClientListenerServiceImpl listenerService=(ClientListenerServiceImpl)client.getListenerService();
    listenerService.handleEventPacket(packet);
  }
 else {
    invocationService.handlePacket(packet);
  }
}","@Override public void handlePacket(Packet packet){
  final ClientConnection conn=(ClientConnection)packet.getConn();
  conn.incrementPacketCount();
  if (packet.isHeaderSet(Packet.HEADER_EVENT)) {
    final ClientListenerServiceImpl listenerService=(ClientListenerServiceImpl)client.getListenerService();
    listenerService.handleEventPacket(packet);
  }
 else {
    ClientInvocationService invocationService=client.getInvocationService();
    invocationService.handlePacket(packet);
  }
}",0.9147286821705426
47637,"@Override protected <T>JobCompletableFuture<T> invoke(final Collator collator){
  try {
    final String jobId=UuidUtil.buildRandomUuidString();
    ClientContext context=getContext();
    ClientMapReduceRequest request=new ClientMapReduceRequest(name,jobId,keys,predicate,mapper,combinerFactory,reducerFactory,keyValueSource,chunkSize,topologyChangedStrategy);
    final ClientCompletableFuture completableFuture=new ClientCompletableFuture(jobId);
    final ClientInvocation clientInvocation=new ClientInvocation(getClient(),request);
    final ClientInvocationFuture future=clientInvocation.invoke();
    future.andThen(new ExecutionCallback(){
      @Override public void onResponse(      Object res){
        Object response=res;
        try {
          if (collator != null) {
            response=collator.collate(((Map)response).entrySet());
          }
        }
  finally {
          completableFuture.setResult(response);
          trackableJobs.remove(jobId);
        }
      }
      @Override public void onFailure(      Throwable throwable){
        Throwable t=throwable;
        try {
          if (t instanceof ExecutionException && t.getCause() instanceof CancellationException) {
            t=t.getCause();
          }
          completableFuture.setResult(t);
        }
  finally {
          trackableJobs.remove(jobId);
        }
      }
    }
);
    Address runningMember=clientInvocation.getConnection().getRemoteEndpoint();
    trackableJobs.putIfAbsent(jobId,new ClientTrackableJob<T>(jobId,runningMember,completableFuture));
    return completableFuture;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override protected <T>JobCompletableFuture<T> invoke(final Collator collator){
  try {
    final String jobId=UuidUtil.buildRandomUuidString();
    ClientMapReduceRequest request=new ClientMapReduceRequest(name,jobId,keys,predicate,mapper,combinerFactory,reducerFactory,keyValueSource,chunkSize,topologyChangedStrategy);
    final ClientCompletableFuture completableFuture=new ClientCompletableFuture(jobId);
    final ClientInvocation clientInvocation=new ClientInvocation(getClient(),request);
    final ClientInvocationFuture future=clientInvocation.invoke();
    future.andThen(new ExecutionCallback(){
      @Override public void onResponse(      Object res){
        Object response=res;
        try {
          if (collator != null) {
            response=collator.collate(((Map)response).entrySet());
          }
        }
  finally {
          completableFuture.setResult(response);
          trackableJobs.remove(jobId);
        }
      }
      @Override public void onFailure(      Throwable throwable){
        Throwable t=throwable;
        try {
          if (t instanceof ExecutionException && t.getCause() instanceof CancellationException) {
            t=t.getCause();
          }
          completableFuture.setResult(t);
        }
  finally {
          trackableJobs.remove(jobId);
        }
      }
    }
);
    Address runningMember=clientInvocation.getConnection().getRemoteEndpoint();
    trackableJobs.putIfAbsent(jobId,new ClientTrackableJob<T>(jobId,runningMember,completableFuture));
    return completableFuture;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.987737584304108
47638,"private <T>T lookupByPattern(Map<String,T> configPatterns,String itemName){
  T candidate=configPatterns.get(itemName);
  if (candidate != null) {
    return candidate;
  }
  String configPatternKey=configPatternMatcher.matches(configPatterns.keySet(),itemName);
  if (configPatternKey != null) {
    return configPatterns.get(configPatternKey);
  }
  LOGGER.warning(""String_Node_Str"" + itemName + ""String_Node_Str"");
  return null;
}","private <T>T lookupByPattern(Map<String,T> configPatterns,String itemName){
  T candidate=configPatterns.get(itemName);
  if (candidate != null) {
    return candidate;
  }
  String configPatternKey=configPatternMatcher.matches(configPatterns.keySet(),itemName);
  if (configPatternKey != null) {
    return configPatterns.get(configPatternKey);
  }
  if (!""String_Node_Str"".equals(itemName)) {
    LOGGER.warning(""String_Node_Str"" + itemName + ""String_Node_Str"");
  }
  return null;
}",0.9162132752992383
47639,"private <T>T lookupByPattern(Map<String,T> configPatterns,String itemName){
  T candidate=configPatterns.get(itemName);
  if (candidate != null) {
    return candidate;
  }
  String configPatternKey=configPatternMatcher.matches(configPatterns.keySet(),itemName);
  if (configPatternKey != null) {
    return configPatterns.get(configPatternKey);
  }
  LOGGER.warning(""String_Node_Str"" + itemName + ""String_Node_Str"");
  return null;
}","private <T>T lookupByPattern(Map<String,T> configPatterns,String itemName){
  T candidate=configPatterns.get(itemName);
  if (candidate != null) {
    return candidate;
  }
  String configPatternKey=configPatternMatcher.matches(configPatterns.keySet(),itemName);
  if (configPatternKey != null) {
    return configPatterns.get(configPatternKey);
  }
  if (!""String_Node_Str"".equals(itemName)) {
    LOGGER.warning(""String_Node_Str"" + itemName + ""String_Node_Str"");
  }
  return null;
}",0.9162132752992383
47640,"private static <T>T lookupByPattern(Map<String,T> map,String name){
  T t=map.get(name);
  if (t == null) {
    int lastMatchingPoint=-1;
    for (    Map.Entry<String,T> entry : map.entrySet()) {
      String pattern=entry.getKey();
      T value=entry.getValue();
      final int matchingPoint=getMatchingPoint(name,pattern);
      if (matchingPoint > lastMatchingPoint) {
        lastMatchingPoint=matchingPoint;
        t=value;
      }
    }
  }
  return t;
}","private <T>T lookupByPattern(Map<String,T> configPatterns,String itemName){
  T candidate=configPatterns.get(itemName);
  if (candidate != null) {
    return candidate;
  }
  String configPatternKey=configPatternMatcher.matches(configPatterns.keySet(),itemName);
  if (configPatternKey != null) {
    return configPatterns.get(configPatternKey);
  }
  LOGGER.warning(""String_Node_Str"" + itemName + ""String_Node_Str"");
  return null;
}",0.1937639198218262
47641,"/** 
 * Utility method that creates an   {@link java.util.HashMap} with its initialCapacity calculatedto minimize rehash operations
 */
public static <K,V>Map<K,V> createHashMap(int expectedMapSize){
  int initialCapacity=(int)(expectedMapSize * HASHMAP_DEFAULT_LOAD_FACTOR) + 1;
  return new HashMap<K,V>(initialCapacity);
}","/** 
 * Utility method that creates an   {@link java.util.HashMap} with its initialCapacity calculatedto minimize rehash operations
 */
public static <K,V>Map<K,V> createHashMap(int expectedMapSize){
  int initialCapacity=(int)(expectedMapSize / HASHMAP_DEFAULT_LOAD_FACTOR) + 1;
  return new HashMap<K,V>(initialCapacity);
}",0.9969230769230768
47642,"private ClientConnection getOrConnect(Address target,Authenticator authenticator) throws Exception {
  if (!smartRouting) {
    target=ownerConnectionFuture.getOrWaitForCreation().getEndPoint();
  }
  Address address=addressTranslator.translate(target);
  if (address == null) {
    throw new IOException(""String_Node_Str"");
  }
  ClientConnection clientConnection=connections.get(target);
  if (clientConnection == null) {
    final Object lock=getLock(target);
synchronized (lock) {
      clientConnection=connections.get(target);
      if (clientConnection == null) {
        final ConnectionProcessor connectionProcessor=new ConnectionProcessor(address,authenticator,false);
        final ICompletableFuture<ClientConnection> future=executionService.submitInternal(connectionProcessor);
        try {
          clientConnection=future.get(connectionTimeout,TimeUnit.MILLISECONDS);
        }
 catch (        Exception e) {
          future.cancel(true);
          throw ExceptionUtil.rethrow(e,IOException.class);
        }
        ClientConnection current=connections.putIfAbsent(clientConnection.getRemoteEndpoint(),clientConnection);
        if (current != null) {
          clientConnection.close();
          clientConnection=current;
        }
      }
    }
  }
  return clientConnection;
}","private ClientConnection getOrConnect(Address target,Authenticator authenticator) throws Exception {
  if (!smartRouting) {
    target=ownerConnectionFuture.getOrWaitForCreation().getEndPoint();
  }
  Address address=addressTranslator.translate(target);
  if (address == null) {
    throw new IOException(""String_Node_Str"");
  }
  ClientConnection clientConnection=connections.get(target);
  if (clientConnection == null) {
    final Object lock=getLock(target);
synchronized (lock) {
      clientConnection=connections.get(target);
      if (clientConnection == null) {
        final ConnectionProcessor connectionProcessor=new ConnectionProcessor(address,authenticator,false);
        final ICompletableFuture<ClientConnection> future=executionService.submitInternal(connectionProcessor);
        try {
          clientConnection=future.get(connectionTimeout,TimeUnit.MILLISECONDS);
        }
 catch (        TimeoutException e) {
          throw new IOException(e);
        }
catch (        Exception e) {
          future.cancel(true);
          throw ExceptionUtil.rethrow(e,IOException.class);
        }
        ClientConnection current=connections.putIfAbsent(clientConnection.getRemoteEndpoint(),clientConnection);
        if (current != null) {
          clientConnection.close();
          clientConnection=current;
        }
      }
    }
  }
  return clientConnection;
}",0.969041402461768
47643,"private ClientConnection getOrConnect(Address target,Authenticator authenticator) throws Exception {
  if (!smartRouting) {
    target=ownerConnectionFuture.getOrWaitForCreation().getEndPoint();
  }
  Address address=addressTranslator.translate(target);
  if (address == null) {
    throw new IOException(""String_Node_Str"");
  }
  ClientConnection clientConnection=connections.get(target);
  if (clientConnection == null) {
    final Object lock=getLock(target);
synchronized (lock) {
      clientConnection=connections.get(target);
      if (clientConnection == null) {
        final ConnectionProcessor connectionProcessor=new ConnectionProcessor(address,authenticator,false);
        final ICompletableFuture<ClientConnection> future=executionService.submitInternal(connectionProcessor);
        try {
          clientConnection=future.get(connectionTimeout,TimeUnit.MILLISECONDS);
        }
 catch (        Exception e) {
          future.cancel(true);
          throw ExceptionUtil.rethrow(e,IOException.class);
        }
        ClientConnection current=connections.putIfAbsent(clientConnection.getRemoteEndpoint(),clientConnection);
        if (current != null) {
          clientConnection.close();
          clientConnection=current;
        }
      }
    }
  }
  return clientConnection;
}","private ClientConnection getOrConnect(Address target,Authenticator authenticator) throws Exception {
  if (!smartRouting) {
    target=ownerConnectionFuture.getOrWaitForCreation().getEndPoint();
  }
  Address address=addressTranslator.translate(target);
  if (address == null) {
    throw new IOException(""String_Node_Str"");
  }
  ClientConnection clientConnection=connections.get(target);
  if (clientConnection == null) {
    final Object lock=getLock(target);
synchronized (lock) {
      clientConnection=connections.get(target);
      if (clientConnection == null) {
        final ConnectionProcessor connectionProcessor=new ConnectionProcessor(address,authenticator,false);
        final ICompletableFuture<ClientConnection> future=executionService.submitInternal(connectionProcessor);
        try {
          clientConnection=future.get(connectionTimeout,TimeUnit.MILLISECONDS);
        }
 catch (        TimeoutException e) {
          throw new IOException(e);
        }
catch (        Exception e) {
          future.cancel(true);
          throw ExceptionUtil.rethrow(e,IOException.class);
        }
        ClientConnection current=connections.putIfAbsent(clientConnection.getRemoteEndpoint(),clientConnection);
        if (current != null) {
          clientConnection.close();
          clientConnection=current;
        }
      }
    }
  }
  return clientConnection;
}",0.969041402461768
47644,"@Test public void testMapDestroyIssue764() throws Exception {
  final HazelcastInstance instance=Hazelcast.newHazelcastInstance();
  HazelcastInstance client=HazelcastClient.newHazelcastClient();
  assertEquals(0,client.getDistributedObjects().size());
  IMap map=client.getMap(""String_Node_Str"");
  assertEquals(1,client.getDistributedObjects().size());
  map.destroy();
  assertEquals(0,instance.getDistributedObjects().size());
  assertEquals(0,client.getDistributedObjects().size());
}","@Test public void testMapDestroyIssue764() throws Exception {
  HazelcastInstance server=Hazelcast.newHazelcastInstance();
  HazelcastInstance client=HazelcastClient.newHazelcastClient();
  assertNoOfDistributedObject(""String_Node_Str"",0,server.getDistributedObjects());
  assertNoOfDistributedObject(""String_Node_Str"",0,client.getDistributedObjects());
  IMap map=client.getMap(""String_Node_Str"");
  assertNoOfDistributedObject(""String_Node_Str"",1,server.getDistributedObjects());
  assertNoOfDistributedObject(""String_Node_Str"",1,client.getDistributedObjects());
  map.destroy();
  Collection<DistributedObject> serverDistributedObjects=server.getDistributedObjects();
  Collection<DistributedObject> clientDistributedObjects=client.getDistributedObjects();
  assertNoOfDistributedObject(""String_Node_Str"",0,serverDistributedObjects);
  assertNoOfDistributedObject(""String_Node_Str"",0,clientDistributedObjects);
}",0.4843304843304843
47645,"@Test public void testMapDestroyIssue764() throws Exception {
  final HazelcastInstance instance=Hazelcast.newHazelcastInstance();
  HazelcastInstance client=HazelcastClient.newHazelcastClient();
  assertEquals(0,client.getDistributedObjects().size());
  IMap map=client.getMap(""String_Node_Str"");
  assertEquals(1,client.getDistributedObjects().size());
  map.destroy();
  assertEquals(0,instance.getDistributedObjects().size());
  assertEquals(0,client.getDistributedObjects().size());
}","@Test public void testMapDestroyIssue764() throws Exception {
  HazelcastInstance server=Hazelcast.newHazelcastInstance();
  HazelcastInstance client=HazelcastClient.newHazelcastClient();
  assertNoOfDistributedObject(""String_Node_Str"",0,server.getDistributedObjects());
  assertNoOfDistributedObject(""String_Node_Str"",0,client.getDistributedObjects());
  IMap map=client.getMap(""String_Node_Str"");
  assertNoOfDistributedObject(""String_Node_Str"",1,server.getDistributedObjects());
  assertNoOfDistributedObject(""String_Node_Str"",1,client.getDistributedObjects());
  map.destroy();
  Collection<DistributedObject> serverDistributedObjects=server.getDistributedObjects();
  Collection<DistributedObject> clientDistributedObjects=client.getDistributedObjects();
  assertNoOfDistributedObject(""String_Node_Str"",0,serverDistributedObjects);
  assertNoOfDistributedObject(""String_Node_Str"",0,clientDistributedObjects);
}",0.4843304843304843
47646,"private void assertRecord(ReplicatedRecord<String,String> record,long startTime){
  long hits=record.getHits();
  long lastAccessTime=record.getLastAccessTime();
  long now=Clock.currentTimeMillis();
  assertEquals(String.format(""String_Node_Str"",1,hits),1,hits);
  assertTrue(String.format(""String_Node_Str"",lastAccessTime,startTime),lastAccessTime > startTime);
  assertTrue(String.format(""String_Node_Str"",lastAccessTime,now),lastAccessTime <= now);
}","private void assertRecord(ReplicatedRecord<String,String> record,long startTime){
  long hits=record.getHits();
  long lastAccessTime=record.getLastAccessTime();
  long now=Clock.currentTimeMillis();
  assertTrue(String.format(""String_Node_Str"",hits,0),hits > 0);
  assertTrue(String.format(""String_Node_Str"",hits,1000),hits < 1000);
  assertTrue(String.format(""String_Node_Str"",lastAccessTime,startTime),lastAccessTime > startTime);
  assertTrue(String.format(""String_Node_Str"",lastAccessTime,now),lastAccessTime <= now);
}",0.9038854805725972
47647,"private static List<Member> createMembers(MemberImpl startAfter,int memberCount,int maxSameHostCount) throws Exception {
  Random rand=new Random();
  final byte[] ip=new byte[]{10,10,0,0};
  if (startAfter != null) {
    Address address=startAfter.getAddress();
    byte[] startIp=address.getInetAddress().getAddress();
    if (startIp[3] < 255) {
      ip[2]=startIp[2];
      ip[3]=(byte)(startIp[3] + 1);
    }
 else {
      ip[2]=(byte)(startIp[2] + 1);
      ip[3]=0;
    }
  }
  int count=0;
  int port=5700;
  List<Member> members=new ArrayList<Member>();
  int sameHostCount=rand.nextInt(maxSameHostCount) + 1;
  for (int i=0; i < memberCount; i++) {
    if (count == sameHostCount) {
      ip[3]=++ip[3];
      count=0;
      port=5700;
      sameHostCount=rand.nextInt(maxSameHostCount) + 1;
    }
    count++;
    port++;
    MemberImpl m=new MemberImpl(new Address(InetAddress.getByAddress(new byte[]{ip[0],ip[1],ip[2],ip[3]}),port),false);
    members.add(m);
    if (ip[3] == 255) {
      ip[2]=++ip[2];
    }
  }
  return members;
}","private static List<Member> createMembers(MemberImpl startAfter,int memberCount,int maxSameHostCount) throws Exception {
  Random rand=new Random();
  final byte[] ip=new byte[]{10,10,0,0};
  if (startAfter != null) {
    Address address=startAfter.getAddress();
    byte[] startIp=address.getInetAddress().getAddress();
    if ((0xff & startIp[3]) < 255) {
      ip[2]=startIp[2];
      ip[3]=(byte)(startIp[3] + 1);
    }
 else {
      ip[2]=(byte)(startIp[2] + 1);
      ip[3]=0;
    }
  }
  int count=0;
  int port=5700;
  List<Member> members=new ArrayList<Member>();
  int sameHostCount=rand.nextInt(maxSameHostCount) + 1;
  for (int i=0; i < memberCount; i++) {
    if (count == sameHostCount) {
      ip[3]=++ip[3];
      count=0;
      port=5700;
      sameHostCount=rand.nextInt(maxSameHostCount) + 1;
    }
    count++;
    port++;
    MemberImpl m=new MemberImpl(new Address(InetAddress.getByAddress(new byte[]{ip[0],ip[1],ip[2],ip[3]}),port),false);
    members.add(m);
    if ((0xff & ip[3]) == 255) {
      ip[2]=++ip[2];
    }
  }
  return members;
}",0.9914853358561968
47648,"private static List<Member> createMembers(MemberImpl startAfter,int memberCount,int maxSameHostCount) throws Exception {
  Random rand=new Random();
  final byte[] ip=new byte[]{10,10,0,0};
  if (startAfter != null) {
    Address address=startAfter.getAddress();
    byte[] startIp=address.getInetAddress().getAddress();
    if (startIp[3] < 255) {
      ip[2]=startIp[2];
      ip[3]=(byte)(startIp[3] + 1);
    }
 else {
      ip[2]=(byte)(startIp[2] + 1);
      ip[3]=0;
    }
  }
  int count=0;
  int port=5700;
  List<Member> members=new ArrayList<Member>();
  int sameHostCount=rand.nextInt(maxSameHostCount) + 1;
  for (int i=0; i < memberCount; i++) {
    if (count == sameHostCount) {
      ip[3]=++ip[3];
      count=0;
      port=5700;
      sameHostCount=rand.nextInt(maxSameHostCount) + 1;
    }
    count++;
    port++;
    MemberImpl m=new MemberImpl(new Address(InetAddress.getByAddress(new byte[]{ip[0],ip[1],ip[2],ip[3]}),port),false);
    members.add(m);
    if (ip[3] == 255) {
      ip[2]=++ip[2];
    }
  }
  return members;
}","private static List<Member> createMembers(MemberImpl startAfter,int memberCount,int maxSameHostCount) throws Exception {
  Random rand=new Random();
  final byte[] ip=new byte[]{10,10,0,0};
  if (startAfter != null) {
    Address address=startAfter.getAddress();
    byte[] startIp=address.getInetAddress().getAddress();
    if ((0xff & startIp[3]) < 255) {
      ip[2]=startIp[2];
      ip[3]=(byte)(startIp[3] + 1);
    }
 else {
      ip[2]=(byte)(startIp[2] + 1);
      ip[3]=0;
    }
  }
  int count=0;
  int port=5700;
  List<Member> members=new ArrayList<Member>();
  int sameHostCount=rand.nextInt(maxSameHostCount) + 1;
  for (int i=0; i < memberCount; i++) {
    if (count == sameHostCount) {
      ip[3]=++ip[3];
      count=0;
      port=5700;
      sameHostCount=rand.nextInt(maxSameHostCount) + 1;
    }
    count++;
    port++;
    MemberImpl m=new MemberImpl(new Address(InetAddress.getByAddress(new byte[]{ip[0],ip[1],ip[2],ip[3]}),port),false);
    members.add(m);
    if ((0xff & ip[3]) == 255) {
      ip[2]=++ip[2];
    }
  }
  return members;
}",0.9914853358561968
47649,"@Override public boolean equals(Object o){
  if (o != null && o.getClass().equals(IterableSamplingEntry.class)) {
    return super.equals(o);
  }
 else {
    return false;
  }
}","@Override public boolean equals(Object o){
  if (IterableSamplingEntry.class.isInstance(o)) {
    return super.equals(o);
  }
 else {
    return false;
  }
}",0.8622754491017964
47650,"@Override public E next(){
  return currentSample;
}","@Override public E next(){
  if (currentSample != null) {
    return currentSample;
  }
 else {
    throw new NoSuchElementException();
  }
}",0.538860103626943
47651,"private LazySamplingEntryIterableIterator(int maxEntryCount){
  this.maxEntryCount=maxEntryCount;
  this.randomNumber=Math.abs(THREAD_LOCAL_RANDOM.get().nextInt());
  this.firstSegmentIndex=randomNumber % segments.length;
  this.currentSegmentIndex=firstSegmentIndex;
  this.currentBucketIndex=-1;
}","private LazySamplingEntryIterableIterator(int maxEntryCount){
  this.maxEntryCount=maxEntryCount;
  this.randomNumber=THREAD_LOCAL_RANDOM.get().nextInt(Integer.MAX_VALUE);
  this.firstSegmentIndex=randomNumber % segments.length;
  this.currentSegmentIndex=firstSegmentIndex;
  this.currentBucketIndex=-1;
}",0.9553719008264464
47652,"@Override public void run(){
  waitForPacketsProcessed();
  cleanResources(new TargetDisconnectedException(remoteEndpoint));
}","@Override public void run(){
  waitForPacketsProcessed();
  cleanResources(new ConstructorFunction<Object,Throwable>(){
    @Override public Throwable createNew(    Object arg){
      return new TargetDisconnectedException(remoteEndpoint);
    }
  }
);
}",0.6578947368421053
47653,"private void innerClose() throws IOException {
  if (!live) {
    return;
  }
  live=false;
  if (socketChannelWrapper.isOpen()) {
    socketChannelWrapper.close();
  }
  readHandler.shutdown();
  writeHandler.shutdown();
  if (socketChannelWrapper.isBlocking()) {
    return;
  }
  if (connectionManager.isLive()) {
    try {
      executionService.execute(new CleanResourcesTask());
    }
 catch (    RejectedExecutionException e) {
      logger.warning(""String_Node_Str"",e);
    }
  }
 else {
    cleanResources(new HazelcastException(""String_Node_Str""));
  }
}","private void innerClose() throws IOException {
  if (!live) {
    return;
  }
  live=false;
  if (socketChannelWrapper.isOpen()) {
    socketChannelWrapper.close();
  }
  readHandler.shutdown();
  writeHandler.shutdown();
  if (socketChannelWrapper.isBlocking()) {
    return;
  }
  if (connectionManager.isLive()) {
    try {
      executionService.execute(new CleanResourcesTask());
    }
 catch (    RejectedExecutionException e) {
      logger.warning(""String_Node_Str"",e);
    }
  }
 else {
    cleanResources(new ConstructorFunction<Object,Throwable>(){
      @Override public Throwable createNew(      Object arg){
        return new HazelcastException(""String_Node_Str"");
      }
    }
);
  }
}",0.8783570300157978
47654,"private void cleanResources(HazelcastException response){
  final Iterator<Map.Entry<Integer,ClientCallFuture>> iter=callIdMap.entrySet().iterator();
  while (iter.hasNext()) {
    final Map.Entry<Integer,ClientCallFuture> entry=iter.next();
    iter.remove();
    entry.getValue().notify(response);
    eventHandlerMap.remove(entry.getKey());
  }
  final Iterator<ClientCallFuture> iterator=eventHandlerMap.values().iterator();
  while (iterator.hasNext()) {
    final ClientCallFuture future=iterator.next();
    iterator.remove();
    future.notify(response);
  }
}","private void cleanResources(ConstructorFunction<Object,Throwable> responseCtor){
  final Iterator<Map.Entry<Integer,ClientCallFuture>> iter=callIdMap.entrySet().iterator();
  while (iter.hasNext()) {
    final Map.Entry<Integer,ClientCallFuture> entry=iter.next();
    iter.remove();
    entry.getValue().notify(responseCtor.createNew(null));
    eventHandlerMap.remove(entry.getKey());
  }
  final Iterator<ClientCallFuture> iterator=eventHandlerMap.values().iterator();
  while (iterator.hasNext()) {
    final ClientCallFuture future=iterator.next();
    iterator.remove();
    future.notify(responseCtor.createNew(null));
  }
}",0.902418682235196
47655,"@Override public void shutdown(){
  logger.finest(""String_Node_Str"");
  final Object response=new HazelcastInstanceNotActiveException();
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(response);
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
}","@Override public void shutdown(){
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
}",0.7172236503856041
47656,"@Override public void run(){
  waitForPacketsProcessed();
  cleanResources(new TargetDisconnectedException(remoteEndpoint));
}","@Override public void run(){
  waitForPacketsProcessed();
  cleanResources(new ConstructorFunction<Object,Throwable>(){
    @Override public Throwable createNew(    Object arg){
      return new TargetDisconnectedException(remoteEndpoint);
    }
  }
);
}",0.6578947368421053
47657,"private void innerClose() throws IOException {
  if (!live) {
    return;
  }
  live=false;
  if (socketChannelWrapper.isOpen()) {
    socketChannelWrapper.close();
  }
  readHandler.shutdown();
  writeHandler.shutdown();
  if (socketChannelWrapper.isBlocking()) {
    return;
  }
  if (connectionManager.isAlive()) {
    try {
      executionService.execute(new CleanResourcesTask());
    }
 catch (    RejectedExecutionException e) {
      logger.warning(""String_Node_Str"",e);
    }
  }
 else {
    cleanResources(new HazelcastException(""String_Node_Str""));
  }
}","private void innerClose() throws IOException {
  if (!live) {
    return;
  }
  live=false;
  if (socketChannelWrapper.isOpen()) {
    socketChannelWrapper.close();
  }
  readHandler.shutdown();
  writeHandler.shutdown();
  if (socketChannelWrapper.isBlocking()) {
    return;
  }
  if (connectionManager.isAlive()) {
    try {
      executionService.execute(new CleanResourcesTask());
    }
 catch (    RejectedExecutionException e) {
      logger.warning(""String_Node_Str"",e);
    }
  }
 else {
    cleanResources(new ConstructorFunction<Object,Throwable>(){
      @Override public Throwable createNew(      Object arg){
        return new HazelcastException(""String_Node_Str"");
      }
    }
);
  }
}",0.8785488958990536
47658,"private void cleanResources(HazelcastException response){
  final Iterator<Map.Entry<Integer,ClientCallFuture>> iter=callIdMap.entrySet().iterator();
  while (iter.hasNext()) {
    final Map.Entry<Integer,ClientCallFuture> entry=iter.next();
    iter.remove();
    entry.getValue().notify(response);
    eventHandlerMap.remove(entry.getKey());
  }
  final Iterator<ClientCallFuture> iterator=eventHandlerMap.values().iterator();
  while (iterator.hasNext()) {
    final ClientCallFuture future=iterator.next();
    iterator.remove();
    future.notify(response);
  }
}","private void cleanResources(ConstructorFunction<Object,Throwable> responseCtor){
  final Iterator<Map.Entry<Integer,ClientCallFuture>> iter=callIdMap.entrySet().iterator();
  while (iter.hasNext()) {
    final Map.Entry<Integer,ClientCallFuture> entry=iter.next();
    iter.remove();
    entry.getValue().notify(responseCtor.createNew(null));
    eventHandlerMap.remove(entry.getKey());
  }
  final Iterator<ClientCallFuture> iterator=eventHandlerMap.values().iterator();
  while (iterator.hasNext()) {
    final ClientCallFuture future=iterator.next();
    iterator.remove();
    future.notify(responseCtor.createNew(null));
  }
}",0.902418682235196
47659,"@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  final Object response=new HazelcastInstanceNotActiveException();
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(response);
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
}","@Override public void shutdown(){
  shutdown=true;
  logger.finest(""String_Node_Str"");
  for (  BasicInvocation invocation : invocations.values()) {
    try {
      invocation.notify(new HazelcastInstanceNotActiveException());
    }
 catch (    Throwable e) {
      logger.warning(invocation + ""String_Node_Str"" + e.getMessage());
    }
  }
  invocations.clear();
  scheduler.shutdown();
}",0.729064039408867
47660,"private void updateLocalEntry(ReplicatedRecord<K,V> localEntry,ReplicationMessage update){
  final VectorClockTimestamp currentVectorClockTimestamp=localEntry.getVectorClockTimestamp();
  final VectorClockTimestamp updateVectorClockTimestamp=update.getVectorClockTimestamp();
  if (isOldTombstone(localEntry)) {
    applyTheUpdate(update,localEntry);
  }
 else   if (VectorClockTimestamp.happenedBefore(currentVectorClockTimestamp,updateVectorClockTimestamp)) {
    applyTheUpdate(update,localEntry);
  }
 else   if (VectorClockTimestamp.happenedBefore(updateVectorClockTimestamp,currentVectorClockTimestamp)) {
    return;
  }
 else   if (!updateVectorClockTimestamp.equals(currentVectorClockTimestamp)) {
    if (localEntry.getLatestUpdateHash() >= update.getUpdateHash()) {
      applyTheUpdate(update,localEntry);
    }
 else {
      VectorClockTimestamp newTimestamp=localEntry.applyAndIncrementVectorClock(updateVectorClockTimestamp,localMember);
      Object key=update.getKey();
      V value=localEntry.getValue();
      long ttlMillis=update.getTtlMillis();
      int latestUpdateHash=localEntry.getLatestUpdateHash();
      ReplicationMessage message=new ReplicationMessage(name,key,value,newTimestamp,localMember,latestUpdateHash,ttlMillis);
      distributeReplicationMessage(message,true);
    }
  }
 else {
    LOGGER.finest(""String_Node_Str"" + ""String_Node_Str"");
  }
}","private void updateLocalEntry(ReplicatedRecord<K,V> localEntry,ReplicationMessage update){
  final VectorClockTimestamp currentVectorClockTimestamp=localEntry.getVectorClockTimestamp();
  final VectorClockTimestamp updateVectorClockTimestamp=update.getVectorClockTimestamp();
  if (isOldTombstone(localEntry)) {
    applyTheUpdate(update,localEntry);
  }
 else   if (VectorClockTimestamp.happenedBefore(currentVectorClockTimestamp,updateVectorClockTimestamp)) {
    applyTheUpdate(update,localEntry);
  }
 else   if (VectorClockTimestamp.happenedBefore(updateVectorClockTimestamp,currentVectorClockTimestamp)) {
    return;
  }
 else   if (!updateVectorClockTimestamp.equals(currentVectorClockTimestamp)) {
    if (localEntry.getLatestUpdateHash() >= update.getUpdateHash()) {
      applyTheUpdate(update,localEntry);
    }
 else {
      VectorClockTimestamp newTimestamp=localEntry.applyAndIncrementVectorClock(updateVectorClockTimestamp,localMember);
      Object key=update.getKey();
      V v=localEntry.getValue();
      V value=v instanceof Data ? (V)nodeEngine.toObject(v) : v;
      long ttlMillis=update.getTtlMillis();
      int latestUpdateHash=localEntry.getLatestUpdateHash();
      ReplicationMessage message=new ReplicationMessage(name,key,value,newTimestamp,localMember,latestUpdateHash,ttlMillis);
      distributeReplicationMessage(message,true);
    }
  }
 else {
    LOGGER.finest(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.9756269869304132
47661,"private void updateLocalEntry(ReplicatedRecord<K,V> localEntry,ReplicationMessage update){
  final VectorClockTimestamp currentVectorClockTimestamp=localEntry.getVectorClockTimestamp();
  final VectorClockTimestamp updateVectorClockTimestamp=update.getVectorClockTimestamp();
  if (isOldTombstone(localEntry)) {
    applyTheUpdate(update,localEntry);
  }
 else   if (VectorClockTimestamp.happenedBefore(currentVectorClockTimestamp,updateVectorClockTimestamp)) {
    applyTheUpdate(update,localEntry);
  }
 else   if (VectorClockTimestamp.happenedBefore(updateVectorClockTimestamp,currentVectorClockTimestamp)) {
    return;
  }
 else   if (!updateVectorClockTimestamp.equals(currentVectorClockTimestamp)) {
    if (localEntry.getLatestUpdateHash() >= update.getUpdateHash()) {
      applyTheUpdate(update,localEntry);
    }
 else {
      VectorClockTimestamp newTimestamp=localEntry.applyAndIncrementVectorClock(updateVectorClockTimestamp,localMember);
      Object key=update.getKey();
      V value=localEntry.getValue();
      long ttlMillis=update.getTtlMillis();
      int latestUpdateHash=localEntry.getLatestUpdateHash();
      ReplicationMessage message=new ReplicationMessage(name,key,value,newTimestamp,localMember,latestUpdateHash,ttlMillis);
      distributeReplicationMessage(message,true);
    }
  }
 else {
    LOGGER.finest(""String_Node_Str"" + ""String_Node_Str"");
  }
}","private void updateLocalEntry(ReplicatedRecord<K,V> localEntry,ReplicationMessage update){
  final VectorClockTimestamp currentVectorClockTimestamp=localEntry.getVectorClockTimestamp();
  final VectorClockTimestamp updateVectorClockTimestamp=update.getVectorClockTimestamp();
  if (isOldTombstone(localEntry)) {
    applyTheUpdate(update,localEntry);
  }
 else   if (VectorClockTimestamp.happenedBefore(currentVectorClockTimestamp,updateVectorClockTimestamp)) {
    applyTheUpdate(update,localEntry);
  }
 else   if (VectorClockTimestamp.happenedBefore(updateVectorClockTimestamp,currentVectorClockTimestamp)) {
    return;
  }
 else   if (!updateVectorClockTimestamp.equals(currentVectorClockTimestamp)) {
    if (localEntry.getLatestUpdateHash() >= update.getUpdateHash()) {
      applyTheUpdate(update,localEntry);
    }
 else {
      VectorClockTimestamp newTimestamp=localEntry.applyAndIncrementVectorClock(updateVectorClockTimestamp,localMember);
      Object key=update.getKey();
      V v=localEntry.getValue();
      V value=v instanceof Data ? (V)nodeEngine.toObject(v) : v;
      long ttlMillis=update.getTtlMillis();
      int latestUpdateHash=localEntry.getLatestUpdateHash();
      ReplicationMessage message=new ReplicationMessage(name,key,value,newTimestamp,localMember,latestUpdateHash,ttlMillis);
      distributeReplicationMessage(message,true);
    }
  }
 else {
    LOGGER.finest(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.9756269869304132
47662,"public Map<String,String> getAddresses() throws Exception {
  return new DescribeInstances(awsConfig).execute(endpoint);
}","public Map<String,String> getAddresses() throws Exception {
  return new DescribeInstances(awsConfig).execute();
}",0.9661016949152542
47663,"public Collection<String> getPrivateIpAddresses() throws Exception {
  final Map<String,String> result=new DescribeInstances(awsConfig).execute(endpoint);
  return result.keySet();
}","public Collection<String> getPrivateIpAddresses() throws Exception {
  final Map<String,String> result=new DescribeInstances(awsConfig).execute();
  return result.keySet();
}",0.9775280898876404
47664,"@Override public void incrementAccessHit(){
  accessHit++;
}","@Override @edu.umd.cs.findbugs.annotations.SuppressWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") public void incrementAccessHit(){
  accessHit++;
}",0.5286343612334802
47665,"@Override protected void handleSelectionKey(SelectionKey sk){
  if (sk.isValid() && sk.isReadable()) {
    readKeyCount++;
    SelectionHandler handler=(SelectionHandler)sk.attachment();
    handler.handle();
  }
}","@Override @edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) protected void handleSelectionKey(SelectionKey sk){
  if (sk.isValid() && sk.isReadable()) {
    readEvents++;
    SelectionHandler handler=(SelectionHandler)sk.attachment();
    handler.handle();
  }
}",0.8289738430583501
47666,"@Override protected void handleSelectionKey(SelectionKey sk){
  if (sk.isValid() && sk.isWritable()) {
    writeKeyCount++;
    sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE);
    SelectionHandler handler=(SelectionHandler)sk.attachment();
    handler.handle();
  }
}","@Override @edu.umd.cs.findbugs.annotations.SuppressWarnings({""String_Node_Str""}) protected void handleSelectionKey(SelectionKey sk){
  if (sk.isValid() && sk.isWritable()) {
    writeEvents++;
    sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE);
    SelectionHandler handler=(SelectionHandler)sk.attachment();
    handler.handle();
  }
}",0.864
47667,"@Override public void dumpPerformanceMetrics(StringBuffer sb){
  for (int k=0; k < inSelectors.length; k++) {
    sb.append(""String_Node_Str"").append(k).append(""String_Node_Str"").append(inSelectors[k].getReadKeyCount()).append(""String_Node_Str"");
  }
  for (int k=0; k < outSelectors.length; k++) {
    sb.append(""String_Node_Str"").append(k).append(""String_Node_Str"").append(outSelectors[k].getWriteKeyCount()).append(""String_Node_Str"");
  }
}","@Override public void dumpPerformanceMetrics(StringBuffer sb){
  for (int k=0; k < inSelectors.length; k++) {
    InSelectorImpl inSelector=inSelectors[k];
    sb.append(inSelector.getName()).append(""String_Node_Str"").append(inSelector.getReadEvents()).append(""String_Node_Str"");
  }
  for (int k=0; k < outSelectors.length; k++) {
    OutSelectorImpl outSelector=outSelectors[k];
    sb.append(outSelector.getName()).append(""String_Node_Str"").append(outSelector.getWriteEvents()).append(""String_Node_Str"");
  }
}",0.7677824267782427
47668,"public TcpIpConnectionManager(IOService ioService,ServerSocketChannel serverSocketChannel){
  this.ioService=ioService;
  this.serverSocketChannel=serverSocketChannel;
  this.logger=ioService.getLogger(TcpIpConnectionManager.class.getName());
  this.socketReceiveBufferSize=ioService.getSocketReceiveBufferSize() * IOService.KILO_BYTE;
  this.socketSendBufferSize=ioService.getSocketSendBufferSize() * IOService.KILO_BYTE;
  this.socketLingerSeconds=ioService.getSocketLingerSeconds();
  this.socketKeepAlive=ioService.getSocketKeepAlive();
  this.socketNoDelay=ioService.getSocketNoDelay();
  this.selectorThreadCount=ioService.getSelectorThreadCount();
  this.inSelectors=new InSelectorImpl[selectorThreadCount];
  this.outSelectors=new OutSelectorImpl[selectorThreadCount];
  final Collection<Integer> ports=ioService.getOutboundPorts();
  this.outboundPortCount=ports == null ? 0 : ports.size();
  if (ports != null) {
    outboundPorts.addAll(ports);
  }
  this.socketChannelWrapperFactory=ioService.getSocketChannelWrapperFactory();
  this.portableContext=ioService.getPortableContext();
  this.selectorImbalancWorkaroundEnabled=parseBoolean(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  if (selectorImbalancWorkaroundEnabled) {
    selectorIndexPerHostMap=new ConcurrentHashMap<String,Integer>();
    logger.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    selectorIndexPerHostMap=null;
  }
}","public TcpIpConnectionManager(IOService ioService,ServerSocketChannel serverSocketChannel){
  this.ioService=ioService;
  this.serverSocketChannel=serverSocketChannel;
  this.logger=ioService.getLogger(TcpIpConnectionManager.class.getName());
  this.socketReceiveBufferSize=ioService.getSocketReceiveBufferSize() * IOService.KILO_BYTE;
  this.socketSendBufferSize=ioService.getSocketSendBufferSize() * IOService.KILO_BYTE;
  this.socketLingerSeconds=ioService.getSocketLingerSeconds();
  this.socketKeepAlive=ioService.getSocketKeepAlive();
  this.socketNoDelay=ioService.getSocketNoDelay();
  this.selectorThreadCount=ioService.getSelectorThreadCount();
  this.inSelectors=new InSelectorImpl[selectorThreadCount];
  this.outSelectors=new OutSelectorImpl[selectorThreadCount];
  final Collection<Integer> ports=ioService.getOutboundPorts();
  this.outboundPortCount=ports == null ? 0 : ports.size();
  if (ports != null) {
    outboundPorts.addAll(ports);
  }
  this.socketChannelWrapperFactory=ioService.getSocketChannelWrapperFactory();
  this.portableContext=ioService.getPortableContext();
  this.selectorImbalancWorkaroundEnabled=isSelectorImbalanceEnabled();
  this.selectorIndexPerHostMap=selectorImbalancWorkaroundEnabled ? new HashMap<String,Integer>() : null;
}",0.8788098693759071
47669,"TcpIpConnection assignSocketChannel(SocketChannelWrapper channel,Address endpoint){
  InetSocketAddress remoteSocketAddress=(InetSocketAddress)channel.socket().getRemoteSocketAddress();
  String remoteHost=remoteSocketAddress.getHostName();
  Integer index;
  if (selectorImbalancWorkaroundEnabled) {
synchronized (selectorIndexPerHostMap) {
      index=selectorIndexPerHostMap.get(remoteHost);
      if (index == null) {
        index=nextSelectorIndex();
        selectorIndexPerHostMap.put(remoteHost,index);
        logger.info(remoteHost + ""String_Node_Str"" + index);
      }
 else {
        logger.info(remoteHost + ""String_Node_Str"" + index);
      }
    }
  }
 else {
    index=nextSelectorIndex();
  }
  final TcpIpConnection connection=new TcpIpConnection(this,inSelectors[index],outSelectors[index],connectionIdGen.incrementAndGet(),channel);
  connection.setEndPoint(endpoint);
  activeConnections.add(connection);
  acceptedSockets.remove(channel);
  connection.getReadHandler().register();
  if (selectorImbalancWorkaroundEnabled) {
    log(Level.INFO,""String_Node_Str"" + channel.socket().getLocalSocketAddress() + ""String_Node_Str""+ remoteSocketAddress+ ""String_Node_Str""+ index+ ""String_Node_Str""+ activeConnections.size());
  }
 else {
    log(Level.INFO,""String_Node_Str"" + channel.socket().getLocalSocketAddress() + ""String_Node_Str""+ remoteSocketAddress);
  }
  return connection;
}","TcpIpConnection assignSocketChannel(SocketChannelWrapper channel,Address endpoint){
  InetSocketAddress remoteSocketAddress=(InetSocketAddress)channel.socket().getRemoteSocketAddress();
  String remoteHost=remoteSocketAddress.getHostName();
  int index=getSelectorIndex(remoteHost);
  final TcpIpConnection connection=new TcpIpConnection(this,inSelectors[index],outSelectors[index],connectionIdGen.incrementAndGet(),channel);
  connection.setEndPoint(endpoint);
  activeConnections.add(connection);
  acceptedSockets.remove(channel);
  connection.getReadHandler().register();
  logConnectionEstablished(channel,remoteSocketAddress,index);
  return connection;
}",0.5477460009694619
47670,"/** 
 * Adds all kinds of performance metrics. It is up to the implementation to add anything.
 */
void dumpPerformanceMetrics(StringBuffer sb);","/** 
 * Dumps all kinds of performance metrics. It is up to the implementation to add anything.
 */
void dumpPerformanceMetrics(StringBuffer sb);",0.9757785467128028
47671,"/** 
 * Returns all kinds of metrics, e.g. performance. This can be used for performance analysis. In the future we'll have a more formal (e.g map with key/value pairs) information.
 * @return the metrics in String form. If the implementation doesn't support metrics, null is returned.
 */
void dumpPerformanceMetrics(StringBuffer sb);","/** 
 * Dumps all kinds of metrics, e.g. performance. This can be used for performance analysis. In the future we'll have a more formal (e.g map with key/value pairs) information.
 */
void dumpPerformanceMetrics(StringBuffer sb);",0.7978723404255319
47672,"@Before public void init(){
  Config config=new Config();
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config.getNetworkConfig().setPort(5701);
  config.getGroupConfig().setName(""String_Node_Str"");
  config.getGroupConfig().setPassword(""String_Node_Str"");
  final HazelcastInstance hz1=Hazelcast.newHazelcastInstance(config);
  Config config2=new Config();
  config2.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config2.getNetworkConfig().setPort(5702);
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getGroupConfig().setPassword(""String_Node_Str"");
  final HazelcastInstance hz2=Hazelcast.newHazelcastInstance(config2);
}","@Before public void init(){
  Config config=new Config();
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config.getNetworkConfig().setPort(5701);
  config.getGroupConfig().setName(""String_Node_Str"");
  config.getGroupConfig().setPassword(""String_Node_Str"");
  config.addCacheConfig(simpleConfig);
  Hazelcast.newHazelcastInstance(config);
  Config config2=new Config();
  config2.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config2.getNetworkConfig().setPort(5702);
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getGroupConfig().setPassword(""String_Node_Str"");
  config.addCacheConfig(simpleConfig);
  Hazelcast.newHazelcastInstance(config2);
}",0.8806179775280899
47673,"@After public void tearDown(){
  Hazelcast.shutdownAll();
}","@After public void tearDown(){
  HazelcastClient.shutdownAll();
  HazelcastInstanceFactory.terminateAll();
}",0.7065868263473054
47674,"protected <K,V>ICache<?,?> getCacheUnchecked(String cacheName){
  final String cacheNameWithPrefix=getCacheNameWithPrefix(cacheName);
  ICache<?,?> cache=caches.get(cacheNameWithPrefix);
  if (cache == null) {
    CacheConfig<K,V> cacheConfig=null;
    if (cacheConfig == null) {
      cacheConfig=getCacheConfigFromPartition(cacheNameWithPrefix,cacheName);
    }
    if (cacheConfig == null) {
      return null;
    }
    final ICache<K,V> cacheProxy=createCacheProxy(cacheConfig);
    final ICache<?,?> iCache=caches.putIfAbsent(cacheNameWithPrefix,cacheProxy);
    cache=iCache != null ? iCache : cacheProxy;
  }
  return cache;
}","protected <K,V>ICache<?,?> getCacheUnchecked(String cacheName){
  final String cacheNameWithPrefix=getCacheNameWithPrefix(cacheName);
  ICache<?,?> cache=caches.get(cacheNameWithPrefix);
  if (cache == null) {
    CacheConfig<K,V> cacheConfig=getCacheConfigFromPartition(cacheNameWithPrefix,cacheName);
    if (cacheConfig == null) {
      return null;
    }
    final ICache<K,V> cacheProxy=createCacheProxy(cacheConfig);
    final ICache<?,?> iCache=caches.putIfAbsent(cacheNameWithPrefix,cacheProxy);
    cache=iCache != null ? iCache : cacheProxy;
  }
  return cache;
}",0.9494614747307374
47675,"@Override public void run() throws Exception {
  final CacheService service=getService();
  final CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    CacheSimpleConfig simpleConfig=service.findCacheConfig(simpleName);
    if (simpleConfig != null) {
      try {
        CacheConfig cacheConfigFromSimpleConfig=new CacheConfig(simpleConfig);
        cacheConfigFromSimpleConfig.setName(name);
        cacheConfigFromSimpleConfig.setManagerPrefix(name.substring(0,name.lastIndexOf(simpleName)));
        if (service.createCacheConfigIfAbsent(cacheConfigFromSimpleConfig,false) == null) {
          response=cacheConfigFromSimpleConfig;
          return;
        }
      }
 catch (      Exception e) {
        throw new CacheException(e);
      }
    }
  }
  response=cacheConfig;
}","@Override public void run() throws Exception {
  final CacheService service=getService();
  final CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    CacheSimpleConfig simpleConfig=service.findCacheConfig(simpleName);
    if (simpleConfig != null) {
      try {
        CacheConfig cacheConfigFromSimpleConfig=new CacheConfig(simpleConfig);
        cacheConfigFromSimpleConfig.setName(simpleName);
        cacheConfigFromSimpleConfig.setManagerPrefix(name.substring(0,name.lastIndexOf(simpleName)));
        if (service.createCacheConfigIfAbsent(cacheConfigFromSimpleConfig,false) == null) {
          response=cacheConfigFromSimpleConfig;
          return;
        }
      }
 catch (      Exception e) {
        throw new CacheException(e);
      }
    }
  }
  response=cacheConfig;
}",0.9951040391676866
47676,"@Test public void defaultCacheTest(){
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager();
  assertNotNull(cacheManager);
  Cache testCache=cacheManager.getCache(""String_Node_Str"");
  assertNull(testCache);
  Caching.getCachingProvider().close();
}","@Test public void defaultCacheTest(){
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager();
  assertNotNull(cacheManager);
  Cache testCache=cacheManager.getCache(""String_Node_Str"");
  assertNull(testCache);
}",0.9203187250996016
47677,"@Test public void cacheManagerByLocationFileTest() throws URISyntaxException {
  URI uri=new URI(""String_Node_Str"");
  String urlStr=configUrl1.toString();
  assertEquals(""String_Node_Str"",urlStr.substring(0,4));
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION,urlStr);
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri,null,properties);
  assertNotNull(cacheManager);
  URI uri2=new URI(""String_Node_Str"");
  String urlStr2=configUrl2.toString();
  assertEquals(""String_Node_Str"",urlStr2.substring(0,4));
  Properties properties2=new Properties();
  properties2.setProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION,urlStr2);
  CacheManager cacheManager2=Caching.getCachingProvider().getCacheManager(uri2,null,properties2);
  assertNotNull(cacheManager2);
  assertEquals(2,Hazelcast.getAllHazelcastInstances().size());
  Caching.getCachingProvider().close();
}","@Test public void cacheManagerByLocationFileTest() throws URISyntaxException {
  URI uri=new URI(""String_Node_Str"");
  String urlStr=configUrl1.toString();
  assertEquals(""String_Node_Str"",urlStr.substring(0,4));
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION,urlStr);
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri,null,properties);
  assertNotNull(cacheManager);
  URI uri2=new URI(""String_Node_Str"");
  String urlStr2=configUrl2.toString();
  assertEquals(""String_Node_Str"",urlStr2.substring(0,4));
  Properties properties2=new Properties();
  properties2.setProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION,urlStr2);
  CacheManager cacheManager2=Caching.getCachingProvider().getCacheManager(uri2,null,properties2);
  assertNotNull(cacheManager2);
  assertEquals(2,Hazelcast.getAllHazelcastInstances().size());
}",0.9788806758183738
47678,"@Test public void cacheManagerByInstanceNameTest() throws URISyntaxException {
  final String instanceName=""String_Node_Str"";
  Config config=new Config();
  config.setInstanceName(instanceName);
  Hazelcast.newHazelcastInstance(config);
  URI uri1=new URI(""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME,instanceName);
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri1,null,properties);
  assertNotNull(cacheManager);
  assertEquals(1,Hazelcast.getAllHazelcastInstances().size());
  Caching.getCachingProvider().close();
  Hazelcast.getHazelcastInstanceByName(instanceName).shutdown();
}","@Test public void cacheManagerByInstanceNameTest() throws URISyntaxException {
  final String instanceName=""String_Node_Str"";
  Config config=new Config();
  config.setInstanceName(instanceName);
  Hazelcast.newHazelcastInstance(config);
  URI uri1=new URI(""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME,instanceName);
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri1,null,properties);
  assertNotNull(cacheManager);
  assertEquals(1,Hazelcast.getAllHazelcastInstances().size());
}",0.9194167306216424
47679,"@Test public void cacheManagerByLocationClasspathTest() throws URISyntaxException {
  URI uri1=new URI(""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION,""String_Node_Str"");
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri1,null,properties);
  assertNotNull(cacheManager);
  Cache<Integer,String> testCache=cacheManager.getCache(""String_Node_Str"",Integer.class,String.class);
  assertNotNull(testCache);
  Caching.getCachingProvider().close();
}","@Test public void cacheManagerByLocationClasspathTest() throws URISyntaxException {
  URI uri1=new URI(""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION,""String_Node_Str"");
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri1,null,properties);
  assertNotNull(cacheManager);
  Cache<Integer,String> testCache=cacheManager.getCache(""String_Node_Str"",Integer.class,String.class);
  assertNotNull(testCache);
}",0.9629629629629628
47680,"public void addInterceptor(String id,MapInterceptor interceptor){
  interceptorMap.put(id,interceptor);
  interceptors.add(interceptor);
}","public void addInterceptor(String id,MapInterceptor interceptor){
  removeInterceptor(id);
  interceptorMap.put(id,interceptor);
  interceptors.add(interceptor);
}",0.9169435215946844
47681,"public void addInterceptor(String id,MapInterceptor interceptor){
  interceptorMap.put(id,interceptor);
  interceptors.add(interceptor);
}","public void addInterceptor(String id,MapInterceptor interceptor){
  removeInterceptor(id);
  interceptorMap.put(id,interceptor);
  interceptors.add(interceptor);
}",0.9169435215946844
47682,"/** 
 * Shutdown the provided client and remove it prom the managed list
 * @param instanceName the hazelcast client instance name
 */
public static void shutdown(String instanceName){
  HazelcastClientProxy proxy=CLIENTS.remove(instanceName);
  if (proxy != null) {
    try {
      proxy.client.shutdown();
    }
 catch (    Exception ignored) {
      EmptyStatement.ignore(ignored);
    }
    proxy.client=null;
  }
}","/** 
 * Shutdown the provided client and remove it from the managed list
 * @param instanceName the hazelcast client instance name
 */
public static void shutdown(String instanceName){
  HazelcastClientProxy proxy=CLIENTS.remove(instanceName);
  if (proxy != null) {
    try {
      proxy.client.shutdown();
    }
 catch (    Exception ignored) {
      EmptyStatement.ignore(ignored);
    }
    proxy.client=null;
  }
}",0.9976133651551312
47683,"public HazelcastClientCacheManager(HazelcastClientCachingProvider cachingProvider,HazelcastInstance hazelcastInstance,URI uri,ClassLoader classLoader,Properties properties){
  super(cachingProvider,uri,classLoader,properties);
  if (hazelcastInstance == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.hazelcastInstance=hazelcastInstance;
  final ClientCacheDistributedObject setupRef=hazelcastInstance.getDistributedObject(CacheService.SERVICE_NAME,""String_Node_Str"");
  this.clientContext=setupRef.getClientContext();
  logger=Logger.getLogger(getClass());
}","public HazelcastClientCacheManager(HazelcastClientCachingProvider cachingProvider,HazelcastInstance hazelcastInstance,URI uri,ClassLoader classLoader,Properties properties){
  super(cachingProvider,uri,classLoader,properties);
  if (hazelcastInstance == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.hazelcastInstance=hazelcastInstance;
  final ClientCacheDistributedObject setupRef=hazelcastInstance.getDistributedObject(CacheService.SERVICE_NAME,""String_Node_Str"");
  this.clientContext=setupRef.getClientContext();
}",0.9655781112091792
47684,"void setPartitionReplicaVersions(int partitionId,long[] versions);","void setPartitionReplicaVersions(int partitionId,long[] versions,int replicaOffset);",0.88
47685,"/** 
 * Provides a similar functionality as committing a transaction. So, at the end of the process method, applyChanges will be called to apply latest data into   {@link CacheRecordStore}.
 */
public void applyChanges(){
  final boolean isStatisticsEnabled=cacheRecordStore.cacheConfig.isStatisticsEnabled();
  final CacheStatisticsImpl statistics=cacheRecordStore.statistics;
switch (state) {
case ACCESS:
    cacheRecordStore.accessRecord(record,expiryPolicy,now);
  break;
case UPDATE:
cacheRecordStore.updateRecordWithExpiry(keyData,value,record,expiryPolicy,now,false);
if (isStatisticsEnabled) {
statistics.increaseCachePuts(1);
statistics.addGetTimeNano(System.nanoTime() - start);
}
break;
case REMOVE:
cacheRecordStore.remove(keyData,null);
break;
case CREATE:
if (isStatisticsEnabled) {
statistics.increaseCachePuts(1);
statistics.addGetTimeNano(System.nanoTime() - start);
}
cacheRecordStore.createRecordWithExpiry(keyData,value,expiryPolicy,now,false);
break;
case LOAD:
cacheRecordStore.createRecordWithExpiry(keyData,value,expiryPolicy,now,true);
break;
case NONE:
break;
default :
break;
}
}","/** 
 * Provides a similar functionality as committing a transaction. So, at the end of the process method, applyChanges will be called to apply latest data into   {@link CacheRecordStore}.
 */
public void applyChanges(){
  final boolean isStatisticsEnabled=cacheRecordStore.cacheConfig.isStatisticsEnabled();
  final CacheStatisticsImpl statistics=cacheRecordStore.statistics;
switch (state) {
case ACCESS:
    cacheRecordStore.accessRecord(record,expiryPolicy,now);
  break;
case UPDATE:
cacheRecordStore.updateRecordWithExpiry(keyData,value,record,expiryPolicy,now,false);
if (isStatisticsEnabled) {
statistics.increaseCachePuts(1);
statistics.addGetTimeNanos(System.nanoTime() - start);
}
break;
case REMOVE:
cacheRecordStore.remove(keyData,null);
break;
case CREATE:
if (isStatisticsEnabled) {
statistics.increaseCachePuts(1);
statistics.addGetTimeNanos(System.nanoTime() - start);
}
cacheRecordStore.createRecordWithExpiry(keyData,value,expiryPolicy,now,false);
break;
case LOAD:
cacheRecordStore.createRecordWithExpiry(keyData,value,expiryPolicy,now,true);
break;
case NONE:
break;
default :
break;
}
}",0.9990974729241876
47686,"@Override public Object invoke(Data key,EntryProcessor entryProcessor,Object[] arguments){
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  CacheRecord record=records.get(key);
  final boolean isExpired=processExpiredEntry(key,record,now);
  if (isExpired) {
    record=null;
  }
  if (isStatisticsEnabled()) {
    if (record == null || isExpired) {
      statistics.increaseCacheMisses(1);
    }
 else {
      statistics.increaseCacheHits(1);
    }
  }
  if (isStatisticsEnabled()) {
    statistics.addGetTimeNano(System.nanoTime() - start);
  }
  CacheEntryProcessorEntry entry=new CacheEntryProcessorEntry(key,record,this,now);
  final Object process=entryProcessor.process(entry,arguments);
  entry.applyChanges();
  return process;
}","@Override public Object invoke(Data key,EntryProcessor entryProcessor,Object[] arguments){
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  CacheRecord record=records.get(key);
  final boolean isExpired=processExpiredEntry(key,record,now);
  if (isExpired) {
    record=null;
  }
  if (isStatisticsEnabled()) {
    if (record == null || isExpired) {
      statistics.increaseCacheMisses(1);
    }
 else {
      statistics.increaseCacheHits(1);
    }
  }
  if (isStatisticsEnabled()) {
    statistics.addGetTimeNanos(System.nanoTime() - start);
  }
  CacheEntryProcessorEntry entry=new CacheEntryProcessorEntry(key,record,this,now);
  final Object process=entryProcessor.process(entry,arguments);
  entry.applyChanges();
  return process;
}",0.9993761696818464
47687,"private void updateGetAndPutStat(boolean isPutSucceed,boolean getValue,boolean oldValueNull,long start){
  if (isStatisticsEnabled()) {
    if (isPutSucceed) {
      statistics.increaseCachePuts(1);
      statistics.addPutTimeNano(System.nanoTime() - start);
    }
    if (getValue) {
      if (oldValueNull) {
        statistics.increaseCacheMisses(1);
      }
 else {
        statistics.increaseCacheHits(1);
      }
      statistics.addGetTimeNano(System.nanoTime() - start);
    }
  }
}","private void updateGetAndPutStat(boolean isPutSucceed,boolean getValue,boolean oldValueNull,long start){
  if (isStatisticsEnabled()) {
    if (isPutSucceed) {
      statistics.increaseCachePuts(1);
      statistics.addPutTimeNanos(System.nanoTime() - start);
    }
    if (getValue) {
      if (oldValueNull) {
        statistics.increaseCacheMisses(1);
      }
 else {
        statistics.increaseCacheHits(1);
      }
      statistics.addGetTimeNanos(System.nanoTime() - start);
    }
  }
}",0.9979633401221996
47688,"private void updateReplaceStat(boolean result,boolean isHit,long start){
  if (isStatisticsEnabled()) {
    if (result) {
      statistics.increaseCachePuts(1);
      statistics.addPutTimeNano(System.nanoTime() - start);
    }
    statistics.addGetTimeNano(System.nanoTime() - start);
    if (isHit) {
      statistics.increaseCacheHits(1);
    }
 else {
      statistics.increaseCacheMisses(1);
    }
  }
}","private void updateReplaceStat(boolean result,boolean isHit,long start){
  if (isStatisticsEnabled()) {
    if (result) {
      statistics.increaseCachePuts(1);
      statistics.addPutTimeNanos(System.nanoTime() - start);
    }
    statistics.addGetTimeNanos(System.nanoTime() - start);
    if (isHit) {
      statistics.increaseCacheHits(1);
    }
 else {
      statistics.increaseCacheMisses(1);
    }
  }
}",0.9975490196078431
47689,"@Override public Object getAndReplace(Data key,Object value,ExpiryPolicy expiryPolicy,String caller){
  final ExpiryPolicy localExpiryPolicy=expiryPolicy != null ? expiryPolicy : defaultExpiryPolicy;
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  Object result=null;
  CacheRecord record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  if (record == null || isExpired) {
    result=null;
  }
 else {
    result=record.getValue();
    updateRecordWithExpiry(key,value,record,localExpiryPolicy,now,false);
  }
  if (isStatisticsEnabled()) {
    statistics.addGetTimeNano(System.nanoTime() - start);
    if (result != null) {
      statistics.increaseCacheHits(1);
      statistics.increaseCachePuts(1);
      statistics.addPutTimeNano(System.nanoTime() - start);
    }
 else {
      statistics.increaseCacheMisses(1);
    }
  }
  return result;
}","@Override public Object getAndReplace(Data key,Object value,ExpiryPolicy expiryPolicy,String caller){
  final ExpiryPolicy localExpiryPolicy=expiryPolicy != null ? expiryPolicy : defaultExpiryPolicy;
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  Object result=null;
  CacheRecord record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  if (record == null || isExpired) {
    result=null;
  }
 else {
    result=record.getValue();
    updateRecordWithExpiry(key,value,record,localExpiryPolicy,now,false);
  }
  if (isStatisticsEnabled()) {
    statistics.addGetTimeNanos(System.nanoTime() - start);
    if (result != null) {
      statistics.increaseCacheHits(1);
      statistics.increaseCachePuts(1);
      statistics.addPutTimeNanos(System.nanoTime() - start);
    }
 else {
      statistics.increaseCacheMisses(1);
    }
  }
  return result;
}",0.9989417989417988
47690,"@Override public Object getAndRemove(Data key,String caller){
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  deleteCacheEntry(key);
  CacheRecord record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  final Object result;
  if (record == null || isExpired) {
    result=null;
  }
 else {
    result=record.getValue();
    deleteRecord(key);
  }
  if (isStatisticsEnabled()) {
    statistics.addGetTimeNano(System.nanoTime() - start);
    if (result != null) {
      statistics.increaseCacheHits(1);
      statistics.increaseCacheRemovals(1);
      statistics.addRemoveTimeNano(System.nanoTime() - start);
    }
 else {
      statistics.increaseCacheMisses(1);
    }
  }
  return result;
}","@Override public Object getAndRemove(Data key,String caller){
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  deleteCacheEntry(key);
  CacheRecord record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  final Object result;
  if (record == null || isExpired) {
    result=null;
  }
 else {
    result=record.getValue();
    deleteRecord(key);
  }
  if (isStatisticsEnabled()) {
    statistics.addGetTimeNanos(System.nanoTime() - start);
    if (result != null) {
      statistics.increaseCacheHits(1);
      statistics.increaseCacheRemovals(1);
      statistics.addRemoveTimeNanos(System.nanoTime() - start);
    }
 else {
      statistics.increaseCacheMisses(1);
    }
  }
  return result;
}",0.9987325728770596
47691,"@Override public boolean remove(Data key,Object value,String caller){
  final ExpiryPolicy localExpiryPolicy=defaultExpiryPolicy;
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  CacheRecord record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean result=true;
  if (record == null || isExpired) {
    if (isStatisticsEnabled()) {
      statistics.increaseCacheMisses(1);
    }
    result=false;
  }
 else {
    hitCount++;
    if (compare(record.getValue(),value)) {
      deleteCacheEntry(key);
      deleteRecord(key);
    }
 else {
      long expiryTime=updateAccessDuration(record,localExpiryPolicy,now);
      processExpiredEntry(key,record,expiryTime,now);
      result=false;
    }
  }
  if (result && isStatisticsEnabled()) {
    statistics.increaseCacheRemovals(1);
    statistics.addRemoveTimeNano(System.nanoTime() - start);
    if (hitCount == 1) {
      statistics.increaseCacheHits(hitCount);
    }
 else {
      statistics.increaseCacheMisses(1);
    }
  }
  return result;
}","@Override public boolean remove(Data key,Object value,String caller){
  final ExpiryPolicy localExpiryPolicy=defaultExpiryPolicy;
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  CacheRecord record=records.get(key);
  boolean isExpired=record != null && record.isExpiredAt(now);
  int hitCount=0;
  boolean result=true;
  if (record == null || isExpired) {
    if (isStatisticsEnabled()) {
      statistics.increaseCacheMisses(1);
    }
    result=false;
  }
 else {
    hitCount++;
    if (compare(record.getValue(),value)) {
      deleteCacheEntry(key);
      deleteRecord(key);
    }
 else {
      long expiryTime=updateAccessDuration(record,localExpiryPolicy,now);
      processExpiredEntry(key,record,expiryTime,now);
      result=false;
    }
  }
  if (result && isStatisticsEnabled()) {
    statistics.increaseCacheRemovals(1);
    statistics.addRemoveTimeNanos(System.nanoTime() - start);
    if (hitCount == 1) {
      statistics.increaseCacheHits(hitCount);
    }
 else {
      statistics.increaseCacheMisses(1);
    }
  }
  return result;
}",0.9995509654243376
47692,"protected boolean putIfAbsent(Data key,Object value,ExpiryPolicy expiryPolicy,String caller,boolean disableWriteThrough){
  final ExpiryPolicy localExpiryPolicy=expiryPolicy != null ? expiryPolicy : defaultExpiryPolicy;
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean result;
  CacheRecord record=records.get(key);
  boolean isExpired=processExpiredEntry(key,record,now);
  if (record == null || isExpired) {
    result=createRecordWithExpiry(key,value,localExpiryPolicy,now,disableWriteThrough);
  }
 else {
    result=false;
  }
  if (result && isStatisticsEnabled()) {
    statistics.increaseCachePuts(1);
    statistics.addPutTimeNano(System.nanoTime() - start);
  }
  return result;
}","protected boolean putIfAbsent(Data key,Object value,ExpiryPolicy expiryPolicy,String caller,boolean disableWriteThrough){
  final ExpiryPolicy localExpiryPolicy=expiryPolicy != null ? expiryPolicy : defaultExpiryPolicy;
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  boolean result;
  CacheRecord record=records.get(key);
  boolean isExpired=processExpiredEntry(key,record,now);
  if (record == null || isExpired) {
    result=createRecordWithExpiry(key,value,localExpiryPolicy,now,disableWriteThrough);
  }
 else {
    result=false;
  }
  if (result && isStatisticsEnabled()) {
    statistics.increaseCachePuts(1);
    statistics.addPutTimeNanos(System.nanoTime() - start);
  }
  return result;
}",0.999343401181878
47693,"@Override public <T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException {
  if (unit == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (tasks == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  long timeoutNanos=unit.toNanos(timeout);
  List<Future<T>> futures=new ArrayList<Future<T>>(tasks.size());
  List<Future<T>> result=new ArrayList<Future<T>>(tasks.size());
  boolean done=true;
  try {
    for (    Callable<T> task : tasks) {
      long start=System.nanoTime();
      int partitionId=getTaskPartitionId(task);
      futures.add(submitToPartitionOwner(task,partitionId,true));
      timeoutNanos-=System.nanoTime() - start;
      if (timeoutNanos <= 0L) {
        for (        Future<T> future : futures) {
          result.add(future);
        }
        return result;
      }
    }
    done=wait(timeoutNanos,futures,result);
  }
 catch (  Throwable t) {
    logger.severe(t);
  }
 finally {
    if (!done) {
      cancelAll(result);
    }
    return result;
  }
}","@Override public <T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException {
  if (unit == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (tasks == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  long timeoutNanos=unit.toNanos(timeout);
  List<Future<T>> futures=new ArrayList<Future<T>>(tasks.size());
  List<Future<T>> result=new ArrayList<Future<T>>(tasks.size());
  boolean done=true;
  try {
    for (    Callable<T> task : tasks) {
      long start=System.nanoTime();
      int partitionId=getTaskPartitionId(task);
      futures.add(submitToPartitionOwner(task,partitionId,true));
      timeoutNanos-=System.nanoTime() - start;
      if (timeoutNanos <= 0L) {
        for (        Future<T> future : futures) {
          result.add(future);
        }
        return result;
      }
    }
    done=wait(timeoutNanos,futures,result);
    return result;
  }
 catch (  Throwable t) {
    logger.severe(t);
    return result;
  }
 finally {
    if (!done) {
      cancelAll(result);
    }
  }
}",0.9740791268758526
47694,"@Override public void saveEntryIndex(QueryableEntry e) throws QueryException {
  if (attributeType == null) {
    attributeType=e.getAttributeType(attribute);
  }
  Data key=e.getIndexKey();
  Comparable oldValue=recordValues.remove(key);
  Comparable newValue=e.getAttribute(attribute);
  if (newValue == null) {
    newValue=NULL;
  }
 else   if (newValue.getClass().isEnum()) {
    newValue=TypeConverters.ENUM_CONVERTER.convert(newValue);
  }
  recordValues.put(key,newValue);
  if (oldValue == null) {
    indexStore.newIndex(newValue,e);
  }
 else {
    indexStore.removeIndex(oldValue,key);
    indexStore.newIndex(newValue,e);
  }
}","@Override public void saveEntryIndex(QueryableEntry e) throws QueryException {
  if (attributeType == null) {
    attributeType=e.getAttributeType(attribute);
  }
  Data key=e.getIndexKey();
  Comparable oldValue=recordValues.remove(key);
  Comparable newValue=e.getAttribute(attribute);
  if (newValue == null) {
    newValue=NULL;
  }
 else   if (newValue.getClass().isEnum()) {
    newValue=TypeConverters.ENUM_CONVERTER.convert(newValue);
  }
  recordValues.put(key,newValue);
  if (oldValue == null) {
    indexStore.newIndex(newValue,e);
  }
 else {
    indexStore.updateIndex(oldValue,newValue,e);
  }
}",0.968
47695,"@Override public void getSubRecords(MultiResultSet results,ComparisonType comparisonType,Comparable searchedValue){
  Set<Comparable> values;
  boolean notEqual=false;
switch (comparisonType) {
case LESSER:
    values=sortedSet.headSet(searchedValue,false);
  break;
case LESSER_EQUAL:
values=sortedSet.headSet(searchedValue,true);
break;
case GREATER:
values=sortedSet.tailSet(searchedValue,false);
break;
case GREATER_EQUAL:
values=sortedSet.tailSet(searchedValue,true);
break;
case NOT_EQUAL:
values=sortedSet;
notEqual=true;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + comparisonType);
}
for (Comparable value : values) {
if (notEqual && searchedValue.equals(value)) {
continue;
}
ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
if (records != null) {
results.addResultSet(records);
}
}
}","@Override public void getSubRecords(MultiResultSet results,ComparisonType comparisonType,Comparable searchedValue){
  takeReadLock();
  try {
    SortedMap<Comparable,ConcurrentMap<Data,QueryableEntry>> subMap;
switch (comparisonType) {
case LESSER:
      subMap=recordMap.headMap(searchedValue,false);
    break;
case LESSER_EQUAL:
  subMap=recordMap.headMap(searchedValue,true);
break;
case GREATER:
subMap=recordMap.tailMap(searchedValue,false);
break;
case GREATER_EQUAL:
subMap=recordMap.tailMap(searchedValue,true);
break;
case NOT_EQUAL:
for (Map.Entry<Comparable,ConcurrentMap<Data,QueryableEntry>> entry : recordMap.entrySet()) {
if (!searchedValue.equals(entry.getKey())) {
results.addResultSet(entry.getValue());
}
}
return;
default :
throw new IllegalArgumentException(""String_Node_Str"" + comparisonType);
}
for (ConcurrentMap<Data,QueryableEntry> value : subMap.values()) {
results.addResultSet(value);
}
}
  finally {
releaseReadLock();
}
}",0.5100446428571429
47696,"@Override public ConcurrentMap<Data,QueryableEntry> getRecordMap(Comparable indexValue){
  return mapRecords.get(indexValue);
}","@Override public ConcurrentMap<Data,QueryableEntry> getRecordMap(Comparable value){
  takeReadLock();
  try {
    if (value instanceof IndexImpl.NullObject) {
      return recordsWithNullValue;
    }
 else {
      return recordMap.get(value);
    }
  }
  finally {
    releaseReadLock();
  }
}",0.4285714285714285
47697,"@Override public void clear(){
  mapRecords.clear();
  sortedSet.clear();
}","@Override public void clear(){
  takeWriteLock();
  try {
    recordsWithNullValue.clear();
    recordMap.clear();
  }
  finally {
    releaseWriteLock();
  }
}",0.5617021276595745
47698,"@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  for (  Comparable value : values) {
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
    if (records != null) {
      results.addResultSet(records);
    }
  }
}","@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  takeReadLock();
  try {
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records;
      if (value instanceof IndexImpl.NullObject) {
        records=recordsWithNullValue;
      }
 else {
        records=recordMap.get(value);
      }
      if (records != null) {
        results.addResultSet(records);
      }
    }
  }
  finally {
    releaseReadLock();
  }
}",0.6675675675675675
47699,"@Override public void removeIndex(Comparable oldValue,Data indexKey){
  ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(oldValue);
  if (records != null) {
    records.remove(indexKey);
    if (records.size() == 0) {
      mapRecords.remove(oldValue);
      sortedSet.remove(oldValue);
    }
  }
}","@Override public void removeIndex(Comparable oldValue,Data indexKey){
  takeWriteLock();
  try {
    if (oldValue instanceof IndexImpl.NullObject) {
      recordsWithNullValue.remove(indexKey);
    }
 else {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(oldValue);
      if (records != null) {
        records.remove(indexKey);
        if (records.size() == 0) {
          recordMap.remove(oldValue);
        }
      }
    }
  }
  finally {
    releaseWriteLock();
  }
}",0.6246851385390428
47700,"@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  Set<Comparable> values=sortedSet.subSet(from,to);
  for (  Comparable value : values) {
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
    if (records != null) {
      results.addResultSet(records);
    }
  }
  ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(to);
  if (records != null) {
    results.addResultSet(records);
  }
}","@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  takeReadLock();
  try {
    SortedMap<Comparable,ConcurrentMap<Data,QueryableEntry>> subMap=recordMap.subMap(from,true,to,true);
    for (    ConcurrentMap<Data,QueryableEntry> value : subMap.values()) {
      results.addResultSet(value);
    }
  }
  finally {
    releaseReadLock();
  }
}",0.5146886016451234
47701,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + mapRecords.size() + '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + recordMap.size() + '}';
}",0.9592760180995475
47702,"@Override public void newIndex(Comparable newValue,QueryableEntry record){
  ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(newValue);
  if (records == null) {
    records=new ConcurrentHashMap<Data,QueryableEntry>(1,LOAD_FACTOR,1);
    mapRecords.put(newValue,records);
    if (!(newValue instanceof IndexImpl.NullObject)) {
      sortedSet.add(newValue);
    }
  }
  records.put(record.getIndexKey(),record);
}","@Override public void newIndex(Comparable newValue,QueryableEntry record){
  takeWriteLock();
  try {
    if (newValue instanceof IndexImpl.NullObject) {
      recordsWithNullValue.put(record.getIndexKey(),record);
    }
 else {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(newValue);
      if (records == null) {
        records=new ConcurrentHashMap<Data,QueryableEntry>(1,LOAD_FACTOR,1);
        recordMap.put(newValue,records);
      }
      records.put(record.getIndexKey(),record);
    }
  }
  finally {
    releaseWriteLock();
  }
}",0.6469387755102041
47703,"@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  takeReadLock();
  try {
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records=null;
      if (value instanceof IndexImpl.NullObject) {
        records=recordsWithNullValue;
      }
 else {
        records=recordMap.get(value);
      }
      if (records != null) {
        results.addResultSet(records);
      }
    }
  }
  finally {
    releaseReadLock();
  }
}","@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  takeReadLock();
  try {
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records;
      if (value instanceof IndexImpl.NullObject) {
        records=recordsWithNullValue;
      }
 else {
        records=recordMap.get(value);
      }
      if (records != null) {
        results.addResultSet(records);
      }
    }
  }
  finally {
    releaseReadLock();
  }
}",0.994775339602926
47704,"@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  takeReadLock();
  try {
    SortedMap<Comparable,ConcurrentMap<Data,QueryableEntry>> subMap=recordMap.subMap(from,to);
    for (    ConcurrentMap<Data,QueryableEntry> value : subMap.values()) {
      results.addResultSet(value);
    }
  }
  finally {
    releaseReadLock();
  }
}","@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  takeReadLock();
  try {
    SortedMap<Comparable,ConcurrentMap<Data,QueryableEntry>> subMap=recordMap.subMap(from,true,to,true);
    for (    ConcurrentMap<Data,QueryableEntry> value : subMap.values()) {
      results.addResultSet(value);
    }
  }
  finally {
    releaseReadLock();
  }
}",0.984375
47705,"@Override public void getSubRecords(MultiResultSet results,ComparisonType comparisonType,Comparable searchedValue){
  takeReadLock();
  try {
    Set<Comparable> values=mapRecords.keySet();
    for (    Comparable value : values) {
      boolean valid;
      int result=value.compareTo(searchedValue);
switch (comparisonType) {
case LESSER:
        valid=result < 0;
      break;
case LESSER_EQUAL:
    valid=result <= 0;
  break;
case GREATER:
valid=result > 0;
break;
case GREATER_EQUAL:
valid=result >= 0;
break;
case NOT_EQUAL:
valid=result != 0;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + comparisonType);
}
if (valid) {
ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
if (records != null) {
results.addResultSet(records);
}
}
}
}
  finally {
releaseReadLock();
}
}","@Override public void getSubRecords(MultiResultSet results,ComparisonType comparisonType,Comparable searchedValue){
  takeReadLock();
  try {
    Set<Comparable> values=recordMap.keySet();
    for (    Comparable value : values) {
      boolean valid;
      int result=value.compareTo(searchedValue);
switch (comparisonType) {
case LESSER:
        valid=result < 0;
      break;
case LESSER_EQUAL:
    valid=result <= 0;
  break;
case GREATER:
valid=result > 0;
break;
case GREATER_EQUAL:
valid=result >= 0;
break;
case NOT_EQUAL:
valid=result != 0;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + comparisonType);
}
if (valid) {
ConcurrentMap<Data,QueryableEntry> records=recordMap.get(value);
if (records != null) {
results.addResultSet(records);
}
}
}
}
  finally {
releaseReadLock();
}
}",0.976629766297663
47706,"@Override public ConcurrentMap<Data,QueryableEntry> getRecordMap(Comparable indexValue){
  takeReadLock();
  try {
    return mapRecords.get(indexValue);
  }
  finally {
    releaseReadLock();
  }
}","@Override public ConcurrentMap<Data,QueryableEntry> getRecordMap(Comparable value){
  takeReadLock();
  try {
    if (value instanceof IndexImpl.NullObject) {
      return recordsWithNullValue;
    }
 else {
      return recordMap.get(value);
    }
  }
  finally {
    releaseReadLock();
  }
}",0.5498981670061099
47707,"@Override public void clear(){
  takeWriteLock();
  try {
    mapRecords.clear();
  }
  finally {
    releaseWriteLock();
  }
}","@Override public void clear(){
  takeWriteLock();
  try {
    recordsWithNullValue.clear();
    recordMap.clear();
  }
  finally {
    releaseWriteLock();
  }
}",0.8571428571428571
47708,"@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  takeReadLock();
  try {
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
      if (records != null) {
        results.addResultSet(records);
      }
    }
  }
  finally {
    releaseReadLock();
  }
}","@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  takeReadLock();
  try {
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records;
      if (value instanceof IndexImpl.NullObject) {
        records=recordsWithNullValue;
      }
 else {
        records=recordMap.get(value);
      }
      if (records != null) {
        results.addResultSet(records);
      }
    }
  }
  finally {
    releaseReadLock();
  }
}",0.818955042527339
47709,"@Override public void removeIndex(Comparable oldValue,Data indexKey){
  takeWriteLock();
  try {
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(oldValue);
    if (records != null) {
      records.remove(indexKey);
      if (records.size() == 0) {
        mapRecords.remove(oldValue);
      }
    }
  }
  finally {
    releaseWriteLock();
  }
}","@Override public void removeIndex(Comparable oldValue,Data indexKey){
  takeWriteLock();
  try {
    if (oldValue instanceof IndexImpl.NullObject) {
      recordsWithNullValue.remove(indexKey);
    }
 else {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(oldValue);
      if (records != null) {
        records.remove(indexKey);
        if (records.size() == 0) {
          recordMap.remove(oldValue);
        }
      }
    }
  }
  finally {
    releaseWriteLock();
  }
}",0.8
47710,"@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  takeReadLock();
  try {
    Comparable paramFrom=from;
    Comparable paramTo=to;
    int trend=paramFrom.compareTo(paramTo);
    if (trend == 0) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(paramFrom);
      if (records != null) {
        results.addResultSet(records);
      }
      return;
    }
    if (trend < 0) {
      Comparable oldFrom=paramFrom;
      paramFrom=to;
      paramTo=oldFrom;
    }
    Set<Comparable> values=mapRecords.keySet();
    for (    Comparable value : values) {
      if (value.compareTo(paramFrom) <= 0 && value.compareTo(paramTo) >= 0) {
        ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
        if (records != null) {
          results.addResultSet(records);
        }
      }
    }
  }
  finally {
    releaseReadLock();
  }
}","@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  takeReadLock();
  try {
    Comparable paramFrom=from;
    Comparable paramTo=to;
    int trend=paramFrom.compareTo(paramTo);
    if (trend == 0) {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(paramFrom);
      if (records != null) {
        results.addResultSet(records);
      }
      return;
    }
    if (trend < 0) {
      Comparable oldFrom=paramFrom;
      paramFrom=to;
      paramTo=oldFrom;
    }
    Set<Comparable> values=recordMap.keySet();
    for (    Comparable value : values) {
      if (value.compareTo(paramFrom) <= 0 && value.compareTo(paramTo) >= 0) {
        ConcurrentMap<Data,QueryableEntry> records=recordMap.get(value);
        if (records != null) {
          results.addResultSet(records);
        }
      }
    }
  }
  finally {
    releaseReadLock();
  }
}",0.9685603971318256
47711,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + mapRecords.size() + '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + recordMap.size() + '}';
}",0.9592760180995475
47712,"@Override public void newIndex(Comparable newValue,QueryableEntry record){
  takeWriteLock();
  try {
    Data indexKey=record.getIndexKey();
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(newValue);
    if (records == null) {
      records=new ConcurrentHashMap<Data,QueryableEntry>();
      ConcurrentMap<Data,QueryableEntry> existing=mapRecords.putIfAbsent(newValue,records);
      if (existing != null) {
        records=existing;
      }
    }
    records.put(indexKey,record);
  }
  finally {
    releaseWriteLock();
  }
}","@Override public void newIndex(Comparable newValue,QueryableEntry record){
  takeWriteLock();
  try {
    if (newValue instanceof IndexImpl.NullObject) {
      recordsWithNullValue.put(record.getIndexKey(),record);
    }
 else {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(newValue);
      if (records == null) {
        records=new ConcurrentHashMap<Data,QueryableEntry>(1,LOAD_FACTOR,1);
        recordMap.put(newValue,records);
      }
      records.put(record.getIndexKey(),record);
    }
  }
  finally {
    releaseWriteLock();
  }
}",0.2672727272727273
47713,"@Override public void newIndex(Comparable newValue,QueryableEntry record){
  takeWriteLock();
  try {
    if (newValue instanceof IndexImpl.NullObject) {
      recordsWithNullValue.put(record.getIndexKey(),record);
    }
 else {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(newValue);
      if (records == null) {
        records=new ConcurrentHashMap<Data,QueryableEntry>(1,0.75f,1);
        recordMap.put(newValue,records);
      }
      records.put(record.getIndexKey(),record);
    }
  }
  finally {
    releaseWriteLock();
  }
}","@Override public void newIndex(Comparable newValue,QueryableEntry record){
  takeWriteLock();
  try {
    if (newValue instanceof IndexImpl.NullObject) {
      recordsWithNullValue.put(record.getIndexKey(),record);
    }
 else {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(newValue);
      if (records == null) {
        records=new ConcurrentHashMap<Data,QueryableEntry>(1,LOAD_FACTOR,1);
        recordMap.put(newValue,records);
      }
      records.put(record.getIndexKey(),record);
    }
  }
  finally {
    releaseWriteLock();
  }
}",0.9855595667870036
47714,"@Test(timeout=30000) public void testSemaphoreWithFailures() throws InterruptedException {
  final int k=4;
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k + 1);
  final HazelcastInstance[] instances=factory.newInstances();
  final ISemaphore semaphore=instances[k].getSemaphore(""String_Node_Str"");
  int initialPermits=20;
  semaphore.init(initialPermits);
  for (int i=0; i < k; i++) {
    int rand=(int)(Math.random() * 5) + 1;
    semaphore.acquire(rand);
    initialPermits-=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    semaphore.release(rand);
    initialPermits+=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    instances[i].getLifecycleService().shutdown();
    semaphore.acquire(rand);
    initialPermits-=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    semaphore.release(rand);
    initialPermits+=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
  }
}","@Test(timeout=120000) public void testSemaphoreWithFailures() throws InterruptedException {
  final int k=4;
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k + 1);
  final HazelcastInstance[] instances=factory.newInstances();
  final ISemaphore semaphore=instances[k].getSemaphore(""String_Node_Str"");
  int initialPermits=20;
  semaphore.init(initialPermits);
  for (int i=0; i < k; i++) {
    int rand=(int)(Math.random() * 5) + 1;
    semaphore.acquire(rand);
    initialPermits-=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    semaphore.release(rand);
    initialPermits+=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    instances[i].shutdown();
    semaphore.acquire(rand);
    initialPermits-=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    semaphore.release(rand);
    initialPermits+=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
  }
}",0.9841107124551512
47715,"@Test(timeout=30000) public void testSemaphoreWithFailuresAndJoin(){
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  final HazelcastInstance instance1=factory.newHazelcastInstance();
  final HazelcastInstance instance2=factory.newHazelcastInstance();
  final ISemaphore semaphore=instance1.getSemaphore(""String_Node_Str"");
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  assertTrue(semaphore.init(0));
  final Thread thread=new Thread(){
    public void run(){
      for (int i=0; i < 2; i++) {
        try {
          semaphore.acquire();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      countDownLatch.countDown();
    }
  }
;
  thread.start();
  instance2.getLifecycleService().shutdown();
  semaphore.release();
  HazelcastInstance instance3=factory.newHazelcastInstance();
  ISemaphore semaphore1=instance3.getSemaphore(""String_Node_Str"");
  semaphore1.release();
  try {
    assertTrue(countDownLatch.await(15,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    thread.interrupt();
  }
}","@Test(timeout=120000) public void testSemaphoreWithFailuresAndJoin(){
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  final HazelcastInstance instance1=factory.newHazelcastInstance();
  final HazelcastInstance instance2=factory.newHazelcastInstance();
  final ISemaphore semaphore=instance1.getSemaphore(""String_Node_Str"");
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  assertTrue(semaphore.init(0));
  final Thread thread=new Thread(){
    public void run(){
      for (int i=0; i < 2; i++) {
        try {
          semaphore.acquire();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      countDownLatch.countDown();
    }
  }
;
  thread.start();
  instance2.shutdown();
  semaphore.release();
  HazelcastInstance instance3=factory.newHazelcastInstance();
  ISemaphore semaphore1=instance3.getSemaphore(""String_Node_Str"");
  semaphore1.release();
  try {
    assertTrue(countDownLatch.await(15,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    thread.interrupt();
  }
}",0.9890494962768288
47716,"@Test(timeout=30000) public void testMutex() throws InterruptedException {
  final int threadCount=2;
  final HazelcastInstance[] instances=createHazelcastInstanceFactory(threadCount).newInstances();
  final CountDownLatch latch=new CountDownLatch(threadCount);
  final int loopCount=1000;
class Counter {
    int count=0;
    void inc(){
      count++;
    }
    int get(){
      return count;
    }
  }
  final Counter counter=new Counter();
  assertTrue(instances[0].getSemaphore(""String_Node_Str"").init(1));
  for (int i=0; i < threadCount; i++) {
    final ISemaphore semaphore=instances[i].getSemaphore(""String_Node_Str"");
    new Thread(){
      public void run(){
        for (int j=0; j < loopCount; j++) {
          try {
            semaphore.acquire();
            sleepMillis((int)(Math.random() * 3));
            counter.inc();
          }
 catch (          InterruptedException e) {
            return;
          }
 finally {
            semaphore.release();
          }
        }
        latch.countDown();
      }
    }
.start();
  }
  assertOpenEventually(latch);
  assertEquals(loopCount * threadCount,counter.get());
}","@Test(timeout=120000) public void testMutex() throws InterruptedException {
  final int threadCount=2;
  final HazelcastInstance[] instances=createHazelcastInstanceFactory(threadCount).newInstances();
  final CountDownLatch latch=new CountDownLatch(threadCount);
  final int loopCount=1000;
class Counter {
    int count=0;
    void inc(){
      count++;
    }
    int get(){
      return count;
    }
  }
  final Counter counter=new Counter();
  assertTrue(instances[0].getSemaphore(""String_Node_Str"").init(1));
  for (int i=0; i < threadCount; i++) {
    final ISemaphore semaphore=instances[i].getSemaphore(""String_Node_Str"");
    new Thread(){
      public void run(){
        for (int j=0; j < loopCount; j++) {
          try {
            semaphore.acquire();
            sleepMillis((int)(Math.random() * 3));
            counter.inc();
          }
 catch (          InterruptedException e) {
            return;
          }
 finally {
            semaphore.release();
          }
        }
        latch.countDown();
      }
    }
.start();
  }
  assertOpenEventually(latch);
  assertEquals(loopCount * threadCount,counter.get());
}",0.998683633172444
47717,"@Override public void updateIndex(Comparable oldValue,Comparable newValue,QueryableEntry entry){
  ensureNotLocked();
  takeLock();
  try {
    removeIndex(oldValue,entry.getIndexKey());
    newIndex(newValue,entry);
  }
  finally {
    releaseLock();
  }
}","@Override public void updateIndex(Comparable oldValue,Comparable newValue,QueryableEntry entry){
  takeWriteLock();
  try {
    removeIndex(oldValue,entry.getIndexKey());
    newIndex(newValue,entry);
  }
  finally {
    releaseWriteLock();
  }
}",0.4652087475149105
47718,"@Override public void getSubRecords(MultiResultSet results,ComparisonType comparisonType,Comparable searchedValue){
  ensureNotLocked();
  readerCount.incrementAndGet();
  try {
    Set<Comparable> values;
    boolean notEqual=false;
switch (comparisonType) {
case LESSER:
      values=sortedSet.headSet(searchedValue,false);
    break;
case LESSER_EQUAL:
  values=sortedSet.headSet(searchedValue,true);
break;
case GREATER:
values=sortedSet.tailSet(searchedValue,false);
break;
case GREATER_EQUAL:
values=sortedSet.tailSet(searchedValue,true);
break;
case NOT_EQUAL:
values=sortedSet;
notEqual=true;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + comparisonType);
}
for (Comparable value : values) {
if (notEqual && searchedValue.equals(value)) {
continue;
}
ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
if (records != null) {
results.addResultSet(records);
}
}
}
  finally {
readerCount.decrementAndGet();
}
}","@Override public void getSubRecords(MultiResultSet results,ComparisonType comparisonType,Comparable searchedValue){
  takeReadLock();
  try {
    Set<Comparable> values;
    boolean notEqual=false;
switch (comparisonType) {
case LESSER:
      values=sortedSet.headSet(searchedValue,false);
    break;
case LESSER_EQUAL:
  values=sortedSet.headSet(searchedValue,true);
break;
case GREATER:
values=sortedSet.tailSet(searchedValue,false);
break;
case GREATER_EQUAL:
values=sortedSet.tailSet(searchedValue,true);
break;
case NOT_EQUAL:
values=sortedSet;
notEqual=true;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + comparisonType);
}
for (Comparable value : values) {
if (notEqual && searchedValue.equals(value)) {
continue;
}
ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
if (records != null) {
results.addResultSet(records);
}
}
}
  finally {
releaseReadLock();
}
}",0.9517684887459807
47719,"@Override public ConcurrentMap<Data,QueryableEntry> getRecordMap(Comparable indexValue){
  ensureNotLocked();
  readerCount.incrementAndGet();
  try {
    return mapRecords.get(indexValue);
  }
  finally {
    readerCount.decrementAndGet();
  }
}","@Override public ConcurrentMap<Data,QueryableEntry> getRecordMap(Comparable indexValue){
  takeReadLock();
  try {
    return mapRecords.get(indexValue);
  }
  finally {
    releaseReadLock();
  }
}",0.8243243243243243
47720,"@Override public void clear(){
  ensureNotLocked();
  takeLock();
  try {
    mapRecords.clear();
    sortedSet.clear();
  }
  finally {
    releaseLock();
  }
}","@Override public void clear(){
  takeWriteLock();
  try {
    mapRecords.clear();
    sortedSet.clear();
  }
  finally {
    releaseWriteLock();
  }
}",0.9003215434083601
47721,"@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  ensureNotLocked();
  readerCount.incrementAndGet();
  try {
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
      if (records != null) {
        results.addResultSet(records);
      }
    }
  }
  finally {
    readerCount.decrementAndGet();
  }
}","@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  takeReadLock();
  try {
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
      if (records != null) {
        results.addResultSet(records);
      }
    }
  }
  finally {
    releaseReadLock();
  }
}",0.8787061994609164
47722,"@Override public void removeIndex(Comparable oldValue,Data indexKey){
  ensureNotLocked();
  takeLock();
  try {
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(oldValue);
    if (records != null) {
      records.remove(indexKey);
      if (records.size() == 0) {
        mapRecords.remove(oldValue);
        sortedSet.remove(oldValue);
      }
    }
  }
  finally {
    releaseLock();
  }
}","@Override public void removeIndex(Comparable oldValue,Data indexKey){
  takeWriteLock();
  try {
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(oldValue);
    if (records != null) {
      records.remove(indexKey);
      if (records.size() == 0) {
        mapRecords.remove(oldValue);
        sortedSet.remove(oldValue);
      }
    }
  }
  finally {
    releaseWriteLock();
  }
}",0.9586983729662076
47723,"@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  ensureNotLocked();
  readerCount.incrementAndGet();
  try {
    Set<Comparable> values=sortedSet.subSet(from,to);
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
      if (records != null) {
        results.addResultSet(records);
      }
    }
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(to);
    if (records != null) {
      results.addResultSet(records);
    }
  }
  finally {
    readerCount.decrementAndGet();
  }
}","@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  takeReadLock();
  try {
    Set<Comparable> values=sortedSet.subSet(from,to);
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
      if (records != null) {
        results.addResultSet(records);
      }
    }
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(to);
    if (records != null) {
      results.addResultSet(records);
    }
  }
  finally {
    releaseReadLock();
  }
}",0.922279792746114
47724,"@Override public void newIndex(Comparable newValue,QueryableEntry record){
  ensureNotLocked();
  takeLock();
  try {
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(newValue);
    if (records == null) {
      records=new ConcurrentHashMap<Data,QueryableEntry>(1,LOAD_FACTOR,1);
      mapRecords.put(newValue,records);
      if (!(newValue instanceof IndexImpl.NullObject)) {
        sortedSet.add(newValue);
      }
    }
    records.put(record.getIndexKey(),record);
  }
  finally {
    releaseLock();
  }
}","@Override public void newIndex(Comparable newValue,QueryableEntry record){
  takeWriteLock();
  try {
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(newValue);
    if (records == null) {
      records=new ConcurrentHashMap<Data,QueryableEntry>(1,LOAD_FACTOR,1);
      mapRecords.put(newValue,records);
      if (!(newValue instanceof IndexImpl.NullObject)) {
        sortedSet.add(newValue);
      }
    }
    records.put(record.getIndexKey(),record);
  }
  finally {
    releaseWriteLock();
  }
}",0.9681159420289857
47725,"@Override public void updateIndex(Comparable oldValue,Comparable newValue,QueryableEntry entry){
  ensureNotLocked();
  takeLock();
  try {
    removeIndex(oldValue,entry.getIndexKey());
    newIndex(newValue,entry);
  }
  finally {
    releaseLock();
  }
}","@Override public void updateIndex(Comparable oldValue,Comparable newValue,QueryableEntry entry){
  takeWriteLock();
  try {
    removeIndex(oldValue,entry.getIndexKey());
    newIndex(newValue,entry);
  }
  finally {
    releaseWriteLock();
  }
}",0.4652087475149105
47726,"@Override public void getSubRecords(MultiResultSet results,ComparisonType comparisonType,Comparable searchedValue){
  ensureNotLocked();
  readerCount.incrementAndGet();
  try {
    Set<Comparable> values=mapRecords.keySet();
    for (    Comparable value : values) {
      boolean valid;
      int result=value.compareTo(searchedValue);
switch (comparisonType) {
case LESSER:
        valid=result < 0;
      break;
case LESSER_EQUAL:
    valid=result <= 0;
  break;
case GREATER:
valid=result > 0;
break;
case GREATER_EQUAL:
valid=result >= 0;
break;
case NOT_EQUAL:
valid=result != 0;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + comparisonType);
}
if (valid) {
ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
if (records != null) {
results.addResultSet(records);
}
}
}
}
  finally {
readerCount.decrementAndGet();
}
}","@Override public void getSubRecords(MultiResultSet results,ComparisonType comparisonType,Comparable searchedValue){
  takeReadLock();
  try {
    Set<Comparable> values=mapRecords.keySet();
    for (    Comparable value : values) {
      boolean valid;
      int result=value.compareTo(searchedValue);
switch (comparisonType) {
case LESSER:
        valid=result < 0;
      break;
case LESSER_EQUAL:
    valid=result <= 0;
  break;
case GREATER:
valid=result > 0;
break;
case GREATER_EQUAL:
valid=result >= 0;
break;
case NOT_EQUAL:
valid=result != 0;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + comparisonType);
}
if (valid) {
ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
if (records != null) {
results.addResultSet(records);
}
}
}
}
  finally {
releaseReadLock();
}
}",0.9463007159904536
47727,"@Override public ConcurrentMap<Data,QueryableEntry> getRecordMap(Comparable indexValue){
  ensureNotLocked();
  readerCount.incrementAndGet();
  try {
    return mapRecords.get(indexValue);
  }
  finally {
    readerCount.decrementAndGet();
  }
}","@Override public ConcurrentMap<Data,QueryableEntry> getRecordMap(Comparable indexValue){
  takeReadLock();
  try {
    return mapRecords.get(indexValue);
  }
  finally {
    releaseReadLock();
  }
}",0.8243243243243243
47728,"@Override public void clear(){
  ensureNotLocked();
  takeLock();
  try {
    mapRecords.clear();
  }
  finally {
    releaseLock();
  }
}","@Override public void clear(){
  takeWriteLock();
  try {
    mapRecords.clear();
  }
  finally {
    releaseWriteLock();
  }
}",0.8830188679245283
47729,"@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  ensureNotLocked();
  readerCount.incrementAndGet();
  try {
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
      if (records != null) {
        results.addResultSet(records);
      }
    }
  }
  finally {
    readerCount.decrementAndGet();
  }
}","@Override public void getRecords(MultiResultSet results,Set<Comparable> values){
  takeReadLock();
  try {
    for (    Comparable value : values) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
      if (records != null) {
        results.addResultSet(records);
      }
    }
  }
  finally {
    releaseReadLock();
  }
}",0.8787061994609164
47730,"@Override public void removeIndex(Comparable oldValue,Data indexKey){
  ensureNotLocked();
  takeLock();
  try {
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(oldValue);
    if (records != null) {
      records.remove(indexKey);
      if (records.size() == 0) {
        mapRecords.remove(oldValue);
      }
    }
  }
  finally {
    releaseLock();
  }
}","@Override public void removeIndex(Comparable oldValue,Data indexKey){
  takeWriteLock();
  try {
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(oldValue);
    if (records != null) {
      records.remove(indexKey);
      if (records.size() == 0) {
        mapRecords.remove(oldValue);
      }
    }
  }
  finally {
    releaseWriteLock();
  }
}",0.9546079779917468
47731,"@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  ensureNotLocked();
  readerCount.incrementAndGet();
  try {
    Comparable paramFrom=from;
    Comparable paramTo=to;
    int trend=paramFrom.compareTo(paramTo);
    if (trend == 0) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(paramFrom);
      if (records != null) {
        results.addResultSet(records);
      }
      return;
    }
    if (trend < 0) {
      Comparable oldFrom=paramFrom;
      paramFrom=to;
      paramTo=oldFrom;
    }
    Set<Comparable> values=mapRecords.keySet();
    for (    Comparable value : values) {
      if (value.compareTo(paramFrom) <= 0 && value.compareTo(paramTo) >= 0) {
        ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
        if (records != null) {
          results.addResultSet(records);
        }
      }
    }
  }
  finally {
    readerCount.decrementAndGet();
  }
}","@Override public void getSubRecordsBetween(MultiResultSet results,Comparable from,Comparable to){
  takeReadLock();
  try {
    Comparable paramFrom=from;
    Comparable paramTo=to;
    int trend=paramFrom.compareTo(paramTo);
    if (trend == 0) {
      ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(paramFrom);
      if (records != null) {
        results.addResultSet(records);
      }
      return;
    }
    if (trend < 0) {
      Comparable oldFrom=paramFrom;
      paramFrom=to;
      paramTo=oldFrom;
    }
    Set<Comparable> values=mapRecords.keySet();
    for (    Comparable value : values) {
      if (value.compareTo(paramFrom) <= 0 && value.compareTo(paramTo) >= 0) {
        ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(value);
        if (records != null) {
          results.addResultSet(records);
        }
      }
    }
  }
  finally {
    releaseReadLock();
  }
}",0.9517167381974247
47732,"@Override public void newIndex(Comparable newValue,QueryableEntry record){
  ensureNotLocked();
  takeLock();
  try {
    Data indexKey=record.getIndexKey();
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(newValue);
    if (records == null) {
      records=new ConcurrentHashMap<Data,QueryableEntry>();
      ConcurrentMap<Data,QueryableEntry> existing=mapRecords.putIfAbsent(newValue,records);
      if (existing != null) {
        records=existing;
      }
    }
    records.put(indexKey,record);
  }
  finally {
    releaseLock();
  }
}","@Override public void newIndex(Comparable newValue,QueryableEntry record){
  takeWriteLock();
  try {
    Data indexKey=record.getIndexKey();
    ConcurrentMap<Data,QueryableEntry> records=mapRecords.get(newValue);
    if (records == null) {
      records=new ConcurrentHashMap<Data,QueryableEntry>();
      ConcurrentMap<Data,QueryableEntry> existing=mapRecords.putIfAbsent(newValue,records);
      if (existing != null) {
        records=existing;
      }
    }
    records.put(indexKey,record);
  }
  finally {
    releaseWriteLock();
  }
}",0.9699179580674568
47733,"@Override public void updateIndex(Comparable oldValue,Comparable newValue,QueryableEntry entry){
  if (oldValue.equals(newValue)) {
    return;
  }
  ensureNotLocked();
  takeLock();
  try {
    removeIndex(oldValue,entry.getIndexKey());
    newIndex(newValue,entry);
  }
  finally {
    releaseLock();
  }
}","@Override public void updateIndex(Comparable oldValue,Comparable newValue,QueryableEntry entry){
  ensureNotLocked();
  takeLock();
  try {
    removeIndex(oldValue,entry.getIndexKey());
    newIndex(newValue,entry);
  }
  finally {
    releaseLock();
  }
}",0.9097345132743364
47734,"@Override public Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue){
  beforeRead();
  try {
    MultiResultSet results=new MultiResultSet();
    if (attributeType != null) {
      indexStore.getSubRecords(results,comparisonType,convert(searchedValue));
    }
    return results;
  }
  finally {
    afterRead();
  }
}","@Override public Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue){
  MultiResultSet results=new MultiResultSet();
  if (attributeType != null) {
    indexStore.getSubRecords(results,comparisonType,convert(searchedValue));
  }
  return results;
}",0.7620528771384136
47735,"@Override public synchronized void saveEntryIndex(QueryableEntry e) throws QueryException {
  beforeWrite();
  try {
    if (attributeType == null) {
      attributeType=e.getAttributeType(attribute);
    }
    Data key=e.getIndexKey();
    Comparable oldValue=recordValues.remove(key);
    Comparable newValue=e.getAttribute(attribute);
    if (newValue == null) {
      newValue=NULL;
    }
 else     if (newValue.getClass().isEnum()) {
      newValue=TypeConverters.ENUM_CONVERTER.convert(newValue);
    }
    recordValues.put(key,newValue);
    if (oldValue == null) {
      indexStore.newIndex(newValue,e);
    }
 else {
      indexStore.removeIndex(oldValue,key);
      indexStore.newIndex(newValue,e);
    }
  }
  finally {
    afterWrite();
  }
}","@Override public void saveEntryIndex(QueryableEntry e) throws QueryException {
  if (attributeType == null) {
    attributeType=e.getAttributeType(attribute);
  }
  Data key=e.getIndexKey();
  Comparable oldValue=recordValues.remove(key);
  Comparable newValue=e.getAttribute(attribute);
  if (newValue == null) {
    newValue=NULL;
  }
 else   if (newValue.getClass().isEnum()) {
    newValue=TypeConverters.ENUM_CONVERTER.convert(newValue);
  }
  recordValues.put(key,newValue);
  if (oldValue == null) {
    indexStore.newIndex(newValue,e);
  }
 else {
    indexStore.updateIndex(oldValue,newValue,e);
  }
}",0.8211143695014663
47736,"@Override public Set<QueryableEntry> getRecords(Comparable value){
  beforeRead();
  try {
    if (attributeType != null) {
      return indexStore.getRecords(convert(value));
    }
 else {
      return new SingleResultSet(null);
    }
  }
  finally {
    afterRead();
  }
}","@Override public Set<QueryableEntry> getRecords(Comparable value){
  if (attributeType != null) {
    return indexStore.getRecords(convert(value));
  }
 else {
    return new SingleResultSet(null);
  }
}",0.8511530398322851
47737,"@Override public Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to){
  beforeRead();
  try {
    MultiResultSet results=new MultiResultSet();
    if (attributeType != null) {
      indexStore.getSubRecordsBetween(results,convert(from),convert(to));
    }
    return results;
  }
  finally {
    afterRead();
  }
}","@Override public Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to){
  MultiResultSet results=new MultiResultSet();
  if (attributeType != null) {
    indexStore.getSubRecordsBetween(results,convert(from),convert(to));
  }
  return results;
}",0.7437185929648241
47738,"@Override public Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue){
  MultiResultSet results=new MultiResultSet();
  if (attributeType != null) {
    indexStore.getSubRecords(results,comparisonType,convert(searchedValue));
  }
  return results;
}","@Override public Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue){
  beforeRead();
  try {
    MultiResultSet results=new MultiResultSet();
    if (attributeType != null) {
      indexStore.getSubRecords(results,comparisonType,convert(searchedValue));
    }
    return results;
  }
  finally {
    afterRead();
  }
}",0.8398133748055988
47739,"@Override public void saveEntryIndex(QueryableEntry e) throws QueryException {
  if (attributeType == null) {
    attributeType=e.getAttributeType(attribute);
  }
  Data key=e.getIndexKey();
  Comparable oldValue=recordValues.remove(key);
  Comparable newValue=e.getAttribute(attribute);
  if (newValue == null) {
    newValue=NULL;
  }
 else   if (newValue.getClass().isEnum()) {
    newValue=TypeConverters.ENUM_CONVERTER.convert(newValue);
  }
  recordValues.put(key,newValue);
  if (oldValue == null) {
    indexStore.newIndex(newValue,e);
  }
 else {
    indexStore.removeIndex(oldValue,key);
    indexStore.newIndex(newValue,e);
  }
}","@Override public synchronized void saveEntryIndex(QueryableEntry e) throws QueryException {
  beforeWrite();
  try {
    if (attributeType == null) {
      attributeType=e.getAttributeType(attribute);
    }
    Data key=e.getIndexKey();
    Comparable oldValue=recordValues.remove(key);
    Comparable newValue=e.getAttribute(attribute);
    if (newValue == null) {
      newValue=NULL;
    }
 else     if (newValue.getClass().isEnum()) {
      newValue=TypeConverters.ENUM_CONVERTER.convert(newValue);
    }
    recordValues.put(key,newValue);
    if (oldValue == null) {
      indexStore.newIndex(newValue,e);
    }
 else {
      indexStore.removeIndex(oldValue,key);
      indexStore.newIndex(newValue,e);
    }
  }
  finally {
    afterWrite();
  }
}",0.9167862266857962
47740,"@Override public Set<QueryableEntry> getRecords(Comparable value){
  if (attributeType != null) {
    return indexStore.getRecords(convert(value));
  }
 else {
    return new SingleResultSet(null);
  }
}","@Override public Set<QueryableEntry> getRecords(Comparable value){
  beforeRead();
  try {
    if (attributeType != null) {
      return indexStore.getRecords(convert(value));
    }
 else {
      return new SingleResultSet(null);
    }
  }
  finally {
    afterRead();
  }
}",0.7966457023060797
47741,"@Override public Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to){
  MultiResultSet results=new MultiResultSet();
  if (attributeType != null) {
    indexStore.getSubRecordsBetween(results,convert(from),convert(to));
  }
  return results;
}","@Override public Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to){
  beforeRead();
  try {
    MultiResultSet results=new MultiResultSet();
    if (attributeType != null) {
      indexStore.getSubRecordsBetween(results,convert(from),convert(to));
    }
    return results;
  }
  finally {
    afterRead();
  }
}",0.8274706867671692
47742,"@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  final boolean isBufferObjectDataOutput=out instanceof BufferObjectDataOutput;
  final BufferObjectDataOutput bufferObjectDataOutput=isBufferObjectDataOutput ? (BufferObjectDataOutput)out : null;
  int i;
  int c;
  int bufferPos=0;
  int utfLength=0;
  int utfLengthLimit;
  int pos=0;
  if (isBufferObjectDataOutput) {
    utfLengthLimit=str.length() * 3;
    pos=bufferObjectDataOutput.position();
    bufferObjectDataOutput.writeShort(0);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(false);
    }
  }
 else {
    utfLength=calculateUtf8Length(str,beginIndex,endIndex);
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    utfLengthLimit=utfLength;
    out.writeShort(utfLength);
    if (ASCII_AWARE) {
      out.writeBoolean(false);
    }
  }
  if (buffer.length >= utfLengthLimit) {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0) {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else       if (c > 0x007F) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)c;
      }
    }
    out.write(buffer,0,bufferPos);
    if (isBufferObjectDataOutput) {
      utfLength=bufferPos;
    }
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    if (isBufferObjectDataOutput) {
      utfLength=i - beginIndex;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=2;
        }
      }
 else       if (c > 0x007F) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=3;
        }
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
        if (isBufferObjectDataOutput) {
          utfLength++;
        }
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
  if (isBufferObjectDataOutput) {
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    bufferObjectDataOutput.writeShort(pos,utfLength);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(pos + 2,utfLength == str.length());
    }
  }
}","@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  final boolean isBufferObjectDataOutput=out instanceof BufferObjectDataOutput;
  final BufferObjectDataOutput bufferObjectDataOutput=isBufferObjectDataOutput ? (BufferObjectDataOutput)out : null;
  int i;
  int c;
  int bufferPos=0;
  int utfLength=0;
  int utfLengthLimit;
  int pos=0;
  if (isBufferObjectDataOutput) {
    utfLengthLimit=str.length() * 3;
    pos=bufferObjectDataOutput.position();
    bufferObjectDataOutput.writeShort(0);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(false);
    }
  }
 else {
    utfLength=calculateUtf8Length(str,beginIndex,endIndex);
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    utfLengthLimit=utfLength;
    out.writeShort(utfLength);
    if (ASCII_AWARE) {
      out.writeBoolean(false);
    }
  }
  if (buffer.length >= utfLengthLimit) {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!(c <= 0x007F && c >= 0x0001)) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if ((c >= 0x0001) && (c <= 0x007F)) {
        buffer[bufferPos++]=(byte)c;
      }
 else       if (c > 0x07FF) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
    }
    out.write(buffer,0,bufferPos);
    if (isBufferObjectDataOutput) {
      utfLength=bufferPos;
    }
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!(c <= 0x007F && c >= 0x0001)) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    if (isBufferObjectDataOutput) {
      utfLength=i - beginIndex;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0x007F && c >= 0x0001) {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
        if (isBufferObjectDataOutput) {
          utfLength++;
        }
      }
 else       if (c > 0x07FF) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=3;
        }
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=2;
        }
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
  if (isBufferObjectDataOutput) {
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    bufferObjectDataOutput.writeShort(pos,utfLength);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(pos + 2,utfLength == str.length());
    }
  }
}",0.8140911782119598
47743,"private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort();
  final boolean allAscii=ASCII_AWARE ? in.readBoolean() : false;
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  final int bufferLimit=minUtfLenght + 1;
  int readCount=0;
  int bufferPos=1;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  if (allAscii) {
    while (bufferPos != bufferLimit) {
      data[charArrCount++]=(char)(buffer[bufferPos++] & 0xFF);
    }
    for (readCount=bufferPos - 1; readCount < utfLength; readCount++) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      data[charArrCount++]=(char)(buffer[0] & 0xFF);
    }
  }
 else {
    while (bufferPos != bufferLimit) {
      c1=buffer[bufferPos++] & 0xFF;
      if (c1 > 127) {
        bufferPos--;
        break;
      }
      data[charArrCount++]=(char)c1;
    }
    readCount=bufferPos - 1;
    if (bufferPos == bufferLimit) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
    while (readCount < utfLength) {
      cTemp=c1 >> 4;
      if (cTemp >> 3 == 0) {
        data[charArrCount++]=(char)c1;
        readCount++;
      }
 else       if (cTemp == 12 || cTemp == 13) {
        if (readCount + 1 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        if ((c2 & 0xC0) != 0x80) {
          throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
        }
        data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
        readCount+=2;
      }
 else       if (cTemp == 14) {
        if (readCount + 2 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c3=buffer[0] & 0xFF;
        if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
          throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
        }
        data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
        readCount+=3;
      }
 else {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
  }
}","private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort() & 0xFFFF;
  final boolean allAscii=ASCII_AWARE ? in.readBoolean() : false;
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  final int bufferLimit=minUtfLenght + 1;
  int readCount=0;
  int bufferPos=1;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  if (allAscii) {
    while (bufferPos != bufferLimit) {
      data[charArrCount++]=(char)(buffer[bufferPos++] & 0xFF);
    }
    for (readCount=bufferPos - 1; readCount < utfLength; readCount++) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      data[charArrCount++]=(char)(buffer[0] & 0xFF);
    }
  }
 else {
    c1=buffer[bufferPos++] & 0xFF;
    while (bufferPos != bufferLimit) {
      if (c1 > 127) {
        break;
      }
      data[charArrCount++]=(char)c1;
      c1=buffer[bufferPos++] & 0xFF;
    }
    bufferPos--;
    readCount=bufferPos - 1;
    while (readCount < utfLength) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
      c1=buffer[0] & 0xFF;
      cTemp=c1 >> 4;
      if (cTemp >> 3 == 0) {
        data[charArrCount++]=(char)c1;
      }
 else       if (cTemp == 12 || cTemp == 13) {
        if (readCount + 1 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c2=buffer[0] & 0xFF;
        if ((c2 & 0xC0) != 0x80) {
          throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
        }
        data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
      }
 else       if (cTemp == 14) {
        if (readCount + 2 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c2=buffer[0] & 0xFF;
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c3=buffer[0] & 0xFF;
        if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
          throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
        }
        data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
      }
 else {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
      }
    }
  }
}",0.8567572778099094
47744,"private static int calculateUtf8Length(final String str,final int beginIndex,final int endIndex){
  int utfLength=0;
  for (int i=beginIndex; i < endIndex; i++) {
    int c=str.charAt(i);
    if (c <= 0) {
      utfLength+=2;
    }
 else     if (c > 0x007F) {
      utfLength+=3;
    }
 else {
      utfLength++;
    }
  }
  return utfLength;
}","private static int calculateUtf8Length(final String str,final int beginIndex,final int endIndex){
  int utfLength=0;
  for (int i=beginIndex; i < endIndex; i++) {
    int c=str.charAt(i);
    if (c <= 0x007F && c >= 0x0001) {
      utfLength+=1;
    }
 else     if (c > 0x07FF) {
      utfLength+=3;
    }
 else {
      utfLength+=2;
    }
  }
  return utfLength;
}",0.7362482369534555
47745,"@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  final boolean isBufferObjectDataOutput=out instanceof BufferObjectDataOutput;
  final BufferObjectDataOutput bufferObjectDataOutput=isBufferObjectDataOutput ? (BufferObjectDataOutput)out : null;
  int i;
  int c;
  int bufferPos=0;
  int utfLength=0;
  int utfLengthLimit;
  int pos=0;
  if (isBufferObjectDataOutput) {
    utfLengthLimit=str.length() * 3;
    pos=bufferObjectDataOutput.position();
    bufferObjectDataOutput.writeShort(0);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(false);
    }
  }
 else {
    utfLength=calculateUtf8Length(str,beginIndex,endIndex);
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    utfLengthLimit=utfLength;
    out.writeShort(utfLength);
    if (ASCII_AWARE) {
      out.writeBoolean(false);
    }
  }
  if (buffer.length >= utfLengthLimit) {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0) {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else       if (c > 0x007F) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)c;
      }
    }
    out.write(buffer,0,bufferPos);
    if (isBufferObjectDataOutput) {
      utfLength=bufferPos;
    }
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    if (isBufferObjectDataOutput) {
      utfLength=i - beginIndex;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=2;
        }
      }
 else       if (c > 0x007F) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=3;
        }
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
        if (isBufferObjectDataOutput) {
          utfLength++;
        }
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
  if (isBufferObjectDataOutput) {
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    bufferObjectDataOutput.writeShort(pos,utfLength);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(pos + 2,utfLength == str.length());
    }
  }
}","@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  final boolean isBufferObjectDataOutput=out instanceof BufferObjectDataOutput;
  final BufferObjectDataOutput bufferObjectDataOutput=isBufferObjectDataOutput ? (BufferObjectDataOutput)out : null;
  int i;
  int c;
  int bufferPos=0;
  int utfLength=0;
  int utfLengthLimit;
  int pos=0;
  if (isBufferObjectDataOutput) {
    utfLengthLimit=str.length() * 3;
    pos=bufferObjectDataOutput.position();
    bufferObjectDataOutput.writeShort(0);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(false);
    }
  }
 else {
    utfLength=calculateUtf8Length(str,beginIndex,endIndex);
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    utfLengthLimit=utfLength;
    out.writeShort(utfLength);
    if (ASCII_AWARE) {
      out.writeBoolean(false);
    }
  }
  if (buffer.length >= utfLengthLimit) {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!(c <= 0x007F && c >= 0x0001)) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if ((c >= 0x0001) && (c <= 0x007F)) {
        buffer[bufferPos++]=(byte)c;
      }
 else       if (c > 0x07FF) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
    }
    out.write(buffer,0,bufferPos);
    if (isBufferObjectDataOutput) {
      utfLength=bufferPos;
    }
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!(c <= 0x007F && c >= 0x0001)) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    if (isBufferObjectDataOutput) {
      utfLength=i - beginIndex;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0x007F && c >= 0x0001) {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
        if (isBufferObjectDataOutput) {
          utfLength++;
        }
      }
 else       if (c > 0x07FF) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=3;
        }
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=2;
        }
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
  if (isBufferObjectDataOutput) {
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    bufferObjectDataOutput.writeShort(pos,utfLength);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(pos + 2,utfLength == str.length());
    }
  }
}",0.8140911782119598
47746,"private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort();
  final boolean allAscii=ASCII_AWARE ? in.readBoolean() : false;
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  final int bufferLimit=minUtfLenght + 1;
  int readCount=0;
  int bufferPos=1;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  if (allAscii) {
    while (bufferPos != bufferLimit) {
      data[charArrCount++]=(char)(buffer[bufferPos++] & 0xFF);
    }
    for (readCount=bufferPos - 1; readCount < utfLength; readCount++) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      data[charArrCount++]=(char)(buffer[0] & 0xFF);
    }
  }
 else {
    while (bufferPos != bufferLimit) {
      c1=buffer[bufferPos++] & 0xFF;
      if (c1 > 127) {
        bufferPos--;
        break;
      }
      data[charArrCount++]=(char)c1;
    }
    readCount=bufferPos - 1;
    if (bufferPos == bufferLimit) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
    while (readCount < utfLength) {
      cTemp=c1 >> 4;
      if (cTemp >> 3 == 0) {
        data[charArrCount++]=(char)c1;
        readCount++;
      }
 else       if (cTemp == 12 || cTemp == 13) {
        if (readCount + 1 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        if ((c2 & 0xC0) != 0x80) {
          throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
        }
        data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
        readCount+=2;
      }
 else       if (cTemp == 14) {
        if (readCount + 2 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c3=buffer[0] & 0xFF;
        if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
          throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
        }
        data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
        readCount+=3;
      }
 else {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
  }
}","private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort() & 0xFFFF;
  final boolean allAscii=ASCII_AWARE ? in.readBoolean() : false;
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  final int bufferLimit=minUtfLenght + 1;
  int readCount=0;
  int bufferPos=1;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  if (allAscii) {
    while (bufferPos != bufferLimit) {
      data[charArrCount++]=(char)(buffer[bufferPos++] & 0xFF);
    }
    for (readCount=bufferPos - 1; readCount < utfLength; readCount++) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      data[charArrCount++]=(char)(buffer[0] & 0xFF);
    }
  }
 else {
    c1=buffer[bufferPos++] & 0xFF;
    while (bufferPos != bufferLimit) {
      if (c1 > 127) {
        break;
      }
      data[charArrCount++]=(char)c1;
      c1=buffer[bufferPos++] & 0xFF;
    }
    bufferPos--;
    readCount=bufferPos - 1;
    while (readCount < utfLength) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
      c1=buffer[0] & 0xFF;
      cTemp=c1 >> 4;
      if (cTemp >> 3 == 0) {
        data[charArrCount++]=(char)c1;
      }
 else       if (cTemp == 12 || cTemp == 13) {
        if (readCount + 1 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c2=buffer[0] & 0xFF;
        if ((c2 & 0xC0) != 0x80) {
          throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
        }
        data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
      }
 else       if (cTemp == 14) {
        if (readCount + 2 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c2=buffer[0] & 0xFF;
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c3=buffer[0] & 0xFF;
        if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
          throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
        }
        data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
      }
 else {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
      }
    }
  }
}",0.8567572778099094
47747,"private static int calculateUtf8Length(final String str,final int beginIndex,final int endIndex){
  int utfLength=0;
  for (int i=beginIndex; i < endIndex; i++) {
    int c=str.charAt(i);
    if (c <= 0) {
      utfLength+=2;
    }
 else     if (c > 0x007F) {
      utfLength+=3;
    }
 else {
      utfLength++;
    }
  }
  return utfLength;
}","private static int calculateUtf8Length(final String str,final int beginIndex,final int endIndex){
  int utfLength=0;
  for (int i=beginIndex; i < endIndex; i++) {
    int c=str.charAt(i);
    if (c <= 0x007F && c >= 0x0001) {
      utfLength+=1;
    }
 else     if (c > 0x07FF) {
      utfLength+=3;
    }
 else {
      utfLength+=2;
    }
  }
  return utfLength;
}",0.7362482369534555
47748,"@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  final boolean isBufferObjectDataOutput=out instanceof BufferObjectDataOutput;
  final BufferObjectDataOutput bufferObjectDataOutput=isBufferObjectDataOutput ? (BufferObjectDataOutput)out : null;
  int i;
  int c;
  int bufferPos=0;
  int utfLength=0;
  int utfLengthLimit;
  int pos=0;
  if (isBufferObjectDataOutput) {
    utfLengthLimit=str.length() * 3;
    pos=bufferObjectDataOutput.position();
    bufferObjectDataOutput.writeShort(0);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(false);
    }
  }
 else {
    utfLength=calculateUtf8Length(str,beginIndex,endIndex);
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    utfLengthLimit=utfLength;
    out.writeShort(utfLength);
    if (ASCII_AWARE) {
      out.writeBoolean(false);
    }
  }
  if (buffer.length >= utfLengthLimit) {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0) {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else       if (c > 0x007F) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)c;
      }
    }
    out.write(buffer,0,bufferPos);
    if (isBufferObjectDataOutput) {
      utfLength=bufferPos;
    }
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    if (isBufferObjectDataOutput) {
      utfLength=i - beginIndex;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=2;
        }
      }
 else       if (c > 0x007F) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=3;
        }
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
        if (isBufferObjectDataOutput) {
          utfLength++;
        }
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
  if (isBufferObjectDataOutput) {
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    bufferObjectDataOutput.writeShort(pos,utfLength);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(pos + 2,utfLength == str.length());
    }
  }
}","@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  final boolean isBufferObjectDataOutput=out instanceof BufferObjectDataOutput;
  final BufferObjectDataOutput bufferObjectDataOutput=isBufferObjectDataOutput ? (BufferObjectDataOutput)out : null;
  int i;
  int c;
  int bufferPos=0;
  int utfLength=0;
  int utfLengthLimit;
  int pos=0;
  if (isBufferObjectDataOutput) {
    utfLengthLimit=str.length() * 3;
    pos=bufferObjectDataOutput.position();
    bufferObjectDataOutput.writeShort(0);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(false);
    }
  }
 else {
    utfLength=calculateUtf8Length(str,beginIndex,endIndex);
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    utfLengthLimit=utfLength;
    out.writeShort(utfLength);
    if (ASCII_AWARE) {
      out.writeBoolean(false);
    }
  }
  if (buffer.length >= utfLengthLimit) {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!(c <= 0x007F && c >= 0x0001)) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if ((c >= 0x0001) && (c <= 0x007F)) {
        buffer[bufferPos++]=(byte)c;
      }
 else       if (c > 0x07FF) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
    }
    out.write(buffer,0,bufferPos);
    if (isBufferObjectDataOutput) {
      utfLength=bufferPos;
    }
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!(c <= 0x007F && c >= 0x0001)) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    if (isBufferObjectDataOutput) {
      utfLength=i - beginIndex;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0x007F && c >= 0x0001) {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
        if (isBufferObjectDataOutput) {
          utfLength++;
        }
      }
 else       if (c > 0x07FF) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=3;
        }
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=2;
        }
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
  if (isBufferObjectDataOutput) {
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    bufferObjectDataOutput.writeShort(pos,utfLength);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(pos + 2,utfLength == str.length());
    }
  }
}",0.8140911782119598
47749,"private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort();
  final boolean allAscii=ASCII_AWARE ? in.readBoolean() : false;
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  final int bufferLimit=minUtfLenght + 1;
  int readCount=0;
  int bufferPos=1;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  if (allAscii) {
    while (bufferPos != bufferLimit) {
      data[charArrCount++]=(char)(buffer[bufferPos++] & 0xFF);
    }
    for (readCount=bufferPos - 1; readCount < utfLength; readCount++) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      data[charArrCount++]=(char)(buffer[0] & 0xFF);
    }
  }
 else {
    while (bufferPos != bufferLimit) {
      c1=buffer[bufferPos++] & 0xFF;
      if (c1 > 127) {
        bufferPos--;
        break;
      }
      data[charArrCount++]=(char)c1;
    }
    readCount=bufferPos - 1;
    if (bufferPos == bufferLimit) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
    while (readCount < utfLength) {
      cTemp=c1 >> 4;
      if (cTemp >> 3 == 0) {
        data[charArrCount++]=(char)c1;
        readCount++;
      }
 else       if (cTemp == 12 || cTemp == 13) {
        if (readCount + 1 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        if ((c2 & 0xC0) != 0x80) {
          throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
        }
        data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
        readCount+=2;
      }
 else       if (cTemp == 14) {
        if (readCount + 2 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c3=buffer[0] & 0xFF;
        if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
          throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
        }
        data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
        readCount+=3;
      }
 else {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
  }
}","private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort() & 0xFFFF;
  final boolean allAscii=ASCII_AWARE ? in.readBoolean() : false;
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  final int bufferLimit=minUtfLenght + 1;
  int readCount=0;
  int bufferPos=1;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  if (allAscii) {
    while (bufferPos != bufferLimit) {
      data[charArrCount++]=(char)(buffer[bufferPos++] & 0xFF);
    }
    for (readCount=bufferPos - 1; readCount < utfLength; readCount++) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      data[charArrCount++]=(char)(buffer[0] & 0xFF);
    }
  }
 else {
    c1=buffer[bufferPos++] & 0xFF;
    while (bufferPos != bufferLimit) {
      if (c1 > 127) {
        break;
      }
      data[charArrCount++]=(char)c1;
      c1=buffer[bufferPos++] & 0xFF;
    }
    bufferPos--;
    readCount=bufferPos - 1;
    while (readCount < utfLength) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
      c1=buffer[0] & 0xFF;
      cTemp=c1 >> 4;
      if (cTemp >> 3 == 0) {
        data[charArrCount++]=(char)c1;
      }
 else       if (cTemp == 12 || cTemp == 13) {
        if (readCount + 1 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c2=buffer[0] & 0xFF;
        if ((c2 & 0xC0) != 0x80) {
          throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
        }
        data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
      }
 else       if (cTemp == 14) {
        if (readCount + 2 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c2=buffer[0] & 0xFF;
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c3=buffer[0] & 0xFF;
        if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
          throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
        }
        data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
      }
 else {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
      }
    }
  }
}",0.8567572778099094
47750,"private static int calculateUtf8Length(final String str,final int beginIndex,final int endIndex){
  int utfLength=0;
  for (int i=beginIndex; i < endIndex; i++) {
    int c=str.charAt(i);
    if (c <= 0) {
      utfLength+=2;
    }
 else     if (c > 0x007F) {
      utfLength+=3;
    }
 else {
      utfLength++;
    }
  }
  return utfLength;
}","private static int calculateUtf8Length(final String str,final int beginIndex,final int endIndex){
  int utfLength=0;
  for (int i=beginIndex; i < endIndex; i++) {
    int c=str.charAt(i);
    if (c <= 0x007F && c >= 0x0001) {
      utfLength+=1;
    }
 else     if (c > 0x07FF) {
      utfLength+=3;
    }
 else {
      utfLength+=2;
    }
  }
  return utfLength;
}",0.7362482369534555
47751,"@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  final boolean isBufferObjectDataOutput=out instanceof BufferObjectDataOutput;
  final BufferObjectDataOutput bufferObjectDataOutput=isBufferObjectDataOutput ? (BufferObjectDataOutput)out : null;
  int i;
  int c;
  int bufferPos=0;
  int utfLength=0;
  int utfLengthLimit;
  int pos=0;
  if (isBufferObjectDataOutput) {
    utfLengthLimit=str.length() * 3;
    pos=bufferObjectDataOutput.position();
    bufferObjectDataOutput.writeShort(0);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(false);
    }
  }
 else {
    utfLength=calculateUtf8Length(str,beginIndex,endIndex);
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    utfLengthLimit=utfLength;
    out.writeShort(utfLength);
    if (ASCII_AWARE) {
      out.writeBoolean(false);
    }
  }
  if (buffer.length >= utfLengthLimit) {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0) {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else       if (c > 0x007F) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)c;
      }
    }
    out.write(buffer,0,bufferPos);
    if (isBufferObjectDataOutput) {
      utfLength=bufferPos;
    }
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    if (isBufferObjectDataOutput) {
      utfLength=i - beginIndex;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=2;
        }
      }
 else       if (c > 0x007F) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=3;
        }
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
        if (isBufferObjectDataOutput) {
          utfLength++;
        }
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
  if (isBufferObjectDataOutput) {
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    bufferObjectDataOutput.writeShort(pos,utfLength);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(pos + 2,utfLength == str.length());
    }
  }
}","@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  final boolean isBufferObjectDataOutput=out instanceof BufferObjectDataOutput;
  final BufferObjectDataOutput bufferObjectDataOutput=isBufferObjectDataOutput ? (BufferObjectDataOutput)out : null;
  int i;
  int c;
  int bufferPos=0;
  int utfLength=0;
  int utfLengthLimit;
  int pos=0;
  if (isBufferObjectDataOutput) {
    utfLengthLimit=str.length() * 3;
    pos=bufferObjectDataOutput.position();
    bufferObjectDataOutput.writeShort(0);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(false);
    }
  }
 else {
    utfLength=calculateUtf8Length(str,beginIndex,endIndex);
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    utfLengthLimit=utfLength;
    out.writeShort(utfLength);
    if (ASCII_AWARE) {
      out.writeBoolean(false);
    }
  }
  if (buffer.length >= utfLengthLimit) {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!(c <= 0x007F && c >= 0x0001)) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if ((c >= 0x0001) && (c <= 0x007F)) {
        buffer[bufferPos++]=(byte)c;
      }
 else       if (c > 0x07FF) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
    }
    out.write(buffer,0,bufferPos);
    if (isBufferObjectDataOutput) {
      utfLength=bufferPos;
    }
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=str.charAt(i);
      if (!(c <= 0x007F && c >= 0x0001)) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    if (isBufferObjectDataOutput) {
      utfLength=i - beginIndex;
    }
    for (; i < endIndex; i++) {
      c=str.charAt(i);
      if (c <= 0x007F && c >= 0x0001) {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
        if (isBufferObjectDataOutput) {
          utfLength++;
        }
      }
 else       if (c > 0x07FF) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=3;
        }
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
        if (isBufferObjectDataOutput) {
          utfLength+=2;
        }
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
  if (isBufferObjectDataOutput) {
    if (utfLength > 65535) {
      throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
    }
    bufferObjectDataOutput.writeShort(pos,utfLength);
    if (ASCII_AWARE) {
      bufferObjectDataOutput.writeBoolean(pos + 2,utfLength == str.length());
    }
  }
}",0.8140911782119598
47752,"private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort();
  final boolean allAscii=ASCII_AWARE ? in.readBoolean() : false;
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  final int bufferLimit=minUtfLenght + 1;
  int readCount=0;
  int bufferPos=1;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  if (allAscii) {
    while (bufferPos != bufferLimit) {
      data[charArrCount++]=(char)(buffer[bufferPos++] & 0xFF);
    }
    for (readCount=bufferPos - 1; readCount < utfLength; readCount++) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      data[charArrCount++]=(char)(buffer[0] & 0xFF);
    }
  }
 else {
    while (bufferPos != bufferLimit) {
      c1=buffer[bufferPos++] & 0xFF;
      if (c1 > 127) {
        bufferPos--;
        break;
      }
      data[charArrCount++]=(char)c1;
    }
    readCount=bufferPos - 1;
    if (bufferPos == bufferLimit) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
    while (readCount < utfLength) {
      cTemp=c1 >> 4;
      if (cTemp >> 3 == 0) {
        data[charArrCount++]=(char)c1;
        readCount++;
      }
 else       if (cTemp == 12 || cTemp == 13) {
        if (readCount + 1 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        if ((c2 & 0xC0) != 0x80) {
          throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
        }
        data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
        readCount+=2;
      }
 else       if (cTemp == 14) {
        if (readCount + 2 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c3=buffer[0] & 0xFF;
        if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
          throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
        }
        data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
        readCount+=3;
      }
 else {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
  }
}","private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort() & 0xFFFF;
  final boolean allAscii=ASCII_AWARE ? in.readBoolean() : false;
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  final int bufferLimit=minUtfLenght + 1;
  int readCount=0;
  int bufferPos=1;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  if (allAscii) {
    while (bufferPos != bufferLimit) {
      data[charArrCount++]=(char)(buffer[bufferPos++] & 0xFF);
    }
    for (readCount=bufferPos - 1; readCount < utfLength; readCount++) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      data[charArrCount++]=(char)(buffer[0] & 0xFF);
    }
  }
 else {
    c1=buffer[bufferPos++] & 0xFF;
    while (bufferPos != bufferLimit) {
      if (c1 > 127) {
        break;
      }
      data[charArrCount++]=(char)c1;
      c1=buffer[bufferPos++] & 0xFF;
    }
    bufferPos--;
    readCount=bufferPos - 1;
    while (readCount < utfLength) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
      c1=buffer[0] & 0xFF;
      cTemp=c1 >> 4;
      if (cTemp >> 3 == 0) {
        data[charArrCount++]=(char)c1;
      }
 else       if (cTemp == 12 || cTemp == 13) {
        if (readCount + 1 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c2=buffer[0] & 0xFF;
        if ((c2 & 0xC0) != 0x80) {
          throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
        }
        data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
      }
 else       if (cTemp == 14) {
        if (readCount + 2 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c2=buffer[0] & 0xFF;
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount++,in);
        c3=buffer[0] & 0xFF;
        if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
          throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
        }
        data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
      }
 else {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
      }
    }
  }
}",0.8567572778099094
47753,"private static int calculateUtf8Length(final String str,final int beginIndex,final int endIndex){
  int utfLength=0;
  for (int i=beginIndex; i < endIndex; i++) {
    int c=str.charAt(i);
    if (c <= 0) {
      utfLength+=2;
    }
 else     if (c > 0x007F) {
      utfLength+=3;
    }
 else {
      utfLength++;
    }
  }
  return utfLength;
}","private static int calculateUtf8Length(final String str,final int beginIndex,final int endIndex){
  int utfLength=0;
  for (int i=beginIndex; i < endIndex; i++) {
    int c=str.charAt(i);
    if (c <= 0x007F && c >= 0x0001) {
      utfLength+=1;
    }
 else     if (c > 0x07FF) {
      utfLength+=3;
    }
 else {
      utfLength+=2;
    }
  }
  return utfLength;
}",0.7362482369534555
47754,"private void testListSplitBrain(boolean multicast) throws InterruptedException {
  String name=randomString();
  Config config=getConfig(multicast);
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h3=Hazelcast.newHazelcastInstance(config);
  IList<Object> list=h1.getList(name);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(2);
  h3.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h3.getLifecycleService().addLifecycleListener(lifeCycleListener);
  for (int i=0; i < 100; i++) {
    list.add(""String_Node_Str"" + i);
  }
  assertSizeEventually(100,list);
  closeConnectionBetween(h1,h3);
  closeConnectionBetween(h2,h3);
  assertTrue(memberShipListener.splitLatch.await(10,TimeUnit.SECONDS));
  assertEquals(2,h1.getCluster().getMembers().size());
  assertEquals(2,h2.getCluster().getMembers().size());
  assertEquals(1,h3.getCluster().getMembers().size());
  for (int i=100; i < 200; i++) {
    list.add(""String_Node_Str"" + i);
  }
  assertSizeEventually(200,list);
  IList<Object> list3=h3.getList(name);
  for (int i=0; i < 50; i++) {
    list3.add(""String_Node_Str"" + i);
  }
  assertTrue(lifeCycleListener.mergeLatch.await(60,TimeUnit.SECONDS));
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  IList<Object> testList=h1.getList(name);
  assertFalse(testList.contains(""String_Node_Str""));
  assertFalse(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
}","private void testListSplitBrain(boolean multicast) throws InterruptedException {
  String name=randomString();
  Config config=getConfig(multicast);
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h3=Hazelcast.newHazelcastInstance(config);
  IList<Object> list=h1.getList(name);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(2);
  h3.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h3.getLifecycleService().addLifecycleListener(lifeCycleListener);
  for (int i=0; i < 100; i++) {
    list.add(""String_Node_Str"" + i);
  }
  assertSizeEventually(100,list);
  waitAllForSafeState();
  closeConnectionBetween(h1,h3);
  closeConnectionBetween(h2,h3);
  assertTrue(memberShipListener.splitLatch.await(10,TimeUnit.SECONDS));
  assertEquals(2,h1.getCluster().getMembers().size());
  assertEquals(2,h2.getCluster().getMembers().size());
  assertEquals(1,h3.getCluster().getMembers().size());
  for (int i=100; i < 200; i++) {
    list.add(""String_Node_Str"" + i);
  }
  assertSizeEventually(200,list);
  IList<Object> list3=h3.getList(name);
  for (int i=0; i < 50; i++) {
    list3.add(""String_Node_Str"" + i);
  }
  assertTrue(lifeCycleListener.mergeLatch.await(60,TimeUnit.SECONDS));
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  IList<Object> testList=h1.getList(name);
  assertFalse(testList.contains(""String_Node_Str""));
  assertFalse(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
}",0.9933914882368492
47755,"@Before @After public void killAllHazelcastInstances() throws IOException {
  HazelcastInstanceFactory.terminateAll();
}","@Before @After public void killAllHazelcastInstances() throws IOException {
  HazelcastInstanceFactory.shutdownAll();
}",0.9456066945606696
47756,"public void rollbackRemove(long itemId){
  final TxCollectionItem txItem=txMap.remove(itemId);
  if (txItem == null) {
    logger.warning(""String_Node_Str"" + itemId);
  }
  CollectionItem item=new CollectionItem(itemId,txItem.value);
  getCollection().add(item);
}","public void rollbackRemove(long itemId){
  final TxCollectionItem txItem=txMap.remove(itemId);
  if (txItem == null) {
    logger.warning(""String_Node_Str"" + itemId);
  }
 else {
    CollectionItem item=new CollectionItem(itemId,txItem.value);
    getCollection().add(item);
  }
}",0.8713235294117647
47757,"private void testListSplitBrain(boolean multicast) throws InterruptedException {
  String name=randomString();
  Config config=getConfig(multicast);
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h3=Hazelcast.newHazelcastInstance(config);
  IList<Object> list=h1.getList(name);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(2);
  h3.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h3.getLifecycleService().addLifecycleListener(lifeCycleListener);
  for (int i=0; i < 100; i++) {
    list.add(""String_Node_Str"" + i);
  }
  assertSizeEventually(100,list);
  closeConnectionBetween(h1,h3);
  closeConnectionBetween(h2,h3);
  assertTrue(memberShipListener.splitLatch.await(10,TimeUnit.SECONDS));
  assertEquals(2,h1.getCluster().getMembers().size());
  assertEquals(2,h2.getCluster().getMembers().size());
  assertEquals(1,h3.getCluster().getMembers().size());
  for (int i=100; i < 200; i++) {
    list.add(""String_Node_Str"" + i);
  }
  assertSizeEventually(200,list);
  IList<Object> list3=h3.getList(name);
  for (int i=0; i < 50; i++) {
    list3.add(""String_Node_Str"" + i);
  }
  assertTrue(lifeCycleListener.mergeLatch.await(60,TimeUnit.SECONDS));
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  IList<Object> testList=h1.getList(name);
  assertFalse(testList.contains(""String_Node_Str""));
  assertFalse(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
}","private void testListSplitBrain(boolean multicast) throws InterruptedException {
  String name=randomString();
  Config config=getConfig(multicast);
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h3=Hazelcast.newHazelcastInstance(config);
  IList<Object> list=h1.getList(name);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(2);
  h3.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h3.getLifecycleService().addLifecycleListener(lifeCycleListener);
  for (int i=0; i < 100; i++) {
    list.add(""String_Node_Str"" + i);
  }
  assertSizeEventually(100,list);
  waitAllForSafeState();
  closeConnectionBetween(h1,h3);
  closeConnectionBetween(h2,h3);
  assertTrue(memberShipListener.splitLatch.await(10,TimeUnit.SECONDS));
  assertEquals(2,h1.getCluster().getMembers().size());
  assertEquals(2,h2.getCluster().getMembers().size());
  assertEquals(1,h3.getCluster().getMembers().size());
  for (int i=100; i < 200; i++) {
    list.add(""String_Node_Str"" + i);
  }
  assertSizeEventually(200,list);
  IList<Object> list3=h3.getList(name);
  for (int i=0; i < 50; i++) {
    list3.add(""String_Node_Str"" + i);
  }
  assertTrue(lifeCycleListener.mergeLatch.await(60,TimeUnit.SECONDS));
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  IList<Object> testList=h1.getList(name);
  assertFalse(testList.contains(""String_Node_Str""));
  assertFalse(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
  assertTrue(testList.contains(""String_Node_Str""));
}",0.9933914882368492
47758,"@Before @After public void killAllHazelcastInstances() throws IOException {
  HazelcastInstanceFactory.terminateAll();
}","@Before @After public void killAllHazelcastInstances() throws IOException {
  HazelcastInstanceFactory.shutdownAll();
}",0.9456066945606696
47759,"@Override public void run() throws Exception {
  assertEquals(""String_Node_Str"",expectedSize,instance.getCluster().getMembers().size());
}","public void run(){
  assertTrue(isAllInSafeState());
}",0.40625
47760,"@Override public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str""+ key+ ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str""+ getKey()+ ""String_Node_Str""+ getOldValue()+ ""String_Node_Str""+ getValue()+ '}';
}",0.9405099150141644
47761,"@Override public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str""+ key+ ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + super.toString() + ""String_Node_Str""+ getKey()+ ""String_Node_Str""+ getOldValue()+ ""String_Node_Str""+ getValue()+ '}';
}",0.9405099150141644
47762,"@Test(timeout=30000) public void testSemaphoreWithFailures() throws InterruptedException {
  final int k=4;
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k + 1);
  final HazelcastInstance[] instances=factory.newInstances();
  final ISemaphore semaphore=instances[k].getSemaphore(""String_Node_Str"");
  int initialPermits=20;
  semaphore.init(initialPermits);
  for (int i=0; i < k; i++) {
    int rand=(int)(Math.random() * 5) + 1;
    semaphore.acquire(rand);
    initialPermits-=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    semaphore.release(rand);
    initialPermits+=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    instances[i].getLifecycleService().shutdown();
    semaphore.acquire(rand);
    initialPermits-=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    semaphore.release(rand);
    initialPermits+=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
  }
}","@Test(timeout=120000) public void testSemaphoreWithFailures() throws InterruptedException {
  final int k=4;
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k + 1);
  final HazelcastInstance[] instances=factory.newInstances();
  final ISemaphore semaphore=instances[k].getSemaphore(""String_Node_Str"");
  int initialPermits=20;
  semaphore.init(initialPermits);
  for (int i=0; i < k; i++) {
    int rand=(int)(Math.random() * 5) + 1;
    semaphore.acquire(rand);
    initialPermits-=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    semaphore.release(rand);
    initialPermits+=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    instances[i].shutdown();
    semaphore.acquire(rand);
    initialPermits-=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
    semaphore.release(rand);
    initialPermits+=rand;
    assertEquals(initialPermits,semaphore.availablePermits());
  }
}",0.9841107124551512
47763,"@Test(timeout=30000) public void testSemaphoreWithFailuresAndJoin(){
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  final HazelcastInstance instance1=factory.newHazelcastInstance();
  final HazelcastInstance instance2=factory.newHazelcastInstance();
  final ISemaphore semaphore=instance1.getSemaphore(""String_Node_Str"");
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  assertTrue(semaphore.init(0));
  final Thread thread=new Thread(){
    public void run(){
      for (int i=0; i < 2; i++) {
        try {
          semaphore.acquire();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      countDownLatch.countDown();
    }
  }
;
  thread.start();
  instance2.getLifecycleService().shutdown();
  semaphore.release();
  HazelcastInstance instance3=factory.newHazelcastInstance();
  ISemaphore semaphore1=instance3.getSemaphore(""String_Node_Str"");
  semaphore1.release();
  try {
    assertTrue(countDownLatch.await(15,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    thread.interrupt();
  }
}","@Test(timeout=120000) public void testSemaphoreWithFailuresAndJoin(){
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  final HazelcastInstance instance1=factory.newHazelcastInstance();
  final HazelcastInstance instance2=factory.newHazelcastInstance();
  final ISemaphore semaphore=instance1.getSemaphore(""String_Node_Str"");
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  assertTrue(semaphore.init(0));
  final Thread thread=new Thread(){
    public void run(){
      for (int i=0; i < 2; i++) {
        try {
          semaphore.acquire();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      countDownLatch.countDown();
    }
  }
;
  thread.start();
  instance2.shutdown();
  semaphore.release();
  HazelcastInstance instance3=factory.newHazelcastInstance();
  ISemaphore semaphore1=instance3.getSemaphore(""String_Node_Str"");
  semaphore1.release();
  try {
    assertTrue(countDownLatch.await(15,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    thread.interrupt();
  }
}",0.9890494962768288
47764,"@Test(timeout=30000) public void testMutex() throws InterruptedException {
  final int threadCount=2;
  final HazelcastInstance[] instances=createHazelcastInstanceFactory(threadCount).newInstances();
  final CountDownLatch latch=new CountDownLatch(threadCount);
  final int loopCount=1000;
class Counter {
    int count=0;
    void inc(){
      count++;
    }
    int get(){
      return count;
    }
  }
  final Counter counter=new Counter();
  assertTrue(instances[0].getSemaphore(""String_Node_Str"").init(1));
  for (int i=0; i < threadCount; i++) {
    final ISemaphore semaphore=instances[i].getSemaphore(""String_Node_Str"");
    new Thread(){
      public void run(){
        for (int j=0; j < loopCount; j++) {
          try {
            semaphore.acquire();
            sleepMillis((int)(Math.random() * 3));
            counter.inc();
          }
 catch (          InterruptedException e) {
            return;
          }
 finally {
            semaphore.release();
          }
        }
        latch.countDown();
      }
    }
.start();
  }
  assertOpenEventually(latch);
  assertEquals(loopCount * threadCount,counter.get());
}","@Test(timeout=120000) public void testMutex() throws InterruptedException {
  final int threadCount=2;
  final HazelcastInstance[] instances=createHazelcastInstanceFactory(threadCount).newInstances();
  final CountDownLatch latch=new CountDownLatch(threadCount);
  final int loopCount=1000;
class Counter {
    int count=0;
    void inc(){
      count++;
    }
    int get(){
      return count;
    }
  }
  final Counter counter=new Counter();
  assertTrue(instances[0].getSemaphore(""String_Node_Str"").init(1));
  for (int i=0; i < threadCount; i++) {
    final ISemaphore semaphore=instances[i].getSemaphore(""String_Node_Str"");
    new Thread(){
      public void run(){
        for (int j=0; j < loopCount; j++) {
          try {
            semaphore.acquire();
            sleepMillis((int)(Math.random() * 3));
            counter.inc();
          }
 catch (          InterruptedException e) {
            return;
          }
 finally {
            semaphore.release();
          }
        }
        latch.countDown();
      }
    }
.start();
  }
  assertOpenEventually(latch);
  assertEquals(loopCount * threadCount,counter.get());
}",0.998683633172444
47765,"@Test @Category(NightlyTest.class) public void testIssue1085WriteBehindBackupTransactional() throws InterruptedException {
  Config config=new Config();
  String name=""String_Node_Str"";
  MapConfig writeBehindBackup=config.getMapConfig(name);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setWriteDelaySeconds(5);
  int size=1000;
  MapStoreWithStoreCount mapStore=new MapStoreWithStoreCount(size,20);
  mapStoreConfig.setImplementation(mapStore);
  writeBehindBackup.setMapStoreConfig(mapStoreConfig);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  HazelcastInstance instance=factory.newHazelcastInstance(config);
  HazelcastInstance instance2=factory.newHazelcastInstance(config);
  final IMap map=instance.getMap(name);
  TransactionContext context=instance.newTransactionContext();
  context.beginTransaction();
  TransactionalMap<Object,Object> tmap=context.getMap(name);
  for (int i=0; i < size; i++) {
    tmap.put(i,i);
  }
  context.commitTransaction();
  instance2.getLifecycleService().shutdown();
  mapStore.awaitStores();
}","@Test public void testIssue1085WriteBehindBackupTransactional() throws InterruptedException {
  final String name=randomMapName();
  final int size=1000;
  MapStoreWithStoreCount mapStore=new MapStoreWithStoreCount(size,120);
  Config config=newConfig(name,mapStore,5);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  HazelcastInstance instance=factory.newHazelcastInstance(config);
  HazelcastInstance instance2=factory.newHazelcastInstance(config);
  TransactionContext context=instance.newTransactionContext();
  context.beginTransaction();
  TransactionalMap<Object,Object> tmap=context.getMap(name);
  for (int i=0; i < size; i++) {
    tmap.put(i,i);
  }
  context.commitTransaction();
  instance2.getLifecycleService().shutdown();
  mapStore.awaitStores();
}",0.7707006369426752
47766,"@Test @Category(NightlyTest.class) public void testIssue1085WriteBehindBackupTransactional() throws InterruptedException {
  Config config=new Config();
  String name=""String_Node_Str"";
  MapConfig writeBehindBackup=config.getMapConfig(name);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setWriteDelaySeconds(5);
  int size=1000;
  MapStoreWithStoreCount mapStore=new MapStoreWithStoreCount(size,20);
  mapStoreConfig.setImplementation(mapStore);
  writeBehindBackup.setMapStoreConfig(mapStoreConfig);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  HazelcastInstance instance=factory.newHazelcastInstance(config);
  HazelcastInstance instance2=factory.newHazelcastInstance(config);
  final IMap map=instance.getMap(name);
  TransactionContext context=instance.newTransactionContext();
  context.beginTransaction();
  TransactionalMap<Object,Object> tmap=context.getMap(name);
  for (int i=0; i < size; i++) {
    tmap.put(i,i);
  }
  context.commitTransaction();
  instance2.getLifecycleService().shutdown();
  mapStore.awaitStores();
}","@Test public void testIssue1085WriteBehindBackupTransactional() throws InterruptedException {
  final String name=randomMapName();
  final int size=1000;
  MapStoreWithStoreCount mapStore=new MapStoreWithStoreCount(size,120);
  Config config=newConfig(name,mapStore,5);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(3);
  HazelcastInstance instance=factory.newHazelcastInstance(config);
  HazelcastInstance instance2=factory.newHazelcastInstance(config);
  TransactionContext context=instance.newTransactionContext();
  context.beginTransaction();
  TransactionalMap<Object,Object> tmap=context.getMap(name);
  for (int i=0; i < size; i++) {
    tmap.put(i,i);
  }
  context.commitTransaction();
  instance2.getLifecycleService().shutdown();
  mapStore.awaitStores();
}",0.7707006369426752
47767,"@Override protected <K,V>void createConfigOnAllMembers(CacheConfig<K,V> cacheConfig){
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  for (  MemberImpl member : members) {
    try {
      ClientRequest request=new CacheCreateConfigRequest(cacheConfig,true,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      future.get();
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}","@Override protected <K,V>void createConfigOnAllMembers(CacheConfig<K,V> cacheConfig){
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  final Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    try {
      ClientRequest request=new CacheCreateConfigRequest(cacheConfig,true,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      futures.add(future);
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,CacheProxyUtil.AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}",0.8232848232848233
47768,"@Override public void enableStatistics(String cacheName,boolean enabled){
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException();
  }
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  for (  MemberImpl member : members) {
    try {
      CacheManagementConfigRequest request=new CacheManagementConfigRequest(getCacheNameWithPrefix(cacheName),true,enabled,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      future.get();
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}","@Override public void enableStatistics(String cacheName,boolean enabled){
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException();
  }
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  final Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    try {
      CacheManagementConfigRequest request=new CacheManagementConfigRequest(getCacheNameWithPrefix(cacheName),true,enabled,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      futures.add(future);
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,CacheProxyUtil.AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}",0.8568220101066817
47769,"@Override public void enableManagement(String cacheName,boolean enabled){
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException();
  }
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  for (  MemberImpl member : members) {
    try {
      CacheManagementConfigRequest request=new CacheManagementConfigRequest(getCacheNameWithPrefix(cacheName),false,enabled,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      future.get();
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}","@Override public void enableManagement(String cacheName,boolean enabled){
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException();
  }
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  final Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    try {
      CacheManagementConfigRequest request=new CacheManagementConfigRequest(getCacheNameWithPrefix(cacheName),false,enabled,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      futures.add(future);
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,CacheProxyUtil.AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}",0.8569826135726304
47770,"@Override protected <K,V>CacheConfig<K,V> getCacheConfigFromPartition(String cacheName){
  ClientRequest request=new CacheGetConfigRequest(cacheName);
  try {
    final Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheName);
    return clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return null;
}","@Override protected <K,V>CacheConfig<K,V> getCacheConfigFromPartition(String cacheName){
  ClientRequest request=new CacheGetConfigRequest(cacheName);
  try {
    final Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheName);
    return clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.9298892988929888
47771,"public HazelcastClientCacheManager(HazelcastClientCachingProvider cachingProvider,HazelcastInstance hazelcastInstance,URI uri,ClassLoader classLoader,Properties properties){
  super(cachingProvider,uri,classLoader,properties);
  if (hazelcastInstance == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.hazelcastInstance=hazelcastInstance;
  final ClientCacheDistributedObject setupRef=hazelcastInstance.getDistributedObject(CacheService.SERVICE_NAME,""String_Node_Str"");
  this.clientContext=setupRef.getClientContext();
}","public HazelcastClientCacheManager(HazelcastClientCachingProvider cachingProvider,HazelcastInstance hazelcastInstance,URI uri,ClassLoader classLoader,Properties properties){
  super(cachingProvider,uri,classLoader,properties);
  if (hazelcastInstance == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.hazelcastInstance=hazelcastInstance;
  final ClientCacheDistributedObject setupRef=hazelcastInstance.getDistributedObject(CacheService.SERVICE_NAME,""String_Node_Str"");
  this.clientContext=setupRef.getClientContext();
  logger=clientContext.getHazelcastInstance().getLoggingService().getLogger(getClass());
}",0.9247675401521556
47772,"@Override protected CacheManager createHazelcastCacheManager(URI uri,ClassLoader classLoader,Properties managerProperties){
  if (hazelcastInstance == null) {
    hazelcastInstance=initHazelcast();
  }
  return new HazelcastClientCacheManager(this,hazelcastInstance,uri,classLoader,managerProperties);
}","@Override protected CacheManager createHazelcastCacheManager(URI uri,ClassLoader classLoader,Properties managerProperties){
  if (hazelcastInstance == null) {
    initHazelcast();
  }
  return new HazelcastClientCacheManager(this,hazelcastInstance,uri,classLoader,managerProperties);
}",0.6258503401360545
47773,"public static HazelcastClientCachingProvider createCachingProvider(HazelcastInstance hazelcastInstance){
  final HazelcastClientCachingProvider cachingProvider=new HazelcastClientCachingProvider();
  cachingProvider.hazelcastInstance=hazelcastInstance;
  return cachingProvider;
}","/** 
 * Helper method for creating caching provider for testing etc
 * @param hazelcastInstance
 * @return HazelcastClientCachingProvider
 */
public static HazelcastClientCachingProvider createCachingProvider(HazelcastInstance hazelcastInstance){
  final HazelcastClientCachingProvider cachingProvider=new HazelcastClientCachingProvider();
  cachingProvider.hazelcastInstance=hazelcastInstance;
  return cachingProvider;
}",0.7977207977207977
47774,"protected HazelcastInstance initHazelcast(){
  ClientConfig config=new XmlClientConfigBuilder().build();
  return HazelcastClient.newHazelcastClient(config);
}","protected synchronized void initHazelcast(){
  if (hazelcastInstance == null) {
    hazelcastInstance=HazelcastClient.newHazelcastClient();
  }
}",0.5328947368421053
47775,"protected void registrationOtherNodes(CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,boolean isRegister){
  final OperationService operationService=nodeEngine.getOperationService();
  final Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
  Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    if (!member.localMember()) {
      final Operation op=new CacheListenerRegistrationOperation(getDistributedObjectName(),cacheEntryListenerConfiguration,isRegister);
      final InternalCompletableFuture<Object> future=operationService.invokeOnTarget(CacheService.SERVICE_NAME,op,member.getAddress());
      futures.add(future);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}","protected void registrationOtherNodes(CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,boolean isRegister){
  final OperationService operationService=nodeEngine.getOperationService();
  final Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
  Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    if (!member.localMember()) {
      final Operation op=new CacheListenerRegistrationOperation(getDistributedObjectName(),cacheEntryListenerConfiguration,isRegister);
      final InternalCompletableFuture<Object> future=operationService.invokeOnTarget(CacheService.SERVICE_NAME,op,member.getAddress());
      futures.add(future);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,CacheProxyUtil.AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}",0.991652754590985
47776,"@Override public URI getDefaultURI(){
  try {
    return new URI(this.getClass().getName());
  }
 catch (  URISyntaxException e) {
    throw new CacheException(""String_Node_Str"",e);
  }
}","@Override public URI getDefaultURI(){
  return defaultURI;
}",0.437246963562753
47777,"protected void shutdownHazelcastInstance(){
  if (hazelcastInstance != null) {
    hazelcastInstance.shutdown();
  }
  hazelcastInstance=null;
}","protected void shutdownHazelcastInstance(){
  final HazelcastInstance localInstanceRef=hazelcastInstance;
  if (localInstanceRef != null) {
    hazelcastInstance.shutdown();
  }
  hazelcastInstance=null;
}",0.7277936962750716
47778,"@Override public ClassLoader getDefaultClassLoader(){
  return this.getClass().getClassLoader();
}","@Override public ClassLoader getDefaultClassLoader(){
  return defaultClassLoader;
}",0.8791208791208791
47779,"public HazelcastAbstractCachingProvider(){
  this.cacheManagers=new ConcurrentReferenceHashMap<ClassLoader,ConcurrentMap<URI,CacheManager>>();
}","public HazelcastAbstractCachingProvider(){
  this.cacheManagers=new ConcurrentReferenceHashMap<ClassLoader,ConcurrentMap<URI,CacheManager>>();
  this.defaultClassLoader=this.getClass().getClassLoader();
  try {
    defaultURI=new URI(this.getClass().getName());
  }
 catch (  URISyntaxException e) {
    throw new CacheException(""String_Node_Str"",e);
  }
}",0.576
47780,"@Override public void close(URI uri,ClassLoader classLoader){
  final URI managerURI=uri == null ? getDefaultURI() : uri;
  final ClassLoader managerClassLoader=classLoader == null ? getDefaultClassLoader() : classLoader;
  final ConcurrentMap<URI,CacheManager> uriCacheManagerHashMap=this.cacheManagers.get(managerClassLoader);
  if (uriCacheManagerHashMap != null) {
    final CacheManager cacheManager=uriCacheManagerHashMap.get(managerURI);
    if (cacheManager != null) {
      cacheManager.close();
    }
  }
}","@Override public void close(URI uri,ClassLoader classLoader){
  final URI managerURI=getManagerUri(uri);
  final ClassLoader managerClassLoader=getManagerClassLoader(classLoader);
  final ConcurrentMap<URI,CacheManager> uriCacheManagerMap=this.cacheManagers.get(managerClassLoader);
  if (uriCacheManagerMap != null) {
    final CacheManager cacheManager=uriCacheManagerMap.get(managerURI);
    if (cacheManager != null) {
      cacheManager.close();
    }
  }
}",0.8384458077709611
47781,"public void releaseCacheManager(URI uri,ClassLoader classLoader){
  final URI managerURI=uri == null ? getDefaultURI() : uri;
  final ClassLoader managerClassLoader=classLoader == null ? getDefaultClassLoader() : classLoader;
  ConcurrentMap<URI,CacheManager> cacheManagersByURI=cacheManagers.get(managerClassLoader);
  if (cacheManagersByURI != null) {
    cacheManagersByURI.remove(managerURI);
    if (cacheManagersByURI.size() == 0) {
      cacheManagers.remove(managerClassLoader);
    }
  }
}","public void releaseCacheManager(URI uri,ClassLoader classLoader){
  final URI managerURI=getManagerUri(uri);
  final ClassLoader managerClassLoader=getManagerClassLoader(classLoader);
  ConcurrentMap<URI,CacheManager> cacheManagersByURI=cacheManagers.get(managerClassLoader);
  if (cacheManagersByURI != null) {
    cacheManagersByURI.remove(managerURI);
  }
}",0.6317016317016317
47782,"@Override public <K,V,C extends Configuration<K,V>>Cache<K,V> createCache(String cacheName,C configuration) throws IllegalArgumentException {
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (configuration == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final String cacheNameWithPrefix=getCacheNameWithPrefix(cacheName);
  final CacheConfig<K,V> cacheConfig=getCacheConfigLocal(cacheNameWithPrefix);
  if (cacheConfig == null) {
    final CacheConfig<K,V> newCacheConfig=createCacheConfig(cacheName,configuration);
    final boolean created=createConfigOnPartition(newCacheConfig);
    if (created) {
      createConfigOnAllMembers(newCacheConfig);
      addCacheConfigIfAbsentToLocal(newCacheConfig);
      final ICache<K,V> cacheProxy=createCacheProxy(newCacheConfig);
      final ICache<?,?> entries=caches.putIfAbsent(cacheNameWithPrefix,cacheProxy);
      if (entries == null) {
        if (newCacheConfig.isStatisticsEnabled()) {
          enableStatistics(cacheName,true);
        }
        if (newCacheConfig.isManagementEnabled()) {
          enableManagement(cacheName,true);
        }
        registerListeners(newCacheConfig,cacheProxy);
        return cacheProxy;
      }
    }
 else {
      final CacheConfig<K,V> cacheConfigFromPartition=getCacheConfigFromPartition(cacheNameWithPrefix);
      createConfigOnAllMembers(cacheConfigFromPartition);
      addCacheConfigIfAbsentToLocal(cacheConfigFromPartition);
    }
  }
  throw new CacheException(""String_Node_Str"" + cacheName + ""String_Node_Str"");
}","@Override public <K,V,C extends Configuration<K,V>>Cache<K,V> createCache(String cacheName,C configuration) throws IllegalArgumentException {
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (configuration == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final String cacheNameWithPrefix=getCacheNameWithPrefix(cacheName);
  final CacheConfig<K,V> cacheConfig=getCacheConfigLocal(cacheNameWithPrefix);
  if (cacheConfig != null) {
    final CacheConfig<K,V> newCacheConfig=createCacheConfig(cacheName,configuration);
    final boolean created=createConfigOnPartition(newCacheConfig);
    if (created) {
      createConfigOnAllMembers(newCacheConfig);
      addCacheConfigIfAbsentToLocal(newCacheConfig);
      final ICache<K,V> cacheProxy=createCacheProxy(newCacheConfig);
      caches.put(cacheNameWithPrefix,cacheProxy);
      if (newCacheConfig.isStatisticsEnabled()) {
        enableStatistics(cacheName,true);
      }
      if (newCacheConfig.isManagementEnabled()) {
        enableManagement(cacheName,true);
      }
      registerListeners(newCacheConfig,cacheProxy);
      return cacheProxy;
    }
 else {
      final CacheConfig<K,V> cacheConfigFromPartition=getCacheConfigFromPartition(cacheNameWithPrefix);
      createConfigOnAllMembers(cacheConfigFromPartition);
      addCacheConfigIfAbsentToLocal(cacheConfigFromPartition);
    }
  }
  throw new CacheException(""String_Node_Str"" + cacheName + ""String_Node_Str"");
}",0.8809746954076851
47783,"private void handleMap(final org.w3c.dom.Node node) throws Exception {
  final String name=getAttribute(node,""String_Node_Str"");
  final MapConfig mapConfig=new MapConfig();
  mapConfig.setName(name);
  for (  org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {
    final String nodeName=cleanNodeName(n.getNodeName());
    final String value=getTextContent(n).trim();
    if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setBackupCount(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_BACKUP_COUNT));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setInMemoryFormat(InMemoryFormat.valueOf(upperCaseInternal(value)));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setAsyncBackupCount(getIntegerValue(""String_Node_Str"",value,MapConfig.MIN_BACKUP_COUNT));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setEvictionPolicy(MapConfig.EvictionPolicy.valueOf(upperCaseInternal(value)));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      final MaxSizeConfig msc=mapConfig.getMaxSizeConfig();
      final Node maxSizePolicy=n.getAttributes().getNamedItem(""String_Node_Str"");
      if (maxSizePolicy != null) {
        msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
      }
      int size=sizeParser(value);
      msc.setSize(size);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setEvictionPercentage(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_EVICTION_PERCENTAGE));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMinEvictionCheckMillis(getLongValue(""String_Node_Str"",value,MapConfig.DEFAULT_MIN_EVICTION_CHECK_MILLIS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setTimeToLiveSeconds(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_TTL_SECONDS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMaxIdleSeconds(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_MAX_IDLE_SECONDS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      MapStoreConfig mapStoreConfig=createMapStoreConfig(n);
      mapConfig.setMapStoreConfig(mapStoreConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      handleViaReflection(n,mapConfig,new NearCacheConfig());
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMergePolicy(value);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setReadBackupData(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setStatisticsEnabled(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapWanReplicationRefHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapIndexesHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapEntryListenerHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setPartitioningStrategyConfig(new PartitioningStrategyConfig(value));
    }
  }
  this.config.addMapConfig(mapConfig);
}","private void handleMap(final org.w3c.dom.Node node) throws Exception {
  final String name=getAttribute(node,""String_Node_Str"");
  final MapConfig mapConfig=new MapConfig();
  mapConfig.setName(name);
  for (  org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {
    final String nodeName=cleanNodeName(n.getNodeName());
    final String value=getTextContent(n).trim();
    if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setBackupCount(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_BACKUP_COUNT));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setInMemoryFormat(InMemoryFormat.valueOf(upperCaseInternal(value)));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setAsyncBackupCount(getIntegerValue(""String_Node_Str"",value,MapConfig.MIN_BACKUP_COUNT));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setEvictionPolicy(MapConfig.EvictionPolicy.valueOf(upperCaseInternal(value)));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      final MaxSizeConfig msc=mapConfig.getMaxSizeConfig();
      final Node maxSizePolicy=n.getAttributes().getNamedItem(""String_Node_Str"");
      if (maxSizePolicy != null) {
        msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
      }
      int size=sizeParser(value);
      msc.setSize(size);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setEvictionPercentage(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_EVICTION_PERCENTAGE));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMinEvictionCheckMillis(getLongValue(""String_Node_Str"",value,MapConfig.DEFAULT_MIN_EVICTION_CHECK_MILLIS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setTimeToLiveSeconds(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_TTL_SECONDS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMaxIdleSeconds(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_MAX_IDLE_SECONDS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      MapStoreConfig mapStoreConfig=createMapStoreConfig(n);
      mapConfig.setMapStoreConfig(mapStoreConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      handleViaReflection(n,mapConfig,new NearCacheConfig());
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMergePolicy(value);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setReadBackupData(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setStatisticsEnabled(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setOptimizeQueries(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapWanReplicationRefHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapIndexesHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapEntryListenerHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setPartitioningStrategyConfig(new PartitioningStrategyConfig(value));
    }
  }
  this.config.addMapConfig(mapConfig);
}",0.9829059829059827
47784,"@Test public void testSameMasterDifferentMemberList() throws Exception {
  Config c1=buildConfig(false);
  Config c2=buildConfig(false);
  Config c3=buildConfig(false);
  c1.getNetworkConfig().setPort(45701);
  c2.getNetworkConfig().setPort(45702);
  c3.getNetworkConfig().setPort(45703);
  List<String> allMembers=Arrays.asList(""String_Node_Str"");
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c3.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(c3);
  final MemberImpl m1=(MemberImpl)h1.getCluster().getLocalMember();
  final MemberImpl m2=(MemberImpl)h2.getCluster().getLocalMember();
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final Node n2=TestUtil.getNode(h2);
  List<MemberInfo> members=new ArrayList<MemberInfo>();
  members.add(new MemberInfo(m1.getAddress(),m1.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m2.getAddress(),m2.getUuid(),Collections.<String,Object>emptyMap()));
  n2.clusterService.updateMembers(members);
  Thread.sleep(30 * 1000);
  assertEquals(m1,h1.getCluster().getMembers().iterator().next());
  assertEquals(m1,h2.getCluster().getMembers().iterator().next());
  assertEquals(m1,h3.getCluster().getMembers().iterator().next());
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}","@Test public void testSameMasterDifferentMemberList() throws Exception {
  List<HazelcastInstance> instanceList=buildInstances(3,45701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  final MemberImpl m1=(MemberImpl)h1.getCluster().getLocalMember();
  final MemberImpl m2=(MemberImpl)h2.getCluster().getLocalMember();
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final Node n2=TestUtil.getNode(h2);
  List<MemberInfo> members=new ArrayList<MemberInfo>();
  members.add(new MemberInfo(m1.getAddress(),m1.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m2.getAddress(),m2.getUuid(),Collections.<String,Object>emptyMap()));
  n2.clusterService.updateMembers(members);
  Thread.sleep(30 * 1000);
  assertEquals(m1,h1.getCluster().getMembers().iterator().next());
  assertEquals(m1,h2.getCluster().getMembers().iterator().next());
  assertEquals(m1,h3.getCluster().getMembers().iterator().next());
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}",0.7806286080821039
47785,"@Test public void testOutOfSyncMemberListTwoMasters() throws Exception {
  Config c1=buildConfig(false);
  Config c2=buildConfig(false);
  Config c3=buildConfig(false);
  c1.getNetworkConfig().setPort(35701);
  c2.getNetworkConfig().setPort(35702);
  c3.getNetworkConfig().setPort(35703);
  List<String> allMembers=Arrays.asList(""String_Node_Str"");
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c3.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(c3);
  final MemberImpl m1=(MemberImpl)h1.getCluster().getLocalMember();
  final MemberImpl m2=(MemberImpl)h2.getCluster().getLocalMember();
  final MemberImpl m3=(MemberImpl)h3.getCluster().getLocalMember();
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final Node n2=TestUtil.getNode(h2);
  List<MemberInfo> members=new ArrayList<MemberInfo>();
  members.add(new MemberInfo(m2.getAddress(),m2.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m3.getAddress(),m3.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m1.getAddress(),m1.getUuid(),Collections.<String,Object>emptyMap()));
  n2.clusterService.updateMembers(members);
  n2.setMasterAddress(m2.getAddress());
  Thread.sleep(30 * 1000);
  assertEquals(m1,h1.getCluster().getMembers().iterator().next());
  assertEquals(m1,h2.getCluster().getMembers().iterator().next());
  assertEquals(m1,h3.getCluster().getMembers().iterator().next());
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}","@Test public void testOutOfSyncMemberListTwoMasters() throws Exception {
  List<HazelcastInstance> instanceList=buildInstances(3,35701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  final MemberImpl m1=(MemberImpl)h1.getCluster().getLocalMember();
  final MemberImpl m2=(MemberImpl)h2.getCluster().getLocalMember();
  final MemberImpl m3=(MemberImpl)h3.getCluster().getLocalMember();
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final Node n2=TestUtil.getNode(h2);
  List<MemberInfo> members=new ArrayList<MemberInfo>();
  members.add(new MemberInfo(m2.getAddress(),m2.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m3.getAddress(),m3.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m1.getAddress(),m1.getUuid(),Collections.<String,Object>emptyMap()));
  n2.clusterService.updateMembers(members);
  n2.setMasterAddress(m2.getAddress());
  Thread.sleep(30 * 1000);
  assertEquals(m1,h1.getCluster().getMembers().iterator().next());
  assertEquals(m1,h2.getCluster().getMembers().iterator().next());
  assertEquals(m1,h3.getCluster().getMembers().iterator().next());
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}",0.7978482446206115
47786,"@Test public void testOutOfSyncMemberList() throws Exception {
  Config c1=buildConfig(false);
  Config c2=buildConfig(false);
  Config c3=buildConfig(false);
  c1.getNetworkConfig().setPort(25701);
  c2.getNetworkConfig().setPort(25702);
  c3.getNetworkConfig().setPort(25703);
  List<String> allMembers=Arrays.asList(""String_Node_Str"");
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c3.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(c3);
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final HazelcastInstance[] instances=new HazelcastInstance[]{h1,h2,h3};
  final AtomicBoolean doingWork=new AtomicBoolean(true);
  Thread[] workThreads=new Thread[instances.length];
  for (int i=0; i < instances.length; i++) {
    final int threadNum=i;
    workThreads[threadNum]=new Thread(new Runnable(){
      public void run(){
        while (doingWork.get()) {
          final HazelcastInstance hz=instances[threadNum];
          Set<Member> members=new HashSet<Member>(hz.getCluster().getMembers());
          members.remove(hz.getCluster().getLocalMember());
          final Map<Member,Future<String>> futures=hz.getExecutorService(""String_Node_Str"").submitToMembers(new PingCallable(),members);
          for (          Future<String> f : futures.values()) {
            try {
              f.get();
            }
 catch (            MemberLeftException ignored) {
            }
catch (            Exception e) {
              e.printStackTrace();
            }
          }
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    workThreads[threadNum].start();
  }
  final Node n3=TestUtil.getNode(h3);
  n3.clusterService.removeAddress(((MemberImpl)h1.getCluster().getLocalMember()).getAddress());
  Thread.sleep(30 * 1000);
  doingWork.set(false);
  for (  Thread t : workThreads) {
    t.join();
  }
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}","@Test public void testOutOfSyncMemberList() throws Exception {
  List<HazelcastInstance> instanceList=buildInstances(3,25701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final HazelcastInstance[] instances=new HazelcastInstance[]{h1,h2,h3};
  final AtomicBoolean doingWork=new AtomicBoolean(true);
  Thread[] workThreads=new Thread[instances.length];
  for (int i=0; i < instances.length; i++) {
    final int threadNum=i;
    workThreads[threadNum]=new Thread(new Runnable(){
      public void run(){
        while (doingWork.get()) {
          final HazelcastInstance hz=instances[threadNum];
          Set<Member> members=new HashSet<Member>(hz.getCluster().getMembers());
          members.remove(hz.getCluster().getLocalMember());
          final Map<Member,Future<String>> futures=hz.getExecutorService(""String_Node_Str"").submitToMembers(new PingCallable(),members);
          for (          Future<String> f : futures.values()) {
            try {
              f.get();
            }
 catch (            MemberLeftException ignored) {
            }
catch (            Exception e) {
              e.printStackTrace();
            }
          }
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    workThreads[threadNum].start();
  }
  final Node n3=TestUtil.getNode(h3);
  n3.clusterService.removeAddress(((MemberImpl)h1.getCluster().getLocalMember()).getAddress());
  Thread.sleep(30 * 1000);
  doingWork.set(false);
  for (  Thread t : workThreads) {
    t.join();
  }
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}",0.85045911674683
47787,"@Test public void testSwitchingMasters() throws Exception {
  Config c1=buildConfig(false);
  Config c2=buildConfig(false);
  Config c3=buildConfig(false);
  Config c4=buildConfig(false);
  Config c5=buildConfig(false);
  c1.getNetworkConfig().setPort(55701);
  c2.getNetworkConfig().setPort(55702);
  c3.getNetworkConfig().setPort(55703);
  c4.getNetworkConfig().setPort(55704);
  c5.getNetworkConfig().setPort(55705);
  List<String> allMembers=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c3.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c4.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c5.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(c3);
  final HazelcastInstance h4=Hazelcast.newHazelcastInstance(c4);
  final HazelcastInstance h5=Hazelcast.newHazelcastInstance(c5);
  assertEquals(5,h1.getCluster().getMembers().size());
  assertEquals(5,h2.getCluster().getMembers().size());
  assertEquals(5,h3.getCluster().getMembers().size());
  assertEquals(5,h4.getCluster().getMembers().size());
  assertEquals(5,h5.getCluster().getMembers().size());
  Thread.sleep(15 * 1000);
  Member master=h1.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  h1.shutdown();
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  master=h2.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  Thread.sleep(10 * 1000);
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
}","@Test public void testSwitchingMasters() throws Exception {
  List<HazelcastInstance> instanceList=buildInstances(5,55701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  final HazelcastInstance h4=instanceList.get(3);
  final HazelcastInstance h5=instanceList.get(4);
  assertEquals(5,h1.getCluster().getMembers().size());
  assertEquals(5,h2.getCluster().getMembers().size());
  assertEquals(5,h3.getCluster().getMembers().size());
  assertEquals(5,h4.getCluster().getMembers().size());
  assertEquals(5,h5.getCluster().getMembers().size());
  Thread.sleep(15 * 1000);
  Member master=h1.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  h1.shutdown();
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  master=h2.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  Thread.sleep(10 * 1000);
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
}",0.7736738703339883
47788,"@Override protected <K,V>void createConfigOnAllMembers(CacheConfig<K,V> cacheConfig){
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  for (  MemberImpl member : members) {
    try {
      ClientRequest request=new CacheCreateConfigRequest(cacheConfig,true,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      future.get();
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}","@Override protected <K,V>void createConfigOnAllMembers(CacheConfig<K,V> cacheConfig){
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  final Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    try {
      ClientRequest request=new CacheCreateConfigRequest(cacheConfig,true,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      futures.add(future);
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,CacheProxyUtil.AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}",0.8232848232848233
47789,"@Override public void enableStatistics(String cacheName,boolean enabled){
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException();
  }
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  for (  MemberImpl member : members) {
    try {
      CacheManagementConfigRequest request=new CacheManagementConfigRequest(getCacheNameWithPrefix(cacheName),true,enabled,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      future.get();
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}","@Override public void enableStatistics(String cacheName,boolean enabled){
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException();
  }
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  final Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    try {
      CacheManagementConfigRequest request=new CacheManagementConfigRequest(getCacheNameWithPrefix(cacheName),true,enabled,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      futures.add(future);
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,CacheProxyUtil.AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}",0.8568220101066817
47790,"@Override public void enableManagement(String cacheName,boolean enabled){
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException();
  }
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  for (  MemberImpl member : members) {
    try {
      CacheManagementConfigRequest request=new CacheManagementConfigRequest(getCacheNameWithPrefix(cacheName),false,enabled,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      future.get();
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}","@Override public void enableManagement(String cacheName,boolean enabled){
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException();
  }
  final ClientInvocationService invocationService=clientContext.getInvocationService();
  final Collection<MemberImpl> members=clientContext.getClusterService().getMemberList();
  final Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    try {
      CacheManagementConfigRequest request=new CacheManagementConfigRequest(getCacheNameWithPrefix(cacheName),false,enabled,member.getAddress());
      final Future future=invocationService.invokeOnTarget(request,member.getAddress());
      futures.add(future);
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,CacheProxyUtil.AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}",0.8569826135726304
47791,"@Override protected <K,V>CacheConfig<K,V> getCacheConfigFromPartition(String cacheName){
  ClientRequest request=new CacheGetConfigRequest(cacheName);
  try {
    final Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheName);
    return clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return null;
}","@Override protected <K,V>CacheConfig<K,V> getCacheConfigFromPartition(String cacheName){
  ClientRequest request=new CacheGetConfigRequest(cacheName);
  try {
    final Future future=clientContext.getInvocationService().invokeOnKeyOwner(request,cacheName);
    return clientContext.getSerializationService().toObject(future.get());
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.9298892988929888
47792,"public HazelcastClientCacheManager(HazelcastClientCachingProvider cachingProvider,HazelcastInstance hazelcastInstance,URI uri,ClassLoader classLoader,Properties properties){
  super(cachingProvider,uri,classLoader,properties);
  if (hazelcastInstance == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.hazelcastInstance=hazelcastInstance;
  final ClientCacheDistributedObject setupRef=hazelcastInstance.getDistributedObject(CacheService.SERVICE_NAME,""String_Node_Str"");
  this.clientContext=setupRef.getClientContext();
}","public HazelcastClientCacheManager(HazelcastClientCachingProvider cachingProvider,HazelcastInstance hazelcastInstance,URI uri,ClassLoader classLoader,Properties properties){
  super(cachingProvider,uri,classLoader,properties);
  if (hazelcastInstance == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.hazelcastInstance=hazelcastInstance;
  final ClientCacheDistributedObject setupRef=hazelcastInstance.getDistributedObject(CacheService.SERVICE_NAME,""String_Node_Str"");
  this.clientContext=setupRef.getClientContext();
  logger=clientContext.getHazelcastInstance().getLoggingService().getLogger(getClass());
}",0.9247675401521556
47793,"@Override protected CacheManager createHazelcastCacheManager(URI uri,ClassLoader classLoader,Properties managerProperties){
  if (hazelcastInstance == null) {
    hazelcastInstance=initHazelcast();
  }
  return new HazelcastClientCacheManager(this,hazelcastInstance,uri,classLoader,managerProperties);
}","@Override protected CacheManager createHazelcastCacheManager(URI uri,ClassLoader classLoader,Properties managerProperties){
  if (hazelcastInstance == null) {
    initHazelcast();
  }
  return new HazelcastClientCacheManager(this,hazelcastInstance,uri,classLoader,managerProperties);
}",0.6258503401360545
47794,"public static HazelcastClientCachingProvider createCachingProvider(HazelcastInstance hazelcastInstance){
  final HazelcastClientCachingProvider cachingProvider=new HazelcastClientCachingProvider();
  cachingProvider.hazelcastInstance=hazelcastInstance;
  return cachingProvider;
}","/** 
 * Helper method for creating caching provider for testing etc
 * @param hazelcastInstance
 * @return HazelcastClientCachingProvider
 */
public static HazelcastClientCachingProvider createCachingProvider(HazelcastInstance hazelcastInstance){
  final HazelcastClientCachingProvider cachingProvider=new HazelcastClientCachingProvider();
  cachingProvider.hazelcastInstance=hazelcastInstance;
  return cachingProvider;
}",0.7977207977207977
47795,"protected HazelcastInstance initHazelcast(){
  ClientConfig config=new XmlClientConfigBuilder().build();
  return HazelcastClient.newHazelcastClient(config);
}","protected synchronized void initHazelcast(){
  if (hazelcastInstance == null) {
    hazelcastInstance=HazelcastClient.newHazelcastClient();
  }
}",0.5328947368421053
47796,"protected void registrationOtherNodes(CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,boolean isRegister){
  final OperationService operationService=nodeEngine.getOperationService();
  final Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
  Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    if (!member.localMember()) {
      final Operation op=new CacheListenerRegistrationOperation(getDistributedObjectName(),cacheEntryListenerConfiguration,isRegister);
      final InternalCompletableFuture<Object> future=operationService.invokeOnTarget(CacheService.SERVICE_NAME,op,member.getAddress());
      futures.add(future);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}","protected void registrationOtherNodes(CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,boolean isRegister){
  final OperationService operationService=nodeEngine.getOperationService();
  final Collection<MemberImpl> members=nodeEngine.getClusterService().getMemberList();
  Collection<Future> futures=new ArrayList<Future>();
  for (  MemberImpl member : members) {
    if (!member.localMember()) {
      final Operation op=new CacheListenerRegistrationOperation(getDistributedObjectName(),cacheEntryListenerConfiguration,isRegister);
      final InternalCompletableFuture<Object> future=operationService.invokeOnTarget(CacheService.SERVICE_NAME,op,member.getAddress());
      futures.add(future);
    }
  }
  try {
    FutureUtil.waitWithDeadline(futures,CacheProxyUtil.AWAIT_COMPLETION_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.warning(e);
  }
}",0.991652754590985
47797,"@Override public URI getDefaultURI(){
  try {
    return new URI(this.getClass().getName());
  }
 catch (  URISyntaxException e) {
    throw new CacheException(""String_Node_Str"",e);
  }
}","@Override public URI getDefaultURI(){
  return defaultURI;
}",0.437246963562753
47798,"protected void shutdownHazelcastInstance(){
  if (hazelcastInstance != null) {
    hazelcastInstance.shutdown();
  }
  hazelcastInstance=null;
}","protected void shutdownHazelcastInstance(){
  final HazelcastInstance localInstanceRef=hazelcastInstance;
  if (localInstanceRef != null) {
    hazelcastInstance.shutdown();
  }
  hazelcastInstance=null;
}",0.7277936962750716
47799,"@Override public ClassLoader getDefaultClassLoader(){
  return this.getClass().getClassLoader();
}","@Override public ClassLoader getDefaultClassLoader(){
  return defaultClassLoader;
}",0.8791208791208791
47800,"public HazelcastAbstractCachingProvider(){
  this.cacheManagers=new ConcurrentReferenceHashMap<ClassLoader,ConcurrentMap<URI,CacheManager>>();
}","public HazelcastAbstractCachingProvider(){
  this.cacheManagers=new ConcurrentReferenceHashMap<ClassLoader,ConcurrentMap<URI,CacheManager>>();
  this.defaultClassLoader=this.getClass().getClassLoader();
  try {
    defaultURI=new URI(this.getClass().getName());
  }
 catch (  URISyntaxException e) {
    throw new CacheException(""String_Node_Str"",e);
  }
}",0.576
47801,"@Override public void close(URI uri,ClassLoader classLoader){
  final URI managerURI=uri == null ? getDefaultURI() : uri;
  final ClassLoader managerClassLoader=classLoader == null ? getDefaultClassLoader() : classLoader;
  final ConcurrentMap<URI,CacheManager> uriCacheManagerHashMap=this.cacheManagers.get(managerClassLoader);
  if (uriCacheManagerHashMap != null) {
    final CacheManager cacheManager=uriCacheManagerHashMap.get(managerURI);
    if (cacheManager != null) {
      cacheManager.close();
    }
  }
}","@Override public void close(URI uri,ClassLoader classLoader){
  final URI managerURI=getManagerUri(uri);
  final ClassLoader managerClassLoader=getManagerClassLoader(classLoader);
  final ConcurrentMap<URI,CacheManager> uriCacheManagerMap=this.cacheManagers.get(managerClassLoader);
  if (uriCacheManagerMap != null) {
    final CacheManager cacheManager=uriCacheManagerMap.get(managerURI);
    if (cacheManager != null) {
      cacheManager.close();
    }
  }
}",0.8384458077709611
47802,"public void releaseCacheManager(URI uri,ClassLoader classLoader){
  final URI managerURI=uri == null ? getDefaultURI() : uri;
  final ClassLoader managerClassLoader=classLoader == null ? getDefaultClassLoader() : classLoader;
  ConcurrentMap<URI,CacheManager> cacheManagersByURI=cacheManagers.get(managerClassLoader);
  if (cacheManagersByURI != null) {
    cacheManagersByURI.remove(managerURI);
    if (cacheManagersByURI.size() == 0) {
      cacheManagers.remove(managerClassLoader);
    }
  }
}","public void releaseCacheManager(URI uri,ClassLoader classLoader){
  final URI managerURI=getManagerUri(uri);
  final ClassLoader managerClassLoader=getManagerClassLoader(classLoader);
  ConcurrentMap<URI,CacheManager> cacheManagersByURI=cacheManagers.get(managerClassLoader);
  if (cacheManagersByURI != null) {
    cacheManagersByURI.remove(managerURI);
  }
}",0.6317016317016317
47803,"@Override public <K,V,C extends Configuration<K,V>>Cache<K,V> createCache(String cacheName,C configuration) throws IllegalArgumentException {
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (configuration == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final String cacheNameWithPrefix=getCacheNameWithPrefix(cacheName);
  final CacheConfig<K,V> cacheConfig=getCacheConfigLocal(cacheNameWithPrefix);
  if (cacheConfig == null) {
    final CacheConfig<K,V> newCacheConfig=createCacheConfig(cacheName,configuration);
    final boolean created=createConfigOnPartition(newCacheConfig);
    if (created) {
      createConfigOnAllMembers(newCacheConfig);
      addCacheConfigIfAbsentToLocal(newCacheConfig);
      final ICache<K,V> cacheProxy=createCacheProxy(newCacheConfig);
      final ICache<?,?> entries=caches.putIfAbsent(cacheNameWithPrefix,cacheProxy);
      if (entries == null) {
        if (newCacheConfig.isStatisticsEnabled()) {
          enableStatistics(cacheName,true);
        }
        if (newCacheConfig.isManagementEnabled()) {
          enableManagement(cacheName,true);
        }
        registerListeners(newCacheConfig,cacheProxy);
        return cacheProxy;
      }
    }
 else {
      final CacheConfig<K,V> cacheConfigFromPartition=getCacheConfigFromPartition(cacheNameWithPrefix);
      createConfigOnAllMembers(cacheConfigFromPartition);
      addCacheConfigIfAbsentToLocal(cacheConfigFromPartition);
    }
  }
  throw new CacheException(""String_Node_Str"" + cacheName + ""String_Node_Str"");
}","@Override public <K,V,C extends Configuration<K,V>>Cache<K,V> createCache(String cacheName,C configuration) throws IllegalArgumentException {
  if (isClosed()) {
    throw new IllegalStateException();
  }
  if (cacheName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (configuration == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final String cacheNameWithPrefix=getCacheNameWithPrefix(cacheName);
  final CacheConfig<K,V> cacheConfig=getCacheConfigLocal(cacheNameWithPrefix);
  if (cacheConfig != null) {
    final CacheConfig<K,V> newCacheConfig=createCacheConfig(cacheName,configuration);
    final boolean created=createConfigOnPartition(newCacheConfig);
    if (created) {
      createConfigOnAllMembers(newCacheConfig);
      addCacheConfigIfAbsentToLocal(newCacheConfig);
      final ICache<K,V> cacheProxy=createCacheProxy(newCacheConfig);
      caches.put(cacheNameWithPrefix,cacheProxy);
      if (newCacheConfig.isStatisticsEnabled()) {
        enableStatistics(cacheName,true);
      }
      if (newCacheConfig.isManagementEnabled()) {
        enableManagement(cacheName,true);
      }
      registerListeners(newCacheConfig,cacheProxy);
      return cacheProxy;
    }
 else {
      final CacheConfig<K,V> cacheConfigFromPartition=getCacheConfigFromPartition(cacheNameWithPrefix);
      createConfigOnAllMembers(cacheConfigFromPartition);
      addCacheConfigIfAbsentToLocal(cacheConfigFromPartition);
    }
  }
  throw new CacheException(""String_Node_Str"" + cacheName + ""String_Node_Str"");
}",0.8809746954076851
47804,"public void writeUTF0(final DataOutput out,final String str,final byte[] buffer) throws IOException {
  if (!QuickMath.isPowerOfTwo(buffer.length)) {
    throw new IllegalArgumentException(""String_Node_Str"" + buffer.length);
  }
  boolean isNull=str == null;
  out.writeBoolean(isNull);
  if (isNull) {
    return;
  }
  final DataOutputAwareUtfWriter UTF_WRITER=out instanceof BufferObjectDataOutput ? BUFFERED_DATA_OUTPUT_UTF_WRITER : DEFAULT_DATA_OUTPUT_UTF_WRITER;
  int length=str.length();
  out.writeInt(length);
  out.writeInt(length);
  if (length > 0) {
    int chunkSize=(length / STRING_CHUNK_SIZE) + 1;
    for (int i=0; i < chunkSize; i++) {
      int beginIndex=Math.max(0,i * STRING_CHUNK_SIZE - 1);
      int endIndex=Math.min((i + 1) * STRING_CHUNK_SIZE - 1,length);
      UTF_WRITER.writeShortUTF(out,str,beginIndex,endIndex,buffer);
    }
  }
}","public void writeUTF0(final DataOutput out,final String str,final byte[] buffer) throws IOException {
  if (!QuickMath.isPowerOfTwo(buffer.length)) {
    throw new IllegalArgumentException(""String_Node_Str"" + buffer.length);
  }
  boolean isNull=str == null;
  out.writeBoolean(isNull);
  if (isNull) {
    return;
  }
  final DataOutputAwareUtfWriter utfWriter=out instanceof BufferObjectDataOutput ? BUFFERED_DATA_OUTPUT_UTF_WRITER : DEFAULT_DATA_OUTPUT_UTF_WRITER;
  int length=str.length();
  out.writeInt(length);
  out.writeInt(length);
  if (length > 0) {
    int chunkSize=(length / STRING_CHUNK_SIZE) + 1;
    for (int i=0; i < chunkSize; i++) {
      int beginIndex=Math.max(0,i * STRING_CHUNK_SIZE - 1);
      int endIndex=Math.min((i + 1) * STRING_CHUNK_SIZE - 1,length);
      utfWriter.writeShortUTF(out,str,beginIndex,endIndex,buffer);
    }
  }
}",0.9803012746234068
47805,"private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort();
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  int readCount=0;
  int bufferPos=1;
  int i=0;
  int c1=0, c2=0, c3=0, cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  for (; i < minUtfLenght; i++) {
    if ((c1=buffer[bufferPos++] & 0xFF) > 127) {
      break;
    }
    data[charArrCount++]=(char)c1;
  }
  for (; i < utfLength; i++) {
    if (c1 > 127) {
      break;
    }
    data[charArrCount++]=(char)c1;
    bufferPos=buffered(buffer,bufferPos,utfLength,in);
    c1=buffer[0] & 0xFF;
  }
  for (readCount=i; readCount < utfLength; ) {
    cTemp=c1 >> 4;
    if (cTemp >> 3 == 0) {
      data[charArrCount++]=(char)c1;
      readCount++;
    }
 else     if (cTemp == 12 || cTemp == 13) {
      if (readCount + 1 > utfLength) {
        throw new UTFDataFormatException(""String_Node_Str"");
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,in);
      c2=buffer[0] & 0xFF;
      if ((c2 & 0xC0) != 0x80) {
        throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
      }
      data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
      readCount+=2;
    }
 else     if (cTemp == 14) {
      if (readCount + 2 > utfLength) {
        throw new UTFDataFormatException(""String_Node_Str"");
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,in);
      c2=buffer[0] & 0xFF;
      bufferPos=buffered(buffer,bufferPos,utfLength,in);
      c3=buffer[0] & 0xFF;
      if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
      }
      data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
      readCount+=3;
    }
 else {
      throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
    }
    bufferPos=buffered(buffer,bufferPos,utfLength,in);
    c1=buffer[0] & 0xFF;
  }
}","private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort();
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  int readCount=0;
  int bufferPos=1;
  int i=0;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  for (; i < minUtfLenght; i++) {
    c1=buffer[bufferPos++] & 0xFF;
    if (c1 > 127) {
      break;
    }
    data[charArrCount++]=(char)c1;
  }
  for (; i < utfLength; i++) {
    if (c1 > 127) {
      break;
    }
    data[charArrCount++]=(char)c1;
    bufferPos=buffered(buffer,bufferPos,utfLength,in);
    c1=buffer[0] & 0xFF;
  }
  for (readCount=i; readCount < utfLength; ) {
    cTemp=c1 >> 4;
    if (cTemp >> 3 == 0) {
      data[charArrCount++]=(char)c1;
      readCount++;
    }
 else     if (cTemp == 12 || cTemp == 13) {
      if (readCount + 1 > utfLength) {
        throw new UTFDataFormatException(""String_Node_Str"");
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,in);
      c2=buffer[0] & 0xFF;
      if ((c2 & 0xC0) != 0x80) {
        throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
      }
      data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
      readCount+=2;
    }
 else     if (cTemp == 14) {
      if (readCount + 2 > utfLength) {
        throw new UTFDataFormatException(""String_Node_Str"");
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,in);
      c2=buffer[0] & 0xFF;
      bufferPos=buffered(buffer,bufferPos,utfLength,in);
      c3=buffer[0] & 0xFF;
      if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
      }
      data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
      readCount+=3;
    }
 else {
      throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
    }
    bufferPos=buffered(buffer,bufferPos,utfLength,in);
    c1=buffer[0] & 0xFF;
  }
}",0.9900332225913622
47806,"private void handleMap(final org.w3c.dom.Node node) throws Exception {
  final String name=getAttribute(node,""String_Node_Str"");
  final MapConfig mapConfig=new MapConfig();
  mapConfig.setName(name);
  for (  org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {
    final String nodeName=cleanNodeName(n.getNodeName());
    final String value=getTextContent(n).trim();
    if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setBackupCount(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_BACKUP_COUNT));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setInMemoryFormat(InMemoryFormat.valueOf(upperCaseInternal(value)));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setAsyncBackupCount(getIntegerValue(""String_Node_Str"",value,MapConfig.MIN_BACKUP_COUNT));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setEvictionPolicy(MapConfig.EvictionPolicy.valueOf(upperCaseInternal(value)));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      final MaxSizeConfig msc=mapConfig.getMaxSizeConfig();
      final Node maxSizePolicy=n.getAttributes().getNamedItem(""String_Node_Str"");
      if (maxSizePolicy != null) {
        msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
      }
      int size=sizeParser(value);
      msc.setSize(size);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setEvictionPercentage(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_EVICTION_PERCENTAGE));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMinEvictionCheckMillis(getLongValue(""String_Node_Str"",value,MapConfig.DEFAULT_MIN_EVICTION_CHECK_MILLIS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setTimeToLiveSeconds(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_TTL_SECONDS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMaxIdleSeconds(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_MAX_IDLE_SECONDS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      MapStoreConfig mapStoreConfig=createMapStoreConfig(n);
      mapConfig.setMapStoreConfig(mapStoreConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      handleViaReflection(n,mapConfig,new NearCacheConfig());
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMergePolicy(value);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setReadBackupData(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setStatisticsEnabled(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapWanReplicationRefHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapIndexesHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapEntryListenerHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setPartitioningStrategyConfig(new PartitioningStrategyConfig(value));
    }
  }
  this.config.addMapConfig(mapConfig);
}","private void handleMap(final org.w3c.dom.Node node) throws Exception {
  final String name=getAttribute(node,""String_Node_Str"");
  final MapConfig mapConfig=new MapConfig();
  mapConfig.setName(name);
  for (  org.w3c.dom.Node n : new IterableNodeList(node.getChildNodes())) {
    final String nodeName=cleanNodeName(n.getNodeName());
    final String value=getTextContent(n).trim();
    if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setBackupCount(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_BACKUP_COUNT));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setInMemoryFormat(InMemoryFormat.valueOf(upperCaseInternal(value)));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setAsyncBackupCount(getIntegerValue(""String_Node_Str"",value,MapConfig.MIN_BACKUP_COUNT));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setEvictionPolicy(MapConfig.EvictionPolicy.valueOf(upperCaseInternal(value)));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      final MaxSizeConfig msc=mapConfig.getMaxSizeConfig();
      final Node maxSizePolicy=n.getAttributes().getNamedItem(""String_Node_Str"");
      if (maxSizePolicy != null) {
        msc.setMaxSizePolicy(MaxSizeConfig.MaxSizePolicy.valueOf(upperCaseInternal(getTextContent(maxSizePolicy))));
      }
      int size=sizeParser(value);
      msc.setSize(size);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setEvictionPercentage(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_EVICTION_PERCENTAGE));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMinEvictionCheckMillis(getLongValue(""String_Node_Str"",value,MapConfig.DEFAULT_MIN_EVICTION_CHECK_MILLIS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setTimeToLiveSeconds(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_TTL_SECONDS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMaxIdleSeconds(getIntegerValue(""String_Node_Str"",value,MapConfig.DEFAULT_MAX_IDLE_SECONDS));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      MapStoreConfig mapStoreConfig=createMapStoreConfig(n);
      mapConfig.setMapStoreConfig(mapStoreConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      handleViaReflection(n,mapConfig,new NearCacheConfig());
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setMergePolicy(value);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setReadBackupData(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setStatisticsEnabled(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setOptimizeQueries(checkTrue(value));
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapWanReplicationRefHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapIndexesHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapEntryListenerHandle(n,mapConfig);
    }
 else     if (""String_Node_Str"".equals(nodeName)) {
      mapConfig.setPartitioningStrategyConfig(new PartitioningStrategyConfig(value));
    }
  }
  this.config.addMapConfig(mapConfig);
}",0.9829059829059827
47807,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  threadId=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
}",0.8807339449541285
47808,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeLong(threadId);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
}",0.8820960698689956
47809,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  dataKey=new Data();
  dataKey.readData(in);
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  dataKey=new Data();
  dataKey.readData(in);
  threadId=in.readLong();
}",0.9161290322580644
47810,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  dataKey.writeData(out);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  dataKey.writeData(out);
  out.writeLong(threadId);
}",0.9039145907473308
47811,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  int size=in.readInt();
  opList=new ArrayList<Operation>(size);
  for (int i=0; i < size; i++) {
    opList.add((Operation)in.readObject());
  }
  caller=in.readUTF();
  threadId=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  int size=in.readInt();
  opList=new ArrayList<Operation>(size);
  for (int i=0; i < size; i++) {
    opList.add((Operation)in.readObject());
  }
  caller=in.readUTF();
}",0.953405017921147
47812,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeInt(opList.size());
  for (  Operation op : opList) {
    out.writeObject(op);
  }
  out.writeUTF(caller);
  out.writeLong(threadId);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeInt(opList.size());
  for (  Operation op : opList) {
    out.writeObject(op);
  }
  out.writeUTF(caller);
}",0.9419354838709676
47813,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  ttl=in.readLong();
  threadId=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  ttl=in.readLong();
}",0.9
47814,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeLong(ttl);
  out.writeLong(threadId);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeLong(ttl);
}",0.9010989010989012
47815,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  caller=in.readUTF();
  threadId=in.readLong();
  ttl=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  caller=in.readUTF();
  ttl=in.readLong();
}",0.915032679738562
47816,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(caller);
  out.writeLong(threadId);
  out.writeLong(ttl);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(caller);
  out.writeLong(ttl);
}",0.9158878504672896
47817,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  caller=in.readUTF();
  threadId=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  caller=in.readUTF();
}",0.9015151515151516
47818,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(caller);
  out.writeLong(threadId);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(caller);
}",0.9025270758122744
47819,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  threadId=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
}",0.8807339449541285
47820,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeLong(threadId);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
}",0.8820960698689956
47821,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  dataKey=new Data();
  dataKey.readData(in);
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  dataKey=new Data();
  dataKey.readData(in);
  threadId=in.readLong();
}",0.9161290322580644
47822,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  dataKey.writeData(out);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  dataKey.writeData(out);
  out.writeLong(threadId);
}",0.9039145907473308
47823,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  int size=in.readInt();
  opList=new ArrayList<Operation>(size);
  for (int i=0; i < size; i++) {
    opList.add((Operation)in.readObject());
  }
  caller=in.readUTF();
  threadId=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  int size=in.readInt();
  opList=new ArrayList<Operation>(size);
  for (int i=0; i < size; i++) {
    opList.add((Operation)in.readObject());
  }
  caller=in.readUTF();
}",0.953405017921147
47824,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeInt(opList.size());
  for (  Operation op : opList) {
    out.writeObject(op);
  }
  out.writeUTF(caller);
  out.writeLong(threadId);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeInt(opList.size());
  for (  Operation op : opList) {
    out.writeObject(op);
  }
  out.writeUTF(caller);
}",0.9419354838709676
47825,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  ttl=in.readLong();
  threadId=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  ttl=in.readLong();
}",0.9
47826,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeLong(ttl);
  out.writeLong(threadId);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeLong(ttl);
}",0.9010989010989012
47827,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  caller=in.readUTF();
  threadId=in.readLong();
  ttl=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  caller=in.readUTF();
  ttl=in.readLong();
}",0.915032679738562
47828,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(caller);
  out.writeLong(threadId);
  out.writeLong(ttl);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(caller);
  out.writeLong(ttl);
}",0.9158878504672896
47829,"protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  caller=in.readUTF();
  threadId=in.readLong();
}","protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  caller=in.readUTF();
}",0.9015151515151516
47830,"protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(caller);
  out.writeLong(threadId);
}","protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(caller);
}",0.9025270758122744
47831,"@Test public void testSameMasterDifferentMemberList() throws Exception {
  Config c1=buildConfig(false);
  Config c2=buildConfig(false);
  Config c3=buildConfig(false);
  c1.getNetworkConfig().setPort(45701);
  c2.getNetworkConfig().setPort(45702);
  c3.getNetworkConfig().setPort(45703);
  List<String> allMembers=Arrays.asList(""String_Node_Str"");
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c3.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(c3);
  final MemberImpl m1=(MemberImpl)h1.getCluster().getLocalMember();
  final MemberImpl m2=(MemberImpl)h2.getCluster().getLocalMember();
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final Node n2=TestUtil.getNode(h2);
  List<MemberInfo> members=new ArrayList<MemberInfo>();
  members.add(new MemberInfo(m1.getAddress(),m1.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m2.getAddress(),m2.getUuid(),Collections.<String,Object>emptyMap()));
  n2.clusterService.updateMembers(members);
  Thread.sleep(30 * 1000);
  assertEquals(m1,h1.getCluster().getMembers().iterator().next());
  assertEquals(m1,h2.getCluster().getMembers().iterator().next());
  assertEquals(m1,h3.getCluster().getMembers().iterator().next());
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}","@Test public void testSameMasterDifferentMemberList() throws Exception {
  List<HazelcastInstance> instanceList=buildInstances(3,45701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  final MemberImpl m1=(MemberImpl)h1.getCluster().getLocalMember();
  final MemberImpl m2=(MemberImpl)h2.getCluster().getLocalMember();
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final Node n2=TestUtil.getNode(h2);
  List<MemberInfo> members=new ArrayList<MemberInfo>();
  members.add(new MemberInfo(m1.getAddress(),m1.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m2.getAddress(),m2.getUuid(),Collections.<String,Object>emptyMap()));
  n2.clusterService.updateMembers(members);
  Thread.sleep(30 * 1000);
  assertEquals(m1,h1.getCluster().getMembers().iterator().next());
  assertEquals(m1,h2.getCluster().getMembers().iterator().next());
  assertEquals(m1,h3.getCluster().getMembers().iterator().next());
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}",0.7806286080821039
47832,"@Test public void testOutOfSyncMemberListTwoMasters() throws Exception {
  Config c1=buildConfig(false);
  Config c2=buildConfig(false);
  Config c3=buildConfig(false);
  c1.getNetworkConfig().setPort(35701);
  c2.getNetworkConfig().setPort(35702);
  c3.getNetworkConfig().setPort(35703);
  List<String> allMembers=Arrays.asList(""String_Node_Str"");
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c3.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(c3);
  final MemberImpl m1=(MemberImpl)h1.getCluster().getLocalMember();
  final MemberImpl m2=(MemberImpl)h2.getCluster().getLocalMember();
  final MemberImpl m3=(MemberImpl)h3.getCluster().getLocalMember();
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final Node n2=TestUtil.getNode(h2);
  List<MemberInfo> members=new ArrayList<MemberInfo>();
  members.add(new MemberInfo(m2.getAddress(),m2.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m3.getAddress(),m3.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m1.getAddress(),m1.getUuid(),Collections.<String,Object>emptyMap()));
  n2.clusterService.updateMembers(members);
  n2.setMasterAddress(m2.getAddress());
  Thread.sleep(30 * 1000);
  assertEquals(m1,h1.getCluster().getMembers().iterator().next());
  assertEquals(m1,h2.getCluster().getMembers().iterator().next());
  assertEquals(m1,h3.getCluster().getMembers().iterator().next());
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}","@Test public void testOutOfSyncMemberListTwoMasters() throws Exception {
  List<HazelcastInstance> instanceList=buildInstances(3,35701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  final MemberImpl m1=(MemberImpl)h1.getCluster().getLocalMember();
  final MemberImpl m2=(MemberImpl)h2.getCluster().getLocalMember();
  final MemberImpl m3=(MemberImpl)h3.getCluster().getLocalMember();
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final Node n2=TestUtil.getNode(h2);
  List<MemberInfo> members=new ArrayList<MemberInfo>();
  members.add(new MemberInfo(m2.getAddress(),m2.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m3.getAddress(),m3.getUuid(),Collections.<String,Object>emptyMap()));
  members.add(new MemberInfo(m1.getAddress(),m1.getUuid(),Collections.<String,Object>emptyMap()));
  n2.clusterService.updateMembers(members);
  n2.setMasterAddress(m2.getAddress());
  Thread.sleep(30 * 1000);
  assertEquals(m1,h1.getCluster().getMembers().iterator().next());
  assertEquals(m1,h2.getCluster().getMembers().iterator().next());
  assertEquals(m1,h3.getCluster().getMembers().iterator().next());
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}",0.7978482446206115
47833,"@Test public void testOutOfSyncMemberList() throws Exception {
  Config c1=buildConfig(false);
  Config c2=buildConfig(false);
  Config c3=buildConfig(false);
  c1.getNetworkConfig().setPort(25701);
  c2.getNetworkConfig().setPort(25702);
  c3.getNetworkConfig().setPort(25703);
  List<String> allMembers=Arrays.asList(""String_Node_Str"");
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c3.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(c3);
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final HazelcastInstance[] instances=new HazelcastInstance[]{h1,h2,h3};
  final AtomicBoolean doingWork=new AtomicBoolean(true);
  Thread[] workThreads=new Thread[instances.length];
  for (int i=0; i < instances.length; i++) {
    final int threadNum=i;
    workThreads[threadNum]=new Thread(new Runnable(){
      public void run(){
        while (doingWork.get()) {
          final HazelcastInstance hz=instances[threadNum];
          Set<Member> members=new HashSet<Member>(hz.getCluster().getMembers());
          members.remove(hz.getCluster().getLocalMember());
          final Map<Member,Future<String>> futures=hz.getExecutorService(""String_Node_Str"").submitToMembers(new PingCallable(),members);
          for (          Future<String> f : futures.values()) {
            try {
              f.get();
            }
 catch (            MemberLeftException ignored) {
            }
catch (            Exception e) {
              e.printStackTrace();
            }
          }
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    workThreads[threadNum].start();
  }
  final Node n3=TestUtil.getNode(h3);
  n3.clusterService.removeAddress(((MemberImpl)h1.getCluster().getLocalMember()).getAddress());
  Thread.sleep(30 * 1000);
  doingWork.set(false);
  for (  Thread t : workThreads) {
    t.join();
  }
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}","@Test public void testOutOfSyncMemberList() throws Exception {
  List<HazelcastInstance> instanceList=buildInstances(3,25701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
  final HazelcastInstance[] instances=new HazelcastInstance[]{h1,h2,h3};
  final AtomicBoolean doingWork=new AtomicBoolean(true);
  Thread[] workThreads=new Thread[instances.length];
  for (int i=0; i < instances.length; i++) {
    final int threadNum=i;
    workThreads[threadNum]=new Thread(new Runnable(){
      public void run(){
        while (doingWork.get()) {
          final HazelcastInstance hz=instances[threadNum];
          Set<Member> members=new HashSet<Member>(hz.getCluster().getMembers());
          members.remove(hz.getCluster().getLocalMember());
          final Map<Member,Future<String>> futures=hz.getExecutorService(""String_Node_Str"").submitToMembers(new PingCallable(),members);
          for (          Future<String> f : futures.values()) {
            try {
              f.get();
            }
 catch (            MemberLeftException ignored) {
            }
catch (            Exception e) {
              e.printStackTrace();
            }
          }
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
);
    workThreads[threadNum].start();
  }
  final Node n3=TestUtil.getNode(h3);
  n3.clusterService.removeAddress(((MemberImpl)h1.getCluster().getLocalMember()).getAddress());
  Thread.sleep(30 * 1000);
  doingWork.set(false);
  for (  Thread t : workThreads) {
    t.join();
  }
  assertEquals(3,h1.getCluster().getMembers().size());
  assertEquals(3,h2.getCluster().getMembers().size());
  assertEquals(3,h3.getCluster().getMembers().size());
}",0.85045911674683
47834,"@Test public void testSwitchingMasters() throws Exception {
  Config c1=buildConfig(false);
  Config c2=buildConfig(false);
  Config c3=buildConfig(false);
  Config c4=buildConfig(false);
  Config c5=buildConfig(false);
  c1.getNetworkConfig().setPort(55701);
  c2.getNetworkConfig().setPort(55702);
  c3.getNetworkConfig().setPort(55703);
  c4.getNetworkConfig().setPort(55704);
  c5.getNetworkConfig().setPort(55705);
  List<String> allMembers=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  c1.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c2.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c3.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c4.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  c5.getNetworkConfig().getJoin().getTcpIpConfig().setMembers(allMembers);
  final HazelcastInstance h1=Hazelcast.newHazelcastInstance(c1);
  final HazelcastInstance h2=Hazelcast.newHazelcastInstance(c2);
  final HazelcastInstance h3=Hazelcast.newHazelcastInstance(c3);
  final HazelcastInstance h4=Hazelcast.newHazelcastInstance(c4);
  final HazelcastInstance h5=Hazelcast.newHazelcastInstance(c5);
  assertEquals(5,h1.getCluster().getMembers().size());
  assertEquals(5,h2.getCluster().getMembers().size());
  assertEquals(5,h3.getCluster().getMembers().size());
  assertEquals(5,h4.getCluster().getMembers().size());
  assertEquals(5,h5.getCluster().getMembers().size());
  Thread.sleep(15 * 1000);
  Member master=h1.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  h1.shutdown();
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  master=h2.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  Thread.sleep(10 * 1000);
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
}","@Test public void testSwitchingMasters() throws Exception {
  List<HazelcastInstance> instanceList=buildInstances(5,55701);
  final HazelcastInstance h1=instanceList.get(0);
  final HazelcastInstance h2=instanceList.get(1);
  final HazelcastInstance h3=instanceList.get(2);
  final HazelcastInstance h4=instanceList.get(3);
  final HazelcastInstance h5=instanceList.get(4);
  assertEquals(5,h1.getCluster().getMembers().size());
  assertEquals(5,h2.getCluster().getMembers().size());
  assertEquals(5,h3.getCluster().getMembers().size());
  assertEquals(5,h4.getCluster().getMembers().size());
  assertEquals(5,h5.getCluster().getMembers().size());
  Thread.sleep(15 * 1000);
  Member master=h1.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  h1.shutdown();
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  master=h2.getCluster().getLocalMember();
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
  Thread.sleep(10 * 1000);
  assertEquals(4,h2.getCluster().getMembers().size());
  assertEquals(4,h3.getCluster().getMembers().size());
  assertEquals(4,h4.getCluster().getMembers().size());
  assertEquals(4,h5.getCluster().getMembers().size());
  assertEquals(master,h2.getCluster().getMembers().iterator().next());
  assertEquals(master,h3.getCluster().getMembers().iterator().next());
  assertEquals(master,h4.getCluster().getMembers().iterator().next());
  assertEquals(master,h5.getCluster().getMembers().iterator().next());
}",0.7736738703339883
47835,"@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  char[] chars=(char[])UNSAFE.getObject(str,STRING_VALUE_FIELD_OFFSET);
  int utfLength=calculateUtf8Length(chars,beginIndex,endIndex);
  if (utfLength > 65535) {
    throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
  }
  out.writeShort(utfLength);
  int i;
  int c;
  int bufferPos=0;
  if (utfLength >= buffer.length) {
    for (i=beginIndex; i < endIndex; i++) {
      c=chars[i];
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    for (; i < endIndex; i++) {
      c=chars[i];
      if (c <= 0) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
      }
 else       if (c > 0x007F) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=chars[i];
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=chars[i];
      if (c <= 0) {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else       if (c > 0x007F) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)c;
      }
    }
    out.write(buffer,0,bufferPos);
  }
}","@Override public void writeShortUTF(final DataOutput out,final String str,final int beginIndex,final int endIndex,final byte[] buffer) throws IOException {
  char[] chars=(char[])UNSAFE.getObject(str,STRING_VALUE_FIELD_OFFSET);
  int utfLength=calculateUtf8Length(chars,beginIndex,endIndex);
  if (utfLength > 65535) {
    throw new UTFDataFormatException(""String_Node_Str"" + utfLength + ""String_Node_Str"");
  }
  out.writeShort(utfLength);
  out.writeBoolean(false);
  int i;
  int c;
  int bufferPos=0;
  if (utfLength >= buffer.length) {
    for (i=beginIndex; i < endIndex; i++) {
      c=chars[i];
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      bufferPos=buffering(buffer,bufferPos,(byte)c,out);
    }
    for (; i < endIndex; i++) {
      c=chars[i];
      if (c <= 0) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xC0 | ((c >> 6) & 0x1F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
      }
 else       if (c > 0x007F) {
        bufferPos=buffering(buffer,bufferPos,(byte)(0xE0 | ((c >> 12) & 0x0F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c >> 6) & 0x3F)),out);
        bufferPos=buffering(buffer,bufferPos,(byte)(0x80 | ((c) & 0x3F)),out);
      }
 else {
        bufferPos=buffering(buffer,bufferPos,(byte)c,out);
      }
    }
    int length=bufferPos % buffer.length;
    out.write(buffer,0,length == 0 ? buffer.length : length);
  }
 else {
    for (i=beginIndex; i < endIndex; i++) {
      c=chars[i];
      if (!((c <= 0x007F) && (c >= 0x0001))) {
        break;
      }
      buffer[bufferPos++]=(byte)c;
    }
    for (; i < endIndex; i++) {
      c=chars[i];
      if (c <= 0) {
        buffer[bufferPos++]=(byte)(0xC0 | ((c >> 6) & 0x1F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else       if (c > 0x007F) {
        buffer[bufferPos++]=(byte)(0xE0 | ((c >> 12) & 0x0F));
        buffer[bufferPos++]=(byte)(0x80 | ((c >> 6) & 0x3F));
        buffer[bufferPos++]=(byte)(0x80 | ((c) & 0x3F));
      }
 else {
        buffer[bufferPos++]=(byte)c;
      }
    }
    out.write(buffer,0,bufferPos);
  }
}",0.993678295481152
47836,"private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort();
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  int readCount=0;
  int bufferPos=1;
  int i=0;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  for (; i < minUtfLenght; i++) {
    c1=buffer[bufferPos++] & 0xFF;
    if (c1 > 127) {
      break;
    }
    data[charArrCount++]=(char)c1;
  }
  for (; i < utfLength; i++) {
    if (c1 > 127) {
      break;
    }
    data[charArrCount++]=(char)c1;
    bufferPos=buffered(buffer,bufferPos,utfLength,in);
    c1=buffer[0] & 0xFF;
  }
  for (readCount=i; readCount < utfLength; ) {
    cTemp=c1 >> 4;
    if (cTemp >> 3 == 0) {
      data[charArrCount++]=(char)c1;
      readCount++;
    }
 else     if (cTemp == 12 || cTemp == 13) {
      if (readCount + 1 > utfLength) {
        throw new UTFDataFormatException(""String_Node_Str"");
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,in);
      c2=buffer[0] & 0xFF;
      if ((c2 & 0xC0) != 0x80) {
        throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
      }
      data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
      readCount+=2;
    }
 else     if (cTemp == 14) {
      if (readCount + 2 > utfLength) {
        throw new UTFDataFormatException(""String_Node_Str"");
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,in);
      c2=buffer[0] & 0xFF;
      bufferPos=buffered(buffer,bufferPos,utfLength,in);
      c3=buffer[0] & 0xFF;
      if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
      }
      data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
      readCount+=3;
    }
 else {
      throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
    }
    bufferPos=buffered(buffer,bufferPos,utfLength,in);
    c1=buffer[0] & 0xFF;
  }
}","private void readShortUTF(final DataInput in,final char[] data,final int beginIndex,final byte[] buffer) throws IOException {
  final int utfLength=in.readShort();
  final boolean allAscii=in.readBoolean();
  final int minUtfLenght=Math.min(utfLength,buffer.length - 1);
  final int bufferLimit=minUtfLenght + 1;
  int readCount=0;
  int bufferPos=1;
  int c1=0;
  int c2=0;
  int c3=0;
  int cTemp=0;
  int charArrCount=beginIndex;
  in.readFully(buffer,1,minUtfLenght);
  if (allAscii) {
    while (bufferPos != bufferLimit) {
      data[charArrCount++]=(char)(buffer[bufferPos++] & 0xFF);
    }
    for (readCount=bufferPos - 1; readCount < utfLength; readCount++) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      data[charArrCount++]=(char)(buffer[0] & 0xFF);
    }
  }
 else {
    while (bufferPos != bufferLimit) {
      c1=buffer[bufferPos++] & 0xFF;
      if (c1 > 127) {
        bufferPos--;
        break;
      }
      data[charArrCount++]=(char)c1;
    }
    readCount=bufferPos - 1;
    if (bufferPos == bufferLimit) {
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
    while (readCount < utfLength) {
      cTemp=c1 >> 4;
      if (cTemp >> 3 == 0) {
        data[charArrCount++]=(char)c1;
        readCount++;
      }
 else       if (cTemp == 12 || cTemp == 13) {
        if (readCount + 1 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        if ((c2 & 0xC0) != 0x80) {
          throw new UTFDataFormatException(""String_Node_Str"" + beginIndex + readCount+ 1);
        }
        data[charArrCount++]=(char)(((c1 & 0x1F) << 6) | (c2 & 0x3F));
        readCount+=2;
      }
 else       if (cTemp == 14) {
        if (readCount + 2 > utfLength) {
          throw new UTFDataFormatException(""String_Node_Str"");
        }
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c2=buffer[0] & 0xFF;
        bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
        c3=buffer[0] & 0xFF;
        if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) {
          throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount + 1));
        }
        data[charArrCount++]=(char)(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F)));
        readCount+=3;
      }
 else {
        throw new UTFDataFormatException(""String_Node_Str"" + (beginIndex + readCount));
      }
      bufferPos=buffered(buffer,bufferPos,utfLength,readCount,in);
      c1=buffer[0] & 0xFF;
    }
  }
}",0.7224669603524229
47837,"private int buffered(final byte[] buffer,final int pos,final int utfLength,final DataInput in) throws IOException {
  try {
    buffer[0]=buffer[pos];
    return pos + 1;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    in.readFully(buffer,1,Math.min(buffer.length - 1,utfLength - pos));
    buffer[0]=buffer[1];
    return 2;
  }
}","private int buffered(final byte[] buffer,final int pos,final int utfLength,final int readCount,final DataInput in) throws IOException {
  try {
    buffer[0]=buffer[pos];
    return pos + 1;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    in.readFully(buffer,1,Math.min(buffer.length - 1,utfLength - readCount));
    buffer[0]=buffer[1];
    return 2;
  }
}",0.9542857142857144
47838,"private void handleProcessingFailure(ClientEndpointImpl endpoint,ClientRequest request,Throwable e){
  Level level=nodeEngine.isActive() ? Level.SEVERE : Level.FINEST;
  if (logger.isLoggable(level)) {
    if (request == null) {
      logger.log(level,e.getMessage(),e);
    }
 else {
      logger.log(level,""String_Node_Str"" + request + ""String_Node_Str""+ e.getMessage(),e);
    }
  }
  if (request != null && endpoint != null) {
    endpoint.sendResponse(e,request.getCallId());
  }
}","private void handleProcessingFailure(ClientEndpointImpl endpoint,ClientRequest request,Data data,Throwable e){
  Level level=nodeEngine.isActive() ? Level.SEVERE : Level.FINEST;
  if (logger.isLoggable(level)) {
    if (request == null) {
      logger.log(level,e.getMessage(),e);
    }
 else {
      logger.log(level,""String_Node_Str"" + request + ""String_Node_Str""+ e.getMessage(),e);
    }
  }
  if (request != null && endpoint != null) {
    endpoint.sendResponse(e,request.getCallId());
  }
 else   if (data != null && endpoint != null) {
    int callId=extractCallId(data);
    if (callId != -1) {
      endpoint.sendResponse(e,callId);
    }
  }
}",0.8533801580333626
47839,"private void handleProcessingFailure(ClientEndpointImpl endpoint,ClientRequest request,Throwable e){
  Level level=nodeEngine.isActive() ? Level.SEVERE : Level.FINEST;
  if (logger.isLoggable(level)) {
    if (request == null) {
      logger.log(level,e.getMessage(),e);
    }
 else {
      logger.log(level,""String_Node_Str"" + request + ""String_Node_Str""+ e.getMessage(),e);
    }
  }
  if (request != null && endpoint != null) {
    endpoint.sendResponse(e,request.getCallId());
  }
}","private void handleProcessingFailure(ClientEndpointImpl endpoint,ClientRequest request,Data data,Throwable e){
  Level level=nodeEngine.isActive() ? Level.SEVERE : Level.FINEST;
  if (logger.isLoggable(level)) {
    if (request == null) {
      logger.log(level,e.getMessage(),e);
    }
 else {
      logger.log(level,""String_Node_Str"" + request + ""String_Node_Str""+ e.getMessage(),e);
    }
  }
  if (request != null && endpoint != null) {
    endpoint.sendResponse(e,request.getCallId());
  }
 else   if (data != null && endpoint != null) {
    int callId=extractCallId(data);
    if (callId != -1) {
      endpoint.sendResponse(e,callId);
    }
  }
}",0.8533801580333626
47840,"public void whenDifferentGroups_thenDifferentClustersAreFormed(boolean tcp){
  Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  if (tcp) {
    enableTcp(config1);
    enableTcp(config2);
  }
  HazelcastInstance hz1=Hazelcast.newHazelcastInstance(config1);
  HazelcastInstance hz2=Hazelcast.newHazelcastInstance(config2);
  assertTrue(hz1.getLifecycleService().isRunning());
  assertEquals(1,hz1.getCluster().getMembers().size());
  assertTrue(hz2.getLifecycleService().isRunning());
  assertEquals(1,hz2.getCluster().getMembers().size());
}","private void whenDifferentGroups_thenDifferentClustersAreFormed(boolean tcp){
  Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  if (tcp) {
    enableTcp(config1);
    enableTcp(config2);
  }
  HazelcastInstance hz1=Hazelcast.newHazelcastInstance(config1);
  HazelcastInstance hz2=Hazelcast.newHazelcastInstance(config2);
  assertTrue(hz1.getLifecycleService().isRunning());
  assertEquals(1,hz1.getCluster().getMembers().size());
  assertTrue(hz2.getLifecycleService().isRunning());
  assertEquals(1,hz2.getCluster().getMembers().size());
}",0.9917106254709872
47841,"private void enableTcp(Config config1){
  config1.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true).addMember(""String_Node_Str"");
  config1.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
}","private void enableTcp(Config config){
  config.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true).addMember(""String_Node_Str"");
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  final int basePort=TestUtil.getAvailablePort(BASE_PORT);
  config.getNetworkConfig().setPort(basePort);
}",0.8014571948998178
47842,"public void whenGroupPasswordMismatch_thenNewNodeIsShutDown(boolean tcp){
  Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  config1.getGroupConfig().setPassword(""String_Node_Str"");
  Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getGroupConfig().setPassword(""String_Node_Str"");
  assertIncompatible(config1,config2,tcp);
}","private void whenGroupPasswordMismatch_thenNewNodeIsShutDown(boolean tcp){
  Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  config1.getGroupConfig().setPassword(""String_Node_Str"");
  Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getGroupConfig().setPassword(""String_Node_Str"");
  assertIncompatible(config1,config2,tcp);
}",0.0685434516523867
47843,"HazelcastInstanceImpl(String name,Config config,NodeContext nodeContext) throws Exception {
  this.name=name;
  this.threadGroup=new ThreadGroup(name);
  threadMonitoringService=new ThreadMonitoringService(threadGroup);
  lifecycleService=new LifecycleServiceImpl(this);
  ManagedContext configuredManagedContext=config.getManagedContext();
  managedContext=new HazelcastManagedContext(this,configuredManagedContext);
  userContext.putAll(config.getUserContext());
  node=new Node(this,config,nodeContext);
  try {
    logger=node.getLogger(getClass().getName());
    lifecycleService.fireLifecycleEvent(STARTING);
    node.start();
    if (!node.isActive()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    managementService=new ManagementService(this);
    initManagedContext(configuredManagedContext);
    initHealthMonitor();
  }
 catch (  Throwable e) {
    try {
      node.connectionManager.shutdown();
    }
 catch (    Throwable ignored) {
      EmptyStatement.ignore(ignored);
    }
    throw ExceptionUtil.rethrow(e);
  }
}","HazelcastInstanceImpl(String name,Config config,NodeContext nodeContext) throws Exception {
  this.name=name;
  this.threadGroup=new ThreadGroup(name);
  threadMonitoringService=new ThreadMonitoringService(threadGroup);
  lifecycleService=new LifecycleServiceImpl(this);
  ManagedContext configuredManagedContext=config.getManagedContext();
  managedContext=new HazelcastManagedContext(this,configuredManagedContext);
  userContext.putAll(config.getUserContext());
  node=new Node(this,config,nodeContext);
  try {
    logger=node.getLogger(getClass().getName());
    lifecycleService.fireLifecycleEvent(STARTING);
    node.start();
    if (!node.isActive()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    managementService=new ManagementService(this);
    initManagedContext(configuredManagedContext);
    initHealthMonitor();
  }
 catch (  Throwable e) {
    try {
      node.shutdown(true);
    }
 catch (    Throwable ignored) {
      EmptyStatement.ignore(ignored);
    }
    throw ExceptionUtil.rethrow(e);
  }
}",0.9895038167938932
47844,"public void whenDifferentGroups_thenDifferentClustersAreFormed(boolean tcp){
  Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  if (tcp) {
    enableTcp(config1);
    enableTcp(config2);
  }
  HazelcastInstance hz1=Hazelcast.newHazelcastInstance(config1);
  HazelcastInstance hz2=Hazelcast.newHazelcastInstance(config2);
  assertTrue(hz1.getLifecycleService().isRunning());
  assertEquals(1,hz1.getCluster().getMembers().size());
  assertTrue(hz2.getLifecycleService().isRunning());
  assertEquals(1,hz2.getCluster().getMembers().size());
}","private void whenDifferentGroups_thenDifferentClustersAreFormed(boolean tcp){
  Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  if (tcp) {
    enableTcp(config1);
    enableTcp(config2);
  }
  HazelcastInstance hz1=Hazelcast.newHazelcastInstance(config1);
  HazelcastInstance hz2=Hazelcast.newHazelcastInstance(config2);
  assertTrue(hz1.getLifecycleService().isRunning());
  assertEquals(1,hz1.getCluster().getMembers().size());
  assertTrue(hz2.getLifecycleService().isRunning());
  assertEquals(1,hz2.getCluster().getMembers().size());
}",0.9917106254709872
47845,"private void enableTcp(Config config1){
  config1.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true).addMember(""String_Node_Str"");
  config1.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
}","private void enableTcp(Config config){
  config.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true).addMember(""String_Node_Str"");
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  final int basePort=TestUtil.getAvailablePort(BASE_PORT);
  config.getNetworkConfig().setPort(basePort);
}",0.8014571948998178
47846,"public void whenGroupPasswordMismatch_thenNewNodeIsShutDown(boolean tcp){
  Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  config1.getGroupConfig().setPassword(""String_Node_Str"");
  Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getGroupConfig().setPassword(""String_Node_Str"");
  assertIncompatible(config1,config2,tcp);
}","private void whenGroupPasswordMismatch_thenNewNodeIsShutDown(boolean tcp){
  Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  config1.getGroupConfig().setPassword(""String_Node_Str"");
  Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getGroupConfig().setPassword(""String_Node_Str"");
  assertIncompatible(config1,config2,tcp);
}",0.0685434516523867
47847,"HazelcastInstanceImpl(String name,Config config,NodeContext nodeContext) throws Exception {
  this.name=name;
  this.threadGroup=new ThreadGroup(name);
  threadMonitoringService=new ThreadMonitoringService(threadGroup);
  lifecycleService=new LifecycleServiceImpl(this);
  ManagedContext configuredManagedContext=config.getManagedContext();
  managedContext=new HazelcastManagedContext(this,configuredManagedContext);
  userContext.putAll(config.getUserContext());
  node=new Node(this,config,nodeContext);
  try {
    logger=node.getLogger(getClass().getName());
    lifecycleService.fireLifecycleEvent(STARTING);
    node.start();
    if (!node.isActive()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    managementService=new ManagementService(this);
    initManagedContext(configuredManagedContext);
    initHealthMonitor();
  }
 catch (  Throwable e) {
    try {
      node.connectionManager.shutdown();
    }
 catch (    Throwable ignored) {
      EmptyStatement.ignore(ignored);
    }
    throw ExceptionUtil.rethrow(e);
  }
}","HazelcastInstanceImpl(String name,Config config,NodeContext nodeContext) throws Exception {
  this.name=name;
  this.threadGroup=new ThreadGroup(name);
  threadMonitoringService=new ThreadMonitoringService(threadGroup);
  lifecycleService=new LifecycleServiceImpl(this);
  ManagedContext configuredManagedContext=config.getManagedContext();
  managedContext=new HazelcastManagedContext(this,configuredManagedContext);
  userContext.putAll(config.getUserContext());
  node=new Node(this,config,nodeContext);
  try {
    logger=node.getLogger(getClass().getName());
    lifecycleService.fireLifecycleEvent(STARTING);
    node.start();
    if (!node.isActive()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    managementService=new ManagementService(this);
    initManagedContext(configuredManagedContext);
    initHealthMonitor();
  }
 catch (  Throwable e) {
    try {
      node.shutdown(true);
    }
 catch (    Throwable ignored) {
      EmptyStatement.ignore(ignored);
    }
    throw ExceptionUtil.rethrow(e);
  }
}",0.9895038167938932
47848,"@Test public void testIssue1085WriteBehindBackupWithLongRunnigMapStore() throws InterruptedException {
  final String name=randomMapName(""String_Node_Str"");
  final int expectedStoreCount=3;
  final int nodeCount=3;
  Config config=new Config();
  config.setProperty(GroupProperties.PROP_MAP_REPLICA_SCHEDULED_TASK_DELAY_SECONDS,""String_Node_Str"");
  MapConfig writeBehindBackupConfig=config.getMapConfig(name);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setWriteDelaySeconds(5);
  final MapStoreWithStoreCount mapStore=new MapStoreWithStoreCount(expectedStoreCount,300,100);
  mapStoreConfig.setImplementation(mapStore);
  writeBehindBackupConfig.setMapStoreConfig(mapStoreConfig);
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(nodeCount);
  HazelcastInstance node1=factory.newHazelcastInstance(config);
  HazelcastInstance node2=factory.newHazelcastInstance(config);
  HazelcastInstance node3=factory.newHazelcastInstance(config);
  final String keyOwnedByNode1=generateKeyOwnedBy(node1);
  final String keyOwnedByNode2=generateKeyOwnedBy(node2);
  final String keyOwnedByNode3=generateKeyOwnedBy(node3);
  final IMap map=node1.getMap(name);
  map.put(keyOwnedByNode1,1);
  map.put(keyOwnedByNode2,2);
  map.put(keyOwnedByNode3,3);
  node2.getLifecycleService().shutdown();
  mapStore.awaitStores();
  assertTrue(expectedStoreCount <= mapStore.count.intValue());
}","@Test public void testIssue1085WriteBehindBackupWithLongRunnigMapStore() throws InterruptedException {
  final String name=randomMapName(""String_Node_Str"");
  final int expectedStoreCount=3;
  final int nodeCount=3;
  Config config=new Config();
  config.setProperty(GroupProperties.PROP_MAP_REPLICA_SCHEDULED_TASK_DELAY_SECONDS,""String_Node_Str"");
  MapConfig writeBehindBackupConfig=config.getMapConfig(name);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setWriteDelaySeconds(5);
  final MapStoreWithStoreCount mapStore=new MapStoreWithStoreCount(expectedStoreCount,300,50);
  mapStoreConfig.setImplementation(mapStore);
  writeBehindBackupConfig.setMapStoreConfig(mapStoreConfig);
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(nodeCount);
  HazelcastInstance node1=factory.newHazelcastInstance(config);
  HazelcastInstance node2=factory.newHazelcastInstance(config);
  HazelcastInstance node3=factory.newHazelcastInstance(config);
  final String keyOwnedByNode1=generateKeyOwnedBy(node1);
  final String keyOwnedByNode2=generateKeyOwnedBy(node2);
  final String keyOwnedByNode3=generateKeyOwnedBy(node3);
  final IMap map=node1.getMap(name);
  map.put(keyOwnedByNode1,1);
  map.put(keyOwnedByNode2,2);
  map.put(keyOwnedByNode3,3);
  node2.getLifecycleService().shutdown();
  mapStore.awaitStores();
  assertTrue(expectedStoreCount <= mapStore.count.intValue());
}",0.9989462592202318
47849,"@Test public void testIssue1085WriteBehindBackupWithLongRunnigMapStore() throws InterruptedException {
  final String name=randomMapName(""String_Node_Str"");
  final int expectedStoreCount=3;
  final int nodeCount=3;
  Config config=new Config();
  config.setProperty(GroupProperties.PROP_MAP_REPLICA_SCHEDULED_TASK_DELAY_SECONDS,""String_Node_Str"");
  MapConfig writeBehindBackupConfig=config.getMapConfig(name);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setWriteDelaySeconds(5);
  final MapStoreWithStoreCount mapStore=new MapStoreWithStoreCount(expectedStoreCount,300,100);
  mapStoreConfig.setImplementation(mapStore);
  writeBehindBackupConfig.setMapStoreConfig(mapStoreConfig);
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(nodeCount);
  HazelcastInstance node1=factory.newHazelcastInstance(config);
  HazelcastInstance node2=factory.newHazelcastInstance(config);
  HazelcastInstance node3=factory.newHazelcastInstance(config);
  final String keyOwnedByNode1=generateKeyOwnedBy(node1);
  final String keyOwnedByNode2=generateKeyOwnedBy(node2);
  final String keyOwnedByNode3=generateKeyOwnedBy(node3);
  final IMap map=node1.getMap(name);
  map.put(keyOwnedByNode1,1);
  map.put(keyOwnedByNode2,2);
  map.put(keyOwnedByNode3,3);
  node2.getLifecycleService().shutdown();
  mapStore.awaitStores();
  assertTrue(expectedStoreCount <= mapStore.count.intValue());
}","@Test public void testIssue1085WriteBehindBackupWithLongRunnigMapStore() throws InterruptedException {
  final String name=randomMapName(""String_Node_Str"");
  final int expectedStoreCount=3;
  final int nodeCount=3;
  Config config=new Config();
  config.setProperty(GroupProperties.PROP_MAP_REPLICA_SCHEDULED_TASK_DELAY_SECONDS,""String_Node_Str"");
  MapConfig writeBehindBackupConfig=config.getMapConfig(name);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setWriteDelaySeconds(5);
  final MapStoreWithStoreCount mapStore=new MapStoreWithStoreCount(expectedStoreCount,300,50);
  mapStoreConfig.setImplementation(mapStore);
  writeBehindBackupConfig.setMapStoreConfig(mapStoreConfig);
  final TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(nodeCount);
  HazelcastInstance node1=factory.newHazelcastInstance(config);
  HazelcastInstance node2=factory.newHazelcastInstance(config);
  HazelcastInstance node3=factory.newHazelcastInstance(config);
  final String keyOwnedByNode1=generateKeyOwnedBy(node1);
  final String keyOwnedByNode2=generateKeyOwnedBy(node2);
  final String keyOwnedByNode3=generateKeyOwnedBy(node3);
  final IMap map=node1.getMap(name);
  map.put(keyOwnedByNode1,1);
  map.put(keyOwnedByNode2,2);
  map.put(keyOwnedByNode3,3);
  node2.getLifecycleService().shutdown();
  mapStore.awaitStores();
  int mapStoreSize=mapStore.count.intValue();
  assertTrue(""String_Node_Str"" + expectedStoreCount + ""String_Node_Str""+ mapStoreSize,expectedStoreCount <= mapStoreSize);
}",0.9515746698272944
47850,"@Override public void close(){
  HazelcastInstance hz=hazelcastInstance;
  Collection<DistributedObject> distributedObjects=hz.getDistributedObjects();
  for (  DistributedObject distributedObject : distributedObjects) {
    if (distributedObject instanceof ICache) {
      distributedObject.destroy();
    }
  }
}","@Override public void close(){
  closeTriggered=true;
  HazelcastInstance hz=hazelcastInstance;
  Collection<DistributedObject> distributedObjects=hz.getDistributedObjects();
  for (  DistributedObject distributedObject : distributedObjects) {
    if (distributedObject instanceof ICache) {
      distributedObject.destroy();
    }
  }
  hz.shutdown();
  cachingProvider.releaseCacheManager(uri,classLoaderReference.get());
}",0.8497970230040596
47851,"@Override public float getAverageRemoveTime(){
  if (statistics.getRemoveTimeTakenNanos() == 0 || getCacheGets() == 0) {
    return 0;
  }
  float avgRemoveTime=(float)(statistics.getRemoveTimeTakenNanos() / getCacheGets()) / NANOSECONDS_IN_A_MICROSECOND;
  return avgRemoveTime;
}","@Override public float getAverageRemoveTime(){
  if (statistics.getRemoveTimeTakenNanos() == 0 || getCacheGets() == 0) {
    return 0;
  }
  float avgRemoveTime=((1f * statistics.getRemoveTimeTakenNanos()) / getCacheGets()) / NANOSECONDS_IN_A_MICROSECOND;
  return avgRemoveTime;
}",0.9750889679715302
47852,"@Override public float getAverageGetTime(){
  if (statistics.getGetTimeTakenNanos() == 0 || getCacheGets() == 0) {
    return 0;
  }
  float avgGetTime=(float)(statistics.getGetTimeTakenNanos() / getCacheGets()) / NANOSECONDS_IN_A_MICROSECOND;
  return avgGetTime;
}","@Override public float getAverageGetTime(){
  if (statistics.getGetTimeTakenNanos() == 0 || getCacheGets() == 0) {
    return 0;
  }
  float avgGetTime=((1f * statistics.getGetTimeTakenNanos()) / getCacheGets()) / NANOSECONDS_IN_A_MICROSECOND;
  return avgGetTime;
}",0.9736842105263158
47853,"@Override public float getAveragePutTime(){
  if (statistics.getPutTimeTakenNanos() == 0 || getCacheGets() == 0) {
    return 0;
  }
  float avgPutTime=(float)(statistics.getPutTimeTakenNanos() / getCacheGets()) / NANOSECONDS_IN_A_MICROSECOND;
  return avgPutTime;
}","@Override public float getAveragePutTime(){
  if (statistics.getPutTimeTakenNanos() == 0 || getCacheGets() == 0) {
    return 0;
  }
  float avgPutTime=((1f * statistics.getPutTimeTakenNanos()) / getCacheGets()) / NANOSECONDS_IN_A_MICROSECOND;
  return avgPutTime;
}",0.9736842105263158
47854,"@Override public void readData(ObjectDataInput in) throws IOException {
  name=in.readUTF();
  managerPrefix=in.readUTF();
  uriString=in.readUTF();
  backupCount=in.readInt();
  asyncBackupCount=in.readInt();
  final int resultInMemoryFormat=in.readInt();
  inMemoryFormat=InMemoryFormat.values()[resultInMemoryFormat];
  final int resultEvictionPolicy=in.readInt();
  evictionPolicy=EvictionPolicy.values()[resultEvictionPolicy];
  keyType=in.readObject();
  valueType=in.readObject();
  cacheLoaderFactory=in.readObject();
  cacheWriterFactory=in.readObject();
  expiryPolicyFactory=in.readObject();
  isReadThrough=in.readBoolean();
  isWriteThrough=in.readBoolean();
  isStoreByValue=in.readBoolean();
  isManagementEnabled=in.readBoolean();
  final boolean listNotEmpty=in.readBoolean();
  if (listNotEmpty) {
    final int size=in.readInt();
    listenerConfigurations=new HashSet<CacheEntryListenerConfiguration<K,V>>(size);
    for (int i=0; i < size; i++) {
      listenerConfigurations.add((CacheEntryListenerConfiguration<K,V>)in.readObject());
    }
  }
}","@Override public void readData(ObjectDataInput in) throws IOException {
  name=in.readUTF();
  managerPrefix=in.readUTF();
  uriString=in.readUTF();
  backupCount=in.readInt();
  asyncBackupCount=in.readInt();
  final int resultInMemoryFormat=in.readInt();
  inMemoryFormat=InMemoryFormat.values()[resultInMemoryFormat];
  final int resultEvictionPolicy=in.readInt();
  evictionPolicy=EvictionPolicy.values()[resultEvictionPolicy];
  nearCacheConfig=in.readObject();
  keyType=in.readObject();
  valueType=in.readObject();
  cacheLoaderFactory=in.readObject();
  cacheWriterFactory=in.readObject();
  expiryPolicyFactory=in.readObject();
  isReadThrough=in.readBoolean();
  isWriteThrough=in.readBoolean();
  isStoreByValue=in.readBoolean();
  isManagementEnabled=in.readBoolean();
  final boolean listNotEmpty=in.readBoolean();
  if (listNotEmpty) {
    final int size=in.readInt();
    listenerConfigurations=new HashSet<CacheEntryListenerConfiguration<K,V>>(size);
    for (int i=0; i < size; i++) {
      listenerConfigurations.add((CacheEntryListenerConfiguration<K,V>)in.readObject());
    }
  }
}",0.9838783970520496
47855,"@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeUTF(name);
  out.writeUTF(managerPrefix);
  out.writeUTF(uriString);
  out.writeInt(backupCount);
  out.writeInt(asyncBackupCount);
  out.writeInt(inMemoryFormat.ordinal());
  out.writeInt(evictionPolicy.ordinal());
  out.writeObject(keyType);
  out.writeObject(valueType);
  out.writeObject(cacheLoaderFactory);
  out.writeObject(cacheWriterFactory);
  out.writeObject(expiryPolicyFactory);
  out.writeBoolean(isReadThrough);
  out.writeBoolean(isWriteThrough);
  out.writeBoolean(isStoreByValue);
  out.writeBoolean(isManagementEnabled);
  final boolean listNotEmpty=listenerConfigurations != null && !listenerConfigurations.isEmpty();
  out.writeBoolean(listNotEmpty);
  if (listNotEmpty) {
    out.writeInt(listenerConfigurations.size());
    for (    CacheEntryListenerConfiguration<K,V> cc : listenerConfigurations) {
      out.writeObject(cc);
    }
  }
}","@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeUTF(name);
  out.writeUTF(managerPrefix);
  out.writeUTF(uriString);
  out.writeInt(backupCount);
  out.writeInt(asyncBackupCount);
  out.writeInt(inMemoryFormat.ordinal());
  out.writeInt(evictionPolicy.ordinal());
  out.writeObject(nearCacheConfig);
  out.writeObject(keyType);
  out.writeObject(valueType);
  out.writeObject(cacheLoaderFactory);
  out.writeObject(cacheWriterFactory);
  out.writeObject(expiryPolicyFactory);
  out.writeBoolean(isReadThrough);
  out.writeBoolean(isWriteThrough);
  out.writeBoolean(isStoreByValue);
  out.writeBoolean(isManagementEnabled);
  final boolean listNotEmpty=listenerConfigurations != null && !listenerConfigurations.isEmpty();
  out.writeBoolean(listNotEmpty);
  if (listNotEmpty) {
    out.writeInt(listenerConfigurations.size());
    for (    CacheEntryListenerConfiguration<K,V> cc : listenerConfigurations) {
      out.writeObject(cc);
    }
  }
}",0.9813664596273292
47856,"@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(hazelcastInstance);
  sb.append('}');
  return sb.toString();
}","@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(getHazelcastInstance());
  sb.append('}');
  return sb.toString();
}",0.982716049382716
47857,"protected HazelcastInstance getHazelcastInstance(){
  if (hazelcastInstance == null) {
    hazelcastInstance=initHazelcast();
  }
  return hazelcastInstance;
}","protected HazelcastInstance getHazelcastInstance(){
  if (hazelcastInstance == null) {
synchronized (this) {
      if (hazelcastInstance == null) {
        hazelcastInstance=initHazelcast();
      }
    }
  }
  return hazelcastInstance;
}",0.801007556675063
47858,"protected String cacheNamePrefix(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  if (!isDefaultClassLoader) {
    sb.append(""String_Node_Str"").append(classLoaderReference.get().toString());
  }
  if (!isDefaultURI) {
    sb.append(""String_Node_Str"").append(uri.toASCIIString());
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","protected String cacheNamePrefix(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  final ClassLoader classLoader=getClassLoader();
  if (!isDefaultClassLoader && classLoader != null) {
    sb.append(""String_Node_Str"").append(classLoader.toString());
  }
  if (!isDefaultURI) {
    sb.append(""String_Node_Str"").append(uri.toASCIIString());
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.8868894601542416
47859,"@Override public Object getResponse(){
  return response;
}","@Override public Object getResponse(){
  return null;
}",0.912280701754386
47860,"@Override public void run() throws Exception {
  CacheService service=getService();
  ICacheRecordStore cache=service.getOrCreateCache(name,getPartitionId());
  response=cache.putIfAbsent(key,value,expiryPolicy,getCallerUuid());
  if (response == Boolean.TRUE) {
    backupRecord=cache.getRecord(key);
  }
}","@Override public void run() throws Exception {
  CacheService service=getService();
  ICacheRecordStore cache=service.getOrCreateCache(name,getPartitionId());
  response=cache.putIfAbsent(key,value,expiryPolicy,getCallerUuid());
  if (Boolean.TRUE.equals(response)) {
    backupRecord=cache.getRecord(key);
  }
}",0.9531502423263328
47861,"@Override public boolean shouldBackup(){
  return response == Boolean.TRUE;
}","@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response);
}",0.8176100628930818
47862,"@Override public boolean shouldBackup(){
  return response == Boolean.TRUE;
}","@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response);
}",0.8176100628930818
47863,"@Override public void run() throws Exception {
  if (cache != null) {
    if (currentValue == null) {
      response=cache.replace(key,value,expiryPolicy,getCallerUuid());
    }
 else {
      response=cache.replace(key,currentValue,value,expiryPolicy,getCallerUuid());
    }
    if (response == Boolean.TRUE) {
      backupRecord=cache.getRecord(key);
    }
  }
 else {
    response=Boolean.FALSE;
  }
}","@Override public void run() throws Exception {
  if (cache != null) {
    if (currentValue == null) {
      response=cache.replace(key,value,expiryPolicy,getCallerUuid());
    }
 else {
      response=cache.replace(key,currentValue,value,expiryPolicy,getCallerUuid());
    }
    if (Boolean.TRUE.equals(response)) {
      backupRecord=cache.getRecord(key);
    }
  }
 else {
    response=Boolean.FALSE;
  }
}",0.9642416769420468
47864,"@Override public boolean shouldBackup(){
  return response == Boolean.TRUE;
}","@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response);
}",0.8176100628930818
47865,"public CacheReplicationOperation(CachePartitionSegment segment,int replicaIndex){
  source=new HashMap<String,Map<Data,CacheRecord>>();
  destination=null;
  Iterator<ICacheRecordStore> iter=segment.cacheIterator();
  while (iter.hasNext()) {
    ICacheRecordStore next=iter.next();
    CacheConfig cacheConfig=next.getConfig();
    if (cacheConfig.getAsyncBackupCount() + cacheConfig.getBackupCount() >= replicaIndex) {
      source.put(next.getName(),next.getReadOnlyRecords());
    }
  }
}","public CacheReplicationOperation(CachePartitionSegment segment,int replicaIndex){
  data=new HashMap<String,Map<Data,CacheRecord>>();
  Iterator<ICacheRecordStore> iter=segment.cacheIterator();
  while (iter.hasNext()) {
    ICacheRecordStore next=iter.next();
    CacheConfig cacheConfig=next.getConfig();
    if (cacheConfig.getAsyncBackupCount() + cacheConfig.getBackupCount() >= replicaIndex) {
      data.put(next.getName(),next.getReadOnlyRecords());
    }
  }
}",0.9583333333333334
47866,"public boolean isEmpty(){
  return source == null || source.isEmpty();
}","public boolean isEmpty(){
  return data == null || data.isEmpty();
}",0.8571428571428571
47867,"@Override public void run() throws Exception {
  CacheService service=getService();
  for (  Map.Entry<String,Map<Data,CacheRecord>> entry : destination.entrySet()) {
    ICacheRecordStore cache=service.getOrCreateCache(entry.getKey(),getPartitionId());
    Map<Data,CacheRecord> map=entry.getValue();
    Iterator<Map.Entry<Data,CacheRecord>> iter=map.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Data,CacheRecord> next=iter.next();
      Data key=next.getKey();
      CacheRecord record=next.getValue();
      iter.remove();
      cache.setRecord(key,record);
    }
  }
  destination.clear();
}","@Override public void run() throws Exception {
  CacheService service=getService();
  for (  Map.Entry<String,Map<Data,CacheRecord>> entry : data.entrySet()) {
    ICacheRecordStore cache=service.getOrCreateCache(entry.getKey(),getPartitionId());
    Map<Data,CacheRecord> map=entry.getValue();
    Iterator<Map.Entry<Data,CacheRecord>> iter=map.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Data,CacheRecord> next=iter.next();
      Data key=next.getKey();
      CacheRecord record=next.getValue();
      iter.remove();
      cache.setRecord(key,record);
    }
  }
  data.clear();
}",0.9787581699346404
47868,"@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  int count=in.readInt();
  if (count > 0) {
    for (int i=0; i < count; i++) {
      int subCount=in.readInt();
      if (subCount > 0) {
        String name=in.readUTF();
        Map<Data,CacheRecord> m=new HashMap<Data,CacheRecord>(subCount);
        destination.put(name,m);
        for (int j=0; j < subCount; j++) {
          final Data key=new Data();
          key.readData(in);
          final CacheRecord record=in.readObject();
          m.put(key,record);
        }
      }
    }
  }
}","@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  int count=in.readInt();
  if (count > 0) {
    for (int i=0; i < count; i++) {
      int subCount=in.readInt();
      if (subCount > 0) {
        String name=in.readUTF();
        Map<Data,CacheRecord> m=new HashMap<Data,CacheRecord>(subCount);
        data.put(name,m);
        for (int j=0; j < subCount; j++) {
          final Data key=new Data();
          key.readData(in);
          if (key.bufferSize() == 0) {
            break;
          }
          final CacheRecord record=in.readObject();
          m.put(key,record);
        }
      }
    }
  }
}",0.9345941686367218
47869,"@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  int count=source.size();
  out.writeInt(count);
  if (count > 0) {
    long now=Clock.currentTimeMillis();
    for (    Map.Entry<String,Map<Data,CacheRecord>> entry : source.entrySet()) {
      Map<Data,CacheRecord> cacheMap=entry.getValue();
      int subCount=cacheMap.size();
      out.writeInt(subCount);
      if (subCount > 0) {
        out.writeUTF(entry.getKey());
        for (        Map.Entry<Data,CacheRecord> e : cacheMap.entrySet()) {
          final Data key=e.getKey();
          final CacheRecord record=e.getValue();
          final long expirationTime=record.getExpirationTime();
          if (expirationTime > now) {
            key.writeData(out);
            out.writeObject(record);
          }
          subCount--;
        }
        if (subCount != 0) {
          throw new AssertionError(""String_Node_Str"" + subCount);
        }
      }
    }
  }
}","@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  int count=data.size();
  out.writeInt(count);
  if (count > 0) {
    long now=Clock.currentTimeMillis();
    for (    Map.Entry<String,Map<Data,CacheRecord>> entry : data.entrySet()) {
      Map<Data,CacheRecord> cacheMap=entry.getValue();
      int subCount=cacheMap.size();
      out.writeInt(subCount);
      if (subCount > 0) {
        out.writeUTF(entry.getKey());
        for (        Map.Entry<Data,CacheRecord> e : cacheMap.entrySet()) {
          final Data key=e.getKey();
          final CacheRecord record=e.getValue();
          final long expirationTime=record.getExpirationTime();
          if (expirationTime > now) {
            key.writeData(out);
            out.writeObject(record);
          }
        }
        new Data().writeData(out);
      }
    }
  }
}",0.91160809371672
47870,"AbstractCacheRecord(Data key,V value,long expirationTime){
  this.key=key;
  this.value=value;
  this.expirationTime=expirationTime;
}","public AbstractCacheRecord(){
}",0.2909090909090909
47871,"protected HttpResponse request(RequestType reqType,String context,int serverPort,CookieStore cookieStore) throws Exception {
  if (reqType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HttpClient client=HttpClientBuilder.create().disableRedirectHandling().setDefaultCookieStore(cookieStore).build();
  HttpUriRequest request=null;
switch (reqType) {
case GET_REQUEST:
    request=new HttpGet(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
  break;
case POST_REQUEST:
request=new HttpPost(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
break;
default :
throw new IllegalArgumentException(reqType + ""String_Node_Str"");
}
HttpResponse response=client.execute(request);
return response;
}","protected HttpResponse request(RequestType reqType,String context,int serverPort,CookieStore cookieStore) throws Exception {
  if (reqType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HttpClient client=HttpClientBuilder.create().disableRedirectHandling().setDefaultCookieStore(cookieStore).build();
  HttpUriRequest request;
switch (reqType) {
case GET_REQUEST:
    request=new HttpGet(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
  break;
case POST_REQUEST:
request=new HttpPost(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
break;
default :
throw new IllegalArgumentException(reqType + ""String_Node_Str"");
}
return client.execute(request);
}",0.9648518263266712
47872,"@Before public void setup() throws Exception {
  final URL root=new URL(TestServlet.class.getResource(""String_Node_Str""),""String_Node_Str"");
  final String baseDir=new File(root.getFile().replaceAll(""String_Node_Str"",""String_Node_Str"")).toString();
  final String sourceDir=baseDir + ""String_Node_Str"";
  hz=Hazelcast.newHazelcastInstance(new FileSystemXmlConfig(new File(sourceDir + ""String_Node_Str"",""String_Node_Str"")));
  serverPort1=availablePort();
  server1=getServletContainer(serverPort1,sourceDir,serverXml1);
  if (serverXml2 != null) {
    serverPort2=availablePort();
    server2=getServletContainer(serverPort2,sourceDir,serverXml2);
  }
}","@Before public void setup() throws Exception {
  ContainerContext cc=CONTAINER_CONTEXT_MAP.get(getClass());
  if (cc == null) {
    ensureInstanceIsUp();
    CONTAINER_CONTEXT_MAP.put(getClass(),new ContainerContext(this,serverXml1,serverXml2,serverPort1,serverPort2,server1,server2,hz));
  }
 else {
    cc.copyInto(this);
    ensureInstanceIsUp();
    cc.copyFrom(this);
  }
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  map.clear();
}",0.1380563124432334
47873,"public void buildTomcat(int port,String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
}","public void buildTomcat(String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
  running=true;
}",0.983670803396473
47874,"@Override public void stop() throws LifecycleException {
  tomcat.stop();
}","@Override public void stop() throws Exception {
  tomcat.stop();
  tomcat.destroy();
  running=false;
}",0.7415730337078652
47875,"@Override public void restart() throws LifecycleException, InterruptedException {
  int port=tomcat.getConnector().getLocalPort();
  tomcat.stop();
  tomcat.destroy();
  Thread.sleep(5000);
  buildTomcat(port,sourceDir,serverXml);
  Thread.sleep(5000);
}","@Override public void restart() throws Exception {
  stop();
  Thread.sleep(5000);
  start();
}",0.5272206303724928
47876,"@Override public void start() throws Exception {
  tomcat.start();
}","@Override public void start() throws Exception {
  buildTomcat(sourceDir,serverXml);
  running=true;
}",0.7294117647058823
47877,"public TomcatServer(int port,String sourceDir,String serverXml) throws Exception {
  this.serverXml=serverXml;
  this.sourceDir=sourceDir;
  buildTomcat(port,sourceDir,serverXml);
}","public TomcatServer(int port,String sourceDir,String serverXml) throws Exception {
  this.port=port;
  this.serverXml=serverXml;
  this.sourceDir=sourceDir;
  buildTomcat(sourceDir,serverXml);
}",0.9386666666666666
47878,"private ItemListener createItemListener(final ClientEndpoint endpoint){
  return new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
}","private ItemListener createItemListener(final ClientEndpoint endpoint){
  return new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareItemEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
}",0.8487282463186078
47879,"private void send(ItemEvent event){
  if (endpoint.live()) {
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}","private void send(ItemEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareItemEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}",0.8240740740740741
47880,"@Override public Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService();
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void onEntryEvent(    EntryEvent<Object,Object> event){
      DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
      if (endpoint.live()) {
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        Data oldValue=dataAwareEntryEvent.getOldValueData();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  EventFilter eventFilter;
  if (getPredicate() == null) {
    eventFilter=new EntryEventFilter(includeValue,key);
  }
 else {
    eventFilter=new QueryEventFilter(includeValue,key,getPredicate());
  }
  String registrationId=mapService.getMapServiceContext().addEventListener(listener,eventFilter,name);
  endpoint.setListenerRegistration(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","@Override public Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService();
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void onEntryEvent(    EntryEvent<Object,Object> event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareEntryEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        Data oldValue=dataAwareEntryEvent.getOldValueData();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  EventFilter eventFilter;
  if (getPredicate() == null) {
    eventFilter=new EntryEventFilter(includeValue,key);
  }
 else {
    eventFilter=new QueryEventFilter(includeValue,key,getPredicate());
  }
  String registrationId=mapService.getMapServiceContext().addEventListener(listener,eventFilter,name);
  endpoint.setListenerRegistration(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9245683126325356
47881,"@Override public void onEntryEvent(EntryEvent<Object,Object> event){
  DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
  if (endpoint.live()) {
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    Data oldValue=dataAwareEntryEvent.getOldValueData();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}","@Override public void onEntryEvent(EntryEvent<Object,Object> event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareEntryEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    Data oldValue=dataAwareEntryEvent.getOldValueData();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}",0.8278757346767422
47882,"@Override public void onEntryEvent(EntryEvent event){
  if (endpoint.live()) {
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    final EntryEventType type=event.getEventType();
    final String uuid=event.getMember().getUuid();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}","@Override public void onEntryEvent(EntryEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareEntryEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    final EntryEventType type=event.getEventType();
    final String uuid=event.getMember().getUuid();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}",0.8691189050470488
47883,"public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final MultiMapService service=getService();
  EntryListener listener=new EntryAdapter(){
    @Override public void onEntryEvent(    EntryEvent event){
      if (endpoint.live()) {
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addListener(name,listener,key,includeValue,false);
  endpoint.setListenerRegistration(MultiMapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final MultiMapService service=getService();
  EntryListener listener=new EntryAdapter(){
    @Override public void onEntryEvent(    EntryEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareEntryEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addListener(name,listener,key,includeValue,false);
  endpoint.setListenerRegistration(MultiMapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9413437611091362
47884,"@Override public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final QueueService service=getService();
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addItemListener(name,listener,includeValue);
  endpoint.setListenerRegistration(QueueService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","@Override public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final QueueService service=getService();
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareItemEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addItemListener(name,listener,includeValue);
  endpoint.setListenerRegistration(QueueService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9192118226600984
47885,"private void send(ItemEvent event){
  if (endpoint.live()) {
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}","private void send(ItemEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareItemEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}",0.8240740740740741
47886,"@Override public void onMessage(Message message){
  if (!endpoint.live()) {
    return;
  }
  DataAwareMessage dataAwareMessage=(DataAwareMessage)message;
  Data messageData=dataAwareMessage.getMessageData();
  String publisherUuid=message.getPublishingMember().getUuid();
  PortableMessage portableMessage=new PortableMessage(messageData,message.getPublishTime(),publisherUuid);
  endpoint.sendEvent(portableMessage,callId);
}","@Override public void onMessage(Message message){
  if (!endpoint.live()) {
    return;
  }
  if (!(message instanceof DataAwareMessage)) {
    throw new IllegalArgumentException(""String_Node_Str"" + message.getClass().getSimpleName());
  }
  DataAwareMessage dataAwareMessage=(DataAwareMessage)message;
  Data messageData=dataAwareMessage.getMessageData();
  String publisherUuid=message.getPublishingMember().getUuid();
  PortableMessage portableMessage=new PortableMessage(messageData,message.getPublishTime(),publisherUuid);
  endpoint.sendEvent(portableMessage,callId);
}",0.8522954091816367
47887,"public void buildTomcat(int port,String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
  running=true;
}","public void buildTomcat(String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
  running=true;
}",0.9941822882999354
47888,"@Override public void stop() throws LifecycleException {
  tomcat.stop();
  running=false;
}","@Override public void stop() throws Exception {
  tomcat.stop();
  tomcat.destroy();
  running=false;
}",0.8512820512820513
47889,"@Override public void restart() throws LifecycleException, InterruptedException {
  int port=tomcat.getConnector().getLocalPort();
  tomcat.stop();
  running=false;
  tomcat.destroy();
  Thread.sleep(5000);
  buildTomcat(port,sourceDir,serverXml);
  Thread.sleep(5000);
  running=true;
}","@Override public void restart() throws Exception {
  stop();
  Thread.sleep(5000);
  start();
}",0.4816753926701571
47890,"@Override public void start() throws Exception {
  tomcat.start();
  running=true;
}","@Override public void start() throws Exception {
  buildTomcat(sourceDir,serverXml);
  running=true;
}",0.8387096774193549
47891,"public TomcatServer(int port,String sourceDir,String serverXml) throws Exception {
  this.serverXml=serverXml;
  this.sourceDir=sourceDir;
  buildTomcat(port,sourceDir,serverXml);
}","public TomcatServer(int port,String sourceDir,String serverXml) throws Exception {
  this.port=port;
  this.serverXml=serverXml;
  this.sourceDir=sourceDir;
  buildTomcat(sourceDir,serverXml);
}",0.9386666666666666
47892,"public void buildTomcat(int port,String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
  running=true;
}","public void buildTomcat(String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
  running=true;
}",0.9941822882999354
47893,"@Override public void stop() throws LifecycleException {
  tomcat.stop();
  running=false;
}","@Override public void stop() throws Exception {
  tomcat.stop();
  tomcat.destroy();
  running=false;
}",0.8512820512820513
47894,"@Override public void restart() throws LifecycleException, InterruptedException {
  int port=tomcat.getConnector().getLocalPort();
  tomcat.stop();
  running=false;
  tomcat.destroy();
  Thread.sleep(5000);
  buildTomcat(port,sourceDir,serverXml);
  Thread.sleep(5000);
  running=true;
}","@Override public void restart() throws Exception {
  stop();
  Thread.sleep(5000);
  start();
}",0.4816753926701571
47895,"@Override public void start() throws Exception {
  tomcat.start();
  running=true;
}","@Override public void start() throws Exception {
  buildTomcat(sourceDir,serverXml);
  running=true;
}",0.8387096774193549
47896,"public TomcatServer(int port,String sourceDir,String serverXml) throws Exception {
  this.serverXml=serverXml;
  this.sourceDir=sourceDir;
  buildTomcat(port,sourceDir,serverXml);
}","public TomcatServer(int port,String sourceDir,String serverXml) throws Exception {
  this.port=port;
  this.serverXml=serverXml;
  this.sourceDir=sourceDir;
  buildTomcat(sourceDir,serverXml);
}",0.9386666666666666
47897,"private ItemListener createItemListener(final ClientEndpoint endpoint){
  return new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
}","private ItemListener createItemListener(final ClientEndpoint endpoint){
  return new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareItemEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
}",0.8487282463186078
47898,"private void send(ItemEvent event){
  if (endpoint.live()) {
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}","private void send(ItemEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareItemEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}",0.8240740740740741
47899,"@Override public Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService();
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void onEntryEvent(    EntryEvent<Object,Object> event){
      DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
      if (endpoint.live()) {
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        Data oldValue=dataAwareEntryEvent.getOldValueData();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  EventFilter eventFilter;
  if (getPredicate() == null) {
    eventFilter=new EntryEventFilter(includeValue,key);
  }
 else {
    eventFilter=new QueryEventFilter(includeValue,key,getPredicate());
  }
  String registrationId=mapService.getMapServiceContext().addEventListener(listener,eventFilter,name);
  endpoint.setListenerRegistration(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","@Override public Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService();
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void onEntryEvent(    EntryEvent<Object,Object> event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareEntryEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        Data oldValue=dataAwareEntryEvent.getOldValueData();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  EventFilter eventFilter;
  if (getPredicate() == null) {
    eventFilter=new EntryEventFilter(includeValue,key);
  }
 else {
    eventFilter=new QueryEventFilter(includeValue,key,getPredicate());
  }
  String registrationId=mapService.getMapServiceContext().addEventListener(listener,eventFilter,name);
  endpoint.setListenerRegistration(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9245683126325356
47900,"@Override public void onEntryEvent(EntryEvent<Object,Object> event){
  DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
  if (endpoint.live()) {
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    Data oldValue=dataAwareEntryEvent.getOldValueData();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}","@Override public void onEntryEvent(EntryEvent<Object,Object> event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareEntryEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    Data oldValue=dataAwareEntryEvent.getOldValueData();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}",0.8278757346767422
47901,"@Override public void onEntryEvent(EntryEvent event){
  if (endpoint.live()) {
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    final EntryEventType type=event.getEventType();
    final String uuid=event.getMember().getUuid();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}","@Override public void onEntryEvent(EntryEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareEntryEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    final EntryEventType type=event.getEventType();
    final String uuid=event.getMember().getUuid();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}",0.8691189050470488
47902,"public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final MultiMapService service=getService();
  EntryListener listener=new EntryAdapter(){
    @Override public void onEntryEvent(    EntryEvent event){
      if (endpoint.live()) {
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addListener(name,listener,key,includeValue,false);
  endpoint.setListenerRegistration(MultiMapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final MultiMapService service=getService();
  EntryListener listener=new EntryAdapter(){
    @Override public void onEntryEvent(    EntryEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareEntryEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addListener(name,listener,key,includeValue,false);
  endpoint.setListenerRegistration(MultiMapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9413437611091362
47903,"@Override public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final QueueService service=getService();
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addItemListener(name,listener,includeValue);
  endpoint.setListenerRegistration(QueueService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","@Override public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final QueueService service=getService();
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareItemEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addItemListener(name,listener,includeValue);
  endpoint.setListenerRegistration(QueueService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9192118226600984
47904,"private void send(ItemEvent event){
  if (endpoint.live()) {
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}","private void send(ItemEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareItemEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}",0.8240740740740741
47905,"@Override public void onMessage(Message message){
  if (!endpoint.live()) {
    return;
  }
  DataAwareMessage dataAwareMessage=(DataAwareMessage)message;
  Data messageData=dataAwareMessage.getMessageData();
  String publisherUuid=message.getPublishingMember().getUuid();
  PortableMessage portableMessage=new PortableMessage(messageData,message.getPublishTime(),publisherUuid);
  endpoint.sendEvent(portableMessage,callId);
}","@Override public void onMessage(Message message){
  if (!endpoint.live()) {
    return;
  }
  if (!(message instanceof DataAwareMessage)) {
    throw new IllegalArgumentException(""String_Node_Str"" + message.getClass().getSimpleName());
  }
  DataAwareMessage dataAwareMessage=(DataAwareMessage)message;
  Data messageData=dataAwareMessage.getMessageData();
  String publisherUuid=message.getPublishingMember().getUuid();
  PortableMessage portableMessage=new PortableMessage(messageData,message.getPublishTime(),publisherUuid);
  endpoint.sendEvent(portableMessage,callId);
}",0.8522954091816367
47906,"private ItemListener createItemListener(final ClientEndpoint endpoint){
  return new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
}","private ItemListener createItemListener(final ClientEndpoint endpoint){
  return new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareItemEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
}",0.8487282463186078
47907,"private void send(ItemEvent event){
  if (endpoint.live()) {
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}","private void send(ItemEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareItemEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}",0.8240740740740741
47908,"@Override public Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService();
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void onEntryEvent(    EntryEvent<Object,Object> event){
      DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
      if (endpoint.live()) {
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        Data oldValue=dataAwareEntryEvent.getOldValueData();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  EventFilter eventFilter;
  if (getPredicate() == null) {
    eventFilter=new EntryEventFilter(includeValue,key);
  }
 else {
    eventFilter=new QueryEventFilter(includeValue,key,getPredicate());
  }
  String registrationId=mapService.getMapServiceContext().addEventListener(listener,eventFilter,name);
  endpoint.setListenerRegistration(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","@Override public Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService();
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void onEntryEvent(    EntryEvent<Object,Object> event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareEntryEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        Data oldValue=dataAwareEntryEvent.getOldValueData();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  EventFilter eventFilter;
  if (getPredicate() == null) {
    eventFilter=new EntryEventFilter(includeValue,key);
  }
 else {
    eventFilter=new QueryEventFilter(includeValue,key,getPredicate());
  }
  String registrationId=mapService.getMapServiceContext().addEventListener(listener,eventFilter,name);
  endpoint.setListenerRegistration(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9245683126325356
47909,"@Override public void onEntryEvent(EntryEvent<Object,Object> event){
  DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
  if (endpoint.live()) {
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    Data oldValue=dataAwareEntryEvent.getOldValueData();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}","@Override public void onEntryEvent(EntryEvent<Object,Object> event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareEntryEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    Data oldValue=dataAwareEntryEvent.getOldValueData();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}",0.8278757346767422
47910,"@Override public void onEntryEvent(EntryEvent event){
  if (endpoint.live()) {
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    final EntryEventType type=event.getEventType();
    final String uuid=event.getMember().getUuid();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}","@Override public void onEntryEvent(EntryEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareEntryEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    final EntryEventType type=event.getEventType();
    final String uuid=event.getMember().getUuid();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}",0.8691189050470488
47911,"public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final MultiMapService service=getService();
  EntryListener listener=new EntryAdapter(){
    @Override public void onEntryEvent(    EntryEvent event){
      if (endpoint.live()) {
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addListener(name,listener,key,includeValue,false);
  endpoint.setListenerRegistration(MultiMapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final MultiMapService service=getService();
  EntryListener listener=new EntryAdapter(){
    @Override public void onEntryEvent(    EntryEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareEntryEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addListener(name,listener,key,includeValue,false);
  endpoint.setListenerRegistration(MultiMapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9413437611091362
47912,"@Override public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final QueueService service=getService();
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addItemListener(name,listener,includeValue);
  endpoint.setListenerRegistration(QueueService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","@Override public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final QueueService service=getService();
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareItemEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addItemListener(name,listener,includeValue);
  endpoint.setListenerRegistration(QueueService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9192118226600984
47913,"private void send(ItemEvent event){
  if (endpoint.live()) {
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}","private void send(ItemEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareItemEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}",0.8240740740740741
47914,"@Override public void onMessage(Message message){
  if (!endpoint.live()) {
    return;
  }
  DataAwareMessage dataAwareMessage=(DataAwareMessage)message;
  Data messageData=dataAwareMessage.getMessageData();
  String publisherUuid=message.getPublishingMember().getUuid();
  PortableMessage portableMessage=new PortableMessage(messageData,message.getPublishTime(),publisherUuid);
  endpoint.sendEvent(portableMessage,callId);
}","@Override public void onMessage(Message message){
  if (!endpoint.live()) {
    return;
  }
  if (!(message instanceof DataAwareMessage)) {
    throw new IllegalArgumentException(""String_Node_Str"" + message.getClass().getSimpleName());
  }
  DataAwareMessage dataAwareMessage=(DataAwareMessage)message;
  Data messageData=dataAwareMessage.getMessageData();
  String publisherUuid=message.getPublishingMember().getUuid();
  PortableMessage portableMessage=new PortableMessage(messageData,message.getPublishTime(),publisherUuid);
  endpoint.sendEvent(portableMessage,callId);
}",0.8522954091816367
47915,"protected HttpResponse request(RequestType reqType,String context,int serverPort,CookieStore cookieStore) throws Exception {
  if (reqType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HttpClient client=HttpClientBuilder.create().disableRedirectHandling().setDefaultCookieStore(cookieStore).build();
  HttpUriRequest request=null;
switch (reqType) {
case GET_REQUEST:
    request=new HttpGet(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
  break;
case POST_REQUEST:
request=new HttpPost(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
break;
default :
throw new IllegalArgumentException(reqType + ""String_Node_Str"");
}
HttpResponse response=client.execute(request);
return response;
}","protected HttpResponse request(RequestType reqType,String context,int serverPort,CookieStore cookieStore) throws Exception {
  if (reqType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HttpClient client=HttpClientBuilder.create().disableRedirectHandling().setDefaultCookieStore(cookieStore).build();
  HttpUriRequest request;
switch (reqType) {
case GET_REQUEST:
    request=new HttpGet(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
  break;
case POST_REQUEST:
request=new HttpPost(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
break;
default :
throw new IllegalArgumentException(reqType + ""String_Node_Str"");
}
return client.execute(request);
}",0.9648518263266712
47916,"@Before public void setup() throws Exception {
  final URL root=new URL(TestServlet.class.getResource(""String_Node_Str""),""String_Node_Str"");
  final String baseDir=new File(root.getFile().replaceAll(""String_Node_Str"",""String_Node_Str"")).toString();
  final String sourceDir=baseDir + ""String_Node_Str"";
  hz=Hazelcast.newHazelcastInstance(new FileSystemXmlConfig(new File(sourceDir + ""String_Node_Str"",""String_Node_Str"")));
  serverPort1=availablePort();
  server1=getServletContainer(serverPort1,sourceDir,serverXml1);
  if (serverXml2 != null) {
    serverPort2=availablePort();
    server2=getServletContainer(serverPort2,sourceDir,serverXml2);
  }
}","@Before public void setup() throws Exception {
  ContainerContext cc=CONTAINER_CONTEXT_MAP.get(getClass());
  if (cc == null) {
    ensureInstanceIsUp();
    CONTAINER_CONTEXT_MAP.put(getClass(),new ContainerContext(this,serverXml1,serverXml2,serverPort1,serverPort2,server1,server2,hz));
  }
 else {
    cc.copyInto(this);
    ensureInstanceIsUp();
    cc.copyFrom(this);
  }
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  map.clear();
}",0.1380563124432334
47917,"public void buildTomcat(int port,String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
}","public void buildTomcat(String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
  running=true;
}",0.983670803396473
47918,"@Override public void stop() throws LifecycleException {
  tomcat.stop();
}","@Override public void stop() throws Exception {
  tomcat.stop();
  tomcat.destroy();
  running=false;
}",0.7415730337078652
47919,"@Override public void restart() throws LifecycleException, InterruptedException {
  int port=tomcat.getConnector().getLocalPort();
  tomcat.stop();
  tomcat.destroy();
  Thread.sleep(5000);
  buildTomcat(port,sourceDir,serverXml);
  Thread.sleep(5000);
}","@Override public void restart() throws Exception {
  stop();
  Thread.sleep(5000);
  start();
}",0.5272206303724928
47920,"@Override public void start() throws Exception {
  tomcat.start();
}","@Override public void start() throws Exception {
  buildTomcat(sourceDir,serverXml);
  running=true;
}",0.7294117647058823
47921,"public TomcatServer(int port,String sourceDir,String serverXml) throws Exception {
  this.serverXml=serverXml;
  this.sourceDir=sourceDir;
  buildTomcat(port,sourceDir,serverXml);
}","public TomcatServer(int port,String sourceDir,String serverXml) throws Exception {
  this.port=port;
  this.serverXml=serverXml;
  this.sourceDir=sourceDir;
  buildTomcat(sourceDir,serverXml);
}",0.9386666666666666
47922,"protected HttpResponse request(RequestType reqType,String context,int serverPort,CookieStore cookieStore) throws Exception {
  if (reqType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HttpClient client=HttpClientBuilder.create().disableRedirectHandling().setDefaultCookieStore(cookieStore).build();
  HttpUriRequest request=null;
switch (reqType) {
case GET_REQUEST:
    request=new HttpGet(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
  break;
case POST_REQUEST:
request=new HttpPost(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
break;
default :
throw new IllegalArgumentException(reqType + ""String_Node_Str"");
}
HttpResponse response=client.execute(request);
return response;
}","protected HttpResponse request(RequestType reqType,String context,int serverPort,CookieStore cookieStore) throws Exception {
  if (reqType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HttpClient client=HttpClientBuilder.create().disableRedirectHandling().setDefaultCookieStore(cookieStore).build();
  HttpUriRequest request;
switch (reqType) {
case GET_REQUEST:
    request=new HttpGet(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
  break;
case POST_REQUEST:
request=new HttpPost(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
break;
default :
throw new IllegalArgumentException(reqType + ""String_Node_Str"");
}
return client.execute(request);
}",0.9648518263266712
47923,"@Before public void setup() throws Exception {
  final URL root=new URL(TestServlet.class.getResource(""String_Node_Str""),""String_Node_Str"");
  final String baseDir=new File(root.getFile().replaceAll(""String_Node_Str"",""String_Node_Str"")).toString();
  final String sourceDir=baseDir + ""String_Node_Str"";
  hz=Hazelcast.newHazelcastInstance(new FileSystemXmlConfig(new File(sourceDir + ""String_Node_Str"",""String_Node_Str"")));
  serverPort1=availablePort();
  server1=getServletContainer(serverPort1,sourceDir,serverXml1);
  if (serverXml2 != null) {
    serverPort2=availablePort();
    server2=getServletContainer(serverPort2,sourceDir,serverXml2);
  }
}","@Before public void setup() throws Exception {
  ContainerContext cc=CONTAINER_CONTEXT_MAP.get(getClass());
  if (cc == null || isInstanceNotActive(cc.hz)) {
    buildInstance();
    CONTAINER_CONTEXT_MAP.put(getClass(),new ContainerContext(this,serverXml1,serverXml2,serverPort1,serverPort2,server1,server2,hz));
    if (cc == null) {
      onTestStart();
    }
    onContainerStart();
  }
 else {
    cc.copyInto(this);
  }
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  map.clear();
}",0.1391304347826087
47924,"@Test(timeout=20000) public void test_clusterMapSize() throws Exception {
  CookieStore cookieStore=new BasicCookieStore();
  IMap<String,Object> map=hz.getMap(""String_Node_Str"");
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  assertEquals(2,map.size());
}","@Test(timeout=20000) public void test_clusterMapSize() throws Exception {
  CookieStore cookieStore=new BasicCookieStore();
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  assertEquals(2,map.size());
}",0.7329650092081031
47925,"@Test(timeout=20000) public void test_clusterMapSizeAfterRemove() throws Exception {
  CookieStore cookieStore=new BasicCookieStore();
  IMap<String,Object> map=hz.getMap(""String_Node_Str"");
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  executeRequest(""String_Node_Str"",serverPort2,cookieStore);
  assertEquals(1,map.size());
}","@Test(timeout=20000) public void test_clusterMapSizeAfterRemove() throws Exception {
  CookieStore cookieStore=new BasicCookieStore();
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  executeRequest(""String_Node_Str"",serverPort2,cookieStore);
  assertEquals(1,map.size());
}",0.9577874818049492
47926,"@Test(timeout=20000) public void test_updateAttribute() throws Exception {
  IMap<String,Object> map=hz.getMap(""String_Node_Str"");
  CookieStore cookieStore=new BasicCookieStore();
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  executeRequest(""String_Node_Str"",serverPort2,cookieStore);
  assertEquals(""String_Node_Str"",executeRequest(""String_Node_Str"",serverPort1,cookieStore));
  assertSizeEventually(2,map);
}","@Test(timeout=20000) public void test_updateAttribute() throws Exception {
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  CookieStore cookieStore=new BasicCookieStore();
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  executeRequest(""String_Node_Str"",serverPort2,cookieStore);
  assertEquals(""String_Node_Str"",executeRequest(""String_Node_Str"",serverPort1,cookieStore));
  assertSizeEventually(2,map);
}",0.9660818713450292
47927,"@Test(timeout=20000) public void test_invalidateSession() throws Exception {
  IMap<String,Object> map=hz.getMap(""String_Node_Str"");
  CookieStore cookieStore=new BasicCookieStore();
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  executeRequest(""String_Node_Str"",serverPort2,cookieStore);
  assertSizeEventually(0,map);
}","@Test(timeout=20000) public void test_invalidateSession() throws Exception {
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  CookieStore cookieStore=new BasicCookieStore();
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  executeRequest(""String_Node_Str"",serverPort2,cookieStore);
  assertSizeEventually(0,map);
}",0.9569093610698366
47928,"@Test(timeout=20000) public void test_sessionTimeout() throws Exception {
  CookieStore cookieStore=new BasicCookieStore();
  IMap<String,Object> map=hz.getMap(""String_Node_Str"");
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  assertSizeEventually(0,map);
}","@Test(timeout=20000) public void test_sessionTimeout() throws Exception {
  CookieStore cookieStore=new BasicCookieStore();
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  executeRequest(""String_Node_Str"",serverPort1,cookieStore);
  assertSizeEventually(0,map);
}",0.9565217391304348
47929,"@Test(timeout=130000) public void testSessionTimeout() throws Exception {
  IMap<String,Object> map=hz.getMap(""String_Node_Str"");
  CookieStore cookieStore=new BasicCookieStore();
  assertEquals(""String_Node_Str"",executeRequest(""String_Node_Str"",serverPort1,cookieStore));
  String sessionId=findHazelcastSessionId(map);
  assertEquals(2,map.size());
  assertEquals(""String_Node_Str"",1,((Integer)map.get(sessionId)).intValue());
  Thread.sleep(TimeUnit.SECONDS.toMillis(30L));
  assertEquals(""String_Node_Str"",executeRequest(""String_Node_Str"",serverPort2,cookieStore));
  assertEquals(2,map.size());
  assertEquals(""String_Node_Str"",2,((Integer)map.get(sessionId)).intValue());
  Thread.sleep(TimeUnit.SECONDS.toMillis(45));
  assertEquals(2,map.size());
  assertEquals(""String_Node_Str"",1,((Integer)map.get(sessionId)).intValue());
  Thread.sleep(TimeUnit.SECONDS.toMillis(30L));
  assertTrue(""String_Node_Str"",map.isEmpty());
}","@Test(timeout=130000) public void testSessionTimeout() throws Exception {
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  CookieStore cookieStore=new BasicCookieStore();
  assertEquals(""String_Node_Str"",executeRequest(""String_Node_Str"",serverPort1,cookieStore));
  String sessionId=findHazelcastSessionId(map);
  assertEquals(2,map.size());
  assertEquals(""String_Node_Str"",1,((Integer)map.get(sessionId)).intValue());
  Thread.sleep(TimeUnit.SECONDS.toMillis(30L));
  assertEquals(""String_Node_Str"",executeRequest(""String_Node_Str"",serverPort2,cookieStore));
  assertEquals(2,map.size());
  assertEquals(""String_Node_Str"",2,((Integer)map.get(sessionId)).intValue());
  Thread.sleep(TimeUnit.SECONDS.toMillis(45));
  assertEquals(2,map.size());
  assertEquals(""String_Node_Str"",1,((Integer)map.get(sessionId)).intValue());
  Thread.sleep(TimeUnit.SECONDS.toMillis(30L));
  assertTrue(""String_Node_Str"",map.isEmpty());
}",0.9822294022617124
47930,"protected HttpResponse request(RequestType reqType,String context,int serverPort,CookieStore cookieStore) throws Exception {
  if (reqType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HttpClient client=HttpClientBuilder.create().disableRedirectHandling().setDefaultCookieStore(cookieStore).build();
  HttpUriRequest request=null;
switch (reqType) {
case GET_REQUEST:
    request=new HttpGet(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
  break;
case POST_REQUEST:
request=new HttpPost(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
break;
default :
throw new IllegalArgumentException(reqType + ""String_Node_Str"");
}
HttpResponse response=client.execute(request);
return response;
}","protected HttpResponse request(RequestType reqType,String context,int serverPort,CookieStore cookieStore) throws Exception {
  if (reqType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HttpClient client=HttpClientBuilder.create().disableRedirectHandling().setDefaultCookieStore(cookieStore).build();
  HttpUriRequest request;
switch (reqType) {
case GET_REQUEST:
    request=new HttpGet(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
  break;
case POST_REQUEST:
request=new HttpPost(""String_Node_Str"" + serverPort + ""String_Node_Str""+ context);
break;
default :
throw new IllegalArgumentException(reqType + ""String_Node_Str"");
}
return client.execute(request);
}",0.9648518263266712
47931,"@Before public void setup() throws Exception {
  final URL root=new URL(TestServlet.class.getResource(""String_Node_Str""),""String_Node_Str"");
  final String baseDir=new File(root.getFile().replaceAll(""String_Node_Str"",""String_Node_Str"")).toString();
  final String sourceDir=baseDir + ""String_Node_Str"";
  hz=Hazelcast.newHazelcastInstance(new FileSystemXmlConfig(new File(sourceDir + ""String_Node_Str"",""String_Node_Str"")));
  serverPort1=availablePort();
  server1=getServletContainer(serverPort1,sourceDir,serverXml1);
  if (serverXml2 != null) {
    serverPort2=availablePort();
    server2=getServletContainer(serverPort2,sourceDir,serverXml2);
  }
}","@Before public void setup() throws Exception {
  ContainerContext cc=CONTAINER_CONTEXT_MAP.get(getClass());
  if (cc == null) {
    ensureInstanceIsUp();
    CONTAINER_CONTEXT_MAP.put(getClass(),new ContainerContext(this,serverXml1,serverXml2,serverPort1,serverPort2,server1,server2,hz));
  }
 else {
    cc.copyInto(this);
    ensureInstanceIsUp();
    cc.copyFrom(this);
  }
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  map.clear();
}",0.1380563124432334
47932,"public void buildTomcat(int port,String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
}","public void buildTomcat(int port,String sourceDir,String serverXml) throws LifecycleException {
  tomcat=new Tomcat();
  File baseDir=new File(System.getProperty(""String_Node_Str""));
  tomcat.setPort(port);
  tomcat.setBaseDir(baseDir.getAbsolutePath());
  Context context=tomcat.addContext(""String_Node_Str"",sourceDir);
  context.getServletContext().setAttribute(Globals.ALT_DD_ATTR,sourceDir + ""String_Node_Str"" + serverXml);
  ContextConfig contextConfig=new ContextConfig();
  context.addLifecycleListener(contextConfig);
  context.setCookies(true);
  context.setBackgroundProcessorDelay(1);
  context.setReloadable(true);
  tomcat.getEngine().setJvmRoute(""String_Node_Str"" + port);
  tomcat.getEngine().setName(""String_Node_Str"" + port);
  tomcat.start();
  running=true;
}",0.9896103896103896
47933,"@Override public void stop() throws LifecycleException {
  tomcat.stop();
}","@Override public void stop() throws LifecycleException {
  tomcat.stop();
  running=false;
}",0.8982035928143712
47934,"@Override public void restart() throws LifecycleException, InterruptedException {
  int port=tomcat.getConnector().getLocalPort();
  tomcat.stop();
  tomcat.destroy();
  Thread.sleep(5000);
  buildTomcat(port,sourceDir,serverXml);
  Thread.sleep(5000);
}","@Override public void restart() throws LifecycleException, InterruptedException {
  int port=tomcat.getConnector().getLocalPort();
  tomcat.stop();
  running=false;
  tomcat.destroy();
  Thread.sleep(5000);
  buildTomcat(port,sourceDir,serverXml);
  Thread.sleep(5000);
  running=true;
}",0.9390018484288356
47935,"@Override public void start() throws Exception {
  tomcat.start();
}","@Override public void start() throws Exception {
  tomcat.start();
  running=true;
}",0.8947368421052632
47936,"private ItemListener createItemListener(final ClientEndpoint endpoint){
  return new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
}","private ItemListener createItemListener(final ClientEndpoint endpoint){
  return new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareItemEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
}",0.8487282463186078
47937,"private void send(ItemEvent event){
  if (endpoint.live()) {
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}","private void send(ItemEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareItemEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}",0.8240740740740741
47938,"@Override public Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService();
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void onEntryEvent(    EntryEvent<Object,Object> event){
      DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
      if (endpoint.live()) {
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        Data oldValue=dataAwareEntryEvent.getOldValueData();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  EventFilter eventFilter;
  if (getPredicate() == null) {
    eventFilter=new EntryEventFilter(includeValue,key);
  }
 else {
    eventFilter=new QueryEventFilter(includeValue,key,getPredicate());
  }
  String registrationId=mapService.getMapServiceContext().addEventListener(listener,eventFilter,name);
  endpoint.setListenerRegistration(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","@Override public Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService();
  EntryListener<Object,Object> listener=new EntryAdapter<Object,Object>(){
    @Override public void onEntryEvent(    EntryEvent<Object,Object> event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareEntryEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        Data oldValue=dataAwareEntryEvent.getOldValueData();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  EventFilter eventFilter;
  if (getPredicate() == null) {
    eventFilter=new EntryEventFilter(includeValue,key);
  }
 else {
    eventFilter=new QueryEventFilter(includeValue,key,getPredicate());
  }
  String registrationId=mapService.getMapServiceContext().addEventListener(listener,eventFilter,name);
  endpoint.setListenerRegistration(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9245683126325356
47939,"@Override public void onEntryEvent(EntryEvent<Object,Object> event){
  DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
  if (endpoint.live()) {
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    Data oldValue=dataAwareEntryEvent.getOldValueData();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}","@Override public void onEntryEvent(EntryEvent<Object,Object> event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareEntryEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    Data oldValue=dataAwareEntryEvent.getOldValueData();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,oldValue,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}",0.8278757346767422
47940,"@Override public void onEntryEvent(EntryEvent event){
  if (endpoint.live()) {
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    final EntryEventType type=event.getEventType();
    final String uuid=event.getMember().getUuid();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}","@Override public void onEntryEvent(EntryEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareEntryEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
    Data key=dataAwareEntryEvent.getKeyData();
    Data value=dataAwareEntryEvent.getNewValueData();
    final EntryEventType type=event.getEventType();
    final String uuid=event.getMember().getUuid();
    PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
    endpoint.sendEvent(portableEntryEvent,getCallId());
  }
}",0.8691189050470488
47941,"public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final MultiMapService service=getService();
  EntryListener listener=new EntryAdapter(){
    @Override public void onEntryEvent(    EntryEvent event){
      if (endpoint.live()) {
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addListener(name,listener,key,includeValue,false);
  endpoint.setListenerRegistration(MultiMapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final MultiMapService service=getService();
  EntryListener listener=new EntryAdapter(){
    @Override public void onEntryEvent(    EntryEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareEntryEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareEntryEvent dataAwareEntryEvent=(DataAwareEntryEvent)event;
        Data key=dataAwareEntryEvent.getKeyData();
        Data value=dataAwareEntryEvent.getNewValueData();
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(key,value,null,type,uuid);
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
    @Override public void onMapEvent(    MapEvent event){
      if (endpoint.live()) {
        final EntryEventType type=event.getEventType();
        final String uuid=event.getMember().getUuid();
        PortableEntryEvent portableEntryEvent=new PortableEntryEvent(type,uuid,event.getNumberOfEntriesAffected());
        endpoint.sendEvent(portableEntryEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addListener(name,listener,key,includeValue,false);
  endpoint.setListenerRegistration(MultiMapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9413437611091362
47942,"@Override public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final QueueService service=getService();
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addItemListener(name,listener,includeValue);
  endpoint.setListenerRegistration(QueueService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","@Override public Object call() throws Exception {
  final ClientEndpoint endpoint=getEndpoint();
  final QueueService service=getService();
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      send(item);
    }
    @Override public void itemRemoved(    ItemEvent item){
      send(item);
    }
    private void send(    ItemEvent event){
      if (endpoint.live()) {
        if (!(event instanceof DataAwareItemEvent)) {
          throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
        }
        DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
        Data item=dataAwareItemEvent.getItemData();
        PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
        endpoint.sendEvent(portableItemEvent,getCallId());
      }
    }
  }
;
  String registrationId=service.addItemListener(name,listener,includeValue);
  endpoint.setListenerRegistration(QueueService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9192118226600984
47943,"private void send(ItemEvent event){
  if (endpoint.live()) {
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}","private void send(ItemEvent event){
  if (endpoint.live()) {
    if (!(event instanceof DataAwareItemEvent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + event.getClass().getSimpleName());
    }
    DataAwareItemEvent dataAwareItemEvent=(DataAwareItemEvent)event;
    Data item=dataAwareItemEvent.getItemData();
    PortableItemEvent portableItemEvent=new PortableItemEvent(item,event.getEventType(),event.getMember().getUuid());
    endpoint.sendEvent(portableItemEvent,getCallId());
  }
}",0.8240740740740741
47944,"@Override public void onMessage(Message message){
  if (!endpoint.live()) {
    return;
  }
  DataAwareMessage dataAwareMessage=(DataAwareMessage)message;
  Data messageData=dataAwareMessage.getMessageData();
  String publisherUuid=message.getPublishingMember().getUuid();
  PortableMessage portableMessage=new PortableMessage(messageData,message.getPublishTime(),publisherUuid);
  endpoint.sendEvent(portableMessage,callId);
}","@Override public void onMessage(Message message){
  if (!endpoint.live()) {
    return;
  }
  if (!(message instanceof DataAwareMessage)) {
    throw new IllegalArgumentException(""String_Node_Str"" + message.getClass().getSimpleName());
  }
  DataAwareMessage dataAwareMessage=(DataAwareMessage)message;
  Data messageData=dataAwareMessage.getMessageData();
  String publisherUuid=message.getPublishingMember().getUuid();
  PortableMessage portableMessage=new PortableMessage(messageData,message.getPublishTime(),publisherUuid);
  endpoint.sendEvent(portableMessage,callId);
}",0.8522954091816367
47945,"public boolean resend(){
  if (request.isSingleConnection()) {
    return false;
  }
  if (handler == null && reSendCount.incrementAndGet() > retryCount) {
    return false;
  }
  sleep();
  executionService.execute(new ReSendTask());
  return true;
}","public boolean resend(){
  if (request.isSingleConnection()) {
    return false;
  }
  if (handler == null && reSendCount.incrementAndGet() > retryCount) {
    return false;
  }
  executionService.schedule(new ReSendTask(),retryWaitTime,TimeUnit.MILLISECONDS);
  return true;
}",0.8863636363636364
47946,"/** 
 * Used if inner predicate is instanceof   {@link IndexAwarePredicate} for checking if indexed
 * @param queryContext
 * @return
 */
@Override public boolean isIndexed(QueryContext queryContext){
  if (predicate instanceof IndexAwarePredicate) {
    return ((IndexAwarePredicate)predicate).isIndexed(queryContext);
  }
  return false;
}","/** 
 * Used if inner predicate is instanceof   {@link IndexAwarePredicate} for checking if indexed
 * @param queryContext
 * @return
 */
public boolean isIndexed(QueryContext queryContext){
  if (predicate instanceof IndexAwarePredicate) {
    return ((IndexAwarePredicate)predicate).isIndexed(queryContext);
  }
  return false;
}",0.9851190476190476
47947,"@Override public void readData(ObjectDataInput in) throws IOException {
  predicate=in.readObject();
  comparator=in.readObject();
  page=in.readInt();
  pageSize=in.readInt();
  iterationType=IterationType.valueOf(in.readUTF());
  int size=in.readInt();
  for (int i=0; i < size; i++) {
    final int key=in.readInt();
    final Object anchorKey=in.readObject();
    final Object anchorValue=in.readObject();
    anchorMap.put(key,new AbstractMap.SimpleImmutableEntry(anchorKey,anchorValue));
  }
}","public void readData(ObjectDataInput in) throws IOException {
  predicate=in.readObject();
  comparator=in.readObject();
  page=in.readInt();
  pageSize=in.readInt();
  iterationType=IterationType.valueOf(in.readUTF());
  int size=in.readInt();
  for (int i=0; i < size; i++) {
    final int key=in.readInt();
    final Object anchorKey=in.readObject();
    final Object anchorValue=in.readObject();
    anchorMap.put(key,new AbstractMap.SimpleImmutableEntry(anchorKey,anchorValue));
  }
}",0.9898785425101214
47948,"/** 
 * Used for delegating filtering to inner predicate
 * @param mapEntry
 * @return
 */
@Override public boolean apply(Map.Entry mapEntry){
  if (predicate != null) {
    return predicate.apply(mapEntry);
  }
  return true;
}","/** 
 * Used for delegating filtering to inner predicate
 * @param mapEntry
 * @return
 */
public boolean apply(Map.Entry mapEntry){
  if (predicate != null) {
    return predicate.apply(mapEntry);
  }
  return true;
}",0.9775784753363228
47949,"@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeObject(predicate);
  out.writeObject(comparator);
  out.writeInt(page);
  out.writeInt(pageSize);
  out.writeUTF(iterationType.name());
  out.writeInt(anchorMap.size());
  for (  Map.Entry<Integer,Map.Entry> entry : anchorMap.entrySet()) {
    out.writeInt(entry.getKey());
    final Map.Entry anchorEntry=entry.getValue();
    out.writeObject(anchorEntry.getKey());
    out.writeObject(anchorEntry.getValue());
  }
}","public void writeData(ObjectDataOutput out) throws IOException {
  out.writeObject(predicate);
  out.writeObject(comparator);
  out.writeInt(page);
  out.writeInt(pageSize);
  out.writeUTF(iterationType.name());
  out.writeInt(anchorMap.size());
  for (  Map.Entry<Integer,Map.Entry> entry : anchorMap.entrySet()) {
    out.writeInt(entry.getKey());
    final Map.Entry anchorEntry=entry.getValue();
    out.writeObject(anchorEntry.getKey());
    out.writeObject(anchorEntry.getValue());
  }
}",0.9899598393574296
47950,"/** 
 * Used if inner predicate is instanceof   {@link IndexAwarePredicate} for filtering
 * @param queryContext
 * @return
 */
@Override public Set<QueryableEntry> filter(QueryContext queryContext){
  if (predicate instanceof IndexAwarePredicate) {
    Set<QueryableEntry> set=((IndexAwarePredicate)predicate).filter(queryContext);
    if (set == null) {
      return null;
    }
    List<QueryableEntry> list=new LinkedList<QueryableEntry>();
    Map.Entry anchor=getAnchor();
    for (    QueryableEntry entry : set) {
      if (anchor != null && SortingUtil.compare(comparator,iterationType,anchor,entry) >= 0) {
        continue;
      }
      list.add(entry);
    }
    Collections.sort(list,SortingUtil.newComparator(this));
    if (list.size() > pageSize) {
      list=list.subList(0,pageSize);
    }
    return new LinkedHashSet<QueryableEntry>(list);
  }
  return null;
}","/** 
 * Used if inner predicate is instanceof   {@link IndexAwarePredicate} for filtering
 * @param queryContext
 * @return
 */
public Set<QueryableEntry> filter(QueryContext queryContext){
  if (predicate instanceof IndexAwarePredicate) {
    Set<QueryableEntry> set=((IndexAwarePredicate)predicate).filter(queryContext);
    if (set == null) {
      return null;
    }
    List<QueryableEntry> list=new LinkedList<QueryableEntry>();
    Map.Entry anchor=getAnchor();
    for (    QueryableEntry entry : set) {
      if (SortingUtil.isSuitableForCompare(comparator,iterationType,entry)) {
        if (anchor != null && SortingUtil.compare(comparator,iterationType,anchor,entry) >= 0) {
          continue;
        }
        list.add(entry);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    if (list.isEmpty()) {
      return null;
    }
    Collections.sort(list,SortingUtil.newComparator(this));
    if (list.size() > pageSize) {
      list=list.subList(0,pageSize);
    }
    return new LinkedHashSet<QueryableEntry>(list);
  }
  return null;
}",0.872745490981964
47951,"/** 
 * Retrieve the anchor object which is the last value object on the previous page. Note: This method will return `null` on the first page of the query result.
 * @return Map.Entry
 */
public Map.Entry getAnchor(){
  return anchorMap.get(page);
}","public Map.Entry getAnchor(){
  return anchorMap.get(page);
}",0.3922829581993569
47952,"/** 
 * Used if inner predicate is instanceof   {@link IndexAwarePredicate} for filtering
 * @param queryContext
 * @return
 */
public Set<QueryableEntry> filter(QueryContext queryContext){
  if (predicate instanceof IndexAwarePredicate) {
    Set<QueryableEntry> set=((IndexAwarePredicate)predicate).filter(queryContext);
    if (set == null) {
      return null;
    }
    List<QueryableEntry> list=new LinkedList<QueryableEntry>();
    Map.Entry anchor=getAnchor();
    for (    QueryableEntry entry : set) {
      if (anchor != null && SortingUtil.compare(comparator,iterationType,anchor,entry) >= 0) {
        continue;
      }
      list.add(entry);
    }
    Collections.sort(list,SortingUtil.newComparator(this));
    if (list.size() > pageSize) {
      list=list.subList(0,pageSize);
    }
    return new LinkedHashSet<QueryableEntry>(list);
  }
  return null;
}","/** 
 * Used if inner predicate is instanceof   {@link IndexAwarePredicate} for filtering
 * @param queryContext
 * @return
 */
public Set<QueryableEntry> filter(QueryContext queryContext){
  if (predicate instanceof IndexAwarePredicate) {
    Set<QueryableEntry> set=((IndexAwarePredicate)predicate).filter(queryContext);
    if (set == null) {
      return null;
    }
    List<QueryableEntry> list=new LinkedList<QueryableEntry>();
    Map.Entry anchor=getAnchor();
    for (    QueryableEntry entry : set) {
      if (SortingUtil.isSuitableForCompare(comparator,iterationType,entry)) {
        if (anchor != null && SortingUtil.compare(comparator,iterationType,anchor,entry) >= 0) {
          continue;
        }
        list.add(entry);
      }
    }
    if (list.isEmpty()) {
      return null;
    }
    Collections.sort(list,SortingUtil.newComparator(this));
    if (list.size() > pageSize) {
      list=list.subList(0,pageSize);
    }
    return new LinkedHashSet<QueryableEntry>(list);
  }
  return null;
}",0.9231584525702172
47953,"/** 
 * Used if inner predicate is instanceof   {@link IndexAwarePredicate} for filtering
 * @param queryContext
 * @return
 */
public Set<QueryableEntry> filter(QueryContext queryContext){
  if (predicate instanceof IndexAwarePredicate) {
    Set<QueryableEntry> set=((IndexAwarePredicate)predicate).filter(queryContext);
    if (set == null) {
      return null;
    }
    List<QueryableEntry> list=new LinkedList<QueryableEntry>();
    Map.Entry anchor=getAnchor();
    for (    QueryableEntry entry : set) {
      if (SortingUtil.isSuitableForCompare(comparator,iterationType,entry)) {
        if (anchor != null && SortingUtil.compare(comparator,iterationType,anchor,entry) >= 0) {
          continue;
        }
        list.add(entry);
      }
    }
    if (list.isEmpty()) {
      return null;
    }
    Collections.sort(list,SortingUtil.newComparator(this));
    if (list.size() > pageSize) {
      list=list.subList(0,pageSize);
    }
    return new LinkedHashSet<QueryableEntry>(list);
  }
  return null;
}","/** 
 * Used if inner predicate is instanceof   {@link IndexAwarePredicate} for filtering
 * @param queryContext
 * @return
 */
public Set<QueryableEntry> filter(QueryContext queryContext){
  if (predicate instanceof IndexAwarePredicate) {
    Set<QueryableEntry> set=((IndexAwarePredicate)predicate).filter(queryContext);
    if (set == null) {
      return null;
    }
    List<QueryableEntry> list=new LinkedList<QueryableEntry>();
    Map.Entry anchor=getAnchor();
    for (    QueryableEntry entry : set) {
      if (SortingUtil.isSuitableForCompare(comparator,iterationType,entry)) {
        if (anchor != null && SortingUtil.compare(comparator,iterationType,anchor,entry) >= 0) {
          continue;
        }
        list.add(entry);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    if (list.isEmpty()) {
      return null;
    }
    Collections.sort(list,SortingUtil.newComparator(this));
    if (list.size() > pageSize) {
      list=list.subList(0,pageSize);
    }
    return new LinkedHashSet<QueryableEntry>(list);
  }
  return null;
}",0.9535429375879868
47954,"@Test(expected=IllegalStateException.class) public void testAwait_whenInstanceShutdown_thenLatchOpened() throws InterruptedException {
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(1);
  final HazelcastInstance instance=factory.newHazelcastInstance(new Config());
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(10);
  Thread thread=(new Thread(){
    public void run(){
      instance.shutdown();
    }
  }
);
  thread.start();
  assertOpenEventually(latch);
}","@Test public void testAwait_whenInstanceShutdown_thenLatchOpened() throws InterruptedException {
  HazelcastInstance instance=createHazelcastInstance();
  final ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(10);
  final TestThread awaitThread=new TestThread(){
    @Override public void doRun() throws Exception {
      latch.await(1,TimeUnit.HOURS);
    }
  }
;
  awaitThread.start();
  sleepSeconds(5);
  instance.shutdown();
  awaitThread.assertFailsEventually(HazelcastInstanceNotActiveException.class);
}",0.1135940409683426
47955,"@Test public void testDestroy(){
  final HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  NodeEngineImpl nodeEngine=getNode(instance).getNodeEngine();
  CountDownLatchService service=nodeEngine.getService(CountDownLatchService.SERVICE_NAME);
  latch.destroy();
  assertFalse(service.containsLatch(latch.getName()));
}","@Test public void testDestroy(){
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  NodeEngineImpl nodeEngine=getNode(instance).getNodeEngine();
  CountDownLatchService service=nodeEngine.getService(CountDownLatchService.SERVICE_NAME);
  latch.destroy();
  assertFalse(service.containsLatch(latch.getName()));
}",0.9922879177377892
47956,"@Test public void testTrySetCount_whenPositive(){
  final HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(10);
  assertFalse(latch.trySetCount(20));
  assertEquals(10,latch.getCount());
}","@Test public void testTrySetCount_whenPositive(){
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(10);
  assertFalse(latch.trySetCount(20));
  assertEquals(10,latch.getCount());
}",0.9892086330935252
47957,"@Test(timeout=15000) public void testAwait() throws InterruptedException {
  final HazelcastInstance instance=createHazelcastInstance();
  final ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(1);
  Thread thread=(new Thread(){
    public void run(){
      latch.countDown();
    }
  }
);
  thread.start();
  assertOpenEventually(latch);
}","@Test(timeout=15000) public void testAwait() throws InterruptedException {
  HazelcastInstance instance=createHazelcastInstance();
  final ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(1);
  TestThread thread=new TestThread(){
    public void doRun(){
      latch.countDown();
    }
  }
;
  thread.start();
  assertOpenEventually(latch);
}",0.9629629629629628
47958,"@Test public void testCountDown(){
  final HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(20);
  for (int i=19; i >= 0; i--) {
    latch.countDown();
    assertEquals(i,latch.getCount());
  }
}","@Test public void testCountDown(){
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(20);
  for (int i=19; i >= 0; i--) {
    latch.countDown();
    assertEquals(i,latch.getCount());
  }
}",0.9894736842105264
47959,"public void run(){
  try {
    sleep(1000);
  }
 catch (  InterruptedException e) {
    return;
  }
  latch.destroy();
}","public void run(){
  for (int i=1; i < k; i++) {
    try {
      sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    final ICountDownLatch l=instances[i].getCountDownLatch(""String_Node_Str"");
    l.countDown();
    assertEquals(k - 1 - i,l.getCount());
  }
}",0.4295942720763723
47960,"@Test @ClientCompatibleTest public void testSimpleUsage() throws InterruptedException {
  final int k=5;
  final Config config=new Config();
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k);
  final HazelcastInstance[] instances=factory.newInstances(config);
  ICountDownLatch latch=instances[0].getCountDownLatch(""String_Node_Str"");
  latch.trySetCount(k - 1);
  assertEquals(k - 1,latch.getCount());
  new Thread(){
    public void run(){
      for (int i=1; i < k; i++) {
        try {
          sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        final ICountDownLatch l=instances[i].getCountDownLatch(""String_Node_Str"");
        l.countDown();
        assertEquals(k - 1 - i,l.getCount());
      }
    }
  }
.start();
  assertTrue(latch.await(5000,TimeUnit.MILLISECONDS));
  assertEquals(0,latch.getCount());
}","@Test @ClientCompatibleTest public void testSimpleUsage() throws InterruptedException {
  final int k=5;
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(k);
  final HazelcastInstance[] instances=factory.newInstances();
  ICountDownLatch latch=instances[0].getCountDownLatch(""String_Node_Str"");
  latch.trySetCount(k - 1);
  assertEquals(k - 1,latch.getCount());
  new Thread(){
    public void run(){
      for (int i=1; i < k; i++) {
        try {
          sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        final ICountDownLatch l=instances[i].getCountDownLatch(""String_Node_Str"");
        l.countDown();
        assertEquals(k - 1 - i,l.getCount());
      }
    }
  }
.start();
  assertTrue(latch.await(5000,TimeUnit.MILLISECONDS));
  assertEquals(0,latch.getCount());
}",0.9761092150170648
47961,"@Test(expected=IllegalArgumentException.class) public void testTrySetCount_whenArgumentNegative(){
  final HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(""String_Node_Str"");
  latch.trySetCount(-20);
}","@Test(expected=IllegalArgumentException.class) public void testTrySetCount_whenArgumentNegative(){
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(""String_Node_Str"");
  latch.trySetCount(-20);
}",0.98828125
47962,"@Test public void testTrySetCount_whenCountIsZero(){
  final HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  assertTrue(latch.trySetCount(40));
  assertEquals(40,latch.getCount());
}","@Test public void testTrySetCount_whenCountIsZero(){
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  assertTrue(latch.trySetCount(40));
  assertEquals(40,latch.getCount());
}",0.9882352941176472
47963,"@Test public void testCountDown_whenReachZero_thenLatchRemoved(){
  final HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  CountDownLatchService service=getNode(instance).getNodeEngine().getService(CountDownLatchService.SERVICE_NAME);
  latch.trySetCount(1);
  assertTrue(service.containsLatch(latch.getName()));
  latch.countDown();
  assertFalse(service.containsLatch(latch.getName()));
}","@Test public void testCountDown_whenReachZero_thenLatchRemoved(){
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  CountDownLatchService service=getNode(instance).getNodeEngine().getService(CountDownLatchService.SERVICE_NAME);
  latch.trySetCount(1);
  assertTrue(service.containsLatch(latch.getName()));
  latch.countDown();
  assertFalse(service.containsLatch(latch.getName()));
}",0.9935064935064936
47964,"@Test public void testGetCount(){
  final HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(20);
  assertEquals(20,latch.getCount());
}","@Test public void testGetCount(){
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(20);
  assertEquals(20,latch.getCount());
}",0.9866071428571428
47965,"@Test(timeout=15000) public void testAwait_withManyThreads(){
  final HazelcastInstance instance=createHazelcastInstance();
  final ICountDownLatch latch=instance.getCountDownLatch(randomString());
  final CountDownLatch completedLatch=new CountDownLatch(10);
  latch.trySetCount(1);
  for (int i=0; i < 10; i++) {
    new Thread(){
      public void run(){
        try {
          if (latch.await(1,TimeUnit.MINUTES)) {
            completedLatch.countDown();
          }
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
.start();
  }
  latch.countDown();
  assertOpenEventually(completedLatch);
}","@Test(timeout=15000) public void testAwait_withManyThreads(){
  HazelcastInstance instance=createHazelcastInstance();
  final ICountDownLatch latch=instance.getCountDownLatch(randomString());
  final CountDownLatch completedLatch=new CountDownLatch(10);
  latch.trySetCount(1);
  for (int i=0; i < 10; i++) {
    new TestThread(){
      public void doRun() throws Exception {
        if (latch.await(1,TimeUnit.MINUTES)) {
          completedLatch.countDown();
        }
      }
    }
.start();
  }
  latch.countDown();
  assertOpenEventually(completedLatch);
}",0.8742810188989318
47966,"@Test(expected=DistributedObjectDestroyedException.class) @ClientCompatibleTest public void testLatchDestroyed() throws Exception {
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  HazelcastInstance hz1=factory.newHazelcastInstance();
  HazelcastInstance hz2=factory.newHazelcastInstance();
  final ICountDownLatch latch=hz1.getCountDownLatch(""String_Node_Str"");
  latch.trySetCount(2);
  new Thread(){
    public void run(){
      try {
        sleep(1000);
      }
 catch (      InterruptedException e) {
        return;
      }
      latch.destroy();
    }
  }
.start();
  hz2.getCountDownLatch(""String_Node_Str"").await(5,TimeUnit.SECONDS);
}","@Test(expected=DistributedObjectDestroyedException.class) @ClientCompatibleTest public void testLatchDestroyed() throws Exception {
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  HazelcastInstance hz1=factory.newHazelcastInstance();
  HazelcastInstance hz2=factory.newHazelcastInstance();
  final ICountDownLatch latch=hz1.getCountDownLatch(""String_Node_Str"");
  latch.trySetCount(2);
  new TestThread(){
    public void doRun() throws Exception {
      sleep(1000);
      latch.destroy();
    }
  }
.start();
  hz2.getCountDownLatch(""String_Node_Str"").await(5,TimeUnit.SECONDS);
}",0.906396255850234
47967,"@Test public void testTrySetCount_whenCountIsNotZero(){
  final HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(10);
  assertFalse(latch.trySetCount(20));
  assertFalse(latch.trySetCount(0));
  assertEquals(10,latch.getCount());
}","@Test public void testTrySetCount_whenCountIsNotZero(){
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(10);
  assertFalse(latch.trySetCount(20));
  assertFalse(latch.trySetCount(0));
  assertEquals(10,latch.getCount());
}",0.9906542056074766
47968,"@Test public void testTrySetCount_whenAlreadySet(){
  final HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(10);
  assertFalse(latch.trySetCount(20));
  assertFalse(latch.trySetCount(100));
  assertFalse(latch.trySetCount(0));
  assertEquals(10,latch.getCount());
}","@Test public void testTrySetCount_whenAlreadySet(){
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(10);
  assertFalse(latch.trySetCount(20));
  assertFalse(latch.trySetCount(100));
  assertFalse(latch.trySetCount(0));
  assertEquals(10,latch.getCount());
}",0.9915730337078652
47969,"@Test(timeout=15000) public void testAwait_whenTimeOut() throws InterruptedException {
  final HazelcastInstance instance=createHazelcastInstance();
  final ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(1);
  long time=System.currentTimeMillis();
  assertFalse(latch.await(100,TimeUnit.MILLISECONDS));
  long elapsed=System.currentTimeMillis() - time;
  assertTrue(elapsed >= 100);
  assertEquals(1,latch.getCount());
}","@Test(timeout=15000) public void testAwait_whenTimeOut() throws InterruptedException {
  HazelcastInstance instance=createHazelcastInstance();
  ICountDownLatch latch=instance.getCountDownLatch(randomString());
  latch.trySetCount(1);
  long time=System.currentTimeMillis();
  assertFalse(latch.await(100,TimeUnit.MILLISECONDS));
  long elapsed=System.currentTimeMillis() - time;
  assertTrue(elapsed >= 100);
  assertEquals(1,latch.getCount());
}",0.9867549668874172
47970,"public void run(){
  try {
    lock.lock();
    syncLatch.countDown();
    condition.await();
    latch.countDown();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    lock.unlock();
  }
}","public void run(){
  lock.lock();
  try {
    awaitLatch.countDown();
    condition.await();
    if (lock.isLockedByCurrentThread()) {
      count.incrementAndGet();
    }
  }
 catch (  InterruptedException ignored) {
  }
 finally {
    lock.unlock();
    finalLatch.countDown();
  }
}",0.4189723320158103
47971,"@Test(timeout=60000,expected=IllegalMonitorStateException.class) public void testAwait_whenOwnedByOtherThread() throws InterruptedException {
  HazelcastInstance instance=createHazelcastInstance();
  final ILock lock=instance.getLock(randomString());
  final ICondition condition=lock.newCondition(randomString());
  final CountDownLatch latch=new CountDownLatch(1);
  new Thread(new Runnable(){
    @Override public void run(){
      lock.lock();
      latch.countDown();
    }
  }
).start();
  latch.await();
  condition.await();
}","@Test(timeout=60000,expected=IllegalMonitorStateException.class) public void testAwait_whenOwnedByOtherThread() throws InterruptedException {
  HazelcastInstance instance=createHazelcastInstance();
  final ILock lock=instance.getLock(randomString());
  final ICondition condition=lock.newCondition(randomString());
  final CountDownLatch latch=new CountDownLatch(1);
  new TestThread(){
    @Override public void doRun(){
      lock.lock();
      latch.countDown();
    }
  }
.start();
  latch.await();
  condition.await();
}",0.9697542533081286
47972,"private Thread createThreadWaitsForCondition(final CountDownLatch latch,final ILock lock,final ICondition condition,final CountDownLatch syncLatch){
  Thread t=new Thread(new Runnable(){
    public void run(){
      try {
        lock.lock();
        syncLatch.countDown();
        condition.await();
        latch.countDown();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
 finally {
        lock.unlock();
      }
    }
  }
);
  return t;
}","private TestThread createThreadWaitsForCondition(final CountDownLatch latch,final ILock lock,final ICondition condition,final CountDownLatch syncLatch){
  TestThread t=new TestThread(){
    public void doRun() throws Exception {
      try {
        lock.lock();
        syncLatch.countDown();
        condition.await();
        latch.countDown();
      }
  finally {
        lock.unlock();
      }
    }
  }
;
  return t;
}",0.588495575221239
47973,"@Override public final void run(){
  try {
    startLatch.await();
    doRun();
  }
 catch (  Throwable t) {
    if (stopOnError) {
      stopTest=true;
    }
    t.printStackTrace();
    this.error=t;
  }
}","@Override public void run() throws Exception {
  assertEquals(""String_Node_Str"",expectedSize,instance.getCluster().getMembers().size());
}",0.272463768115942
47974,"public MergePolicyProvider(NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  mergePolicyMap=new ConcurrentHashMap<String,MapMergePolicy>();
  addMergePolicies();
}","public MergePolicyProvider(NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  mergePolicyMap=new ConcurrentHashMap<String,MapMergePolicy>();
  addOutOfBoxPolicies();
}",0.9618768328445748
47975,"public MapMergePolicy getMergePolicy(String mergePolicyName){
  MapMergePolicy mergePolicy=mergePolicyMap.get(mergePolicyName);
  if (mergePolicy == null && mergePolicyName != null) {
    try {
      mergePolicy=ClassLoaderUtil.newInstance(nodeEngine.getConfigClassLoader(),mergePolicyName);
      mergePolicyMap.put(mergePolicyName,mergePolicy);
    }
 catch (    Exception e) {
      nodeEngine.getLogger(getClass()).severe(e);
      throw ExceptionUtil.rethrow(e);
    }
  }
  if (mergePolicy == null) {
    return mergePolicyMap.get(MapConfig.DEFAULT_MAP_MERGE_POLICY);
  }
  return mergePolicy;
}","public MapMergePolicy getMergePolicy(String className){
  if (className == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return ConcurrencyUtil.getOrPutIfAbsent(mergePolicyMap,className,policyConstructorFunction);
}",0.2288438617401668
47976,"@edu.umd.cs.findbugs.annotations.SuppressWarnings(""String_Node_Str"") void heartBeatingFailed(){
  failedHeartBeat++;
  if (failedHeartBeat == connectionManager.getMaxFailedHeartbeatCount()) {
    connectionManager.onDetectingUnresponsiveConnection(this);
    final Iterator<ClientCallFuture> iterator=eventHandlerMap.values().iterator();
    final TargetDisconnectedException response=new TargetDisconnectedException(remoteEndpoint);
    while (iterator.hasNext()) {
      final ClientCallFuture future=iterator.next();
      iterator.remove();
      future.notify(response);
    }
  }
}","@edu.umd.cs.findbugs.annotations.SuppressWarnings(""String_Node_Str"") void heartBeatingFailed(){
  failedHeartBeat++;
  final int maxFailedHeartbeatCount=connectionManager.getMaxFailedHeartbeatCount();
  logger.warning(""String_Node_Str"" + getRemoteEndpoint() + ""String_Node_Str""+ ""String_Node_Str""+ failedHeartBeat+ ""String_Node_Str""+ maxFailedHeartbeatCount);
  if (failedHeartBeat == maxFailedHeartbeatCount) {
    connectionManager.onDetectingUnresponsiveConnection(this);
    final Iterator<ClientCallFuture> iterator=eventHandlerMap.values().iterator();
    final TargetDisconnectedException response=new TargetDisconnectedException(remoteEndpoint);
    while (iterator.hasNext()) {
      final ClientCallFuture future=iterator.next();
      iterator.remove();
      future.notify(response);
    }
  }
}",0.8077474892395983
47977,"private void sendInternal(ClientCallFuture future,ClientConnection connection,int partitionId){
  connection.registerCallId(future);
  future.setConnection(connection);
  final SerializationService ss=client.getSerializationService();
  final Data data=ss.toData(future.getRequest());
  Packet packet=new Packet(data,partitionId,ss.getPortableContext());
  if (!connection.write(packet)) {
    final int callId=future.getRequest().getCallId();
    connection.deRegisterCallId(callId);
    connection.deRegisterEventHandler(callId);
    future.notify(new TargetNotMemberException(""String_Node_Str"" + connection.getRemoteEndpoint()));
  }
}","private void sendInternal(ClientCallFuture future,ClientConnection connection,int partitionId){
  connection.registerCallId(future);
  future.setConnection(connection);
  final SerializationService ss=client.getSerializationService();
  final ClientRequest request=future.getRequest();
  final Data data=ss.toData(request);
  Packet packet=new Packet(data,partitionId,ss.getPortableContext());
  if (!isAllowedToSendRequest(connection,request) || !connection.write(packet)) {
    final int callId=request.getCallId();
    connection.deRegisterCallId(callId);
    connection.deRegisterEventHandler(callId);
    future.notify(new TargetNotMemberException(""String_Node_Str"" + connection.getRemoteEndpoint()));
  }
}",0.8903703703703704
47978,"private void doRun(){
  for (; ; ) {
    Packet task;
    try {
      task=workQueue.take();
    }
 catch (    InterruptedException e) {
      if (isShutdown) {
        return;
      }
      continue;
    }
    if (isShutdown) {
      return;
    }
    process(task);
  }
}","private void doRun(){
  while (true) {
    Packet task;
    try {
      task=workQueue.take();
    }
 catch (    InterruptedException e) {
      if (isShutdown) {
        return;
      }
      continue;
    }
    if (isShutdown) {
      return;
    }
    process(task);
  }
}",0.9635036496350364
47979,"@Override public Portable create(int classId){
  Portable portable;
switch (classId) {
case ClientPortableHook.GENERIC_ERROR:
    portable=new GenericError();
  break;
case ClientPortableHook.AUTH:
portable=new AuthenticationRequest();
break;
case ClientPortableHook.PRINCIPAL:
portable=new ClientPrincipal();
break;
case ClientPortableHook.GET_DISTRIBUTED_OBJECT_INFO:
portable=new GetDistributedObjectsRequest();
break;
case ClientPortableHook.DISTRIBUTED_OBJECT_INFO:
portable=new DistributedObjectInfo();
break;
case ClientPortableHook.CREATE_PROXY:
portable=new ClientCreateRequest();
break;
case ClientPortableHook.DESTROY_PROXY:
portable=new ClientDestroyRequest();
break;
case ClientPortableHook.LISTENER:
portable=new DistributedObjectListenerRequest();
break;
case ClientPortableHook.MEMBERSHIP_LISTENER:
portable=new AddMembershipListenerRequest();
break;
case ClientPortableHook.CLIENT_PING:
portable=new ClientPingRequest();
break;
case ClientPortableHook.GET_PARTITIONS:
portable=new GetPartitionsRequest();
break;
case ClientPortableHook.REMOVE_LISTENER:
portable=new RemoveDistributedObjectListenerRequest();
break;
default :
portable=null;
}
return portable;
}","@Override public Portable create(int classId){
  Portable portable;
switch (classId) {
case ClientPortableHook.GENERIC_ERROR:
    portable=new GenericError();
  break;
case ClientPortableHook.AUTH:
portable=new AuthenticationRequest();
break;
case ClientPortableHook.PRINCIPAL:
portable=new ClientPrincipal();
break;
case ClientPortableHook.GET_DISTRIBUTED_OBJECT_INFO:
portable=new GetDistributedObjectsRequest();
break;
case ClientPortableHook.DISTRIBUTED_OBJECT_INFO:
portable=new DistributedObjectInfo();
break;
case ClientPortableHook.CREATE_PROXY:
portable=new ClientCreateRequest();
break;
case ClientPortableHook.DESTROY_PROXY:
portable=new ClientDestroyRequest();
break;
case ClientPortableHook.LISTENER:
portable=new DistributedObjectListenerRequest();
break;
case ClientPortableHook.MEMBERSHIP_LISTENER:
portable=new AddMembershipListenerRequest();
break;
case ClientPortableHook.CLIENT_PING:
portable=new ClientPingRequest();
break;
case ClientPortableHook.GET_PARTITIONS:
portable=new GetPartitionsRequest();
break;
case ClientPortableHook.REMOVE_LISTENER:
portable=new RemoveDistributedObjectListenerRequest();
break;
case ClientPortableHook.REMOVE_ALL_LISTENERS:
portable=new RemoveAllListeners();
break;
default :
portable=null;
}
return portable;
}",0.963963963963964
47980,"@Override public ClientProxy create(String id){
  String instanceName=client.getName();
  return instantiateClientProxy(proxyType,serviceName,id);
}","@Override public ClientProxy create(String id){
  return instantiateClientProxy(proxyType,serviceName,id);
}",0.84375
47981,"public void register(final String serviceName,final Class<? extends ClientProxy> proxyType){
  try {
    register(serviceName,new ClientProxyFactory(){
      @Override public ClientProxy create(      String id){
        String instanceName=client.getName();
        return instantiateClientProxy(proxyType,serviceName,id);
      }
    }
);
  }
 catch (  Exception e) {
    throw new HazelcastException(""String_Node_Str"",e);
  }
}","public void register(final String serviceName,final Class<? extends ClientProxy> proxyType){
  try {
    register(serviceName,new ClientProxyFactory(){
      @Override public ClientProxy create(      String id){
        return instantiateClientProxy(proxyType,serviceName,id);
      }
    }
);
  }
 catch (  Exception e) {
    throw new HazelcastException(""String_Node_Str"",e);
  }
}",0.9433497536945812
47982,"public static void enforcePartitionTableWarmup(MapReduceService mapReduceService) throws TimeoutException {
  InternalPartitionService partitionService=mapReduceService.getNodeEngine().getPartitionService();
  InternalPartition[] partitions=partitionService.getPartitions();
  long startTime=Clock.currentTimeMillis();
  for (  InternalPartition partition : partitions) {
    while (partitionService.getPartition(partition.getPartitionId(),true).getOwnerOrNull() == null) {
      try {
        Thread.sleep(RETRY_PARTITION_TABLE_MILLIS);
      }
 catch (      Exception ignore) {
        EmptyStatement.ignore(ignore);
      }
      if (Clock.currentTimeMillis() - startTime > PARTITION_READY_TIMEOUT) {
        throw new TimeoutException(""String_Node_Str"");
      }
    }
  }
}","public static void enforcePartitionTableWarmup(MapReduceService mapReduceService) throws TimeoutException {
  InternalPartitionService partitionService=mapReduceService.getNodeEngine().getPartitionService();
  InternalPartition[] partitions=partitionService.getPartitions();
  long startTime=Clock.currentTimeMillis();
  for (  InternalPartition partition : partitions) {
    while (partitionService.getPartition(partition.getPartitionId()).getOwner() == null) {
      try {
        Thread.sleep(RETRY_PARTITION_TABLE_MILLIS);
      }
 catch (      Exception ignore) {
        Logger.getLogger(MapReduceUtil.class).finest(ignore);
      }
      if (Clock.currentTimeMillis() - startTime > PARTITION_READY_TIMEOUT) {
        throw new TimeoutException(""String_Node_Str"");
      }
    }
  }
}",0.951530612244898
47983,"private void setTestSizeEstimator(IMap map,final long oneEntryHeapCostInMegaBytes){
  final MapProxyImpl mapProxy=(MapProxyImpl)map;
  final MapService mapService=mapProxy.getService();
  final NodeEngine nodeEngine=mapService.getNodeEngine();
  final InternalPartitionService partitionService=nodeEngine.getPartitionService();
  for (int i=0; i < partitionService.getPartitionCount(); i++) {
    final Address owner=partitionService.getPartitionOwner(i);
    if (nodeEngine.getThisAddress().equals(owner)) {
      final PartitionContainer container=mapService.getPartitionContainer(i);
      if (container == null) {
        continue;
      }
      final RecordStore recordStore=container.getRecordStore(map.getName());
      final DefaultRecordStore defaultRecordStore=(DefaultRecordStore)recordStore;
      defaultRecordStore.setSizeEstimator(new SizeEstimator(){
        long size;
        @Override public long getSize(){
          return size;
        }
        @Override public void add(        long size){
          this.size+=size;
        }
        @Override public long getCost(        Object record){
          return convertMegaBytesToBytes(oneEntryHeapCostInMegaBytes);
        }
        @Override public void reset(){
          size=0;
        }
      }
);
    }
  }
}","private void setTestSizeEstimator(IMap map,final long oneEntryHeapCostInMegaBytes){
  final MapProxyImpl mapProxy=(MapProxyImpl)map;
  final MapService mapService=(MapService)mapProxy.getService();
  final NodeEngine nodeEngine=mapService.getNodeEngine();
  final InternalPartitionService partitionService=nodeEngine.getPartitionService();
  for (int i=0; i < partitionService.getPartitionCount(); i++) {
    final Address owner=partitionService.getPartitionOwner(i);
    if (nodeEngine.getThisAddress().equals(owner)) {
      final PartitionContainer container=mapService.getPartitionContainer(i);
      if (container == null) {
        continue;
      }
      final RecordStore recordStore=container.getRecordStore(map.getName());
      final DefaultRecordStore defaultRecordStore=(DefaultRecordStore)recordStore;
      defaultRecordStore.setSizeEstimator(new SizeEstimator(){
        long size;
        @Override public long getSize(){
          return size;
        }
        @Override public void add(        long size){
          this.size+=size;
        }
        @Override public long getCost(        Object record){
          return convertMegaBytesToBytes(oneEntryHeapCostInMegaBytes);
        }
        @Override public void reset(){
          size=0;
        }
      }
);
    }
  }
}",0.9953452288595812
47984,"protected Config buildConfig(){
  Config config=new XmlConfigBuilder().build();
  config.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true).addMember(""String_Node_Str"");
  return config;
}","protected Config buildConfig(){
  Config config=new XmlConfigBuilder().build();
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true).addMember(""String_Node_Str"");
  return config;
}",0.8368200836820083
47985,"public void setCountDirect(String name,int count){
  if (count <= 0) {
    latches.remove(name);
  }
 else {
    CountDownLatchInfo latch=latches.get(name);
    if (latch == null) {
      latch=new CountDownLatchInfo(name);
      latches.put(name,latch);
    }
    latch.setCountDirect(count);
  }
}","public void setCountDirect(String name,int count){
  if (count < 0) {
    latches.remove(name);
  }
 else {
    CountDownLatchInfo latch=latches.get(name);
    if (latch == null) {
      latch=new CountDownLatchInfo(name);
      latches.put(name,latch);
    }
    latch.setCountDirect(count);
  }
}",0.998324958123953
47986,"public boolean setCount(String name,int count){
  if (count <= 0) {
    latches.remove(name);
    return false;
  }
 else {
    CountDownLatchInfo latch=latches.get(name);
    if (latch == null) {
      latch=new CountDownLatchInfo(name);
      latches.put(name,latch);
    }
    return latch.setCount(count);
  }
}","public boolean setCount(String name,int count){
  if (count < 0) {
    latches.remove(name);
    return false;
  }
 else {
    CountDownLatchInfo latch=latches.get(name);
    if (latch == null) {
      latch=new CountDownLatchInfo(name);
      latches.put(name,latch);
    }
    return latch.setCount(count);
  }
}",0.9984101748807632
47987,"@Override public int drainTo(Collection<? super E> objects,int i){
  final NodeEngine nodeEngine=getNodeEngine();
  if (this.equals(objects)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Collection<Data> dataList=drainInternal(i);
  for (  Data data : dataList) {
    E e=nodeEngine.toObject(data);
    objects.add(e);
  }
  return dataList.size();
}","@Override public int drainTo(Collection<? super E> objects,int i){
  final NodeEngine nodeEngine=getNodeEngine();
  throwExceptionIfNull(objects,""String_Node_Str"");
  if (this.equals(objects)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Collection<Data> dataList=drainInternal(i);
  for (  Data data : dataList) {
    E e=nodeEngine.toObject(data);
    objects.add(e);
  }
  return dataList.size();
}",0.789937106918239
47988,"protected void throwExceptionIfNull(Object o){
  if (o == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
}","protected void throwExceptionIfNull(Object o,String message){
  if (o == null) {
    throw new NullPointerException(message);
  }
}",0.8638132295719845
47989,"@Test public void testDrainToWithMaxElement_whenCollectionNull(){
  IQueue<String> queue=newQueue();
  for (int i=0; i < 10; i++) {
    queue.offer(""String_Node_Str"" + i);
  }
  try {
    queue.drainTo(null,4);
    fail();
  }
 catch (  NullPointerException expected) {
  }
  assertEquals(6,queue.size());
}","@Test public void testDrainToWithMaxElement_whenCollectionNull(){
  IQueue<String> queue=newQueue();
  for (int i=0; i < 10; i++) {
    queue.offer(""String_Node_Str"" + i);
  }
  try {
    queue.drainTo(null,4);
    fail();
  }
 catch (  NullPointerException expected) {
  }
  assertEquals(10,queue.size());
}",0.9951219512195122
47990,"@Test public void testPollWithTimeout() throws Exception {
  final IQueue<String> queue=newQueue();
  PollThread pollThread=new PollThread(queue);
  pollThread.start();
  assertTrue(queue.offer(""String_Node_Str""));
  assertSizeEventually(0,queue);
}","@Test public void testPollWithTimeout() throws Exception {
  final IQueue<String> queue=newQueue();
  PollThread pollThread=new PollThread(queue);
  pollThread.start();
  queue.offer(""String_Node_Str"");
  queue.offer(""String_Node_Str"");
  assertSizeEventually(1,queue);
  assertTrue(queue.contains(""String_Node_Str""));
}",0.8330404217926186
47991,"@Test public void testDrainTo_whenCollectionNull(){
  IQueue<String> queue=newQueue();
  for (int i=0; i < 10; i++) {
    queue.offer(""String_Node_Str"" + i);
  }
  try {
    queue.drainTo(null);
    fail();
  }
 catch (  NullPointerException expected) {
  }
  assertEquals(0,queue.size());
}","@Test public void testDrainTo_whenCollectionNull(){
  IQueue<String> queue=newQueue();
  for (int i=0; i < 10; i++) {
    queue.offer(""String_Node_Str"" + i);
  }
  try {
    queue.drainTo(null);
    fail();
  }
 catch (  NullPointerException expected) {
  }
  assertEquals(10,queue.size());
}",0.9982847341337908
47992,"@Test @Category(ProblematicTest.class) public void dropedEntryProcessorTest_withKeyOwningNodeTermination() throws ExecutionException, InterruptedException {
  String mapName=randomString();
  Config cfg=new Config();
  cfg.getMapConfig(mapName).setInMemoryFormat(InMemoryFormat.OBJECT);
  final int maxIterations=50;
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(maxIterations + 1);
  HazelcastInstance instance1=factory.newHazelcastInstance(cfg);
  for (int iteration=0; iteration < maxIterations; iteration++) {
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str"");
    HazelcastInstance instance2=factory.newHazelcastInstance(cfg);
    final int maxTasks=20;
    final Object key=generateKeyOwnedBy(instance2);
    final IMap<Object,List<Integer>> processorMap=instance1.getMap(mapName);
    processorMap.put(key,new ArrayList<Integer>());
    for (int i=0; i < maxTasks; i++) {
      processorMap.submitToKey(key,new SimpleEntryProcessor(i));
      if (i == maxTasks / 2) {
        instance2.getLifecycleService().terminate();
      }
    }
    assertTrueEventually(new AssertTask(){
      public void run() throws Exception {
        List<Integer> actualOrder=processorMap.get(key);
        assertTrue(""String_Node_Str"",actualOrder.size() >= maxTasks);
      }
    }
);
  }
}","@Test public void dropedEntryProcessorTest_withKeyOwningNodeTermination() throws ExecutionException, InterruptedException {
  String mapName=randomString();
  Config cfg=new Config();
  cfg.getMapConfig(mapName).setInMemoryFormat(InMemoryFormat.OBJECT);
  final int maxIterations=50;
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(maxIterations + 1);
  HazelcastInstance instance1=factory.newHazelcastInstance(cfg);
  for (int iteration=0; iteration < maxIterations; iteration++) {
    HazelcastInstance instance2=factory.newHazelcastInstance(cfg);
    final int maxTasks=20;
    final Object key=generateKeyOwnedBy(instance2);
    final IMap<Object,List<Integer>> processorMap=instance1.getMap(mapName);
    processorMap.put(key,new ArrayList<Integer>());
    for (int i=0; i < maxTasks; i++) {
      processorMap.submitToKey(key,new SimpleEntryProcessor(i));
      if (i == maxTasks / 2) {
        instance2.getLifecycleService().shutdown();
      }
    }
    assertTrueEventually(new AssertTask(){
      public void run() throws Exception {
        List<Integer> actualOrder=processorMap.get(key);
        assertTrue(""String_Node_Str"",actualOrder.size() >= maxTasks);
      }
    }
,30);
  }
}",0.949685534591195
47993,"@Override public Object process(Map.Entry<Object,List<Integer>> entry){
  List l=entry.getValue();
  l.add(id);
  if (backup) {
    System.out.print(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + l + ""String_Node_Str""+ l.size()+ ""String_Node_Str""+ id);
  return id;
}","@Override public Object process(Map.Entry<Object,List<Integer>> entry){
  List<Integer> list=entry.getValue();
  list.add(id);
  LockSupport.parkNanos((long)(Math.random() * 10000));
  entry.setValue(list);
  return id;
}",0.4150197628458498
47994,"@Override public void readData(ObjectDataInput in) throws IOException {
  id=in.readObject();
}","@Override public void readData(ObjectDataInput in) throws IOException {
  id=in.readInt();
}",0.962566844919786
47995,"@Override public void processBackup(Map.Entry entry){
  backup=true;
  process(entry);
}","@Override public void processBackup(Map.Entry<Object,List<Integer>> entry){
  process(entry);
}",0.7978142076502732
47996,"@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeObject(id);
}","@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeInt(id);
}",0.964102564102564
47997,"@Override public boolean delete(Data dataKey){
  checkIfLoaded();
  Record record=records.get(dataKey);
  Object oldValue=null;
  if (record == null) {
    if (mapContainer.getStore() != null) {
      removeIndex(dataKey);
      mapStoreDelete(null,dataKey);
    }
  }
 else {
    removeRecord(dataKey,record);
  }
  return oldValue != null;
}","@Override public boolean delete(Data dataKey){
  checkIfLoaded();
  Record record=records.get(dataKey);
  if (record == null) {
    if (mapContainer.getStore() != null) {
      removeIndex(dataKey);
      mapStoreDelete(null,dataKey);
    }
  }
 else {
    return removeRecord(dataKey,record) != null;
  }
  return false;
}",0.90990990990991
47998,"@Override public final Thread newThread(Runnable r){
  final Thread t=createThread(r);
  ClassLoader cl=classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader();
  t.setContextClassLoader(cl);
  if (t.isDaemon()) {
    t.setDaemon(false);
  }
  if (t.getPriority() != Thread.NORM_PRIORITY) {
    t.setPriority(Thread.NORM_PRIORITY);
  }
  return t;
}","@Override public final Thread newThread(Runnable r){
  final Thread t=createThread(r);
  t.setContextClassLoader(classLoader);
  if (t.getContextClassLoader() == null) {
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    if (cl == null) {
      cl=getClass().getClassLoader();
    }
    if (cl == null) {
      cl=ClassLoader.getSystemClassLoader();
    }
    t.setContextClassLoader(cl);
  }
  if (t.isDaemon()) {
    t.setDaemon(false);
  }
  if (t.getPriority() != Thread.NORM_PRIORITY) {
    t.setPriority(Thread.NORM_PRIORITY);
  }
  return t;
}",0.6173361522198731
47999,"@Override public final Thread newThread(Runnable r){
  final Thread t=createThread(r);
  ClassLoader cl=classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader();
  t.setContextClassLoader(cl);
  if (t.isDaemon()) {
    t.setDaemon(false);
  }
  if (t.getPriority() != Thread.NORM_PRIORITY) {
    t.setPriority(Thread.NORM_PRIORITY);
  }
  return t;
}","@Override public final Thread newThread(Runnable r){
  final Thread t=createThread(r);
  t.setContextClassLoader(classLoader);
  if (t.getContextClassLoader() == null) {
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    if (cl == null) {
      cl=getClass().getClassLoader();
    }
    if (cl == null) {
      cl=ClassLoader.getSystemClassLoader();
    }
    t.setContextClassLoader(cl);
  }
  if (t.isDaemon()) {
    t.setDaemon(false);
  }
  if (t.getPriority() != Thread.NORM_PRIORITY) {
    t.setPriority(Thread.NORM_PRIORITY);
  }
  return t;
}",0.6173361522198731
48000,"public final Thread newThread(Runnable r){
  final Thread t=createThread(r);
  ClassLoader cl=classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader();
  t.setContextClassLoader(cl);
  if (t.isDaemon()) {
    t.setDaemon(false);
  }
  if (t.getPriority() != Thread.NORM_PRIORITY) {
    t.setPriority(Thread.NORM_PRIORITY);
  }
  return t;
}","public final Thread newThread(Runnable r){
  final Thread t=createThread(r);
  t.setContextClassLoader(classLoader);
  if (t.getContextClassLoader() == null) {
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    if (cl == null) {
      cl=getClass().getClassLoader();
    }
    if (cl == null) {
      cl=ClassLoader.getSystemClassLoader();
    }
    t.setContextClassLoader(cl);
  }
  if (t.isDaemon()) {
    t.setDaemon(false);
  }
  if (t.getPriority() != Thread.NORM_PRIORITY) {
    t.setPriority(Thread.NORM_PRIORITY);
  }
  return t;
}",0.6090712742980562
